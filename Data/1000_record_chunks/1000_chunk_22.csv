record_number,buggy_code,fixed_code,code_similarity
21001,"/** 
 * @deprecated replaced with <a href=""#engineSetParameter(java.security.spec.AlgorithmParameterSpec)"">
 */
@Override protected void engineSetParameter(String param,Object value){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * @deprecated
 */
@Override protected void engineSetParameter(String param,Object value){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.7832512315270936
21002,"/** 
 * Creates a group element for a curve from a given encoded point. <p> A point $(x,y)$ is encoded by storing $y$ in bit 0 to bit 254 and the sign of $x$ in bit 255. $x$ is recovered in the following way: <p><ul> <li>$x = sign(x) * \sqrt{(y^2 - 1) / (d * y^2 + 1)} = sign(x) * \sqrt{u / v}$ with $u = y^2 - 1$ and $v = d * y^2 + 1$. <li>Setting $β = (u * v^3) * (u * v^7)^{((q - 5) / 8)}$ one has $β^2 = \pm(u / v)$. <li>If $v * β = -u$ multiply $β$ with $i=\sqrt{-1}$. <li>Set $x := β$. <li>If $sign(x) \ne$ bit 255 of $s$ then negate $x$.
 * @param curve The curve.
 * @param s The encoded point.
 */
public GroupElement(final Curve curve,final byte[] s){
  FieldElement x, y, yy, u, v, v3, vxx, check;
  y=curve.getField().fromByteArray(s);
  yy=y.square();
  u=yy.subtractOne();
  v=yy.multiply(curve.getD()).addOne();
  v3=v.square().multiply(v);
  x=v3.square().multiply(v).multiply(u);
  x=x.pow22523();
  x=v3.multiply(u).multiply(x);
  vxx=x.square().multiply(v);
  check=vxx.subtract(u);
  if (check.isNonZero()) {
    check=vxx.add(u);
    if (check.isNonZero())     throw new IllegalArgumentException(""String_Node_Str"");
    x=x.multiply(curve.getI());
  }
  if ((x.isNegative() ? 1 : 0) != Utils.bit(s,curve.getField().getb() - 1)) {
    x=x.negate();
  }
  this.curve=curve;
  this.repr=Representation.P3;
  this.X=x;
  this.Y=y;
  this.Z=curve.getField().ONE;
  this.T=this.X.multiply(this.Y);
}","/** 
 * Creates a group element for a curve from a given encoded point. <p> A point $(x,y)$ is encoded by storing $y$ in bit 0 to bit 254 and the sign of $x$ in bit 255. $x$ is recovered in the following way: </p><ul> <li>$x = sign(x) * \sqrt{(y^2 - 1) / (d * y^2 + 1)} = sign(x) * \sqrt{u / v}$ with $u = y^2 - 1$ and $v = d * y^2 + 1$. <li>Setting $β = (u * v^3) * (u * v^7)^{((q - 5) / 8)}$ one has $β^2 = \pm(u / v)$. <li>If $v * β = -u$ multiply $β$ with $i=\sqrt{-1}$. <li>Set $x := β$. <li>If $sign(x) \ne$ bit 255 of $s$ then negate $x$. </ul>
 * @param curve The curve.
 * @param s The encoded point.
 */
public GroupElement(final Curve curve,final byte[] s){
  FieldElement x, y, yy, u, v, v3, vxx, check;
  y=curve.getField().fromByteArray(s);
  yy=y.square();
  u=yy.subtractOne();
  v=yy.multiply(curve.getD()).addOne();
  v3=v.square().multiply(v);
  x=v3.square().multiply(v).multiply(u);
  x=x.pow22523();
  x=v3.multiply(u).multiply(x);
  vxx=x.square().multiply(v);
  check=vxx.subtract(u);
  if (check.isNonZero()) {
    check=vxx.add(u);
    if (check.isNonZero())     throw new IllegalArgumentException(""String_Node_Str"");
    x=x.multiply(curve.getI());
  }
  if ((x.isNegative() ? 1 : 0) != Utils.bit(s,curve.getField().getb() - 1)) {
    x=x.negate();
  }
  this.curve=curve;
  this.repr=Representation.P3;
  this.X=x;
  this.Y=y;
  this.Z=curve.getField().ONE;
  this.T=this.X.multiply(this.Y);
}",0.9975308641975308
21003,"/** 
 * $h = a * B$ where $a = a[0]+256*a[1]+\dots+256^{31} a[31]$ and $B$ is this point. If its lookup table has not been precomputed, it will be at the start of the method (and cached for later calls). Constant time. <p> Preconditions: (TODO: Check this applies here) $a[31] <= 127$
 * @param a $= a[0]+256*a[1]+\dots+256^{31} a[31]$
 * @return the GroupElement
 */
public GroupElement scalarMultiply(final byte[] a){
  GroupElement t;
  int i;
  final byte[] e=toRadix16(a);
  GroupElement h=this.curve.getZero(Representation.P3);
synchronized (this) {
    for (i=1; i < 64; i+=2) {
      t=select(i / 2,e[i]);
      h=h.madd(t).toP3();
    }
    h=h.dbl().toP2().dbl().toP2().dbl().toP2().dbl().toP3();
    for (i=0; i < 64; i+=2) {
      t=select(i / 2,e[i]);
      h=h.madd(t).toP3();
    }
  }
  return h;
}","/** 
 * $h = a * B$ where $a = a[0]+256*a[1]+\dots+256^{31} a[31]$ and $B$ is this point. If its lookup table has not been precomputed, it will be at the start of the method (and cached for later calls). Constant time. <p> Preconditions: (TODO: Check this applies here) $a[31] \le 127$
 * @param a $= a[0]+256*a[1]+\dots+256^{31} a[31]$
 * @return the GroupElement
 */
public GroupElement scalarMultiply(final byte[] a){
  GroupElement t;
  int i;
  final byte[] e=toRadix16(a);
  GroupElement h=this.curve.getZero(Representation.P3);
synchronized (this) {
    for (i=1; i < 64; i+=2) {
      t=select(i / 2,e[i]);
      h=h.madd(t).toP3();
    }
    h=h.dbl().toP2().dbl().toP2().dbl().toP2().dbl().toP3();
    for (i=0; i < 64; i+=2) {
      t=select(i / 2,e[i]);
      h=h.madd(t).toP3();
    }
  }
  return h;
}",0.9969306322897484
21004,"/** 
 * $h = f + g$ <p> TODO-CR BR: $h$ is allocated via new, probably not a good idea. Do we need the copying into temp variables if we do that? <p> Preconditions: <p><ul> <li>$|f|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. <li>$|g|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. </ul><p> Postconditions: <p><ul> <li>$|h|$ bounded by $1.1*2^{26},1.1*2^{25},1.1*2^{26},1.1*2^{25},$ etc.
 * @param val The field element to add.
 * @return The field element this + val.
 */
public FieldElement add(FieldElement val){
  int[] g=((Ed25519FieldElement)val).t;
  int[] h=new int[10];
  for (int i=0; i < 10; i++) {
    h[i]=t[i] + g[i];
  }
  return new Ed25519FieldElement(f,h);
}","/** 
 * $h = f + g$ <p> TODO-CR BR: $h$ is allocated via new, probably not a good idea. Do we need the copying into temp variables if we do that? <p> Preconditions: </p><ul> <li>$|f|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. <li>$|g|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. </ul><p> Postconditions: </p><ul> <li>$|h|$ bounded by $1.1*2^{26},1.1*2^{25},1.1*2^{26},1.1*2^{25},$ etc. </ul>
 * @param val The field element to add.
 * @return The field element this + val.
 */
public FieldElement add(FieldElement val){
  int[] g=((Ed25519FieldElement)val).t;
  int[] h=new int[10];
  for (int i=0; i < 10; i++) {
    h[i]=t[i] + g[i];
  }
  return new Ed25519FieldElement(f,h);
}",0.99442119944212
21005,"/** 
 * $h = f - g$ <p> Can overlap $h$ with $f$ or $g$. <p> TODO-CR BR: See above. <p> Preconditions: <p><ul> <li>$|f|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. <li>$|g|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. </ul><p> Postconditions: <p><ul> <li>$|h|$ bounded by $1.1*2^{26},1.1*2^{25},1.1*2^{26},1.1*2^{25},$ etc.
 * @param val The field element to subtract.
 * @return The field element this - val.
 */
public FieldElement subtract(FieldElement val){
  int[] g=((Ed25519FieldElement)val).t;
  int[] h=new int[10];
  for (int i=0; i < 10; i++) {
    h[i]=t[i] - g[i];
  }
  return new Ed25519FieldElement(f,h);
}","/** 
 * $h = f - g$ <p> Can overlap $h$ with $f$ or $g$. <p> TODO-CR BR: See above. <p> Preconditions: </p><ul> <li>$|f|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. <li>$|g|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. </ul><p> Postconditions: </p><ul> <li>$|h|$ bounded by $1.1*2^{26},1.1*2^{25},1.1*2^{26},1.1*2^{25},$ etc. </ul>
 * @param val The field element to subtract.
 * @return The field element this - val.
 */
public FieldElement subtract(FieldElement val){
  int[] g=((Ed25519FieldElement)val).t;
  int[] h=new int[10];
  for (int i=0; i < 10; i++) {
    h[i]=t[i] - g[i];
  }
  return new Ed25519FieldElement(f,h);
}",0.9939849624060152
21006,"/** 
 * $h = 2 * f * f$ <p> Can overlap $h$ with $f$. <p> Preconditions: <p><ul> <li>$|f|$ bounded by $1.65*2^{26},1.65*2^{25},1.65*2^{26},1.65*2^{25},$ etc. </ul><p> Postconditions: <p><ul> <li>$|h|$ bounded by $1.01*2^{25},1.01*2^{24},1.01*2^{25},1.01*2^{24},$ etc. </ul><p> See   {@link #multiply(FieldElement)} for discussionof implementation strategy.
 * @return The (reasonably reduced) square of this field element times 2.
 */
public FieldElement squareAndDouble(){
  int f0=t[0];
  int f1=t[1];
  int f2=t[2];
  int f3=t[3];
  int f4=t[4];
  int f5=t[5];
  int f6=t[6];
  int f7=t[7];
  int f8=t[8];
  int f9=t[9];
  int f0_2=2 * f0;
  int f1_2=2 * f1;
  int f2_2=2 * f2;
  int f3_2=2 * f3;
  int f4_2=2 * f4;
  int f5_2=2 * f5;
  int f6_2=2 * f6;
  int f7_2=2 * f7;
  int f5_38=38 * f5;
  int f6_19=19 * f6;
  int f7_38=38 * f7;
  int f8_19=19 * f8;
  int f9_38=38 * f9;
  long f0f0=f0 * (long)f0;
  long f0f1_2=f0_2 * (long)f1;
  long f0f2_2=f0_2 * (long)f2;
  long f0f3_2=f0_2 * (long)f3;
  long f0f4_2=f0_2 * (long)f4;
  long f0f5_2=f0_2 * (long)f5;
  long f0f6_2=f0_2 * (long)f6;
  long f0f7_2=f0_2 * (long)f7;
  long f0f8_2=f0_2 * (long)f8;
  long f0f9_2=f0_2 * (long)f9;
  long f1f1_2=f1_2 * (long)f1;
  long f1f2_2=f1_2 * (long)f2;
  long f1f3_4=f1_2 * (long)f3_2;
  long f1f4_2=f1_2 * (long)f4;
  long f1f5_4=f1_2 * (long)f5_2;
  long f1f6_2=f1_2 * (long)f6;
  long f1f7_4=f1_2 * (long)f7_2;
  long f1f8_2=f1_2 * (long)f8;
  long f1f9_76=f1_2 * (long)f9_38;
  long f2f2=f2 * (long)f2;
  long f2f3_2=f2_2 * (long)f3;
  long f2f4_2=f2_2 * (long)f4;
  long f2f5_2=f2_2 * (long)f5;
  long f2f6_2=f2_2 * (long)f6;
  long f2f7_2=f2_2 * (long)f7;
  long f2f8_38=f2_2 * (long)f8_19;
  long f2f9_38=f2 * (long)f9_38;
  long f3f3_2=f3_2 * (long)f3;
  long f3f4_2=f3_2 * (long)f4;
  long f3f5_4=f3_2 * (long)f5_2;
  long f3f6_2=f3_2 * (long)f6;
  long f3f7_76=f3_2 * (long)f7_38;
  long f3f8_38=f3_2 * (long)f8_19;
  long f3f9_76=f3_2 * (long)f9_38;
  long f4f4=f4 * (long)f4;
  long f4f5_2=f4_2 * (long)f5;
  long f4f6_38=f4_2 * (long)f6_19;
  long f4f7_38=f4 * (long)f7_38;
  long f4f8_38=f4_2 * (long)f8_19;
  long f4f9_38=f4 * (long)f9_38;
  long f5f5_38=f5 * (long)f5_38;
  long f5f6_38=f5_2 * (long)f6_19;
  long f5f7_76=f5_2 * (long)f7_38;
  long f5f8_38=f5_2 * (long)f8_19;
  long f5f9_76=f5_2 * (long)f9_38;
  long f6f6_19=f6 * (long)f6_19;
  long f6f7_38=f6 * (long)f7_38;
  long f6f8_38=f6_2 * (long)f8_19;
  long f6f9_38=f6 * (long)f9_38;
  long f7f7_38=f7 * (long)f7_38;
  long f7f8_38=f7_2 * (long)f8_19;
  long f7f9_76=f7_2 * (long)f9_38;
  long f8f8_19=f8 * (long)f8_19;
  long f8f9_38=f8 * (long)f9_38;
  long f9f9_38=f9 * (long)f9_38;
  long h0=f0f0 + f1f9_76 + f2f8_38+ f3f7_76+ f4f6_38+ f5f5_38;
  long h1=f0f1_2 + f2f9_38 + f3f8_38+ f4f7_38+ f5f6_38;
  long h2=f0f2_2 + f1f1_2 + f3f9_76+ f4f8_38+ f5f7_76+ f6f6_19;
  long h3=f0f3_2 + f1f2_2 + f4f9_38+ f5f8_38+ f6f7_38;
  long h4=f0f4_2 + f1f3_4 + f2f2+ f5f9_76+ f6f8_38+ f7f7_38;
  long h5=f0f5_2 + f1f4_2 + f2f3_2+ f6f9_38+ f7f8_38;
  long h6=f0f6_2 + f1f5_4 + f2f4_2+ f3f3_2+ f7f9_76+ f8f8_19;
  long h7=f0f7_2 + f1f6_2 + f2f5_2+ f3f4_2+ f8f9_38;
  long h8=f0f8_2 + f1f7_4 + f2f6_2+ f3f5_4+ f4f4+ f9f9_38;
  long h9=f0f9_2 + f1f8_2 + f2f7_2+ f3f6_2+ f4f5_2;
  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;
  h0+=h0;
  h1+=h1;
  h2+=h2;
  h3+=h3;
  h4+=h4;
  h5+=h5;
  h6+=h6;
  h7+=h7;
  h8+=h8;
  h9+=h9;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry1=(h1 + (long)(1 << 24)) >> 25;
  h2+=carry1;
  h1-=carry1 << 25;
  carry5=(h5 + (long)(1 << 24)) >> 25;
  h6+=carry5;
  h5-=carry5 << 25;
  carry2=(h2 + (long)(1 << 25)) >> 26;
  h3+=carry2;
  h2-=carry2 << 26;
  carry6=(h6 + (long)(1 << 25)) >> 26;
  h7+=carry6;
  h6-=carry6 << 26;
  carry3=(h3 + (long)(1 << 24)) >> 25;
  h4+=carry3;
  h3-=carry3 << 25;
  carry7=(h7 + (long)(1 << 24)) >> 25;
  h8+=carry7;
  h7-=carry7 << 25;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry8=(h8 + (long)(1 << 25)) >> 26;
  h9+=carry8;
  h8-=carry8 << 26;
  carry9=(h9 + (long)(1 << 24)) >> 25;
  h0+=carry9 * 19;
  h9-=carry9 << 25;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  int[] h=new int[10];
  h[0]=(int)h0;
  h[1]=(int)h1;
  h[2]=(int)h2;
  h[3]=(int)h3;
  h[4]=(int)h4;
  h[5]=(int)h5;
  h[6]=(int)h6;
  h[7]=(int)h7;
  h[8]=(int)h8;
  h[9]=(int)h9;
  return new Ed25519FieldElement(f,h);
}","/** 
 * $h = 2 * f * f$ <p> Can overlap $h$ with $f$. <p> Preconditions: </p><ul> <li>$|f|$ bounded by $1.65*2^{26},1.65*2^{25},1.65*2^{26},1.65*2^{25},$ etc. </ul><p> Postconditions: </p><ul> <li>$|h|$ bounded by $1.01*2^{25},1.01*2^{24},1.01*2^{25},1.01*2^{24},$ etc. </ul><p> See   {@link #multiply(FieldElement)} for discussionof implementation strategy.
 * @return The (reasonably reduced) square of this field element times 2.
 */
public FieldElement squareAndDouble(){
  int f0=t[0];
  int f1=t[1];
  int f2=t[2];
  int f3=t[3];
  int f4=t[4];
  int f5=t[5];
  int f6=t[6];
  int f7=t[7];
  int f8=t[8];
  int f9=t[9];
  int f0_2=2 * f0;
  int f1_2=2 * f1;
  int f2_2=2 * f2;
  int f3_2=2 * f3;
  int f4_2=2 * f4;
  int f5_2=2 * f5;
  int f6_2=2 * f6;
  int f7_2=2 * f7;
  int f5_38=38 * f5;
  int f6_19=19 * f6;
  int f7_38=38 * f7;
  int f8_19=19 * f8;
  int f9_38=38 * f9;
  long f0f0=f0 * (long)f0;
  long f0f1_2=f0_2 * (long)f1;
  long f0f2_2=f0_2 * (long)f2;
  long f0f3_2=f0_2 * (long)f3;
  long f0f4_2=f0_2 * (long)f4;
  long f0f5_2=f0_2 * (long)f5;
  long f0f6_2=f0_2 * (long)f6;
  long f0f7_2=f0_2 * (long)f7;
  long f0f8_2=f0_2 * (long)f8;
  long f0f9_2=f0_2 * (long)f9;
  long f1f1_2=f1_2 * (long)f1;
  long f1f2_2=f1_2 * (long)f2;
  long f1f3_4=f1_2 * (long)f3_2;
  long f1f4_2=f1_2 * (long)f4;
  long f1f5_4=f1_2 * (long)f5_2;
  long f1f6_2=f1_2 * (long)f6;
  long f1f7_4=f1_2 * (long)f7_2;
  long f1f8_2=f1_2 * (long)f8;
  long f1f9_76=f1_2 * (long)f9_38;
  long f2f2=f2 * (long)f2;
  long f2f3_2=f2_2 * (long)f3;
  long f2f4_2=f2_2 * (long)f4;
  long f2f5_2=f2_2 * (long)f5;
  long f2f6_2=f2_2 * (long)f6;
  long f2f7_2=f2_2 * (long)f7;
  long f2f8_38=f2_2 * (long)f8_19;
  long f2f9_38=f2 * (long)f9_38;
  long f3f3_2=f3_2 * (long)f3;
  long f3f4_2=f3_2 * (long)f4;
  long f3f5_4=f3_2 * (long)f5_2;
  long f3f6_2=f3_2 * (long)f6;
  long f3f7_76=f3_2 * (long)f7_38;
  long f3f8_38=f3_2 * (long)f8_19;
  long f3f9_76=f3_2 * (long)f9_38;
  long f4f4=f4 * (long)f4;
  long f4f5_2=f4_2 * (long)f5;
  long f4f6_38=f4_2 * (long)f6_19;
  long f4f7_38=f4 * (long)f7_38;
  long f4f8_38=f4_2 * (long)f8_19;
  long f4f9_38=f4 * (long)f9_38;
  long f5f5_38=f5 * (long)f5_38;
  long f5f6_38=f5_2 * (long)f6_19;
  long f5f7_76=f5_2 * (long)f7_38;
  long f5f8_38=f5_2 * (long)f8_19;
  long f5f9_76=f5_2 * (long)f9_38;
  long f6f6_19=f6 * (long)f6_19;
  long f6f7_38=f6 * (long)f7_38;
  long f6f8_38=f6_2 * (long)f8_19;
  long f6f9_38=f6 * (long)f9_38;
  long f7f7_38=f7 * (long)f7_38;
  long f7f8_38=f7_2 * (long)f8_19;
  long f7f9_76=f7_2 * (long)f9_38;
  long f8f8_19=f8 * (long)f8_19;
  long f8f9_38=f8 * (long)f9_38;
  long f9f9_38=f9 * (long)f9_38;
  long h0=f0f0 + f1f9_76 + f2f8_38+ f3f7_76+ f4f6_38+ f5f5_38;
  long h1=f0f1_2 + f2f9_38 + f3f8_38+ f4f7_38+ f5f6_38;
  long h2=f0f2_2 + f1f1_2 + f3f9_76+ f4f8_38+ f5f7_76+ f6f6_19;
  long h3=f0f3_2 + f1f2_2 + f4f9_38+ f5f8_38+ f6f7_38;
  long h4=f0f4_2 + f1f3_4 + f2f2+ f5f9_76+ f6f8_38+ f7f7_38;
  long h5=f0f5_2 + f1f4_2 + f2f3_2+ f6f9_38+ f7f8_38;
  long h6=f0f6_2 + f1f5_4 + f2f4_2+ f3f3_2+ f7f9_76+ f8f8_19;
  long h7=f0f7_2 + f1f6_2 + f2f5_2+ f3f4_2+ f8f9_38;
  long h8=f0f8_2 + f1f7_4 + f2f6_2+ f3f5_4+ f4f4+ f9f9_38;
  long h9=f0f9_2 + f1f8_2 + f2f7_2+ f3f6_2+ f4f5_2;
  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;
  h0+=h0;
  h1+=h1;
  h2+=h2;
  h3+=h3;
  h4+=h4;
  h5+=h5;
  h6+=h6;
  h7+=h7;
  h8+=h8;
  h9+=h9;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry1=(h1 + (long)(1 << 24)) >> 25;
  h2+=carry1;
  h1-=carry1 << 25;
  carry5=(h5 + (long)(1 << 24)) >> 25;
  h6+=carry5;
  h5-=carry5 << 25;
  carry2=(h2 + (long)(1 << 25)) >> 26;
  h3+=carry2;
  h2-=carry2 << 26;
  carry6=(h6 + (long)(1 << 25)) >> 26;
  h7+=carry6;
  h6-=carry6 << 26;
  carry3=(h3 + (long)(1 << 24)) >> 25;
  h4+=carry3;
  h3-=carry3 << 25;
  carry7=(h7 + (long)(1 << 24)) >> 25;
  h8+=carry7;
  h7-=carry7 << 25;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry8=(h8 + (long)(1 << 25)) >> 26;
  h9+=carry8;
  h8-=carry8 << 26;
  carry9=(h9 + (long)(1 << 24)) >> 25;
  h0+=carry9 * 19;
  h9-=carry9 << 25;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  int[] h=new int[10];
  h[0]=(int)h0;
  h[1]=(int)h1;
  h[2]=(int)h2;
  h[3]=(int)h3;
  h[4]=(int)h4;
  h[5]=(int)h5;
  h[6]=(int)h6;
  h[7]=(int)h7;
  h[8]=(int)h8;
  h[9]=(int)h9;
  return new Ed25519FieldElement(f,h);
}",0.999782324771441
21007,"/** 
 * $h = f * f$ <p> Can overlap $h$ with $f$. <p> Preconditions: <p><ul> <li>$|f|$ bounded by $1.65*2^{26},1.65*2^{25},1.65*2^{26},1.65*2^{25},$ etc. </ul><p> Postconditions: <p><ul> <li>$|h|$ bounded by $1.01*2^{25},1.01*2^{24},1.01*2^{25},1.01*2^{24},$ etc. </ul><p> See   {@link #multiply(FieldElement)} for discussionof implementation strategy.
 * @return The (reasonably reduced) square of this field element.
 */
public FieldElement square(){
  int f0=t[0];
  int f1=t[1];
  int f2=t[2];
  int f3=t[3];
  int f4=t[4];
  int f5=t[5];
  int f6=t[6];
  int f7=t[7];
  int f8=t[8];
  int f9=t[9];
  int f0_2=2 * f0;
  int f1_2=2 * f1;
  int f2_2=2 * f2;
  int f3_2=2 * f3;
  int f4_2=2 * f4;
  int f5_2=2 * f5;
  int f6_2=2 * f6;
  int f7_2=2 * f7;
  int f5_38=38 * f5;
  int f6_19=19 * f6;
  int f7_38=38 * f7;
  int f8_19=19 * f8;
  int f9_38=38 * f9;
  long f0f0=f0 * (long)f0;
  long f0f1_2=f0_2 * (long)f1;
  long f0f2_2=f0_2 * (long)f2;
  long f0f3_2=f0_2 * (long)f3;
  long f0f4_2=f0_2 * (long)f4;
  long f0f5_2=f0_2 * (long)f5;
  long f0f6_2=f0_2 * (long)f6;
  long f0f7_2=f0_2 * (long)f7;
  long f0f8_2=f0_2 * (long)f8;
  long f0f9_2=f0_2 * (long)f9;
  long f1f1_2=f1_2 * (long)f1;
  long f1f2_2=f1_2 * (long)f2;
  long f1f3_4=f1_2 * (long)f3_2;
  long f1f4_2=f1_2 * (long)f4;
  long f1f5_4=f1_2 * (long)f5_2;
  long f1f6_2=f1_2 * (long)f6;
  long f1f7_4=f1_2 * (long)f7_2;
  long f1f8_2=f1_2 * (long)f8;
  long f1f9_76=f1_2 * (long)f9_38;
  long f2f2=f2 * (long)f2;
  long f2f3_2=f2_2 * (long)f3;
  long f2f4_2=f2_2 * (long)f4;
  long f2f5_2=f2_2 * (long)f5;
  long f2f6_2=f2_2 * (long)f6;
  long f2f7_2=f2_2 * (long)f7;
  long f2f8_38=f2_2 * (long)f8_19;
  long f2f9_38=f2 * (long)f9_38;
  long f3f3_2=f3_2 * (long)f3;
  long f3f4_2=f3_2 * (long)f4;
  long f3f5_4=f3_2 * (long)f5_2;
  long f3f6_2=f3_2 * (long)f6;
  long f3f7_76=f3_2 * (long)f7_38;
  long f3f8_38=f3_2 * (long)f8_19;
  long f3f9_76=f3_2 * (long)f9_38;
  long f4f4=f4 * (long)f4;
  long f4f5_2=f4_2 * (long)f5;
  long f4f6_38=f4_2 * (long)f6_19;
  long f4f7_38=f4 * (long)f7_38;
  long f4f8_38=f4_2 * (long)f8_19;
  long f4f9_38=f4 * (long)f9_38;
  long f5f5_38=f5 * (long)f5_38;
  long f5f6_38=f5_2 * (long)f6_19;
  long f5f7_76=f5_2 * (long)f7_38;
  long f5f8_38=f5_2 * (long)f8_19;
  long f5f9_76=f5_2 * (long)f9_38;
  long f6f6_19=f6 * (long)f6_19;
  long f6f7_38=f6 * (long)f7_38;
  long f6f8_38=f6_2 * (long)f8_19;
  long f6f9_38=f6 * (long)f9_38;
  long f7f7_38=f7 * (long)f7_38;
  long f7f8_38=f7_2 * (long)f8_19;
  long f7f9_76=f7_2 * (long)f9_38;
  long f8f8_19=f8 * (long)f8_19;
  long f8f9_38=f8 * (long)f9_38;
  long f9f9_38=f9 * (long)f9_38;
  long h0=f0f0 + f1f9_76 + f2f8_38+ f3f7_76+ f4f6_38+ f5f5_38;
  long h1=f0f1_2 + f2f9_38 + f3f8_38+ f4f7_38+ f5f6_38;
  long h2=f0f2_2 + f1f1_2 + f3f9_76+ f4f8_38+ f5f7_76+ f6f6_19;
  long h3=f0f3_2 + f1f2_2 + f4f9_38+ f5f8_38+ f6f7_38;
  long h4=f0f4_2 + f1f3_4 + f2f2+ f5f9_76+ f6f8_38+ f7f7_38;
  long h5=f0f5_2 + f1f4_2 + f2f3_2+ f6f9_38+ f7f8_38;
  long h6=f0f6_2 + f1f5_4 + f2f4_2+ f3f3_2+ f7f9_76+ f8f8_19;
  long h7=f0f7_2 + f1f6_2 + f2f5_2+ f3f4_2+ f8f9_38;
  long h8=f0f8_2 + f1f7_4 + f2f6_2+ f3f5_4+ f4f4+ f9f9_38;
  long h9=f0f9_2 + f1f8_2 + f2f7_2+ f3f6_2+ f4f5_2;
  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry1=(h1 + (long)(1 << 24)) >> 25;
  h2+=carry1;
  h1-=carry1 << 25;
  carry5=(h5 + (long)(1 << 24)) >> 25;
  h6+=carry5;
  h5-=carry5 << 25;
  carry2=(h2 + (long)(1 << 25)) >> 26;
  h3+=carry2;
  h2-=carry2 << 26;
  carry6=(h6 + (long)(1 << 25)) >> 26;
  h7+=carry6;
  h6-=carry6 << 26;
  carry3=(h3 + (long)(1 << 24)) >> 25;
  h4+=carry3;
  h3-=carry3 << 25;
  carry7=(h7 + (long)(1 << 24)) >> 25;
  h8+=carry7;
  h7-=carry7 << 25;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry8=(h8 + (long)(1 << 25)) >> 26;
  h9+=carry8;
  h8-=carry8 << 26;
  carry9=(h9 + (long)(1 << 24)) >> 25;
  h0+=carry9 * 19;
  h9-=carry9 << 25;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  int[] h=new int[10];
  h[0]=(int)h0;
  h[1]=(int)h1;
  h[2]=(int)h2;
  h[3]=(int)h3;
  h[4]=(int)h4;
  h[5]=(int)h5;
  h[6]=(int)h6;
  h[7]=(int)h7;
  h[8]=(int)h8;
  h[9]=(int)h9;
  return new Ed25519FieldElement(f,h);
}","/** 
 * $h = f * f$ <p> Can overlap $h$ with $f$. <p> Preconditions: </p><ul> <li>$|f|$ bounded by $1.65*2^{26},1.65*2^{25},1.65*2^{26},1.65*2^{25},$ etc. </ul><p> Postconditions: </p><ul> <li>$|h|$ bounded by $1.01*2^{25},1.01*2^{24},1.01*2^{25},1.01*2^{24},$ etc. </ul><p> See   {@link #multiply(FieldElement)} for discussionof implementation strategy.
 * @return The (reasonably reduced) square of this field element.
 */
public FieldElement square(){
  int f0=t[0];
  int f1=t[1];
  int f2=t[2];
  int f3=t[3];
  int f4=t[4];
  int f5=t[5];
  int f6=t[6];
  int f7=t[7];
  int f8=t[8];
  int f9=t[9];
  int f0_2=2 * f0;
  int f1_2=2 * f1;
  int f2_2=2 * f2;
  int f3_2=2 * f3;
  int f4_2=2 * f4;
  int f5_2=2 * f5;
  int f6_2=2 * f6;
  int f7_2=2 * f7;
  int f5_38=38 * f5;
  int f6_19=19 * f6;
  int f7_38=38 * f7;
  int f8_19=19 * f8;
  int f9_38=38 * f9;
  long f0f0=f0 * (long)f0;
  long f0f1_2=f0_2 * (long)f1;
  long f0f2_2=f0_2 * (long)f2;
  long f0f3_2=f0_2 * (long)f3;
  long f0f4_2=f0_2 * (long)f4;
  long f0f5_2=f0_2 * (long)f5;
  long f0f6_2=f0_2 * (long)f6;
  long f0f7_2=f0_2 * (long)f7;
  long f0f8_2=f0_2 * (long)f8;
  long f0f9_2=f0_2 * (long)f9;
  long f1f1_2=f1_2 * (long)f1;
  long f1f2_2=f1_2 * (long)f2;
  long f1f3_4=f1_2 * (long)f3_2;
  long f1f4_2=f1_2 * (long)f4;
  long f1f5_4=f1_2 * (long)f5_2;
  long f1f6_2=f1_2 * (long)f6;
  long f1f7_4=f1_2 * (long)f7_2;
  long f1f8_2=f1_2 * (long)f8;
  long f1f9_76=f1_2 * (long)f9_38;
  long f2f2=f2 * (long)f2;
  long f2f3_2=f2_2 * (long)f3;
  long f2f4_2=f2_2 * (long)f4;
  long f2f5_2=f2_2 * (long)f5;
  long f2f6_2=f2_2 * (long)f6;
  long f2f7_2=f2_2 * (long)f7;
  long f2f8_38=f2_2 * (long)f8_19;
  long f2f9_38=f2 * (long)f9_38;
  long f3f3_2=f3_2 * (long)f3;
  long f3f4_2=f3_2 * (long)f4;
  long f3f5_4=f3_2 * (long)f5_2;
  long f3f6_2=f3_2 * (long)f6;
  long f3f7_76=f3_2 * (long)f7_38;
  long f3f8_38=f3_2 * (long)f8_19;
  long f3f9_76=f3_2 * (long)f9_38;
  long f4f4=f4 * (long)f4;
  long f4f5_2=f4_2 * (long)f5;
  long f4f6_38=f4_2 * (long)f6_19;
  long f4f7_38=f4 * (long)f7_38;
  long f4f8_38=f4_2 * (long)f8_19;
  long f4f9_38=f4 * (long)f9_38;
  long f5f5_38=f5 * (long)f5_38;
  long f5f6_38=f5_2 * (long)f6_19;
  long f5f7_76=f5_2 * (long)f7_38;
  long f5f8_38=f5_2 * (long)f8_19;
  long f5f9_76=f5_2 * (long)f9_38;
  long f6f6_19=f6 * (long)f6_19;
  long f6f7_38=f6 * (long)f7_38;
  long f6f8_38=f6_2 * (long)f8_19;
  long f6f9_38=f6 * (long)f9_38;
  long f7f7_38=f7 * (long)f7_38;
  long f7f8_38=f7_2 * (long)f8_19;
  long f7f9_76=f7_2 * (long)f9_38;
  long f8f8_19=f8 * (long)f8_19;
  long f8f9_38=f8 * (long)f9_38;
  long f9f9_38=f9 * (long)f9_38;
  long h0=f0f0 + f1f9_76 + f2f8_38+ f3f7_76+ f4f6_38+ f5f5_38;
  long h1=f0f1_2 + f2f9_38 + f3f8_38+ f4f7_38+ f5f6_38;
  long h2=f0f2_2 + f1f1_2 + f3f9_76+ f4f8_38+ f5f7_76+ f6f6_19;
  long h3=f0f3_2 + f1f2_2 + f4f9_38+ f5f8_38+ f6f7_38;
  long h4=f0f4_2 + f1f3_4 + f2f2+ f5f9_76+ f6f8_38+ f7f7_38;
  long h5=f0f5_2 + f1f4_2 + f2f3_2+ f6f9_38+ f7f8_38;
  long h6=f0f6_2 + f1f5_4 + f2f4_2+ f3f3_2+ f7f9_76+ f8f8_19;
  long h7=f0f7_2 + f1f6_2 + f2f5_2+ f3f4_2+ f8f9_38;
  long h8=f0f8_2 + f1f7_4 + f2f6_2+ f3f5_4+ f4f4+ f9f9_38;
  long h9=f0f9_2 + f1f8_2 + f2f7_2+ f3f6_2+ f4f5_2;
  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry1=(h1 + (long)(1 << 24)) >> 25;
  h2+=carry1;
  h1-=carry1 << 25;
  carry5=(h5 + (long)(1 << 24)) >> 25;
  h6+=carry5;
  h5-=carry5 << 25;
  carry2=(h2 + (long)(1 << 25)) >> 26;
  h3+=carry2;
  h2-=carry2 << 26;
  carry6=(h6 + (long)(1 << 25)) >> 26;
  h7+=carry6;
  h6-=carry6 << 26;
  carry3=(h3 + (long)(1 << 24)) >> 25;
  h4+=carry3;
  h3-=carry3 << 25;
  carry7=(h7 + (long)(1 << 24)) >> 25;
  h8+=carry7;
  h7-=carry7 << 25;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry8=(h8 + (long)(1 << 25)) >> 26;
  h9+=carry8;
  h8-=carry8 << 26;
  carry9=(h9 + (long)(1 << 24)) >> 25;
  h0+=carry9 * 19;
  h9-=carry9 << 25;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  int[] h=new int[10];
  h[0]=(int)h0;
  h[1]=(int)h1;
  h[2]=(int)h2;
  h[3]=(int)h3;
  h[4]=(int)h4;
  h[5]=(int)h5;
  h[6]=(int)h6;
  h[7]=(int)h7;
  h[8]=(int)h8;
  h[9]=(int)h9;
  return new Ed25519FieldElement(f,h);
}",0.9997764363961548
21008,"/** 
 * $h = -f$ <p> TODO-CR BR: see above. <p> Preconditions: <p><ul> <li>$|f|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. </ul><p> Postconditions: <p><ul> <li>$|h|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc.
 * @return The field element (-1) * this.
 */
public FieldElement negate(){
  int[] h=new int[10];
  for (int i=0; i < 10; i++) {
    h[i]=-t[i];
  }
  return new Ed25519FieldElement(f,h);
}","/** 
 * $h = -f$ <p> TODO-CR BR: see above. <p> Preconditions: </p><ul> <li>$|f|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. </ul><p> Postconditions: </p><ul> <li>$|h|$ bounded by $1.1*2^{25},1.1*2^{24},1.1*2^{25},1.1*2^{24},$ etc. </ul>
 * @return The field element (-1) * this.
 */
public FieldElement negate(){
  int[] h=new int[10];
  for (int i=0; i < 10; i++) {
    h[i]=-t[i];
  }
  return new Ed25519FieldElement(f,h);
}",0.990990990990991
21009,"/** 
 * $h = f * g$ <p> Can overlap $h$ with $f$ or $g$. <p> Preconditions: <p><ul> <li>$|f|$ bounded by $1.65*2^{26},1.65*2^{25},1.65*2^{26},1.65*2^{25},$ etc. <li>$|g|$ bounded by $1.65*2^{26},1.65*2^{25},1.65*2^{26},1.65*2^{25},$ etc. </ul><p> Postconditions: <p><ul> <li>$|h|$ bounded by $1.01*2^{25},1.01*2^{24},1.01*2^{25},1.01*2^{24},$ etc. </ul><p> Notes on implementation strategy: <p> Using schoolbook multiplication. Karatsuba would save a little in some cost models. <p> Most multiplications by 2 and 19 are 32-bit precomputations; cheaper than 64-bit postcomputations. <p> There is one remaining multiplication by 19 in the carry chain; one *19 precomputation can be merged into this, but the resulting data flow is considerably less clean. <p> There are 12 carries below. 10 of them are 2-way parallelizable and vectorizable. Can get away with 11 carries, but then data flow is much deeper. <p> With tighter constraints on inputs can squeeze carries into int32.
 * @param val The field element to multiply.
 * @return The (reasonably reduced) field element this * val.
 */
public FieldElement multiply(FieldElement val){
  int[] g=((Ed25519FieldElement)val).t;
  int g1_19=19 * g[1];
  int g2_19=19 * g[2];
  int g3_19=19 * g[3];
  int g4_19=19 * g[4];
  int g5_19=19 * g[5];
  int g6_19=19 * g[6];
  int g7_19=19 * g[7];
  int g8_19=19 * g[8];
  int g9_19=19 * g[9];
  int f1_2=2 * t[1];
  int f3_2=2 * t[3];
  int f5_2=2 * t[5];
  int f7_2=2 * t[7];
  int f9_2=2 * t[9];
  long f0g0=t[0] * (long)g[0];
  long f0g1=t[0] * (long)g[1];
  long f0g2=t[0] * (long)g[2];
  long f0g3=t[0] * (long)g[3];
  long f0g4=t[0] * (long)g[4];
  long f0g5=t[0] * (long)g[5];
  long f0g6=t[0] * (long)g[6];
  long f0g7=t[0] * (long)g[7];
  long f0g8=t[0] * (long)g[8];
  long f0g9=t[0] * (long)g[9];
  long f1g0=t[1] * (long)g[0];
  long f1g1_2=f1_2 * (long)g[1];
  long f1g2=t[1] * (long)g[2];
  long f1g3_2=f1_2 * (long)g[3];
  long f1g4=t[1] * (long)g[4];
  long f1g5_2=f1_2 * (long)g[5];
  long f1g6=t[1] * (long)g[6];
  long f1g7_2=f1_2 * (long)g[7];
  long f1g8=t[1] * (long)g[8];
  long f1g9_38=f1_2 * (long)g9_19;
  long f2g0=t[2] * (long)g[0];
  long f2g1=t[2] * (long)g[1];
  long f2g2=t[2] * (long)g[2];
  long f2g3=t[2] * (long)g[3];
  long f2g4=t[2] * (long)g[4];
  long f2g5=t[2] * (long)g[5];
  long f2g6=t[2] * (long)g[6];
  long f2g7=t[2] * (long)g[7];
  long f2g8_19=t[2] * (long)g8_19;
  long f2g9_19=t[2] * (long)g9_19;
  long f3g0=t[3] * (long)g[0];
  long f3g1_2=f3_2 * (long)g[1];
  long f3g2=t[3] * (long)g[2];
  long f3g3_2=f3_2 * (long)g[3];
  long f3g4=t[3] * (long)g[4];
  long f3g5_2=f3_2 * (long)g[5];
  long f3g6=t[3] * (long)g[6];
  long f3g7_38=f3_2 * (long)g7_19;
  long f3g8_19=t[3] * (long)g8_19;
  long f3g9_38=f3_2 * (long)g9_19;
  long f4g0=t[4] * (long)g[0];
  long f4g1=t[4] * (long)g[1];
  long f4g2=t[4] * (long)g[2];
  long f4g3=t[4] * (long)g[3];
  long f4g4=t[4] * (long)g[4];
  long f4g5=t[4] * (long)g[5];
  long f4g6_19=t[4] * (long)g6_19;
  long f4g7_19=t[4] * (long)g7_19;
  long f4g8_19=t[4] * (long)g8_19;
  long f4g9_19=t[4] * (long)g9_19;
  long f5g0=t[5] * (long)g[0];
  long f5g1_2=f5_2 * (long)g[1];
  long f5g2=t[5] * (long)g[2];
  long f5g3_2=f5_2 * (long)g[3];
  long f5g4=t[5] * (long)g[4];
  long f5g5_38=f5_2 * (long)g5_19;
  long f5g6_19=t[5] * (long)g6_19;
  long f5g7_38=f5_2 * (long)g7_19;
  long f5g8_19=t[5] * (long)g8_19;
  long f5g9_38=f5_2 * (long)g9_19;
  long f6g0=t[6] * (long)g[0];
  long f6g1=t[6] * (long)g[1];
  long f6g2=t[6] * (long)g[2];
  long f6g3=t[6] * (long)g[3];
  long f6g4_19=t[6] * (long)g4_19;
  long f6g5_19=t[6] * (long)g5_19;
  long f6g6_19=t[6] * (long)g6_19;
  long f6g7_19=t[6] * (long)g7_19;
  long f6g8_19=t[6] * (long)g8_19;
  long f6g9_19=t[6] * (long)g9_19;
  long f7g0=t[7] * (long)g[0];
  long f7g1_2=f7_2 * (long)g[1];
  long f7g2=t[7] * (long)g[2];
  long f7g3_38=f7_2 * (long)g3_19;
  long f7g4_19=t[7] * (long)g4_19;
  long f7g5_38=f7_2 * (long)g5_19;
  long f7g6_19=t[7] * (long)g6_19;
  long f7g7_38=f7_2 * (long)g7_19;
  long f7g8_19=t[7] * (long)g8_19;
  long f7g9_38=f7_2 * (long)g9_19;
  long f8g0=t[8] * (long)g[0];
  long f8g1=t[8] * (long)g[1];
  long f8g2_19=t[8] * (long)g2_19;
  long f8g3_19=t[8] * (long)g3_19;
  long f8g4_19=t[8] * (long)g4_19;
  long f8g5_19=t[8] * (long)g5_19;
  long f8g6_19=t[8] * (long)g6_19;
  long f8g7_19=t[8] * (long)g7_19;
  long f8g8_19=t[8] * (long)g8_19;
  long f8g9_19=t[8] * (long)g9_19;
  long f9g0=t[9] * (long)g[0];
  long f9g1_38=f9_2 * (long)g1_19;
  long f9g2_19=t[9] * (long)g2_19;
  long f9g3_38=f9_2 * (long)g3_19;
  long f9g4_19=t[9] * (long)g4_19;
  long f9g5_38=f9_2 * (long)g5_19;
  long f9g6_19=t[9] * (long)g6_19;
  long f9g7_38=f9_2 * (long)g7_19;
  long f9g8_19=t[9] * (long)g8_19;
  long f9g9_38=f9_2 * (long)g9_19;
  long h0=f0g0 + f1g9_38 + f2g8_19+ f3g7_38+ f4g6_19+ f5g5_38+ f6g4_19+ f7g3_38+ f8g2_19+ f9g1_38;
  long h1=f0g1 + f1g0 + f2g9_19+ f3g8_19+ f4g7_19+ f5g6_19+ f6g5_19+ f7g4_19+ f8g3_19+ f9g2_19;
  long h2=f0g2 + f1g1_2 + f2g0+ f3g9_38+ f4g8_19+ f5g7_38+ f6g6_19+ f7g5_38+ f8g4_19+ f9g3_38;
  long h3=f0g3 + f1g2 + f2g1+ f3g0+ f4g9_19+ f5g8_19+ f6g7_19+ f7g6_19+ f8g5_19+ f9g4_19;
  long h4=f0g4 + f1g3_2 + f2g2+ f3g1_2+ f4g0+ f5g9_38+ f6g8_19+ f7g7_38+ f8g6_19+ f9g5_38;
  long h5=f0g5 + f1g4 + f2g3+ f3g2+ f4g1+ f5g0+ f6g9_19+ f7g8_19+ f8g7_19+ f9g6_19;
  long h6=f0g6 + f1g5_2 + f2g4+ f3g3_2+ f4g2+ f5g1_2+ f6g0+ f7g9_38+ f8g8_19+ f9g7_38;
  long h7=f0g7 + f1g6 + f2g5+ f3g4+ f4g3+ f5g2+ f6g1+ f7g0+ f8g9_19+ f9g8_19;
  long h8=f0g8 + f1g7_2 + f2g6+ f3g5_2+ f4g4+ f5g3_2+ f6g2+ f7g1_2+ f8g0+ f9g9_38;
  long h9=f0g9 + f1g8 + f2g7+ f3g6+ f4g5+ f5g4+ f6g3+ f7g2+ f8g1+ f9g0;
  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry1=(h1 + (long)(1 << 24)) >> 25;
  h2+=carry1;
  h1-=carry1 << 25;
  carry5=(h5 + (long)(1 << 24)) >> 25;
  h6+=carry5;
  h5-=carry5 << 25;
  carry2=(h2 + (long)(1 << 25)) >> 26;
  h3+=carry2;
  h2-=carry2 << 26;
  carry6=(h6 + (long)(1 << 25)) >> 26;
  h7+=carry6;
  h6-=carry6 << 26;
  carry3=(h3 + (long)(1 << 24)) >> 25;
  h4+=carry3;
  h3-=carry3 << 25;
  carry7=(h7 + (long)(1 << 24)) >> 25;
  h8+=carry7;
  h7-=carry7 << 25;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry8=(h8 + (long)(1 << 25)) >> 26;
  h9+=carry8;
  h8-=carry8 << 26;
  carry9=(h9 + (long)(1 << 24)) >> 25;
  h0+=carry9 * 19;
  h9-=carry9 << 25;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  int[] h=new int[10];
  h[0]=(int)h0;
  h[1]=(int)h1;
  h[2]=(int)h2;
  h[3]=(int)h3;
  h[4]=(int)h4;
  h[5]=(int)h5;
  h[6]=(int)h6;
  h[7]=(int)h7;
  h[8]=(int)h8;
  h[9]=(int)h9;
  return new Ed25519FieldElement(f,h);
}","/** 
 * $h = f * g$ <p> Can overlap $h$ with $f$ or $g$. <p> Preconditions: </p><ul> <li>$|f|$ bounded by $1.65*2^{26},1.65*2^{25},1.65*2^{26},1.65*2^{25},$ etc. <li>$|g|$ bounded by $1.65*2^{26},1.65*2^{25},1.65*2^{26},1.65*2^{25},$ etc. </ul><p> Postconditions: </p><ul> <li>$|h|$ bounded by $1.01*2^{25},1.01*2^{24},1.01*2^{25},1.01*2^{24},$ etc. </ul><p> Notes on implementation strategy: <p> Using schoolbook multiplication. Karatsuba would save a little in some cost models. <p> Most multiplications by 2 and 19 are 32-bit precomputations; cheaper than 64-bit postcomputations. <p> There is one remaining multiplication by 19 in the carry chain; one *19 precomputation can be merged into this, but the resulting data flow is considerably less clean. <p> There are 12 carries below. 10 of them are 2-way parallelizable and vectorizable. Can get away with 11 carries, but then data flow is much deeper. <p> With tighter constraints on inputs can squeeze carries into int32.
 * @param val The field element to multiply.
 * @return The (reasonably reduced) field element this * val.
 */
public FieldElement multiply(FieldElement val){
  int[] g=((Ed25519FieldElement)val).t;
  int g1_19=19 * g[1];
  int g2_19=19 * g[2];
  int g3_19=19 * g[3];
  int g4_19=19 * g[4];
  int g5_19=19 * g[5];
  int g6_19=19 * g[6];
  int g7_19=19 * g[7];
  int g8_19=19 * g[8];
  int g9_19=19 * g[9];
  int f1_2=2 * t[1];
  int f3_2=2 * t[3];
  int f5_2=2 * t[5];
  int f7_2=2 * t[7];
  int f9_2=2 * t[9];
  long f0g0=t[0] * (long)g[0];
  long f0g1=t[0] * (long)g[1];
  long f0g2=t[0] * (long)g[2];
  long f0g3=t[0] * (long)g[3];
  long f0g4=t[0] * (long)g[4];
  long f0g5=t[0] * (long)g[5];
  long f0g6=t[0] * (long)g[6];
  long f0g7=t[0] * (long)g[7];
  long f0g8=t[0] * (long)g[8];
  long f0g9=t[0] * (long)g[9];
  long f1g0=t[1] * (long)g[0];
  long f1g1_2=f1_2 * (long)g[1];
  long f1g2=t[1] * (long)g[2];
  long f1g3_2=f1_2 * (long)g[3];
  long f1g4=t[1] * (long)g[4];
  long f1g5_2=f1_2 * (long)g[5];
  long f1g6=t[1] * (long)g[6];
  long f1g7_2=f1_2 * (long)g[7];
  long f1g8=t[1] * (long)g[8];
  long f1g9_38=f1_2 * (long)g9_19;
  long f2g0=t[2] * (long)g[0];
  long f2g1=t[2] * (long)g[1];
  long f2g2=t[2] * (long)g[2];
  long f2g3=t[2] * (long)g[3];
  long f2g4=t[2] * (long)g[4];
  long f2g5=t[2] * (long)g[5];
  long f2g6=t[2] * (long)g[6];
  long f2g7=t[2] * (long)g[7];
  long f2g8_19=t[2] * (long)g8_19;
  long f2g9_19=t[2] * (long)g9_19;
  long f3g0=t[3] * (long)g[0];
  long f3g1_2=f3_2 * (long)g[1];
  long f3g2=t[3] * (long)g[2];
  long f3g3_2=f3_2 * (long)g[3];
  long f3g4=t[3] * (long)g[4];
  long f3g5_2=f3_2 * (long)g[5];
  long f3g6=t[3] * (long)g[6];
  long f3g7_38=f3_2 * (long)g7_19;
  long f3g8_19=t[3] * (long)g8_19;
  long f3g9_38=f3_2 * (long)g9_19;
  long f4g0=t[4] * (long)g[0];
  long f4g1=t[4] * (long)g[1];
  long f4g2=t[4] * (long)g[2];
  long f4g3=t[4] * (long)g[3];
  long f4g4=t[4] * (long)g[4];
  long f4g5=t[4] * (long)g[5];
  long f4g6_19=t[4] * (long)g6_19;
  long f4g7_19=t[4] * (long)g7_19;
  long f4g8_19=t[4] * (long)g8_19;
  long f4g9_19=t[4] * (long)g9_19;
  long f5g0=t[5] * (long)g[0];
  long f5g1_2=f5_2 * (long)g[1];
  long f5g2=t[5] * (long)g[2];
  long f5g3_2=f5_2 * (long)g[3];
  long f5g4=t[5] * (long)g[4];
  long f5g5_38=f5_2 * (long)g5_19;
  long f5g6_19=t[5] * (long)g6_19;
  long f5g7_38=f5_2 * (long)g7_19;
  long f5g8_19=t[5] * (long)g8_19;
  long f5g9_38=f5_2 * (long)g9_19;
  long f6g0=t[6] * (long)g[0];
  long f6g1=t[6] * (long)g[1];
  long f6g2=t[6] * (long)g[2];
  long f6g3=t[6] * (long)g[3];
  long f6g4_19=t[6] * (long)g4_19;
  long f6g5_19=t[6] * (long)g5_19;
  long f6g6_19=t[6] * (long)g6_19;
  long f6g7_19=t[6] * (long)g7_19;
  long f6g8_19=t[6] * (long)g8_19;
  long f6g9_19=t[6] * (long)g9_19;
  long f7g0=t[7] * (long)g[0];
  long f7g1_2=f7_2 * (long)g[1];
  long f7g2=t[7] * (long)g[2];
  long f7g3_38=f7_2 * (long)g3_19;
  long f7g4_19=t[7] * (long)g4_19;
  long f7g5_38=f7_2 * (long)g5_19;
  long f7g6_19=t[7] * (long)g6_19;
  long f7g7_38=f7_2 * (long)g7_19;
  long f7g8_19=t[7] * (long)g8_19;
  long f7g9_38=f7_2 * (long)g9_19;
  long f8g0=t[8] * (long)g[0];
  long f8g1=t[8] * (long)g[1];
  long f8g2_19=t[8] * (long)g2_19;
  long f8g3_19=t[8] * (long)g3_19;
  long f8g4_19=t[8] * (long)g4_19;
  long f8g5_19=t[8] * (long)g5_19;
  long f8g6_19=t[8] * (long)g6_19;
  long f8g7_19=t[8] * (long)g7_19;
  long f8g8_19=t[8] * (long)g8_19;
  long f8g9_19=t[8] * (long)g9_19;
  long f9g0=t[9] * (long)g[0];
  long f9g1_38=f9_2 * (long)g1_19;
  long f9g2_19=t[9] * (long)g2_19;
  long f9g3_38=f9_2 * (long)g3_19;
  long f9g4_19=t[9] * (long)g4_19;
  long f9g5_38=f9_2 * (long)g5_19;
  long f9g6_19=t[9] * (long)g6_19;
  long f9g7_38=f9_2 * (long)g7_19;
  long f9g8_19=t[9] * (long)g8_19;
  long f9g9_38=f9_2 * (long)g9_19;
  long h0=f0g0 + f1g9_38 + f2g8_19+ f3g7_38+ f4g6_19+ f5g5_38+ f6g4_19+ f7g3_38+ f8g2_19+ f9g1_38;
  long h1=f0g1 + f1g0 + f2g9_19+ f3g8_19+ f4g7_19+ f5g6_19+ f6g5_19+ f7g4_19+ f8g3_19+ f9g2_19;
  long h2=f0g2 + f1g1_2 + f2g0+ f3g9_38+ f4g8_19+ f5g7_38+ f6g6_19+ f7g5_38+ f8g4_19+ f9g3_38;
  long h3=f0g3 + f1g2 + f2g1+ f3g0+ f4g9_19+ f5g8_19+ f6g7_19+ f7g6_19+ f8g5_19+ f9g4_19;
  long h4=f0g4 + f1g3_2 + f2g2+ f3g1_2+ f4g0+ f5g9_38+ f6g8_19+ f7g7_38+ f8g6_19+ f9g5_38;
  long h5=f0g5 + f1g4 + f2g3+ f3g2+ f4g1+ f5g0+ f6g9_19+ f7g8_19+ f8g7_19+ f9g6_19;
  long h6=f0g6 + f1g5_2 + f2g4+ f3g3_2+ f4g2+ f5g1_2+ f6g0+ f7g9_38+ f8g8_19+ f9g7_38;
  long h7=f0g7 + f1g6 + f2g5+ f3g4+ f4g3+ f5g2+ f6g1+ f7g0+ f8g9_19+ f9g8_19;
  long h8=f0g8 + f1g7_2 + f2g6+ f3g5_2+ f4g4+ f5g3_2+ f6g2+ f7g1_2+ f8g0+ f9g9_38;
  long h9=f0g9 + f1g8 + f2g7+ f3g6+ f4g5+ f5g4+ f6g3+ f7g2+ f8g1+ f9g0;
  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry1=(h1 + (long)(1 << 24)) >> 25;
  h2+=carry1;
  h1-=carry1 << 25;
  carry5=(h5 + (long)(1 << 24)) >> 25;
  h6+=carry5;
  h5-=carry5 << 25;
  carry2=(h2 + (long)(1 << 25)) >> 26;
  h3+=carry2;
  h2-=carry2 << 26;
  carry6=(h6 + (long)(1 << 25)) >> 26;
  h7+=carry6;
  h6-=carry6 << 26;
  carry3=(h3 + (long)(1 << 24)) >> 25;
  h4+=carry3;
  h3-=carry3 << 25;
  carry7=(h7 + (long)(1 << 24)) >> 25;
  h8+=carry7;
  h7-=carry7 << 25;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry8=(h8 + (long)(1 << 25)) >> 26;
  h9+=carry8;
  h8-=carry8 << 26;
  carry9=(h9 + (long)(1 << 24)) >> 25;
  h0+=carry9 * 19;
  h9-=carry9 << 25;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  int[] h=new int[10];
  h[0]=(int)h0;
  h[1]=(int)h1;
  h[2]=(int)h2;
  h[3]=(int)h3;
  h[4]=(int)h4;
  h[5]=(int)h5;
  h[6]=(int)h6;
  h[7]=(int)h7;
  h[8]=(int)h8;
  h[9]=(int)h9;
  return new Ed25519FieldElement(f,h);
}",0.9998554286540408
21010,"/** 
 * Encodes a given field element in its 32 byte representation. This is done in two steps: <ol> <li>Reduce the value of the field element modulo $p$. <li>Convert the field element to the 32 byte representation. </ol><p> The idea for the modulo $p$ reduction algorithm is as follows: <p> <h2>Assumption:</h2> <p><ul> <li>$p = 2^{255} - 19$ <li>$h = h_0 + 2^{25} * h_1 + 2^{(26+25)} * h_2 + \dots + 2^{230} * h_9$ where $0 \le |h_i| \lt 2^{27}$ for all $i=0,\dots,9$. <li>$h \cong r \mod p$, i.e. $h = r + q * p$ for some suitable $0 \le r \lt p$ and an integer $q$. </ul><p> Then $q = [2^{-255} * (h + 19 * 2^{-25} * h_9 + 1/2)]$ where $[x] = floor(x)$. <p> <h2>Proof:</h2> <p> We begin with some very raw estimation for the bounds of some expressions: <p> $$ \begin{equation} |h| \lt 2^{230} * 2^{30} = 2^{260} \Rightarrow |r + q * p| \lt 2^{260} \Rightarrow |q| \lt 2^{10}. \\ \Rightarrow -1/4 \le a := 19^2 * 2^{-255} * q \lt 1/4. \\ |h - 2^{230} * h_9| = |h_0 + \dots + 2^{204} * h_8| \lt 2^{204} * 2^{30} = 2^{234}. \\ \Rightarrow -1/4 \le b := 19 * 2^{-255} * (h - 2^{230} * h_9) \lt 1/4 \end{equation} $$ <p> Therefore $0 \lt 1/2 - a - b \lt 1$. <p> Set $x := r + 19 * 2^{-255} * r + 1/2 - a - b$. Then: <p> $$ 0 \le x \lt 255 - 20 + 19 + 1 = 2^{255} \\ \Rightarrow 0 \le 2^{-255} * x \lt 1. $$ <p> Since $q$ is an integer we have <p> $$ [q + 2^{-255} * x] = q \quad (1) $$ <p> Have a closer look at $x$: <p> $$ \begin{align} x &amp;= h - q * (2^{255} - 19) + 19 * 2^{-255} * (h - q * (2^{255} - 19)) + 1/2 - 19^2 * 2^{-255} * q - 19 * 2^{-255} * (h - 2^{230} * h_9) \\ &amp;= h - q * 2^{255} + 19 * q + 19 * 2^{-255} * h - 19 * q + 19^2 * 2^{-255} * q + 1/2 - 19^2 * 2^{-255} * q - 19 * 2^{-255} * h + 19 * 2^{-25} * h_9 \\ &amp;= h + 19 * 2^{-25} * h_9 + 1/2 - q^{255}. \end{align} $$ <p> Inserting the expression for $x$ into $(1)$ we get the desired expression for $q$.
 */
public byte[] encode(FieldElement x){
  int[] h=((Ed25519FieldElement)x).t;
  int h0=h[0];
  int h1=h[1];
  int h2=h[2];
  int h3=h[3];
  int h4=h[4];
  int h5=h[5];
  int h6=h[6];
  int h7=h[7];
  int h8=h[8];
  int h9=h[9];
  int q;
  int carry0;
  int carry1;
  int carry2;
  int carry3;
  int carry4;
  int carry5;
  int carry6;
  int carry7;
  int carry8;
  int carry9;
  q=(19 * h9 + (1 << 24)) >> 25;
  q=(h0 + q) >> 26;
  q=(h1 + q) >> 25;
  q=(h2 + q) >> 26;
  q=(h3 + q) >> 25;
  q=(h4 + q) >> 26;
  q=(h5 + q) >> 25;
  q=(h6 + q) >> 26;
  q=(h7 + q) >> 25;
  q=(h8 + q) >> 26;
  q=(h9 + q) >> 25;
  h0+=19 * q;
  carry0=h0 >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  carry1=h1 >> 25;
  h2+=carry1;
  h1-=carry1 << 25;
  carry2=h2 >> 26;
  h3+=carry2;
  h2-=carry2 << 26;
  carry3=h3 >> 25;
  h4+=carry3;
  h3-=carry3 << 25;
  carry4=h4 >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry5=h5 >> 25;
  h6+=carry5;
  h5-=carry5 << 25;
  carry6=h6 >> 26;
  h7+=carry6;
  h6-=carry6 << 26;
  carry7=h7 >> 25;
  h8+=carry7;
  h7-=carry7 << 25;
  carry8=h8 >> 26;
  h9+=carry8;
  h8-=carry8 << 26;
  carry9=h9 >> 25;
  h9-=carry9 << 25;
  byte[] s=new byte[32];
  s[0]=(byte)h0;
  s[1]=(byte)(h0 >> 8);
  s[2]=(byte)(h0 >> 16);
  s[3]=(byte)((h0 >> 24) | (h1 << 2));
  s[4]=(byte)(h1 >> 6);
  s[5]=(byte)(h1 >> 14);
  s[6]=(byte)((h1 >> 22) | (h2 << 3));
  s[7]=(byte)(h2 >> 5);
  s[8]=(byte)(h2 >> 13);
  s[9]=(byte)((h2 >> 21) | (h3 << 5));
  s[10]=(byte)(h3 >> 3);
  s[11]=(byte)(h3 >> 11);
  s[12]=(byte)((h3 >> 19) | (h4 << 6));
  s[13]=(byte)(h4 >> 2);
  s[14]=(byte)(h4 >> 10);
  s[15]=(byte)(h4 >> 18);
  s[16]=(byte)h5;
  s[17]=(byte)(h5 >> 8);
  s[18]=(byte)(h5 >> 16);
  s[19]=(byte)((h5 >> 24) | (h6 << 1));
  s[20]=(byte)(h6 >> 7);
  s[21]=(byte)(h6 >> 15);
  s[22]=(byte)((h6 >> 23) | (h7 << 3));
  s[23]=(byte)(h7 >> 5);
  s[24]=(byte)(h7 >> 13);
  s[25]=(byte)((h7 >> 21) | (h8 << 4));
  s[26]=(byte)(h8 >> 4);
  s[27]=(byte)(h8 >> 12);
  s[28]=(byte)((h8 >> 20) | (h9 << 6));
  s[29]=(byte)(h9 >> 2);
  s[30]=(byte)(h9 >> 10);
  s[31]=(byte)(h9 >> 18);
  return s;
}","/** 
 * Encodes a given field element in its 32 byte representation. This is done in two steps: <ol> <li>Reduce the value of the field element modulo $p$. <li>Convert the field element to the 32 byte representation. </ol><p> The idea for the modulo $p$ reduction algorithm is as follows: </p> <h2>Assumption:</h2> <ul> <li>$p = 2^{255} - 19$ <li>$h = h_0 + 2^{25} * h_1 + 2^{(26+25)} * h_2 + \dots + 2^{230} * h_9$ where $0 \le |h_i| \lt 2^{27}$ for all $i=0,\dots,9$. <li>$h \cong r \mod p$, i.e. $h = r + q * p$ for some suitable $0 \le r \lt p$ and an integer $q$. </ul><p> Then $q = [2^{-255} * (h + 19 * 2^{-25} * h_9 + 1/2)]$ where $[x] = floor(x)$. </p> <h2>Proof:</h2> <p> We begin with some very raw estimation for the bounds of some expressions: <p> $$ \begin{equation} |h| \lt 2^{230} * 2^{30} = 2^{260} \Rightarrow |r + q * p| \lt 2^{260} \Rightarrow |q| \lt 2^{10}. \\ \Rightarrow -1/4 \le a := 19^2 * 2^{-255} * q \lt 1/4. \\ |h - 2^{230} * h_9| = |h_0 + \dots + 2^{204} * h_8| \lt 2^{204} * 2^{30} = 2^{234}. \\ \Rightarrow -1/4 \le b := 19 * 2^{-255} * (h - 2^{230} * h_9) \lt 1/4 \end{equation} $$ <p> Therefore $0 \lt 1/2 - a - b \lt 1$. <p> Set $x := r + 19 * 2^{-255} * r + 1/2 - a - b$. Then: <p> $$ 0 \le x \lt 255 - 20 + 19 + 1 = 2^{255} \\ \Rightarrow 0 \le 2^{-255} * x \lt 1. $$ <p> Since $q$ is an integer we have <p> $$ [q + 2^{-255} * x] = q \quad (1) $$ <p> Have a closer look at $x$: <p> $$ \begin{align} x &amp;= h - q * (2^{255} - 19) + 19 * 2^{-255} * (h - q * (2^{255} - 19)) + 1/2 - 19^2 * 2^{-255} * q - 19 * 2^{-255} * (h - 2^{230} * h_9) \\ &amp;= h - q * 2^{255} + 19 * q + 19 * 2^{-255} * h - 19 * q + 19^2 * 2^{-255} * q + 1/2 - 19^2 * 2^{-255} * q - 19 * 2^{-255} * h + 19 * 2^{-25} * h_9 \\ &amp;= h + 19 * 2^{-25} * h_9 + 1/2 - q^{255}. \end{align} $$ <p> Inserting the expression for $x$ into $(1)$ we get the desired expression for $q$.
 */
public byte[] encode(FieldElement x){
  int[] h=((Ed25519FieldElement)x).t;
  int h0=h[0];
  int h1=h[1];
  int h2=h[2];
  int h3=h[3];
  int h4=h[4];
  int h5=h[5];
  int h6=h[6];
  int h7=h[7];
  int h8=h[8];
  int h9=h[9];
  int q;
  int carry0;
  int carry1;
  int carry2;
  int carry3;
  int carry4;
  int carry5;
  int carry6;
  int carry7;
  int carry8;
  int carry9;
  q=(19 * h9 + (1 << 24)) >> 25;
  q=(h0 + q) >> 26;
  q=(h1 + q) >> 25;
  q=(h2 + q) >> 26;
  q=(h3 + q) >> 25;
  q=(h4 + q) >> 26;
  q=(h5 + q) >> 25;
  q=(h6 + q) >> 26;
  q=(h7 + q) >> 25;
  q=(h8 + q) >> 26;
  q=(h9 + q) >> 25;
  h0+=19 * q;
  carry0=h0 >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  carry1=h1 >> 25;
  h2+=carry1;
  h1-=carry1 << 25;
  carry2=h2 >> 26;
  h3+=carry2;
  h2-=carry2 << 26;
  carry3=h3 >> 25;
  h4+=carry3;
  h3-=carry3 << 25;
  carry4=h4 >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry5=h5 >> 25;
  h6+=carry5;
  h5-=carry5 << 25;
  carry6=h6 >> 26;
  h7+=carry6;
  h6-=carry6 << 26;
  carry7=h7 >> 25;
  h8+=carry7;
  h7-=carry7 << 25;
  carry8=h8 >> 26;
  h9+=carry8;
  h8-=carry8 << 26;
  carry9=h9 >> 25;
  h9-=carry9 << 25;
  byte[] s=new byte[32];
  s[0]=(byte)h0;
  s[1]=(byte)(h0 >> 8);
  s[2]=(byte)(h0 >> 16);
  s[3]=(byte)((h0 >> 24) | (h1 << 2));
  s[4]=(byte)(h1 >> 6);
  s[5]=(byte)(h1 >> 14);
  s[6]=(byte)((h1 >> 22) | (h2 << 3));
  s[7]=(byte)(h2 >> 5);
  s[8]=(byte)(h2 >> 13);
  s[9]=(byte)((h2 >> 21) | (h3 << 5));
  s[10]=(byte)(h3 >> 3);
  s[11]=(byte)(h3 >> 11);
  s[12]=(byte)((h3 >> 19) | (h4 << 6));
  s[13]=(byte)(h4 >> 2);
  s[14]=(byte)(h4 >> 10);
  s[15]=(byte)(h4 >> 18);
  s[16]=(byte)h5;
  s[17]=(byte)(h5 >> 8);
  s[18]=(byte)(h5 >> 16);
  s[19]=(byte)((h5 >> 24) | (h6 << 1));
  s[20]=(byte)(h6 >> 7);
  s[21]=(byte)(h6 >> 15);
  s[22]=(byte)((h6 >> 23) | (h7 << 3));
  s[23]=(byte)(h7 >> 5);
  s[24]=(byte)(h7 >> 13);
  s[25]=(byte)((h7 >> 21) | (h8 << 4));
  s[26]=(byte)(h8 >> 4);
  s[27]=(byte)(h8 >> 12);
  s[28]=(byte)((h8 >> 20) | (h9 << 6));
  s[29]=(byte)(h9 >> 2);
  s[30]=(byte)(h9 >> 10);
  s[31]=(byte)(h9 >> 18);
  return s;
}",0.999370673379484
21011,"/** 
 * Is the FieldElement negative in this encoding? <p> Return true if $x$ is in $\{1,3,5,\dots,q-2\}$<br> Return false if $x$ is in $\{0,2,4,\dots,q-1\}$ <p> Preconditions: <p><ul> <li>$|x|$ bounded by $1.1*2^{26},1.1*2^{25},1.1*2^{26},1.1*2^{25}$, etc.
 * @return true if $x$ is in $\{1,3,5,\dots,q-2\}$, false otherwise.
 */
public boolean isNegative(FieldElement x){
  byte[] s=encode(x);
  return (s[0] & 1) != 0;
}","/** 
 * Is the FieldElement negative in this encoding? <p> Return true if $x$ is in $\{1,3,5,\dots,q-2\}$<br> Return false if $x$ is in $\{0,2,4,\dots,q-1\}$ <p> Preconditions: </p><ul> <li>$|x|$ bounded by $1.1*2^{26},1.1*2^{25},1.1*2^{26},1.1*2^{25}$, etc. </ul>
 * @return true if $x$ is in $\{1,3,5,\dots,q-2\}$, false otherwise.
 */
public boolean isNegative(FieldElement x){
  byte[] s=encode(x);
  return (s[0] & 1) != 0;
}",0.9917936694021102
21012,"/** 
 * $(ab+c) \bmod q$ <p> Input: <p><ul> <li>$a[0]+256*a[1]+\dots+256^{31}*a[31] = a$ <li>$b[0]+256*b[1]+\dots+256^{31}*b[31] = b$ <li>$c[0]+256*c[1]+\dots+256^{31}*c[31] = c$ </ul><p> Output: $result[0]+256*result[1]+\dots+256^{31}*result[31] = (ab+c) \bmod q$ where $q = 2^{252} + 27742317777372353535851937790883648493$. <p> See the comments in   {@link #reduce(byte[])} for an explanation of the algorithm.
 */
public byte[] multiplyAndAdd(byte[] a,byte[] b,byte[] c){
  long a0=0x1FFFFF & load_3(a,0);
  long a1=0x1FFFFF & (load_4(a,2) >> 5);
  long a2=0x1FFFFF & (load_3(a,5) >> 2);
  long a3=0x1FFFFF & (load_4(a,7) >> 7);
  long a4=0x1FFFFF & (load_4(a,10) >> 4);
  long a5=0x1FFFFF & (load_3(a,13) >> 1);
  long a6=0x1FFFFF & (load_4(a,15) >> 6);
  long a7=0x1FFFFF & (load_3(a,18) >> 3);
  long a8=0x1FFFFF & load_3(a,21);
  long a9=0x1FFFFF & (load_4(a,23) >> 5);
  long a10=0x1FFFFF & (load_3(a,26) >> 2);
  long a11=(load_4(a,28) >> 7);
  long b0=0x1FFFFF & load_3(b,0);
  long b1=0x1FFFFF & (load_4(b,2) >> 5);
  long b2=0x1FFFFF & (load_3(b,5) >> 2);
  long b3=0x1FFFFF & (load_4(b,7) >> 7);
  long b4=0x1FFFFF & (load_4(b,10) >> 4);
  long b5=0x1FFFFF & (load_3(b,13) >> 1);
  long b6=0x1FFFFF & (load_4(b,15) >> 6);
  long b7=0x1FFFFF & (load_3(b,18) >> 3);
  long b8=0x1FFFFF & load_3(b,21);
  long b9=0x1FFFFF & (load_4(b,23) >> 5);
  long b10=0x1FFFFF & (load_3(b,26) >> 2);
  long b11=(load_4(b,28) >> 7);
  long c0=0x1FFFFF & load_3(c,0);
  long c1=0x1FFFFF & (load_4(c,2) >> 5);
  long c2=0x1FFFFF & (load_3(c,5) >> 2);
  long c3=0x1FFFFF & (load_4(c,7) >> 7);
  long c4=0x1FFFFF & (load_4(c,10) >> 4);
  long c5=0x1FFFFF & (load_3(c,13) >> 1);
  long c6=0x1FFFFF & (load_4(c,15) >> 6);
  long c7=0x1FFFFF & (load_3(c,18) >> 3);
  long c8=0x1FFFFF & load_3(c,21);
  long c9=0x1FFFFF & (load_4(c,23) >> 5);
  long c10=0x1FFFFF & (load_3(c,26) >> 2);
  long c11=(load_4(c,28) >> 7);
  long s0;
  long s1;
  long s2;
  long s3;
  long s4;
  long s5;
  long s6;
  long s7;
  long s8;
  long s9;
  long s10;
  long s11;
  long s12;
  long s13;
  long s14;
  long s15;
  long s16;
  long s17;
  long s18;
  long s19;
  long s20;
  long s21;
  long s22;
  long s23;
  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;
  long carry10;
  long carry11;
  long carry12;
  long carry13;
  long carry14;
  long carry15;
  long carry16;
  long carry17;
  long carry18;
  long carry19;
  long carry20;
  long carry21;
  long carry22;
  s0=c0 + a0 * b0;
  s1=c1 + a0 * b1 + a1 * b0;
  s2=c2 + a0 * b2 + a1 * b1 + a2 * b0;
  s3=c3 + a0 * b3 + a1 * b2 + a2 * b1 + a3 * b0;
  s4=c4 + a0 * b4 + a1 * b3 + a2 * b2 + a3 * b1 + a4 * b0;
  s5=c5 + a0 * b5 + a1 * b4 + a2 * b3 + a3 * b2 + a4 * b1 + a5 * b0;
  s6=c6 + a0 * b6 + a1 * b5 + a2 * b4 + a3 * b3 + a4 * b2 + a5 * b1 + a6 * b0;
  s7=c7 + a0 * b7 + a1 * b6 + a2 * b5 + a3 * b4 + a4 * b3 + a5 * b2 + a6 * b1 + a7 * b0;
  s8=c8 + a0 * b8 + a1 * b7 + a2 * b6 + a3 * b5 + a4 * b4 + a5 * b3 + a6 * b2 + a7 * b1 + a8 * b0;
  s9=c9 + a0 * b9 + a1 * b8 + a2 * b7 + a3 * b6 + a4 * b5 + a5 * b4 + a6 * b3 + a7 * b2 + a8 * b1 + a9 * b0;
  s10=c10 + a0 * b10 + a1 * b9 + a2 * b8 + a3 * b7 + a4 * b6 + a5 * b5 + a6 * b4 + a7 * b3 + a8 * b2 + a9 * b1 + a10 * b0;
  s11=c11 + a0 * b11 + a1 * b10 + a2 * b9 + a3 * b8 + a4 * b7 + a5 * b6 + a6 * b5 + a7 * b4 + a8 * b3 + a9 * b2 + a10 * b1 + a11 * b0;
  s12=a1 * b11 + a2 * b10 + a3 * b9 + a4 * b8 + a5 * b7 + a6 * b6 + a7 * b5 + a8 * b4 + a9 * b3 + a10 * b2 + a11 * b1;
  s13=a2 * b11 + a3 * b10 + a4 * b9 + a5 * b8 + a6 * b7 + a7 * b6 + a8 * b5 + a9 * b4 + a10 * b3 + a11 * b2;
  s14=a3 * b11 + a4 * b10 + a5 * b9 + a6 * b8 + a7 * b7 + a8 * b6 + a9 * b5 + a10 * b4 + a11 * b3;
  s15=a4 * b11 + a5 * b10 + a6 * b9 + a7 * b8 + a8 * b7 + a9 * b6 + a10 * b5 + a11 * b4;
  s16=a5 * b11 + a6 * b10 + a7 * b9 + a8 * b8 + a9 * b7 + a10 * b6 + a11 * b5;
  s17=a6 * b11 + a7 * b10 + a8 * b9 + a9 * b8 + a10 * b7 + a11 * b6;
  s18=a7 * b11 + a8 * b10 + a9 * b9 + a10 * b8 + a11 * b7;
  s19=a8 * b11 + a9 * b10 + a10 * b9 + a11 * b8;
  s20=a9 * b11 + a10 * b10 + a11 * b9;
  s21=a10 * b11 + a11 * b10;
  s22=a11 * b11;
  carry0=(s0 + (1 << 20)) >> 21;
  s1+=carry0;
  s0-=carry0 << 21;
  carry2=(s2 + (1 << 20)) >> 21;
  s3+=carry2;
  s2-=carry2 << 21;
  carry4=(s4 + (1 << 20)) >> 21;
  s5+=carry4;
  s4-=carry4 << 21;
  carry6=(s6 + (1 << 20)) >> 21;
  s7+=carry6;
  s6-=carry6 << 21;
  carry8=(s8 + (1 << 20)) >> 21;
  s9+=carry8;
  s8-=carry8 << 21;
  carry10=(s10 + (1 << 20)) >> 21;
  s11+=carry10;
  s10-=carry10 << 21;
  carry12=(s12 + (1 << 20)) >> 21;
  s13+=carry12;
  s12-=carry12 << 21;
  carry14=(s14 + (1 << 20)) >> 21;
  s15+=carry14;
  s14-=carry14 << 21;
  carry16=(s16 + (1 << 20)) >> 21;
  s17+=carry16;
  s16-=carry16 << 21;
  carry18=(s18 + (1 << 20)) >> 21;
  s19+=carry18;
  s18-=carry18 << 21;
  carry20=(s20 + (1 << 20)) >> 21;
  s21+=carry20;
  s20-=carry20 << 21;
  carry22=(s22 + (1 << 20)) >> 21;
  s23=carry22;
  s22-=carry22 << 21;
  carry1=(s1 + (1 << 20)) >> 21;
  s2+=carry1;
  s1-=carry1 << 21;
  carry3=(s3 + (1 << 20)) >> 21;
  s4+=carry3;
  s3-=carry3 << 21;
  carry5=(s5 + (1 << 20)) >> 21;
  s6+=carry5;
  s5-=carry5 << 21;
  carry7=(s7 + (1 << 20)) >> 21;
  s8+=carry7;
  s7-=carry7 << 21;
  carry9=(s9 + (1 << 20)) >> 21;
  s10+=carry9;
  s9-=carry9 << 21;
  carry11=(s11 + (1 << 20)) >> 21;
  s12+=carry11;
  s11-=carry11 << 21;
  carry13=(s13 + (1 << 20)) >> 21;
  s14+=carry13;
  s13-=carry13 << 21;
  carry15=(s15 + (1 << 20)) >> 21;
  s16+=carry15;
  s15-=carry15 << 21;
  carry17=(s17 + (1 << 20)) >> 21;
  s18+=carry17;
  s17-=carry17 << 21;
  carry19=(s19 + (1 << 20)) >> 21;
  s20+=carry19;
  s19-=carry19 << 21;
  carry21=(s21 + (1 << 20)) >> 21;
  s22+=carry21;
  s21-=carry21 << 21;
  s11+=s23 * 666643;
  s12+=s23 * 470296;
  s13+=s23 * 654183;
  s14-=s23 * 997805;
  s15+=s23 * 136657;
  s16-=s23 * 683901;
  s10+=s22 * 666643;
  s11+=s22 * 470296;
  s12+=s22 * 654183;
  s13-=s22 * 997805;
  s14+=s22 * 136657;
  s15-=s22 * 683901;
  s9+=s21 * 666643;
  s10+=s21 * 470296;
  s11+=s21 * 654183;
  s12-=s21 * 997805;
  s13+=s21 * 136657;
  s14-=s21 * 683901;
  s8+=s20 * 666643;
  s9+=s20 * 470296;
  s10+=s20 * 654183;
  s11-=s20 * 997805;
  s12+=s20 * 136657;
  s13-=s20 * 683901;
  s7+=s19 * 666643;
  s8+=s19 * 470296;
  s9+=s19 * 654183;
  s10-=s19 * 997805;
  s11+=s19 * 136657;
  s12-=s19 * 683901;
  s6+=s18 * 666643;
  s7+=s18 * 470296;
  s8+=s18 * 654183;
  s9-=s18 * 997805;
  s10+=s18 * 136657;
  s11-=s18 * 683901;
  carry6=(s6 + (1 << 20)) >> 21;
  s7+=carry6;
  s6-=carry6 << 21;
  carry8=(s8 + (1 << 20)) >> 21;
  s9+=carry8;
  s8-=carry8 << 21;
  carry10=(s10 + (1 << 20)) >> 21;
  s11+=carry10;
  s10-=carry10 << 21;
  carry12=(s12 + (1 << 20)) >> 21;
  s13+=carry12;
  s12-=carry12 << 21;
  carry14=(s14 + (1 << 20)) >> 21;
  s15+=carry14;
  s14-=carry14 << 21;
  carry16=(s16 + (1 << 20)) >> 21;
  s17+=carry16;
  s16-=carry16 << 21;
  carry7=(s7 + (1 << 20)) >> 21;
  s8+=carry7;
  s7-=carry7 << 21;
  carry9=(s9 + (1 << 20)) >> 21;
  s10+=carry9;
  s9-=carry9 << 21;
  carry11=(s11 + (1 << 20)) >> 21;
  s12+=carry11;
  s11-=carry11 << 21;
  carry13=(s13 + (1 << 20)) >> 21;
  s14+=carry13;
  s13-=carry13 << 21;
  carry15=(s15 + (1 << 20)) >> 21;
  s16+=carry15;
  s15-=carry15 << 21;
  s5+=s17 * 666643;
  s6+=s17 * 470296;
  s7+=s17 * 654183;
  s8-=s17 * 997805;
  s9+=s17 * 136657;
  s10-=s17 * 683901;
  s4+=s16 * 666643;
  s5+=s16 * 470296;
  s6+=s16 * 654183;
  s7-=s16 * 997805;
  s8+=s16 * 136657;
  s9-=s16 * 683901;
  s3+=s15 * 666643;
  s4+=s15 * 470296;
  s5+=s15 * 654183;
  s6-=s15 * 997805;
  s7+=s15 * 136657;
  s8-=s15 * 683901;
  s2+=s14 * 666643;
  s3+=s14 * 470296;
  s4+=s14 * 654183;
  s5-=s14 * 997805;
  s6+=s14 * 136657;
  s7-=s14 * 683901;
  s1+=s13 * 666643;
  s2+=s13 * 470296;
  s3+=s13 * 654183;
  s4-=s13 * 997805;
  s5+=s13 * 136657;
  s6-=s13 * 683901;
  s0+=s12 * 666643;
  s1+=s12 * 470296;
  s2+=s12 * 654183;
  s3-=s12 * 997805;
  s4+=s12 * 136657;
  s5-=s12 * 683901;
  carry0=(s0 + (1 << 20)) >> 21;
  s1+=carry0;
  s0-=carry0 << 21;
  carry2=(s2 + (1 << 20)) >> 21;
  s3+=carry2;
  s2-=carry2 << 21;
  carry4=(s4 + (1 << 20)) >> 21;
  s5+=carry4;
  s4-=carry4 << 21;
  carry6=(s6 + (1 << 20)) >> 21;
  s7+=carry6;
  s6-=carry6 << 21;
  carry8=(s8 + (1 << 20)) >> 21;
  s9+=carry8;
  s8-=carry8 << 21;
  carry10=(s10 + (1 << 20)) >> 21;
  s11+=carry10;
  s10-=carry10 << 21;
  carry1=(s1 + (1 << 20)) >> 21;
  s2+=carry1;
  s1-=carry1 << 21;
  carry3=(s3 + (1 << 20)) >> 21;
  s4+=carry3;
  s3-=carry3 << 21;
  carry5=(s5 + (1 << 20)) >> 21;
  s6+=carry5;
  s5-=carry5 << 21;
  carry7=(s7 + (1 << 20)) >> 21;
  s8+=carry7;
  s7-=carry7 << 21;
  carry9=(s9 + (1 << 20)) >> 21;
  s10+=carry9;
  s9-=carry9 << 21;
  carry11=(s11 + (1 << 20)) >> 21;
  s12=carry11;
  s11-=carry11 << 21;
  s0+=s12 * 666643;
  s1+=s12 * 470296;
  s2+=s12 * 654183;
  s3-=s12 * 997805;
  s4+=s12 * 136657;
  s5-=s12 * 683901;
  carry0=s0 >> 21;
  s1+=carry0;
  s0-=carry0 << 21;
  carry1=s1 >> 21;
  s2+=carry1;
  s1-=carry1 << 21;
  carry2=s2 >> 21;
  s3+=carry2;
  s2-=carry2 << 21;
  carry3=s3 >> 21;
  s4+=carry3;
  s3-=carry3 << 21;
  carry4=s4 >> 21;
  s5+=carry4;
  s4-=carry4 << 21;
  carry5=s5 >> 21;
  s6+=carry5;
  s5-=carry5 << 21;
  carry6=s6 >> 21;
  s7+=carry6;
  s6-=carry6 << 21;
  carry7=s7 >> 21;
  s8+=carry7;
  s7-=carry7 << 21;
  carry8=s8 >> 21;
  s9+=carry8;
  s8-=carry8 << 21;
  carry9=s9 >> 21;
  s10+=carry9;
  s9-=carry9 << 21;
  carry10=s10 >> 21;
  s11+=carry10;
  s10-=carry10 << 21;
  carry11=s11 >> 21;
  s12=carry11;
  s11-=carry11 << 21;
  s0+=s12 * 666643;
  s1+=s12 * 470296;
  s2+=s12 * 654183;
  s3-=s12 * 997805;
  s4+=s12 * 136657;
  s5-=s12 * 683901;
  carry0=s0 >> 21;
  s1+=carry0;
  s0-=carry0 << 21;
  carry1=s1 >> 21;
  s2+=carry1;
  s1-=carry1 << 21;
  carry2=s2 >> 21;
  s3+=carry2;
  s2-=carry2 << 21;
  carry3=s3 >> 21;
  s4+=carry3;
  s3-=carry3 << 21;
  carry4=s4 >> 21;
  s5+=carry4;
  s4-=carry4 << 21;
  carry5=s5 >> 21;
  s6+=carry5;
  s5-=carry5 << 21;
  carry6=s6 >> 21;
  s7+=carry6;
  s6-=carry6 << 21;
  carry7=s7 >> 21;
  s8+=carry7;
  s7-=carry7 << 21;
  carry8=s8 >> 21;
  s9+=carry8;
  s8-=carry8 << 21;
  carry9=s9 >> 21;
  s10+=carry9;
  s9-=carry9 << 21;
  carry10=s10 >> 21;
  s11+=carry10;
  s10-=carry10 << 21;
  byte[] result=new byte[32];
  result[0]=(byte)s0;
  result[1]=(byte)(s0 >> 8);
  result[2]=(byte)((s0 >> 16) | (s1 << 5));
  result[3]=(byte)(s1 >> 3);
  result[4]=(byte)(s1 >> 11);
  result[5]=(byte)((s1 >> 19) | (s2 << 2));
  result[6]=(byte)(s2 >> 6);
  result[7]=(byte)((s2 >> 14) | (s3 << 7));
  result[8]=(byte)(s3 >> 1);
  result[9]=(byte)(s3 >> 9);
  result[10]=(byte)((s3 >> 17) | (s4 << 4));
  result[11]=(byte)(s4 >> 4);
  result[12]=(byte)(s4 >> 12);
  result[13]=(byte)((s4 >> 20) | (s5 << 1));
  result[14]=(byte)(s5 >> 7);
  result[15]=(byte)((s5 >> 15) | (s6 << 6));
  result[16]=(byte)(s6 >> 2);
  result[17]=(byte)(s6 >> 10);
  result[18]=(byte)((s6 >> 18) | (s7 << 3));
  result[19]=(byte)(s7 >> 5);
  result[20]=(byte)(s7 >> 13);
  result[21]=(byte)s8;
  result[22]=(byte)(s8 >> 8);
  result[23]=(byte)((s8 >> 16) | (s9 << 5));
  result[24]=(byte)(s9 >> 3);
  result[25]=(byte)(s9 >> 11);
  result[26]=(byte)((s9 >> 19) | (s10 << 2));
  result[27]=(byte)(s10 >> 6);
  result[28]=(byte)((s10 >> 14) | (s11 << 7));
  result[29]=(byte)(s11 >> 1);
  result[30]=(byte)(s11 >> 9);
  result[31]=(byte)(s11 >> 17);
  return result;
}","/** 
 * $(ab+c) \bmod q$ <p> Input: </p><ul> <li>$a[0]+256*a[1]+\dots+256^{31}*a[31] = a$ <li>$b[0]+256*b[1]+\dots+256^{31}*b[31] = b$ <li>$c[0]+256*c[1]+\dots+256^{31}*c[31] = c$ </ul><p> Output: $result[0]+256*result[1]+\dots+256^{31}*result[31] = (ab+c) \bmod q$ where $q = 2^{252} + 27742317777372353535851937790883648493$. <p> See the comments in   {@link #reduce(byte[])} for an explanation of the algorithm.
 */
public byte[] multiplyAndAdd(byte[] a,byte[] b,byte[] c){
  long a0=0x1FFFFF & load_3(a,0);
  long a1=0x1FFFFF & (load_4(a,2) >> 5);
  long a2=0x1FFFFF & (load_3(a,5) >> 2);
  long a3=0x1FFFFF & (load_4(a,7) >> 7);
  long a4=0x1FFFFF & (load_4(a,10) >> 4);
  long a5=0x1FFFFF & (load_3(a,13) >> 1);
  long a6=0x1FFFFF & (load_4(a,15) >> 6);
  long a7=0x1FFFFF & (load_3(a,18) >> 3);
  long a8=0x1FFFFF & load_3(a,21);
  long a9=0x1FFFFF & (load_4(a,23) >> 5);
  long a10=0x1FFFFF & (load_3(a,26) >> 2);
  long a11=(load_4(a,28) >> 7);
  long b0=0x1FFFFF & load_3(b,0);
  long b1=0x1FFFFF & (load_4(b,2) >> 5);
  long b2=0x1FFFFF & (load_3(b,5) >> 2);
  long b3=0x1FFFFF & (load_4(b,7) >> 7);
  long b4=0x1FFFFF & (load_4(b,10) >> 4);
  long b5=0x1FFFFF & (load_3(b,13) >> 1);
  long b6=0x1FFFFF & (load_4(b,15) >> 6);
  long b7=0x1FFFFF & (load_3(b,18) >> 3);
  long b8=0x1FFFFF & load_3(b,21);
  long b9=0x1FFFFF & (load_4(b,23) >> 5);
  long b10=0x1FFFFF & (load_3(b,26) >> 2);
  long b11=(load_4(b,28) >> 7);
  long c0=0x1FFFFF & load_3(c,0);
  long c1=0x1FFFFF & (load_4(c,2) >> 5);
  long c2=0x1FFFFF & (load_3(c,5) >> 2);
  long c3=0x1FFFFF & (load_4(c,7) >> 7);
  long c4=0x1FFFFF & (load_4(c,10) >> 4);
  long c5=0x1FFFFF & (load_3(c,13) >> 1);
  long c6=0x1FFFFF & (load_4(c,15) >> 6);
  long c7=0x1FFFFF & (load_3(c,18) >> 3);
  long c8=0x1FFFFF & load_3(c,21);
  long c9=0x1FFFFF & (load_4(c,23) >> 5);
  long c10=0x1FFFFF & (load_3(c,26) >> 2);
  long c11=(load_4(c,28) >> 7);
  long s0;
  long s1;
  long s2;
  long s3;
  long s4;
  long s5;
  long s6;
  long s7;
  long s8;
  long s9;
  long s10;
  long s11;
  long s12;
  long s13;
  long s14;
  long s15;
  long s16;
  long s17;
  long s18;
  long s19;
  long s20;
  long s21;
  long s22;
  long s23;
  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;
  long carry10;
  long carry11;
  long carry12;
  long carry13;
  long carry14;
  long carry15;
  long carry16;
  long carry17;
  long carry18;
  long carry19;
  long carry20;
  long carry21;
  long carry22;
  s0=c0 + a0 * b0;
  s1=c1 + a0 * b1 + a1 * b0;
  s2=c2 + a0 * b2 + a1 * b1 + a2 * b0;
  s3=c3 + a0 * b3 + a1 * b2 + a2 * b1 + a3 * b0;
  s4=c4 + a0 * b4 + a1 * b3 + a2 * b2 + a3 * b1 + a4 * b0;
  s5=c5 + a0 * b5 + a1 * b4 + a2 * b3 + a3 * b2 + a4 * b1 + a5 * b0;
  s6=c6 + a0 * b6 + a1 * b5 + a2 * b4 + a3 * b3 + a4 * b2 + a5 * b1 + a6 * b0;
  s7=c7 + a0 * b7 + a1 * b6 + a2 * b5 + a3 * b4 + a4 * b3 + a5 * b2 + a6 * b1 + a7 * b0;
  s8=c8 + a0 * b8 + a1 * b7 + a2 * b6 + a3 * b5 + a4 * b4 + a5 * b3 + a6 * b2 + a7 * b1 + a8 * b0;
  s9=c9 + a0 * b9 + a1 * b8 + a2 * b7 + a3 * b6 + a4 * b5 + a5 * b4 + a6 * b3 + a7 * b2 + a8 * b1 + a9 * b0;
  s10=c10 + a0 * b10 + a1 * b9 + a2 * b8 + a3 * b7 + a4 * b6 + a5 * b5 + a6 * b4 + a7 * b3 + a8 * b2 + a9 * b1 + a10 * b0;
  s11=c11 + a0 * b11 + a1 * b10 + a2 * b9 + a3 * b8 + a4 * b7 + a5 * b6 + a6 * b5 + a7 * b4 + a8 * b3 + a9 * b2 + a10 * b1 + a11 * b0;
  s12=a1 * b11 + a2 * b10 + a3 * b9 + a4 * b8 + a5 * b7 + a6 * b6 + a7 * b5 + a8 * b4 + a9 * b3 + a10 * b2 + a11 * b1;
  s13=a2 * b11 + a3 * b10 + a4 * b9 + a5 * b8 + a6 * b7 + a7 * b6 + a8 * b5 + a9 * b4 + a10 * b3 + a11 * b2;
  s14=a3 * b11 + a4 * b10 + a5 * b9 + a6 * b8 + a7 * b7 + a8 * b6 + a9 * b5 + a10 * b4 + a11 * b3;
  s15=a4 * b11 + a5 * b10 + a6 * b9 + a7 * b8 + a8 * b7 + a9 * b6 + a10 * b5 + a11 * b4;
  s16=a5 * b11 + a6 * b10 + a7 * b9 + a8 * b8 + a9 * b7 + a10 * b6 + a11 * b5;
  s17=a6 * b11 + a7 * b10 + a8 * b9 + a9 * b8 + a10 * b7 + a11 * b6;
  s18=a7 * b11 + a8 * b10 + a9 * b9 + a10 * b8 + a11 * b7;
  s19=a8 * b11 + a9 * b10 + a10 * b9 + a11 * b8;
  s20=a9 * b11 + a10 * b10 + a11 * b9;
  s21=a10 * b11 + a11 * b10;
  s22=a11 * b11;
  carry0=(s0 + (1 << 20)) >> 21;
  s1+=carry0;
  s0-=carry0 << 21;
  carry2=(s2 + (1 << 20)) >> 21;
  s3+=carry2;
  s2-=carry2 << 21;
  carry4=(s4 + (1 << 20)) >> 21;
  s5+=carry4;
  s4-=carry4 << 21;
  carry6=(s6 + (1 << 20)) >> 21;
  s7+=carry6;
  s6-=carry6 << 21;
  carry8=(s8 + (1 << 20)) >> 21;
  s9+=carry8;
  s8-=carry8 << 21;
  carry10=(s10 + (1 << 20)) >> 21;
  s11+=carry10;
  s10-=carry10 << 21;
  carry12=(s12 + (1 << 20)) >> 21;
  s13+=carry12;
  s12-=carry12 << 21;
  carry14=(s14 + (1 << 20)) >> 21;
  s15+=carry14;
  s14-=carry14 << 21;
  carry16=(s16 + (1 << 20)) >> 21;
  s17+=carry16;
  s16-=carry16 << 21;
  carry18=(s18 + (1 << 20)) >> 21;
  s19+=carry18;
  s18-=carry18 << 21;
  carry20=(s20 + (1 << 20)) >> 21;
  s21+=carry20;
  s20-=carry20 << 21;
  carry22=(s22 + (1 << 20)) >> 21;
  s23=carry22;
  s22-=carry22 << 21;
  carry1=(s1 + (1 << 20)) >> 21;
  s2+=carry1;
  s1-=carry1 << 21;
  carry3=(s3 + (1 << 20)) >> 21;
  s4+=carry3;
  s3-=carry3 << 21;
  carry5=(s5 + (1 << 20)) >> 21;
  s6+=carry5;
  s5-=carry5 << 21;
  carry7=(s7 + (1 << 20)) >> 21;
  s8+=carry7;
  s7-=carry7 << 21;
  carry9=(s9 + (1 << 20)) >> 21;
  s10+=carry9;
  s9-=carry9 << 21;
  carry11=(s11 + (1 << 20)) >> 21;
  s12+=carry11;
  s11-=carry11 << 21;
  carry13=(s13 + (1 << 20)) >> 21;
  s14+=carry13;
  s13-=carry13 << 21;
  carry15=(s15 + (1 << 20)) >> 21;
  s16+=carry15;
  s15-=carry15 << 21;
  carry17=(s17 + (1 << 20)) >> 21;
  s18+=carry17;
  s17-=carry17 << 21;
  carry19=(s19 + (1 << 20)) >> 21;
  s20+=carry19;
  s19-=carry19 << 21;
  carry21=(s21 + (1 << 20)) >> 21;
  s22+=carry21;
  s21-=carry21 << 21;
  s11+=s23 * 666643;
  s12+=s23 * 470296;
  s13+=s23 * 654183;
  s14-=s23 * 997805;
  s15+=s23 * 136657;
  s16-=s23 * 683901;
  s10+=s22 * 666643;
  s11+=s22 * 470296;
  s12+=s22 * 654183;
  s13-=s22 * 997805;
  s14+=s22 * 136657;
  s15-=s22 * 683901;
  s9+=s21 * 666643;
  s10+=s21 * 470296;
  s11+=s21 * 654183;
  s12-=s21 * 997805;
  s13+=s21 * 136657;
  s14-=s21 * 683901;
  s8+=s20 * 666643;
  s9+=s20 * 470296;
  s10+=s20 * 654183;
  s11-=s20 * 997805;
  s12+=s20 * 136657;
  s13-=s20 * 683901;
  s7+=s19 * 666643;
  s8+=s19 * 470296;
  s9+=s19 * 654183;
  s10-=s19 * 997805;
  s11+=s19 * 136657;
  s12-=s19 * 683901;
  s6+=s18 * 666643;
  s7+=s18 * 470296;
  s8+=s18 * 654183;
  s9-=s18 * 997805;
  s10+=s18 * 136657;
  s11-=s18 * 683901;
  carry6=(s6 + (1 << 20)) >> 21;
  s7+=carry6;
  s6-=carry6 << 21;
  carry8=(s8 + (1 << 20)) >> 21;
  s9+=carry8;
  s8-=carry8 << 21;
  carry10=(s10 + (1 << 20)) >> 21;
  s11+=carry10;
  s10-=carry10 << 21;
  carry12=(s12 + (1 << 20)) >> 21;
  s13+=carry12;
  s12-=carry12 << 21;
  carry14=(s14 + (1 << 20)) >> 21;
  s15+=carry14;
  s14-=carry14 << 21;
  carry16=(s16 + (1 << 20)) >> 21;
  s17+=carry16;
  s16-=carry16 << 21;
  carry7=(s7 + (1 << 20)) >> 21;
  s8+=carry7;
  s7-=carry7 << 21;
  carry9=(s9 + (1 << 20)) >> 21;
  s10+=carry9;
  s9-=carry9 << 21;
  carry11=(s11 + (1 << 20)) >> 21;
  s12+=carry11;
  s11-=carry11 << 21;
  carry13=(s13 + (1 << 20)) >> 21;
  s14+=carry13;
  s13-=carry13 << 21;
  carry15=(s15 + (1 << 20)) >> 21;
  s16+=carry15;
  s15-=carry15 << 21;
  s5+=s17 * 666643;
  s6+=s17 * 470296;
  s7+=s17 * 654183;
  s8-=s17 * 997805;
  s9+=s17 * 136657;
  s10-=s17 * 683901;
  s4+=s16 * 666643;
  s5+=s16 * 470296;
  s6+=s16 * 654183;
  s7-=s16 * 997805;
  s8+=s16 * 136657;
  s9-=s16 * 683901;
  s3+=s15 * 666643;
  s4+=s15 * 470296;
  s5+=s15 * 654183;
  s6-=s15 * 997805;
  s7+=s15 * 136657;
  s8-=s15 * 683901;
  s2+=s14 * 666643;
  s3+=s14 * 470296;
  s4+=s14 * 654183;
  s5-=s14 * 997805;
  s6+=s14 * 136657;
  s7-=s14 * 683901;
  s1+=s13 * 666643;
  s2+=s13 * 470296;
  s3+=s13 * 654183;
  s4-=s13 * 997805;
  s5+=s13 * 136657;
  s6-=s13 * 683901;
  s0+=s12 * 666643;
  s1+=s12 * 470296;
  s2+=s12 * 654183;
  s3-=s12 * 997805;
  s4+=s12 * 136657;
  s5-=s12 * 683901;
  carry0=(s0 + (1 << 20)) >> 21;
  s1+=carry0;
  s0-=carry0 << 21;
  carry2=(s2 + (1 << 20)) >> 21;
  s3+=carry2;
  s2-=carry2 << 21;
  carry4=(s4 + (1 << 20)) >> 21;
  s5+=carry4;
  s4-=carry4 << 21;
  carry6=(s6 + (1 << 20)) >> 21;
  s7+=carry6;
  s6-=carry6 << 21;
  carry8=(s8 + (1 << 20)) >> 21;
  s9+=carry8;
  s8-=carry8 << 21;
  carry10=(s10 + (1 << 20)) >> 21;
  s11+=carry10;
  s10-=carry10 << 21;
  carry1=(s1 + (1 << 20)) >> 21;
  s2+=carry1;
  s1-=carry1 << 21;
  carry3=(s3 + (1 << 20)) >> 21;
  s4+=carry3;
  s3-=carry3 << 21;
  carry5=(s5 + (1 << 20)) >> 21;
  s6+=carry5;
  s5-=carry5 << 21;
  carry7=(s7 + (1 << 20)) >> 21;
  s8+=carry7;
  s7-=carry7 << 21;
  carry9=(s9 + (1 << 20)) >> 21;
  s10+=carry9;
  s9-=carry9 << 21;
  carry11=(s11 + (1 << 20)) >> 21;
  s12=carry11;
  s11-=carry11 << 21;
  s0+=s12 * 666643;
  s1+=s12 * 470296;
  s2+=s12 * 654183;
  s3-=s12 * 997805;
  s4+=s12 * 136657;
  s5-=s12 * 683901;
  carry0=s0 >> 21;
  s1+=carry0;
  s0-=carry0 << 21;
  carry1=s1 >> 21;
  s2+=carry1;
  s1-=carry1 << 21;
  carry2=s2 >> 21;
  s3+=carry2;
  s2-=carry2 << 21;
  carry3=s3 >> 21;
  s4+=carry3;
  s3-=carry3 << 21;
  carry4=s4 >> 21;
  s5+=carry4;
  s4-=carry4 << 21;
  carry5=s5 >> 21;
  s6+=carry5;
  s5-=carry5 << 21;
  carry6=s6 >> 21;
  s7+=carry6;
  s6-=carry6 << 21;
  carry7=s7 >> 21;
  s8+=carry7;
  s7-=carry7 << 21;
  carry8=s8 >> 21;
  s9+=carry8;
  s8-=carry8 << 21;
  carry9=s9 >> 21;
  s10+=carry9;
  s9-=carry9 << 21;
  carry10=s10 >> 21;
  s11+=carry10;
  s10-=carry10 << 21;
  carry11=s11 >> 21;
  s12=carry11;
  s11-=carry11 << 21;
  s0+=s12 * 666643;
  s1+=s12 * 470296;
  s2+=s12 * 654183;
  s3-=s12 * 997805;
  s4+=s12 * 136657;
  s5-=s12 * 683901;
  carry0=s0 >> 21;
  s1+=carry0;
  s0-=carry0 << 21;
  carry1=s1 >> 21;
  s2+=carry1;
  s1-=carry1 << 21;
  carry2=s2 >> 21;
  s3+=carry2;
  s2-=carry2 << 21;
  carry3=s3 >> 21;
  s4+=carry3;
  s3-=carry3 << 21;
  carry4=s4 >> 21;
  s5+=carry4;
  s4-=carry4 << 21;
  carry5=s5 >> 21;
  s6+=carry5;
  s5-=carry5 << 21;
  carry6=s6 >> 21;
  s7+=carry6;
  s6-=carry6 << 21;
  carry7=s7 >> 21;
  s8+=carry7;
  s7-=carry7 << 21;
  carry8=s8 >> 21;
  s9+=carry8;
  s8-=carry8 << 21;
  carry9=s9 >> 21;
  s10+=carry9;
  s9-=carry9 << 21;
  carry10=s10 >> 21;
  s11+=carry10;
  s10-=carry10 << 21;
  byte[] result=new byte[32];
  result[0]=(byte)s0;
  result[1]=(byte)(s0 >> 8);
  result[2]=(byte)((s0 >> 16) | (s1 << 5));
  result[3]=(byte)(s1 >> 3);
  result[4]=(byte)(s1 >> 11);
  result[5]=(byte)((s1 >> 19) | (s2 << 2));
  result[6]=(byte)(s2 >> 6);
  result[7]=(byte)((s2 >> 14) | (s3 << 7));
  result[8]=(byte)(s3 >> 1);
  result[9]=(byte)(s3 >> 9);
  result[10]=(byte)((s3 >> 17) | (s4 << 4));
  result[11]=(byte)(s4 >> 4);
  result[12]=(byte)(s4 >> 12);
  result[13]=(byte)((s4 >> 20) | (s5 << 1));
  result[14]=(byte)(s5 >> 7);
  result[15]=(byte)((s5 >> 15) | (s6 << 6));
  result[16]=(byte)(s6 >> 2);
  result[17]=(byte)(s6 >> 10);
  result[18]=(byte)((s6 >> 18) | (s7 << 3));
  result[19]=(byte)(s7 >> 5);
  result[20]=(byte)(s7 >> 13);
  result[21]=(byte)s8;
  result[22]=(byte)(s8 >> 8);
  result[23]=(byte)((s8 >> 16) | (s9 << 5));
  result[24]=(byte)(s9 >> 3);
  result[25]=(byte)(s9 >> 11);
  result[26]=(byte)((s9 >> 19) | (s10 << 2));
  result[27]=(byte)(s10 >> 6);
  result[28]=(byte)((s10 >> 14) | (s11 << 7));
  result[29]=(byte)(s11 >> 1);
  result[30]=(byte)(s11 >> 9);
  result[31]=(byte)(s11 >> 17);
  return result;
}",0.9999565425231411
21013,"/** 
 * Specific hash requested, only matching keys will be allowed.
 * @param digest the hash algorithm that keys must have to sign or verify.
 */
public EdDSAEngine(MessageDigest digest){
  this();
  this.digest=digest;
}","/** 
 * Specific EdDSA-internal hash requested, only matching keys will be allowed.
 * @param digest the hash algorithm that keys must have to sign or verify.
 */
public EdDSAEngine(MessageDigest digest){
  this();
  this.digest=digest;
}",0.9674620390455532
21014,"/** 
 * h = f * g Can overlap h with f or g. Preconditions: |f| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc. |g| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc. Postconditions: |h| bounded by 1.01*2^25,1.01*2^24,1.01*2^25,1.01*2^24,etc. Notes on implementation strategy: Using schoolbook multiplication. Karatsuba would save a little in some cost models. Most multiplications by 2 and 19 are 32-bit precomputations; cheaper than 64-bit postcomputations. There is one remaining multiplication by 19 in the carry chain; one *19 precomputation can be merged into this, but the resulting data flow is considerably less clean. There are 12 carries below. 10 of them are 2-way parallelizable and vectorizable. Can get away with 11 carries, but then data flow is much deeper. With tighter constraints on inputs can squeeze carries into int32.
 */
public FieldElement multiply(FieldElement val){
  int[] g=((Ed25519FieldElement)val).t;
  int f0=t[0];
  int f1=t[1];
  int f2=t[2];
  int f3=t[3];
  int f4=t[4];
  int f5=t[5];
  int f6=t[6];
  int f7=t[7];
  int f8=t[8];
  int f9=t[9];
  int g0=g[0];
  int g1=g[1];
  int g2=g[2];
  int g3=g[3];
  int g4=g[4];
  int g5=g[5];
  int g6=g[6];
  int g7=g[7];
  int g8=g[8];
  int g9=g[9];
  int g1_19=19 * g1;
  int g2_19=19 * g2;
  int g3_19=19 * g3;
  int g4_19=19 * g4;
  int g5_19=19 * g5;
  int g6_19=19 * g6;
  int g7_19=19 * g7;
  int g8_19=19 * g8;
  int g9_19=19 * g9;
  int f1_2=2 * f1;
  int f3_2=2 * f3;
  int f5_2=2 * f5;
  int f7_2=2 * f7;
  int f9_2=2 * f9;
  long f0g0=f0 * (long)g0;
  long f0g1=f0 * (long)g1;
  long f0g2=f0 * (long)g2;
  long f0g3=f0 * (long)g3;
  long f0g4=f0 * (long)g4;
  long f0g5=f0 * (long)g5;
  long f0g6=f0 * (long)g6;
  long f0g7=f0 * (long)g7;
  long f0g8=f0 * (long)g8;
  long f0g9=f0 * (long)g9;
  long f1g0=f1 * (long)g0;
  long f1g1_2=f1_2 * (long)g1;
  long f1g2=f1 * (long)g2;
  long f1g3_2=f1_2 * (long)g3;
  long f1g4=f1 * (long)g4;
  long f1g5_2=f1_2 * (long)g5;
  long f1g6=f1 * (long)g6;
  long f1g7_2=f1_2 * (long)g7;
  long f1g8=f1 * (long)g8;
  long f1g9_38=f1_2 * (long)g9_19;
  long f2g0=f2 * (long)g0;
  long f2g1=f2 * (long)g1;
  long f2g2=f2 * (long)g2;
  long f2g3=f2 * (long)g3;
  long f2g4=f2 * (long)g4;
  long f2g5=f2 * (long)g5;
  long f2g6=f2 * (long)g6;
  long f2g7=f2 * (long)g7;
  long f2g8_19=f2 * (long)g8_19;
  long f2g9_19=f2 * (long)g9_19;
  long f3g0=f3 * (long)g0;
  long f3g1_2=f3_2 * (long)g1;
  long f3g2=f3 * (long)g2;
  long f3g3_2=f3_2 * (long)g3;
  long f3g4=f3 * (long)g4;
  long f3g5_2=f3_2 * (long)g5;
  long f3g6=f3 * (long)g6;
  long f3g7_38=f3_2 * (long)g7_19;
  long f3g8_19=f3 * (long)g8_19;
  long f3g9_38=f3_2 * (long)g9_19;
  long f4g0=f4 * (long)g0;
  long f4g1=f4 * (long)g1;
  long f4g2=f4 * (long)g2;
  long f4g3=f4 * (long)g3;
  long f4g4=f4 * (long)g4;
  long f4g5=f4 * (long)g5;
  long f4g6_19=f4 * (long)g6_19;
  long f4g7_19=f4 * (long)g7_19;
  long f4g8_19=f4 * (long)g8_19;
  long f4g9_19=f4 * (long)g9_19;
  long f5g0=f5 * (long)g0;
  long f5g1_2=f5_2 * (long)g1;
  long f5g2=f5 * (long)g2;
  long f5g3_2=f5_2 * (long)g3;
  long f5g4=f5 * (long)g4;
  long f5g5_38=f5_2 * (long)g5_19;
  long f5g6_19=f5 * (long)g6_19;
  long f5g7_38=f5_2 * (long)g7_19;
  long f5g8_19=f5 * (long)g8_19;
  long f5g9_38=f5_2 * (long)g9_19;
  long f6g0=f6 * (long)g0;
  long f6g1=f6 * (long)g1;
  long f6g2=f6 * (long)g2;
  long f6g3=f6 * (long)g3;
  long f6g4_19=f6 * (long)g4_19;
  long f6g5_19=f6 * (long)g5_19;
  long f6g6_19=f6 * (long)g6_19;
  long f6g7_19=f6 * (long)g7_19;
  long f6g8_19=f6 * (long)g8_19;
  long f6g9_19=f6 * (long)g9_19;
  long f7g0=f7 * (long)g0;
  long f7g1_2=f7_2 * (long)g1;
  long f7g2=f7 * (long)g2;
  long f7g3_38=f7_2 * (long)g3_19;
  long f7g4_19=f7 * (long)g4_19;
  long f7g5_38=f7_2 * (long)g5_19;
  long f7g6_19=f7 * (long)g6_19;
  long f7g7_38=f7_2 * (long)g7_19;
  long f7g8_19=f7 * (long)g8_19;
  long f7g9_38=f7_2 * (long)g9_19;
  long f8g0=f8 * (long)g0;
  long f8g1=f8 * (long)g1;
  long f8g2_19=f8 * (long)g2_19;
  long f8g3_19=f8 * (long)g3_19;
  long f8g4_19=f8 * (long)g4_19;
  long f8g5_19=f8 * (long)g5_19;
  long f8g6_19=f8 * (long)g6_19;
  long f8g7_19=f8 * (long)g7_19;
  long f8g8_19=f8 * (long)g8_19;
  long f8g9_19=f8 * (long)g9_19;
  long f9g0=f9 * (long)g0;
  long f9g1_38=f9_2 * (long)g1_19;
  long f9g2_19=f9 * (long)g2_19;
  long f9g3_38=f9_2 * (long)g3_19;
  long f9g4_19=f9 * (long)g4_19;
  long f9g5_38=f9_2 * (long)g5_19;
  long f9g6_19=f9 * (long)g6_19;
  long f9g7_38=f9_2 * (long)g7_19;
  long f9g8_19=f9 * (long)g8_19;
  long f9g9_38=f9_2 * (long)g9_19;
  long h0=f0g0 + f1g9_38 + f2g8_19+ f3g7_38+ f4g6_19+ f5g5_38+ f6g4_19+ f7g3_38+ f8g2_19+ f9g1_38;
  long h1=f0g1 + f1g0 + f2g9_19+ f3g8_19+ f4g7_19+ f5g6_19+ f6g5_19+ f7g4_19+ f8g3_19+ f9g2_19;
  long h2=f0g2 + f1g1_2 + f2g0+ f3g9_38+ f4g8_19+ f5g7_38+ f6g6_19+ f7g5_38+ f8g4_19+ f9g3_38;
  long h3=f0g3 + f1g2 + f2g1+ f3g0+ f4g9_19+ f5g8_19+ f6g7_19+ f7g6_19+ f8g5_19+ f9g4_19;
  long h4=f0g4 + f1g3_2 + f2g2+ f3g1_2+ f4g0+ f5g9_38+ f6g8_19+ f7g7_38+ f8g6_19+ f9g5_38;
  long h5=f0g5 + f1g4 + f2g3+ f3g2+ f4g1+ f5g0+ f6g9_19+ f7g8_19+ f8g7_19+ f9g6_19;
  long h6=f0g6 + f1g5_2 + f2g4+ f3g3_2+ f4g2+ f5g1_2+ f6g0+ f7g9_38+ f8g8_19+ f9g7_38;
  long h7=f0g7 + f1g6 + f2g5+ f3g4+ f4g3+ f5g2+ f6g1+ f7g0+ f8g9_19+ f9g8_19;
  long h8=f0g8 + f1g7_2 + f2g6+ f3g5_2+ f4g4+ f5g3_2+ f6g2+ f7g1_2+ f8g0+ f9g9_38;
  long h9=f0g9 + f1g8 + f2g7+ f3g6+ f4g5+ f5g4+ f6g3+ f7g2+ f8g1+ f9g0;
  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry1=(h1 + (long)(1 << 24)) >> 25;
  h2+=carry1;
  h1-=carry1 << 25;
  carry5=(h5 + (long)(1 << 24)) >> 25;
  h6+=carry5;
  h5-=carry5 << 25;
  carry2=(h2 + (long)(1 << 25)) >> 26;
  h3+=carry2;
  h2-=carry2 << 26;
  carry6=(h6 + (long)(1 << 25)) >> 26;
  h7+=carry6;
  h6-=carry6 << 26;
  carry3=(h3 + (long)(1 << 24)) >> 25;
  h4+=carry3;
  h3-=carry3 << 25;
  carry7=(h7 + (long)(1 << 24)) >> 25;
  h8+=carry7;
  h7-=carry7 << 25;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry8=(h8 + (long)(1 << 25)) >> 26;
  h9+=carry8;
  h8-=carry8 << 26;
  carry9=(h9 + (long)(1 << 24)) >> 25;
  h0+=carry9 * 19;
  h9-=carry9 << 25;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  int[] h=new int[10];
  h[0]=(int)h0;
  h[1]=(int)h1;
  h[2]=(int)h2;
  h[3]=(int)h3;
  h[4]=(int)h4;
  h[5]=(int)h5;
  h[6]=(int)h6;
  h[7]=(int)h7;
  h[8]=(int)h8;
  h[9]=(int)h9;
  return new Ed25519FieldElement(f,h);
}","/** 
 * h = f * g Can overlap h with f or g. Preconditions: |f| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc. |g| bounded by 1.65*2^26,1.65*2^25,1.65*2^26,1.65*2^25,etc. Postconditions: |h| bounded by 1.01*2^25,1.01*2^24,1.01*2^25,1.01*2^24,etc. Notes on implementation strategy: Using schoolbook multiplication. Karatsuba would save a little in some cost models. Most multiplications by 2 and 19 are 32-bit precomputations; cheaper than 64-bit postcomputations. There is one remaining multiplication by 19 in the carry chain; one *19 precomputation can be merged into this, but the resulting data flow is considerably less clean. There are 12 carries below. 10 of them are 2-way parallelizable and vectorizable. Can get away with 11 carries, but then data flow is much deeper. With tighter constraints on inputs can squeeze carries into int32.
 */
public FieldElement multiply(FieldElement val){
  int[] g=((Ed25519FieldElement)val).t;
  int g1_19=19 * g[1];
  int g2_19=19 * g[2];
  int g3_19=19 * g[3];
  int g4_19=19 * g[4];
  int g5_19=19 * g[5];
  int g6_19=19 * g[6];
  int g7_19=19 * g[7];
  int g8_19=19 * g[8];
  int g9_19=19 * g[9];
  int f1_2=2 * t[1];
  int f3_2=2 * t[3];
  int f5_2=2 * t[5];
  int f7_2=2 * t[7];
  int f9_2=2 * t[9];
  long f0g0=t[0] * (long)g[0];
  long f0g1=t[0] * (long)g[1];
  long f0g2=t[0] * (long)g[2];
  long f0g3=t[0] * (long)g[3];
  long f0g4=t[0] * (long)g[4];
  long f0g5=t[0] * (long)g[5];
  long f0g6=t[0] * (long)g[6];
  long f0g7=t[0] * (long)g[7];
  long f0g8=t[0] * (long)g[8];
  long f0g9=t[0] * (long)g[9];
  long f1g0=t[1] * (long)g[0];
  long f1g1_2=f1_2 * (long)g[1];
  long f1g2=t[1] * (long)g[2];
  long f1g3_2=f1_2 * (long)g[3];
  long f1g4=t[1] * (long)g[4];
  long f1g5_2=f1_2 * (long)g[5];
  long f1g6=t[1] * (long)g[6];
  long f1g7_2=f1_2 * (long)g[7];
  long f1g8=t[1] * (long)g[8];
  long f1g9_38=f1_2 * (long)g9_19;
  long f2g0=t[2] * (long)g[0];
  long f2g1=t[2] * (long)g[1];
  long f2g2=t[2] * (long)g[2];
  long f2g3=t[2] * (long)g[3];
  long f2g4=t[2] * (long)g[4];
  long f2g5=t[2] * (long)g[5];
  long f2g6=t[2] * (long)g[6];
  long f2g7=t[2] * (long)g[7];
  long f2g8_19=t[2] * (long)g8_19;
  long f2g9_19=t[2] * (long)g9_19;
  long f3g0=t[3] * (long)g[0];
  long f3g1_2=f3_2 * (long)g[1];
  long f3g2=t[3] * (long)g[2];
  long f3g3_2=f3_2 * (long)g[3];
  long f3g4=t[3] * (long)g[4];
  long f3g5_2=f3_2 * (long)g[5];
  long f3g6=t[3] * (long)g[6];
  long f3g7_38=f3_2 * (long)g7_19;
  long f3g8_19=t[3] * (long)g8_19;
  long f3g9_38=f3_2 * (long)g9_19;
  long f4g0=t[4] * (long)g[0];
  long f4g1=t[4] * (long)g[1];
  long f4g2=t[4] * (long)g[2];
  long f4g3=t[4] * (long)g[3];
  long f4g4=t[4] * (long)g[4];
  long f4g5=t[4] * (long)g[5];
  long f4g6_19=t[4] * (long)g6_19;
  long f4g7_19=t[4] * (long)g7_19;
  long f4g8_19=t[4] * (long)g8_19;
  long f4g9_19=t[4] * (long)g9_19;
  long f5g0=t[5] * (long)g[0];
  long f5g1_2=f5_2 * (long)g[1];
  long f5g2=t[5] * (long)g[2];
  long f5g3_2=f5_2 * (long)g[3];
  long f5g4=t[5] * (long)g[4];
  long f5g5_38=f5_2 * (long)g5_19;
  long f5g6_19=t[5] * (long)g6_19;
  long f5g7_38=f5_2 * (long)g7_19;
  long f5g8_19=t[5] * (long)g8_19;
  long f5g9_38=f5_2 * (long)g9_19;
  long f6g0=t[6] * (long)g[0];
  long f6g1=t[6] * (long)g[1];
  long f6g2=t[6] * (long)g[2];
  long f6g3=t[6] * (long)g[3];
  long f6g4_19=t[6] * (long)g4_19;
  long f6g5_19=t[6] * (long)g5_19;
  long f6g6_19=t[6] * (long)g6_19;
  long f6g7_19=t[6] * (long)g7_19;
  long f6g8_19=t[6] * (long)g8_19;
  long f6g9_19=t[6] * (long)g9_19;
  long f7g0=t[7] * (long)g[0];
  long f7g1_2=f7_2 * (long)g[1];
  long f7g2=t[7] * (long)g[2];
  long f7g3_38=f7_2 * (long)g3_19;
  long f7g4_19=t[7] * (long)g4_19;
  long f7g5_38=f7_2 * (long)g5_19;
  long f7g6_19=t[7] * (long)g6_19;
  long f7g7_38=f7_2 * (long)g7_19;
  long f7g8_19=t[7] * (long)g8_19;
  long f7g9_38=f7_2 * (long)g9_19;
  long f8g0=t[8] * (long)g[0];
  long f8g1=t[8] * (long)g[1];
  long f8g2_19=t[8] * (long)g2_19;
  long f8g3_19=t[8] * (long)g3_19;
  long f8g4_19=t[8] * (long)g4_19;
  long f8g5_19=t[8] * (long)g5_19;
  long f8g6_19=t[8] * (long)g6_19;
  long f8g7_19=t[8] * (long)g7_19;
  long f8g8_19=t[8] * (long)g8_19;
  long f8g9_19=t[8] * (long)g9_19;
  long f9g0=t[9] * (long)g[0];
  long f9g1_38=f9_2 * (long)g1_19;
  long f9g2_19=t[9] * (long)g2_19;
  long f9g3_38=f9_2 * (long)g3_19;
  long f9g4_19=t[9] * (long)g4_19;
  long f9g5_38=f9_2 * (long)g5_19;
  long f9g6_19=t[9] * (long)g6_19;
  long f9g7_38=f9_2 * (long)g7_19;
  long f9g8_19=t[9] * (long)g8_19;
  long f9g9_38=f9_2 * (long)g9_19;
  long h0=f0g0 + f1g9_38 + f2g8_19+ f3g7_38+ f4g6_19+ f5g5_38+ f6g4_19+ f7g3_38+ f8g2_19+ f9g1_38;
  long h1=f0g1 + f1g0 + f2g9_19+ f3g8_19+ f4g7_19+ f5g6_19+ f6g5_19+ f7g4_19+ f8g3_19+ f9g2_19;
  long h2=f0g2 + f1g1_2 + f2g0+ f3g9_38+ f4g8_19+ f5g7_38+ f6g6_19+ f7g5_38+ f8g4_19+ f9g3_38;
  long h3=f0g3 + f1g2 + f2g1+ f3g0+ f4g9_19+ f5g8_19+ f6g7_19+ f7g6_19+ f8g5_19+ f9g4_19;
  long h4=f0g4 + f1g3_2 + f2g2+ f3g1_2+ f4g0+ f5g9_38+ f6g8_19+ f7g7_38+ f8g6_19+ f9g5_38;
  long h5=f0g5 + f1g4 + f2g3+ f3g2+ f4g1+ f5g0+ f6g9_19+ f7g8_19+ f8g7_19+ f9g6_19;
  long h6=f0g6 + f1g5_2 + f2g4+ f3g3_2+ f4g2+ f5g1_2+ f6g0+ f7g9_38+ f8g8_19+ f9g7_38;
  long h7=f0g7 + f1g6 + f2g5+ f3g4+ f4g3+ f5g2+ f6g1+ f7g0+ f8g9_19+ f9g8_19;
  long h8=f0g8 + f1g7_2 + f2g6+ f3g5_2+ f4g4+ f5g3_2+ f6g2+ f7g1_2+ f8g0+ f9g9_38;
  long h9=f0g9 + f1g8 + f2g7+ f3g6+ f4g5+ f5g4+ f6g3+ f7g2+ f8g1+ f9g0;
  long carry0;
  long carry1;
  long carry2;
  long carry3;
  long carry4;
  long carry5;
  long carry6;
  long carry7;
  long carry8;
  long carry9;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry1=(h1 + (long)(1 << 24)) >> 25;
  h2+=carry1;
  h1-=carry1 << 25;
  carry5=(h5 + (long)(1 << 24)) >> 25;
  h6+=carry5;
  h5-=carry5 << 25;
  carry2=(h2 + (long)(1 << 25)) >> 26;
  h3+=carry2;
  h2-=carry2 << 26;
  carry6=(h6 + (long)(1 << 25)) >> 26;
  h7+=carry6;
  h6-=carry6 << 26;
  carry3=(h3 + (long)(1 << 24)) >> 25;
  h4+=carry3;
  h3-=carry3 << 25;
  carry7=(h7 + (long)(1 << 24)) >> 25;
  h8+=carry7;
  h7-=carry7 << 25;
  carry4=(h4 + (long)(1 << 25)) >> 26;
  h5+=carry4;
  h4-=carry4 << 26;
  carry8=(h8 + (long)(1 << 25)) >> 26;
  h9+=carry8;
  h8-=carry8 << 26;
  carry9=(h9 + (long)(1 << 24)) >> 25;
  h0+=carry9 * 19;
  h9-=carry9 << 25;
  carry0=(h0 + (long)(1 << 25)) >> 26;
  h1+=carry0;
  h0-=carry0 << 26;
  int[] h=new int[10];
  h[0]=(int)h0;
  h[1]=(int)h1;
  h[2]=(int)h2;
  h[3]=(int)h3;
  h[4]=(int)h4;
  h[5]=(int)h5;
  h[6]=(int)h6;
  h[7]=(int)h7;
  h[8]=(int)h8;
  h[9]=(int)h9;
  return new Ed25519FieldElement(f,h);
}",0.4680310726023304
21015,"public FieldElement(Field f){
  this.f=f;
}","public FieldElement(Field f){
  if (null == f) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.f=f;
}",0.5119047619047619
21016,"/** 
 * Gets a value indicating whether or not the field element is non-zero.
 * @return 1 if it is non-zero, 0 otherwise.
 */
public boolean isNonZero(){
  byte[] s=toByteArray();
  return Utils.equal(s,zero) == 1;
}","/** 
 * Gets a value indicating whether or not the field element is non-zero.
 * @return 1 if it is non-zero, 0 otherwise.
 */
public boolean isNonZero(){
  final byte[] s=toByteArray();
  return Utils.equal(s,ZERO) == 0;
}",0.9636363636363636
21017,"/** 
 * Converts a 32 byte representation to a BigInteger. Value: bytes[0] + 2^8 * bytes[1] + ... + 2^248 * bytes[31]
 * @param bytes The 32 byte representation.
 * @return The BigInteger.
 */
public static BigInteger toBigInteger(final byte[] bytes){
  BigInteger b=BigInteger.ZERO;
  for (int i=0; i < 32; i++) {
    b=b.add(BigInteger.ONE.multiply(BigInteger.valueOf(bytes[i] & 0xff)).shiftLeft(i * 8));
  }
  return b;
}","/** 
 * Converts a field element to a BigInteger.
 * @param f The field element.
 * @return The BigInteger.
 */
public static BigInteger toBigInteger(final FieldElement f){
  return toBigInteger(f.toByteArray());
}",0.3918495297805642
21018,"@Test public void decodeReturnsCorrectFieldElement(){
  for (int i=0; i < 10000; i++) {
    final byte[] bytes=new byte[32];
    random.nextBytes(bytes);
    bytes[31]=(byte)(bytes[31] & 0x7f);
    final BigInteger b1=MathUtils.toBigInteger(bytes);
    final Ed25519FieldElement f=(Ed25519FieldElement)MathUtils.getField().getEncoding().decode(bytes);
    final BigInteger b2=MathUtils.toBigInteger(f.t).mod(q);
    Assert.assertThat(b2,IsEqual.equalTo(b1));
  }
}","@Test public void decodeReturnsCorrectFieldElement(){
  for (int i=0; i < 10000; i++) {
    final byte[] bytes=new byte[32];
    random.nextBytes(bytes);
    bytes[31]=(byte)(bytes[31] & 0x7f);
    final BigInteger b1=MathUtils.toBigInteger(bytes);
    final Ed25519FieldElement f=(Ed25519FieldElement)MathUtils.getField().getEncoding().decode(bytes);
    final BigInteger b2=MathUtils.toBigInteger(f.t).mod(MathUtils.getQ());
    Assert.assertThat(b2,IsEqual.equalTo(b1));
  }
}",0.9819724284199364
21019,"@Test public void encodeReturnsCorrectByteArray(){
  for (int i=0; i < 10000; i++) {
    final int[] t=new int[10];
    for (int j=0; j < 10; j++) {
      t[j]=random.nextInt(1 << 28) - (1 << 27);
    }
    final FieldElement fieldElement1=new Ed25519FieldElement(MathUtils.getField(),t);
    final BigInteger b=MathUtils.toBigInteger(t);
    final byte[] bytes=MathUtils.getField().getEncoding().encode(fieldElement1);
    Assert.assertThat(bytes,IsEqual.equalTo(MathUtils.toByteArray(b.mod(q))));
  }
}","@Test public void encodeReturnsCorrectByteArray(){
  for (int i=0; i < 10000; i++) {
    final int[] t=new int[10];
    for (int j=0; j < 10; j++) {
      t[j]=random.nextInt(1 << 28) - (1 << 27);
    }
    final FieldElement fieldElement1=new Ed25519FieldElement(MathUtils.getField(),t);
    final BigInteger b=MathUtils.toBigInteger(t);
    final byte[] bytes=MathUtils.getField().getEncoding().encode(fieldElement1);
    Assert.assertThat(bytes,IsEqual.equalTo(MathUtils.toByteArray(b.mod(MathUtils.getQ()))));
  }
}",0.9833822091886608
21020,"@SuppressWarnings(""String_Node_Str"") @Override protected <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {
  if (keySpec.isAssignableFrom(EdDSAPublicKeySpec.class) && key instanceof EdDSAPublicKey) {
    EdDSAPublicKey k=(EdDSAPublicKey)key;
    if (k.getParams() != null) {
      return (T)new EdDSAPublicKeySpec(k.getA(),k.getParams());
    }
  }
 else   if (keySpec.isAssignableFrom(EdDSAPrivateKeySpec.class) && key instanceof EdDSAPrivateKey) {
    EdDSAPrivateKey k=(EdDSAPrivateKey)key;
    if (k.getParams() != null) {
      return (T)new EdDSAPrivateKeySpec(k.getH(),k.geta(),k.getA(),k.getParams());
    }
  }
  throw new InvalidKeySpecException(""String_Node_Str"" + key + ""String_Node_Str""+ keySpec);
}","@SuppressWarnings(""String_Node_Str"") @Override protected <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {
  if (keySpec.isAssignableFrom(EdDSAPublicKeySpec.class) && key instanceof EdDSAPublicKey) {
    EdDSAPublicKey k=(EdDSAPublicKey)key;
    if (k.getParams() != null) {
      return (T)new EdDSAPublicKeySpec(k.getA(),k.getParams());
    }
  }
 else   if (keySpec.isAssignableFrom(EdDSAPrivateKeySpec.class) && key instanceof EdDSAPrivateKey) {
    EdDSAPrivateKey k=(EdDSAPrivateKey)key;
    if (k.getParams() != null) {
      return (T)new EdDSAPrivateKeySpec(k.getSeed(),k.getH(),k.geta(),k.getA(),k.getParams());
    }
  }
  throw new InvalidKeySpecException(""String_Node_Str"" + key + ""String_Node_Str""+ keySpec);
}",0.992156862745098
21021,"public EdDSAPrivateKeySpec(byte[] h,BigInteger a,GroupElement A,EdDSAParameterSpec spec){
  this.h=h;
  this.a=a;
  this.A=A;
  this.spec=spec;
}","public EdDSAPrivateKeySpec(byte[] seed,byte[] h,BigInteger a,GroupElement A,EdDSAParameterSpec spec){
  this.seed=seed;
  this.h=h;
  this.a=a;
  this.A=A;
  this.spec=spec;
}",0.90625
21022,"@Override protected boolean engineVerify(byte[] sigBytes) throws SignatureException {
  Curve curve=key.getParams().getCurve();
  int b=curve.getField().getb();
  if (sigBytes.length != b / 4)   throw new IllegalArgumentException(""String_Node_Str"");
  byte[] Rbyte=Arrays.copyOfRange(sigBytes,0,b / 8);
  byte[] Sbyte=Arrays.copyOfRange(sigBytes,b / 8,b / 4);
  digest.update(Rbyte);
  digest.update(((EdDSAPublicKey)key).getAbyte());
  byte[] h=digest.digest(message);
  GroupElement R=key.getParams().getB().doubleScalarMultiplyVariableTime(((EdDSAPublicKey)key).getA(),h,Sbyte);
  if (!R.toByteArray().equals(Rbyte))   return false;
  return true;
}","@Override protected boolean engineVerify(byte[] sigBytes) throws SignatureException {
  Curve curve=key.getParams().getCurve();
  int b=curve.getField().getb();
  if (sigBytes.length != b / 4)   throw new IllegalArgumentException(""String_Node_Str"");
  byte[] Rbyte=Arrays.copyOfRange(sigBytes,0,b / 8);
  byte[] Sbyte=Arrays.copyOfRange(sigBytes,b / 8,b / 4);
  digest.update(Rbyte);
  digest.update(((EdDSAPublicKey)key).getAbyte());
  byte[] h=digest.digest(message);
  LittleEndianEncoding leEnc=new LittleEndianEncoding();
  h=leEnc.encode(leEnc.decode(h).mod(key.getParams().getL()),b / 8);
  GroupElement R=key.getParams().getB().doubleScalarMultiplyVariableTime(((EdDSAPublicKey)key).getA(),h,Sbyte);
  if (!R.toByteArray().equals(Rbyte))   return false;
  return true;
}",0.911888111888112
21023,"private BigInteger Hint(byte[] h){
  BigInteger hsum=BigInteger.ZERO;
  for (int i=0; i < 2 * key.getParams().getCurve().getField().getb(); i++) {
    hsum=hsum.add(BigInteger.valueOf(2).pow(i).multiply(BigInteger.valueOf(bit(h,i))));
  }
  return hsum;
}","/** 
 * From the Ed25519 paper: Here we interpret 2b-bit strings in little-endian form as integers in {0, 1,..., 2^(2b)-1}.
 * @param h the output of a hash function.
 * @return 2^h
 */
private BigInteger Hint(byte[] h){
  if (h.length != key.getParams().getCurve().getField().getb() / 4)   throw new IllegalArgumentException(""String_Node_Str"");
  for (int i=0; i < h.length / 2; i++) {
    byte tmp=h[i];
    h[i]=h[h.length - 1 - i];
    h[h.length - 1 - i]=tmp;
  }
  return new BigInteger(1,h);
}",0.2357615894039735
21024,"public Field(int b,BigInteger q){
  this.b=b;
  this.q=q;
  this.qm2=q.subtract(Constants.TWO);
  this.qm5=q.subtract(Constants.FIVE);
  this.qp3=q.add(Constants.THREE);
}","public Field(int b,BigInteger q){
  this.b=b;
  this.q=q;
  this.qm2=q.subtract(Constants.TWO);
  this.qm5=q.subtract(Constants.FIVE);
  this.qp3=q.add(Constants.THREE);
  this.mask=Constants.ONE.shiftLeft(b - 1).subtract(Constants.ONE);
}",0.8341463414634146
21025,"public boolean isNegative(){
  return bi.compareTo(BigInteger.ZERO) == -1;
}","/** 
 * From the Ed25519 paper: x is negative if the (b-1)-bit encoding of x is lexicographically larger than the (b-1)-bit encoding of -x. If q is an odd prime and the encoding is the little-endian representation of {0, 1,..., q-1} then the negative elements of F_q are {1, 3, 5,..., q-2}.
 * @return
 */
public boolean isNegative(){
  return bi.testBit(0);
}",0.2110091743119266
21026,"/** 
 * Translates a byte array containing the two's-complement binary representation of a FieldElement into a FieldElement. The input array is assumed to be in little-endian byte-order: the least significant byte is in the zeroth element.
 * @param val
 */
public FieldElement(Field f,byte[] val){
  if (val.length != f.getb() / 8)   throw new IllegalArgumentException(""String_Node_Str"");
  byte[] out=new byte[val.length];
  for (int i=0; i < val.length; i++) {
    out[i]=val[val.length - 1 - i];
  }
  out[0]&=0x7f;
  this.f=f;
  this.bi=new BigInteger(out);
}","/** 
 * Decode a FieldElement from its (b-1)-bit encoding. The highest bit is masked out.
 * @param val the (b-1)-bit encoding of a FieldElement.
 * @return the FieldElement represented by 'val'.
 */
public FieldElement(Field f,byte[] val){
  if (val.length != f.getb() / 8)   throw new IllegalArgumentException(""String_Node_Str"");
  byte[] out=new byte[val.length];
  for (int i=0; i < val.length; i++) {
    out[i]=val[val.length - 1 - i];
  }
  this.f=f;
  this.bi=new BigInteger(1,out).and(f.getMask());
}",0.5573159366262814
21027,"/** 
 * Returns a byte array containing the two's-complement representation of this FieldElement. The byte array will be in little-endian byte-order: the least significant byte is in the zeroth element. The array will contain b/8 bytes.
 * @return a byte array containing the two's-complement representation ofthis FieldElement.
 */
public byte[] toByteArray(){
  byte[] in=bi.toByteArray();
  byte[] out=new byte[f.getb() / 8];
  for (int i=0; i < in.length; i++) {
    out[i]=in[in.length - 1 - i];
  }
  for (int i=in.length; i < out.length; i++) {
    out[i]=0;
  }
  return out;
}","/** 
 * Encode a FieldElement in its (b-1)-bit encoding.
 * @return the (b-1)-bit encoding of this FieldElement.
 */
public byte[] toByteArray(){
  byte[] in=bi.and(f.getMask()).toByteArray();
  byte[] out=new byte[f.getb() / 8];
  for (int i=0; i < in.length; i++) {
    out[i]=in[in.length - 1 - i];
  }
  for (int i=in.length; i < out.length; i++) {
    out[i]=0;
  }
  return out;
}",0.4613800205973223
21028,"public GroupElement(Curve curve,byte[] s){
  FieldElement x, y, yy, u, v, v3, vxx, check;
  y=curve.fromByteArray(s);
  yy=y.square();
  u=yy.subtractOne();
  v=yy.multiply(curve.getD()).addOne();
  v3=v.square().multiply(v);
  x=v3.square().multiply(v).multiply(u);
  x=x.pow(curve.getField().getQm5().divide(BigInteger.valueOf(8)));
  x=v3.multiply(u).multiply(x);
  vxx=x.square().multiply(v);
  check=vxx.subtract(u);
  if (check.isNonZero()) {
    check=vxx.add(u);
    if (check.isNonZero())     throw new IllegalArgumentException(""String_Node_Str"");
    x=x.multiply(curve.getI());
  }
  if ((x.isNegative() ? 1 : 0) == (s[s.length - 1] & 0x01)) {
    x=x.negate();
  }
  this.curve=curve;
  repr=Representation.P3;
  X=x;
  Y=y;
  Z=curve.fromBigInteger(Constants.ONE);
  T=X.multiply(Y);
}","public GroupElement(Curve curve,byte[] s){
  FieldElement x, y, yy, u, v, v3, vxx, check;
  y=curve.fromByteArray(s);
  yy=y.square();
  u=yy.subtractOne();
  v=yy.multiply(curve.getD()).addOne();
  v3=v.square().multiply(v);
  x=v3.square().multiply(v).multiply(u);
  x=x.pow(curve.getField().getQm5().divide(BigInteger.valueOf(8)));
  x=v3.multiply(u).multiply(x);
  vxx=x.square().multiply(v);
  check=vxx.subtract(u);
  if (check.isNonZero()) {
    check=vxx.add(u);
    if (check.isNonZero())     throw new IllegalArgumentException(""String_Node_Str"");
    x=x.multiply(curve.getI());
  }
  if ((x.isNegative() ? 1 : 0) != Utils.bit(s,curve.getField().getb() - 1)) {
    x=x.negate();
  }
  this.curve=curve;
  repr=Representation.P3;
  X=x;
  Y=y;
  Z=curve.fromBigInteger(Constants.ONE);
  T=X.multiply(Y);
}",0.9627791563275434
21029,"public byte[] toByteArray(){
switch (repr) {
case P2:
case P3:
    FieldElement recip=Z.invert();
  FieldElement x=X.multiply(recip);
FieldElement y=Y.multiply(recip);
byte[] s=y.toByteArray();
s[s.length - 1]|=(x.isNegative() ? 0x80 : 0);
return s;
default :
return toP2().toByteArray();
}
}","public byte[] toByteArray(){
switch (repr) {
case P2:
case P3:
    FieldElement recip=Z.invert();
  FieldElement x=X.multiply(recip);
FieldElement y=Y.multiply(recip);
byte[] s=y.toByteArray();
s[s.length - 1]|=(x.isNegative() ? (byte)0x80 : 0);
return s;
default :
return toP2().toByteArray();
}
}",0.9898305084745764
21030,"@Override public KeyPair generateKeyPair(){
  if (!initialized)   initialize(strength,new SecureRandom());
  byte[] seed=new byte[edParams.getCurve().getField().getb()];
  random.nextBytes(seed);
  EdDSAPrivateKeySpec privKey=new EdDSAPrivateKeySpec(seed,edParams);
  EdDSAPublicKeySpec pubKey=new EdDSAPublicKeySpec(privKey.getA(),edParams);
  return new KeyPair(new EdDSAPublicKey(pubKey),new EdDSAPrivateKey(privKey));
}","@Override public KeyPair generateKeyPair(){
  if (!initialized)   initialize(strength,new SecureRandom());
  byte[] seed=new byte[edParams.getCurve().getField().getb() / 8];
  random.nextBytes(seed);
  EdDSAPrivateKeySpec privKey=new EdDSAPrivateKeySpec(seed,edParams);
  EdDSAPublicKeySpec pubKey=new EdDSAPublicKeySpec(privKey.getA(),edParams);
  return new KeyPair(new EdDSAPublicKey(pubKey),new EdDSAPrivateKey(privKey));
}",0.9952941176470588
21031,"private static GroupElement scalarmult(GroupElement P,BigInteger e){
  BigInteger[] t=new BigInteger[9999];
  GroupElement Q;
  t[0]=e;
  int i=1;
  while (true) {
    t[i]=t[i - 1].divide(BigInteger.valueOf(2));
    ;
    if (t[i].equals(BigInteger.ZERO)) {
      break;
    }
    i++;
  }
  GroupElement Pcached=GroupElement.cached(P);
  Q=GroupElement.P2_ZERO;
  for (int j=i; j >= 0; j--) {
    Q=Q.add(GroupElement.cached(Q));
    if (t[j].testBit(0))     Q=Q.add(Pcached);
  }
  return Q;
}","private static GroupElement scalarmult(GroupElement P,BigInteger e){
  BigInteger[] t=new BigInteger[9999];
  GroupElement Q;
  t[0]=e;
  int i=1;
  while (true) {
    t[i]=t[i - 1].divide(BigInteger.valueOf(2));
    ;
    if (t[i].equals(BigInteger.ZERO)) {
      break;
    }
    i++;
  }
  GroupElement Pcached=GroupElement.cached(P);
  Q=GroupElement.P3_ZERO;
  for (int j=i; j >= 0; j--) {
    Q=GroupElement.p3(Q.add(GroupElement.cached(Q)));
    if (t[j].testBit(0))     Q=GroupElement.p3(Q.add(Pcached));
  }
  return Q;
}",0.9649122807017544
21032,"public static void main(String[] args){
  byte[] sk=new byte[32];
  Arrays.fill(sk,(byte)0);
  byte[] pk=Ed25519.publickey(sk);
  System.out.println(""String_Node_Str"" + getHex(pk) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodeint(BigInteger.ZERO)));
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodeint(BigInteger.ONE)));
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodeint(BigInteger.TEN)));
  BigInteger[] zerozero=new BigInteger[]{BigInteger.ZERO,BigInteger.ZERO};
  BigInteger[] oneone=new BigInteger[]{BigInteger.ONE,BigInteger.ONE};
  BigInteger[] tenzero=new BigInteger[]{BigInteger.TEN,BigInteger.ZERO};
  BigInteger[] oneten=new BigInteger[]{BigInteger.ONE,BigInteger.TEN};
  BigInteger[] pkr=new BigInteger[]{new BigInteger(""String_Node_Str""),new BigInteger(""String_Node_Str"")};
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodepoint(zerozero)));
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodepoint(oneone)));
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodepoint(tenzero)));
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodepoint(oneten)));
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodepoint(pkr)));
  byte[] message=""String_Node_Str"".getBytes(Charset.forName(""String_Node_Str""));
  byte[] signature=Ed25519.signature(message,sk,pk);
  System.out.println(""String_Node_Str"" + getHex(signature));
  try {
    System.out.println(""String_Node_Str"" + Ed25519.checkvalid(signature,message,pk));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  byte[] sk=new byte[32];
  Arrays.fill(sk,(byte)0);
  byte[] pk=Ed25519.publickey(sk);
  System.out.println(""String_Node_Str"" + getHex(pk) + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + getHex(FieldElement.ZERO.toByteArray()));
  System.out.println(""String_Node_Str"" + getHex(FieldElement.ONE.toByteArray()));
  System.out.println(""String_Node_Str"" + getHex(new FieldElement(BigInteger.TEN).toByteArray()));
  BigInteger[] zerozero=new BigInteger[]{BigInteger.ZERO,BigInteger.ZERO};
  BigInteger[] oneone=new BigInteger[]{BigInteger.ONE,BigInteger.ONE};
  BigInteger[] tenzero=new BigInteger[]{BigInteger.TEN,BigInteger.ZERO};
  BigInteger[] oneten=new BigInteger[]{BigInteger.ONE,BigInteger.TEN};
  BigInteger[] pkr=new BigInteger[]{new BigInteger(""String_Node_Str""),new BigInteger(""String_Node_Str"")};
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodepoint(zerozero)));
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodepoint(oneone)));
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodepoint(tenzero)));
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodepoint(oneten)));
  System.out.println(""String_Node_Str"" + getHex(Ed25519.encodepoint(pkr)));
  byte[] message=""String_Node_Str"".getBytes(Charset.forName(""String_Node_Str""));
  byte[] signature=Ed25519.signature(message,sk,pk);
  System.out.println(""String_Node_Str"" + getHex(signature));
  try {
    System.out.println(""String_Node_Str"" + Ed25519.checkvalid(signature,message,pk));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.4336144954701655
21033,"@Test public void testSingleValueLongCompares() throws IOException {
  byte[] rowKey=dataHelper.randomData(""String_Node_Str"");
  byte[] qualToCheck=dataHelper.randomData(""String_Node_Str"");
  Table table=getDefaultTable();
  table.put(new Put(rowKey).addColumn(SharedTestEnvRule.COLUMN_FAMILY,qualToCheck,Bytes.toBytes(2000l)));
  Scan rootScan=new Scan().addColumn(SharedTestEnvRule.COLUMN_FAMILY,qualToCheck).withStartRow(rowKey).withStopRow(rowKey);
  Assert.assertNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.LESS,1000l));
  Assert.assertNotNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.GREATER,1000l));
  Assert.assertNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.LESS_OR_EQUAL,1000l));
  Assert.assertNotNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.GREATER_OR_EQUAL,1000l));
  Assert.assertNotNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.LESS_OR_EQUAL,2000l));
  Assert.assertNotNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.GREATER_OR_EQUAL,2000l));
}","@Test @SuppressWarnings(""String_Node_Str"") public void testSingleValueLongCompares() throws IOException {
  byte[] rowKey=dataHelper.randomData(""String_Node_Str"");
  byte[] qualToCheck=dataHelper.randomData(""String_Node_Str"");
  Table table=getDefaultTable();
  table.put(new Put(rowKey).addColumn(SharedTestEnvRule.COLUMN_FAMILY,qualToCheck,Bytes.toBytes(2000l)));
  Scan rootScan=new Scan().addColumn(SharedTestEnvRule.COLUMN_FAMILY,qualToCheck).withStartRow(rowKey).withStopRow(rowKey,true);
  Assert.assertNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.LESS,1000l));
  Assert.assertNotNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.GREATER,1000l));
  Assert.assertNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.LESS_OR_EQUAL,1000l));
  Assert.assertNotNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.GREATER_OR_EQUAL,1000l));
  Assert.assertNotNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.LESS_OR_EQUAL,2000l));
  Assert.assertNotNull(""String_Node_Str"",getFirst(table,rootScan,CompareOp.GREATER_OR_EQUAL,2000l));
}",0.9799618320610688
21034,"@Test public void testGetScannerBeforeTimestamp() throws IOException {
  Table table=getDefaultTable();
  byte[] rowKey=dataHelper.randomData(""String_Node_Str"");
  byte[] qual=dataHelper.randomData(""String_Node_Str"");
  byte[][] values=dataHelper.randomData(""String_Node_Str"",2);
  long ts1=100000l;
  long ts2=200000l;
  table.put(new Put(rowKey).addColumn(COLUMN_FAMILY,qual,ts1,values[0]));
  table.put(new Put(rowKey).addColumn(COLUMN_FAMILY,qual,ts2,values[1]));
  Scan scan1=new Scan().withStartRow(rowKey).withStopRow(rowFollowing(rowKey)).setTimeRange(0,ts1);
  try (ResultScanner resultScanner=table.getScanner(scan1)){
    Assert.assertNull(resultScanner.next());
  }
   Scan scan2=new Scan().withStartRow(rowKey).withStopRow(rowFollowing(rowKey)).setTimeRange(0,ts2 + 1);
  try (ResultScanner resultScanner=table.getScanner(scan2)){
    Result result=resultScanner.next();
    Assert.assertNotNull(result);
    Assert.assertArrayEquals(values[1],CellUtil.cloneValue(result.getColumnLatestCell(COLUMN_FAMILY,qual)));
  }
   Scan scan3=new Scan().withStartRow(rowKey).withStartRow(rowFollowing(rowKey)).setTimeRange(0,ts1 + 1);
  try (ResultScanner resultScanner=table.getScanner(scan3)){
    Result result=resultScanner.next();
    Assert.assertNotNull(result);
    Assert.assertArrayEquals(values[0],CellUtil.cloneValue(result.getColumnLatestCell(COLUMN_FAMILY,qual)));
  }
 }","@Test public void testGetScannerBeforeTimestamp() throws IOException {
  Table table=getDefaultTable();
  byte[] rowKey=dataHelper.randomData(""String_Node_Str"");
  byte[] qual=dataHelper.randomData(""String_Node_Str"");
  byte[][] values=dataHelper.randomData(""String_Node_Str"",2);
  long ts1=100000l;
  long ts2=200000l;
  table.put(new Put(rowKey).addColumn(COLUMN_FAMILY,qual,ts1,values[0]));
  table.put(new Put(rowKey).addColumn(COLUMN_FAMILY,qual,ts2,values[1]));
  Scan scan1=new Scan().withStartRow(rowKey).withStopRow(rowFollowing(rowKey)).setTimeRange(0,ts1);
  try (ResultScanner resultScanner=table.getScanner(scan1)){
    Assert.assertNull(resultScanner.next());
  }
   Scan scan2=new Scan().withStartRow(rowKey).withStopRow(rowFollowing(rowKey)).setTimeRange(0,ts2 + 1);
  try (ResultScanner resultScanner=table.getScanner(scan2)){
    Result result=resultScanner.next();
    Assert.assertNotNull(result);
    Assert.assertArrayEquals(values[1],CellUtil.cloneValue(result.getColumnLatestCell(COLUMN_FAMILY,qual)));
  }
   Scan scan3=new Scan().withStartRow(rowKey).withStopRow(rowFollowing(rowKey)).setTimeRange(0,ts1 + 1);
  try (ResultScanner resultScanner=table.getScanner(scan3)){
    Result result=resultScanner.next();
    Assert.assertNotNull(result);
    Assert.assertArrayEquals(values[0],CellUtil.cloneValue(result.getColumnLatestCell(COLUMN_FAMILY,qual)));
  }
 }",0.998196898665705
21035,"@Test public void testStartEndEquals() throws IOException {
  Table table=getDefaultTable();
  byte[] rowKey=dataHelper.randomData(""String_Node_Str"");
  byte[] qualifier=dataHelper.randomData(""String_Node_Str"");
  byte[] value=dataHelper.randomData(""String_Node_Str"");
  table.put(new Put(rowKey).addColumn(COLUMN_FAMILY,qualifier,value));
  Scan scan=new Scan();
  scan.withStartRow(rowKey).withStopRow(rowKey);
  try (ResultScanner resultScanner=table.getScanner(scan)){
    Result result=resultScanner.next();
    Assert.assertNotNull(result);
    Cell cell=result.getColumnCells(COLUMN_FAMILY,qualifier).get(0);
    Assert.assertTrue(Bytes.equals(value,ByteString.copyFrom(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength()).toByteArray()));
  }
 }","@Test public void testStartEndEquals() throws IOException {
  Table table=getDefaultTable();
  byte[] rowKey=dataHelper.randomData(""String_Node_Str"");
  byte[] qualifier=dataHelper.randomData(""String_Node_Str"");
  byte[] value=dataHelper.randomData(""String_Node_Str"");
  table.put(new Put(rowKey).addColumn(COLUMN_FAMILY,qualifier,value));
  Scan scan=new Scan().withStartRow(rowKey).withStopRow(rowKey,true);
  try (ResultScanner resultScanner=table.getScanner(scan)){
    Result result=resultScanner.next();
    Assert.assertNotNull(result);
    Cell cell=result.getColumnCells(COLUMN_FAMILY,qualifier).get(0);
    Assert.assertTrue(Bytes.equals(value,ByteString.copyFrom(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength()).toByteArray()));
  }
 }",0.9914977109221712
21036,"/** 
 * This is a private alpha release of Cloud Bigtable replication. This feature is not currently available to most Cloud Bigtable customers. This feature might be changed in backward-incompatible ways and is not recommended for production use. It is not subject to any SLA or deprecation policy. Updates an app profile within an instance.
 * @param request a {@link com.google.bigtable.admin.v2.UpdateAppProfileRequest} object.
 * @return a {@link @link com.google.longrunning.Operation} object.
 */
Operation updateAppProfile(UpdateAppProfileRequest request);","/** 
 * This is a private alpha release of Cloud Bigtable replication. This feature is not currently available to most Cloud Bigtable customers. This feature might be changed in backward-incompatible ways and is not recommended for production use. It is not subject to any SLA or deprecation policy. Updates an app profile within an instance.
 * @param request a {@link com.google.bigtable.admin.v2.UpdateAppProfileRequest} object.
 * @return a {@link com.google.longrunning.Operation} object.
 */
Operation updateAppProfile(UpdateAppProfileRequest request);",0.9946524064171124
21037,"/** 
 * Gets the details of a table asynchronously.
 * @param request a {@link GetTableRequest} object.
 * @return a {@link public CompletableFuture} that returns a {@link Table} object.
 */
public CompletableFuture<Table> getTableAsync(GetTableRequest request){
  return toCompletableFuture(adminClient.getTableAsync(request));
}","/** 
 * Gets the details of a table asynchronously.
 * @param request a {@link GetTableRequest} object.
 * @return a {@link CompletableFuture} that returns a {@link Table} object.
 */
public CompletableFuture<Table> getTableAsync(GetTableRequest request){
  return toCompletableFuture(adminClient.getTableAsync(request));
}",0.9892802450229708
21038,"/** 
 * Lists the names of all tables in an instance asynchronously.
 * @param request a {@link ListTablesRequest} object.
 * @return a {@link public CompletableFuture} that returns a {@link ListTablesResponse} object.
 */
public CompletableFuture<ListTablesResponse> listTablesAsync(ListTablesRequest request){
  return toCompletableFuture(adminClient.listTablesAsync(request));
}","/** 
 * Lists the names of all tables in an instance asynchronously.
 * @param request a {@link ListTablesRequest} object.
 * @return a {@link CompletableFuture} that returns a {@link ListTablesResponse} object.
 */
public CompletableFuture<ListTablesResponse> listTablesAsync(ListTablesRequest request){
  return toCompletableFuture(adminClient.listTablesAsync(request));
}",0.990728476821192
21039,"/** 
 * Permanently deletes all rows in a range.
 * @param request a {@link DropRowRangeRequest} object.
 * @return a {@link public CompletableFuture} that returns {@link Empty} object.
 */
public CompletableFuture<Empty> dropRowRangeAsync(DropRowRangeRequest request){
  return toCompletableFuture(adminClient.dropRowRangeAsync(request));
}","/** 
 * Permanently deletes all rows in a range.
 * @param request a {@link DropRowRangeRequest} object.
 * @return a {@link CompletableFuture} that returns {@link Empty} object.
 */
public CompletableFuture<Empty> dropRowRangeAsync(DropRowRangeRequest request){
  return toCompletableFuture(adminClient.dropRowRangeAsync(request));
}",0.9896296296296296
21040,"/** 
 * Creates, modifies or deletes a new column family within a specified table.
 * @param request a {@link ModifyColumnFamiliesRequest} object.
 * @return a {@link public CompletableFuture} that returns {@link Table} object that contains the updatedtable structure.
 */
public CompletableFuture<Table> modifyColumnFamilyAsync(ModifyColumnFamiliesRequest request){
  return toCompletableFuture(adminClient.modifyColumnFamilyAsync(request));
}","/** 
 * Creates, modifies or deletes a new column family within a specified table.
 * @param request a {@link ModifyColumnFamiliesRequest} object.
 * @return a {@link CompletableFuture} that returns {@link Table} object that contains the updatedtable structure.
 */
public CompletableFuture<Table> modifyColumnFamilyAsync(ModifyColumnFamiliesRequest request){
  return toCompletableFuture(adminClient.modifyColumnFamilyAsync(request));
}",0.9920544835414302
21041,"/** 
 * Permanently deletes a specified table and all of its data.
 * @param request a {@link DeleteTableRequest} object.
 * @return a {@link public CompletableFuture} that returns {@link Empty} object.
 */
public CompletableFuture<Empty> deleteTableAsync(DeleteTableRequest request){
  return toCompletableFuture(adminClient.deleteTableAsync(request));
}","/** 
 * Permanently deletes a specified table and all of its data.
 * @param request a {@link DeleteTableRequest} object.
 * @return a {@link CompletableFuture} that returns {@link Empty} object.
 */
public CompletableFuture<Empty> deleteTableAsync(DeleteTableRequest request){
  return toCompletableFuture(adminClient.deleteTableAsync(request));
}",0.9900426742532006
21042,"/** 
 * Cancels the RPC with a specific message.
 * @param message
 */
protected void cancel(final String message){
synchronized (callLock) {
    if (call != null) {
      call.cancel(message,null);
      call=null;
    }
  }
}","/** 
 * Cancels the RPC with a specific message.
 * @param message
 */
protected void cancel(final String message){
  call.cancel(message,null);
}",0.7828418230563002
21043,"private CheckAndMutateBuilder getBuilder(byte[] row,byte[] family,byte[] qualifier,CompareOp op,byte[] value) throws Exception {
  CheckAndMutateBuilder builder=getDefaultTable().checkAndMutate(row,family).qualifier(qualifier);
  if (value == null && op != CompareOp.NOT_EQUAL) {
    return builder.ifNotExists();
  }
 else {
    return builder.ifMatches(TestCheckAndMutateHBase2.translate(op),value);
  }
}","private CheckAndMutateBuilder getBuilder(byte[] row,byte[] family,byte[] qualifier,CompareOp op,byte[] value) throws Exception {
  CheckAndMutateBuilder builder=getDefaultTable().checkAndMutate(row,family).qualifier(qualifier);
  if (value == null && op != CompareOp.NOT_EQUAL) {
    return builder.ifNotExists();
  }
 else {
    return builder.ifMatches(CompareOperator.valueOf(op.name()),value);
  }
}",0.9111111111111112
21044,"/** 
 * <p>Constructor for BigtableBufferedMutator.</p>
 * @param adapter Converts HBase objects to Bigtable protos
 * @param configuration For Additional configuration. TODO: move this to options
 * @param listener Handles exceptions. By default, it just throws the exception.
 * @param session a {@link com.google.cloud.bigtable.grpc.BigtableSession} to get {@link com.google.cloud.bigtable.config.BigtableOptions},   {@link com.google.cloud.bigtable.grpc.async.AsyncExecutor}and   {@link com.google.cloud.bigtable.grpc.async.BulkMutation} objects fromstarting the async operations on the BigtableDataClient.
 */
public BigtableAsyncBufferedMutator(HBaseRequestAdapter adapter,Configuration configuration,BigtableSession session){
  helper=new BigtableBufferedMutatorHelper(adapter,configuration,session);
}","/** 
 * <p>Constructor for BigtableBufferedMutator.</p>
 * @param adapter Converts HBase objects to Bigtable protos
 * @param configuration For Additional configuration. TODO: move this to options
 * @param session a {@link com.google.cloud.bigtable.grpc.BigtableSession} to get {@link com.google.cloud.bigtable.config.BigtableOptions},   {@link com.google.cloud.bigtable.grpc.async.AsyncExecutor}and   {@link com.google.cloud.bigtable.grpc.async.BulkMutation} objects fromstarting the async operations on the BigtableDataClient.
 */
public BigtableAsyncBufferedMutator(HBaseRequestAdapter adapter,Configuration configuration,BigtableSession session){
  helper=new BigtableBufferedMutatorHelper(adapter,configuration,session);
}",0.9472999349381912
21045,"/** 
 * <p> Constructor for BigtableBufferedMutator. </p>
 * @param adapter Converts HBase objects to Bigtable protos
 * @param configuration For Additional configuration. TODO: move this to options
 * @param listener Handles exceptions. By default, it just throws the exception.
 * @param session a {@link com.google.cloud.bigtable.grpc.BigtableSession} to get{@link com.google.cloud.bigtable.config.BigtableOptions},  {@link com.google.cloud.bigtable.grpc.async.AsyncExecutor} and{@link com.google.cloud.bigtable.grpc.async.BulkMutation} objects from starting theasync operations on the BigtableDataClient.
 */
public BigtableBufferedMutatorHelper(HBaseRequestAdapter adapter,Configuration configuration,BigtableSession session){
  this.adapter=adapter;
  this.configuration=configuration;
  this.options=session.getOptions();
  this.asyncExecutor=session.createAsyncExecutor();
  BigtableTableName tableName=this.adapter.getBigtableTableName();
  this.bulkMutation=session.createBulkMutation(tableName);
}","/** 
 * <p> Constructor for BigtableBufferedMutator. </p>
 * @param adapter Converts HBase objects to Bigtable protos
 * @param configuration For Additional configuration. TODO: move this to options
 * @param session a {@link com.google.cloud.bigtable.grpc.BigtableSession} to get{@link com.google.cloud.bigtable.config.BigtableOptions},  {@link com.google.cloud.bigtable.grpc.async.AsyncExecutor} and{@link com.google.cloud.bigtable.grpc.async.BulkMutation} objects from starting theasync operations on the BigtableDataClient.
 */
public BigtableBufferedMutatorHelper(HBaseRequestAdapter adapter,Configuration configuration,BigtableSession session){
  this.adapter=adapter;
  this.configuration=configuration;
  this.options=session.getOptions();
  this.asyncExecutor=session.createAsyncExecutor();
  BigtableTableName tableName=this.adapter.getBigtableTableName();
  this.bulkMutation=session.createBulkMutation(tableName);
}",0.958139534883721
21046,"/** 
 * Waits for the long running operation to complete by polling with exponential backoff.
 * @param operation
 * @param timeout
 * @param timeUnit
 * @throws InterruptedException
 * @throws TimeoutException If the timeout is exceeded.
 */
void waitForOperation(Operation operation,long timeout,TimeUnit timeUnit) throws IOException, TimeoutException ;","/** 
 * Waits for the long running operation to complete by polling with exponential backoff.
 * @param operation
 * @param timeout
 * @param timeUnit
 * @throws IOException
 * @throws TimeoutException If the timeout is exceeded.
 */
void waitForOperation(Operation operation,long timeout,TimeUnit timeUnit) throws IOException, TimeoutException ;",0.9843081312410842
21047,"/** 
 * <p>Constructor for RefreshingOAuth2CredentialsInterceptor.</p>
 * @param scheduler a {@link ExecutorService} object.
 * @param credentials a {@link OAuth2Credentials} object.
 */
public RefreshingOAuth2CredentialsInterceptor(ExecutorService scheduler,OAuth2Credentials credentials){
  this.executor=Preconditions.checkNotNull(scheduler);
  this.credentials=Preconditions.checkNotNull(credentials);
  rateLimiter=RateLimiter.create(1);
}","/** 
 * <p>Constructor for RefreshingOAuth2CredentialsInterceptor.</p>
 * @param scheduler a {@link ExecutorService} object.
 * @param credentials a {@link OAuth2Credentials} object.
 */
public RefreshingOAuth2CredentialsInterceptor(ExecutorService scheduler,OAuth2Credentials credentials){
  this.executor=Preconditions.checkNotNull(scheduler);
  this.credentials=Preconditions.checkNotNull(credentials);
  rateLimiter=RateLimiter.create(0.1);
}",0.997752808988764
21048,"/** 
 * Calls   {@link com.google.auth.oauth2.OAuth2Credentials#refreshAccessToken()}.
 * @return HeaderCacheElement containing either a valid {@link com.google.auth.oauth2.AccessToken} or an exception.
 */
private HeaderCacheElement refreshCredentials(){
  if (!rateLimiter.tryAcquire()) {
    LOG.trace(""String_Node_Str"");
    return new HeaderCacheElement(Status.UNAUTHENTICATED.withDescription(""String_Node_Str""));
  }
  try {
    LOG.info(""String_Node_Str"");
    AccessToken newToken=credentials.refreshAccessToken();
    return new HeaderCacheElement(newToken);
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
    return new HeaderCacheElement(Status.UNAUTHENTICATED.withDescription(""String_Node_Str"").withCause(e));
  }
}","/** 
 * Calls   {@link com.google.auth.oauth2.OAuth2Credentials#refreshAccessToken()}.
 * @return HeaderCacheElement containing either a valid {@link com.google.auth.oauth2.AccessToken} or an exception.
 */
private HeaderCacheElement refreshCredentials(){
  try {
    LOG.info(""String_Node_Str"");
    AccessToken newToken=credentials.refreshAccessToken();
    return new HeaderCacheElement(newToken);
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
    return new HeaderCacheElement(Status.UNAUTHENTICATED.withDescription(""String_Node_Str"").withCause(e));
  }
}",0.6495079485238455
21049,"private void revokeUnauthToken(HeaderCacheElement oldToken){
synchronized (lock) {
    if (headerCache == oldToken) {
      LOG.warn(""String_Node_Str"");
      headerCache=EMPTY_HEADER;
    }
 else {
      LOG.info(""String_Node_Str"");
    }
  }
}","private void revokeUnauthToken(HeaderCacheElement oldToken){
  if (!rateLimiter.tryAcquire()) {
    LOG.trace(""String_Node_Str"");
    return;
  }
synchronized (lock) {
    if (headerCache == oldToken) {
      LOG.warn(""String_Node_Str"");
      headerCache=EMPTY_HEADER;
    }
 else {
      LOG.info(""String_Node_Str"");
    }
  }
}",0.8521739130434782
21050,"@Override public final Double getFractionConsumed(){
  return rangeTracker.getFractionConsumed();
}","@Override public final Double getFractionConsumed(){
  if (rangeTracker.isDone()) {
    return 1.0;
  }
  return rangeTracker.getFractionConsumed();
}",0.7951807228915663
21051,"@Override protected boolean set(@Nullable RespT resp){
  return super.set(resp);
}","@Override public boolean set(@Nullable RespT resp){
  return super.set(resp);
}",0.9316770186335404
21052,"/** 
 * <p>Constructor for AbstractRetryingRpcListener.</p>
 * @param retryOptions a {@link com.google.cloud.bigtable.config.RetryOptions} object.
 * @param request a RequestT object.
 * @param retryableRpc a {@link com.google.cloud.bigtable.grpc.async.BigtableAsyncRpc} object.
 * @param callOptions a {@link io.grpc.CallOptions} object.
 * @param retryExecutorService a {@link java.util.concurrent.ScheduledExecutorService} object.
 * @param originalMetadata a {@link io.grpc.Metadata} object.
 */
public AbstractRetryingOperation(RetryOptions retryOptions,RequestT request,BigtableAsyncRpc<RequestT,ResponseT> retryableRpc,CallOptions callOptions,ScheduledExecutorService retryExecutorService,Metadata originalMetadata){
  this.retryOptions=retryOptions;
  this.request=request;
  this.rpc=retryableRpc;
  this.callOptions=callOptions;
  this.retryExecutorService=retryExecutorService;
  this.originalMetadata=originalMetadata;
  this.completionFuture=createCompletionFuture();
}","/** 
 * <p>Constructor for AbstractRetryingRpcListener.</p>
 * @param retryOptions a {@link com.google.cloud.bigtable.config.RetryOptions} object.
 * @param request a RequestT object.
 * @param retryableRpc a {@link com.google.cloud.bigtable.grpc.async.BigtableAsyncRpc} object.
 * @param callOptions a {@link io.grpc.CallOptions} object.
 * @param retryExecutorService a {@link java.util.concurrent.ScheduledExecutorService} object.
 * @param originalMetadata a {@link io.grpc.Metadata} object.
 */
public AbstractRetryingOperation(RetryOptions retryOptions,RequestT request,BigtableAsyncRpc<RequestT,ResponseT> retryableRpc,CallOptions callOptions,ScheduledExecutorService retryExecutorService,Metadata originalMetadata){
  this.retryOptions=retryOptions;
  this.request=request;
  this.rpc=retryableRpc;
  this.callOptions=callOptions;
  this.retryExecutorService=retryExecutorService;
  this.originalMetadata=originalMetadata;
  this.completionFuture=new GrpcFuture<>();
}",0.9867211440245148
21053,"/** 
 * This gets called by   {@link ResumingStreamingResultScanner} when a queue is empty via {@link ResponseQueueReader#getNext()}.
 * @param rte a {@link ScanTimeoutException}
 * @throws BigtableRetriesExhaustedException
 */
@Override public void handleTimeout(ScanTimeoutException rte) throws BigtableRetriesExhaustedException {
  if ((clock.currentTimeMillis() - lastResponseMs) < retryOptions.getReadPartialRowTimeoutMillis()) {
    return;
  }
 else {
    retryOnTimeout(rte);
  }
}","/** 
 * This gets called by   {@link ResumingStreamingResultScanner} when a queue is empty via {@link ResponseQueueReader#getNext()}.
 * @param rte a {@link ScanTimeoutException}
 * @throws BigtableRetriesExhaustedException
 */
@Override public void handleTimeout(ScanTimeoutException rte) throws BigtableRetriesExhaustedException {
  if ((clock.currentTimeMillis() - lastResponseMs) >= retryOptions.getReadPartialRowTimeoutMillis()) {
    retryOnTimeout(rte);
  }
}",0.9717277486910996
21054,"/** 
 * {@inheritDoc} 
 */
@Override protected boolean onOK(Metadata trailers){
  rowMerger.onCompleted();
  return true;
}","/** 
 * {@inheritDoc} 
 */
@Override protected boolean onOK(Metadata trailers){
  rowMerger.onCompleted();
  completionFuture.set(""String_Node_Str"");
  return true;
}",0.8512110726643599
21055,"/** 
 * Given a Scan, build a RowFilter that include matching columns
 * @param scan a {@link org.apache.hadoop.hbase.client.Scan} object.
 * @param hooks a {@link com.google.cloud.bigtable.hbase.adapters.read.ReadHooks} object.
 * @return a {@link com.google.bigtable.v2.RowFilter} object.
 */
public RowFilter buildFilter(Scan scan,ReadHooks hooks){
  RowFilter.Chain.Builder chainBuilder=RowFilter.Chain.newBuilder();
  chainBuilder.addFilters(createColumnFamilyFilter(scan));
  if (scan.getTimeRange() != null && !scan.getTimeRange().isAllTime()) {
    chainBuilder.addFilters(createTimeRangeFilter(scan.getTimeRange()));
  }
  if (scan.getFilter() != null) {
    Optional<RowFilter> userFilter=createUserFilter(scan,hooks);
    if (userFilter.isPresent()) {
      chainBuilder.addFilters(userFilter.get());
    }
  }
  chainBuilder.addFilters(createColumnLimitFilter(scan.getMaxVersions()));
  if (chainBuilder.getFiltersCount() == 1) {
    return chainBuilder.getFilters(0);
  }
 else {
    return RowFilter.newBuilder().setChain(chainBuilder).build();
  }
}","/** 
 * Given a Scan, build a RowFilter that include matching columns
 * @param scan a {@link org.apache.hadoop.hbase.client.Scan} object.
 * @param hooks a {@link com.google.cloud.bigtable.hbase.adapters.read.ReadHooks} object.
 * @return a {@link com.google.bigtable.v2.RowFilter} object.
 */
public RowFilter buildFilter(Scan scan,ReadHooks hooks){
  RowFilter.Chain.Builder chainBuilder=RowFilter.Chain.newBuilder();
  chainBuilder.addFilters(createColumnFamilyFilter(scan));
  if (scan.getTimeRange() != null && !scan.getTimeRange().isAllTime()) {
    chainBuilder.addFilters(createTimeRangeFilter(scan.getTimeRange()));
  }
  chainBuilder.addFilters(createColumnLimitFilter(scan.getMaxVersions()));
  if (scan.getFilter() != null) {
    Optional<RowFilter> userFilter=createUserFilter(scan,hooks);
    if (userFilter.isPresent()) {
      chainBuilder.addFilters(userFilter.get());
    }
  }
  if (chainBuilder.getFiltersCount() == 1) {
    return chainBuilder.getFilters(0);
  }
 else {
    return RowFilter.newBuilder().setChain(chainBuilder).build();
  }
}",0.9295112781954888
21056,"@Override public void start(Listener<RespT> responseListener,Metadata headers){
  HeaderCacheElement headerCache=getHeaderSafe();
  if (!headerCache.status.isOk()) {
    responseListener.onClose(headerCache.status,new Metadata());
    return;
  }
  headers.put(AUTHORIZATION_HEADER_KEY,headerCache.header);
  delegate().start(new UnAuthResponseListener<>(responseListener,headerCache),headers);
}","@Override public void start(Listener<RespT> responseListener,Metadata headers){
  HeaderCacheElement headerCache=getHeaderSafe();
  if (!headerCache.status.isOk()) {
    responseListener.onClose(headerCache.status,new Metadata());
    unauthorized=true;
    return;
  }
  headers.put(AUTHORIZATION_HEADER_KEY,headerCache.header);
  delegate().start(new UnAuthResponseListener<>(responseListener,headerCache),headers);
}",0.9717791411042944
21057,"/** 
 * {@inheritDoc}
 */
@Override public <ReqT,RespT>ClientCall<ReqT,RespT> interceptCall(MethodDescriptor<ReqT,RespT> method,CallOptions callOptions,Channel next){
  return new SimpleForwardingClientCall<ReqT,RespT>(next.newCall(method,callOptions)){
    @Override public void start(    Listener<RespT> responseListener,    Metadata headers){
      HeaderCacheElement headerCache=getHeaderSafe();
      if (!headerCache.status.isOk()) {
        responseListener.onClose(headerCache.status,new Metadata());
        return;
      }
      headers.put(AUTHORIZATION_HEADER_KEY,headerCache.header);
      delegate().start(new UnAuthResponseListener<>(responseListener,headerCache),headers);
    }
  }
;
}","/** 
 * {@inheritDoc}
 */
@Override public <ReqT,RespT>ClientCall<ReqT,RespT> interceptCall(MethodDescriptor<ReqT,RespT> method,CallOptions callOptions,Channel next){
  return new SimpleForwardingClientCall<ReqT,RespT>(next.newCall(method,callOptions)){
    /** 
 * If the header is invalid, this will be set to true. This flag will indicate that delegate().start() was not called. If start() is not called, then don't call delegate().request(), delegate().sendMessage() or delegate().halfClose();
 */
    private boolean unauthorized=false;
    @Override public void start(    Listener<RespT> responseListener,    Metadata headers){
      HeaderCacheElement headerCache=getHeaderSafe();
      if (!headerCache.status.isOk()) {
        responseListener.onClose(headerCache.status,new Metadata());
        unauthorized=true;
        return;
      }
      headers.put(AUTHORIZATION_HEADER_KEY,headerCache.header);
      delegate().start(new UnAuthResponseListener<>(responseListener,headerCache),headers);
    }
    @Override public void request(    int numMessages){
      if (!unauthorized) {
        delegate().request(numMessages);
      }
    }
    @Override public void sendMessage(    ReqT message){
      if (!unauthorized) {
        delegate().sendMessage(message);
      }
    }
    @Override public void halfClose(){
      if (!unauthorized) {
        delegate().halfClose();
      }
    }
    @Override public void cancel(    String message,    Throwable cause){
      if (!unauthorized) {
        delegate().cancel(message,cause);
      }
    }
  }
;
}",0.6198675496688741
21058,"/** 
 * Enable an experimental feature that will throttle requests made from   {@link BulkMutation}. The logic is as follows: <p> <ul> <li>To start: <ul> <li>reduce parallelism by 50% -- The parallelism is high to begin with. This reduction should reduce the impacts of a bursty job, such as those found in Dataflow. </ul> <li>every 20 seconds: <pre> if (rpc_latency &gt; threshold) { decrease parallelism by 10% of original maximum. } else if (rpc_latency &lt; threshold && rpcsWereThrottled()) { increase parallelism by 5% of original maximum. } </pre> NOTE: increases are capped by the initial maximum.  Decreases are floored at 2.5% of the original maximum so that there is some level of throughput. </ul>
 * @param bulkMutationRpcTargetMs the target for latency of MutateRows requests in milliseconds.
 */
public synchronized void throttle(final int bulkMutationRpcTargetMs){
  if (isThrottling) {
    return;
  }
  LOG.info(""String_Node_Str"" + ""String_Node_Str"",bulkMutationRpcTargetMs);
  final long highTargetNanos=TimeUnit.MILLISECONDS.toNanos((long)(bulkMutationRpcTargetMs * 1.2));
  final long lowTargetNanos=TimeUnit.MILLISECONDS.toNanos((long)(bulkMutationRpcTargetMs * 0.8));
  final int throttlingChangeStep=getAbsoluteMaxInFlightRpcs() / 20;
  final int minimumRpcCount=Math.max(throttlingChangeStep / 2,1);
  setCurrentInFlightMaxRpcs(getCurrentInFlightMaxRpcs() / 2);
  Runnable r=new Runnable(){
    @Override public void run(){
      BulkMutationsStats stats=BulkMutationsStats.getInstance();
      long meanLatencyNanos=(long)stats.getMutationTimer().getSnapshot().getMean();
      if (meanLatencyNanos >= highTargetNanos) {
        int current=getCurrentInFlightMaxRpcs();
        int newValue=Math.max(current - throttlingChangeStep,minimumRpcCount);
        if (newValue != current) {
          setCurrentInFlightMaxRpcs(newValue);
          LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(meanLatencyNanos),current,newValue);
        }
      }
 else       if (meanLatencyNanos <= lowTargetNanos && (stats.getThrottlingTimer().getSnapshot().getMean() > TimeUnit.MILLISECONDS.toNanos(1))) {
        int current=getCurrentInFlightMaxRpcs();
        int newValue=Math.max(current + throttlingChangeStep,absoluteMaxInFlightRpcs);
        if (newValue != current) {
          setCurrentInFlightMaxRpcs(newValue);
          LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(meanLatencyNanos),current,newValue);
        }
      }
    }
  }
;
  BigtableSessionSharedThreadPools.getInstance().getRetryExecutor().scheduleAtFixedRate(r,20,20,TimeUnit.SECONDS);
  isThrottling=true;
}","/** 
 * Enable an experimental feature that will throttle requests made from   {@link BulkMutation}. The logic is as follows: <p> <ul> <li>To start: <ul> <li>reduce parallelism by 50% -- The parallelism is high to begin with. This reduction should reduce the impacts of a bursty job, such as those found in Dataflow. </ul> <li>every 20 seconds: <pre> if (rpc_latency &gt; threshold) { decrease parallelism by 10% of original maximum. } else if (rpc_latency &lt; threshold && rpcsWereThrottled()) { increase parallelism by 5% of original maximum. } </pre> NOTE: increases are capped by the initial maximum.  Decreases are floored at 2.5% of the original maximum so that there is some level of throughput. </ul>
 * @param bulkMutationRpcTargetMs the target for latency of MutateRows requests in milliseconds.
 */
public synchronized void throttle(final int bulkMutationRpcTargetMs){
  if (isThrottling) {
    return;
  }
  LOG.info(""String_Node_Str"" + ""String_Node_Str"",bulkMutationRpcTargetMs);
  final long highTargetNanos=TimeUnit.MILLISECONDS.toNanos((long)(bulkMutationRpcTargetMs * 1.2));
  final long lowTargetNanos=TimeUnit.MILLISECONDS.toNanos((long)(bulkMutationRpcTargetMs * 0.8));
  final int throttlingChangeStep=getAbsoluteMaxInFlightRpcs() / 20;
  final int minimumRpcCount=Math.max(throttlingChangeStep / 2,1);
  setCurrentInFlightMaxRpcs(getCurrentInFlightMaxRpcs() / 2);
  Runnable r=new Runnable(){
    @Override public void run(){
      BulkMutationsStats stats=BulkMutationsStats.getInstance();
      long meanLatencyNanos=(long)stats.getMutationTimer().getSnapshot().getMean();
      if (meanLatencyNanos >= highTargetNanos) {
        int current=getCurrentInFlightMaxRpcs();
        int newValue=Math.max(current - throttlingChangeStep,minimumRpcCount);
        if (newValue != current) {
          setCurrentInFlightMaxRpcs(newValue);
          LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(meanLatencyNanos),current,newValue);
        }
      }
 else       if (meanLatencyNanos <= lowTargetNanos && (stats.getThrottlingTimer().getSnapshot().getMean() > TimeUnit.MILLISECONDS.toNanos(1))) {
        int current=getCurrentInFlightMaxRpcs();
        int newValue=Math.min(current + throttlingChangeStep,absoluteMaxInFlightRpcs);
        if (newValue != current) {
          setCurrentInFlightMaxRpcs(newValue);
          LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(meanLatencyNanos),current,newValue);
        }
      }
    }
  }
;
  BigtableSessionSharedThreadPools.getInstance().getRetryExecutor().scheduleAtFixedRate(r,20,20,TimeUnit.SECONDS);
  isThrottling=true;
}",0.9992351816443594
21059,"@Override public void run(){
  BulkMutationsStats stats=BulkMutationsStats.getInstance();
  long meanLatencyNanos=(long)stats.getMutationTimer().getSnapshot().getMean();
  if (meanLatencyNanos >= highTargetNanos) {
    int current=getCurrentInFlightMaxRpcs();
    int newValue=Math.max(current - throttlingChangeStep,minimumRpcCount);
    if (newValue != current) {
      setCurrentInFlightMaxRpcs(newValue);
      LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(meanLatencyNanos),current,newValue);
    }
  }
 else   if (meanLatencyNanos <= lowTargetNanos && (stats.getThrottlingTimer().getSnapshot().getMean() > TimeUnit.MILLISECONDS.toNanos(1))) {
    int current=getCurrentInFlightMaxRpcs();
    int newValue=Math.max(current + throttlingChangeStep,absoluteMaxInFlightRpcs);
    if (newValue != current) {
      setCurrentInFlightMaxRpcs(newValue);
      LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(meanLatencyNanos),current,newValue);
    }
  }
}","@Override public void run(){
  BulkMutationsStats stats=BulkMutationsStats.getInstance();
  long meanLatencyNanos=(long)stats.getMutationTimer().getSnapshot().getMean();
  if (meanLatencyNanos >= highTargetNanos) {
    int current=getCurrentInFlightMaxRpcs();
    int newValue=Math.max(current - throttlingChangeStep,minimumRpcCount);
    if (newValue != current) {
      setCurrentInFlightMaxRpcs(newValue);
      LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(meanLatencyNanos),current,newValue);
    }
  }
 else   if (meanLatencyNanos <= lowTargetNanos && (stats.getThrottlingTimer().getSnapshot().getMean() > TimeUnit.MILLISECONDS.toNanos(1))) {
    int current=getCurrentInFlightMaxRpcs();
    int newValue=Math.min(current + throttlingChangeStep,absoluteMaxInFlightRpcs);
    if (newValue != current) {
      setCurrentInFlightMaxRpcs(newValue);
      LOG.debug(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(meanLatencyNanos),current,newValue);
    }
  }
}",0.997948717948718
21060,"private synchronized static SslContext createSslContext() throws SSLException {
  if (sslBuilder == null) {
    sslBuilder=GrpcSslContexts.forClient();
  }
  return sslBuilder.build();
}","private synchronized static SslContext createSslContext() throws SSLException {
  if (sslBuilder == null) {
    sslBuilder=GrpcSslContexts.forClient().ciphers(null);
  }
  return sslBuilder.build();
}",0.9637305699481864
21061,"private Timer getThrottlingTimer(){
  if (mutationTimer == null) {
    mutationTimer=registry.timer(""String_Node_Str"");
  }
  return mutationTimer;
}","private Timer getThrottlingTimer(){
  if (throttlingTimer == null) {
    throttlingTimer=registry.timer(""String_Node_Str"");
  }
  return throttlingTimer;
}",0.9013157894736842
21062,"@Test public void connectivityTest(){
  String property=System.getProperty(""String_Node_Str"");
  System.out.println(property);
  if (!""String_Node_Str"".equals(property)) {
    return;
  }
  String projectId=System.getProperty(""String_Node_Str"");
  String instanceId=System.getProperty(""String_Node_Str"");
  BigtableOptions options=new BigtableOptions.Builder().setProjectId(projectId).setInstanceId(instanceId).setUserAgent(""String_Node_Str"").build();
  try (BigtableSession bs=new BigtableSession(options)){
    ListTablesRequest request=ListTablesRequest.newBuilder().setParent(options.getInstanceName().getInstanceName()).build();
    bs.getTableAdminClient().listTables(request);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Test public void connectivityTest(){
  String property=System.getProperty(""String_Node_Str"");
  if (!""String_Node_Str"".equals(property)) {
    return;
  }
  String projectId=System.getProperty(""String_Node_Str"");
  String instanceId=System.getProperty(""String_Node_Str"");
  BigtableOptions options=new BigtableOptions.Builder().setProjectId(projectId).setInstanceId(instanceId).setUserAgent(""String_Node_Str"").build();
  try (BigtableSession bs=new BigtableSession(options)){
    ListTablesRequest request=ListTablesRequest.newBuilder().setParent(options.getInstanceName().getInstanceName()).build();
    bs.getTableAdminClient().listTables(request);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9779917469050894
21063,"private void checkHeader(Metadata metadata){
  System.out.println(""String_Node_Str"");
  Assert.assertEquals(TABLE_NAME,metadata.get(GoogleCloudResourcePrefixInterceptor.GRPC_RESOURCE_PREFIX_KEY));
}","private void checkHeader(Metadata metadata){
  Assert.assertEquals(TABLE_NAME,metadata.get(GoogleCloudResourcePrefixInterceptor.GRPC_RESOURCE_PREFIX_KEY));
}",0.8845070422535212
21064,"/** 
 * {@inheritDoc} 
 */
@Override public Result get(Get get) throws IOException {
  LOG.trace(""String_Node_Str"");
  Timer.Context timerContext=metrics.getTimer.time();
  try (com.google.cloud.bigtable.grpc.scanner.ResultScanner<FlatRow> scanner=client.readFlatRows(hbaseAdapter.adapt(get))){
    return Adapters.FLAT_ROW_ADAPTER.adaptResponse(scanner.next());
  }
 catch (  Throwable t) {
    throw logAndCreateIOException(""String_Node_Str"",get.getRow(),t);
  }
 finally {
    timerContext.close();
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public Result get(Get get) throws IOException {
  LOG.trace(""String_Node_Str"");
  Timer.Context timerContext=metrics.getTimer.time();
  Result response=null;
  try (com.google.cloud.bigtable.grpc.scanner.ResultScanner<FlatRow> scanner=client.readFlatRows(hbaseAdapter.adapt(get))){
    response=Adapters.FLAT_ROW_ADAPTER.adaptResponse(scanner.next());
    if (scanner.next() != null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    throw logAndCreateIOException(""String_Node_Str"",get.getRow(),t);
  }
 finally {
    timerContext.close();
  }
  return response;
}",0.867761452031115
21065,"/** 
 * @return the default bigtable {@link Connection} implementation class found in the classpath.
 */
public static Class<? extends Connection> getConnectionClass(){
  return CONNECTION_CLASS;
}","/** 
 * @return the default bigtable {@link Connection} implementation class found in the classpath.
 */
public static Class<? extends Connection> getConnectionClass(){
  Preconditions.checkState(CONNECTION_CLASS != null,""String_Node_Str"");
  return CONNECTION_CLASS;
}",0.8154506437768241
21066,"/** 
 * <p>configure.</p>
 * @param projectId a {@link java.lang.String} object.
 * @param instanceId a {@link java.lang.String} object.
 * @return a {@link org.apache.hadoop.conf.Configuration} object.
 */
public static Configuration configure(String projectId,String instanceId){
  Configuration config=new Configuration(false);
  config.set(BigtableOptionsFactory.PROJECT_ID_KEY,projectId);
  config.set(BigtableOptionsFactory.INSTANCE_ID_KEY,instanceId);
  return config;
}","/** 
 * <p>Configure and return an existing   {@link org.apache.hadoop.conf.Configuration}.</p>
 * @param conf a {@link org.apache.hadoop.conf.Configuration} object to configure.
 * @param projectId a {@link java.lang.String} object.
 * @param instanceId a {@link java.lang.String} object.
 * @return the modified {@link org.apache.hadoop.conf.Configuration} object.
 */
public static Configuration configure(Configuration conf,String projectId,String instanceId){
  conf.set(BigtableOptionsFactory.PROJECT_ID_KEY,projectId);
  conf.set(BigtableOptionsFactory.INSTANCE_ID_KEY,instanceId);
  conf.set(HConnection.HBASE_CLIENT_CONNECTION_IMPL,getConnectionClass().getCanonicalName());
  return conf;
}",0.6326530612244898
21067,"/** 
 * <p>connect.</p>
 * @param conf a {@link org.apache.hadoop.conf.Configuration} object.
 * @return a {@link org.apache.hadoop.hbase.client.Connection} object.
 */
public static Connection connect(Configuration conf){
  Preconditions.checkState(CONNECTION_CLASS != null,""String_Node_Str"");
  try {
    return CONNECTION_CLASS.getConstructor(Configuration.class).newInstance(conf);
  }
 catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"" + CONNECTION_CLASS.getCanonicalName(),e);
  }
}","/** 
 * <p>connect.</p>
 * @param conf a {@link org.apache.hadoop.conf.Configuration} object.
 * @return a {@link org.apache.hadoop.hbase.client.Connection} object.
 */
public static Connection connect(Configuration conf){
  try {
    return getConnectionClass().getConstructor(Configuration.class).newInstance(conf);
  }
 catch (  Exception e) {
    throw new IllegalStateException(""String_Node_Str"" + CONNECTION_CLASS.getCanonicalName(),e);
  }
}",0.524896265560166
21068,"/** 
 * This gets called by   {@link ResumingStreamingResultScanner} when a queue is empty via {@link ResponseQueueReader#getNext()}.
 * @param rte a {@link ScanTimeoutException}
 * @throws BigtableRetriesExhaustedException
 */
public void handleTimeout(ScanTimeoutException rte) throws BigtableRetriesExhaustedException {
  if ((clock.currentTimeMillis() - lastResponseMs) < retryOptions.getReadPartialRowTimeoutMillis()) {
    return;
  }
 else {
    retryOnTimeout(rte);
  }
}","/** 
 * This gets called by   {@link ResumingStreamingResultScanner} when a queue is empty via {@link ResponseQueueReader#getNext()}.
 * @param rte a {@link ScanTimeoutException}
 * @throws BigtableRetriesExhaustedException
 */
@Override public void handleTimeout(ScanTimeoutException rte) throws BigtableRetriesExhaustedException {
  if ((clock.currentTimeMillis() - lastResponseMs) < retryOptions.getReadPartialRowTimeoutMillis()) {
    return;
  }
 else {
    retryOnTimeout(rte);
  }
}",0.9896694214876032
21069,"@Override public void run(){
  this.rowMerger=new RowMerger(rowObserver);
  super.run();
}","@Override public void run(){
  lastResponseMs=clock.currentTimeMillis();
  this.rowMerger=new RowMerger(rowObserver);
  super.run();
}",0.8035714285714286
21070,"/** 
 * The amount of milliseconds to wait before issuing a client side timeout for short RPCs.
 * @param shortRpcTimeoutMs
 * @return this for chaining
 */
public Builder setShortRpcTimeoutMs(int shortRpcTimeoutMs){
}","/** 
 * The amount of milliseconds to wait before issuing a client side timeout for short RPCs.
 * @param shortRpcTimeoutMs
 * @return this for chaining
 */
public Builder setShortRpcTimeoutMs(int shortRpcTimeoutMs){
  Preconditions.checkArgument(shortRpcTimeoutMs > 0,""String_Node_Str"");
  this.shortRpcTimeoutMs=shortRpcTimeoutMs;
  return this;
}",0.7689594356261023
21071,"private static void setClientCallOptions(Configuration configuration,BigtableOptions.Builder bigtableOptionsBuilder){
  CallOptionsConfig.Builder clientCallOptionsBuilder=new CallOptionsConfig.Builder();
  clientCallOptionsBuilder.setUseTimeout(configuration.getBoolean(BIGTABLE_USE_TIMEOUTS_KEY,USE_TIMEOUT_DEFAULT));
  if (configuration.get(BIGTABLE_RPC_TIMEOUT_MS_KEY) != null) {
    clientCallOptionsBuilder.setShortRpcTimeoutMs(configuration.getInt(BIGTABLE_RPC_TIMEOUT_MS_KEY,SHORT_TIMEOUT_MS_DEFAULT));
  }
 else {
    clientCallOptionsBuilder.setShortRpcTimeoutMs(configuration.getInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT,SHORT_TIMEOUT_MS_DEFAULT));
  }
  clientCallOptionsBuilder.setLongRpcTimeoutMs(configuration.getInt(HConstants.HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD,LONG_TIMEOUT_MS_DEFAULT));
  bigtableOptionsBuilder.setCallOptionsConfig(clientCallOptionsBuilder.build());
}","private static void setClientCallOptions(Configuration configuration,BigtableOptions.Builder bigtableOptionsBuilder){
  CallOptionsConfig.Builder clientCallOptionsBuilder=new CallOptionsConfig.Builder();
  clientCallOptionsBuilder.setUseTimeout(configuration.getBoolean(BIGTABLE_USE_TIMEOUTS_KEY,USE_TIMEOUT_DEFAULT));
  if (configuration.get(BIGTABLE_RPC_TIMEOUT_MS_KEY) != null) {
    clientCallOptionsBuilder.setShortRpcTimeoutMs(configuration.getInt(BIGTABLE_RPC_TIMEOUT_MS_KEY,SHORT_TIMEOUT_MS_DEFAULT));
  }
 else {
    clientCallOptionsBuilder.setShortRpcTimeoutMs(configuration.getInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT,SHORT_TIMEOUT_MS_DEFAULT));
  }
  if (configuration.get(BIGTABLE_LONG_RPC_TIMEOUT_MS_KEY) != null) {
    clientCallOptionsBuilder.setLongRpcTimeoutMs(configuration.getInt(BIGTABLE_LONG_RPC_TIMEOUT_MS_KEY,LONG_TIMEOUT_MS_DEFAULT));
  }
 else {
    clientCallOptionsBuilder.setLongRpcTimeoutMs(configuration.getInt(HConstants.HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD,LONG_TIMEOUT_MS_DEFAULT));
  }
  bigtableOptionsBuilder.setCallOptionsConfig(clientCallOptionsBuilder.build());
}",0.8914457228614308
21072,"/** 
 * @return false if there are any outstanding {@link MutateRowRequest} that still need to be sent.
 */
public synchronized boolean isFlushed(){
  return currentBatch == null;
}","/** 
 * @return false if there are any outstanding {@link MutateRowRequest} that still need to be sent.
 */
public boolean isFlushed(){
  return currentBatch == null;
}",0.9627507163323782
21073,"@VisibleForTesting void onRpcCompletion(long id){
  resourceLimiter.markCanBeCompleted(id);
  lock.lock();
  try {
    outstandingRequests.remove(id);
    if (isFlushed()) {
      flushedCondition.signal();
    }
  }
  finally {
    lock.unlock();
  }
  resetNoSuccessWarningDeadline();
}","@VisibleForTesting void onRpcCompletion(long id){
  resourceLimiter.markCanBeCompleted(id);
  lock.lock();
  try {
    outstandingRequests.remove(id);
    if (isFlushed()) {
      flushedCondition.signal();
      isFlushed=true;
    }
  }
  finally {
    lock.unlock();
  }
  resetNoSuccessWarningDeadline();
}",0.9632107023411371
21074,"/** 
 * <p>onRetryCompletion.</p>
 * @param id a long.
 */
public void onRetryCompletion(long id){
  lock.lock();
  try {
    outstandingRetries.remove(id);
    if (isFlushed()) {
      flushedCondition.signal();
    }
  }
  finally {
    lock.unlock();
  }
  resetNoSuccessWarningDeadline();
}","/** 
 * <p>onRetryCompletion.</p>
 * @param id a long.
 */
public void onRetryCompletion(long id){
  lock.lock();
  try {
    outstandingRetries.remove(id);
    if (isFlushed()) {
      flushedCondition.signal();
      isFlushed=true;
    }
  }
  finally {
    lock.unlock();
  }
  resetNoSuccessWarningDeadline();
}",0.9639344262295082
21075,"/** 
 * Register a new RPC operation. Blocks until the requested resources are available. This method must be paired with a call to   {@code addCallback}.
 * @param heapSize The serialized size of the RPC
 * @return An operation id
 * @throws java.lang.InterruptedException if any.
 */
public long registerOperationWithHeapSize(long heapSize) throws InterruptedException {
  long id=resourceLimiter.registerOperationWithHeapSize(heapSize);
  lock.lock();
  try {
    outstandingRequests.add(id);
  }
  finally {
    lock.unlock();
  }
  return id;
}","/** 
 * Register a new RPC operation. Blocks until the requested resources are available. This method must be paired with a call to   {@code addCallback}.
 * @param heapSize The serialized size of the RPC
 * @return An operation id
 * @throws java.lang.InterruptedException if any.
 */
public long registerOperationWithHeapSize(long heapSize) throws InterruptedException {
  long id=resourceLimiter.registerOperationWithHeapSize(heapSize);
  lock.lock();
  try {
    outstandingRequests.add(id);
    isFlushed=false;
  }
  finally {
    lock.unlock();
  }
  return id;
}",0.9812332439678284
21076,"/** 
 * <p>hasInflightRequests.</p>
 * @return true if there are any outstanding requests being tracked by this throttler
 */
public boolean hasInflightRequests(){
  lock.lock();
  try {
    return outstandingRequests.size() > 0;
  }
  finally {
    lock.unlock();
  }
}","/** 
 * <p>hasInflightRequests.</p>
 * @return true if there are any outstanding requests being tracked by this throttler
 */
public boolean hasInflightRequests(){
  return !isFlushed;
}",0.7850877192982456
21077,"/** 
 * Closes the   {@link ResultScanner},   {@link Table}, and   {@link Connection}.
 */
@Override public void close() throws IOException {
  scanner.close();
  session.close();
  long totalOps=getRowsReadCount();
  long elapsedTimeMs=System.currentTimeMillis() - workStart;
  long operationsPerSecond=totalOps * 1000 / elapsedTimeMs;
  READER_LOG.info(""String_Node_Str"",this,totalOps,elapsedTimeMs,operationsPerSecond);
}","/** 
 * Closes the   {@link ResultScanner},   {@link Table}, and   {@link Connection}.
 */
@Override public void close() throws IOException {
  scanner.close();
  session.close();
  long totalOps=getRowsReadCount();
  long elapsedTimeMs=System.currentTimeMillis() - workStart;
  long operationsPerSecond=elapsedTimeMs == 0 ? 0 : (totalOps * 1000 / elapsedTimeMs);
  READER_LOG.info(""String_Node_Str"",this,totalOps,elapsedTimeMs,operationsPerSecond);
}",0.9691428571428572
21078,"@Override public void run(){
  if (!wasCanceled.get()) {
    timerContext.close();
    wasCanceled.set(true);
  }
  if (!listener.hasStatusBeenRecieved()) {
    readRowsCall.cancel(""String_Node_Str"",null);
  }
}","@Override public synchronized void run(){
  if (!wasCanceled.get()) {
    timerContext.close();
    wasCanceled.set(true);
  }
  if (!listener.hasStatusBeenRecieved()) {
    readRowsCall.cancel(""String_Node_Str"",null);
  }
}",0.9701149425287356
21079,"private ResultScanner<Row> streamRows(ReadRowsRequest request){
  final Timer.Context timerContext=readRowsAsync.getRpcMetrics().timeRpc();
  final AtomicBoolean wasCanceled=new AtomicBoolean(false);
  expandPoolIfNecessary(this.bigtableOptions.getChannelCount());
  final ClientCall<ReadRowsRequest,ReadRowsResponse> readRowsCall=readRowsAsync.newCall(CallOptions.DEFAULT);
  ResponseQueueReader reader=new ResponseQueueReader(retryOptions.getReadPartialRowTimeoutMillis(),retryOptions.getStreamingBufferSize());
  final StreamObserverAdapter<ReadRowsResponse> listener=new StreamObserverAdapter<>(readRowsCall,new RowMerger(reader));
  readRowsAsync.start(readRowsCall,request,listener,createMetadata(request.getTableName()));
  CancellationToken cancellationToken=new CancellationToken();
  cancellationToken.addListener(new Runnable(){
    @Override public void run(){
      if (!wasCanceled.get()) {
        timerContext.close();
        wasCanceled.set(true);
      }
      if (!listener.hasStatusBeenRecieved()) {
        readRowsCall.cancel(""String_Node_Str"",null);
      }
    }
  }
,MoreExecutors.directExecutor());
  return new StreamingBigtableResultScanner(reader,cancellationToken);
}","private ResultScanner<Row> streamRows(ReadRowsRequest request){
  final Timer.Context timerContext=readRowsAsync.getRpcMetrics().timeRpc();
  final AtomicBoolean wasCanceled=new AtomicBoolean(false);
  expandPoolIfNecessary(this.bigtableOptions.getChannelCount());
  final ClientCall<ReadRowsRequest,ReadRowsResponse> readRowsCall=readRowsAsync.newCall(CallOptions.DEFAULT);
  ResponseQueueReader reader=new ResponseQueueReader(retryOptions.getReadPartialRowTimeoutMillis(),retryOptions.getStreamingBufferSize());
  final StreamObserverAdapter<ReadRowsResponse> listener=new StreamObserverAdapter<>(readRowsCall,new RowMerger(reader));
  readRowsAsync.start(readRowsCall,request,listener,createMetadata(request.getTableName()));
  CancellationToken cancellationToken=new CancellationToken();
  cancellationToken.addListener(new Runnable(){
    @Override public synchronized void run(){
      if (!wasCanceled.get()) {
        timerContext.close();
        wasCanceled.set(true);
      }
      if (!listener.hasStatusBeenRecieved()) {
        readRowsCall.cancel(""String_Node_Str"",null);
      }
    }
  }
,MoreExecutors.directExecutor());
  return new StreamingBigtableResultScanner(reader,cancellationToken);
}",0.9946035699460356
21080,"public void update(Row result) throws IOException {
  updateLastFoundKey(result.getKey());
  rowCount++;
  currentErrorBackoff=null;
  timeoutRetryCount=null;
}","public void update(Row result){
  updateLastFoundKey(result.getKey());
  rowCount++;
  currentErrorBackoff=null;
  timeoutRetryCount=null;
}",0.9333333333333332
21081,"/** 
 * {@inheritDoc} 
 */
@Override public Row next() throws IOException {
  while (true) {
    try {
      Row result=currentDelegate.next();
      if (result == null) {
        close();
      }
 else {
        retryHandler.update(result);
      }
      return result;
    }
 catch (    ScanTimeoutException rte) {
      closeRpcContext();
      closeCurrentDelegate();
      ReadRowsRequest newRequest=retryHandler.handleScanTimeout(rte);
      currentDelegate=scannerFactory.createScanner(newRequest);
      this.rpcContext=rpcMetrics.timeRpc();
    }
catch (    IOExceptionWithStatus ioe) {
      closeRpcContext();
      closeCurrentDelegate();
      ReadRowsRequest newRequest=retryHandler.handleIOException(ioe);
      currentDelegate=scannerFactory.createScanner(newRequest);
      this.rpcContext=rpcMetrics.timeRpc();
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public Row next() throws IOException {
  while (true) {
    try {
      Row result=currentDelegate.next();
      if (result != null) {
        retryHandler.update(result);
      }
      return result;
    }
 catch (    ScanTimeoutException rte) {
      closeRpcContext();
      closeCurrentDelegate();
      ReadRowsRequest newRequest=retryHandler.handleScanTimeout(rte);
      currentDelegate=scannerFactory.createScanner(newRequest);
      this.rpcContext=rpcMetrics.timeRpc();
    }
catch (    IOExceptionWithStatus ioe) {
      closeRpcContext();
      closeCurrentDelegate();
      ReadRowsRequest newRequest=retryHandler.handleIOException(ioe);
      currentDelegate=scannerFactory.createScanner(newRequest);
      this.rpcContext=rpcMetrics.timeRpc();
    }
  }
}",0.9714632665452336
21082,"/** 
 * {@inheritDoc} 
 */
@Override public void close() throws IOException {
  closeRpcContext();
  closeOperationContext();
  currentDelegate.close();
}","/** 
 * {@inheritDoc} 
 */
@Override public synchronized void close() throws IOException {
  closeRpcContext();
  closeOperationContext();
  currentDelegate.close();
}",0.9595015576323987
21083,"@Test public void testDelete() throws IOException {
  Delete original=new Delete(toBytes(""String_Node_Str""));
  Assert.assertEquals(0,original.compareTo(CoderTestUtil.encodeAndDecode(underTest,original)));
}","@Test public void testDelete() throws IOException {
}",0.4076923076923077
21084,"@Test public void testPut() throws IOException {
  Put original=new Put(toBytes(""String_Node_Str"")).addColumn(toBytes(""String_Node_Str""),toBytes(""String_Node_Str""),toBytes(""String_Node_Str""));
  Assert.assertEquals(0,original.compareTo(CoderTestUtil.encodeAndDecode(underTest,original)));
}","@Test public void testPut() throws IOException {
}",0.2941176470588235
21085,"/** 
 * Extracts the byte array from the given   {@link com.google.protobuf.ByteString} without copy.
 * @param buf A buffer from which to extract the array. This buffer must be an instance of a{@code LiteralByteString} in order to be efficient. {@link com.google.protobuf.ByteString#toByteArray()}will be called for all other implementations, including subclasses.
 * @return an array of byte.
 */
public static byte[] zeroCopyGetBytes(final ByteString buf){
  return buf.toByteArray();
}","/** 
 * Extracts the byte array from the given   {@link com.google.protobuf.ByteString} without copy.
 * @param buf A buffer from which to extract the array.
 * @return an array of byte.
 */
public static byte[] zeroCopyGetBytes(final ByteString buf){
  return buf.toByteArray();
}",0.7298701298701299
21086,"/** 
 * Extracts the byte array from the given   {@link ByteString} without copy.
 * @param buf A buffer from which to extract the array.  This buffer must beactually an instance of a  {@code LiteralByteString}.
 * @return byte[] representation
 */
public static byte[] zeroCopyGetBytes(final ByteString buf){
  return buf.toByteArray();
}","/** 
 * Extracts the byte array from the given   {@link ByteString} without copy.
 * @param buf A buffer from which to extract the array.
 * @return byte[] representation
 */
public static byte[] zeroCopyGetBytes(final ByteString buf){
  return buf.toByteArray();
}",0.8774834437086093
21087,"/** 
 * Calls   {@link BigtableAsyncRpc#call(Object,Listener,CallOptions)} with this as the listener sothat retries happen correctly.
 */
@Override public void run(){
  Metadata metadata=new Metadata();
  metadata.merge(originalMetadata);
  this.call=rpc.call(request,this,callOptions,metadata);
}","/** 
 * Calls   {@link BigtableAsyncRpc#call(Object,Listener,CallOptions,Metadata)} with this as thelistener so that retries happen correctly.
 */
@Override public void run(){
  Metadata metadata=new Metadata();
  metadata.merge(originalMetadata);
  this.call=rpc.call(request,this,callOptions,metadata);
}",0.945273631840796
21088,"/** 
 * Calls   {@link ResultScanner#next()}.
 */
@Override public boolean advance() throws IOException {
  current=scanIterator.next(scanner);
  rowsRead.addAndGet(scanIterator.getRowCount(current));
  boolean isComplete=!scanIterator.isCompletionMarker(current);
  if (!isComplete) {
    rangeTracker.tryReturnRecordAt(true,ByteKey.of(scanIterator.getLatestKey(current)));
  }
  return isComplete;
}","/** 
 * Calls   {@link ResultScanner#next()}.
 */
@Override public boolean advance() throws IOException {
  current=scanIterator.next(scanner);
  rowsRead.addAndGet(scanIterator.getRowCount(current));
  boolean isComplete=scanIterator.isCompletionMarker(current);
  if (!isComplete) {
    rangeTracker.tryReturnRecordAt(true,ByteKey.of(scanIterator.getLatestKey(current)));
  }
  return !isComplete;
}",0.9975062344139652
21089,"public BigtableInstanceName(String projectId,String instanceId){
  Preconditions.checkArgument(!Strings.isNullOrEmpty(projectId),""String_Node_Str"");
  Preconditions.checkArgument(!Strings.isNullOrEmpty(instanceId),""String_Node_Str"");
  this.instanceName=String.format(BIGTABLE_V2_INSTANCE_FMT,instanceId);
}","public BigtableInstanceName(String projectId,String instanceId){
  Preconditions.checkArgument(!Strings.isNullOrEmpty(projectId),""String_Node_Str"");
  Preconditions.checkArgument(!Strings.isNullOrEmpty(instanceId),""String_Node_Str"");
  this.instanceName=String.format(BIGTABLE_V2_INSTANCE_FMT,projectId,instanceId);
}",0.9839743589743588
21090,"/** 
 * Test   {@link FuzzyRowFilter} to make sure that a String that matches the following regex ismatched: '.{8}-fuzzy-row-suffix'
 */
@Test public void testFuzzyRowFilter() throws IOException {
  if (!IntegrationTests.isBigtable()) {
    return;
  }
  final String rowSuffix=""String_Node_Str"";
  final byte[] qualA=dataHelper.randomData(""String_Node_Str"");
  byte[] value=Bytes.toBytes(""String_Node_Str"");
  byte[] missKey1=dataHelper.randomData(""String_Node_Str"",""String_Node_Str"");
  byte[] missKey2=dataHelper.randomData(""String_Node_Str"",""String_Node_Str"");
  byte[] missKey3=dataHelper.randomData(""String_Node_Str"",""String_Node_Str"");
  byte[] hitKey1=dataHelper.randomData(""String_Node_Str"",rowSuffix);
  byte[] hitKey2=dataHelper.randomData(""String_Node_Str"",rowSuffix);
  StringBuilder filterString=new StringBuilder();
  int size=8 + rowSuffix.length();
  byte[] filterBytes=new byte[size];
  for (int i=0; i < 8; i++) {
    filterString.append(""String_Node_Str"");
    filterBytes[i]=1;
  }
  filterString.append(rowSuffix);
  for (int i=0; i < rowSuffix.length(); i++) {
    filterBytes[i + 8]=0;
  }
  FuzzyRowFilter fuzzyFilter=new FuzzyRowFilter(Arrays.asList(new Pair<byte[],byte[]>(Bytes.toBytesBinary(filterString.toString()),filterBytes)));
  ByteArrayComparable sizeComparable=new RegexStringComparator(String.format(""String_Node_Str"",size));
  Scan scan=new Scan();
  scan.setFilter(fuzzyFilter);
  Table table=getTable();
  List<Put> puts=new ArrayList<>();
  for (  byte[] key : Arrays.asList(missKey1,missKey2,missKey3,hitKey1,hitKey2)) {
    puts.add(new Put(key).addColumn(COLUMN_FAMILY,qualA,value));
  }
  table.put(puts);
  try (ResultScanner scanner=table.getScanner(scan)){
    assertNextEquals(scanner,hitKey1);
    assertNextEquals(scanner,hitKey2);
    Assert.assertNull(scanner.next());
  }
 }","/** 
 * Test   {@link FuzzyRowFilter} to make sure that a String that matches the following regex ismatched: '.{8}-fuzzy-row-suffix'
 */
@Test public void testFuzzyRowFilter() throws IOException {
  if (!IntegrationTests.isBigtable()) {
    return;
  }
  final String rowSuffix=""String_Node_Str"";
  final byte[] qualA=dataHelper.randomData(""String_Node_Str"");
  byte[] value=Bytes.toBytes(""String_Node_Str"");
  byte[] missKey1=dataHelper.randomData(""String_Node_Str"",""String_Node_Str"");
  byte[] missKey2=dataHelper.randomData(""String_Node_Str"",""String_Node_Str"");
  byte[] missKey3=dataHelper.randomData(""String_Node_Str"",""String_Node_Str"");
  byte[] hitKey1=dataHelper.randomData(""String_Node_Str"",rowSuffix);
  byte[] hitKey2=dataHelper.randomData(""String_Node_Str"",rowSuffix);
  byte[] hitKey3=dataHelper.randomData(""String_Node_Str"",rowSuffix);
  byte[] hitKey4=dataHelper.randomData(""String_Node_Str"",rowSuffix);
  StringBuilder filterString=new StringBuilder();
  int size=8 + rowSuffix.length();
  byte[] filterBytes=new byte[size];
  for (int i=0; i < 8; i++) {
    filterString.append(""String_Node_Str"");
    filterBytes[i]=1;
  }
  filterString.append(rowSuffix);
  for (int i=0; i < rowSuffix.length(); i++) {
    filterBytes[i + 8]=0;
  }
  FuzzyRowFilter fuzzyFilter=new FuzzyRowFilter(Arrays.asList(new Pair<byte[],byte[]>(Bytes.toBytesBinary(filterString.toString()),filterBytes)));
  Scan scan=new Scan();
  scan.setFilter(fuzzyFilter);
  Table table=getTable();
  List<Put> puts=new ArrayList<>();
  for (  byte[] key : Arrays.asList(missKey1,missKey2,missKey3,hitKey1,hitKey2,hitKey3,hitKey4)) {
    puts.add(new Put(key).addColumn(COLUMN_FAMILY,qualA,value));
  }
  table.put(puts);
  try (ResultScanner scanner=table.getScanner(scan)){
    assertNextEquals(scanner,hitKey1);
    assertNextEquals(scanner,hitKey2);
    assertNextEquals(scanner,hitKey3);
    assertNextEquals(scanner,hitKey4);
    Assert.assertNull(scanner.next());
  }
 }",0.9115394771587008
21091,"@Override public void onNext(ReadRowsResponse readRowsResponse){
  if (complete) {
    onError(new IllegalStateException(""String_Node_Str""));
    return;
  }
  if (!readRowsResponse.getLastScannedRowKey().isEmpty()) {
    state.handleLastScannedRowKey(readRowsResponse.getLastScannedRowKey());
  }
  for (  ReadRowsResponse.CellChunk chunk : readRowsResponse.getChunksList()) {
    try {
      state.validateChunk(rowInProgress,previousKey,chunk);
    }
 catch (    RuntimeException e) {
      onError(e);
      return;
    }
    try {
      if (isReset(chunk)) {
        rowInProgress=null;
        state=RowMergerState.NewRow;
        continue;
      }
      if (rowInProgress == null) {
        rowInProgress=new RowInProgress();
        rowInProgress.updateCurrentKey(chunk);
      }
      if (chunk.getValueSize() > 0) {
        rowInProgress.addPartialCellChunk(chunk);
        state=RowMergerState.CellInProgress;
      }
 else       if (rowInProgress.hasChunkInProgess()) {
        rowInProgress.addPartialCellChunk(chunk);
        rowInProgress.completeMultiChunkCell();
        state=RowMergerState.RowInProgress;
      }
 else {
        rowInProgress.addFullChunk(chunk);
        state=RowMergerState.RowInProgress;
      }
      if (isCommit(chunk)) {
        observer.onNext(rowInProgress.createRow());
        previousKey=rowInProgress.getRowKey();
        rowInProgress=null;
        state=RowMergerState.NewRow;
      }
    }
 catch (    IOException e) {
      onError(e);
    }
  }
}","@Override public void onNext(ReadRowsResponse readRowsResponse){
  if (complete) {
    onError(new IllegalStateException(""String_Node_Str""));
    return;
  }
  if (!readRowsResponse.getLastScannedRowKey().isEmpty()) {
    state.handleLastScannedRowKey(readRowsResponse.getLastScannedRowKey());
  }
  for (  ReadRowsResponse.CellChunk chunk : readRowsResponse.getChunksList()) {
    try {
      state.validateChunk(rowInProgress,previousKey,chunk);
    }
 catch (    Exception e) {
      onError(e);
      return;
    }
    try {
      if (isReset(chunk)) {
        rowInProgress=null;
        state=RowMergerState.NewRow;
        continue;
      }
      if (rowInProgress == null) {
        rowInProgress=new RowInProgress();
        rowInProgress.updateCurrentKey(chunk);
      }
      if (chunk.getValueSize() > 0) {
        rowInProgress.addPartialCellChunk(chunk);
        state=RowMergerState.CellInProgress;
      }
 else       if (rowInProgress.hasChunkInProgess()) {
        rowInProgress.addPartialCellChunk(chunk);
        rowInProgress.completeMultiChunkCell();
        state=RowMergerState.RowInProgress;
      }
 else {
        rowInProgress.addFullChunk(chunk);
        state=RowMergerState.RowInProgress;
      }
      if (isCommit(chunk)) {
        observer.onNext(rowInProgress.createRow());
        previousKey=rowInProgress.getRowKey();
        rowInProgress=null;
        state=RowMergerState.NewRow;
      }
    }
 catch (    IOException e) {
      onError(e);
    }
  }
}",0.9976612094888072
21092,"@Override public synchronized void run(){
  ListenableFuture<MutateRowsResponse> future=null;
  try {
    if (retryId == null) {
      retryId=this.asyncExecutor.getRpcThrottler().registerRetry();
    }
    future=asyncExecutor.mutateRowsAsync(currentRequestManager.build());
  }
 catch (  InterruptedException e) {
    future=Futures.<MutateRowsResponse>immediateFailedFuture(e);
  }
 finally {
    addCallback(future);
  }
}","@Override public synchronized void run(){
  ListenableFuture<MutateRowsResponse> future=null;
  try {
    if (retryId == null) {
      retryId=Long.valueOf(this.asyncExecutor.getRpcThrottler().registerRetry());
    }
    future=asyncExecutor.mutateRowsAsync(currentRequestManager.build());
  }
 catch (  InterruptedException e) {
    future=Futures.<MutateRowsResponse>immediateFailedFuture(e);
  }
 finally {
    addCallback(future);
  }
}",0.9838337182448036
21093,"@Override public synchronized void run(){
  ListenableFuture<MutateRowsResponse> future=null;
  try {
    if (retryId == null) {
      retryId=this.asyncExecutor.getRpcThrottler().registerRetry();
    }
    future=asyncExecutor.mutateRowsAsync(currentRequestManager.build());
  }
 catch (  InterruptedException e) {
    future=Futures.<MutateRowsResponse>immediateFailedFuture(e);
  }
 finally {
    addCallback(future);
  }
}","@Override public synchronized void run(){
  ListenableFuture<MutateRowsResponse> future=null;
  try {
    if (retryId == null) {
      retryId=Long.valueOf(this.asyncExecutor.getRpcThrottler().registerRetry());
    }
    future=asyncExecutor.mutateRowsAsync(currentRequestManager.build());
  }
 catch (  InterruptedException e) {
    future=Futures.<MutateRowsResponse>immediateFailedFuture(e);
  }
 finally {
    addCallback(future);
  }
}",0.9838337182448036
21094,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Test public void testSampleRowKeys() throws Exception {
  List<SampleRowKeysResponse> sampleRowKeys=new ArrayList<>();
  int count=(int)(AbstractSource.COUNT_MAX_SPLIT_COUNT * 3 - 5);
  byte[][] keys=Bytes.split(""String_Node_Str"".getBytes(),""String_Node_Str"".getBytes(),count - 2);
  long tabletSize=2L * 1024L * 1024L* 1024L;
  long boundary=0;
  for (  byte[] currentKey : keys) {
    boundary+=tabletSize;
    sampleRowKeys.add(SampleRowKeysResponse.newBuilder().setRowKey(ByteString.copyFrom(currentKey)).setOffsetBytes(boundary).build());
  }
  CloudBigtableScanConfiguration config=new CloudBigtableScanConfiguration(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Scan());
  CloudBigtableIO.Source source=(Source)CloudBigtableIO.read(config);
  source.setSampleRowKeys(sampleRowKeys);
  List<CloudBigtableIO.SourceWithKeys> splits=source.getSplits(20000);
  Assert.assertTrue(splits.size() <= CloudBigtableIO.AbstractSource.COUNT_MAX_SPLIT_COUNT);
  Iterator<SourceWithKeys> iter=splits.iterator();
  SourceWithKeys last=iter.next();
  while (iter.hasNext()) {
    SourceWithKeys current=iter.next();
    Assert.assertTrue(Bytes.equals(current.getStartRow(),last.getStopRow()));
    if (iter.hasNext()) {
      Assert.assertTrue(Bytes.compareTo(current.getStartRow(),current.getStopRow()) < 0);
    }
    Assert.assertTrue(current.getEstimatedSize() >= tabletSize);
    last=current;
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Test public void testSampleRowKeys() throws Exception {
  List<SampleRowKeysResponse> sampleRowKeys=new ArrayList<>();
  int count=(int)(AbstractSource.COUNT_MAX_SPLIT_COUNT * 3 - 5);
  byte[][] keys=Bytes.split(""String_Node_Str"".getBytes(),""String_Node_Str"".getBytes(),count - 2);
  long tabletSize=2L * 1024L * 1024L* 1024L;
  long boundary=0;
  for (  byte[] currentKey : keys) {
    boundary+=tabletSize;
    try {
      sampleRowKeys.add(SampleRowKeysResponse.newBuilder().setRowKey(ByteString.copyFrom(currentKey)).setOffsetBytes(boundary).build());
    }
 catch (    NoClassDefFoundError e) {
      e.printStackTrace();
      return;
    }
  }
  CloudBigtableScanConfiguration config=new CloudBigtableScanConfiguration(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Scan());
  CloudBigtableIO.Source source=(Source)CloudBigtableIO.read(config);
  source.setSampleRowKeys(sampleRowKeys);
  List<CloudBigtableIO.SourceWithKeys> splits=source.getSplits(20000);
  Assert.assertTrue(splits.size() <= CloudBigtableIO.AbstractSource.COUNT_MAX_SPLIT_COUNT);
  Iterator<SourceWithKeys> iter=splits.iterator();
  SourceWithKeys last=iter.next();
  while (iter.hasNext()) {
    SourceWithKeys current=iter.next();
    Assert.assertTrue(Bytes.equals(current.getStartRow(),last.getStopRow()));
    if (iter.hasNext()) {
      Assert.assertTrue(Bytes.compareTo(current.getStartRow(),current.getStopRow()) < 0);
    }
    Assert.assertTrue(current.getEstimatedSize() >= tabletSize);
    last=current;
  }
}",0.9664166938376264
21095,"/** 
 * Splits the region based on the start and stop key. Uses  {@link Bytes#split(byte[],byte[],int)} under the covers.
 */
private List<BoundedSource<ResultOutputType>> split(long regionSize,long desiredBundleSizeBytes,byte[] startKey,byte[] stopKey){
  if (regionSize < desiredBundleSizeBytes || stopKey.length == 0) {
    BoundedSource<ResultOutputType> source=createSourceWithKeys(startKey,stopKey,regionSize);
    return Collections.singletonList(source);
  }
 else {
    Preconditions.checkState(desiredBundleSizeBytes > 0);
    if (stopKey.length > 0) {
      Preconditions.checkState(Bytes.compareTo(startKey,stopKey) <= 0,""String_Node_Str"",Bytes.toStringBinary(startKey),Bytes.toStringBinary(stopKey));
      Preconditions.checkState(regionSize > 0,""String_Node_Str"",regionSize);
    }
    int splitCount=(int)Math.ceil((double)(regionSize) / (double)(desiredBundleSizeBytes));
    byte[][] splitKeys=Bytes.split(startKey,stopKey,splitCount - 1);
    Preconditions.checkState(splitCount + 1 == splitKeys.length);
    List<BoundedSource<ResultOutputType>> result=new ArrayList<>();
    for (int i=0; i < splitCount; i++) {
      result.add(createSourceWithKeys(splitKeys[i],splitKeys[i + 1],regionSize));
    }
    return result;
  }
}","/** 
 * Splits the region based on the start and stop key. Uses  {@link Bytes#split(byte[],byte[],int)} under the covers.
 */
private List<BoundedSource<ResultOutputType>> split(long regionSize,long desiredBundleSizeBytes,byte[] startKey,byte[] stopKey){
  Preconditions.checkState(desiredBundleSizeBytes > 0);
  int splitCount=(int)Math.ceil((double)(regionSize) / (double)(desiredBundleSizeBytes));
  if (splitCount < 2 || stopKey.length == 0) {
    return Collections.singletonList(createSourceWithKeys(startKey,stopKey,regionSize));
  }
 else {
    if (stopKey.length > 0) {
      Preconditions.checkState(Bytes.compareTo(startKey,stopKey) <= 0,""String_Node_Str"",Bytes.toStringBinary(startKey),Bytes.toStringBinary(stopKey));
      Preconditions.checkState(regionSize > 0,""String_Node_Str"",regionSize);
    }
    byte[][] splitKeys=Bytes.split(startKey,stopKey,splitCount - 1);
    Preconditions.checkState(splitCount + 1 == splitKeys.length);
    List<BoundedSource<ResultOutputType>> result=new ArrayList<>();
    for (int i=0; i < splitCount; i++) {
      result.add(createSourceWithKeys(splitKeys[i],splitKeys[i + 1],regionSize));
    }
    return result;
  }
}",0.8102734051367025
21096,"@VisibleForTesting protected Connection createConnection(Configuration config) throws IOException {
  return new BigtableConnection(config);
}","@VisibleForTesting protected Connection createConnection(Configuration config) throws IOException {
  return new BigtableConnection(config){
    @Override public void close() throws IOException {
      LOG.info(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
;
}",0.6995073891625616
21097,"/** 
 * Construct an Bigtable GC expression from the given column descriptor.
 */
public static String buildGarbageCollectionExpression(HColumnDescriptor columnDescriptor){
  int maxVersions=columnDescriptor.getMaxVersions();
  int minVersions=columnDescriptor.getMinVersions();
  int ttlSeconds=columnDescriptor.getTimeToLive();
  long bigtableTtl=BigtableConstants.BIGTABLE_TIMEUNIT.convert(ttlSeconds,TimeUnit.SECONDS);
  Preconditions.checkState(minVersions < maxVersions,""String_Node_Str"");
  StringBuilder buffer=new StringBuilder();
  if (ttlSeconds != HColumnDescriptor.DEFAULT_TTL) {
    if (minVersions != HColumnDescriptor.DEFAULT_MIN_VERSIONS) {
      buffer.append(String.format(""String_Node_Str"",bigtableTtl,minVersions));
    }
 else {
      buffer.append(String.format(""String_Node_Str"",bigtableTtl));
    }
  }
  if (buffer.length() != 0) {
    buffer.append(""String_Node_Str"");
  }
  buffer.append(String.format(""String_Node_Str"",maxVersions));
  return buffer.toString();
}","/** 
 * Construct an Bigtable GC expression from the given column descriptor.
 */
public static String buildGarbageCollectionExpression(HColumnDescriptor columnDescriptor){
  int maxVersions=columnDescriptor.getMaxVersions();
  int minVersions=columnDescriptor.getMinVersions();
  int ttlSeconds=columnDescriptor.getTimeToLive();
  long bigtableTtl=BigtableConstants.BIGTABLE_TIMEUNIT.convert(ttlSeconds,TimeUnit.SECONDS);
  Preconditions.checkState(minVersions < maxVersions,""String_Node_Str"");
  StringBuilder buffer=new StringBuilder();
  if (ttlSeconds != HColumnDescriptor.DEFAULT_TTL) {
    if (minVersions != HColumnDescriptor.DEFAULT_MIN_VERSIONS) {
      buffer.append(String.format(""String_Node_Str"",bigtableTtl,minVersions));
    }
 else {
      buffer.append(String.format(""String_Node_Str"",bigtableTtl));
    }
  }
  if (buffer.length() != 0) {
    buffer.append(""String_Node_Str"");
  }
  if (maxVersions != Integer.MAX_VALUE) {
    buffer.append(String.format(""String_Node_Str"",maxVersions));
  }
  return buffer.toString();
}",0.9763779527559056
21098,"/** 
 * <p> Parse a Bigtable GC-Expression that is in line with  {@link #buildGarbageCollectionExpression(HColumnDescriptor)} into a the provided{@link HColumnDescriptor}. </p> <p> This method will likely throw IllegalStateException if the GC Expression isn't similar to buildGarbageCollectionExpression's expression. Requires the input to be empty/null or ""[(age > \d+ [&& version() > \d+]) ||] version() > \d"" as generated by  {@link #buildGarbageCollectionExpression(HColumnDescriptor)}</p>
 */
private static void convertGarbageCollectionExpression(String gcExpression,HColumnDescriptor columnDescriptor){
  if (Strings.isNullOrEmpty(gcExpression)) {
    columnDescriptor.setMaxVersions(0);
    return;
  }
  String maxVersionExpression=null;
  String minVersionExpression=null;
  String ttlExpression=null;
  if (gcExpression.contains(""String_Node_Str"")) {
    for (    String expression : gcExpressionOrSplitter.split(gcExpression)) {
      if (expression.contains(""String_Node_Str"")) {
        for (        String expressionComponent : gcExpressionAndSplitter.split(expression)) {
          if (expressionComponent.contains(""String_Node_Str"") && expressionComponent.contains(""String_Node_Str"")) {
            ttlExpression=expressionComponent.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
 else           if (expressionComponent.contains(""String_Node_Str"") && expressionComponent.contains(""String_Node_Str"")) {
            minVersionExpression=expressionComponent.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            throw new IllegalStateException(String.format(""String_Node_Str"",expression));
          }
        }
      }
 else       if (expression.contains(""String_Node_Str"") && expression.contains(""String_Node_Str"")) {
        maxVersionExpression=expression.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        throw new IllegalStateException(String.format(""String_Node_Str"",expression));
      }
    }
  }
 else   if (gcExpression.contains(""String_Node_Str"") && gcExpression.contains(""String_Node_Str"")) {
    maxVersionExpression=gcExpression.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(String.format(""String_Node_Str"",maxVersionExpression));
  }
  int maxVersions=getInteger(maxVersionExpression);
  columnDescriptor.setMaxVersions(maxVersions);
  if (minVersionExpression != null) {
    int minVersions=getInteger(minVersionExpression);
    Preconditions.checkState(minVersions < maxVersions,""String_Node_Str"");
    columnDescriptor.setMinVersions(minVersions);
  }
  if (ttlExpression != null) {
    long bigtableTtl=getLong(ttlExpression);
    int ttlSeconds=(int)TimeUnit.SECONDS.convert(bigtableTtl,BigtableConstants.BIGTABLE_TIMEUNIT);
    if (ttlSeconds != HColumnDescriptor.DEFAULT_TTL) {
      columnDescriptor.setTimeToLive(ttlSeconds);
    }
  }
}","/** 
 * <p> Parse a Bigtable GC-Expression that is in line with  {@link #buildGarbageCollectionExpression(HColumnDescriptor)} into a the provided{@link HColumnDescriptor}. </p> <p> This method will likely throw IllegalStateException if the GC Expression isn't similar to buildGarbageCollectionExpression's expression. Requires the input to be empty/null or ""[(age > \d+ [&& version() > \d+]) ||] version() > \d"" as generated by  {@link #buildGarbageCollectionExpression(HColumnDescriptor)}</p>
 */
private static void convertGarbageCollectionExpression(String gcExpression,HColumnDescriptor columnDescriptor){
  if (Strings.isNullOrEmpty(gcExpression)) {
    columnDescriptor.setMaxVersions(Integer.MAX_VALUE);
    return;
  }
  String maxVersionExpression=null;
  String minVersionExpression=null;
  String ttlExpression=null;
  if (gcExpression.contains(""String_Node_Str"")) {
    for (    String expression : gcExpressionOrSplitter.split(gcExpression)) {
      if (expression.contains(""String_Node_Str"")) {
        for (        String expressionComponent : gcExpressionAndSplitter.split(expression)) {
          if (expressionComponent.contains(""String_Node_Str"") && expressionComponent.contains(""String_Node_Str"")) {
            ttlExpression=expressionComponent.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
 else           if (expressionComponent.contains(""String_Node_Str"") && expressionComponent.contains(""String_Node_Str"")) {
            minVersionExpression=expressionComponent.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            throw new IllegalStateException(String.format(""String_Node_Str"",expression));
          }
        }
      }
 else       if (expression.contains(""String_Node_Str"") && expression.contains(""String_Node_Str"")) {
        maxVersionExpression=expression.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        throw new IllegalStateException(String.format(""String_Node_Str"",expression));
      }
    }
  }
 else   if (gcExpression.contains(""String_Node_Str"") && gcExpression.contains(""String_Node_Str"")) {
    maxVersionExpression=gcExpression.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(String.format(""String_Node_Str"",maxVersionExpression));
  }
  int maxVersions=getInteger(maxVersionExpression);
  columnDescriptor.setMaxVersions(maxVersions);
  if (minVersionExpression != null) {
    int minVersions=getInteger(minVersionExpression);
    Preconditions.checkState(minVersions < maxVersions,""String_Node_Str"");
    columnDescriptor.setMinVersions(minVersions);
  }
  if (ttlExpression != null) {
    long bigtableTtl=getLong(ttlExpression);
    int ttlSeconds=(int)TimeUnit.SECONDS.convert(bigtableTtl,BigtableConstants.BIGTABLE_TIMEUNIT);
    if (ttlSeconds != HColumnDescriptor.DEFAULT_TTL) {
      columnDescriptor.setTimeToLive(ttlSeconds);
    }
  }
}",0.996895481200414
21099,"@Test public void testBlankExpression(){
  expectedException.expectMessage(""String_Node_Str"");
  expectedException.expect(IllegalArgumentException.class);
  adapter.adapt(""String_Node_Str"",asColumnFamily(""String_Node_Str""));
}","@Test public void testBlankExpression(){
  HColumnDescriptor descriptor=adapter.adapt(""String_Node_Str"",asColumnFamily(""String_Node_Str""));
  Assert.assertEquals(Integer.MAX_VALUE,descriptor.getMaxVersions());
  Assert.assertEquals(""String_Node_Str"",ColumnDescriptorAdapter.buildGarbageCollectionExpression(descriptor));
}",0.3722627737226277
21100,"/** 
 * Performs a   {@link BigtableDataClient#checkAndMutateRowAsync(CheckAndMutateRowRequest))} on the{@link CheckAndMutateRowRequest}. This method may block if  {@link HeapSizeManager#registerOperationWithHeapSize(long)} blocks.
 * @param request The {@link CheckAndMutateRowRequest} to send.
 * @return a {@link ListenableFuture} which can be listened to for completion events.
 */
public ListenableFuture<CheckAndMutateRowResponse> checkAndMutateRowAsync(CheckAndMutateRowRequest request) throws InterruptedException {
  return call(CHECK_AND_MUTATE_ASYNC,request);
}","/** 
 * Performs a   {@link BigtableDataClient#checkAndMutateRowAsync(CheckAndMutateRowRequest)} on the{@link CheckAndMutateRowRequest}. This method may block if  {@link HeapSizeManager#registerOperationWithHeapSize(long)} blocks.
 * @param request The {@link CheckAndMutateRowRequest} to send.
 * @return a {@link ListenableFuture} which can be listened to for completion events.
 */
public ListenableFuture<CheckAndMutateRowResponse> checkAndMutateRowAsync(CheckAndMutateRowRequest request) throws InterruptedException {
  return call(CHECK_AND_MUTATE_ASYNC,request);
}",0.9991251093613298
21101,"/** 
 * Given   {@link CredentialOptions} that define how to look up credentials, do the following:<ol> <li> Look up the credentials <li> If there are credentials, create a gRPC interceptor that gets OAuth2 security tokens and add that token as a header on all calls. <br/>NOTE:  {@link RefreshingOAuth2CredentialsInterceptor} ensures that the token staysfresh. It does token lookups asynchronously so that the calls themselves take as little performance penalty as possible. <li> Cache the interceptor in step #2 if the  {@link CredentialOptions} uses<a href=""https://developers.google.com/identity/protocols/application-default-credentials""> default application credentials </a> </ol>
 * @param credentialOptions Defines how credentials should be achieved
 * @param retryOptions
 * @return a HeaderInterceptor
 * @throws IOException
 * @throws GeneralSecurityException
 */
public synchronized HeaderInterceptor getCredentialsInterceptor(CredentialOptions credentialOptions,RetryOptions retryOptions) throws IOException, GeneralSecurityException {
  boolean isDefaultCredentials=credentialOptions.getCredentialType() == CredentialType.DefaultCredentials;
  if (isDefaultCredentials && defaultCredentialInterceptor != null) {
    return defaultCredentialInterceptor;
  }
  Credentials credentials=CredentialFactory.getCredentials(credentialOptions);
  if (credentials == null) {
    return null;
  }
  Preconditions.checkState(credentials instanceof OAuth2Credentials,String.format(""String_Node_Str"",credentials.getClass().getName()));
  RefreshingOAuth2CredentialsInterceptor oauth2Interceptor=new RefreshingOAuth2CredentialsInterceptor(executor,(OAuth2Credentials)credentials,retryOptions);
  oauth2Interceptor.asyncRefresh();
  if (isDefaultCredentials) {
    defaultCredentialInterceptor=oauth2Interceptor;
  }
  return oauth2Interceptor;
}","/** 
 * Given   {@link CredentialOptions} that define how to look up credentials, do the following:<ol> <li> Look up the credentials <li> If there are credentials, create a gRPC interceptor that gets OAuth2 security tokens and add that token as a header on all calls. <br>NOTE:  {@link RefreshingOAuth2CredentialsInterceptor} ensures that the token staysfresh. It does token lookups asynchronously so that the calls themselves take as little performance penalty as possible. <li> Cache the interceptor in step #2 if the  {@link CredentialOptions} uses<a href=""https://developers.google.com/identity/protocols/application-default-credentials""> default application credentials </a> </ol>
 * @param credentialOptions Defines how credentials should be achieved
 * @param retryOptions
 * @return a HeaderInterceptor
 * @throws IOException
 * @throws GeneralSecurityException
 */
public synchronized HeaderInterceptor getCredentialsInterceptor(CredentialOptions credentialOptions,RetryOptions retryOptions) throws IOException, GeneralSecurityException {
  boolean isDefaultCredentials=credentialOptions.getCredentialType() == CredentialType.DefaultCredentials;
  if (isDefaultCredentials && defaultCredentialInterceptor != null) {
    return defaultCredentialInterceptor;
  }
  Credentials credentials=CredentialFactory.getCredentials(credentialOptions);
  if (credentials == null) {
    return null;
  }
  Preconditions.checkState(credentials instanceof OAuth2Credentials,String.format(""String_Node_Str"",credentials.getClass().getName()));
  RefreshingOAuth2CredentialsInterceptor oauth2Interceptor=new RefreshingOAuth2CredentialsInterceptor(executor,(OAuth2Credentials)credentials,retryOptions);
  oauth2Interceptor.asyncRefresh();
  if (isDefaultCredentials) {
    defaultCredentialInterceptor=oauth2Interceptor;
  }
  return oauth2Interceptor;
}",0.9997287767832926
21102,"/** 
 * Send the operations to the async executor asynchronously.  The conversion from hbase object to cloud bigtable proto and the async call both take time (microseconds worth) that could be parallelized, or at least removed from the user's thread.
 */
private void offer(Mutation mutation) throws IOException {
  try {
    initializeAsyncMutators();
    long operationId=heapSizeManager.registerOperationWithHeapSize(mutation.heapSize());
    MutationOperation operation=new MutationOperation(mutation,operationId,false);
    if (executorService == null || options.getAsyncMutatorCount() > 0) {
      mutationsToBeSent.add(operation);
    }
 else {
      operation.run();
    }
  }
 catch (  InterruptedException e) {
    Thread.interrupted();
    throw new IOException(""String_Node_Str"" + Bytes.toString(mutation.getRow()),e);
  }
}","/** 
 * Send the operations to the async executor asynchronously.  The conversion from hbase object to cloud bigtable proto and the async call both take time (microseconds worth) that could be parallelized, or at least removed from the user's thread.
 */
private void offer(Mutation mutation) throws IOException {
  try {
    initializeAsyncMutators();
    long operationId=heapSizeManager.registerOperationWithHeapSize(mutation.heapSize());
    MutationOperation operation=new MutationOperation(mutation,operationId,false);
    if (executorService != null && options.getAsyncMutatorCount() > 0) {
      mutationsToBeSent.add(operation);
    }
 else {
      operation.run();
    }
  }
 catch (  InterruptedException e) {
    Thread.interrupted();
    throw new IOException(""String_Node_Str"" + Bytes.toString(mutation.getRow()),e);
  }
}",0.9892344497607656
21103,"private BigtableBufferedMutator createMutator(Configuration configuration) throws IOException {
  HeapSizeManager heapSizeManager=new HeapSizeManager(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT,AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT){
    @Override public <T>FutureCallback<T> addCallback(    ListenableFuture<T> future,    Long id){
      FutureCallback<T> callback=super.addCallback(future,id);
      callbacks.add(callback);
      return callback;
    }
  }
;
  configuration.set(BigtableOptionsFactory.PROJECT_ID_KEY,""String_Node_Str"");
  configuration.set(BigtableOptionsFactory.ZONE_KEY,""String_Node_Str"");
  configuration.set(BigtableOptionsFactory.CLUSTER_KEY,""String_Node_Str"");
  BigtableOptions options=BigtableOptionsFactory.fromConfiguration(configuration);
  HBaseRequestAdapter adapter=new HBaseRequestAdapter(options.getClusterName(),TableName.valueOf(""String_Node_Str""),configuration);
  if (options.getAsyncMutatorCount() > 0) {
    executorService=Executors.newCachedThreadPool();
  }
  return new BigtableBufferedMutator(client,adapter,configuration,options,listener,heapSizeManager,executorService);
}","private BigtableBufferedMutator createMutator(Configuration configuration) throws IOException {
  HeapSizeManager heapSizeManager=new HeapSizeManager(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT,AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT){
    @Override public <T>FutureCallback<T> addCallback(    ListenableFuture<T> future,    Long id){
      FutureCallback<T> callback=super.addCallback(future,id);
      callbacks.add(callback);
      return callback;
    }
  }
;
  configuration.set(BigtableOptionsFactory.PROJECT_ID_KEY,""String_Node_Str"");
  configuration.set(BigtableOptionsFactory.ZONE_KEY,""String_Node_Str"");
  configuration.set(BigtableOptionsFactory.CLUSTER_KEY,""String_Node_Str"");
  BigtableOptions options=BigtableOptionsFactory.fromConfiguration(configuration);
  HBaseRequestAdapter adapter=new HBaseRequestAdapter(options.getClusterName(),TableName.valueOf(""String_Node_Str""),configuration);
  executorService=Executors.newCachedThreadPool();
  return new BigtableBufferedMutator(client,adapter,configuration,options,listener,heapSizeManager,executorService);
}",0.8728428701180745
21104,"/** 
 * Waits for a completion and then marks it as complete.
 */
private void waitForCompletions(long timeoutMs){
  try {
    Long completedOperation=this.completedOperationIds.pollFirst(timeoutMs,TimeUnit.MILLISECONDS);
    if (completedOperation != null) {
      markCanBeCompleted(completedOperation);
    }
  }
 catch (  InterruptedException e) {
  }
}","/** 
 * Waits for a completion and then marks it as complete.
 * @throws InterruptedException
 */
private void waitForCompletions(long timeoutMs) throws InterruptedException {
  Long completedOperation=this.completedOperationIds.pollFirst(timeoutMs,TimeUnit.MILLISECONDS);
  if (completedOperation != null) {
    markOperationComplete(completedOperation);
  }
}",0.7910863509749304
21105,"public synchronized void flush() throws InterruptedException {
  boolean performedWarning=false;
  while (!pendingOperationsWithSize.isEmpty()) {
    cleanupFinishedOperations();
    if (pendingOperationsWithSize.isEmpty()) {
      break;
    }
    if (!performedWarning && lastOperationChange + INTERVAL_NO_SUCCESS_WARNING < System.currentTimeMillis()) {
      long lastUpdated=(System.currentTimeMillis() - lastOperationChange) / 1000;
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"",lastUpdated,pendingOperationsWithSize.size());
      performedWarning=true;
      waitForCompletions(FINISH_WAIT_MILLIS);
    }
  }
  if (performedWarning) {
    LOG.info(""String_Node_Str"");
  }
}","public synchronized void flush() throws InterruptedException {
  boolean performedWarning=false;
  cleanupFinishedOperations();
  while (!pendingOperationsWithSize.isEmpty()) {
    if (!performedWarning && lastOperationChange + INTERVAL_NO_SUCCESS_WARNING < System.currentTimeMillis()) {
      long lastUpdated=(System.currentTimeMillis() - lastOperationChange) / 1000;
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"",lastUpdated,pendingOperationsWithSize.size());
      performedWarning=true;
    }
    waitForCompletions(FINISH_WAIT_MILLIS);
    cleanupFinishedOperations();
  }
  if (performedWarning) {
    LOG.info(""String_Node_Str"");
  }
}",0.8780852655198205
21106,"@Override public Object apply(GeneratedMessage response){
  if (response instanceof com.google.bigtable.v1.Row) {
    return Adapters.ROW_ADAPTER.adaptResponse((com.google.bigtable.v1.Row)response);
  }
 else {
    return new Result();
  }
}","@Override public com.google.bigtable.v1.Row apply(List<com.google.bigtable.v1.Row> rows){
  if (rows.isEmpty()) {
    return null;
  }
 else {
    return rows.get(0);
  }
}",0.5472154963680388
21107,"/** 
 * Implementation of   {@link org.apache.hadoop.hbase.client.HTable#batch(List)}
 */
public Object[] batch(List<? extends Row> actions) throws IOException {
  LOG.trace(""String_Node_Str"");
  Result[] results=new Result[actions.size()];
  try {
    batch(actions,results);
  }
 catch (  InterruptedException e) {
    LOG.error(""String_Node_Str"",e);
    throw new IOException(""String_Node_Str"",e);
  }
  return results;
}","public Result[] batch(List<? extends Row> actions) throws IOException {
  try {
    Result[] results=new Result[actions.size()];
    batch(actions,results);
    return results;
  }
 catch (  InterruptedException e) {
    LOG.error(""String_Node_Str"",e);
    throw new IOException(""String_Node_Str"",e);
  }
}",0.4054794520547945
21108,"@Override public void onFailure(Throwable throwable){
  try {
    if (callback != null) {
      callback.update(NO_REGION,row.getRow(),null);
    }
  }
  finally {
    resultsArray[index]=null;
    resultFuture.setException(throwable);
  }
}","@Override public final void onFailure(Throwable throwable){
  resultsArray[index]=null;
  resultFuture.setException(throwable);
  if (callback != null) {
    callback.update(NO_REGION,row.getRow(),null);
  }
}",0.6133333333333333
21109,"public RpcResultFutureCallback(Row row,Batch.Callback<R> callback,int index,Object[] resultsArray,SettableFuture<Object> resultFuture,Function<T,Object> adapter){
  this.row=row;
  this.callback=callback;
  this.index=index;
  this.resultsArray=resultsArray;
  this.resultFuture=resultFuture;
  this.adapter=adapter;
}","public RpcResultFutureCallback(Row row,Batch.Callback<T> callback,int index,Object[] resultsArray,SettableFuture<Result> resultFuture){
  this.row=row;
  this.callback=callback;
  this.index=index;
  this.resultsArray=resultsArray;
  this.resultFuture=resultFuture;
}",0.8923076923076924
21110,"/** 
 * Implementation of   {@link org.apache.hadoop.hbase.client.HTable#exists(List)}.
 */
public Boolean[] exists(List<Get> gets) throws IOException {
  LOG.trace(""String_Node_Str"");
  Result[] getResults=(Result[])batch(gets);
  Boolean[] exists=new Boolean[getResults.length];
  for (int index=0; index < getResults.length; index++) {
    exists[index]=!getResults[index].isEmpty();
  }
  return exists;
}","/** 
 * Implementation of   {@link org.apache.hadoop.hbase.client.Table#existsAll(List)}.
 */
public Boolean[] exists(List<Get> gets) throws IOException {
  Result[] getResults=batch(gets);
  Boolean[] exists=new Boolean[getResults.length];
  for (int index=0; index < getResults.length; index++) {
    exists[index]=!getResults[index].isEmpty();
  }
  return exists;
}",0.9408740359897172
21111,"/** 
 * Implementation of  {@link org.apache.hadoop.hbase.client.HTable#batchCallback(List,Object[],Batch.Callback)}
 */
public <R>void batchCallback(List<? extends Row> actions,Object[] results,Batch.Callback<R> callback) throws IOException, InterruptedException {
  LOG.trace(""String_Node_Str"");
  Preconditions.checkArgument(results.length == actions.size(),""String_Node_Str"");
  List<ListenableFuture<Object>> resultFutures=issueRowRequests(actions,results);
  try {
    Futures.successfulAsList(resultFutures).get();
  }
 catch (  ExecutionException e) {
    LOG.error(""String_Node_Str"",e);
    throw new IOException(""String_Node_Str"",e);
  }
}","/** 
 * Implementation of  {@link org.apache.hadoop.hbase.client.HTable#batchCallback(List,Object[],Batch.Callback)}
 */
public <R>void batchCallback(List<? extends Row> actions,Object[] results,Batch.Callback<R> callback) throws IOException, InterruptedException {
  Preconditions.checkArgument(results.length == actions.size(),""String_Node_Str"");
  try {
    Futures.successfulAsList(issueAsyncRowRequests(actions,results,callback)).get();
  }
 catch (  ExecutionException e) {
    LOG.error(""String_Node_Str"",e);
    throw new IOException(""String_Node_Str"",e);
  }
}",0.7520525451559934
21112,"@Override public void onSuccess(T t){
  try {
    Object result=adapter.apply(t);
    resultsArray[index]=result;
    if (callback != null) {
      callback.update(NO_REGION,row.getRow(),unchecked(result));
    }
    resultFuture.set(result);
  }
 catch (  Throwable throwable) {
    resultFuture.setException(throwable);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public final void onSuccess(GeneratedMessage message){
  try {
    Result result=Result.EMPTY_RESULT;
    if (message instanceof com.google.bigtable.v1.Row) {
      result=Adapters.ROW_ADAPTER.adaptResponse((com.google.bigtable.v1.Row)message);
    }
    resultsArray[index]=result;
    resultFuture.set(result);
    if (callback != null) {
      callback.update(NO_REGION,row.getRow(),(T)result);
    }
  }
 catch (  Throwable throwable) {
    resultFuture.setException(throwable);
  }
}",0.5545243619489559
21113,"@Override public Object[] batch(List<? extends Row> actions) throws IOException, InterruptedException {
  LOG.trace(""String_Node_Str"");
  return batchExecutor.batch(actions);
}","/** 
 * {@inheritDoc}
 */
@Deprecated @Override public Object[] batch(List<? extends Row> actions) throws IOException, InterruptedException {
  LOG.trace(""String_Node_Str"");
  return batchExecutor.batch(actions);
}",0.9025641025641026
21114,"@Override public <R>Object[] batchCallback(List<? extends Row> actions,Batch.Callback<R> callback) throws IOException, InterruptedException {
  LOG.trace(""String_Node_Str"");
  return batchExecutor.batchCallback(actions,callback);
}","/** 
 * {@inheritDoc}
 */
@Deprecated @Override public <R>Object[] batchCallback(List<? extends Row> actions,Batch.Callback<R> callback) throws IOException, InterruptedException {
  LOG.trace(""String_Node_Str"");
  Object[] results=new Object[actions.size()];
  batchExecutor.batchCallback(actions,results,callback);
  return results;
}",0.7950530035335689
21115,"/** 
 * Indicates whether or not the Jetty ALPN jar is installed in the boot classloader.
 */
private static boolean isJettyAlpnConfigured(){
  try {
    Class.forName(""String_Node_Str"",true,null);
    return true;
  }
 catch (  ClassNotFoundException e) {
    return false;
  }
}","/** 
 * Indicates whether or not the Jetty ALPN jar is installed in the boot classloader.
 */
private static boolean isJettyAlpnConfigured(){
  final String alpnClassName=""String_Node_Str"";
  try {
    Class.forName(alpnClassName,true,null);
    return true;
  }
 catch (  ClassNotFoundException|NoClassDefFoundError e) {
    return false;
  }
catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e,alpnClassName);
    return false;
  }
}",0.5833333333333334
21116,"@Test public void testRetriesExhausted() throws Exception {
  IOException ioException=new IOException(""String_Node_Str"");
  Mockito.when(credentials.refreshAccessToken()).thenThrow(ioException);
  final int startTime=100000000;
  setTimeInMillieconds(startTime);
  underTest=new RefreshingOAuth2CredentialsInterceptor(executorService,credentials,retryOptions,logger);
  final int maxElaspedBackoffMillis=retryOptions.getMaxElaspedBackoffMillis();
  underTest.sleeper=new Sleeper(){
    @Override public void sleep(    long ms) throws InterruptedException {
      long now=getTimeInMilliseconds() + ms;
      setTimeInMillieconds(now);
      Assert.assertTrue(String.format(""String_Node_Str"",now,startTime + maxElaspedBackoffMillis * 2),now < startTime + maxElaspedBackoffMillis * 2);
    }
  }
;
  HeaderCacheElement header=underTest.refreshCredentialsWithRetry();
  Assert.assertNull(header.header);
  Assert.assertSame(ioException,header.exception);
  long timeInMillis=getTimeInMilliseconds();
  Assert.assertTrue(timeInMillis > startTime + maxElaspedBackoffMillis);
  verify(logger,atLeast(1)).warn(any(String.class),eq(ioException));
}","@Test public void testRetriesExhausted() throws Exception {
  IOException ioException=new IOException(""String_Node_Str"");
  Mockito.when(credentials.refreshAccessToken()).thenThrow(ioException);
  final int startTime=100000000;
  setTimeInMillieconds(startTime);
  final int maxElaspedBackoffMillis=retryOptions.getMaxElaspedBackoffMillis();
  final int max_end=startTime + maxElaspedBackoffMillis * 10;
  underTest=new RefreshingOAuth2CredentialsInterceptor(executorService,credentials,retryOptions,logger);
  underTest.sleeper=new Sleeper(){
    @Override public void sleep(    long ms) throws InterruptedException {
      long now=getTimeInMilliseconds() + ms;
      setTimeInMillieconds(now);
      Assert.assertTrue(String.format(""String_Node_Str"",now,max_end),now < max_end);
    }
  }
;
  HeaderCacheElement header=underTest.refreshCredentialsWithRetry();
  Assert.assertNull(header.header);
  Assert.assertSame(ioException,header.exception);
  long timeInMillis=getTimeInMilliseconds();
  Assert.assertTrue(timeInMillis > startTime + maxElaspedBackoffMillis);
  verify(logger,atLeast(1)).warn(any(String.class),eq(ioException));
}",0.8630377524143986
21117,"@Override public void sleep(long ms) throws InterruptedException {
  long now=getTimeInMilliseconds() + ms;
  setTimeInMillieconds(now);
  Assert.assertTrue(String.format(""String_Node_Str"",now,startTime + maxElaspedBackoffMillis * 2),now < startTime + maxElaspedBackoffMillis * 2);
}","@Override public void sleep(long ms) throws InterruptedException {
  long now=getTimeInMilliseconds() + ms;
  setTimeInMillieconds(now);
  Assert.assertTrue(String.format(""String_Node_Str"",now,max_end),now < max_end);
}",0.8406374501992032
21118,"@Override public void run(){
  readRowsCall.cancel();
}","@Override public void run(){
  returnToPool(channel);
  readRowsCall.cancel();
}",0.8148148148148148
21119,"private ClientCall.Listener<ReadRowsResponse> createClientCallListener(final StreamingBigtableResultScanner resultScanner){
  return new ClientCall.Listener<ReadRowsResponse>(){
    @Override public void onMessage(    ReadRowsResponse readRowResponse){
      resultScanner.addResult(readRowResponse);
    }
    @Override public void onClose(    Status status,    Metadata trailers){
      if (status.isOk()) {
        resultScanner.complete();
      }
 else {
        resultScanner.setError(status.asRuntimeException());
      }
    }
  }
;
}","private ClientCall.Listener<ReadRowsResponse> createClientCallListener(final Channel channel,final StreamingBigtableResultScanner resultScanner){
  return new ClientCall.Listener<ReadRowsResponse>(){
    @Override public void onMessage(    ReadRowsResponse readRowResponse){
      resultScanner.addResult(readRowResponse);
    }
    @Override public void onClose(    Status status,    Metadata trailers){
      returnToPool(channel);
      if (status.isOk()) {
        resultScanner.complete();
      }
 else {
        resultScanner.setError(status.asRuntimeException());
      }
    }
  }
;
}",0.9550660792951542
21120,"private ResultScanner<Row> streamRows(ReadRowsRequest request){
  PooledChannel reservedChannel=channelPool.reserveChannel();
  final ClientCall<ReadRowsRequest,ReadRowsResponse> readRowsCall=reservedChannel.newCall(BigtableServiceGrpc.METHOD_READ_ROWS,CallOptions.DEFAULT);
  CancellationToken cancellationToken=new CancellationToken();
  cancellationToken.addListener(new Runnable(){
    @Override public void run(){
      readRowsCall.cancel();
    }
  }
,executorService);
  int timeout=retryOptions.getReadPartialRowTimeoutMillis();
  int streamingBufferSize=retryOptions.getStreamingBufferSize();
  int batchRequestSize=retryOptions.getStreamingBatchSize();
  ResponseQueueReader responseQueueReader=new ResponseQueueReader(timeout,streamingBufferSize,batchRequestSize,batchRequestSize,readRowsCall);
  StreamingBigtableResultScanner resultScanner=new StreamingBigtableResultScanner(reservedChannel,responseQueueReader,cancellationToken);
  clientCallService.asyncServerStreamingCall(readRowsCall,request,createClientCallListener(resultScanner));
  if (batchRequestSize > 1) {
    readRowsCall.request(batchRequestSize - 1);
  }
  return resultScanner;
}","private ResultScanner<Row> streamRows(ReadRowsRequest request){
  boolean isGet=request.getTargetCase() == ReadRowsRequest.TargetCase.ROW_KEY;
  Channel channel=isGet ? channelPool : channelPool.reserveChannel();
  ClientCall<ReadRowsRequest,ReadRowsResponse> readRowsCall=channel.newCall(BigtableServiceGrpc.METHOD_READ_ROWS,CallOptions.DEFAULT);
  CancellationToken cancellationToken=createCancellationToken(channel,readRowsCall);
  int timeout=retryOptions.getReadPartialRowTimeoutMillis();
  int streamingBufferSize=retryOptions.getStreamingBufferSize();
  int batchRequestSize=retryOptions.getStreamingBatchSize();
  ResponseQueueReader responseQueueReader=new ResponseQueueReader(timeout,streamingBufferSize,batchRequestSize,batchRequestSize,readRowsCall);
  StreamingBigtableResultScanner resultScanner=new StreamingBigtableResultScanner(responseQueueReader,cancellationToken);
  clientCallService.asyncServerStreamingCall(readRowsCall,request,createClientCallListener(channel,resultScanner));
  if (batchRequestSize > 1) {
    readRowsCall.request(batchRequestSize - 1);
  }
  return resultScanner;
}",0.5811287477954145
21121,"@Override public void onClose(Status status,Metadata trailers){
  if (status.isOk()) {
    resultScanner.complete();
  }
 else {
    resultScanner.setError(status.asRuntimeException());
  }
}","@Override public void onClose(Status status,Metadata trailers){
  returnToPool(channel);
  if (status.isOk()) {
    resultScanner.complete();
  }
 else {
    resultScanner.setError(status.asRuntimeException());
  }
}",0.9385749385749386
21122,"public void setError(Throwable error){
  reservedChannel.returnToPool();
  add(ResultQueueEntry.<ReadRowsResponse>newThrowable(error));
}","public void setError(Throwable error){
  add(ResultQueueEntry.<ReadRowsResponse>newThrowable(error));
}",0.8583333333333333
21123,"public StreamingBigtableResultScanner(PooledChannel reservedChannel,ResponseQueueReader responseQueueReader,CancellationToken cancellationToken){
  Preconditions.checkArgument(cancellationToken != null,""String_Node_Str"");
  this.reservedChannel=reservedChannel;
  this.cancellationToken=cancellationToken;
  this.responseQueueReader=responseQueueReader;
}","public StreamingBigtableResultScanner(ResponseQueueReader responseQueueReader,CancellationToken cancellationToken){
  Preconditions.checkArgument(cancellationToken != null,""String_Node_Str"");
  this.cancellationToken=cancellationToken;
  this.responseQueueReader=responseQueueReader;
}",0.646875
21124,"public void complete(){
  reservedChannel.returnToPool();
  add(ResultQueueEntry.<ReadRowsResponse>newCompletionMarker());
}","public void complete(){
  add(ResultQueueEntry.<ReadRowsResponse>newCompletionMarker());
}",0.8411214953271028
21125,"@Override public void close() throws IOException {
  cancellationToken.cancel();
  reservedChannel.returnToPool();
}","@Override public void close() throws IOException {
  cancellationToken.cancel();
}",0.8282828282828283
21126,"@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  underTest=new BigtableDataGrpcClient(channel,executorService,retryExecutorService,RetryOptionsUtil.createTestRetryOptions(nanoClock),clientCallService);
  when(channel.newCall(any(MethodDescriptor.class),any(CallOptions.class))).thenReturn(clientCall);
}","@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  underTest=new BigtableDataGrpcClient(channelPool,executorService,retryExecutorService,RetryOptionsUtil.createTestRetryOptions(nanoClock),clientCallService);
  when(channelPool.newCall(any(MethodDescriptor.class),any(CallOptions.class))).thenReturn(clientCall);
  when(channelPool.reserveChannel()).thenReturn(pooledChannel);
  when(pooledChannel.newCall(any(MethodDescriptor.class),any(CallOptions.class))).thenReturn(clientCall);
}",0.7839805825242718
21127,"@Test public void testComplete() throws IOException, InterruptedException {
  scanner.complete();
  verify(reader,times(1)).add(eq(ResultQueueEntry.<ReadRowsResponse>newCompletionMarker()));
  assertChannelReturned(1);
  scanner.close();
}","@Test public void testComplete() throws IOException, InterruptedException {
  scanner.complete();
  verify(reader,times(1)).add(eq(ResultQueueEntry.<ReadRowsResponse>newCompletionMarker()));
  scanner.close();
}",0.8755555555555555
21128,"@Test public void cancellationIsSignalled() throws IOException, InterruptedException {
  scanner.close();
  assertChannelReturned(1);
  verify(cancellationToken,times(1)).cancel();
}","@Test public void cancellationIsSignalled() throws IOException, InterruptedException {
  scanner.close();
  verify(cancellationToken,times(1)).cancel();
}",0.9166666666666666
21129,"@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  scanner=new StreamingBigtableResultScanner(channel,reader,cancellationToken);
}","@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  scanner=new StreamingBigtableResultScanner(reader,cancellationToken);
}",0.9722222222222222
21130,"@Test public void testSetException() throws IOException, InterruptedException {
  IOException e=new IOException(""String_Node_Str"");
  scanner.setError(e);
  verify(reader,times(1)).add(eq(ResultQueueEntry.<ReadRowsResponse>newThrowable(e)));
  assertChannelReturned(1);
  scanner.close();
}","@Test public void testSetException() throws IOException, InterruptedException {
  IOException e=new IOException(""String_Node_Str"");
  scanner.setError(e);
  verify(reader,times(1)).add(eq(ResultQueueEntry.<ReadRowsResponse>newThrowable(e)));
  scanner.close();
}",0.9492753623188406
21131,"@Test public void testAddResult() throws IOException, InterruptedException {
  ReadRowsResponse response=ReadRowsResponse.getDefaultInstance();
  scanner.addResult(response);
  verify(reader,times(1)).add(eq(ResultQueueEntry.newResult(response)));
  assertChannelReturned(0);
  scanner.close();
}","@Test public void testAddResult() throws IOException, InterruptedException {
  ReadRowsResponse response=ReadRowsResponse.getDefaultInstance();
  scanner.addResult(response);
  verify(reader,times(1)).add(eq(ResultQueueEntry.newResult(response)));
  scanner.close();
}",0.950354609929078
21132,"/** 
 * <p> Calls   {@link OAuth2Credentials#refreshAccessToken()}. In case of an IOException, retry the call as per the   {@link Backoff} policy defined by {@link RetryOptions#createBackoff()}. </p> <p> This method retries until one of the following conditions occurs: <ol> <li>An OAuth request was completed. If the value is null, return an exception. <li>A non-IOException Exception is thrown - return an error status <li>All retries have been exhausted, i.e. when the Backoff.nextBackOffMillis() returns BackOff.STOP <li>An interrupt occurs. </ol>
 * @param backoff defines the current state of the retries. Initially, the value is null. In thecase of an  {@link IOException}, create a new   {@link BackOff}; see  {@link RetryOptions#createBackoff()} for more details on the initial construction. Ifa retry already occurred, the Backoff have the logic to get the next sleep period and retry exhaustion logic.
 * @return HeaderCacheElement containing either a valid {@link AccessToken} or an exception.
 */
protected HeaderCacheElement refreshCredentialsWithRetry(){
  BackOff backoff=null;
  while (true) {
    try {
      logger.info(""String_Node_Str"");
      AccessToken newToken=credentials.refreshAccessToken();
      if (newToken == null) {
        logger.info(""String_Node_Str"");
        return new HeaderCacheElement(new IOException(""String_Node_Str"" + credentials));
      }
 else {
        return new HeaderCacheElement(newToken);
      }
    }
 catch (    IOException exception) {
      logger.warn(""String_Node_Str"",exception);
      if (backoff == null) {
        backoff=retryOptions.createBackoff();
      }
      try {
        RetryState retryState=getRetryState(backoff);
        if (retryState != RetryState.PerformRetry) {
          return new HeaderCacheElement(exception);
        }
      }
 catch (      IOException e) {
        logger.warn(""String_Node_Str"",e);
        return new HeaderCacheElement(exception);
      }
    }
catch (    Exception e) {
      logger.warn(""String_Node_Str"",e);
      return new HeaderCacheElement(new IOException(""String_Node_Str"",e));
    }
  }
}","/** 
 * <p> Calls   {@link OAuth2Credentials#refreshAccessToken()}. In case of an IOException, retry the call as per the   {@link BackOff} policy defined by {@link RetryOptions#createBackoff()}. </p> <p> This method retries until one of the following conditions occurs: <ol> <li>An OAuth request was completed. If the value is null, return an exception. <li>A non-IOException Exception is thrown - return an error status <li>All retries have been exhausted, i.e. when the Backoff.nextBackOffMillis() returns BackOff.STOP <li>An interrupt occurs. </ol>
 * @return HeaderCacheElement containing either a valid {@link AccessToken} or an exception.
 */
protected HeaderCacheElement refreshCredentialsWithRetry(){
  BackOff backoff=null;
  while (true) {
    try {
      logger.info(""String_Node_Str"");
      AccessToken newToken=credentials.refreshAccessToken();
      if (newToken == null) {
        logger.info(""String_Node_Str"");
        return new HeaderCacheElement(new IOException(""String_Node_Str"" + credentials));
      }
 else {
        return new HeaderCacheElement(newToken);
      }
    }
 catch (    IOException exception) {
      logger.warn(""String_Node_Str"",exception);
      if (backoff == null) {
        backoff=retryOptions.createBackoff();
      }
      try {
        RetryState retryState=getRetryState(backoff);
        if (retryState != RetryState.PerformRetry) {
          return new HeaderCacheElement(exception);
        }
      }
 catch (      IOException e) {
        logger.warn(""String_Node_Str"",e);
        return new HeaderCacheElement(exception);
      }
    }
catch (    Exception e) {
      logger.warn(""String_Node_Str"",e);
      return new HeaderCacheElement(new IOException(""String_Node_Str"",e));
    }
  }
}",0.4559396932674811
21133,"/** 
 * Sleep and/or determine if the backoff has timed out.
 * @param backoff
 * @return RetryState indicating the current state of the retry logic.
 * @throws IOExcetion in some cases from {@link BackOff#nextBackOffMillis()}
 */
protected RetryState getRetryState(BackOff backoff) throws IOException {
  long nextBackOffMillis=backoff.nextBackOffMillis();
  if (nextBackOffMillis == BackOff.STOP) {
    logger.warn(""String_Node_Str"" + this.retryOptions.getMaxElaspedBackoffMillis() + ""String_Node_Str"");
    return RetryState.RetriesExhausted;
  }
  try {
    sleeper.sleep(nextBackOffMillis);
    return RetryState.PerformRetry;
  }
 catch (  InterruptedException e) {
    logger.warn(""String_Node_Str"");
    Thread.interrupted();
    return RetryState.Interrupted;
  }
}","/** 
 * Sleep and/or determine if the backoff has timed out.
 * @param backoff
 * @return RetryState indicating the current state of the retry logic.
 * @throws IOException in some cases from {@link BackOff#nextBackOffMillis()}
 */
protected RetryState getRetryState(BackOff backoff) throws IOException {
  long nextBackOffMillis=backoff.nextBackOffMillis();
  if (nextBackOffMillis == BackOff.STOP) {
    logger.warn(""String_Node_Str"" + this.retryOptions.getMaxElaspedBackoffMillis() + ""String_Node_Str"");
    return RetryState.RetriesExhausted;
  }
  try {
    sleeper.sleep(nextBackOffMillis);
    return RetryState.PerformRetry;
  }
 catch (  InterruptedException e) {
    logger.warn(""String_Node_Str"");
    Thread.interrupted();
    return RetryState.Interrupted;
  }
}",0.999354422207876
21134,"@VisibleForTesting BigtableDataGrpcClient(Channel channel,ExecutorService executorService,ScheduledExecutorService retryExecutorService,RetryOptions retryOptions,ClientCallService clientCallService){
  this.channel=channel;
  this.executorService=executorService;
  this.retryOptions=retryOptions;
  this.clientCallService=clientCallService;
  this.retryExecutorService=retryExecutorService;
  this.sampleRowKeysAsync=BigtableAsyncUtilities.createSampleRowKeyAsyncReader(this.channel,clientCallService);
  this.readRowsAsync=BigtableAsyncUtilities.createRowKeyAysncReader(this.channel,clientCallService);
}","@VisibleForTesting BigtableDataGrpcClient(ChannelPool channelPool,ExecutorService executorService,ScheduledExecutorService retryExecutorService,RetryOptions retryOptions,ClientCallService clientCallService){
  this.channelPool=channelPool;
  this.executorService=executorService;
  this.retryOptions=retryOptions;
  this.clientCallService=clientCallService;
  this.retryExecutorService=retryExecutorService;
  this.sampleRowKeysAsync=BigtableAsyncUtilities.createSampleRowKeyAsyncReader(this.channelPool,clientCallService);
  this.readRowsAsync=BigtableAsyncUtilities.createRowKeyAysncReader(this.channelPool,clientCallService);
}",0.9692556634304208
21135,"@Override public ListenableFuture<Row> readModifyWriteRowAsync(ReadModifyWriteRowRequest request){
  return clientCallService.listenableAsyncCall(channel.newCall(BigtableServiceGrpc.METHOD_READ_MODIFY_WRITE_ROW,CallOptions.DEFAULT),request);
}","@Override public ListenableFuture<Row> readModifyWriteRowAsync(ReadModifyWriteRowRequest request){
  return clientCallService.listenableAsyncCall(channelPool.newCall(BigtableServiceGrpc.METHOD_READ_MODIFY_WRITE_ROW,CallOptions.DEFAULT),request);
}",0.9918367346938776
21136,"private ResultScanner<Row> streamRows(ReadRowsRequest request){
  final ClientCall<ReadRowsRequest,ReadRowsResponse> readRowsCall=channel.newCall(BigtableServiceGrpc.METHOD_READ_ROWS,CallOptions.DEFAULT);
  CancellationToken cancellationToken=new CancellationToken();
  cancellationToken.addListener(new Runnable(){
    @Override public void run(){
      readRowsCall.cancel();
    }
  }
,executorService);
  StreamingBigtableResultScanner resultScanner=new StreamingBigtableResultScanner(retryOptions.getStreamingBufferSize(),retryOptions.getReadPartialRowTimeoutMillis(),cancellationToken);
  clientCallService.asyncServerStreamingCall(readRowsCall,request,new ReadRowsStreamObserver(resultScanner));
  return resultScanner;
}","private ResultScanner<Row> streamRows(ReadRowsRequest request){
  PooledChannel reservedChannel=channelPool.reserveChannel();
  final ClientCall<ReadRowsRequest,ReadRowsResponse> readRowsCall=reservedChannel.newCall(BigtableServiceGrpc.METHOD_READ_ROWS,CallOptions.DEFAULT);
  CancellationToken cancellationToken=new CancellationToken();
  cancellationToken.addListener(new Runnable(){
    @Override public void run(){
      readRowsCall.cancel();
    }
  }
,executorService);
  StreamingBigtableResultScanner resultScanner=new StreamingBigtableResultScanner(reservedChannel,retryOptions.getStreamingBufferSize(),retryOptions.getReadPartialRowTimeoutMillis(),cancellationToken);
  clientCallService.asyncServerStreamingCall(readRowsCall,request,new ReadRowsStreamObserver(resultScanner));
  return resultScanner;
}",0.9429312581063554
21137,"private <ReqT,RespT>ClientCall<ReqT,RespT> createRetryableCall(MethodDescriptor<ReqT,RespT> method,Predicate<ReqT> isRetryable,ReqT request){
  if (retryOptions.enableRetries() && isRetryable.apply(request)) {
    return new RetryingCall<ReqT,RespT>(channel,method,CallOptions.DEFAULT,retryExecutorService,retryOptions);
  }
 else {
    return channel.newCall(method,CallOptions.DEFAULT);
  }
}","private <ReqT,RespT>ClientCall<ReqT,RespT> createRetryableCall(MethodDescriptor<ReqT,RespT> method,Predicate<ReqT> isRetryable,ReqT request){
  if (retryOptions.enableRetries() && isRetryable.apply(request)) {
    return new RetryingCall<ReqT,RespT>(channelPool,method,CallOptions.DEFAULT,retryExecutorService,retryOptions);
  }
 else {
    return channelPool.newCall(method,CallOptions.DEFAULT);
  }
}",0.9899497487437184
21138,"@Override public ImmutableList<SampleRowKeysResponse> sampleRowKeys(SampleRowKeysRequest request){
  return ImmutableList.copyOf(clientCallService.blockingServerStreamingCall(channel.newCall(BigtableServiceGrpc.METHOD_SAMPLE_ROW_KEYS,CallOptions.DEFAULT),request));
}","@Override public ImmutableList<SampleRowKeysResponse> sampleRowKeys(SampleRowKeysRequest request){
  return ImmutableList.copyOf(clientCallService.blockingServerStreamingCall(channelPool.newCall(BigtableServiceGrpc.METHOD_SAMPLE_ROW_KEYS,CallOptions.DEFAULT),request));
}",0.9925650557620818
21139,"@Override public Row readModifyWriteRow(ReadModifyWriteRowRequest request){
  return clientCallService.blockingUnaryCall(channel.newCall(BigtableServiceGrpc.METHOD_READ_MODIFY_WRITE_ROW,CallOptions.DEFAULT),request);
}","@Override public Row readModifyWriteRow(ReadModifyWriteRowRequest request){
  return clientCallService.blockingUnaryCall(channelPool.newCall(BigtableServiceGrpc.METHOD_READ_MODIFY_WRITE_ROW,CallOptions.DEFAULT),request);
}",0.990909090909091
21140,"private BigtableDataClient initializeDataClient() throws IOException {
  Channel channel=createChannel(options.getDataHost(),options.getChannelCount());
  RetryOptions retryOptions=options.getRetryOptions();
  return new BigtableDataGrpcClient(channel,batchPool,scheduledRetries,retryOptions);
}","private BigtableDataClient initializeDataClient() throws IOException {
  ChannelPool channel=createChannel(options.getDataHost(),options.getChannelCount());
  RetryOptions retryOptions=options.getRetryOptions();
  return new BigtableDataGrpcClient(channel,batchPool,scheduledRetries,retryOptions);
}",0.9932659932659932
21141,"@Override protected void checkedStart(ClientCall.Listener<ResponseT> responseListener,Metadata headers) throws Exception {
  for (  HeaderInterceptor interceptor : headerInterceptors) {
    interceptor.updateHeaders(headers);
  }
  delegate().start(responseListener,headers);
}","@Override protected void checkedStart(ClientCall.Listener<RespT> responseListener,Metadata headers) throws Exception {
  for (  HeaderInterceptor interceptor : headerInterceptors) {
    interceptor.updateHeaders(headers);
  }
  delegate().start(responseListener,headers);
}",0.9927272727272728
21142,"@Override public <RequestT,ResponseT>ClientCall<RequestT,ResponseT> newCall(MethodDescriptor<RequestT,ResponseT> methodDescriptor,CallOptions callOptions){
  int currentRequestNum=requestCount.getAndIncrement();
  int index=Math.abs(currentRequestNum % channels.length);
  ClientCall<RequestT,ResponseT> delegate=channels[index].newCall(methodDescriptor,callOptions);
  return new CheckedForwardingClientCall<RequestT,ResponseT>(delegate){
    @Override protected void checkedStart(    ClientCall.Listener<ResponseT> responseListener,    Metadata headers) throws Exception {
      for (      HeaderInterceptor interceptor : headerInterceptors) {
        interceptor.updateHeaders(headers);
      }
      delegate().start(responseListener,headers);
    }
  }
;
}","@Override public <ReqT,RespT>ClientCall<ReqT,RespT> newCall(MethodDescriptor<ReqT,RespT> methodDescriptor,CallOptions callOptions){
  return createWrappedCall(methodDescriptor,callOptions,getNextChannel());
}",0.2579979360165119
21143,"public void setError(Throwable error){
  add(ResultQueueEntry.<ReadRowsResponse>newThrowable(error));
}","public void setError(Throwable error){
  reservedChannel.returnToPool();
  add(ResultQueueEntry.<ReadRowsResponse>newThrowable(error));
}",0.8583333333333333
21144,"public StreamingBigtableResultScanner(int capacity,int readPartialRowTimeoutMillis,CancellationToken cancellationToken){
  Preconditions.checkArgument(cancellationToken != null,""String_Node_Str"");
  Preconditions.checkArgument(capacity > 0,""String_Node_Str"");
  this.cancellationToken=cancellationToken;
  this.resultQueue=new LinkedBlockingQueue<>(capacity);
  this.responseQueueReader=new ResponseQueueReader(resultQueue,readPartialRowTimeoutMillis);
}","public StreamingBigtableResultScanner(PooledChannel reservedChannel,int capacity,int readPartialRowTimeoutMillis,CancellationToken cancellationToken){
  Preconditions.checkArgument(cancellationToken != null,""String_Node_Str"");
  Preconditions.checkArgument(capacity > 0,""String_Node_Str"");
  this.reservedChannel=reservedChannel;
  this.cancellationToken=cancellationToken;
  this.resultQueue=new LinkedBlockingQueue<>(capacity);
  this.responseQueueReader=new ResponseQueueReader(resultQueue,readPartialRowTimeoutMillis);
}",0.9284253578732108
21145,"public void complete(){
  add(ResultQueueEntry.<ReadRowsResponse>newCompletionMarker());
}","public void complete(){
  reservedChannel.returnToPool();
  add(ResultQueueEntry.<ReadRowsResponse>newCompletionMarker());
}",0.8411214953271028
21146,"@Override public void close() throws IOException {
  cancellationToken.cancel();
}","@Override public void close() throws IOException {
  cancellationToken.cancel();
  reservedChannel.returnToPool();
}",0.8282828282828283
21147,"private static void validate(CloudBigtableConfiguration configuration,String tableId){
  checkNotNullOrEmpty(configuration.getProjectId(),""String_Node_Str"");
  checkNotNullOrEmpty(configuration.getZoneId(),""String_Node_Str"");
  checkNotNullOrEmpty(configuration.getClusterId(),""String_Node_Str"");
  if (tableId != null) {
    checkNotNullOrEmpty(tableId,""String_Node_Str"");
    if (BigtableSession.isAlpnConfigured()) {
      try (BigtableConnection conn=new BigtableConnection(configuration.toHBaseConfig());Admin admin=conn.getAdmin()){
        Preconditions.checkState(admin.tableExists(TableName.valueOf(tableId)));
      }
 catch (      IOException|IllegalArgumentException|ExceptionInInitializerError e) {
        LOG.error(String.format(""String_Node_Str"",e.getClass().getName(),e.getMessage()),e);
      }
    }
 else {
      LOG.info(""String_Node_Str"");
    }
  }
}","private static void validate(CloudBigtableConfiguration configuration,String tableId){
  checkNotNullOrEmpty(configuration.getProjectId(),""String_Node_Str"");
  checkNotNullOrEmpty(configuration.getZoneId(),""String_Node_Str"");
  checkNotNullOrEmpty(configuration.getClusterId(),""String_Node_Str"");
  if (tableId != null) {
    checkNotNullOrEmpty(tableId,""String_Node_Str"");
    if (BigtableSession.isAlpnProviderEnabled()) {
      try (BigtableConnection conn=new BigtableConnection(configuration.toHBaseConfig());Admin admin=conn.getAdmin()){
        Preconditions.checkState(admin.tableExists(TableName.valueOf(tableId)));
      }
 catch (      IOException|IllegalArgumentException|ExceptionInInitializerError e) {
        LOG.error(String.format(""String_Node_Str"",e.getClass().getName(),e.getMessage()),e);
      }
    }
 else {
      LOG.info(""String_Node_Str"");
    }
  }
}",0.9880068532267277
21148,"@AfterClass public static void shutdown(){
  connection.close();
}","@AfterClass public static void shutdown() throws IOException {
  connection.close();
}",0.868421052631579
21149,"@Test public void testRefreshDoesntHang() throws Exception, TimeoutException {
  long start=HeaderCacheElement.TOKEN_STALENESS_MS * 10;
  setTime(start);
  final long expiration=start + HeaderCacheElement.TOKEN_EXPIRES_MS + 1;
  final Object lock=new String(""String_Node_Str"");
  Mockito.when(credentials.refreshAccessToken()).thenAnswer(new Answer<AccessToken>(){
    @Override public AccessToken answer(    InvocationOnMock invocation) throws Throwable {
synchronized (lock) {
        lock.wait();
      }
      return new AccessToken(""String_Node_Str"",new Date(expiration));
    }
  }
);
  Callable<Void> syncRefreshCallable=new Callable<Void>(){
    @Override public Void call() throws Exception {
      underTest.syncRefresh();
      return null;
    }
  }
;
  underTest=new RefreshingOAuth2CredentialsInterceptor(executorService,credentials);
  Assert.assertEquals(CacheState.Expired,RefreshingOAuth2CredentialsInterceptor.getCacheState(underTest.headerCache.get()));
  Future<Void> future=executorService.submit(syncRefreshCallable);
  Thread.yield();
synchronized (lock) {
    lock.notifyAll();
  }
  future.get(1,TimeUnit.SECONDS);
  Assert.assertEquals(CacheState.Stale,RefreshingOAuth2CredentialsInterceptor.getCacheState(underTest.headerCache.get()));
  Assert.assertFalse(underTest.isRefreshing.get());
  underTest.asyncRefresh();
  underTest.asyncRefresh();
  underTest.asyncRefresh();
  future=executorService.submit(syncRefreshCallable);
  Thread.yield();
  Assert.assertTrue(underTest.isRefreshing.get());
synchronized (lock) {
    lock.notifyAll();
  }
  future.get(1,TimeUnit.SECONDS);
  Assert.assertFalse(underTest.isRefreshing.get());
}","@Test public void testRefreshDoesntHang() throws Exception, TimeoutException {
  long start=HeaderCacheElement.TOKEN_STALENESS_MS * 10;
  setTime(start);
  final long expiration=start + HeaderCacheElement.TOKEN_EXPIRES_MS + 1;
  final Object lock=new String(""String_Node_Str"");
  Mockito.when(credentials.refreshAccessToken()).thenAnswer(new Answer<AccessToken>(){
    @Override public AccessToken answer(    InvocationOnMock invocation) throws Throwable {
synchronized (lock) {
        lock.wait();
      }
      return new AccessToken(""String_Node_Str"",new Date(expiration));
    }
  }
);
  Callable<Void> syncRefreshCallable=new Callable<Void>(){
    @Override public Void call() throws Exception {
      underTest.syncRefresh();
      return null;
    }
  }
;
  underTest=new RefreshingOAuth2CredentialsInterceptor(executorService,credentials);
  Assert.assertEquals(CacheState.Expired,RefreshingOAuth2CredentialsInterceptor.getCacheState(underTest.headerCache.get()));
  syncCall(lock,syncRefreshCallable);
  Assert.assertEquals(CacheState.Stale,RefreshingOAuth2CredentialsInterceptor.getCacheState(underTest.headerCache.get()));
  Assert.assertFalse(underTest.isRefreshing.get());
  underTest.asyncRefresh();
  underTest.asyncRefresh();
  underTest.asyncRefresh();
  syncCall(lock,syncRefreshCallable);
  Assert.assertFalse(underTest.isRefreshing.get());
}",0.8278145695364238
21150,"@Override public void onValue(T value){
  buffer.add(value);
}","@Override public void onValue(T value){
  buffer.add(value);
  call.request(1);
}",0.8671328671328671
21151,"public ReadRowsStreamObserver(StreamingBigtableResultScanner scanner){
  this.scanner=scanner;
}","public ReadRowsStreamObserver(StreamingBigtableResultScanner scanner,Call<ReadRowsRequest,ReadRowsResponse> call){
  this.scanner=scanner;
  this.call=call;
}",0.7559055118110236
21152,"/** 
 * Begin reading rows, optionally with a resumable scanner.
 */
private ResultScanner<Row> readRows(ReadRowsRequest request,boolean resumable){
  if (resumable) {
    return new ResumingStreamingResultScanner(retryOptions,request,new BigtableResultScannerFactory(){
      @Override public ResultScanner<Row> createScanner(      ReadRowsRequest request){
        return readRows(request,false);
      }
    }
);
  }
  final Call<ReadRowsRequest,ReadRowsResponse> readRowsCall=channel.newCall(BigtableServiceGrpc.CONFIG.readRows);
  CancellationToken cancellationToken=new CancellationToken();
  cancellationToken.addListener(new Runnable(){
    @Override public void run(){
      readRowsCall.cancel();
    }
  }
,executorService);
  StreamingBigtableResultScanner resultScanner=new StreamingBigtableResultScanner(retryOptions.getStreamingBufferSize(),retryOptions.getReadPartialRowTimeoutMillis(),cancellationToken);
  Calls.asyncServerStreamingCall(readRowsCall,request,new ReadRowsStreamObserver(resultScanner));
  return resultScanner;
}","/** 
 * Begin reading rows, optionally with a resumable scanner.
 */
private ResultScanner<Row> readRows(ReadRowsRequest request,boolean resumable){
  if (resumable) {
    return new ResumingStreamingResultScanner(retryOptions,request,new BigtableResultScannerFactory(){
      @Override public ResultScanner<Row> createScanner(      ReadRowsRequest request){
        return readRows(request,false);
      }
    }
);
  }
  final Call<ReadRowsRequest,ReadRowsResponse> readRowsCall=channel.newCall(BigtableServiceGrpc.CONFIG.readRows);
  CancellationToken cancellationToken=new CancellationToken();
  cancellationToken.addListener(new Runnable(){
    @Override public void run(){
      readRowsCall.cancel();
    }
  }
,executorService);
  StreamingBigtableResultScanner resultScanner=new StreamingBigtableResultScanner(retryOptions.getStreamingBufferSize(),retryOptions.getReadPartialRowTimeoutMillis(),cancellationToken);
  Calls.asyncServerStreamingCall(readRowsCall,request,new ReadRowsStreamObserver(resultScanner,readRowsCall));
  return resultScanner;
}",0.9938183547313362
21153,"@Override public ListenableFuture<ImmutableList<SampleRowKeysResponse>> sampleRowKeysAsync(SampleRowKeysRequest request){
  CollectingStreamObserver<SampleRowKeysResponse> responseBuffer=new CollectingStreamObserver<>();
  Calls.asyncServerStreamingCall(channel.newCall(BigtableServiceGrpc.CONFIG.sampleRowKeys),request,responseBuffer);
  return Futures.transform(responseBuffer.getResponseCompleteFuture(),new Function<List<SampleRowKeysResponse>,ImmutableList<SampleRowKeysResponse>>(){
    @Override public ImmutableList<SampleRowKeysResponse> apply(    List<SampleRowKeysResponse> sampleRowKeysResponses){
      return ImmutableList.copyOf(sampleRowKeysResponses);
    }
  }
);
}","@Override public ListenableFuture<ImmutableList<SampleRowKeysResponse>> sampleRowKeysAsync(SampleRowKeysRequest request){
  Call<SampleRowKeysRequest,SampleRowKeysResponse> call=channel.newCall(BigtableServiceGrpc.CONFIG.sampleRowKeys);
  CollectingStreamObserver<SampleRowKeysResponse> responseBuffer=new CollectingStreamObserver<>(call);
  Calls.asyncServerStreamingCall(call,request,responseBuffer);
  return Futures.transform(responseBuffer.getResponseCompleteFuture(),new Function<List<SampleRowKeysResponse>,ImmutableList<SampleRowKeysResponse>>(){
    @Override public ImmutableList<SampleRowKeysResponse> apply(    List<SampleRowKeysResponse> sampleRowKeysResponses){
      return ImmutableList.copyOf(sampleRowKeysResponses);
    }
  }
);
}",0.7751396648044693
21154,"@Override public ListenableFuture<List<Row>> readRowsAsync(final ReadRowsRequest request){
  final Call<ReadRowsRequest,ReadRowsResponse> readRowsCall=channel.newCall(BigtableServiceGrpc.CONFIG.readRows);
  CollectingStreamObserver<ReadRowsResponse> responseCollector=new CollectingStreamObserver<>();
  Calls.asyncServerStreamingCall(readRowsCall,request,responseCollector);
  return Futures.transform(responseCollector.getResponseCompleteFuture(),new Function<List<ReadRowsResponse>,List<Row>>(){
    @Override public List<Row> apply(    List<ReadRowsResponse> responses){
      List<Row> result=new ArrayList<>();
      Iterator<ReadRowsResponse> responseIterator=responses.iterator();
      while (responseIterator.hasNext()) {
        RowMerger currentRowMerger=new RowMerger();
        while (responseIterator.hasNext() && !currentRowMerger.isRowCommitted()) {
          currentRowMerger.addPartialRow(responseIterator.next());
        }
        result.add(currentRowMerger.buildRow());
      }
      return result;
    }
  }
);
}","@Override public ListenableFuture<List<Row>> readRowsAsync(final ReadRowsRequest request){
  final Call<ReadRowsRequest,ReadRowsResponse> readRowsCall=channel.newCall(BigtableServiceGrpc.CONFIG.readRows);
  CollectingStreamObserver<ReadRowsResponse> responseCollector=new CollectingStreamObserver<>(readRowsCall);
  Calls.asyncServerStreamingCall(readRowsCall,request,responseCollector);
  return Futures.transform(responseCollector.getResponseCompleteFuture(),new Function<List<ReadRowsResponse>,List<Row>>(){
    @Override public List<Row> apply(    List<ReadRowsResponse> responses){
      List<Row> result=new ArrayList<>();
      Iterator<ReadRowsResponse> responseIterator=responses.iterator();
      while (responseIterator.hasNext()) {
        RowMerger currentRowMerger=new RowMerger();
        while (responseIterator.hasNext() && !currentRowMerger.isRowCommitted()) {
          currentRowMerger.addPartialRow(responseIterator.next());
        }
        result.add(currentRowMerger.buildRow());
      }
      return result;
    }
  }
);
}",0.9942418426103646
21155,"public CacheState getCacheState(){
  long now=System.currentTimeMillis();
  if (now < staleTimeMs) {
    return CacheState.Good;
  }
 else   if (now < expiresTimeMs) {
    return CacheState.Stale;
  }
 else {
    return CacheState.Expired;
  }
}","@VisibleForTesting static CacheState getCacheState(HeaderCacheElement headerCache){
  return (headerCache == null) ? CacheState.Expired : headerCache.getCacheState();
}",0.3583535108958838
21156,"public void asyncRefresh(){
  if (!isRefreshing.get()) {
    executor.execute(new Runnable(){
      @Override public void run(){
        doRefresh();
      }
    }
);
  }
}","public void asyncRefresh(){
  executor.execute(new Runnable(){
    @Override public void run(){
      doRefresh();
    }
  }
);
}",0.8571428571428571
21157,"/** 
 * Perform a credentials refresh.
 */
private void doRefresh(){
  boolean requiresRefresh=false;
synchronized (isRefreshing) {
    if (!isRefreshing.get()) {
      isRefreshing.set(true);
      requiresRefresh=true;
      HeaderCacheElement headerCache=this.headerCache.get();
      CacheState state=(headerCache == null) ? CacheState.Expired : headerCache.getCacheState();
      requiresRefresh=state != CacheState.Good;
    }
  }
  if (!requiresRefresh) {
    return;
  }
  HeaderCacheElement cacheElement=null;
  try {
    AccessToken newToken=credentials.refreshAccessToken();
    if (newToken == null) {
      cacheElement=new HeaderCacheElement(new IOException(""String_Node_Str"" + credentials));
    }
 else {
      cacheElement=new HeaderCacheElement(newToken);
    }
  }
 catch (  IOException e) {
    cacheElement=new HeaderCacheElement(e);
  }
catch (  Exception e) {
    cacheElement=new HeaderCacheElement(new IOException(""String_Node_Str"",e));
  }
 finally {
synchronized (isRefreshing) {
      this.headerCache.set(cacheElement);
      isRefreshing.set(false);
      isRefreshing.notifyAll();
    }
  }
}","/** 
 * Perform a credentials refresh.
 */
@VisibleForTesting boolean doRefresh(){
  boolean requiresRefresh=false;
synchronized (isRefreshing) {
    if (!isRefreshing.get() && getCacheState(this.headerCache.get()) != CacheState.Good) {
      isRefreshing.set(true);
      requiresRefresh=true;
    }
  }
  if (!requiresRefresh) {
    return false;
  }
  HeaderCacheElement cacheElement=null;
  try {
    AccessToken newToken=credentials.refreshAccessToken();
    if (newToken == null) {
      cacheElement=new HeaderCacheElement(new IOException(""String_Node_Str"" + credentials));
    }
 else {
      cacheElement=new HeaderCacheElement(newToken);
    }
  }
 catch (  IOException e) {
    cacheElement=new HeaderCacheElement(e);
  }
catch (  Exception e) {
    cacheElement=new HeaderCacheElement(new IOException(""String_Node_Str"",e));
  }
 finally {
synchronized (isRefreshing) {
      headerCache.set(cacheElement);
      isRefreshing.set(false);
      isRefreshing.notifyAll();
    }
  }
  return true;
}",0.3971830985915493
21158,"public void syncRefresh() throws IOException {
synchronized (isRefreshing) {
    if (!isRefreshing.get()) {
      doRefresh();
    }
 else {
      while (isRefreshing.get()) {
        try {
          isRefreshing.wait(250);
        }
 catch (        InterruptedException e) {
          throw new IOException(e);
        }
      }
    }
  }
}","public void syncRefresh() throws IOException {
synchronized (isRefreshing) {
    if (!isRefreshing.get()) {
      doRefresh();
    }
 else {
      while (isRefreshing.get() && getCacheState(this.headerCache.get()) != CacheState.Good) {
        try {
          isRefreshing.wait(250);
        }
 catch (        InterruptedException e) {
          throw new IOException(e);
        }
      }
    }
  }
}",0.9191374663072776
21159,"/** 
 * Get the http credential header we need from a new oauth2 AccessToken.
 */
private String getHeader() throws IOException {
  HeaderCacheElement headerCache=getCachedHeader();
  CacheState state=(headerCache == null) ? CacheState.Expired : headerCache.getCacheState();
switch (state) {
case Good:
    break;
case Stale:
  asyncRefresh();
break;
case Expired:
syncRefresh();
headerCache=getCachedHeader();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + state);
}
return headerCache.header;
}","/** 
 * Get the http credential header we need from a new oauth2 AccessToken.
 */
@VisibleForTesting String getHeader() throws IOException {
  HeaderCacheElement headerCache=getCachedHeader();
  CacheState state=getCacheState(headerCache);
switch (state) {
case Good:
    break;
case Stale:
  asyncRefresh();
break;
case Expired:
syncRefresh();
headerCache=getCachedHeader();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + state);
}
return headerCache.header;
}",0.5434565434565435
21160,"@Override protected void after(){
  try (Admin admin=connection.getAdmin()){
    admin.disableTable(TABLE_NAME);
    admin.deleteTable(TABLE_NAME);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  try {
    connection.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  if (useMiniCluster()) {
    try {
      testingUtility.shutdownMiniCluster();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}","@Override protected void after(){
  try (Admin admin=connection.getAdmin()){
    admin.disableTable(TABLE_NAME);
    admin.deleteTable(TABLE_NAME);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  try {
    connection.close();
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  if (useMiniCluster()) {
    try {
      testingUtility.shutdownMiniCluster();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
  Assert.assertTrue(connection.isClosed());
}",0.9585585585585584
21161,"public static BigtableOptions fromConfiguration(Configuration configuration) throws IOException {
  ChannelOptions channelOptions=createChannelOptions(configuration);
  BigtableOptions.Builder bigtableOptionsBuilder=new BigtableOptions.Builder();
  String projectId=configuration.get(PROJECT_ID_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(projectId),String.format(""String_Node_Str"",PROJECT_ID_KEY));
  bigtableOptionsBuilder.setProjectId(projectId);
  LOG.debug(""String_Node_Str"",projectId);
  String zone=configuration.get(ZONE_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(zone),String.format(""String_Node_Str"",ZONE_KEY));
  bigtableOptionsBuilder.setZone(zone);
  LOG.debug(""String_Node_Str"",zone);
  String cluster=configuration.get(CLUSTER_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(cluster),String.format(""String_Node_Str"",CLUSTER_KEY));
  bigtableOptionsBuilder.setCluster(cluster);
  LOG.debug(""String_Node_Str"",cluster);
  String overrideIp=configuration.get(IP_OVERRIDE_KEY);
  InetAddress overrideIpAddress=null;
  if (!Strings.isNullOrEmpty(overrideIp)) {
    LOG.debug(""String_Node_Str"",overrideIp);
    overrideIpAddress=InetAddress.getByName(overrideIp);
  }
  String dataHost=configuration.get(BIGTABLE_HOST_KEY,BIGTABLE_HOST_DEFAULT);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(dataHost),String.format(""String_Node_Str"",BIGTABLE_HOST_KEY));
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",dataHost);
    bigtableOptionsBuilder.setDataHost(InetAddress.getByName(dataHost));
  }
 else {
    LOG.debug(""String_Node_Str"",dataHost);
    bigtableOptionsBuilder.setDataHost(InetAddress.getByAddress(dataHost,overrideIpAddress.getAddress()));
  }
  String tableAdminHost=configuration.get(BIGTABLE_TABLE_ADMIN_HOST_KEY,BIGTABLE_TABLE_ADMIN_HOST_DEFAULT);
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",tableAdminHost);
    bigtableOptionsBuilder.setTableAdminHost(InetAddress.getByName(tableAdminHost));
  }
 else {
    LOG.debug(""String_Node_Str"",tableAdminHost);
    bigtableOptionsBuilder.setTableAdminHost(InetAddress.getByAddress(tableAdminHost,overrideIpAddress.getAddress()));
  }
  String clusterAdminHost=configuration.get(BIGTABLE_CLUSTER_ADMIN_HOST_KEY,BIGTABLE_CLUSTER_ADMIN_HOST_DEFAULT);
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",clusterAdminHost);
    bigtableOptionsBuilder.setClusterAdminHost(InetAddress.getByName(clusterAdminHost));
  }
 else {
    LOG.debug(""String_Node_Str"",clusterAdminHost);
    bigtableOptionsBuilder.setClusterAdminHost(InetAddress.getByAddress(clusterAdminHost,overrideIpAddress.getAddress()));
  }
  int port=configuration.getInt(BIGTABLE_PORT_KEY,DEFAULT_BIGTABLE_PORT);
  bigtableOptionsBuilder.setPort(port);
  ThreadFactory threadFactory=new ThreadFactoryBuilder().setDaemon(true).setNameFormat(GRPC_EVENTLOOP_GROUP_NAME + ""String_Node_Str"").build();
  EventLoopGroup elg=new NioEventLoopGroup(0,threadFactory);
  bigtableOptionsBuilder.setCustomEventLoopGroup(elg);
  bigtableOptionsBuilder.setChannelOptions(channelOptions);
  return bigtableOptionsBuilder.build();
}","public static BigtableOptions fromConfiguration(Configuration configuration) throws IOException {
  BigtableOptions.Builder bigtableOptionsBuilder=new BigtableOptions.Builder();
  String projectId=configuration.get(PROJECT_ID_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(projectId),String.format(""String_Node_Str"",PROJECT_ID_KEY));
  bigtableOptionsBuilder.setProjectId(projectId);
  LOG.debug(""String_Node_Str"",projectId);
  String zone=configuration.get(ZONE_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(zone),String.format(""String_Node_Str"",ZONE_KEY));
  bigtableOptionsBuilder.setZone(zone);
  LOG.debug(""String_Node_Str"",zone);
  String cluster=configuration.get(CLUSTER_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(cluster),String.format(""String_Node_Str"",CLUSTER_KEY));
  bigtableOptionsBuilder.setCluster(cluster);
  LOG.debug(""String_Node_Str"",cluster);
  String overrideIp=configuration.get(IP_OVERRIDE_KEY);
  InetAddress overrideIpAddress=null;
  if (!Strings.isNullOrEmpty(overrideIp)) {
    LOG.debug(""String_Node_Str"",overrideIp);
    overrideIpAddress=InetAddress.getByName(overrideIp);
  }
  String dataHost=configuration.get(BIGTABLE_HOST_KEY,BIGTABLE_HOST_DEFAULT);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(dataHost),String.format(""String_Node_Str"",BIGTABLE_HOST_KEY));
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",dataHost);
    bigtableOptionsBuilder.setDataHost(InetAddress.getByName(dataHost));
  }
 else {
    LOG.debug(""String_Node_Str"",dataHost);
    bigtableOptionsBuilder.setDataHost(InetAddress.getByAddress(dataHost,overrideIpAddress.getAddress()));
  }
  String tableAdminHost=configuration.get(BIGTABLE_TABLE_ADMIN_HOST_KEY,BIGTABLE_TABLE_ADMIN_HOST_DEFAULT);
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",tableAdminHost);
    bigtableOptionsBuilder.setTableAdminHost(InetAddress.getByName(tableAdminHost));
  }
 else {
    LOG.debug(""String_Node_Str"",tableAdminHost);
    bigtableOptionsBuilder.setTableAdminHost(InetAddress.getByAddress(tableAdminHost,overrideIpAddress.getAddress()));
  }
  String clusterAdminHost=configuration.get(BIGTABLE_CLUSTER_ADMIN_HOST_KEY,BIGTABLE_CLUSTER_ADMIN_HOST_DEFAULT);
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",clusterAdminHost);
    bigtableOptionsBuilder.setClusterAdminHost(InetAddress.getByName(clusterAdminHost));
  }
 else {
    LOG.debug(""String_Node_Str"",clusterAdminHost);
    bigtableOptionsBuilder.setClusterAdminHost(InetAddress.getByAddress(clusterAdminHost,overrideIpAddress.getAddress()));
  }
  int port=configuration.getInt(BIGTABLE_PORT_KEY,DEFAULT_BIGTABLE_PORT);
  bigtableOptionsBuilder.setPort(port);
  ThreadFactory threadFactory=new ThreadFactoryBuilder().setDaemon(true).setNameFormat(GRPC_EVENTLOOP_GROUP_NAME + ""String_Node_Str"").build();
  EventLoopGroup elg=new NioEventLoopGroup(0,threadFactory);
  bigtableOptionsBuilder.setCustomEventLoopGroup(elg);
  bigtableOptionsBuilder.setChannelOptions(createChannelOptions(configuration));
  return bigtableOptionsBuilder.build();
}",0.9855769230769232
21162,"@Test @Category(KnownGap.class) public void testPageFilters() throws IOException {
  byte[][] rowKeys=dataHelper.randomData(""String_Node_Str"",100);
  byte[] qualA=dataHelper.randomData(""String_Node_Str"");
  byte[] value=Bytes.toBytes(""String_Node_Str"");
  Table table=getConnection().getTable(TABLE_NAME);
  for (  byte[] rowKey : rowKeys) {
    Put put=new Put(rowKey).addColumn(COLUMN_FAMILY,qualA,value);
    table.put(put);
  }
  Scan scan=new Scan(Bytes.toBytes(""String_Node_Str""));
  PageFilter pageFilter=new PageFilter(20);
  scan.setFilter(pageFilter);
  try (ResultScanner scanner=table.getScanner(scan)){
    Assert.assertEquals(20,Iterators.size(scanner.iterator()));
  }
   FilterList filterList=new FilterList(Operator.MUST_PASS_ALL,new QualifierFilter(CompareOp.EQUAL,new BinaryComparator(qualA)),pageFilter);
  scan.setFilter(filterList);
  try (ResultScanner scanner=table.getScanner(scan)){
    Assert.assertEquals(20,Iterators.size(scanner.iterator()));
  }
 }","@Test public void testPageFilters() throws IOException {
  byte[][] rowKeys=dataHelper.randomData(""String_Node_Str"",100);
  byte[] qualA=dataHelper.randomData(""String_Node_Str"");
  byte[] value=Bytes.toBytes(""String_Node_Str"");
  Table table=getConnection().getTable(TABLE_NAME);
  for (  byte[] rowKey : rowKeys) {
    Put put=new Put(rowKey).addColumn(COLUMN_FAMILY,qualA,value);
    table.put(put);
  }
  Scan scan=new Scan(Bytes.toBytes(""String_Node_Str""));
  PageFilter pageFilter=new PageFilter(20);
  scan.setFilter(pageFilter);
  try (ResultScanner scanner=table.getScanner(scan)){
    Assert.assertEquals(20,Iterators.size(scanner.iterator()));
  }
   FilterList filterList=new FilterList(Operator.MUST_PASS_ALL,new QualifierFilter(CompareOp.EQUAL,new BinaryComparator(qualA)),pageFilter);
  scan.setFilter(filterList);
  try (ResultScanner scanner=table.getScanner(scan)){
    Assert.assertEquals(20,Iterators.size(scanner.iterator()));
  }
 }",0.9865424430641822
21163,"@Override public RowFilter adapt(FilterAdapterContext context,FilterList filter) throws IOException {
  try (ContextCloseable ignored=context.beginFilterList(filter)){
    List<RowFilter> childFilters=collectChildFilters(context,filter);
    if (childFilters.isEmpty()) {
      return null;
    }
    if (filter.getOperator() == Operator.MUST_PASS_ALL) {
      return RowFilter.newBuilder().setChain(Chain.newBuilder().addAllFilters(childFilters)).build();
    }
 else {
      return RowFilter.newBuilder().setInterleave(Interleave.newBuilder().addAllFilters(childFilters)).build();
    }
  }
 }","@Override public RowFilter adapt(FilterAdapterContext context,FilterList filter) throws IOException {
  try (ContextCloseable ignored=context.beginFilterList(filter)){
    List<RowFilter> childFilters=collectChildFilters(context,filter);
    if (childFilters.isEmpty()) {
      return null;
    }
 else     if (childFilters.size() == 1) {
      return childFilters.get(0);
    }
 else     if (filter.getOperator() == Operator.MUST_PASS_ALL) {
      return RowFilter.newBuilder().setChain(Chain.newBuilder().addAllFilters(childFilters)).build();
    }
 else {
      return RowFilter.newBuilder().setInterleave(Interleave.newBuilder().addAllFilters(childFilters)).build();
    }
  }
 }",0.9311424100156496
21164,"@SuppressWarnings(""String_Node_Str"") @Override public SslContext create(){
  try {
    return GrpcSslContexts.forClient().build();
  }
 catch (  SSLException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public SslContext create(){
  try {
    return SslContext.newClientContext();
  }
 catch (  SSLException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}",0.8699551569506726
21165,"public static BigtableOptions fromConfiguration(Configuration configuration) throws IOException {
  BigtableOptions.Builder optionsBuilder=new BigtableOptions.Builder();
  String projectId=configuration.get(PROJECT_ID_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(projectId),String.format(""String_Node_Str"",PROJECT_ID_KEY));
  optionsBuilder.setProjectId(projectId);
  LOG.debug(""String_Node_Str"",projectId);
  String zone=configuration.get(ZONE_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(zone),String.format(""String_Node_Str"",ZONE_KEY));
  optionsBuilder.setZone(zone);
  LOG.debug(""String_Node_Str"",zone);
  String cluster=configuration.get(CLUSTER_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(cluster),String.format(""String_Node_Str"",CLUSTER_KEY));
  optionsBuilder.setCluster(cluster);
  LOG.debug(""String_Node_Str"",cluster);
  String overrideIp=configuration.get(IP_OVERRIDE_KEY);
  InetAddress overrideIpAddress=null;
  if (!Strings.isNullOrEmpty(overrideIp)) {
    LOG.debug(""String_Node_Str"",overrideIp);
    overrideIpAddress=InetAddress.getByName(overrideIp);
  }
  String dataHost=configuration.get(BIGTABLE_HOST_KEY,BIGTABLE_HOST_DEFAULT);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(dataHost),String.format(""String_Node_Str"",BIGTABLE_HOST_KEY));
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",dataHost);
    optionsBuilder.setDataHost(InetAddress.getByName(dataHost));
  }
 else {
    LOG.debug(""String_Node_Str"",dataHost);
    optionsBuilder.setDataHost(InetAddress.getByAddress(dataHost,overrideIpAddress.getAddress()));
  }
  String tableAdminHost=configuration.get(BIGTABLE_TABLE_ADMIN_HOST_KEY,BIGTABLE_TABLE_ADMIN_HOST_DEFAULT);
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",tableAdminHost);
    optionsBuilder.setTableAdminHost(InetAddress.getByName(tableAdminHost));
  }
 else {
    LOG.debug(""String_Node_Str"",tableAdminHost);
    optionsBuilder.setTableAdminHost(InetAddress.getByAddress(tableAdminHost,overrideIpAddress.getAddress()));
  }
  String clusterAdminHost=configuration.get(BIGTABLE_CLUSTER_ADMIN_HOST_KEY,BIGTABLE_CLUSTER_ADMIN_HOST_DEFAULT);
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",clusterAdminHost);
    optionsBuilder.setClusterAdminHost(InetAddress.getByName(clusterAdminHost));
  }
 else {
    LOG.debug(""String_Node_Str"",clusterAdminHost);
    optionsBuilder.setClusterAdminHost(InetAddress.getByAddress(clusterAdminHost,overrideIpAddress.getAddress()));
  }
  int port=configuration.getInt(BIGTABLE_PORT_KEY,DEFAULT_BIGTABLE_PORT);
  optionsBuilder.setPort(port);
  try {
    if (configuration.getBoolean(BIGTABE_USE_SERVICE_ACCOUNTS_KEY,BIGTABLE_USE_SERVICE_ACCOUNTS_DEFAULT)) {
      LOG.debug(""String_Node_Str"");
      String serviceAccountJson=System.getenv().get(SERVICE_ACCOUNT_JSON_ENV_VARIABLE);
      String serviceAccountEmail=configuration.get(BIGTABLE_SERVICE_ACCOUNT_EMAIL_KEY);
      if (!Strings.isNullOrEmpty(serviceAccountJson)) {
        LOG.debug(""String_Node_Str"",serviceAccountJson);
        optionsBuilder.setCredential(CredentialFactory.getApplicationDefaultCredential());
      }
 else       if (!Strings.isNullOrEmpty(serviceAccountEmail)) {
        LOG.debug(""String_Node_Str"",serviceAccountEmail);
        String keyfileLocation=configuration.get(BIGTABLE_SERVICE_ACCOUNT_P12_KEYFILE_LOCATION_KEY);
        Preconditions.checkState(!Strings.isNullOrEmpty(keyfileLocation),""String_Node_Str"");
        LOG.debug(""String_Node_Str"",keyfileLocation);
        optionsBuilder.setCredential(CredentialFactory.getCredentialFromPrivateKeyServiceAccount(serviceAccountEmail,keyfileLocation));
      }
 else {
        optionsBuilder.setCredential(CredentialFactory.getCredentialFromMetadataServiceAccount());
      }
    }
 else     if (configuration.getBoolean(BIGTABLE_NULL_CREDENTIAL_ENABLE_KEY,BIGTABLE_NULL_CREDENTIAL_ENABLE_DEFAULT)) {
      optionsBuilder.setCredential(null);
      LOG.info(""String_Node_Str"");
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
 catch (  GeneralSecurityException gse) {
    throw new IOException(""String_Node_Str"",gse);
  }
  ThreadFactory threadFactory=new ThreadFactoryBuilder().setDaemon(true).setNameFormat(GRPC_EVENTLOOP_GROUP_NAME + ""String_Node_Str"").build();
  EventLoopGroup elg=new NioEventLoopGroup(0,threadFactory);
  optionsBuilder.setCustomEventLoopGroup(elg);
  ScheduledExecutorService retryExecutor=Executors.newScheduledThreadPool(RETRY_THREAD_COUNT,new ThreadFactoryBuilder().setDaemon(true).setNameFormat(RETRY_THREADPOOL_NAME + ""String_Node_Str"").build());
  optionsBuilder.setRpcRetryExecutorService(retryExecutor);
  if (!Strings.isNullOrEmpty(configuration.get(CALL_REPORT_DIRECTORY_KEY))) {
    String reportDirectory=configuration.get(CALL_REPORT_DIRECTORY_KEY);
    Path reportDirectoryPath=FileSystems.getDefault().getPath(reportDirectory);
    if (Files.exists(reportDirectoryPath)) {
      Preconditions.checkState(Files.isDirectory(reportDirectoryPath),""String_Node_Str"");
    }
 else {
      Files.createDirectories(reportDirectoryPath);
    }
    String callStatusReport=reportDirectoryPath.resolve(""String_Node_Str"").toAbsolutePath().toString();
    String callTimingReport=reportDirectoryPath.resolve(""String_Node_Str"").toAbsolutePath().toString();
    LOG.debug(""String_Node_Str"",callStatusReport);
    LOG.debug(""String_Node_Str"",callTimingReport);
    optionsBuilder.setCallStatusReportPath(callStatusReport);
    optionsBuilder.setCallTimingReportPath(callTimingReport);
  }
  RetryOptions.Builder retryOptionsBuilder=new RetryOptions.Builder();
  boolean enableRetries=configuration.getBoolean(ENABLE_GRPC_RETRIES_KEY,ENABLE_GRPC_RETRIES_DEFAULT);
  LOG.debug(""String_Node_Str"",enableRetries);
  retryOptionsBuilder.setEnableRetries(enableRetries);
  boolean retryOnDeadlineExceeded=configuration.getBoolean(ENABLE_GRPC_RETRY_DEADLINEEXCEEDED_KEY,ENABLE_GRPC_RETRY_DEADLINEEXCEEDED_DEFAULT);
  LOG.debug(""String_Node_Str"",retryOnDeadlineExceeded);
  retryOptionsBuilder.setRetryOnDeadlineExceeded(retryOnDeadlineExceeded);
  retryOptionsBuilder.setMaxElapsedBackoffMillis(180000);
  int channelCount=configuration.getInt(BIGTABLE_CHANNEL_COUNT_KEY,BIGTABLE_CHANNEL_COUNT_DEFAULT);
  optionsBuilder.setChannelCount(channelCount);
  long channelTimeout=configuration.getLong(BIGTABLE_CHANNEL_TIMEOUT_MS_KEY,BIGTABLE_CHANNEL_TIMEOUT_MS_DEFAULT);
  Preconditions.checkArgument(channelTimeout == 0 || channelTimeout >= 60000,BIGTABLE_CHANNEL_TIMEOUT_MS_KEY + ""String_Node_Str"");
  optionsBuilder.setChannelTimeoutMs(channelTimeout);
  optionsBuilder.setUserAgent(BigtableConstants.USER_AGENT);
  return optionsBuilder.build();
}","public static BigtableOptions fromConfiguration(Configuration configuration) throws IOException {
  BigtableOptions.Builder optionsBuilder=new BigtableOptions.Builder();
  String projectId=configuration.get(PROJECT_ID_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(projectId),String.format(""String_Node_Str"",PROJECT_ID_KEY));
  optionsBuilder.setProjectId(projectId);
  LOG.debug(""String_Node_Str"",projectId);
  String zone=configuration.get(ZONE_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(zone),String.format(""String_Node_Str"",ZONE_KEY));
  optionsBuilder.setZone(zone);
  LOG.debug(""String_Node_Str"",zone);
  String cluster=configuration.get(CLUSTER_KEY);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(cluster),String.format(""String_Node_Str"",CLUSTER_KEY));
  optionsBuilder.setCluster(cluster);
  LOG.debug(""String_Node_Str"",cluster);
  String overrideIp=configuration.get(IP_OVERRIDE_KEY);
  InetAddress overrideIpAddress=null;
  if (!Strings.isNullOrEmpty(overrideIp)) {
    LOG.debug(""String_Node_Str"",overrideIp);
    overrideIpAddress=InetAddress.getByName(overrideIp);
  }
  String dataHost=configuration.get(BIGTABLE_HOST_KEY,BIGTABLE_HOST_DEFAULT);
  Preconditions.checkArgument(!Strings.isNullOrEmpty(dataHost),String.format(""String_Node_Str"",BIGTABLE_HOST_KEY));
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",dataHost);
    optionsBuilder.setDataHost(InetAddress.getByName(dataHost));
  }
 else {
    LOG.debug(""String_Node_Str"",dataHost);
    optionsBuilder.setDataHost(InetAddress.getByAddress(dataHost,overrideIpAddress.getAddress()));
  }
  String tableAdminHost=configuration.get(BIGTABLE_TABLE_ADMIN_HOST_KEY,BIGTABLE_TABLE_ADMIN_HOST_DEFAULT);
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",tableAdminHost);
    optionsBuilder.setTableAdminHost(InetAddress.getByName(tableAdminHost));
  }
 else {
    LOG.debug(""String_Node_Str"",tableAdminHost);
    optionsBuilder.setTableAdminHost(InetAddress.getByAddress(tableAdminHost,overrideIpAddress.getAddress()));
  }
  String clusterAdminHost=configuration.get(BIGTABLE_CLUSTER_ADMIN_HOST_KEY,BIGTABLE_CLUSTER_ADMIN_HOST_DEFAULT);
  if (overrideIpAddress == null) {
    LOG.debug(""String_Node_Str"",clusterAdminHost);
    optionsBuilder.setClusterAdminHost(InetAddress.getByName(clusterAdminHost));
  }
 else {
    LOG.debug(""String_Node_Str"",clusterAdminHost);
    optionsBuilder.setClusterAdminHost(InetAddress.getByAddress(clusterAdminHost,overrideIpAddress.getAddress()));
  }
  int port=configuration.getInt(BIGTABLE_PORT_KEY,DEFAULT_BIGTABLE_PORT);
  optionsBuilder.setPort(port);
  try {
    if (configuration.getBoolean(BIGTABE_USE_SERVICE_ACCOUNTS_KEY,BIGTABLE_USE_SERVICE_ACCOUNTS_DEFAULT)) {
      LOG.debug(""String_Node_Str"");
      String serviceAccountJson=System.getenv().get(SERVICE_ACCOUNT_JSON_ENV_VARIABLE);
      String serviceAccountEmail=configuration.get(BIGTABLE_SERVICE_ACCOUNT_EMAIL_KEY);
      if (!Strings.isNullOrEmpty(serviceAccountJson)) {
        LOG.debug(""String_Node_Str"",serviceAccountJson);
        optionsBuilder.setCredential(CredentialFactory.getApplicationDefaultCredential());
      }
 else       if (!Strings.isNullOrEmpty(serviceAccountEmail)) {
        LOG.debug(""String_Node_Str"",serviceAccountEmail);
        String keyfileLocation=configuration.get(BIGTABLE_SERVICE_ACCOUNT_P12_KEYFILE_LOCATION_KEY);
        Preconditions.checkState(!Strings.isNullOrEmpty(keyfileLocation),""String_Node_Str"");
        LOG.debug(""String_Node_Str"",keyfileLocation);
        optionsBuilder.setCredential(CredentialFactory.getCredentialFromPrivateKeyServiceAccount(serviceAccountEmail,keyfileLocation));
      }
 else {
        optionsBuilder.setCredential(CredentialFactory.getCredentialFromMetadataServiceAccount());
      }
    }
 else     if (configuration.getBoolean(BIGTABLE_NULL_CREDENTIAL_ENABLE_KEY,BIGTABLE_NULL_CREDENTIAL_ENABLE_DEFAULT)) {
      optionsBuilder.setCredential(null);
      LOG.info(""String_Node_Str"");
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
 catch (  GeneralSecurityException gse) {
    throw new IOException(""String_Node_Str"",gse);
  }
  ThreadFactory threadFactory=new ThreadFactoryBuilder().setDaemon(true).setNameFormat(GRPC_EVENTLOOP_GROUP_NAME + ""String_Node_Str"").build();
  EventLoopGroup elg=new NioEventLoopGroup(0,threadFactory);
  optionsBuilder.setCustomEventLoopGroup(elg);
  ScheduledExecutorService retryExecutor=Executors.newScheduledThreadPool(RETRY_THREAD_COUNT,new ThreadFactoryBuilder().setDaemon(true).setNameFormat(RETRY_THREADPOOL_NAME + ""String_Node_Str"").build());
  optionsBuilder.setRpcRetryExecutorService(retryExecutor);
  if (!Strings.isNullOrEmpty(configuration.get(CALL_REPORT_DIRECTORY_KEY))) {
    String reportDirectory=configuration.get(CALL_REPORT_DIRECTORY_KEY);
    Path reportDirectoryPath=FileSystems.getDefault().getPath(reportDirectory);
    if (Files.exists(reportDirectoryPath)) {
      Preconditions.checkState(Files.isDirectory(reportDirectoryPath),""String_Node_Str"");
    }
 else {
      Files.createDirectories(reportDirectoryPath);
    }
    String callStatusReport=reportDirectoryPath.resolve(""String_Node_Str"").toAbsolutePath().toString();
    String callTimingReport=reportDirectoryPath.resolve(""String_Node_Str"").toAbsolutePath().toString();
    LOG.debug(""String_Node_Str"",callStatusReport);
    LOG.debug(""String_Node_Str"",callTimingReport);
    optionsBuilder.setCallStatusReportPath(callStatusReport);
    optionsBuilder.setCallTimingReportPath(callTimingReport);
  }
  RetryOptions.Builder retryOptionsBuilder=new RetryOptions.Builder();
  boolean enableRetries=configuration.getBoolean(ENABLE_GRPC_RETRIES_KEY,ENABLE_GRPC_RETRIES_DEFAULT);
  LOG.debug(""String_Node_Str"",enableRetries);
  retryOptionsBuilder.setEnableRetries(enableRetries);
  boolean retryOnDeadlineExceeded=configuration.getBoolean(ENABLE_GRPC_RETRY_DEADLINEEXCEEDED_KEY,ENABLE_GRPC_RETRY_DEADLINEEXCEEDED_DEFAULT);
  LOG.debug(""String_Node_Str"",retryOnDeadlineExceeded);
  retryOptionsBuilder.setRetryOnDeadlineExceeded(retryOnDeadlineExceeded);
  retryOptionsBuilder.setMaxElapsedBackoffMillis(180000);
  optionsBuilder.setRetryOptions(retryOptionsBuilder.build());
  int channelCount=configuration.getInt(BIGTABLE_CHANNEL_COUNT_KEY,BIGTABLE_CHANNEL_COUNT_DEFAULT);
  optionsBuilder.setChannelCount(channelCount);
  long channelTimeout=configuration.getLong(BIGTABLE_CHANNEL_TIMEOUT_MS_KEY,BIGTABLE_CHANNEL_TIMEOUT_MS_DEFAULT);
  Preconditions.checkArgument(channelTimeout == 0 || channelTimeout >= 60000,BIGTABLE_CHANNEL_TIMEOUT_MS_KEY + ""String_Node_Str"");
  optionsBuilder.setChannelTimeoutMs(channelTimeout);
  optionsBuilder.setUserAgent(BigtableConstants.USER_AGENT);
  return optionsBuilder.build();
}",0.9953295277633628
21166,"@Override public CloseableChannel create(){
  return createCloseableChannel(transportOptions,executor);
}","@Override public CloseableChannel create(){
  CloseableChannel channel=createCloseableChannel(transportOptions,executor);
  return new InflightCheckingChannel(channel);
}",0.7345454545454545
21167,"private static CloseableChannel createRefreshingChannel(final TransportOptions transportOptions,final ExecutorService executor,long timeoutMs){
  if (timeoutMs > 0) {
    return new ReconnectingChannel(timeoutMs,executor,new ReconnectingChannel.Factory(){
      @Override public CloseableChannel create(){
        return createCloseableChannel(transportOptions,executor);
      }
    }
);
  }
 else {
    return createCloseableChannel(transportOptions,executor);
  }
}","private static CloseableChannel createRefreshingChannel(final TransportOptions transportOptions,final ExecutorService executor,long timeoutMs){
  if (timeoutMs > 0) {
    return new ReconnectingChannel(timeoutMs,executor,new ReconnectingChannel.Factory(){
      @Override public CloseableChannel create(){
        CloseableChannel channel=createCloseableChannel(transportOptions,executor);
        return new InflightCheckingChannel(channel);
      }
    }
);
  }
 else {
    return createCloseableChannel(transportOptions,executor);
  }
}",0.903674280039722
21168,"@Test public void testBufferSizeFlush() throws Exception {
  int maxSize=1024;
  try (BufferedMutator mutator=connection.getBufferedMutator(new BufferedMutatorParams(TABLE_NAME).writeBufferSize(maxSize))){
    Put put=getPut();
    mutator.mutate(put);
    Assert.assertEquals(put.heapSize(),mutator.getWriteBufferSize());
    Put largePut=new Put(dataHelper.randomData(""String_Node_Str""));
    largePut.addColumn(COLUMN_FAMILY,qualifier,Bytes.toBytes(RandomStringUtils.randomAlphanumeric(maxSize * 2)));
    long heapSize=largePut.heapSize();
    Assert.assertTrue(""String_Node_Str"" + heapSize,heapSize > maxSize);
    mutator.mutate(largePut);
    Assert.assertEquals(0,mutator.getWriteBufferSize());
  }
 }","@Test public void testBufferSizeFlush() throws Exception {
  int maxSize=1024;
  BufferedMutatorParams params=new BufferedMutatorParams(TABLE_NAME).writeBufferSize(maxSize);
  try (BufferedMutator mutator=connection.getBufferedMutator(params)){
    Assert.assertTrue(0 == mutator.getWriteBufferSize() || maxSize == mutator.getWriteBufferSize());
    Put put=getPut();
    mutator.mutate(put);
    Assert.assertTrue(mutator.getWriteBufferSize() > 0);
    Put largePut=new Put(dataHelper.randomData(""String_Node_Str""));
    largePut.addColumn(COLUMN_FAMILY,qualifier,Bytes.toBytes(RandomStringUtils.randomAlphanumeric(maxSize * 2)));
    long heapSize=largePut.heapSize();
    Assert.assertTrue(""String_Node_Str"" + heapSize,heapSize > maxSize);
    mutator.mutate(largePut);
    Assert.assertTrue(0 == mutator.getWriteBufferSize() || maxSize == mutator.getWriteBufferSize());
  }
 }",0.7413467589679044
21169,"AuthorityType detectAuthorityType(){
  if (authorityUrl == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final String path=authorityUrl.getPath().substring(1);
  if (StringHelper.isBlank(path)) {
    throw new IllegalArgumentException(AuthenticationErrorMessage.AUTHORITY_URI_INVALID_PATH);
  }
  final String firstPath=path.substring(0,path.indexOf(""String_Node_Str""));
  final AuthorityType authorityType=IsAdfsAuthority(firstPath) ? AuthorityType.ADFS : AuthorityType.AAD;
  return authorityType;
}","AuthorityType detectAuthorityType(){
  if (authorityUrl == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final String path=authorityUrl.getPath().substring(1);
  if (StringHelper.isBlank(path)) {
    throw new IllegalArgumentException(AuthenticationErrorMessage.AUTHORITY_URI_INVALID_PATH);
  }
  final String firstPath=path.substring(0,path.indexOf(""String_Node_Str""));
  final AuthorityType authorityType=isAdfsAuthority(firstPath) ? AuthorityType.ADFS : AuthorityType.AAD;
  return authorityType;
}",0.9980916030534353
21170,"static UserInfo createFromIdTokenClaims(final JWTClaimsSet claims) throws java.text.ParseException {
  if (claims == null || claims.getClaims().size() == 0) {
    return null;
  }
  String uniqueId=null;
  String displayableId=null;
  if (!StringHelper.isBlank(claims.getStringClaim(AuthenticationConstants.ID_TOKEN_OBJECT_ID))) {
    uniqueId=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_OBJECT_ID);
  }
 else   if (!StringHelper.isBlank(claims.getStringClaim(AuthenticationConstants.ID_TOKEN_SUBJECT))) {
    uniqueId=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_SUBJECT);
  }
  if (!StringHelper.isBlank(claims.getStringClaim(AuthenticationConstants.ID_TOKEN_UPN))) {
    displayableId=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_UPN);
  }
 else   if (!StringHelper.isBlank(claims.getStringClaim(AuthenticationConstants.ID_TOKEN_EMAIL))) {
    displayableId=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_EMAIL);
  }
  final UserInfo userInfo=new UserInfo();
  userInfo.uniqueId=uniqueId;
  userInfo.displayableId=displayableId;
  userInfo.familyName=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_FAMILY_NAME);
  userInfo.givenName=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_GIVEN_NAME);
  userInfo.identityProvider=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_IDENTITY_PROVIDER);
  if (!StringHelper.isBlank(claims.getStringClaim(AuthenticationConstants.ID_TOKEN_PASSWORD_CHANGE_URL))) {
    userInfo.passwordChangeUrl=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_PASSWORD_CHANGE_URL);
  }
  if (claims.getClaim(AuthenticationConstants.ID_TOKEN_PASSWORD_EXPIRES_ON) != null) {
    int claimExpiry=Integer.valueOf((String)claims.getClaim(AuthenticationConstants.ID_TOKEN_PASSWORD_EXPIRES_ON));
    if (claimExpiry > 0) {
      Calendar expires=new GregorianCalendar();
      expires.add(Calendar.SECOND,claimExpiry);
      userInfo.passwordExpiresOn=expires.getTime();
    }
  }
  return userInfo;
}","static UserInfo createFromIdTokenClaims(final JWTClaimsSet claims) throws java.text.ParseException {
  if (claims == null || claims.getClaims().size() == 0) {
    return null;
  }
  String uniqueId=null;
  String displayableId=null;
  if (!StringHelper.isBlank(claims.getStringClaim(AuthenticationConstants.ID_TOKEN_OBJECT_ID))) {
    uniqueId=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_OBJECT_ID);
  }
 else   if (!StringHelper.isBlank(claims.getStringClaim(AuthenticationConstants.ID_TOKEN_SUBJECT))) {
    uniqueId=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_SUBJECT);
  }
  if (!StringHelper.isBlank(claims.getStringClaim(AuthenticationConstants.ID_TOKEN_UPN))) {
    displayableId=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_UPN);
  }
 else   if (!StringHelper.isBlank(claims.getStringClaim(AuthenticationConstants.ID_TOKEN_EMAIL))) {
    displayableId=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_EMAIL);
  }
  final UserInfo userInfo=new UserInfo();
  userInfo.uniqueId=uniqueId;
  userInfo.displayableId=displayableId;
  userInfo.familyName=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_FAMILY_NAME);
  userInfo.givenName=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_GIVEN_NAME);
  userInfo.identityProvider=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_IDENTITY_PROVIDER);
  if (!StringHelper.isBlank(claims.getStringClaim(AuthenticationConstants.ID_TOKEN_PASSWORD_CHANGE_URL))) {
    userInfo.passwordChangeUrl=claims.getStringClaim(AuthenticationConstants.ID_TOKEN_PASSWORD_CHANGE_URL);
  }
  if (claims.getClaim(AuthenticationConstants.ID_TOKEN_PASSWORD_EXPIRES_ON) != null) {
    int claimExpiry=Integer.parseInt((String)claims.getClaim(AuthenticationConstants.ID_TOKEN_PASSWORD_EXPIRES_ON));
    if (claimExpiry > 0) {
      Calendar expires=new GregorianCalendar();
      expires.add(Calendar.SECOND,claimExpiry);
      userInfo.passwordExpiresOn=expires.getTime();
    }
  }
  return userInfo;
}",0.996216897856242
21171,"boolean doDynamicInstanceDiscovery(final Map<String,String> headers) throws Exception {
  final String json=HttpHelper.executeHttpGet(log,instanceDiscoveryEndpoint,headers);
  final InstanceDiscoveryResponse discoveryResponse=JsonHelper.convertJsonToObject(json,InstanceDiscoveryResponse.class);
  return !StringHelper.isBlank(discoveryResponse.getTenantDiscoveryEndpoint());
}","boolean doDynamicInstanceDiscovery(final Map<String,String> headers) throws Exception {
  final String json=HttpHelper.executeHttpGet(log,instanceDiscoveryEndpoint,headers,proxy);
  final InstanceDiscoveryResponse discoveryResponse=JsonHelper.convertJsonToObject(json,InstanceDiscoveryResponse.class);
  return !StringHelper.isBlank(discoveryResponse.getTenantDiscoveryEndpoint());
}",0.9921052631578948
21172,"AuthenticationAuthority(final URL authorityUrl,final boolean validateAuthority){
  this.authorityUrl=authorityUrl;
  this.authorityType=detectAuthorityType();
  this.validateAuthority=validateAuthority;
  validateAuthorityUrl();
  setupAuthorityProperties();
}","AuthenticationAuthority(final URL authorityUrl,final boolean validateAuthority,final Proxy proxy){
  this.authorityUrl=authorityUrl;
  this.authorityType=detectAuthorityType();
  this.validateAuthority=validateAuthority;
  this.proxy=proxy;
  validateAuthorityUrl();
  setupAuthorityProperties();
}",0.931899641577061
21173,"static BindingPolicy getWsTrustEndpointFromMexEndpoint(String metadataEndpoint) throws Exception {
  String mexResponse=HttpHelper.executeHttpGet(log,metadataEndpoint);
  return getWsTrustEndpointFromMexResponse(mexResponse);
}","static BindingPolicy getWsTrustEndpointFromMexEndpoint(String metadataEndpoint,Proxy proxy) throws Exception {
  String mexResponse=HttpHelper.executeHttpGet(log,metadataEndpoint,proxy);
  return getWsTrustEndpointFromMexResponse(mexResponse);
}",0.961864406779661
21174,"/** 
 * Executes a specific Sakuli test suite in the assigend 'testSuiteFolder'. A test suite has to contain as minimum following files: <ul> <li>testsuite.suite  => specifies the testcases</li> <li>testsuite.properties  => specifies the runtime settings like the browser for the test suite.</li> </ul>
 * @param testSuiteFolderPath  path to the Sakuli test suite
 * @param sakuliHomeFolderPath path to the folder which contains 'config' and the 'libs' folder
 * @param browser              (optional) browser for the test execution, default: property 'testsuite.browser'
 * @param sahiHomeFolder       (optional) specifies a different sahi proxy as in the 'sakuli.properties' file
 * @return the {@link TestSuiteState} of the Sakuli test execution.
 * @throws FileNotFoundException
 */
public static TestSuite runTestSuite(String testSuiteFolderPath,String sakuliHomeFolderPath,String browser,String sahiHomeFolder) throws FileNotFoundException {
  LOGGER.info(String.format(""String_Node_Str"",testSuiteFolderPath));
  String tempLogCache=""String_Node_Str"";
  tempLogCache=SakuliFolderHelper.checkTestSuiteFolderAndSetContextVariables(testSuiteFolderPath,tempLogCache);
  tempLogCache=SakuliFolderHelper.checkSakuliHomeFolderAndSetContextVariables(sakuliHomeFolderPath,tempLogCache);
  if (isNotEmpty(sahiHomeFolder)) {
    tempLogCache=SakuliFolderHelper.checkSahiProxyHomeAndSetContextVariables(sahiHomeFolder,tempLogCache);
  }
  if (isNotEmpty(browser)) {
    tempLogCache=SakuliFolderHelper.setTestSuiteBrowserContextVariable(browser,tempLogCache);
  }
  SahiConnector sahiConnector=BeanLoader.loadBean(SahiConnector.class);
  LOGGER.debug(tempLogCache);
  InitializingServiceHelper.invokeInitializingServcies();
  TestSuite result=BeanLoader.loadBean(TestSuite.class);
  try {
    sahiConnector.init();
    LOGGER.debug(""String_Node_Str"");
    sahiConnector.startSahiTestSuite();
  }
 catch (  SakuliInitException e) {
    LOGGER.error(""String_Node_Str"",e);
    System.exit(99);
  }
 finally {
    ResultServiceHelper.invokeResultServices();
    result=BeanLoader.loadBean(TestSuite.class);
    BeanLoader.releaseContext();
  }
  return result;
}","/** 
 * Executes a specific Sakuli test suite in the assigend 'testSuiteFolder'. A test suite has to contain as minimum following files: <ul> <li>testsuite.suite  = specifies the testcases</li> <li>testsuite.properties  = specifies the runtime settings like the browser for the test suite.</li> </ul>
 * @param testSuiteFolderPath  path to the Sakuli test suite
 * @param sakuliHomeFolderPath path to the folder which contains 'config' and the 'libs' folder
 * @param browser              (optional) browser for the test execution, default: property 'testsuite.browser'
 * @param sahiHomeFolder       (optional) specifies a different sahi proxy as in the 'sakuli.properties' file
 * @return the {@link TestSuiteState} of the Sakuli test execution.
 * @throws FileNotFoundException
 */
public static TestSuite runTestSuite(String testSuiteFolderPath,String sakuliHomeFolderPath,String browser,String sahiHomeFolder) throws FileNotFoundException {
  LOGGER.info(String.format(""String_Node_Str"",testSuiteFolderPath));
  String tempLogCache=""String_Node_Str"";
  tempLogCache=SakuliFolderHelper.checkTestSuiteFolderAndSetContextVariables(testSuiteFolderPath,tempLogCache);
  tempLogCache=SakuliFolderHelper.checkSakuliHomeFolderAndSetContextVariables(sakuliHomeFolderPath,tempLogCache);
  if (isNotEmpty(sahiHomeFolder)) {
    tempLogCache=SakuliFolderHelper.checkSahiProxyHomeAndSetContextVariables(sahiHomeFolder,tempLogCache);
  }
  if (isNotEmpty(browser)) {
    tempLogCache=SakuliFolderHelper.setTestSuiteBrowserContextVariable(browser,tempLogCache);
  }
  SahiConnector sahiConnector=BeanLoader.loadBean(SahiConnector.class);
  LOGGER.debug(tempLogCache);
  InitializingServiceHelper.invokeInitializingServcies();
  TestSuite result=BeanLoader.loadBean(TestSuite.class);
  try {
    sahiConnector.init();
    LOGGER.debug(""String_Node_Str"");
    sahiConnector.startSahiTestSuite();
  }
 catch (  SakuliInitException e) {
    LOGGER.error(""String_Node_Str"",e);
    System.exit(99);
  }
 finally {
    ResultServiceHelper.invokeResultServices();
    result=BeanLoader.loadBean(TestSuite.class);
    BeanLoader.releaseContext();
  }
  return result;
}",0.99953509995351
21175,"/** 
 * The Sakuli-Starter executes a specific sakuli-testsuite. A test suite has to contain as minimum following files: <ul> <li>testsuite.suite  => specifies the testcases</li> <li>testsuite.properties  => specifies the runtime settings like the browser for the test suite.</li> </ul>
 * @param args relative or absolute path to the folder of your test suite
 */
public static void main(String[] args){
  CommandLineParser parser=new PosixParser();
  Options options=new Options();
  options.addOption(help);
  options.addOption(run);
  options.addOption(browser);
  options.addOption(sakuliHome);
  options.addOption(sahiHome);
  options.addOption(encrypt);
  options.addOption(anInterface);
  try {
    CommandLine cmd=parser.parse(options,args);
    final String browserValue=getOptionValue(cmd,browser);
    final String testSuiteFolderPath=getOptionValue(cmd,run);
    final String sakuliMainFolderPath=getOptionValue(cmd,sakuliHome);
    final String sahiHomePath=getOptionValue(cmd,sahiHome);
    final String ethInterface=getOptionValue(cmd,anInterface);
    final String strToEncrypt=getOptionValue(cmd,encrypt);
    if (cmd.hasOption(run.getLongOpt()) || cmd.hasOption(run.getOpt())) {
      TestSuite testSuite=runTestSuite(testSuiteFolderPath,sakuliMainFolderPath,browserValue,sahiHomePath);
      System.exit(testSuite.getState().getErrorCode());
    }
 else     if (cmd.hasOption(encrypt.getLongOpt()) || cmd.hasOption(encrypt.getOpt())) {
      System.out.printf(""String_Node_Str"",strToEncrypt);
      final Entry<String,String> secret=encryptSecret(strToEncrypt,ethInterface);
      System.out.printf(""String_Node_Str"",secret.getKey(),secret.getValue());
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
 else {
      printHelp(options);
    }
  }
 catch (  SakuliCipherException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
catch (  ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    printHelp(options);
  }
catch (  Exception e) {
    e.printStackTrace();
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
}","/** 
 * The Sakuli-Starter executes a specific sakuli-testsuite. A test suite has to contain as minimum following files: <ul> <li>testsuite.suite  - specifies the testcases</li> <li>testsuite.properties  - specifies the runtime settings like the browser for the test suite.</li> </ul>
 * @param args relative or absolute path to the folder of your test suite
 */
public static void main(String[] args){
  CommandLineParser parser=new PosixParser();
  Options options=new Options();
  options.addOption(help);
  options.addOption(run);
  options.addOption(browser);
  options.addOption(sakuliHome);
  options.addOption(sahiHome);
  options.addOption(encrypt);
  options.addOption(anInterface);
  try {
    CommandLine cmd=parser.parse(options,args);
    final String browserValue=getOptionValue(cmd,browser);
    final String testSuiteFolderPath=getOptionValue(cmd,run);
    final String sakuliMainFolderPath=getOptionValue(cmd,sakuliHome);
    final String sahiHomePath=getOptionValue(cmd,sahiHome);
    final String ethInterface=getOptionValue(cmd,anInterface);
    final String strToEncrypt=getOptionValue(cmd,encrypt);
    if (cmd.hasOption(run.getLongOpt()) || cmd.hasOption(run.getOpt())) {
      TestSuite testSuite=runTestSuite(testSuiteFolderPath,sakuliMainFolderPath,browserValue,sahiHomePath);
      System.exit(testSuite.getState().getErrorCode());
    }
 else     if (cmd.hasOption(encrypt.getLongOpt()) || cmd.hasOption(encrypt.getOpt())) {
      System.out.printf(""String_Node_Str"",strToEncrypt);
      final Entry<String,String> secret=encryptSecret(strToEncrypt,ethInterface);
      System.out.printf(""String_Node_Str"",secret.getKey(),secret.getValue());
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
 else {
      printHelp(options);
    }
  }
 catch (  SakuliCipherException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
catch (  ParseException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    printHelp(options);
  }
catch (  Exception e) {
    e.printStackTrace();
    System.err.println(""String_Node_Str"" + e.getMessage());
  }
}",0.9986020503261882
21176,"/** 
 * Replace an string like: <ul> <li>replaceEmptyLines(""bla\n\nbla"", ""123"")   =>   ""bla\n123\nbla""</li> <li>replaceEmptyLines(""bla\r\n\r\nbla"", ""123"")   =>   ""bla\r\n123\r\nbla""</li> </ul>
 * @param source        source String
 * @param replaceString replace String without double new line
 * @return
 */
protected static String replaceEmptyLines(String source,String replaceString){
  if (source != null) {
    for (    String newlineChars : Arrays.asList(""String_Node_Str"",""String_Node_Str"")) {
      String doubleNewLine=newlineChars + newlineChars;
      if (replaceString.contains(doubleNewLine) || StringUtils.isEmpty(replaceString)) {
        throw new InvalidParameterException(""String_Node_Str"" + doubleNewLine + ""String_Node_Str"");
      }
      while (source.contains(doubleNewLine)) {
        source=source.replace(doubleNewLine,newlineChars + replaceString + newlineChars);
      }
    }
  }
  return source;
}","/** 
 * Replace an string like: <ul> <li>replaceEmptyLines(""bla\n\nbla"", ""123"")   =   ""bla\n123\nbla""</li> <li>replaceEmptyLines(""bla\r\n\r\nbla"", ""123"")   =   ""bla\r\n123\r\nbla""</li> </ul>
 * @param source        source String
 * @param replaceString replace String without double new line
 * @return
 */
protected static String replaceEmptyLines(String source,String replaceString){
  if (source != null) {
    for (    String newlineChars : Arrays.asList(""String_Node_Str"",""String_Node_Str"")) {
      String doubleNewLine=newlineChars + newlineChars;
      if (replaceString.contains(doubleNewLine) || StringUtils.isEmpty(replaceString)) {
        throw new InvalidParameterException(""String_Node_Str"" + doubleNewLine + ""String_Node_Str"");
      }
      while (source.contains(doubleNewLine)) {
        source=source.replace(doubleNewLine,newlineChars + replaceString + newlineChars);
      }
    }
  }
  return source;
}",0.9989200863930886
21177,"/** 
 * Executes a specific Sakuli test suite in the assigend 'testSuiteFolder'. A test suite has to contain as minimum following files: <ul> <li>testsuite.suite  => specifies the testcases</li> <li>testsuite.properties  => specifies the runtime settings like the browser for the test suite.</li> </ul>
 * @param testSuiteFolderPath path to the Sakuli test suite
 * @param includeFolderPath   import folder of the 'sakuli.properties' and 'sakuli.js' files
 * @param sahiProxyHomePath   (optional) specifies a different sahi proxy as in the 'sakuli.properties' file
 * @return the {@link TestSuiteState} of the Sakuli test execution.
 * @throws FileNotFoundException
 */
public static TestSuite runTestSuite(String testSuiteFolderPath,String includeFolderPath,String sahiProxyHomePath) throws FileNotFoundException {
  LOGGER.info(String.format(""String_Node_Str"",testSuiteFolderPath));
  String tempLogCache=""String_Node_Str"";
  tempLogCache=checkTestSuiteFolderAndSetContextVariables(testSuiteFolderPath,tempLogCache);
  if (StringUtils.isNotEmpty(sahiProxyHomePath)) {
    tempLogCache=checkSahiProxyHomeAndSetContextVariables(sahiProxyHomePath,tempLogCache);
  }
  tempLogCache=checkIncludeFolderAndSetContextVariables(includeFolderPath,tempLogCache);
  SahiConnector sahiConnector=BeanLoader.loadBean(SahiConnector.class);
  LOGGER.debug(tempLogCache);
  InitializingServiceHelper.invokeInitializingServcies();
  TestSuite result=BeanLoader.loadBean(TestSuite.class);
  try {
    sahiConnector.init();
    LOGGER.debug(""String_Node_Str"");
    sahiConnector.startSahiTestSuite();
  }
 catch (  SakuliProxyException e) {
    LOGGER.error(""String_Node_Str"",e);
    System.exit(99);
  }
 finally {
    ResultServiceHelper.invokeResultServices();
    result=BeanLoader.loadBean(TestSuite.class);
    BeanLoader.releaseContext();
  }
  return result;
}","/** 
 * Executes a specific Sakuli test suite in the assigend 'testSuiteFolder'. A test suite has to contain as minimum following files: <ul> <li>testsuite.suite  = specifies the testcases</li> <li>testsuite.properties  = specifies the runtime settings like the browser for the test suite.</li> </ul>
 * @param testSuiteFolderPath path to the Sakuli test suite
 * @param includeFolderPath   import folder of the 'sakuli.properties' and 'sakuli.js' files
 * @param sahiProxyHomePath   (optional) specifies a different sahi proxy as in the 'sakuli.properties' file
 * @return the {@link TestSuiteState} of the Sakuli test execution.
 * @throws FileNotFoundException
 */
public static TestSuite runTestSuite(String testSuiteFolderPath,String includeFolderPath,String sahiProxyHomePath) throws FileNotFoundException {
  LOGGER.info(String.format(""String_Node_Str"",testSuiteFolderPath));
  String tempLogCache=""String_Node_Str"";
  tempLogCache=checkTestSuiteFolderAndSetContextVariables(testSuiteFolderPath,tempLogCache);
  if (StringUtils.isNotEmpty(sahiProxyHomePath)) {
    tempLogCache=checkSahiProxyHomeAndSetContextVariables(sahiProxyHomePath,tempLogCache);
  }
  tempLogCache=checkIncludeFolderAndSetContextVariables(includeFolderPath,tempLogCache);
  SahiConnector sahiConnector=BeanLoader.loadBean(SahiConnector.class);
  LOGGER.debug(tempLogCache);
  InitializingServiceHelper.invokeInitializingServcies();
  TestSuite result=BeanLoader.loadBean(TestSuite.class);
  try {
    sahiConnector.init();
    LOGGER.debug(""String_Node_Str"");
    sahiConnector.startSahiTestSuite();
  }
 catch (  SakuliProxyException e) {
    LOGGER.error(""String_Node_Str"",e);
    System.exit(99);
  }
 finally {
    ResultServiceHelper.invokeResultServices();
    result=BeanLoader.loadBean(TestSuite.class);
    BeanLoader.releaseContext();
  }
  return result;
}",0.9994588744588744
21178,"/** 
 * The Sakuli-Starter executes a specific sakuli-testsuite. A test suite has to contain as minimum following files: <ul> <li>testsuite.suite  => specifies the testcases</li> <li>testsuite.properties  => specifies the runtime settings like the browser for the test suite.</li> </ul>
 * @param args relative or absolute path to the folder of your test suite
 */
public static void main(String[] args){
  CommandLineParser parser=new PosixParser();
  Options options=new Options();
  Option help=new Option(""String_Node_Str"",""String_Node_Str"");
  Option run=new Option(""String_Node_Str"",""String_Node_Str"");
  Option r=new Option(""String_Node_Str"",""String_Node_Str"");
  Option encrypt=new Option(""String_Node_Str"",true,""String_Node_Str"");
  Option anInterface=new Option(""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(help);
  options.addOption(run);
  options.addOption(r);
  options.addOption(encrypt);
  options.addOption(anInterface);
  try {
    CommandLine cmd=parser.parse(options,args);
    if (cmd.hasOption(run.getOpt()) || cmd.hasOption(r.getOpt())) {
      final String testSuiteFolderPath=args.length > 1 ? args[1] : null;
      final String includeFolderPath=args.length > 2 ? args[2] : null;
      final String sahiProxyHomePath=args.length > 3 ? args[3] : null;
      TestSuite testSuite=runTestSuite(testSuiteFolderPath,includeFolderPath,sahiProxyHomePath);
      System.exit(testSuite.getState().getErrorCode());
    }
 else     if (cmd.hasOption(encrypt.getOpt())) {
      final String ethInterface=cmd.getOptionValue(""String_Node_Str"");
      final String strToEncrypt=cmd.getOptionValue(""String_Node_Str"");
      System.out.printf(""String_Node_Str"",strToEncrypt);
      final Entry<String,String> secret=encryptSecret(strToEncrypt,ethInterface);
      System.out.printf(""String_Node_Str"",secret.getKey(),secret.getValue());
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
 else {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  SakuliCipherException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
catch (  ParseException|FileNotFoundException e) {
    e.printStackTrace();
    System.exit(-1);
  }
}","/** 
 * The Sakuli-Starter executes a specific sakuli-testsuite. A test suite has to contain as minimum following files: <ul> <li>testsuite.suite  - specifies the testcases</li> <li>testsuite.properties  - specifies the runtime settings like the browser for the test suite.</li> </ul>
 * @param args relative or absolute path to the folder of your test suite
 */
public static void main(String[] args){
  CommandLineParser parser=new PosixParser();
  Options options=new Options();
  Option help=new Option(""String_Node_Str"",""String_Node_Str"");
  Option run=new Option(""String_Node_Str"",""String_Node_Str"");
  Option r=new Option(""String_Node_Str"",""String_Node_Str"");
  Option encrypt=new Option(""String_Node_Str"",true,""String_Node_Str"");
  Option anInterface=new Option(""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(help);
  options.addOption(run);
  options.addOption(r);
  options.addOption(encrypt);
  options.addOption(anInterface);
  try {
    CommandLine cmd=parser.parse(options,args);
    if (cmd.hasOption(run.getOpt()) || cmd.hasOption(r.getOpt())) {
      final String testSuiteFolderPath=args.length > 1 ? args[1] : null;
      final String includeFolderPath=args.length > 2 ? args[2] : null;
      final String sahiProxyHomePath=args.length > 3 ? args[3] : null;
      TestSuite testSuite=runTestSuite(testSuiteFolderPath,includeFolderPath,sahiProxyHomePath);
      System.exit(testSuite.getState().getErrorCode());
    }
 else     if (cmd.hasOption(encrypt.getOpt())) {
      final String ethInterface=cmd.getOptionValue(""String_Node_Str"");
      final String strToEncrypt=cmd.getOptionValue(""String_Node_Str"");
      System.out.printf(""String_Node_Str"",strToEncrypt);
      final Entry<String,String> secret=encryptSecret(strToEncrypt,ethInterface);
      System.out.printf(""String_Node_Str"",secret.getKey(),secret.getValue());
      System.out.println(""String_Node_Str"");
      System.exit(0);
    }
 else {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  SakuliCipherException e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"" + e.getMessage());
  }
catch (  ParseException|FileNotFoundException e) {
    e.printStackTrace();
    System.exit(-1);
  }
}",0.9986516853932584
21179,"public static void main(String[] args){
  System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  String dir=DATASET + ""String_Node_Str"" + SUBDIR;
  String path=dir + ""String_Node_Str"" + DATASET+ ""String_Node_Str"";
  if (args.length < 3) {
    System.out.println(""String_Node_Str"");
    return;
  }
  String op=args[0];
  String samplePath=""String_Node_Str"", sampleDir=""String_Node_Str"";
  int sampleCount=1;
  if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else {
    System.out.println(""String_Node_Str"");
    return;
  }
  String subdir=""String_Node_Str"";
  sampleDir+=subdir;
  samplePath+=(sampleDir + ""String_Node_Str"" + args[2]);
  boolean narrowFolksonomy=args[1].equals(""String_Node_Str"");
  if (op.equals(""String_Node_Str"")) {
    startCfTagCalculator(sampleDir,samplePath,sampleCount,20,-5,false);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startCfTagCalculator(sampleDir,samplePath,sampleCount,20,-5,!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startFolkRankCalculator(sampleDir,samplePath,sampleCount);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startActCalculator(sampleDir,samplePath,sampleCount,-5,-5,!narrowFolksonomy,CalculationType.NONE,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    if (!narrowFolksonomy) {
      startActCalculator(sampleDir,samplePath,sampleCount,-5,-5,!narrowFolksonomy,CalculationType.USER_TO_RESOURCE,true);
    }
  }
 else   if (op.equals(""String_Node_Str"")) {
    startRecCalculator(sampleDir,samplePath,!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startModelCalculator(sampleDir,samplePath,sampleCount,-5,!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startBaselineCalculator(sampleDir,samplePath,sampleCount,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    start3LayersJavaCalculator(sampleDir,samplePath,""String_Node_Str"",sampleCount,-5,-5,!narrowFolksonomy,false,false);
  }
 else   if (op.equals(""String_Node_Str"")) {
    start3LayersJavaCalculator(sampleDir,samplePath,""String_Node_Str"",sampleCount,-5,-5,!narrowFolksonomy,true,false);
    start3LayersJavaCalculator(sampleDir,samplePath,""String_Node_Str"",sampleCount,-5,-5,!narrowFolksonomy,false,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startLdaCalculator(sampleDir,samplePath,1000,sampleCount,!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    createLdaSamples(samplePath,sampleCount,1000,true,false);
  }
 else   if (op.equals(""String_Node_Str"")) {
    writeTensorFiles(samplePath,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    writeTensorFiles(samplePath,false);
  }
 else   if (op.equals(""String_Node_Str"")) {
    BookmarkSplitter.calculateCore(samplePath,samplePath,3,3,3);
  }
 else   if (op.equals(""String_Node_Str"")) {
    BookmarkSplitter.splitSample(samplePath,samplePath,sampleCount,0,true,false,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    BookmarkSplitter.splitSample(samplePath,samplePath,sampleCount,20,false,false,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    BookmarkSplitter.drawUserPercentageSample(samplePath,3,1);
  }
 else   if (op.equals(""String_Node_Str"")) {
    sampleCount=4;
    BookmarkSplitter.drawUserPercentageSample(samplePath,3,sampleCount);
    for (int i=1; i <= sampleCount; i++) {
      BookmarkSplitter.splitSample(samplePath + i,samplePath + i,1,0,true,true,true);
    }
  }
 else   if (op.equals(""String_Node_Str"")) {
    BibsonomyProcessor.processUnsortedFile(sampleDir,""String_Node_Str"",args[2]);
  }
 else   if (op.equals(""String_Node_Str"")) {
    CiteULikeProcessor.processFile(""String_Node_Str"",args[2]);
  }
 else   if (op.equals(""String_Node_Str"")) {
    LastFMProcessor.processFile(""String_Node_Str"",args[2]);
  }
 else   if (op.equals(""String_Node_Str"")) {
    MovielensProcessor.processFile(""String_Node_Str"",args[2],""String_Node_Str"");
  }
 else   if (op.equals(""String_Node_Str"")) {
    PintsProcessor.processFile(sampleDir,""String_Node_Str"",args[2]);
  }
 else   if (op.equals(""String_Node_Str"")) {
    PintsProcessor.processFile(sampleDir,""String_Node_Str"",args[2]);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startBaselineCalculatorForResources(sampleDir,samplePath,sampleCount,false);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startCfResourceCalculator(sampleDir,samplePath,sampleCount,20,true,false,false,false,Features.TAGS);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startCfResourceCalculator(sampleDir,samplePath,sampleCount,20,true,false,false,false,Features.ENTITIES);
  }
 else   if (op.equals(""String_Node_Str"")) {
    TOPIC_NAME=""String_Node_Str"";
    startCfResourceCalculator(dir,path,1,20,false,true,false,false,Features.TOPICS);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startZhengResourceCalculator(sampleDir,samplePath,sampleCount);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startHuangResourceCalculator(sampleDir,samplePath,sampleCount);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startResourceCIRTTCalculator(sampleDir,samplePath,""String_Node_Str"",sampleCount,20,Features.ENTITIES,false,true,false,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startSustainApproach(dir,path,2.845,0.5,6.396,0.0936,0,0,20,0.5);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startAllTagRecommenderApproaches(sampleDir,samplePath,!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startSampleTagRecommenderApproaches(sampleDir,samplePath + ""String_Node_Str"",!narrowFolksonomy);
    startSampleTagRecommenderApproaches(sampleDir,samplePath + ""String_Node_Str"",!narrowFolksonomy);
    startSampleTagRecommenderApproaches(sampleDir,samplePath + ""String_Node_Str"",!narrowFolksonomy);
    startSampleTagRecommenderApproaches(sampleDir,samplePath + ""String_Node_Str"",!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    try {
      getStatistics(samplePath,false);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}","public static void main(String[] args){
  System.out.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  String dir=DATASET + ""String_Node_Str"" + SUBDIR;
  String path=dir + ""String_Node_Str"" + DATASET+ ""String_Node_Str"";
  if (args.length < 3) {
    System.out.println(""String_Node_Str"");
    return;
  }
  String op=args[0];
  String samplePath=""String_Node_Str"", sampleDir=""String_Node_Str"";
  int sampleCount=1;
  if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else   if (args[1].equals(""String_Node_Str"")) {
    sampleDir=""String_Node_Str"";
  }
 else {
    System.out.println(""String_Node_Str"");
    return;
  }
  String subdir=""String_Node_Str"";
  sampleDir+=subdir;
  samplePath+=(sampleDir + ""String_Node_Str"" + args[2]);
  boolean narrowFolksonomy=args[1].equals(""String_Node_Str"");
  if (op.equals(""String_Node_Str"")) {
    startCfTagCalculator(sampleDir,samplePath,sampleCount,20,-5,false);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startCfTagCalculator(sampleDir,samplePath,sampleCount,20,-5,!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startFolkRankCalculator(sampleDir,samplePath,sampleCount);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startActCalculator(sampleDir,samplePath,sampleCount,-5,-5,!narrowFolksonomy,CalculationType.NONE,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    if (!narrowFolksonomy) {
      startActCalculator(sampleDir,samplePath,sampleCount,-5,-5,!narrowFolksonomy,CalculationType.USER_TO_RESOURCE,true);
    }
  }
 else   if (op.equals(""String_Node_Str"")) {
    startRecCalculator(sampleDir,samplePath,!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startModelCalculator(sampleDir,samplePath,sampleCount,-5,!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startBaselineCalculator(sampleDir,samplePath,sampleCount,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    start3LayersJavaCalculator(sampleDir,samplePath,""String_Node_Str"",sampleCount,-5,-5,!narrowFolksonomy,false,false);
  }
 else   if (op.equals(""String_Node_Str"")) {
    start3LayersJavaCalculator(sampleDir,samplePath,""String_Node_Str"",sampleCount,-5,-5,!narrowFolksonomy,true,false);
    start3LayersJavaCalculator(sampleDir,samplePath,""String_Node_Str"",sampleCount,-5,-5,!narrowFolksonomy,false,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startLdaCalculator(sampleDir,samplePath,1000,sampleCount,!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    createLdaSamples(samplePath,sampleCount,1000,true,false);
  }
 else   if (op.equals(""String_Node_Str"")) {
    writeTensorFiles(samplePath,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    writeTensorFiles(samplePath,false);
  }
 else   if (op.equals(""String_Node_Str"")) {
    BookmarkSplitter.calculateCore(samplePath,samplePath,3,3,3);
  }
 else   if (op.equals(""String_Node_Str"")) {
    BookmarkSplitter.splitSample(samplePath,samplePath,sampleCount,0,true,false,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    BookmarkSplitter.splitSample(samplePath,samplePath,sampleCount,20,false,false,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    BookmarkSplitter.drawUserPercentageSample(samplePath,3,1);
  }
 else   if (op.equals(""String_Node_Str"")) {
    sampleCount=4;
    for (int i=1; i <= sampleCount; i++) {
      if (!narrowFolksonomy) {
        BookmarkSplitter.calculateCore(samplePath + i,samplePath + ""String_Node_Str"" + i,3,3,3);
      }
 else {
        BookmarkSplitter.calculateCore(samplePath + i,samplePath + ""String_Node_Str"" + i,3,1,3);
      }
      BookmarkSplitter.splitSample(samplePath + ""String_Node_Str"" + i,samplePath + ""String_Node_Str"" + i,1,0,true,true,true);
    }
  }
 else   if (op.equals(""String_Node_Str"")) {
    sampleCount=4;
    BookmarkSplitter.drawUserPercentageSample(samplePath,3,sampleCount);
    for (int i=1; i <= sampleCount; i++) {
      BookmarkSplitter.splitSample(samplePath + i,samplePath + i,1,0,true,true,true);
    }
  }
 else   if (op.equals(""String_Node_Str"")) {
    BibsonomyProcessor.processUnsortedFile(sampleDir,""String_Node_Str"",args[2]);
  }
 else   if (op.equals(""String_Node_Str"")) {
    CiteULikeProcessor.processFile(""String_Node_Str"",args[2]);
  }
 else   if (op.equals(""String_Node_Str"")) {
    LastFMProcessor.processFile(""String_Node_Str"",args[2]);
  }
 else   if (op.equals(""String_Node_Str"")) {
    MovielensProcessor.processFile(""String_Node_Str"",args[2],""String_Node_Str"");
  }
 else   if (op.equals(""String_Node_Str"")) {
    PintsProcessor.processFile(sampleDir,""String_Node_Str"",args[2]);
  }
 else   if (op.equals(""String_Node_Str"")) {
    PintsProcessor.processFile(sampleDir,""String_Node_Str"",args[2]);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startBaselineCalculatorForResources(sampleDir,samplePath,sampleCount,false);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startCfResourceCalculator(sampleDir,samplePath,sampleCount,20,true,false,false,false,Features.TAGS);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startCfResourceCalculator(sampleDir,samplePath,sampleCount,20,true,false,false,false,Features.ENTITIES);
  }
 else   if (op.equals(""String_Node_Str"")) {
    TOPIC_NAME=""String_Node_Str"";
    startCfResourceCalculator(dir,path,1,20,false,true,false,false,Features.TOPICS);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startZhengResourceCalculator(sampleDir,samplePath,sampleCount);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startHuangResourceCalculator(sampleDir,samplePath,sampleCount);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startResourceCIRTTCalculator(sampleDir,samplePath,""String_Node_Str"",sampleCount,20,Features.ENTITIES,false,true,false,true);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startSustainApproach(dir,path,2.845,0.5,6.396,0.0936,0,0,20,0.5);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startAllTagRecommenderApproaches(sampleDir,samplePath,!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    startSampleTagRecommenderApproaches(sampleDir,samplePath + ""String_Node_Str"",!narrowFolksonomy);
    startSampleTagRecommenderApproaches(sampleDir,samplePath + ""String_Node_Str"",!narrowFolksonomy);
    startSampleTagRecommenderApproaches(sampleDir,samplePath + ""String_Node_Str"",!narrowFolksonomy);
    startSampleTagRecommenderApproaches(sampleDir,samplePath + ""String_Node_Str"",!narrowFolksonomy);
  }
 else   if (op.equals(""String_Node_Str"")) {
    try {
      getStatistics(samplePath,false);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}",0.9655172413793104
21180,"private Map<Integer,Double> getRankedTagListSocialBLLHybrid(int userID,Long timesString,double beta,double exponentSocial){
  Map<Integer,Double> rankedList=new HashMap<Integer,Double>();
  String user=this.users.get(userID);
  List<String> friendList=network.get(user);
  HashMap<Integer,Double> tagRank=new HashMap<Integer,Double>();
  if (friendList == null) {
    return rankedList;
  }
  for (  String friend : friendList) {
    HashMap<Integer,ArrayList<Long>> tagTimestampMap=userTagTimes.get(friend);
    if (tagTimestampMap != null) {
      for (      Integer tag : tagTimestampMap.keySet()) {
        ArrayList<Long> timestampList=tagTimestampMap.get(tag);
        for (        Long timestampLong : timestampList) {
          if (timesString > timestampLong) {
            long duration=timesString - timestampLong;
            if (tagRank.containsKey(tag)) {
              tagRank.put(tag,tagRank.get(tag) + Math.pow(duration,(-1) * (exponentSocial)));
            }
 else {
              tagRank.put(tag,Math.pow(duration,(-0.5)));
            }
          }
        }
      }
    }
  }
  double denom=0.0;
  if (tagRank != null) {
    for (    Map.Entry<Integer,Double> entry : tagRank.entrySet()) {
      if (entry != null) {
        double actVal=Math.log(entry.getValue());
        denom+=Math.exp(actVal);
        entry.setValue(actVal);
      }
    }
    for (    Map.Entry<Integer,Double> entry : tagRank.entrySet()) {
      if (entry != null) {
        double actVal=Math.exp(entry.getValue());
        entry.setValue(actVal / denom);
      }
    }
  }
  Map<Integer,Double> resultMap=this.bllMapTagValues.get(userID);
  Map<Integer,Double> sortedResultMap=new TreeMap<Integer,Double>(new DoubleMapComparator(resultMap));
  sortedResultMap.putAll(resultMap);
  if (userID == 0)   System.out.println(sortedResultMap);
  sortedResultMap=new TreeMap<Integer,Double>(new DoubleMapComparator(tagRank));
  sortedResultMap.putAll(tagRank);
  if (userID == 0)   System.out.println(sortedResultMap);
  for (  Map.Entry<Integer,Double> entry : tagRank.entrySet()) {
    Double val=resultMap.get(entry.getKey());
    resultMap.put(entry.getKey(),val == null ? (beta) * entry.getValue().doubleValue() : (1 - beta) * val.doubleValue() + (beta) * entry.getValue().doubleValue());
  }
  sortedResultMap=new TreeMap<Integer,Double>(new DoubleMapComparator(resultMap));
  sortedResultMap.putAll(resultMap);
  if (userID == 0) {
    System.out.println(sortedResultMap);
    System.out.println(""String_Node_Str"");
  }
  return sortedResultMap;
}","private Map<Integer,Double> getRankedTagListSocialBLLHybrid(int userID,Long timesString,double beta,double exponentSocial){
  Map<Integer,Double> rankedList=new HashMap<Integer,Double>();
  String user=this.users.get(userID);
  List<String> friendList=network.get(user);
  HashMap<Integer,Double> tagRank=new HashMap<Integer,Double>();
  if (friendList != null) {
    for (    String friend : friendList) {
      HashMap<Integer,ArrayList<Long>> tagTimestampMap=userTagTimes.get(friend);
      if (tagTimestampMap != null) {
        for (        Integer tag : tagTimestampMap.keySet()) {
          ArrayList<Long> timestampList=tagTimestampMap.get(tag);
          for (          Long timestampLong : timestampList) {
            if (timesString > timestampLong) {
              long duration=timesString - timestampLong;
              if (tagRank.containsKey(tag)) {
                tagRank.put(tag,tagRank.get(tag) + Math.pow(duration,(-1) * (exponentSocial)));
              }
 else {
                tagRank.put(tag,Math.pow(duration,(-0.5)));
              }
            }
          }
        }
      }
    }
    double denom=0.0;
    if (tagRank != null) {
      for (      Map.Entry<Integer,Double> entry : tagRank.entrySet()) {
        if (entry != null) {
          double actVal=Math.log(entry.getValue());
          denom+=Math.exp(actVal);
          entry.setValue(actVal);
        }
      }
      for (      Map.Entry<Integer,Double> entry : tagRank.entrySet()) {
        if (entry != null) {
          double actVal=Math.exp(entry.getValue());
          entry.setValue(actVal / denom);
        }
      }
    }
  }
  Map<Integer,Double> resultMap=this.bllMapTagValues.get(userID);
  for (  Map.Entry<Integer,Double> entry : tagRank.entrySet()) {
    Double val=resultMap.get(entry.getKey());
    resultMap.put(entry.getKey(),val == null ? (beta) * entry.getValue().doubleValue() : (1 - beta) * val.doubleValue() + (beta) * entry.getValue().doubleValue());
  }
  Map<Integer,Double> sortedResultMap=new TreeMap<Integer,Double>(new DoubleMapComparator(resultMap));
  sortedResultMap.putAll(resultMap);
  return sortedResultMap;
}",0.1737830913748932
21181,"private boolean checkForDuplicate(Bookmark userData){
  boolean dup=false;
  if (this.userResPairs.contains(userData.getUserID() + ""String_Node_Str"" + userData.getWikiID())) {
    dup=true;
  }
  this.userResPairs.add(userData.getUserID() + ""String_Node_Str"" + userData.getWikiID());
  return dup;
}","private boolean checkForDuplicate(Bookmark userData){
  boolean dup=false;
  if (this.userResPairs.contains(userData.getUserID() + ""String_Node_Str"" + userData.getResourceID())) {
    dup=true;
  }
  this.userResPairs.add(userData.getUserID() + ""String_Node_Str"" + userData.getResourceID());
  return dup;
}",0.9603960396039604
21182,"public Map<Integer,List<Integer>> getResourcesOfTestUsers(int trainSize){
  Map<Integer,List<Integer>> resourcesMap=new HashMap<Integer,List<Integer>>();
  if (trainSize == -1) {
    trainSize=0;
  }
  for (int i=trainSize; i < getBookmarks().size(); i++) {
    Bookmark data=getBookmarks().get(i);
    int userID=data.getUserID();
    List<Integer> resources=resourcesMap.get(userID);
    if (resources == null) {
      resources=new ArrayList<Integer>();
    }
    resources.add(data.getWikiID());
    resourcesMap.put(userID,resources);
  }
  return resourcesMap;
}","public Map<Integer,List<Integer>> getResourcesOfTestUsers(int trainSize){
  Map<Integer,List<Integer>> resourcesMap=new HashMap<Integer,List<Integer>>();
  if (trainSize == -1) {
    trainSize=0;
  }
  for (int i=trainSize; i < getBookmarks().size(); i++) {
    Bookmark data=getBookmarks().get(i);
    int userID=data.getUserID();
    List<Integer> resources=resourcesMap.get(userID);
    if (resources == null) {
      resources=new ArrayList<Integer>();
    }
    resources.add(data.getResourceID());
    resourcesMap.put(userID,resources);
  }
  return resourcesMap;
}",0.9894736842105264
21183,"public boolean writeFile(String filename){
  try {
    FileWriter writer=new FileWriter(new File(""String_Node_Str"" + filename + ""String_Node_Str""));
    BufferedWriter bw=new BufferedWriter(writer);
    for (int i=0; i < this.results.size(); i++) {
      int j=0;
      String resultString=""String_Node_Str"";
      int[] userResults=this.results.get(i);
      Bookmark userData=this.reader.getTestLines().get(i);
      List<Integer> userCats=userData.getTags();
      resultString+=(userData.getUserID() + (userData.getWikiID() == -1 ? ""String_Node_Str"" : ""String_Node_Str"" + userData.getWikiID()) + ""String_Node_Str"");
      for (      int c : userCats) {
        resultString+=(c + ""String_Node_Str"");
      }
      if (userCats.size() > 0) {
        resultString=resultString.substring(0,resultString.length() - 2);
      }
      resultString+=""String_Node_Str"";
      j=0;
      for (      int c : userResults) {
        if (j++ < OUTPUT_LIMIT) {
          resultString+=(c + ""String_Node_Str"");
        }
 else {
          break;
        }
      }
      if (userResults.length > 0) {
        resultString=resultString.substring(0,resultString.length() - 2);
      }
      resultString+=""String_Node_Str"";
      bw.write(resultString);
    }
    bw.flush();
    bw.close();
    return true;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return false;
}","public boolean writeFile(String filename){
  try {
    FileWriter writer=new FileWriter(new File(""String_Node_Str"" + filename + ""String_Node_Str""));
    BufferedWriter bw=new BufferedWriter(writer);
    for (int i=0; i < this.results.size(); i++) {
      int j=0;
      String resultString=""String_Node_Str"";
      int[] userResults=this.results.get(i);
      Bookmark userData=this.reader.getTestLines().get(i);
      List<Integer> userCats=userData.getTags();
      resultString+=(userData.getUserID() + (userData.getResourceID() == -1 ? ""String_Node_Str"" : ""String_Node_Str"" + userData.getResourceID()) + ""String_Node_Str"");
      for (      int c : userCats) {
        resultString+=(c + ""String_Node_Str"");
      }
      if (userCats.size() > 0) {
        resultString=resultString.substring(0,resultString.length() - 2);
      }
      resultString+=""String_Node_Str"";
      j=0;
      for (      int c : userResults) {
        if (j++ < OUTPUT_LIMIT) {
          resultString+=(c + ""String_Node_Str"");
        }
 else {
          break;
        }
      }
      if (userResults.length > 0) {
        resultString=resultString.substring(0,resultString.length() - 2);
      }
      resultString+=""String_Node_Str"";
      bw.write(resultString);
    }
    bw.flush();
    bw.close();
    return true;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return false;
}",0.9912790697674418
21184,"/** 
 * Fills for every user a map which contains weights (based on tag, time and tag-time score) for his resources
 */
private void fillChengWeights(){
  for (  Bookmark data : trainList) {
    int user=data.getUserID();
    int resource=data.getWikiID();
    List<Integer> tags=data.getTags();
    Map<Integer,Double> tagUserWeights=null;
    if (user >= userTagWeights.size()) {
      tagUserWeights=new LinkedHashMap<Integer,Double>();
      userTagWeights.add(tagUserWeights);
    }
 else {
      tagUserWeights=userTagWeights.get(user);
    }
    Map<Integer,Double> tagResourceWeights=resourceTagWeights.get(resource);
    if (tagResourceWeights == null) {
      tagResourceWeights=new HashMap<Integer,Double>();
    }
    for (    Integer tag : tags) {
      if (!tagUserWeights.containsKey(tag)) {
        tagUserWeights.put(tag,huangApproach.getUserTagWeight(user,tag));
      }
      if (!tagResourceWeights.containsKey(tag)) {
        tagResourceWeights.put(tag,huangApproach.getItemTagWeight(resource,tag));
      }
    }
    resourceTagWeights.put(resource,tagResourceWeights);
  }
}","/** 
 * Fills for every user a map which contains weights (based on tag, time and tag-time score) for his resources
 */
private void fillChengWeights(){
  for (  Bookmark data : trainList) {
    int user=data.getUserID();
    int resource=data.getResourceID();
    List<Integer> tags=data.getTags();
    Map<Integer,Double> tagUserWeights=null;
    if (user >= userTagWeights.size()) {
      tagUserWeights=new LinkedHashMap<Integer,Double>();
      userTagWeights.add(tagUserWeights);
    }
 else {
      tagUserWeights=userTagWeights.get(user);
    }
    Map<Integer,Double> tagResourceWeights=resourceTagWeights.get(resource);
    if (tagResourceWeights == null) {
      tagResourceWeights=new HashMap<Integer,Double>();
    }
    for (    Integer tag : tags) {
      if (!tagUserWeights.containsKey(tag)) {
        tagUserWeights.put(tag,huangApproach.getUserTagWeight(user,tag));
      }
      if (!tagResourceWeights.containsKey(tag)) {
        tagResourceWeights.put(tag,huangApproach.getItemTagWeight(resource,tag));
      }
    }
    resourceTagWeights.put(resource,tagResourceWeights);
  }
}",0.994540491355778
21185,"public ZhengApproach(List<Bookmark> trainList){
  userResourceTagMaping=new HashMap<Integer,Map<Integer,List<Integer>>>();
  userResourceTimeMaping=new HashMap<Integer,Map<Integer,Long>>();
  userMaxTimeMaping=new HashMap<Integer,Long>();
  userMinTimeMaping=new HashMap<Integer,Long>();
  for (  Bookmark trainData : trainList) {
    Integer userID=trainData.getUserID();
    Integer resID=trainData.getWikiID();
    List<Integer> tags=trainData.getTags();
    Long day=TimeUnit.SECONDS.toDays(Long.parseLong(trainData.getTimestamp()));
    Map<Integer,List<Integer>> resourceTagMaping=userResourceTagMaping.get(userID);
    Map<Integer,Long> resourceTimeMaping=userResourceTimeMaping.get(userID);
    if (resourceTagMaping == null) {
      resourceTagMaping=new HashMap<Integer,List<Integer>>();
    }
    if (resourceTimeMaping == null) {
      resourceTimeMaping=new HashMap<Integer,Long>();
    }
    resourceTagMaping.put(resID,tags);
    resourceTimeMaping.put(resID,day);
    Long maxUserTime=userMaxTimeMaping.get(userID);
    Long minUserTime=userMinTimeMaping.get(userID);
    if (maxUserTime == null) {
      maxUserTime=day;
      minUserTime=day;
    }
 else {
      if (maxUserTime < day) {
        maxUserTime=day;
      }
      if (minUserTime > day) {
        minUserTime=day;
      }
    }
    userMaxTimeMaping.put(userID,maxUserTime);
    userMinTimeMaping.put(userID,minUserTime);
    userResourceTagMaping.put(userID,resourceTagMaping);
    userResourceTimeMaping.put(userID,resourceTimeMaping);
  }
}","public ZhengApproach(List<Bookmark> trainList){
  userResourceTagMaping=new HashMap<Integer,Map<Integer,List<Integer>>>();
  userResourceTimeMaping=new HashMap<Integer,Map<Integer,Long>>();
  userMaxTimeMaping=new HashMap<Integer,Long>();
  userMinTimeMaping=new HashMap<Integer,Long>();
  for (  Bookmark trainData : trainList) {
    Integer userID=trainData.getUserID();
    Integer resID=trainData.getResourceID();
    List<Integer> tags=trainData.getTags();
    Long day=TimeUnit.SECONDS.toDays(Long.parseLong(trainData.getTimestamp()));
    Map<Integer,List<Integer>> resourceTagMaping=userResourceTagMaping.get(userID);
    Map<Integer,Long> resourceTimeMaping=userResourceTimeMaping.get(userID);
    if (resourceTagMaping == null) {
      resourceTagMaping=new HashMap<Integer,List<Integer>>();
    }
    if (resourceTimeMaping == null) {
      resourceTimeMaping=new HashMap<Integer,Long>();
    }
    resourceTagMaping.put(resID,tags);
    resourceTimeMaping.put(resID,day);
    Long maxUserTime=userMaxTimeMaping.get(userID);
    Long minUserTime=userMinTimeMaping.get(userID);
    if (maxUserTime == null) {
      maxUserTime=day;
      minUserTime=day;
    }
 else {
      if (maxUserTime < day) {
        maxUserTime=day;
      }
      if (minUserTime > day) {
        minUserTime=day;
      }
    }
    userMaxTimeMaping.put(userID,maxUserTime);
    userMinTimeMaping.put(userID,minUserTime);
    userResourceTagMaping.put(userID,resourceTagMaping);
    userResourceTimeMaping.put(userID,resourceTimeMaping);
  }
}",0.9960681520314548
21186,"public static List<Map<Integer,Double>> getArtifactMaps(BookmarkReader reader,List<Bookmark> userLines,List<Bookmark> testLines,boolean resource,List<Long> timestampList,List<Double> denomList,double dVal,boolean normalize){
  List<Map<Integer,Double>> maps=new ArrayList<Map<Integer,Double>>();
  for (  Bookmark data : userLines) {
    int refID=0;
    if (resource) {
      refID=data.getWikiID();
    }
 else {
      refID=data.getUserID();
    }
    long baselineTimestamp=-1;
    if (refID >= maps.size()) {
      if (resource) {
        baselineTimestamp=1;
      }
 else {
        baselineTimestamp=Utilities.getBaselineTimestamp(testLines,refID,false);
      }
      timestampList.add(baselineTimestamp);
      if (baselineTimestamp != -1) {
        maps.add(addActValue(data,new LinkedHashMap<Integer,Double>(),baselineTimestamp,resource,dVal));
      }
 else {
        maps.add(null);
      }
    }
 else {
      baselineTimestamp=timestampList.get(refID);
      if (baselineTimestamp != -1) {
        addActValue(data,maps.get(refID),baselineTimestamp,resource,dVal);
      }
    }
  }
  for (  Map<Integer,Double> map : maps) {
    double denom=0.0;
    if (map != null) {
      for (      Map.Entry<Integer,Double> entry : map.entrySet()) {
        if (entry != null) {
          double actVal=Math.log(entry.getValue());
          denom+=Math.exp(actVal);
          entry.setValue(actVal);
        }
      }
      denomList.add(denom);
      if (normalize) {
        for (        Map.Entry<Integer,Double> entry : map.entrySet()) {
          if (entry != null) {
            double actVal=Math.exp(entry.getValue());
            entry.setValue(actVal / denom);
          }
        }
      }
    }
  }
  return maps;
}","public static List<Map<Integer,Double>> getArtifactMaps(BookmarkReader reader,List<Bookmark> userLines,List<Bookmark> testLines,boolean resource,List<Long> timestampList,List<Double> denomList,double dVal,boolean normalize){
  List<Map<Integer,Double>> maps=new ArrayList<Map<Integer,Double>>();
  for (  Bookmark data : userLines) {
    int refID=0;
    if (resource) {
      refID=data.getResourceID();
    }
 else {
      refID=data.getUserID();
    }
    long baselineTimestamp=-1;
    if (refID >= maps.size()) {
      if (resource) {
        baselineTimestamp=1;
      }
 else {
        baselineTimestamp=Utilities.getBaselineTimestamp(testLines,refID,false);
      }
      timestampList.add(baselineTimestamp);
      if (baselineTimestamp != -1) {
        maps.add(addActValue(data,new LinkedHashMap<Integer,Double>(),baselineTimestamp,resource,dVal));
      }
 else {
        maps.add(null);
      }
    }
 else {
      baselineTimestamp=timestampList.get(refID);
      if (baselineTimestamp != -1) {
        addActValue(data,maps.get(refID),baselineTimestamp,resource,dVal);
      }
    }
  }
  for (  Map<Integer,Double> map : maps) {
    double denom=0.0;
    if (map != null) {
      for (      Map.Entry<Integer,Double> entry : map.entrySet()) {
        if (entry != null) {
          double actVal=Math.log(entry.getValue());
          denom+=Math.exp(actVal);
          entry.setValue(actVal);
        }
      }
      denomList.add(denom);
      if (normalize) {
        for (        Map.Entry<Integer,Double> entry : map.entrySet()) {
          if (entry != null) {
            double actVal=Math.exp(entry.getValue());
            entry.setValue(actVal / denom);
          }
        }
      }
    }
  }
  return maps;
}",0.9965397923875432
21187,"private static List<Map<Integer,Double>> startActCreation(BookmarkReader reader,int sampleSize,boolean sorting,boolean userBased,boolean resBased,int dVal,int beta,CalculationType cType){
  int size=reader.getBookmarks().size();
  int trainSize=size - sampleSize;
  Stopwatch timer=new Stopwatch();
  timer.start();
  BLLCalculator calculator=new BLLCalculator(reader,trainSize,dVal,beta,userBased,resBased,cType);
  timer.stop();
  long trainingTime=timer.elapsed(TimeUnit.MILLISECONDS);
  List<Map<Integer,Double>> results=new ArrayList<Map<Integer,Double>>();
  if (trainSize == size) {
    trainSize=0;
  }
  timer.reset();
  timer.start();
  for (int i=trainSize; i < size; i++) {
    Bookmark data=reader.getBookmarks().get(i);
    Map<Integer,Double> map=calculator.getRankedTagList(data.getUserID(),data.getWikiID(),sorting,cType);
    results.add(map);
  }
  timer.stop();
  long testTime=timer.elapsed(TimeUnit.MILLISECONDS);
  timeString=PerformanceMeasurement.addTimeMeasurement(timeString,true,trainingTime,testTime,sampleSize);
  return results;
}","private static List<Map<Integer,Double>> startActCreation(BookmarkReader reader,int sampleSize,boolean sorting,boolean userBased,boolean resBased,int dVal,int beta,CalculationType cType){
  int size=reader.getBookmarks().size();
  int trainSize=size - sampleSize;
  Stopwatch timer=new Stopwatch();
  timer.start();
  BLLCalculator calculator=new BLLCalculator(reader,trainSize,dVal,beta,userBased,resBased,cType);
  timer.stop();
  long trainingTime=timer.elapsed(TimeUnit.MILLISECONDS);
  List<Map<Integer,Double>> results=new ArrayList<Map<Integer,Double>>();
  if (trainSize == size) {
    trainSize=0;
  }
  timer.reset();
  timer.start();
  for (int i=trainSize; i < size; i++) {
    Bookmark data=reader.getBookmarks().get(i);
    Map<Integer,Double> map=calculator.getRankedTagList(data.getUserID(),data.getResourceID(),sorting,cType);
    results.add(map);
  }
  timer.stop();
  long testTime=timer.elapsed(TimeUnit.MILLISECONDS);
  timeString=PerformanceMeasurement.addTimeMeasurement(timeString,true,trainingTime,testTime,sampleSize);
  return results;
}",0.9943555973659456
21188,"public static List<Integer> getResourcesFromUser(List<Bookmark> lines,int userID){
  Set<Integer> resourceList=new HashSet<Integer>();
  for (  Bookmark data : lines) {
    if (data.userID == userID) {
      resourceList.add(data.resID);
    }
  }
  return new ArrayList<Integer>(resourceList);
}","public static List<Integer> getResourcesFromUser(List<Bookmark> lines,int userID){
  if (userID == -1) {
    return null;
  }
  Set<Integer> resourceList=new HashSet<Integer>();
  for (  Bookmark data : lines) {
    if (data.userID == userID) {
      resourceList.add(data.resID);
    }
  }
  return new ArrayList<Integer>(resourceList);
}",0.9322834645669292
21189,"public synchronized Map<String,Double> getEntitiesWithLikelihood(String user,String resource,List<String> topics,Integer count,Boolean filterOwnEntities){
  if (count == null || count.doubleValue() < 1) {
    count=10;
  }
  if (filterOwnEntities == null) {
    filterOwnEntities=true;
  }
  Map<String,Double> resourceMap=new LinkedHashMap<>();
  if (this.reader == null || this.calculator == null) {
    System.out.println(""String_Node_Str"");
    return resourceMap;
  }
  int userID=-1;
  if (user != null) {
    userID=this.reader.getUsers().indexOf(user);
  }
  Map<Integer,Double> resourceIDs=this.calculator.getRankedResourcesList(userID,true,false,false,filterOwnEntities.booleanValue());
  for (  Map.Entry<Integer,Double> tEntry : resourceIDs.entrySet()) {
    if (resourceMap.size() < count) {
      resourceMap.put(this.reader.getResources().get(tEntry.getKey()),tEntry.getValue());
    }
  }
  if (resourceMap.size() < count) {
    for (    Map.Entry<String,Double> t : this.topResources.entrySet()) {
      if (resourceMap.size() < count) {
        if (!resourceMap.containsKey(t.getKey())) {
          resourceMap.put(t.getKey(),t.getValue());
        }
      }
 else {
        break;
      }
    }
  }
  return resourceMap;
}","public synchronized Map<String,Double> getEntitiesWithLikelihood(String user,String resource,List<String> topics,Integer count,Boolean filterOwnEntities){
  if (count == null || count.doubleValue() < 1) {
    count=10;
  }
  if (filterOwnEntities == null) {
    filterOwnEntities=true;
  }
  Map<String,Double> resourceMap=new LinkedHashMap<>();
  if (this.reader == null || this.calculator == null) {
    System.out.println(""String_Node_Str"");
    return resourceMap;
  }
  int userID=-1;
  if (user != null) {
    userID=this.reader.getUsers().indexOf(user);
  }
  List<Integer> userResources=null;
  if (filterOwnEntities.booleanValue()) {
    userResources=Bookmark.getResourcesFromUser(this.reader.getBookmarks(),userID);
  }
  Map<Integer,Double> resourceIDs=this.calculator.getRankedResourcesList(userID,true,false,false,filterOwnEntities.booleanValue());
  for (  Map.Entry<Integer,Double> tEntry : resourceIDs.entrySet()) {
    if (resourceMap.size() < count) {
      resourceMap.put(this.reader.getResources().get(tEntry.getKey()),tEntry.getValue());
    }
  }
  if (resourceMap.size() < count) {
    for (    Map.Entry<String,Double> t : this.topResources.entrySet()) {
      if (resourceMap.size() < count) {
        if (!resourceMap.containsKey(t.getKey()) && (userResources == null || userResources.contains(t.getKey()))) {
          resourceMap.put(t.getKey(),t.getValue());
        }
      }
 else {
        break;
      }
    }
  }
  return resourceMap;
}",0.9148544047180244
21190,"public double updateModelWithConceptDrift(DataOnMemory<DataInstance> batch){
  this.plateuStructure.setEvidence(batch.getList());
  if (firstBatch) {
    firstBatch=false;
    this.plateuStructure.runInference();
    posteriorT_1=this.plateuStructure.getPlateauNaturalParameterPosterior();
    this.plateuStructure.updateNaturalParameterPrior(posteriorT_1);
    return this.plateuStructure.getLogProbabilityOfEvidence();
  }
  for (int i=0; i < prior.getNumberOfBaseVectors(); i++) {
    for (int j=0; j < this.hppVal.length; j++) {
      this.ef_TExpQ[i].getNaturalParameters().set(j,this.ef_TExpP.getNaturalParameters().get(j));
    }
    this.ef_TExpQ[i].setUpperInterval(this.ef_TExpP.getUpperInterval());
    this.ef_TExpQ[i].setLowerInterval(this.ef_TExpP.getLowerInterval());
  }
  boolean convergence=false;
  double elbo=Double.NaN;
  double niter=0;
  while (!convergence && niter < 10) {
    double[] lambda=new double[prior.getNumberOfBaseVectors()];
    for (int i=0; i < lambda.length; i++) {
      lambda[i]=this.ef_TExpQ[i].getMomentParameters().get(0);
    }
    CompoundVector newPrior=Serialization.deepCopy(prior);
    for (int i=0; i < lambda.length; i++) {
      newPrior.getVectorByPosition(i).multiplyBy(1 - lambda[i]);
    }
    CompoundVector newPosterior=Serialization.deepCopy(posteriorT_1);
    for (int i=0; i < lambda.length; i++) {
      newPosterior.getVectorByPosition(i).multiplyBy(lambda[i]);
    }
    newPrior.sum(newPosterior);
    this.plateuStructure.updateNaturalParameterPrior(newPrior);
    this.plateuStructure.runInference();
    double newELBO=this.plateuStructure.getLogProbabilityOfEvidence();
    double[] kl_q_p0=new double[this.prior.getNumberOfBaseVectors()];
    int count=0;
    this.plateuStructure.updateNaturalParameterPrior(this.prior);
    for (    Node node : this.plateuStructure.getNonReplictedNodes().collect(Collectors.toList())) {
      Map<Variable,MomentParameters> momentParents=node.getMomentParents();
      kl_q_p0[count]=node.getQDist().kl(node.getPDist().getExpectedNaturalFromParents(momentParents),node.getPDist().getExpectedLogNormalizer(momentParents));
      count++;
    }
    double[] kl_q_pt_1=new double[this.prior.getNumberOfBaseVectors()];
    count=0;
    this.plateuStructure.updateNaturalParameterPrior(this.posteriorT_1);
    for (    Node node : this.plateuStructure.getNonReplictedNodes().collect(Collectors.toList())) {
      Map<Variable,MomentParameters> momentParents=node.getMomentParents();
      kl_q_pt_1[count]=node.getQDist().kl(node.getPDist().getExpectedNaturalFromParents(momentParents),node.getPDist().getExpectedLogNormalizer(momentParents));
      count++;
    }
    for (int i=0; i < ef_TExpQ.length; i++) {
      ef_TExpQ[i].getNaturalParameters().set(0,-kl_q_pt_1[i] + kl_q_p0[i] + this.ef_TExpP.getNaturalParameters().get(0));
      for (int j=1; j < this.hppVal.length; j++) {
        this.ef_TExpQ[i].getNaturalParameters().set(j,this.ef_TExpP.getNaturalParameters().get(j));
      }
      ef_TExpQ[i].fixNumericalInstability();
      ef_TExpQ[i].updateMomentFromNaturalParameters();
      newELBO-=this.ef_TExpQ[i].kl(this.ef_TExpP.getNaturalParameters(),this.ef_TExpP.computeLogNormalizer());
    }
    if (!Double.isNaN(elbo) && newELBO < elbo) {
      new IllegalStateException(""String_Node_Str"");
    }
    double percentageIncrease=100 * Math.abs((newELBO - elbo) / elbo);
    System.out.println(""String_Node_Str"" + niter + ""String_Node_Str""+ newELBO+ ""String_Node_Str""+ elbo+ ""String_Node_Str""+ percentageIncrease+ ""String_Node_Str""+ lambda[0]);
    if (!Double.isNaN(elbo) && percentageIncrease < this.plateuStructure.getVMP().getThreshold()) {
      convergence=true;
    }
    elbo=newELBO;
    niter++;
  }
  posteriorT_1=this.plateuStructure.getPlateauNaturalParameterPosterior();
  this.plateuStructure.updateNaturalParameterPrior(posteriorT_1);
  return elbo;
}","public double updateModelWithConceptDrift(DataOnMemory<DataInstance> batch){
  this.plateuStructure.setEvidence(batch.getList());
  if (firstBatch) {
    firstBatch=false;
    this.plateuStructure.runInference();
    posteriorT_1=this.plateuStructure.getPlateauNaturalParameterPosterior();
    this.plateuStructure.updateNaturalParameterPrior(posteriorT_1);
    return this.plateuStructure.getLogProbabilityOfEvidence();
  }
  for (int i=0; i < prior.getNumberOfBaseVectors(); i++) {
    for (int j=0; j < this.hppVal.length; j++) {
      this.ef_TExpQ[i].getNaturalParameters().set(j,this.ef_TExpP.getNaturalParameters().get(j));
    }
    this.ef_TExpQ[i].setUpperInterval(this.ef_TExpP.getUpperInterval());
    this.ef_TExpQ[i].setLowerInterval(this.ef_TExpP.getLowerInterval());
    this.ef_TExpQ[i].updateMomentFromNaturalParameters();
  }
  boolean convergence=false;
  double elbo=Double.NaN;
  double niter=0;
  while (!convergence && niter < 10) {
    double[] lambda=new double[prior.getNumberOfBaseVectors()];
    for (int i=0; i < lambda.length; i++) {
      lambda[i]=this.ef_TExpQ[i].getMomentParameters().get(0);
    }
    CompoundVector newPrior=Serialization.deepCopy(prior);
    for (int i=0; i < lambda.length; i++) {
      newPrior.getVectorByPosition(i).multiplyBy(1 - lambda[i]);
    }
    CompoundVector newPosterior=Serialization.deepCopy(posteriorT_1);
    for (int i=0; i < lambda.length; i++) {
      newPosterior.getVectorByPosition(i).multiplyBy(lambda[i]);
    }
    newPrior.sum(newPosterior);
    this.plateuStructure.updateNaturalParameterPrior(newPrior);
    this.plateuStructure.runInference();
    double newELBO=this.plateuStructure.getLogProbabilityOfEvidence();
    double[] kl_q_p0=new double[this.prior.getNumberOfBaseVectors()];
    int count=0;
    this.plateuStructure.updateNaturalParameterPrior(this.prior);
    for (    Node node : this.plateuStructure.getNonReplictedNodes().collect(Collectors.toList())) {
      Map<Variable,MomentParameters> momentParents=node.getMomentParents();
      kl_q_p0[count]=node.getQDist().kl(node.getPDist().getExpectedNaturalFromParents(momentParents),node.getPDist().getExpectedLogNormalizer(momentParents));
      count++;
    }
    double[] kl_q_pt_1=new double[this.prior.getNumberOfBaseVectors()];
    count=0;
    this.plateuStructure.updateNaturalParameterPrior(this.posteriorT_1);
    for (    Node node : this.plateuStructure.getNonReplictedNodes().collect(Collectors.toList())) {
      Map<Variable,MomentParameters> momentParents=node.getMomentParents();
      kl_q_pt_1[count]=node.getQDist().kl(node.getPDist().getExpectedNaturalFromParents(momentParents),node.getPDist().getExpectedLogNormalizer(momentParents));
      count++;
    }
    for (int i=0; i < ef_TExpQ.length; i++) {
      ef_TExpQ[i].getNaturalParameters().set(0,-kl_q_pt_1[i] + kl_q_p0[i] + this.ef_TExpP.getNaturalParameters().get(0));
      for (int j=1; j < this.hppVal.length; j++) {
        this.ef_TExpQ[i].getNaturalParameters().set(j,this.ef_TExpP.getNaturalParameters().get(j));
      }
      ef_TExpQ[i].fixNumericalInstability();
      ef_TExpQ[i].updateMomentFromNaturalParameters();
      newELBO-=this.ef_TExpQ[i].kl(this.ef_TExpP.getNaturalParameters(),this.ef_TExpP.computeLogNormalizer());
    }
    if (!Double.isNaN(elbo) && newELBO < elbo) {
      new IllegalStateException(""String_Node_Str"");
    }
    double percentageIncrease=100 * Math.abs((newELBO - elbo) / elbo);
    System.out.println(""String_Node_Str"" + niter + ""String_Node_Str""+ newELBO+ ""String_Node_Str""+ elbo+ ""String_Node_Str""+ percentageIncrease+ ""String_Node_Str""+ lambda[0]);
    if (!Double.isNaN(elbo) && percentageIncrease < this.plateuStructure.getVMP().getThreshold()) {
      convergence=true;
    }
    elbo=newELBO;
    niter++;
  }
  posteriorT_1=this.plateuStructure.getPlateauNaturalParameterPosterior();
  this.plateuStructure.updateNaturalParameterPrior(posteriorT_1);
  return elbo;
}",0.9925963747766148
21191,"@Override public void updateMomentFromNaturalParameters(){
  double delta=this.getNaturalParameters().get(0);
  if (Math.exp(delta) > Double.MAX_VALUE) {
    this.momentParameters.set(0,1.0 - 1 / delta);
  }
 else {
    double width=(this.upperInterval - this.lowerInterval);
    double val=this.upperInterval - width / (1 - Math.exp(delta * width)) - 1 / delta;
    this.momentParameters.set(0,val);
  }
}","@Override public void updateMomentFromNaturalParameters(){
  double delta=this.getNaturalParameters().get(0);
  double width=(this.upperInterval - this.lowerInterval);
  if (Math.exp(width * delta) > Double.MAX_VALUE) {
    this.momentParameters.set(0,this.upperInterval - 1 / delta);
  }
 else {
    double val=this.upperInterval - width / (1 - Math.exp(delta * width)) - 1 / delta;
    this.momentParameters.set(0,val);
  }
}",0.8163265306122449
21192,"@Override public EF_LearningBayesianNetwork transitionModel(EF_LearningBayesianNetwork ef_extendedBN,PlateuStructure plateuStructure){
  ef_extendedBN.getParametersVariables().getListOfParamaterVariables().stream().forEach(var -> {
    EF_UnivariateDistribution prior=ef_extendedBN.getDistribution(var);
    NaturalParameters naturalParameters=prior.getNaturalParameters();
    naturalParameters.multiplyBy(fadingFactor);
    prior.setNaturalParameters(naturalParameters);
    ef_extendedBN.setDistribution(var,prior);
    plateuStructure.getNodeOfVar(var,0).setPDist(prior);
  }
);
  return ef_extendedBN;
}","@Override public EF_LearningBayesianNetwork transitionModel(EF_LearningBayesianNetwork ef_extendedBN,PlateuStructure plateuStructure){
  plateuStructure.getNonReplicatedVariables().forEach(var -> {
    EF_UnivariateDistribution prior=ef_extendedBN.getDistribution(var);
    NaturalParameters naturalParameters=prior.getNaturalParameters();
    naturalParameters.multiplyBy(fadingFactor);
    prior.setNaturalParameters(naturalParameters);
    ef_extendedBN.setDistribution(var,prior);
    plateuStructure.getNodeOfVar(var,0).setPDist(prior);
  }
);
  return ef_extendedBN;
}",0.9170896785109984
21193,"/** 
 * Creates a new exponential family univariate distribution.
 * @return an exponential family Gamma distribution.
 */
@Override public EF_TruncatedExponential newEFUnivariateDistribution(){
  EF_TruncatedExponential ef_TruncatedExponential=new EF_TruncatedExponential(this.variable);
  ef_TruncatedExponential.getNaturalParameters().set(0,0.1);
  ef_TruncatedExponential.fixNumericalInstability();
  ef_TruncatedExponential.updateMomentFromNaturalParameters();
  return ef_TruncatedExponential;
}","/** 
 * Creates a new exponential family univariate distribution.
 * @param args, a sequence with the initial natural parameters.
 * @return an exponential family Gamma distribution.
 */
@Override public EF_TruncatedExponential newEFUnivariateDistribution(double... args){
  EF_TruncatedExponential ef_TruncatedExponential=new EF_TruncatedExponential(this.variable);
  for (  double a : args) {
    ef_TruncatedExponential.getNaturalParameters().set(0,-a);
  }
  ef_TruncatedExponential.fixNumericalInstability();
  ef_TruncatedExponential.updateMomentFromNaturalParameters();
  return ef_TruncatedExponential;
}",0.894878706199461
21194,"/** 
 * Creates a new exponential family univariate distribution.
 * @return an exponential family Gamma distribution.
 */
@Override public EF_TruncatedNormal newEFUnivariateDistribution(){
  EF_TruncatedNormal ef_TruncatedNormal=new EF_TruncatedNormal(this.variable);
  ef_TruncatedNormal.getNaturalParameters().set(0,1);
  ef_TruncatedNormal.fixNumericalInstability();
  ef_TruncatedNormal.updateMomentFromNaturalParameters();
  return ef_TruncatedNormal;
}","/** 
 * Creates a new exponential family univariate distribution.
 * @param args, a sequence with the initial natural parameters.
 * @return an exponential family Truncated Normal distribution.
 */
@Override public EF_TruncatedNormal newEFUnivariateDistribution(double... args){
  EF_TruncatedNormal ef_TruncatedNormal=new EF_TruncatedNormal(this.variable);
  for (  double a : args) {
    ef_TruncatedNormal.getNaturalParameters().set(0,-a);
  }
  ef_TruncatedNormal.fixNumericalInstability();
  ef_TruncatedNormal.updateMomentFromNaturalParameters();
  return ef_TruncatedNormal;
}",0.8694817658349329
21195,"@Override public Attributes getAttributes(){
  return this.getAttributes();
}","@Override public Attributes getAttributes(){
  return initialStream.getAttributes();
}",0.9202453987730062
21196,"@Override public void restart(){
  this.restart();
}","@Override public void restart(){
  initialStream.restart();
}",0.8849557522123894
21197,"/** 
 * Returns a data stream consisting of the elements of this stream that match the given predicate. <p>This is an <a href=""package-summary.html#StreamOps"">intermediate operation</a>.
 * @param predicate a <a href=""package-summary.html#NonInterference"">non-interfering</a>,<a href=""package-summary.html#Statelessness"">stateless</a> predicate to apply to each element to determine if it should be included
 * @return the new stream
 */
default DataStream<E> filter(Predicate<? super E> predicate){
  return new DataStream<E>(){
    @Override public Attributes getAttributes(){
      return this.getAttributes();
    }
    @Override public void close(){
      this.close();
    }
    @Override public boolean isRestartable(){
      return this.isRestartable();
    }
    @Override public void restart(){
      this.restart();
    }
    @Override public Stream<E> stream(){
      return this.stream().filter(predicate);
    }
  }
;
}","/** 
 * Returns a data stream consisting of the elements of this stream that match the given predicate. <p>This is an <a href=""package-summary.html#StreamOps"">intermediate operation</a>.
 * @param predicate a <a href=""package-summary.html#NonInterference"">non-interfering</a>,<a href=""package-summary.html#Statelessness"">stateless</a> predicate to apply to each element to determine if it should be included
 * @return the new stream
 */
default DataStream<E> filter(Predicate<? super E> predicate){
  DataStream<E> initialStream=this;
  return new DataStream<E>(){
    @Override public Attributes getAttributes(){
      return initialStream.getAttributes();
    }
    @Override public void close(){
      initialStream.close();
    }
    @Override public boolean isRestartable(){
      return initialStream.isRestartable();
    }
    @Override public void restart(){
      initialStream.restart();
    }
    @Override public Stream<E> stream(){
      return initialStream.stream().filter(predicate);
    }
  }
;
}",0.9378531073446328
21198,"@Override public Stream<R> stream(){
  return ((Stream<E>)this.stream()).map(mapper);
}","@Override public Stream<R> stream(){
  return ((Stream<E>)initialStream.stream()).map(mapper);
}",0.9289617486338798
21199,"@Override public void close(){
  this.close();
}","@Override public void close(){
  initialStream.close();
}",0.8761904761904762
21200,"/** 
 * Returns a data stream consisting of the results of applying the given function to the elements of this stream. <p>This is an <a href=""package-summary.html#StreamOps"">intermediate operation</a>.
 * @param mapper a <a href=""package-summary.html#NonInterference"">non-interfering</a>,<a href=""package-summary.html#Statelessness"">stateless</a> function to apply to each element
 * @return the new data stream
 */
default <R extends DataInstance>DataStream<R> map(Function<? super E,? extends R> mapper){
  return new DataStream<R>(){
    @Override public Attributes getAttributes(){
      return this.getAttributes();
    }
    @Override public void close(){
      this.close();
    }
    @Override public boolean isRestartable(){
      return this.isRestartable();
    }
    @Override public void restart(){
      this.restart();
    }
    @Override public Stream<R> stream(){
      return ((Stream<E>)this.stream()).map(mapper);
    }
  }
;
}","/** 
 * Returns a data stream consisting of the results of applying the given function to the elements of this stream. <p>This is an <a href=""package-summary.html#StreamOps"">intermediate operation</a>.
 * @param mapper a <a href=""package-summary.html#NonInterference"">non-interfering</a>,<a href=""package-summary.html#Statelessness"">stateless</a> function to apply to each element
 * @return the new data stream
 */
default <R extends DataInstance>DataStream<R> map(Function<? super E,? extends R> mapper){
  DataStream<E> initialStream=this;
  return new DataStream<R>(){
    @Override public Attributes getAttributes(){
      return initialStream.getAttributes();
    }
    @Override public void close(){
      initialStream.close();
    }
    @Override public boolean isRestartable(){
      return initialStream.isRestartable();
    }
    @Override public void restart(){
      initialStream.restart();
    }
    @Override public Stream<R> stream(){
      return ((Stream<E>)initialStream.stream()).map(mapper);
    }
  }
;
}",0.93873417721519
21201,"@Override public boolean isRestartable(){
  return this.isRestartable();
}","@Override public boolean isRestartable(){
  return initialStream.isRestartable();
}",0.9171974522292994
21202,"private void updateFirstBatch(DataOnMemory<DataInstance> firstBatch){
  this.svb.getPlateuStructure().setVmp(new VMP());
  this.svb.getPlateuStructure().getVMP().setMaxIter(this.maximumLocalIterations);
  this.svb.getPlateuStructure().getVMP().setThreshold(this.localThreshold);
  this.svb.setDAG(this.dag);
  this.svb.setWindowsSize(batchSize);
  this.svb.initLearning();
  initialPosterior=Serialization.deepCopy(this.svb.getPlateuStructure().getPlateauNaturalParameterPosterior());
  initialPosterior.sum(prior);
  this.svb.updateNaturalParameterPosteriors(initialPosterior);
  this.svb.updateModel(firstBatch);
  currentParam=Serialization.deepCopy(svb.getPlateuStructure().getPlateauNaturalParameterPosterior());
  VMPLocalUpdates vmpLocalUpdates=new VMPLocalUpdates(this.svb.getPlateuStructure());
  this.svb.getPlateuStructure().setVmp(vmpLocalUpdates);
  this.svb.getPlateuStructure().getVMP().setMaxIter(this.maximumLocalIterations);
  this.svb.getPlateuStructure().getVMP().setThreshold(this.localThreshold);
  this.svb.setDAG(this.dag);
  this.svb.setWindowsSize(batchSize);
  this.svb.initLearning();
  prior=svb.getNaturalParameterPrior();
  this.svb.updateNaturalParameterPosteriors(currentParam);
  iteration=0;
}","private double updateFirstBatch(DataOnMemory<DataInstance> firstBatch){
  this.svb.getPlateuStructure().setVmp(new VMP());
  this.svb.getPlateuStructure().getVMP().setMaxIter(this.maximumLocalIterations);
  this.svb.getPlateuStructure().getVMP().setThreshold(this.localThreshold);
  this.svb.setDAG(this.dag);
  this.svb.setWindowsSize(batchSize);
  this.svb.initLearning();
  initialPosterior=Serialization.deepCopy(this.svb.getPlateuStructure().getPlateauNaturalParameterPosterior());
  initialPosterior.sum(prior);
  this.svb.updateNaturalParameterPosteriors(initialPosterior);
  double out=this.svb.updateModel(firstBatch);
  currentParam=Serialization.deepCopy(svb.getPlateuStructure().getPlateauNaturalParameterPosterior());
  VMPLocalUpdates vmpLocalUpdates=new VMPLocalUpdates(this.svb.getPlateuStructure());
  this.svb.getPlateuStructure().setVmp(vmpLocalUpdates);
  this.svb.getPlateuStructure().getVMP().setMaxIter(this.maximumLocalIterations);
  this.svb.getPlateuStructure().getVMP().setThreshold(this.localThreshold);
  this.svb.setDAG(this.dag);
  this.svb.setWindowsSize(batchSize);
  this.svb.initLearning();
  prior=svb.getNaturalParameterPrior();
  this.svb.updateNaturalParameterPosteriors(currentParam);
  iteration=0;
  return out;
}",0.9859041482078132
21203,"@Override public double updateModel(DataOnMemory<DataInstance> batch){
  if (firstBatch) {
    this.updateFirstBatch(batch);
    firstBatch=false;
  }
  NaturalParameters newParam=svb.updateModelOnBatchParallel(batch).getVector();
  newParam.multiplyBy(this.dataSetSize / (double)this.batchSize);
  newParam.sum(prior);
  double stepSize=Math.pow(1 + iteration,-learningFactor);
  newParam.multiplyBy(stepSize);
  currentParam.multiplyBy((1 - stepSize));
  currentParam.sum(newParam);
  this.svb.updateNaturalParameterPosteriors(currentParam);
  iteration++;
  return Double.NaN;
}","@Override public double updateModel(DataOnMemory<DataInstance> batch){
  if (firstBatch) {
    firstBatch=false;
    return this.updateFirstBatch(batch);
  }
  NaturalParameters newParam=svb.updateModelOnBatchParallel(batch).getVector();
  newParam.multiplyBy(this.dataSetSize / (double)this.batchSize);
  newParam.sum(prior);
  double stepSize=Math.pow(1 + iteration,-learningFactor);
  newParam.multiplyBy(stepSize);
  currentParam.multiplyBy((1 - stepSize));
  currentParam.sum(newParam);
  this.svb.updateNaturalParameterPosteriors(currentParam);
  iteration++;
  return Double.NaN;
}",0.9358426005132592
21204,"public static void main(String[] args) throws Exception {
  int nContinuousAttributes=4;
  int nDiscreteAttributes=0;
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String path=""String_Node_Str"";
  int nSamples=1000;
  DataStream<DynamicDataInstance> data=DataSetGenerator.generate(1,1000,nDiscreteAttributes,nContinuousAttributes);
  List<Attribute> list=new ArrayList<Attribute>();
  IntStream.range(0,data.getAttributes().getNumberOfAttributes()).forEach(i -> {
    Attribute a=data.getAttributes().getFullListOfAttributes().get(i);
    StateSpaceType s=a.getStateSpaceType();
    Attribute a2=new Attribute(a.getIndex(),names[i],s);
    list.add(a2);
  }
);
  Attributes att2=new Attributes(list);
  List<DynamicDataInstance> listData=data.stream().collect(Collectors.toList());
  DataStream<DynamicDataInstance> data2=new DataOnMemoryListContainer<DynamicDataInstance>(att2,listData);
  DataStreamWriter.writeDataToFile(data2,path + ""String_Node_Str"");
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataFlink<DataInstance> data2Flink=DataFlinkLoader.loadDataFromFile(env,path + ""String_Node_Str"",false);
  DataFlinkWriter.writeDataToARFFFolder(data2Flink,path + ""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  int nContinuousAttributes=4;
  int nDiscreteAttributes=0;
  String names[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String path=""String_Node_Str"";
  int nSamples=1000;
  DataStream<DynamicDataInstance> data=DataSetGenerator.generate(1,1000,nDiscreteAttributes,nContinuousAttributes);
  List<Attribute> list=new ArrayList<Attribute>();
  IntStream.range(0,data.getAttributes().getNumberOfAttributes()).forEach(i -> {
    Attribute a=data.getAttributes().getFullListOfAttributes().get(i);
    StateSpaceType s=a.getStateSpaceType();
    Attribute a2=new Attribute(a.getIndex(),names[i],s);
    list.add(a2);
  }
);
  Attributes att2=new Attributes(list);
  List<DynamicDataInstance> listData=data.stream().collect(Collectors.toList());
  DataStream<DynamicDataInstance> data2=new DataOnMemoryListContainer<DynamicDataInstance>(att2,listData);
  DataStreamWriter.writeDataToFile(data2,path + ""String_Node_Str"");
  Configuration conf=new Configuration();
  conf.setInteger(""String_Node_Str"",12000);
  final ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment(conf);
  env.getConfig().disableSysoutLogging();
  env.setParallelism(Main.PARALLELISM);
  DataFlink<DataInstance> data2Flink=DataFlinkLoader.loadDataFromFile(env,path + ""String_Node_Str"",false);
  DataFlinkWriter.writeDataToARFFFolder(data2Flink,path + ""String_Node_Str"");
}",0.9228561176892716
21205,"public static void main(String[] args) throws IOException {
  String filename=""String_Node_Str"";
  DataStream<DataInstance> data=DataStreamLoader.open(filename);
  Model model=new LDA(data.getAttributes());
  model.updateModel(data);
  BayesianNetwork bn=model.getModel();
  System.out.println(bn);
  BayesianNetworkWriter.save(bn,""String_Node_Str"");
}","public static void main(String[] args) throws IOException {
  String filename=""String_Node_Str"";
  DataStream<DataInstance> data=DataStreamLoader.open(filename);
  Model model=new LDA(data.getAttributes());
  model.updateModel(data);
  BayesianNetwork bn=model.getModel();
  BayesianNetworkWriter.save(bn,""String_Node_Str"");
}",0.9616519174041298
21206,"public static void main(String[] args) throws IOException {
  Configuration conf=new Configuration();
  conf.setInteger(""String_Node_Str"",12000);
  final ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment(conf);
  env.getConfig().disableSysoutLogging();
  env.setParallelism(Main.PARALLELISM);
  String filename=""String_Node_Str"";
  DataFlink<DataInstance> data=DataFlinkLoader.loadDataFromFolder(env,filename,false);
  Model model=new LDA(data.getAttributes());
  model.updateModel(data);
  BayesianNetwork bn=model.getModel();
  System.out.println(bn);
  BayesianNetworkWriter.save(bn,""String_Node_Str"");
}","public static void main(String[] args) throws IOException {
  Configuration conf=new Configuration();
  conf.setInteger(""String_Node_Str"",12000);
  final ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment(conf);
  env.getConfig().disableSysoutLogging();
  env.setParallelism(Main.PARALLELISM);
  String filename=""String_Node_Str"";
  DataFlink<DataInstance> data=DataFlinkLoader.loadDataFromFolder(env,filename,false);
  Model model=new LDA(data.getAttributes());
  model.updateModel(data);
  BayesianNetwork bn=model.getModel();
  BayesianNetworkWriter.save(bn,""String_Node_Str"");
}",0.9787928221859706
21207,"@Test public void test() throws Exception {
  try {
    ParallelTANExample.main(null);
  }
 catch (  UnsatisfiedLinkError error) {
    error.printStackTrace();
  }
}","@Test public void test() throws Exception {
  try {
    ParallelTANExample.main(null);
  }
 catch (  UnsatisfiedLinkError error) {
  }
}",0.903654485049834
21208,"/** 
 * {@inheritDoc}
 */
@Override public void copy(Vector vector){
  if (this.size() != vector.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.copy((ArrayVectorParameter)vector);
}","/** 
 * {@inheritDoc}
 */
@Override public void copy(Vector vector){
  if (this.size() != vector.size())   throw new IllegalArgumentException(""String_Node_Str"");
  if (!vector.getClass().isAssignableFrom(ArrayVectorParameter.class))   throw new IllegalArgumentException(""String_Node_Str"");
  this.copy((ArrayVectorParameter)vector);
}",0.7
21209,"/** 
 * {@inheritDoc}
 */
@Override public void updateMomentFromNaturalParameters(){
  double sumOfU_i=this.naturalParameters.sum();
  this.momentParameters=this.createZeroMomentParameters();
  this.getSparseMomentParameters().apply(new Function<Double,Double>(){
    @Override public Double apply(    Double aDouble){
      return Gamma.digamma(aDouble) - Gamma.digamma(sumOfU_i);
    }
  }
);
}","/** 
 * {@inheritDoc}
 */
@Override public void updateMomentFromNaturalParameters(){
  double sumOfU_i=this.naturalParameters.sum();
  this.momentParameters=this.createZeroMomentParameters();
  this.momentParameters.copy(this.naturalParameters);
  this.getSparseMomentParameters().apply(new Function<Double,Double>(){
    @Override public Double apply(    Double aDouble){
      return Gamma.digamma(aDouble) - Gamma.digamma(sumOfU_i);
    }
  }
);
}",0.9361702127659576
21210,"/** 
 * {@inheritDoc}
 */
@Override public void runInference(){
  nIter=0;
  boolean convergence=false;
  probOfEvidence=Double.NEGATIVE_INFINITY;
  local_elbo=Double.NEGATIVE_INFINITY;
  local_iter=0;
  int global_iter=0;
  this.testConvergence();
  while (!convergence && (local_iter++) < maxIter) {
    boolean done=true;
    for (    Node node : nodes) {
      if (!node.isActive() || node.isObserved() || plateuStructure.isNonReplicatedVar(node.getMainVariable()))       continue;
      Message<NaturalParameters> selfMessage=newSelfMessage(node);
      Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
      if (message.isPresent())       selfMessage.combine(message.get());
      updateCombinedMessage(node,selfMessage);
      done&=node.isDone();
    }
    convergence=this.testConvergence();
    if (done) {
      convergence=true;
    }
  }
  CompoundVector posteriorOLD=this.plateuStructure.getPlateauNaturalParameterPosterior();
  CompoundVector posteriorNew=this.plateuStructure.getPlateauNaturalParameterPosterior();
  int count=0;
  for (  Node node : nodes) {
    if (!node.isActive() || node.isObserved() || plateuStructure.isReplicatedVar(node.getMainVariable()))     continue;
    Message<NaturalParameters> selfMessage=newSelfMessage(node);
    Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
    if (message.isPresent())     selfMessage.combine(message.get());
    updateCombinedMessage(node,selfMessage);
    posteriorNew.setVectorByPosition(count,node.getQDist().getNaturalParameters());
    node.getQDist().setNaturalParameters((NaturalParameters)posteriorOLD.getVectorByPosition(count));
    node.getQDist().fixNumericalInstability();
    node.getQDist().updateMomentFromNaturalParameters();
    count++;
  }
  this.plateuStructure.updateNaturalParameterPosteriors(posteriorNew);
  probOfEvidence=local_elbo;
  probOfEvidence=local_elbo;
  if (output) {
    System.out.println(""String_Node_Str"" + global_iter + ""String_Node_Str""+ local_iter+ ""String_Node_Str""+ local_elbo);
    logger.info(""String_Node_Str"",global_iter,local_iter,local_elbo);
  }
  nIter=local_iter;
}","/** 
 * {@inheritDoc}
 */
@Override public void runInference(){
  nIter=0;
  boolean convergence=false;
  probOfEvidence=Double.NEGATIVE_INFINITY;
  local_elbo=Double.NEGATIVE_INFINITY;
  local_iter=0;
  int global_iter=0;
  this.testConvergence();
  while (!convergence && (local_iter++) < maxIter) {
    boolean done=true;
    for (    Node node : nodes) {
      if (!node.isActive() || node.isObserved() || plateuStructure.isNonReplicatedVar(node.getMainVariable()))       continue;
      Message<NaturalParameters> selfMessage=newSelfMessage(node);
      Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
      if (message.isPresent())       selfMessage.combine(message.get());
      updateCombinedMessage(node,selfMessage);
      done&=node.isDone();
    }
    convergence=this.testConvergence();
    if (done) {
      convergence=true;
    }
  }
  CompoundVector posteriorOLD=this.plateuStructure.getPlateauNaturalParameterPosterior();
  CompoundVector posteriorNew=this.plateuStructure.getPlateauNaturalParameterPosterior();
  int count=0;
  for (  Node node : nodes) {
    if (node.isObserved() || plateuStructure.isReplicatedVar(node.getMainVariable()))     continue;
    if (!node.isActive() && plateuStructure.isNonReplicatedVar(node.getMainVariable())) {
      count++;
      continue;
    }
    Message<NaturalParameters> selfMessage=newSelfMessage(node);
    Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
    if (message.isPresent())     selfMessage.combine(message.get());
    updateCombinedMessage(node,selfMessage);
    posteriorNew.setVectorByPosition(count,node.getQDist().getNaturalParameters());
    node.getQDist().setNaturalParameters((NaturalParameters)posteriorOLD.getVectorByPosition(count));
    node.getQDist().fixNumericalInstability();
    node.getQDist().updateMomentFromNaturalParameters();
    count++;
  }
  this.plateuStructure.updateNaturalParameterPosteriors(posteriorNew);
  probOfEvidence=local_elbo;
  probOfEvidence=local_elbo;
  if (output) {
    System.out.println(""String_Node_Str"" + global_iter + ""String_Node_Str""+ local_iter+ ""String_Node_Str""+ local_elbo);
    logger.info(""String_Node_Str"",global_iter,local_iter,local_elbo);
  }
  nIter=local_iter;
}",0.9606844571195764
21211,"public static void test(){
  Variables variables=new Variables();
  ParameterVariables parameterVariables=new ParameterVariables(1);
  Variable multiA=variables.newMultinomialVariable(""String_Node_Str"",10);
  Variable dirichlet=parameterVariables.newDirichletParameter(""String_Node_Str"",10);
  EF_SparseMultinomial_SparseDirichlet dist=new EF_SparseMultinomial_SparseDirichlet(multiA,dirichlet);
  EF_SparseDirichlet distDirichlet=new EF_SparseDirichlet(dirichlet);
  EF_LearningBayesianNetwork ef_learningBayesianNetwork=new EF_LearningBayesianNetwork(Arrays.asList(dist,distDirichlet));
}","public static void test(){
  Variables variables=new Variables();
  ParameterVariables parameterVariables=new ParameterVariables(1);
  Variable multiA=variables.newSparseMultionomialVariable(""String_Node_Str"",10);
  Variable dirichlet=parameterVariables.newSparseDirichletParameter(""String_Node_Str"",10);
  EF_SparseMultinomial_SparseDirichlet dist=new EF_SparseMultinomial_SparseDirichlet(multiA,dirichlet);
  EF_SparseDirichlet distDirichlet=new EF_SparseDirichlet(dirichlet);
  EF_LearningBayesianNetwork ef_learningBayesianNetwork=new EF_LearningBayesianNetwork(Arrays.asList(dist,distDirichlet),Arrays.asList(multiA,dirichlet));
}",0.963265306122449
21212,"private void updateTime0(DataFlink<DynamicDataInstance> data){
  DataFlink<DataInstance> newdata=DataFlinkConverter.convertToStatic(data);
  this.parallelVBTime0.updateModel(newdata);
  List<Variable> vars=this.latentVariablesNames.stream().map(name -> this.dagTime0.getVariables().getVariableByName(name)).collect(Collectors.toList());
  this.dataPosteriorDataSet=this.parallelVBTime0.computePosteriorAssignment(vars);
}","private void updateTime0(DataFlink<DynamicDataInstance> data){
  DataFlink<DataInstance> newdata=DataFlinkConverter.convertToStatic(data);
  this.parallelVBTime0.updateModel(newdata);
  List<Variable> vars=this.latentVariablesNames.stream().map(name -> this.dagTime0.getVariables().getVariableByName(name)).collect(Collectors.toList());
  this.dataPosteriorDataSet=this.parallelVBTime0.computePosteriorAssignment(newdata,vars);
}",0.9905882352941175
21213,"/** 
 * {@inheritDoc}
 */
@Override public double updateModel(DataFlink<DataInstance> dataUpdate){
  try {
    Configuration config=new Configuration();
    config.setString(BN_NAME,this.dag.getName());
    config.setBytes(EFBN_NAME,Serialization.serializeObject(efBayesianNetwork));
    DataSet<DataInstance> dataset=this.dataFlink.getDataSet();
    this.sumSS=dataset.map(new SufficientSatisticsMAP()).withParameters(config).reduce(new SufficientSatisticsReduce()).collect().get(0);
    sumSS.sum(efBayesianNetwork.createInitSufficientStatistics());
    JobExecutionResult result=dataset.getExecutionEnvironment().getLastJobExecutionResult();
    numInstances=result.getAccumulatorResult(ParallelMaximumLikelihood.COUNTER_NAME + ""String_Node_Str"" + this.dag.getName());
    numInstances++;
  }
 catch (  Exception ex) {
    throw new UndeclaredThrowableException(ex);
  }
  return this.getLogMarginalProbability();
}","/** 
 * {@inheritDoc}
 */
@Override public double updateModel(DataFlink<DataInstance> dataUpdate){
  try {
    Configuration config=new Configuration();
    config.setString(BN_NAME,this.dag.getName());
    config.setBytes(EFBN_NAME,Serialization.serializeObject(efBayesianNetwork));
    DataSet<DataInstance> dataset=dataUpdate.getDataSet();
    this.sumSS=dataset.map(new SufficientSatisticsMAP()).withParameters(config).reduce(new SufficientSatisticsReduce()).collect().get(0);
    sumSS.sum(efBayesianNetwork.createInitSufficientStatistics());
    JobExecutionResult result=dataset.getExecutionEnvironment().getLastJobExecutionResult();
    numInstances=result.getAccumulatorResult(ParallelMaximumLikelihood.COUNTER_NAME + ""String_Node_Str"" + this.dag.getName());
    numInstances++;
  }
 catch (  Exception ex) {
    throw new UndeclaredThrowableException(ex);
  }
  return this.getLogMarginalProbability();
}",0.9868995633187772
21214,"/** 
 * {@inheritDoc}
 */
@Override public double updateModel(DataFlink<DataInstance> dataUpdate){
  try {
    this.initLearning();
    Configuration config=new Configuration();
    config.setString(ParameterLearningAlgorithm.BN_NAME,this.dag.getName());
    config.setBytes(EFBN_NAME,Serialization.serializeObject(efBayesianNetwork));
    DataSet<DataInstance> dataset=this.dataFlink.getDataSet();
    this.sumSS=dataset.mapPartition(new SufficientSatisticsMAP()).withParameters(config).reduce(new SufficientSatisticsReduce()).collect().get(0);
    sumSS.sum(efBayesianNetwork.createInitSufficientStatistics());
    JobExecutionResult result=dataset.getExecutionEnvironment().getLastJobExecutionResult();
    numInstances=result.getAccumulatorResult(ParallelMaximumLikelihood2.COUNTER_NAME + ""String_Node_Str"" + this.dag.getName());
    numInstances++;
  }
 catch (  Exception ex) {
    throw new UndeclaredThrowableException(ex);
  }
  return this.getLogMarginalProbability();
}","/** 
 * {@inheritDoc}
 */
@Override public double updateModel(DataFlink<DataInstance> dataUpdate){
  try {
    this.initLearning();
    Configuration config=new Configuration();
    config.setString(ParameterLearningAlgorithm.BN_NAME,this.dag.getName());
    config.setBytes(EFBN_NAME,Serialization.serializeObject(efBayesianNetwork));
    DataSet<DataInstance> dataset=dataUpdate.getDataSet();
    this.sumSS=dataset.mapPartition(new SufficientSatisticsMAP()).withParameters(config).reduce(new SufficientSatisticsReduce()).collect().get(0);
    sumSS.sum(efBayesianNetwork.createInitSufficientStatistics());
    JobExecutionResult result=dataset.getExecutionEnvironment().getLastJobExecutionResult();
    numInstances=result.getAccumulatorResult(ParallelMaximumLikelihood2.COUNTER_NAME + ""String_Node_Str"" + this.dag.getName());
    numInstances++;
  }
 catch (  Exception ex) {
    throw new UndeclaredThrowableException(ex);
  }
  return this.getLogMarginalProbability();
}",0.9877300613496932
21215,"/** 
 * {@inheritDoc}
 */
@Override public double getLogMarginalProbability(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * {@inheritDoc}
 */
@Override public double getLogMarginalProbability(){
  return Double.NaN;
}",0.7407407407407407
21216,"public DataSet<DataPosteriorAssignment> computePosteriorAssignment(List<Variable> latentVariables){
  Attribute seq_id=this.dataFlink.getAttributes().getSeq_id();
  if (seq_id == null)   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    Configuration config=new Configuration();
    config.setString(ParameterLearningAlgorithm.BN_NAME,this.dag.getName());
    config.setBytes(SVB,Serialization.serializeObject(svb));
    config.setBytes(LATENT_VARS,Serialization.serializeObject(latentVariables));
    return this.dataFlink.getBatchedDataSet(this.batchSize).flatMap(new ParallelVBMapInferenceAssignment()).withParameters(config);
  }
 catch (  Exception ex) {
    throw new UndeclaredThrowableException(ex);
  }
}","public DataSet<DataPosteriorAssignment> computePosteriorAssignment(DataFlink<DataInstance> dataFlink,List<Variable> latentVariables){
  Attribute seq_id=dataFlink.getAttributes().getSeq_id();
  if (seq_id == null)   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    Configuration config=new Configuration();
    config.setString(ParameterLearningAlgorithm.BN_NAME,this.dag.getName());
    config.setBytes(SVB,Serialization.serializeObject(svb));
    config.setBytes(LATENT_VARS,Serialization.serializeObject(latentVariables));
    return dataFlink.getBatchedDataSet(this.batchSize).flatMap(new ParallelVBMapInferenceAssignment()).withParameters(config);
  }
 catch (  Exception ex) {
    throw new UndeclaredThrowableException(ex);
  }
}",0.9703504043126684
21217,"public DataSet<DataPosterior> computePosterior(){
  Attribute seq_id=this.dataFlink.getAttributes().getSeq_id();
  if (seq_id == null)   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    Configuration config=new Configuration();
    config.setString(ParameterLearningAlgorithm.BN_NAME,this.dag.getName());
    config.setBytes(SVB,Serialization.serializeObject(svb));
    return this.dataFlink.getBatchedDataSet(this.batchSize).flatMap(new ParallelVBMapInference()).withParameters(config);
  }
 catch (  Exception ex) {
    throw new UndeclaredThrowableException(ex);
  }
}","public DataSet<DataPosterior> computePosterior(DataFlink<DataInstance> dataFlink){
  Attribute seq_id=dataFlink.getAttributes().getSeq_id();
  if (seq_id == null)   throw new IllegalArgumentException(""String_Node_Str"");
  try {
    Configuration config=new Configuration();
    config.setString(ParameterLearningAlgorithm.BN_NAME,this.dag.getName());
    config.setBytes(SVB,Serialization.serializeObject(svb));
    return dataFlink.getBatchedDataSet(this.batchSize).flatMap(new ParallelVBMapInference()).withParameters(config);
  }
 catch (  Exception ex) {
    throw new UndeclaredThrowableException(ex);
  }
}",0.964196502914238
21218,"/** 
 * {@inheritDoc}
 */
@Override public double updateModel(DataFlink<DataInstance> dataUpdate){
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  boolean convergence=false;
  CompoundVector prior=svb.getNaturalParameterPrior();
  CompoundVector initialPosterior=Serialization.deepCopy(this.svb.getPlateuStructure().getPlateauNaturalParameterPosterior());
  initialPosterior.sum(prior);
  this.svb.updateNaturalParameterPosteriors(initialPosterior);
  CompoundVector currentParam=svb.getNaturalParameterPrior();
  double totalTimeElbo=0;
  double totalTime=0;
  double t=0;
  while (!convergence) {
    long startBatch=System.nanoTime();
    DataOnMemory<DataInstance> batch;
    if (batchConverter == null)     batch=this.dataFlink.subsample(this.svb.getSeed(),this.batchSize);
 else     batch=this.dataFlink.subsample(this.svb.getSeed(),this.batchSize,this.batchConverter);
    NaturalParameters newParam=svb.updateModelOnBatchParallel(batch).getVector();
    newParam.multiplyBy(this.dataSetSize / (double)this.batchSize);
    newParam.sum(prior);
    double stepSize=Math.pow(1 + t,-learningFactor);
    newParam.multiplyBy(stepSize);
    currentParam.multiplyBy((1 - stepSize));
    currentParam.sum(newParam);
    this.svb.updateNaturalParameterPosteriors(currentParam);
    long endBatch=System.nanoTime();
    totalTime+=endBatch - startBatch;
    if (t % 10 == 0) {
      long startBatchELBO=System.nanoTime();
      double elbo=this.computeELBO(this.dataFlink,svb,this.batchConverter);
      long endBatchELBO=System.nanoTime();
      totalTimeElbo+=endBatchELBO - startBatchELBO;
      System.out.println(""String_Node_Str"" + totalTimeElbo / 1e9);
      logger.info(""String_Node_Str"",t,0,df.format(elbo),df.format(totalTime / 1e9),df.format(totalTimeElbo / 1e9));
      System.out.println(""String_Node_Str"" + t + ""String_Node_Str""+ stepSize+ ""String_Node_Str""+ elbo+ ""String_Node_Str""+ totalTime / 1e9 + ""String_Node_Str"" + totalTimeElbo / 1e9 + ""String_Node_Str"" + (totalTime - totalTimeElbo) / 1e9 + ""String_Node_Str"");
    }
    if ((totalTime - totalTimeElbo) / 1e9 > timiLimit) {
      convergence=true;
    }
    t++;
  }
  this.svb.updateNaturalParameterPrior(currentParam);
  return this.getLogMarginalProbability();
}","/** 
 * {@inheritDoc}
 */
@Override public double updateModel(DataFlink<DataInstance> dataUpdate){
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  boolean convergence=false;
  CompoundVector prior=svb.getNaturalParameterPrior();
  CompoundVector initialPosterior=Serialization.deepCopy(this.svb.getPlateuStructure().getPlateauNaturalParameterPosterior());
  initialPosterior.sum(prior);
  this.svb.updateNaturalParameterPosteriors(initialPosterior);
  CompoundVector currentParam=svb.getNaturalParameterPrior();
  double totalTimeElbo=0;
  double totalTime=0;
  double t=0;
  while (!convergence) {
    long startBatch=System.nanoTime();
    DataOnMemory<DataInstance> batch;
    if (batchConverter == null)     batch=dataUpdate.subsample(this.svb.getSeed(),this.batchSize);
 else     batch=dataUpdate.subsample(this.svb.getSeed(),this.batchSize,this.batchConverter);
    NaturalParameters newParam=svb.updateModelOnBatchParallel(batch).getVector();
    newParam.multiplyBy(this.dataSetSize / (double)this.batchSize);
    newParam.sum(prior);
    double stepSize=Math.pow(1 + t,-learningFactor);
    newParam.multiplyBy(stepSize);
    currentParam.multiplyBy((1 - stepSize));
    currentParam.sum(newParam);
    this.svb.updateNaturalParameterPosteriors(currentParam);
    long endBatch=System.nanoTime();
    totalTime+=endBatch - startBatch;
    if (t % 10 == 0) {
      long startBatchELBO=System.nanoTime();
      double elbo=this.computeELBO(dataUpdate,svb,this.batchConverter);
      long endBatchELBO=System.nanoTime();
      totalTimeElbo+=endBatchELBO - startBatchELBO;
      System.out.println(""String_Node_Str"" + totalTimeElbo / 1e9);
      logger.info(""String_Node_Str"",t,0,df.format(elbo),df.format(totalTime / 1e9),df.format(totalTimeElbo / 1e9));
      System.out.println(""String_Node_Str"" + t + ""String_Node_Str""+ stepSize+ ""String_Node_Str""+ elbo+ ""String_Node_Str""+ totalTime / 1e9 + ""String_Node_Str"" + totalTimeElbo / 1e9 + ""String_Node_Str"" + (totalTime - totalTimeElbo) / 1e9 + ""String_Node_Str"");
    }
    if ((totalTime - totalTimeElbo) / 1e9 > timiLimit) {
      convergence=true;
    }
    t++;
  }
  this.svb.updateNaturalParameterPrior(currentParam);
  return this.getLogMarginalProbability();
}",0.9839357429718876
21219,"/** 
 * {@inheritDoc}
 */
@Override public void runLearning(){
  this.initLearning();
  boolean convergence=false;
  double totalTimeElbo=0;
  double totalTime=0;
  Iterator<DataOnMemory<DataInstance>> iterator=this.dataStream.iterableOverBatches(this.batchSize).iterator();
  while (!convergence) {
    long startBatch=System.nanoTime();
    DataOnMemory<DataInstance> batch=iterator.next();
    if (!iterator.hasNext())     iterator=this.dataStream.iterableOverBatches(this.batchSize).iterator();
    NaturalParameters newParam=svb.updateModelOnBatchParallel(batch).getVector();
    newParam.multiplyBy(this.dataSetSize / (double)this.batchSize);
    newParam.sum(prior);
    double stepSize=Math.pow(1 + iteration,-learningFactor);
    newParam.multiplyBy(stepSize);
    currentParam.multiplyBy((1 - stepSize));
    currentParam.sum(newParam);
    this.svb.updateNaturalParameterPosteriors(currentParam);
    long startBatchELBO=System.nanoTime();
    long endBatch=System.nanoTime();
    totalTimeElbo+=endBatch - startBatchELBO;
    System.out.println(""String_Node_Str"" + totalTimeElbo / 1e9);
    totalTime+=endBatch - startBatch;
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ stepSize+ ""String_Node_Str""+ totalTime / 1e9 + ""String_Node_Str"" + totalTimeElbo / 1e9 + ""String_Node_Str"" + (totalTime - totalTimeElbo) / 1e9 + ""String_Node_Str"");
    if ((totalTime - totalTimeElbo) / 1e9 > timiLimit) {
      convergence=true;
    }
    iteration++;
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void runLearning(){
  this.initLearning();
  boolean convergence=false;
  double totalTimeElbo=0;
  double totalTime=0;
  Iterator<DataOnMemory<DataInstance>> iterator=this.dataStream.iterableOverBatches(this.batchSize).iterator();
  while (!convergence) {
    long startBatch=System.nanoTime();
    DataOnMemory<DataInstance> batch=iterator.next();
    if (!iterator.hasNext())     iterator=this.dataStream.iterableOverBatches(this.batchSize).iterator();
    NaturalParameters newParam=svb.updateModelOnBatchParallel(batch).getVector();
    newParam.multiplyBy(this.dataSetSize / (double)this.batchSize);
    newParam.sum(prior);
    double stepSize=Math.pow(1 + iteration,-learningFactor);
    newParam.multiplyBy(stepSize);
    currentParam.multiplyBy((1 - stepSize));
    currentParam.sum(newParam);
    this.svb.updateNaturalParameterPosteriors(currentParam);
    long startBatchELBO=System.nanoTime();
    long endBatch=System.nanoTime();
    totalTimeElbo+=endBatch - startBatchELBO;
    System.out.println(""String_Node_Str"" + totalTimeElbo / 1e9);
    totalTime+=endBatch - startBatch;
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ stepSize+ ""String_Node_Str""+ totalTime / 1e9 + ""String_Node_Str"" + totalTimeElbo / 1e9 + ""String_Node_Str"" + (totalTime - totalTimeElbo) / 1e9 + ""String_Node_Str"");
    if ((totalTime - totalTimeElbo) / 1e9 > timiLimit || iteration > this.maximumLocalIterations) {
      convergence=true;
    }
    iteration++;
  }
}",0.985728509790906
21220,"/** 
 * {@inheritDoc}
 */
@Override public double updateModel(DataFlink<DataInstance> dataUpdate){
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  boolean convergence=false;
  CompoundVector prior=svb.getNaturalParameterPrior();
  CompoundVector initialPosterior=Serialization.deepCopy(this.svb.getPlateuStructure().getPlateauNaturalParameterPosterior());
  initialPosterior.sum(prior);
  this.svb.updateNaturalParameterPosteriors(initialPosterior);
  CompoundVector currentParam=svb.getNaturalParameterPrior();
  double totalTimeElbo=0;
  double totalTime=0;
  double t=0;
  while (!convergence) {
    long startBatch=System.nanoTime();
    DataOnMemory<DataInstance> batch;
    if (batchConverter == null)     batch=dataUpdate.subsample(this.svb.getSeed(),this.batchSize);
 else     batch=dataUpdate.subsample(this.svb.getSeed(),this.batchSize,this.batchConverter);
    NaturalParameters newParam=svb.updateModelOnBatchParallel(batch).getVector();
    newParam.multiplyBy(this.dataSetSize / (double)this.batchSize);
    newParam.sum(prior);
    double stepSize=Math.pow(1 + t,-learningFactor);
    newParam.multiplyBy(stepSize);
    currentParam.multiplyBy((1 - stepSize));
    currentParam.sum(newParam);
    this.svb.updateNaturalParameterPosteriors(currentParam);
    long endBatch=System.nanoTime();
    totalTime+=endBatch - startBatch;
    if (t % 10 == 0) {
      long startBatchELBO=System.nanoTime();
      double elbo=this.computeELBO(dataUpdate,svb,this.batchConverter);
      long endBatchELBO=System.nanoTime();
      totalTimeElbo+=endBatchELBO - startBatchELBO;
      System.out.println(""String_Node_Str"" + totalTimeElbo / 1e9);
      logger.info(""String_Node_Str"",t,0,df.format(elbo),df.format(totalTime / 1e9),df.format(totalTimeElbo / 1e9));
      System.out.println(""String_Node_Str"" + t + ""String_Node_Str""+ stepSize+ ""String_Node_Str""+ elbo+ ""String_Node_Str""+ totalTime / 1e9 + ""String_Node_Str"" + totalTimeElbo / 1e9 + ""String_Node_Str"" + (totalTime - totalTimeElbo) / 1e9 + ""String_Node_Str"");
    }
    if ((totalTime - totalTimeElbo) / 1e9 > timiLimit) {
      convergence=true;
    }
    t++;
  }
  this.svb.updateNaturalParameterPrior(currentParam);
  return this.getLogMarginalProbability();
}","/** 
 * {@inheritDoc}
 */
@Override public double updateModel(DataFlink<DataInstance> dataUpdate){
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  boolean convergence=false;
  CompoundVector prior=svb.getNaturalParameterPrior();
  CompoundVector initialPosterior=Serialization.deepCopy(this.svb.getPlateuStructure().getPlateauNaturalParameterPosterior());
  initialPosterior.sum(prior);
  this.svb.updateNaturalParameterPosteriors(initialPosterior);
  CompoundVector currentParam=svb.getNaturalParameterPrior();
  double totalTimeElbo=0;
  double totalTime=0;
  double t=0;
  while (!convergence) {
    long startBatch=System.nanoTime();
    DataOnMemory<DataInstance> batch;
    if (batchConverter == null)     batch=dataUpdate.subsample(this.svb.getSeed(),this.batchSize);
 else     batch=dataUpdate.subsample(this.svb.getSeed(),this.batchSize,this.batchConverter);
    NaturalParameters newParam=svb.updateModelOnBatchParallel(batch).getVector();
    newParam.multiplyBy(this.dataSetSize / (double)this.batchSize);
    newParam.sum(prior);
    double stepSize=Math.pow(1 + t,-learningFactor);
    newParam.multiplyBy(stepSize);
    currentParam.multiplyBy((1 - stepSize));
    currentParam.sum(newParam);
    this.svb.updateNaturalParameterPosteriors(currentParam);
    long endBatch=System.nanoTime();
    totalTime+=endBatch - startBatch;
    if (t % 10 == 0) {
      long startBatchELBO=System.nanoTime();
      double elbo=this.computeELBO(dataUpdate,svb,this.batchConverter);
      long endBatchELBO=System.nanoTime();
      totalTimeElbo+=endBatchELBO - startBatchELBO;
      System.out.println(""String_Node_Str"" + totalTimeElbo / 1e9);
      logger.info(""String_Node_Str"",t,0,df.format(elbo),df.format(totalTime / 1e9),df.format(totalTimeElbo / 1e9));
      System.out.println(""String_Node_Str"" + t + ""String_Node_Str""+ stepSize+ ""String_Node_Str""+ elbo+ ""String_Node_Str""+ totalTime / 1e9 + ""String_Node_Str"" + totalTimeElbo / 1e9 + ""String_Node_Str"" + (totalTime - totalTimeElbo) / 1e9 + ""String_Node_Str"");
    }
    if ((totalTime - totalTimeElbo) / 1e9 > timiLimit || t > this.maximumLocalIterations) {
      convergence=true;
    }
    t++;
  }
  this.svb.updateNaturalParameterPrior(currentParam);
  return this.getLogMarginalProbability();
}",0.9922308546059934
21221,"public static void baseTest(ExecutionEnvironment env,DataStream<DataInstance> data,BayesianNetwork network,int dataSetSize,int batchSize,double error) throws IOException, ClassNotFoundException {
  DataStreamWriter.writeDataToFile(data,""String_Node_Str"");
  DataFlink<DataInstance> dataFlink=DataFlinkLoader.loadDataFromFile(env,""String_Node_Str"",false);
  network.getDAG().getVariables().setAttributes(dataFlink.getAttributes());
  StochasticVI stochasticVI=new StochasticVI();
  stochasticVI.setLearningFactor(0.7);
  stochasticVI.setDataSetSize(dataSetSize);
  stochasticVI.setOutput(true);
  stochasticVI.setSeed(5);
  stochasticVI.setBatchSize(batchSize);
  stochasticVI.setLocalThreshold(0.001);
  stochasticVI.setMaximumLocalIterations(100);
  stochasticVI.setTimiLimit(10);
  stochasticVI.setDAG(network.getDAG());
  stochasticVI.initLearning();
  stochasticVI.updateModel(dataFlink);
  BayesianNetwork bnet=stochasticVI.getLearntBayesianNetwork();
  for (  Variable var : network.getVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + network.getConditionalDistribution(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistribution(var));
    Assert.assertTrue(bnet.getConditionalDistribution(var).equalDist(network.getConditionalDistribution(var),error));
  }
  Assert.assertTrue(bnet.equalBNs(network,error));
}","public static void baseTest(ExecutionEnvironment env,DataStream<DataInstance> data,BayesianNetwork network,int dataSetSize,int batchSize,double error) throws IOException, ClassNotFoundException {
  DataStreamWriter.writeDataToFile(data,""String_Node_Str"");
  DataFlink<DataInstance> dataFlink=DataFlinkLoader.loadDataFromFile(env,""String_Node_Str"",false);
  network.getDAG().getVariables().setAttributes(dataFlink.getAttributes());
  StochasticVI stochasticVI=new StochasticVI();
  stochasticVI.setLearningFactor(0.7);
  stochasticVI.setDataSetSize(dataSetSize);
  stochasticVI.setOutput(true);
  stochasticVI.setSeed(5);
  stochasticVI.setBatchSize(batchSize);
  stochasticVI.setLocalThreshold(0.001);
  stochasticVI.setMaximumLocalIterations(100);
  stochasticVI.setTimiLimit(20);
  stochasticVI.setDAG(network.getDAG());
  stochasticVI.initLearning();
  stochasticVI.updateModel(dataFlink);
  BayesianNetwork bnet=stochasticVI.getLearntBayesianNetwork();
  for (  Variable var : network.getVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + network.getConditionalDistribution(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistribution(var));
    Assert.assertTrue(bnet.getConditionalDistribution(var).equalDist(network.getConditionalDistribution(var),error));
  }
  Assert.assertTrue(bnet.equalBNs(network,error));
}",0.9992992291520671
21222,"public static void test2(){
  Variables variables=new Variables();
  EF_SparseMultinomial dist=new EF_SparseMultinomial(variables.newMultionomialVariable(""String_Node_Str"",10));
  int size=10;
  SufficientStatistics sufficientStatistics=dist.getSufficientStatistics(1);
  sufficientStatistics.multiplyBy(size);
  sufficientStatistics.sum(dist.createInitSufficientStatistics());
  System.out.println(sufficientStatistics.output());
  System.out.println();
  dist.setMomentParameters(sufficientStatistics);
  System.out.println(dist.getMomentParameters().output());
  System.out.println();
  dist.updateNaturalFromMomentParameters();
  System.out.println(dist.getNaturalParameters().output());
  System.out.println();
  dist.fixNumericalInstability();
  System.out.println(dist.getNaturalParameters().output());
  System.out.println();
  dist.updateMomentFromNaturalParameters();
  System.out.println(dist.getMomentParameters().output());
  System.out.println((size + 0.1) / (size + 1));
  assertEquals((size + 0.1) / (size + 1),dist.getMomentParameters().get(1),0.0000001);
}","public static void test2(){
  Variables variables=new Variables();
  EF_SparseMultinomial dist=new EF_SparseMultinomial(variables.newMultinomialVariable(""String_Node_Str"",10));
  int size=10;
  SufficientStatistics sufficientStatistics=dist.getSufficientStatistics(1);
  sufficientStatistics.multiplyBy(size);
  sufficientStatistics.sum(dist.createInitSufficientStatistics());
  System.out.println(sufficientStatistics.output());
  System.out.println();
  dist.setMomentParameters(sufficientStatistics);
  System.out.println(dist.getMomentParameters().output());
  System.out.println();
  dist.updateNaturalFromMomentParameters();
  System.out.println(dist.getNaturalParameters().output());
  System.out.println();
  dist.fixNumericalInstability();
  System.out.println(dist.getNaturalParameters().output());
  System.out.println();
  dist.updateMomentFromNaturalParameters();
  System.out.println(dist.getMomentParameters().output());
  System.out.println((size + 0.1) / (size + 1));
  assertEquals((size + 0.1) / (size + 1),dist.getMomentParameters().get(1),0.0000001);
}",0.999534233814625
21223,"public static void test3(){
  Variables variables=new Variables();
  EF_SparseMultinomial dist=new EF_SparseMultinomial(variables.newMultionomialVariable(""String_Node_Str"",10));
  EF_Multinomial distM=new EF_Multinomial(variables.newMultionomialVariable(""String_Node_Str"",10));
  int size=10;
  SufficientStatistics sufficientStatistics=dist.getSufficientStatistics(1);
  sufficientStatistics.multiplyBy(size);
  sufficientStatistics.sum(dist.createInitSufficientStatistics());
  dist.setMomentParameters(sufficientStatistics);
  distM.setMomentParameters(sufficientStatistics);
  dist.updateNaturalFromMomentParameters();
  distM.updateNaturalFromMomentParameters();
  dist.fixNumericalInstability();
  distM.fixNumericalInstability();
  dist.updateMomentFromNaturalParameters();
  distM.updateMomentFromNaturalParameters();
  assertEquals(dist.getNaturalParameters().sum(),distM.getNaturalParameters().sum());
  assertEquals(dist.getMomentParameters().sum(),distM.getMomentParameters().sum());
  assertEquals(dist.computeLogBaseMeasure(1.0),distM.computeLogBaseMeasure(1.0));
  assertEquals(dist.computeLogNormalizer(),distM.computeLogNormalizer());
  for (int i=0; i < 10; i++) {
    assertEquals(dist.computeLogProbabilityOf(i),distM.computeLogProbabilityOf(i));
  }
}","public static void test3(){
  Variables variables=new Variables();
  EF_SparseMultinomial dist=new EF_SparseMultinomial(variables.newMultinomialVariable(""String_Node_Str"",10));
  EF_Multinomial distM=new EF_Multinomial(variables.newMultinomialVariable(""String_Node_Str"",10));
  int size=10;
  SufficientStatistics sufficientStatistics=dist.getSufficientStatistics(1);
  sufficientStatistics.multiplyBy(size);
  sufficientStatistics.sum(dist.createInitSufficientStatistics());
  dist.setMomentParameters(sufficientStatistics);
  distM.setMomentParameters(sufficientStatistics);
  dist.updateNaturalFromMomentParameters();
  distM.updateNaturalFromMomentParameters();
  dist.fixNumericalInstability();
  distM.fixNumericalInstability();
  dist.updateMomentFromNaturalParameters();
  distM.updateMomentFromNaturalParameters();
  assertEquals(dist.getNaturalParameters().sum(),distM.getNaturalParameters().sum());
  assertEquals(dist.getMomentParameters().sum(),distM.getMomentParameters().sum());
  assertEquals(dist.computeLogBaseMeasure(1.0),distM.computeLogBaseMeasure(1.0));
  assertEquals(dist.computeLogNormalizer(),distM.computeLogNormalizer());
  for (int i=0; i < 10; i++) {
    assertEquals(dist.computeLogProbabilityOf(i),distM.computeLogProbabilityOf(i));
  }
}",0.999213217938631
21224,"public static void test1(){
  Variables variables=new Variables();
  EF_SparseMultinomial dist=new EF_SparseMultinomial(variables.newMultionomialVariable(""String_Node_Str"",10));
  System.out.println(dist.getSufficientStatistics(1).output());
  System.out.println(dist.getNaturalParameters().output());
  System.out.println(dist.getMomentParameters().output());
  System.out.println();
  dist.setMomentParameters(dist.getSufficientStatistics(1));
  System.out.println(dist.getMomentParameters().output());
  System.out.println();
  dist.updateNaturalFromMomentParameters();
  System.out.println(dist.getNaturalParameters().output());
  System.out.println();
  dist.updateMomentFromNaturalParameters();
  System.out.println(dist.getMomentParameters().output());
}","public static void test1(){
  Variables variables=new Variables();
  EF_SparseMultinomial dist=new EF_SparseMultinomial(variables.newMultinomialVariable(""String_Node_Str"",10));
  System.out.println(dist.getSufficientStatistics(1).output());
  System.out.println(dist.getNaturalParameters().output());
  System.out.println(dist.getMomentParameters().output());
  System.out.println();
  dist.setMomentParameters(dist.getSufficientStatistics(1));
  System.out.println(dist.getMomentParameters().output());
  System.out.println();
  dist.updateNaturalFromMomentParameters();
  System.out.println(dist.getNaturalParameters().output());
  System.out.println();
  dist.updateMomentFromNaturalParameters();
  System.out.println(dist.getMomentParameters().output());
}",0.9993425378040762
21225,"public static void test(){
  Variables variables=new Variables();
  ParameterVariables parameterVariables=new ParameterVariables(1);
  Variable multiA=variables.newMultionomialVariable(""String_Node_Str"",10);
  Variable dirichlet=parameterVariables.newDirichletParameter(""String_Node_Str"",10);
  EF_SparseMultinomial_SparseDirichlet dist=new EF_SparseMultinomial_SparseDirichlet(multiA,dirichlet);
  EF_SparseDirichlet distDirichlet=new EF_SparseDirichlet(dirichlet);
  EF_LearningBayesianNetwork ef_learningBayesianNetwork=new EF_LearningBayesianNetwork(Arrays.asList(dist,distDirichlet));
}","public static void test(){
  Variables variables=new Variables();
  ParameterVariables parameterVariables=new ParameterVariables(1);
  Variable multiA=variables.newMultinomialVariable(""String_Node_Str"",10);
  Variable dirichlet=parameterVariables.newDirichletParameter(""String_Node_Str"",10);
  EF_SparseMultinomial_SparseDirichlet dist=new EF_SparseMultinomial_SparseDirichlet(multiA,dirichlet);
  EF_SparseDirichlet distDirichlet=new EF_SparseDirichlet(dirichlet);
  EF_LearningBayesianNetwork ef_learningBayesianNetwork=new EF_LearningBayesianNetwork(Arrays.asList(dist,distDirichlet));
}",0.9991532599491956
21226,"public static void testMultinomials1() throws IOException, ClassNotFoundException {
  Variables variables=new Variables();
  Variable varA=variables.newMultionomialVariable(""String_Node_Str"",2);
  DAG dag=new DAG(variables);
  BayesianNetwork bn=new BayesianNetwork(dag);
  bn.randomInitialization(new Random(0));
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setSeed(2);
  DataStream<DataInstance> data=sampler.sampleToDataStream(1000);
  SVB svb=new SVB();
  svb.setWindowsSize(1000);
  svb.setSeed(5);
  VMP vmp=svb.getPlateuStructure().getVMP();
  vmp.setTestELBO(true);
  vmp.setMaxIter(1000);
  vmp.setThreshold(0.0001);
  svb.setDAG(bn.getDAG());
  svb.setDataStream(data);
  svb.runLearning();
  BayesianNetwork learnBN=svb.getLearntBayesianNetwork();
  System.out.println(bn.toString());
  System.out.println(learnBN.toString());
  assertTrue(bn.equalBNs(learnBN,0.05));
}","public static void testMultinomials1() throws IOException, ClassNotFoundException {
  Variables variables=new Variables();
  Variable varA=variables.newMultinomialVariable(""String_Node_Str"",2);
  DAG dag=new DAG(variables);
  BayesianNetwork bn=new BayesianNetwork(dag);
  bn.randomInitialization(new Random(0));
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setSeed(2);
  DataStream<DataInstance> data=sampler.sampleToDataStream(1000);
  SVB svb=new SVB();
  svb.setWindowsSize(1000);
  svb.setSeed(5);
  VMP vmp=svb.getPlateuStructure().getVMP();
  vmp.setTestELBO(true);
  vmp.setMaxIter(1000);
  vmp.setThreshold(0.0001);
  svb.setDAG(bn.getDAG());
  svb.setDataStream(data);
  svb.runLearning();
  BayesianNetwork learnBN=svb.getLearntBayesianNetwork();
  System.out.println(bn.toString());
  System.out.println(learnBN.toString());
  assertTrue(bn.equalBNs(learnBN,0.05));
}",0.999450247388675
21227,"public static void test2(){
  Variables variables=new Variables();
  Variable word=variables.newSparseMultionomialVariable(""String_Node_Str"",100);
  Variable topicIndicator=variables.newMultionomialVariable(""String_Node_Str"",2);
  DAG dagLDA=new DAG(variables);
  dagLDA.getParentSet(word).addParent(topicIndicator);
  List<EF_ConditionalDistribution> dists=dagLDA.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  EF_LearningBayesianNetwork ef_learningmodel=new EF_LearningBayesianNetwork(dists);
}","public static void test2(){
  Variables variables=new Variables();
  Variable word=variables.newSparseMultionomialVariable(""String_Node_Str"",100);
  Variable topicIndicator=variables.newMultinomialVariable(""String_Node_Str"",2);
  DAG dagLDA=new DAG(variables);
  dagLDA.getParentSet(word).addParent(topicIndicator);
  List<EF_ConditionalDistribution> dists=dagLDA.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  EF_LearningBayesianNetwork ef_learningmodel=new EF_LearningBayesianNetwork(dists);
}",0.9992119779353822
21228,"public static void testMultinomials1() throws IOException, ClassNotFoundException {
  Variables variables=new Variables();
  Variable varA=variables.newMultionomialVariable(""String_Node_Str"",2);
  DAG dag=new DAG(variables);
  BayesianNetwork bn=new BayesianNetwork(dag);
  bn.randomInitialization(new Random(0));
  System.out.println(bn.toString());
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setSeed(2);
  DataStream<DataInstance> data=sampler.sampleToDataStream(100);
  baseTest(data,bn,100,10,0.05);
}","public static void testMultinomials1() throws IOException, ClassNotFoundException {
  Variables variables=new Variables();
  Variable varA=variables.newMultinomialVariable(""String_Node_Str"",2);
  DAG dag=new DAG(variables);
  BayesianNetwork bn=new BayesianNetwork(dag);
  bn.randomInitialization(new Random(0));
  System.out.println(bn.toString());
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setSeed(2);
  DataStream<DataInstance> data=sampler.sampleToDataStream(100);
  baseTest(data,bn,100,10,0.05);
}",0.9990680335507922
21229,"@Override public void setDAG(DAG dag){
  if (dag != null)   throw new IllegalStateException(""String_Node_Str"");
  Variables variables=new Variables();
  word=variables.newSparseMultionomialVariable(attributes.getAttributeByName(wordDocumentName));
  topicIndicator=variables.newMultionomialVariable(""String_Node_Str"",nTopics);
  dagLDA=new DAG(variables);
  dagLDA.setName(""String_Node_Str"");
  dagLDA.getParentSet(word).addParent(topicIndicator);
  List<EF_ConditionalDistribution> dists=dagLDA.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  ef_learningmodel=new EF_LearningBayesianNetwork(dists);
  this.ef_learningmodel.getListOfParametersVariables().stream().forEach(var -> this.replicatedVariables.put(var,false));
  this.ef_learningmodel.getListOfNonParameterVariables().stream().forEach(var -> this.replicatedVariables.put(var,true));
  dirichletMixingTopics=ef_learningmodel.getDistribution(topicIndicator).getConditioningVariables().get(0);
  this.replicatedVariables.put(dirichletMixingTopics,true);
  this.nonReplicatedVariablesList=this.replicatedVariables.entrySet().stream().filter(entry -> !entry.getValue()).map(entry -> entry.getKey()).sorted((a,b) -> a.getVarID() - b.getVarID()).collect(Collectors.toList());
  for (int i=0; i < nTopics; i++) {
    ef_learningmodel.getDistribution(dirichletMixingTopics).getNaturalParameters().set(i,0.1);
  }
  for (  Variable variable : this.nonReplicatedVariablesList) {
    NaturalParameters vec=this.ef_learningmodel.getDistribution(variable).getNaturalParameters();
    for (int i=0; i < vec.size(); i++) {
      vec.set(i,0.01);
    }
  }
}","@Override public void setDAG(DAG dag){
  if (dag != null)   throw new IllegalStateException(""String_Node_Str"");
  Variables variables=new Variables();
  word=variables.newSparseMultionomialVariable(attributes.getAttributeByName(wordDocumentName));
  topicIndicator=variables.newMultinomialVariable(""String_Node_Str"",nTopics);
  dagLDA=new DAG(variables);
  dagLDA.setName(""String_Node_Str"");
  dagLDA.getParentSet(word).addParent(topicIndicator);
  List<EF_ConditionalDistribution> dists=dagLDA.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  ef_learningmodel=new EF_LearningBayesianNetwork(dists);
  this.ef_learningmodel.getListOfParametersVariables().stream().forEach(var -> this.replicatedVariables.put(var,false));
  this.ef_learningmodel.getListOfNonParameterVariables().stream().forEach(var -> this.replicatedVariables.put(var,true));
  dirichletMixingTopics=ef_learningmodel.getDistribution(topicIndicator).getConditioningVariables().get(0);
  this.replicatedVariables.put(dirichletMixingTopics,true);
  this.nonReplicatedVariablesList=this.replicatedVariables.entrySet().stream().filter(entry -> !entry.getValue()).map(entry -> entry.getKey()).sorted((a,b) -> a.getVarID() - b.getVarID()).collect(Collectors.toList());
  for (int i=0; i < nTopics; i++) {
    ef_learningmodel.getDistribution(dirichletMixingTopics).getNaturalParameters().set(i,0.1);
  }
  for (  Variable variable : this.nonReplicatedVariablesList) {
    NaturalParameters vec=this.ef_learningmodel.getDistribution(variable).getNaturalParameters();
    for (int i=0; i < vec.size(); i++) {
      vec.set(i,0.01);
    }
  }
}",0.999712395743457
21230,"@Override public void setDAG(DAG dag){
  if (dag != null)   throw new IllegalStateException(""String_Node_Str"");
  Variables variables=new Variables();
  word=variables.newSparseMultionomialVariable(attributes.getAttributeByName(wordDocumentName));
  topicIndicator=variables.newMultionomialVariable(""String_Node_Str"",nTopics);
  dagLDA=new DAG(variables);
  dagLDA.setName(""String_Node_Str"");
  dagLDA.getParentSet(word).addParent(topicIndicator);
  List<EF_ConditionalDistribution> dists=dagLDA.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  ef_learningmodel=new EF_LearningBayesianNetwork(dists);
  this.ef_learningmodel.getListOfParametersVariables().stream().forEach(var -> this.replicatedVariables.put(var,false));
  this.ef_learningmodel.getListOfNonParameterVariables().stream().forEach(var -> this.replicatedVariables.put(var,true));
  dirichletMixingTopics=ef_learningmodel.getDistribution(topicIndicator).getConditioningVariables().get(0);
  this.replicatedVariables.put(dirichletMixingTopics,true);
  this.nonReplicatedVariablesList=this.replicatedVariables.entrySet().stream().filter(entry -> !entry.getValue()).map(entry -> entry.getKey()).sorted((a,b) -> a.getVarID() - b.getVarID()).collect(Collectors.toList());
  for (int i=0; i < nTopics; i++) {
    ef_learningmodel.getDistribution(dirichletMixingTopics).getNaturalParameters().set(i,0.1);
  }
  for (  Variable variable : this.nonReplicatedVariablesList) {
    NaturalParameters vec=this.ef_learningmodel.getDistribution(variable).getNaturalParameters();
    for (int i=0; i < vec.size(); i++) {
      vec.set(i,0.01);
    }
  }
}","@Override public void setDAG(DAG dag){
  if (dag != null)   throw new IllegalStateException(""String_Node_Str"");
  Variables variables=new Variables();
  word=variables.newSparseMultionomialVariable(attributes.getAttributeByName(wordDocumentName));
  topicIndicator=variables.newMultinomialVariable(""String_Node_Str"",nTopics);
  dagLDA=new DAG(variables);
  dagLDA.setName(""String_Node_Str"");
  dagLDA.getParentSet(word).addParent(topicIndicator);
  List<EF_ConditionalDistribution> dists=dagLDA.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  ef_learningmodel=new EF_LearningBayesianNetwork(dists);
  this.ef_learningmodel.getListOfParametersVariables().stream().forEach(var -> this.replicatedVariables.put(var,false));
  this.ef_learningmodel.getListOfNonParameterVariables().stream().forEach(var -> this.replicatedVariables.put(var,true));
  dirichletMixingTopics=ef_learningmodel.getDistribution(topicIndicator).getConditioningVariables().get(0);
  this.replicatedVariables.put(dirichletMixingTopics,true);
  this.nonReplicatedVariablesList=this.replicatedVariables.entrySet().stream().filter(entry -> !entry.getValue()).map(entry -> entry.getKey()).sorted((a,b) -> a.getVarID() - b.getVarID()).collect(Collectors.toList());
  for (int i=0; i < nTopics; i++) {
    ef_learningmodel.getDistribution(dirichletMixingTopics).getNaturalParameters().set(i,0.1);
  }
  for (  Variable variable : this.nonReplicatedVariablesList) {
    NaturalParameters vec=this.ef_learningmodel.getDistribution(variable).getNaturalParameters();
    for (int i=0; i < vec.size(); i++) {
      vec.set(i,0.01);
    }
  }
}",0.999712395743457
21231,"public static void main(String[] args) throws Exception {
  String dataPath=""String_Node_Str"";
  String dataTest=""String_Node_Str"";
  int ntopics=5;
  int niter=100;
  double threshold=0.1;
  int docsPerBatch=10;
  double learningRate=0.75;
  int timeLimit=-1;
  int dataSize=98851;
  int ncores=4;
  boolean amazon_cluster=true;
  if (args.length > 1) {
    dataPath=args[0];
    dataTest=args[1];
    dataSize=Integer.parseInt(args[2]);
    ntopics=Integer.parseInt(args[3]);
    niter=Integer.parseInt(args[4]);
    threshold=Double.parseDouble(args[5]);
    docsPerBatch=Integer.parseInt(args[6]);
    learningRate=Double.parseDouble(args[7]);
    timeLimit=Integer.parseInt(args[8]);
    ncores=Integer.parseInt(args[9]);
    amazon_cluster=Boolean.parseBoolean(args[10]);
  }
  final ExecutionEnvironment env;
  if (amazon_cluster) {
    env=ExecutionEnvironment.getExecutionEnvironment();
  }
 else {
    Configuration conf=new Configuration();
    conf.setInteger(""String_Node_Str"",12000);
    conf.setInteger(""String_Node_Str"",ncores);
    env=ExecutionEnvironment.createLocalEnvironment(conf);
    env.setParallelism(ncores);
  }
  DataFlink<DataInstance> dataInstances=DataFlinkLoader.loadDataFromFile(env,dataPath,false);
  StochasticVI svb=new StochasticVI();
  PlateauLDAFlink plateauLDA=new PlateauLDAFlink(dataInstances.getAttributes(),""String_Node_Str"",""String_Node_Str"");
  plateauLDA.setNTopics(ntopics);
  svb.setPlateuStructure(plateauLDA);
  svb.setOutput(true);
  svb.setMaximumLocalIterations(niter);
  svb.setLocalThreshold(threshold);
  svb.setSeed(5);
  svb.setBatchSize(docsPerBatch);
  svb.setLearningFactor(learningRate);
  svb.setDataSetSize(dataSize);
  svb.setTimiLimit(timeLimit);
  svb.setDataFlink(dataInstances);
  svb.setBatchConverter(ConversionToBatches::toBatchesBySeqID);
  svb.runLearning();
  DataFlink<DataInstance> instancesTest=DataFlinkLoader.loadDataFromFile(env,dataTest,false);
  double test_log_likelihood=StochasticVI.computeELBO(instancesTest,svb.getSVB(),ConversionToBatches::toBatchesBySeqID);
  System.out.println(""String_Node_Str"" + test_log_likelihood);
  if (args.length > 0) {
    args[0]=""String_Node_Str"";
    args[1]=""String_Node_Str"";
  }
  String pathNetwork=""String_Node_Str"" + Arrays.toString(args) + ""String_Node_Str"";
  svb.getSVB().setDAG(((PlateauLDAFlink)svb.getSVB().getPlateuStructure()).getDagLDA());
  System.out.println(svb.getLearntBayesianNetwork().toString());
  BayesianNetworkWriter.saveToFile(svb.getLearntBayesianNetwork(),pathNetwork);
}","public static void main(String[] args) throws Exception {
  String dataPath=""String_Node_Str"";
  String dataTest=""String_Node_Str"";
  int ntopics=5;
  int niter=100;
  double threshold=0.1;
  int docsPerBatch=10;
  double learningRate=0.75;
  int timeLimit=-1;
  int dataSize=98851;
  int ncores=4;
  boolean amazon_cluster=true;
  if (args.length > 1) {
    dataPath=args[0];
    dataTest=args[1];
    dataSize=Integer.parseInt(args[2]);
    ntopics=Integer.parseInt(args[3]);
    niter=Integer.parseInt(args[4]);
    threshold=Double.parseDouble(args[5]);
    docsPerBatch=Integer.parseInt(args[6]);
    learningRate=Double.parseDouble(args[7]);
    timeLimit=Integer.parseInt(args[8]);
    ncores=Integer.parseInt(args[9]);
    amazon_cluster=Boolean.parseBoolean(args[10]);
  }
  final ExecutionEnvironment env;
  if (amazon_cluster) {
    env=ExecutionEnvironment.getExecutionEnvironment();
  }
 else {
    Configuration conf=new Configuration();
    conf.setInteger(""String_Node_Str"",12000);
    conf.setInteger(""String_Node_Str"",ncores);
    env=ExecutionEnvironment.createLocalEnvironment(conf);
    env.setParallelism(ncores);
  }
  DataFlink<DataInstance> dataInstances=DataFlinkLoader.loadDataFromFile(env,dataPath,false);
  StochasticVI svb=new StochasticVI();
  PlateauLDAFlink plateauLDA=new PlateauLDAFlink(dataInstances.getAttributes(),""String_Node_Str"",""String_Node_Str"");
  plateauLDA.setNTopics(ntopics);
  svb.setPlateuStructure(plateauLDA);
  svb.setOutput(true);
  svb.setMaximumLocalIterations(niter);
  svb.setLocalThreshold(threshold);
  svb.setSeed(5);
  svb.setBatchSize(docsPerBatch);
  svb.setLearningFactor(learningRate);
  svb.setDataSetSize(dataSize);
  svb.setTimiLimit(timeLimit);
  svb.setDataFlink(dataInstances);
  svb.setBatchConverter(ConversionToBatches::toBatchesBySeqID);
  svb.runLearning();
  DataFlink<DataInstance> instancesTest=DataFlinkLoader.loadDataFromFile(env,dataTest,false);
  double test_log_likelihood=StochasticVI.computeELBO(instancesTest,svb.getSVB(),ConversionToBatches::toBatchesBySeqID);
  System.out.println(""String_Node_Str"" + test_log_likelihood);
  if (args.length > 0) {
    args[0]=""String_Node_Str"";
    args[1]=""String_Node_Str"";
  }
  String pathNetwork=""String_Node_Str"" + Arrays.toString(args) + ""String_Node_Str"";
  svb.getSVB().setDAG(((PlateauLDAFlink)svb.getSVB().getPlateuStructure()).getDagLDA());
  System.out.println(svb.getLearntBayesianNetwork().toString());
  BayesianNetworkWriter.save(svb.getLearntBayesianNetwork(),pathNetwork);
}",0.9988095238095238
21232,"public static void main(String[] args) throws Exception {
  String dataPath=""String_Node_Str"";
  String dataTest=""String_Node_Str"";
  int ntopics=5;
  int niter=100;
  double threshold=0.1;
  int docsPerBatch=10;
  int timeLimit=-1;
  int ncores=4;
  boolean amazon_cluster=true;
  if (args.length > 1) {
    dataPath=args[0];
    dataTest=args[1];
    ntopics=Integer.parseInt(args[2]);
    niter=Integer.parseInt(args[3]);
    threshold=Double.parseDouble(args[4]);
    docsPerBatch=Integer.parseInt(args[5]);
    timeLimit=Integer.parseInt(args[6]);
    ncores=Integer.parseInt(args[7]);
    amazon_cluster=Boolean.parseBoolean(args[8]);
  }
  final ExecutionEnvironment env;
  if (amazon_cluster) {
    env=ExecutionEnvironment.getExecutionEnvironment();
  }
 else {
    Configuration conf=new Configuration();
    conf.setInteger(""String_Node_Str"",12000);
    conf.setInteger(""String_Node_Str"",ncores);
    env=ExecutionEnvironment.createLocalEnvironment(conf);
    env.setParallelism(ncores);
  }
  DataFlink<DataInstance> dataInstances=DataFlinkLoader.loadDataFromFile(env,dataPath,false);
  dVMP svb=new dVMP();
  PlateauLDAFlink plateauLDA=new PlateauLDAFlink(dataInstances.getAttributes(),""String_Node_Str"",""String_Node_Str"");
  plateauLDA.setNTopics(ntopics);
  svb.setPlateuStructure(plateauLDA);
  svb.setOutput(true);
  svb.setMaximumGlobalIterations(niter);
  svb.setMaximumLocalIterations(niter);
  svb.setLocalThreshold(threshold);
  svb.setGlobalThreshold(threshold);
  svb.setTimeLimit(timeLimit);
  svb.setSeed(5);
  svb.setBatchSize(docsPerBatch);
  svb.setDataFlink(dataInstances);
  svb.setBatchConverter(ConversionToBatches::toBatchesBySeqID);
  svb.setDAG(plateauLDA.getDagLDA());
  svb.runLearning();
  DataFlink<DataInstance> instancesTest=DataFlinkLoader.loadDataFromFile(env,dataTest,false);
  double test_log_likelihood=StochasticVI.computeELBO(instancesTest,svb.getSVB(),ConversionToBatches::toBatchesBySeqID);
  System.out.println(""String_Node_Str"" + test_log_likelihood);
  if (args.length > 0) {
    args[0]=""String_Node_Str"";
    args[1]=""String_Node_Str"";
  }
  String pathNetwork=""String_Node_Str"" + Arrays.toString(args) + ""String_Node_Str"";
  svb.getSVB().setDAG(((PlateauLDAFlink)svb.getSVB().getPlateuStructure()).getDagLDA());
  System.out.println(svb.getLearntBayesianNetwork().toString());
  BayesianNetworkWriter.saveToFile(svb.getLearntBayesianNetwork(),pathNetwork);
}","public static void main(String[] args) throws Exception {
  String dataPath=""String_Node_Str"";
  String dataTest=""String_Node_Str"";
  int ntopics=5;
  int niter=100;
  double threshold=0.1;
  int docsPerBatch=10;
  int timeLimit=-1;
  int ncores=4;
  boolean amazon_cluster=true;
  if (args.length > 1) {
    dataPath=args[0];
    dataTest=args[1];
    ntopics=Integer.parseInt(args[2]);
    niter=Integer.parseInt(args[3]);
    threshold=Double.parseDouble(args[4]);
    docsPerBatch=Integer.parseInt(args[5]);
    timeLimit=Integer.parseInt(args[6]);
    ncores=Integer.parseInt(args[7]);
    amazon_cluster=Boolean.parseBoolean(args[8]);
  }
  final ExecutionEnvironment env;
  if (amazon_cluster) {
    env=ExecutionEnvironment.getExecutionEnvironment();
  }
 else {
    Configuration conf=new Configuration();
    conf.setInteger(""String_Node_Str"",12000);
    conf.setInteger(""String_Node_Str"",ncores);
    env=ExecutionEnvironment.createLocalEnvironment(conf);
    env.setParallelism(ncores);
  }
  DataFlink<DataInstance> dataInstances=DataFlinkLoader.loadDataFromFile(env,dataPath,false);
  dVMP svb=new dVMP();
  PlateauLDAFlink plateauLDA=new PlateauLDAFlink(dataInstances.getAttributes(),""String_Node_Str"",""String_Node_Str"");
  plateauLDA.setNTopics(ntopics);
  svb.setPlateuStructure(plateauLDA);
  svb.setOutput(true);
  svb.setMaximumGlobalIterations(niter);
  svb.setMaximumLocalIterations(niter);
  svb.setLocalThreshold(threshold);
  svb.setGlobalThreshold(threshold);
  svb.setTimeLimit(timeLimit);
  svb.setSeed(5);
  svb.setBatchSize(docsPerBatch);
  svb.setDataFlink(dataInstances);
  svb.setBatchConverter(ConversionToBatches::toBatchesBySeqID);
  svb.setDAG(plateauLDA.getDagLDA());
  svb.runLearning();
  DataFlink<DataInstance> instancesTest=DataFlinkLoader.loadDataFromFile(env,dataTest,false);
  double test_log_likelihood=StochasticVI.computeELBO(instancesTest,svb.getSVB(),ConversionToBatches::toBatchesBySeqID);
  System.out.println(""String_Node_Str"" + test_log_likelihood);
  if (args.length > 0) {
    args[0]=""String_Node_Str"";
    args[1]=""String_Node_Str"";
  }
  String pathNetwork=""String_Node_Str"" + Arrays.toString(args) + ""String_Node_Str"";
  svb.getSVB().setDAG(((PlateauLDAFlink)svb.getSVB().getPlateuStructure()).getDagLDA());
  System.out.println(svb.getLearntBayesianNetwork().toString());
  BayesianNetworkWriter.save(svb.getLearntBayesianNetwork(),pathNetwork);
}",0.9987562189054726
21233,"public static BayesianNetwork createNetwork() throws Exception {
  Variables variables=new Variables();
  Variable varA=variables.newGaussianVariable(""String_Node_Str"");
  Variable varB=variables.newMultionomialVariable(""String_Node_Str"",2);
  DAG dag=new DAG(variables);
  dag.getParentSet(varA).addParent(varB);
  BayesianNetwork bayesianNetwork=new BayesianNetwork(dag);
  ((Multinomial)bayesianNetwork.getConditionalDistribution(varB)).setProbabilities(new double[]{0.4,0.6});
  Normal normal0=((Normal_MultinomialParents)bayesianNetwork.getConditionalDistribution(varA)).getNormal(0);
  Normal normal1=((Normal_MultinomialParents)bayesianNetwork.getConditionalDistribution(varA)).getNormal(1);
  normal0.setMean(-2.5);
  normal0.setVariance(0.75);
  normal1.setMean(2.5);
  normal1.setVariance(0.5);
  if (mixture)   return bayesianNetwork;
 else   return BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
}","public static BayesianNetwork createNetwork() throws Exception {
  Variables variables=new Variables();
  Variable varA=variables.newGaussianVariable(""String_Node_Str"");
  Variable varB=variables.newMultinomialVariable(""String_Node_Str"",2);
  DAG dag=new DAG(variables);
  dag.getParentSet(varA).addParent(varB);
  BayesianNetwork bayesianNetwork=new BayesianNetwork(dag);
  ((Multinomial)bayesianNetwork.getConditionalDistribution(varB)).setProbabilities(new double[]{0.4,0.6});
  Normal normal0=((Normal_MultinomialParents)bayesianNetwork.getConditionalDistribution(varA)).getNormal(0);
  Normal normal1=((Normal_MultinomialParents)bayesianNetwork.getConditionalDistribution(varA)).getNormal(1);
  normal0.setMean(-2.5);
  normal0.setVariance(0.75);
  normal1.setMean(2.5);
  normal1.setVariance(0.5);
  if (mixture)   return bayesianNetwork;
 else   return BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
}",0.9994544462629568
21234,"public static void main(String[] args){
  Variables variables=new Variables();
  Variable word=variables.newSparseMultionomialVariable(""String_Node_Str"",2);
  Variable topicIndicator=variables.newMultionomialVariable(""String_Node_Str"",1);
  DAG dagLDA=new DAG(variables);
  dagLDA.setName(""String_Node_Str"");
  dagLDA.getParentSet(word).addParent(topicIndicator);
  List<EF_ConditionalDistribution> dists=dagLDA.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  EF_LearningBayesianNetwork ef_learningmodel=new EF_LearningBayesianNetwork(dists);
  EF_Dirichlet dirichletOld=(EF_Dirichlet)ef_learningmodel.getDistributionList().get(2);
  EF_Dirichlet dirichletUnif=Serialization.deepCopy(dirichletOld);
  EF_Dirichlet dirichletNew=Serialization.deepCopy(dirichletOld);
  Variable expVar=variables.newTruncatedExponential(""String_Node_Str"");
  EF_TruncatedExponential ef_truncatedExponential=expVar.getDistributionType().newEFUnivariateDistribution();
  double alpha=1.0;
  for (int i=0; i < 10; i++) {
    double nUnif=0.1;
    dirichletUnif.getNaturalParameters().set(0,nUnif);
    dirichletUnif.getNaturalParameters().set(1,1000);
    dirichletUnif.updateMomentFromNaturalParameters();
    double distOld=0.01;
    double NOld=1e6;
    dirichletOld.getNaturalParameters().set(0,NOld * distOld);
    dirichletOld.getNaturalParameters().set(1,NOld * (1 - distOld));
    dirichletOld.updateMomentFromNaturalParameters();
    double distNew=0.05;
    double Nnew=9.7e3;
    dirichletNew.getNaturalParameters().set(0,Nnew * distNew + alpha * NOld * distOld + (1 - alpha) * nUnif);
    dirichletNew.getNaturalParameters().set(1,Nnew * (1 - distNew) + alpha * NOld * (1 - distOld) + (1 - alpha) * nUnif);
    dirichletNew.updateMomentFromNaturalParameters();
    double klOld=dirichletNew.kl(dirichletOld.getNaturalParameters(),dirichletOld.computeLogNormalizer());
    double klUnif=dirichletNew.kl(dirichletUnif.getNaturalParameters(),dirichletUnif.computeLogNormalizer());
    System.out.println(klOld);
    System.out.println(klUnif);
    System.out.println(klUnif - klOld);
    ef_truncatedExponential.getNaturalParameters().set(0,klUnif - klOld);
    ef_truncatedExponential.updateMomentFromNaturalParameters();
    System.out.println(ef_truncatedExponential.getMomentParameters().get(0));
    alpha=ef_truncatedExponential.getMomentParameters().get(0);
    System.out.println();
  }
}","public static void main(String[] args){
  Variables variables=new Variables();
  Variable word=variables.newSparseMultionomialVariable(""String_Node_Str"",2);
  Variable topicIndicator=variables.newMultinomialVariable(""String_Node_Str"",1);
  DAG dagLDA=new DAG(variables);
  dagLDA.setName(""String_Node_Str"");
  dagLDA.getParentSet(word).addParent(topicIndicator);
  List<EF_ConditionalDistribution> dists=dagLDA.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  EF_LearningBayesianNetwork ef_learningmodel=new EF_LearningBayesianNetwork(dists);
  EF_Dirichlet dirichletOld=(EF_Dirichlet)ef_learningmodel.getDistributionList().get(2);
  EF_Dirichlet dirichletUnif=Serialization.deepCopy(dirichletOld);
  EF_Dirichlet dirichletNew=Serialization.deepCopy(dirichletOld);
  Variable expVar=variables.newTruncatedExponential(""String_Node_Str"");
  EF_TruncatedExponential ef_truncatedExponential=expVar.getDistributionType().newEFUnivariateDistribution();
  double alpha=1.0;
  for (int i=0; i < 10; i++) {
    double nUnif=0.1;
    dirichletUnif.getNaturalParameters().set(0,nUnif);
    dirichletUnif.getNaturalParameters().set(1,1000);
    dirichletUnif.updateMomentFromNaturalParameters();
    double distOld=0.01;
    double NOld=1e6;
    dirichletOld.getNaturalParameters().set(0,NOld * distOld);
    dirichletOld.getNaturalParameters().set(1,NOld * (1 - distOld));
    dirichletOld.updateMomentFromNaturalParameters();
    double distNew=0.05;
    double Nnew=9.7e3;
    dirichletNew.getNaturalParameters().set(0,Nnew * distNew + alpha * NOld * distOld + (1 - alpha) * nUnif);
    dirichletNew.getNaturalParameters().set(1,Nnew * (1 - distNew) + alpha * NOld * (1 - distOld) + (1 - alpha) * nUnif);
    dirichletNew.updateMomentFromNaturalParameters();
    double klOld=dirichletNew.kl(dirichletOld.getNaturalParameters(),dirichletOld.computeLogNormalizer());
    double klUnif=dirichletNew.kl(dirichletUnif.getNaturalParameters(),dirichletUnif.computeLogNormalizer());
    System.out.println(klOld);
    System.out.println(klUnif);
    System.out.println(klUnif - klOld);
    ef_truncatedExponential.getNaturalParameters().set(0,klUnif - klOld);
    ef_truncatedExponential.updateMomentFromNaturalParameters();
    System.out.println(ef_truncatedExponential.getMomentParameters().get(0));
    alpha=ef_truncatedExponential.getMomentParameters().get(0);
    System.out.println();
  }
}",0.9998015479261758
21235,"/** 
 * {@inheritDoc}
 */
@Override public <E extends UnivariateDistribution>E getPosterior(Variable var){
  Variable samplingVar=this.samplingModel.getVariables().getVariableByName(var.getName());
  EF_UnivariateDistribution ef_univariateDistribution=samplingVar.newUnivariateDistribution().toEFUnivariateDistribution();
  AtomicInteger dataInstanceCount=new AtomicInteger(0);
  if (keepDataOnMemory) {
    weightedSampleStream=weightedSampleList.stream().sequential();
  }
 else {
    computeWeightedSampleStream(false);
  }
  if (parallelMode) {
    weightedSampleStream.parallel();
  }
  if (!keepDataOnMemory) {
    weightedSampleList=weightedSampleStream.collect(Collectors.toList());
  }
  double maxLogWeight=weightedSampleList.stream().mapToDouble(weightetAssignment -> weightetAssignment.weight).filter(Double::isFinite).max().getAsDouble();
  SufficientStatistics sumSS=weightedSampleStream.peek(w -> {
    dataInstanceCount.getAndIncrement();
  }
).map(e -> {
    SufficientStatistics SS=ef_univariateDistribution.getSufficientStatistics(e.assignment);
    SS.multiplyBy(Math.exp(e.weight - maxLogWeight));
    return SS;
  }
).filter(ss -> Double.isFinite(ss.sum())).reduce(SufficientStatistics::sumVectorNonStateless).get();
  sumSS.multiplyBy(Math.exp(maxLogWeight));
  sumSS.divideBy(dataInstanceCount.get());
  ef_univariateDistribution.setMomentParameters(sumSS);
  Distribution posteriorDistribution=ef_univariateDistribution.toUnivariateDistribution();
  if (var.isMultinomial()) {
    double[] probabilities=((Multinomial)posteriorDistribution).getProbabilities();
    double probMax=Arrays.stream(probabilities).max().getAsDouble();
    Arrays.stream(probabilities).map(prob -> prob / probMax);
    ((Multinomial)posteriorDistribution).setProbabilities(Utils.normalize(probabilities));
  }
  return (E)posteriorDistribution;
}","/** 
 * {@inheritDoc}
 */
@Override public <E extends UnivariateDistribution>E getPosterior(Variable var){
  Variable samplingVar=this.samplingModel.getVariables().getVariableByName(var.getName());
  EF_UnivariateDistribution ef_univariateDistribution=samplingVar.newUnivariateDistribution().toEFUnivariateDistribution();
  AtomicInteger dataInstanceCount=new AtomicInteger(0);
  if (keepDataOnMemory) {
    weightedSampleStream=weightedSampleList.stream().sequential();
  }
 else {
    computeWeightedSampleStream(false);
  }
  if (parallelMode) {
    weightedSampleStream.parallel();
  }
  if (!keepDataOnMemory) {
    weightedSampleList=weightedSampleStream.collect(Collectors.toList());
  }
  double maxLogWeight=weightedSampleList.stream().mapToDouble(weightetAssignment -> weightetAssignment.weight).filter(Double::isFinite).max().getAsDouble();
  SufficientStatistics sumSS=weightedSampleStream.peek(w -> {
    dataInstanceCount.getAndIncrement();
  }
).map(e -> {
    SufficientStatistics SS=ef_univariateDistribution.getSufficientStatistics(e.assignment);
    SS.multiplyBy(Math.exp(e.weight - maxLogWeight));
    return SS;
  }
).filter(ss -> Double.isFinite(ss.sum())).reduce(SufficientStatistics::sumVectorNonStateless).get();
  sumSS.multiplyBy(Math.exp(maxLogWeight));
  sumSS.divideBy(dataInstanceCount.get());
  sumSS.divideBy(Math.exp(this.getLogProbabilityOfEvidence()));
  ef_univariateDistribution.setMomentParameters(sumSS);
  Distribution posteriorDistribution=ef_univariateDistribution.toUnivariateDistribution();
  if (var.isMultinomial()) {
    double[] probabilities=((Multinomial)posteriorDistribution).getProbabilities();
    double probMax=Arrays.stream(probabilities).max().getAsDouble();
    Arrays.stream(probabilities).map(prob -> prob / probMax);
    ((Multinomial)posteriorDistribution).setProbabilities(Utils.normalize(probabilities));
  }
  return (E)posteriorDistribution;
}",0.9829787234042552
21236,"public double updateModel(DataOnMemory<DynamicDataInstance> dataBatch){
  if (learningAlgorithm == null) {
    learningAlgorithm.setDynamicDAG(this.getDynamicDAG());
    learningAlgorithm.setWindowsSize(windowSize);
    learningAlgorithm.initLearning();
  }
  return learningAlgorithm.updateModel(dataBatch);
}","public double updateModel(DataOnMemory<DynamicDataInstance> dataBatch){
  if (!initialized)   initLearning();
  return learningAlgorithm.updateModel(dataBatch);
}",0.652542372881356
21237,"public double updateModel(DataOnMemory<DataInstance> datBatch){
  if (!initialized) {
    learningAlgorithm.setWindowsSize(windowSize);
    learningAlgorithm.setDAG(this.getDAG());
    learningAlgorithm.initLearning();
    initialized=true;
  }
  return learningAlgorithm.updateModel(datBatch);
}","public double updateModel(DataOnMemory<DataInstance> datBatch){
  if (!initialized)   initLearning();
  return learningAlgorithm.updateModel(datBatch);
}",0.6815144766146993
21238,"/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  ArrayVector vector=new ArrayVector(this.sizeOfSufficientStatistics());
  double mean=0;
  double precision=0.000001;
  vector.set(0,mean * precision);
  vector.set(1,-0.5 * precision);
  return vector;
}","/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  SufficientStatistics vector=this.createZeroSufficientStatistics();
  double mean=0;
  double meansquare=0.1;
  vector.set(0,mean);
  vector.set(1,meansquare);
  return vector;
}",0.7103448275862069
21239,"public static void printOutput(int currentMonth) throws Exception {
  BayesianNetwork bnSVB=svb.getLearntBayesianNetwork();
  BayesianNetwork bnDriftSVB=driftSVB.getLearntBayesianNetwork();
  BayesianNetwork bnStochasticVI=stochasticVI.getLearntBayesianNetwork();
  BayesianNetwork bnPopulationVI=populationVI.getLearntBayesianNetwork();
  double[] meanML=new double[2], meanSVB=new double[2], meanDriftSVB=new double[2], meanStochasticVI=new double[2], meanPopulationVI=new double[2], realMean=new double[2];
  Variable var=dag.getVariables().getVariableByName(""String_Node_Str"");
  if (!includeClassVar) {
    meanSVB[0]=((ConditionalLinearGaussian)bnSVB.getConditionalDistribution(var)).getIntercept();
    meanDriftSVB[0]=((ConditionalLinearGaussian)bnDriftSVB.getConditionalDistribution(var)).getIntercept();
    meanStochasticVI[0]=((ConditionalLinearGaussian)bnStochasticVI.getConditionalDistribution(var)).getIntercept();
    meanPopulationVI[0]=((ConditionalLinearGaussian)bnPopulationVI.getConditionalDistribution(var)).getIntercept();
  }
 else {
    for (int i=0; i < 2; i++) {
      meanSVB[i]=((Normal_MultinomialNormalParents)bnSVB.getConditionalDistribution(var)).getNormal_NormalParentsDistribution(i).getIntercept();
      meanDriftSVB[i]=((Normal_MultinomialNormalParents)bnDriftSVB.getConditionalDistribution(var)).getNormal_NormalParentsDistribution(i).getIntercept();
      meanStochasticVI[i]=((Normal_MultinomialNormalParents)bnStochasticVI.getConditionalDistribution(var)).getNormal_NormalParentsDistribution(i).getIntercept();
      meanPopulationVI[i]=((Normal_MultinomialNormalParents)bnPopulationVI.getConditionalDistribution(var)).getNormal_NormalParentsDistribution(i).getIntercept();
    }
  }
  String means=""String_Node_Str"";
  for (int i=0; i < 2; i++) {
    if (i != 0)     means+=""String_Node_Str"";
    means+=currentMonth + ""String_Node_Str"" + realMean[i]+ ""String_Node_Str""+ meanML[i]+ ""String_Node_Str""+ meanSVB[i]+ ""String_Node_Str""+ meanDriftSVB[i]+ ""String_Node_Str""+ meanStochasticVI[i]+ ""String_Node_Str""+ meanPopulationVI[i];
  }
  writerMean.println(means);
  writerLambda.println(currentMonth + ""String_Node_Str"" + driftSVB.getLambdaValue());
}","public static void printOutput(int currentMonth) throws Exception {
  BayesianNetwork bnML=ml.getLearntBayesianNetwork();
  BayesianNetwork bnSVB=svb.getLearntBayesianNetwork();
  BayesianNetwork bnDriftSVB=driftSVB.getLearntBayesianNetwork();
  BayesianNetwork bnStochasticVI=stochasticVI.getLearntBayesianNetwork();
  BayesianNetwork bnPopulationVI=populationVI.getLearntBayesianNetwork();
  BayesianNetwork bnMLPerBatch=mlPerBatch.getLearntBayesianNetwork();
  double[] meanML=new double[2], meanSVB=new double[2], meanDriftSVB=new double[2], meanStochasticVI=new double[2], meanPopulationVI=new double[2], realMean=new double[2];
  Variable var01=dag.getVariables().getVariableByName(""String_Node_Str"");
  Variable var10=dag.getVariables().getVariableByName(""String_Node_Str"");
  List<Variable> varsToCheck=new ArrayList<>();
  varsToCheck.add(var01);
  varsToCheck.add(var10);
  String means=""String_Node_Str"";
  for (  Variable var : varsToCheck) {
    if (!includeClassVar) {
      meanML[0]=((Normal)bnML.getConditionalDistribution(var)).getMean();
      meanSVB[0]=((Normal)bnSVB.getConditionalDistribution(var)).getMean();
      meanDriftSVB[0]=((Normal)bnDriftSVB.getConditionalDistribution(var)).getMean();
      meanStochasticVI[0]=((Normal)bnStochasticVI.getConditionalDistribution(var)).getMean();
      meanPopulationVI[0]=((Normal)bnPopulationVI.getConditionalDistribution(var)).getMean();
      realMean[0]=((Normal)bnMLPerBatch.getConditionalDistribution(var)).getMean();
    }
 else {
      for (int i=0; i < 2; i++) {
        meanML[i]=((Normal_MultinomialParents)bnML.getConditionalDistribution(var)).getNormal(i).getMean();
        meanSVB[i]=((Normal_MultinomialParents)bnSVB.getConditionalDistribution(var)).getNormal(i).getMean();
        meanDriftSVB[i]=((Normal_MultinomialParents)bnDriftSVB.getConditionalDistribution(var)).getNormal(i).getMean();
        meanStochasticVI[i]=((Normal_MultinomialParents)bnStochasticVI.getConditionalDistribution(var)).getNormal(i).getMean();
        meanPopulationVI[i]=((Normal_MultinomialParents)bnPopulationVI.getConditionalDistribution(var)).getNormal(i).getMean();
        realMean[i]=((Normal_MultinomialParents)bnMLPerBatch.getConditionalDistribution(var)).getNormal(i).getMean();
      }
    }
    for (int i=0; i < 2; i++) {
      if (i != 0)       means+=""String_Node_Str"";
      means+=currentMonth + ""String_Node_Str"" + realMean[i]+ ""String_Node_Str""+ meanML[i]+ ""String_Node_Str""+ meanSVB[i]+ ""String_Node_Str""+ meanDriftSVB[i]+ ""String_Node_Str""+ meanStochasticVI[i]+ ""String_Node_Str""+ meanPopulationVI[i];
    }
    means+=""String_Node_Str"";
  }
  writerMean.println(means);
  writerLambda.println(currentMonth + ""String_Node_Str"" + driftSVB.getLambdaValue());
}",0.7257247111291304
21240,"public static DAG createDAG(Attributes attributes,int nlocals){
  Variables variables=new Variables(attributes);
  Variable classVar=variables.getVariableByName(""String_Node_Str"");
  List<Variable> localHiddenVars=new ArrayList<>();
  for (int i=0; i < nlocals; i++) {
    localHiddenVars.add(variables.newGaussianVariable(""String_Node_Str"" + i));
  }
  List<Variable> localMixtures=new ArrayList<>();
  if (addMixtures) {
    for (int i=0; i < attributes.getListOfNonSpecialAttributes().size() - 1; i++) {
      localMixtures.add(variables.newMultionomialVariable(""String_Node_Str"" + i,2));
    }
  }
  DAG dag=new DAG(variables);
  if (includeClassVar) {
    dag.getParentSets().stream().filter(w -> w.getMainVar() != classVar).filter(w -> !w.getMainVar().getName().startsWith(""String_Node_Str"")).filter(w -> !w.getMainVar().getName().startsWith(""String_Node_Str"")).forEach(w -> w.addParent(classVar));
  }
  for (  Variable localHiddenVar : localHiddenVars) {
    dag.getParentSets().stream().filter(w -> w.getMainVar() != classVar).filter(w -> !w.getMainVar().getName().startsWith(""String_Node_Str"")).filter(w -> !w.getMainVar().getName().startsWith(""String_Node_Str"")).forEach(w -> w.addParent(localHiddenVar));
  }
  if (addMixtures) {
    int index=0;
    for (    Variable predictedVariable : variables.getVariablesForListOfAttributes(attributes.getListOfNonSpecialAttributes())) {
      dag.getParentSet(predictedVariable).addParent(localMixtures.get(index));
      index++;
    }
  }
  if (linkHidden) {
    for (int i=0; i < localHiddenVars.size() - 1; i++) {
      for (int j=i + 1; j < localHiddenVars.size(); j++) {
        dag.getParentSet(localHiddenVars.get(i)).addParent(localHiddenVars.get(j));
      }
    }
  }
  System.out.println(dag.toString());
  return dag;
}","public static DAG createDAG(Attributes attributes,int nlocals){
  Variables variables=new Variables(attributes);
  Variable classVar=variables.getVariableByName(""String_Node_Str"");
  List<Variable> localHiddenVars=new ArrayList<>();
  for (int i=0; i < nlocals; i++) {
    localHiddenVars.add(variables.newGaussianVariable(""String_Node_Str"" + i));
  }
  List<Variable> localMixtures=new ArrayList<>();
  if (addMixtures) {
    for (int i=0; i < attributes.getListOfNonSpecialAttributes().size() - 1; i++) {
      localMixtures.add(variables.newMultionomialVariable(""String_Node_Str"" + i,2));
    }
  }
  DAG dag=new DAG(variables);
  if (includeClassVar) {
    dag.getParentSets().stream().filter(w -> w.getMainVar() != classVar).filter(w -> !w.getMainVar().getName().startsWith(""String_Node_Str"")).filter(w -> !w.getMainVar().getName().startsWith(""String_Node_Str"")).forEach(w -> w.addParent(classVar));
  }
  for (  Variable localHiddenVar : localHiddenVars) {
    dag.getParentSets().stream().filter(w -> w.getMainVar() != classVar).filter(w -> !w.getMainVar().getName().startsWith(""String_Node_Str"")).filter(w -> !w.getMainVar().getName().startsWith(""String_Node_Str"")).forEach(w -> w.addParent(localHiddenVar));
  }
  if (addMixtures) {
    int index=0;
    for (    Variable predictedVariable : variables.getVariablesForListOfAttributes(attributes.getListOfNonSpecialAttributes())) {
      if (predictedVariable != classVar) {
        dag.getParentSet(predictedVariable).addParent(localMixtures.get(index));
        index++;
      }
    }
  }
  if (linkHidden) {
    for (int i=0; i < localHiddenVars.size() - 1; i++) {
      for (int j=i + 1; j < localHiddenVars.size(); j++) {
        dag.getParentSet(localHiddenVars.get(i)).addParent(localHiddenVars.get(j));
      }
    }
  }
  System.out.println(dag.toString());
  return dag;
}",0.9848275862068966
21241,"public static void main(String[] args) throws Exception {
  includeClassVar=Boolean.parseBoolean(args[0]);
  linkHidden=Boolean.parseBoolean(args[1]);
  maxIterVI=Integer.parseInt(args[2]);
  thresholdVI=Double.parseDouble(args[3]);
  numIter=Integer.parseInt(args[4]);
  onlyFirstBatch=Boolean.parseBoolean(args[5]);
  monthsToEvaluate=Integer.parseInt(args[6]);
  addMixtures=Boolean.parseBoolean(args[7]);
  String path=""String_Node_Str"";
  String outputPath=""String_Node_Str"";
  for (int i=0; i < batchSize.length; i++) {
    for (int j=0; j < deltaValue.length; j++) {
      for (int k=0; k < memoryPopulationVI.length; k++) {
        for (int l=0; l < learningRate.length; l++) {
          DataStream<DataInstance> dataMonthi=DataStreamLoader.openFromFile(path + 0 + ""String_Node_Str"");
          dag=createDAG(dataMonthi.getAttributes(),5);
          maximumLikelihoodInit(createDAGforML(dataMonthi.getAttributes()));
          initSVBLearners(batchSize[i],deltaValue[j]);
          initVILearners(batchSize[i],memoryPopulationVI[k],learningRate[l]);
          writerPredLL=new PrintWriter(outputPath + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[l]+ ""String_Node_Str""+ includeClassVar+ ""String_Node_Str""+ linkHidden+ ""String_Node_Str""+ maxIterVI+ ""String_Node_Str""+ thresholdVI+ ""String_Node_Str""+ numIter+ ""String_Node_Str"",""String_Node_Str"");
          writerLambda=new PrintWriter(outputPath + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[l]+ ""String_Node_Str""+ includeClassVar+ ""String_Node_Str""+ linkHidden+ ""String_Node_Str""+ maxIterVI+ ""String_Node_Str""+ thresholdVI+ ""String_Node_Str""+ numIter+ ""String_Node_Str"",""String_Node_Str"");
          writerMean=new PrintWriter(outputPath + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[l]+ ""String_Node_Str""+ includeClassVar+ ""String_Node_Str""+ linkHidden+ ""String_Node_Str""+ maxIterVI+ ""String_Node_Str""+ thresholdVI+ ""String_Node_Str""+ numIter+ ""String_Node_Str"",""String_Node_Str"");
          writerGamma=new PrintWriter(outputPath + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[l]+ ""String_Node_Str""+ includeClassVar+ ""String_Node_Str""+ linkHidden+ ""String_Node_Str""+ maxIterVI+ ""String_Node_Str""+ thresholdVI+ ""String_Node_Str""+ numIter+ ""String_Node_Str"",""String_Node_Str"");
          for (int m=0; m < numIter; m++) {
            int currentMonth=m;
            dataMonthi=DataStreamLoader.openFromFile(path + currentMonth + ""String_Node_Str"");
            int batchCount=0;
            for (            DataOnMemory<DataInstance> batch : dataMonthi.iterableOverBatches(batchSize[i])) {
              System.out.println(""String_Node_Str"" + currentMonth + ""String_Node_Str""+ batchCount+ ""String_Node_Str"");
              driftSVB.updateModelWithConceptDrift(batch);
              svb.updateModel(batch);
              populationVI.updateModel(batch);
              stochasticVI.updateModel(batch);
              if (monthsToEvaluate > 1) {
                double[] outputs=new double[4];
                double[] outputsAverage=new double[4];
                for (int n=m + 1; n < (m + 1 + monthsToEvaluate); n++) {
                  DataStream<DataInstance> dataMonthiEval=DataStreamLoader.openFromFile(path + n + ""String_Node_Str"");
                  for (                  DataOnMemory<DataInstance> batchEval : dataMonthiEval.iterableOverBatches(batchSize[i])) {
                    outputs=calculatePredLL(batchEval);
                    if (onlyFirstBatch)                     break;
                  }
                  for (int o=0; o < outputs.length; o++) {
                    outputsAverage[o]+=outputs[o];
                  }
                }
                for (int o=0; o < outputs.length; o++) {
                  outputsAverage[o]/=monthsToEvaluate;
                }
                printPredLL(outputsAverage,currentMonth);
                printCounts(currentMonth);
              }
 else               if (m > 0) {
                double[] outputs=calculatePredLL(batch);
                printPredLL(outputs,currentMonth);
                printCounts(currentMonth);
              }
              batchCount++;
              printOutput(currentMonth);
              if (onlyFirstBatch)               break;
            }
          }
          writerPredLL.close();
          writerLambda.close();
          writerMean.close();
          writerGamma.close();
        }
      }
    }
  }
}","public static void main(String[] args) throws Exception {
  includeClassVar=Boolean.parseBoolean(args[0]);
  linkHidden=Boolean.parseBoolean(args[1]);
  maxIterVI=Integer.parseInt(args[2]);
  thresholdVI=Double.parseDouble(args[3]);
  numIter=Integer.parseInt(args[4]);
  onlyFirstBatch=Boolean.parseBoolean(args[5]);
  monthsToEvaluate=Integer.parseInt(args[6]);
  addMixtures=Boolean.parseBoolean(args[7]);
  String path=""String_Node_Str"";
  String outputPath=""String_Node_Str"";
  for (int i=0; i < batchSize.length; i++) {
    for (int j=0; j < deltaValue.length; j++) {
      for (int k=0; k < memoryPopulationVI.length; k++) {
        for (int l=0; l < learningRate.length; l++) {
          DataStream<DataInstance> dataMonthi=DataStreamLoader.openFromFile(path + 0 + ""String_Node_Str"");
          dag=createDAGforML(dataMonthi.getAttributes());
          maximumLikelihoodInit(createDAGforML(dataMonthi.getAttributes()));
          initSVBLearners(batchSize[i],deltaValue[j]);
          initVILearners(batchSize[i],memoryPopulationVI[k],learningRate[l]);
          writerPredLL=new PrintWriter(outputPath + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[l]+ ""String_Node_Str""+ includeClassVar+ ""String_Node_Str""+ linkHidden+ ""String_Node_Str""+ maxIterVI+ ""String_Node_Str""+ thresholdVI+ ""String_Node_Str""+ numIter+ ""String_Node_Str""+ addMixtures+ ""String_Node_Str"",""String_Node_Str"");
          writerLambda=new PrintWriter(outputPath + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[l]+ ""String_Node_Str""+ includeClassVar+ ""String_Node_Str""+ linkHidden+ ""String_Node_Str""+ maxIterVI+ ""String_Node_Str""+ thresholdVI+ ""String_Node_Str""+ numIter+ ""String_Node_Str""+ addMixtures+ ""String_Node_Str"",""String_Node_Str"");
          writerMean=new PrintWriter(outputPath + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[l]+ ""String_Node_Str""+ includeClassVar+ ""String_Node_Str""+ linkHidden+ ""String_Node_Str""+ maxIterVI+ ""String_Node_Str""+ thresholdVI+ ""String_Node_Str""+ numIter+ ""String_Node_Str""+ addMixtures+ ""String_Node_Str"",""String_Node_Str"");
          writerGamma=new PrintWriter(outputPath + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[l]+ ""String_Node_Str""+ includeClassVar+ ""String_Node_Str""+ linkHidden+ ""String_Node_Str""+ maxIterVI+ ""String_Node_Str""+ thresholdVI+ ""String_Node_Str""+ numIter+ ""String_Node_Str""+ addMixtures+ ""String_Node_Str"",""String_Node_Str"");
          for (int m=0; m < numIter; m++) {
            int currentMonth=m;
            dataMonthi=DataStreamLoader.openFromFile(path + currentMonth + ""String_Node_Str"");
            int batchCount=0;
            for (            DataOnMemory<DataInstance> batch : dataMonthi.iterableOverBatches(batchSize[i])) {
              System.out.println(""String_Node_Str"" + currentMonth + ""String_Node_Str""+ batchCount+ ""String_Node_Str"");
              driftSVB.updateModelWithConceptDrift(batch);
              svb.updateModel(batch);
              populationVI.updateModel(batch);
              stochasticVI.updateModel(batch);
              ml.updateModel(batch);
              mlPerBatch.initLearning();
              mlPerBatch.updateModel(batch);
              if (monthsToEvaluate > 1) {
                double[] outputs=new double[4];
                double[] outputsAverage=new double[4];
                for (int n=m + 1; n < (m + 1 + monthsToEvaluate); n++) {
                  DataStream<DataInstance> dataMonthiEval=DataStreamLoader.openFromFile(path + n + ""String_Node_Str"");
                  for (                  DataOnMemory<DataInstance> batchEval : dataMonthiEval.iterableOverBatches(batchSize[i])) {
                    outputs=calculatePredLL(batchEval);
                    if (onlyFirstBatch)                     break;
                  }
                  for (int o=0; o < outputs.length; o++) {
                    outputsAverage[o]+=outputs[o];
                  }
                }
                for (int o=0; o < outputs.length; o++) {
                  outputsAverage[o]/=monthsToEvaluate;
                }
                printPredLL(outputsAverage,currentMonth);
                printCounts(currentMonth);
              }
 else               if (m > 0) {
                double[] outputs=calculatePredLL(batch);
                printPredLL(outputs,currentMonth);
                printCounts(currentMonth);
              }
              batchCount++;
              if (onlyFirstBatch)               break;
            }
            printOutput(currentMonth);
          }
          writerPredLL.close();
          writerLambda.close();
          writerMean.close();
          writerGamma.close();
        }
      }
    }
  }
}",0.9649405601450736
21242,"@Override public void updateMomentFromNaturalParameters(){
  double delta=this.getNaturalParameters().get(0);
  this.momentParameters.set(0,Math.exp(delta) / (Math.exp(delta) - 1) - 1 / delta);
}","@Override public void updateMomentFromNaturalParameters(){
  double delta=this.getNaturalParameters().get(0);
  if (Math.exp(delta) > Double.MAX_VALUE) {
    this.momentParameters.set(0,1.0 - 1 / delta);
  }
 else {
    this.momentParameters.set(0,Math.exp(delta) / (Math.exp(delta) - 1) - 1 / delta);
  }
}",0.7768924302788844
21243,"/** 
 * {@inheritDoc}
 */
@Override public double predictedLogLikelihood(DataOnMemory<DataInstance> batch){
  this.getPlateuStructure().getNonReplictedNodes().forEach(node -> node.setActive(false));
  double elbo=this.getPlateuStructure().getNonReplictedNodes().mapToDouble(node -> this.getPlateuStructure().getVMP().computeELBO(node)).sum();
  elbo+=this.updateModelOnBatchParallel(batch).getElbo();
  this.getPlateuStructure().getNonReplictedNodes().forEach(node -> node.setActive(true));
  return elbo;
}","/** 
 * {@inheritDoc}
 */
@Override public double predictedLogLikelihood(DataOnMemory<DataInstance> batch){
  this.getPlateuStructure().getNonReplictedNodes().forEach(node -> node.setActive(false));
  double elbo=0;
  elbo+=this.updateModelOnBatchParallel(batch).getElbo();
  this.getPlateuStructure().getNonReplictedNodes().forEach(node -> node.setActive(true));
  return elbo;
}",0.6809470124013529
21244,"public StochasticVI(){
  this.svb=new SVB();
}","public StochasticVI(){
  this.svb=new SVB();
  this.svb.setNonSequentialModel(true);
}",0.696969696969697
21245,"@Override public double updateModel(DataOnMemory<DataInstance> batch){
  NaturalParameters newParam=svb.updateModelOnBatchParallel(batch).getVector();
  newParam.multiplyBy(this.dataSetSize / (double)this.batchSize);
  newParam.sum(prior);
  double stepSize=Math.pow(1 + iteration,-learningFactor);
  newParam.multiplyBy(stepSize);
  currentParam.multiplyBy((1 - stepSize));
  currentParam.sum(newParam);
  this.svb.updateNaturalParameterPosteriors(currentParam);
  return Double.NaN;
}","@Override public double updateModel(DataOnMemory<DataInstance> batch){
  NaturalParameters newParam=svb.updateModelOnBatchParallel(batch).getVector();
  newParam.multiplyBy(this.dataSetSize / (double)this.batchSize);
  newParam.sum(prior);
  double stepSize=Math.pow(1 + iteration,-learningFactor);
  newParam.multiplyBy(stepSize);
  currentParam.multiplyBy((1 - stepSize));
  currentParam.sum(newParam);
  this.svb.updateNaturalParameterPosteriors(currentParam);
  iteration++;
  return Double.NaN;
}",0.9848024316109424
21246,"public static void printOutput() throws Exception {
  BayesianNetwork bnML=ml.getLearntBayesianNetwork();
  BayesianNetwork bnSVB=svb.getLearntBayesianNetwork();
  BayesianNetwork bnDriftSVB=driftSVB.getLearntBayesianNetwork();
  double meanML=((Normal)bnML.getConditionalDistribution(oneNormalVarBN.getVariables().getVariableByName(""String_Node_Str""))).getMean();
  double meanSVB=((Normal)bnSVB.getConditionalDistribution(oneNormalVarBN.getVariables().getVariableByName(""String_Node_Str""))).getMean();
  double meanDriftSVB=((Normal)bnDriftSVB.getConditionalDistribution(oneNormalVarBN.getVariables().getVariableByName(""String_Node_Str""))).getMean();
  writerMean.println(meanML + ""String_Node_Str"" + meanSVB+ ""String_Node_Str""+ meanDriftSVB);
  writerLambda.println(driftSVB.getLambdaValue());
}","public static void printOutput() throws Exception {
  BayesianNetwork bnML=ml.getLearntBayesianNetwork();
  BayesianNetwork bnSVB=svb.getLearntBayesianNetwork();
  BayesianNetwork bnDriftSVB=driftSVB.getLearntBayesianNetwork();
  BayesianNetwork bnStochasticVI=stochasticVI.getLearntBayesianNetwork();
  BayesianNetwork bnPopulationVI=populationVI.getLearntBayesianNetwork();
  double meanML=((Normal)bnML.getConditionalDistribution(network.getVariables().getVariableByName(""String_Node_Str""))).getMean();
  double meanSVB=((Normal)bnSVB.getConditionalDistribution(network.getVariables().getVariableByName(""String_Node_Str""))).getMean();
  double meanDriftSVB=((Normal)bnDriftSVB.getConditionalDistribution(network.getVariables().getVariableByName(""String_Node_Str""))).getMean();
  double meanStochasticVI=((Normal)bnStochasticVI.getConditionalDistribution(network.getVariables().getVariableByName(""String_Node_Str""))).getMean();
  double meanPopulationVI=((Normal)bnPopulationVI.getConditionalDistribution(network.getVariables().getVariableByName(""String_Node_Str""))).getMean();
  double realMean=((Normal)network.getConditionalDistribution(network.getVariables().getVariableByName(""String_Node_Str""))).getMean();
  writerMean.println(realMean + ""String_Node_Str"" + meanML+ ""String_Node_Str""+ meanSVB+ ""String_Node_Str""+ meanDriftSVB+ ""String_Node_Str""+ meanStochasticVI+ ""String_Node_Str""+ meanPopulationVI);
  writerLambda.println(driftSVB.getLambdaValue());
}",0.6545776205218929
21247,"public static void scenarioNoConceptDrift(int batchSize) throws Exception {
  for (int i=0; i < numIter; i++) {
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
    sampler.setSeed(i);
    DataOnMemory<DataInstance> batch=sampler.sampleToDataStream(batchSize).toDataOnMemory();
    if (i > 0)     printPredLL(batch);
    driftSVB.updateModelWithConceptDrift(batch);
    svb.updateModel(batch);
    populationVI.updateModel(batch);
    stochasticVI.updateModel(batch);
    BayesianNetwork bnSVB=svb.getLearntBayesianNetwork();
    BayesianNetwork bnStochasticVI=stochasticVI.getLearntBayesianNetwork();
    ml.updateModel(batch);
    printOutput();
  }
}","public static void scenarioNoConceptDrift(int batchSize) throws Exception {
  for (int i=0; i < numIter; i++) {
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(network);
    sampler.setSeed(i);
    DataOnMemory<DataInstance> batch=sampler.sampleToDataStream(batchSize).toDataOnMemory();
    if (i > 0)     printPredLL(batch);
    driftSVB.updateModelWithConceptDrift(batch);
    svb.updateModel(batch);
    populationVI.updateModel(batch);
    stochasticVI.updateModel(batch);
    BayesianNetwork bnSVB=svb.getLearntBayesianNetwork();
    BayesianNetwork bnStochasticVI=stochasticVI.getLearntBayesianNetwork();
    ml.updateModel(batch);
    printOutput();
  }
}",0.9845474613686536
21248,"public static void initVILearners(int batchSize,int memoryPopulationVI,double learningRate){
  populationVI=new PopulationVI();
  populationVI.setWindowSize(memoryPopulationVI);
  populationVI.setSeed(0);
  populationVI.setLearningFactor(learningRate);
  VMP vmp=svb.getPlateuStructure().getVMP();
  vmp.setOutput(false);
  vmp.setTestELBO(true);
  vmp.setMaxIter(1000);
  vmp.setThreshold(0.0001);
  populationVI.setDAG(oneNormalVarBN.getDAG());
  populationVI.initLearning();
  stochasticVI=new StochasticVI();
  stochasticVI.setDataSetSize(numIter * batchSize);
  stochasticVI.setBatchSize(batchSize);
  stochasticVI.setSeed(0);
  stochasticVI.setLearningFactor(learningRate);
  vmp=svb.getPlateuStructure().getVMP();
  vmp.setOutput(false);
  vmp.setTestELBO(true);
  vmp.setMaxIter(1000);
  vmp.setThreshold(0.0001);
  stochasticVI.setDAG(oneNormalVarBN.getDAG());
  stochasticVI.initLearning();
  maximumLikelihoodInit();
}","public static void initVILearners(int batchSize,int memoryPopulationVI,double learningRate){
  populationVI=new PopulationVI();
  populationVI.setWindowSize(memoryPopulationVI);
  populationVI.setSeed(0);
  populationVI.setLearningFactor(learningRate);
  VMP vmp=svb.getPlateuStructure().getVMP();
  vmp.setOutput(false);
  vmp.setTestELBO(true);
  vmp.setMaxIter(1000);
  vmp.setThreshold(0.0001);
  populationVI.setDAG(network.getDAG());
  populationVI.initLearning();
  stochasticVI=new StochasticVI();
  stochasticVI.setDataSetSize(numIter * batchSize);
  stochasticVI.setBatchSize(batchSize);
  stochasticVI.setSeed(0);
  stochasticVI.setLearningFactor(learningRate);
  vmp=svb.getPlateuStructure().getVMP();
  vmp.setOutput(false);
  vmp.setTestELBO(true);
  vmp.setMaxIter(1000);
  vmp.setThreshold(0.0001);
  stochasticVI.setDAG(network.getDAG());
  stochasticVI.initLearning();
  maximumLikelihoodInit();
}",0.9772234273318872
21249,"private static void maximumLikelihoodInit(){
  ml=new ParallelMaximumLikelihood();
  ml.setParallelMode(true);
  ml.setDAG(oneNormalVarBN.getDAG());
  ml.initLearning();
}","private static void maximumLikelihoodInit(){
  ml=new ParallelMaximumLikelihood();
  ml.setParallelMode(true);
  ml.setDAG(network.getDAG());
  ml.initLearning();
}",0.9611940298507464
21250,"public static void scenarioMixedConceptDrift(int batchSize) throws Exception {
  for (int i=0; i < numIter; i++) {
    if (i > 0 && i < 20) {
      Normal normal=oneNormalVarBN.getConditionalDistribution(oneNormalVarBN.getVariables().getVariableByName(""String_Node_Str""));
      normal.setMean(normal.getMean() + 5);
      normal.setVariance(normal.getVariance() + 0.5);
    }
    if (i > 30 && i < 40 && i % 3 == 0) {
      oneNormalVarBN.randomInitialization(new Random(i));
    }
    if (i > 40 && i < 70 && i % 4 == 0) {
      oneNormalVarBN.randomInitialization(new Random(i));
    }
    if (i > 90 && i < 100) {
      Normal normal=oneNormalVarBN.getConditionalDistribution(oneNormalVarBN.getVariables().getVariableByName(""String_Node_Str""));
      normal.setMean(normal.getMean() - 5);
      normal.setVariance(normal.getVariance() - 1);
    }
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
    sampler.setSeed(i);
    DataOnMemory<DataInstance> batch=sampler.sampleToDataStream(batchSize).toDataOnMemory();
    if (i > 0)     printPredLL(batch);
    driftSVB.updateModelWithConceptDrift(batch);
    svb.updateModel(batch);
    populationVI.updateModel(batch);
    stochasticVI.updateModel(batch);
    ml.updateModel(batch);
    printOutput();
  }
}","public static void scenarioMixedConceptDrift(int batchSize) throws Exception {
  double predLL=0;
  for (int i=0; i < numIter; i++) {
    iter++;
    if (i > 20 && i < 30) {
      Normal normal=network.getConditionalDistribution(network.getVariables().getVariableByName(""String_Node_Str""));
      normal.setMean(normal.getMean() + new Random(i).nextDouble());
      normal.setVariance(normal.getVariance() + new Random(i).nextDouble());
    }
    if (i > 30 && i < 40 && i % 3 == 0) {
      network.randomInitialization(new Random(i));
      Normal normal=network.getConditionalDistribution(network.getVariables().getVariableByName(""String_Node_Str""));
      normal.setMean(normal.getMean() * new Random(i).nextDouble());
      normal.setVariance(normal.getVariance() * new Random(i).nextDouble());
    }
    if (i > 40 && i < 70 && i % 4 == 0) {
      network.randomInitialization(new Random(i));
    }
    if (i > 90 && i < 100) {
      Normal normal=network.getConditionalDistribution(network.getVariables().getVariableByName(""String_Node_Str""));
      normal.setMean(normal.getMean() + 5);
      normal.setVariance(normal.getVariance() + 0.1);
    }
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(network);
    sampler.setSeed(i);
    DataOnMemory<DataInstance> batch=sampler.sampleToDataStream(batchSize).toDataOnMemory();
    if (i > 0) {
      printPredLL(batch);
    }
    driftSVB.updateModelWithConceptDrift(batch);
    svb.updateModel(batch);
    populationVI.updateModel(batch);
    stochasticVI.updateModel(batch);
    ml.updateModel(batch);
    printOutput();
  }
}",0.8056904927133934
21251,"public static void main(String[] args) throws Exception {
  oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(oneNormalVarBN);
  for (int i=0; i < batchSize.length; i++) {
    for (int j=0; j < deltaValue.length; j++) {
      for (int k=0; k < memoryPopulationVI.length; k++) {
        for (int l=0; l < learningRate.length; l++) {
          initSVBLearners(batchSize[i],deltaValue[j]);
          initVILearners(batchSize[i],memoryPopulationVI[k],learningRate[l]);
          String path=""String_Node_Str"";
          writerPredLL=new PrintWriter(path + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[i]+ ""String_Node_Str"",""String_Node_Str"");
          writerLambda=new PrintWriter(path + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[i]+ ""String_Node_Str"",""String_Node_Str"");
          writerMean=new PrintWriter(path + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[i]+ ""String_Node_Str"",""String_Node_Str"");
          scenarioNoConceptDrift(batchSize[i]);
          writerPredLL.close();
          writerLambda.close();
          writerMean.close();
        }
      }
    }
  }
}","public static void main(String[] args) throws Exception {
  network=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(network);
  for (int i=0; i < batchSize.length; i++) {
    for (int j=0; j < deltaValue.length; j++) {
      for (int k=0; k < memoryPopulationVI.length; k++) {
        for (int l=0; l < learningRate.length; l++) {
          initSVBLearners(batchSize[i],deltaValue[j]);
          initVILearners(batchSize[i],memoryPopulationVI[k],learningRate[l]);
          String path=""String_Node_Str"";
          writerPredLL=new PrintWriter(path + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[i]+ ""String_Node_Str"",""String_Node_Str"");
          writerLambda=new PrintWriter(path + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[i]+ ""String_Node_Str"",""String_Node_Str"");
          writerMean=new PrintWriter(path + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[i]+ ""String_Node_Str"",""String_Node_Str"");
          writerGamma=new PrintWriter(path + ""String_Node_Str"" + ""String_Node_Str""+ batchSize[i]+ ""String_Node_Str""+ deltaValue[j]+ ""String_Node_Str""+ memoryPopulationVI[k]+ ""String_Node_Str""+ learningRate[i]+ ""String_Node_Str"",""String_Node_Str"");
          scenarioMixedConceptDrift(batchSize[i]);
          writerPredLL.close();
          writerLambda.close();
          writerMean.close();
          writerGamma.close();
        }
      }
    }
  }
}",0.897307451471509
21252,"public static void initSVBLearners(int batchSize,double deltaValue){
  driftSVB=new DriftSVB();
  driftSVB.setWindowsSize(batchSize);
  driftSVB.setSeed(0);
  driftSVB.setDelta(deltaValue);
  VMP vmp=driftSVB.getPlateuStructure().getVMP();
  vmp.setOutput(false);
  vmp.setTestELBO(true);
  vmp.setMaxIter(1000);
  vmp.setThreshold(0.0001);
  driftSVB.setDAG(oneNormalVarBN.getDAG());
  driftSVB.initLearning();
  svb=new SVB();
  svb.setWindowsSize(batchSize);
  svb.setSeed(0);
  vmp=svb.getPlateuStructure().getVMP();
  vmp.setOutput(false);
  vmp.setTestELBO(true);
  vmp.setMaxIter(1000);
  vmp.setThreshold(0.0001);
  svb.setDAG(oneNormalVarBN.getDAG());
  svb.initLearning();
}","public static void initSVBLearners(int batchSize,double deltaValue){
  driftSVB=new DriftSVB();
  driftSVB.setWindowsSize(batchSize);
  driftSVB.setSeed(0);
  driftSVB.setDelta(deltaValue);
  VMP vmp=driftSVB.getPlateuStructure().getVMP();
  vmp.setOutput(false);
  vmp.setTestELBO(true);
  vmp.setMaxIter(1000);
  vmp.setThreshold(0.0001);
  driftSVB.setDAG(network.getDAG());
  driftSVB.initLearning();
  svb=new SVB();
  svb.setWindowsSize(batchSize);
  svb.setSeed(0);
  vmp=svb.getPlateuStructure().getVMP();
  vmp.setOutput(false);
  vmp.setTestELBO(true);
  vmp.setMaxIter(1000);
  vmp.setThreshold(0.0001);
  svb.setDAG(network.getDAG());
  svb.initLearning();
}",0.9689807976366324
21253,"public static void printPredLL(DataOnMemory<DataInstance> batch) throws Exception {
  writerPredLL.println(svb.predictedLogLikelihood(batch) + ""String_Node_Str"" + driftSVB.predictedLogLikelihood(batch)+ ""String_Node_Str""+ ""String_Node_Str""+ stochasticVI.predictedLogLikelihood(batch)+ ""String_Node_Str""+ populationVI.predictedLogLikelihood(batch));
}","public static void printPredLL(DataOnMemory<DataInstance> batch) throws Exception {
  predLLAcum[0]+=svb.predictedLogLikelihood(batch);
  predLLAcum[1]+=driftSVB.predictedLogLikelihood(batch);
  predLLAcum[2]+=stochasticVI.predictedLogLikelihood(batch);
  predLLAcum[3]+=populationVI.predictedLogLikelihood(batch);
  writerPredLL.println(predLLAcum[0] / iter + ""String_Node_Str"" + predLLAcum[1] / iter + ""String_Node_Str"" + predLLAcum[2] / iter + ""String_Node_Str"" + predLLAcum[3] / iter);
}",0.5731272294887039
21254,"/** 
 * Returns the number of states of this attribute, in case it has a finite state space. Otherwise it returns -1.
 * @return the number of states of this attribute.
 */
public int getNumberOfStates(){
  if (this.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.FINITE_SET)   return ((FiniteStateSpace)this.getStateSpaceType()).getNumberOfStates();
 else   return -1;
}","/** 
 * Returns the number of states of this attribute, in case it has a finite state space. Otherwise it returns -1.
 * @return the number of states of this attribute.
 */
public int getNumberOfStates(){
  if (this.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.FINITE_SET)   return ((FiniteStateSpace)this.getStateSpaceType()).getNumberOfStates();
 else   if (this.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.LARGE_FINITE_SET)   return ((LargeFiniteStateSpace)this.getStateSpaceType()).getNumberOfStates();
 else   return -1;
}",0.8112617309697602
21255,"public static String dataInstanceToARFFString(Attribute att,DataInstance assignment,String separator){
  StringBuilder builder=new StringBuilder();
  if (Utils.isMissingValue(assignment.getValue(att))) {
    builder.append(""String_Node_Str"");
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.FINITE_SET) {
    FiniteStateSpace stateSpace=att.getStateSpaceType();
    String nameState=stateSpace.getStatesName((int)assignment.getValue(att));
    builder.append(nameState + separator);
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.REAL) {
    if (att.isSpecialAttribute() || att.isTimeId()) {
      builder.append(decimalFormat.format(assignment.getValue(att)) + separator);
    }
 else {
      builder.append(assignment.getValue(att) + separator);
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + att.getStateSpaceType().getStateSpaceTypeEnum());
  }
  return builder.toString();
}","public static String dataInstanceToARFFString(Attribute att,DataInstance assignment,String separator){
  StringBuilder builder=new StringBuilder();
  if (Utils.isMissingValue(assignment.getValue(att))) {
    builder.append(""String_Node_Str"");
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.FINITE_SET) {
    FiniteStateSpace stateSpace=att.getStateSpaceType();
    String nameState=stateSpace.getStatesName((int)assignment.getValue(att));
    builder.append(nameState + separator);
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.REAL) {
    if (att.isSpecialAttribute() || att.isTimeId()) {
      builder.append(decimalFormat.format(assignment.getValue(att)) + separator);
    }
 else {
      builder.append(assignment.getValue(att) + separator);
    }
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.LARGE_FINITE_SET) {
    int val=((int)assignment.getValue(att));
    builder.append(val + separator);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + att.getStateSpaceType().getStateSpaceTypeEnum());
  }
  return builder.toString();
}",0.912962962962963
21256,"public static String attributeToARFFString(Attribute att){
  if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.REAL) {
    return ""String_Node_Str"" + att.getName() + ""String_Node_Str"";
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.FINITE_SET) {
    StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"" + att.getName() + ""String_Node_Str"");
    FiniteStateSpace stateSpace=att.getStateSpaceType();
    stateSpace.getStatesNames().stream().limit(stateSpace.getNumberOfStates() - 1).forEach(e -> stringBuilder.append(e + ""String_Node_Str""));
    stringBuilder.append(stateSpace.getStatesName(stateSpace.getNumberOfStates() - 1) + ""String_Node_Str"");
    return stringBuilder.toString();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public static String attributeToARFFString(Attribute att){
  if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.REAL) {
    return ""String_Node_Str"" + att.getName() + ""String_Node_Str"";
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.FINITE_SET) {
    StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"" + att.getName() + ""String_Node_Str"");
    FiniteStateSpace stateSpace=att.getStateSpaceType();
    stateSpace.getStatesNames().stream().limit(stateSpace.getNumberOfStates() - 1).forEach(e -> stringBuilder.append(e + ""String_Node_Str""));
    stringBuilder.append(stateSpace.getStatesName(stateSpace.getNumberOfStates() - 1) + ""String_Node_Str"");
    return stringBuilder.toString();
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.LARGE_FINITE_SET) {
    return ""String_Node_Str"" + att.getName() + ""String_Node_Str""+ att.getNumberOfStates();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.8944831280128549
21257,"/** 
 * {@inheritDoc}
 */
@Override public boolean tryAdvance(Consumer<? super DataOnMemory<T>> action){
  if (!advance)   return false;
  final HoldingConsumer<T> holder=new HoldingConsumer<>();
  final DataOnMemoryListContainer<T> container=new DataOnMemoryListContainer(dataStream.getAttributes());
  if (tailInstance == null) {
    if (spliterator.tryAdvance(holder)) {
      tailInstance=holder.value;
      container.add(tailInstance);
    }
 else {
      return false;
    }
  }
 else {
    container.add(tailInstance);
  }
  while ((advance=spliterator.tryAdvance(holder)) && getSequenceID(holder.value) == getSequenceID(tailInstance)) {
    tailInstance=holder.value;
    container.add(tailInstance);
  }
  ;
  tailInstance=holder.value;
  if (est != Long.MAX_VALUE)   est-=container.getNumberOfDataInstances();
  if (container.getNumberOfDataInstances() > 0) {
    action.accept(container);
    return true;
  }
 else {
    return false;
  }
}","/** 
 * {@inheritDoc}
 */
@Override public boolean tryAdvance(Consumer<? super DataOnMemory<T>> action){
  if (!advance)   return false;
  final HoldingConsumer<T> holder=new HoldingConsumer<>();
  final DataOnMemoryListContainer<T> container=new DataOnMemoryListContainer(dataStream.getAttributes());
  if (tailInstance == null) {
    if (spliterator.tryAdvance(holder)) {
      tailInstance=holder.value;
      container.add(tailInstance);
    }
 else {
      return false;
    }
  }
 else {
    container.add(tailInstance);
  }
  int count=0;
  while (count < this.batchSize && advance) {
    while ((advance=spliterator.tryAdvance(holder)) && getSequenceID(holder.value) == getSequenceID(tailInstance)) {
      tailInstance=holder.value;
      container.add(tailInstance);
    }
    ;
    tailInstance=holder.value;
    count++;
    if (count < this.batchSize && advance)     container.add(tailInstance);
  }
  if (est != Long.MAX_VALUE)   est-=container.getNumberOfDataInstances();
  if (container.getNumberOfDataInstances() > 0) {
    action.accept(container);
    return true;
  }
 else {
    return false;
  }
}",0.88996138996139
21258,"/** 
 * {@inheritDoc}
 */
@Override public NaturalParameters getNaturalParameters(){
  this.naturalParameters=this.createEmtpyCompoundVector();
  RealVector beta=new ArrayRealVector(betas);
  double theta_0=beta0 / variance;
  double[] theta_0array={theta_0};
  double variance2Inv=1.0 / (2 * variance);
  RealVector theta_0Theta=beta.mapMultiply(-beta0 / variance);
  ((CompoundVector)this.naturalParameters).setXYbaseVector(new ArrayRealVector(theta_0array,theta_0Theta.getData()));
  double theta_Minus1=-variance2Inv;
  RealVector theta_beta=beta.mapMultiply(variance2Inv);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv * 2);
  RealMatrix natural_XY=new Array2DRowRealMatrix(nOfParents + 1,nOfParents + 1);
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta.getData());
  natural_XY.setColumnVector(0,covXY);
  natural_XY.setRowVector(0,covXY);
  natural_XY.setSubMatrix(theta_betaBeta.getData(),1,1);
  ((CompoundVector)this.naturalParameters).setcovbaseVector(natural_XY);
  return this.naturalParameters;
}","/** 
 * {@inheritDoc}
 */
@Override public NaturalParameters getNaturalParameters(){
  CompoundVector naturalParametersCompound=this.createEmtpyCompoundVector();
  double theta_0=beta0 / variance;
  naturalParametersCompound.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(betas).map(w -> -w * beta0 / variance).toArray();
  naturalParametersCompound.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  naturalParametersCompound.setThetaCov_NatParam(theta_Minus1,betas,variance2Inv);
  this.naturalParameters=naturalParametersCompound;
  return this.naturalParameters;
}",0.2514092446448703
21259,"/** 
 * Generate a DataStream with the given number of samples and attributes (discrete and continuous).
 * @param seed, the seed of the random number generator.
 * @param nSamples, the number of samples of the data stream.
 * @param nDiscreteAtts, the number of discrete attributes.
 * @param nContinuousAttributes, the number of continuous attributes.
 * @return A valid {@code DataStream} object.
 */
public static DataStream<DataInstance> generate(int seed,int nSamples,int nDiscreteAtts,int nContinuousAttributes){
  BayesianNetworkGenerator.setSeed(seed);
  BayesianNetworkGenerator.setNumberOfGaussianVars(nContinuousAttributes);
  BayesianNetworkGenerator.setNumberOfMultinomialVars(nDiscreteAtts,2);
  int nTotal=nDiscreteAtts + nContinuousAttributes;
  BayesianNetworkGenerator.setNumberOfLinks((int)(0.2 * nTotal * (nTotal - 1) / 2));
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(BayesianNetworkGenerator.generateBayesianNetwork());
  sampler.setSeed(seed);
  return sampler.sampleToDataStream(nSamples);
}","/** 
 * Generate a DataStream with the given number of samples and attributes (discrete and continuous).
 * @param seed, the seed of the random number generator.
 * @param nSamples, the number of samples of the data stream.
 * @param nDiscreteAtts, the number of discrete attributes.
 * @param nContinuousAttributes, the number of continuous attributes.
 * @return A valid {@code DataStream} object.
 */
public static DataStream<DataInstance> generate(int seed,int nSamples,int nDiscreteAtts,int nContinuousAttributes){
  BayesianNetworkGenerator.setSeed(seed);
  BayesianNetworkGenerator.setNumberOfGaussianVars(nContinuousAttributes);
  BayesianNetworkGenerator.setNumberOfMultinomialVars(nDiscreteAtts,2);
  int nTotal=nDiscreteAtts + nContinuousAttributes;
  int nLinksMin=nTotal - 1;
  int nLinksMax=nTotal * (nTotal - 1) / 2;
  BayesianNetworkGenerator.setNumberOfLinks((int)(0.8 * nLinksMin + 0.2 * nLinksMax));
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(BayesianNetworkGenerator.generateBayesianNetwork());
  sampler.setSeed(seed);
  return sampler.sampleToDataStream(nSamples);
}",0.7711745437529247
21260,"/** 
 * Generate a DataStream with the given number of samples and attributes (discrete and continuous).
 * @param seed, the seed of the random number generator.
 * @param nSamples, the number of samples of the data stream.
 * @param nDiscreteAtts, the number of discrete attributes.
 * @param nContinuousAttributes, the number of continuous attributes.
 * @return A valid {@code DataStream} object.
 */
public static DataStream<DataInstance> generate(int seed,int nSamples,int nDiscreteAtts,int nContinuousAttributes){
  BayesianNetworkGenerator.setSeed(seed);
  BayesianNetworkGenerator.setNumberOfGaussianVars(nContinuousAttributes);
  BayesianNetworkGenerator.setNumberOfMultinomialVars(nDiscreteAtts,2);
  int nTotal=nDiscreteAtts + nContinuousAttributes;
  BayesianNetworkGenerator.setNumberOfLinks((int)(0.2 * nTotal * (nTotal - 1) / 2));
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(BayesianNetworkGenerator.generateBayesianNetwork());
  sampler.setSeed(seed);
  return sampler.sampleToDataStream(nSamples);
}","/** 
 * Generate a DataStream with the given number of samples and attributes (discrete and continuous).
 * @param seed, the seed of the random number generator.
 * @param nSamples, the number of samples of the data stream.
 * @param nDiscreteAtts, the number of discrete attributes.
 * @param nContinuousAttributes, the number of continuous attributes.
 * @return A valid {@code DataStream} object.
 */
public static DataStream<DataInstance> generate(int seed,int nSamples,int nDiscreteAtts,int nContinuousAttributes){
  BayesianNetworkGenerator.setSeed(seed);
  BayesianNetworkGenerator.setNumberOfGaussianVars(nContinuousAttributes);
  BayesianNetworkGenerator.setNumberOfMultinomialVars(nDiscreteAtts,2);
  int nTotal=nDiscreteAtts + nContinuousAttributes;
  int nLinksMin=nTotal - 1;
  int nLinksMax=nTotal * (nTotal - 1) / 2;
  BayesianNetworkGenerator.setNumberOfLinks((int)(0.8 * nLinksMin + 0.2 * nLinksMax));
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(BayesianNetworkGenerator.generateBayesianNetwork());
  sampler.setSeed(seed);
  return sampler.sampleToDataStream(nSamples);
}",0.7711745437529247
21261,"/** 
 * Generate a DataStream with the given number of samples and attributes (discrete and continuous).
 * @param seed, the seed of the random number generator.
 * @param nSamples, the number of samples of the data stream.
 * @param nDiscreteAtts, the number of discrete attributes.
 * @param nContinuousAttributes, the number of continuous attributes.
 * @return A valid {@code DataStream} object.
 */
public static DataStream<DynamicDataInstance> generate(int seed,int nSamples,int nDiscreteAtts,int nContinuousAttributes){
  DynamicBayesianNetworkGenerator.setSeed(seed);
  DynamicBayesianNetworkGenerator.setNumberOfContinuousVars(nContinuousAttributes);
  DynamicBayesianNetworkGenerator.setNumberOfDiscreteVars(nDiscreteAtts);
  DynamicBayesianNetworkGenerator.setNumberOfStates(2);
  int nTotal=nDiscreteAtts + nContinuousAttributes;
  DynamicBayesianNetworkGenerator.setNumberOfLinks((int)(0.2 * nTotal * (nTotal - 1) / 2));
  DynamicBayesianNetwork dbn=DynamicBayesianNetworkGenerator.generateDynamicBayesianNetwork();
  DynamicBayesianNetworkSampler sampler=new DynamicBayesianNetworkSampler(dbn);
  sampler.setSeed(seed);
  return sampler.sampleToDataBase(nSamples / 50,50);
}","/** 
 * Generate a DataStream with the given number of samples and attributes (discrete and continuous).
 * @param seed, the seed of the random number generator.
 * @param nSamples, the number of samples of the data stream.
 * @param nDiscreteAtts, the number of discrete attributes.
 * @param nContinuousAttributes, the number of continuous attributes.
 * @return A valid {@code DataStream} object.
 */
public static DataStream<DynamicDataInstance> generate(int seed,int nSamples,int nDiscreteAtts,int nContinuousAttributes){
  DynamicBayesianNetworkGenerator.setSeed(seed);
  DynamicBayesianNetworkGenerator.setNumberOfContinuousVars(nContinuousAttributes);
  DynamicBayesianNetworkGenerator.setNumberOfDiscreteVars(nDiscreteAtts);
  DynamicBayesianNetworkGenerator.setNumberOfStates(2);
  int nTotal=nDiscreteAtts + nContinuousAttributes;
  int nLinksMin=nTotal - 1;
  int nLinksMax=nTotal * (nTotal - 1) / 2;
  DynamicBayesianNetworkGenerator.setNumberOfLinks((int)(0.8 * nLinksMin + 0.2 * nLinksMax));
  DynamicBayesianNetwork dbn=DynamicBayesianNetworkGenerator.generateDynamicBayesianNetwork();
  DynamicBayesianNetworkSampler sampler=new DynamicBayesianNetworkSampler(dbn);
  sampler.setSeed(seed);
  return sampler.sampleToDataBase(nSamples / 50,50);
}",0.9505920783993468
21262,"/** 
 * {@inheritDoc}
 */
@Override public void runInference(){
  nIter=0;
  boolean globalconvergence=false;
  boolean convergence=false;
  probOfEvidence=Double.NEGATIVE_INFINITY;
  local_elbo=Double.NEGATIVE_INFINITY;
  local_iter=0;
  int global_iter=0;
  while (!convergence && (local_iter++) < maxIter) {
    boolean done=true;
    for (    Node node : nodes) {
      if (!node.isActive() || node.isObserved() || plateuStructure.isNonReplicatedVar(node.getMainVariable()))       continue;
      Message<NaturalParameters> selfMessage=newSelfMessage(node);
      Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
      if (message.isPresent())       selfMessage.combine(message.get());
      updateCombinedMessage(node,selfMessage);
      done&=node.isDone();
    }
    convergence=this.testConvergence();
    if (done) {
      convergence=true;
    }
  }
  CompoundVector posteriorOLD=this.plateuStructure.getPlateauNaturalParameterPosterior();
  CompoundVector posteriorNew=this.plateuStructure.getPlateauNaturalParameterPosterior();
  int count=0;
  for (  Node node : nodes) {
    if (!node.isActive() || node.isObserved() || plateuStructure.isReplicatedVar(node.getMainVariable()))     continue;
    Message<NaturalParameters> selfMessage=newSelfMessage(node);
    Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
    if (message.isPresent())     selfMessage.combine(message.get());
    updateCombinedMessage(node,selfMessage);
    posteriorNew.setVectorByPosition(count,node.getQDist().getNaturalParameters());
    node.getQDist().setNaturalParameters((NaturalParameters)posteriorOLD.getVectorByPosition(count));
    node.getQDist().fixNumericalInstability();
    node.getQDist().updateMomentFromNaturalParameters();
    count++;
  }
  this.plateuStructure.updateNaturalParameterPosteriors(posteriorNew);
  this.testConvergence();
  probOfEvidence=local_elbo;
  probOfEvidence=local_elbo;
  if (output) {
    System.out.println(""String_Node_Str"" + global_iter + ""String_Node_Str""+ local_iter+ ""String_Node_Str""+ local_elbo);
    logger.info(""String_Node_Str"",global_iter,local_iter,local_elbo);
  }
  nIter=local_iter;
}","/** 
 * {@inheritDoc}
 */
@Override public void runInference(){
  nIter=0;
  boolean globalconvergence=false;
  boolean convergence=false;
  probOfEvidence=Double.NEGATIVE_INFINITY;
  local_elbo=Double.NEGATIVE_INFINITY;
  local_iter=0;
  int global_iter=0;
  while (!convergence && (local_iter++) < maxIter) {
    boolean done=true;
    for (    Node node : nodes) {
      if (!node.isActive() || node.isObserved() || plateuStructure.isNonReplicatedVar(node.getMainVariable()))       continue;
      Message<NaturalParameters> selfMessage=newSelfMessage(node);
      Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
      if (message.isPresent())       selfMessage.combine(message.get());
      updateCombinedMessage(node,selfMessage);
      done&=node.isDone();
    }
    convergence=this.testConvergence();
    if (done) {
      convergence=true;
    }
  }
  CompoundVector posteriorOLD=this.plateuStructure.getPlateauNaturalParameterPosterior();
  CompoundVector posteriorNew=this.plateuStructure.getPlateauNaturalParameterPosterior();
  int count=0;
  for (  Node node : nodes) {
    if (!node.isActive() || node.isObserved() || plateuStructure.isReplicatedVar(node.getMainVariable()))     continue;
    Message<NaturalParameters> selfMessage=newSelfMessage(node);
    Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
    if (message.isPresent())     selfMessage.combine(message.get());
    updateCombinedMessage(node,selfMessage);
    posteriorNew.setVectorByPosition(count,node.getQDist().getNaturalParameters());
    node.getQDist().setNaturalParameters((NaturalParameters)posteriorOLD.getVectorByPosition(count));
    node.getQDist().fixNumericalInstability();
    node.getQDist().updateMomentFromNaturalParameters();
    count++;
  }
  this.plateuStructure.updateNaturalParameterPosteriors(posteriorNew);
  probOfEvidence=local_elbo;
  probOfEvidence=local_elbo;
  if (output) {
    System.out.println(""String_Node_Str"" + global_iter + ""String_Node_Str""+ local_iter+ ""String_Node_Str""+ local_elbo);
    logger.info(""String_Node_Str"",global_iter,local_iter,local_elbo);
  }
  nIter=local_iter;
}",0.9946347503095336
21263,"/** 
 * {@inheritDoc}
 */
@Override public void runInference(){
  nIter=0;
  boolean globalconvergence=false;
  boolean convergence=false;
  probOfEvidence=Double.NEGATIVE_INFINITY;
  local_elbo=Double.NEGATIVE_INFINITY;
  local_iter=0;
  int global_iter=0;
  while (!convergence && (local_iter++) < maxIter) {
    boolean done=true;
    for (    Node node : nodes) {
      if (!node.isActive() || node.isObserved() || plateuStructure.isNonReplicatedVar(node.getMainVariable()))       continue;
      Message<NaturalParameters> selfMessage=newSelfMessage(node);
      Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
      if (message.isPresent())       selfMessage.combine(message.get());
      updateCombinedMessage(node,selfMessage);
      done&=node.isDone();
    }
    convergence=this.testConvergence();
    if (done) {
      convergence=true;
    }
  }
  CompoundVector posteriorOLD=this.plateuStructure.getPlateauNaturalParameterPosterior();
  CompoundVector posteriorNew=this.plateuStructure.getPlateauNaturalParameterPosterior();
  int count=0;
  for (  Node node : nodes) {
    if (!node.isActive() || node.isObserved() || plateuStructure.isReplicatedVar(node.getMainVariable()))     continue;
    Message<NaturalParameters> selfMessage=newSelfMessage(node);
    Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
    if (message.isPresent())     selfMessage.combine(message.get());
    updateCombinedMessage(node,selfMessage);
    posteriorNew.setVectorByPosition(count,node.getQDist().getNaturalParameters());
    node.getQDist().setNaturalParameters((NaturalParameters)posteriorOLD.getVectorByPosition(count));
    node.getQDist().fixNumericalInstability();
    node.getQDist().updateMomentFromNaturalParameters();
    count++;
  }
  this.plateuStructure.updateNaturalParameterPosteriors(posteriorNew);
  this.testConvergence();
  probOfEvidence=local_elbo;
  probOfEvidence=local_elbo;
  if (output) {
    System.out.println(""String_Node_Str"" + global_iter + ""String_Node_Str""+ local_iter+ ""String_Node_Str""+ local_elbo);
    logger.info(""String_Node_Str"",global_iter,local_iter,local_elbo);
  }
  nIter=local_iter;
}","/** 
 * {@inheritDoc}
 */
@Override public void runInference(){
  nIter=0;
  boolean globalconvergence=false;
  boolean convergence=false;
  probOfEvidence=Double.NEGATIVE_INFINITY;
  local_elbo=Double.NEGATIVE_INFINITY;
  local_iter=0;
  int global_iter=0;
  while (!convergence && (local_iter++) < maxIter) {
    boolean done=true;
    for (    Node node : nodes) {
      if (!node.isActive() || node.isObserved() || plateuStructure.isNonReplicatedVar(node.getMainVariable()))       continue;
      Message<NaturalParameters> selfMessage=newSelfMessage(node);
      Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
      if (message.isPresent())       selfMessage.combine(message.get());
      updateCombinedMessage(node,selfMessage);
      done&=node.isDone();
    }
    convergence=this.testConvergence();
    if (done) {
      convergence=true;
    }
  }
  CompoundVector posteriorOLD=this.plateuStructure.getPlateauNaturalParameterPosterior();
  CompoundVector posteriorNew=this.plateuStructure.getPlateauNaturalParameterPosterior();
  int count=0;
  for (  Node node : nodes) {
    if (!node.isActive() || node.isObserved() || plateuStructure.isReplicatedVar(node.getMainVariable()))     continue;
    Message<NaturalParameters> selfMessage=newSelfMessage(node);
    Optional<Message<NaturalParameters>> message=node.getChildren().stream().filter(children -> children.isActive()).map(children -> newMessageToParent(children,node)).reduce(Message::combineNonStateless);
    if (message.isPresent())     selfMessage.combine(message.get());
    updateCombinedMessage(node,selfMessage);
    posteriorNew.setVectorByPosition(count,node.getQDist().getNaturalParameters());
    node.getQDist().setNaturalParameters((NaturalParameters)posteriorOLD.getVectorByPosition(count));
    node.getQDist().fixNumericalInstability();
    node.getQDist().updateMomentFromNaturalParameters();
    count++;
  }
  this.plateuStructure.updateNaturalParameterPosteriors(posteriorNew);
  probOfEvidence=local_elbo;
  probOfEvidence=local_elbo;
  if (output) {
    System.out.println(""String_Node_Str"" + global_iter + ""String_Node_Str""+ local_iter+ ""String_Node_Str""+ local_elbo);
    logger.info(""String_Node_Str"",global_iter,local_iter,local_elbo);
  }
  nIter=local_iter;
}",0.9946347503095336
21264,"/** 
 * {@inheritDoc}
 */
@Override public boolean testConvergence(){
  boolean convergence=false;
  double newelbo=this.computeLogProbabilityOfEvidence();
  double percentage=100 * Math.abs(newelbo - local_elbo) / Math.abs(local_elbo);
  if (percentage < threshold) {
    convergence=true;
  }
  if (testELBO && (!convergence && (newelbo / nodes.size() < (local_elbo / nodes.size() - 0.01)) && local_iter > -1) || Double.isNaN(local_elbo)) {
    throw new IllegalStateException(""String_Node_Str"" + local_iter + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ local_elbo+ ""String_Node_Str""+ newelbo);
  }
  local_elbo=newelbo;
  return convergence;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean testConvergence(){
  boolean convergence=false;
  double newelbo=this.computeLogProbabilityOfEvidence();
  double percentage=100 * Math.abs(newelbo - local_elbo) / Math.abs(local_elbo);
  if (percentage < threshold || local_iter > this.getMaxIter()) {
    convergence=true;
  }
  if (testELBO && (!convergence && (newelbo / nodes.size() < (local_elbo / nodes.size() - 0.01)) && local_iter > -1) || Double.isNaN(local_elbo)) {
    throw new IllegalStateException(""String_Node_Str"" + local_iter + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ local_elbo+ ""String_Node_Str""+ newelbo);
  }
  local_elbo=newelbo;
  return convergence;
}",0.9745889387144993
21265,"/** 
 * {@inheritDoc}
 */
@Override public boolean testConvergence(){
  boolean convergence=false;
  double newelbo=this.computeLogProbabilityOfEvidence();
  double percentage=100 * Math.abs(newelbo - local_elbo) / Math.abs(local_elbo);
  if (percentage < threshold) {
    convergence=true;
  }
  if (testELBO && (!convergence && (newelbo / nodes.size() < (local_elbo / nodes.size() - 0.01)) && local_iter > -1) || Double.isNaN(local_elbo)) {
    throw new IllegalStateException(""String_Node_Str"" + local_iter + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ local_elbo+ ""String_Node_Str""+ newelbo);
  }
  local_elbo=newelbo;
  return convergence;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean testConvergence(){
  boolean convergence=false;
  double newelbo=this.computeLogProbabilityOfEvidence();
  double percentage=100 * Math.abs(newelbo - local_elbo) / Math.abs(local_elbo);
  if (percentage < threshold || local_iter > this.getMaxIter()) {
    convergence=true;
  }
  if (testELBO && (!convergence && (newelbo / nodes.size() < (local_elbo / nodes.size() - 0.01)) && local_iter > -1) || Double.isNaN(local_elbo)) {
    throw new IllegalStateException(""String_Node_Str"" + local_iter + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ local_elbo+ ""String_Node_Str""+ newelbo);
  }
  local_elbo=newelbo;
  return convergence;
}",0.9745889387144993
21266,"/** 
 * Sets a new set of attributes. Links current variables with this new set by matching variable names with attributes names.
 * @param attributes an object of class {@link Attributes}
 */
public void setAttributes(Attributes attributes){
  for (  Variable variable : allVariables) {
    VariableImplementation variableImplementation=(VariableImplementation)variable;
    variableImplementation.setAttribute(attributes.getAttributeByName(variable.getName()));
  }
}","/** 
 * Sets a new set of attributes. Links current variables with this new set by matching variable names with attributes names.
 * @param attributes an object of class {@link Attributes}
 */
public void setAttributes(Attributes attributes){
  for (  Attribute att : attributes) {
    Variable variable=this.getVariableByName(att.getName());
    VariableImplementation variableImplementation=(VariableImplementation)variable;
    variableImplementation.setAttribute(att);
  }
}",0.6356916578669483
21267,"public static void main(String[] args) throws Exception {
  String fileName=args[0];
  int windowSize=Integer.parseInt(args[1]);
  int localIter=Integer.parseInt(args[2]);
  long timeLimit=Long.parseLong(args[3]);
  int seed=Integer.parseInt(args[4]);
  int dataSetSize=Integer.parseInt(args[5]);
  double learningRate=Double.parseDouble(args[6]);
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataFlink<DataInstance> dataFlink=DataFlinkLoader.loadDataFromFolder(env,fileName,true);
  DAG hiddenNB=getDAGstructure(dataFlink.getAttributes());
  long start=System.nanoTime();
  StochasticVI stochasticVI=new StochasticVI();
  stochasticVI.setLocalThreshold(0.1);
  stochasticVI.setMaximumLocalIterations(localIter);
  stochasticVI.setSeed(seed);
  stochasticVI.setBatchSize(windowSize);
  stochasticVI.setLearningFactor(learningRate);
  stochasticVI.setDataSetSize(dataSetSize);
  stochasticVI.setTimiLimit(timeLimit);
  stochasticVI.setDAG(hiddenNB);
  stochasticVI.setDataFlink(dataFlink);
  stochasticVI.runLearning();
  BayesianNetwork LearnedBnet=stochasticVI.getLearntBayesianNetwork();
  System.out.println(LearnedBnet.toString());
  long duration=(System.nanoTime() - start) / 1;
  double seconds=duration / 1000000000.0;
  logger.info(""String_Node_Str"",seconds);
}","public static void main(String[] args) throws Exception {
  String fileName=args[0];
  int windowSize=Integer.parseInt(args[1]);
  int localIter=Integer.parseInt(args[2]);
  long timeLimit=Long.parseLong(args[3]);
  int seed=Integer.parseInt(args[4]);
  int dataSetSize=Integer.parseInt(args[5]);
  double learningRate=Double.parseDouble(args[6]);
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataFlink<DataInstance> dataFlink=DataFlinkLoader.loadDataFromFolder(env,fileName,false);
  DAG hiddenNB=getIDALocalGlobalDAG(dataFlink.getAttributes());
  long start=System.nanoTime();
  StochasticVI stochasticVI=new StochasticVI();
  stochasticVI.setLocalThreshold(0.1);
  stochasticVI.setMaximumLocalIterations(localIter);
  stochasticVI.setSeed(seed);
  stochasticVI.setBatchSize(windowSize);
  stochasticVI.setLearningFactor(learningRate);
  stochasticVI.setDataSetSize(dataSetSize);
  stochasticVI.setTimiLimit(timeLimit);
  List<Variable> hiddenVars=new ArrayList<>();
  hiddenVars.add(hiddenNB.getVariables().getVariableByName(""String_Node_Str""));
  stochasticVI.setPlateuStructure(new PlateuStructure(hiddenVars));
  stochasticVI.setDAG(hiddenNB);
  stochasticVI.setDataFlink(dataFlink);
  stochasticVI.runLearning();
  BayesianNetwork LearnedBnet=stochasticVI.getLearntBayesianNetwork();
  System.out.println(LearnedBnet.toString());
  long duration=(System.nanoTime() - start) / 1;
  double seconds=duration / 1000000000.0;
  logger.info(""String_Node_Str"",seconds);
}",0.9201277955271564
21268,"/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  ArrayVectorParameter vector=new ArrayVectorParameter(this.sizeOfSufficientStatistics());
  vector.set(0,0);
  vector.set(1,0.000001);
  return vector;
}","/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  ArrayVector vector=new ArrayVector(this.sizeOfSufficientStatistics());
  double mean=0;
  double precision=0.000001;
  vector.set(0,mean * precision);
  vector.set(1,-0.5 * precision);
  return vector;
}",0.6918918918918919
21269,"/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  ArrayVectorParameter vector=new ArrayVectorParameter(this.sizeOfSufficientStatistics());
  vector.set(0,0);
  vector.set(1,0.000001);
  return vector;
}","/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  ArrayVector vector=new ArrayVector(this.sizeOfSufficientStatistics());
  double mean=0;
  double precision=0.000001;
  vector.set(0,mean * precision);
  vector.set(1,-0.5 * precision);
  return vector;
}",0.6918918918918919
21270,"/** 
 * Creates a new Attributes from a given List of attribute objects.
 * @param attributes a non-empty list of Attribute objects.
 */
public Attributes(List<Attribute> attributes){
  attributes.sort((a,b) -> a.getIndex() - b.getIndex());
  this.attributes=attributes;
  this.time_id=null;
  this.seq_id=null;
  for (  Attribute att : getFullListOfAttributes()) {
    String name=att.getName();
    if (name.equals(Attributes.TIME_ID_ATT_NAME)) {
      this.time_id=att;
      this.time_id.setSpecialAttribute(true);
      this.time_id.setTimeId(true);
      this.time_id.setNumberFormat(new DecimalFormat(""String_Node_Str""));
    }
 else     if (name.equals(Attributes.SEQUENCE_ID_ATT_NAME)) {
      this.seq_id=att;
      this.seq_id.setSpecialAttribute(true);
      this.seq_id.setSeqId(true);
      this.seq_id.setNumberFormat(new DecimalFormat(""String_Node_Str""));
    }
  }
}","/** 
 * Creates a new Attributes from a given List of attribute objects.
 * @param attributes a non-empty list of Attribute objects.
 */
public Attributes(List<Attribute> attributes){
  attributes.sort((a,b) -> a.getIndex() - b.getIndex());
  this.attributes=attributes;
  this.time_id=null;
  this.seq_id=null;
  for (  Attribute att : getFullListOfAttributes()) {
    String name=att.getName();
    if (name.equals(Attributes.TIME_ID_ATT_NAME)) {
      this.time_id=att;
      this.time_id.setSpecialAttribute(true);
      this.time_id.setTimeId(true);
    }
 else     if (name.equals(Attributes.SEQUENCE_ID_ATT_NAME)) {
      this.seq_id=att;
      this.seq_id.setSpecialAttribute(true);
      this.seq_id.setSeqId(true);
    }
  }
}",0.9092032118591724
21271,"public static String dataInstanceToARFFString(Attribute att,DataInstance assignment,String separator){
  StringBuilder builder=new StringBuilder();
  if (Utils.isMissingValue(assignment.getValue(att))) {
    builder.append(""String_Node_Str"");
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.FINITE_SET) {
    FiniteStateSpace stateSpace=att.getStateSpaceType();
    String nameState=stateSpace.getStatesName((int)assignment.getValue(att));
    builder.append(nameState + separator);
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.REAL) {
    if (att.getNumberFormat() != null) {
      builder.append(att.getNumberFormat().format(assignment.getValue(att)) + separator);
    }
 else {
      builder.append(assignment.getValue(att) + separator);
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + att.getStateSpaceType().getStateSpaceTypeEnum());
  }
  return builder.toString();
}","public static String dataInstanceToARFFString(Attribute att,DataInstance assignment,String separator){
  StringBuilder builder=new StringBuilder();
  if (Utils.isMissingValue(assignment.getValue(att))) {
    builder.append(""String_Node_Str"");
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.FINITE_SET) {
    FiniteStateSpace stateSpace=att.getStateSpaceType();
    String nameState=stateSpace.getStatesName((int)assignment.getValue(att));
    builder.append(nameState + separator);
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.REAL) {
    if (att.isSpecialAttribute() || att.isTimeId()) {
      builder.append(decimalFormat.format(assignment.getValue(att)) + separator);
    }
 else {
      builder.append(assignment.getValue(att) + separator);
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + att.getStateSpaceType().getStateSpaceTypeEnum());
  }
  return builder.toString();
}",0.9323843416370108
21272,"/** 
 * Initialises the class for concept drift detection.
 */
public void initLearning(){
  if (classIndex == -1)   classIndex=attributes.getNumberOfAttributes() - 1;
switch (this.conceptDriftDetector) {
case GLOBAL:
    this.buildGlobalDAG();
  break;
}
svb=new ParallelVB();
svb.setSeed(this.seed);
svb.setPlateuStructure(new PlateuStructure(hiddenVars));
GaussianHiddenTransitionMethod gaussianHiddenTransitionMethod=new GaussianHiddenTransitionMethod(hiddenVars,0,this.transitionVariance);
gaussianHiddenTransitionMethod.setFading(1.0);
svb.setTransitionMethod(gaussianHiddenTransitionMethod);
svb.setBatchSize(this.batchSize);
svb.setDAG(globalDAG);
svb.setOutput(false);
svb.setMaximumGlobalIterations(100);
svb.setMaximumLocalIterations(100);
svb.setGlobalThreshold(0.00001);
svb.setLocalThreshold(0.01);
svb.initLearning();
}","/** 
 * Initialises the class for concept drift detection.
 */
public void initLearning(){
  if (classIndex == -1)   classIndex=attributes.getNumberOfAttributes() - 1;
switch (this.conceptDriftDetector) {
case GLOBAL:
    this.buildGlobalDAG();
  break;
}
svb=new ParallelVB();
svb.setSeed(this.seed);
svb.setPlateuStructure(new PlateuStructure(hiddenVars));
GaussianHiddenTransitionMethod gaussianHiddenTransitionMethod=new GaussianHiddenTransitionMethod(hiddenVars,0,this.transitionVariance);
gaussianHiddenTransitionMethod.setFading(1.0);
svb.setTransitionMethod(gaussianHiddenTransitionMethod);
svb.setBatchSize(this.batchSize);
svb.setDAG(globalDAG);
svb.setOutput(false);
svb.setMaximumGlobalIterations(100);
svb.setMaximumLocalIterations(100);
svb.setGlobalThreshold(0.01);
svb.setLocalThreshold(0.01);
svb.initLearning();
}",0.9981981981981982
21273,"@Override public CompoundVector map(DataOnMemory<DataInstance> dataBatch) throws Exception {
  if (dataBatch.getNumberOfDataInstances() == 0) {
    elbo.aggregate(basedELBO);
    return prior;
  }
 else {
    SVB.BatchOutput out=svb.updateModelOnBatchParallel(dataBatch);
    if (Double.isNaN(out.getElbo()))     throw new IllegalStateException(""String_Node_Str"");
    elbo.aggregate(svb.getPlateuStructure().getReplicatedNodes().filter(node -> node.isActive()).mapToDouble(node -> svb.getPlateuStructure().getVMP().computeELBO(node)).sum());
    return out.getVector();
  }
}","@Override public CompoundVector map(DataOnMemory<DataInstance> dataBatch) throws Exception {
  if (dataBatch.getNumberOfDataInstances() == 0) {
    elbo.aggregate(basedELBO);
    return prior;
  }
 else {
    this.svb.updateNaturalParameterPrior(updatedPrior);
    this.svb.updateNaturalParameterPosteriors(updatedPrior);
    svb.getPlateuStructure().getNonReplictedNodes().forEach(node -> node.setActive(false));
    SVB.BatchOutput out=svb.updateModelOnBatchParallel(dataBatch);
    if (Double.isNaN(out.getElbo()))     throw new IllegalStateException(""String_Node_Str"");
    elbo.aggregate(out.getElbo());
    svb.getPlateuStructure().getNonReplictedNodes().forEach(node -> node.setActive(true));
    if (partialVectors.containsKey(dataBatch.getBatchID())) {
      CompoundVector newVector=Serialization.deepCopy(updatedPrior);
      newVector.substract(partialVectors.get(dataBatch.getBatchID()));
      this.svb.updateNaturalParameterPrior(newVector);
      this.svb.updateNaturalParameterPosteriors(newVector);
    }
 else {
      this.svb.updateNaturalParameterPrior(this.prior);
      this.svb.getPlateuStructure().setSeed(this.svb.getSeed());
      this.svb.getPlateuStructure().resetQs();
    }
    out=svb.updateModelOnBatchParallel(dataBatch);
    partialVectors.put(dataBatch.getBatchID(),out.getVector());
    return out.getVector();
  }
}",0.5194401244167963
21274,"@Override public boolean isConverged(int iteration,DoubleValue value){
  if (Double.isNaN(value.getValue()))   throw new IllegalStateException(""String_Node_Str"");
  double percentage=100 * (value.getValue() - previousELBO) / Math.abs(previousELBO);
  if (iteration == 1) {
    previousELBO=value.getValue();
    logger.info(""String_Node_Str"",iteration,100,value.getValue(),previousELBO);
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ 100+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    return false;
  }
 else   if (percentage < 0 && percentage < -threshold) {
    logger.info(""String_Node_Str"",iteration,percentage,value.getValue(),previousELBO);
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    this.previousELBO=value.getValue();
    return true;
  }
 else   if (percentage > 0 && percentage > threshold) {
    logger.info(""String_Node_Str"",iteration,percentage,value.getValue(),previousELBO);
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    this.previousELBO=value.getValue();
    return false;
  }
 else {
    logger.info(""String_Node_Str"",iteration,percentage,value.getValue());
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ value.getValue());
    return true;
  }
}","@Override public boolean isConverged(int iteration,DoubleValue value){
  if (Double.isNaN(value.getValue()))   throw new IllegalStateException(""String_Node_Str"");
  if (value.getValue() == Double.NEGATIVE_INFINITY)   value.setValue(-Double.MAX_VALUE);
  double percentage=100 * (value.getValue() - previousELBO) / Math.abs(previousELBO);
  if (iteration == 1) {
    previousELBO=value.getValue();
    logger.info(""String_Node_Str"",iteration,100,value.getValue(),previousELBO);
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ 100+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    return false;
  }
 else   if (percentage < 0 && percentage < -threshold) {
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    this.previousELBO=value.getValue();
    return false;
  }
 else   if (percentage > 0 && percentage > threshold) {
    logger.info(""String_Node_Str"",iteration,percentage,value.getValue(),previousELBO);
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    this.previousELBO=value.getValue();
    return false;
  }
 else {
    logger.info(""String_Node_Str"",iteration,percentage,value.getValue());
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ value.getValue());
    return true;
  }
}",0.9400196656833824
21275,"@Override public void mapPartition(Iterable<T> values,Collector<DataOnMemory<T>> out) throws Exception {
  int count=0;
  DataOnMemoryListContainer<T> batch=new DataOnMemoryListContainer<T>(this.attributes);
  for (  T value : values) {
    if (count < batchSize) {
      batch.add(value);
      count++;
    }
 else {
      out.collect(batch);
      batch=new DataOnMemoryListContainer<T>(this.attributes);
      batch.add(value);
      count=1;
    }
  }
  if (batch.getNumberOfDataInstances() > 0)   out.collect(batch);
}","@Override public void mapPartition(Iterable<T> values,Collector<DataOnMemory<T>> out) throws Exception {
  int index=this.getRuntimeContext().getIndexOfThisSubtask() * 100000;
  int batchCount=0;
  int count=0;
  DataOnMemoryListContainer<T> batch=new DataOnMemoryListContainer<T>(this.attributes);
  for (  T value : values) {
    if (count < batchSize) {
      batch.add(value);
      count++;
    }
 else {
      batch.setId(batchCount + index);
      out.collect(batch);
      batch=new DataOnMemoryListContainer<T>(this.attributes);
      batch.add(value);
      count=1;
      batchCount++;
    }
  }
  if (batch.getNumberOfDataInstances() > 0) {
    batch.setId(batchCount + index);
    out.collect(batch);
  }
}",0.8077232502011263
21276,"/** 
 * Creates a new Attributes from a given List of attribute objects.
 * @param attributes a non-empty list of Attribute objects.
 */
public Attributes(List<Attribute> attributes){
  attributes.sort((a,b) -> a.getIndex() - b.getIndex());
  this.attributes=attributes;
  this.time_id=null;
  this.seq_id=null;
  for (  Attribute att : getFullListOfAttributes()) {
    String name=att.getName();
    if (name.equals(Attributes.TIME_ID_ATT_NAME)) {
      this.time_id=att;
      this.time_id.setSpecialAttribute(true);
      this.time_id.setTimeId(true);
      this.time_id.setNumberFormat(new DecimalFormat(""String_Node_Str""));
    }
 else     if (name.equals(Attributes.SEQUENCE_ID_ATT_NAME)) {
      this.seq_id=att;
      this.seq_id.setSpecialAttribute(true);
      this.seq_id.setSeqId(true);
      this.seq_id.setNumberFormat(new DecimalFormat(""String_Node_Str""));
    }
  }
}","/** 
 * Creates a new Attributes from a given List of attribute objects.
 * @param attributes a non-empty list of Attribute objects.
 */
public Attributes(List<Attribute> attributes){
  attributes.sort((a,b) -> a.getIndex() - b.getIndex());
  this.attributes=attributes;
  this.time_id=null;
  this.seq_id=null;
  for (  Attribute att : getFullListOfAttributes()) {
    String name=att.getName();
    if (name.equals(Attributes.TIME_ID_ATT_NAME)) {
      this.time_id=att;
      this.time_id.setSpecialAttribute(true);
      this.time_id.setTimeId(true);
    }
 else     if (name.equals(Attributes.SEQUENCE_ID_ATT_NAME)) {
      this.seq_id=att;
      this.seq_id.setSpecialAttribute(true);
      this.seq_id.setSeqId(true);
    }
  }
}",0.9092032118591724
21277,"public static String dataInstanceToARFFString(Attribute att,DataInstance assignment,String separator){
  StringBuilder builder=new StringBuilder();
  if (Utils.isMissingValue(assignment.getValue(att))) {
    builder.append(""String_Node_Str"");
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.FINITE_SET) {
    FiniteStateSpace stateSpace=att.getStateSpaceType();
    String nameState=stateSpace.getStatesName((int)assignment.getValue(att));
    builder.append(nameState + separator);
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.REAL) {
    if (att.getNumberFormat() != null) {
      builder.append(att.getNumberFormat().format(assignment.getValue(att)) + separator);
    }
 else {
      builder.append(assignment.getValue(att) + separator);
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + att.getStateSpaceType().getStateSpaceTypeEnum());
  }
  return builder.toString();
}","public static String dataInstanceToARFFString(Attribute att,DataInstance assignment,String separator){
  StringBuilder builder=new StringBuilder();
  if (Utils.isMissingValue(assignment.getValue(att))) {
    builder.append(""String_Node_Str"");
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.FINITE_SET) {
    FiniteStateSpace stateSpace=att.getStateSpaceType();
    String nameState=stateSpace.getStatesName((int)assignment.getValue(att));
    builder.append(nameState + separator);
  }
 else   if (att.getStateSpaceType().getStateSpaceTypeEnum() == StateSpaceTypeEnum.REAL) {
    if (att.isSpecialAttribute() || att.isTimeId()) {
      builder.append(decimalFormat.format(assignment.getValue(att)) + separator);
    }
 else {
      builder.append(assignment.getValue(att) + separator);
    }
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + att.getStateSpaceType().getStateSpaceTypeEnum());
  }
  return builder.toString();
}",0.9323843416370108
21278,"/** 
 * Initialises the class for concept drift detection.
 */
public void initLearning(){
  if (classIndex == -1)   classIndex=attributes.getNumberOfAttributes() - 1;
switch (this.conceptDriftDetector) {
case GLOBAL:
    this.buildGlobalDAG();
  break;
}
svb=new ParallelVB();
svb.setSeed(this.seed);
svb.setPlateuStructure(new PlateuStructure(hiddenVars));
GaussianHiddenTransitionMethod gaussianHiddenTransitionMethod=new GaussianHiddenTransitionMethod(hiddenVars,0,this.transitionVariance);
gaussianHiddenTransitionMethod.setFading(1.0);
svb.setTransitionMethod(gaussianHiddenTransitionMethod);
svb.setBatchSize(this.batchSize);
svb.setDAG(globalDAG);
svb.setOutput(false);
svb.setMaximumGlobalIterations(100);
svb.setMaximumLocalIterations(100);
svb.setGlobalThreshold(0.00001);
svb.setLocalThreshold(0.01);
svb.initLearning();
}","/** 
 * Initialises the class for concept drift detection.
 */
public void initLearning(){
  if (classIndex == -1)   classIndex=attributes.getNumberOfAttributes() - 1;
switch (this.conceptDriftDetector) {
case GLOBAL:
    this.buildGlobalDAG();
  break;
}
svb=new ParallelVB();
svb.setSeed(this.seed);
svb.setPlateuStructure(new PlateuStructure(hiddenVars));
GaussianHiddenTransitionMethod gaussianHiddenTransitionMethod=new GaussianHiddenTransitionMethod(hiddenVars,0,this.transitionVariance);
gaussianHiddenTransitionMethod.setFading(1.0);
svb.setTransitionMethod(gaussianHiddenTransitionMethod);
svb.setBatchSize(this.batchSize);
svb.setDAG(globalDAG);
svb.setOutput(false);
svb.setMaximumGlobalIterations(100);
svb.setMaximumLocalIterations(100);
svb.setGlobalThreshold(0.01);
svb.setLocalThreshold(0.01);
svb.initLearning();
}",0.9981981981981982
21279,"@Override public CompoundVector map(DataOnMemory<DataInstance> dataBatch) throws Exception {
  if (dataBatch.getNumberOfDataInstances() == 0) {
    elbo.aggregate(basedELBO);
    return prior;
  }
 else {
    SVB.BatchOutput out=svb.updateModelOnBatchParallel(dataBatch);
    if (Double.isNaN(out.getElbo()))     throw new IllegalStateException(""String_Node_Str"");
    elbo.aggregate(svb.getPlateuStructure().getReplicatedNodes().filter(node -> node.isActive()).mapToDouble(node -> svb.getPlateuStructure().getVMP().computeELBO(node)).sum());
    return out.getVector();
  }
}","@Override public CompoundVector map(DataOnMemory<DataInstance> dataBatch) throws Exception {
  if (dataBatch.getNumberOfDataInstances() == 0) {
    elbo.aggregate(basedELBO);
    return prior;
  }
 else {
    this.svb.updateNaturalParameterPrior(updatedPrior);
    this.svb.updateNaturalParameterPosteriors(updatedPrior);
    svb.getPlateuStructure().getNonReplictedNodes().forEach(node -> node.setActive(false));
    SVB.BatchOutput out=svb.updateModelOnBatchParallel(dataBatch);
    if (Double.isNaN(out.getElbo()))     throw new IllegalStateException(""String_Node_Str"");
    elbo.aggregate(out.getElbo());
    svb.getPlateuStructure().getNonReplictedNodes().forEach(node -> node.setActive(true));
    if (partialVectors.containsKey(dataBatch.getBatchID())) {
      CompoundVector newVector=Serialization.deepCopy(updatedPrior);
      newVector.substract(partialVectors.get(dataBatch.getBatchID()));
      this.svb.updateNaturalParameterPrior(newVector);
      this.svb.updateNaturalParameterPosteriors(newVector);
    }
 else {
      this.svb.updateNaturalParameterPrior(this.prior);
      this.svb.getPlateuStructure().setSeed(this.svb.getSeed());
      this.svb.getPlateuStructure().resetQs();
    }
    out=svb.updateModelOnBatchParallel(dataBatch);
    partialVectors.put(dataBatch.getBatchID(),out.getVector());
    return out.getVector();
  }
}",0.5194401244167963
21280,"@Override public boolean isConverged(int iteration,DoubleValue value){
  if (Double.isNaN(value.getValue()))   throw new IllegalStateException(""String_Node_Str"");
  double percentage=100 * (value.getValue() - previousELBO) / Math.abs(previousELBO);
  if (iteration == 1) {
    previousELBO=value.getValue();
    logger.info(""String_Node_Str"",iteration,100,value.getValue(),previousELBO);
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ 100+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    return false;
  }
 else   if (percentage < 0 && percentage < -threshold) {
    logger.info(""String_Node_Str"",iteration,percentage,value.getValue(),previousELBO);
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    this.previousELBO=value.getValue();
    return true;
  }
 else   if (percentage > 0 && percentage > threshold) {
    logger.info(""String_Node_Str"",iteration,percentage,value.getValue(),previousELBO);
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    this.previousELBO=value.getValue();
    return false;
  }
 else {
    logger.info(""String_Node_Str"",iteration,percentage,value.getValue());
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ value.getValue());
    return true;
  }
}","@Override public boolean isConverged(int iteration,DoubleValue value){
  if (Double.isNaN(value.getValue()))   throw new IllegalStateException(""String_Node_Str"");
  if (value.getValue() == Double.NEGATIVE_INFINITY)   value.setValue(-Double.MAX_VALUE);
  double percentage=100 * (value.getValue() - previousELBO) / Math.abs(previousELBO);
  if (iteration == 1) {
    previousELBO=value.getValue();
    logger.info(""String_Node_Str"",iteration,100,value.getValue(),previousELBO);
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ 100+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    return false;
  }
 else   if (percentage < 0 && percentage < -threshold) {
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    this.previousELBO=value.getValue();
    return false;
  }
 else   if (percentage > 0 && percentage > threshold) {
    logger.info(""String_Node_Str"",iteration,percentage,value.getValue(),previousELBO);
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ (value.getValue() + ""String_Node_Str"" + previousELBO));
    this.previousELBO=value.getValue();
    return false;
  }
 else {
    logger.info(""String_Node_Str"",iteration,percentage,value.getValue());
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str""+ percentage+ ""String_Node_Str""+ value.getValue());
    return true;
  }
}",0.9400196656833824
21281,"@Override public void mapPartition(Iterable<T> values,Collector<DataOnMemory<T>> out) throws Exception {
  int count=0;
  DataOnMemoryListContainer<T> batch=new DataOnMemoryListContainer<T>(this.attributes);
  for (  T value : values) {
    if (count < batchSize) {
      batch.add(value);
      count++;
    }
 else {
      out.collect(batch);
      batch=new DataOnMemoryListContainer<T>(this.attributes);
      batch.add(value);
      count=1;
    }
  }
  if (batch.getNumberOfDataInstances() > 0)   out.collect(batch);
}","@Override public void mapPartition(Iterable<T> values,Collector<DataOnMemory<T>> out) throws Exception {
  int index=this.getRuntimeContext().getIndexOfThisSubtask() * 100000;
  int batchCount=0;
  int count=0;
  DataOnMemoryListContainer<T> batch=new DataOnMemoryListContainer<T>(this.attributes);
  for (  T value : values) {
    if (count < batchSize) {
      batch.add(value);
      count++;
    }
 else {
      batch.setId(batchCount + index);
      out.collect(batch);
      batch=new DataOnMemoryListContainer<T>(this.attributes);
      batch.add(value);
      count=1;
      batchCount++;
    }
  }
  if (batch.getNumberOfDataInstances() > 0) {
    batch.setId(batchCount + index);
    out.collect(batch);
  }
}",0.8077232502011263
21282,"@Override public EF_LearningBayesianNetwork initModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable paramVariable : bayesianNetwork.getParametersVariables().getListOfParamaterVariables()) {
    if (!paramVariable.isNormalParameter())     continue;
    EF_Normal prior=bayesianNetwork.getDistribution(paramVariable);
    double varPrior=1;
    double precisionPrior=1 / varPrior;
    double meanPrior=0;
    prior.getNaturalParameters().set(0,precisionPrior * meanPrior);
    prior.getNaturalParameters().set(1,-0.5 * precisionPrior);
    prior.fixNumericalInstability();
    prior.updateMomentFromNaturalParameters();
  }
  for (  Variable localVar : this.localHiddenVars) {
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double mean=meanStart;
    double var=1;
    normal.getNaturalParameters().set(0,mean / (var));
    normal.getNaturalParameters().set(1,-1 / (2 * var));
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  return bayesianNetwork;
}","@Override public EF_LearningBayesianNetwork initModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable paramVariable : bayesianNetwork.getParametersVariables().getListOfParamaterVariables()) {
    if (!paramVariable.isNormalParameter())     continue;
    EF_NormalParameter prior=bayesianNetwork.getDistribution(paramVariable);
    double varPrior=1;
    double precisionPrior=1 / varPrior;
    double meanPrior=0;
    prior.setNaturalWithMeanPrecision(meanPrior,precisionPrior);
    prior.fixNumericalInstability();
    prior.updateMomentFromNaturalParameters();
  }
  for (  Variable localVar : this.localHiddenVars) {
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double mean=meanStart;
    double var=1;
    normal.getNaturalParameters().set(0,mean / (var));
    normal.getNaturalParameters().set(1,-1 / (2 * var));
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  return bayesianNetwork;
}",0.9279148524431544
21283,"/** 
 * {@inheritDoc}
 */
@Override public void fixNumericalInstability(){
  double alpha=this.naturalParameters.get(0) + 1;
  double beta=-this.naturalParameters.get(1);
  if ((alpha / beta) > PRECISION_LIMIT) {
    double K=(alpha / beta) / PRECISION_LIMIT;
    double alphaPrime=alpha / K;
    this.naturalParameters.set(0,alphaPrime - 1);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void fixNumericalInstability(){
}",0.3584905660377358
21284,"/** 
 * {@inheritDoc}
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}","/** 
 * {@inheritDoc}
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters=new EF_NormalParameter.ArrayVectorParameter(2);
    naturalParameters.set(0,X);
    naturalParameters.set(1,invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}",0.5989613387189844
21285,"@Override public EF_LearningBayesianNetwork transitionModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable localVar : this.localHiddenVars) {
    Normal normalGlobalHiddenPreviousTimeStep=plateuStructure.getEFParameterPosterior(localVar).toUnivariateDistribution();
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double variance=normalGlobalHiddenPreviousTimeStep.getVariance() + this.transtionVariance;
    double mean=normalGlobalHiddenPreviousTimeStep.getMean();
    normal.getNaturalParameters().set(0,mean / (variance));
    normal.getNaturalParameters().set(1,-1 / (2 * variance));
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  if (fading < 1.0) {
    bayesianNetwork.getParametersVariables().getListOfParamaterVariables().stream().forEach(var -> {
      EF_BaseDistribution_MultinomialParents dist=bayesianNetwork.getDistribution(var);
      EF_UnivariateDistribution prior=dist.getBaseEFUnivariateDistribution(0);
      NaturalParameters naturalParameters=prior.getNaturalParameters();
      naturalParameters.multiplyBy(fading);
      prior.setNaturalParameters(naturalParameters);
      dist.setBaseEFDistribution(0,prior);
    }
);
  }
  return bayesianNetwork;
}","@Override public EF_LearningBayesianNetwork transitionModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable localVar : this.localHiddenVars) {
    Normal normalGlobalHiddenPreviousTimeStep=plateuStructure.getEFParameterPosterior(localVar).toUnivariateDistribution();
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double variance=normalGlobalHiddenPreviousTimeStep.getVariance() + this.transtionVariance;
    double mean=normalGlobalHiddenPreviousTimeStep.getMean();
    normal.setNaturalWithMeanPrecision(mean,1 / variance);
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  if (fading < 1.0) {
    bayesianNetwork.getParametersVariables().getListOfParamaterVariables().stream().forEach(var -> {
      EF_BaseDistribution_MultinomialParents dist=bayesianNetwork.getDistribution(var);
      EF_UnivariateDistribution prior=dist.getBaseEFUnivariateDistribution(0);
      NaturalParameters naturalParameters=prior.getNaturalParameters();
      naturalParameters.multiplyBy(fading);
      prior.setNaturalParameters(naturalParameters);
      dist.setBaseEFDistribution(0,prior);
    }
);
  }
  return bayesianNetwork;
}",0.9487077534791252
21286,"@Override public EF_LearningBayesianNetwork initModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable paramVariable : bayesianNetwork.getParametersVariables().getListOfParamaterVariables()) {
    if (!paramVariable.isNormalParameter())     continue;
    EF_NormalParameter prior=bayesianNetwork.getDistribution(paramVariable);
    double varPrior=1;
    double precisionPrior=1 / varPrior;
    double meanPrior=0;
    prior.setNaturalWithMeanPrecision(meanPrior,precisionPrior);
    prior.fixNumericalInstability();
    prior.updateMomentFromNaturalParameters();
  }
  for (  Variable localVar : this.localHiddenVars) {
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double mean=meanStart;
    double var=1;
    normal.getNaturalParameters().set(0,mean / (var));
    normal.getNaturalParameters().set(1,-1 / (2 * var));
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  return bayesianNetwork;
}","@Override public EF_LearningBayesianNetwork initModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable paramVariable : bayesianNetwork.getParametersVariables().getListOfParamaterVariables()) {
    if (!paramVariable.isNormalParameter())     continue;
    EF_NormalParameter prior=bayesianNetwork.getDistribution(paramVariable);
    double varPrior=1;
    double precisionPrior=1 / varPrior;
    double meanPrior=0;
    prior.setNaturalWithMeanPrecision(meanPrior,precisionPrior);
    prior.fixNumericalInstability();
    prior.updateMomentFromNaturalParameters();
  }
  for (  Variable localVar : this.localHiddenVars) {
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double mean=meanStart;
    double var=1;
    normal.setNaturalWithMeanPrecision(mean,1 / var);
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  return bayesianNetwork;
}",0.9364754098360656
21287,"@Override public EF_LearningBayesianNetwork initModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable paramVariable : bayesianNetwork.getParametersVariables().getListOfParamaterVariables()) {
    if (!paramVariable.isNormalParameter())     continue;
    EF_Normal prior=bayesianNetwork.getDistribution(paramVariable);
    double varPrior=1;
    double precisionPrior=1 / varPrior;
    double meanPrior=0;
    prior.getNaturalParameters().set(0,precisionPrior * meanPrior);
    prior.getNaturalParameters().set(1,-0.5 * precisionPrior);
    prior.fixNumericalInstability();
    prior.updateMomentFromNaturalParameters();
  }
  for (  Variable localVar : this.localHiddenVars) {
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double mean=meanStart;
    double var=1;
    normal.getNaturalParameters().set(0,mean / (var));
    normal.getNaturalParameters().set(1,-1 / (2 * var));
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  return bayesianNetwork;
}","@Override public EF_LearningBayesianNetwork initModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable paramVariable : bayesianNetwork.getParametersVariables().getListOfParamaterVariables()) {
    if (!paramVariable.isNormalParameter())     continue;
    EF_NormalParameter prior=bayesianNetwork.getDistribution(paramVariable);
    double varPrior=1;
    double precisionPrior=1 / varPrior;
    double meanPrior=0;
    prior.setNaturalWithMeanPrecision(meanPrior,precisionPrior);
    prior.fixNumericalInstability();
    prior.updateMomentFromNaturalParameters();
  }
  for (  Variable localVar : this.localHiddenVars) {
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double mean=meanStart;
    double var=1;
    normal.getNaturalParameters().set(0,mean / (var));
    normal.getNaturalParameters().set(1,-1 / (2 * var));
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  return bayesianNetwork;
}",0.9279148524431544
21288,"/** 
 * {@inheritDoc}
 */
@Override public void fixNumericalInstability(){
  double alpha=this.naturalParameters.get(0) + 1;
  double beta=-this.naturalParameters.get(1);
  if ((alpha / beta) > PRECISION_LIMIT) {
    double K=(alpha / beta) / PRECISION_LIMIT;
    double alphaPrime=alpha / K;
    this.naturalParameters.set(0,alphaPrime - 1);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void fixNumericalInstability(){
}",0.3584905660377358
21289,"/** 
 * {@inheritDoc}
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}","/** 
 * {@inheritDoc}
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters=new EF_NormalParameter.ArrayVectorParameter(2);
    naturalParameters.set(0,X);
    naturalParameters.set(1,invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}",0.5989613387189844
21290,"@Override public EF_LearningBayesianNetwork transitionModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable localVar : this.localHiddenVars) {
    Normal normalGlobalHiddenPreviousTimeStep=plateuStructure.getEFParameterPosterior(localVar).toUnivariateDistribution();
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double variance=normalGlobalHiddenPreviousTimeStep.getVariance() + this.transtionVariance;
    double mean=normalGlobalHiddenPreviousTimeStep.getMean();
    normal.getNaturalParameters().set(0,mean / (variance));
    normal.getNaturalParameters().set(1,-1 / (2 * variance));
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  if (fading < 1.0) {
    bayesianNetwork.getParametersVariables().getListOfParamaterVariables().stream().forEach(var -> {
      EF_BaseDistribution_MultinomialParents dist=bayesianNetwork.getDistribution(var);
      EF_UnivariateDistribution prior=dist.getBaseEFUnivariateDistribution(0);
      NaturalParameters naturalParameters=prior.getNaturalParameters();
      naturalParameters.multiplyBy(fading);
      prior.setNaturalParameters(naturalParameters);
      dist.setBaseEFDistribution(0,prior);
    }
);
  }
  return bayesianNetwork;
}","@Override public EF_LearningBayesianNetwork transitionModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable localVar : this.localHiddenVars) {
    Normal normalGlobalHiddenPreviousTimeStep=plateuStructure.getEFParameterPosterior(localVar).toUnivariateDistribution();
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double variance=normalGlobalHiddenPreviousTimeStep.getVariance() + this.transtionVariance;
    double mean=normalGlobalHiddenPreviousTimeStep.getMean();
    normal.setNaturalWithMeanPrecision(mean,1 / variance);
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  if (fading < 1.0) {
    bayesianNetwork.getParametersVariables().getListOfParamaterVariables().stream().forEach(var -> {
      EF_BaseDistribution_MultinomialParents dist=bayesianNetwork.getDistribution(var);
      EF_UnivariateDistribution prior=dist.getBaseEFUnivariateDistribution(0);
      NaturalParameters naturalParameters=prior.getNaturalParameters();
      naturalParameters.multiplyBy(fading);
      prior.setNaturalParameters(naturalParameters);
      dist.setBaseEFDistribution(0,prior);
    }
);
  }
  return bayesianNetwork;
}",0.9487077534791252
21291,"@Override public EF_LearningBayesianNetwork initModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable paramVariable : bayesianNetwork.getParametersVariables().getListOfParamaterVariables()) {
    if (!paramVariable.isNormalParameter())     continue;
    EF_NormalParameter prior=bayesianNetwork.getDistribution(paramVariable);
    double varPrior=1;
    double precisionPrior=1 / varPrior;
    double meanPrior=0;
    prior.setNaturalWithMeanPrecision(meanPrior,precisionPrior);
    prior.fixNumericalInstability();
    prior.updateMomentFromNaturalParameters();
  }
  for (  Variable localVar : this.localHiddenVars) {
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double mean=meanStart;
    double var=1;
    normal.getNaturalParameters().set(0,mean / (var));
    normal.getNaturalParameters().set(1,-1 / (2 * var));
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  return bayesianNetwork;
}","@Override public EF_LearningBayesianNetwork initModel(EF_LearningBayesianNetwork bayesianNetwork,PlateuStructure plateuStructure){
  for (  Variable paramVariable : bayesianNetwork.getParametersVariables().getListOfParamaterVariables()) {
    if (!paramVariable.isNormalParameter())     continue;
    EF_NormalParameter prior=bayesianNetwork.getDistribution(paramVariable);
    double varPrior=1;
    double precisionPrior=1 / varPrior;
    double meanPrior=0;
    prior.setNaturalWithMeanPrecision(meanPrior,precisionPrior);
    prior.fixNumericalInstability();
    prior.updateMomentFromNaturalParameters();
  }
  for (  Variable localVar : this.localHiddenVars) {
    EF_Normal normal=bayesianNetwork.getDistribution(localVar);
    double mean=meanStart;
    double var=1;
    normal.setNaturalWithMeanPrecision(mean,1 / var);
    normal.fixNumericalInstability();
    normal.updateMomentFromNaturalParameters();
  }
  return bayesianNetwork;
}",0.9364754098360656
21292,"@Override public void open(Configuration parameters) throws Exception {
  super.open(parameters);
  String bnName=parameters.getString(eu.amidst.flinklink.core.learning.parametric.ParallelVB.BN_NAME,""String_Node_Str"");
  svb=Serialization.deserializeObject(parameters.getBytes(eu.amidst.flinklink.core.learning.parametric.ParallelVB.SVB,null));
  Collection<CompoundVector> collection=getRuntimeContext().getBroadcastVariable(""String_Node_Str"" + bnName);
  CompoundVector updatedPrior=collection.iterator().next();
  svb.updateNaturalParameterPrior(updatedPrior);
  List<String> names=Serialization.deserializeObject(parameters.getBytes(LATENT_INTERFACE_VARIABLE_NAMES,null));
  latentInterfaceVariables=names.stream().map(name -> svb.getDAG().getVariables().getVariableByName(name)).collect(Collectors.toList());
  elbo=getIterationRuntimeContext().getIterationAggregator(""String_Node_Str"" + bnName);
}","@Override public void open(Configuration parameters) throws Exception {
  super.open(parameters);
  String bnName=parameters.getString(eu.amidst.flinklink.core.learning.parametric.ParallelVB.BN_NAME,""String_Node_Str"");
  svb=Serialization.deserializeObject(parameters.getBytes(eu.amidst.flinklink.core.learning.parametric.ParallelVB.SVB,null));
  svb.initLearning();
  Collection<CompoundVector> collection=getRuntimeContext().getBroadcastVariable(""String_Node_Str"" + bnName);
  CompoundVector updatedPrior=collection.iterator().next();
  svb.updateNaturalParameterPrior(updatedPrior);
  List<String> names=Serialization.deserializeObject(parameters.getBytes(LATENT_INTERFACE_VARIABLE_NAMES,null));
  latentInterfaceVariables=names.stream().map(name -> svb.getDAG().getVariables().getVariableByName(name)).collect(Collectors.toList());
  elbo=getIterationRuntimeContext().getIterationAggregator(""String_Node_Str"" + bnName);
}",0.9879649890590808
21293,"public void updateModel(DataFlink<DataInstance> dataUpdate){
  try {
    final ExecutionEnvironment env=dataUpdate.getDataSet().getExecutionEnvironment();
    CompoundVector parameterPrior=this.svb.getNaturalParameterPrior();
    DataSet<CompoundVector> paramSet=env.fromElements(parameterPrior);
    ConvergenceELBO convergenceELBO=new ConvergenceELBO(this.globalThreshold);
    IterativeDataSet<CompoundVector> loop=paramSet.iterate(maximumGlobalIterations).registerAggregationConvergenceCriterion(""String_Node_Str"" + this.dag.getName(),new DoubleSumAggregator(),convergenceELBO);
    Configuration config=new Configuration();
    config.setString(ParameterLearningAlgorithm.BN_NAME,this.dag.getName());
    config.setBytes(SVB,Serialization.serializeObject(svb));
    DataOnMemory<DataInstance> emtpyBatch=new DataOnMemoryListContainer<DataInstance>(dataUpdate.getAttributes());
    DataSet<DataOnMemory<DataInstance>> unionData=dataUpdate.getBatchedDataSet(this.batchSize).union(env.fromCollection(Arrays.asList(emtpyBatch),TypeExtractor.getForClass((Class<DataOnMemory<DataInstance>>)Class.forName(""String_Node_Str""))));
    DataSet<CompoundVector> newparamSet=unionData.map(new ParallelVBMap()).withParameters(config).withBroadcastSet(loop,""String_Node_Str"" + this.dag.getName()).reduce(new ParallelVBReduce());
    DataSet<CompoundVector> finlparamSet=loop.closeWith(newparamSet);
    parameterPrior.sum(finlparamSet.collect().get(0));
    this.svb.updateNaturalParameterPrior(parameterPrior);
    this.globalELBO=convergenceELBO.getELBO();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
}","public void updateModel(DataFlink<DataInstance> dataUpdate){
  final ExecutionEnvironment env=dataUpdate.getDataSet().getExecutionEnvironment();
  CompoundVector parameterPrior=this.svb.getNaturalParameterPrior();
  DataSet<CompoundVector> paramSet=env.fromElements(parameterPrior);
  ConvergenceELBO convergenceELBO=new ConvergenceELBO(this.globalThreshold);
  IterativeDataSet<CompoundVector> loop=paramSet.iterate(maximumGlobalIterations).registerAggregationConvergenceCriterion(""String_Node_Str"" + this.dag.getName(),new DoubleSumAggregator(),convergenceELBO);
  Configuration config=new Configuration();
  config.setString(ParameterLearningAlgorithm.BN_NAME,this.dag.getName());
  config.setBytes(SVB,Serialization.serializeObject(svb));
  DataOnMemory<DataInstance> emtpyBatch=new DataOnMemoryListContainer<DataInstance>(dataUpdate.getAttributes());
  DataSet<DataOnMemory<DataInstance>> unionData=null;
  try {
    unionData=dataUpdate.getBatchedDataSet(this.batchSize).union(env.fromCollection(Arrays.asList(emtpyBatch),TypeExtractor.getForClass((Class<DataOnMemory<DataInstance>>)Class.forName(""String_Node_Str""))));
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
  DataSet<CompoundVector> newparamSet=unionData.map(new ParallelVBMap()).withParameters(config).withBroadcastSet(loop,""String_Node_Str"" + this.dag.getName()).reduce(new ParallelVBReduce());
  DataSet<CompoundVector> finlparamSet=loop.closeWith(newparamSet);
  try {
    parameterPrior.sum(finlparamSet.collect().get(0));
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
  this.svb.updateNaturalParameterPrior(parameterPrior);
  this.globalELBO=((ConvergenceELBO)loop.getAggregators().getConvergenceCriterion()).getELBO();
}",0.8922895821071218
21294,"@Override public void open(Configuration parameters) throws Exception {
  super.open(parameters);
  svb=Serialization.deserializeObject(parameters.getBytes(SVB,null));
  latentVariables=Serialization.deserializeObject(parameters.getBytes(LATENT_VARS,null));
}","@Override public void open(Configuration parameters) throws Exception {
  super.open(parameters);
  svb=Serialization.deserializeObject(parameters.getBytes(SVB,null));
  svb.initLearning();
  latentVariables=Serialization.deserializeObject(parameters.getBytes(LATENT_VARS,null));
}",0.9592592592592591
21295,"public void testingMLParallelWaste() throws Exception {
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  BayesianNetwork asianet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(asianet.toString());
  eu.amidst.flinklink.core.utils.BayesianNetworkSampler sampler=new eu.amidst.flinklink.core.utils.BayesianNetworkSampler(asianet);
  sampler.setSeed(0);
  DataFlink<DataInstance> data=sampler.sampleToDataFlink(10000);
  DataFlinkWriter.writeDataToARFFFolder(data,""String_Node_Str"");
  DataFlink<DataInstance> dataFlink=DataFlinkLoader.loadDataFromFolder(env,""String_Node_Str"",false);
  ParallelVB parallelVB=new ParallelVB();
  parallelVB.setMaximumGlobalIterations(10);
  parallelVB.setSeed(5);
  parallelVB.setBatchSize(100);
  VMP vmp=parallelVB.getSVB().getPlateuStructure().getVMP();
  vmp.setOutput(true);
  vmp.setTestELBO(true);
  vmp.setMaxIter(100);
  vmp.setThreshold(0.0001);
  parallelVB.setDAG(asianet.getDAG());
  parallelVB.setDataFlink(dataFlink);
  parallelVB.runLearning();
  BayesianNetwork bnet=parallelVB.getLearntBayesianNetwork();
  for (  Variable var : asianet.getVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + asianet.getConditionalDistribution(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistribution(var));
    Assert.assertTrue(bnet.getConditionalDistribution(var).equalDist(asianet.getConditionalDistribution(var),0.4));
  }
  Assert.assertTrue(bnet.equalBNs(asianet,0.4));
}","public void testingMLParallelWaste() throws Exception {
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  BayesianNetwork asianet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(asianet.toString());
  eu.amidst.flinklink.core.utils.BayesianNetworkSampler sampler=new eu.amidst.flinklink.core.utils.BayesianNetworkSampler(asianet);
  sampler.setSeed(0);
  DataFlink<DataInstance> data=sampler.sampleToDataFlink(10000);
  DataFlinkWriter.writeDataToARFFFolder(data,""String_Node_Str"");
  DataFlink<DataInstance> dataFlink=DataFlinkLoader.loadDataFromFolder(env,""String_Node_Str"",false);
  ParallelVB parallelVB=new ParallelVB();
  parallelVB.setMaximumGlobalIterations(10);
  parallelVB.setSeed(5);
  parallelVB.setBatchSize(1000);
  VMP vmp=parallelVB.getSVB().getPlateuStructure().getVMP();
  vmp.setOutput(true);
  vmp.setTestELBO(true);
  vmp.setMaxIter(100);
  vmp.setThreshold(0.0001);
  parallelVB.setDAG(asianet.getDAG());
  parallelVB.setDataFlink(dataFlink);
  parallelVB.runLearning();
  BayesianNetwork bnet=parallelVB.getLearntBayesianNetwork();
  for (  Variable var : asianet.getVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + asianet.getConditionalDistribution(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistribution(var));
    Assert.assertTrue(bnet.getConditionalDistribution(var).equalDist(asianet.getConditionalDistribution(var),0.4));
  }
  Assert.assertTrue(bnet.equalBNs(asianet,0.4));
}",0.9996920234062212
21296,"/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  CompoundVector vectorSS=this.createEmtpyCompoundVector();
  double[] Xarray={0.0};
  double[] Yarray=this.parents.stream().mapToDouble(w -> 0.0).toArray();
  RealVector XYRealVector=new ArrayRealVector(Xarray,Yarray);
  vectorSS.setXYbaseVector(XYRealVector);
  RealMatrix covRealmatrix=new Array2DRowRealMatrix(Yarray.length + 1,Yarray.length + 1);
  covRealmatrix=covRealmatrix.scalarAdd(1.0);
  vectorSS.setcovbaseVector(covRealmatrix);
  return vectorSS;
}","/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  CompoundVector vectorSS=this.createEmtpyCompoundVector();
  double[] Xarray={0.0};
  double[] Yarray=this.parents.stream().mapToDouble(w -> 0.0).toArray();
  RealVector XYRealVector=new ArrayRealVector(Xarray,Yarray);
  vectorSS.setXYbaseVector(XYRealVector);
  RealMatrix covRealmatrix=new Array2DRowRealMatrix(Yarray.length + 1,Yarray.length + 1);
  Random rand=new Random(0);
  for (int i=0; i < Yarray.length + 1; i++) {
    for (int j=0; j < Yarray.length + 1; j++) {
      covRealmatrix.addToEntry(i,j,rand.nextDouble() + 0.01);
    }
  }
  vectorSS.setcovbaseVector(covRealmatrix);
  return vectorSS;
}",0.8384554767533491
21297,"public static DataFlink<DynamicDataInstance> loadDynamicDataFromFolder(ExecutionEnvironment env,String pathFileData,boolean normalize) throws FileNotFoundException {
  return DataFlinkConverter.convertToDynamic(loadDataFromFile(env,pathFileData,normalize));
}","public static DataFlink<DynamicDataInstance> loadDynamicDataFromFolder(ExecutionEnvironment env,String pathFileData,boolean normalize) throws FileNotFoundException {
  return DataFlinkConverter.convertToDynamic(loadDataFromFolder(env,pathFileData,normalize));
}",0.9846153846153848
21298,"public void setAttribute(Attribute att){
  this.attribute=att;
}","public void setAttribute(Attribute att){
  this.attribute=att;
  if (att != null)   this.observable=true;
 else   this.observable=false;
}",0.6336633663366337
21299,"public void setAttribute(Attribute attribute){
  this.attribute=attribute;
}","public void setAttribute(Attribute attribute){
  this.attribute=attribute;
  if (attribute != null)   this.observable=true;
 else   this.observable=false;
}",0.6551724137931034
21300,"@Override public void initLearning(){
  this.noLatentVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().filter(p -> p.getMainVar().isObservable()).map(p -> p.getMainVar().getName()).collect(Collectors.toList());
  this.latentVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().flatMap(p -> p.getParents().stream()).filter(v -> v.isInterfaceVariable()).map(v -> this.dynamicDAG.getDynamicVariables().getVariableFromInterface(v)).map(v -> v.getName()).collect(Collectors.toList());
  this.latentInterfaceVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().flatMap(p -> p.getParents().stream()).filter(v -> v.isInterfaceVariable()).map(v -> v.getName()).collect(Collectors.toList());
  this.parallelVBTime0=new eu.amidst.flinklink.core.learning.parametric.ParallelVB();
  this.parallelVBTime0.setPlateuStructure(Serialization.deepCopy(plateuStructure));
  this.parallelVBTime0.setTransitionMethod(Serialization.deepCopy(transitionMethod));
  this.parallelVBTime0.getSVB().getPlateuStructure().getVMP().setMaxIter(1000);
  this.parallelVBTime0.setBatchSize(this.batchSize);
  this.parallelVBTime0.setGlobalThreshold(this.globalThreshold);
  this.parallelVBTime0.setMaximumGlobalIterations(this.maximumGlobalIterations);
  this.parallelVBTime0.setOutput(this.output);
  this.parallelVBTime0.setSeed(this.seed);
  this.parallelVBTime0.setDAG(this.dagTime0);
  this.parallelVBTime0.initLearning();
  this.svbTimeT=new SVB();
  this.svbTimeT.setPlateuStructure(Serialization.deepCopy(plateuStructure));
  this.svbTimeT.setTransitionMethod(Serialization.deepCopy(transitionMethod));
  this.svbTimeT.getPlateuStructure().getVMP().setMaxIter(1000);
  this.svbTimeT.setWindowsSize(this.batchSize);
  this.svbTimeT.setOutput(this.output);
  this.svbTimeT.setSeed(this.seed);
  this.svbTimeT.setDAG(this.dagTimeT);
  this.svbTimeT.initLearning();
}","@Override public void initLearning(){
  this.noLatentVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().filter(p -> p.getMainVar().isObservable()).map(p -> p.getMainVar().getName()).collect(Collectors.toList());
  this.latentVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().flatMap(p -> p.getParents().stream()).filter(v -> v.isInterfaceVariable()).map(v -> this.dynamicDAG.getDynamicVariables().getVariableFromInterface(v)).map(v -> v.getName()).collect(Collectors.toList());
  this.latentInterfaceVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().flatMap(p -> p.getParents().stream()).filter(v -> v.isInterfaceVariable()).map(v -> v.getName()).collect(Collectors.toList());
  this.parallelVBTime0=new eu.amidst.flinklink.core.learning.parametric.ParallelVB();
  this.parallelVBTime0.setPlateuStructure(Serialization.deepCopy(plateuStructure));
  if (transitionMethod != null)   this.parallelVBTime0.setTransitionMethod(Serialization.deepCopy(transitionMethod));
  this.parallelVBTime0.getSVB().getPlateuStructure().getVMP().setMaxIter(1000);
  this.parallelVBTime0.setBatchSize(this.batchSize);
  this.parallelVBTime0.setGlobalThreshold(this.globalThreshold);
  this.parallelVBTime0.setMaximumGlobalIterations(this.maximumGlobalIterations);
  this.parallelVBTime0.setOutput(this.output);
  this.parallelVBTime0.setSeed(this.seed);
  this.parallelVBTime0.setDAG(this.dagTime0);
  this.parallelVBTime0.initLearning();
  this.svbTimeT=new SVB();
  if (transitionMethod != null)   this.svbTimeT.setPlateuStructure(Serialization.deepCopy(plateuStructure));
  this.svbTimeT.setTransitionMethod(Serialization.deepCopy(transitionMethod));
  this.svbTimeT.getPlateuStructure().getVMP().setMaxIter(1000);
  this.svbTimeT.setWindowsSize(this.batchSize);
  this.svbTimeT.setOutput(this.output);
  this.svbTimeT.setSeed(this.seed);
  this.svbTimeT.setDAG(this.dagTimeT);
  this.svbTimeT.initLearning();
}",0.9831045406546992
21301,"/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  CompoundVector vectorSS=this.createEmtpyCompoundVector();
  double[] Xarray={0.0};
  double[] Yarray=this.parents.stream().mapToDouble(w -> 0.0).toArray();
  RealVector XYRealVector=new ArrayRealVector(Xarray,Yarray);
  vectorSS.setXYbaseVector(XYRealVector);
  RealMatrix covRealmatrix=new Array2DRowRealMatrix(Yarray.length + 1,Yarray.length + 1);
  covRealmatrix=covRealmatrix.scalarAdd(1.0);
  vectorSS.setcovbaseVector(covRealmatrix);
  return vectorSS;
}","/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  CompoundVector vectorSS=this.createEmtpyCompoundVector();
  double[] Xarray={0.0};
  double[] Yarray=this.parents.stream().mapToDouble(w -> 0.0).toArray();
  RealVector XYRealVector=new ArrayRealVector(Xarray,Yarray);
  vectorSS.setXYbaseVector(XYRealVector);
  RealMatrix covRealmatrix=new Array2DRowRealMatrix(Yarray.length + 1,Yarray.length + 1);
  Random rand=new Random(0);
  for (int i=0; i < Yarray.length + 1; i++) {
    for (int j=0; j < Yarray.length + 1; j++) {
      covRealmatrix.addToEntry(i,j,rand.nextDouble() + 0.01);
    }
  }
  vectorSS.setcovbaseVector(covRealmatrix);
  return vectorSS;
}",0.8384554767533491
21302,"public static DataFlink<DynamicDataInstance> loadDynamicDataFromFolder(ExecutionEnvironment env,String pathFileData,boolean normalize) throws FileNotFoundException {
  return DataFlinkConverter.convertToDynamic(loadDataFromFile(env,pathFileData,normalize));
}","public static DataFlink<DynamicDataInstance> loadDynamicDataFromFolder(ExecutionEnvironment env,String pathFileData,boolean normalize) throws FileNotFoundException {
  return DataFlinkConverter.convertToDynamic(loadDataFromFolder(env,pathFileData,normalize));
}",0.9846153846153848
21303,"@Override public void open(Configuration parameters) throws Exception {
  super.open(parameters);
  String bnName=parameters.getString(eu.amidst.flinklink.core.learning.parametric.ParallelVB.BN_NAME,""String_Node_Str"");
  svb=Serialization.deserializeObject(parameters.getBytes(eu.amidst.flinklink.core.learning.parametric.ParallelVB.SVB,null));
  Collection<CompoundVector> collection=getRuntimeContext().getBroadcastVariable(""String_Node_Str"" + bnName);
  CompoundVector updatedPrior=collection.iterator().next();
  svb.updateNaturalParameterPrior(updatedPrior);
  List<String> names=Serialization.deserializeObject(parameters.getBytes(LATENT_INTERFACE_VARIABLE_NAMES,null));
  latentInterfaceVariables=names.stream().map(name -> svb.getDAG().getVariables().getVariableByName(name)).collect(Collectors.toList());
  elbo=getIterationRuntimeContext().getIterationAggregator(""String_Node_Str"" + bnName);
}","@Override public void open(Configuration parameters) throws Exception {
  super.open(parameters);
  String bnName=parameters.getString(eu.amidst.flinklink.core.learning.parametric.ParallelVB.BN_NAME,""String_Node_Str"");
  svb=Serialization.deserializeObject(parameters.getBytes(eu.amidst.flinklink.core.learning.parametric.ParallelVB.SVB,null));
  svb.initLearning();
  Collection<CompoundVector> collection=getRuntimeContext().getBroadcastVariable(""String_Node_Str"" + bnName);
  CompoundVector updatedPrior=collection.iterator().next();
  svb.updateNaturalParameterPrior(updatedPrior);
  List<String> names=Serialization.deserializeObject(parameters.getBytes(LATENT_INTERFACE_VARIABLE_NAMES,null));
  latentInterfaceVariables=names.stream().map(name -> svb.getDAG().getVariables().getVariableByName(name)).collect(Collectors.toList());
  elbo=getIterationRuntimeContext().getIterationAggregator(""String_Node_Str"" + bnName);
}",0.9879649890590808
21304,"public void updateModel(DataFlink<DataInstance> dataUpdate){
  try {
    final ExecutionEnvironment env=dataUpdate.getDataSet().getExecutionEnvironment();
    CompoundVector parameterPrior=this.svb.getNaturalParameterPrior();
    DataSet<CompoundVector> paramSet=env.fromElements(parameterPrior);
    ConvergenceELBO convergenceELBO=new ConvergenceELBO(this.globalThreshold);
    IterativeDataSet<CompoundVector> loop=paramSet.iterate(maximumGlobalIterations).registerAggregationConvergenceCriterion(""String_Node_Str"" + this.dag.getName(),new DoubleSumAggregator(),convergenceELBO);
    Configuration config=new Configuration();
    config.setString(ParameterLearningAlgorithm.BN_NAME,this.dag.getName());
    config.setBytes(SVB,Serialization.serializeObject(svb));
    DataOnMemory<DataInstance> emtpyBatch=new DataOnMemoryListContainer<DataInstance>(dataUpdate.getAttributes());
    DataSet<DataOnMemory<DataInstance>> unionData=dataUpdate.getBatchedDataSet(this.batchSize).union(env.fromCollection(Arrays.asList(emtpyBatch),TypeExtractor.getForClass((Class<DataOnMemory<DataInstance>>)Class.forName(""String_Node_Str""))));
    DataSet<CompoundVector> newparamSet=unionData.map(new ParallelVBMap()).withParameters(config).withBroadcastSet(loop,""String_Node_Str"" + this.dag.getName()).reduce(new ParallelVBReduce());
    DataSet<CompoundVector> finlparamSet=loop.closeWith(newparamSet);
    parameterPrior.sum(finlparamSet.collect().get(0));
    this.svb.updateNaturalParameterPrior(parameterPrior);
    this.globalELBO=convergenceELBO.getELBO();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
}","public void updateModel(DataFlink<DataInstance> dataUpdate){
  final ExecutionEnvironment env=dataUpdate.getDataSet().getExecutionEnvironment();
  CompoundVector parameterPrior=this.svb.getNaturalParameterPrior();
  DataSet<CompoundVector> paramSet=env.fromElements(parameterPrior);
  ConvergenceELBO convergenceELBO=new ConvergenceELBO(this.globalThreshold);
  IterativeDataSet<CompoundVector> loop=paramSet.iterate(maximumGlobalIterations).registerAggregationConvergenceCriterion(""String_Node_Str"" + this.dag.getName(),new DoubleSumAggregator(),convergenceELBO);
  Configuration config=new Configuration();
  config.setString(ParameterLearningAlgorithm.BN_NAME,this.dag.getName());
  config.setBytes(SVB,Serialization.serializeObject(svb));
  DataOnMemory<DataInstance> emtpyBatch=new DataOnMemoryListContainer<DataInstance>(dataUpdate.getAttributes());
  DataSet<DataOnMemory<DataInstance>> unionData=null;
  try {
    unionData=dataUpdate.getBatchedDataSet(this.batchSize).union(env.fromCollection(Arrays.asList(emtpyBatch),TypeExtractor.getForClass((Class<DataOnMemory<DataInstance>>)Class.forName(""String_Node_Str""))));
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
  DataSet<CompoundVector> newparamSet=unionData.map(new ParallelVBMap()).withParameters(config).withBroadcastSet(loop,""String_Node_Str"" + this.dag.getName()).reduce(new ParallelVBReduce());
  DataSet<CompoundVector> finlparamSet=loop.closeWith(newparamSet);
  try {
    parameterPrior.sum(finlparamSet.collect().get(0));
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex.getMessage());
  }
  this.svb.updateNaturalParameterPrior(parameterPrior);
  this.globalELBO=((ConvergenceELBO)loop.getAggregators().getConvergenceCriterion()).getELBO();
}",0.8922895821071218
21305,"@Override public void open(Configuration parameters) throws Exception {
  super.open(parameters);
  svb=Serialization.deserializeObject(parameters.getBytes(SVB,null));
  latentVariables=Serialization.deserializeObject(parameters.getBytes(LATENT_VARS,null));
}","@Override public void open(Configuration parameters) throws Exception {
  super.open(parameters);
  svb=Serialization.deserializeObject(parameters.getBytes(SVB,null));
  svb.initLearning();
  latentVariables=Serialization.deserializeObject(parameters.getBytes(LATENT_VARS,null));
}",0.9592592592592591
21306,"public void testingMLParallelWaste() throws Exception {
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  BayesianNetwork asianet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(asianet.toString());
  eu.amidst.flinklink.core.utils.BayesianNetworkSampler sampler=new eu.amidst.flinklink.core.utils.BayesianNetworkSampler(asianet);
  sampler.setSeed(0);
  DataFlink<DataInstance> data=sampler.sampleToDataFlink(10000);
  DataFlinkWriter.writeDataToARFFFolder(data,""String_Node_Str"");
  DataFlink<DataInstance> dataFlink=DataFlinkLoader.loadDataFromFolder(env,""String_Node_Str"",false);
  ParallelVB parallelVB=new ParallelVB();
  parallelVB.setMaximumGlobalIterations(10);
  parallelVB.setSeed(5);
  parallelVB.setBatchSize(100);
  VMP vmp=parallelVB.getSVB().getPlateuStructure().getVMP();
  vmp.setOutput(true);
  vmp.setTestELBO(true);
  vmp.setMaxIter(100);
  vmp.setThreshold(0.0001);
  parallelVB.setDAG(asianet.getDAG());
  parallelVB.setDataFlink(dataFlink);
  parallelVB.runLearning();
  BayesianNetwork bnet=parallelVB.getLearntBayesianNetwork();
  for (  Variable var : asianet.getVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + asianet.getConditionalDistribution(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistribution(var));
    Assert.assertTrue(bnet.getConditionalDistribution(var).equalDist(asianet.getConditionalDistribution(var),0.4));
  }
  Assert.assertTrue(bnet.equalBNs(asianet,0.4));
}","public void testingMLParallelWaste() throws Exception {
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  BayesianNetwork asianet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(asianet.toString());
  eu.amidst.flinklink.core.utils.BayesianNetworkSampler sampler=new eu.amidst.flinklink.core.utils.BayesianNetworkSampler(asianet);
  sampler.setSeed(0);
  DataFlink<DataInstance> data=sampler.sampleToDataFlink(10000);
  DataFlinkWriter.writeDataToARFFFolder(data,""String_Node_Str"");
  DataFlink<DataInstance> dataFlink=DataFlinkLoader.loadDataFromFolder(env,""String_Node_Str"",false);
  ParallelVB parallelVB=new ParallelVB();
  parallelVB.setMaximumGlobalIterations(10);
  parallelVB.setSeed(5);
  parallelVB.setBatchSize(1000);
  VMP vmp=parallelVB.getSVB().getPlateuStructure().getVMP();
  vmp.setOutput(true);
  vmp.setTestELBO(true);
  vmp.setMaxIter(100);
  vmp.setThreshold(0.0001);
  parallelVB.setDAG(asianet.getDAG());
  parallelVB.setDataFlink(dataFlink);
  parallelVB.runLearning();
  BayesianNetwork bnet=parallelVB.getLearntBayesianNetwork();
  for (  Variable var : asianet.getVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + asianet.getConditionalDistribution(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistribution(var));
    Assert.assertTrue(bnet.getConditionalDistribution(var).equalDist(asianet.getConditionalDistribution(var),0.4));
  }
  Assert.assertTrue(bnet.equalBNs(asianet,0.4));
}",0.9996920234062212
21307,"public void setAttribute(Attribute attribute){
  this.attribute=attribute;
}","public void setAttribute(Attribute attribute){
  this.attribute=attribute;
  if (attribute != null)   this.observable=true;
 else   this.observable=false;
}",0.6551724137931034
21308,"@Override public void initLearning(){
  this.noLatentVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().filter(p -> p.getMainVar().isObservable()).map(p -> p.getMainVar().getName()).collect(Collectors.toList());
  this.latentVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().flatMap(p -> p.getParents().stream()).filter(v -> v.isInterfaceVariable()).map(v -> this.dynamicDAG.getDynamicVariables().getVariableFromInterface(v)).map(v -> v.getName()).collect(Collectors.toList());
  this.latentInterfaceVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().flatMap(p -> p.getParents().stream()).filter(v -> v.isInterfaceVariable()).map(v -> v.getName()).collect(Collectors.toList());
  this.parallelVBTime0=new eu.amidst.flinklink.core.learning.parametric.ParallelVB();
  this.parallelVBTime0.setPlateuStructure(Serialization.deepCopy(plateuStructure));
  this.parallelVBTime0.setTransitionMethod(Serialization.deepCopy(transitionMethod));
  this.parallelVBTime0.getSVB().getPlateuStructure().getVMP().setMaxIter(1000);
  this.parallelVBTime0.setBatchSize(this.batchSize);
  this.parallelVBTime0.setGlobalThreshold(this.globalThreshold);
  this.parallelVBTime0.setMaximumGlobalIterations(this.maximumGlobalIterations);
  this.parallelVBTime0.setOutput(this.output);
  this.parallelVBTime0.setSeed(this.seed);
  this.parallelVBTime0.setDAG(this.dagTime0);
  this.parallelVBTime0.initLearning();
  this.svbTimeT=new SVB();
  this.svbTimeT.setPlateuStructure(Serialization.deepCopy(plateuStructure));
  this.svbTimeT.setTransitionMethod(Serialization.deepCopy(transitionMethod));
  this.svbTimeT.getPlateuStructure().getVMP().setMaxIter(1000);
  this.svbTimeT.setWindowsSize(this.batchSize);
  this.svbTimeT.setOutput(this.output);
  this.svbTimeT.setSeed(this.seed);
  this.svbTimeT.setDAG(this.dagTimeT);
  this.svbTimeT.initLearning();
}","@Override public void initLearning(){
  this.noLatentVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().filter(p -> p.getMainVar().isObservable()).map(p -> p.getMainVar().getName()).collect(Collectors.toList());
  this.latentVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().flatMap(p -> p.getParents().stream()).filter(v -> v.isInterfaceVariable()).map(v -> this.dynamicDAG.getDynamicVariables().getVariableFromInterface(v)).map(v -> v.getName()).collect(Collectors.toList());
  this.latentInterfaceVariablesNames=this.dynamicDAG.getParentSetsTimeT().stream().flatMap(p -> p.getParents().stream()).filter(v -> v.isInterfaceVariable()).map(v -> v.getName()).collect(Collectors.toList());
  this.parallelVBTime0=new eu.amidst.flinklink.core.learning.parametric.ParallelVB();
  this.parallelVBTime0.setPlateuStructure(Serialization.deepCopy(plateuStructure));
  if (transitionMethod != null)   this.parallelVBTime0.setTransitionMethod(Serialization.deepCopy(transitionMethod));
  this.parallelVBTime0.getSVB().getPlateuStructure().getVMP().setMaxIter(1000);
  this.parallelVBTime0.setBatchSize(this.batchSize);
  this.parallelVBTime0.setGlobalThreshold(this.globalThreshold);
  this.parallelVBTime0.setMaximumGlobalIterations(this.maximumGlobalIterations);
  this.parallelVBTime0.setOutput(this.output);
  this.parallelVBTime0.setSeed(this.seed);
  this.parallelVBTime0.setDAG(this.dagTime0);
  this.parallelVBTime0.initLearning();
  this.svbTimeT=new SVB();
  if (transitionMethod != null)   this.svbTimeT.setPlateuStructure(Serialization.deepCopy(plateuStructure));
  this.svbTimeT.setTransitionMethod(Serialization.deepCopy(transitionMethod));
  this.svbTimeT.getPlateuStructure().getVMP().setMaxIter(1000);
  this.svbTimeT.setWindowsSize(this.batchSize);
  this.svbTimeT.setOutput(this.output);
  this.svbTimeT.setSeed(this.seed);
  this.svbTimeT.setDAG(this.dagTimeT);
  this.svbTimeT.initLearning();
}",0.9831045406546992
21309,"@Override public DataInstance map(String value) throws Exception {
  DataInstance dataInstance=new DataInstanceFromDataRow(new DataRowWeka(attributes,value));
  if (normalize) {
    attributesToNormalize.stream().forEach(att -> dataInstance.setValue(att,(dataInstance.getValue(att) - ((RealStateSpace)att.getStateSpaceType()).getMaxInterval()) / (((RealStateSpace)att.getStateSpaceType()).getMaxInterval() - ((RealStateSpace)att.getStateSpaceType()).getMinInterval())));
  }
  return dataInstance;
}","@Override public DataInstance map(String value) throws Exception {
  DataInstance dataInstance=new DataInstanceFromDataRow(new DataRowWeka(attributes,value));
  if (normalize) {
    attributesToNormalize.stream().forEach(att -> dataInstance.setValue(att,(dataInstance.getValue(att) - ((RealStateSpace)att.getStateSpaceType()).getMinInterval()) / (((RealStateSpace)att.getStateSpaceType()).getMaxInterval() - ((RealStateSpace)att.getStateSpaceType()).getMinInterval())));
  }
  return dataInstance;
}",0.995991983967936
21310,"/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  CompoundVector vectorSS=this.createEmtpyCompoundVector();
  double[] Xarray={0.0};
  double[] Yarray=this.parents.stream().mapToDouble(w -> 0.0).toArray();
  RealVector XYRealVector=new ArrayRealVector(Xarray,Yarray);
  vectorSS.setXYbaseVector(XYRealVector);
  RealMatrix covRealmatrix=new Array2DRowRealMatrix(Yarray.length + 1,Yarray.length + 1);
  covRealmatrix.scalarAdd(1.0);
  vectorSS.setcovbaseVector(covRealmatrix);
  return vectorSS;
}","/** 
 * {@inheritDoc}
 */
@Override public SufficientStatistics createInitSufficientStatistics(){
  CompoundVector vectorSS=this.createEmtpyCompoundVector();
  double[] Xarray={0.0};
  double[] Yarray=this.parents.stream().mapToDouble(w -> 0.0).toArray();
  RealVector XYRealVector=new ArrayRealVector(Xarray,Yarray);
  vectorSS.setXYbaseVector(XYRealVector);
  RealMatrix covRealmatrix=new Array2DRowRealMatrix(Yarray.length + 1,Yarray.length + 1);
  covRealmatrix=covRealmatrix.scalarAdd(1.0);
  vectorSS.setcovbaseVector(covRealmatrix);
  return vectorSS;
}",0.9873417721518988
21311,"/** 
 * Sets the   {@link DAG} of this PlateuStructure. By default,all parameter variables are set as non-replicated and all non-parameter variables are set as replicated.
 * @param dag the {@link DAG} model to be set.
 */
public void setDAG(DAG dag){
  List<EF_ConditionalDistribution> dists=dag.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  ef_learningmodel=new EF_LearningBayesianNetwork(dists,this.nonReplicatedVariablesList);
  this.replicatedVariables=new HashMap<>();
  this.ef_learningmodel.getListOfParametersVariables().stream().forEach(var -> this.replicatedVariables.put(var,false));
  this.ef_learningmodel.getListOfNonParameterVariables().stream().forEach(var -> this.replicatedVariables.put(var,true));
  this.nonReplicatedVariablesList.stream().forEach(var -> this.replicatedVariables.put(var,false));
}","/** 
 * Sets the   {@link DAG} of this PlateuStructure. By default,all parameter variables are set as non-replicated and all non-parameter variables are set as replicated.
 * @param dag the {@link DAG} model to be set.
 */
public void setDAG(DAG dag){
  List<EF_ConditionalDistribution> dists=dag.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  ef_learningmodel=new EF_LearningBayesianNetwork(dists,this.initialNonReplicatedVariablesList);
  this.replicatedVariables=new HashMap<>();
  this.ef_learningmodel.getListOfParametersVariables().stream().forEach(var -> this.replicatedVariables.put(var,false));
  this.ef_learningmodel.getListOfNonParameterVariables().stream().forEach(var -> this.replicatedVariables.put(var,true));
  this.initialNonReplicatedVariablesList.stream().forEach(var -> this.replicatedVariables.put(var,false));
  this.nonReplicatedVariablesList=this.replicatedVariables.entrySet().stream().filter(entry -> !entry.getValue()).map(entry -> entry.getKey()).sorted((a,b) -> a.getVarID() - b.getVarID()).collect(Collectors.toList());
}",0.8902325581395348
21312,"/** 
 * Builder which initially specify a list of non-replicated variables.
 * @param nonReplicatedVariablesList
 */
public PlateuStructure(List<Variable> nonReplicatedVariablesList){
  this.nonReplicatedVariablesList=new ArrayList<>();
  this.nonReplicatedVariablesList.addAll(nonReplicatedVariablesList);
}","/** 
 * Builder which initially specify a list of non-replicated variables.
 * @param initialNonReplicatedVariablesList
 */
public PlateuStructure(List<Variable> initialNonReplicatedVariablesList){
  this.initialNonReplicatedVariablesList=new ArrayList<>();
  this.initialNonReplicatedVariablesList.addAll(initialNonReplicatedVariablesList);
}",0.9308755760368664
21313,"public CompoundVector getPlateauNaturalParameterPosterior(){
  List<Vector> naturalPlateauParametersPriors=ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).filter(var -> this.getNodeOfNonReplicatedVar(var).isActive()).map(var -> {
    NaturalParameters parameter=this.getNodeOfNonReplicatedVar(var).getQDist().getNaturalParameters();
    NaturalParameters copy=new ArrayVector(parameter.size());
    copy.copy(parameter);
    return copy;
  }
).collect(Collectors.toList());
  return new CompoundVector(naturalPlateauParametersPriors);
}","public CompoundVector getPlateauNaturalParameterPosterior(){
  List<Vector> naturalPlateauParametersPriors=ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).map(var -> {
    NaturalParameters parameter=this.getNodeOfNonReplicatedVar(var).getQDist().getNaturalParameters();
    NaturalParameters copy=new ArrayVector(parameter.size());
    copy.copy(parameter);
    return copy;
  }
).collect(Collectors.toList());
  return new CompoundVector(naturalPlateauParametersPriors);
}",0.8819444444444444
21314,"/** 
 * Returns the list of non replicated Variables
 * @return
 */
public List<Variable> getNonReplicatedVariables(){
  return this.replicatedVariables.entrySet().stream().filter(entry -> !entry.getValue()).map(entry -> entry.getKey()).collect(Collectors.toList());
}","/** 
 * Returns the list of non replicated Variables
 * @return
 */
public List<Variable> getNonReplicatedVariables(){
  return this.nonReplicatedVariablesList;
}",0.7348837209302326
21315,"public Map<Variable,EF_UnivariateDistribution> getPlateauEFUnivariatePriors(){
  Map<Variable,EF_UnivariateDistribution> map=new HashMap<>();
  ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).filter(var -> this.getNodeOfNonReplicatedVar(var).isActive()).forEach(var -> {
    map.put(var,this.ef_learningmodel.getDistribution(var));
  }
);
  return map;
}","public Map<Variable,EF_UnivariateDistribution> getPlateauEFUnivariatePriors(){
  Map<Variable,EF_UnivariateDistribution> map=new HashMap<>();
  ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).forEach(var -> {
    map.put(var,this.ef_learningmodel.getDistribution(var));
  }
);
  return map;
}",0.9213197969543148
21316,"public Map<Variable,EF_UnivariateDistribution> getPlateauEFUnivariatePosteriors(){
  Map<Variable,EF_UnivariateDistribution> map=new HashMap<>();
  ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).filter(var -> this.getNodeOfNonReplicatedVar(var).isActive()).forEach(var -> {
    map.put(var,this.getNodeOfNonReplicatedVar(var).getQDist());
  }
);
  return map;
}","public Map<Variable,EF_UnivariateDistribution> getPlateauEFUnivariatePosteriors(){
  Map<Variable,EF_UnivariateDistribution> map=new HashMap<>();
  ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).forEach(var -> {
    map.put(var,this.getNodeOfNonReplicatedVar(var).getQDist());
  }
);
  return map;
}",0.8631840796019901
21317,"public CompoundVector getPlateauNaturalParameterPrior(){
  List<Vector> naturalPlateauParametersPriors=ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).filter(var -> this.getNodeOfNonReplicatedVar(var).isActive()).map(var -> {
    NaturalParameters parameter=this.ef_learningmodel.getDistribution(var).getNaturalParameters();
    NaturalParameters copy=new ArrayVector(parameter.size());
    copy.copy(parameter);
    return copy;
  }
).collect(Collectors.toList());
  return new CompoundVector(naturalPlateauParametersPriors);
}","public CompoundVector getPlateauNaturalParameterPrior(){
  List<Vector> naturalPlateauParametersPriors=ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).map(var -> {
    NaturalParameters parameter=this.ef_learningmodel.getDistribution(var).getNaturalParameters();
    NaturalParameters copy=new ArrayVector(parameter.size());
    copy.copy(parameter);
    return copy;
  }
).collect(Collectors.toList());
  return new CompoundVector(naturalPlateauParametersPriors);
}",0.9401408450704224
21318,"/** 
 * Sets the   {@link DAG} of this PlateuStructure. By default,all parameter variables are set as non-replicated and all non-parameter variables are set as replicated.
 * @param dag the {@link DAG} model to be set.
 */
public void setDAG(DAG dag){
  List<EF_ConditionalDistribution> dists=dag.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  ef_learningmodel=new EF_LearningBayesianNetwork(dists,this.nonReplicatedVariablesList);
  this.replicatedVariables=new HashMap<>();
  this.ef_learningmodel.getListOfParametersVariables().stream().forEach(var -> this.replicatedVariables.put(var,false));
  this.ef_learningmodel.getListOfNonParameterVariables().stream().forEach(var -> this.replicatedVariables.put(var,true));
  this.nonReplicatedVariablesList.stream().forEach(var -> this.replicatedVariables.put(var,false));
}","/** 
 * Sets the   {@link DAG} of this PlateuStructure. By default,all parameter variables are set as non-replicated and all non-parameter variables are set as replicated.
 * @param dag the {@link DAG} model to be set.
 */
public void setDAG(DAG dag){
  List<EF_ConditionalDistribution> dists=dag.getParentSets().stream().map(pSet -> pSet.getMainVar().getDistributionType().<EF_ConditionalDistribution>newEFConditionalDistribution(pSet.getParents())).collect(Collectors.toList());
  ef_learningmodel=new EF_LearningBayesianNetwork(dists,this.initialNonReplicatedVariablesList);
  this.replicatedVariables=new HashMap<>();
  this.ef_learningmodel.getListOfParametersVariables().stream().forEach(var -> this.replicatedVariables.put(var,false));
  this.ef_learningmodel.getListOfNonParameterVariables().stream().forEach(var -> this.replicatedVariables.put(var,true));
  this.initialNonReplicatedVariablesList.stream().forEach(var -> this.replicatedVariables.put(var,false));
  this.nonReplicatedVariablesList=this.replicatedVariables.entrySet().stream().filter(entry -> !entry.getValue()).map(entry -> entry.getKey()).sorted((a,b) -> a.getVarID() - b.getVarID()).collect(Collectors.toList());
}",0.8902325581395348
21319,"/** 
 * Builder which initially specify a list of non-replicated variables.
 * @param nonReplicatedVariablesList
 */
public PlateuStructure(List<Variable> nonReplicatedVariablesList){
  this.nonReplicatedVariablesList=new ArrayList<>();
  this.nonReplicatedVariablesList.addAll(nonReplicatedVariablesList);
}","/** 
 * Builder which initially specify a list of non-replicated variables.
 * @param initialNonReplicatedVariablesList
 */
public PlateuStructure(List<Variable> initialNonReplicatedVariablesList){
  this.initialNonReplicatedVariablesList=new ArrayList<>();
  this.initialNonReplicatedVariablesList.addAll(initialNonReplicatedVariablesList);
}",0.9308755760368664
21320,"public CompoundVector getPlateauNaturalParameterPosterior(){
  List<Vector> naturalPlateauParametersPriors=ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).filter(var -> this.getNodeOfNonReplicatedVar(var).isActive()).map(var -> {
    NaturalParameters parameter=this.getNodeOfNonReplicatedVar(var).getQDist().getNaturalParameters();
    NaturalParameters copy=new ArrayVector(parameter.size());
    copy.copy(parameter);
    return copy;
  }
).collect(Collectors.toList());
  return new CompoundVector(naturalPlateauParametersPriors);
}","public CompoundVector getPlateauNaturalParameterPosterior(){
  List<Vector> naturalPlateauParametersPriors=ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).map(var -> {
    NaturalParameters parameter=this.getNodeOfNonReplicatedVar(var).getQDist().getNaturalParameters();
    NaturalParameters copy=new ArrayVector(parameter.size());
    copy.copy(parameter);
    return copy;
  }
).collect(Collectors.toList());
  return new CompoundVector(naturalPlateauParametersPriors);
}",0.8819444444444444
21321,"/** 
 * Returns the list of non replicated Variables
 * @return
 */
public List<Variable> getNonReplicatedVariables(){
  return this.replicatedVariables.entrySet().stream().filter(entry -> !entry.getValue()).map(entry -> entry.getKey()).collect(Collectors.toList());
}","/** 
 * Returns the list of non replicated Variables
 * @return
 */
public List<Variable> getNonReplicatedVariables(){
  return this.nonReplicatedVariablesList;
}",0.7348837209302326
21322,"public Map<Variable,EF_UnivariateDistribution> getPlateauEFUnivariatePriors(){
  Map<Variable,EF_UnivariateDistribution> map=new HashMap<>();
  ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).filter(var -> this.getNodeOfNonReplicatedVar(var).isActive()).forEach(var -> {
    map.put(var,this.ef_learningmodel.getDistribution(var));
  }
);
  return map;
}","public Map<Variable,EF_UnivariateDistribution> getPlateauEFUnivariatePriors(){
  Map<Variable,EF_UnivariateDistribution> map=new HashMap<>();
  ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).forEach(var -> {
    map.put(var,this.ef_learningmodel.getDistribution(var));
  }
);
  return map;
}",0.9213197969543148
21323,"public Map<Variable,EF_UnivariateDistribution> getPlateauEFUnivariatePosteriors(){
  Map<Variable,EF_UnivariateDistribution> map=new HashMap<>();
  ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).filter(var -> this.getNodeOfNonReplicatedVar(var).isActive()).forEach(var -> {
    map.put(var,this.getNodeOfNonReplicatedVar(var).getQDist());
  }
);
  return map;
}","public Map<Variable,EF_UnivariateDistribution> getPlateauEFUnivariatePosteriors(){
  Map<Variable,EF_UnivariateDistribution> map=new HashMap<>();
  ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).forEach(var -> {
    map.put(var,this.getNodeOfNonReplicatedVar(var).getQDist());
  }
);
  return map;
}",0.8631840796019901
21324,"public CompoundVector getPlateauNaturalParameterPrior(){
  List<Vector> naturalPlateauParametersPriors=ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).filter(var -> this.getNodeOfNonReplicatedVar(var).isActive()).map(var -> {
    NaturalParameters parameter=this.ef_learningmodel.getDistribution(var).getNaturalParameters();
    NaturalParameters copy=new ArrayVector(parameter.size());
    copy.copy(parameter);
    return copy;
  }
).collect(Collectors.toList());
  return new CompoundVector(naturalPlateauParametersPriors);
}","public CompoundVector getPlateauNaturalParameterPrior(){
  List<Vector> naturalPlateauParametersPriors=ef_learningmodel.getDistributionList().stream().map(dist -> dist.getVariable()).filter(var -> isNonReplicatedVar(var)).map(var -> {
    NaturalParameters parameter=this.ef_learningmodel.getDistribution(var).getNaturalParameters();
    NaturalParameters copy=new ArrayVector(parameter.size());
    copy.copy(parameter);
    return copy;
  }
).collect(Collectors.toList());
  return new CompoundVector(naturalPlateauParametersPriors);
}",0.9401408450704224
21325,"private void moveNodeQDist(InferenceAlgorithm InfAlgfrom,InferenceAlgorithm InfAlgto,Variable var){
  Variable temporalClone=this.model.getDynamicVariables().getInterfaceVariable(var);
  Variable staticTemporalClone=InfAlgto.getOriginalModel().getVariables().getVariableByName(temporalClone.getName());
  UnivariateDistribution posteriorDist=InfAlgfrom.getPosterior(var).deepCopy(staticTemporalClone);
  InfAlgto.getOriginalModel().setConditionalDistribution(staticTemporalClone,posteriorDist);
  InfAlgto.setModel(InfAlgto.getOriginalModel());
}","private void moveNodeQDist(InferenceAlgorithm InfAlgfrom,InferenceAlgorithm InfAlgto,Variable var){
  Variable temporalClone=this.model.getDynamicVariables().getInterfaceVariable(var);
  Variable staticTemporalClone=InfAlgto.getOriginalModel().getVariables().getVariableByName(temporalClone.getName());
  Variable staticVar=InfAlgfrom.getOriginalModel().getVariables().getVariableByName(var.getName());
  UnivariateDistribution posteriorDist=InfAlgfrom.getPosterior(staticVar).deepCopy(staticTemporalClone);
  InfAlgto.getOriginalModel().setConditionalDistribution(staticTemporalClone,posteriorDist);
  InfAlgto.setModel(InfAlgto.getOriginalModel());
}",0.9098497495826378
21326,"@Override public <E extends UnivariateDistribution>E getFilteredPosterior(Variable var){
  return (getTimeIDOfPosterior() == 0) ? this.infAlgTime0.getPosterior(var) : this.infAlgTimeT.getPosterior(var);
}","@Override public <E extends UnivariateDistribution>E getFilteredPosterior(Variable var){
  if (getTimeIDOfPosterior() == 0) {
    Variable staticVar=this.infAlgTime0.getOriginalModel().getVariables().getVariableByName(var.getName());
    return this.infAlgTime0.getPosterior(staticVar);
  }
 else {
    Variable staticVar=this.infAlgTimeT.getOriginalModel().getVariables().getVariableByName(var.getName());
    return this.infAlgTimeT.getPosterior(staticVar);
  }
}",0.5739910313901345
21327,"private void moveNodeQDist(InferenceAlgorithm InfAlgfrom,InferenceAlgorithm InfAlgto,Variable var){
  Variable temporalClone=this.model.getDynamicVariables().getInterfaceVariable(var);
  Variable staticTemporalClone=InfAlgto.getOriginalModel().getVariables().getVariableByName(temporalClone.getName());
  UnivariateDistribution posteriorDist=InfAlgfrom.getPosterior(var).deepCopy(staticTemporalClone);
  InfAlgto.getOriginalModel().setConditionalDistribution(staticTemporalClone,posteriorDist);
  InfAlgto.setModel(InfAlgto.getOriginalModel());
}","private void moveNodeQDist(InferenceAlgorithm InfAlgfrom,InferenceAlgorithm InfAlgto,Variable var){
  Variable temporalClone=this.model.getDynamicVariables().getInterfaceVariable(var);
  Variable staticTemporalClone=InfAlgto.getOriginalModel().getVariables().getVariableByName(temporalClone.getName());
  Variable staticVar=InfAlgfrom.getOriginalModel().getVariables().getVariableByName(var.getName());
  UnivariateDistribution posteriorDist=InfAlgfrom.getPosterior(staticVar).deepCopy(staticTemporalClone);
  InfAlgto.getOriginalModel().setConditionalDistribution(staticTemporalClone,posteriorDist);
  InfAlgto.setModel(InfAlgto.getOriginalModel());
}",0.9098497495826378
21328,"@Override public <E extends UnivariateDistribution>E getFilteredPosterior(Variable var){
  return (getTimeIDOfPosterior() == 0) ? this.infAlgTime0.getPosterior(var) : this.infAlgTimeT.getPosterior(var);
}","@Override public <E extends UnivariateDistribution>E getFilteredPosterior(Variable var){
  if (getTimeIDOfPosterior() == 0) {
    Variable staticVar=this.infAlgTime0.getOriginalModel().getVariables().getVariableByName(var.getName());
    return this.infAlgTime0.getPosterior(staticVar);
  }
 else {
    Variable staticVar=this.infAlgTimeT.getOriginalModel().getVariables().getVariableByName(var.getName());
    return this.infAlgTimeT.getPosterior(staticVar);
  }
}",0.5739910313901345
21329,"/** 
 * Predicts the class membership probabilities for a given instance.
 * @param instance the data instance to be classified.
 * @return an array of doubles containing the estimated membership probabilities of the data instance for each class label.
 */
@Override public double[] predict(DataInstance instance){
  this.predictions.setEvidence(instance);
  Multinomial multinomial=this.predictions.getPosterior(this.getBNModel().getVariables().getVariableByName(className));
  return multinomial.getParameters();
}","/** 
 * Predicts the class membership probabilities for a given instance.
 * @param instance the data instance to be classified.
 * @return an array of doubles containing the estimated membership probabilities of the data instance for each class label.
 */
@Override public double[] predict(DataInstance instance){
  this.predictions.setEvidence(instance);
  this.predictions.runInference();
  Multinomial multinomial=this.predictions.getPosterior(this.getBNModel().getVariables().getVariableByName(className));
  return multinomial.getParameters();
}",0.9671977507029054
21330,"/** 
 * {@inheritDoc}
 */
@Override public Stream<DataRow> stream(){
  if (streamString == null) {
    try {
      streamString=Files.lines(pathFile);
    }
 catch (    IOException ex) {
      throw new UncheckedIOException(ex);
    }
  }
  return streamString.filter(w -> !w.isEmpty()).filter(w -> !w.startsWith(""String_Node_Str"")).skip(this.dataLineCount).filter(w -> !w.isEmpty()).map(line -> new DataRowWeka(this.attributes,line));
}","/** 
 * {@inheritDoc}
 */
@Override public Stream<DataRow> stream(){
  try {
    streamString=Files.lines(pathFile).filter(w -> !w.isEmpty()).filter(w -> !w.startsWith(""String_Node_Str"")).skip(this.dataLineCount).filter(w -> !w.isEmpty()).map(line -> new DataRowWeka(this.attributes,line));
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
  return streamString;
}",0.466183574879227
21331,"/** 
 * {@inheritDoc}
 */
@Override public Stream<DataRow> stream(){
  if (streamString == null) {
    try {
      streamString=Files.lines(pathFile);
    }
 catch (    IOException ex) {
      throw new UncheckedIOException(ex);
    }
  }
  return streamString.filter(w -> !w.isEmpty()).filter(w -> !w.startsWith(""String_Node_Str"")).skip(this.dataLineCount).filter(w -> !w.isEmpty()).map(line -> new DataRowWeka(this.attributes,line));
}","/** 
 * {@inheritDoc}
 */
@Override public Stream<DataRow> stream(){
  try {
    streamString=Files.lines(pathFile).filter(w -> !w.isEmpty()).filter(w -> !w.startsWith(""String_Node_Str"")).skip(this.dataLineCount).filter(w -> !w.isEmpty()).map(line -> new DataRowWeka(this.attributes,line));
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
  return streamString;
}",0.466183574879227
21332,"public static Attributes convertAttributes(Enumeration<weka.core.Attribute> attributesEnumeration,weka.core.Attribute classAtt){
  weka.core.Attribute attrWeka;
  List<Attribute> attrList=new ArrayList<>();
  while (attributesEnumeration.hasMoreElements()) {
    attrWeka=(weka.core.Attribute)attributesEnumeration.nextElement();
    convertAttribute(attrWeka,attrList);
  }
  convertAttribute(classAtt,attrList);
  return new Attributes(attrList);
}","public static Attributes convertAttributes(Enumeration<weka.core.Attribute> attributesEnumeration){
  weka.core.Attribute attrWeka;
  List<Attribute> attrList=new ArrayList<>();
  while (attributesEnumeration.hasMoreElements()) {
    attrWeka=(weka.core.Attribute)attributesEnumeration.nextElement();
    convertAttribute(attrWeka,attrList);
  }
  return new Attributes(attrList);
}",0.9182692307692308
21333,"public DataRowWeka(Instance dataRow,Attributes attributes_){
  this.dataRow=dataRow;
  this.attributes=attributes_;
}","public DataRowWeka(Instance dataRow){
  this.dataRow=dataRow;
}",0.7
21334,"@Override public Attributes getAttributes(){
  return this.attributes;
}","@Override public Attributes getAttributes(){
  return Converter.convertAttributes(dataRow.enumerateAttributes(),dataRow.classAttribute());
}",0.6415094339622641
21335,"@Override public void trainOnInstanceImpl(Instance instance){
  if (batch_ == null) {
    setParallelMode_(parallelModeOption.isSet());
    setNumClusters(numberClustersOption.getValue());
    attributes_=Converter.convertAttributes(instance.enumerateAttributes(),instance.classAttribute());
    Variables modelHeader=new Variables(attributes_);
    clusterVar_=modelHeader.newMultionomialVariable(""String_Node_Str"",getNumClusters());
    batch_=new DataOnMemoryListContainer(attributes_);
    predictions_=new VMP();
    predictions_.setSeed(this.randomSeed);
    dag=new DAG(modelHeader);
    if (isParallelMode_()) {
      dag.getParentSets().parallelStream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).forEach(w -> w.addParent(clusterVar_));
    }
 else {
      dag.getParentSets().stream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).filter(w -> w.getMainVar().isObservable()).forEach(w -> w.addParent(clusterVar_));
    }
    System.out.println(dag.toString());
    parameterLearningAlgorithm_=new SVB();
  }
  if (windowCounter >= timeWindowOption.getValue()) {
    batch_=new DataOnMemoryListContainer(attributes_);
    windowCounter=0;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(instance,attributes_));
  windowCounter++;
  batch_.add(dataInstance);
}","@Override public void trainOnInstanceImpl(Instance instance){
  if (batch_ == null) {
    setParallelMode_(parallelModeOption.isSet());
    setNumClusters(numberClustersOption.getValue());
    attributes_=Converter.convertAttributes(getDataset(instance.numAttributes(),0).enumerateAttributes());
    Variables modelHeader=new Variables(attributes_);
    clusterVar_=modelHeader.newMultionomialVariable(""String_Node_Str"",getNumClusters());
    batch_=new DataOnMemoryListContainer(attributes_);
    predictions_=new VMP();
    predictions_.setSeed(this.randomSeed);
    dag=new DAG(modelHeader);
    if (isParallelMode_()) {
      dag.getParentSets().parallelStream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).forEach(w -> w.addParent(clusterVar_));
    }
 else {
      dag.getParentSets().stream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).filter(w -> w.getMainVar().isObservable()).forEach(w -> w.addParent(clusterVar_));
    }
    System.out.println(dag.toString());
    parameterLearningAlgorithm_=new SVB();
  }
  if (windowCounter >= timeWindowOption.getValue()) {
    batch_=new DataOnMemoryListContainer(attributes_);
    windowCounter=0;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(instance));
  windowCounter++;
  batch_.add(dataInstance);
}",0.969811320754717
21336,"@Override public boolean keepClassLabel(){
  return true;
}","@Override public boolean keepClassLabel(){
  return false;
}",0.9411764705882352
21337,"@Override public Clustering getClusteringResult(){
  sourceClustering=new Clustering();
  Instances dataset=getDataset(attributes_.getNumberOfAttributes(),getNumClusters());
  Instances newInstances=new Instances(dataset);
  if (bnModel_ == null) {
    parameterLearningAlgorithm_.setDAG(dag);
    parameterLearningAlgorithm_.initLearning();
    parameterLearningAlgorithm_.updateModel(batch_);
  }
 else {
    parameterLearningAlgorithm_.updateModel(batch_);
  }
  bnModel_=parameterLearningAlgorithm_.getLearntBayesianNetwork();
  predictions_.setModel(bnModel_);
  for (  DataInstance dataInstance : batch_) {
    this.predictions_.setEvidence(dataInstance);
    this.predictions_.runInference();
    Multinomial multinomial=this.predictions_.getPosterior(clusterVar_);
    double[] results=multinomial.getProbabilities();
    int cnum=IntStream.rangeClosed(0,getNumClusters() - 1).reduce((a,b) -> (results[a] > results[b]) ? a : b).getAsInt();
    double[] attValues=dataInstance.getAttributes().getList().stream().mapToDouble(att -> dataInstance.getValue(att)).toArray();
    Instance newInst=new DenseInstance(1.0,attValues);
    newInst.insertAttributeAt(attributes_.getNumberOfAttributes());
    newInst.setDataset(dataset);
    newInst.setClassValue(cnum);
    newInstances.add(newInst);
  }
  clustering=new Clustering(newInstances);
  return sourceClustering;
}","@Override public Clustering getClusteringResult(){
  Instances dataset=getDataset(attributes_.getNumberOfAttributes(),getNumClusters());
  Instances newInstances=new Instances(dataset);
  if (bnModel_ == null) {
    parameterLearningAlgorithm_.setDAG(dag);
    ((SVB)parameterLearningAlgorithm_).setWindowsSize(timeWindowOption.getValue());
    parameterLearningAlgorithm_.initLearning();
    parameterLearningAlgorithm_.updateModel(batch_);
  }
 else {
    parameterLearningAlgorithm_.updateModel(batch_);
  }
  bnModel_=parameterLearningAlgorithm_.getLearntBayesianNetwork();
  predictions_.setModel(bnModel_);
  for (  DataInstance dataInstance : batch_) {
    this.predictions_.setEvidence(dataInstance);
    this.predictions_.runInference();
    Multinomial multinomial=this.predictions_.getPosterior(clusterVar_);
    double[] results=multinomial.getProbabilities();
    int cnum=IntStream.rangeClosed(0,getNumClusters() - 1).reduce((a,b) -> (results[a] > results[b]) ? a : b).getAsInt();
    double[] attValues=dataInstance.toArray();
    Instance newInst=new DenseInstance(1.0,attValues);
    newInst.insertAttributeAt(attributes_.getNumberOfAttributes());
    newInst.setDataset(dataset);
    newInst.setClassValue(cnum);
    newInstances.add(newInst);
  }
  clustering=new Clustering(newInstances);
  return clustering;
}",0.9219385867554568
21338,"public DataRowWeka(Instance dataRow){
  this.dataRow=dataRow;
}","public DataRowWeka(Instance dataRow,Attributes attributes_){
  this.dataRow=dataRow;
  this.attributes=attributes_;
}",0.7
21339,"@Override public Attributes getAttributes(){
  return Converter.convertAttributes(dataRow.enumerateAttributes(),dataRow.classAttribute());
}","@Override public Attributes getAttributes(){
  return this.attributes;
}",0.6415094339622641
21340,"@Override public void trainOnInstanceImpl(Instance instance){
  if (batch_ == null) {
    setParallelMode_(parallelModeOption.isSet());
    setNumClusters(numberClustersOption.getValue());
    attributes_=Converter.convertAttributes(getDataset(instance.numAttributes(),0).enumerateAttributes());
    Variables modelHeader=new Variables(attributes_);
    clusterVar_=modelHeader.newMultionomialVariable(""String_Node_Str"",getNumClusters());
    batch_=new DataOnMemoryListContainer(attributes_);
    predictions_=new VMP();
    predictions_.setSeed(this.randomSeed);
    dag=new DAG(modelHeader);
    if (isParallelMode_()) {
      dag.getParentSets().parallelStream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).forEach(w -> w.addParent(clusterVar_));
    }
 else {
      dag.getParentSets().stream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).filter(w -> w.getMainVar().isObservable()).forEach(w -> w.addParent(clusterVar_));
    }
    System.out.println(dag.toString());
    parameterLearningAlgorithm_=new SVB();
  }
  if (windowCounter >= timeWindowOption.getValue()) {
    batch_=new DataOnMemoryListContainer(attributes_);
    windowCounter=0;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(instance));
  windowCounter++;
  batch_.add(dataInstance);
}","@Override public void trainOnInstanceImpl(Instance instance){
  if (batch_ == null) {
    setParallelMode_(parallelModeOption.isSet());
    setNumClusters(numberClustersOption.getValue());
    attributes_=Converter.convertAttributes(getDataset(instance.numAttributes(),0).enumerateAttributes());
    Variables modelHeader=new Variables(attributes_);
    clusterVar_=modelHeader.newMultionomialVariable(""String_Node_Str"",getNumClusters());
    batch_=new DataOnMemoryListContainer(attributes_);
    predictions_=new VMP();
    predictions_.setSeed(this.randomSeed);
    dag=new DAG(modelHeader);
    if (isParallelMode_()) {
      dag.getParentSets().parallelStream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).forEach(w -> w.addParent(clusterVar_));
    }
 else {
      dag.getParentSets().stream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).filter(w -> w.getMainVar().isObservable()).forEach(w -> w.addParent(clusterVar_));
    }
    System.out.println(dag.toString());
    parameterLearningAlgorithm_=new SVB();
  }
  if (windowCounter >= timeWindowOption.getValue()) {
    batch_=new DataOnMemoryListContainer(attributes_);
    windowCounter=0;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(instance,attributes_));
  windowCounter++;
  batch_.add(dataInstance);
}",0.9954785229841748
21341,"public static Attributes convertAttributes(Enumeration<weka.core.Attribute> attributesEnumeration,weka.core.Attribute classAtt){
  weka.core.Attribute attrWeka;
  List<Attribute> attrList=new ArrayList<>();
  while (attributesEnumeration.hasMoreElements()) {
    attrWeka=(weka.core.Attribute)attributesEnumeration.nextElement();
    convertAttribute(attrWeka,attrList);
  }
  convertAttribute(classAtt,attrList);
  return new Attributes(attrList);
}","public static Attributes convertAttributes(Enumeration<weka.core.Attribute> attributesEnumeration){
  weka.core.Attribute attrWeka;
  List<Attribute> attrList=new ArrayList<>();
  while (attributesEnumeration.hasMoreElements()) {
    attrWeka=(weka.core.Attribute)attributesEnumeration.nextElement();
    convertAttribute(attrWeka,attrList);
  }
  return new Attributes(attrList);
}",0.9182692307692308
21342,"public DataRowWeka(Instance dataRow,Attributes attributes_){
  this.dataRow=dataRow;
  this.attributes=attributes_;
}","public DataRowWeka(Instance dataRow){
  this.dataRow=dataRow;
}",0.7
21343,"@Override public Attributes getAttributes(){
  return this.attributes;
}","@Override public Attributes getAttributes(){
  return Converter.convertAttributes(dataRow.enumerateAttributes(),dataRow.classAttribute());
}",0.6415094339622641
21344,"@Override public void trainOnInstanceImpl(Instance instance){
  if (batch_ == null) {
    setParallelMode_(parallelModeOption.isSet());
    setNumClusters(numberClustersOption.getValue());
    attributes_=Converter.convertAttributes(instance.enumerateAttributes(),instance.classAttribute());
    Variables modelHeader=new Variables(attributes_);
    clusterVar_=modelHeader.newMultionomialVariable(""String_Node_Str"",getNumClusters());
    batch_=new DataOnMemoryListContainer(attributes_);
    predictions_=new VMP();
    predictions_.setSeed(this.randomSeed);
    dag=new DAG(modelHeader);
    if (isParallelMode_()) {
      dag.getParentSets().parallelStream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).forEach(w -> w.addParent(clusterVar_));
    }
 else {
      dag.getParentSets().stream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).filter(w -> w.getMainVar().isObservable()).forEach(w -> w.addParent(clusterVar_));
    }
    System.out.println(dag.toString());
    parameterLearningAlgorithm_=new SVB();
  }
  if (windowCounter >= timeWindowOption.getValue()) {
    batch_=new DataOnMemoryListContainer(attributes_);
    windowCounter=0;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(instance,attributes_));
  windowCounter++;
  batch_.add(dataInstance);
}","@Override public void trainOnInstanceImpl(Instance instance){
  if (batch_ == null) {
    setParallelMode_(parallelModeOption.isSet());
    setNumClusters(numberClustersOption.getValue());
    attributes_=Converter.convertAttributes(getDataset(instance.numAttributes(),0).enumerateAttributes());
    Variables modelHeader=new Variables(attributes_);
    clusterVar_=modelHeader.newMultionomialVariable(""String_Node_Str"",getNumClusters());
    batch_=new DataOnMemoryListContainer(attributes_);
    predictions_=new VMP();
    predictions_.setSeed(this.randomSeed);
    dag=new DAG(modelHeader);
    if (isParallelMode_()) {
      dag.getParentSets().parallelStream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).forEach(w -> w.addParent(clusterVar_));
    }
 else {
      dag.getParentSets().stream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).filter(w -> w.getMainVar().isObservable()).forEach(w -> w.addParent(clusterVar_));
    }
    System.out.println(dag.toString());
    parameterLearningAlgorithm_=new SVB();
  }
  if (windowCounter >= timeWindowOption.getValue()) {
    batch_=new DataOnMemoryListContainer(attributes_);
    windowCounter=0;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(instance));
  windowCounter++;
  batch_.add(dataInstance);
}",0.969811320754717
21345,"@Override public boolean keepClassLabel(){
  return true;
}","@Override public boolean keepClassLabel(){
  return false;
}",0.9411764705882352
21346,"@Override public Clustering getClusteringResult(){
  sourceClustering=new Clustering();
  Instances dataset=getDataset(attributes_.getNumberOfAttributes(),getNumClusters());
  Instances newInstances=new Instances(dataset);
  if (bnModel_ == null) {
    parameterLearningAlgorithm_.setDAG(dag);
    parameterLearningAlgorithm_.initLearning();
    parameterLearningAlgorithm_.updateModel(batch_);
  }
 else {
    parameterLearningAlgorithm_.updateModel(batch_);
  }
  bnModel_=parameterLearningAlgorithm_.getLearntBayesianNetwork();
  predictions_.setModel(bnModel_);
  for (  DataInstance dataInstance : batch_) {
    this.predictions_.setEvidence(dataInstance);
    this.predictions_.runInference();
    Multinomial multinomial=this.predictions_.getPosterior(clusterVar_);
    double[] results=multinomial.getProbabilities();
    int cnum=IntStream.rangeClosed(0,getNumClusters() - 1).reduce((a,b) -> (results[a] > results[b]) ? a : b).getAsInt();
    double[] attValues=dataInstance.getAttributes().getList().stream().mapToDouble(att -> dataInstance.getValue(att)).toArray();
    Instance newInst=new DenseInstance(1.0,attValues);
    newInst.insertAttributeAt(attributes_.getNumberOfAttributes());
    newInst.setDataset(dataset);
    newInst.setClassValue(cnum);
    newInstances.add(newInst);
  }
  clustering=new Clustering(newInstances);
  return sourceClustering;
}","@Override public Clustering getClusteringResult(){
  Instances dataset=getDataset(attributes_.getNumberOfAttributes(),getNumClusters());
  Instances newInstances=new Instances(dataset);
  if (bnModel_ == null) {
    parameterLearningAlgorithm_.setDAG(dag);
    ((SVB)parameterLearningAlgorithm_).setWindowsSize(timeWindowOption.getValue());
    parameterLearningAlgorithm_.initLearning();
    parameterLearningAlgorithm_.updateModel(batch_);
  }
 else {
    parameterLearningAlgorithm_.updateModel(batch_);
  }
  bnModel_=parameterLearningAlgorithm_.getLearntBayesianNetwork();
  predictions_.setModel(bnModel_);
  for (  DataInstance dataInstance : batch_) {
    this.predictions_.setEvidence(dataInstance);
    this.predictions_.runInference();
    Multinomial multinomial=this.predictions_.getPosterior(clusterVar_);
    double[] results=multinomial.getProbabilities();
    int cnum=IntStream.rangeClosed(0,getNumClusters() - 1).reduce((a,b) -> (results[a] > results[b]) ? a : b).getAsInt();
    double[] attValues=dataInstance.toArray();
    Instance newInst=new DenseInstance(1.0,attValues);
    newInst.insertAttributeAt(attributes_.getNumberOfAttributes());
    newInst.setDataset(dataset);
    newInst.setClassValue(cnum);
    newInstances.add(newInst);
  }
  clustering=new Clustering(newInstances);
  return clustering;
}",0.9219385867554568
21347,"public DataRowWeka(Instance dataRow){
  this.dataRow=dataRow;
}","public DataRowWeka(Instance dataRow,Attributes attributes_){
  this.dataRow=dataRow;
  this.attributes=attributes_;
}",0.7
21348,"@Override public Attributes getAttributes(){
  return Converter.convertAttributes(dataRow.enumerateAttributes(),dataRow.classAttribute());
}","@Override public Attributes getAttributes(){
  return this.attributes;
}",0.6415094339622641
21349,"@Override public void trainOnInstanceImpl(Instance instance){
  if (batch_ == null) {
    setParallelMode_(parallelModeOption.isSet());
    setNumClusters(numberClustersOption.getValue());
    attributes_=Converter.convertAttributes(getDataset(instance.numAttributes(),0).enumerateAttributes());
    Variables modelHeader=new Variables(attributes_);
    clusterVar_=modelHeader.newMultionomialVariable(""String_Node_Str"",getNumClusters());
    batch_=new DataOnMemoryListContainer(attributes_);
    predictions_=new VMP();
    predictions_.setSeed(this.randomSeed);
    dag=new DAG(modelHeader);
    if (isParallelMode_()) {
      dag.getParentSets().parallelStream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).forEach(w -> w.addParent(clusterVar_));
    }
 else {
      dag.getParentSets().stream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).filter(w -> w.getMainVar().isObservable()).forEach(w -> w.addParent(clusterVar_));
    }
    System.out.println(dag.toString());
    parameterLearningAlgorithm_=new SVB();
  }
  if (windowCounter >= timeWindowOption.getValue()) {
    batch_=new DataOnMemoryListContainer(attributes_);
    windowCounter=0;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(instance));
  windowCounter++;
  batch_.add(dataInstance);
}","@Override public void trainOnInstanceImpl(Instance instance){
  if (batch_ == null) {
    setParallelMode_(parallelModeOption.isSet());
    setNumClusters(numberClustersOption.getValue());
    attributes_=Converter.convertAttributes(getDataset(instance.numAttributes(),0).enumerateAttributes());
    Variables modelHeader=new Variables(attributes_);
    clusterVar_=modelHeader.newMultionomialVariable(""String_Node_Str"",getNumClusters());
    batch_=new DataOnMemoryListContainer(attributes_);
    predictions_=new VMP();
    predictions_.setSeed(this.randomSeed);
    dag=new DAG(modelHeader);
    if (isParallelMode_()) {
      dag.getParentSets().parallelStream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).forEach(w -> w.addParent(clusterVar_));
    }
 else {
      dag.getParentSets().stream().filter(w -> w.getMainVar().getVarID() != clusterVar_.getVarID()).filter(w -> w.getMainVar().isObservable()).forEach(w -> w.addParent(clusterVar_));
    }
    System.out.println(dag.toString());
    parameterLearningAlgorithm_=new SVB();
  }
  if (windowCounter >= timeWindowOption.getValue()) {
    batch_=new DataOnMemoryListContainer(attributes_);
    windowCounter=0;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(instance,attributes_));
  windowCounter++;
  batch_.add(dataInstance);
}",0.9954785229841748
21350,"@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedValueParameterVariables){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalDistribution learningDistribution=(EF_ConditionalDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedValueParameterVariables);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}","@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedValueParameterVariables){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalDistribution learningDistribution=(EF_ConditionalDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedValueParameterVariables);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return DistributionTypeEnum.FromBaseDistributionToConditionalDistribution(new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList));
}",0.9623059866962306
21351,"@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  if (parents.isEmpty())   return (E)new Multinomial(this.variable);
 else   return (E)new BaseDistribution_MultinomialParents<Multinomial>(this.variable,parents);
}","@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  if (parents.isEmpty())   return (E)new Multinomial(this.variable);
 else   return (E)new Multinomial_MultinomialParents(this.variable,parents);
}",0.9447513812154696
21352,"@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  boolean multinomialParents=false;
  boolean normalParents=false;
  for (  Variable v : parents) {
    if (v.isMultinomial() || (v.isMultinomialLogistic())) {
      multinomialParents=true;
    }
 else     if (v.isNormal()) {
      normalParents=true;
    }
  }
  if (!multinomialParents && !normalParents) {
    return (E)new Normal(this.variable);
  }
 else   if (multinomialParents && !normalParents) {
    return (E)new BaseDistribution_MultinomialParents<Normal>(this.variable,parents);
  }
 else   if (!multinomialParents && normalParents) {
    return (E)new ConditionalLinearGaussian(this.variable,parents);
  }
 else   if (multinomialParents && normalParents) {
    return (E)new BaseDistribution_MultinomialParents<ConditionalLinearGaussian>(this.variable,parents);
  }
 else {
    return null;
  }
}","@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  boolean multinomialParents=false;
  boolean normalParents=false;
  for (  Variable v : parents) {
    if (v.isMultinomial() || (v.isMultinomialLogistic())) {
      multinomialParents=true;
    }
 else     if (v.isNormal()) {
      normalParents=true;
    }
  }
  if (!multinomialParents && !normalParents) {
    return (E)new Normal(this.variable);
  }
 else   if (multinomialParents && !normalParents) {
    return (E)new Normal_MultinomialParents(this.variable,parents);
  }
 else   if (!multinomialParents && normalParents) {
    return (E)new ConditionalLinearGaussian(this.variable,parents);
  }
 else   if (multinomialParents && normalParents) {
    return (E)new Normal_MultinomialNormalParents(this.variable,parents);
  }
 else {
    return null;
  }
}",0.9501259445843828
21353,"public static void loadAndTestFilesFromFolder(final String folderName) throws Exception {
  File folder=new File(folderName);
  for (  final File fileEntry : folder.listFiles()) {
    if (fileEntry.isDirectory()) {
      loadAndTestFilesFromFolder(fileEntry.getName());
    }
 else {
      String fileName=fileEntry.getName();
      String fullFileName=folderName + ""String_Node_Str"" + fileName;
      if (fileName.endsWith(""String_Node_Str"")) {
        BayesianNetwork amidstBN=BayesianNetworkLoader.loadFromFile(fullFileName);
        BayesianNetworkWriter.saveToFile(amidstBN,fullFileName);
        BayesianNetwork amidstBN2=BayesianNetworkLoader.loadFromFile(fullFileName);
        if (!amidstBN.equalBNs(amidstBN2,0.0))         throw new Exception(""String_Node_Str"" + fileName + ""String_Node_Str"");
      }
    }
  }
}","public static void loadAndTestFilesFromFolder(final String folderName) throws Exception {
  File folder=new File(folderName);
  for (  final File fileEntry : folder.listFiles()) {
    if (fileEntry.isDirectory()) {
      loadAndTestFilesFromFolder(fileEntry.getName());
    }
 else {
      String fileName=fileEntry.getName();
      String fullFileName=folderName + ""String_Node_Str"" + fileName;
      if (fileName.endsWith(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + fileName);
        BayesianNetwork amidstBN=BayesianNetworkLoader.loadFromFile(fullFileName);
        BayesianNetworkWriter.saveToFile(amidstBN,fullFileName);
        BayesianNetwork amidstBN2=BayesianNetworkLoader.loadFromFile(fullFileName);
        if (!amidstBN.equalBNs(amidstBN2,0.0))         throw new Exception(""String_Node_Str"" + fileName + ""String_Node_Str"");
      }
    }
  }
}",0.965962441314554
21354,"@Test public void testingMLforDBN4() throws IOException, ClassNotFoundException {
  DynamicBayesianNetworkGenerator dbnGenerator=new DynamicBayesianNetworkGenerator();
  dbnGenerator.setNumberOfContinuousVars(2);
  dbnGenerator.setNumberOfDiscreteVars(0);
  dbnGenerator.setNumberOfStates(2);
  DynamicBayesianNetwork dynamicNB=DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(new Random(1),2,true);
  dynamicNB.randomInitialization(new Random(1));
  Variable classVar=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar1Class0=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var1)).getBaseConditionalDistribution(0);
  distContVar1Class0.setCoeffForParent(var1_interface,1.3);
  ConditionalLinearGaussian distContVar1Class1=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str""))).getBaseConditionalDistribution(1);
  distContVar1Class1.setCoeffForParent(var1_interface,-1.3);
  Variable var2=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var2_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar2Class0=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var2)).getBaseConditionalDistribution(0);
  distContVar2Class0.setCoeffForParent(var2_interface,2.3);
  ConditionalLinearGaussian distContVar2Class1=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var2)).getBaseConditionalDistribution(1);
  distContVar2Class1.setCoeffForParent(var2_interface,-2.3);
  System.out.println(dynamicNB.getDynamicDAG().toString());
  System.out.println(dynamicNB.toString());
  DynamicBayesianNetworkSampler sampler=new DynamicBayesianNetworkSampler(dynamicNB);
  sampler.setSeed(2);
  DataStream<DynamicDataInstance> data=sampler.sampleToDataBase(10000,10);
  MaximumLikelihoodForDBN.setBatchSize(1000);
  MaximumLikelihoodForDBN.setParallelMode(false);
  Stopwatch watch=Stopwatch.createStarted();
  DynamicBayesianNetwork bnet=MaximumLikelihoodForDBN.learnDynamic(dynamicNB.getDynamicDAG(),data);
  System.out.println(watch.stop());
  System.out.println();
  for (  Variable var : dynamicNB.getDynamicVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + dynamicNB.getConditionalDistributionTimeT(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistributionTimeT(var));
    Assert.assertTrue(bnet.getConditionalDistributionTimeT(var).equalDist(dynamicNB.getConditionalDistributionTimeT(var),0.5));
  }
}","@Test public void testingMLforDBN4() throws IOException, ClassNotFoundException {
  DynamicBayesianNetworkGenerator dbnGenerator=new DynamicBayesianNetworkGenerator();
  dbnGenerator.setNumberOfContinuousVars(2);
  dbnGenerator.setNumberOfDiscreteVars(0);
  dbnGenerator.setNumberOfStates(2);
  DynamicBayesianNetwork dynamicNB=DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(new Random(1),2,true);
  dynamicNB.randomInitialization(new Random(1));
  Variable classVar=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar1Class0=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var1)).getNormal_NormalParentsDistribution(0);
  distContVar1Class0.setCoeffForParent(var1_interface,1.3);
  ConditionalLinearGaussian distContVar1Class1=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str""))).getNormal_NormalParentsDistribution(1);
  distContVar1Class1.setCoeffForParent(var1_interface,-1.3);
  Variable var2=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var2_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar2Class0=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var2)).getNormal_NormalParentsDistribution(0);
  distContVar2Class0.setCoeffForParent(var2_interface,2.3);
  ConditionalLinearGaussian distContVar2Class1=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var2)).getNormal_NormalParentsDistribution(1);
  distContVar2Class1.setCoeffForParent(var2_interface,-2.3);
  System.out.println(dynamicNB.getDynamicDAG().toString());
  System.out.println(dynamicNB.toString());
  DynamicBayesianNetworkSampler sampler=new DynamicBayesianNetworkSampler(dynamicNB);
  sampler.setSeed(2);
  DataStream<DynamicDataInstance> data=sampler.sampleToDataBase(10000,10);
  MaximumLikelihoodForDBN.setBatchSize(1000);
  MaximumLikelihoodForDBN.setParallelMode(false);
  Stopwatch watch=Stopwatch.createStarted();
  DynamicBayesianNetwork bnet=MaximumLikelihoodForDBN.learnDynamic(dynamicNB.getDynamicDAG(),data);
  System.out.println(watch.stop());
  System.out.println();
  for (  Variable var : dynamicNB.getDynamicVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + dynamicNB.getConditionalDistributionTimeT(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistributionTimeT(var));
    Assert.assertTrue(bnet.getConditionalDistributionTimeT(var).equalDist(dynamicNB.getConditionalDistributionTimeT(var),0.5));
  }
}",0.9406834300451322
21355,"@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedValueParameterVariables){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalDistribution learningDistribution=(EF_ConditionalDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedValueParameterVariables);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}","@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedValueParameterVariables){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalDistribution learningDistribution=(EF_ConditionalDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedValueParameterVariables);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return DistributionTypeEnum.FromBaseDistributionToConditionalDistribution(new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList));
}",0.9623059866962306
21356,"@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  if (parents.isEmpty())   return (E)new Multinomial(this.variable);
 else   return (E)new BaseDistribution_MultinomialParents<Multinomial>(this.variable,parents);
}","@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  if (parents.isEmpty())   return (E)new Multinomial(this.variable);
 else   return (E)new Multinomial_MultinomialParents(this.variable,parents);
}",0.9447513812154696
21357,"@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  boolean multinomialParents=false;
  boolean normalParents=false;
  for (  Variable v : parents) {
    if (v.isMultinomial() || (v.isMultinomialLogistic())) {
      multinomialParents=true;
    }
 else     if (v.isNormal()) {
      normalParents=true;
    }
  }
  if (!multinomialParents && !normalParents) {
    return (E)new Normal(this.variable);
  }
 else   if (multinomialParents && !normalParents) {
    return (E)new BaseDistribution_MultinomialParents<Normal>(this.variable,parents);
  }
 else   if (!multinomialParents && normalParents) {
    return (E)new ConditionalLinearGaussian(this.variable,parents);
  }
 else   if (multinomialParents && normalParents) {
    return (E)new BaseDistribution_MultinomialParents<ConditionalLinearGaussian>(this.variable,parents);
  }
 else {
    return null;
  }
}","@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  boolean multinomialParents=false;
  boolean normalParents=false;
  for (  Variable v : parents) {
    if (v.isMultinomial() || (v.isMultinomialLogistic())) {
      multinomialParents=true;
    }
 else     if (v.isNormal()) {
      normalParents=true;
    }
  }
  if (!multinomialParents && !normalParents) {
    return (E)new Normal(this.variable);
  }
 else   if (multinomialParents && !normalParents) {
    return (E)new Normal_MultinomialParents(this.variable,parents);
  }
 else   if (!multinomialParents && normalParents) {
    return (E)new ConditionalLinearGaussian(this.variable,parents);
  }
 else   if (multinomialParents && normalParents) {
    return (E)new Normal_MultinomialNormalParents(this.variable,parents);
  }
 else {
    return null;
  }
}",0.9501259445843828
21358,"public static void loadAndTestFilesFromFolder(final String folderName) throws Exception {
  File folder=new File(folderName);
  for (  final File fileEntry : folder.listFiles()) {
    if (fileEntry.isDirectory()) {
      loadAndTestFilesFromFolder(fileEntry.getName());
    }
 else {
      String fileName=fileEntry.getName();
      String fullFileName=folderName + ""String_Node_Str"" + fileName;
      if (fileName.endsWith(""String_Node_Str"")) {
        BayesianNetwork amidstBN=BayesianNetworkLoader.loadFromFile(fullFileName);
        BayesianNetworkWriter.saveToFile(amidstBN,fullFileName);
        BayesianNetwork amidstBN2=BayesianNetworkLoader.loadFromFile(fullFileName);
        if (!amidstBN.equalBNs(amidstBN2,0.0))         throw new Exception(""String_Node_Str"" + fileName + ""String_Node_Str"");
      }
    }
  }
}","public static void loadAndTestFilesFromFolder(final String folderName) throws Exception {
  File folder=new File(folderName);
  for (  final File fileEntry : folder.listFiles()) {
    if (fileEntry.isDirectory()) {
      loadAndTestFilesFromFolder(fileEntry.getName());
    }
 else {
      String fileName=fileEntry.getName();
      String fullFileName=folderName + ""String_Node_Str"" + fileName;
      if (fileName.endsWith(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + fileName);
        BayesianNetwork amidstBN=BayesianNetworkLoader.loadFromFile(fullFileName);
        BayesianNetworkWriter.saveToFile(amidstBN,fullFileName);
        BayesianNetwork amidstBN2=BayesianNetworkLoader.loadFromFile(fullFileName);
        if (!amidstBN.equalBNs(amidstBN2,0.0))         throw new Exception(""String_Node_Str"" + fileName + ""String_Node_Str"");
      }
    }
  }
}",0.965962441314554
21359,"@Test public void testingMLforDBN4() throws IOException, ClassNotFoundException {
  DynamicBayesianNetworkGenerator dbnGenerator=new DynamicBayesianNetworkGenerator();
  dbnGenerator.setNumberOfContinuousVars(2);
  dbnGenerator.setNumberOfDiscreteVars(0);
  dbnGenerator.setNumberOfStates(2);
  DynamicBayesianNetwork dynamicNB=DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(new Random(1),2,true);
  dynamicNB.randomInitialization(new Random(1));
  Variable classVar=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar1Class0=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var1)).getBaseConditionalDistribution(0);
  distContVar1Class0.setCoeffForParent(var1_interface,1.3);
  ConditionalLinearGaussian distContVar1Class1=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str""))).getBaseConditionalDistribution(1);
  distContVar1Class1.setCoeffForParent(var1_interface,-1.3);
  Variable var2=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var2_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar2Class0=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var2)).getBaseConditionalDistribution(0);
  distContVar2Class0.setCoeffForParent(var2_interface,2.3);
  ConditionalLinearGaussian distContVar2Class1=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var2)).getBaseConditionalDistribution(1);
  distContVar2Class1.setCoeffForParent(var2_interface,-2.3);
  System.out.println(dynamicNB.getDynamicDAG().toString());
  System.out.println(dynamicNB.toString());
  DynamicBayesianNetworkSampler sampler=new DynamicBayesianNetworkSampler(dynamicNB);
  sampler.setSeed(2);
  DataStream<DynamicDataInstance> data=sampler.sampleToDataBase(10000,10);
  MaximumLikelihoodForDBN.setBatchSize(1000);
  MaximumLikelihoodForDBN.setParallelMode(false);
  Stopwatch watch=Stopwatch.createStarted();
  DynamicBayesianNetwork bnet=MaximumLikelihoodForDBN.learnDynamic(dynamicNB.getDynamicDAG(),data);
  System.out.println(watch.stop());
  System.out.println();
  for (  Variable var : dynamicNB.getDynamicVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + dynamicNB.getConditionalDistributionTimeT(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistributionTimeT(var));
    Assert.assertTrue(bnet.getConditionalDistributionTimeT(var).equalDist(dynamicNB.getConditionalDistributionTimeT(var),0.5));
  }
}","@Test public void testingMLforDBN4() throws IOException, ClassNotFoundException {
  DynamicBayesianNetworkGenerator dbnGenerator=new DynamicBayesianNetworkGenerator();
  dbnGenerator.setNumberOfContinuousVars(2);
  dbnGenerator.setNumberOfDiscreteVars(0);
  dbnGenerator.setNumberOfStates(2);
  DynamicBayesianNetwork dynamicNB=DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(new Random(1),2,true);
  dynamicNB.randomInitialization(new Random(1));
  Variable classVar=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar1Class0=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var1)).getNormal_NormalParentsDistribution(0);
  distContVar1Class0.setCoeffForParent(var1_interface,1.3);
  ConditionalLinearGaussian distContVar1Class1=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str""))).getNormal_NormalParentsDistribution(1);
  distContVar1Class1.setCoeffForParent(var1_interface,-1.3);
  Variable var2=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var2_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar2Class0=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var2)).getNormal_NormalParentsDistribution(0);
  distContVar2Class0.setCoeffForParent(var2_interface,2.3);
  ConditionalLinearGaussian distContVar2Class1=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var2)).getNormal_NormalParentsDistribution(1);
  distContVar2Class1.setCoeffForParent(var2_interface,-2.3);
  System.out.println(dynamicNB.getDynamicDAG().toString());
  System.out.println(dynamicNB.toString());
  DynamicBayesianNetworkSampler sampler=new DynamicBayesianNetworkSampler(dynamicNB);
  sampler.setSeed(2);
  DataStream<DynamicDataInstance> data=sampler.sampleToDataBase(10000,10);
  MaximumLikelihoodForDBN.setBatchSize(1000);
  MaximumLikelihoodForDBN.setParallelMode(false);
  Stopwatch watch=Stopwatch.createStarted();
  DynamicBayesianNetwork bnet=MaximumLikelihoodForDBN.learnDynamic(dynamicNB.getDynamicDAG(),data);
  System.out.println(watch.stop());
  System.out.println();
  for (  Variable var : dynamicNB.getDynamicVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + dynamicNB.getConditionalDistributionTimeT(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistributionTimeT(var));
    Assert.assertTrue(bnet.getConditionalDistributionTimeT(var).equalDist(dynamicNB.getConditionalDistributionTimeT(var),0.5));
  }
}",0.9406834300451322
21360,"@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedValueParameterVariables){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalDistribution learningDistribution=(EF_ConditionalDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedValueParameterVariables);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}","@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedValueParameterVariables){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalDistribution learningDistribution=(EF_ConditionalDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedValueParameterVariables);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return DistributionTypeEnum.FromBaseDistributionToConditionalDistribution(new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList));
}",0.9623059866962306
21361,"@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  if (parents.isEmpty())   return (E)new Multinomial(this.variable);
 else   return (E)new BaseDistribution_MultinomialParents<Multinomial>(this.variable,parents);
}","@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  if (parents.isEmpty())   return (E)new Multinomial(this.variable);
 else   return (E)new Multinomial_MultinomialParents(this.variable,parents);
}",0.9447513812154696
21362,"@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  boolean multinomialParents=false;
  boolean normalParents=false;
  for (  Variable v : parents) {
    if (v.isMultinomial() || (v.isMultinomialLogistic())) {
      multinomialParents=true;
    }
 else     if (v.isNormal()) {
      normalParents=true;
    }
  }
  if (!multinomialParents && !normalParents) {
    return (E)new Normal(this.variable);
  }
 else   if (multinomialParents && !normalParents) {
    return (E)new BaseDistribution_MultinomialParents<Normal>(this.variable,parents);
  }
 else   if (!multinomialParents && normalParents) {
    return (E)new ConditionalLinearGaussian(this.variable,parents);
  }
 else   if (multinomialParents && normalParents) {
    return (E)new BaseDistribution_MultinomialParents<ConditionalLinearGaussian>(this.variable,parents);
  }
 else {
    return null;
  }
}","@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  boolean multinomialParents=false;
  boolean normalParents=false;
  for (  Variable v : parents) {
    if (v.isMultinomial() || (v.isMultinomialLogistic())) {
      multinomialParents=true;
    }
 else     if (v.isNormal()) {
      normalParents=true;
    }
  }
  if (!multinomialParents && !normalParents) {
    return (E)new Normal(this.variable);
  }
 else   if (multinomialParents && !normalParents) {
    return (E)new Normal_MultinomialParents(this.variable,parents);
  }
 else   if (!multinomialParents && normalParents) {
    return (E)new ConditionalLinearGaussian(this.variable,parents);
  }
 else   if (multinomialParents && normalParents) {
    return (E)new Normal_MultinomialNormalParents(this.variable,parents);
  }
 else {
    return null;
  }
}",0.9501259445843828
21363,"public static void loadAndTestFilesFromFolder(final String folderName) throws Exception {
  File folder=new File(folderName);
  for (  final File fileEntry : folder.listFiles()) {
    if (fileEntry.isDirectory()) {
      loadAndTestFilesFromFolder(fileEntry.getName());
    }
 else {
      String fileName=fileEntry.getName();
      String fullFileName=folderName + ""String_Node_Str"" + fileName;
      if (fileName.endsWith(""String_Node_Str"")) {
        BayesianNetwork amidstBN=BayesianNetworkLoader.loadFromFile(fullFileName);
        BayesianNetworkWriter.saveToFile(amidstBN,fullFileName);
        BayesianNetwork amidstBN2=BayesianNetworkLoader.loadFromFile(fullFileName);
        if (!amidstBN.equalBNs(amidstBN2,0.0))         throw new Exception(""String_Node_Str"" + fileName + ""String_Node_Str"");
      }
    }
  }
}","public static void loadAndTestFilesFromFolder(final String folderName) throws Exception {
  File folder=new File(folderName);
  for (  final File fileEntry : folder.listFiles()) {
    if (fileEntry.isDirectory()) {
      loadAndTestFilesFromFolder(fileEntry.getName());
    }
 else {
      String fileName=fileEntry.getName();
      String fullFileName=folderName + ""String_Node_Str"" + fileName;
      if (fileName.endsWith(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + fileName);
        BayesianNetwork amidstBN=BayesianNetworkLoader.loadFromFile(fullFileName);
        BayesianNetworkWriter.saveToFile(amidstBN,fullFileName);
        BayesianNetwork amidstBN2=BayesianNetworkLoader.loadFromFile(fullFileName);
        if (!amidstBN.equalBNs(amidstBN2,0.0))         throw new Exception(""String_Node_Str"" + fileName + ""String_Node_Str"");
      }
    }
  }
}",0.965962441314554
21364,"@Test public void testingMLforDBN4() throws IOException, ClassNotFoundException {
  DynamicBayesianNetworkGenerator dbnGenerator=new DynamicBayesianNetworkGenerator();
  dbnGenerator.setNumberOfContinuousVars(2);
  dbnGenerator.setNumberOfDiscreteVars(0);
  dbnGenerator.setNumberOfStates(2);
  DynamicBayesianNetwork dynamicNB=DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(new Random(1),2,true);
  dynamicNB.randomInitialization(new Random(1));
  Variable classVar=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar1Class0=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var1)).getBaseConditionalDistribution(0);
  distContVar1Class0.setCoeffForParent(var1_interface,1.3);
  ConditionalLinearGaussian distContVar1Class1=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str""))).getBaseConditionalDistribution(1);
  distContVar1Class1.setCoeffForParent(var1_interface,-1.3);
  Variable var2=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var2_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar2Class0=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var2)).getBaseConditionalDistribution(0);
  distContVar2Class0.setCoeffForParent(var2_interface,2.3);
  ConditionalLinearGaussian distContVar2Class1=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var2)).getBaseConditionalDistribution(1);
  distContVar2Class1.setCoeffForParent(var2_interface,-2.3);
  System.out.println(dynamicNB.getDynamicDAG().toString());
  System.out.println(dynamicNB.toString());
  DynamicBayesianNetworkSampler sampler=new DynamicBayesianNetworkSampler(dynamicNB);
  sampler.setSeed(2);
  DataStream<DynamicDataInstance> data=sampler.sampleToDataBase(10000,10);
  MaximumLikelihoodForDBN.setBatchSize(1000);
  MaximumLikelihoodForDBN.setParallelMode(false);
  Stopwatch watch=Stopwatch.createStarted();
  DynamicBayesianNetwork bnet=MaximumLikelihoodForDBN.learnDynamic(dynamicNB.getDynamicDAG(),data);
  System.out.println(watch.stop());
  System.out.println();
  for (  Variable var : dynamicNB.getDynamicVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + dynamicNB.getConditionalDistributionTimeT(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistributionTimeT(var));
    Assert.assertTrue(bnet.getConditionalDistributionTimeT(var).equalDist(dynamicNB.getConditionalDistributionTimeT(var),0.5));
  }
}","@Test public void testingMLforDBN4() throws IOException, ClassNotFoundException {
  DynamicBayesianNetworkGenerator dbnGenerator=new DynamicBayesianNetworkGenerator();
  dbnGenerator.setNumberOfContinuousVars(2);
  dbnGenerator.setNumberOfDiscreteVars(0);
  dbnGenerator.setNumberOfStates(2);
  DynamicBayesianNetwork dynamicNB=DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(new Random(1),2,true);
  dynamicNB.randomInitialization(new Random(1));
  Variable classVar=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar1Class0=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var1)).getNormal_NormalParentsDistribution(0);
  distContVar1Class0.setCoeffForParent(var1_interface,1.3);
  ConditionalLinearGaussian distContVar1Class1=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str""))).getNormal_NormalParentsDistribution(1);
  distContVar1Class1.setCoeffForParent(var1_interface,-1.3);
  Variable var2=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var2_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar2Class0=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var2)).getNormal_NormalParentsDistribution(0);
  distContVar2Class0.setCoeffForParent(var2_interface,2.3);
  ConditionalLinearGaussian distContVar2Class1=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var2)).getNormal_NormalParentsDistribution(1);
  distContVar2Class1.setCoeffForParent(var2_interface,-2.3);
  System.out.println(dynamicNB.getDynamicDAG().toString());
  System.out.println(dynamicNB.toString());
  DynamicBayesianNetworkSampler sampler=new DynamicBayesianNetworkSampler(dynamicNB);
  sampler.setSeed(2);
  DataStream<DynamicDataInstance> data=sampler.sampleToDataBase(10000,10);
  MaximumLikelihoodForDBN.setBatchSize(1000);
  MaximumLikelihoodForDBN.setParallelMode(false);
  Stopwatch watch=Stopwatch.createStarted();
  DynamicBayesianNetwork bnet=MaximumLikelihoodForDBN.learnDynamic(dynamicNB.getDynamicDAG(),data);
  System.out.println(watch.stop());
  System.out.println();
  for (  Variable var : dynamicNB.getDynamicVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + dynamicNB.getConditionalDistributionTimeT(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistributionTimeT(var));
    Assert.assertTrue(bnet.getConditionalDistributionTimeT(var).equalDist(dynamicNB.getConditionalDistributionTimeT(var),0.5));
  }
}",0.9406834300451322
21365,"@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedValueParameterVariables){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalDistribution learningDistribution=(EF_ConditionalDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedValueParameterVariables);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}","@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedValueParameterVariables){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalDistribution learningDistribution=(EF_ConditionalDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedValueParameterVariables);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return DistributionTypeEnum.FromBaseDistributionToConditionalDistribution(new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList));
}",0.9623059866962306
21366,"@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  if (parents.isEmpty())   return (E)new Multinomial(this.variable);
 else   return (E)new BaseDistribution_MultinomialParents<Multinomial>(this.variable,parents);
}","@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  if (parents.isEmpty())   return (E)new Multinomial(this.variable);
 else   return (E)new Multinomial_MultinomialParents(this.variable,parents);
}",0.9447513812154696
21367,"@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  boolean multinomialParents=false;
  boolean normalParents=false;
  for (  Variable v : parents) {
    if (v.isMultinomial() || (v.isMultinomialLogistic())) {
      multinomialParents=true;
    }
 else     if (v.isNormal()) {
      normalParents=true;
    }
  }
  if (!multinomialParents && !normalParents) {
    return (E)new Normal(this.variable);
  }
 else   if (multinomialParents && !normalParents) {
    return (E)new BaseDistribution_MultinomialParents<Normal>(this.variable,parents);
  }
 else   if (!multinomialParents && normalParents) {
    return (E)new ConditionalLinearGaussian(this.variable,parents);
  }
 else   if (multinomialParents && normalParents) {
    return (E)new BaseDistribution_MultinomialParents<ConditionalLinearGaussian>(this.variable,parents);
  }
 else {
    return null;
  }
}","@Override public <E extends ConditionalDistribution>E newConditionalDistribution(List<Variable> parents){
  if (!this.areParentsCompatible(parents))   throw new IllegalArgumentException(""String_Node_Str"");
  boolean multinomialParents=false;
  boolean normalParents=false;
  for (  Variable v : parents) {
    if (v.isMultinomial() || (v.isMultinomialLogistic())) {
      multinomialParents=true;
    }
 else     if (v.isNormal()) {
      normalParents=true;
    }
  }
  if (!multinomialParents && !normalParents) {
    return (E)new Normal(this.variable);
  }
 else   if (multinomialParents && !normalParents) {
    return (E)new Normal_MultinomialParents(this.variable,parents);
  }
 else   if (!multinomialParents && normalParents) {
    return (E)new ConditionalLinearGaussian(this.variable,parents);
  }
 else   if (multinomialParents && normalParents) {
    return (E)new Normal_MultinomialNormalParents(this.variable,parents);
  }
 else {
    return null;
  }
}",0.9501259445843828
21368,"public static void loadAndTestFilesFromFolder(final String folderName) throws Exception {
  File folder=new File(folderName);
  for (  final File fileEntry : folder.listFiles()) {
    if (fileEntry.isDirectory()) {
      loadAndTestFilesFromFolder(fileEntry.getName());
    }
 else {
      String fileName=fileEntry.getName();
      String fullFileName=folderName + ""String_Node_Str"" + fileName;
      if (fileName.endsWith(""String_Node_Str"")) {
        BayesianNetwork amidstBN=BayesianNetworkLoader.loadFromFile(fullFileName);
        BayesianNetworkWriter.saveToFile(amidstBN,fullFileName);
        BayesianNetwork amidstBN2=BayesianNetworkLoader.loadFromFile(fullFileName);
        if (!amidstBN.equalBNs(amidstBN2,0.0))         throw new Exception(""String_Node_Str"" + fileName + ""String_Node_Str"");
      }
    }
  }
}","public static void loadAndTestFilesFromFolder(final String folderName) throws Exception {
  File folder=new File(folderName);
  for (  final File fileEntry : folder.listFiles()) {
    if (fileEntry.isDirectory()) {
      loadAndTestFilesFromFolder(fileEntry.getName());
    }
 else {
      String fileName=fileEntry.getName();
      String fullFileName=folderName + ""String_Node_Str"" + fileName;
      if (fileName.endsWith(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + fileName);
        BayesianNetwork amidstBN=BayesianNetworkLoader.loadFromFile(fullFileName);
        BayesianNetworkWriter.saveToFile(amidstBN,fullFileName);
        BayesianNetwork amidstBN2=BayesianNetworkLoader.loadFromFile(fullFileName);
        if (!amidstBN.equalBNs(amidstBN2,0.0))         throw new Exception(""String_Node_Str"" + fileName + ""String_Node_Str"");
      }
    }
  }
}",0.965962441314554
21369,"@Test public void testingMLforDBN4() throws IOException, ClassNotFoundException {
  DynamicBayesianNetworkGenerator dbnGenerator=new DynamicBayesianNetworkGenerator();
  dbnGenerator.setNumberOfContinuousVars(2);
  dbnGenerator.setNumberOfDiscreteVars(0);
  dbnGenerator.setNumberOfStates(2);
  DynamicBayesianNetwork dynamicNB=DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(new Random(1),2,true);
  dynamicNB.randomInitialization(new Random(1));
  Variable classVar=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar1Class0=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var1)).getBaseConditionalDistribution(0);
  distContVar1Class0.setCoeffForParent(var1_interface,1.3);
  ConditionalLinearGaussian distContVar1Class1=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str""))).getBaseConditionalDistribution(1);
  distContVar1Class1.setCoeffForParent(var1_interface,-1.3);
  Variable var2=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var2_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar2Class0=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var2)).getBaseConditionalDistribution(0);
  distContVar2Class0.setCoeffForParent(var2_interface,2.3);
  ConditionalLinearGaussian distContVar2Class1=(ConditionalLinearGaussian)((BaseDistribution_MultinomialParents)dynamicNB.getConditionalDistributionTimeT(var2)).getBaseConditionalDistribution(1);
  distContVar2Class1.setCoeffForParent(var2_interface,-2.3);
  System.out.println(dynamicNB.getDynamicDAG().toString());
  System.out.println(dynamicNB.toString());
  DynamicBayesianNetworkSampler sampler=new DynamicBayesianNetworkSampler(dynamicNB);
  sampler.setSeed(2);
  DataStream<DynamicDataInstance> data=sampler.sampleToDataBase(10000,10);
  MaximumLikelihoodForDBN.setBatchSize(1000);
  MaximumLikelihoodForDBN.setParallelMode(false);
  Stopwatch watch=Stopwatch.createStarted();
  DynamicBayesianNetwork bnet=MaximumLikelihoodForDBN.learnDynamic(dynamicNB.getDynamicDAG(),data);
  System.out.println(watch.stop());
  System.out.println();
  for (  Variable var : dynamicNB.getDynamicVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + dynamicNB.getConditionalDistributionTimeT(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistributionTimeT(var));
    Assert.assertTrue(bnet.getConditionalDistributionTimeT(var).equalDist(dynamicNB.getConditionalDistributionTimeT(var),0.5));
  }
}","@Test public void testingMLforDBN4() throws IOException, ClassNotFoundException {
  DynamicBayesianNetworkGenerator dbnGenerator=new DynamicBayesianNetworkGenerator();
  dbnGenerator.setNumberOfContinuousVars(2);
  dbnGenerator.setNumberOfDiscreteVars(0);
  dbnGenerator.setNumberOfStates(2);
  DynamicBayesianNetwork dynamicNB=DynamicBayesianNetworkGenerator.generateDynamicNaiveBayes(new Random(1),2,true);
  dynamicNB.randomInitialization(new Random(1));
  Variable classVar=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var1_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar1Class0=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var1)).getNormal_NormalParentsDistribution(0);
  distContVar1Class0.setCoeffForParent(var1_interface,1.3);
  ConditionalLinearGaussian distContVar1Class1=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str""))).getNormal_NormalParentsDistribution(1);
  distContVar1Class1.setCoeffForParent(var1_interface,-1.3);
  Variable var2=dynamicNB.getDynamicDAG().getDynamicVariables().getVariableByName(""String_Node_Str"");
  Variable var2_interface=dynamicNB.getDynamicDAG().getDynamicVariables().getInterfaceVariableByName(""String_Node_Str"");
  ConditionalLinearGaussian distContVar2Class0=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var2)).getNormal_NormalParentsDistribution(0);
  distContVar2Class0.setCoeffForParent(var2_interface,2.3);
  ConditionalLinearGaussian distContVar2Class1=((Normal_MultinomialNormalParents)dynamicNB.getConditionalDistributionTimeT(var2)).getNormal_NormalParentsDistribution(1);
  distContVar2Class1.setCoeffForParent(var2_interface,-2.3);
  System.out.println(dynamicNB.getDynamicDAG().toString());
  System.out.println(dynamicNB.toString());
  DynamicBayesianNetworkSampler sampler=new DynamicBayesianNetworkSampler(dynamicNB);
  sampler.setSeed(2);
  DataStream<DynamicDataInstance> data=sampler.sampleToDataBase(10000,10);
  MaximumLikelihoodForDBN.setBatchSize(1000);
  MaximumLikelihoodForDBN.setParallelMode(false);
  Stopwatch watch=Stopwatch.createStarted();
  DynamicBayesianNetwork bnet=MaximumLikelihoodForDBN.learnDynamic(dynamicNB.getDynamicDAG(),data);
  System.out.println(watch.stop());
  System.out.println();
  for (  Variable var : dynamicNB.getDynamicVariables()) {
    System.out.println(""String_Node_Str"" + var.getName() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + dynamicNB.getConditionalDistributionTimeT(var));
    System.out.println(""String_Node_Str"" + bnet.getConditionalDistributionTimeT(var));
    Assert.assertTrue(bnet.getConditionalDistributionTimeT(var).equalDist(dynamicNB.getConditionalDistributionTimeT(var),0.5));
  }
}",0.9406834300451322
21370,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  iterator.next();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=null;
    if (isOnlyPrediction()) {
      DataOnMemory<DataInstance> batch=monthsMinus12to0.poll();
      StaticVariables vars=new StaticVariables(batch.getAttributes());
      bn=train(batch,vars,vars.getListOfVariables(),this.isDynamicNB());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
      averageAUC+=auc;
    }
 else {
      bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.print(idMonthMinus12 + ""String_Node_Str"" + auc);
      bn.getDAG().getParentSets().stream().filter(p -> p.getNumberOfParents() > 0).forEach(p -> System.out.print(""String_Node_Str"" + p.getMainVar().getName()));
      System.out.println();
      averageAUC+=auc;
    }
    count+=NbrClients;
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  iterator.next();
  for (int i=0; i < 12; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=null;
    if (isOnlyPrediction()) {
      DataOnMemory<DataInstance> batch=monthsMinus12to0.poll();
      StaticVariables vars=new StaticVariables(batch.getAttributes());
      bn=train(batch,vars,vars.getListOfVariables(),this.isDynamicNB());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
      averageAUC+=auc;
    }
 else {
      bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.print(idMonthMinus12 + ""String_Node_Str"" + auc);
      bn.getDAG().getParentSets().stream().filter(p -> p.getNumberOfParents() > 0).forEach(p -> System.out.print(""String_Node_Str"" + p.getMainVar().getName()));
      System.out.println();
      averageAUC+=auc;
    }
    count+=NbrClients;
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.9997391077484998
21371,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  iterator.next();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=null;
    if (isOnlyPrediction()) {
      DataOnMemory<DataInstance> batch=monthsMinus12to0.poll();
      StaticVariables vars=new StaticVariables(batch.getAttributes());
      bn=train(batch,vars,vars.getListOfVariables(),this.isDynamicNB());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
      averageAUC+=auc;
    }
 else {
      bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.print(idMonthMinus12 + ""String_Node_Str"" + auc);
      bn.getDAG().getParentSets().stream().filter(p -> p.getNumberOfParents() > 0).forEach(p -> System.out.print(""String_Node_Str"" + p.getMainVar().getName()));
      System.out.println();
      averageAUC+=auc;
    }
    count+=NbrClients;
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  iterator.next();
  for (int i=0; i < 12; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=null;
    if (isOnlyPrediction()) {
      DataOnMemory<DataInstance> batch=monthsMinus12to0.poll();
      StaticVariables vars=new StaticVariables(batch.getAttributes());
      bn=train(batch,vars,vars.getListOfVariables(),this.isDynamicNB());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
      averageAUC+=auc;
    }
 else {
      bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.print(idMonthMinus12 + ""String_Node_Str"" + auc);
      bn.getDAG().getParentSets().stream().filter(p -> p.getNumberOfParents() > 0).forEach(p -> System.out.print(""String_Node_Str"" + p.getMainVar().getName()));
      System.out.println();
      averageAUC+=auc;
    }
    count+=NbrClients;
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.9997391077484998
21372,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  iterator.next();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=null;
    if (isOnlyPrediction()) {
      DataOnMemory<DataInstance> batch=monthsMinus12to0.poll();
      StaticVariables vars=new StaticVariables(batch.getAttributes());
      bn=train(batch,vars,vars.getListOfVariables(),this.isDynamicNB());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
      averageAUC+=auc;
    }
 else {
      bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.print(idMonthMinus12 + ""String_Node_Str"" + auc);
      bn.getDAG().getParentSets().stream().filter(p -> p.getNumberOfParents() > 0).forEach(p -> System.out.print(""String_Node_Str"" + p.getMainVar().getName()));
      System.out.println();
      averageAUC+=auc;
    }
    count+=NbrClients;
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  iterator.next();
  for (int i=0; i < 12; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=null;
    if (isOnlyPrediction()) {
      DataOnMemory<DataInstance> batch=monthsMinus12to0.poll();
      StaticVariables vars=new StaticVariables(batch.getAttributes());
      bn=train(batch,vars,vars.getListOfVariables(),this.isDynamicNB());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
      averageAUC+=auc;
    }
 else {
      bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.print(idMonthMinus12 + ""String_Node_Str"" + auc);
      bn.getDAG().getParentSets().stream().filter(p -> p.getNumberOfParents() > 0).forEach(p -> System.out.print(""String_Node_Str"" + p.getMainVar().getName()));
      System.out.println();
      averageAUC+=auc;
    }
    count+=NbrClients;
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.9997391077484998
21373,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  iterator.next();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=null;
    if (isOnlyPrediction()) {
      DataOnMemory<DataInstance> batch=monthsMinus12to0.poll();
      StaticVariables vars=new StaticVariables(batch.getAttributes());
      bn=train(batch,vars,vars.getListOfVariables(),this.isDynamicNB());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
      averageAUC+=auc;
    }
 else {
      bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.print(idMonthMinus12 + ""String_Node_Str"" + auc);
      bn.getDAG().getParentSets().stream().filter(p -> p.getNumberOfParents() > 0).forEach(p -> System.out.print(""String_Node_Str"" + p.getMainVar().getName()));
      System.out.println();
      averageAUC+=auc;
    }
    count+=NbrClients;
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  iterator.next();
  for (int i=0; i < 12; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=null;
    if (isOnlyPrediction()) {
      DataOnMemory<DataInstance> batch=monthsMinus12to0.poll();
      StaticVariables vars=new StaticVariables(batch.getAttributes());
      bn=train(batch,vars,vars.getListOfVariables(),this.isDynamicNB());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
      averageAUC+=auc;
    }
 else {
      bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
      double auc=propagateAndTest(monthsMinus12to0,bn);
      System.out.print(idMonthMinus12 + ""String_Node_Str"" + auc);
      bn.getDAG().getParentSets().stream().filter(p -> p.getNumberOfParents() > 0).forEach(p -> System.out.print(""String_Node_Str"" + p.getMainVar().getName()));
      System.out.println();
      averageAUC+=auc;
    }
    count+=NbrClients;
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.9997391077484998
21374,"public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,test(testData,bNet,posteriors,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  return bNet;
}","public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}",0.9131761442441054
21375,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  while (!data.isEmpty()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=data.poll();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (data.isEmpty()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (data.isEmpty()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (!iterator.hasNext()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.2161378059836808
21376,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  BayesianNetwork bNet=null;
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 11; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonth(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.739543057996485
21377,"public BayesianNetwork train(DataOnMemory<DataInstance> data,StaticVariables allVars,List<Variable> SF,boolean includeClassVariablePM){
  DAG dag=new DAG(allVars);
  if (data.getDataInstance(0).getValue(TIME_ID) != 0 && includeClassVariablePM)   dag.getParentSet(classVariable).addParent(classVariable_PM);
  dag.getParentSets().stream().filter(parent -> SF.contains(parent.getMainVar())).filter(w -> w.getMainVar().getVarID() != classVariable.getVarID()).forEach(w -> w.addParent(classVariable));
  StreamingVariationalBayesVMP vmp=new StreamingVariationalBayesVMP();
  vmp.setDAG(dag);
  vmp.setDataStream(data);
  vmp.setWindowsSize(100);
  vmp.runLearning();
  return vmp.getLearntBayesianNetwork();
}","public BayesianNetwork train(DataOnMemory<DataInstance> data,StaticVariables allVars,List<Variable> SF){
  DAG dag=new DAG(allVars);
  if (data.getDataInstance(0).getValue(TIME_ID) != 0)   dag.getParentSet(classVariable).addParent(classVariable_PM);
  dag.getParentSets().stream().filter(parent -> SF.contains(parent.getMainVar())).filter(w -> w.getMainVar().getVarID() != classVariable.getVarID()).forEach(w -> w.addParent(classVariable));
  StreamingVariationalBayesVMP vmp=new StreamingVariationalBayesVMP();
  vmp.setDAG(dag);
  vmp.setDataStream(data);
  vmp.setWindowsSize(100);
  vmp.runLearning();
  return vmp.getLearntBayesianNetwork();
}",0.9578713968957872
21378,"public static void main(String[] args) throws IOException {
  DataStream<DataInstance> data=DataStreamLoader.loadFromFile(""String_Node_Str"");
  for (int i=1; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setUsePRCArea(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNonDeterministic(true);
  }
  wrapperBN wbnet=new wrapperBN();
  wbnet.learnCajamarModel(data);
}","public static void main(String[] args) throws IOException {
  DataStream<DataInstance> data=DataStreamLoader.loadFromFile(""String_Node_Str"");
  for (int i=1; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setUsePRCArea(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNonDeterministic(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNB(true);
  }
  wrapperBN wbnet=new wrapperBN();
  wbnet.learnCajamarModel(data);
}",0.922566371681416
21379,"public BayesianNetwork wrapperBNOneMonthNB(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,testFS(testData,bNet));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  System.out.println(bNet.getDAG().toString());
  return bNet;
}","public BayesianNetwork wrapperBNOneMonthNB(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,testFS(testData,bNet));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  System.out.println(bNet.getDAG().toString());
  return bNet;
}",0.9885570750767512
21380,"public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}","public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}",0.98865836791148
21381,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  boolean firstMonth=true;
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        double classValue_PM=-1;
        if (!firstMonth) {
          bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
          classValue_PM=instance.getValue(classVariable_PM);
          instance.setValue(classVariable_PM,Utils.missingValue());
        }
        vmp.setModel(bn);
        instance.setValue(classVariable,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        if (!firstMonth) {
          instance.setValue(classVariable_PM,classValue_PM);
        }
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    firstMonth=false;
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.3338948787061994
21382,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.827321565617805
21383,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (!iterator.hasNext()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8858631702807195
21384,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.9161538461538462
21385,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (!iterator.hasNext()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8858631702807195
21386,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.9161538461538462
21387,"public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,test(testData,bNet,posteriors,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  return bNet;
}","public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}",0.9131761442441054
21388,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  while (!data.isEmpty()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=data.poll();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (data.isEmpty()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (data.isEmpty()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (!iterator.hasNext()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.2161378059836808
21389,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  BayesianNetwork bNet=null;
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 11; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonth(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.739543057996485
21390,"public BayesianNetwork train(DataOnMemory<DataInstance> data,StaticVariables allVars,List<Variable> SF,boolean includeClassVariablePM){
  DAG dag=new DAG(allVars);
  if (data.getDataInstance(0).getValue(TIME_ID) != 0 && includeClassVariablePM)   dag.getParentSet(classVariable).addParent(classVariable_PM);
  dag.getParentSets().stream().filter(parent -> SF.contains(parent.getMainVar())).filter(w -> w.getMainVar().getVarID() != classVariable.getVarID()).forEach(w -> w.addParent(classVariable));
  StreamingVariationalBayesVMP vmp=new StreamingVariationalBayesVMP();
  vmp.setDAG(dag);
  vmp.setDataStream(data);
  vmp.setWindowsSize(100);
  vmp.runLearning();
  return vmp.getLearntBayesianNetwork();
}","public BayesianNetwork train(DataOnMemory<DataInstance> data,StaticVariables allVars,List<Variable> SF){
  DAG dag=new DAG(allVars);
  if (data.getDataInstance(0).getValue(TIME_ID) != 0)   dag.getParentSet(classVariable).addParent(classVariable_PM);
  dag.getParentSets().stream().filter(parent -> SF.contains(parent.getMainVar())).filter(w -> w.getMainVar().getVarID() != classVariable.getVarID()).forEach(w -> w.addParent(classVariable));
  StreamingVariationalBayesVMP vmp=new StreamingVariationalBayesVMP();
  vmp.setDAG(dag);
  vmp.setDataStream(data);
  vmp.setWindowsSize(100);
  vmp.runLearning();
  return vmp.getLearntBayesianNetwork();
}",0.9578713968957872
21391,"public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,test(testData,bNet,posteriors,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  return bNet;
}","public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}",0.9131761442441054
21392,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  while (!data.isEmpty()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=data.poll();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (data.isEmpty()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (data.isEmpty()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (!iterator.hasNext()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.2161378059836808
21393,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  BayesianNetwork bNet=null;
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 11; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonth(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.739543057996485
21394,"public BayesianNetwork train(DataOnMemory<DataInstance> data,StaticVariables allVars,List<Variable> SF,boolean includeClassVariablePM){
  DAG dag=new DAG(allVars);
  if (data.getDataInstance(0).getValue(TIME_ID) != 0 && includeClassVariablePM)   dag.getParentSet(classVariable).addParent(classVariable_PM);
  dag.getParentSets().stream().filter(parent -> SF.contains(parent.getMainVar())).filter(w -> w.getMainVar().getVarID() != classVariable.getVarID()).forEach(w -> w.addParent(classVariable));
  StreamingVariationalBayesVMP vmp=new StreamingVariationalBayesVMP();
  vmp.setDAG(dag);
  vmp.setDataStream(data);
  vmp.setWindowsSize(100);
  vmp.runLearning();
  return vmp.getLearntBayesianNetwork();
}","public BayesianNetwork train(DataOnMemory<DataInstance> data,StaticVariables allVars,List<Variable> SF){
  DAG dag=new DAG(allVars);
  if (data.getDataInstance(0).getValue(TIME_ID) != 0)   dag.getParentSet(classVariable).addParent(classVariable_PM);
  dag.getParentSets().stream().filter(parent -> SF.contains(parent.getMainVar())).filter(w -> w.getMainVar().getVarID() != classVariable.getVarID()).forEach(w -> w.addParent(classVariable));
  StreamingVariationalBayesVMP vmp=new StreamingVariationalBayesVMP();
  vmp.setDAG(dag);
  vmp.setDataStream(data);
  vmp.setWindowsSize(100);
  vmp.runLearning();
  return vmp.getLearntBayesianNetwork();
}",0.9578713968957872
21395,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (!iterator.hasNext()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.8858631702807195
21396,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.9161538461538462
21397,"public static void main(String[] args) throws IOException {
  DataStream<DataInstance> data=DataStreamLoader.loadFromFile(""String_Node_Str"");
  for (int i=1; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setUsePRCArea(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNonDeterministic(true);
  }
  wrapperBN wbnet=new wrapperBN();
  wbnet.learnCajamarModel(data);
}","public static void main(String[] args) throws IOException {
  DataStream<DataInstance> data=DataStreamLoader.loadFromFile(""String_Node_Str"");
  for (int i=1; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setUsePRCArea(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNonDeterministic(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNB(true);
  }
  wrapperBN wbnet=new wrapperBN();
  wbnet.learnCajamarModel(data);
}",0.922566371681416
21398,"public BayesianNetwork wrapperBNOneMonthNB(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,testFS(testData,bNet));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  System.out.println(bNet.getDAG().toString());
  return bNet;
}","public BayesianNetwork wrapperBNOneMonthNB(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,testFS(testData,bNet));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  System.out.println(bNet.getDAG().toString());
  return bNet;
}",0.9885570750767512
21399,"public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}","public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}",0.98865836791148
21400,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  boolean firstMonth=true;
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        double classValue_PM=-1;
        if (!firstMonth) {
          bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
          classValue_PM=instance.getValue(classVariable_PM);
          instance.setValue(classVariable_PM,Utils.missingValue());
        }
        vmp.setModel(bn);
        instance.setValue(classVariable,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        if (!firstMonth) {
          instance.setValue(classVariable_PM,classValue_PM);
        }
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    firstMonth=false;
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.3338948787061994
21401,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.827321565617805
21402,"public static void main(String[] args) throws IOException {
  DataStream<DataInstance> data=DataStreamLoader.loadFromFile(""String_Node_Str"");
  for (int i=1; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setUsePRCArea(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNonDeterministic(true);
  }
  wrapperBN wbnet=new wrapperBN();
  wbnet.learnCajamarModel(data);
}","public static void main(String[] args) throws IOException {
  DataStream<DataInstance> data=DataStreamLoader.loadFromFile(""String_Node_Str"");
  for (int i=1; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setUsePRCArea(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNonDeterministic(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNB(true);
  }
  wrapperBN wbnet=new wrapperBN();
  wbnet.learnCajamarModel(data);
}",0.922566371681416
21403,"public BayesianNetwork wrapperBNOneMonthNB(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,testFS(testData,bNet));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  System.out.println(bNet.getDAG().toString());
  return bNet;
}","public BayesianNetwork wrapperBNOneMonthNB(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,testFS(testData,bNet));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  System.out.println(bNet.getDAG().toString());
  return bNet;
}",0.9885570750767512
21404,"public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}","public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}",0.98865836791148
21405,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  boolean firstMonth=true;
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        double classValue_PM=-1;
        if (!firstMonth) {
          bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
          classValue_PM=instance.getValue(classVariable_PM);
          instance.setValue(classVariable_PM,Utils.missingValue());
        }
        vmp.setModel(bn);
        instance.setValue(classVariable,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        if (!firstMonth) {
          instance.setValue(classVariable_PM,classValue_PM);
        }
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    firstMonth=false;
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.3338948787061994
21406,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.827321565617805
21407,"public static void main(String[] args) throws IOException {
  DataStream<DataInstance> data=DataStreamLoader.loadFromFile(""String_Node_Str"");
  for (int i=1; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setUsePRCArea(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNonDeterministic(true);
  }
  wrapperBN wbnet=new wrapperBN();
  wbnet.learnCajamarModel(data);
}","public static void main(String[] args) throws IOException {
  DataStream<DataInstance> data=DataStreamLoader.loadFromFile(""String_Node_Str"");
  for (int i=1; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setUsePRCArea(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNonDeterministic(true);
    if (args[i].equalsIgnoreCase(""String_Node_Str""))     setNB(true);
  }
  wrapperBN wbnet=new wrapperBN();
  wbnet.learnCajamarModel(data);
}",0.922566371681416
21408,"public BayesianNetwork wrapperBNOneMonthNB(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,testFS(testData,bNet));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  System.out.println(bNet.getDAG().toString());
  return bNet;
}","public BayesianNetwork wrapperBNOneMonthNB(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,testFS(testData,bNet));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  System.out.println(bNet.getDAG().toString());
  return bNet;
}",0.9885570750767512
21409,"public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}","public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}",0.98865836791148
21410,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  boolean firstMonth=true;
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        double classValue_PM=-1;
        if (!firstMonth) {
          bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
          classValue_PM=instance.getValue(classVariable_PM);
          instance.setValue(classVariable_PM,Utils.missingValue());
        }
        vmp.setModel(bn);
        instance.setValue(classVariable,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        if (!firstMonth) {
          instance.setValue(classVariable_PM,classValue_PM);
        }
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
    firstMonth=false;
    if (!iterator.hasNext()) {
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      if (usePRCArea)       return ThresholdCurve.getPRCArea(tcurve);
 else       return ThresholdCurve.getROCArea(tcurve);
    }
    if (currentMonthIndex == 0)     bn.getDAG().getParentSet(classVariable).addParent(classVariable_PM);
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.3338948787061994
21411,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=0;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  while (iterator.hasNext()) {
    int idMonthMinus12=(int)monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID);
    BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.poll());
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(idMonthMinus12 + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.827321565617805
21412,"public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF,false);
  System.out.println(bNet.toString());
  double score=testFS(testData,bNet);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF,false);
      scores.put(V,test(testData,bNet,posteriors,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF,true);
  return bNet;
}","public BayesianNetwork wrapperBNOneMonth(DataOnMemory<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  List<DataOnMemory<DataInstance>> splitData=this.splitTrainAndTest(data,66.0);
  DataOnMemory<DataInstance> trainingData=splitData.get(0);
  DataOnMemory<DataInstance> testData=splitData.get(1);
  List<Variable> NSF=new ArrayList<>(Vars.getListOfVariables());
  NSF.remove(classVariable);
  NSF.remove(classVariable_PM);
  int nbrNSF=NSF.size();
  List<Variable> SF=new ArrayList();
  Boolean stop=false;
  BayesianNetwork bNet=train(trainingData,Vars,SF);
  System.out.println(bNet.toString());
  double score=test(testData,bNet,posteriorsGlobal,false);
  int cont=0;
  while (nbrNSF > 0 && stop == false) {
    System.out.print(cont + ""String_Node_Str"" + score+ ""String_Node_Str""+ SF.size()+ ""String_Node_Str"");
    SF.stream().forEach(v -> System.out.print(v.getName() + ""String_Node_Str""));
    System.out.println();
    Map<Variable,Double> scores=new HashMap<>();
    for (    Variable V : NSF) {
      if (V.getVarID() > 5)       break;
      System.out.println(""String_Node_Str"" + V.getName());
      SF.add(V);
      bNet=train(trainingData,Vars,SF);
      scores.put(V,test(testData,bNet,posteriorsGlobal,false));
      SF.remove(V);
    }
    double maxScore=(Collections.max(scores.values()));
    if (maxScore - score > 0.001) {
      score=maxScore;
      for (      Map.Entry<Variable,Double> entry : scores.entrySet()) {
        if (entry.getValue() == maxScore) {
          Variable SelectedV=entry.getKey();
          SF.add(SelectedV);
          NSF.remove(SelectedV);
          break;
        }
      }
      nbrNSF=nbrNSF - 1;
    }
 else {
      stop=true;
    }
    cont++;
  }
  bNet=train(data,Vars,SF);
  test(data,bNet,posteriorsGlobal,true);
  return bNet;
}",0.9131761442441054
21413,"public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  while (!data.isEmpty()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=data.poll();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (data.isEmpty()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (data.isEmpty()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public double propagateAndTest(Queue<DataOnMemory<DataInstance>> data,BayesianNetwork bn){
  HashMap<Integer,Multinomial> posteriors=new HashMap<>();
  InferenceAlgorithmForBN vmp=new VMP();
  ArrayList<Prediction> predictions=new ArrayList<>();
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterator<DataOnMemory<DataInstance>> iterator=data.iterator();
  while (iterator.hasNext()) {
    Prediction prediction=null;
    Multinomial posterior=null;
    DataOnMemory<DataInstance> batch=iterator.next();
    int currentMonthIndex=(int)batch.getDataInstance(0).getValue(TIME_ID);
    for (    DataInstance instance : batch) {
      int clientID=(int)instance.getValue(SEQUENCE_ID);
      double classValue=instance.getValue(classVariable);
      if (!nonDeterministic && (defaultingClients.get(clientID) != null) && (defaultingClients.get(clientID) - currentMonthIndex >= 12)) {
        prediction=new NominalPrediction(classValue,new double[]{0.0,1.0});
        posterior=new Multinomial(classVariable);
        posterior.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        posterior.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.0);
      }
 else {
        bn.setConditionalDistribution(classVariable_PM,posteriors.get(clientID));
        vmp.setModel(bn);
        double classValue_PM=instance.getValue(classVariable_PM);
        instance.setValue(classVariable,Utils.missingValue());
        instance.setValue(classVariable_PM,Utils.missingValue());
        vmp.setEvidence(instance);
        vmp.runInference();
        posterior=vmp.getPosterior(classVariable);
        instance.setValue(classVariable,classValue);
        instance.setValue(classVariable_PM,classValue_PM);
        if (!iterator.hasNext()) {
          prediction=new NominalPrediction(classValue,posterior.getProbabilities());
          predictions.add(prediction);
        }
      }
      if (classValue == DEFAULTER_VALUE_INDEX) {
        defaultingClients.putIfAbsent(clientID,currentMonthIndex);
      }
      if (!iterator.hasNext()) {
        ThresholdCurve thresholdCurve=new ThresholdCurve();
        Instances tcurve=thresholdCurve.getCurve(predictions);
        if (usePRCArea)         return ThresholdCurve.getPRCArea(tcurve);
 else         return ThresholdCurve.getROCArea(tcurve);
      }
      Multinomial multi_PM=posterior.toEFUnivariateDistribution().deepCopy(classVariable_PM).toUnivariateDistribution();
      if (classValue == DEFAULTER_VALUE_INDEX) {
        multi_PM.setProbabilityOfState(DEFAULTER_VALUE_INDEX,1.0);
        multi_PM.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0);
      }
      posteriors.put(clientID,multi_PM);
    }
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.2161378059836808
21414,"void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  BayesianNetwork bNet=null;
  for (int i=0; i < NbrClients; i++) {
    Multinomial uniform=new Multinomial(classVariable_PM);
    uniform.setProbabilityOfState(DEFAULTER_VALUE_INDEX,0.5);
    uniform.setProbabilityOfState(NON_DEFAULTER_VALUE_INDEX,0.5);
    posteriors.put(i,uniform);
  }
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 11; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonth(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}","void learnCajamarModel(DataStream<DataInstance> data){
  StaticVariables Vars=new StaticVariables(data.getAttributes());
  classVariable=Vars.getVariableById(Vars.getNumberOfVars() - 1);
  classVariable_PM=Vars.getVariableById(Vars.getNumberOfVars() - 2);
  TIME_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  SEQUENCE_ID=data.getAttributes().getAttributeByName(""String_Node_Str"");
  int count=NbrClients;
  double averageAUC=0;
  Iterable<DataOnMemory<DataInstance>> iteratable=data.iterableOverBatches(NbrClients);
  Iterator<DataOnMemory<DataInstance>> iterator=iteratable.iterator();
  Queue<DataOnMemory<DataInstance>> monthsMinus12to0=new LinkedList<>();
  for (int i=0; i < 2; i++) {
    monthsMinus12to0.add(iterator.next());
  }
  BayesianNetwork bn=wrapperBNOneMonthNB(monthsMinus12to0.peek());
  while (iterator.hasNext()) {
    DataOnMemory<DataInstance> currentMonth=iterator.next();
    monthsMinus12to0.add(currentMonth);
    double auc=propagateAndTest(monthsMinus12to0,bn);
    System.out.println(monthsMinus12to0.peek().getDataInstance(0).getValue(TIME_ID) + ""String_Node_Str"" + auc);
    averageAUC+=auc;
    count+=NbrClients;
    monthsMinus12to0.remove();
  }
  System.out.println(""String_Node_Str"" + averageAUC / (count / NbrClients));
}",0.739543057996485
21415,"public BayesianNetwork train(DataOnMemory<DataInstance> data,StaticVariables allVars,List<Variable> SF,boolean includeClassVariablePM){
  DAG dag=new DAG(allVars);
  if (data.getDataInstance(0).getValue(TIME_ID) != 0 && includeClassVariablePM)   dag.getParentSet(classVariable).addParent(classVariable_PM);
  dag.getParentSets().stream().filter(parent -> SF.contains(parent.getMainVar())).filter(w -> w.getMainVar().getVarID() != classVariable.getVarID()).forEach(w -> w.addParent(classVariable));
  StreamingVariationalBayesVMP vmp=new StreamingVariationalBayesVMP();
  vmp.setDAG(dag);
  vmp.setDataStream(data);
  vmp.setWindowsSize(100);
  vmp.runLearning();
  return vmp.getLearntBayesianNetwork();
}","public BayesianNetwork train(DataOnMemory<DataInstance> data,StaticVariables allVars,List<Variable> SF){
  DAG dag=new DAG(allVars);
  if (data.getDataInstance(0).getValue(TIME_ID) != 0)   dag.getParentSet(classVariable).addParent(classVariable_PM);
  dag.getParentSets().stream().filter(parent -> SF.contains(parent.getMainVar())).filter(w -> w.getMainVar().getVarID() != classVariable.getVarID()).forEach(w -> w.addParent(classVariable));
  StreamingVariationalBayesVMP vmp=new StreamingVariationalBayesVMP();
  vmp.setDAG(dag);
  vmp.setDataStream(data);
  vmp.setWindowsSize(100);
  vmp.runLearning();
  return vmp.getLearntBayesianNetwork();
}",0.9578713968957872
21416,"public void trainOnInstanceImplDynamic(Instance inst){
  if (firstInstanceForBatch != null) {
    batch_.add(firstInstanceForBatch);
    count_++;
    firstInstanceForBatch=null;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(inst));
  if (count_ < windowSize_ && (int)dataInstance.getValue(TIME_ID) == currentTimeID) {
    batch_.add(dataInstance);
    count_++;
  }
 else {
    boolean isNewSeq=false;
    count_=0;
    GaussianHiddenTransitionMethod transitionMethod=nb_.getSvb().getTransitionMethod();
    if ((int)dataInstance.getValue(TIME_ID) == currentTimeID) {
      transitionMethod.setTransitionVariance(0.0);
    }
 else {
      transitionMethod.setTransitionVariance(this.getTransitionVariance_());
      isNewSeq=true;
    }
    firstInstanceForBatch=dataInstance;
    currentTimeID=(int)dataInstance.getValue(TIME_ID);
    double[] stats=computeAccuracyAndAUC(nb_.getLearntBayesianNetwork(),batch_);
    double batchAccuracy=stats[0];
    double batchPRC=stats[1];
    double batchROC=stats[2];
    accPerSeq+=batchAccuracy * batch_.getNumberOfDataInstances();
    prcPerSeq+=batchPRC * batch_.getNumberOfDataInstances();
    rocPerSeq+=batchROC * batch_.getNumberOfDataInstances();
    nbatch+=windowSize_;
    sizePerSeq+=batch_.getNumberOfDataInstances();
    nb_.updateModel(batch_);
    batch_=new DataOnMemoryListContainer(attributes_);
    learntBN_=nb_.getLearntBayesianNetwork();
    for (int i=0; i < nb_.getHiddenVars().size(); i++) {
      Normal normal=nb_.getSvb().getPlateuStructure().getEFVariablePosterior(nb_.getHiddenVars().get(i),0).toUnivariateDistribution();
      meanHiddenVars[i]+=normal.getMean();
    }
    if (isNewSeq) {
      System.out.print(sizePerSeq);
      for (int i=0; i < nb_.getHiddenVars().size(); i++) {
        System.out.print(""String_Node_Str"" + meanHiddenVars[i]);
        meanHiddenVars[i]=0;
      }
      System.out.print(""String_Node_Str"" + accPerSeq / sizePerSeq + ""String_Node_Str"" + prcPerSeq / sizePerSeq + ""String_Node_Str"" + rocPerSeq / sizePerSeq);
      System.out.println();
      accPerSeq=0.0;
      prcPerSeq=0.0;
      rocPerSeq=0.0;
      sizePerSeq=0;
    }
  }
}","public void trainOnInstanceImplDynamic(Instance inst){
  if (firstInstanceForBatch != null) {
    batch_.add(firstInstanceForBatch);
    count_++;
    firstInstanceForBatch=null;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(inst));
  if (count_ < windowSize_ && (int)dataInstance.getValue(TIME_ID) == currentTimeID) {
    batch_.add(dataInstance);
    count_++;
  }
 else {
    boolean isNewSeq=false;
    count_=0;
    GaussianHiddenTransitionMethod transitionMethod=nb_.getSvb().getTransitionMethod();
    if ((int)dataInstance.getValue(TIME_ID) == currentTimeID) {
      transitionMethod.setTransitionVariance(0.0);
    }
 else {
      transitionMethod.setTransitionVariance(this.getTransitionVariance_());
      isNewSeq=true;
    }
    firstInstanceForBatch=dataInstance;
    currentTimeID=(int)dataInstance.getValue(TIME_ID);
    double batchAccuracy=computeAccuracyAndRecordPrediction(nb_.getLearntBayesianNetwork(),batch_);
    accPerSeq+=batchAccuracy * batch_.getNumberOfDataInstances();
    nbatch+=windowSize_;
    sizePerSeq+=batch_.getNumberOfDataInstances();
    nb_.updateModel(batch_);
    batch_=new DataOnMemoryListContainer(attributes_);
    learntBN_=nb_.getLearntBayesianNetwork();
    for (int i=0; i < nb_.getHiddenVars().size(); i++) {
      Normal normal=nb_.getSvb().getPlateuStructure().getEFVariablePosterior(nb_.getHiddenVars().get(i),0).toUnivariateDistribution();
      meanHiddenVars[i]+=normal.getMean();
    }
    if (isNewSeq) {
      System.out.print(sizePerSeq);
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      for (int i=0; i < nb_.getHiddenVars().size(); i++) {
        System.out.print(""String_Node_Str"" + meanHiddenVars[i]);
        meanHiddenVars[i]=0;
      }
      System.out.print(""String_Node_Str"" + accPerSeq / sizePerSeq + ""String_Node_Str"" + ThresholdCurve.getPRCArea(tcurve) + ""String_Node_Str"" + ThresholdCurve.getROCArea(tcurve));
      System.out.println();
      predictions=new ArrayList<>();
      accPerSeq=0.0;
      sizePerSeq=0;
    }
  }
}",0.4355368026254102
21417,"public void trainOnInstanceImplDynamic(Instance inst){
  if (firstInstanceForBatch != null) {
    batch_.add(firstInstanceForBatch);
    count_++;
    firstInstanceForBatch=null;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(inst));
  if (count_ < windowSize_ && (int)dataInstance.getValue(TIME_ID) == currentTimeID) {
    batch_.add(dataInstance);
    count_++;
  }
 else {
    boolean isNewSeq=false;
    count_=0;
    GaussianHiddenTransitionMethod transitionMethod=nb_.getSvb().getTransitionMethod();
    if ((int)dataInstance.getValue(TIME_ID) == currentTimeID) {
      transitionMethod.setTransitionVariance(0.0);
    }
 else {
      transitionMethod.setTransitionVariance(this.getTransitionVariance_());
      isNewSeq=true;
    }
    firstInstanceForBatch=dataInstance;
    currentTimeID=(int)dataInstance.getValue(TIME_ID);
    double[] stats=computeAccuracyAndAUC(nb_.getLearntBayesianNetwork(),batch_);
    double batchAccuracy=stats[0];
    double batchPRC=stats[1];
    double batchROC=stats[2];
    accPerSeq+=batchAccuracy * batch_.getNumberOfDataInstances();
    prcPerSeq+=batchPRC * batch_.getNumberOfDataInstances();
    rocPerSeq+=batchROC * batch_.getNumberOfDataInstances();
    nbatch+=windowSize_;
    sizePerSeq+=batch_.getNumberOfDataInstances();
    nb_.updateModel(batch_);
    batch_=new DataOnMemoryListContainer(attributes_);
    learntBN_=nb_.getLearntBayesianNetwork();
    for (int i=0; i < nb_.getHiddenVars().size(); i++) {
      Normal normal=nb_.getSvb().getPlateuStructure().getEFVariablePosterior(nb_.getHiddenVars().get(i),0).toUnivariateDistribution();
      meanHiddenVars[i]+=normal.getMean();
    }
    if (isNewSeq) {
      System.out.print(sizePerSeq);
      for (int i=0; i < nb_.getHiddenVars().size(); i++) {
        System.out.print(""String_Node_Str"" + meanHiddenVars[i]);
        meanHiddenVars[i]=0;
      }
      System.out.print(""String_Node_Str"" + accPerSeq / sizePerSeq + ""String_Node_Str"" + prcPerSeq / sizePerSeq + ""String_Node_Str"" + rocPerSeq / sizePerSeq);
      System.out.println();
      accPerSeq=0.0;
      prcPerSeq=0.0;
      rocPerSeq=0.0;
      sizePerSeq=0;
    }
  }
}","public void trainOnInstanceImplDynamic(Instance inst){
  if (firstInstanceForBatch != null) {
    batch_.add(firstInstanceForBatch);
    count_++;
    firstInstanceForBatch=null;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(inst));
  if (count_ < windowSize_ && (int)dataInstance.getValue(TIME_ID) == currentTimeID) {
    batch_.add(dataInstance);
    count_++;
  }
 else {
    boolean isNewSeq=false;
    count_=0;
    GaussianHiddenTransitionMethod transitionMethod=nb_.getSvb().getTransitionMethod();
    if ((int)dataInstance.getValue(TIME_ID) == currentTimeID) {
      transitionMethod.setTransitionVariance(0.0);
    }
 else {
      transitionMethod.setTransitionVariance(this.getTransitionVariance_());
      isNewSeq=true;
    }
    firstInstanceForBatch=dataInstance;
    currentTimeID=(int)dataInstance.getValue(TIME_ID);
    double batchAccuracy=computeAccuracyAndRecordPrediction(nb_.getLearntBayesianNetwork(),batch_);
    accPerSeq+=batchAccuracy * batch_.getNumberOfDataInstances();
    nbatch+=windowSize_;
    sizePerSeq+=batch_.getNumberOfDataInstances();
    nb_.updateModel(batch_);
    batch_=new DataOnMemoryListContainer(attributes_);
    learntBN_=nb_.getLearntBayesianNetwork();
    for (int i=0; i < nb_.getHiddenVars().size(); i++) {
      Normal normal=nb_.getSvb().getPlateuStructure().getEFVariablePosterior(nb_.getHiddenVars().get(i),0).toUnivariateDistribution();
      meanHiddenVars[i]+=normal.getMean();
    }
    if (isNewSeq) {
      System.out.print(sizePerSeq);
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      for (int i=0; i < nb_.getHiddenVars().size(); i++) {
        System.out.print(""String_Node_Str"" + meanHiddenVars[i]);
        meanHiddenVars[i]=0;
      }
      System.out.print(""String_Node_Str"" + accPerSeq / sizePerSeq + ""String_Node_Str"" + ThresholdCurve.getPRCArea(tcurve) + ""String_Node_Str"" + ThresholdCurve.getROCArea(tcurve));
      System.out.println();
      predictions=new ArrayList<>();
      accPerSeq=0.0;
      sizePerSeq=0;
    }
  }
}",0.4355368026254102
21418,"public void trainOnInstanceImplDynamic(Instance inst){
  if (firstInstanceForBatch != null) {
    batch_.add(firstInstanceForBatch);
    count_++;
    firstInstanceForBatch=null;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(inst));
  if (count_ < windowSize_ && (int)dataInstance.getValue(TIME_ID) == currentTimeID) {
    batch_.add(dataInstance);
    count_++;
  }
 else {
    boolean isNewSeq=false;
    count_=0;
    GaussianHiddenTransitionMethod transitionMethod=nb_.getSvb().getTransitionMethod();
    if ((int)dataInstance.getValue(TIME_ID) == currentTimeID) {
      transitionMethod.setTransitionVariance(0.0);
    }
 else {
      transitionMethod.setTransitionVariance(this.getTransitionVariance_());
      isNewSeq=true;
    }
    firstInstanceForBatch=dataInstance;
    currentTimeID=(int)dataInstance.getValue(TIME_ID);
    double[] stats=computeAccuracyAndAUC(nb_.getLearntBayesianNetwork(),batch_);
    double batchAccuracy=stats[0];
    double batchPRC=stats[1];
    double batchROC=stats[2];
    accPerSeq+=batchAccuracy * batch_.getNumberOfDataInstances();
    prcPerSeq+=batchPRC * batch_.getNumberOfDataInstances();
    rocPerSeq+=batchROC * batch_.getNumberOfDataInstances();
    nbatch+=windowSize_;
    sizePerSeq+=batch_.getNumberOfDataInstances();
    nb_.updateModel(batch_);
    batch_=new DataOnMemoryListContainer(attributes_);
    learntBN_=nb_.getLearntBayesianNetwork();
    for (int i=0; i < nb_.getHiddenVars().size(); i++) {
      Normal normal=nb_.getSvb().getPlateuStructure().getEFVariablePosterior(nb_.getHiddenVars().get(i),0).toUnivariateDistribution();
      meanHiddenVars[i]+=normal.getMean();
    }
    if (isNewSeq) {
      System.out.print(sizePerSeq);
      for (int i=0; i < nb_.getHiddenVars().size(); i++) {
        System.out.print(""String_Node_Str"" + meanHiddenVars[i]);
        meanHiddenVars[i]=0;
      }
      System.out.print(""String_Node_Str"" + accPerSeq / sizePerSeq + ""String_Node_Str"" + prcPerSeq / sizePerSeq + ""String_Node_Str"" + rocPerSeq / sizePerSeq);
      System.out.println();
      accPerSeq=0.0;
      prcPerSeq=0.0;
      rocPerSeq=0.0;
      sizePerSeq=0;
    }
  }
}","public void trainOnInstanceImplDynamic(Instance inst){
  if (firstInstanceForBatch != null) {
    batch_.add(firstInstanceForBatch);
    count_++;
    firstInstanceForBatch=null;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(inst));
  if (count_ < windowSize_ && (int)dataInstance.getValue(TIME_ID) == currentTimeID) {
    batch_.add(dataInstance);
    count_++;
  }
 else {
    boolean isNewSeq=false;
    count_=0;
    GaussianHiddenTransitionMethod transitionMethod=nb_.getSvb().getTransitionMethod();
    if ((int)dataInstance.getValue(TIME_ID) == currentTimeID) {
      transitionMethod.setTransitionVariance(0.0);
    }
 else {
      transitionMethod.setTransitionVariance(this.getTransitionVariance_());
      isNewSeq=true;
    }
    firstInstanceForBatch=dataInstance;
    currentTimeID=(int)dataInstance.getValue(TIME_ID);
    double batchAccuracy=computeAccuracyAndRecordPrediction(nb_.getLearntBayesianNetwork(),batch_);
    accPerSeq+=batchAccuracy * batch_.getNumberOfDataInstances();
    nbatch+=windowSize_;
    sizePerSeq+=batch_.getNumberOfDataInstances();
    nb_.updateModel(batch_);
    batch_=new DataOnMemoryListContainer(attributes_);
    learntBN_=nb_.getLearntBayesianNetwork();
    for (int i=0; i < nb_.getHiddenVars().size(); i++) {
      Normal normal=nb_.getSvb().getPlateuStructure().getEFVariablePosterior(nb_.getHiddenVars().get(i),0).toUnivariateDistribution();
      meanHiddenVars[i]+=normal.getMean();
    }
    if (isNewSeq) {
      System.out.print(sizePerSeq);
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      for (int i=0; i < nb_.getHiddenVars().size(); i++) {
        System.out.print(""String_Node_Str"" + meanHiddenVars[i]);
        meanHiddenVars[i]=0;
      }
      System.out.print(""String_Node_Str"" + accPerSeq / sizePerSeq + ""String_Node_Str"" + ThresholdCurve.getPRCArea(tcurve) + ""String_Node_Str"" + ThresholdCurve.getROCArea(tcurve));
      System.out.println();
      predictions=new ArrayList<>();
      accPerSeq=0.0;
      sizePerSeq=0;
    }
  }
}",0.4355368026254102
21419,"public void trainOnInstanceImplDynamic(Instance inst){
  if (firstInstanceForBatch != null) {
    batch_.add(firstInstanceForBatch);
    count_++;
    firstInstanceForBatch=null;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(inst));
  if (count_ < windowSize_ && (int)dataInstance.getValue(TIME_ID) == currentTimeID) {
    batch_.add(dataInstance);
    count_++;
  }
 else {
    boolean isNewSeq=false;
    count_=0;
    GaussianHiddenTransitionMethod transitionMethod=nb_.getSvb().getTransitionMethod();
    if ((int)dataInstance.getValue(TIME_ID) == currentTimeID) {
      transitionMethod.setTransitionVariance(0.0);
    }
 else {
      transitionMethod.setTransitionVariance(this.getTransitionVariance_());
      isNewSeq=true;
    }
    firstInstanceForBatch=dataInstance;
    currentTimeID=(int)dataInstance.getValue(TIME_ID);
    double[] stats=computeAccuracyAndAUC(nb_.getLearntBayesianNetwork(),batch_);
    double batchAccuracy=stats[0];
    double batchPRC=stats[1];
    double batchROC=stats[2];
    accPerSeq+=batchAccuracy * batch_.getNumberOfDataInstances();
    prcPerSeq+=batchPRC * batch_.getNumberOfDataInstances();
    rocPerSeq+=batchROC * batch_.getNumberOfDataInstances();
    nbatch+=windowSize_;
    sizePerSeq+=batch_.getNumberOfDataInstances();
    nb_.updateModel(batch_);
    batch_=new DataOnMemoryListContainer(attributes_);
    learntBN_=nb_.getLearntBayesianNetwork();
    for (int i=0; i < nb_.getHiddenVars().size(); i++) {
      Normal normal=nb_.getSvb().getPlateuStructure().getEFVariablePosterior(nb_.getHiddenVars().get(i),0).toUnivariateDistribution();
      meanHiddenVars[i]+=normal.getMean();
    }
    if (isNewSeq) {
      System.out.print(sizePerSeq);
      for (int i=0; i < nb_.getHiddenVars().size(); i++) {
        System.out.print(""String_Node_Str"" + meanHiddenVars[i]);
        meanHiddenVars[i]=0;
      }
      System.out.print(""String_Node_Str"" + accPerSeq / sizePerSeq + ""String_Node_Str"" + prcPerSeq / sizePerSeq + ""String_Node_Str"" + rocPerSeq / sizePerSeq);
      System.out.println();
      accPerSeq=0.0;
      prcPerSeq=0.0;
      rocPerSeq=0.0;
      sizePerSeq=0;
    }
  }
}","public void trainOnInstanceImplDynamic(Instance inst){
  if (firstInstanceForBatch != null) {
    batch_.add(firstInstanceForBatch);
    count_++;
    firstInstanceForBatch=null;
  }
  DataInstance dataInstance=new DataInstanceImpl(new DataRowWeka(inst));
  if (count_ < windowSize_ && (int)dataInstance.getValue(TIME_ID) == currentTimeID) {
    batch_.add(dataInstance);
    count_++;
  }
 else {
    boolean isNewSeq=false;
    count_=0;
    GaussianHiddenTransitionMethod transitionMethod=nb_.getSvb().getTransitionMethod();
    if ((int)dataInstance.getValue(TIME_ID) == currentTimeID) {
      transitionMethod.setTransitionVariance(0.0);
    }
 else {
      transitionMethod.setTransitionVariance(this.getTransitionVariance_());
      isNewSeq=true;
    }
    firstInstanceForBatch=dataInstance;
    currentTimeID=(int)dataInstance.getValue(TIME_ID);
    double batchAccuracy=computeAccuracyAndRecordPrediction(nb_.getLearntBayesianNetwork(),batch_);
    accPerSeq+=batchAccuracy * batch_.getNumberOfDataInstances();
    nbatch+=windowSize_;
    sizePerSeq+=batch_.getNumberOfDataInstances();
    nb_.updateModel(batch_);
    batch_=new DataOnMemoryListContainer(attributes_);
    learntBN_=nb_.getLearntBayesianNetwork();
    for (int i=0; i < nb_.getHiddenVars().size(); i++) {
      Normal normal=nb_.getSvb().getPlateuStructure().getEFVariablePosterior(nb_.getHiddenVars().get(i),0).toUnivariateDistribution();
      meanHiddenVars[i]+=normal.getMean();
    }
    if (isNewSeq) {
      System.out.print(sizePerSeq);
      ThresholdCurve thresholdCurve=new ThresholdCurve();
      Instances tcurve=thresholdCurve.getCurve(predictions);
      for (int i=0; i < nb_.getHiddenVars().size(); i++) {
        System.out.print(""String_Node_Str"" + meanHiddenVars[i]);
        meanHiddenVars[i]=0;
      }
      System.out.print(""String_Node_Str"" + accPerSeq / sizePerSeq + ""String_Node_Str"" + ThresholdCurve.getPRCArea(tcurve) + ""String_Node_Str"" + ThresholdCurve.getROCArea(tcurve));
      System.out.println();
      predictions=new ArrayList<>();
      accPerSeq=0.0;
      sizePerSeq=0;
    }
  }
}",0.4355368026254102
21420,"@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedParameters){
  List<Distribution> distributionList=new ArrayList<>();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalLearningDistribution learningDistribution=(EF_ConditionalLearningDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedParameters);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}","@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedParameters){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalLearningDistribution learningDistribution=(EF_ConditionalLearningDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedParameters);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}",0.9988358556461
21421,"@Override public double getExpectedLogNormalizer(Map<Variable,MomentParameters> momentParents){
  int nConf=MultinomialIndex.getNumberOfPossibleAssignments(this.multinomialParents);
  double expectedLogNormalizer=0;
  for (int i=0; i < nConf; i++) {
    double[] assignment=MultinomialIndex.getVariableArrayAssignmentFromIndex(this.multinomialParents,i);
    double momentValue=1;
    for (int j=0; j < assignment.length; j++) {
      momentValue*=momentParents.get(this.multinomialParents.get(j)).get((int)assignment[j]);
    }
    double partialLogNormalizer=0;
    if (this.isBaseConditionalDistribution) {
      partialLogNormalizer=this.getBaseEFConditionalDistribution(i).getExpectedLogNormalizer(momentParents);
    }
 else {
      partialLogNormalizer=this.getBaseEFUnivariateDistribution(i).computeLogNormalizer();
    }
    expectedLogNormalizer+=momentValue * partialLogNormalizer;
  }
  return expectedLogNormalizer;
}","@Override public double getExpectedLogNormalizer(Map<Variable,MomentParameters> momentParents){
  int nConf=MultinomialIndex.getNumberOfPossibleAssignments(this.multinomialParents);
  double expectedLogNormalizer=0;
  for (int i=0; i < nConf; i++) {
    double[] assignment=MultinomialIndex.getVariableArrayAssignmentFromIndex(this.multinomialParents,i);
    double momentValue=1;
    for (int j=0; j < assignment.length; j++) {
      momentValue*=momentParents.get(this.multinomialParents.get(j)).get((int)assignment[j]);
    }
    if (momentValue == 0)     continue;
    double partialLogNormalizer=0;
    if (this.isBaseConditionalDistribution) {
      partialLogNormalizer=this.getBaseEFConditionalDistribution(i).getExpectedLogNormalizer(momentParents);
    }
 else {
      partialLogNormalizer=this.getBaseEFUnivariateDistribution(i).computeLogNormalizer();
    }
    expectedLogNormalizer+=momentValue * partialLogNormalizer;
  }
  return expectedLogNormalizer;
}",0.9789473684210528
21422,"public double computeELBO(){
  Map<Variable,MomentParameters> momentParents=this.getMomentParents();
  double elbo=0;
  NaturalParameters expectedNatural=this.PDist.getExpectedNaturalFromParents(momentParents);
  if (!isObserved()) {
    expectedNatural.substract(this.QDist.getNaturalParameters());
    elbo+=expectedNatural.dotProduct(this.QDist.getMomentParameters());
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.QDist.computeLogNormalizer();
  }
 else {
    elbo+=expectedNatural.dotProduct(this.sufficientStatistics);
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.PDist.computeLogBaseMeasure(this.assignment);
  }
  if (elbo > 0 && !this.isObserved() && Math.abs(expectedNatural.sum()) < 0.01) {
    elbo=0;
  }
  if (elbo > 0.1 && !this.isObserved()) {
    throw new IllegalStateException(""String_Node_Str"" + this.getMainVariable().getName() + ""String_Node_Str""+ elbo+ ""String_Node_Str""+ expectedNatural.sum());
  }
  return elbo;
}","public double computeELBO(){
  Map<Variable,MomentParameters> momentParents=this.getMomentParents();
  double elbo=0;
  NaturalParameters expectedNatural=this.PDist.getExpectedNaturalFromParents(momentParents);
  if (!isObserved()) {
    expectedNatural.substract(this.QDist.getNaturalParameters());
    elbo+=expectedNatural.dotProduct(this.QDist.getMomentParameters());
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.QDist.computeLogNormalizer();
  }
 else {
    elbo+=expectedNatural.dotProduct(this.sufficientStatistics);
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.PDist.computeLogBaseMeasure(this.assignment);
  }
  if (elbo > 0 && !this.isObserved() && Math.abs(expectedNatural.sum()) < 0.01) {
    elbo=0;
  }
  if ((elbo > 0.5 && !this.isObserved()) || Double.isNaN(elbo)) {
    this.PDist.getExpectedLogNormalizer(momentParents);
    throw new IllegalStateException(""String_Node_Str"" + this.getMainVariable().getName() + ""String_Node_Str""+ elbo+ ""String_Node_Str""+ expectedNatural.sum());
  }
  return elbo;
}",0.9414587332053744
21423,"@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedParameters){
  List<Distribution> distributionList=new ArrayList<>();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalLearningDistribution learningDistribution=(EF_ConditionalLearningDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedParameters);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}","@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedParameters){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalLearningDistribution learningDistribution=(EF_ConditionalLearningDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedParameters);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}",0.9988358556461
21424,"@Override public double getExpectedLogNormalizer(Map<Variable,MomentParameters> momentParents){
  int nConf=MultinomialIndex.getNumberOfPossibleAssignments(this.multinomialParents);
  double expectedLogNormalizer=0;
  for (int i=0; i < nConf; i++) {
    double[] assignment=MultinomialIndex.getVariableArrayAssignmentFromIndex(this.multinomialParents,i);
    double momentValue=1;
    for (int j=0; j < assignment.length; j++) {
      momentValue*=momentParents.get(this.multinomialParents.get(j)).get((int)assignment[j]);
    }
    double partialLogNormalizer=0;
    if (this.isBaseConditionalDistribution) {
      partialLogNormalizer=this.getBaseEFConditionalDistribution(i).getExpectedLogNormalizer(momentParents);
    }
 else {
      partialLogNormalizer=this.getBaseEFUnivariateDistribution(i).computeLogNormalizer();
    }
    expectedLogNormalizer+=momentValue * partialLogNormalizer;
  }
  return expectedLogNormalizer;
}","@Override public double getExpectedLogNormalizer(Map<Variable,MomentParameters> momentParents){
  int nConf=MultinomialIndex.getNumberOfPossibleAssignments(this.multinomialParents);
  double expectedLogNormalizer=0;
  for (int i=0; i < nConf; i++) {
    double[] assignment=MultinomialIndex.getVariableArrayAssignmentFromIndex(this.multinomialParents,i);
    double momentValue=1;
    for (int j=0; j < assignment.length; j++) {
      momentValue*=momentParents.get(this.multinomialParents.get(j)).get((int)assignment[j]);
    }
    if (momentValue == 0)     continue;
    double partialLogNormalizer=0;
    if (this.isBaseConditionalDistribution) {
      partialLogNormalizer=this.getBaseEFConditionalDistribution(i).getExpectedLogNormalizer(momentParents);
    }
 else {
      partialLogNormalizer=this.getBaseEFUnivariateDistribution(i).computeLogNormalizer();
    }
    expectedLogNormalizer+=momentValue * partialLogNormalizer;
  }
  return expectedLogNormalizer;
}",0.9789473684210528
21425,"public double computeELBO(){
  Map<Variable,MomentParameters> momentParents=this.getMomentParents();
  double elbo=0;
  NaturalParameters expectedNatural=this.PDist.getExpectedNaturalFromParents(momentParents);
  if (!isObserved()) {
    expectedNatural.substract(this.QDist.getNaturalParameters());
    elbo+=expectedNatural.dotProduct(this.QDist.getMomentParameters());
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.QDist.computeLogNormalizer();
  }
 else {
    elbo+=expectedNatural.dotProduct(this.sufficientStatistics);
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.PDist.computeLogBaseMeasure(this.assignment);
  }
  if (elbo > 0 && !this.isObserved() && Math.abs(expectedNatural.sum()) < 0.01) {
    elbo=0;
  }
  if (elbo > 0.1 && !this.isObserved()) {
    throw new IllegalStateException(""String_Node_Str"" + this.getMainVariable().getName() + ""String_Node_Str""+ elbo+ ""String_Node_Str""+ expectedNatural.sum());
  }
  return elbo;
}","public double computeELBO(){
  Map<Variable,MomentParameters> momentParents=this.getMomentParents();
  double elbo=0;
  NaturalParameters expectedNatural=this.PDist.getExpectedNaturalFromParents(momentParents);
  if (!isObserved()) {
    expectedNatural.substract(this.QDist.getNaturalParameters());
    elbo+=expectedNatural.dotProduct(this.QDist.getMomentParameters());
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.QDist.computeLogNormalizer();
  }
 else {
    elbo+=expectedNatural.dotProduct(this.sufficientStatistics);
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.PDist.computeLogBaseMeasure(this.assignment);
  }
  if (elbo > 0 && !this.isObserved() && Math.abs(expectedNatural.sum()) < 0.01) {
    elbo=0;
  }
  if ((elbo > 0.5 && !this.isObserved()) || Double.isNaN(elbo)) {
    this.PDist.getExpectedLogNormalizer(momentParents);
    throw new IllegalStateException(""String_Node_Str"" + this.getMainVariable().getName() + ""String_Node_Str""+ elbo+ ""String_Node_Str""+ expectedNatural.sum());
  }
  return elbo;
}",0.9414587332053744
21426,"@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedParameters){
  List<Distribution> distributionList=new ArrayList<>();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalLearningDistribution learningDistribution=(EF_ConditionalLearningDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedParameters);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}","@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedParameters){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalLearningDistribution learningDistribution=(EF_ConditionalLearningDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedParameters);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}",0.9988358556461
21427,"@Override public double getExpectedLogNormalizer(Map<Variable,MomentParameters> momentParents){
  int nConf=MultinomialIndex.getNumberOfPossibleAssignments(this.multinomialParents);
  double expectedLogNormalizer=0;
  for (int i=0; i < nConf; i++) {
    double[] assignment=MultinomialIndex.getVariableArrayAssignmentFromIndex(this.multinomialParents,i);
    double momentValue=1;
    for (int j=0; j < assignment.length; j++) {
      momentValue*=momentParents.get(this.multinomialParents.get(j)).get((int)assignment[j]);
    }
    double partialLogNormalizer=0;
    if (this.isBaseConditionalDistribution) {
      partialLogNormalizer=this.getBaseEFConditionalDistribution(i).getExpectedLogNormalizer(momentParents);
    }
 else {
      partialLogNormalizer=this.getBaseEFUnivariateDistribution(i).computeLogNormalizer();
    }
    expectedLogNormalizer+=momentValue * partialLogNormalizer;
  }
  return expectedLogNormalizer;
}","@Override public double getExpectedLogNormalizer(Map<Variable,MomentParameters> momentParents){
  int nConf=MultinomialIndex.getNumberOfPossibleAssignments(this.multinomialParents);
  double expectedLogNormalizer=0;
  for (int i=0; i < nConf; i++) {
    double[] assignment=MultinomialIndex.getVariableArrayAssignmentFromIndex(this.multinomialParents,i);
    double momentValue=1;
    for (int j=0; j < assignment.length; j++) {
      momentValue*=momentParents.get(this.multinomialParents.get(j)).get((int)assignment[j]);
    }
    if (momentValue == 0)     continue;
    double partialLogNormalizer=0;
    if (this.isBaseConditionalDistribution) {
      partialLogNormalizer=this.getBaseEFConditionalDistribution(i).getExpectedLogNormalizer(momentParents);
    }
 else {
      partialLogNormalizer=this.getBaseEFUnivariateDistribution(i).computeLogNormalizer();
    }
    expectedLogNormalizer+=momentValue * partialLogNormalizer;
  }
  return expectedLogNormalizer;
}",0.9789473684210528
21428,"public double computeELBO(){
  Map<Variable,MomentParameters> momentParents=this.getMomentParents();
  double elbo=0;
  NaturalParameters expectedNatural=this.PDist.getExpectedNaturalFromParents(momentParents);
  if (!isObserved()) {
    expectedNatural.substract(this.QDist.getNaturalParameters());
    elbo+=expectedNatural.dotProduct(this.QDist.getMomentParameters());
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.QDist.computeLogNormalizer();
  }
 else {
    elbo+=expectedNatural.dotProduct(this.sufficientStatistics);
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.PDist.computeLogBaseMeasure(this.assignment);
  }
  if (elbo > 0 && !this.isObserved() && Math.abs(expectedNatural.sum()) < 0.01) {
    elbo=0;
  }
  if (elbo > 0.1 && !this.isObserved()) {
    throw new IllegalStateException(""String_Node_Str"" + this.getMainVariable().getName() + ""String_Node_Str""+ elbo+ ""String_Node_Str""+ expectedNatural.sum());
  }
  return elbo;
}","public double computeELBO(){
  Map<Variable,MomentParameters> momentParents=this.getMomentParents();
  double elbo=0;
  NaturalParameters expectedNatural=this.PDist.getExpectedNaturalFromParents(momentParents);
  if (!isObserved()) {
    expectedNatural.substract(this.QDist.getNaturalParameters());
    elbo+=expectedNatural.dotProduct(this.QDist.getMomentParameters());
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.QDist.computeLogNormalizer();
  }
 else {
    elbo+=expectedNatural.dotProduct(this.sufficientStatistics);
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.PDist.computeLogBaseMeasure(this.assignment);
  }
  if (elbo > 0 && !this.isObserved() && Math.abs(expectedNatural.sum()) < 0.01) {
    elbo=0;
  }
  if ((elbo > 0.5 && !this.isObserved()) || Double.isNaN(elbo)) {
    this.PDist.getExpectedLogNormalizer(momentParents);
    throw new IllegalStateException(""String_Node_Str"" + this.getMainVariable().getName() + ""String_Node_Str""+ elbo+ ""String_Node_Str""+ expectedNatural.sum());
  }
  return elbo;
}",0.9414587332053744
21429,"@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedParameters){
  List<Distribution> distributionList=new ArrayList<>();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalLearningDistribution learningDistribution=(EF_ConditionalLearningDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedParameters);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}","@Override public ConditionalDistribution toConditionalDistribution(Map<Variable,Vector> expectedParameters){
  List<Distribution> distributionList=new ArrayList();
  for (  EF_Distribution dist : this.distributions) {
    EF_ConditionalLearningDistribution learningDistribution=(EF_ConditionalLearningDistribution)dist;
    ConditionalDistribution conditionalDistribution=learningDistribution.toConditionalDistribution(expectedParameters);
    if (conditionalDistribution instanceof BaseDistribution_MultinomialParents) {
      BaseDistribution_MultinomialParents base=(BaseDistribution_MultinomialParents)conditionalDistribution;
      distributionList.add(base.getBaseDistribution(0));
    }
 else {
      distributionList.add(conditionalDistribution);
    }
  }
  return new BaseDistribution_MultinomialParents(this.multinomialParents,distributionList);
}",0.9988358556461
21430,"@Override public double getExpectedLogNormalizer(Map<Variable,MomentParameters> momentParents){
  int nConf=MultinomialIndex.getNumberOfPossibleAssignments(this.multinomialParents);
  double expectedLogNormalizer=0;
  for (int i=0; i < nConf; i++) {
    double[] assignment=MultinomialIndex.getVariableArrayAssignmentFromIndex(this.multinomialParents,i);
    double momentValue=1;
    for (int j=0; j < assignment.length; j++) {
      momentValue*=momentParents.get(this.multinomialParents.get(j)).get((int)assignment[j]);
    }
    double partialLogNormalizer=0;
    if (this.isBaseConditionalDistribution) {
      partialLogNormalizer=this.getBaseEFConditionalDistribution(i).getExpectedLogNormalizer(momentParents);
    }
 else {
      partialLogNormalizer=this.getBaseEFUnivariateDistribution(i).computeLogNormalizer();
    }
    expectedLogNormalizer+=momentValue * partialLogNormalizer;
  }
  return expectedLogNormalizer;
}","@Override public double getExpectedLogNormalizer(Map<Variable,MomentParameters> momentParents){
  int nConf=MultinomialIndex.getNumberOfPossibleAssignments(this.multinomialParents);
  double expectedLogNormalizer=0;
  for (int i=0; i < nConf; i++) {
    double[] assignment=MultinomialIndex.getVariableArrayAssignmentFromIndex(this.multinomialParents,i);
    double momentValue=1;
    for (int j=0; j < assignment.length; j++) {
      momentValue*=momentParents.get(this.multinomialParents.get(j)).get((int)assignment[j]);
    }
    if (momentValue == 0)     continue;
    double partialLogNormalizer=0;
    if (this.isBaseConditionalDistribution) {
      partialLogNormalizer=this.getBaseEFConditionalDistribution(i).getExpectedLogNormalizer(momentParents);
    }
 else {
      partialLogNormalizer=this.getBaseEFUnivariateDistribution(i).computeLogNormalizer();
    }
    expectedLogNormalizer+=momentValue * partialLogNormalizer;
  }
  return expectedLogNormalizer;
}",0.9789473684210528
21431,"public double computeELBO(){
  Map<Variable,MomentParameters> momentParents=this.getMomentParents();
  double elbo=0;
  NaturalParameters expectedNatural=this.PDist.getExpectedNaturalFromParents(momentParents);
  if (!isObserved()) {
    expectedNatural.substract(this.QDist.getNaturalParameters());
    elbo+=expectedNatural.dotProduct(this.QDist.getMomentParameters());
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.QDist.computeLogNormalizer();
  }
 else {
    elbo+=expectedNatural.dotProduct(this.sufficientStatistics);
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.PDist.computeLogBaseMeasure(this.assignment);
  }
  if (elbo > 0 && !this.isObserved() && Math.abs(expectedNatural.sum()) < 0.01) {
    elbo=0;
  }
  if (elbo > 0.1 && !this.isObserved()) {
    throw new IllegalStateException(""String_Node_Str"" + this.getMainVariable().getName() + ""String_Node_Str""+ elbo+ ""String_Node_Str""+ expectedNatural.sum());
  }
  return elbo;
}","public double computeELBO(){
  Map<Variable,MomentParameters> momentParents=this.getMomentParents();
  double elbo=0;
  NaturalParameters expectedNatural=this.PDist.getExpectedNaturalFromParents(momentParents);
  if (!isObserved()) {
    expectedNatural.substract(this.QDist.getNaturalParameters());
    elbo+=expectedNatural.dotProduct(this.QDist.getMomentParameters());
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.QDist.computeLogNormalizer();
  }
 else {
    elbo+=expectedNatural.dotProduct(this.sufficientStatistics);
    elbo-=this.PDist.getExpectedLogNormalizer(momentParents);
    elbo+=this.PDist.computeLogBaseMeasure(this.assignment);
  }
  if (elbo > 0 && !this.isObserved() && Math.abs(expectedNatural.sum()) < 0.01) {
    elbo=0;
  }
  if ((elbo > 0.5 && !this.isObserved()) || Double.isNaN(elbo)) {
    this.PDist.getExpectedLogNormalizer(momentParents);
    throw new IllegalStateException(""String_Node_Str"" + this.getMainVariable().getName() + ""String_Node_Str""+ elbo+ ""String_Node_Str""+ expectedNatural.sum());
  }
  return elbo;
}",0.9414587332053744
21432,"/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * Math.pow(X - mean,2));
  }
  return naturalParameters;
}","/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}",0.9126760563380282
21433,"/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(invGammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    naturalParameters.set(0,-0.5);
    naturalParameters.set(1,-0.5 * Math.pow(X - mean,2));
  }
  return naturalParameters;
}","/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(invGammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,-0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}",0.9130028063610852
21434,"public static void testGaussian0() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    Variable varA=oneNormalVarBN.getStaticVariables().getVariableByName(""String_Node_Str"");
    Normal dist=oneNormalVarBN.getDistribution(varA);
    dist.setMean(2000);
    dist.setVariance(30);
    oneNormalVarBN.randomInitialization(new Random(i));
    System.out.println(""String_Node_Str"");
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
    sampler.setSeed(0);
    DataStream<DataInstance> data=sampler.sampleToDataBase(10000);
    System.out.println(LearningEngineForBN.learnParameters(oneNormalVarBN.getDAG(),data).toString());
    StreamingVariationalBayesVMP svb=new StreamingVariationalBayesVMP();
    svb.setWindowsSize(1000);
    svb.setSeed(i);
    VMP vmp=svb.getPlateuVMP().getVMP();
    vmp.setTestELBO(true);
    vmp.setMaxIter(100);
    vmp.setThreshold(0.0001);
    BayesianLearningEngineForBN.setBayesianLearningAlgorithmForBN(svb);
    BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
    BayesianLearningEngineForBN.setDataStream(data);
    BayesianLearningEngineForBN.runLearning();
    BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
    System.out.println(oneNormalVarBN.toString());
    System.out.println(learntOneNormalVarBN.toString());
    assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.1));
  }
}","public static void testGaussian0() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    Variable varA=oneNormalVarBN.getStaticVariables().getVariableByName(""String_Node_Str"");
    Normal dist=oneNormalVarBN.getDistribution(varA);
    dist.setMean(2000);
    dist.setVariance(30);
    oneNormalVarBN.randomInitialization(new Random(i));
    System.out.println(""String_Node_Str"");
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
    sampler.setSeed(0);
    DataStream<DataInstance> data=sampler.sampleToDataBase(1000);
    System.out.println(LearningEngineForBN.learnParameters(oneNormalVarBN.getDAG(),data).toString());
    StreamingVariationalBayesVMP svb=new StreamingVariationalBayesVMP();
    svb.setWindowsSize(100);
    svb.setSeed(i);
    VMP vmp=svb.getPlateuVMP().getVMP();
    vmp.setTestELBO(true);
    vmp.setMaxIter(100);
    vmp.setThreshold(0.0001);
    BayesianLearningEngineForBN.setBayesianLearningAlgorithmForBN(svb);
    BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
    BayesianLearningEngineForBN.setDataStream(data);
    BayesianLearningEngineForBN.runLearning();
    System.out.println(BayesianLearningEngineForBN.getLogMarginalProbability());
    BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
    System.out.println(oneNormalVarBN.toString());
    System.out.println(learntOneNormalVarBN.toString());
    assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.1));
  }
}",0.9734908974768444
21435,"/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * Math.pow(X - mean,2));
  }
  return naturalParameters;
}","/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}",0.9126760563380282
21436,"/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(invGammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    naturalParameters.set(0,-0.5);
    naturalParameters.set(1,-0.5 * Math.pow(X - mean,2));
  }
  return naturalParameters;
}","/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(invGammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,-0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}",0.9130028063610852
21437,"public static void testGaussian0() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    Variable varA=oneNormalVarBN.getStaticVariables().getVariableByName(""String_Node_Str"");
    Normal dist=oneNormalVarBN.getDistribution(varA);
    dist.setMean(2000);
    dist.setVariance(30);
    oneNormalVarBN.randomInitialization(new Random(i));
    System.out.println(""String_Node_Str"");
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
    sampler.setSeed(0);
    DataStream<DataInstance> data=sampler.sampleToDataBase(10000);
    System.out.println(LearningEngineForBN.learnParameters(oneNormalVarBN.getDAG(),data).toString());
    StreamingVariationalBayesVMP svb=new StreamingVariationalBayesVMP();
    svb.setWindowsSize(1000);
    svb.setSeed(i);
    VMP vmp=svb.getPlateuVMP().getVMP();
    vmp.setTestELBO(true);
    vmp.setMaxIter(100);
    vmp.setThreshold(0.0001);
    BayesianLearningEngineForBN.setBayesianLearningAlgorithmForBN(svb);
    BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
    BayesianLearningEngineForBN.setDataStream(data);
    BayesianLearningEngineForBN.runLearning();
    BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
    System.out.println(oneNormalVarBN.toString());
    System.out.println(learntOneNormalVarBN.toString());
    assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.1));
  }
}","public static void testGaussian0() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    Variable varA=oneNormalVarBN.getStaticVariables().getVariableByName(""String_Node_Str"");
    Normal dist=oneNormalVarBN.getDistribution(varA);
    dist.setMean(2000);
    dist.setVariance(30);
    oneNormalVarBN.randomInitialization(new Random(i));
    System.out.println(""String_Node_Str"");
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
    sampler.setSeed(0);
    DataStream<DataInstance> data=sampler.sampleToDataBase(1000);
    System.out.println(LearningEngineForBN.learnParameters(oneNormalVarBN.getDAG(),data).toString());
    StreamingVariationalBayesVMP svb=new StreamingVariationalBayesVMP();
    svb.setWindowsSize(100);
    svb.setSeed(i);
    VMP vmp=svb.getPlateuVMP().getVMP();
    vmp.setTestELBO(true);
    vmp.setMaxIter(100);
    vmp.setThreshold(0.0001);
    BayesianLearningEngineForBN.setBayesianLearningAlgorithmForBN(svb);
    BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
    BayesianLearningEngineForBN.setDataStream(data);
    BayesianLearningEngineForBN.runLearning();
    System.out.println(BayesianLearningEngineForBN.getLogMarginalProbability());
    BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
    System.out.println(oneNormalVarBN.toString());
    System.out.println(learntOneNormalVarBN.toString());
    assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.1));
  }
}",0.9734908974768444
21438,"/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * Math.pow(X - mean,2));
  }
  return naturalParameters;
}","/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}",0.9126760563380282
21439,"/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(invGammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    naturalParameters.set(0,-0.5);
    naturalParameters.set(1,-0.5 * Math.pow(X - mean,2));
  }
  return naturalParameters;
}","/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(invGammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,-0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}",0.9130028063610852
21440,"public static void testGaussian0() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    Variable varA=oneNormalVarBN.getStaticVariables().getVariableByName(""String_Node_Str"");
    Normal dist=oneNormalVarBN.getDistribution(varA);
    dist.setMean(2000);
    dist.setVariance(30);
    oneNormalVarBN.randomInitialization(new Random(i));
    System.out.println(""String_Node_Str"");
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
    sampler.setSeed(0);
    DataStream<DataInstance> data=sampler.sampleToDataBase(10000);
    System.out.println(LearningEngineForBN.learnParameters(oneNormalVarBN.getDAG(),data).toString());
    StreamingVariationalBayesVMP svb=new StreamingVariationalBayesVMP();
    svb.setWindowsSize(1000);
    svb.setSeed(i);
    VMP vmp=svb.getPlateuVMP().getVMP();
    vmp.setTestELBO(true);
    vmp.setMaxIter(100);
    vmp.setThreshold(0.0001);
    BayesianLearningEngineForBN.setBayesianLearningAlgorithmForBN(svb);
    BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
    BayesianLearningEngineForBN.setDataStream(data);
    BayesianLearningEngineForBN.runLearning();
    BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
    System.out.println(oneNormalVarBN.toString());
    System.out.println(learntOneNormalVarBN.toString());
    assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.1));
  }
}","public static void testGaussian0() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    Variable varA=oneNormalVarBN.getStaticVariables().getVariableByName(""String_Node_Str"");
    Normal dist=oneNormalVarBN.getDistribution(varA);
    dist.setMean(2000);
    dist.setVariance(30);
    oneNormalVarBN.randomInitialization(new Random(i));
    System.out.println(""String_Node_Str"");
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
    sampler.setSeed(0);
    DataStream<DataInstance> data=sampler.sampleToDataBase(1000);
    System.out.println(LearningEngineForBN.learnParameters(oneNormalVarBN.getDAG(),data).toString());
    StreamingVariationalBayesVMP svb=new StreamingVariationalBayesVMP();
    svb.setWindowsSize(100);
    svb.setSeed(i);
    VMP vmp=svb.getPlateuVMP().getVMP();
    vmp.setTestELBO(true);
    vmp.setMaxIter(100);
    vmp.setThreshold(0.0001);
    BayesianLearningEngineForBN.setBayesianLearningAlgorithmForBN(svb);
    BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
    BayesianLearningEngineForBN.setDataStream(data);
    BayesianLearningEngineForBN.runLearning();
    System.out.println(BayesianLearningEngineForBN.getLogMarginalProbability());
    BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
    System.out.println(oneNormalVarBN.toString());
    System.out.println(learntOneNormalVarBN.toString());
    assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.1));
  }
}",0.9734908974768444
21441,"/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * Math.pow(X - mean,2));
  }
  return naturalParameters;
}","/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(gammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}",0.9126760563380282
21442,"/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(invGammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    naturalParameters.set(0,-0.5);
    naturalParameters.set(1,-0.5 * Math.pow(X - mean,2));
  }
  return naturalParameters;
}","/** 
 * It is the message to one node to its parent @param parent, taking into account the suff. stat. if it is observed or the moment parameters if not, and incorporating the message (with moment param.) received from all co-parents. (Third form EF equations).
 * @param parent
 * @param momentChildCoParents
 * @return
 */
@Override public NaturalParameters getExpectedNaturalToParent(Variable parent,Map<Variable,MomentParameters> momentChildCoParents){
  NaturalParameters naturalParameters=new ArrayVector(2);
  double X=momentChildCoParents.get(var).get(0);
  if (meanParameterVariable == parent) {
    double invVariance=momentChildCoParents.get(invGammaParameterVariable).get(1);
    naturalParameters.set(0,X * invVariance);
    naturalParameters.set(1,-0.5 * invVariance);
  }
 else {
    double XSquare=momentChildCoParents.get(var).get(1);
    double mean=momentChildCoParents.get(meanParameterVariable).get(0);
    double meanSquare=momentChildCoParents.get(meanParameterVariable).get(1);
    naturalParameters.set(0,-0.5);
    naturalParameters.set(1,-0.5 * (XSquare - 2 * X * mean + meanSquare));
  }
  return naturalParameters;
}",0.9130028063610852
21443,"public static void testGaussian0() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    Variable varA=oneNormalVarBN.getStaticVariables().getVariableByName(""String_Node_Str"");
    Normal dist=oneNormalVarBN.getDistribution(varA);
    dist.setMean(2000);
    dist.setVariance(30);
    oneNormalVarBN.randomInitialization(new Random(i));
    System.out.println(""String_Node_Str"");
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
    sampler.setSeed(0);
    DataStream<DataInstance> data=sampler.sampleToDataBase(10000);
    System.out.println(LearningEngineForBN.learnParameters(oneNormalVarBN.getDAG(),data).toString());
    StreamingVariationalBayesVMP svb=new StreamingVariationalBayesVMP();
    svb.setWindowsSize(1000);
    svb.setSeed(i);
    VMP vmp=svb.getPlateuVMP().getVMP();
    vmp.setTestELBO(true);
    vmp.setMaxIter(100);
    vmp.setThreshold(0.0001);
    BayesianLearningEngineForBN.setBayesianLearningAlgorithmForBN(svb);
    BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
    BayesianLearningEngineForBN.setDataStream(data);
    BayesianLearningEngineForBN.runLearning();
    BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
    System.out.println(oneNormalVarBN.toString());
    System.out.println(learntOneNormalVarBN.toString());
    assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.1));
  }
}","public static void testGaussian0() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    Variable varA=oneNormalVarBN.getStaticVariables().getVariableByName(""String_Node_Str"");
    Normal dist=oneNormalVarBN.getDistribution(varA);
    dist.setMean(2000);
    dist.setVariance(30);
    oneNormalVarBN.randomInitialization(new Random(i));
    System.out.println(""String_Node_Str"");
    BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
    sampler.setSeed(0);
    DataStream<DataInstance> data=sampler.sampleToDataBase(1000);
    System.out.println(LearningEngineForBN.learnParameters(oneNormalVarBN.getDAG(),data).toString());
    StreamingVariationalBayesVMP svb=new StreamingVariationalBayesVMP();
    svb.setWindowsSize(100);
    svb.setSeed(i);
    VMP vmp=svb.getPlateuVMP().getVMP();
    vmp.setTestELBO(true);
    vmp.setMaxIter(100);
    vmp.setThreshold(0.0001);
    BayesianLearningEngineForBN.setBayesianLearningAlgorithmForBN(svb);
    BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
    BayesianLearningEngineForBN.setDataStream(data);
    BayesianLearningEngineForBN.runLearning();
    System.out.println(BayesianLearningEngineForBN.getLogMarginalProbability());
    BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
    System.out.println(oneNormalVarBN.toString());
    System.out.println(learntOneNormalVarBN.toString());
    assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.1));
  }
}",0.9734908974768444
21444,"@Override public <E extends UnivariateDistribution>E getPosterior(Variable var){
  try {
    Node huginNode=huginBN.getNodeByName(var.getName());
    if (var.isMultinomial()) {
      Multinomial dist=new Multinomial(var);
      for (int i=0; i < var.getNumberOfStates(); i++) {
        dist.setProbabilityOfState(i,((DiscreteNode)huginNode).getBelief(i));
      }
      return (E)dist;
    }
 else     if (var.isNormal()) {
      Normal dist=new Normal(var);
      dist.setMean(((ContinuousChanceNode)huginNode).getMean());
      dist.setSd(Math.sqrt(((ContinuousChanceNode)huginNode).getVariance()));
      return (E)dist;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  ExceptionHugin exceptionHugin) {
    exceptionHugin.printStackTrace();
  }
  return null;
}","@Override public <E extends UnivariateDistribution>E getPosterior(Variable var){
  try {
    Node huginNode=huginBN.getNodeByName(var.getName());
    if (var.isMultinomial()) {
      Multinomial dist=new Multinomial(var);
      for (int i=0; i < var.getNumberOfStates(); i++) {
        dist.setProbabilityOfState(i,((DiscreteNode)huginNode).getBelief(i));
      }
      return (E)dist;
    }
 else     if (var.isNormal()) {
      Normal dist=new Normal(var);
      dist.setMean(((ContinuousChanceNode)huginNode).getMean());
      System.out.println(((ContinuousChanceNode)huginNode).getAlpha(0));
      System.out.println(((ContinuousChanceNode)huginNode).getMean());
      dist.setSd(Math.sqrt(((ContinuousChanceNode)huginNode).getVariance()));
      return (E)dist;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  ExceptionHugin exceptionHugin) {
    exceptionHugin.printStackTrace();
  }
  return null;
}",0.9183673469387756
21445,"/** 
 * Sets an evidence to a Hugin variable.
 * @param n the AMIDST variable to be evidenced.
 * @param value the evidenced value.
 * @throws ExceptionHugin
 */
private void setVarEvidence(Variable n,long value) throws ExceptionHugin {
  if (n.isMultinomial()) {
    ((DiscreteNode)huginBN.getNodeByName(n.getName())).selectState(value);
  }
 else   if (n.isNormal()) {
    ((ContinuousChanceNode)huginBN.getNodeByName(n.getName())).enterValue(value);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Sets an evidence to a Hugin variable.
 * @param n the AMIDST variable to be evidenced.
 * @param value the evidenced value.
 * @throws ExceptionHugin
 */
private void setVarEvidence(Variable n,double value) throws ExceptionHugin {
  if (n.isMultinomial()) {
    ((DiscreteNode)huginBN.getNodeByName(n.getName())).selectState((long)value);
  }
 else   if (n.isNormal()) {
    ((ContinuousChanceNode)huginBN.getNodeByName(n.getName())).enterValue(value);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9849906191369606
21446,"@Override public void setEvidence(Assignment assignment){
  ((HashMapAssignment)assignment).entrySet().stream().forEach(entry -> {
    try {
      this.setVarEvidence(entry.getKey(),entry.getValue().longValue());
    }
 catch (    ExceptionHugin exceptionHugin) {
      exceptionHugin.printStackTrace();
    }
  }
);
}","@Override public void setEvidence(Assignment assignment){
  ((HashMapAssignment)assignment).entrySet().stream().forEach(entry -> {
    try {
      this.setVarEvidence(entry.getKey(),entry.getValue().doubleValue());
    }
 catch (    ExceptionHugin exceptionHugin) {
      exceptionHugin.printStackTrace();
    }
  }
);
}",0.987460815047022
21447,"@Override public <E extends UnivariateDistribution>E getPosterior(Variable var){
  try {
    Node huginNode=huginBN.getNodeByName(var.getName());
    if (var.isMultinomial()) {
      Multinomial dist=new Multinomial(var);
      for (int i=0; i < var.getNumberOfStates(); i++) {
        dist.setProbabilityOfState(i,((DiscreteNode)huginNode).getBelief(i));
      }
      return (E)dist;
    }
 else     if (var.isNormal()) {
      Normal dist=new Normal(var);
      dist.setMean(((ContinuousChanceNode)huginNode).getMean());
      dist.setSd(Math.sqrt(((ContinuousChanceNode)huginNode).getVariance()));
      return (E)dist;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  ExceptionHugin exceptionHugin) {
    exceptionHugin.printStackTrace();
  }
  return null;
}","@Override public <E extends UnivariateDistribution>E getPosterior(Variable var){
  try {
    Node huginNode=huginBN.getNodeByName(var.getName());
    if (var.isMultinomial()) {
      Multinomial dist=new Multinomial(var);
      for (int i=0; i < var.getNumberOfStates(); i++) {
        dist.setProbabilityOfState(i,((DiscreteNode)huginNode).getBelief(i));
      }
      return (E)dist;
    }
 else     if (var.isNormal()) {
      Normal dist=new Normal(var);
      dist.setMean(((ContinuousChanceNode)huginNode).getMean());
      System.out.println(((ContinuousChanceNode)huginNode).getAlpha(0));
      System.out.println(((ContinuousChanceNode)huginNode).getMean());
      dist.setSd(Math.sqrt(((ContinuousChanceNode)huginNode).getVariance()));
      return (E)dist;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  ExceptionHugin exceptionHugin) {
    exceptionHugin.printStackTrace();
  }
  return null;
}",0.9183673469387756
21448,"/** 
 * Sets an evidence to a Hugin variable.
 * @param n the AMIDST variable to be evidenced.
 * @param value the evidenced value.
 * @throws ExceptionHugin
 */
private void setVarEvidence(Variable n,long value) throws ExceptionHugin {
  if (n.isMultinomial()) {
    ((DiscreteNode)huginBN.getNodeByName(n.getName())).selectState(value);
  }
 else   if (n.isNormal()) {
    ((ContinuousChanceNode)huginBN.getNodeByName(n.getName())).enterValue(value);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Sets an evidence to a Hugin variable.
 * @param n the AMIDST variable to be evidenced.
 * @param value the evidenced value.
 * @throws ExceptionHugin
 */
private void setVarEvidence(Variable n,double value) throws ExceptionHugin {
  if (n.isMultinomial()) {
    ((DiscreteNode)huginBN.getNodeByName(n.getName())).selectState((long)value);
  }
 else   if (n.isNormal()) {
    ((ContinuousChanceNode)huginBN.getNodeByName(n.getName())).enterValue(value);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9849906191369606
21449,"@Override public void setEvidence(Assignment assignment){
  ((HashMapAssignment)assignment).entrySet().stream().forEach(entry -> {
    try {
      this.setVarEvidence(entry.getKey(),entry.getValue().longValue());
    }
 catch (    ExceptionHugin exceptionHugin) {
      exceptionHugin.printStackTrace();
    }
  }
);
}","@Override public void setEvidence(Assignment assignment){
  ((HashMapAssignment)assignment).entrySet().stream().forEach(entry -> {
    try {
      this.setVarEvidence(entry.getKey(),entry.getValue().doubleValue());
    }
 catch (    ExceptionHugin exceptionHugin) {
      exceptionHugin.printStackTrace();
    }
  }
);
}",0.987460815047022
21450,"@Override public <E extends UnivariateDistribution>E getPosterior(Variable var){
  try {
    Node huginNode=huginBN.getNodeByName(var.getName());
    if (var.isMultinomial()) {
      Multinomial dist=new Multinomial(var);
      for (int i=0; i < var.getNumberOfStates(); i++) {
        dist.setProbabilityOfState(i,((DiscreteNode)huginNode).getBelief(i));
      }
      return (E)dist;
    }
 else     if (var.isNormal()) {
      Normal dist=new Normal(var);
      dist.setMean(((ContinuousChanceNode)huginNode).getMean());
      dist.setSd(Math.sqrt(((ContinuousChanceNode)huginNode).getVariance()));
      return (E)dist;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  ExceptionHugin exceptionHugin) {
    exceptionHugin.printStackTrace();
  }
  return null;
}","@Override public <E extends UnivariateDistribution>E getPosterior(Variable var){
  try {
    Node huginNode=huginBN.getNodeByName(var.getName());
    if (var.isMultinomial()) {
      Multinomial dist=new Multinomial(var);
      for (int i=0; i < var.getNumberOfStates(); i++) {
        dist.setProbabilityOfState(i,((DiscreteNode)huginNode).getBelief(i));
      }
      return (E)dist;
    }
 else     if (var.isNormal()) {
      Normal dist=new Normal(var);
      dist.setMean(((ContinuousChanceNode)huginNode).getMean());
      System.out.println(((ContinuousChanceNode)huginNode).getAlpha(0));
      System.out.println(((ContinuousChanceNode)huginNode).getMean());
      dist.setSd(Math.sqrt(((ContinuousChanceNode)huginNode).getVariance()));
      return (E)dist;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  ExceptionHugin exceptionHugin) {
    exceptionHugin.printStackTrace();
  }
  return null;
}",0.9183673469387756
21451,"/** 
 * Sets an evidence to a Hugin variable.
 * @param n the AMIDST variable to be evidenced.
 * @param value the evidenced value.
 * @throws ExceptionHugin
 */
private void setVarEvidence(Variable n,long value) throws ExceptionHugin {
  if (n.isMultinomial()) {
    ((DiscreteNode)huginBN.getNodeByName(n.getName())).selectState(value);
  }
 else   if (n.isNormal()) {
    ((ContinuousChanceNode)huginBN.getNodeByName(n.getName())).enterValue(value);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Sets an evidence to a Hugin variable.
 * @param n the AMIDST variable to be evidenced.
 * @param value the evidenced value.
 * @throws ExceptionHugin
 */
private void setVarEvidence(Variable n,double value) throws ExceptionHugin {
  if (n.isMultinomial()) {
    ((DiscreteNode)huginBN.getNodeByName(n.getName())).selectState((long)value);
  }
 else   if (n.isNormal()) {
    ((ContinuousChanceNode)huginBN.getNodeByName(n.getName())).enterValue(value);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9849906191369606
21452,"@Override public void setEvidence(Assignment assignment){
  ((HashMapAssignment)assignment).entrySet().stream().forEach(entry -> {
    try {
      this.setVarEvidence(entry.getKey(),entry.getValue().longValue());
    }
 catch (    ExceptionHugin exceptionHugin) {
      exceptionHugin.printStackTrace();
    }
  }
);
}","@Override public void setEvidence(Assignment assignment){
  ((HashMapAssignment)assignment).entrySet().stream().forEach(entry -> {
    try {
      this.setVarEvidence(entry.getKey(),entry.getValue().doubleValue());
    }
 catch (    ExceptionHugin exceptionHugin) {
      exceptionHugin.printStackTrace();
    }
  }
);
}",0.987460815047022
21453,"@Override public <E extends UnivariateDistribution>E getPosterior(Variable var){
  try {
    Node huginNode=huginBN.getNodeByName(var.getName());
    if (var.isMultinomial()) {
      Multinomial dist=new Multinomial(var);
      for (int i=0; i < var.getNumberOfStates(); i++) {
        dist.setProbabilityOfState(i,((DiscreteNode)huginNode).getBelief(i));
      }
      return (E)dist;
    }
 else     if (var.isNormal()) {
      Normal dist=new Normal(var);
      dist.setMean(((ContinuousChanceNode)huginNode).getMean());
      dist.setSd(Math.sqrt(((ContinuousChanceNode)huginNode).getVariance()));
      return (E)dist;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  ExceptionHugin exceptionHugin) {
    exceptionHugin.printStackTrace();
  }
  return null;
}","@Override public <E extends UnivariateDistribution>E getPosterior(Variable var){
  try {
    Node huginNode=huginBN.getNodeByName(var.getName());
    if (var.isMultinomial()) {
      Multinomial dist=new Multinomial(var);
      for (int i=0; i < var.getNumberOfStates(); i++) {
        dist.setProbabilityOfState(i,((DiscreteNode)huginNode).getBelief(i));
      }
      return (E)dist;
    }
 else     if (var.isNormal()) {
      Normal dist=new Normal(var);
      dist.setMean(((ContinuousChanceNode)huginNode).getMean());
      System.out.println(((ContinuousChanceNode)huginNode).getAlpha(0));
      System.out.println(((ContinuousChanceNode)huginNode).getMean());
      dist.setSd(Math.sqrt(((ContinuousChanceNode)huginNode).getVariance()));
      return (E)dist;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 catch (  ExceptionHugin exceptionHugin) {
    exceptionHugin.printStackTrace();
  }
  return null;
}",0.9183673469387756
21454,"/** 
 * Sets an evidence to a Hugin variable.
 * @param n the AMIDST variable to be evidenced.
 * @param value the evidenced value.
 * @throws ExceptionHugin
 */
private void setVarEvidence(Variable n,long value) throws ExceptionHugin {
  if (n.isMultinomial()) {
    ((DiscreteNode)huginBN.getNodeByName(n.getName())).selectState(value);
  }
 else   if (n.isNormal()) {
    ((ContinuousChanceNode)huginBN.getNodeByName(n.getName())).enterValue(value);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Sets an evidence to a Hugin variable.
 * @param n the AMIDST variable to be evidenced.
 * @param value the evidenced value.
 * @throws ExceptionHugin
 */
private void setVarEvidence(Variable n,double value) throws ExceptionHugin {
  if (n.isMultinomial()) {
    ((DiscreteNode)huginBN.getNodeByName(n.getName())).selectState((long)value);
  }
 else   if (n.isNormal()) {
    ((ContinuousChanceNode)huginBN.getNodeByName(n.getName())).enterValue(value);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.9849906191369606
21455,"@Override public void setEvidence(Assignment assignment){
  ((HashMapAssignment)assignment).entrySet().stream().forEach(entry -> {
    try {
      this.setVarEvidence(entry.getKey(),entry.getValue().longValue());
    }
 catch (    ExceptionHugin exceptionHugin) {
      exceptionHugin.printStackTrace();
    }
  }
);
}","@Override public void setEvidence(Assignment assignment){
  ((HashMapAssignment)assignment).entrySet().stream().forEach(entry -> {
    try {
      this.setVarEvidence(entry.getKey(),entry.getValue().doubleValue());
    }
 catch (    ExceptionHugin exceptionHugin) {
      exceptionHugin.printStackTrace();
    }
  }
);
}",0.987460815047022
21456,"public void setVariance(double var){
  this.sd=Math.sqrt(sd);
}","public void setVariance(double var){
  this.sd=Math.sqrt(var);
}",0.9606299212598424
21457,"@Override public EF_UnivariateDistribution deepCopy(){
  EF_InverseGamma copy=new EF_InverseGamma(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  return copy;
}","@Override public EF_UnivariateDistribution deepCopy(){
  EF_InverseGamma copy=new EF_InverseGamma(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  copy.getMomentParameters().copy(this.getMomentParameters());
  return copy;
}",0.8639308855291576
21458,"@Override public EF_UnivariateDistribution deepCopy(){
  EF_Normal copy=new EF_Normal(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  return copy;
}","@Override public EF_UnivariateDistribution deepCopy(){
  EF_Normal copy=new EF_Normal(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  copy.getMomentParameters().copy(this.getMomentParameters());
  return copy;
}",0.856492027334852
21459,"@Override public void runLearning(){
  int cont=0;
  for (  DataInstance dataInstance : data) {
    System.out.println(""String_Node_Str"" + cont++);
    this.vmp.setEvidence(dataInstance);
    this.vmp.runInference();
    for (    EF_ConditionalDistribution dist : this.ef_extendedBN.getDistributionList()) {
      if (dist.getVariable().isParameterVariable()) {
        ((EF_BaseDistribution_MultinomialParents)dist).setBaseEFDistribution(0,this.vmp.getEFPosterior(dist.getVariable()).deepCopy());
      }
    }
  }
}","@Override public void runLearning(){
  int cont=0;
  for (  DataInstance dataInstance : data) {
    this.vmp.setEvidence(dataInstance);
    this.vmp.runInference();
    for (    EF_ConditionalDistribution dist : this.ef_extendedBN.getDistributionList()) {
      if (dist.getVariable().isParameterVariable()) {
        ((EF_BaseDistribution_MultinomialParents)dist).setBaseEFDistribution(0,this.vmp.getEFPosterior(dist.getVariable()).deepCopy());
      }
    }
  }
}",0.9470468431771896
21460,"public static void testGaussian() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataStream<DataInstance> data=sampler.sampleToDataBase(100);
  BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
  BayesianLearningEngineForBN.setDataStream(data);
  BayesianLearningEngineForBN.runLearning();
  BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
  System.out.println(oneNormalVarBN.toString());
  System.out.println(learntOneNormalVarBN.toString());
  assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.05));
}","public static void testGaussian() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataStream<DataInstance> data=sampler.sampleToDataBase(1000);
  BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
  BayesianLearningEngineForBN.setDataStream(data);
  BayesianLearningEngineForBN.runLearning();
  BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
  System.out.println(oneNormalVarBN.toString());
  System.out.println(learntOneNormalVarBN.toString());
  assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.05));
}",0.9993964996982498
21461,"public void setVariance(double var){
  this.sd=Math.sqrt(sd);
}","public void setVariance(double var){
  this.sd=Math.sqrt(var);
}",0.9606299212598424
21462,"@Override public EF_UnivariateDistribution deepCopy(){
  EF_InverseGamma copy=new EF_InverseGamma(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  return copy;
}","@Override public EF_UnivariateDistribution deepCopy(){
  EF_InverseGamma copy=new EF_InverseGamma(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  copy.getMomentParameters().copy(this.getMomentParameters());
  return copy;
}",0.8639308855291576
21463,"@Override public EF_UnivariateDistribution deepCopy(){
  EF_Normal copy=new EF_Normal(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  return copy;
}","@Override public EF_UnivariateDistribution deepCopy(){
  EF_Normal copy=new EF_Normal(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  copy.getMomentParameters().copy(this.getMomentParameters());
  return copy;
}",0.856492027334852
21464,"@Override public void runLearning(){
  int cont=0;
  for (  DataInstance dataInstance : data) {
    System.out.println(""String_Node_Str"" + cont++);
    this.vmp.setEvidence(dataInstance);
    this.vmp.runInference();
    for (    EF_ConditionalDistribution dist : this.ef_extendedBN.getDistributionList()) {
      if (dist.getVariable().isParameterVariable()) {
        ((EF_BaseDistribution_MultinomialParents)dist).setBaseEFDistribution(0,this.vmp.getEFPosterior(dist.getVariable()).deepCopy());
      }
    }
  }
}","@Override public void runLearning(){
  int cont=0;
  for (  DataInstance dataInstance : data) {
    this.vmp.setEvidence(dataInstance);
    this.vmp.runInference();
    for (    EF_ConditionalDistribution dist : this.ef_extendedBN.getDistributionList()) {
      if (dist.getVariable().isParameterVariable()) {
        ((EF_BaseDistribution_MultinomialParents)dist).setBaseEFDistribution(0,this.vmp.getEFPosterior(dist.getVariable()).deepCopy());
      }
    }
  }
}",0.9470468431771896
21465,"public static void testGaussian() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataStream<DataInstance> data=sampler.sampleToDataBase(100);
  BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
  BayesianLearningEngineForBN.setDataStream(data);
  BayesianLearningEngineForBN.runLearning();
  BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
  System.out.println(oneNormalVarBN.toString());
  System.out.println(learntOneNormalVarBN.toString());
  assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.05));
}","public static void testGaussian() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataStream<DataInstance> data=sampler.sampleToDataBase(1000);
  BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
  BayesianLearningEngineForBN.setDataStream(data);
  BayesianLearningEngineForBN.runLearning();
  BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
  System.out.println(oneNormalVarBN.toString());
  System.out.println(learntOneNormalVarBN.toString());
  assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.05));
}",0.9993964996982498
21466,"public void setVariance(double var){
  this.sd=Math.sqrt(sd);
}","public void setVariance(double var){
  this.sd=Math.sqrt(var);
}",0.9606299212598424
21467,"@Override public EF_UnivariateDistribution deepCopy(){
  EF_InverseGamma copy=new EF_InverseGamma(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  return copy;
}","@Override public EF_UnivariateDistribution deepCopy(){
  EF_InverseGamma copy=new EF_InverseGamma(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  copy.getMomentParameters().copy(this.getMomentParameters());
  return copy;
}",0.8639308855291576
21468,"@Override public EF_UnivariateDistribution deepCopy(){
  EF_Normal copy=new EF_Normal(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  return copy;
}","@Override public EF_UnivariateDistribution deepCopy(){
  EF_Normal copy=new EF_Normal(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  copy.getMomentParameters().copy(this.getMomentParameters());
  return copy;
}",0.856492027334852
21469,"@Override public void runLearning(){
  int cont=0;
  for (  DataInstance dataInstance : data) {
    System.out.println(""String_Node_Str"" + cont++);
    this.vmp.setEvidence(dataInstance);
    this.vmp.runInference();
    for (    EF_ConditionalDistribution dist : this.ef_extendedBN.getDistributionList()) {
      if (dist.getVariable().isParameterVariable()) {
        ((EF_BaseDistribution_MultinomialParents)dist).setBaseEFDistribution(0,this.vmp.getEFPosterior(dist.getVariable()).deepCopy());
      }
    }
  }
}","@Override public void runLearning(){
  int cont=0;
  for (  DataInstance dataInstance : data) {
    this.vmp.setEvidence(dataInstance);
    this.vmp.runInference();
    for (    EF_ConditionalDistribution dist : this.ef_extendedBN.getDistributionList()) {
      if (dist.getVariable().isParameterVariable()) {
        ((EF_BaseDistribution_MultinomialParents)dist).setBaseEFDistribution(0,this.vmp.getEFPosterior(dist.getVariable()).deepCopy());
      }
    }
  }
}",0.9470468431771896
21470,"public static void testGaussian() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataStream<DataInstance> data=sampler.sampleToDataBase(100);
  BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
  BayesianLearningEngineForBN.setDataStream(data);
  BayesianLearningEngineForBN.runLearning();
  BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
  System.out.println(oneNormalVarBN.toString());
  System.out.println(learntOneNormalVarBN.toString());
  assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.05));
}","public static void testGaussian() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataStream<DataInstance> data=sampler.sampleToDataBase(1000);
  BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
  BayesianLearningEngineForBN.setDataStream(data);
  BayesianLearningEngineForBN.runLearning();
  BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
  System.out.println(oneNormalVarBN.toString());
  System.out.println(learntOneNormalVarBN.toString());
  assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.05));
}",0.9993964996982498
21471,"public void setVariance(double var){
  this.sd=Math.sqrt(sd);
}","public void setVariance(double var){
  this.sd=Math.sqrt(var);
}",0.9606299212598424
21472,"@Override public EF_UnivariateDistribution deepCopy(){
  EF_InverseGamma copy=new EF_InverseGamma(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  return copy;
}","@Override public EF_UnivariateDistribution deepCopy(){
  EF_InverseGamma copy=new EF_InverseGamma(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  copy.getMomentParameters().copy(this.getMomentParameters());
  return copy;
}",0.8639308855291576
21473,"@Override public EF_UnivariateDistribution deepCopy(){
  EF_Normal copy=new EF_Normal(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  return copy;
}","@Override public EF_UnivariateDistribution deepCopy(){
  EF_Normal copy=new EF_Normal(this.getVariable());
  copy.getNaturalParameters().copy(this.getNaturalParameters());
  copy.getMomentParameters().copy(this.getMomentParameters());
  return copy;
}",0.856492027334852
21474,"@Override public void runLearning(){
  int cont=0;
  for (  DataInstance dataInstance : data) {
    System.out.println(""String_Node_Str"" + cont++);
    this.vmp.setEvidence(dataInstance);
    this.vmp.runInference();
    for (    EF_ConditionalDistribution dist : this.ef_extendedBN.getDistributionList()) {
      if (dist.getVariable().isParameterVariable()) {
        ((EF_BaseDistribution_MultinomialParents)dist).setBaseEFDistribution(0,this.vmp.getEFPosterior(dist.getVariable()).deepCopy());
      }
    }
  }
}","@Override public void runLearning(){
  int cont=0;
  for (  DataInstance dataInstance : data) {
    this.vmp.setEvidence(dataInstance);
    this.vmp.runInference();
    for (    EF_ConditionalDistribution dist : this.ef_extendedBN.getDistributionList()) {
      if (dist.getVariable().isParameterVariable()) {
        ((EF_BaseDistribution_MultinomialParents)dist).setBaseEFDistribution(0,this.vmp.getEFPosterior(dist.getVariable()).deepCopy());
      }
    }
  }
}",0.9470468431771896
21475,"public static void testGaussian() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataStream<DataInstance> data=sampler.sampleToDataBase(100);
  BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
  BayesianLearningEngineForBN.setDataStream(data);
  BayesianLearningEngineForBN.runLearning();
  BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
  System.out.println(oneNormalVarBN.toString());
  System.out.println(learntOneNormalVarBN.toString());
  assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.05));
}","public static void testGaussian() throws IOException, ClassNotFoundException {
  BayesianNetwork oneNormalVarBN=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(oneNormalVarBN);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataStream<DataInstance> data=sampler.sampleToDataBase(1000);
  BayesianLearningEngineForBN.setDAG(oneNormalVarBN.getDAG());
  BayesianLearningEngineForBN.setDataStream(data);
  BayesianLearningEngineForBN.runLearning();
  BayesianNetwork learntOneNormalVarBN=BayesianLearningEngineForBN.getLearntBayesianNetwork();
  System.out.println(oneNormalVarBN.toString());
  System.out.println(learntOneNormalVarBN.toString());
  assertTrue(oneNormalVarBN.equalBNs(learntOneNormalVarBN,0.05));
}",0.9993964996982498
21476,"@Override public void updateNaturalFromMomentParameters(){
  int nstates=var.getNumberOfStates();
  for (int i=0; i < nstates; i++) {
    if (this.momentParameters.get(i) == 0)     this.naturalParameters.set(i,-Double.MAX_VALUE);
 else     this.naturalParameters.set(i,Math.log(this.momentParameters.get(i)));
  }
}","@Override public void updateNaturalFromMomentParameters(){
  int nstates=var.getNumberOfStates();
  for (int i=0; i < nstates; i++) {
    if (this.momentParameters.get(i) == 0)     this.naturalParameters.set(i,Math.log(THRESHOLD));
 else     if (this.momentParameters.get(i) == 1)     this.naturalParameters.set(i,Math.log(1 - THRESHOLD));
 else     this.naturalParameters.set(i,Math.log(this.momentParameters.get(i)));
  }
}",0.7864864864864864
21477,"public static void main(String[] arguments) throws IOException, ClassNotFoundException {
  BayesianNetwork bn=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(bn.getNumberOfVars());
  System.out.println(bn.getDistributions().stream().mapToInt(p -> p.getNumberOfFreeParameters()).max().getAsInt());
  bn.randomInitialization(new Random(0));
  VMP vmp=new VMP();
  vmp.setParallelMode(true);
  InferenceEngineForBN.setInferenceAlgorithmForBN(vmp);
  double avg=0;
  for (int i=0; i < 20; i++) {
    InferenceEngineForBN.setModel(bn);
    Stopwatch watch=Stopwatch.createStarted();
    InferenceEngineForBN.compileModel();
    System.out.println(watch.stop());
    avg+=watch.elapsed(TimeUnit.MILLISECONDS);
  }
  System.out.println(avg / 20);
  System.out.println(InferenceEngineForBN.getPosterior(bn.getStaticVariables().getVariableById(0)).toString());
}","public static void main(String[] arguments) throws IOException, ClassNotFoundException {
  BayesianNetwork bn=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(bn.getNumberOfVars());
  System.out.println(bn.getDistributions().stream().mapToInt(p -> p.getNumberOfFreeParameters()).max().getAsInt());
  VMP vmp=new VMP();
  vmp.setParallelMode(true);
  InferenceEngineForBN.setInferenceAlgorithmForBN(vmp);
  double avg=0;
  for (int i=0; i < 20; i++) {
    InferenceEngineForBN.setModel(bn);
    Stopwatch watch=Stopwatch.createStarted();
    InferenceEngineForBN.compileModel();
    System.out.println(watch.stop());
    avg+=watch.elapsed(TimeUnit.MILLISECONDS);
  }
  System.out.println(avg / 20);
  System.out.println(InferenceEngineForBN.getPosterior(bn.getStaticVariables().getVariableById(0)).toString());
}",0.9755813953488373
21478,"@Override public void updateNaturalFromMomentParameters(){
  int nstates=var.getNumberOfStates();
  for (int i=0; i < nstates; i++) {
    if (this.momentParameters.get(i) == 0)     this.naturalParameters.set(i,-Double.MAX_VALUE);
 else     this.naturalParameters.set(i,Math.log(this.momentParameters.get(i)));
  }
}","@Override public void updateNaturalFromMomentParameters(){
  int nstates=var.getNumberOfStates();
  for (int i=0; i < nstates; i++) {
    if (this.momentParameters.get(i) == 0)     this.naturalParameters.set(i,Math.log(THRESHOLD));
 else     if (this.momentParameters.get(i) == 1)     this.naturalParameters.set(i,Math.log(1 - THRESHOLD));
 else     this.naturalParameters.set(i,Math.log(this.momentParameters.get(i)));
  }
}",0.7864864864864864
21479,"public static void main(String[] arguments) throws IOException, ClassNotFoundException {
  BayesianNetwork bn=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(bn.getNumberOfVars());
  System.out.println(bn.getDistributions().stream().mapToInt(p -> p.getNumberOfFreeParameters()).max().getAsInt());
  bn.randomInitialization(new Random(0));
  VMP vmp=new VMP();
  vmp.setParallelMode(true);
  InferenceEngineForBN.setInferenceAlgorithmForBN(vmp);
  double avg=0;
  for (int i=0; i < 20; i++) {
    InferenceEngineForBN.setModel(bn);
    Stopwatch watch=Stopwatch.createStarted();
    InferenceEngineForBN.compileModel();
    System.out.println(watch.stop());
    avg+=watch.elapsed(TimeUnit.MILLISECONDS);
  }
  System.out.println(avg / 20);
  System.out.println(InferenceEngineForBN.getPosterior(bn.getStaticVariables().getVariableById(0)).toString());
}","public static void main(String[] arguments) throws IOException, ClassNotFoundException {
  BayesianNetwork bn=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(bn.getNumberOfVars());
  System.out.println(bn.getDistributions().stream().mapToInt(p -> p.getNumberOfFreeParameters()).max().getAsInt());
  VMP vmp=new VMP();
  vmp.setParallelMode(true);
  InferenceEngineForBN.setInferenceAlgorithmForBN(vmp);
  double avg=0;
  for (int i=0; i < 20; i++) {
    InferenceEngineForBN.setModel(bn);
    Stopwatch watch=Stopwatch.createStarted();
    InferenceEngineForBN.compileModel();
    System.out.println(watch.stop());
    avg+=watch.elapsed(TimeUnit.MILLISECONDS);
  }
  System.out.println(avg / 20);
  System.out.println(InferenceEngineForBN.getPosterior(bn.getStaticVariables().getVariableById(0)).toString());
}",0.9755813953488373
21480,"@Override public void updateNaturalFromMomentParameters(){
  int nstates=var.getNumberOfStates();
  for (int i=0; i < nstates; i++) {
    if (this.momentParameters.get(i) == 0)     this.naturalParameters.set(i,-Double.MAX_VALUE);
 else     this.naturalParameters.set(i,Math.log(this.momentParameters.get(i)));
  }
}","@Override public void updateNaturalFromMomentParameters(){
  int nstates=var.getNumberOfStates();
  for (int i=0; i < nstates; i++) {
    if (this.momentParameters.get(i) == 0)     this.naturalParameters.set(i,Math.log(THRESHOLD));
 else     if (this.momentParameters.get(i) == 1)     this.naturalParameters.set(i,Math.log(1 - THRESHOLD));
 else     this.naturalParameters.set(i,Math.log(this.momentParameters.get(i)));
  }
}",0.7864864864864864
21481,"public static void main(String[] arguments) throws IOException, ClassNotFoundException {
  BayesianNetwork bn=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(bn.getNumberOfVars());
  System.out.println(bn.getDistributions().stream().mapToInt(p -> p.getNumberOfFreeParameters()).max().getAsInt());
  bn.randomInitialization(new Random(0));
  VMP vmp=new VMP();
  vmp.setParallelMode(true);
  InferenceEngineForBN.setInferenceAlgorithmForBN(vmp);
  double avg=0;
  for (int i=0; i < 20; i++) {
    InferenceEngineForBN.setModel(bn);
    Stopwatch watch=Stopwatch.createStarted();
    InferenceEngineForBN.compileModel();
    System.out.println(watch.stop());
    avg+=watch.elapsed(TimeUnit.MILLISECONDS);
  }
  System.out.println(avg / 20);
  System.out.println(InferenceEngineForBN.getPosterior(bn.getStaticVariables().getVariableById(0)).toString());
}","public static void main(String[] arguments) throws IOException, ClassNotFoundException {
  BayesianNetwork bn=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(bn.getNumberOfVars());
  System.out.println(bn.getDistributions().stream().mapToInt(p -> p.getNumberOfFreeParameters()).max().getAsInt());
  VMP vmp=new VMP();
  vmp.setParallelMode(true);
  InferenceEngineForBN.setInferenceAlgorithmForBN(vmp);
  double avg=0;
  for (int i=0; i < 20; i++) {
    InferenceEngineForBN.setModel(bn);
    Stopwatch watch=Stopwatch.createStarted();
    InferenceEngineForBN.compileModel();
    System.out.println(watch.stop());
    avg+=watch.elapsed(TimeUnit.MILLISECONDS);
  }
  System.out.println(avg / 20);
  System.out.println(InferenceEngineForBN.getPosterior(bn.getStaticVariables().getVariableById(0)).toString());
}",0.9755813953488373
21482,"@Override public void updateNaturalFromMomentParameters(){
  int nstates=var.getNumberOfStates();
  for (int i=0; i < nstates; i++) {
    if (this.momentParameters.get(i) == 0)     this.naturalParameters.set(i,-Double.MAX_VALUE);
 else     this.naturalParameters.set(i,Math.log(this.momentParameters.get(i)));
  }
}","@Override public void updateNaturalFromMomentParameters(){
  int nstates=var.getNumberOfStates();
  for (int i=0; i < nstates; i++) {
    if (this.momentParameters.get(i) == 0)     this.naturalParameters.set(i,Math.log(THRESHOLD));
 else     if (this.momentParameters.get(i) == 1)     this.naturalParameters.set(i,Math.log(1 - THRESHOLD));
 else     this.naturalParameters.set(i,Math.log(this.momentParameters.get(i)));
  }
}",0.7864864864864864
21483,"public static void main(String[] arguments) throws IOException, ClassNotFoundException {
  BayesianNetwork bn=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(bn.getNumberOfVars());
  System.out.println(bn.getDistributions().stream().mapToInt(p -> p.getNumberOfFreeParameters()).max().getAsInt());
  bn.randomInitialization(new Random(0));
  VMP vmp=new VMP();
  vmp.setParallelMode(true);
  InferenceEngineForBN.setInferenceAlgorithmForBN(vmp);
  double avg=0;
  for (int i=0; i < 20; i++) {
    InferenceEngineForBN.setModel(bn);
    Stopwatch watch=Stopwatch.createStarted();
    InferenceEngineForBN.compileModel();
    System.out.println(watch.stop());
    avg+=watch.elapsed(TimeUnit.MILLISECONDS);
  }
  System.out.println(avg / 20);
  System.out.println(InferenceEngineForBN.getPosterior(bn.getStaticVariables().getVariableById(0)).toString());
}","public static void main(String[] arguments) throws IOException, ClassNotFoundException {
  BayesianNetwork bn=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(bn.getNumberOfVars());
  System.out.println(bn.getDistributions().stream().mapToInt(p -> p.getNumberOfFreeParameters()).max().getAsInt());
  VMP vmp=new VMP();
  vmp.setParallelMode(true);
  InferenceEngineForBN.setInferenceAlgorithmForBN(vmp);
  double avg=0;
  for (int i=0; i < 20; i++) {
    InferenceEngineForBN.setModel(bn);
    Stopwatch watch=Stopwatch.createStarted();
    InferenceEngineForBN.compileModel();
    System.out.println(watch.stop());
    avg+=watch.elapsed(TimeUnit.MILLISECONDS);
  }
  System.out.println(avg / 20);
  System.out.println(InferenceEngineForBN.getPosterior(bn.getStaticVariables().getVariableById(0)).toString());
}",0.9755813953488373
21484,"public double dotProduct(CompoundVector vec){
  double result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=this.getcovbaseMatrix().getRowVector(0).dotProduct(vec.getcovbaseMatrix().getRowVector(0));
  result+=this.getcovbaseMatrix().getRowVector(1).dotProduct(vec.getcovbaseMatrix().getRowVector(1));
  return result;
}","public double dotProduct(CompoundVector vec){
  double result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=IntStream.range(0,nOfParents + 1).mapToDouble(p -> this.getcovbaseMatrix().getRowVector(p).dotProduct(vec.getcovbaseMatrix().getRowVector(p))).sum();
  return result;
}",0.70625
21485,"@Test public void testingProbabilities_Normal2NormalParents() throws IOException, ClassNotFoundException {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataBase<StaticDataInstance> data=sampler.sampleToDataBase(100000);
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  HashMapAssignment dataTmp=new HashMapAssignment(3);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  System.out.println(testnet.getDistributions().get(2).getLogConditionalProbability(dataTmp));
  System.out.println(ef_testnet.getDistributionList().get(2).computeLogProbabilityOf(dataTmp));
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOf(e);
    System.out.println(""String_Node_Str"" + logProb + ""String_Node_Str""+ ef_logProb);
    assertEquals(logProb,ef_logProb,0.0001);
  }
}","@Test public void testingProbabilities_Normal2NormalParents() throws IOException, ClassNotFoundException {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataBase<StaticDataInstance> data=sampler.sampleToDataBase(100000);
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  HashMapAssignment dataTmp=new HashMapAssignment(3);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  System.out.println(testnet.getDistributions().get(2).getLogConditionalProbability(dataTmp));
  System.out.println(ef_testnet.getDistributionList().get(2).computeLogProbabilityOf(dataTmp));
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOf(e);
    assertEquals(logProb,ef_logProb,0.0001);
  }
}",0.9696536951088895
21486,"public double dotProduct(CompoundVector vec){
  double result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=this.getcovbaseMatrix().getRowVector(0).dotProduct(vec.getcovbaseMatrix().getRowVector(0));
  result+=this.getcovbaseMatrix().getRowVector(1).dotProduct(vec.getcovbaseMatrix().getRowVector(1));
  return result;
}","public double dotProduct(CompoundVector vec){
  double result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=IntStream.range(0,nOfParents + 1).mapToDouble(p -> this.getcovbaseMatrix().getRowVector(p).dotProduct(vec.getcovbaseMatrix().getRowVector(p))).sum();
  return result;
}",0.70625
21487,"@Test public void testingProbabilities_Normal2NormalParents() throws IOException, ClassNotFoundException {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataBase<StaticDataInstance> data=sampler.sampleToDataBase(100000);
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  HashMapAssignment dataTmp=new HashMapAssignment(3);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  System.out.println(testnet.getDistributions().get(2).getLogConditionalProbability(dataTmp));
  System.out.println(ef_testnet.getDistributionList().get(2).computeLogProbabilityOf(dataTmp));
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOf(e);
    System.out.println(""String_Node_Str"" + logProb + ""String_Node_Str""+ ef_logProb);
    assertEquals(logProb,ef_logProb,0.0001);
  }
}","@Test public void testingProbabilities_Normal2NormalParents() throws IOException, ClassNotFoundException {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataBase<StaticDataInstance> data=sampler.sampleToDataBase(100000);
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  HashMapAssignment dataTmp=new HashMapAssignment(3);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  System.out.println(testnet.getDistributions().get(2).getLogConditionalProbability(dataTmp));
  System.out.println(ef_testnet.getDistributionList().get(2).computeLogProbabilityOf(dataTmp));
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOf(e);
    assertEquals(logProb,ef_logProb,0.0001);
  }
}",0.9696536951088895
21488,"public double dotProduct(CompoundVector vec){
  double result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=this.getcovbaseMatrix().getRowVector(0).dotProduct(vec.getcovbaseMatrix().getRowVector(0));
  result+=this.getcovbaseMatrix().getRowVector(1).dotProduct(vec.getcovbaseMatrix().getRowVector(1));
  return result;
}","public double dotProduct(CompoundVector vec){
  double result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=IntStream.range(0,nOfParents + 1).mapToDouble(p -> this.getcovbaseMatrix().getRowVector(p).dotProduct(vec.getcovbaseMatrix().getRowVector(p))).sum();
  return result;
}",0.70625
21489,"@Test public void testingProbabilities_Normal2NormalParents() throws IOException, ClassNotFoundException {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataBase<StaticDataInstance> data=sampler.sampleToDataBase(100000);
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  HashMapAssignment dataTmp=new HashMapAssignment(3);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  System.out.println(testnet.getDistributions().get(2).getLogConditionalProbability(dataTmp));
  System.out.println(ef_testnet.getDistributionList().get(2).computeLogProbabilityOf(dataTmp));
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOf(e);
    System.out.println(""String_Node_Str"" + logProb + ""String_Node_Str""+ ef_logProb);
    assertEquals(logProb,ef_logProb,0.0001);
  }
}","@Test public void testingProbabilities_Normal2NormalParents() throws IOException, ClassNotFoundException {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataBase<StaticDataInstance> data=sampler.sampleToDataBase(100000);
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  HashMapAssignment dataTmp=new HashMapAssignment(3);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  System.out.println(testnet.getDistributions().get(2).getLogConditionalProbability(dataTmp));
  System.out.println(ef_testnet.getDistributionList().get(2).computeLogProbabilityOf(dataTmp));
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOf(e);
    assertEquals(logProb,ef_logProb,0.0001);
  }
}",0.9696536951088895
21490,"public double dotProduct(CompoundVector vec){
  double result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=this.getcovbaseMatrix().getRowVector(0).dotProduct(vec.getcovbaseMatrix().getRowVector(0));
  result+=this.getcovbaseMatrix().getRowVector(1).dotProduct(vec.getcovbaseMatrix().getRowVector(1));
  return result;
}","public double dotProduct(CompoundVector vec){
  double result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=IntStream.range(0,nOfParents + 1).mapToDouble(p -> this.getcovbaseMatrix().getRowVector(p).dotProduct(vec.getcovbaseMatrix().getRowVector(p))).sum();
  return result;
}",0.70625
21491,"@Test public void testingProbabilities_Normal2NormalParents() throws IOException, ClassNotFoundException {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataBase<StaticDataInstance> data=sampler.sampleToDataBase(100000);
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  HashMapAssignment dataTmp=new HashMapAssignment(3);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  System.out.println(testnet.getDistributions().get(2).getLogConditionalProbability(dataTmp));
  System.out.println(ef_testnet.getDistributionList().get(2).computeLogProbabilityOf(dataTmp));
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOf(e);
    System.out.println(""String_Node_Str"" + logProb + ""String_Node_Str""+ ef_logProb);
    assertEquals(logProb,ef_logProb,0.0001);
  }
}","@Test public void testingProbabilities_Normal2NormalParents() throws IOException, ClassNotFoundException {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromFile(""String_Node_Str"");
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  DataBase<StaticDataInstance> data=sampler.sampleToDataBase(100000);
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  HashMapAssignment dataTmp=new HashMapAssignment(3);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  dataTmp.setValue(testnet.getStaticVariables().getVariableByName(""String_Node_Str""),1.0);
  System.out.println(testnet.getDistributions().get(2).getLogConditionalProbability(dataTmp));
  System.out.println(ef_testnet.getDistributionList().get(2).computeLogProbabilityOf(dataTmp));
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOf(e);
    assertEquals(logProb,ef_logProb,0.0001);
  }
}",0.9696536951088895
21492,"public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  double[] theta_beta=Arrays.stream(coeffParents).map(w -> w / variance).toArray();
  naturalParameters.setThetaCov_NatParam(theta_Minus1,theta_beta,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}","public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  naturalParameters.setThetaCov_NatParam(theta_Minus1,coeffParents,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}",0.9467336683417086
21493,"public void setThetaCov_NatParam(double theta_Minus1,double[] theta_beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector beta=new ArrayRealVector(theta_beta);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}","public void setThetaCov_NatParam(double theta_Minus1,double[] beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  double[] theta_beta=Arrays.stream(beta).map(w -> w * variance2Inv).toArray();
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector betaRV=new ArrayRealVector(beta);
  RealMatrix theta_betaBeta=betaRV.outerProduct(betaRV).scalarMultiply(-variance2Inv * 2);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}",0.9028571428571428
21494,"public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  double[] theta_beta=Arrays.stream(coeffParents).map(w -> w / variance).toArray();
  naturalParameters.setThetaCov_NatParam(theta_Minus1,theta_beta,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}","public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  naturalParameters.setThetaCov_NatParam(theta_Minus1,coeffParents,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}",0.9467336683417086
21495,"public void setThetaCov_NatParam(double theta_Minus1,double[] theta_beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector beta=new ArrayRealVector(theta_beta);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}","public void setThetaCov_NatParam(double theta_Minus1,double[] beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  double[] theta_beta=Arrays.stream(beta).map(w -> w * variance2Inv).toArray();
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector betaRV=new ArrayRealVector(beta);
  RealMatrix theta_betaBeta=betaRV.outerProduct(betaRV).scalarMultiply(-variance2Inv * 2);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}",0.9028571428571428
21496,"public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  double[] theta_beta=Arrays.stream(coeffParents).map(w -> w / variance).toArray();
  naturalParameters.setThetaCov_NatParam(theta_Minus1,theta_beta,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}","public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  naturalParameters.setThetaCov_NatParam(theta_Minus1,coeffParents,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}",0.9467336683417086
21497,"public void setThetaCov_NatParam(double theta_Minus1,double[] theta_beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector beta=new ArrayRealVector(theta_beta);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}","public void setThetaCov_NatParam(double theta_Minus1,double[] beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  double[] theta_beta=Arrays.stream(beta).map(w -> w * variance2Inv).toArray();
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector betaRV=new ArrayRealVector(beta);
  RealMatrix theta_betaBeta=betaRV.outerProduct(betaRV).scalarMultiply(-variance2Inv * 2);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}",0.9028571428571428
21498,"@Test public void testingProbabilities_NormalNormal1Parent() throws IOException, ClassNotFoundException, ExceptionHugin {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromHugin(""String_Node_Str"");
  Normal_NormalParents dist=(Normal_NormalParents)testnet.getDistributions().get(1);
  dist.getCoeffParents()[0]=0.0;
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  try {
    sampler.sampleToAnARFFFile(""String_Node_Str"",10);
  }
 catch (  IOException ex) {
  }
  DataBase<StaticDataInstance> data=new StaticDataOnDiskFromFile(new ARFFDataReader(new String(""String_Node_Str"")));
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOfFullAssignment(e);
    System.out.println(""String_Node_Str"" + logProb + ""String_Node_Str""+ ef_logProb);
    assertEquals(logProb,ef_logProb,0.05);
  }
}","@Test public void testingProbabilities_NormalNormal1Parent() throws IOException, ClassNotFoundException, ExceptionHugin {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromHugin(""String_Node_Str"");
  Normal_NormalParents dist=(Normal_NormalParents)testnet.getDistributions().get(1);
  dist.getCoeffParents()[0]=1.0;
  dist.setSd(1.0);
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  try {
    sampler.sampleToAnARFFFile(""String_Node_Str"",10);
  }
 catch (  IOException ex) {
  }
  DataBase<StaticDataInstance> data=new StaticDataOnDiskFromFile(new ARFFDataReader(new String(""String_Node_Str"")));
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOfFullAssignment(e);
    System.out.println(""String_Node_Str"" + logProb + ""String_Node_Str""+ ef_logProb);
    assertEquals(logProb,ef_logProb,0.05);
  }
}",0.992248062015504
21499,"public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  double[] theta_beta=Arrays.stream(coeffParents).map(w -> w / variance).toArray();
  naturalParameters.setThetaCov_NatParam(theta_Minus1,theta_beta,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}","public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  double[] theta_beta=Arrays.stream(coeffParents).map(w -> w / variance).toArray();
  naturalParameters.setThetaCov_NatParam(theta_Minus1,theta_beta,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}",0.9995171414775472
21500,"public void setThetaCov_NatParam(double theta_Minus1,double[] theta_beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector beta=new ArrayRealVector(theta_beta);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(variance2Inv);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}","public void setThetaCov_NatParam(double theta_Minus1,double[] theta_beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector beta=new ArrayRealVector(theta_beta);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}",0.9989701338825951
21501,"@Test public void testingProbabilities_NormalNormal1Parent() throws IOException, ClassNotFoundException, ExceptionHugin {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromHugin(""String_Node_Str"");
  Normal_NormalParents dist=(Normal_NormalParents)testnet.getDistributions().get(1);
  dist.getCoeffParents()[0]=0.0;
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  try {
    sampler.sampleToAnARFFFile(""String_Node_Str"",10);
  }
 catch (  IOException ex) {
  }
  DataBase<StaticDataInstance> data=new StaticDataOnDiskFromFile(new ARFFDataReader(new String(""String_Node_Str"")));
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOfFullAssignment(e);
    System.out.println(""String_Node_Str"" + logProb + ""String_Node_Str""+ ef_logProb);
    assertEquals(logProb,ef_logProb,0.05);
  }
}","@Test public void testingProbabilities_NormalNormal1Parent() throws IOException, ClassNotFoundException, ExceptionHugin {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromHugin(""String_Node_Str"");
  Normal_NormalParents dist=(Normal_NormalParents)testnet.getDistributions().get(1);
  dist.getCoeffParents()[0]=1.0;
  dist.setSd(1.0);
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  try {
    sampler.sampleToAnARFFFile(""String_Node_Str"",10);
  }
 catch (  IOException ex) {
  }
  DataBase<StaticDataInstance> data=new StaticDataOnDiskFromFile(new ARFFDataReader(new String(""String_Node_Str"")));
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOfFullAssignment(e);
    System.out.println(""String_Node_Str"" + logProb + ""String_Node_Str""+ ef_logProb);
    assertEquals(logProb,ef_logProb,0.05);
  }
}",0.992248062015504
21502,"public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  double[] theta_beta=Arrays.stream(coeffParents).map(w -> w / variance).toArray();
  naturalParameters.setThetaCov_NatParam(theta_Minus1,theta_beta,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}","public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  double[] theta_beta=Arrays.stream(coeffParents).map(w -> w / variance).toArray();
  naturalParameters.setThetaCov_NatParam(theta_Minus1,theta_beta,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}",0.9995171414775472
21503,"@Test public void testingProbabilities_NormalNormal1Parent() throws IOException, ClassNotFoundException, ExceptionHugin {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromHugin(""String_Node_Str"");
  Normal_NormalParents dist=(Normal_NormalParents)testnet.getDistributions().get(1);
  dist.getCoeffParents()[0]=0.0;
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  try {
    sampler.sampleToAnARFFFile(""String_Node_Str"",10);
  }
 catch (  IOException ex) {
  }
  DataBase<StaticDataInstance> data=new StaticDataOnDiskFromFile(new ARFFDataReader(new String(""String_Node_Str"")));
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOfFullAssignment(e);
    System.out.println(""String_Node_Str"" + logProb + ""String_Node_Str""+ ef_logProb);
    assertEquals(logProb,ef_logProb,0.05);
  }
}","@Test public void testingProbabilities_NormalNormal1Parent() throws IOException, ClassNotFoundException, ExceptionHugin {
  BayesianNetwork testnet=BayesianNetworkLoader.loadFromHugin(""String_Node_Str"");
  Normal_NormalParents dist=(Normal_NormalParents)testnet.getDistributions().get(1);
  dist.getCoeffParents()[0]=1.0;
  dist.setSd(1.0);
  System.out.println(testnet.toString());
  System.out.println(""String_Node_Str"");
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(testnet);
  sampler.setSeed(0);
  sampler.setParallelMode(true);
  try {
    sampler.sampleToAnARFFFile(""String_Node_Str"",10);
  }
 catch (  IOException ex) {
  }
  DataBase<StaticDataInstance> data=new StaticDataOnDiskFromFile(new ARFFDataReader(new String(""String_Node_Str"")));
  EF_BayesianNetwork ef_testnet=new EF_BayesianNetwork(testnet);
  for (  DataInstance e : data) {
    double ef_logProb=0, logProb=0;
    for (    EF_ConditionalDistribution ef_dist : ef_testnet.getDistributionList()) {
      ef_logProb+=ef_dist.computeLogProbabilityOf(e);
    }
    logProb=testnet.getLogProbabiltyOfFullAssignment(e);
    System.out.println(""String_Node_Str"" + logProb + ""String_Node_Str""+ ef_logProb);
    assertEquals(logProb,ef_logProb,0.05);
  }
}",0.992248062015504
21504,"public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  double[] theta_beta=Arrays.stream(coeffParents).map(w -> w / variance).toArray();
  naturalParameters.setThetaCov_NatParam(theta_Minus1,theta_beta,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}","public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  double[] theta_beta=Arrays.stream(coeffParents).map(w -> w / variance).toArray();
  naturalParameters.setThetaCov_NatParam(theta_Minus1,theta_beta,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}",0.9995171414775472
21505,"public void setThetaCov_NatParam(double theta_Minus1,double[] theta_beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector beta=new ArrayRealVector(theta_beta);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(variance2Inv);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}","public void setThetaCov_NatParam(double theta_Minus1,double[] theta_beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector beta=new ArrayRealVector(theta_beta);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}",0.9989701338825951
21506,"public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  double[] theta_beta=Arrays.stream(coeffParents).map(w -> w / variance).toArray();
  naturalParameters.setThetaCov_NatParam(theta_Minus1,theta_beta,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}","public static EF_Normal_NormalParents toEFDistribution(Normal_NormalParents dist){
  EF_Normal_NormalParents ef_normal_normalParents=new EF_Normal_NormalParents(dist.getVariable(),dist.getConditioningVariables());
  CompoundVector naturalParameters=ef_normal_normalParents.createEmtpyCompoundVector();
  double beta_0=dist.getIntercept();
  double[] coeffParents=dist.getCoeffParents();
  double sd=dist.getSd();
  double variance=sd * sd;
  double theta_0=beta_0 / variance;
  naturalParameters.setThetaBeta0_NatParam(theta_0);
  double variance2Inv=1.0 / (2 * variance);
  double[] theta0_beta=Arrays.stream(coeffParents).map(w -> -w * beta_0 * variance2Inv).toArray();
  naturalParameters.setThetaBeta0Beta_NatParam(theta0_beta);
  double theta_Minus1=-variance2Inv;
  naturalParameters.setThetaCov_NatParam(theta_Minus1,coeffParents,variance2Inv);
  ef_normal_normalParents.setNaturalParameters(naturalParameters);
  return ef_normal_normalParents;
}",0.9467336683417086
21507,"public void setThetaCov_NatParam(double theta_Minus1,double[] theta_beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector beta=new ArrayRealVector(theta_beta);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}","public void setThetaCov_NatParam(double theta_Minus1,double[] beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  double[] theta_beta=Arrays.stream(beta).map(w -> w * variance2Inv).toArray();
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector betaRV=new ArrayRealVector(beta);
  RealMatrix theta_betaBeta=betaRV.outerProduct(betaRV).scalarMultiply(-variance2Inv * 2);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}",0.9028571428571428
21508,"public void setThetaCov_NatParam(double theta_Minus1,double[] theta_beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector beta=new ArrayRealVector(theta_beta);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(variance2Inv);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}","public void setThetaCov_NatParam(double theta_Minus1,double[] theta_beta,double variance2Inv){
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta);
  covbaseVector.setColumnVector(0,covXY);
  covbaseVector.setRowVector(0,covXY);
  RealVector beta=new ArrayRealVector(theta_beta);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  covbaseVector.setSubMatrix(theta_betaBeta.getData(),1,1);
}",0.9989701338825951
21509,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  CompoundVector globalMomentsParam=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).getMomentParameters();
    globalMomentsParam.setBaseConf(i,1.0);
    globalMomentsParam.setVectorByPosition(i,moment);
  }
  CompoundVector vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.parents=Collections.unmodifiableList(this.parents);
}",0.7129666800481734
21510,"public double[] getAllBetaValues(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double[] theta_beta=globalNaturalParameters.getXYbaseMatrix().toArray();
  double beta0=theta_beta[0] * variance;
  double[] beta=Arrays.stream(theta_beta).map(w -> -w * 2 * variance / beta0).toArray();
  beta[0]=beta0;
  return beta;
}","public double[] getAllBetaValues(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double[] theta_beta=globalNaturalParameters.getXYbaseMatrix().toArray();
  double variance=getVariance();
  double beta0=theta_beta[0] * variance;
  double[] beta=Arrays.stream(theta_beta).map(w -> -w * 2 * variance / beta0).toArray();
  beta[0]=beta0;
  return beta;
}",0.955585464333782
21511,"public double dotProduct(CompoundVector vec){
  return 0.0;
}","public double dotProduct(CompoundVector vec){
  double result=0.0;
  result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=this.getcovbaseMatrix().getRowVector(0).dotProduct(vec.getcovbaseMatrix().getRowVector(0));
  result+=this.getcovbaseMatrix().getRowVector(1).dotProduct(vec.getcovbaseMatrix().getRowVector(1));
  return result;
}",0.2781774580335731
21512,"@Override public double computeLogNormalizer(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double theta_0=globalNaturalParameters.get(0);
  double beta_0=theta_0 * variance;
  return (beta_0 * beta_0) / (2 * variance) + Math.log(variance);
}","@Override public double computeLogNormalizer(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double theta_0=globalNaturalParameters.get(0);
  double theta_Minus1=globalNaturalParameters.getcovbaseMatrix().getEntry(0,0);
  double variance=-0.5 / theta_Minus1;
  double beta_0=theta_0 * variance;
  return (beta_0 * beta_0) / (2 * variance) + Math.log(variance);
}",0.8076358296622613
21513,"@Override public double computeLogBaseMeasure(DataInstance dataInstance){
  return 0.5 * Math.log(2 * Math.PI);
}","@Override public double computeLogBaseMeasure(DataInstance dataInstance){
  return -0.5 * Math.log(2 * Math.PI);
}",0.9955947136563876
21514,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentParam=(CompoundVector)this.momentParameters;
  double mean_X=globalMomentParam.getXYbaseMatrix().getEntry(0);
  RealVector mean_Y=globalMomentParam.getXYbaseMatrix().getSubVector(1,nOfParents);
  double cov_XX=globalMomentParam.getcovbaseMatrix().getEntry(0,0) - mean_X * mean_X;
  RealMatrix cov_YY=globalMomentParam.getcovbaseMatrix().getSubMatrix(1,nOfParents,1,nOfParents).subtract(mean_Y.outerProduct(mean_Y));
  RealVector cov_XY=globalMomentParam.getcovbaseMatrix().getSubMatrix(0,0,1,nOfParents).getRowVector(0).subtract(mean_Y.mapMultiply(mean_X));
  RealMatrix cov_YYInverse=new LUDecompositionImpl(cov_YY).getSolver().getInverse();
  RealVector beta=cov_YYInverse.preMultiply(cov_XY);
  double beta_0=mean_X - beta.dotProduct(mean_Y);
  variance=cov_XX - beta.dotProduct(cov_XY);
  double theta_0=beta_0 / variance;
  double[] theta_0array={theta_0};
  double variance2Inv=1.0 / (2 * variance);
  RealVector theta_0Theta=beta.mapMultiply(-beta_0 * variance2Inv);
  ((CompoundVector)this.naturalParameters).setXYbaseVector(new ArrayRealVector(theta_0array,theta_0Theta.getData()));
  double theta_Minus1=-variance2Inv;
  RealVector theta_beta=beta.mapMultiply(1.0 / variance);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  RealMatrix natural_XY=new Array2DRowRealMatrix(nOfParents + 1,nOfParents + 1);
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta.getData());
  natural_XY.setColumnVector(0,covXY);
  natural_XY.setRowVector(0,covXY);
  natural_XY.setSubMatrix(theta_betaBeta.getData(),1,1);
  ((CompoundVector)this.naturalParameters).setcovbaseVector(natural_XY);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentParam=(CompoundVector)this.momentParameters;
  double mean_X=globalMomentParam.getXYbaseMatrix().getEntry(0);
  RealVector mean_Y=globalMomentParam.getXYbaseMatrix().getSubVector(1,nOfParents);
  double cov_XX=globalMomentParam.getcovbaseMatrix().getEntry(0,0) - mean_X * mean_X;
  RealMatrix cov_YY=globalMomentParam.getcovbaseMatrix().getSubMatrix(1,nOfParents,1,nOfParents).subtract(mean_Y.outerProduct(mean_Y));
  RealVector cov_XY=globalMomentParam.getcovbaseMatrix().getSubMatrix(0,0,1,nOfParents).getRowVector(0).subtract(mean_Y.mapMultiply(mean_X));
  RealMatrix cov_YYInverse=new LUDecompositionImpl(cov_YY).getSolver().getInverse();
  RealVector beta=cov_YYInverse.preMultiply(cov_XY);
  double beta_0=mean_X - beta.dotProduct(mean_Y);
  double variance=cov_XX - beta.dotProduct(cov_XY);
  double theta_0=beta_0 / variance;
  double[] theta_0array={theta_0};
  double variance2Inv=1.0 / (2 * variance);
  RealVector theta_0Theta=beta.mapMultiply(-beta_0 * variance2Inv);
  ((CompoundVector)this.naturalParameters).setXYbaseVector(new ArrayRealVector(theta_0array,theta_0Theta.getData()));
  double theta_Minus1=-variance2Inv;
  RealVector theta_beta=beta.mapMultiply(1.0 / variance);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  RealMatrix natural_XY=new Array2DRowRealMatrix(nOfParents + 1,nOfParents + 1);
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta.getData());
  natural_XY.setColumnVector(0,covXY);
  natural_XY.setRowVector(0,covXY);
  natural_XY.setSubMatrix(theta_betaBeta.getData(),1,1);
  ((CompoundVector)this.naturalParameters).setcovbaseVector(natural_XY);
}",0.9980265012686778
21515,"public double getVariance(){
  return variance;
}","public double getVariance(){
  double theta_Minus1=((CompoundVector)this.naturalParameters).getcovbaseMatrix().getEntry(0,0);
  return -0.5 / theta_Minus1;
}",0.4271844660194174
21516,"public EF_BayesianNetwork(List<ParentSet> parentSets){
  distributionList=new ArrayList(parentSets.size());
  sizeSS=0;
  for (  ParentSet parentSet : parentSets) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
  this.momentParameters=this.createZeroedMomentParameters();
  this.naturalParameters=this.createZeroedNaturalParameters();
}","public EF_BayesianNetwork(List<ParentSet> parentSets){
  distributionList=new ArrayList(parentSets.size());
  sizeSS=0;
  for (  ParentSet parentSet : parentSets) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    dist.randomInitialization(new Random(0));
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
  CompoundVector vectorNatural=this.createEmtpyCompoundVector();
  for (  EF_ConditionalDistribution dist : distributionList) {
    vectorNatural.setVectorByPosition(dist.getVariable().getVarID(),dist.getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.momentParameters=null;
}",0.7353342428376535
21517,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  CompoundVector globalMomentsParam=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).getMomentParameters();
    globalMomentsParam.setBaseConf(i,1.0);
    globalMomentsParam.setVectorByPosition(i,moment);
  }
  CompoundVector vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  CompoundVector vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.momentParameters=null;
  this.parents=Collections.unmodifiableList(this.parents);
}",0.7390848760041914
21518,"public EF_BayesianNetwork(List<ParentSet> parentSets){
  distributionList=new ArrayList(parentSets.size());
  sizeSS=0;
  for (  ParentSet parentSet : parentSets) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
  this.momentParameters=this.createZeroedMomentParameters();
  this.naturalParameters=this.createZeroedNaturalParameters();
}","public EF_BayesianNetwork(List<ParentSet> parentSets){
  distributionList=new ArrayList(parentSets.size());
  sizeSS=0;
  for (  ParentSet parentSet : parentSets) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    dist.randomInitialization(new Random(0));
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
  CompoundVector vectorNatural=this.createEmtpyCompoundVector();
  for (  EF_ConditionalDistribution dist : distributionList) {
    vectorNatural.setVectorByPosition(dist.getVariable().getVarID(),dist.getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.momentParameters=null;
}",0.7353342428376535
21519,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  CompoundVector globalMomentsParam=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).getMomentParameters();
    globalMomentsParam.setBaseConf(i,1.0);
    globalMomentsParam.setVectorByPosition(i,moment);
  }
  CompoundVector vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  CompoundVector vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.momentParameters=null;
  this.parents=Collections.unmodifiableList(this.parents);
}",0.7390848760041914
21520,"public EF_BayesianNetwork(List<ParentSet> parentSets){
  distributionList=new ArrayList(parentSets.size());
  sizeSS=0;
  for (  ParentSet parentSet : parentSets) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
  this.momentParameters=this.createZeroedMomentParameters();
  this.naturalParameters=this.createZeroedNaturalParameters();
}","public EF_BayesianNetwork(List<ParentSet> parentSets){
  distributionList=new ArrayList(parentSets.size());
  sizeSS=0;
  for (  ParentSet parentSet : parentSets) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    dist.randomInitialization(new Random(0));
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
  CompoundVector vectorNatural=this.createEmtpyCompoundVector();
  for (  EF_ConditionalDistribution dist : distributionList) {
    vectorNatural.setVectorByPosition(dist.getVariable().getVarID(),dist.getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.momentParameters=null;
}",0.7353342428376535
21521,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  CompoundVector globalMomentsParam=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).getMomentParameters();
    globalMomentsParam.setBaseConf(i,1.0);
    globalMomentsParam.setVectorByPosition(i,moment);
  }
  CompoundVector vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  CompoundVector vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.momentParameters=null;
  this.parents=Collections.unmodifiableList(this.parents);
}",0.7390848760041914
21522,"public EF_BayesianNetwork(List<ParentSet> parentSets){
  distributionList=new ArrayList(parentSets.size());
  sizeSS=0;
  for (  ParentSet parentSet : parentSets) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
  this.momentParameters=this.createZeroedMomentParameters();
  this.naturalParameters=this.createZeroedNaturalParameters();
}","public EF_BayesianNetwork(List<ParentSet> parentSets){
  distributionList=new ArrayList(parentSets.size());
  sizeSS=0;
  for (  ParentSet parentSet : parentSets) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    dist.randomInitialization(new Random(0));
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
  CompoundVector vectorNatural=this.createEmtpyCompoundVector();
  for (  EF_ConditionalDistribution dist : distributionList) {
    vectorNatural.setVectorByPosition(dist.getVariable().getVarID(),dist.getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.momentParameters=null;
}",0.7353342428376535
21523,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  CompoundVector globalMomentsParam=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).getMomentParameters();
    globalMomentsParam.setBaseConf(i,1.0);
    globalMomentsParam.setVectorByPosition(i,moment);
  }
  CompoundVector vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.parents=Collections.unmodifiableList(this.parents);
}",0.7129666800481734
21524,"public double[] getAllBetaValues(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double[] theta_beta=globalNaturalParameters.getXYbaseMatrix().toArray();
  double beta0=theta_beta[0] * variance;
  double[] beta=Arrays.stream(theta_beta).map(w -> -w * 2 * variance / beta0).toArray();
  beta[0]=beta0;
  return beta;
}","public double[] getAllBetaValues(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double[] theta_beta=globalNaturalParameters.getXYbaseMatrix().toArray();
  double variance=getVariance();
  double beta0=theta_beta[0] * variance;
  double[] beta=Arrays.stream(theta_beta).map(w -> -w * 2 * variance / beta0).toArray();
  beta[0]=beta0;
  return beta;
}",0.955585464333782
21525,"public double dotProduct(CompoundVector vec){
  return 0.0;
}","public double dotProduct(CompoundVector vec){
  double result=0.0;
  result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=this.getcovbaseMatrix().getRowVector(0).dotProduct(vec.getcovbaseMatrix().getRowVector(0));
  result+=this.getcovbaseMatrix().getRowVector(1).dotProduct(vec.getcovbaseMatrix().getRowVector(1));
  return result;
}",0.2781774580335731
21526,"@Override public double computeLogNormalizer(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double theta_0=globalNaturalParameters.get(0);
  double beta_0=theta_0 * variance;
  return (beta_0 * beta_0) / (2 * variance) + Math.log(variance);
}","@Override public double computeLogNormalizer(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double theta_0=globalNaturalParameters.get(0);
  double theta_Minus1=globalNaturalParameters.getcovbaseMatrix().getEntry(0,0);
  double variance=-0.5 / theta_Minus1;
  double beta_0=theta_0 * variance;
  return (beta_0 * beta_0) / (2 * variance) + Math.log(variance);
}",0.8076358296622613
21527,"@Override public double computeLogBaseMeasure(DataInstance dataInstance){
  return 0.5 * Math.log(2 * Math.PI);
}","@Override public double computeLogBaseMeasure(DataInstance dataInstance){
  return -0.5 * Math.log(2 * Math.PI);
}",0.9955947136563876
21528,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentParam=(CompoundVector)this.momentParameters;
  double mean_X=globalMomentParam.getXYbaseMatrix().getEntry(0);
  RealVector mean_Y=globalMomentParam.getXYbaseMatrix().getSubVector(1,nOfParents);
  double cov_XX=globalMomentParam.getcovbaseMatrix().getEntry(0,0) - mean_X * mean_X;
  RealMatrix cov_YY=globalMomentParam.getcovbaseMatrix().getSubMatrix(1,nOfParents,1,nOfParents).subtract(mean_Y.outerProduct(mean_Y));
  RealVector cov_XY=globalMomentParam.getcovbaseMatrix().getSubMatrix(0,0,1,nOfParents).getRowVector(0).subtract(mean_Y.mapMultiply(mean_X));
  RealMatrix cov_YYInverse=new LUDecompositionImpl(cov_YY).getSolver().getInverse();
  RealVector beta=cov_YYInverse.preMultiply(cov_XY);
  double beta_0=mean_X - beta.dotProduct(mean_Y);
  variance=cov_XX - beta.dotProduct(cov_XY);
  double theta_0=beta_0 / variance;
  double[] theta_0array={theta_0};
  double variance2Inv=1.0 / (2 * variance);
  RealVector theta_0Theta=beta.mapMultiply(-beta_0 * variance2Inv);
  ((CompoundVector)this.naturalParameters).setXYbaseVector(new ArrayRealVector(theta_0array,theta_0Theta.getData()));
  double theta_Minus1=-variance2Inv;
  RealVector theta_beta=beta.mapMultiply(1.0 / variance);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  RealMatrix natural_XY=new Array2DRowRealMatrix(nOfParents + 1,nOfParents + 1);
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta.getData());
  natural_XY.setColumnVector(0,covXY);
  natural_XY.setRowVector(0,covXY);
  natural_XY.setSubMatrix(theta_betaBeta.getData(),1,1);
  ((CompoundVector)this.naturalParameters).setcovbaseVector(natural_XY);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentParam=(CompoundVector)this.momentParameters;
  double mean_X=globalMomentParam.getXYbaseMatrix().getEntry(0);
  RealVector mean_Y=globalMomentParam.getXYbaseMatrix().getSubVector(1,nOfParents);
  double cov_XX=globalMomentParam.getcovbaseMatrix().getEntry(0,0) - mean_X * mean_X;
  RealMatrix cov_YY=globalMomentParam.getcovbaseMatrix().getSubMatrix(1,nOfParents,1,nOfParents).subtract(mean_Y.outerProduct(mean_Y));
  RealVector cov_XY=globalMomentParam.getcovbaseMatrix().getSubMatrix(0,0,1,nOfParents).getRowVector(0).subtract(mean_Y.mapMultiply(mean_X));
  RealMatrix cov_YYInverse=new LUDecompositionImpl(cov_YY).getSolver().getInverse();
  RealVector beta=cov_YYInverse.preMultiply(cov_XY);
  double beta_0=mean_X - beta.dotProduct(mean_Y);
  double variance=cov_XX - beta.dotProduct(cov_XY);
  double theta_0=beta_0 / variance;
  double[] theta_0array={theta_0};
  double variance2Inv=1.0 / (2 * variance);
  RealVector theta_0Theta=beta.mapMultiply(-beta_0 * variance2Inv);
  ((CompoundVector)this.naturalParameters).setXYbaseVector(new ArrayRealVector(theta_0array,theta_0Theta.getData()));
  double theta_Minus1=-variance2Inv;
  RealVector theta_beta=beta.mapMultiply(1.0 / variance);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  RealMatrix natural_XY=new Array2DRowRealMatrix(nOfParents + 1,nOfParents + 1);
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta.getData());
  natural_XY.setColumnVector(0,covXY);
  natural_XY.setRowVector(0,covXY);
  natural_XY.setSubMatrix(theta_betaBeta.getData(),1,1);
  ((CompoundVector)this.naturalParameters).setcovbaseVector(natural_XY);
}",0.9980265012686778
21529,"public double getVariance(){
  return variance;
}","public double getVariance(){
  double theta_Minus1=((CompoundVector)this.naturalParameters).getcovbaseMatrix().getEntry(0,0);
  return -0.5 / theta_Minus1;
}",0.4271844660194174
21530,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  CompoundVector globalMomentsParam=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).getMomentParameters();
    globalMomentsParam.setBaseConf(i,1.0);
    globalMomentsParam.setVectorByPosition(i,moment);
  }
  CompoundVector vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.parents=Collections.unmodifiableList(this.parents);
}",0.7129666800481734
21531,"public double[] getAllBetaValues(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double[] theta_beta=globalNaturalParameters.getXYbaseMatrix().toArray();
  double beta0=theta_beta[0] * variance;
  double[] beta=Arrays.stream(theta_beta).map(w -> -w * 2 * variance / beta0).toArray();
  beta[0]=beta0;
  return beta;
}","public double[] getAllBetaValues(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double[] theta_beta=globalNaturalParameters.getXYbaseMatrix().toArray();
  double variance=getVariance();
  double beta0=theta_beta[0] * variance;
  double[] beta=Arrays.stream(theta_beta).map(w -> -w * 2 * variance / beta0).toArray();
  beta[0]=beta0;
  return beta;
}",0.955585464333782
21532,"public double dotProduct(CompoundVector vec){
  return 0.0;
}","public double dotProduct(CompoundVector vec){
  double result=0.0;
  result=this.getXYbaseMatrix().dotProduct(vec.getXYbaseMatrix());
  result+=this.getcovbaseMatrix().getRowVector(0).dotProduct(vec.getcovbaseMatrix().getRowVector(0));
  result+=this.getcovbaseMatrix().getRowVector(1).dotProduct(vec.getcovbaseMatrix().getRowVector(1));
  return result;
}",0.2781774580335731
21533,"@Override public double computeLogNormalizer(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double theta_0=globalNaturalParameters.get(0);
  double beta_0=theta_0 * variance;
  return (beta_0 * beta_0) / (2 * variance) + Math.log(variance);
}","@Override public double computeLogNormalizer(){
  CompoundVector globalNaturalParameters=(CompoundVector)this.naturalParameters;
  double theta_0=globalNaturalParameters.get(0);
  double theta_Minus1=globalNaturalParameters.getcovbaseMatrix().getEntry(0,0);
  double variance=-0.5 / theta_Minus1;
  double beta_0=theta_0 * variance;
  return (beta_0 * beta_0) / (2 * variance) + Math.log(variance);
}",0.8076358296622613
21534,"@Override public double computeLogBaseMeasure(DataInstance dataInstance){
  return 0.5 * Math.log(2 * Math.PI);
}","@Override public double computeLogBaseMeasure(DataInstance dataInstance){
  return -0.5 * Math.log(2 * Math.PI);
}",0.9955947136563876
21535,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentParam=(CompoundVector)this.momentParameters;
  double mean_X=globalMomentParam.getXYbaseMatrix().getEntry(0);
  RealVector mean_Y=globalMomentParam.getXYbaseMatrix().getSubVector(1,nOfParents);
  double cov_XX=globalMomentParam.getcovbaseMatrix().getEntry(0,0) - mean_X * mean_X;
  RealMatrix cov_YY=globalMomentParam.getcovbaseMatrix().getSubMatrix(1,nOfParents,1,nOfParents).subtract(mean_Y.outerProduct(mean_Y));
  RealVector cov_XY=globalMomentParam.getcovbaseMatrix().getSubMatrix(0,0,1,nOfParents).getRowVector(0).subtract(mean_Y.mapMultiply(mean_X));
  RealMatrix cov_YYInverse=new LUDecompositionImpl(cov_YY).getSolver().getInverse();
  RealVector beta=cov_YYInverse.preMultiply(cov_XY);
  double beta_0=mean_X - beta.dotProduct(mean_Y);
  variance=cov_XX - beta.dotProduct(cov_XY);
  double theta_0=beta_0 / variance;
  double[] theta_0array={theta_0};
  double variance2Inv=1.0 / (2 * variance);
  RealVector theta_0Theta=beta.mapMultiply(-beta_0 * variance2Inv);
  ((CompoundVector)this.naturalParameters).setXYbaseVector(new ArrayRealVector(theta_0array,theta_0Theta.getData()));
  double theta_Minus1=-variance2Inv;
  RealVector theta_beta=beta.mapMultiply(1.0 / variance);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  RealMatrix natural_XY=new Array2DRowRealMatrix(nOfParents + 1,nOfParents + 1);
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta.getData());
  natural_XY.setColumnVector(0,covXY);
  natural_XY.setRowVector(0,covXY);
  natural_XY.setSubMatrix(theta_betaBeta.getData(),1,1);
  ((CompoundVector)this.naturalParameters).setcovbaseVector(natural_XY);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentParam=(CompoundVector)this.momentParameters;
  double mean_X=globalMomentParam.getXYbaseMatrix().getEntry(0);
  RealVector mean_Y=globalMomentParam.getXYbaseMatrix().getSubVector(1,nOfParents);
  double cov_XX=globalMomentParam.getcovbaseMatrix().getEntry(0,0) - mean_X * mean_X;
  RealMatrix cov_YY=globalMomentParam.getcovbaseMatrix().getSubMatrix(1,nOfParents,1,nOfParents).subtract(mean_Y.outerProduct(mean_Y));
  RealVector cov_XY=globalMomentParam.getcovbaseMatrix().getSubMatrix(0,0,1,nOfParents).getRowVector(0).subtract(mean_Y.mapMultiply(mean_X));
  RealMatrix cov_YYInverse=new LUDecompositionImpl(cov_YY).getSolver().getInverse();
  RealVector beta=cov_YYInverse.preMultiply(cov_XY);
  double beta_0=mean_X - beta.dotProduct(mean_Y);
  double variance=cov_XX - beta.dotProduct(cov_XY);
  double theta_0=beta_0 / variance;
  double[] theta_0array={theta_0};
  double variance2Inv=1.0 / (2 * variance);
  RealVector theta_0Theta=beta.mapMultiply(-beta_0 * variance2Inv);
  ((CompoundVector)this.naturalParameters).setXYbaseVector(new ArrayRealVector(theta_0array,theta_0Theta.getData()));
  double theta_Minus1=-variance2Inv;
  RealVector theta_beta=beta.mapMultiply(1.0 / variance);
  RealMatrix theta_betaBeta=beta.outerProduct(beta).scalarMultiply(-variance2Inv);
  RealMatrix natural_XY=new Array2DRowRealMatrix(nOfParents + 1,nOfParents + 1);
  double[] theta_Minus1array={theta_Minus1};
  RealVector covXY=new ArrayRealVector(theta_Minus1array,theta_beta.getData());
  natural_XY.setColumnVector(0,covXY);
  natural_XY.setRowVector(0,covXY);
  natural_XY.setSubMatrix(theta_betaBeta.getData(),1,1);
  ((CompoundVector)this.naturalParameters).setcovbaseVector(natural_XY);
}",0.9980265012686778
21536,"public double getVariance(){
  return variance;
}","public double getVariance(){
  double theta_Minus1=((CompoundVector)this.naturalParameters).getcovbaseMatrix().getEntry(0,0);
  return -0.5 / theta_Minus1;
}",0.4271844660194174
21537,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  CompoundVector globalMomentsParam=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).getMomentParameters();
    globalMomentsParam.setBaseConf(i,1.0);
    globalMomentsParam.setVectorByPosition(i,moment);
  }
  CompoundVector vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  this.parents=Collections.unmodifiableList(this.parents);
}",0.7129666800481734
21538,"default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
      FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
      String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
      builder.append(nameState + ""String_Node_Str"");
    }
 else {
      builder.append(this.getValue(vars.get(i)) + ""String_Node_Str"");
    }
  }
  if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
    FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
    builder.append(nameState);
  }
 else {
    builder.append(this.getValue(vars.get(vars.size() - 1)));
  }
  return builder.toString();
}","default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
      FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
      String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
      builder.append(nameState + ""String_Node_Str"");
    }
 else     if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.REAL) {
      builder.append(this.getValue(vars.get(i)) + ""String_Node_Str"");
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + vars.get(i).getStateSpace().getStateSpaceType());
    }
  }
  if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
    FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
    builder.append(nameState);
  }
 else   if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.REAL) {
    builder.append(this.getValue(vars.get(vars.size() - 1)));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + vars.get(vars.size() - 1).getStateSpace().getStateSpaceType());
  }
  return builder.toString();
}",0.8134715025906736
21539,"default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
      FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
      String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
      builder.append(nameState + ""String_Node_Str"");
    }
 else {
      builder.append(this.getValue(vars.get(i)) + ""String_Node_Str"");
    }
  }
  if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
    FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
    builder.append(nameState);
  }
 else {
    builder.append(this.getValue(vars.get(vars.size() - 1)));
  }
  return builder.toString();
}","default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
      FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
      String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
      builder.append(nameState + ""String_Node_Str"");
    }
 else     if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.REAL) {
      builder.append(this.getValue(vars.get(i)) + ""String_Node_Str"");
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + vars.get(i).getStateSpace().getStateSpaceType());
    }
  }
  if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
    FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
    builder.append(nameState);
  }
 else   if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.REAL) {
    builder.append(this.getValue(vars.get(vars.size() - 1)));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + vars.get(vars.size() - 1).getStateSpace().getStateSpaceType());
  }
  return builder.toString();
}",0.8134715025906736
21540,"default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
      FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
      String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
      builder.append(nameState + ""String_Node_Str"");
    }
 else {
      builder.append(this.getValue(vars.get(i)) + ""String_Node_Str"");
    }
  }
  if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
    FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
    builder.append(nameState);
  }
 else {
    builder.append(this.getValue(vars.get(vars.size() - 1)));
  }
  return builder.toString();
}","default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
      FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
      String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
      builder.append(nameState + ""String_Node_Str"");
    }
 else     if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.REAL) {
      builder.append(this.getValue(vars.get(i)) + ""String_Node_Str"");
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + vars.get(i).getStateSpace().getStateSpaceType());
    }
  }
  if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
    FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
    builder.append(nameState);
  }
 else   if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.REAL) {
    builder.append(this.getValue(vars.get(vars.size() - 1)));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + vars.get(vars.size() - 1).getStateSpace().getStateSpaceType());
  }
  return builder.toString();
}",0.8134715025906736
21541,"default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
      FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
      String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
      builder.append(nameState + ""String_Node_Str"");
    }
 else {
      builder.append(this.getValue(vars.get(i)) + ""String_Node_Str"");
    }
  }
  if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
    FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
    builder.append(nameState);
  }
 else {
    builder.append(this.getValue(vars.get(vars.size() - 1)));
  }
  return builder.toString();
}","default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
      FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
      String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
      builder.append(nameState + ""String_Node_Str"");
    }
 else     if (vars.get(i).getStateSpace().getStateSpaceType() == StateSpaceType.REAL) {
      builder.append(this.getValue(vars.get(i)) + ""String_Node_Str"");
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + vars.get(i).getStateSpace().getStateSpaceType());
    }
  }
  if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.FINITE_SET) {
    FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
    builder.append(nameState);
  }
 else   if (vars.get(vars.size() - 1).getStateSpace().getStateSpaceType() == StateSpaceType.REAL) {
    builder.append(this.getValue(vars.get(vars.size() - 1)));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + vars.get(vars.size() - 1).getStateSpace().getStateSpaceType());
  }
  return builder.toString();
}",0.8134715025906736
21542,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        multinomialParentsIndexes.add(j);
      }
    }
    Collections.reverse(multinomialParentsIndexes);
    ArrayList<Integer> parentsIndexes=new ArrayList();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        parentsIndexes.add(multinomialParentsIndexes.get(0));
        multinomialParentsIndexes.remove(0);
      }
 else {
        parentsIndexes.add(j);
      }
    }
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(parentsIndexes.get(j));
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.7767882792301063
21543,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    if (n.getTemporalMaster() == null) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
  }
  Attributes attributes=new Attributes(atts);
  DynamicVariables dynamicVariables=new DynamicVariables(attributes);
  DynamicDAG dynamicDAG=new DynamicDAG(dynamicVariables);
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    if (huginChild.getTemporalMaster() == null) {
      Variable amidstChild=dynamicVariables.getVariableByName(huginChild.getName());
      NodeList huginParents=huginChild.getParents();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=(Node)huginParents.get(j);
        if (huginParent.getTemporalMaster() == null) {
          Variable amidstParent=dynamicVariables.getVariableByName(huginParent.getName());
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstParent);
        }
 else {
          Variable amidstClone=dynamicVariables.getTemporalClone(amidstChild);
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstClone);
        }
      }
    }
  }
  this.amidstDBN=DynamicBayesianNetwork.newDynamicBayesianNetwork(dynamicDAG);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    if (n.getTemporalMaster() == null) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
  }
  Attributes attributes=new Attributes(atts);
  DynamicVariables dynamicVariables=new DynamicVariables(attributes);
  DynamicDAG dynamicDAG=new DynamicDAG(dynamicVariables);
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    if (huginChild.getTemporalMaster() == null) {
      Variable amidstChild=dynamicVariables.getVariableByName(huginChild.getName());
      NodeList huginParents=huginChild.getParents();
      ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=huginParents.get(j);
        if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
          multinomialParentsIndexes.add(j);
        }
      }
      Collections.reverse(multinomialParentsIndexes);
      ArrayList<Integer> parentsIndexes=new ArrayList();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=huginParents.get(j);
        if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
          parentsIndexes.add(multinomialParentsIndexes.get(0));
          multinomialParentsIndexes.remove(0);
        }
 else {
          parentsIndexes.add(j);
        }
      }
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=(Node)huginParents.get(parentsIndexes.get(j));
        if (huginParent.getTemporalMaster() == null) {
          Variable amidstParent=dynamicVariables.getVariableByName(huginParent.getName());
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstParent);
        }
 else {
          Variable amidstClone=dynamicVariables.getTemporalClone(amidstChild);
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstClone);
        }
      }
    }
  }
  this.amidstDBN=DynamicBayesianNetwork.newDynamicBayesianNetwork(dynamicDAG);
}",0.802045288531775
21544,"private void testParents(Variable amidstVar,Node huginVar) throws ExceptionHugin {
  ParentSet parentsAmidstVar=amidstBN.getDAG().getParentSet(amidstVar);
  NodeList parentsHuginVar=huginVar.getParents();
  int numParentsAmidstVar=parentsAmidstVar.getNumberOfParents();
  int numParentsHuginVar=parentsHuginVar.size();
  assertEquals(numParentsAmidstVar,numParentsHuginVar);
  for (int j=0; j < numParentsAmidstVar; j++) {
    Variable parentAmidstVar=parentsAmidstVar.getParents().get(j);
    String parentNameHuginVar=((Node)parentsHuginVar.get(j)).getName();
    String parentNameAmidstVar=parentAmidstVar.getName();
    assertEquals(parentNameAmidstVar,parentNameHuginVar);
  }
}","private void testParents(Variable amidstVar,Node huginVar) throws ExceptionHugin {
  ParentSet parentsAmidstVar=amidstBN.getDAG().getParentSet(amidstVar);
  NodeList parentsHuginVar=huginVar.getParents();
  int numParentsAmidstVar=parentsAmidstVar.getNumberOfParents();
  int numParentsHuginVar=parentsHuginVar.size();
  assertEquals(numParentsAmidstVar,numParentsHuginVar);
  ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
  for (int j=0; j < parentsHuginVar.size(); j++) {
    Node huginParent=parentsHuginVar.get(j);
    if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      multinomialParentsIndexes.add(j);
    }
  }
  Collections.reverse(multinomialParentsIndexes);
  ArrayList<Integer> parentsIndexes=new ArrayList();
  for (int j=0; j < parentsHuginVar.size(); j++) {
    Node huginParent=parentsHuginVar.get(j);
    if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      parentsIndexes.add(multinomialParentsIndexes.get(0));
      multinomialParentsIndexes.remove(0);
    }
 else {
      parentsIndexes.add(j);
    }
  }
  for (int j=0; j < numParentsAmidstVar; j++) {
    Variable parentAmidstVar=parentsAmidstVar.getParents().get(j);
    String parentNameHuginVar=((Node)parentsHuginVar.get(parentsIndexes.get(j))).getName();
    String parentNameAmidstVar=parentAmidstVar.getName();
    assertEquals(parentNameAmidstVar,parentNameHuginVar);
  }
}",0.6302800189843379
21545,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        multinomialParentsIndexes.add(j);
      }
    }
    Collections.reverse(multinomialParentsIndexes);
    ArrayList<Integer> parentsIndexes=new ArrayList();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        parentsIndexes.add(multinomialParentsIndexes.get(0));
        multinomialParentsIndexes.remove(0);
      }
 else {
        parentsIndexes.add(j);
      }
    }
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(parentsIndexes.get(j));
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.7767882792301063
21546,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    if (n.getTemporalMaster() == null) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
  }
  Attributes attributes=new Attributes(atts);
  DynamicVariables dynamicVariables=new DynamicVariables(attributes);
  DynamicDAG dynamicDAG=new DynamicDAG(dynamicVariables);
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    if (huginChild.getTemporalMaster() == null) {
      Variable amidstChild=dynamicVariables.getVariableByName(huginChild.getName());
      NodeList huginParents=huginChild.getParents();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=(Node)huginParents.get(j);
        if (huginParent.getTemporalMaster() == null) {
          Variable amidstParent=dynamicVariables.getVariableByName(huginParent.getName());
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstParent);
        }
 else {
          Variable amidstClone=dynamicVariables.getTemporalClone(amidstChild);
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstClone);
        }
      }
    }
  }
  this.amidstDBN=DynamicBayesianNetwork.newDynamicBayesianNetwork(dynamicDAG);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    if (n.getTemporalMaster() == null) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
  }
  Attributes attributes=new Attributes(atts);
  DynamicVariables dynamicVariables=new DynamicVariables(attributes);
  DynamicDAG dynamicDAG=new DynamicDAG(dynamicVariables);
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    if (huginChild.getTemporalMaster() == null) {
      Variable amidstChild=dynamicVariables.getVariableByName(huginChild.getName());
      NodeList huginParents=huginChild.getParents();
      ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=huginParents.get(j);
        if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
          multinomialParentsIndexes.add(j);
        }
      }
      Collections.reverse(multinomialParentsIndexes);
      ArrayList<Integer> parentsIndexes=new ArrayList();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=huginParents.get(j);
        if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
          parentsIndexes.add(multinomialParentsIndexes.get(0));
          multinomialParentsIndexes.remove(0);
        }
 else {
          parentsIndexes.add(j);
        }
      }
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=(Node)huginParents.get(parentsIndexes.get(j));
        if (huginParent.getTemporalMaster() == null) {
          Variable amidstParent=dynamicVariables.getVariableByName(huginParent.getName());
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstParent);
        }
 else {
          Variable amidstClone=dynamicVariables.getTemporalClone(amidstChild);
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstClone);
        }
      }
    }
  }
  this.amidstDBN=DynamicBayesianNetwork.newDynamicBayesianNetwork(dynamicDAG);
}",0.802045288531775
21547,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        multinomialParentsIndexes.add(j);
      }
    }
    Collections.reverse(multinomialParentsIndexes);
    ArrayList<Integer> parentsIndexes=new ArrayList();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        parentsIndexes.add(multinomialParentsIndexes.get(0));
        multinomialParentsIndexes.remove(0);
      }
 else {
        parentsIndexes.add(j);
      }
    }
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(parentsIndexes.get(j));
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.7767882792301063
21548,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    if (n.getTemporalMaster() == null) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
  }
  Attributes attributes=new Attributes(atts);
  DynamicVariables dynamicVariables=new DynamicVariables(attributes);
  DynamicDAG dynamicDAG=new DynamicDAG(dynamicVariables);
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    if (huginChild.getTemporalMaster() == null) {
      Variable amidstChild=dynamicVariables.getVariableByName(huginChild.getName());
      NodeList huginParents=huginChild.getParents();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=(Node)huginParents.get(j);
        if (huginParent.getTemporalMaster() == null) {
          Variable amidstParent=dynamicVariables.getVariableByName(huginParent.getName());
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstParent);
        }
 else {
          Variable amidstClone=dynamicVariables.getTemporalClone(amidstChild);
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstClone);
        }
      }
    }
  }
  this.amidstDBN=DynamicBayesianNetwork.newDynamicBayesianNetwork(dynamicDAG);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    if (n.getTemporalMaster() == null) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
  }
  Attributes attributes=new Attributes(atts);
  DynamicVariables dynamicVariables=new DynamicVariables(attributes);
  DynamicDAG dynamicDAG=new DynamicDAG(dynamicVariables);
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    if (huginChild.getTemporalMaster() == null) {
      Variable amidstChild=dynamicVariables.getVariableByName(huginChild.getName());
      NodeList huginParents=huginChild.getParents();
      ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=huginParents.get(j);
        if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
          multinomialParentsIndexes.add(j);
        }
      }
      Collections.reverse(multinomialParentsIndexes);
      ArrayList<Integer> parentsIndexes=new ArrayList();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=huginParents.get(j);
        if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
          parentsIndexes.add(multinomialParentsIndexes.get(0));
          multinomialParentsIndexes.remove(0);
        }
 else {
          parentsIndexes.add(j);
        }
      }
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=(Node)huginParents.get(parentsIndexes.get(j));
        if (huginParent.getTemporalMaster() == null) {
          Variable amidstParent=dynamicVariables.getVariableByName(huginParent.getName());
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstParent);
        }
 else {
          Variable amidstClone=dynamicVariables.getTemporalClone(amidstChild);
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstClone);
        }
      }
    }
  }
  this.amidstDBN=DynamicBayesianNetwork.newDynamicBayesianNetwork(dynamicDAG);
}",0.802045288531775
21549,"private void testParents(Variable amidstVar,Node huginVar) throws ExceptionHugin {
  ParentSet parentsAmidstVar=amidstBN.getDAG().getParentSet(amidstVar);
  NodeList parentsHuginVar=huginVar.getParents();
  int numParentsAmidstVar=parentsAmidstVar.getNumberOfParents();
  int numParentsHuginVar=parentsHuginVar.size();
  assertEquals(numParentsAmidstVar,numParentsHuginVar);
  for (int j=0; j < numParentsAmidstVar; j++) {
    Variable parentAmidstVar=parentsAmidstVar.getParents().get(j);
    String parentNameHuginVar=((Node)parentsHuginVar.get(j)).getName();
    String parentNameAmidstVar=parentAmidstVar.getName();
    assertEquals(parentNameAmidstVar,parentNameHuginVar);
  }
}","private void testParents(Variable amidstVar,Node huginVar) throws ExceptionHugin {
  ParentSet parentsAmidstVar=amidstBN.getDAG().getParentSet(amidstVar);
  NodeList parentsHuginVar=huginVar.getParents();
  int numParentsAmidstVar=parentsAmidstVar.getNumberOfParents();
  int numParentsHuginVar=parentsHuginVar.size();
  assertEquals(numParentsAmidstVar,numParentsHuginVar);
  ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
  for (int j=0; j < parentsHuginVar.size(); j++) {
    Node huginParent=parentsHuginVar.get(j);
    if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      multinomialParentsIndexes.add(j);
    }
  }
  Collections.reverse(multinomialParentsIndexes);
  ArrayList<Integer> parentsIndexes=new ArrayList();
  for (int j=0; j < parentsHuginVar.size(); j++) {
    Node huginParent=parentsHuginVar.get(j);
    if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      parentsIndexes.add(multinomialParentsIndexes.get(0));
      multinomialParentsIndexes.remove(0);
    }
 else {
      parentsIndexes.add(j);
    }
  }
  for (int j=0; j < numParentsAmidstVar; j++) {
    Variable parentAmidstVar=parentsAmidstVar.getParents().get(j);
    String parentNameHuginVar=((Node)parentsHuginVar.get(parentsIndexes.get(j))).getName();
    String parentNameAmidstVar=parentAmidstVar.getName();
    assertEquals(parentNameAmidstVar,parentNameHuginVar);
  }
}",0.6302800189843379
21550,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        multinomialParentsIndexes.add(j);
      }
    }
    Collections.reverse(multinomialParentsIndexes);
    ArrayList<Integer> parentsIndexes=new ArrayList();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        parentsIndexes.add(multinomialParentsIndexes.get(0));
        multinomialParentsIndexes.remove(0);
      }
 else {
        parentsIndexes.add(j);
      }
    }
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=huginParents.get(parentsIndexes.get(j));
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.7767882792301063
21551,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    if (n.getTemporalMaster() == null) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
  }
  Attributes attributes=new Attributes(atts);
  DynamicVariables dynamicVariables=new DynamicVariables(attributes);
  DynamicDAG dynamicDAG=new DynamicDAG(dynamicVariables);
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    if (huginChild.getTemporalMaster() == null) {
      Variable amidstChild=dynamicVariables.getVariableByName(huginChild.getName());
      NodeList huginParents=huginChild.getParents();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=(Node)huginParents.get(j);
        if (huginParent.getTemporalMaster() == null) {
          Variable amidstParent=dynamicVariables.getVariableByName(huginParent.getName());
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstParent);
        }
 else {
          Variable amidstClone=dynamicVariables.getTemporalClone(amidstChild);
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstClone);
        }
      }
    }
  }
  this.amidstDBN=DynamicBayesianNetwork.newDynamicBayesianNetwork(dynamicDAG);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    if (n.getTemporalMaster() == null) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
  }
  Attributes attributes=new Attributes(atts);
  DynamicVariables dynamicVariables=new DynamicVariables(attributes);
  DynamicDAG dynamicDAG=new DynamicDAG(dynamicVariables);
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    if (huginChild.getTemporalMaster() == null) {
      Variable amidstChild=dynamicVariables.getVariableByName(huginChild.getName());
      NodeList huginParents=huginChild.getParents();
      ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=huginParents.get(j);
        if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
          multinomialParentsIndexes.add(j);
        }
      }
      Collections.reverse(multinomialParentsIndexes);
      ArrayList<Integer> parentsIndexes=new ArrayList();
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=huginParents.get(j);
        if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
          parentsIndexes.add(multinomialParentsIndexes.get(0));
          multinomialParentsIndexes.remove(0);
        }
 else {
          parentsIndexes.add(j);
        }
      }
      for (int j=0; j < huginParents.size(); j++) {
        Node huginParent=(Node)huginParents.get(parentsIndexes.get(j));
        if (huginParent.getTemporalMaster() == null) {
          Variable amidstParent=dynamicVariables.getVariableByName(huginParent.getName());
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstParent);
        }
 else {
          Variable amidstClone=dynamicVariables.getTemporalClone(amidstChild);
          dynamicDAG.getParentSetTimeT(amidstChild).addParent(amidstClone);
        }
      }
    }
  }
  this.amidstDBN=DynamicBayesianNetwork.newDynamicBayesianNetwork(dynamicDAG);
}",0.802045288531775
21552,"private void testParents(Variable amidstVar,Node huginVar) throws ExceptionHugin {
  ParentSet parentsAmidstVar=amidstBN.getDAG().getParentSet(amidstVar);
  NodeList parentsHuginVar=huginVar.getParents();
  int numParentsAmidstVar=parentsAmidstVar.getNumberOfParents();
  int numParentsHuginVar=parentsHuginVar.size();
  assertEquals(numParentsAmidstVar,numParentsHuginVar);
  for (int j=0; j < numParentsAmidstVar; j++) {
    Variable parentAmidstVar=parentsAmidstVar.getParents().get(j);
    String parentNameHuginVar=((Node)parentsHuginVar.get(j)).getName();
    String parentNameAmidstVar=parentAmidstVar.getName();
    assertEquals(parentNameAmidstVar,parentNameHuginVar);
  }
}","private void testParents(Variable amidstVar,Node huginVar) throws ExceptionHugin {
  ParentSet parentsAmidstVar=amidstBN.getDAG().getParentSet(amidstVar);
  NodeList parentsHuginVar=huginVar.getParents();
  int numParentsAmidstVar=parentsAmidstVar.getNumberOfParents();
  int numParentsHuginVar=parentsHuginVar.size();
  assertEquals(numParentsAmidstVar,numParentsHuginVar);
  ArrayList<Integer> multinomialParentsIndexes=new ArrayList();
  for (int j=0; j < parentsHuginVar.size(); j++) {
    Node huginParent=parentsHuginVar.get(j);
    if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      multinomialParentsIndexes.add(j);
    }
  }
  Collections.reverse(multinomialParentsIndexes);
  ArrayList<Integer> parentsIndexes=new ArrayList();
  for (int j=0; j < parentsHuginVar.size(); j++) {
    Node huginParent=parentsHuginVar.get(j);
    if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      parentsIndexes.add(multinomialParentsIndexes.get(0));
      multinomialParentsIndexes.remove(0);
    }
 else {
      parentsIndexes.add(j);
    }
  }
  for (int j=0; j < numParentsAmidstVar; j++) {
    Variable parentAmidstVar=parentsAmidstVar.getParents().get(j);
    String parentNameHuginVar=((Node)parentsHuginVar.get(parentsIndexes.get(j))).getName();
    String parentNameAmidstVar=parentAmidstVar.getName();
    assertEquals(parentNameAmidstVar,parentNameHuginVar);
  }
}",0.6302800189843379
21553,"public static void demo() throws ExceptionHugin, IOException {
  String file=""String_Node_Str"";
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  System.out.println(""String_Node_Str"");
  data.getAttributes().getList().stream().forEach(a -> System.out.println(a.getName()));
  DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
  model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 3);
  model.setParallelMode(true);
  model.learn(data);
  DynamicBayesianNetwork amidstDBN=model.getDynamicBNModel();
  Random rand=new Random(0);
  amidstDBN.getDistributionsTime0().forEach(w -> w.randomInitialization(rand));
  System.out.println(amidstDBN.toString());
  Class huginDBN=DBNConverterToHugin.convertToHugin(amidstDBN);
  String nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  String outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  huginDBN.saveAsNet(outFile);
  System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str""+ ""String_Node_Str"");
  int timeWindow=5;
  Domain domainObject=huginDBN.createDBNDomain(timeWindow);
  nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  domainObject.saveAsNet(outFile);
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
  domainObject.uncompile();
  Iterator<DataInstance> iterator=data.iterator();
  for (int i=0; i <= timeWindow && iterator.hasNext(); i++) {
    DataInstance dataInstance=iterator.next();
    System.out.println(dataInstance.getTimeID() + ""String_Node_Str"" + dataInstance.getSequenceID());
    for (    Variable var : amidstDBN.getDynamicVariables().getListOfDynamicVariables()) {
      if ((var.getName().compareTo(""String_Node_Str"") != 0)) {
        LabelledDCNode node=(LabelledDCNode)domainObject.getNodeByName(""String_Node_Str"" + i + ""String_Node_Str""+ var.getName());
        node.selectState((long)dataInstance.getValue(var));
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
}","public static void demo() throws ExceptionHugin, IOException {
  String file=""String_Node_Str"";
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  System.out.println(""String_Node_Str"");
  data.getAttributes().getList().stream().forEach(a -> System.out.println(a.getName()));
  DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
  model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 3);
  model.setParallelMode(true);
  model.learn(data);
  DynamicBayesianNetwork amidstDBN=model.getDynamicBNModel();
  Random rand=new Random(0);
  amidstDBN.getDistributionsTime0().forEach(w -> w.randomInitialization(rand));
  System.out.println(amidstDBN.toString());
  Class huginDBN=DBNConverterToHugin.convertToHugin(amidstDBN);
  String nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  String outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  huginDBN.saveAsNet(outFile);
  System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str""+ ""String_Node_Str"");
  int timeWindow=5;
  Domain domainObject=huginDBN.createDBNDomain(timeWindow);
  nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  domainObject.saveAsNet(outFile);
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
  domainObject.uncompile();
  Iterator<DataInstance> iterator=data.iterator();
  for (int i=0; i <= timeWindow && iterator.hasNext(); i++) {
    DataInstance dataInstance=iterator.next();
    System.out.println(dataInstance.getTimeID() + ""String_Node_Str"" + dataInstance.getSequenceID());
    for (    Variable var : amidstDBN.getDynamicVariables().getListOfDynamicVariables()) {
      if ((var.getVarID() != model.getClassVarID())) {
        LabelledDCNode node=(LabelledDCNode)domainObject.getNodeByName(""String_Node_Str"" + i + ""String_Node_Str""+ var.getName());
        node.selectState((long)dataInstance.getValue(var));
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
}",0.9866321690383786
21554,"public static void demo() throws ExceptionHugin, IOException {
  String file=""String_Node_Str"";
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  System.out.println(""String_Node_Str"");
  data.getAttributes().getList().stream().forEach(a -> System.out.println(a.getName()));
  DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
  model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 3);
  model.setParallelMode(true);
  model.learn(data);
  DynamicBayesianNetwork amidstDBN=model.getDynamicBNModel();
  Random rand=new Random(0);
  amidstDBN.getDistributionsTime0().forEach(w -> w.randomInitialization(rand));
  System.out.println(amidstDBN.toString());
  Class huginDBN=DBNConverterToHugin.convertToHugin(amidstDBN);
  String nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  String outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  huginDBN.saveAsNet(outFile);
  System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str""+ ""String_Node_Str"");
  int timeWindow=5;
  Domain domainObject=huginDBN.createDBNDomain(timeWindow);
  nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  domainObject.saveAsNet(outFile);
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
  domainObject.uncompile();
  Iterator<DataInstance> iterator=data.iterator();
  for (int i=0; i <= timeWindow && iterator.hasNext(); i++) {
    DataInstance dataInstance=iterator.next();
    System.out.println(dataInstance.getTimeID() + ""String_Node_Str"" + dataInstance.getSequenceID());
    for (    Variable var : amidstDBN.getDynamicVariables().getListOfDynamicVariables()) {
      if ((var.getName().compareTo(""String_Node_Str"") != 0)) {
        LabelledDCNode node=(LabelledDCNode)domainObject.getNodeByName(""String_Node_Str"" + i + ""String_Node_Str""+ var.getName());
        node.selectState((long)dataInstance.getValue(var));
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
}","public static void demo() throws ExceptionHugin, IOException {
  String file=""String_Node_Str"";
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  System.out.println(""String_Node_Str"");
  data.getAttributes().getList().stream().forEach(a -> System.out.println(a.getName()));
  DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
  model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 3);
  model.setParallelMode(true);
  model.learn(data);
  DynamicBayesianNetwork amidstDBN=model.getDynamicBNModel();
  Random rand=new Random(0);
  amidstDBN.getDistributionsTime0().forEach(w -> w.randomInitialization(rand));
  System.out.println(amidstDBN.toString());
  Class huginDBN=DBNConverterToHugin.convertToHugin(amidstDBN);
  String nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  String outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  huginDBN.saveAsNet(outFile);
  System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str""+ ""String_Node_Str"");
  int timeWindow=5;
  Domain domainObject=huginDBN.createDBNDomain(timeWindow);
  nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  domainObject.saveAsNet(outFile);
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
  domainObject.uncompile();
  Iterator<DataInstance> iterator=data.iterator();
  for (int i=0; i <= timeWindow && iterator.hasNext(); i++) {
    DataInstance dataInstance=iterator.next();
    System.out.println(dataInstance.getTimeID() + ""String_Node_Str"" + dataInstance.getSequenceID());
    for (    Variable var : amidstDBN.getDynamicVariables().getListOfDynamicVariables()) {
      if ((var.getVarID() != model.getClassVarID())) {
        LabelledDCNode node=(LabelledDCNode)domainObject.getNodeByName(""String_Node_Str"" + i + ""String_Node_Str""+ var.getName());
        node.selectState((long)dataInstance.getValue(var));
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
}",0.9866321690383786
21555,"public static void demo() throws ExceptionHugin, IOException {
  String file=""String_Node_Str"";
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  System.out.println(""String_Node_Str"");
  data.getAttributes().getList().stream().forEach(a -> System.out.println(a.getName()));
  DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
  model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 3);
  model.setParallelMode(true);
  model.learn(data);
  DynamicBayesianNetwork amidstDBN=model.getDynamicBNModel();
  Random rand=new Random(0);
  amidstDBN.getDistributionsTime0().forEach(w -> w.randomInitialization(rand));
  System.out.println(amidstDBN.toString());
  Class huginDBN=DBNConverterToHugin.convertToHugin(amidstDBN);
  String nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  String outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  huginDBN.saveAsNet(outFile);
  System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str""+ ""String_Node_Str"");
  int timeWindow=5;
  Domain domainObject=huginDBN.createDBNDomain(timeWindow);
  nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  domainObject.saveAsNet(outFile);
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
  domainObject.uncompile();
  Iterator<DataInstance> iterator=data.iterator();
  for (int i=0; i <= timeWindow && iterator.hasNext(); i++) {
    DataInstance dataInstance=iterator.next();
    System.out.println(dataInstance.getTimeID() + ""String_Node_Str"" + dataInstance.getSequenceID());
    for (    Variable var : amidstDBN.getDynamicVariables().getListOfDynamicVariables()) {
      if ((var.getName().compareTo(""String_Node_Str"") != 0)) {
        LabelledDCNode node=(LabelledDCNode)domainObject.getNodeByName(""String_Node_Str"" + i + ""String_Node_Str""+ var.getName());
        node.selectState((long)dataInstance.getValue(var));
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
}","public static void demo() throws ExceptionHugin, IOException {
  String file=""String_Node_Str"";
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  System.out.println(""String_Node_Str"");
  data.getAttributes().getList().stream().forEach(a -> System.out.println(a.getName()));
  DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
  model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 3);
  model.setParallelMode(true);
  model.learn(data);
  DynamicBayesianNetwork amidstDBN=model.getDynamicBNModel();
  Random rand=new Random(0);
  amidstDBN.getDistributionsTime0().forEach(w -> w.randomInitialization(rand));
  System.out.println(amidstDBN.toString());
  Class huginDBN=DBNConverterToHugin.convertToHugin(amidstDBN);
  String nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  String outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  huginDBN.saveAsNet(outFile);
  System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str""+ ""String_Node_Str"");
  int timeWindow=5;
  Domain domainObject=huginDBN.createDBNDomain(timeWindow);
  nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  domainObject.saveAsNet(outFile);
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
  domainObject.uncompile();
  Iterator<DataInstance> iterator=data.iterator();
  for (int i=0; i <= timeWindow && iterator.hasNext(); i++) {
    DataInstance dataInstance=iterator.next();
    System.out.println(dataInstance.getTimeID() + ""String_Node_Str"" + dataInstance.getSequenceID());
    for (    Variable var : amidstDBN.getDynamicVariables().getListOfDynamicVariables()) {
      if ((var.getVarID() != model.getClassVarID())) {
        LabelledDCNode node=(LabelledDCNode)domainObject.getNodeByName(""String_Node_Str"" + i + ""String_Node_Str""+ var.getName());
        node.selectState((long)dataInstance.getValue(var));
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
}",0.9866321690383786
21556,"public static void demo() throws ExceptionHugin, IOException {
  String file=""String_Node_Str"";
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  System.out.println(""String_Node_Str"");
  data.getAttributes().getList().stream().forEach(a -> System.out.println(a.getName()));
  DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
  model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 3);
  model.setParallelMode(true);
  model.learn(data);
  DynamicBayesianNetwork amidstDBN=model.getDynamicBNModel();
  Random rand=new Random(0);
  amidstDBN.getDistributionsTime0().forEach(w -> w.randomInitialization(rand));
  System.out.println(amidstDBN.toString());
  Class huginDBN=DBNConverterToHugin.convertToHugin(amidstDBN);
  String nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  String outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  huginDBN.saveAsNet(outFile);
  System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str""+ ""String_Node_Str"");
  int timeWindow=5;
  Domain domainObject=huginDBN.createDBNDomain(timeWindow);
  nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  domainObject.saveAsNet(outFile);
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
  domainObject.uncompile();
  Iterator<DataInstance> iterator=data.iterator();
  for (int i=0; i <= timeWindow && iterator.hasNext(); i++) {
    DataInstance dataInstance=iterator.next();
    System.out.println(dataInstance.getTimeID() + ""String_Node_Str"" + dataInstance.getSequenceID());
    for (    Variable var : amidstDBN.getDynamicVariables().getListOfDynamicVariables()) {
      if ((var.getName().compareTo(""String_Node_Str"") != 0)) {
        LabelledDCNode node=(LabelledDCNode)domainObject.getNodeByName(""String_Node_Str"" + i + ""String_Node_Str""+ var.getName());
        node.selectState((long)dataInstance.getValue(var));
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
}","public static void demo() throws ExceptionHugin, IOException {
  String file=""String_Node_Str"";
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  System.out.println(""String_Node_Str"");
  data.getAttributes().getList().stream().forEach(a -> System.out.println(a.getName()));
  DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
  model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 3);
  model.setParallelMode(true);
  model.learn(data);
  DynamicBayesianNetwork amidstDBN=model.getDynamicBNModel();
  Random rand=new Random(0);
  amidstDBN.getDistributionsTime0().forEach(w -> w.randomInitialization(rand));
  System.out.println(amidstDBN.toString());
  Class huginDBN=DBNConverterToHugin.convertToHugin(amidstDBN);
  String nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  String outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  huginDBN.saveAsNet(outFile);
  System.out.println(""String_Node_Str"" + outFile + ""String_Node_Str""+ ""String_Node_Str"");
  int timeWindow=5;
  Domain domainObject=huginDBN.createDBNDomain(timeWindow);
  nameModel=""String_Node_Str"";
  huginDBN.setName(nameModel);
  outFile=new String(""String_Node_Str"" + nameModel + ""String_Node_Str"");
  domainObject.saveAsNet(outFile);
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
  domainObject.uncompile();
  Iterator<DataInstance> iterator=data.iterator();
  for (int i=0; i <= timeWindow && iterator.hasNext(); i++) {
    DataInstance dataInstance=iterator.next();
    System.out.println(dataInstance.getTimeID() + ""String_Node_Str"" + dataInstance.getSequenceID());
    for (    Variable var : amidstDBN.getDynamicVariables().getListOfDynamicVariables()) {
      if ((var.getVarID() != model.getClassVarID())) {
        LabelledDCNode node=(LabelledDCNode)domainObject.getNodeByName(""String_Node_Str"" + i + ""String_Node_Str""+ var.getName());
        node.selectState((long)dataInstance.getValue(var));
      }
    }
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  domainObject.triangulateDBN(Domain.H_TM_TOTAL_WEIGHT);
  domainObject.compile();
  InferenceDemo.printBeliefs(domainObject);
}",0.9866321690383786
21557,"public DAG learnDAG(DataBase dataBase){
  StaticVariables modelHeader=new StaticVariables(dataBase.getAttributes());
  DAG dag=new DAG(modelHeader);
  BayesianNetwork bn=BayesianNetwork.newBayesianNetwork(dag);
  Domain huginNetwork=null;
  try {
    huginNetwork=ConverterToHugin.convertToHugin(bn);
    DataOnMemory dataOnMemory=ReservoirSampling.samplingNumberOfSamples(this.numSamplesOnMemory,dataBase);
    int numCases=dataOnMemory.getNumberOfDataInstances();
    huginNetwork.setNumberOfCases(numCases);
    huginNetwork.setConcurrencyLevel(this.numCores);
    NodeList nodeList=huginNetwork.getNodes();
    for (int i=0; i < nodeList.size(); i++) {
      Variable var=bn.getDAG().getStaticVariables().getVariableById(i);
      Node n=nodeList.get(i);
      if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        ((DiscreteChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          int state=(int)dataOnMemory.getDataInstance(j).getValue(var);
          ((DiscreteChanceNode)n).setCaseState(j,state);
        }
      }
 else {
        ((ContinuousChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          double value=dataOnMemory.getDataInstance(j).getValue(var);
          ((ContinuousChanceNode)n).setCaseValue(j,(long)value);
        }
      }
    }
    Node root=huginNetwork.getNodeByName(nameRoot);
    Node target=huginNetwork.getNodeByName(nameTarget);
    huginNetwork.learnChowLiuTree(root,target);
    return (ConverterToAMIDST.convertToAmidst(huginNetwork)).getDAG();
  }
 catch (  ExceptionHugin exceptionHugin) {
    throw new IllegalStateException(""String_Node_Str"" + exceptionHugin.getMessage());
  }
}","public DAG learnDAG(DataBase dataBase){
  StaticVariables modelHeader=new StaticVariables(dataBase.getAttributes());
  DAG dag=new DAG(modelHeader);
  BayesianNetwork bn=BayesianNetwork.newBayesianNetwork(dag);
  Domain huginNetwork=null;
  try {
    huginNetwork=ConverterToHugin.convertToHugin(bn);
    DataOnMemory dataOnMemory=ReservoirSampling.samplingNumberOfSamples(this.numSamplesOnMemory,dataBase);
    int numCases=dataOnMemory.getNumberOfDataInstances();
    huginNetwork.setNumberOfCases(numCases);
    huginNetwork.setConcurrencyLevel(this.numCores);
    NodeList nodeList=huginNetwork.getNodes();
    for (int i=0; i < nodeList.size(); i++) {
      Variable var=bn.getDAG().getStaticVariables().getVariableById(i);
      Node n=nodeList.get(i);
      if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        ((DiscreteChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          int state=(int)dataOnMemory.getDataInstance(j).getValue(var);
          ((DiscreteChanceNode)n).setCaseState(j,state);
        }
      }
 else {
        ((ContinuousChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          double value=dataOnMemory.getDataInstance(j).getValue(var);
          ((ContinuousChanceNode)n).setCaseValue(j,(long)value);
        }
      }
    }
    Node root=huginNetwork.getNodeByName(nameRoot);
    Node target=huginNetwork.getNodeByName(nameTarget);
    Stopwatch watch=Stopwatch.createStarted();
    huginNetwork.learnChowLiuTree(root,target);
    System.out.println(""String_Node_Str"" + watch.stop());
    return (ConverterToAMIDST.convertToAmidst(huginNetwork)).getDAG();
  }
 catch (  ExceptionHugin exceptionHugin) {
    throw new IllegalStateException(""String_Node_Str"" + exceptionHugin.getMessage());
  }
}",0.9701110162254484
21558,"public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}","public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count + 1);
      if (r < numberOfSamples)       dataOnMemoryList.set(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}",0.9906716417910448
21559,"public DAG learnDAG(DataBase dataBase){
  StaticVariables modelHeader=new StaticVariables(dataBase.getAttributes());
  DAG dag=new DAG(modelHeader);
  BayesianNetwork bn=BayesianNetwork.newBayesianNetwork(dag);
  Domain huginNetwork=null;
  try {
    huginNetwork=ConverterToHugin.convertToHugin(bn);
    DataOnMemory dataOnMemory=ReservoirSampling.samplingNumberOfSamples(this.numSamplesOnMemory,dataBase);
    int numCases=dataOnMemory.getNumberOfDataInstances();
    huginNetwork.setNumberOfCases(numCases);
    huginNetwork.setConcurrencyLevel(this.numCores);
    NodeList nodeList=huginNetwork.getNodes();
    for (int i=0; i < nodeList.size(); i++) {
      Variable var=bn.getDAG().getStaticVariables().getVariableById(i);
      Node n=nodeList.get(i);
      if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        ((DiscreteChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          int state=(int)dataOnMemory.getDataInstance(j).getValue(var);
          ((DiscreteChanceNode)n).setCaseState(j,state);
        }
      }
 else {
        ((ContinuousChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          double value=dataOnMemory.getDataInstance(j).getValue(var);
          ((ContinuousChanceNode)n).setCaseValue(j,(long)value);
        }
      }
    }
    Node root=huginNetwork.getNodeByName(nameRoot);
    Node target=huginNetwork.getNodeByName(nameTarget);
    huginNetwork.learnChowLiuTree(root,target);
    return (ConverterToAMIDST.convertToAmidst(huginNetwork)).getDAG();
  }
 catch (  ExceptionHugin exceptionHugin) {
    throw new IllegalStateException(""String_Node_Str"" + exceptionHugin.getMessage());
  }
}","public DAG learnDAG(DataBase dataBase){
  StaticVariables modelHeader=new StaticVariables(dataBase.getAttributes());
  DAG dag=new DAG(modelHeader);
  BayesianNetwork bn=BayesianNetwork.newBayesianNetwork(dag);
  Domain huginNetwork=null;
  try {
    huginNetwork=ConverterToHugin.convertToHugin(bn);
    DataOnMemory dataOnMemory=ReservoirSampling.samplingNumberOfSamples(this.numSamplesOnMemory,dataBase);
    int numCases=dataOnMemory.getNumberOfDataInstances();
    huginNetwork.setNumberOfCases(numCases);
    huginNetwork.setConcurrencyLevel(this.numCores);
    NodeList nodeList=huginNetwork.getNodes();
    for (int i=0; i < nodeList.size(); i++) {
      Variable var=bn.getDAG().getStaticVariables().getVariableById(i);
      Node n=nodeList.get(i);
      if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        ((DiscreteChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          int state=(int)dataOnMemory.getDataInstance(j).getValue(var);
          ((DiscreteChanceNode)n).setCaseState(j,state);
        }
      }
 else {
        ((ContinuousChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          double value=dataOnMemory.getDataInstance(j).getValue(var);
          ((ContinuousChanceNode)n).setCaseValue(j,(long)value);
        }
      }
    }
    Node root=huginNetwork.getNodeByName(nameRoot);
    Node target=huginNetwork.getNodeByName(nameTarget);
    Stopwatch watch=Stopwatch.createStarted();
    huginNetwork.learnChowLiuTree(root,target);
    System.out.println(""String_Node_Str"" + watch.stop());
    return (ConverterToAMIDST.convertToAmidst(huginNetwork)).getDAG();
  }
 catch (  ExceptionHugin exceptionHugin) {
    throw new IllegalStateException(""String_Node_Str"" + exceptionHugin.getMessage());
  }
}",0.9701110162254484
21560,"public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}","public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count + 1);
      if (r < numberOfSamples)       dataOnMemoryList.set(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}",0.9906716417910448
21561,"public DAG learnDAG(DataBase dataBase){
  StaticVariables modelHeader=new StaticVariables(dataBase.getAttributes());
  DAG dag=new DAG(modelHeader);
  BayesianNetwork bn=BayesianNetwork.newBayesianNetwork(dag);
  Domain huginNetwork=null;
  try {
    huginNetwork=ConverterToHugin.convertToHugin(bn);
    DataOnMemory dataOnMemory=ReservoirSampling.samplingNumberOfSamples(this.numSamplesOnMemory,dataBase);
    int numCases=dataOnMemory.getNumberOfDataInstances();
    huginNetwork.setNumberOfCases(numCases);
    huginNetwork.setConcurrencyLevel(this.numCores);
    NodeList nodeList=huginNetwork.getNodes();
    for (int i=0; i < nodeList.size(); i++) {
      Variable var=bn.getDAG().getStaticVariables().getVariableById(i);
      Node n=nodeList.get(i);
      if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        ((DiscreteChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          int state=(int)dataOnMemory.getDataInstance(j).getValue(var);
          ((DiscreteChanceNode)n).setCaseState(j,state);
        }
      }
 else {
        ((ContinuousChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          double value=dataOnMemory.getDataInstance(j).getValue(var);
          ((ContinuousChanceNode)n).setCaseValue(j,(long)value);
        }
      }
    }
    Node root=huginNetwork.getNodeByName(nameRoot);
    Node target=huginNetwork.getNodeByName(nameTarget);
    huginNetwork.learnChowLiuTree(root,target);
    return (ConverterToAMIDST.convertToAmidst(huginNetwork)).getDAG();
  }
 catch (  ExceptionHugin exceptionHugin) {
    throw new IllegalStateException(""String_Node_Str"" + exceptionHugin.getMessage());
  }
}","public DAG learnDAG(DataBase dataBase){
  StaticVariables modelHeader=new StaticVariables(dataBase.getAttributes());
  DAG dag=new DAG(modelHeader);
  BayesianNetwork bn=BayesianNetwork.newBayesianNetwork(dag);
  Domain huginNetwork=null;
  try {
    huginNetwork=ConverterToHugin.convertToHugin(bn);
    DataOnMemory dataOnMemory=ReservoirSampling.samplingNumberOfSamples(this.numSamplesOnMemory,dataBase);
    int numCases=dataOnMemory.getNumberOfDataInstances();
    huginNetwork.setNumberOfCases(numCases);
    huginNetwork.setConcurrencyLevel(this.numCores);
    NodeList nodeList=huginNetwork.getNodes();
    for (int i=0; i < nodeList.size(); i++) {
      Variable var=bn.getDAG().getStaticVariables().getVariableById(i);
      Node n=nodeList.get(i);
      if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        ((DiscreteChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          int state=(int)dataOnMemory.getDataInstance(j).getValue(var);
          ((DiscreteChanceNode)n).setCaseState(j,state);
        }
      }
 else {
        ((ContinuousChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          double value=dataOnMemory.getDataInstance(j).getValue(var);
          ((ContinuousChanceNode)n).setCaseValue(j,(long)value);
        }
      }
    }
    Node root=huginNetwork.getNodeByName(nameRoot);
    Node target=huginNetwork.getNodeByName(nameTarget);
    Stopwatch watch=Stopwatch.createStarted();
    huginNetwork.learnChowLiuTree(root,target);
    System.out.println(""String_Node_Str"" + watch.stop());
    return (ConverterToAMIDST.convertToAmidst(huginNetwork)).getDAG();
  }
 catch (  ExceptionHugin exceptionHugin) {
    throw new IllegalStateException(""String_Node_Str"" + exceptionHugin.getMessage());
  }
}",0.9701110162254484
21562,"public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}","public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count + 1);
      if (r < numberOfSamples)       dataOnMemoryList.set(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}",0.9906716417910448
21563,"public DAG learnDAG(DataBase dataBase){
  StaticVariables modelHeader=new StaticVariables(dataBase.getAttributes());
  DAG dag=new DAG(modelHeader);
  BayesianNetwork bn=BayesianNetwork.newBayesianNetwork(dag);
  Domain huginNetwork=null;
  try {
    huginNetwork=ConverterToHugin.convertToHugin(bn);
    DataOnMemory dataOnMemory=ReservoirSampling.samplingNumberOfSamples(this.numSamplesOnMemory,dataBase);
    int numCases=dataOnMemory.getNumberOfDataInstances();
    huginNetwork.setNumberOfCases(numCases);
    huginNetwork.setConcurrencyLevel(this.numCores);
    NodeList nodeList=huginNetwork.getNodes();
    for (int i=0; i < nodeList.size(); i++) {
      Variable var=bn.getDAG().getStaticVariables().getVariableById(i);
      Node n=nodeList.get(i);
      if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        ((DiscreteChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          int state=(int)dataOnMemory.getDataInstance(j).getValue(var);
          ((DiscreteChanceNode)n).setCaseState(j,state);
        }
      }
 else {
        ((ContinuousChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          double value=dataOnMemory.getDataInstance(j).getValue(var);
          ((ContinuousChanceNode)n).setCaseValue(j,(long)value);
        }
      }
    }
    Node root=huginNetwork.getNodeByName(nameRoot);
    Node target=huginNetwork.getNodeByName(nameTarget);
    huginNetwork.learnChowLiuTree(root,target);
    return (ConverterToAMIDST.convertToAmidst(huginNetwork)).getDAG();
  }
 catch (  ExceptionHugin exceptionHugin) {
    throw new IllegalStateException(""String_Node_Str"" + exceptionHugin.getMessage());
  }
}","public DAG learnDAG(DataBase dataBase){
  StaticVariables modelHeader=new StaticVariables(dataBase.getAttributes());
  DAG dag=new DAG(modelHeader);
  BayesianNetwork bn=BayesianNetwork.newBayesianNetwork(dag);
  Domain huginNetwork=null;
  try {
    huginNetwork=ConverterToHugin.convertToHugin(bn);
    DataOnMemory dataOnMemory=ReservoirSampling.samplingNumberOfSamples(this.numSamplesOnMemory,dataBase);
    int numCases=dataOnMemory.getNumberOfDataInstances();
    huginNetwork.setNumberOfCases(numCases);
    huginNetwork.setConcurrencyLevel(this.numCores);
    NodeList nodeList=huginNetwork.getNodes();
    for (int i=0; i < nodeList.size(); i++) {
      Variable var=bn.getDAG().getStaticVariables().getVariableById(i);
      Node n=nodeList.get(i);
      if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        ((DiscreteChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          int state=(int)dataOnMemory.getDataInstance(j).getValue(var);
          ((DiscreteChanceNode)n).setCaseState(j,state);
        }
      }
 else {
        ((ContinuousChanceNode)n).getExperienceTable();
        for (int j=0; j < numCases; j++) {
          double value=dataOnMemory.getDataInstance(j).getValue(var);
          ((ContinuousChanceNode)n).setCaseValue(j,(long)value);
        }
      }
    }
    Node root=huginNetwork.getNodeByName(nameRoot);
    Node target=huginNetwork.getNodeByName(nameTarget);
    Stopwatch watch=Stopwatch.createStarted();
    huginNetwork.learnChowLiuTree(root,target);
    System.out.println(""String_Node_Str"" + watch.stop());
    return (ConverterToAMIDST.convertToAmidst(huginNetwork)).getDAG();
  }
 catch (  ExceptionHugin exceptionHugin) {
    throw new IllegalStateException(""String_Node_Str"" + exceptionHugin.getMessage());
  }
}",0.9701110162254484
21564,"public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}","public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count + 1);
      if (r < numberOfSamples)       dataOnMemoryList.set(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}",0.9906716417910448
21565,"private CompoundVector createCompoundVector(){
  return new CompoundVector((EF_ConditionalDistribution)this.getEF_BaseDistribution(0),this.numberOfConfigurations());
}","private CompoundVector createCompoundVector(){
  return new CompoundVector((EF_Distribution)this.getEF_BaseDistribution(0),this.numberOfConfigurations());
}",0.9659442724458204
21566,"public CompoundVector(EF_ConditionalDistribution baseDist1,int nConf1){
  nConf=nConf1;
  this.baseConf=new double[nConf];
  baseDist=baseDist1;
  baseVectors=new SparseVector(baseDist1::createZeroedVector,nConf);
  baseSSLength=baseDist.sizeOfSufficientStatistics();
}","public CompoundVector(EF_Distribution baseDist1,int nConf1){
  nConf=nConf1;
  this.baseConf=new double[nConf];
  baseDist=baseDist1;
  baseVectors=new SparseVector(baseDist1::createZeroedVector,nConf);
  baseSSLength=baseDist.sizeOfSufficientStatistics();
}",0.9791271347248576
21567,"public static void main(String[] args) throws IOException {
  BayesianNetworkGenerator.setNumberOfContinuousVars(0);
  BayesianNetworkGenerator.setNumberOfDiscreteVars(5000);
  BayesianNetworkGenerator.setNumberOfStates(3);
  BayesianNetwork bn=BayesianNetworkGenerator.generateNaiveBayes(new Random(0));
  int sampleSize=10000;
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setParallelMode(false);
  String file=""String_Node_Str"";
  sampler.sampleToAnARFFFile(file,sampleSize);
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  for (int i=1; i <= 5; i++) {
    DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
    model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 1);
    model.setParallelMode(true);
    model.learn(data);
    DynamicBayesianNetwork nbClassifier=model.getDynamicBNModel();
  }
}","public static void main(String[] args) throws IOException {
  BayesianNetworkGenerator.setNumberOfContinuousVars(0);
  BayesianNetworkGenerator.setNumberOfDiscreteVars(5);
  BayesianNetworkGenerator.setNumberOfStates(3);
  BayesianNetwork bn=BayesianNetworkGenerator.generateNaiveBayes(new Random(0));
  int sampleSize=10000;
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setParallelMode(false);
  String file=""String_Node_Str"";
  sampler.sampleToAnARFFFile(file,sampleSize);
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  for (int i=1; i <= 5; i++) {
    DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
    model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 1);
    model.setParallelMode(true);
    model.learn(data);
    DynamicBayesianNetwork nbClassifier=model.getDynamicBNModel();
    System.out.println(nbClassifier.toString());
  }
}",0.9714599341383096
21568,"private CompoundVector createCompoundVector(){
  return new CompoundVector((EF_ConditionalDistribution)this.getEF_BaseDistribution(0),this.numberOfConfigurations());
}","private CompoundVector createCompoundVector(){
  return new CompoundVector((EF_Distribution)this.getEF_BaseDistribution(0),this.numberOfConfigurations());
}",0.9659442724458204
21569,"public CompoundVector(EF_ConditionalDistribution baseDist1,int nConf1){
  nConf=nConf1;
  this.baseConf=new double[nConf];
  baseDist=baseDist1;
  baseVectors=new SparseVector(baseDist1::createZeroedVector,nConf);
  baseSSLength=baseDist.sizeOfSufficientStatistics();
}","public CompoundVector(EF_Distribution baseDist1,int nConf1){
  nConf=nConf1;
  this.baseConf=new double[nConf];
  baseDist=baseDist1;
  baseVectors=new SparseVector(baseDist1::createZeroedVector,nConf);
  baseSSLength=baseDist.sizeOfSufficientStatistics();
}",0.9791271347248576
21570,"public static void main(String[] args) throws IOException {
  BayesianNetworkGenerator.setNumberOfContinuousVars(0);
  BayesianNetworkGenerator.setNumberOfDiscreteVars(5000);
  BayesianNetworkGenerator.setNumberOfStates(3);
  BayesianNetwork bn=BayesianNetworkGenerator.generateNaiveBayes(new Random(0));
  int sampleSize=10000;
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setParallelMode(false);
  String file=""String_Node_Str"";
  sampler.sampleToAnARFFFile(file,sampleSize);
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  for (int i=1; i <= 5; i++) {
    DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
    model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 1);
    model.setParallelMode(true);
    model.learn(data);
    DynamicBayesianNetwork nbClassifier=model.getDynamicBNModel();
  }
}","public static void main(String[] args) throws IOException {
  BayesianNetworkGenerator.setNumberOfContinuousVars(0);
  BayesianNetworkGenerator.setNumberOfDiscreteVars(5);
  BayesianNetworkGenerator.setNumberOfStates(3);
  BayesianNetwork bn=BayesianNetworkGenerator.generateNaiveBayes(new Random(0));
  int sampleSize=10000;
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setParallelMode(false);
  String file=""String_Node_Str"";
  sampler.sampleToAnARFFFile(file,sampleSize);
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  for (int i=1; i <= 5; i++) {
    DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
    model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 1);
    model.setParallelMode(true);
    model.learn(data);
    DynamicBayesianNetwork nbClassifier=model.getDynamicBNModel();
    System.out.println(nbClassifier.toString());
  }
}",0.9714599341383096
21571,"private CompoundVector createCompoundVector(){
  return new CompoundVector((EF_ConditionalDistribution)this.getEF_BaseDistribution(0),this.numberOfConfigurations());
}","private CompoundVector createCompoundVector(){
  return new CompoundVector((EF_Distribution)this.getEF_BaseDistribution(0),this.numberOfConfigurations());
}",0.9659442724458204
21572,"public CompoundVector(EF_ConditionalDistribution baseDist1,int nConf1){
  nConf=nConf1;
  this.baseConf=new double[nConf];
  baseDist=baseDist1;
  baseVectors=new SparseVector(baseDist1::createZeroedVector,nConf);
  baseSSLength=baseDist.sizeOfSufficientStatistics();
}","public CompoundVector(EF_Distribution baseDist1,int nConf1){
  nConf=nConf1;
  this.baseConf=new double[nConf];
  baseDist=baseDist1;
  baseVectors=new SparseVector(baseDist1::createZeroedVector,nConf);
  baseSSLength=baseDist.sizeOfSufficientStatistics();
}",0.9791271347248576
21573,"public static void main(String[] args) throws IOException {
  BayesianNetworkGenerator.setNumberOfContinuousVars(0);
  BayesianNetworkGenerator.setNumberOfDiscreteVars(5000);
  BayesianNetworkGenerator.setNumberOfStates(3);
  BayesianNetwork bn=BayesianNetworkGenerator.generateNaiveBayes(new Random(0));
  int sampleSize=10000;
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setParallelMode(false);
  String file=""String_Node_Str"";
  sampler.sampleToAnARFFFile(file,sampleSize);
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  for (int i=1; i <= 5; i++) {
    DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
    model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 1);
    model.setParallelMode(true);
    model.learn(data);
    DynamicBayesianNetwork nbClassifier=model.getDynamicBNModel();
  }
}","public static void main(String[] args) throws IOException {
  BayesianNetworkGenerator.setNumberOfContinuousVars(0);
  BayesianNetworkGenerator.setNumberOfDiscreteVars(5);
  BayesianNetworkGenerator.setNumberOfStates(3);
  BayesianNetwork bn=BayesianNetworkGenerator.generateNaiveBayes(new Random(0));
  int sampleSize=10000;
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setParallelMode(false);
  String file=""String_Node_Str"";
  sampler.sampleToAnARFFFile(file,sampleSize);
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  for (int i=1; i <= 5; i++) {
    DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
    model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 1);
    model.setParallelMode(true);
    model.learn(data);
    DynamicBayesianNetwork nbClassifier=model.getDynamicBNModel();
    System.out.println(nbClassifier.toString());
  }
}",0.9714599341383096
21574,"private CompoundVector createCompoundVector(){
  return new CompoundVector((EF_ConditionalDistribution)this.getEF_BaseDistribution(0),this.numberOfConfigurations());
}","private CompoundVector createCompoundVector(){
  return new CompoundVector((EF_Distribution)this.getEF_BaseDistribution(0),this.numberOfConfigurations());
}",0.9659442724458204
21575,"public CompoundVector(EF_ConditionalDistribution baseDist1,int nConf1){
  nConf=nConf1;
  this.baseConf=new double[nConf];
  baseDist=baseDist1;
  baseVectors=new SparseVector(baseDist1::createZeroedVector,nConf);
  baseSSLength=baseDist.sizeOfSufficientStatistics();
}","public CompoundVector(EF_Distribution baseDist1,int nConf1){
  nConf=nConf1;
  this.baseConf=new double[nConf];
  baseDist=baseDist1;
  baseVectors=new SparseVector(baseDist1::createZeroedVector,nConf);
  baseSSLength=baseDist.sizeOfSufficientStatistics();
}",0.9791271347248576
21576,"public static void main(String[] args) throws IOException {
  BayesianNetworkGenerator.setNumberOfContinuousVars(0);
  BayesianNetworkGenerator.setNumberOfDiscreteVars(5000);
  BayesianNetworkGenerator.setNumberOfStates(3);
  BayesianNetwork bn=BayesianNetworkGenerator.generateNaiveBayes(new Random(0));
  int sampleSize=10000;
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setParallelMode(false);
  String file=""String_Node_Str"";
  sampler.sampleToAnARFFFile(file,sampleSize);
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  for (int i=1; i <= 5; i++) {
    DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
    model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 1);
    model.setParallelMode(true);
    model.learn(data);
    DynamicBayesianNetwork nbClassifier=model.getDynamicBNModel();
  }
}","public static void main(String[] args) throws IOException {
  BayesianNetworkGenerator.setNumberOfContinuousVars(0);
  BayesianNetworkGenerator.setNumberOfDiscreteVars(5);
  BayesianNetworkGenerator.setNumberOfStates(3);
  BayesianNetwork bn=BayesianNetworkGenerator.generateNaiveBayes(new Random(0));
  int sampleSize=10000;
  BayesianNetworkSampler sampler=new BayesianNetworkSampler(bn);
  sampler.setParallelMode(false);
  String file=""String_Node_Str"";
  sampler.sampleToAnARFFFile(file,sampleSize);
  DataBase data=new DynamicDataOnDiskFromFile(new ARFFDataReader(file));
  for (int i=1; i <= 5; i++) {
    DynamicNaiveBayesClassifier model=new DynamicNaiveBayesClassifier();
    model.setClassVarID(data.getAttributes().getNumberOfAttributes() - 1);
    model.setParallelMode(true);
    model.learn(data);
    DynamicBayesianNetwork nbClassifier=model.getDynamicBNModel();
    System.out.println(nbClassifier.toString());
  }
}",0.9714599341383096
21577,"private void setMultinomial_MultinomialParents(Node huginVar) throws ExceptionHugin {
  int indexNode=this.huginBN.getNodes().indexOf(huginVar);
  Variable amidstVar=this.amidstBN.getStaticVariables().getVariableById(indexNode);
  int numStates=amidstVar.getNumberOfStates();
  double[] huginProbabilities=huginVar.getTable().getData();
  List<Variable> parents=this.amidstBN.getDAG().getParentSet(amidstVar).getParents();
  int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(parents);
  int pos=0;
  for (int i=0; i < numParentAssignments; i++) {
    double[] amidstProbabilities=new double[numStates];
    for (int k=0; k < numStates; k++) {
      amidstProbabilities[k]=huginProbabilities[i * numStates + k];
    }
    Multinomial_MultinomialParents dist=this.amidstBN.getDistribution(amidstVar);
    dist.getMultinomial(i).setProbabilities(amidstProbabilities);
    pos=pos + numStates;
  }
}","private void setMultinomial_MultinomialParents(Node huginVar) throws ExceptionHugin {
  int indexNode=this.huginBN.getNodes().indexOf(huginVar);
  Variable amidstVar=this.amidstBN.getStaticVariables().getVariableById(indexNode);
  int numStates=amidstVar.getNumberOfStates();
  double[] huginProbabilities=huginVar.getTable().getData();
  List<Variable> parents=this.amidstBN.getDAG().getParentSet(amidstVar).getParents();
  int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(parents);
  for (int i=0; i < numParentAssignments; i++) {
    double[] amidstProbabilities=new double[numStates];
    for (int k=0; k < numStates; k++) {
      amidstProbabilities[k]=huginProbabilities[i * numStates + k];
    }
    Multinomial_MultinomialParents dist=this.amidstBN.getDistribution(amidstVar);
    dist.getMultinomial(i).setProbabilities(amidstProbabilities);
  }
}",0.978865406006674
21578,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.8654822335025381
21579,"public static Class convertToHugin(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DBNConverterToHugin DBNconverterToHugin=new DBNConverterToHugin();
  DBNconverterToHugin.setVariables(amidstDBN);
  DBNconverterToHugin.setTemporalClones(amidstDBN);
  DBNconverterToHugin.setStructure(amidstDBN);
  DBNconverterToHugin.setDistributions(amidstDBN);
  return DBNconverterToHugin.huginDBN;
}","public static Class convertToHugin(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DBNConverterToHugin DBNconverterToHugin=new DBNConverterToHugin();
  DBNconverterToHugin.setNodesAndTemporalClones(amidstDBN);
  DBNconverterToHugin.setStructure(amidstDBN);
  DBNconverterToHugin.setDistributions(amidstDBN);
  return DBNconverterToHugin.huginDBN;
}",0.927536231884058
21580,"private void setDistributions(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  List<Variable> amidstVars=amidstDBN.getDynamicVariables().getListOfDynamicVariables();
  for (  Variable amidstVar : amidstVars) {
    if (amidstVar.getDistributionType().compareTo(DistType.MULTINOMIAL) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    Node huginVar=this.huginDBN.getNodeByName(amidstVar.getName());
    Multinomial_MultinomialParents dist=amidstDBN.getDistributionTimeT(amidstVar);
    Multinomial[] probabilities=dist.getProbabilities();
    List<Variable> conditioningVariables=dist.getConditioningVariables();
    int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(conditioningVariables);
    int nStates=amidstVar.getNumberOfStates();
    int sizeArray=numParentAssignments * nStates;
    double[] finalArray=new double[sizeArray];
    for (int i=0; i < numParentAssignments; i++) {
      double[] sourceArray=probabilities[i].getProbabilities();
      System.arraycopy(sourceArray,0,finalArray,i * nStates,nStates);
    }
    huginVar.getTable().setData(finalArray);
    if (huginVar.getTemporalClone() != null) {
      Multinomial_MultinomialParents distClone=amidstDBN.getDistributionTime0(amidstVar);
      finalArray=distClone.getProbabilities()[0].getProbabilities();
      huginVar.getTemporalClone().getTable().setData(finalArray);
    }
  }
}","private void setDistributions(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  Multinomial_MultinomialParents dist=null;
  int nStates=0;
  for (int i=0; i < numNodes; i++) {
    Node huginNode=huginNodes.get(i);
    if (huginNode.getTemporalMaster() == null) {
      Variable amidstVar=amidstDBN.getDynamicVariables().getVariableByName(huginNode.getName());
      dist=amidstDBN.getDistributionTimeT(amidstVar);
      nStates=amidstVar.getNumberOfStates();
    }
    if (huginNode.getTemporalClone() == null) {
      Variable amidstVar=amidstDBN.getDynamicVariables().getVariableByName(huginNode.getTemporalMaster().getName());
      dist=amidstDBN.getDistributionTime0(amidstVar);
      nStates=amidstVar.getNumberOfStates();
    }
    Multinomial[] probabilities=dist.getProbabilities();
    List<Variable> conditioningVariables=dist.getConditioningVariables();
    int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(conditioningVariables);
    int sizeArray=numParentAssignments * nStates;
    double[] finalArray=new double[sizeArray];
    for (int j=0; j < numParentAssignments; j++) {
      double[] sourceArray=probabilities[j].getProbabilities();
      System.arraycopy(sourceArray,0,finalArray,j * nStates,nStates);
    }
    huginNode.getTable().setData(finalArray);
  }
}",0.5339043540328337
21581,"private void setStructure(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DynamicDAG dynamicDAG=amidstDBN.getDynamicDAG();
  DynamicVariables dynamicVariables=amidstDBN.getDynamicVariables();
  List<Variable> amidstVars=dynamicVariables.getListOfDynamicVariables();
  for (  Variable amidstChild : amidstVars) {
    List<Variable> amidstParents=dynamicDAG.getParentSetTimeT(amidstChild).getParents();
    Node huginChild=this.huginDBN.getNodeByName(amidstChild.getName());
    for (    Variable amidstParent : amidstParents) {
      if (amidstParent.isTemporalClone()) {
        huginChild.addParent(huginChild.getTemporalClone());
      }
 else {
        Node huginParent=this.huginDBN.getNodeByName(amidstParent.getName());
        huginChild.addParent(huginParent);
      }
    }
  }
}","private void setStructure(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DynamicDAG dynamicDAG=amidstDBN.getDynamicDAG();
  DynamicVariables dynamicVariables=amidstDBN.getDynamicVariables();
  List<Variable> amidstVars=dynamicVariables.getListOfDynamicVariables();
  for (  Variable amidstChild : amidstVars) {
    List<Variable> amidstParents=dynamicDAG.getParentSetTimeT(amidstChild).getParents();
    Node huginChild=this.huginDBN.getNodeByName(amidstChild.getName());
    for (    Variable amidstParent : amidstParents) {
      if (amidstParent.isTemporalClone()) {
        huginChild.addParent(huginChild.getTemporalClone());
      }
 else {
        Node huginParent=this.huginDBN.getNodeByName(amidstParent.getName());
        huginChild.addParent(huginParent);
        Node huginParentClone=huginParent.getTemporalClone();
        Node huginChildClone=huginChild.getTemporalClone();
        huginChildClone.addParent(huginParentClone);
      }
    }
  }
}",0.9014084507042254
21582,"@Before public void setUp() throws ExceptionHugin {
  ParseListener parseListener=new DefaultClassParseListener();
  this.huginBN=new Domain(""String_Node_Str"",parseListener);
  System.out.println(""String_Node_Str"");
  this.amidstBN=ConverterToAMIDST.convertToAmidst(this.huginBN);
  System.out.println(""String_Node_Str"");
}","@Before public void setUp() throws ExceptionHugin {
  ParseListener parseListener=new DefaultClassParseListener();
  Domain huginBN=new Domain(""String_Node_Str"",parseListener);
  System.out.println(""String_Node_Str"");
  BayesianNetwork amidstBN=ConverterToAMIDST.convertToAmidst(huginBN);
  System.out.println(""String_Node_Str"");
}",0.9418960244648318
21583,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.stream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.stream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
  this.naturalParameters=vectorNatural;
}",0.9623352165725048
21584,"public BayesianNetwork learnBN(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::learnDAG);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::serialLearnStatic);
  return LearningEngine.learnStaticModel(dataBase);
}","public BayesianNetwork learnBN(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::learnDAG);
  MaximumLikelihood.setParallelMode(this.parallelMode);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  return LearningEngine.learnStaticModel(dataBase);
}",0.8347245409015025
21585,"public ParallelTAN(){
  this.numSamplesOnMemory=10000;
  this.numCores=1;
}","public ParallelTAN(){
  this.numSamplesOnMemory=10000;
  this.numCores=Runtime.getRuntime().availableProcessors();
  this.parallelMode=true;
}",0.6820276497695853
21586,"public static void main(String[] args) throws Exception {
  String dataFile=new String(""String_Node_Str"");
  DataBase data=new StaticDataOnDiskFromFile(new ARFFDataReader(dataFile));
  ParallelTAN tan=new ParallelTAN();
  tan.setNumCores(4);
  tan.setNumSamplesOnMemory(1000);
  tan.setNameRoot(""String_Node_Str"");
  tan.setNameTarget(""String_Node_Str"");
  LearningEngine.setStaticStructuralLearningAlgorithm(tan::learnDAG);
  MaximumLikelihood.setBatchSize(1000);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::parallelLearnStatic);
  BayesianNetwork tanModel=LearningEngine.learnStaticModel(data);
}","public static void main(String[] args) throws Exception {
  String dataFile=new String(""String_Node_Str"");
  DataBase data=new StaticDataOnDiskFromFile(new ARFFDataReader(dataFile));
  ParallelTAN tan=new ParallelTAN();
  tan.setNumCores(4);
  tan.setNumSamplesOnMemory(1000);
  tan.setNameRoot(""String_Node_Str"");
  tan.setNameTarget(""String_Node_Str"");
  LearningEngine.setStaticStructuralLearningAlgorithm(tan::learnDAG);
  MaximumLikelihood.setBatchSize(1000);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  BayesianNetwork tanModel=LearningEngine.learnStaticModel(data);
}",0.9642573471008736
21587,"public void learn(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::staticNaiveBayesStructure);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::parallelLearnStatic);
  bnModel=LearningEngine.learnStaticModel(dataBase);
}","public void learn(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::staticNaiveBayesStructure);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  bnModel=LearningEngine.learnStaticModel(dataBase);
}",0.918918918918919
21588,"public static BayesianNetwork newBayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  return new BayesianNetwork(dag);
}","public static BayesianNetwork newBayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  return new BayesianNetwork(dag,dists);
}",0.9776119402985076
21589,"default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    Attribute att=vars.get(i).getAttribute();
    String nameState=((FiniteStateSpace)att.getStateSpace()).getStatesName((int)this.getValue(vars.get(i)));
    builder.append(nameState + ""String_Node_Str"");
  }
  Attribute att=vars.get(vars.size() - 1).getAttribute();
  String nameState=((FiniteStateSpace)att.getStateSpace()).getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
  builder.append(nameState);
  return builder.toString();
}","default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
    builder.append(nameState + ""String_Node_Str"");
  }
  FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
  String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
  builder.append(nameState);
  return builder.toString();
}",0.5595238095238095
21590,"private void setMultinomial_MultinomialParents(Node huginVar) throws ExceptionHugin {
  int indexNode=this.huginBN.getNodes().indexOf(huginVar);
  Variable amidstVar=this.amidstBN.getStaticVariables().getVariableById(indexNode);
  int numStates=amidstVar.getNumberOfStates();
  double[] huginProbabilities=huginVar.getTable().getData();
  List<Variable> parents=this.amidstBN.getDAG().getParentSet(amidstVar).getParents();
  int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(parents);
  int pos=0;
  for (int i=0; i < numParentAssignments; i++) {
    double[] amidstProbabilities=new double[numStates];
    for (int k=0; k < numStates; k++) {
      amidstProbabilities[k]=huginProbabilities[i * numStates + k];
    }
    Multinomial_MultinomialParents dist=this.amidstBN.getDistribution(amidstVar);
    dist.getMultinomial(i).setProbabilities(amidstProbabilities);
    pos=pos + numStates;
  }
}","private void setMultinomial_MultinomialParents(Node huginVar) throws ExceptionHugin {
  int indexNode=this.huginBN.getNodes().indexOf(huginVar);
  Variable amidstVar=this.amidstBN.getStaticVariables().getVariableById(indexNode);
  int numStates=amidstVar.getNumberOfStates();
  double[] huginProbabilities=huginVar.getTable().getData();
  List<Variable> parents=this.amidstBN.getDAG().getParentSet(amidstVar).getParents();
  int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(parents);
  for (int i=0; i < numParentAssignments; i++) {
    double[] amidstProbabilities=new double[numStates];
    for (int k=0; k < numStates; k++) {
      amidstProbabilities[k]=huginProbabilities[i * numStates + k];
    }
    Multinomial_MultinomialParents dist=this.amidstBN.getDistribution(amidstVar);
    dist.getMultinomial(i).setProbabilities(amidstProbabilities);
  }
}",0.978865406006674
21591,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.8654822335025381
21592,"public static Class convertToHugin(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DBNConverterToHugin DBNconverterToHugin=new DBNConverterToHugin();
  DBNconverterToHugin.setVariables(amidstDBN);
  DBNconverterToHugin.setTemporalClones(amidstDBN);
  DBNconverterToHugin.setStructure(amidstDBN);
  DBNconverterToHugin.setDistributions(amidstDBN);
  return DBNconverterToHugin.huginDBN;
}","public static Class convertToHugin(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DBNConverterToHugin DBNconverterToHugin=new DBNConverterToHugin();
  DBNconverterToHugin.setNodesAndTemporalClones(amidstDBN);
  DBNconverterToHugin.setStructure(amidstDBN);
  DBNconverterToHugin.setDistributions(amidstDBN);
  return DBNconverterToHugin.huginDBN;
}",0.927536231884058
21593,"private void setDistributions(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  List<Variable> amidstVars=amidstDBN.getDynamicVariables().getListOfDynamicVariables();
  for (  Variable amidstVar : amidstVars) {
    if (amidstVar.getDistributionType().compareTo(DistType.MULTINOMIAL) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    Node huginVar=this.huginDBN.getNodeByName(amidstVar.getName());
    Multinomial_MultinomialParents dist=amidstDBN.getDistributionTimeT(amidstVar);
    Multinomial[] probabilities=dist.getProbabilities();
    List<Variable> conditioningVariables=dist.getConditioningVariables();
    int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(conditioningVariables);
    int nStates=amidstVar.getNumberOfStates();
    int sizeArray=numParentAssignments * nStates;
    double[] finalArray=new double[sizeArray];
    for (int i=0; i < numParentAssignments; i++) {
      double[] sourceArray=probabilities[i].getProbabilities();
      System.arraycopy(sourceArray,0,finalArray,i * nStates,nStates);
    }
    huginVar.getTable().setData(finalArray);
    if (huginVar.getTemporalClone() != null) {
      Multinomial_MultinomialParents distClone=amidstDBN.getDistributionTime0(amidstVar);
      finalArray=distClone.getProbabilities()[0].getProbabilities();
      huginVar.getTemporalClone().getTable().setData(finalArray);
    }
  }
}","private void setDistributions(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  Multinomial_MultinomialParents dist=null;
  int nStates=0;
  for (int i=0; i < numNodes; i++) {
    Node huginNode=huginNodes.get(i);
    if (huginNode.getTemporalMaster() == null) {
      Variable amidstVar=amidstDBN.getDynamicVariables().getVariableByName(huginNode.getName());
      dist=amidstDBN.getDistributionTimeT(amidstVar);
      nStates=amidstVar.getNumberOfStates();
    }
    if (huginNode.getTemporalClone() == null) {
      Variable amidstVar=amidstDBN.getDynamicVariables().getVariableByName(huginNode.getTemporalMaster().getName());
      dist=amidstDBN.getDistributionTime0(amidstVar);
      nStates=amidstVar.getNumberOfStates();
    }
    Multinomial[] probabilities=dist.getProbabilities();
    List<Variable> conditioningVariables=dist.getConditioningVariables();
    int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(conditioningVariables);
    int sizeArray=numParentAssignments * nStates;
    double[] finalArray=new double[sizeArray];
    for (int j=0; j < numParentAssignments; j++) {
      double[] sourceArray=probabilities[j].getProbabilities();
      System.arraycopy(sourceArray,0,finalArray,j * nStates,nStates);
    }
    huginNode.getTable().setData(finalArray);
  }
}",0.5339043540328337
21594,"private void setStructure(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DynamicDAG dynamicDAG=amidstDBN.getDynamicDAG();
  DynamicVariables dynamicVariables=amidstDBN.getDynamicVariables();
  List<Variable> amidstVars=dynamicVariables.getListOfDynamicVariables();
  for (  Variable amidstChild : amidstVars) {
    List<Variable> amidstParents=dynamicDAG.getParentSetTimeT(amidstChild).getParents();
    Node huginChild=this.huginDBN.getNodeByName(amidstChild.getName());
    for (    Variable amidstParent : amidstParents) {
      if (amidstParent.isTemporalClone()) {
        huginChild.addParent(huginChild.getTemporalClone());
      }
 else {
        Node huginParent=this.huginDBN.getNodeByName(amidstParent.getName());
        huginChild.addParent(huginParent);
      }
    }
  }
}","private void setStructure(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DynamicDAG dynamicDAG=amidstDBN.getDynamicDAG();
  DynamicVariables dynamicVariables=amidstDBN.getDynamicVariables();
  List<Variable> amidstVars=dynamicVariables.getListOfDynamicVariables();
  for (  Variable amidstChild : amidstVars) {
    List<Variable> amidstParents=dynamicDAG.getParentSetTimeT(amidstChild).getParents();
    Node huginChild=this.huginDBN.getNodeByName(amidstChild.getName());
    for (    Variable amidstParent : amidstParents) {
      if (amidstParent.isTemporalClone()) {
        huginChild.addParent(huginChild.getTemporalClone());
      }
 else {
        Node huginParent=this.huginDBN.getNodeByName(amidstParent.getName());
        huginChild.addParent(huginParent);
        Node huginParentClone=huginParent.getTemporalClone();
        Node huginChildClone=huginChild.getTemporalClone();
        huginChildClone.addParent(huginParentClone);
      }
    }
  }
}",0.9014084507042254
21595,"@Before public void setUp() throws ExceptionHugin {
  ParseListener parseListener=new DefaultClassParseListener();
  this.huginBN=new Domain(""String_Node_Str"",parseListener);
  System.out.println(""String_Node_Str"");
  this.amidstBN=ConverterToAMIDST.convertToAmidst(this.huginBN);
  System.out.println(""String_Node_Str"");
}","@Before public void setUp() throws ExceptionHugin {
  ParseListener parseListener=new DefaultClassParseListener();
  Domain huginBN=new Domain(""String_Node_Str"",parseListener);
  System.out.println(""String_Node_Str"");
  BayesianNetwork amidstBN=ConverterToAMIDST.convertToAmidst(huginBN);
  System.out.println(""String_Node_Str"");
}",0.9418960244648318
21596,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.stream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.stream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
  this.naturalParameters=vectorNatural;
}",0.9623352165725048
21597,"public BayesianNetwork learnBN(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::learnDAG);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::serialLearnStatic);
  return LearningEngine.learnStaticModel(dataBase);
}","public BayesianNetwork learnBN(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::learnDAG);
  MaximumLikelihood.setParallelMode(this.parallelMode);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  return LearningEngine.learnStaticModel(dataBase);
}",0.8347245409015025
21598,"public ParallelTAN(){
  this.numSamplesOnMemory=10000;
  this.numCores=1;
}","public ParallelTAN(){
  this.numSamplesOnMemory=10000;
  this.numCores=Runtime.getRuntime().availableProcessors();
  this.parallelMode=true;
}",0.6820276497695853
21599,"public static void main(String[] args) throws Exception {
  String dataFile=new String(""String_Node_Str"");
  DataBase data=new StaticDataOnDiskFromFile(new ARFFDataReader(dataFile));
  ParallelTAN tan=new ParallelTAN();
  tan.setNumCores(4);
  tan.setNumSamplesOnMemory(1000);
  tan.setNameRoot(""String_Node_Str"");
  tan.setNameTarget(""String_Node_Str"");
  LearningEngine.setStaticStructuralLearningAlgorithm(tan::learnDAG);
  MaximumLikelihood.setBatchSize(1000);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::parallelLearnStatic);
  BayesianNetwork tanModel=LearningEngine.learnStaticModel(data);
}","public static void main(String[] args) throws Exception {
  String dataFile=new String(""String_Node_Str"");
  DataBase data=new StaticDataOnDiskFromFile(new ARFFDataReader(dataFile));
  ParallelTAN tan=new ParallelTAN();
  tan.setNumCores(4);
  tan.setNumSamplesOnMemory(1000);
  tan.setNameRoot(""String_Node_Str"");
  tan.setNameTarget(""String_Node_Str"");
  LearningEngine.setStaticStructuralLearningAlgorithm(tan::learnDAG);
  MaximumLikelihood.setBatchSize(1000);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  BayesianNetwork tanModel=LearningEngine.learnStaticModel(data);
}",0.9642573471008736
21600,"public void learn(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::staticNaiveBayesStructure);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::parallelLearnStatic);
  bnModel=LearningEngine.learnStaticModel(dataBase);
}","public void learn(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::staticNaiveBayesStructure);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  bnModel=LearningEngine.learnStaticModel(dataBase);
}",0.918918918918919
21601,"public static BayesianNetwork newBayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  return new BayesianNetwork(dag);
}","public static BayesianNetwork newBayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  return new BayesianNetwork(dag,dists);
}",0.9776119402985076
21602,"default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    Attribute att=vars.get(i).getAttribute();
    String nameState=((FiniteStateSpace)att.getStateSpace()).getStatesName((int)this.getValue(vars.get(i)));
    builder.append(nameState + ""String_Node_Str"");
  }
  Attribute att=vars.get(vars.size() - 1).getAttribute();
  String nameState=((FiniteStateSpace)att.getStateSpace()).getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
  builder.append(nameState);
  return builder.toString();
}","default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
    builder.append(nameState + ""String_Node_Str"");
  }
  FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
  String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
  builder.append(nameState);
  return builder.toString();
}",0.5595238095238095
21603,"private void setMultinomial_MultinomialParents(Node huginVar) throws ExceptionHugin {
  int indexNode=this.huginBN.getNodes().indexOf(huginVar);
  Variable amidstVar=this.amidstBN.getStaticVariables().getVariableById(indexNode);
  int numStates=amidstVar.getNumberOfStates();
  double[] huginProbabilities=huginVar.getTable().getData();
  List<Variable> parents=this.amidstBN.getDAG().getParentSet(amidstVar).getParents();
  int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(parents);
  int pos=0;
  for (int i=0; i < numParentAssignments; i++) {
    double[] amidstProbabilities=new double[numStates];
    for (int k=0; k < numStates; k++) {
      amidstProbabilities[k]=huginProbabilities[i * numStates + k];
    }
    Multinomial_MultinomialParents dist=this.amidstBN.getDistribution(amidstVar);
    dist.getMultinomial(i).setProbabilities(amidstProbabilities);
    pos=pos + numStates;
  }
}","private void setMultinomial_MultinomialParents(Node huginVar) throws ExceptionHugin {
  int indexNode=this.huginBN.getNodes().indexOf(huginVar);
  Variable amidstVar=this.amidstBN.getStaticVariables().getVariableById(indexNode);
  int numStates=amidstVar.getNumberOfStates();
  double[] huginProbabilities=huginVar.getTable().getData();
  List<Variable> parents=this.amidstBN.getDAG().getParentSet(amidstVar).getParents();
  int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(parents);
  for (int i=0; i < numParentAssignments; i++) {
    double[] amidstProbabilities=new double[numStates];
    for (int k=0; k < numStates; k++) {
      amidstProbabilities[k]=huginProbabilities[i * numStates + k];
    }
    Multinomial_MultinomialParents dist=this.amidstBN.getDistribution(amidstVar);
    dist.getMultinomial(i).setProbabilities(amidstProbabilities);
  }
}",0.978865406006674
21604,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.8654822335025381
21605,"public static Class convertToHugin(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DBNConverterToHugin DBNconverterToHugin=new DBNConverterToHugin();
  DBNconverterToHugin.setVariables(amidstDBN);
  DBNconverterToHugin.setTemporalClones(amidstDBN);
  DBNconverterToHugin.setStructure(amidstDBN);
  DBNconverterToHugin.setDistributions(amidstDBN);
  return DBNconverterToHugin.huginDBN;
}","public static Class convertToHugin(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DBNConverterToHugin DBNconverterToHugin=new DBNConverterToHugin();
  DBNconverterToHugin.setNodesAndTemporalClones(amidstDBN);
  DBNconverterToHugin.setStructure(amidstDBN);
  DBNconverterToHugin.setDistributions(amidstDBN);
  return DBNconverterToHugin.huginDBN;
}",0.927536231884058
21606,"private void setDistributions(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  List<Variable> amidstVars=amidstDBN.getDynamicVariables().getListOfDynamicVariables();
  for (  Variable amidstVar : amidstVars) {
    if (amidstVar.getDistributionType().compareTo(DistType.MULTINOMIAL) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    Node huginVar=this.huginDBN.getNodeByName(amidstVar.getName());
    Multinomial_MultinomialParents dist=amidstDBN.getDistributionTimeT(amidstVar);
    Multinomial[] probabilities=dist.getProbabilities();
    List<Variable> conditioningVariables=dist.getConditioningVariables();
    int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(conditioningVariables);
    int nStates=amidstVar.getNumberOfStates();
    int sizeArray=numParentAssignments * nStates;
    double[] finalArray=new double[sizeArray];
    for (int i=0; i < numParentAssignments; i++) {
      double[] sourceArray=probabilities[i].getProbabilities();
      System.arraycopy(sourceArray,0,finalArray,i * nStates,nStates);
    }
    huginVar.getTable().setData(finalArray);
    if (huginVar.getTemporalClone() != null) {
      Multinomial_MultinomialParents distClone=amidstDBN.getDistributionTime0(amidstVar);
      finalArray=distClone.getProbabilities()[0].getProbabilities();
      huginVar.getTemporalClone().getTable().setData(finalArray);
    }
  }
}","private void setDistributions(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  Multinomial_MultinomialParents dist=null;
  int nStates=0;
  for (int i=0; i < numNodes; i++) {
    Node huginNode=huginNodes.get(i);
    if (huginNode.getTemporalMaster() == null) {
      Variable amidstVar=amidstDBN.getDynamicVariables().getVariableByName(huginNode.getName());
      dist=amidstDBN.getDistributionTimeT(amidstVar);
      nStates=amidstVar.getNumberOfStates();
    }
    if (huginNode.getTemporalClone() == null) {
      Variable amidstVar=amidstDBN.getDynamicVariables().getVariableByName(huginNode.getTemporalMaster().getName());
      dist=amidstDBN.getDistributionTime0(amidstVar);
      nStates=amidstVar.getNumberOfStates();
    }
    Multinomial[] probabilities=dist.getProbabilities();
    List<Variable> conditioningVariables=dist.getConditioningVariables();
    int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(conditioningVariables);
    int sizeArray=numParentAssignments * nStates;
    double[] finalArray=new double[sizeArray];
    for (int j=0; j < numParentAssignments; j++) {
      double[] sourceArray=probabilities[j].getProbabilities();
      System.arraycopy(sourceArray,0,finalArray,j * nStates,nStates);
    }
    huginNode.getTable().setData(finalArray);
  }
}",0.5339043540328337
21607,"private void setStructure(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DynamicDAG dynamicDAG=amidstDBN.getDynamicDAG();
  DynamicVariables dynamicVariables=amidstDBN.getDynamicVariables();
  List<Variable> amidstVars=dynamicVariables.getListOfDynamicVariables();
  for (  Variable amidstChild : amidstVars) {
    List<Variable> amidstParents=dynamicDAG.getParentSetTimeT(amidstChild).getParents();
    Node huginChild=this.huginDBN.getNodeByName(amidstChild.getName());
    for (    Variable amidstParent : amidstParents) {
      if (amidstParent.isTemporalClone()) {
        huginChild.addParent(huginChild.getTemporalClone());
      }
 else {
        Node huginParent=this.huginDBN.getNodeByName(amidstParent.getName());
        huginChild.addParent(huginParent);
      }
    }
  }
}","private void setStructure(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DynamicDAG dynamicDAG=amidstDBN.getDynamicDAG();
  DynamicVariables dynamicVariables=amidstDBN.getDynamicVariables();
  List<Variable> amidstVars=dynamicVariables.getListOfDynamicVariables();
  for (  Variable amidstChild : amidstVars) {
    List<Variable> amidstParents=dynamicDAG.getParentSetTimeT(amidstChild).getParents();
    Node huginChild=this.huginDBN.getNodeByName(amidstChild.getName());
    for (    Variable amidstParent : amidstParents) {
      if (amidstParent.isTemporalClone()) {
        huginChild.addParent(huginChild.getTemporalClone());
      }
 else {
        Node huginParent=this.huginDBN.getNodeByName(amidstParent.getName());
        huginChild.addParent(huginParent);
        Node huginParentClone=huginParent.getTemporalClone();
        Node huginChildClone=huginChild.getTemporalClone();
        huginChildClone.addParent(huginParentClone);
      }
    }
  }
}",0.9014084507042254
21608,"@Before public void setUp() throws ExceptionHugin {
  ParseListener parseListener=new DefaultClassParseListener();
  this.huginBN=new Domain(""String_Node_Str"",parseListener);
  System.out.println(""String_Node_Str"");
  this.amidstBN=ConverterToAMIDST.convertToAmidst(this.huginBN);
  System.out.println(""String_Node_Str"");
}","@Before public void setUp() throws ExceptionHugin {
  ParseListener parseListener=new DefaultClassParseListener();
  Domain huginBN=new Domain(""String_Node_Str"",parseListener);
  System.out.println(""String_Node_Str"");
  BayesianNetwork amidstBN=ConverterToAMIDST.convertToAmidst(huginBN);
  System.out.println(""String_Node_Str"");
}",0.9418960244648318
21609,"private void setMultinomial_MultinomialParents(Node huginVar) throws ExceptionHugin {
  int indexNode=this.huginBN.getNodes().indexOf(huginVar);
  Variable amidstVar=this.amidstBN.getStaticVariables().getVariableById(indexNode);
  int numStates=amidstVar.getNumberOfStates();
  double[] huginProbabilities=huginVar.getTable().getData();
  List<Variable> parents=this.amidstBN.getDAG().getParentSet(amidstVar).getParents();
  int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(parents);
  int pos=0;
  for (int i=0; i < numParentAssignments; i++) {
    double[] amidstProbabilities=new double[numStates];
    for (int k=0; k < numStates; k++) {
      amidstProbabilities[k]=huginProbabilities[i * numStates + k];
    }
    Multinomial_MultinomialParents dist=this.amidstBN.getDistribution(amidstVar);
    dist.getMultinomial(i).setProbabilities(amidstProbabilities);
    pos=pos + numStates;
  }
}","private void setMultinomial_MultinomialParents(Node huginVar) throws ExceptionHugin {
  int indexNode=this.huginBN.getNodes().indexOf(huginVar);
  Variable amidstVar=this.amidstBN.getStaticVariables().getVariableById(indexNode);
  int numStates=amidstVar.getNumberOfStates();
  double[] huginProbabilities=huginVar.getTable().getData();
  List<Variable> parents=this.amidstBN.getDAG().getParentSet(amidstVar).getParents();
  int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(parents);
  for (int i=0; i < numParentAssignments; i++) {
    double[] amidstProbabilities=new double[numStates];
    for (int k=0; k < numStates; k++) {
      amidstProbabilities[k]=huginProbabilities[i * numStates + k];
    }
    Multinomial_MultinomialParents dist=this.amidstBN.getDistribution(amidstVar);
    dist.getMultinomial(i).setProbabilities(amidstProbabilities);
  }
}",0.978865406006674
21610,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.FINITE_SET,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < numNodes; i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.8654822335025381
21611,"public static Class convertToHugin(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DBNConverterToHugin DBNconverterToHugin=new DBNConverterToHugin();
  DBNconverterToHugin.setVariables(amidstDBN);
  DBNconverterToHugin.setTemporalClones(amidstDBN);
  DBNconverterToHugin.setStructure(amidstDBN);
  DBNconverterToHugin.setDistributions(amidstDBN);
  return DBNconverterToHugin.huginDBN;
}","public static Class convertToHugin(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DBNConverterToHugin DBNconverterToHugin=new DBNConverterToHugin();
  DBNconverterToHugin.setNodesAndTemporalClones(amidstDBN);
  DBNconverterToHugin.setStructure(amidstDBN);
  DBNconverterToHugin.setDistributions(amidstDBN);
  return DBNconverterToHugin.huginDBN;
}",0.927536231884058
21612,"private void setDistributions(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  List<Variable> amidstVars=amidstDBN.getDynamicVariables().getListOfDynamicVariables();
  for (  Variable amidstVar : amidstVars) {
    if (amidstVar.getDistributionType().compareTo(DistType.MULTINOMIAL) != 0)     throw new IllegalArgumentException(""String_Node_Str"");
    Node huginVar=this.huginDBN.getNodeByName(amidstVar.getName());
    Multinomial_MultinomialParents dist=amidstDBN.getDistributionTimeT(amidstVar);
    Multinomial[] probabilities=dist.getProbabilities();
    List<Variable> conditioningVariables=dist.getConditioningVariables();
    int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(conditioningVariables);
    int nStates=amidstVar.getNumberOfStates();
    int sizeArray=numParentAssignments * nStates;
    double[] finalArray=new double[sizeArray];
    for (int i=0; i < numParentAssignments; i++) {
      double[] sourceArray=probabilities[i].getProbabilities();
      System.arraycopy(sourceArray,0,finalArray,i * nStates,nStates);
    }
    huginVar.getTable().setData(finalArray);
    if (huginVar.getTemporalClone() != null) {
      Multinomial_MultinomialParents distClone=amidstDBN.getDistributionTime0(amidstVar);
      finalArray=distClone.getProbabilities()[0].getProbabilities();
      huginVar.getTemporalClone().getTable().setData(finalArray);
    }
  }
}","private void setDistributions(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  NodeList huginNodes=this.huginDBN.getNodes();
  int numNodes=huginNodes.size();
  Multinomial_MultinomialParents dist=null;
  int nStates=0;
  for (int i=0; i < numNodes; i++) {
    Node huginNode=huginNodes.get(i);
    if (huginNode.getTemporalMaster() == null) {
      Variable amidstVar=amidstDBN.getDynamicVariables().getVariableByName(huginNode.getName());
      dist=amidstDBN.getDistributionTimeT(amidstVar);
      nStates=amidstVar.getNumberOfStates();
    }
    if (huginNode.getTemporalClone() == null) {
      Variable amidstVar=amidstDBN.getDynamicVariables().getVariableByName(huginNode.getTemporalMaster().getName());
      dist=amidstDBN.getDistributionTime0(amidstVar);
      nStates=amidstVar.getNumberOfStates();
    }
    Multinomial[] probabilities=dist.getProbabilities();
    List<Variable> conditioningVariables=dist.getConditioningVariables();
    int numParentAssignments=MultinomialIndex.getNumberOfPossibleAssignments(conditioningVariables);
    int sizeArray=numParentAssignments * nStates;
    double[] finalArray=new double[sizeArray];
    for (int j=0; j < numParentAssignments; j++) {
      double[] sourceArray=probabilities[j].getProbabilities();
      System.arraycopy(sourceArray,0,finalArray,j * nStates,nStates);
    }
    huginNode.getTable().setData(finalArray);
  }
}",0.5339043540328337
21613,"private void setStructure(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DynamicDAG dynamicDAG=amidstDBN.getDynamicDAG();
  DynamicVariables dynamicVariables=amidstDBN.getDynamicVariables();
  List<Variable> amidstVars=dynamicVariables.getListOfDynamicVariables();
  for (  Variable amidstChild : amidstVars) {
    List<Variable> amidstParents=dynamicDAG.getParentSetTimeT(amidstChild).getParents();
    Node huginChild=this.huginDBN.getNodeByName(amidstChild.getName());
    for (    Variable amidstParent : amidstParents) {
      if (amidstParent.isTemporalClone()) {
        huginChild.addParent(huginChild.getTemporalClone());
      }
 else {
        Node huginParent=this.huginDBN.getNodeByName(amidstParent.getName());
        huginChild.addParent(huginParent);
      }
    }
  }
}","private void setStructure(DynamicBayesianNetwork amidstDBN) throws ExceptionHugin {
  DynamicDAG dynamicDAG=amidstDBN.getDynamicDAG();
  DynamicVariables dynamicVariables=amidstDBN.getDynamicVariables();
  List<Variable> amidstVars=dynamicVariables.getListOfDynamicVariables();
  for (  Variable amidstChild : amidstVars) {
    List<Variable> amidstParents=dynamicDAG.getParentSetTimeT(amidstChild).getParents();
    Node huginChild=this.huginDBN.getNodeByName(amidstChild.getName());
    for (    Variable amidstParent : amidstParents) {
      if (amidstParent.isTemporalClone()) {
        huginChild.addParent(huginChild.getTemporalClone());
      }
 else {
        Node huginParent=this.huginDBN.getNodeByName(amidstParent.getName());
        huginChild.addParent(huginParent);
        Node huginParentClone=huginParent.getTemporalClone();
        Node huginChildClone=huginChild.getTemporalClone();
        huginChildClone.addParent(huginParentClone);
      }
    }
  }
}",0.9014084507042254
21614,"@Before public void setUp() throws ExceptionHugin {
  ParseListener parseListener=new DefaultClassParseListener();
  this.huginBN=new Domain(""String_Node_Str"",parseListener);
  System.out.println(""String_Node_Str"");
  this.amidstBN=ConverterToAMIDST.convertToAmidst(this.huginBN);
  System.out.println(""String_Node_Str"");
}","@Before public void setUp() throws ExceptionHugin {
  ParseListener parseListener=new DefaultClassParseListener();
  Domain huginBN=new Domain(""String_Node_Str"",parseListener);
  System.out.println(""String_Node_Str"");
  BayesianNetwork amidstBN=ConverterToAMIDST.convertToAmidst(huginBN);
  System.out.println(""String_Node_Str"");
}",0.9418960244648318
21615,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.stream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.stream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
  this.naturalParameters=vectorNatural;
}",0.9623352165725048
21616,"public BayesianNetwork learnBN(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::learnDAG);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::serialLearnStatic);
  return LearningEngine.learnStaticModel(dataBase);
}","public BayesianNetwork learnBN(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::learnDAG);
  MaximumLikelihood.setParallelMode(this.parallelMode);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  return LearningEngine.learnStaticModel(dataBase);
}",0.8347245409015025
21617,"public ParallelTAN(){
  this.numSamplesOnMemory=10000;
  this.numCores=1;
}","public ParallelTAN(){
  this.numSamplesOnMemory=10000;
  this.numCores=Runtime.getRuntime().availableProcessors();
  this.parallelMode=true;
}",0.6820276497695853
21618,"public static void main(String[] args) throws Exception {
  String dataFile=new String(""String_Node_Str"");
  DataBase data=new StaticDataOnDiskFromFile(new ARFFDataReader(dataFile));
  ParallelTAN tan=new ParallelTAN();
  tan.setNumCores(4);
  tan.setNumSamplesOnMemory(1000);
  tan.setNameRoot(""String_Node_Str"");
  tan.setNameTarget(""String_Node_Str"");
  LearningEngine.setStaticStructuralLearningAlgorithm(tan::learnDAG);
  MaximumLikelihood.setBatchSize(1000);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::parallelLearnStatic);
  BayesianNetwork tanModel=LearningEngine.learnStaticModel(data);
}","public static void main(String[] args) throws Exception {
  String dataFile=new String(""String_Node_Str"");
  DataBase data=new StaticDataOnDiskFromFile(new ARFFDataReader(dataFile));
  ParallelTAN tan=new ParallelTAN();
  tan.setNumCores(4);
  tan.setNumSamplesOnMemory(1000);
  tan.setNameRoot(""String_Node_Str"");
  tan.setNameTarget(""String_Node_Str"");
  LearningEngine.setStaticStructuralLearningAlgorithm(tan::learnDAG);
  MaximumLikelihood.setBatchSize(1000);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  BayesianNetwork tanModel=LearningEngine.learnStaticModel(data);
}",0.9642573471008736
21619,"public void learn(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::staticNaiveBayesStructure);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::parallelLearnStatic);
  bnModel=LearningEngine.learnStaticModel(dataBase);
}","public void learn(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::staticNaiveBayesStructure);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  bnModel=LearningEngine.learnStaticModel(dataBase);
}",0.918918918918919
21620,"public static BayesianNetwork newBayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  return new BayesianNetwork(dag);
}","public static BayesianNetwork newBayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  return new BayesianNetwork(dag,dists);
}",0.9776119402985076
21621,"default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    Attribute att=vars.get(i).getAttribute();
    String nameState=((FiniteStateSpace)att.getStateSpace()).getStatesName((int)this.getValue(vars.get(i)));
    builder.append(nameState + ""String_Node_Str"");
  }
  Attribute att=vars.get(vars.size() - 1).getAttribute();
  String nameState=((FiniteStateSpace)att.getStateSpace()).getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
  builder.append(nameState);
  return builder.toString();
}","default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
    builder.append(nameState + ""String_Node_Str"");
  }
  FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
  String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
  builder.append(nameState);
  return builder.toString();
}",0.5595238095238095
21622,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.stream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.stream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
  this.naturalParameters=vectorNatural;
}",0.9623352165725048
21623,"public BayesianNetwork learnBN(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::learnDAG);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::serialLearnStatic);
  return LearningEngine.learnStaticModel(dataBase);
}","public BayesianNetwork learnBN(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::learnDAG);
  MaximumLikelihood.setParallelMode(this.parallelMode);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  return LearningEngine.learnStaticModel(dataBase);
}",0.8347245409015025
21624,"public ParallelTAN(){
  this.numSamplesOnMemory=10000;
  this.numCores=1;
}","public ParallelTAN(){
  this.numSamplesOnMemory=10000;
  this.numCores=Runtime.getRuntime().availableProcessors();
  this.parallelMode=true;
}",0.6820276497695853
21625,"public void learn(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::staticNaiveBayesStructure);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::parallelLearnStatic);
  bnModel=LearningEngine.learnStaticModel(dataBase);
}","public void learn(DataBase dataBase){
  LearningEngine.setStaticStructuralLearningAlgorithm(this::staticNaiveBayesStructure);
  LearningEngine.setStaticParameterLearningAlgorithm(MaximumLikelihood::learnParametersStaticModel);
  bnModel=LearningEngine.learnStaticModel(dataBase);
}",0.918918918918919
21626,"default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    Attribute att=vars.get(i).getAttribute();
    String nameState=((FiniteStateSpace)att.getStateSpace()).getStatesName((int)this.getValue(vars.get(i)));
    builder.append(nameState + ""String_Node_Str"");
  }
  Attribute att=vars.get(vars.size() - 1).getAttribute();
  String nameState=((FiniteStateSpace)att.getStateSpace()).getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
  builder.append(nameState);
  return builder.toString();
}","default String toARFFString(List<Variable> vars){
  StringBuilder builder=new StringBuilder(vars.size() * 2);
  for (int i=0; i < vars.size() - 1; i++) {
    FiniteStateSpace stateSpace=vars.get(i).getStateSpace();
    String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(i)));
    builder.append(nameState + ""String_Node_Str"");
  }
  FiniteStateSpace stateSpace=vars.get(vars.size() - 1).getStateSpace();
  String nameState=stateSpace.getStatesName((int)this.getValue(vars.get(vars.size() - 1)));
  builder.append(nameState);
  return builder.toString();
}",0.5595238095238095
21627,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (multinomialParents1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}",0.9506172839506172
21628,"@Override public double get(int i){
  i-=nConf;
  return baseVectors[(int)Math.ceil(i / (double)nConf)].get(i % baseSSLength);
}","@Override public double get(int i){
  if (i < nConf) {
    return this.baseConf[i];
  }
 else {
    i-=nConf;
    return baseVectors[Math.floorDiv(i,this.baseSSLength)].get(i % baseSSLength);
  }
}",0.6584615384615384
21629,"public void setVectorByPosition(int position,Vector vec){
  baseVectors[position].copy(vec);
}","public void setVectorByPosition(int position,Vector vec){
  baseVectors[position]=vec;
}",0.956043956043956
21630,"@Override public void set(int i,double val){
  if (i < nConf) {
    baseConf[i]=val;
  }
 else {
    i-=nConf;
    baseVectors[(int)Math.ceil(i / (double)nConf)].set(i % baseSSLength,val);
  }
}","@Override public void set(int i,double val){
  if (i < nConf) {
    baseConf[i]=val;
  }
 else {
    i-=nConf;
    baseVectors[Math.floorDiv(i,this.baseSSLength)].set(i % baseSSLength,val);
  }
}",0.8894601542416453
21631,"public void updateNaturalFromMomentParameters(){
  CompoundVector<E> globalMomentsParam=(CompoundVector<E>)this.momentParameters;
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).createZeroedMomentParameters();
    moment.copy(globalMomentsParam.getVectorByPosition(i));
    moment.divideBy(globalMomentsParam.getBaseConf(i));
    this.getEF_BaseDistribution(i).setMomentParameters(momentParameters);
  }
  CompoundVector<E> vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.getVectorByPosition(i).copy(this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  return;
}","public void updateNaturalFromMomentParameters(){
  CompoundVector<E> globalMomentsParam=(CompoundVector<E>)this.momentParameters;
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=(MomentParameters)globalMomentsParam.getVectorByPosition(i);
    moment.divideBy(globalMomentsParam.getBaseConf(i));
    this.getEF_BaseDistribution(i).setMomentParameters(momentParameters);
  }
  CompoundVector<E> vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  return;
}",0.5213567839195979
21632,"public EF_BayesianNetwork(DAG dag){
  distributionList=new ArrayList(dag.getStaticVariables().getNumberOfVars());
  sizeSS=0;
  for (  ParentSet parentSet : dag.getParentSets()) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.set(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
}","public EF_BayesianNetwork(DAG dag){
  distributionList=new ArrayList(dag.getStaticVariables().getNumberOfVars());
  sizeSS=0;
  for (  ParentSet parentSet : dag.getParentSets()) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
}",0.9941520467836256
21633,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    MomentParameters localMomentParam=w.createZeroedMomentParameters();
    localMomentParam.copy(globalMomentsParam.getVectorByPosition(w.getVariable().getVarID()));
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}",0.9269195189639224
21634,"public void setVectorByPosition(int position,Vector vec){
  baseVectors[position].copy(vec);
}","public void setVectorByPosition(int position,Vector vec){
  baseVectors[position]=vec;
}",0.956043956043956
21635,"public BayesianNetwork toBayesianNetwork(DAG dag){
  BayesianNetwork bayesianNetwork=BayesianNetwork.newBayesianNetwork(dag);
  this.distributionList.stream().forEach(dist -> bayesianNetwork.setDistribution(dist.getVariable(),EF_DistributionBuilder.toDistributionGeneral(dist)));
  return bayesianNetwork;
}","public BayesianNetwork toBayesianNetwork(DAG dag){
  ConditionalDistribution[] dists=new ConditionalDistribution[dag.getStaticVariables().getNumberOfVars()];
  this.distributionList.parallelStream().forEach(dist -> dists[dist.getVariable().getVarID()]=EF_DistributionBuilder.toDistributionGeneral(dist));
  return BayesianNetwork.newBayesianNetwork(dag,Arrays.asList(dists));
}",0.5877192982456141
21636,"@Override public SufficientStatistics getSufficientStatistics(DataInstance data){
  CompoundVector vectorSS=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    vectorSS.getVectorByPosition(w.getVariable().getVarID()).copy(w.getSufficientStatistics(data));
  }
);
  return vectorSS;
}","@Override public SufficientStatistics getSufficientStatistics(DataInstance data){
  CompoundVector vectorSS=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    vectorSS.setVectorByPosition(w.getVariable().getVarID(),w.getSufficientStatistics(data));
  }
);
  return vectorSS;
}",0.9842271293375394
21637,"public static SufficientStatistics sum(SufficientStatistics vec1,SufficientStatistics vec2){
  return (SufficientStatistics)Vector.sum(vec1,vec2);
}","public static SufficientStatistics sum(SufficientStatistics vec1,SufficientStatistics vec2){
  return vec1;
}",0.8482490272373541
21638,"public static BayesianNetwork parallelLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sumSS=dataBase.parallelStream(batchSize).peek(w -> count.getAndIncrement()).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sumSS.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sumSS);
  return efBayesianNetwork.toBayesianNetwork(dag);
}","public static BayesianNetwork parallelLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sumSS=dataBase.parallelStream(batchSize).peek(w -> {
    count.getAndIncrement();
  }
).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sumSS.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sumSS);
  return efBayesianNetwork.toBayesianNetwork(dag);
}",0.98932384341637
21639,"public static BayesianNetwork serialLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sum=dataBase.stream().peek(w -> count.getAndIncrement()).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sum.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sum);
  return efBayesianNetwork.toBayesianNetwork(dag);
}","public static BayesianNetwork serialLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  final int[] count={0};
  SufficientStatistics sum=dataBase.stream().peek(w -> {
    count[0]++;
  }
).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sum.divideBy(count[0]);
  efBayesianNetwork.setMomentParameters(sum);
  return efBayesianNetwork.toBayesianNetwork(dag);
}",0.7199230028873917
21640,"private BayesianNetwork(DAG dag){
  this.dag=dag;
  initializeDistributions();
}","private BayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  this.dag=dag;
  this.distributions=dists;
}",0.6974358974358974
21641,"public static BayesianNetwork newBayesianNetwork(DAG dag){
  return new BayesianNetwork(dag);
}","public static BayesianNetwork newBayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  return new BayesianNetwork(dag);
}",0.8407079646017699
21642,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (multinomialParents1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}",0.9506172839506172
21643,"@Override public double get(int i){
  i-=nConf;
  return baseVectors[(int)Math.ceil(i / (double)nConf)].get(i % baseSSLength);
}","@Override public double get(int i){
  if (i < nConf) {
    return this.baseConf[i];
  }
 else {
    i-=nConf;
    return baseVectors[Math.floorDiv(i,this.baseSSLength)].get(i % baseSSLength);
  }
}",0.6584615384615384
21644,"public void setVectorByPosition(int position,Vector vec){
  baseVectors[position].copy(vec);
}","public void setVectorByPosition(int position,Vector vec){
  baseVectors[position]=vec;
}",0.956043956043956
21645,"@Override public void set(int i,double val){
  if (i < nConf) {
    baseConf[i]=val;
  }
 else {
    i-=nConf;
    baseVectors[(int)Math.ceil(i / (double)nConf)].set(i % baseSSLength,val);
  }
}","@Override public void set(int i,double val){
  if (i < nConf) {
    baseConf[i]=val;
  }
 else {
    i-=nConf;
    baseVectors[Math.floorDiv(i,this.baseSSLength)].set(i % baseSSLength,val);
  }
}",0.8894601542416453
21646,"public void updateNaturalFromMomentParameters(){
  CompoundVector<E> globalMomentsParam=(CompoundVector<E>)this.momentParameters;
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).createZeroedMomentParameters();
    moment.copy(globalMomentsParam.getVectorByPosition(i));
    moment.divideBy(globalMomentsParam.getBaseConf(i));
    this.getEF_BaseDistribution(i).setMomentParameters(momentParameters);
  }
  CompoundVector<E> vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.getVectorByPosition(i).copy(this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  return;
}","public void updateNaturalFromMomentParameters(){
  CompoundVector<E> globalMomentsParam=(CompoundVector<E>)this.momentParameters;
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=(MomentParameters)globalMomentsParam.getVectorByPosition(i);
    moment.divideBy(globalMomentsParam.getBaseConf(i));
    this.getEF_BaseDistribution(i).setMomentParameters(momentParameters);
  }
  CompoundVector<E> vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  return;
}",0.5213567839195979
21647,"public EF_BayesianNetwork(DAG dag){
  distributionList=new ArrayList(dag.getStaticVariables().getNumberOfVars());
  sizeSS=0;
  for (  ParentSet parentSet : dag.getParentSets()) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.set(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
}","public EF_BayesianNetwork(DAG dag){
  distributionList=new ArrayList(dag.getStaticVariables().getNumberOfVars());
  sizeSS=0;
  for (  ParentSet parentSet : dag.getParentSets()) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
}",0.9941520467836256
21648,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    MomentParameters localMomentParam=w.createZeroedMomentParameters();
    localMomentParam.copy(globalMomentsParam.getVectorByPosition(w.getVariable().getVarID()));
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}",0.9269195189639224
21649,"public void setVectorByPosition(int position,Vector vec){
  baseVectors[position].copy(vec);
}","public void setVectorByPosition(int position,Vector vec){
  baseVectors[position]=vec;
}",0.956043956043956
21650,"public BayesianNetwork toBayesianNetwork(DAG dag){
  BayesianNetwork bayesianNetwork=BayesianNetwork.newBayesianNetwork(dag);
  this.distributionList.stream().forEach(dist -> bayesianNetwork.setDistribution(dist.getVariable(),EF_DistributionBuilder.toDistributionGeneral(dist)));
  return bayesianNetwork;
}","public BayesianNetwork toBayesianNetwork(DAG dag){
  ConditionalDistribution[] dists=new ConditionalDistribution[dag.getStaticVariables().getNumberOfVars()];
  this.distributionList.parallelStream().forEach(dist -> dists[dist.getVariable().getVarID()]=EF_DistributionBuilder.toDistributionGeneral(dist));
  return BayesianNetwork.newBayesianNetwork(dag,Arrays.asList(dists));
}",0.5877192982456141
21651,"@Override public SufficientStatistics getSufficientStatistics(DataInstance data){
  CompoundVector vectorSS=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    vectorSS.getVectorByPosition(w.getVariable().getVarID()).copy(w.getSufficientStatistics(data));
  }
);
  return vectorSS;
}","@Override public SufficientStatistics getSufficientStatistics(DataInstance data){
  CompoundVector vectorSS=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    vectorSS.setVectorByPosition(w.getVariable().getVarID(),w.getSufficientStatistics(data));
  }
);
  return vectorSS;
}",0.9842271293375394
21652,"public static SufficientStatistics sum(SufficientStatistics vec1,SufficientStatistics vec2){
  return (SufficientStatistics)Vector.sum(vec1,vec2);
}","public static SufficientStatistics sum(SufficientStatistics vec1,SufficientStatistics vec2){
  return vec1;
}",0.8482490272373541
21653,"public static BayesianNetwork parallelLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sumSS=dataBase.parallelStream(batchSize).peek(w -> count.getAndIncrement()).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sumSS.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sumSS);
  return efBayesianNetwork.toBayesianNetwork(dag);
}","public static BayesianNetwork parallelLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sumSS=dataBase.parallelStream(batchSize).peek(w -> {
    count.getAndIncrement();
  }
).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sumSS.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sumSS);
  return efBayesianNetwork.toBayesianNetwork(dag);
}",0.98932384341637
21654,"public static BayesianNetwork serialLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sum=dataBase.stream().peek(w -> count.getAndIncrement()).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sum.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sum);
  return efBayesianNetwork.toBayesianNetwork(dag);
}","public static BayesianNetwork serialLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  final int[] count={0};
  SufficientStatistics sum=dataBase.stream().peek(w -> {
    count[0]++;
  }
).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sum.divideBy(count[0]);
  efBayesianNetwork.setMomentParameters(sum);
  return efBayesianNetwork.toBayesianNetwork(dag);
}",0.7199230028873917
21655,"private BayesianNetwork(DAG dag){
  this.dag=dag;
  initializeDistributions();
}","private BayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  this.dag=dag;
  this.distributions=dists;
}",0.6974358974358974
21656,"public static BayesianNetwork newBayesianNetwork(DAG dag){
  return new BayesianNetwork(dag);
}","public static BayesianNetwork newBayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  return new BayesianNetwork(dag);
}",0.8407079646017699
21657,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (multinomialParents1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}",0.9506172839506172
21658,"@Override public double get(int i){
  i-=nConf;
  return baseVectors[(int)Math.ceil(i / (double)nConf)].get(i % baseSSLength);
}","@Override public double get(int i){
  if (i < nConf) {
    return this.baseConf[i];
  }
 else {
    i-=nConf;
    return baseVectors[Math.floorDiv(i,this.baseSSLength)].get(i % baseSSLength);
  }
}",0.6584615384615384
21659,"public void setVectorByPosition(int position,Vector vec){
  baseVectors[position].copy(vec);
}","public void setVectorByPosition(int position,Vector vec){
  baseVectors[position]=vec;
}",0.956043956043956
21660,"@Override public void set(int i,double val){
  if (i < nConf) {
    baseConf[i]=val;
  }
 else {
    i-=nConf;
    baseVectors[(int)Math.ceil(i / (double)nConf)].set(i % baseSSLength,val);
  }
}","@Override public void set(int i,double val){
  if (i < nConf) {
    baseConf[i]=val;
  }
 else {
    i-=nConf;
    baseVectors[Math.floorDiv(i,this.baseSSLength)].set(i % baseSSLength,val);
  }
}",0.8894601542416453
21661,"public void updateNaturalFromMomentParameters(){
  CompoundVector<E> globalMomentsParam=(CompoundVector<E>)this.momentParameters;
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).createZeroedMomentParameters();
    moment.copy(globalMomentsParam.getVectorByPosition(i));
    moment.divideBy(globalMomentsParam.getBaseConf(i));
    this.getEF_BaseDistribution(i).setMomentParameters(momentParameters);
  }
  CompoundVector<E> vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.getVectorByPosition(i).copy(this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  return;
}","public void updateNaturalFromMomentParameters(){
  CompoundVector<E> globalMomentsParam=(CompoundVector<E>)this.momentParameters;
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=(MomentParameters)globalMomentsParam.getVectorByPosition(i);
    moment.divideBy(globalMomentsParam.getBaseConf(i));
    this.getEF_BaseDistribution(i).setMomentParameters(momentParameters);
  }
  CompoundVector<E> vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  return;
}",0.5213567839195979
21662,"public EF_BayesianNetwork(DAG dag){
  distributionList=new ArrayList(dag.getStaticVariables().getNumberOfVars());
  sizeSS=0;
  for (  ParentSet parentSet : dag.getParentSets()) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.set(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
}","public EF_BayesianNetwork(DAG dag){
  distributionList=new ArrayList(dag.getStaticVariables().getNumberOfVars());
  sizeSS=0;
  for (  ParentSet parentSet : dag.getParentSets()) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
}",0.9941520467836256
21663,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    MomentParameters localMomentParam=w.createZeroedMomentParameters();
    localMomentParam.copy(globalMomentsParam.getVectorByPosition(w.getVariable().getVarID()));
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}",0.9269195189639224
21664,"public void setVectorByPosition(int position,Vector vec){
  baseVectors[position].copy(vec);
}","public void setVectorByPosition(int position,Vector vec){
  baseVectors[position]=vec;
}",0.956043956043956
21665,"public BayesianNetwork toBayesianNetwork(DAG dag){
  BayesianNetwork bayesianNetwork=BayesianNetwork.newBayesianNetwork(dag);
  this.distributionList.stream().forEach(dist -> bayesianNetwork.setDistribution(dist.getVariable(),EF_DistributionBuilder.toDistributionGeneral(dist)));
  return bayesianNetwork;
}","public BayesianNetwork toBayesianNetwork(DAG dag){
  ConditionalDistribution[] dists=new ConditionalDistribution[dag.getStaticVariables().getNumberOfVars()];
  this.distributionList.parallelStream().forEach(dist -> dists[dist.getVariable().getVarID()]=EF_DistributionBuilder.toDistributionGeneral(dist));
  return BayesianNetwork.newBayesianNetwork(dag,Arrays.asList(dists));
}",0.5877192982456141
21666,"@Override public SufficientStatistics getSufficientStatistics(DataInstance data){
  CompoundVector vectorSS=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    vectorSS.getVectorByPosition(w.getVariable().getVarID()).copy(w.getSufficientStatistics(data));
  }
);
  return vectorSS;
}","@Override public SufficientStatistics getSufficientStatistics(DataInstance data){
  CompoundVector vectorSS=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    vectorSS.setVectorByPosition(w.getVariable().getVarID(),w.getSufficientStatistics(data));
  }
);
  return vectorSS;
}",0.9842271293375394
21667,"public static SufficientStatistics sum(SufficientStatistics vec1,SufficientStatistics vec2){
  return (SufficientStatistics)Vector.sum(vec1,vec2);
}","public static SufficientStatistics sum(SufficientStatistics vec1,SufficientStatistics vec2){
  return vec1;
}",0.8482490272373541
21668,"public static BayesianNetwork parallelLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sumSS=dataBase.parallelStream(batchSize).peek(w -> count.getAndIncrement()).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sumSS.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sumSS);
  return efBayesianNetwork.toBayesianNetwork(dag);
}","public static BayesianNetwork parallelLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sumSS=dataBase.parallelStream(batchSize).peek(w -> {
    count.getAndIncrement();
  }
).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sumSS.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sumSS);
  return efBayesianNetwork.toBayesianNetwork(dag);
}",0.98932384341637
21669,"public static BayesianNetwork serialLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sum=dataBase.stream().peek(w -> count.getAndIncrement()).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sum.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sum);
  return efBayesianNetwork.toBayesianNetwork(dag);
}","public static BayesianNetwork serialLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  final int[] count={0};
  SufficientStatistics sum=dataBase.stream().peek(w -> {
    count[0]++;
  }
).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sum.divideBy(count[0]);
  efBayesianNetwork.setMomentParameters(sum);
  return efBayesianNetwork.toBayesianNetwork(dag);
}",0.7199230028873917
21670,"private BayesianNetwork(DAG dag){
  this.dag=dag;
  initializeDistributions();
}","private BayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  this.dag=dag;
  this.distributions=dists;
}",0.6974358974358974
21671,"public static BayesianNetwork newBayesianNetwork(DAG dag){
  return new BayesianNetwork(dag);
}","public static BayesianNetwork newBayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  return new BayesianNetwork(dag);
}",0.8407079646017699
21672,"public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (multinomialParents1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}","public EF_BaseDistribution_MultinomialParents(List<Variable> multinomialParents1,List<E> distributions1){
  if (distributions1.size() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int size=MultinomialIndex.getNumberOfPossibleAssignments(multinomialParents1);
  if (size != distributions1.size())   throw new IllegalArgumentException(""String_Node_Str"");
  this.var=distributions1.get(0).getVariable();
  this.multinomialParents=multinomialParents1;
  this.distributions=distributions1;
  this.parents=new ArrayList();
  for (  Variable v : this.multinomialParents)   this.parents.add(v);
  E dist=distributions.get(0);
  if (dist.getClass().getName().equals(""String_Node_Str"")) {
    EF_ConditionalDistribution distCond=(EF_ConditionalDistribution)dist;
    for (    Variable v : distCond.getConditioningVariables())     this.parents.add(v);
  }
  this.parents=Collections.unmodifiableList(this.parents);
}",0.9506172839506172
21673,"@Override public double get(int i){
  i-=nConf;
  return baseVectors[(int)Math.ceil(i / (double)nConf)].get(i % baseSSLength);
}","@Override public double get(int i){
  if (i < nConf) {
    return this.baseConf[i];
  }
 else {
    i-=nConf;
    return baseVectors[Math.floorDiv(i,this.baseSSLength)].get(i % baseSSLength);
  }
}",0.6584615384615384
21674,"public void setVectorByPosition(int position,Vector vec){
  baseVectors[position].copy(vec);
}","public void setVectorByPosition(int position,Vector vec){
  baseVectors[position]=vec;
}",0.956043956043956
21675,"@Override public void set(int i,double val){
  if (i < nConf) {
    baseConf[i]=val;
  }
 else {
    i-=nConf;
    baseVectors[(int)Math.ceil(i / (double)nConf)].set(i % baseSSLength,val);
  }
}","@Override public void set(int i,double val){
  if (i < nConf) {
    baseConf[i]=val;
  }
 else {
    i-=nConf;
    baseVectors[Math.floorDiv(i,this.baseSSLength)].set(i % baseSSLength,val);
  }
}",0.8894601542416453
21676,"public void updateNaturalFromMomentParameters(){
  CompoundVector<E> globalMomentsParam=(CompoundVector<E>)this.momentParameters;
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=this.getEF_BaseDistribution(i).createZeroedMomentParameters();
    moment.copy(globalMomentsParam.getVectorByPosition(i));
    moment.divideBy(globalMomentsParam.getBaseConf(i));
    this.getEF_BaseDistribution(i).setMomentParameters(momentParameters);
  }
  CompoundVector<E> vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.getVectorByPosition(i).copy(this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  return;
}","public void updateNaturalFromMomentParameters(){
  CompoundVector<E> globalMomentsParam=(CompoundVector<E>)this.momentParameters;
  for (int i=0; i < numberOfConfigurations(); i++) {
    MomentParameters moment=(MomentParameters)globalMomentsParam.getVectorByPosition(i);
    moment.divideBy(globalMomentsParam.getBaseConf(i));
    this.getEF_BaseDistribution(i).setMomentParameters(momentParameters);
  }
  CompoundVector<E> vectorNatural=this.createCompoundVector();
  for (int i=0; i < numberOfConfigurations(); i++) {
    vectorNatural.setBaseConf(i,-this.getEF_BaseDistribution(i).computeLogNormalizer());
    vectorNatural.setVectorByPosition(i,this.getEF_BaseDistribution(i).getNaturalParameters());
  }
  this.naturalParameters=vectorNatural;
  return;
}",0.5213567839195979
21677,"public EF_BayesianNetwork(DAG dag){
  distributionList=new ArrayList(dag.getStaticVariables().getNumberOfVars());
  sizeSS=0;
  for (  ParentSet parentSet : dag.getParentSets()) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.set(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
}","public EF_BayesianNetwork(DAG dag){
  distributionList=new ArrayList(dag.getStaticVariables().getNumberOfVars());
  sizeSS=0;
  for (  ParentSet parentSet : dag.getParentSets()) {
    ConditionalDistribution dist=DistributionBuilder.newDistribution(parentSet.getMainVar(),parentSet.getParents());
    EF_ConditionalDistribution ef_dist=EF_DistributionBuilder.toEFDistributionGeneral(dist);
    distributionList.add(ef_dist.getVariable().getVarID(),ef_dist);
    sizeSS+=ef_dist.sizeOfSufficientStatistics();
  }
}",0.9941520467836256
21678,"@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    MomentParameters localMomentParam=w.createZeroedMomentParameters();
    localMomentParam.copy(globalMomentsParam.getVectorByPosition(w.getVariable().getVarID()));
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}","@Override public void updateNaturalFromMomentParameters(){
  CompoundVector globalMomentsParam=(CompoundVector)this.momentParameters;
  CompoundVector vectorNatural=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    MomentParameters localMomentParam=(MomentParameters)globalMomentsParam.getVectorByPosition(w.getVariable().getVarID());
    w.setMomentParameters(localMomentParam);
    vectorNatural.setVectorByPosition(w.getVariable().getVarID(),w.getNaturalParameters());
  }
);
}",0.9269195189639224
21679,"public void setVectorByPosition(int position,Vector vec){
  baseVectors[position].copy(vec);
}","public void setVectorByPosition(int position,Vector vec){
  baseVectors[position]=vec;
}",0.956043956043956
21680,"public BayesianNetwork toBayesianNetwork(DAG dag){
  BayesianNetwork bayesianNetwork=BayesianNetwork.newBayesianNetwork(dag);
  this.distributionList.stream().forEach(dist -> bayesianNetwork.setDistribution(dist.getVariable(),EF_DistributionBuilder.toDistributionGeneral(dist)));
  return bayesianNetwork;
}","public BayesianNetwork toBayesianNetwork(DAG dag){
  ConditionalDistribution[] dists=new ConditionalDistribution[dag.getStaticVariables().getNumberOfVars()];
  this.distributionList.parallelStream().forEach(dist -> dists[dist.getVariable().getVarID()]=EF_DistributionBuilder.toDistributionGeneral(dist));
  return BayesianNetwork.newBayesianNetwork(dag,Arrays.asList(dists));
}",0.5877192982456141
21681,"@Override public SufficientStatistics getSufficientStatistics(DataInstance data){
  CompoundVector vectorSS=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    vectorSS.getVectorByPosition(w.getVariable().getVarID()).copy(w.getSufficientStatistics(data));
  }
);
  return vectorSS;
}","@Override public SufficientStatistics getSufficientStatistics(DataInstance data){
  CompoundVector vectorSS=this.createCompoundVector();
  this.distributionList.parallelStream().forEach(w -> {
    vectorSS.setVectorByPosition(w.getVariable().getVarID(),w.getSufficientStatistics(data));
  }
);
  return vectorSS;
}",0.9842271293375394
21682,"public static SufficientStatistics sum(SufficientStatistics vec1,SufficientStatistics vec2){
  return (SufficientStatistics)Vector.sum(vec1,vec2);
}","public static SufficientStatistics sum(SufficientStatistics vec1,SufficientStatistics vec2){
  return vec1;
}",0.8482490272373541
21683,"public static BayesianNetwork parallelLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sumSS=dataBase.parallelStream(batchSize).peek(w -> count.getAndIncrement()).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sumSS.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sumSS);
  return efBayesianNetwork.toBayesianNetwork(dag);
}","public static BayesianNetwork parallelLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sumSS=dataBase.parallelStream(batchSize).peek(w -> {
    count.getAndIncrement();
  }
).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sumSS.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sumSS);
  return efBayesianNetwork.toBayesianNetwork(dag);
}",0.98932384341637
21684,"public static BayesianNetwork serialLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  AtomicInteger count=new AtomicInteger(0);
  SufficientStatistics sum=dataBase.stream().peek(w -> count.getAndIncrement()).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sum.divideBy(count.get());
  efBayesianNetwork.setMomentParameters(sum);
  return efBayesianNetwork.toBayesianNetwork(dag);
}","public static BayesianNetwork serialLearnStatic(DAG dag,DataBase dataBase){
  EF_BayesianNetwork efBayesianNetwork=new EF_BayesianNetwork(dag);
  final int[] count={0};
  SufficientStatistics sum=dataBase.stream().peek(w -> {
    count[0]++;
  }
).map(efBayesianNetwork::getSufficientStatistics).reduce(efBayesianNetwork.createZeroedSufficientStatistics(),SufficientStatistics::sum);
  sum.divideBy(count[0]);
  efBayesianNetwork.setMomentParameters(sum);
  return efBayesianNetwork.toBayesianNetwork(dag);
}",0.7199230028873917
21685,"private BayesianNetwork(DAG dag){
  this.dag=dag;
  initializeDistributions();
}","private BayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  this.dag=dag;
  this.distributions=dists;
}",0.6974358974358974
21686,"public static BayesianNetwork newBayesianNetwork(DAG dag){
  return new BayesianNetwork(dag);
}","public static BayesianNetwork newBayesianNetwork(DAG dag,List<ConditionalDistribution> dists){
  return new BayesianNetwork(dag);
}",0.8407079646017699
21687,"public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples)     dataOnMemoryList.add(count,instance);
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}","public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}",0.9905482041587902
21688,"public FiniteStateSpace(List<String> statesNames1){
  super(StateSpaceType.FINITE_SET);
  this.numberOfStates=statesNames1.size();
  this.statesNames=new ArrayList<>();
  this.mapStatesNames=new HashMap<>();
  for (int i=0; i < statesNames.size(); i++) {
    this.statesNames.add(statesNames.get(i));
    this.mapStatesNames.put(statesNames.get(i),i);
  }
}","public FiniteStateSpace(List<String> statesNames1){
  super(StateSpaceType.FINITE_SET);
  this.numberOfStates=statesNames1.size();
  this.statesNames=new ArrayList<>();
  this.mapStatesNames=new HashMap<>();
  for (int i=0; i < statesNames1.size(); i++) {
    this.statesNames.add(statesNames1.get(i));
    this.mapStatesNames.put(statesNames1.get(i),i);
  }
}",0.99581589958159
21689,"public DataRowWeka(Attributes atts,String line){
  data=new double[atts.getNumberOfAttributes()];
  String[] parts=line.split(""String_Node_Str"");
  for (int i=0; i < parts.length; i++) {
switch (atts.getList().get(i).getStateSpace().getStateSpaceType()) {
case REAL:
      data[i]=Double.parseDouble(parts[i]);
    break;
case FINITE_SET:
  FiniteStateSpace finiteStateSpace=atts.getList().get(i).getStateSpace();
data[i]=finiteStateSpace.getIndexOfState(parts[i]);
}
}
}","public DataRowWeka(Attributes atts,String line){
  data=new double[atts.getNumberOfAttributes()];
  String[] parts=line.split(""String_Node_Str"");
  if (parts.length != atts.getNumberOfAttributes())   throw new IllegalStateException(""String_Node_Str"");
  for (int i=0; i < parts.length; i++) {
switch (atts.getList().get(i).getStateSpace().getStateSpaceType()) {
case REAL:
      data[i]=Double.parseDouble(parts[i]);
    break;
case FINITE_SET:
  FiniteStateSpace finiteStateSpace=atts.getList().get(i).getStateSpace();
data[i]=finiteStateSpace.getIndexOfState(parts[i]);
}
}
}",0.898854961832061
21690,"@Override public Stream<DataRow> stream(){
  Stream<String> streamString=null;
  try {
    streamString=Files.lines(pathFile);
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
  return streamString.skip(this.dataLineCount).map(line -> new DataRowWeka(this.attributes,line));
}","@Override public Stream<DataRow> stream(){
  Stream<String> streamString=null;
  try {
    streamString=Files.lines(pathFile);
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
  return streamString.filter(w -> !w.isEmpty()).skip(this.dataLineCount).filter(w -> !w.isEmpty()).map(line -> new DataRowWeka(this.attributes,line));
}",0.8966565349544073
21691,"private static Attribute createAttributeFromLine(int index,String line){
  String[] parts=line.split(""String_Node_Str"");
  if (!parts[0].trim().startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  String name=parts[1].trim();
  parts[2]=parts[2].trim();
  if (parts[2].equals(""String_Node_Str"")) {
    return new Attribute(index,name,new RealStateSpace());
  }
 else   if (parts[2].startsWith(""String_Node_Str"")) {
    String[] states=parts[2].substring(1,parts[2].length() - 1).split(""String_Node_Str"");
    List<String> statesNames=Arrays.stream(states).map(String::trim).collect(Collectors.toList());
    return new Attribute(index,name,new FiniteStateSpace(statesNames));
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + line);
  }
}","private static Attribute createAttributeFromLine(int index,String line){
  String[] parts=line.split(""String_Node_Str"");
  if (!parts[0].trim().startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  String name=parts[1].trim();
  parts[2]=line.substring(parts[0].length() + parts[1].length() + 2);
  parts[2]=parts[2].trim();
  if (parts[2].equals(""String_Node_Str"")) {
    return new Attribute(index,name,new RealStateSpace());
  }
 else   if (parts[2].startsWith(""String_Node_Str"")) {
    String[] states=parts[2].substring(1,parts[2].length() - 1).split(""String_Node_Str"");
    List<String> statesNames=Arrays.stream(states).map(String::trim).collect(Collectors.toList());
    return new Attribute(index,name,new FiniteStateSpace(statesNames));
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + line);
  }
}",0.958133971291866
21692,"public ARFFDataReader(String pathString){
  pathFile=Paths.get(pathString);
  try {
    Optional<String> atRelation=Files.lines(pathFile).map(String::trim).limit(0).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atRelation.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    relationName=atRelation.get().split(""String_Node_Str"")[1];
    final int[] count={0};
    Optional<String> atData=Files.lines(pathFile).map(String::trim).peek(line -> count[0]++).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atData.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    dataLineCount=count[0] + 1;
    List<String> attLines=Files.lines(pathFile).map(String::trim).limit(count[0]).filter(line -> line.startsWith(""String_Node_Str"")).collect(Collectors.toList());
    List<Attribute> atts=IntStream.range(0,attLines.size()).mapToObj(i -> createAttributeFromLine(i,attLines.get(i))).collect(Collectors.toList());
    this.attributes=new Attributes(atts);
    stateSpace=new StateSpaceType[atts.size()];
    for (    Attribute att : atts) {
      stateSpace[att.getIndex()]=att.getStateSpace().getStateSpaceType();
    }
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
}","public ARFFDataReader(String pathString){
  pathFile=Paths.get(pathString);
  try {
    Optional<String> atRelation=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).limit(1).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atRelation.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    relationName=atRelation.get().split(""String_Node_Str"")[1];
    final int[] count={0};
    Optional<String> atData=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).peek(line -> count[0]++).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atData.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    dataLineCount=count[0];
    List<String> attLines=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).limit(dataLineCount).filter(line -> line.startsWith(""String_Node_Str"")).collect(Collectors.toList());
    List<Attribute> atts=IntStream.range(0,attLines.size()).mapToObj(i -> createAttributeFromLine(i,attLines.get(i))).collect(Collectors.toList());
    this.attributes=new Attributes(atts);
    stateSpace=new StateSpaceType[atts.size()];
    for (    Attribute att : atts) {
      stateSpace[att.getIndex()]=att.getStateSpace().getStateSpaceType();
    }
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
}",0.9542533081285444
21693,"public DataRowWeka(Attributes atts,String line){
  data=new double[atts.getNumberOfAttributes()];
  String[] parts=line.split(""String_Node_Str"");
  for (int i=0; i < parts.length; i++) {
switch (atts.getList().get(i).getStateSpace().getStateSpaceType()) {
case REAL:
      data[i]=Double.parseDouble(parts[i]);
    break;
case FINITE_SET:
  FiniteStateSpace finiteStateSpace=atts.getList().get(i).getStateSpace();
data[i]=finiteStateSpace.getIndexOfState(parts[i]);
}
}
}","public DataRowWeka(Attributes atts,String line){
  data=new double[atts.getNumberOfAttributes()];
  String[] parts=line.split(""String_Node_Str"");
  if (parts.length != atts.getNumberOfAttributes())   throw new IllegalStateException(""String_Node_Str"");
  for (int i=0; i < parts.length; i++) {
switch (atts.getList().get(i).getStateSpace().getStateSpaceType()) {
case REAL:
      data[i]=Double.parseDouble(parts[i]);
    break;
case FINITE_SET:
  FiniteStateSpace finiteStateSpace=atts.getList().get(i).getStateSpace();
data[i]=finiteStateSpace.getIndexOfState(parts[i]);
}
}
}",0.898854961832061
21694,"@Override public Stream<DataRow> stream(){
  Stream<String> streamString=null;
  try {
    streamString=Files.lines(pathFile);
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
  return streamString.skip(this.dataLineCount).map(line -> new DataRowWeka(this.attributes,line));
}","@Override public Stream<DataRow> stream(){
  Stream<String> streamString=null;
  try {
    streamString=Files.lines(pathFile);
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
  return streamString.filter(w -> !w.isEmpty()).skip(this.dataLineCount).filter(w -> !w.isEmpty()).map(line -> new DataRowWeka(this.attributes,line));
}",0.8966565349544073
21695,"private static Attribute createAttributeFromLine(int index,String line){
  String[] parts=line.split(""String_Node_Str"");
  if (!parts[0].trim().startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  String name=parts[1].trim();
  parts[2]=parts[2].trim();
  if (parts[2].equals(""String_Node_Str"")) {
    return new Attribute(index,name,new RealStateSpace());
  }
 else   if (parts[2].startsWith(""String_Node_Str"")) {
    String[] states=parts[2].substring(1,parts[2].length() - 1).split(""String_Node_Str"");
    List<String> statesNames=Arrays.stream(states).map(String::trim).collect(Collectors.toList());
    return new Attribute(index,name,new FiniteStateSpace(statesNames));
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + line);
  }
}","private static Attribute createAttributeFromLine(int index,String line){
  String[] parts=line.split(""String_Node_Str"");
  if (!parts[0].trim().startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  String name=parts[1].trim();
  parts[2]=line.substring(parts[0].length() + parts[1].length() + 2);
  parts[2]=parts[2].trim();
  if (parts[2].equals(""String_Node_Str"")) {
    return new Attribute(index,name,new RealStateSpace());
  }
 else   if (parts[2].startsWith(""String_Node_Str"")) {
    String[] states=parts[2].substring(1,parts[2].length() - 1).split(""String_Node_Str"");
    List<String> statesNames=Arrays.stream(states).map(String::trim).collect(Collectors.toList());
    return new Attribute(index,name,new FiniteStateSpace(statesNames));
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + line);
  }
}",0.958133971291866
21696,"public ARFFDataReader(String pathString){
  pathFile=Paths.get(pathString);
  try {
    Optional<String> atRelation=Files.lines(pathFile).map(String::trim).limit(0).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atRelation.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    relationName=atRelation.get().split(""String_Node_Str"")[1];
    final int[] count={0};
    Optional<String> atData=Files.lines(pathFile).map(String::trim).peek(line -> count[0]++).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atData.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    dataLineCount=count[0] + 1;
    List<String> attLines=Files.lines(pathFile).map(String::trim).limit(count[0]).filter(line -> line.startsWith(""String_Node_Str"")).collect(Collectors.toList());
    List<Attribute> atts=IntStream.range(0,attLines.size()).mapToObj(i -> createAttributeFromLine(i,attLines.get(i))).collect(Collectors.toList());
    this.attributes=new Attributes(atts);
    stateSpace=new StateSpaceType[atts.size()];
    for (    Attribute att : atts) {
      stateSpace[att.getIndex()]=att.getStateSpace().getStateSpaceType();
    }
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
}","public ARFFDataReader(String pathString){
  pathFile=Paths.get(pathString);
  try {
    Optional<String> atRelation=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).limit(1).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atRelation.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    relationName=atRelation.get().split(""String_Node_Str"")[1];
    final int[] count={0};
    Optional<String> atData=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).peek(line -> count[0]++).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atData.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    dataLineCount=count[0];
    List<String> attLines=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).limit(dataLineCount).filter(line -> line.startsWith(""String_Node_Str"")).collect(Collectors.toList());
    List<Attribute> atts=IntStream.range(0,attLines.size()).mapToObj(i -> createAttributeFromLine(i,attLines.get(i))).collect(Collectors.toList());
    this.attributes=new Attributes(atts);
    stateSpace=new StateSpaceType[atts.size()];
    for (    Attribute att : atts) {
      stateSpace[att.getIndex()]=att.getStateSpace().getStateSpaceType();
    }
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
}",0.9542533081285444
21697,"public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples)     dataOnMemoryList.add(count,instance);
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}","public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}",0.9905482041587902
21698,"public FiniteStateSpace(List<String> statesNames1){
  super(StateSpaceType.FINITE_SET);
  this.numberOfStates=statesNames1.size();
  this.statesNames=new ArrayList<>();
  this.mapStatesNames=new HashMap<>();
  for (int i=0; i < statesNames.size(); i++) {
    this.statesNames.add(statesNames.get(i));
    this.mapStatesNames.put(statesNames.get(i),i);
  }
}","public FiniteStateSpace(List<String> statesNames1){
  super(StateSpaceType.FINITE_SET);
  this.numberOfStates=statesNames1.size();
  this.statesNames=new ArrayList<>();
  this.mapStatesNames=new HashMap<>();
  for (int i=0; i < statesNames1.size(); i++) {
    this.statesNames.add(statesNames1.get(i));
    this.mapStatesNames.put(statesNames1.get(i),i);
  }
}",0.99581589958159
21699,"public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples)     dataOnMemoryList.add(count,instance);
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}","public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}",0.9905482041587902
21700,"public FiniteStateSpace(List<String> statesNames1){
  super(StateSpaceType.FINITE_SET);
  this.numberOfStates=statesNames1.size();
  this.statesNames=new ArrayList<>();
  this.mapStatesNames=new HashMap<>();
  for (int i=0; i < statesNames.size(); i++) {
    this.statesNames.add(statesNames.get(i));
    this.mapStatesNames.put(statesNames.get(i),i);
  }
}","public FiniteStateSpace(List<String> statesNames1){
  super(StateSpaceType.FINITE_SET);
  this.numberOfStates=statesNames1.size();
  this.statesNames=new ArrayList<>();
  this.mapStatesNames=new HashMap<>();
  for (int i=0; i < statesNames1.size(); i++) {
    this.statesNames.add(statesNames1.get(i));
    this.mapStatesNames.put(statesNames1.get(i),i);
  }
}",0.99581589958159
21701,"public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples)     dataOnMemoryList.add(count,instance);
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}","public static DataOnMemory samplingNumberOfSamples(int numberOfSamples,DataBase dataBase){
  Random random=new Random(0);
  DataOnMemoryListContainer dataOnMemoryList=new DataOnMemoryListContainer(dataBase.getAttributes());
  int count=0;
  for (  DataInstance instance : dataBase) {
    if (count < numberOfSamples) {
      dataOnMemoryList.add(count,instance);
    }
 else {
      int r=random.nextInt(count);
      if (r < numberOfSamples)       dataOnMemoryList.add(r,instance);
    }
    count++;
  }
  return dataOnMemoryList;
}",0.9905482041587902
21702,"public FiniteStateSpace(List<String> statesNames1){
  super(StateSpaceType.FINITE_SET);
  this.numberOfStates=statesNames1.size();
  this.statesNames=new ArrayList<>();
  this.mapStatesNames=new HashMap<>();
  for (int i=0; i < statesNames.size(); i++) {
    this.statesNames.add(statesNames.get(i));
    this.mapStatesNames.put(statesNames.get(i),i);
  }
}","public FiniteStateSpace(List<String> statesNames1){
  super(StateSpaceType.FINITE_SET);
  this.numberOfStates=statesNames1.size();
  this.statesNames=new ArrayList<>();
  this.mapStatesNames=new HashMap<>();
  for (int i=0; i < statesNames1.size(); i++) {
    this.statesNames.add(statesNames1.get(i));
    this.mapStatesNames.put(statesNames1.get(i),i);
  }
}",0.99581589958159
21703,"public DataRowWeka(Attributes atts,String line){
  data=new double[atts.getNumberOfAttributes()];
  String[] parts=line.split(""String_Node_Str"");
  for (int i=0; i < parts.length; i++) {
switch (atts.getList().get(i).getStateSpace().getStateSpaceType()) {
case REAL:
      data[i]=Double.parseDouble(parts[i]);
    break;
case FINITE_SET:
  FiniteStateSpace finiteStateSpace=atts.getList().get(i).getStateSpace();
data[i]=finiteStateSpace.getIndexOfState(parts[i]);
}
}
}","public DataRowWeka(Attributes atts,String line){
  data=new double[atts.getNumberOfAttributes()];
  String[] parts=line.split(""String_Node_Str"");
  if (parts.length != atts.getNumberOfAttributes())   throw new IllegalStateException(""String_Node_Str"");
  for (int i=0; i < parts.length; i++) {
switch (atts.getList().get(i).getStateSpace().getStateSpaceType()) {
case REAL:
      data[i]=Double.parseDouble(parts[i]);
    break;
case FINITE_SET:
  FiniteStateSpace finiteStateSpace=atts.getList().get(i).getStateSpace();
data[i]=finiteStateSpace.getIndexOfState(parts[i]);
}
}
}",0.898854961832061
21704,"@Override public Stream<DataRow> stream(){
  Stream<String> streamString=null;
  try {
    streamString=Files.lines(pathFile);
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
  return streamString.skip(this.dataLineCount).map(line -> new DataRowWeka(this.attributes,line));
}","@Override public Stream<DataRow> stream(){
  Stream<String> streamString=null;
  try {
    streamString=Files.lines(pathFile);
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
  return streamString.filter(w -> !w.isEmpty()).skip(this.dataLineCount).filter(w -> !w.isEmpty()).map(line -> new DataRowWeka(this.attributes,line));
}",0.8966565349544073
21705,"private static Attribute createAttributeFromLine(int index,String line){
  String[] parts=line.split(""String_Node_Str"");
  if (!parts[0].trim().startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  String name=parts[1].trim();
  parts[2]=parts[2].trim();
  if (parts[2].equals(""String_Node_Str"")) {
    return new Attribute(index,name,new RealStateSpace());
  }
 else   if (parts[2].startsWith(""String_Node_Str"")) {
    String[] states=parts[2].substring(1,parts[2].length() - 1).split(""String_Node_Str"");
    List<String> statesNames=Arrays.stream(states).map(String::trim).collect(Collectors.toList());
    return new Attribute(index,name,new FiniteStateSpace(statesNames));
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + line);
  }
}","private static Attribute createAttributeFromLine(int index,String line){
  String[] parts=line.split(""String_Node_Str"");
  if (!parts[0].trim().startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  String name=parts[1].trim();
  parts[2]=line.substring(parts[0].length() + parts[1].length() + 2);
  parts[2]=parts[2].trim();
  if (parts[2].equals(""String_Node_Str"")) {
    return new Attribute(index,name,new RealStateSpace());
  }
 else   if (parts[2].startsWith(""String_Node_Str"")) {
    String[] states=parts[2].substring(1,parts[2].length() - 1).split(""String_Node_Str"");
    List<String> statesNames=Arrays.stream(states).map(String::trim).collect(Collectors.toList());
    return new Attribute(index,name,new FiniteStateSpace(statesNames));
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + line);
  }
}",0.958133971291866
21706,"public ARFFDataReader(String pathString){
  pathFile=Paths.get(pathString);
  try {
    Optional<String> atRelation=Files.lines(pathFile).map(String::trim).limit(0).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atRelation.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    relationName=atRelation.get().split(""String_Node_Str"")[1];
    final int[] count={0};
    Optional<String> atData=Files.lines(pathFile).map(String::trim).peek(line -> count[0]++).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atData.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    dataLineCount=count[0] + 1;
    List<String> attLines=Files.lines(pathFile).map(String::trim).limit(count[0]).filter(line -> line.startsWith(""String_Node_Str"")).collect(Collectors.toList());
    List<Attribute> atts=IntStream.range(0,attLines.size()).mapToObj(i -> createAttributeFromLine(i,attLines.get(i))).collect(Collectors.toList());
    this.attributes=new Attributes(atts);
    stateSpace=new StateSpaceType[atts.size()];
    for (    Attribute att : atts) {
      stateSpace[att.getIndex()]=att.getStateSpace().getStateSpaceType();
    }
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
}","public ARFFDataReader(String pathString){
  pathFile=Paths.get(pathString);
  try {
    Optional<String> atRelation=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).limit(1).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atRelation.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    relationName=atRelation.get().split(""String_Node_Str"")[1];
    final int[] count={0};
    Optional<String> atData=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).peek(line -> count[0]++).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atData.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    dataLineCount=count[0];
    List<String> attLines=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).limit(dataLineCount).filter(line -> line.startsWith(""String_Node_Str"")).collect(Collectors.toList());
    List<Attribute> atts=IntStream.range(0,attLines.size()).mapToObj(i -> createAttributeFromLine(i,attLines.get(i))).collect(Collectors.toList());
    this.attributes=new Attributes(atts);
    stateSpace=new StateSpaceType[atts.size()];
    for (    Attribute att : atts) {
      stateSpace[att.getIndex()]=att.getStateSpace().getStateSpaceType();
    }
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
}",0.9542533081285444
21707,"public DataRowWeka(Attributes atts,String line){
  data=new double[atts.getNumberOfAttributes()];
  String[] parts=line.split(""String_Node_Str"");
  for (int i=0; i < parts.length; i++) {
switch (atts.getList().get(i).getStateSpace().getStateSpaceType()) {
case REAL:
      data[i]=Double.parseDouble(parts[i]);
    break;
case FINITE_SET:
  FiniteStateSpace finiteStateSpace=atts.getList().get(i).getStateSpace();
data[i]=finiteStateSpace.getIndexOfState(parts[i]);
}
}
}","public DataRowWeka(Attributes atts,String line){
  data=new double[atts.getNumberOfAttributes()];
  String[] parts=line.split(""String_Node_Str"");
  if (parts.length != atts.getNumberOfAttributes())   throw new IllegalStateException(""String_Node_Str"");
  for (int i=0; i < parts.length; i++) {
switch (atts.getList().get(i).getStateSpace().getStateSpaceType()) {
case REAL:
      data[i]=Double.parseDouble(parts[i]);
    break;
case FINITE_SET:
  FiniteStateSpace finiteStateSpace=atts.getList().get(i).getStateSpace();
data[i]=finiteStateSpace.getIndexOfState(parts[i]);
}
}
}",0.898854961832061
21708,"@Override public Stream<DataRow> stream(){
  Stream<String> streamString=null;
  try {
    streamString=Files.lines(pathFile);
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
  return streamString.skip(this.dataLineCount).map(line -> new DataRowWeka(this.attributes,line));
}","@Override public Stream<DataRow> stream(){
  Stream<String> streamString=null;
  try {
    streamString=Files.lines(pathFile);
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
  return streamString.filter(w -> !w.isEmpty()).skip(this.dataLineCount).filter(w -> !w.isEmpty()).map(line -> new DataRowWeka(this.attributes,line));
}",0.8966565349544073
21709,"private static Attribute createAttributeFromLine(int index,String line){
  String[] parts=line.split(""String_Node_Str"");
  if (!parts[0].trim().startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  String name=parts[1].trim();
  parts[2]=parts[2].trim();
  if (parts[2].equals(""String_Node_Str"")) {
    return new Attribute(index,name,new RealStateSpace());
  }
 else   if (parts[2].startsWith(""String_Node_Str"")) {
    String[] states=parts[2].substring(1,parts[2].length() - 1).split(""String_Node_Str"");
    List<String> statesNames=Arrays.stream(states).map(String::trim).collect(Collectors.toList());
    return new Attribute(index,name,new FiniteStateSpace(statesNames));
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + line);
  }
}","private static Attribute createAttributeFromLine(int index,String line){
  String[] parts=line.split(""String_Node_Str"");
  if (!parts[0].trim().startsWith(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  String name=parts[1].trim();
  parts[2]=line.substring(parts[0].length() + parts[1].length() + 2);
  parts[2]=parts[2].trim();
  if (parts[2].equals(""String_Node_Str"")) {
    return new Attribute(index,name,new RealStateSpace());
  }
 else   if (parts[2].startsWith(""String_Node_Str"")) {
    String[] states=parts[2].substring(1,parts[2].length() - 1).split(""String_Node_Str"");
    List<String> statesNames=Arrays.stream(states).map(String::trim).collect(Collectors.toList());
    return new Attribute(index,name,new FiniteStateSpace(statesNames));
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"" + line);
  }
}",0.958133971291866
21710,"public ARFFDataReader(String pathString){
  pathFile=Paths.get(pathString);
  try {
    Optional<String> atRelation=Files.lines(pathFile).map(String::trim).limit(0).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atRelation.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    relationName=atRelation.get().split(""String_Node_Str"")[1];
    final int[] count={0};
    Optional<String> atData=Files.lines(pathFile).map(String::trim).peek(line -> count[0]++).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atData.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    dataLineCount=count[0] + 1;
    List<String> attLines=Files.lines(pathFile).map(String::trim).limit(count[0]).filter(line -> line.startsWith(""String_Node_Str"")).collect(Collectors.toList());
    List<Attribute> atts=IntStream.range(0,attLines.size()).mapToObj(i -> createAttributeFromLine(i,attLines.get(i))).collect(Collectors.toList());
    this.attributes=new Attributes(atts);
    stateSpace=new StateSpaceType[atts.size()];
    for (    Attribute att : atts) {
      stateSpace[att.getIndex()]=att.getStateSpace().getStateSpaceType();
    }
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
}","public ARFFDataReader(String pathString){
  pathFile=Paths.get(pathString);
  try {
    Optional<String> atRelation=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).limit(1).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atRelation.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    relationName=atRelation.get().split(""String_Node_Str"")[1];
    final int[] count={0};
    Optional<String> atData=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).peek(line -> count[0]++).filter(line -> line.startsWith(""String_Node_Str"")).findFirst();
    if (!atData.isPresent())     throw new IllegalArgumentException(""String_Node_Str"");
    dataLineCount=count[0];
    List<String> attLines=Files.lines(pathFile).map(String::trim).filter(w -> !w.isEmpty()).limit(dataLineCount).filter(line -> line.startsWith(""String_Node_Str"")).collect(Collectors.toList());
    List<Attribute> atts=IntStream.range(0,attLines.size()).mapToObj(i -> createAttributeFromLine(i,attLines.get(i))).collect(Collectors.toList());
    this.attributes=new Attributes(atts);
    stateSpace=new StateSpaceType[atts.size()];
    for (    Attribute att : atts) {
      stateSpace[att.getIndex()]=att.getStateSpace().getStateSpaceType();
    }
  }
 catch (  IOException ex) {
    throw new UncheckedIOException(ex);
  }
}",0.9542533081285444
21711,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.MULTINOMIAL,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < huginNodes.size(); i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      int indexParent;
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        indexParent=positionsMultinomialParents.get(j);
      }
 else {
        indexParent=huginNodes.indexOf(huginParent);
      }
      Variable amidstParent=amidstVariables.getVariableByName(huginChild.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
    System.out.print(amidstChild.getName() + ""String_Node_Str"");
    for (    Variable var : dag.getParentSet(amidstChild))     System.out.print(var.getName() + ""String_Node_Str"");
    System.out.println();
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.MULTINOMIAL,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < huginNodes.size(); i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
    System.out.print(amidstChild.getName() + ""String_Node_Str"");
    for (    Variable var : dag.getParentSet(amidstChild))     System.out.print(var.getName() + ""String_Node_Str"");
    System.out.println();
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.941813898704358
21712,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.MULTINOMIAL,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < huginNodes.size(); i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      int indexParent;
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        indexParent=positionsMultinomialParents.get(j);
      }
 else {
        indexParent=huginNodes.indexOf(huginParent);
      }
      Variable amidstParent=amidstVariables.getVariableByName(huginChild.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
    System.out.print(amidstChild.getName() + ""String_Node_Str"");
    for (    Variable var : dag.getParentSet(amidstChild))     System.out.print(var.getName() + ""String_Node_Str"");
    System.out.println();
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.MULTINOMIAL,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < huginNodes.size(); i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
    System.out.print(amidstChild.getName() + ""String_Node_Str"");
    for (    Variable var : dag.getParentSet(amidstChild))     System.out.print(var.getName() + ""String_Node_Str"");
    System.out.println();
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.941813898704358
21713,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.MULTINOMIAL,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < huginNodes.size(); i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      int indexParent;
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        indexParent=positionsMultinomialParents.get(j);
      }
 else {
        indexParent=huginNodes.indexOf(huginParent);
      }
      Variable amidstParent=amidstVariables.getVariableByName(huginChild.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
    System.out.print(amidstChild.getName() + ""String_Node_Str"");
    for (    Variable var : dag.getParentSet(amidstChild))     System.out.print(var.getName() + ""String_Node_Str"");
    System.out.println();
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.MULTINOMIAL,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < huginNodes.size(); i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
    System.out.print(amidstChild.getName() + ""String_Node_Str"");
    for (    Variable var : dag.getParentSet(amidstChild))     System.out.print(var.getName() + ""String_Node_Str"");
    System.out.println();
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.941813898704358
21714,"private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.MULTINOMIAL,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < huginNodes.size(); i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      int indexParent;
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        indexParent=positionsMultinomialParents.get(j);
      }
 else {
        indexParent=huginNodes.indexOf(huginParent);
      }
      Variable amidstParent=amidstVariables.getVariableByName(huginChild.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
    System.out.print(amidstChild.getName() + ""String_Node_Str"");
    for (    Variable var : dag.getParentSet(amidstChild))     System.out.print(var.getName() + ""String_Node_Str"");
    System.out.println();
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}","private void setNodesAndParents() throws ExceptionHugin {
  List<Attribute> atts=new ArrayList<>();
  NodeList huginNodes=this.huginBN.getNodes();
  int numNodes=huginNodes.size();
  for (int i=0; i < numNodes; i++) {
    Node n=(Node)huginNodes.get(i);
    if (n.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
      int numStates=(int)((DiscreteChanceNode)n).getNumberOfStates();
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.MULTINOMIAL,numStates));
    }
 else     if (n.getKind().compareTo(NetworkModel.H_KIND_CONTINUOUS) == 0) {
      atts.add(new Attribute(i,n.getName(),""String_Node_Str"",StateSpaceType.REAL,0));
    }
  }
  StaticVariables staticVariables=new StaticVariables(new Attributes(atts));
  DAG dag=new DAG(staticVariables);
  StaticVariables amidstVariables=staticVariables;
  for (int i=0; i < huginNodes.size(); i++) {
    Node huginChild=(Node)huginNodes.get(i);
    NodeList huginParents=huginChild.getParents();
    Variable amidstChild=amidstVariables.getVariableByName(huginChild.getName());
    List<Integer> positionsMultinomialParents=new ArrayList<>();
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      if (huginParent.getKind().compareTo(NetworkModel.H_KIND_DISCRETE) == 0) {
        int indexParent=huginNodes.indexOf(huginParent);
        positionsMultinomialParents.add(indexParent);
      }
    }
    Collections.reverse(positionsMultinomialParents);
    for (int j=0; j < huginParents.size(); j++) {
      Node huginParent=(Node)huginParents.get(j);
      Variable amidstParent=amidstVariables.getVariableByName(huginParent.getName());
      dag.getParentSet(amidstChild).addParent(amidstParent);
    }
    System.out.print(amidstChild.getName() + ""String_Node_Str"");
    for (    Variable var : dag.getParentSet(amidstChild))     System.out.print(var.getName() + ""String_Node_Str"");
    System.out.println();
  }
  this.amidstBN=BayesianNetwork.newBayesianNetwork(dag);
}",0.941813898704358
21715,public SequenceData nextSequenceData();,public DynamicDataInstance nextSequenceData();,0.7764705882352941
21716,public SequenceData nextSequenceData();,public DynamicDataInstance nextSequenceData();,0.7764705882352941
21717,public SequenceData getSequenceData(int indexInWindow);,public DynamicDataInstance getSequenceData(int indexInWindow);,0.8376068376068376
21718,public SequenceData nextSequenceData();,public DynamicDataInstance nextSequenceData();,0.7764705882352941
21719,public SequenceData nextSequenceData();,public DynamicDataInstance nextSequenceData();,0.7764705882352941
21720,public SequenceData getSequenceData(int indexInWindow);,public DynamicDataInstance getSequenceData(int indexInWindow);,0.8376068376068376
21721,public SequenceData nextSequenceData();,public DynamicDataInstance nextSequenceData();,0.7764705882352941
21722,public SequenceData nextSequenceData();,public DynamicDataInstance nextSequenceData();,0.7764705882352941
21723,public SequenceData getSequenceData(int indexInWindow);,public DynamicDataInstance getSequenceData(int indexInWindow);,0.8376068376068376
21724,public SequenceData nextSequenceData();,public DynamicDataInstance nextSequenceData();,0.7764705882352941
21725,public SequenceData nextSequenceData();,public DynamicDataInstance nextSequenceData();,0.7764705882352941
21726,public SequenceData getSequenceData(int indexInWindow);,public DynamicDataInstance getSequenceData(int indexInWindow);,0.8376068376068376
21727,"/** 
 * Tries to auto associate hosts to host groups.
 * @return prints the auto assignments
 */
@CliCommand(value=""String_Node_Str"",help=""String_Node_Str"") public String autoAssign(){
  hostGroups=client.recommendAssignments(context.getFocusValue());
  return showAssignments();
}","/** 
 * Tries to auto associate hosts to host groups.
 * @return prints the auto assignments
 */
@CliCommand(value=""String_Node_Str"",help=""String_Node_Str"") public String autoAssign(){
  Map<String,List<String>> assignments=client.recommendAssignments(context.getFocusValue());
  if (!assignments.isEmpty()) {
    hostGroups=assignments;
  }
  return showAssignments();
}",0.8343558282208589
21728,"private CassandraUtils setUpSuite2(String nowValue){
  SchemaBuilder schemaBuilder=schema().mapper(""String_Node_Str"",bitemporalMapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").pattern(""String_Node_Str"").nowValue(nowValue));
  CassandraUtils cu=CassandraUtils.builder().withHost(TestingConstants.CASSANDRA_LOCALHOST_CONSTANT).withTable(TestingConstants.TABLE_NAME_CONSTANT).withIndexColumn(TestingConstants.INDEX_COLUMN_CONSTANT).withPartitionKey(""String_Node_Str"").withClusteringKey().withColumn(""String_Node_Str"",""String_Node_Str"").withColumn(""String_Node_Str"",""String_Node_Str"").withColumn(""String_Node_Str"",""String_Node_Str"").withColumn(""String_Node_Str"",""String_Node_Str"").withColumn(""String_Node_Str"",""String_Node_Str"").withColumn(""String_Node_Str"",""String_Node_Str"").build();
  cu.createKeyspace().createTable().createIndex(TestingConstants.INDEX_NAME_CONSTANT,schemaBuilder);
  return cu;
}","private CassandraUtils setUpSuite2(Object nowValue){
  SchemaBuilder schemaBuilder=schema().mapper(""String_Node_Str"",bitemporalMapper(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").pattern(""String_Node_Str"").nowValue(nowValue));
  CassandraUtils cu=CassandraUtils.builder().withHost(TestingConstants.CASSANDRA_LOCALHOST_CONSTANT).withTable(TestingConstants.TABLE_NAME_CONSTANT).withIndexColumn(TestingConstants.INDEX_COLUMN_CONSTANT).withPartitionKey(""String_Node_Str"").withClusteringKey().withColumn(""String_Node_Str"",""String_Node_Str"").withColumn(""String_Node_Str"",""String_Node_Str"").withColumn(""String_Node_Str"",""String_Node_Str"").withColumn(""String_Node_Str"",""String_Node_Str"").withColumn(""String_Node_Str"",""String_Node_Str"").withColumn(""String_Node_Str"",""String_Node_Str"").build();
  cu.createKeyspace().createTable().createIndex(TestingConstants.INDEX_NAME_CONSTANT,schemaBuilder);
  return cu;
}",0.9935344827586208
21729,"@Test public void biTemporalQueryIsWithInNowValueToLongTest(){
  String nowValue=""String_Node_Str"";
  CassandraUtils cu=this.setUpSuite2(nowValue);
  cu.insert(data1).insert(data2).insert(data3).insert(data4).insert(data5);
  CassandraUtilsSelect select=cu.query(biTemporalSearch(""String_Node_Str"").operation(""String_Node_Str"").vtFrom(""String_Node_Str"").vtTo(""String_Node_Str"").ttFrom(""String_Node_Str"").ttTo(""String_Node_Str""));
  assertEquals(""String_Node_Str"",1,select.count());
  assertTrue(""String_Node_Str"" + fromInteger(select.intColumn(""String_Node_Str"")),isThisAndOnlyThis(select.intColumn(""String_Node_Str""),new int[]{3}));
  tearDown(cu);
}","@Test public void biTemporalQueryIsWithInNowValueToLongTest(){
  Long nowValue=1456876800000l;
  CassandraUtils cu=this.setUpSuite2(nowValue);
  cu.insert(data1).insert(data2).insert(data3).insert(data4).insert(data5);
  CassandraUtilsSelect select=cu.query(biTemporalSearch(""String_Node_Str"").operation(""String_Node_Str"").vtFrom(""String_Node_Str"").vtTo(""String_Node_Str"").ttFrom(""String_Node_Str"").ttTo(""String_Node_Str""));
  assertEquals(""String_Node_Str"",1,select.count());
  assertTrue(""String_Node_Str"" + fromInteger(select.intColumn(""String_Node_Str"")),isThisAndOnlyThis(select.intColumn(""String_Node_Str""),new int[]{3}));
  tearDown(cu);
}",0.9714726291441788
21730,"@Test(expected=WriteTimeoutException.class) public void biTemporalQueryIsWithInNowValueToLongTest2(){
  String nowValue=""String_Node_Str"";
  CassandraUtils cu=this.setUpSuite2(nowValue);
  cu.insert(data6);
}","@Test(expected=WriteTimeoutException.class) public void biTemporalQueryIsWithInNowValueToLongTest2(){
  Long nowValue=1456876800000l;
  CassandraUtils cu=this.setUpSuite2(nowValue);
  cu.insert(data6);
}",0.9099756690997568
21731,"@Test(expected=InvalidQueryException.class) public void biTemporalQueryIsWithInNowValueToLongTest3(){
  String nowValue=""String_Node_Str"";
  CassandraUtils cu=this.setUpSuite2(nowValue);
  cu.insert(data1);
  cu.insert(data2);
  cu.insert(data3);
  cu.insert(data4);
  cu.insert(data5);
  cu.query(biTemporalSearch(""String_Node_Str"").operation(""String_Node_Str"").vtFrom(""String_Node_Str"").vtTo(""String_Node_Str"").ttFrom(""String_Node_Str"").ttTo(""String_Node_Str"")).count();
  tearDown(cu);
}","@Test(expected=InvalidQueryException.class) public void biTemporalQueryIsWithInNowValueToLongTest3(){
  Long nowValue=1456876800000l;
  CassandraUtils cu=this.setUpSuite2(nowValue);
  cu.insert(data1);
  cu.insert(data2);
  cu.insert(data3);
  cu.insert(data4);
  cu.insert(data5);
  cu.query(biTemporalSearch(""String_Node_Str"").operation(""String_Node_Str"").vtFrom(""String_Node_Str"").vtTo(""String_Node_Str"").ttFrom(""String_Node_Str"").ttTo(""String_Node_Str"")).count();
  tearDown(cu);
}",0.962051282051282
21732,"@Test public void fuzzyMapFieldTest2(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",4,rows.size());
}","@Test public void fuzzyMapFieldTest2(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}",0.9959514170040484
21733,"@Test public void fuzzyMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",4,rows.size());
}","@Test public void fuzzyMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}",0.9959514170040484
21734,"@Test public void fuzzyMapFieldTest4(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",4,rows.size());
}","@Test public void fuzzyMapFieldTest4(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}",0.9959514170040484
21735,"@Test public void wildcardMapFieldTest4(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",4,rows.size());
}","@Test public void wildcardMapFieldTest4(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}",0.996
21736,"@Test public void wildcardMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",4,rows.size());
}","@Test public void wildcardMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",0,rows.size());
}",0.996
21737,"@Test public void fuzzyListFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",4,rows.size());
}","@Test public void fuzzyListFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getFuzzyQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}",0.995967741935484
21738,"@Test public void matchMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getMatchQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}","@Test public void matchMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getMatchQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",0,rows.size());
}",0.9959514170040484
21739,"@Test public void prefixMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getPrefixQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}","@Test public void prefixMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getPrefixQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",0,rows.size());
}",0.9959839357429718
21740,"@Test public void phraseMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getPhraseQuery(""String_Node_Str"",Arrays.asList(""String_Node_Str""),null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}","@Test public void phraseMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getPhraseQuery(""String_Node_Str"",Arrays.asList(""String_Node_Str""),null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",0,rows.size());
}",0.9962121212121212
21741,"@Test public void regexpMapFieldTest4(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getMatchQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",4,rows.size());
}","@Test public void regexpMapFieldTest4(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getMatchQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}",0.995967741935484
21742,"@Test public void regexpMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getMatchQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",4,rows.size());
}","@Test public void regexpMapFieldTest3(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getMatchQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}",0.995967741935484
21743,"@Test public void prefixMapFieldTest1(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getPrefixQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",0,rows.size());
}","@Test public void prefixMapFieldTest1(){
  ResultSet queryResult=cassandraUtils.executeQuery(queryUtils.getPrefixQuery(""String_Node_Str"",""String_Node_Str"",null));
  List<Row> rows=queryResult.all();
  assertEquals(""String_Node_Str"",2,rows.size());
}",0.9959839357429718
21744,"@Override protected void loadMetadata(){
}","@Override protected void loadMetadata(){
  setUuid(UUID.randomUUID());
}",0.7368421052631579
21745,"public File getLocation(){
  return location;
}","/** 
 * Returns the location where this persistence store is saved.
 * @return the file where this persistence store is saved
 */
public URL getLocation(){
  return location;
}",0.3856502242152466
21746,protected abstract void loadMetadata();,"/** 
 * Called when the PersistentStore is first loaded in order to load the store's metadata (e.g. store UUID, type, etc.). A store's metadata must at minimum contain the store's UUID, which can be set by calling   {@link #setUuid(UUID)}.
 */
protected abstract void loadMetadata();",0.2422360248447205
21747,"PersistentStore(File location){
  this.location=location;
}","PersistentStore(File location){
  URL url;
  try {
    url=location.toURI().toURL();
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e);
  }
  this.location=url;
}",0.4227642276422764
21748,"protected void setUuid(UUID uuid){
  metadata.put(UUID_KEY,uuid);
}","/** 
 * Sets the store's unique identifier. This is used by the Store itself when loading its metadata. Once it's set, it must not change throughout the lifetime of the Store.
 * @param uuid  the UUID to use.
 */
protected void setUuid(UUID uuid){
  metadata.put(UUID_KEY,uuid);
}",0.3861671469740634
21749,abstract List<ObjectID> getPermanentIDsForObjects(List<ManagedObject> objects);,"/** 
 * Returns the corresponding ObjectIDs for the specified ManagedObjects. These ObjectIDs must be permanent and must not be changed after this call. Objects that already have a permanent ObjectID must return the same one.
 * @param objects   the list of objects that shall get permanent IDs.
 * @return
 */
abstract List<ObjectID> getPermanentIDsForObjects(List<ManagedObject> objects);",0.3368869936034115
21750,"public PersistentStoreCoordinator getCoordinator(){
  return storeCoordinator;
}","/** 
 * Returns the persistent store coordinator that owns this persistent store.
 * @return the persistent store coordinator that owns this persistent store
 */
public PersistentStoreCoordinator getCoordinator(){
  return storeCoordinator;
}",0.4968944099378882
21751,"void setPersistentStoreCoordinator(PersistentStoreCoordinator coordinator){
  storeCoordinator=coordinator;
}","/** 
 * Sets the associated persistence store coordinator.
 * @param coordinator the persistence store coordinator to use
 */
void setPersistentStoreCoordinator(PersistentStoreCoordinator coordinator){
  storeCoordinator=coordinator;
}",0.6337209302325582
21752,"ObjectID createObjectID(Entity<?> entity,Object referenceObject){
  ObjectID id=new ObjectID(this,entity,referenceObject);
  return id;
}","/** 
 * Creates a new   {@link ObjectID}.
 * @param entity            the entity associated with the ObjectID
 * @param referenceObject   the reference object that uniquely identifies the object. This object must implement{@link Object#hashCode()} and {@link Object#equals(Object)} appropriately, such thatfor two different instances that represent the same reference object, {@code Object#hashCode()} must return the same value and{@code Object#equals(Object)} must return true.
 * @return
 */
ObjectID createObjectID(Entity<?> entity,Object referenceObject){
  ObjectID id=new ObjectID(this,entity,referenceObject);
  return id;
}",0.3563068920676203
21753,"public UUID getUuid(){
  return (UUID)metadata.get(UUID_KEY);
}","/** 
 * Returns the store's unique identifier. This is persisted with the store, so it's useful to identify specific store instances. Note that nothing prevents a user from copying a persistence store (and thus it's associated UUID). Therefore, you may technically encounter two stores with the same UUID if one manually made a copy of the store. Store UUIDs are used to identify   {@link ManagedObject}
 * @return the store's UUID
 */
public UUID getUuid(){
  return (UUID)metadata.get(UUID_KEY);
}",0.2241992882562277
21754,"protected Object getReferenceObjectForObjectID(ObjectID objectID){
  return objectID.getReferenceObject();
}","/** 
 * Returns the associated reference object for the specified ObjectID.
 * @param objectID  the ObjectID to get its reference object
 * @return          the reference object associated with the specified ObjectID
 */
protected Object getReferenceObjectForObjectID(ObjectID objectID){
  return objectID.getReferenceObject();
}",0.494279176201373
21755,"@Override protected void loadMetadata(){
  ObjectModel model=getCoordinator().getModel();
  databaseHelper=new DatabaseHelper(context,getLocation(),model);
  db=databaseHelper.getWritableDatabase();
  setUuid(DatabaseHelper.getDatabaseUuid(db,model.getVersion()));
}","@Override protected void loadMetadata(){
  ObjectModel model=getCoordinator().getModel();
  databaseHelper=new DatabaseHelper(context,new File(getLocation().getPath()),model);
  db=databaseHelper.getWritableDatabase();
  setUuid(DatabaseHelper.getDatabaseUuid(db,model.getVersion()));
}",0.9637681159420288
21756,"public AndroidSqlPersistentStore(Context context,File path){
  super(path);
  this.context=context;
}","public AndroidSqlPersistentStore(Context context,File location){
  super(location);
  this.context=context;
}",0.923809523809524
21757,"@Override public File call() throws Exception {
  int frames=0;
  File outputFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  EncoderInterface encoder=JnaLibraryLoader.getEncoder();
  log.info(""String_Node_Str"" + targetFramerate + ""String_Node_Str""+ screenshotSource.getWidth()+ ""String_Node_Str""+ screenshotSource.getHeight());
  Pointer context=encoder.create_context(outputFile.getCanonicalPath());
  int result=encoder.init_encoder(context,screenshotSource.getWidth(),screenshotSource.getHeight(),targetFramerate);
  handleVPXError(result,""String_Node_Str"",context);
  result=encoder.init_codec(context);
  handleVPXError(result,""String_Node_Str"",context);
  result=encoder.init_image(context);
  if (result != 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + outputFile.getCanonicalPath());
  long excessTime=0;
  long videoStartTime=System.currentTimeMillis();
  while (!shouldStop) {
    int frameDuration=1 + (int)(excessTime / targetFramerateSleepTime);
    excessTime=excessTime % targetFramerateSleepTime;
    long start=System.currentTimeMillis();
    try {
      result=screenshotSource.applyScreenshot(context);
      if (result != 0) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      result=encoder.encode_next_frame(context,frameDuration);
      handleVPXError(result,""String_Node_Str"",context);
    }
 catch (    MissingFrameException e) {
      log.warning(""String_Node_Str"" + e.getMessage());
    }
    long finish=System.currentTimeMillis();
    frames++;
    long timeTaken=finish - start;
    if (timeTaken < targetFramerateSleepTime) {
      Thread.sleep(targetFramerateSleepTime - timeTaken);
    }
 else {
      excessTime+=timeTaken;
    }
  }
  result=encoder.encode_finish(context);
  handleVPXError(result,""String_Node_Str"",context);
  long videoEndTime=System.currentTimeMillis();
  long duration=((videoEndTime - videoStartTime) / 1000);
  if (duration != 0) {
    log.info(""String_Node_Str"" + frames + ""String_Node_Str""+ duration+ ""String_Node_Str""+ targetFramerate+ ""String_Node_Str""+ frames / duration);
  }
 else {
    log.warning(""String_Node_Str"");
  }
  return outputFile;
}","@Override public File call() throws Exception {
  int frames=0;
  File outputFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  EncoderInterface encoder=JnaLibraryLoader.getEncoder();
  log.info(""String_Node_Str"" + targetFramerate + ""String_Node_Str""+ screenshotSource.getWidth()+ ""String_Node_Str""+ screenshotSource.getHeight());
  Pointer context=encoder.create_context(outputFile.getCanonicalPath());
  int result=encoder.init_encoder(context,screenshotSource.getWidth(),screenshotSource.getHeight(),targetFramerate);
  handleVPXError(result,""String_Node_Str"",context);
  result=encoder.init_codec(context);
  handleVPXError(result,""String_Node_Str"",context);
  result=encoder.init_image(context);
  if (result != 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + outputFile.getCanonicalPath());
  long excessTime=0;
  long videoStartTime=System.currentTimeMillis();
  while (!shouldStop) {
    int frameDuration=1 + (int)(excessTime / targetFramerateSleepTime);
    excessTime=excessTime % targetFramerateSleepTime;
    long start=System.currentTimeMillis();
    try {
      result=screenshotSource.applyScreenshot(context);
      if (result != 0) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      result=encoder.encode_next_frame(context,frameDuration);
      handleVPXError(result,""String_Node_Str"",context);
    }
 catch (    MissingFrameException e) {
      log.warning(""String_Node_Str"" + e.getMessage());
    }
    long finish=System.currentTimeMillis();
    frames++;
    long timeTaken=finish - start;
    if (timeTaken < targetFramerateSleepTime) {
      Thread.sleep(targetFramerateSleepTime - timeTaken);
    }
 else {
      excessTime+=timeTaken;
    }
  }
  result=encoder.encode_finish(context);
  handleVPXError(result,""String_Node_Str"",context);
  long videoEndTime=System.currentTimeMillis();
  float duration=((videoEndTime - videoStartTime) / 1000f);
  if (duration > 0) {
    log.info(String.format(""String_Node_Str"",frames,duration,targetFramerate,frames / duration));
  }
 else {
    log.warning(""String_Node_Str"");
  }
  return outputFile;
}",0.9249138920780712
21758,"@Before public void setup(){
  Assume.assumeTrue(""String_Node_Str"",""String_Node_Str"".equals(Platform.ARCH == ""String_Node_Str"") || ""String_Node_Str"".equals(Platform.ARCH));
  JnaLibraryLoader.init();
}","@Before public void setup(){
  Assume.assumeTrue(""String_Node_Str"",""String_Node_Str"".equals(Platform.ARCH) || ""String_Node_Str"".equals(Platform.ARCH));
  JnaLibraryLoader.init();
}",0.9448818897637796
21759,"public static StoredVideoInfoContext getVideoInfoForSession(ExternalSessionKey key) throws Exception {
  return videoStore.getVideoInformation(key.toString());
}","public static StoredVideoInfoContext getVideoInfoForSession(ExternalSessionKey key) throws Exception {
  checkVideoIsDone(key);
  return videoStore.getVideoInformation(key.toString());
}",0.9279538904899136
21760,"public static StoredVideoDownloadContext getVideoForSession(ExternalSessionKey key) throws Exception {
  return videoStore.retrieveVideo(key.toString());
}","public static StoredVideoDownloadContext getVideoForSession(ExternalSessionKey key) throws Exception {
  checkVideoIsDone(key);
  return videoStore.retrieveVideo(key.toString());
}",0.9253731343283582
21761,"public static void copyVideoToHub(TestSession session,String pathKey,URL remoteHost){
  String serviceUrl=remoteHost + ""String_Node_Str"";
  SessionInfoBean infoBean=new SessionInfoBean(session);
  ExternalSessionKey key=session.getExternalKey();
  HttpHost remote=new HttpHost(remoteHost.getHost(),remoteHost.getPort());
  HttpClientFactory httpClientFactory=new HttpClientFactory();
  HttpClient client=httpClientFactory.getHttpClient();
  HttpGet r=new HttpGet(serviceUrl + ""String_Node_Str"" + pathKey);
  try {
    HttpResponse response=client.execute(remote,r);
    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
      log.warning(""String_Node_Str"" + EntityUtils.toString(response.getEntity()));
      return;
    }
    Header contentType=response.getFirstHeader(""String_Node_Str"");
    if (contentType != null && !""String_Node_Str"".equals(contentType.getValue())) {
      log.log(Level.SEVERE,""String_Node_Str"" + ""String_Node_Str"" + remoteHost);
    }
 else {
      videoStore.storeVideo(response.getEntity().getContent(),response.getEntity().getContentLength(),""String_Node_Str"",key.toString(),infoBean);
    }
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
 finally {
    r.releaseConnection();
  }
}","public static void copyVideoToHub(TestSession session,String pathKey,URL remoteHost){
  String serviceUrl=remoteHost + ""String_Node_Str"";
  SessionInfoBean infoBean=new SessionInfoBean(session);
  ExternalSessionKey key=session.getExternalKey();
  HttpHost remote=new HttpHost(remoteHost.getHost(),remoteHost.getPort());
  HttpClientFactory httpClientFactory=new HttpClientFactory();
  HttpClient client=httpClientFactory.getHttpClient();
  HttpGet r=new HttpGet(serviceUrl + ""String_Node_Str"" + pathKey);
  try {
    HttpResponse response=client.execute(remote,r);
    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
      log.warning(""String_Node_Str"" + EntityUtils.toString(response.getEntity()));
      return;
    }
    Header contentType=response.getFirstHeader(""String_Node_Str"");
    if (contentType != null && !""String_Node_Str"".equals(contentType.getValue())) {
      log.log(Level.SEVERE,""String_Node_Str"" + ""String_Node_Str"" + remoteHost);
    }
 else {
      videoStore.storeVideo(response.getEntity().getContent(),response.getEntity().getContentLength(),""String_Node_Str"",key.toString(),infoBean);
    }
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
 finally {
    r.releaseConnection();
    VideoFuture videoFuture=stoppingSessions.getIfPresent(key.getKey());
    if (videoFuture != null) {
      videoFuture.setDone();
    }
  }
}",0.9489533602644142
21762,"public VideoProxy(RegistrationRequest request,Registry registry){
  super(transformRegistration(request),registry);
  serviceUrl=getRemoteHost() + ""String_Node_Str"";
  remoteHost=new HttpHost(getRemoteHost().getHost(),getRemoteHost().getPort());
  HttpClientFactory httpClientFactory=new HttpClientFactory();
  client=httpClientFactory.getHttpClient();
}","public VideoProxy(RegistrationRequest request,Registry registry){
  super(transformRegistration(request),registry);
  serviceUrl=getRemoteHost() + ""String_Node_Str"";
  remoteHost=new HttpHost(getRemoteHost().getHost(),getRemoteHost().getPort());
  HttpClientFactory httpClientFactory=new HttpClientFactory();
  client=httpClientFactory.getHttpClient();
  HttpPost r=new HttpPost(serviceUrl + ""String_Node_Str"");
  try {
    HttpResponse response=client.execute(r);
    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
      String body=EntityUtils.toString(response.getEntity());
      log.log(Level.SEVERE,""String_Node_Str"" + this.getId() + ""String_Node_Str""+ response.getStatusLine().getStatusCode()+ ""String_Node_Str""+ body+ ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + this.getId() + ""String_Node_Str"",e);
  }
 finally {
    r.releaseConnection();
  }
}",0.5509727626459144
21763,"@Override public void doStartupSanityChecks(){
  ColorModel colorModel=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().getColorModel();
  int[] bitAllocations=colorModel.getComponentSize();
  int bitDepth=0;
  for (  int pixelBitSize : bitAllocations) {
    bitDepth+=pixelBitSize;
  }
  if (bitDepth != 32) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override public void doStartupSanityChecks(){
  ColorModel colorModel=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().getColorModel();
  int[] bitAllocations=colorModel.getComponentSize();
  int bitDepth=bitAllocations[0] + bitAllocations[1] + bitAllocations[2];
  if (bitDepth != 24) {
    throw new IllegalStateException(""String_Node_Str"" + bitAllocations[0] + ""String_Node_Str""+ bitAllocations[1]+ ""String_Node_Str""+ bitAllocations[2]);
  }
}",0.7475622968580715
21764,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String sessionId=req.getParameter(""String_Node_Str"");
  if (sessionId == null) {
    resp.setStatus(HttpStatus.SC_BAD_REQUEST);
    resp.getWriter().write(""String_Node_Str"");
    return;
  }
  if (!checkValidSessionId(sessionId,resp)) {
    return;
  }
  StoredVideoDownloadContext videoContext;
  try {
    videoContext=HubVideoRegistry.getVideoForSession(new ExternalSessionKey(sessionId));
  }
 catch (  Exception e) {
    log.log(Level.WARNING,""String_Node_Str"" + sessionId,e);
    resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);
    resp.getWriter().write(""String_Node_Str"");
    return;
  }
  if (!videoContext.isVideoFound()) {
    resp.setStatus(HttpStatus.SC_NOT_FOUND);
    resp.getWriter().write(""String_Node_Str"" + sessionId);
    return;
  }
  try {
    resp.setContentType(""String_Node_Str"");
    Long contentLength=videoContext.getContentLengthIfKnown();
    if (contentLength != null) {
      resp.setContentLength(contentLength.intValue());
    }
    new StreamPumper(videoContext.getStream(),resp.getOutputStream()).run();
    return;
  }
  finally {
    videoContext.close();
  }
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String sessionId=req.getParameter(""String_Node_Str"");
  if (sessionId == null) {
    resp.setStatus(HttpStatus.SC_BAD_REQUEST);
    resp.getWriter().write(""String_Node_Str"");
    return;
  }
  if (!checkValidSessionId(sessionId,resp)) {
    return;
  }
  StoredVideoDownloadContext videoContext;
  try {
    videoContext=HubVideoRegistry.getVideoForSession(new ExternalSessionKey(sessionId));
  }
 catch (  Exception e) {
    log.log(Level.WARNING,""String_Node_Str"" + sessionId,e);
    resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);
    resp.getWriter().write(""String_Node_Str"");
    return;
  }
  if (!videoContext.isVideoFound()) {
    resp.setStatus(HttpStatus.SC_NOT_FOUND);
    resp.getWriter().write(""String_Node_Str"" + sessionId);
    videoContext.close();
    return;
  }
  try {
    resp.setContentType(""String_Node_Str"");
    Long contentLength=videoContext.getContentLengthIfKnown();
    if (contentLength != null) {
      resp.setContentLength(contentLength.intValue());
    }
    new StreamPumper(videoContext.getStream(),resp.getOutputStream()).run();
    return;
  }
  finally {
    videoContext.close();
  }
}",0.9895076674737692
21765,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String sessionId=req.getParameter(""String_Node_Str"");
  if (sessionId == null) {
    resp.setStatus(HttpStatus.SC_BAD_REQUEST);
    resp.getWriter().write(""String_Node_Str"");
    return;
  }
  if (!checkValidSessionId(sessionId,resp)) {
    return;
  }
  StoredVideoInfoContext videoInfoForSession;
  try {
    videoInfoForSession=HubVideoRegistry.getVideoInfoForSession(new ExternalSessionKey(sessionId));
  }
 catch (  Exception e) {
    log.log(Level.WARNING,""String_Node_Str"" + sessionId,e);
    resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);
    resp.getWriter().write(""String_Node_Str"");
    return;
  }
  if (!videoInfoForSession.isVideoFound()) {
    resp.setStatus(HttpStatus.SC_NOT_FOUND);
    resp.getWriter().write(""String_Node_Str"" + sessionId);
    return;
  }
  HashMap<String,Object> responseMap=new HashMap<String,Object>();
  if (videoInfoForSession.getContentLengthIfKnown() != null) {
    responseMap.put(""String_Node_Str"",videoInfoForSession.getContentLengthIfKnown());
  }
  responseMap.put(""String_Node_Str"",HubVideoRegistry.getVideoStoreType());
  responseMap.put(""String_Node_Str"",videoInfoForSession.additionalInformation());
  String json;
  try {
    json=new JSONObject(responseMap).toString(4);
  }
 catch (  JSONException e) {
    resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);
    log.log(Level.WARNING,""String_Node_Str"",e);
    return;
  }
  resp.setStatus(HttpStatus.SC_OK);
  resp.getWriter().write(json);
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String sessionId=req.getParameter(""String_Node_Str"");
  if (sessionId == null) {
    resp.setStatus(HttpStatus.SC_BAD_REQUEST);
    resp.getWriter().write(""String_Node_Str"");
    return;
  }
  if (!checkValidSessionId(sessionId,resp)) {
    return;
  }
  StoredVideoInfoContext videoInfoForSession;
  try {
    videoInfoForSession=HubVideoRegistry.getVideoInfoForSession(new ExternalSessionKey(sessionId));
  }
 catch (  Exception e) {
    log.log(Level.WARNING,""String_Node_Str"" + sessionId,e);
    resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);
    resp.getWriter().write(""String_Node_Str"");
    return;
  }
  if (!videoInfoForSession.isVideoFound()) {
    resp.setStatus(HttpStatus.SC_NOT_FOUND);
    resp.getWriter().write(""String_Node_Str"" + sessionId);
    videoInfoForSession.close();
    return;
  }
  HashMap<String,Object> responseMap=new HashMap<String,Object>();
  if (videoInfoForSession.getContentLengthIfKnown() != null) {
    responseMap.put(""String_Node_Str"",videoInfoForSession.getContentLengthIfKnown());
  }
  responseMap.put(""String_Node_Str"",HubVideoRegistry.getVideoStoreType());
  responseMap.put(""String_Node_Str"",videoInfoForSession.additionalInformation());
  videoInfoForSession.close();
  String json;
  try {
    json=new JSONObject(responseMap).toString(4);
  }
 catch (  JSONException e) {
    resp.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);
    log.log(Level.WARNING,""String_Node_Str"",e);
    return;
  }
  resp.setStatus(HttpStatus.SC_OK);
  resp.getWriter().write(json);
}",0.9800871188550092
21766,"@Override public File call() throws Exception {
  int frames=0;
  Rectangle screenSize=getScreenSize();
  File outputFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  JnaLibraryLoader.init();
  EncoderInterface encoder=JnaLibraryLoader.getEncoder();
  Pointer context=encoder.create_context(outputFile.getCanonicalPath());
  int result=encoder.init_encoder(context,(int)screenSize.getWidth(),(int)screenSize.getHeight(),targetFramerate);
  encoder.init_codec(context);
  encoder.init_image(context);
  log.info(""String_Node_Str"" + outputFile.getCanonicalPath());
  Robot robot=new Robot();
  long excessTime=0;
  long videoStartTime=System.currentTimeMillis();
  while (!shouldStop) {
    int frameDuration=1 + (int)(excessTime / targetFramerateSleepTime);
    excessTime=excessTime % targetFramerateSleepTime;
    long start=System.currentTimeMillis();
    BufferedImage image=robot.createScreenCapture(screenSize);
    int[] data=((DataBufferInt)image.getRaster().getDataBuffer()).getData();
    encoder.convert_frame(context,data);
    encoder.encode_next_frame(context,frameDuration);
    long finish=System.currentTimeMillis();
    frames++;
    long timeTaken=finish - start;
    if (timeTaken < targetFramerateSleepTime) {
      Thread.sleep(targetFramerateSleepTime - timeTaken);
    }
 else {
      excessTime+=timeTaken;
    }
  }
  encoder.encode_finish(context);
  long videoEndTime=System.currentTimeMillis();
  long duration=((videoEndTime - videoStartTime) / 1000);
  log.info(""String_Node_Str"" + frames + ""String_Node_Str""+ duration+ ""String_Node_Str""+ targetFramerate+ ""String_Node_Str""+ frames / duration);
  return outputFile;
}","@Override public File call() throws Exception {
  int frames=0;
  Rectangle screenSize=getScreenSize();
  File outputFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  JnaLibraryLoader.init();
  EncoderInterface encoder=JnaLibraryLoader.getEncoder();
  Pointer context=encoder.create_context(outputFile.getCanonicalPath());
  int result=encoder.init_encoder(context,(int)screenSize.getWidth(),(int)screenSize.getHeight(),targetFramerate);
  encoder.init_codec(context);
  encoder.init_image(context);
  log.info(""String_Node_Str"" + outputFile.getCanonicalPath());
  Robot robot=new Robot();
  long excessTime=0;
  long videoStartTime=System.currentTimeMillis();
  while (!shouldStop) {
    int frameDuration=1 + (int)(excessTime / targetFramerateSleepTime);
    excessTime=excessTime % targetFramerateSleepTime;
    long start=System.currentTimeMillis();
    BufferedImage image=robot.createScreenCapture(screenSize);
    int[] data=((DataBufferInt)image.getRaster().getDataBuffer()).getData();
    encoder.convert_frame(context,data);
    encoder.encode_next_frame(context,frameDuration);
    long finish=System.currentTimeMillis();
    frames++;
    long timeTaken=finish - start;
    if (timeTaken < targetFramerateSleepTime) {
      Thread.sleep(targetFramerateSleepTime - timeTaken);
    }
 else {
      excessTime+=timeTaken;
    }
  }
  encoder.encode_finish(context);
  long videoEndTime=System.currentTimeMillis();
  long duration=((videoEndTime - videoStartTime) / 1000);
  if (duration != 0) {
    log.info(""String_Node_Str"" + frames + ""String_Node_Str""+ duration+ ""String_Node_Str""+ targetFramerate+ ""String_Node_Str""+ frames / duration);
  }
 else {
    log.warning(""String_Node_Str"");
  }
  return outputFile;
}",0.9773596001176124
21767,"/** 
 * The system calls this to perform work in a worker thread and delivers it the parameters given to AsyncTask.execute() 
 */
protected String doInBackground(String... anUrl){
  StringBuilder stringBuilder=new StringBuilder();
  HttpsURLConnection urlConnection=null;
  URL url=null;
  try {
    url=new URL(anUrl[0]);
    if (debugOn) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + url.toString());
    }
    urlConnection=(HttpsURLConnection)url.openConnection();
    urlConnection.setDoInput(true);
    urlConnection.setRequestMethod(""String_Node_Str"");
    String auth=settings.getString(SettingsActivity.PREF_USERNAME,""String_Node_Str"") + ""String_Node_Str"" + settings.getString(SettingsActivity.PREF_PASSWOORD,""String_Node_Str"");
    String basicAuth=""String_Node_Str"" + new String(Base64.encode(auth.getBytes(),Base64.DEFAULT));
    urlConnection.setRequestProperty(""String_Node_Str"",basicAuth);
    if (Build.VERSION.SDK_INT > 13) {
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    }
    urlConnection.connect();
    int connectionCode=urlConnection.getResponseCode();
    if (connectionCode == 200) {
      Log.d(TAG,""String_Node_Str"");
      BufferedReader reader=new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
      String line;
      while ((line=reader.readLine()) != null) {
        stringBuilder.append(line);
      }
    }
 else {
      connectionError=true;
      Log.e(TAG,""String_Node_Str"" + connectionCode);
      return ""String_Node_Str"";
    }
  }
 catch (  MalformedURLException e) {
    connectionError=true;
    e.printStackTrace();
    Log.e(TAG,e.toString());
    return ""String_Node_Str"";
  }
catch (  FileNotFoundException e) {
    connectionError=true;
    e.printStackTrace();
    Log.e(TAG,e.toString());
    return ""String_Node_Str"";
  }
catch (  SSLHandshakeException e) {
    connectionError=true;
    if (debugOn) {
      e.printStackTrace();
      Log.e(TAG,e.toString());
    }
    return ""String_Node_Str"";
  }
catch (  IOException e) {
    connectionError=true;
    e.printStackTrace();
    Log.e(TAG,e.toString());
    return ""String_Node_Str"";
  }
 finally {
    if (urlConnection != null) {
      urlConnection.disconnect();
    }
  }
  return stringBuilder.toString();
}","/** 
 * The system calls this to perform work in a worker thread and delivers it the parameters given to AsyncTask.execute() 
 */
protected String doInBackground(String... anUrl){
  StringBuilder stringBuilder=new StringBuilder();
  HttpsURLConnection urlConnection=null;
  URL url=null;
  try {
    url=new URL(anUrl[0]);
    if (debugOn) {
      Log.d(""String_Node_Str"",""String_Node_Str"" + url.toString());
    }
    urlConnection=(HttpsURLConnection)url.openConnection();
    urlConnection.setDoInput(true);
    urlConnection.setRequestMethod(""String_Node_Str"");
    String auth=settings.getString(SettingsActivity.PREF_USERNAME,""String_Node_Str"") + ""String_Node_Str"" + settings.getString(SettingsActivity.PREF_PASSWOORD,""String_Node_Str"");
    String basicAuth=""String_Node_Str"" + new String(Base64.encode(auth.getBytes(),Base64.NO_WRAP));
    urlConnection.setRequestProperty(""String_Node_Str"",basicAuth);
    if (Build.VERSION.SDK_INT > 13) {
      urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    }
    urlConnection.connect();
    int connectionCode=urlConnection.getResponseCode();
    if (connectionCode == 200) {
      Log.d(TAG,""String_Node_Str"");
      BufferedReader reader=new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
      String line;
      while ((line=reader.readLine()) != null) {
        stringBuilder.append(line);
      }
    }
 else {
      connectionError=true;
      Log.e(TAG,""String_Node_Str"" + connectionCode);
      return ""String_Node_Str"";
    }
  }
 catch (  MalformedURLException e) {
    connectionError=true;
    e.printStackTrace();
    Log.e(TAG,e.toString());
    return ""String_Node_Str"";
  }
catch (  FileNotFoundException e) {
    connectionError=true;
    e.printStackTrace();
    Log.e(TAG,e.toString());
    return ""String_Node_Str"";
  }
catch (  SSLHandshakeException e) {
    connectionError=true;
    if (debugOn) {
      e.printStackTrace();
      Log.e(TAG,e.toString());
    }
    return ""String_Node_Str"";
  }
catch (  IOException e) {
    connectionError=true;
    e.printStackTrace();
    Log.e(TAG,e.toString());
    return ""String_Node_Str"";
  }
 finally {
    if (urlConnection != null) {
      urlConnection.disconnect();
    }
  }
  return stringBuilder.toString();
}",0.9973707274320772
21768,"/** 
 * checks whether the <code>String</code> passed in the <code>EditText</code> object is a valid https-url is valid if: <li>string is not empty</li> <li>string is a valid URL (according to <code>URLUtil.isValidUrl()</code></li> <li>string is a https-URL (according to <code>URLUtil.isHttpsUrl()</code>)</li> <li>string is at least 13 characters long (example for minimum url: https://ab.at)</li>
 * @param toCheck	<code>EditText</code> containing the String to be checked
 * @return	<code>true</code> iff the <code>String</code> contains a valid https-url
 */
public boolean isValidURL(EditText toCheck){
  String stringToCheck=toCheck.getText().toString();
  if (stringToCheck.isEmpty() || !URLUtil.isValidUrl(stringToCheck) || !URLUtil.isHttpsUrl(stringToCheck)|| stringToCheck.length() < 13) {
    return false;
  }
 else {
    return true;
  }
}","/** 
 * checks whether the <code>String</code> passed in the <code>EditText</code> object is a valid https-url is valid if: <li>string is not empty</li> <li>string is a valid URL (according to <code>URLUtil.isValidUrl()</code></li> <li>string is a https-URL (according to <code>URLUtil.isHttpsUrl()</code>)</li> <li>string is at least 13 characters long (example for minimum url: https://ab.at)</li> <p>If String ends with a slash (""/""), it is removed.</p>
 * @param toCheck	<code>EditText</code> containing the String to be checked
 * @return	<code>true</code> iff the <code>String</code> contains a valid https-url
 */
public boolean isValidURL(EditText toCheck){
  String stringToCheck=toCheck.getText().toString();
  if (stringToCheck.isEmpty() || !URLUtil.isValidUrl(stringToCheck) || !URLUtil.isHttpsUrl(stringToCheck)|| stringToCheck.length() < 13) {
    return false;
  }
 else   if (stringToCheck.charAt(stringToCheck.length() - 1) == '/') {
    String newAddressWithoutSlashAtEnd=stringToCheck.substring(0,stringToCheck.length() - 1);
    toCheck.setText(newAddressWithoutSlashAtEnd);
    return isValidURL(toCheck);
  }
 else {
    return true;
  }
}",0.8361469712015889
21769,"/** 
 * Can the tank be drained
 * @param from  which direction is being checked
 * @param fluid the fluid object
 * @return boolean based on the fluid
 */
@Override public boolean canDrain(ForgeDirection from,Fluid fluid){
  if (fluid != null && fluid.getID() == tank.getFluid().fluidID) {
    return tank.getFluidAmount() > 0;
  }
  return false;
}","/** 
 * Can the tank be drained
 * @param from  which direction is being checked
 * @param fluid the fluid object
 * @return boolean based on the fluid
 */
@Override public boolean canDrain(ForgeDirection from,Fluid fluid){
  if (fluid != null && fluid.getID() == tank.getFluid().getFluidID()) {
    return tank.getFluidAmount() > 0;
  }
  return false;
}",0.9900709219858156
21770,"/** 
 * Can the tank be filled
 * @param from  which direction is being checked
 * @param fluid the fluid object
 * @return boolean based on the fluid
 */
@Override public boolean canFill(ForgeDirection from,Fluid fluid){
  if (tank != null) {
    if (tank.getFluid().fluidID == fluid.getID()) {
      return tank.getFluidAmount() < tank.getCapacity();
    }
 else     if (tank.getFluidAmount() == 0) {
      return true;
    }
  }
  return false;
}","/** 
 * Can the tank be filled
 * @param from  which direction is being checked
 * @param fluid the fluid object
 * @return boolean based on the fluid
 */
@Override public boolean canFill(ForgeDirection from,Fluid fluid){
  if (tank != null) {
    if (tank.getFluid().getFluidID() == fluid.getID()) {
      return tank.getFluidAmount() < tank.getCapacity();
    }
 else     if (tank.getFluidAmount() == 0) {
      return true;
    }
  }
  return false;
}",0.992248062015504
21771,"/** 
 * Concat all objects with given separator
 * @param separator eg. "", ""
 * @param objects
 * @return one string
 */
public static String toString(String separator,Object... objects){
  StringBuilder result=new StringBuilder();
  for (  Object object : objects) {
    result.append(String.valueOf(object)).append(separator);
  }
  return result.substring(0,result.length() - separator.length());
}","/** 
 * Concat all objects with given separator
 * @param separator eg. "", ""
 * @param objects
 * @return one string
 */
public static String toString(String separator,Object... objects){
  StringBuilder result=new StringBuilder();
  String value;
  for (  Object object : objects) {
    value=String.valueOf(object);
    if (value.equals(""String_Node_Str""))     value=""String_Node_Str"";
    result.append(value).append(separator);
  }
  return result.substring(0,result.length() - separator.length());
}",0.8552486187845304
21772,"private void incrementPage(){
  if (displayPage < pageIndex.length - 1) {
    displayPage++;
  }
}","private void incrementPage(){
  if (displayPage < pageIndex.length) {
    displayPage++;
  }
}",0.9791666666666666
21773,"/** 
 * Get   {@link minechem.item.journal.JournalPage}s for given names
 * @param pageNames the page names
 * @return can be an empty array
 */
public JournalPage[] getResearchPages(String[] pageNames){
  JournalPage[] pages=new JournalPage[pageNames.length];
  for (int i=0; i < pageNames.length; i++) {
    pages[i]=getResearchPage(pageNames[i]);
  }
  return ArrayHelper.removeNulls(pages,JournalPage.class);
}","/** 
 * Get   {@link minechem.item.journal.JournalPage}s for given names
 * @param pageNames the page names
 * @return can be an empty array
 */
public JournalPage[] getResearchPages(String[] pageNames){
  JournalPage[] pages=new JournalPage[pageNames.length];
  for (int i=0; i < pageNames.length; i++) {
    pages[i]=getResearchPage(pageNames[i]);
  }
  pages=ArrayHelper.removeNulls(pages,JournalPage.class);
  if (pages.length % 2 != 0) {
    JournalPage[] expandedPages=new JournalPage[pages.length + 1];
    System.arraycopy(pages,0,expandedPages,0,pages.length);
    expandedPages[pages.length]=getResearchPage(""String_Node_Str"");
    return expandedPages;
  }
  return pages;
}",0.740673339399454
21774,"private void drawFoldedPages(){
  if (displayPage > 0) {
    GuiDraw.drawTexturedModalRect(5,163,0,188,21,21);
  }
  if (displayPage + 2 < pageIndex.length) {
    GuiDraw.drawTexturedModalRect(230,160,21,188,21,21);
  }
}","private void drawFoldedPages(){
  if (displayPage > 1) {
    GuiDraw.drawTexturedModalRect(5,163,0,188,21,21);
  }
  if (displayPage + 2 < pageIndex.length) {
    GuiDraw.drawTexturedModalRect(230,160,21,188,21,21);
  }
}",0.995475113122172
21775,"/** 
 * @param c
 * @param keycode
 */
@Override protected void keyTyped(char c,int keycode){
  if (keycode == Keyboard.KEY_LEFT) {
    if (displayPage > 0) {
      displayPage--;
      if (displayPage > 0) {
        displayPage--;
      }
    }
  }
  if (keycode == Keyboard.KEY_RIGHT) {
    if (displayPage < pageIndex.length) {
      displayPage++;
      if (displayPage < pageIndex.length) {
        displayPage++;
      }
    }
  }
  loadPage(displayPage);
  super.keyTyped(c,keycode);
}","/** 
 * @param c
 * @param keycode
 */
@Override protected void keyTyped(char c,int keycode){
  if (keycode == Keyboard.KEY_LEFT) {
    if (displayPage > 0) {
      displayPage--;
      if (displayPage > 0) {
        displayPage--;
      }
    }
  }
  if (keycode == Keyboard.KEY_RIGHT) {
    if (displayPage < pageIndex.length - 1) {
      displayPage++;
      if (displayPage < pageIndex.length - 1) {
        displayPage++;
      }
    }
  }
  loadPage(displayPage);
  super.keyTyped(c,keycode);
}",0.9919354838709676
21776,"@Override public void draw(){
  super.draw();
  if (isEnabled()) {
    if (isFullyOpened()) {
      getFontRenderer().drawString(linkText,getLinkX(),getLinkY(),linkColor,true);
      if (isLinkAtOffsetPosition(gui.getMouseX(),gui.getMouseY())) {
        gui.drawTooltip(linkTextList);
      }
    }
  }
}","@Override public void draw(){
  super.draw();
  if (isEnabled()) {
    if (isFullyOpened()) {
      getFontRenderer().drawString(linkText,getLinkX(),getLinkY(),linkColor,true);
      if (isLinkAtOffsetPosition(gui.getMouseX(),gui.getMouseY())) {
        gui.drawTooltip(linkTextList);
      }
      GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
      GL11.glDisable(GL11.GL_LIGHTING);
    }
  }
}",0.8798842257597684
21777,"@Override protected void drawGuiContainerBackgroundLayer(float opacity,int mousex,int mousey){
  this.mc.renderEngine.bindTexture(Compendium.Texture.GUI.opticalMicroscope);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  drawTexturedModalRect(x,y,0,0,xSize,ySize);
}","@Override protected void drawGuiContainerBackgroundLayer(float opacity,int mousex,int mousey){
  this.mc.renderEngine.bindTexture(Compendium.Resource.GUI.opticalMicroscope);
  int x=(width - xSize) / 2;
  int y=(height - ySize) / 2;
  drawTexturedModalRect(x,y,0,0,xSize,ySize);
}",0.9767441860465116
21778,"public static ArrayList<PotionChemical> pushTogetherChemicals(ArrayList<PotionChemical> list){
  for (int i=list.size() - 1; i >= 0; i--) {
    if (list.get(i) == null) {
      continue;
    }
    for (int j=0; j < i; j++) {
      if (list.get(j) == null) {
        list.set(j,list.get(i));
        list.set(j,null);
        break;
      }
 else       if (list.get(j).sameAs(list.get(i))) {
        list.get(j).amount+=list.get(i).amount;
        list.set(i,null);
        break;
      }
    }
  }
  list.removeAll(Collections.singleton(null));
  return list;
}","public static ArrayList<PotionChemical> pushTogetherChemicals(ArrayList<PotionChemical> oldList){
  ArrayList<PotionChemical> list=new ArrayList<PotionChemical>();
  for (  PotionChemical chemical : oldList)   list.add(chemical.copy());
  for (int i=list.size() - 1; i >= 0; i--) {
    if (list.get(i) == null) {
      continue;
    }
    for (int j=0; j < i; j++) {
      if (list.get(j) == null) {
        list.set(j,list.get(i));
        list.set(j,null);
        break;
      }
 else       if (list.get(j).sameAs(list.get(i))) {
        list.get(j).amount+=list.get(i).amount;
        list.set(i,null);
        break;
      }
    }
  }
  list.removeAll(Collections.singleton(null));
  return list;
}",0.8860759493670886
21779,"@SuppressWarnings(""String_Node_Str"") protected void drawHoveringText(List list,int x,int y,FontRenderer fontrenderer){
  if (!list.isEmpty()) {
    GL11.glDisable(GL12.GL_RESCALE_NORMAL);
    RenderHelper.disableStandardItemLighting();
    GL11.glDisable(GL11.GL_LIGHTING);
    GL11.glDisable(GL11.GL_DEPTH_TEST);
    int k=0;
    Iterator iterator=list.iterator();
    while (iterator.hasNext()) {
      String s=(String)iterator.next();
      int l=fontrenderer.getStringWidth(s);
      if (l > k) {
        k=l;
      }
    }
    int i1=x + 12;
    int j1=y - 12;
    int k1=8;
    if (list.size() > 1) {
      k1+=2 + (list.size() - 1) * 10;
    }
    this.zLevel=300.0F;
    int l1=-267386864;
    this.drawGradientRect(i1 - 3,j1 - 4,i1 + k + 3,j1 - 3,l1,l1);
    this.drawGradientRect(i1 - 3,j1 + k1 + 3,i1 + k + 3,j1 + k1 + 4,l1,l1);
    this.drawGradientRect(i1 - 3,j1 - 3,i1 + k + 3,j1 + k1 + 3,l1,l1);
    this.drawGradientRect(i1 - 4,j1 - 3,i1 - 3,j1 + k1 + 3,l1,l1);
    this.drawGradientRect(i1 + k + 3,j1 - 3,i1 + k + 4,j1 + k1 + 3,l1,l1);
    int i2=1347420415;
    int j2=(i2 & 16711422) >> 1 | i2 & -16777216;
    this.drawGradientRect(i1 - 3,j1 - 3 + 1,i1 - 3 + 1,j1 + k1 + 3 - 1,i2,j2);
    this.drawGradientRect(i1 + k + 2,j1 - 3 + 1,i1 + k + 3,j1 + k1 + 3 - 1,i2,j2);
    this.drawGradientRect(i1 - 3,j1 - 3,i1 + k + 3,j1 - 3 + 1,i2,i2);
    this.drawGradientRect(i1 - 3,j1 + k1 + 2,i1 + k + 3,j1 + k1 + 3,j2,j2);
    for (int k2=0; k2 < list.size(); ++k2) {
      String s1=(String)list.get(k2);
      fontrenderer.drawStringWithShadow(s1,i1,j1,-1);
      if (k2 == 0) {
        j1+=2;
      }
      j1+=10;
    }
    this.zLevel=0.0F;
    GL11.glEnable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_DEPTH_TEST);
    RenderHelper.enableStandardItemLighting();
    GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  }
}","@SuppressWarnings(""String_Node_Str"") protected void drawHoveringText(List list,int x,int y,FontRenderer fontrenderer){
  if (!list.isEmpty()) {
    GL11.glDisable(GL12.GL_RESCALE_NORMAL);
    GL11.glDisable(GL11.GL_LIGHTING);
    GL11.glDisable(GL11.GL_DEPTH_TEST);
    int k=0;
    Iterator iterator=list.iterator();
    while (iterator.hasNext()) {
      String s=(String)iterator.next();
      int l=fontrenderer.getStringWidth(s);
      if (l > k) {
        k=l;
      }
    }
    int i1=x + 12;
    int j1=y - 12;
    int k1=8;
    if (list.size() > 1) {
      k1+=2 + (list.size() - 1) * 10;
    }
    this.zLevel=300.0F;
    int l1=-267386864;
    this.drawGradientRect(i1 - 3,j1 - 4,i1 + k + 3,j1 - 3,l1,l1);
    this.drawGradientRect(i1 - 3,j1 + k1 + 3,i1 + k + 3,j1 + k1 + 4,l1,l1);
    this.drawGradientRect(i1 - 3,j1 - 3,i1 + k + 3,j1 + k1 + 3,l1,l1);
    this.drawGradientRect(i1 - 4,j1 - 3,i1 - 3,j1 + k1 + 3,l1,l1);
    this.drawGradientRect(i1 + k + 3,j1 - 3,i1 + k + 4,j1 + k1 + 3,l1,l1);
    int i2=1347420415;
    int j2=(i2 & 16711422) >> 1 | i2 & -16777216;
    this.drawGradientRect(i1 - 3,j1 - 3 + 1,i1 - 3 + 1,j1 + k1 + 3 - 1,i2,j2);
    this.drawGradientRect(i1 + k + 2,j1 - 3 + 1,i1 + k + 3,j1 + k1 + 3 - 1,i2,j2);
    this.drawGradientRect(i1 - 3,j1 - 3,i1 + k + 3,j1 - 3 + 1,i2,i2);
    this.drawGradientRect(i1 - 3,j1 + k1 + 2,i1 + k + 3,j1 + k1 + 3,j2,j2);
    for (int k2=0; k2 < list.size(); ++k2) {
      String s1=(String)list.get(k2);
      fontrenderer.drawStringWithShadow(s1,i1,j1,-1);
      if (k2 == 0) {
        j1+=2;
      }
      j1+=10;
    }
    this.zLevel=0.0F;
    GL11.glEnable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_DEPTH_TEST);
    GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  }
}",0.9733370754981756
21780,"public void draw(TextureManager renderEngine){
  renderEngine.bindTexture(texture);
  ToggleButton button=buttons.get(state);
  drawTexturedModalRect(x,y,button.u,button.v,width,height);
  String tooltip=MinechemUtil.getLocalString(button.tooltip);
  int cx=(container.width - container.getXSize()) / 2;
  int cy=(container.height - container.getYSize()) / 2;
  int tooltipWidth=mc.fontRenderer.getStringWidth(tooltip);
  if (isMoverOver()) {
    container.drawHoveringText(tooltip,cx + 77 - (tooltipWidth / 2),cy + 100);
  }
}","public void draw(TextureManager renderEngine){
  renderEngine.bindTexture(texture);
  ToggleButton button=buttons.get(state);
  drawTexturedModalRect(x,y,button.u,button.v,width,height);
  String tooltip=MinechemUtil.getLocalString(button.tooltip);
  int cx=(container.width - container.getXSize()) / 2;
  int cy=(container.height - container.getYSize()) / 2;
  int tooltipWidth=mc.fontRenderer.getStringWidth(tooltip);
  if (isMoverOver()) {
    GL11.glDisable(GL11.GL_DEPTH_TEST);
    container.drawHoveringText(tooltip,cx + 77 - (tooltipWidth / 2),cy + 100);
    GL11.glEnable(GL11.GL_DEPTH_TEST);
  }
}",0.9302736098852604
21781,"/** 
 * Sets ghost items that will make the crafting recipe from currently selected item in chemists journal if located in that slot.
 */
public void setRecipe(SynthesisRecipe recipe){
  clearRecipeMatrix();
  if (recipe != null) {
    ItemStack[] ingredients=MinechemUtil.convertChemicalArrayIntoItemStackArray(recipe.getShapedRecipe());
    for (int i=0; i < Math.min(kRecipe.length,ingredients.length); i++) {
      inventory[kRecipe[i]]=ingredients[i];
    }
  }
}","/** 
 * Sets ghost items that will make the crafting recipe from currently selected item in chemists journal if located in that slot.
 */
public void setRecipe(SynthesisRecipe recipe){
  clearRecipeMatrix();
  if (recipe != null) {
    ItemStack[] ingredients=MinechemUtil.convertChemicalArrayIntoItemStackArray(recipe.isShaped() ? recipe.getShapedRecipe() : recipe.getShapelessRecipe());
    for (int i=0; i < Math.min(kRecipe.length,ingredients.length); i++) {
      inventory[kRecipe[i]]=ingredients[i];
    }
  }
}",0.9310344827586208
21782,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  TileEntity te=world.getTileEntity(x,y,z);
  boolean result=!world.isRemote;
  if (te != null && te instanceof IFluidHandler && !player.isSneaking() && !(te instanceof IInventory)) {
    if (stack.getItemDamage() != ElementEnum.heaviestMass) {
      int filled=0;
      for (int i=0; i < 6; i++) {
        filled=((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),new FluidStack(FluidHelper.elements.get(getElement(stack)),125),false);
        if (filled > 0) {
          if (result)           ((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),new FluidStack(FluidHelper.elements.get(getElement(stack)),125),true);
          if (!player.capabilities.isCreativeMode)           MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,ElementEnum.heaviestMass));
          return result;
        }
      }
    }
 else {
      FluidStack drained=null;
      Fluid fluid=MinechemUtil.getFluid((IFluidHandler)te);
      ElementEnum element=MinechemUtil.getElement(fluid);
      if (element != null) {
        for (int i=0; i < 6; i++) {
          drained=((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),false);
          if (drained != null && drained.amount > 0) {
            if (result)             ((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),true);
            if (!player.capabilities.isCreativeMode)             MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,element.ordinal()));
            return result;
          }
        }
      }
 else {
        MoleculeEnum molecule=MinechemUtil.getMolecule(fluid);
        if (molecule != null) {
          for (int i=0; i < 6; i++) {
            drained=((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),false);
            if (drained != null && drained.amount > 0) {
              if (result)               ((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),true);
              if (!player.capabilities.isCreativeMode)               MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.molecule,1,molecule.id()));
              return result;
            }
          }
        }
      }
    }
    return result;
  }
  return super.onItemUseFirst(stack,player,world,x,y,z,side,hitX,hitY,hitZ);
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  TileEntity te=world.getTileEntity(x,y,z);
  boolean result=!world.isRemote;
  if (te != null && te instanceof IFluidHandler && !player.isSneaking() && !(te instanceof IInventory)) {
    if (stack.getItemDamage() != ElementEnum.heaviestMass) {
      int filled=0;
      for (int i=0; i < 6; i++) {
        filled=((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),new FluidStack(FluidHelper.elements.get(getElement(stack)),125),false);
        if (filled > 0) {
          if (result)           ((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),new FluidStack(FluidHelper.elements.get(getElement(stack)),125),true);
          if (!player.capabilities.isCreativeMode)           MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,ElementEnum.heaviestMass));
          return result;
        }
      }
    }
 else {
      FluidStack drained=null;
      Fluid fluid=MinechemUtil.getFluid((IFluidHandler)te);
      ElementEnum element=MinechemUtil.getElement(fluid);
      if (element != null) {
        for (int i=0; i < 6; i++) {
          drained=((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),false);
          if (drained != null && drained.amount > 0) {
            if (result)             ((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),true);
            if (!player.capabilities.isCreativeMode)             MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,element.ordinal()));
            return result;
          }
        }
      }
 else {
        MoleculeEnum molecule=MinechemUtil.getMolecule(fluid);
        if (fluid == FluidRegistry.WATER)         molecule=MoleculeEnum.water;
        if (molecule != null) {
          for (int i=0; i < 6; i++) {
            drained=((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),false);
            if (drained != null && drained.amount > 0) {
              if (result)               ((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),true);
              if (!player.capabilities.isCreativeMode)               MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.molecule,1,molecule.id()));
              return result;
            }
          }
        }
      }
    }
    return result;
  }
  return super.onItemUseFirst(stack,player,world,x,y,z,side,hitX,hitY,hitZ);
}",0.9849322906732788
21783,"public static void incPlayerInventory(ItemStack current,int inc,EntityPlayer player,ItemStack give){
  current.stackSize+=inc;
  if (!player.inventory.addItemStackToInventory(give)) {
    player.dropPlayerItemWithRandomChoice(give,false);
  }
}","public static void incPlayerInventory(ItemStack current,int inc,EntityPlayer player,ItemStack give){
  if (inc < 0)   current.splitStack(-inc);
 else   if (inc > 0) {
    if (current.stackSize + inc <= current.getMaxStackSize())     current.stackSize+=inc;
 else {
      int added=current.getMaxStackSize() - current.stackSize;
      current.stackSize=current.getMaxStackSize();
      ItemStack extraStack=current.copy();
      extraStack.stackSize=inc - added;
      if (!player.inventory.addItemStackToInventory(extraStack)) {
        player.dropPlayerItemWithRandomChoice(extraStack,false);
      }
    }
  }
  if (!player.inventory.addItemStackToInventory(give)) {
    player.dropPlayerItemWithRandomChoice(give,false);
  }
}",0.4850976361767729
21784,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  TileEntity te=world.getTileEntity(x,y,z);
  boolean result=!world.isRemote;
  if (te != null && te instanceof IFluidHandler && !player.isSneaking() && !(te instanceof IInventory)) {
    if (stack.getItemDamage() != ElementEnum.heaviestMass) {
      int filled=0;
      for (int i=0; i < 6; i++) {
        filled=((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),new FluidStack(FluidHelper.elements.get(getElement(stack)),125),false);
        if (filled > 0) {
          if (result)           ((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),new FluidStack(FluidHelper.elements.get(getElement(stack)),125),true);
          if (!player.capabilities.isCreativeMode)           MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,ElementEnum.heaviestMass));
          return result;
        }
      }
    }
 else {
      FluidStack drained=null;
      Fluid fluid=MinechemUtil.getFluid((IFluidHandler)te);
      ElementEnum element=MinechemUtil.getElement(fluid);
      if (element != null) {
        for (int i=0; i < 6; i++) {
          drained=((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),false);
          if (drained != null && drained.amount > 0) {
            if (result)             ((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),true);
            if (!player.capabilities.isCreativeMode)             MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,element.ordinal()));
            return result;
          }
        }
      }
 else {
        MoleculeEnum molecule=MinechemUtil.getMolecule(fluid);
        if (fluid == FluidRegistry.WATER)         molecule=MoleculeEnum.water;
        if (molecule != null) {
          for (int i=0; i < 6; i++) {
            drained=((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),false);
            if (drained != null && drained.amount > 0) {
              if (result)               ((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),true);
              if (!player.capabilities.isCreativeMode)               MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.molecule,1,molecule.id()));
              return result;
            }
          }
        }
      }
    }
    return result;
  }
  return super.onItemUseFirst(stack,player,world,x,y,z,side,hitX,hitY,hitZ);
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  TileEntity te=world.getTileEntity(x,y,z);
  boolean result=!world.isRemote;
  if (te != null && te instanceof IFluidHandler && !player.isSneaking() && !(te instanceof IInventory)) {
    if (stack.getItemDamage() != ElementEnum.heaviestMass) {
      int filled=0;
      for (int i=0; i < 6; i++) {
        filled=((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),new FluidStack(FluidHelper.elements.get(getElement(stack)),125),false);
        if (filled > 0) {
          if (result)           ((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),new FluidStack(FluidHelper.elements.get(getElement(stack)),125),true);
          if (!player.capabilities.isCreativeMode)           MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,ElementEnum.heaviestMass));
          return result || stack.stackSize <= 0;
        }
      }
    }
 else {
      FluidStack drained=null;
      Fluid fluid=MinechemUtil.getFluid((IFluidHandler)te);
      ElementEnum element=MinechemUtil.getElement(fluid);
      if (element != null) {
        for (int i=0; i < 6; i++) {
          drained=((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),false);
          if (drained != null && drained.amount > 0) {
            if (result)             ((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),true);
            if (!player.capabilities.isCreativeMode)             MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,element.ordinal()));
            return result;
          }
        }
      }
 else {
        MoleculeEnum molecule=MinechemUtil.getMolecule(fluid);
        if (fluid == FluidRegistry.WATER)         molecule=MoleculeEnum.water;
        if (molecule != null) {
          for (int i=0; i < 6; i++) {
            drained=((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),false);
            if (drained != null && drained.amount > 0) {
              if (result)               ((IFluidHandler)te).drain(ForgeDirection.getOrientation(i),new FluidStack(fluid,125),true);
              if (!player.capabilities.isCreativeMode)               MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.molecule,1,molecule.id()));
              return result;
            }
          }
        }
      }
    }
    return result;
  }
  return super.onItemUseFirst(stack,player,world,x,y,z,side,hitX,hitY,hitZ);
}",0.9955106621773288
21785,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  TileEntity te=world.getTileEntity(x,y,z);
  boolean result=!world.isRemote;
  if (te != null && te instanceof IFluidHandler && !player.isSneaking() && !(te instanceof IInventory)) {
    int filled=0;
    for (int i=0; i < 6; i++) {
      FluidStack fluidStack=new FluidStack(FluidRegistry.WATER,125);
      if (getMolecule(stack) != MoleculeEnum.water)       fluidStack=new FluidStack(FluidHelper.molecules.get(getMolecule(stack)),125);
      filled=((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),fluidStack,false);
      if (filled > 0) {
        if (result)         ((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),fluidStack,true);
        if (!player.capabilities.isCreativeMode)         MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,ElementEnum.heaviestMass));
        return result;
      }
    }
    return result;
  }
  return super.onItemUseFirst(stack,player,world,x,y,z,side,hitX,hitY,hitZ);
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  TileEntity te=world.getTileEntity(x,y,z);
  boolean result=!world.isRemote;
  if (te != null && te instanceof IFluidHandler && !player.isSneaking() && !(te instanceof IInventory)) {
    int filled=0;
    for (int i=0; i < 6; i++) {
      FluidStack fluidStack=new FluidStack(FluidRegistry.WATER,125);
      if (getMolecule(stack) != MoleculeEnum.water)       fluidStack=new FluidStack(FluidHelper.molecules.get(getMolecule(stack)),125);
      filled=((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),fluidStack,false);
      if (filled > 0) {
        if (result)         ((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),fluidStack,true);
        if (!player.capabilities.isCreativeMode)         MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,ElementEnum.heaviestMass));
        return result || stack.stackSize <= 0;
      }
    }
    return result;
  }
  return super.onItemUseFirst(stack,player,world,x,y,z,side,hitX,hitY,hitZ);
}",0.9894736842105264
21786,"private static void chemicalReaction(World world,Entity entity,int x,int y,int z,ChemicalFluidReactionRule rule,boolean popFlowingFluid){
  ChemicalFluidReactionOutput output=reactionRules.get(rule);
  if (output == null) {
    return;
  }
  if (output.explosionLevel != Float.NaN) {
    world.createExplosion(null,x,y,z,output.explosionLevel,true);
  }
  int halfSpace=FLUIDS_GENERATE_SPACE / 2;
  List[] availableSpaces=new List[FLUIDS_GENERATE_SPACE];
  for (int i=0; i < availableSpaces.length; i++) {
    availableSpaces[i]=findAvailableSpacesAtCrossSection(world,x,y - halfSpace + i,z,1);
  }
  Iterator<MinechemChemicalType> it=output.outputs.iterator();
  while (it.hasNext()) {
    MinechemChemicalType chemical=it.next();
    boolean hasFlowingStatus=chemical.roomState().getQuanta() > 2;
    CoordTuple coords=null;
    if (!(!hasFlowingStatus && popFlowingFluid)) {
      boolean isGas=chemical.roomState().isGas();
      if (isGas) {
        for (int i=availableSpaces.length - 1; i > -1; i--) {
          if (!availableSpaces[i].isEmpty()) {
            coords=(CoordTuple)availableSpaces[i].remove(availableSpaces[i].size() - 1);
            break;
          }
        }
      }
 else {
        for (int i=0; i < availableSpaces.length; i++) {
          if (!availableSpaces[i].isEmpty()) {
            coords=(CoordTuple)availableSpaces[i].remove(availableSpaces[i].size() - 1);
            break;
          }
        }
      }
    }
    if (coords == null) {
      if (!popFlowingFluid) {
        ItemStack itemStack=MinechemUtil.createItemStack(chemical,8);
        MinechemUtil.throwItemStack(world,itemStack,x,y,z);
      }
    }
 else     if (!(popFlowingFluid && !hasFlowingStatus)) {
      int px=coords.getX();
      int py=coords.getY();
      int pz=coords.getZ();
      world.func_147480_a(px,py,pz,true);
      world.setBlockToAir(px,py,pz);
      Block fluidBlock=null;
      if (chemical instanceof ElementEnum) {
        fluidBlock=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(chemical));
      }
 else       if (chemical instanceof MoleculeEnum) {
        fluidBlock=FluidHelper.moleculeBlocks.get(FluidHelper.molecules.get(chemical));
      }
      if (fluidBlock != null) {
        world.setBlock(px,py,pz,fluidBlock,popFlowingFluid ? 1 : 0,3);
      }
    }
  }
}","private static void chemicalReaction(World world,Entity entity,int x,int y,int z,ChemicalFluidReactionRule rule,boolean popFlowingFluid){
  ChemicalFluidReactionOutput output=reactionRules.get(rule);
  if (output == null) {
    return;
  }
  if (!Float.isNaN(output.explosionLevel)) {
    world.createExplosion(null,x,y,z,output.explosionLevel,true);
  }
  int halfSpace=FLUIDS_GENERATE_SPACE / 2;
  List[] availableSpaces=new List[FLUIDS_GENERATE_SPACE];
  for (int i=0; i < availableSpaces.length; i++) {
    availableSpaces[i]=findAvailableSpacesAtCrossSection(world,x,y - halfSpace + i,z,1);
  }
  Iterator<MinechemChemicalType> it=output.outputs.iterator();
  while (it.hasNext()) {
    MinechemChemicalType chemical=it.next();
    boolean hasFlowingStatus=chemical.roomState().getQuanta() > 2;
    CoordTuple coords=null;
    if (!(!hasFlowingStatus && popFlowingFluid)) {
      boolean isGas=chemical.roomState().isGas();
      if (isGas) {
        for (int i=availableSpaces.length - 1; i > -1; i--) {
          if (!availableSpaces[i].isEmpty()) {
            coords=(CoordTuple)availableSpaces[i].remove(availableSpaces[i].size() - 1);
            break;
          }
        }
      }
 else {
        for (int i=0; i < availableSpaces.length; i++) {
          if (!availableSpaces[i].isEmpty()) {
            coords=(CoordTuple)availableSpaces[i].remove(availableSpaces[i].size() - 1);
            break;
          }
        }
      }
    }
    if (coords == null) {
      if (!popFlowingFluid) {
        ItemStack itemStack=MinechemUtil.createItemStack(chemical,8);
        MinechemUtil.throwItemStack(world,itemStack,x,y,z);
      }
    }
 else     if (!(popFlowingFluid && !hasFlowingStatus)) {
      int px=coords.getX();
      int py=coords.getY();
      int pz=coords.getZ();
      world.func_147480_a(px,py,pz,true);
      world.setBlockToAir(px,py,pz);
      Block fluidBlock=null;
      if (chemical instanceof ElementEnum) {
        fluidBlock=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(chemical));
      }
 else       if (chemical instanceof MoleculeEnum) {
        fluidBlock=FluidHelper.moleculeBlocks.get(FluidHelper.molecules.get(chemical));
      }
      if (fluidBlock != null) {
        world.setBlock(px,py,pz,fluidBlock,popFlowingFluid ? 1 : 0,3);
      }
    }
  }
}",0.9941545789131848
21787,"private void drawItemStack(ItemStack itemstack){
  this.zLevel=100.0F;
  renderItem.zLevel=100.0F;
  renderItem.renderItemAndEffectIntoGUI(mc.fontRenderer,mc.renderEngine,itemstack,0,0);
  renderItem.renderItemOverlayIntoGUI(mc.fontRenderer,mc.renderEngine,itemstack,0,0);
  this.zLevel=0.0F;
  renderItem.zLevel=0.0F;
}","private void drawItemStack(ItemStack itemstack){
  GL11.glDisable(GL11.GL_LIGHTING);
  RenderHelper.enableGUIStandardItemLighting();
  this.zLevel=100.0F;
  renderItem.zLevel=100.0F;
  renderItem.renderItemAndEffectIntoGUI(mc.fontRenderer,mc.renderEngine,itemstack,0,0);
  renderItem.renderItemOverlayIntoGUI(mc.fontRenderer,mc.renderEngine,itemstack,0,0);
  this.zLevel=0.0F;
  renderItem.zLevel=0.0F;
}",0.8839779005524862
21788,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  TileEntity te=world.getTileEntity(x,y,z);
  boolean result=!world.isRemote;
  if (te != null && te instanceof IFluidHandler && !player.isSneaking() && !(te instanceof IInventory)) {
    int filled=0;
    for (int i=0; i < 6; i++) {
      filled=((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),new FluidStack(FluidHelper.molecules.get(getMolecule(stack)),125),false);
      if (filled > 0) {
        if (result)         ((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),new FluidStack(FluidHelper.molecules.get(getMolecule(stack)),125),true);
        if (!player.capabilities.isCreativeMode)         MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,ElementEnum.heaviestMass));
        return result;
      }
    }
    return result;
  }
  return super.onItemUseFirst(stack,player,world,x,y,z,side,hitX,hitY,hitZ);
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  TileEntity te=world.getTileEntity(x,y,z);
  boolean result=!world.isRemote;
  if (te != null && te instanceof IFluidHandler && !player.isSneaking() && !(te instanceof IInventory)) {
    int filled=0;
    for (int i=0; i < 6; i++) {
      FluidStack fluidStack=new FluidStack(FluidRegistry.WATER,125);
      if (getMolecule(stack) != MoleculeEnum.water)       fluidStack=new FluidStack(FluidHelper.molecules.get(getMolecule(stack)),125);
      filled=((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),fluidStack,false);
      if (filled > 0) {
        if (result)         ((IFluidHandler)te).fill(ForgeDirection.getOrientation(i),fluidStack,true);
        if (!player.capabilities.isCreativeMode)         MinechemUtil.incPlayerInventory(stack,-1,player,new ItemStack(MinechemItemsRegistration.element,1,ElementEnum.heaviestMass));
        return result;
      }
    }
    return result;
  }
  return super.onItemUseFirst(stack,player,world,x,y,z,side,hitX,hitY,hitZ);
}",0.7403979639055993
21789,"public SynthesisRecipe(ItemStack output,boolean shaped,int energyCost,ArrayList<PotionChemical> recipe){
  this.output=output;
  this.isShaped=shaped;
  this.energyCost=energyCost;
  if (shaped)   this.shapedRecipe=recipe.toArray(new PotionChemical[recipe.size()]);
 else   this.unshapedRecipe=recipe;
}","public SynthesisRecipe(ItemStack output,boolean shaped,int energyCost,ArrayList<PotionChemical> recipe){
  this.output=output;
  this.isShaped=shaped;
  this.energyCost=energyCost;
  if (shaped)   this.shapedRecipe=recipe.toArray(new PotionChemical[recipe.size()]);
  this.unshapedRecipe=recipe;
}",0.99
21790,"/** 
 * Determines if there is enough power to allow the player to take the item from the output slot.
 */
public boolean hasEnoughPowerForCurrentRecipe(){
  if (this.currentRecipe != null) {
    return canAffordRecipe(this.currentRecipe);
  }
  return true;
}","/** 
 * Determines if there is enough power to allow the player to take the item from the output slot.
 */
public boolean hasEnoughPowerForCurrentRecipe(){
  if (!Settings.powerUseEnabled)   return true;
  if (this.currentRecipe != null) {
    return canAffordRecipe(this.currentRecipe);
  }
  return true;
}",0.9154929577464788
21791,"private boolean takeStackFromStorage(ItemStack ingredient,ItemStack[] storage){
  int ingredientAmountLeft=ingredient.stackSize;
  for (int slot=0; slot < storage.length; slot++) {
    ItemStack storageItem=storage[slot];
    if (storageItem != null && Compare.stacksAreSameKind(storageItem,ingredient)) {
      int amountToTake=Math.min(storageItem.stackSize,ingredientAmountLeft);
      ingredientAmountLeft-=amountToTake;
      storageItem.stackSize-=amountToTake;
      if (storageItem.stackSize <= 0) {
        storage[slot]=null;
      }
      if (ingredientAmountLeft <= 0) {
        break;
      }
    }
  }
  return ingredientAmountLeft == 0;
}","private boolean takeStackFromStorage(ItemStack ingredient,ItemStack[] storage){
  if (ingredient == null)   return true;
  int ingredientAmountLeft=ingredient.stackSize;
  for (int slot=0; slot < storage.length; slot++) {
    ItemStack storageItem=storage[slot];
    if (storageItem != null && Compare.stacksAreSameKind(storageItem,ingredient)) {
      int amountToTake=Math.min(storageItem.stackSize,ingredientAmountLeft);
      ingredientAmountLeft-=amountToTake;
      storageItem.stackSize-=amountToTake;
      if (storageItem.stackSize <= 0) {
        storage[slot]=null;
      }
      if (ingredientAmountLeft <= 0) {
        break;
      }
    }
  }
  return ingredientAmountLeft == 0;
}",0.9695619896065332
21792,"public void drawTexture(int x,int y,ResourceLocation resource){
  int w=16;
  int h=16;
  this.mc.getTextureManager().bindTexture(resource);
  GL11.glColor4f(1F,1F,1F,1F);
  Tessellator tessellator=Tessellator.instance;
  tessellator.startDrawingQuads();
  tessellator.addVertexWithUV(x + 0,y + h,this.zLevel,0D,1D);
  tessellator.addVertexWithUV(x + w,y + h,this.zLevel,1D,1D);
  tessellator.addVertexWithUV(x + w,y + 0,this.zLevel,1D,0D);
  tessellator.addVertexWithUV(x + 0,y + 0,this.zLevel,0D,0D);
  tessellator.draw();
}","public void drawTexture(int x,int y,ResourceLocation resource){
  int w=16;
  int h=16;
  this.mc.getTextureManager().bindTexture(resource);
  GL11.glColor4f(1F,1F,1F,1F);
  Tessellator tessellator=Tessellator.instance;
  tessellator.startDrawingQuads();
  tessellator.addVertexWithUV(x + 0,y + h,this._zLevel,0D,1D);
  tessellator.addVertexWithUV(x + w,y + h,this._zLevel,1D,1D);
  tessellator.addVertexWithUV(x + w,y + 0,this._zLevel,1D,0D);
  tessellator.addVertexWithUV(x + 0,y + 0,this._zLevel,0D,0D);
  tessellator.draw();
}",0.9962121212121212
21793,"private void drawItemStack(ItemStack itemstack){
  this.zLevel=100.0F;
  renderItem.zLevel=100.0F;
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240 / 1.0F,240 / 1.0F);
  renderItem.renderItemAndEffectIntoGUI(mc.fontRenderer,mc.renderEngine,itemstack,0,0);
  renderItem.renderItemOverlayIntoGUI(mc.fontRenderer,mc.renderEngine,itemstack,0,0);
  this.zLevel=0.0F;
  renderItem.zLevel=0.0F;
}","private void drawItemStack(ItemStack itemstack){
  this.zLevel=100.0F;
  renderItem.zLevel=100.0F;
  renderItem.renderItemAndEffectIntoGUI(mc.fontRenderer,mc.renderEngine,itemstack,0,0);
  renderItem.renderItemOverlayIntoGUI(mc.fontRenderer,mc.renderEngine,itemstack,0,0);
  this.zLevel=0.0F;
  renderItem.zLevel=0.0F;
}",0.8290155440414507
21794,"private void drawSlots(int x,int y){
  GL11.glPushMatrix();
  ScissorHelper.startScissor(mc,x + 9,y + 7,140,176);
  int ypos=(int)((listHeight - 150) * scrollBar.getScrollValue());
  GL11.glTranslatef(0,-ypos,0);
  for (  GuiFakeSlot slot : itemListSlots) {
    slot.setYOffset(-ypos);
    slot.draw();
  }
  ScissorHelper.endScissor();
  GL11.glPopMatrix();
}","private void drawSlots(int x,int y){
  GL11.glPushMatrix();
  ScissorHelper.startScissor(mc,x + 9,y + 26,140,176);
  int ypos=(int)((listHeight - 150) * scrollBar.getScrollValue());
  GL11.glTranslatef(0,ypos,0);
  for (  GuiFakeSlot slot : itemListSlots) {
    slot.setYOffset(ypos);
    slot.draw();
  }
  ScissorHelper.endScissor();
  GL11.glPopMatrix();
}",0.9930458970792768
21795,"@Override public void handleMouseInput(){
  super.handleMouseInput();
  int i=Mouse.getEventX() * this.width / this.mc.displayWidth;
  int j=this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
  mouseX=i - (width - xSize) / 2;
  mouseY=j - (height - ySize) / 2;
  if (isScrollBarActive() && scrollBar.pointInScrollBar(mouseX,mouseY)) {
    scrollBar.handleMouseInput();
  }
}","@Override public void handleMouseInput(){
  super.handleMouseInput();
  int i=Mouse.getEventX() * this.width / this.mc.displayWidth;
  int j=this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
  mouseX=i - (width - xSize) / 2;
  mouseY=j - (height - ySize) / 2;
  if (isScrollBarActive()) {
    scrollBar.handleMouseInput();
  }
}",0.8921438082556591
21796,"private void drawMicroscopeOverlay(){
  zLevel=401;
  drawTexturedModalRect(eyepieceX,eyepieceY,176,0,54,54);
}","private void drawMicroscopeOverlay(){
  this.zLevel=600F;
  drawTexturedModalRect(eyepieceX,eyepieceY,176,0,54,54);
}",0.956140350877193
21797,"private void drawUnshapedOverlay(){
  zLevel=0;
  drawTexturedModalRect(97,26,176,70,54,54);
}","private void drawUnshapedOverlay(){
  this.zLevel=0;
  drawTexturedModalRect(97,26,176,70,54,54);
}",0.9740932642487048
21798,"@Override public void renderItemAndEffectIntoGUI(FontRenderer fontRenderer,TextureManager textureManager,ItemStack itemStack,int x,int y){
  if (itemStack == null) {
    return;
  }
  Slot slot=microscopeContainer.getSlot(0);
  if (slot.getStack() != null) {
    GL11.glPushMatrix();
    setScissor(microscopeGui.eyepieceX,microscopeGui.eyepieceY,52,52);
    int renderX=microscopeGui.getGuiLeft() + slot.xDisplayPosition;
    int renderY=microscopeGui.getGuiTop() + slot.yDisplayPosition;
    GL11.glTranslatef(renderX,renderY,0.0F);
    GL11.glScalef(3.0F,3.0F,1.0F);
    GL11.glTranslatef(-renderX - 5.3F,-renderY - 5.3F,2.0F);
    super.renderItemAndEffectIntoGUI(fontRenderer,textureManager,slot.getStack(),renderX,renderY);
    stopScissor();
    GL11.glPopMatrix();
  }
  if (itemStack == inventoryPlayer.getItemStack() && microscopeGui.isMouseInMicroscope()) {
    GL11.glPushMatrix();
    setScissor(microscopeGui.eyepieceX,microscopeGui.eyepieceY,52,52);
    int renderX=x;
    int renderY=y;
    GL11.glTranslatef(renderX,renderY,0.0F);
    GL11.glScalef(3.0F,3.0F,1.0F);
    GL11.glTranslatef(-renderX - 5.3F,-renderY - 5.3F,600F);
    super.renderItemAndEffectIntoGUI(fontRenderer,textureManager,itemStack,renderX,renderY);
    stopScissor();
    GL11.glPopMatrix();
  }
}","@Override public void renderItemAndEffectIntoGUI(FontRenderer fontRenderer,TextureManager textureManager,ItemStack itemStack,int x,int y){
  if (itemStack == null) {
    return;
  }
  RenderHelper.enableGUIStandardItemLighting();
  Slot slot=microscopeContainer.getSlot(0);
  if (slot.getStack() != null) {
    GL11.glPushMatrix();
    setScissor(microscopeGui.eyepieceX,microscopeGui.eyepieceY,52,52);
    int renderX=microscopeGui.getGuiLeft() + slot.xDisplayPosition;
    int renderY=microscopeGui.getGuiTop() + slot.yDisplayPosition;
    GL11.glTranslatef(renderX,renderY,0.0F);
    GL11.glScalef(3.0F,3.0F,1.0F);
    GL11.glTranslatef(-renderX - 5.3F,-renderY - 5.3F,2.0F);
    super.renderItemAndEffectIntoGUI(fontRenderer,textureManager,slot.getStack(),renderX,renderY);
    stopScissor();
    GL11.glPopMatrix();
  }
  if (itemStack == inventoryPlayer.getItemStack() && microscopeGui.isMouseInMicroscope()) {
    GL11.glPushMatrix();
    setScissor(microscopeGui.eyepieceX,microscopeGui.eyepieceY,52,52);
    int renderX=x;
    int renderY=y;
    GL11.glTranslatef(renderX,renderY,0.0F);
    GL11.glScalef(3.0F,3.0F,1.0F);
    GL11.glTranslatef(-renderX - 5.3F,-renderY - 5.3F,540F);
    super.renderItemAndEffectIntoGUI(fontRenderer,textureManager,itemStack,renderX,renderY);
    stopScissor();
    GL11.glPopMatrix();
  }
}",0.9801375095492744
21799,"@EventHandler public void init(FMLInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  MinechemRecipes.getInstance().RegisterRecipes();
  MinechemRecipes.getInstance().registerFluidRecipies();
  LogHelper.debug(""String_Node_Str"");
  MinechemItemsRegistration.registerToOreDictionary();
  LogHelper.debug(""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(new PotionCoatingSubscribe());
  LogHelper.debug(""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(new PolytoolEventHandler());
  LogHelper.debug(""String_Node_Str"");
  PROXY.registerHooks();
  LogHelper.debug(""String_Node_Str"");
  PotionInjector.inject();
  LogHelper.debug(""String_Node_Str"");
  CraftingManager.getInstance().getRecipeList().add(new PotionCoatingRecipe());
  LogHelper.debug(""String_Node_Str"");
  CraftingManager.getInstance().getRecipeList().add(new PotionSpikingRecipe());
  LogHelper.debug(""String_Node_Str"");
  GameRegistry.registerWorldGenerator(new MinechemGeneration(),0);
  LogHelper.debug(""String_Node_Str"");
  NetworkRegistry.INSTANCE.registerGuiHandler(this,new GuiHandler());
  LogHelper.debug(""String_Node_Str"");
  PROXY.registerTickHandlers();
  LogHelper.debug(""String_Node_Str"");
  PROXY.registerRenderers();
  LogHelper.debug(""String_Node_Str"");
  MinechemRecipes.getInstance().RegisterModRecipes();
  LogHelper.debug(""String_Node_Str"");
  FluidChemicalDispenser.init();
  ChemicalFluidReactionHandler.initExplodableChemical();
  LogHelper.debug(""String_Node_Str"");
  MinechemItemsRegistration.registerFuelValues();
  if (Loader.isModLoaded(""String_Node_Str"")) {
    LogHelper.debug(""String_Node_Str"");
    MineTweakerAPI.registerClass(Chemicals.class);
    MineTweakerAPI.registerClass(Decomposer.class);
    MineTweakerAPI.registerClass(Synthesiser.class);
    MineTweakerAPI.registerClass(Fuels.class);
  }
}","@EventHandler public void init(FMLInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  MinechemRecipes.getInstance().RegisterRecipes();
  MinechemRecipes.getInstance().registerFluidRecipies();
  LogHelper.debug(""String_Node_Str"");
  MinechemItemsRegistration.registerToOreDictionary();
  LogHelper.debug(""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(new PotionCoatingSubscribe());
  LogHelper.debug(""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(new PolytoolEventHandler());
  LogHelper.debug(""String_Node_Str"");
  PROXY.registerHooks();
  LogHelper.debug(""String_Node_Str"");
  PotionInjector.inject();
  LogHelper.debug(""String_Node_Str"");
  CraftingManager.getInstance().getRecipeList().add(new PotionCoatingRecipe());
  LogHelper.debug(""String_Node_Str"");
  CraftingManager.getInstance().getRecipeList().add(new PotionSpikingRecipe());
  LogHelper.debug(""String_Node_Str"");
  GameRegistry.registerWorldGenerator(new MinechemGeneration(),0);
  LogHelper.debug(""String_Node_Str"");
  NetworkRegistry.INSTANCE.registerGuiHandler(this,new GuiHandler());
  LogHelper.debug(""String_Node_Str"");
  PROXY.registerTickHandlers();
  LogHelper.debug(""String_Node_Str"");
  PROXY.registerRenderers();
  LogHelper.debug(""String_Node_Str"");
  MinechemRecipes.getInstance().RegisterModRecipes();
  LogHelper.debug(""String_Node_Str"");
  FluidChemicalDispenser.init();
  ChemicalFluidReactionHandler.initReaction();
  LogHelper.debug(""String_Node_Str"");
  MinechemItemsRegistration.registerFuelValues();
  if (Loader.isModLoaded(""String_Node_Str"")) {
    LogHelper.debug(""String_Node_Str"");
    MineTweakerAPI.registerClass(Chemicals.class);
    MineTweakerAPI.registerClass(Decomposer.class);
    MineTweakerAPI.registerClass(Synthesiser.class);
    MineTweakerAPI.registerClass(Fuels.class);
  }
}",0.9928610653487095
21800,"@Override public ItemStack dispense(IBlockSource blockSource,ItemStack itemStack){
  EnumFacing enumfacing=BlockDispenser.func_149937_b(blockSource.getBlockMetadata());
  World world=blockSource.getWorld();
  int x=blockSource.getXInt() + enumfacing.getFrontOffsetX();
  int y=blockSource.getYInt() + enumfacing.getFrontOffsetY();
  int z=blockSource.getZInt() + enumfacing.getFrontOffsetZ();
  if (itemStack.getItem() instanceof ElementItem && itemStack.getItemDamage() >= ElementEnum.heaviestMass) {
    Block frontBlock=world.getBlock(x,y,z);
    MinechemChemicalType chemical=MinechemUtil.getChemical(frontBlock);
    if (chemical != null && MinechemUtil.canDrain(world,frontBlock,x,y,z)) {
      ItemStack stack=MinechemUtil.createItemStack(chemical,1);
      if (stack != null) {
        TileEntity tile=world.getTileEntity(x,y,z);
        if (tile instanceof RadiationFluidTileEntity && ((RadiationFluidTileEntity)tile).info != null) {
          ElementItem.setRadiationInfo(((RadiationFluidTileEntity)tile).info,stack);
        }
        TileEntity inventoryTile=blockSource.getBlockTileEntity();
        if (inventoryTile instanceof IInventory) {
          stack=MinechemUtil.addItemToInventory((IInventory)inventoryTile,stack);
        }
        MinechemUtil.throwItemStack(world,stack,x,y,z);
        --itemStack.stackSize;
        world.setBlockToAir(x,y,z);
      }
    }
  }
 else {
    Block block=null;
    RadiationEnum radioactivity=null;
    if (itemStack.getItem() instanceof ElementItem) {
      ElementEnum element=ElementItem.getElement(itemStack);
      block=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(element));
      radioactivity=element.radioactivity();
    }
 else     if (itemStack.getItem() instanceof MoleculeItem) {
      MoleculeEnum molecule=MoleculeEnum.getById(itemStack.getItemDamage());
      block=FluidHelper.moleculeBlocks.get(FluidHelper.molecules.get(molecule));
      radioactivity=molecule.radioactivity();
    }
    if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
      world.func_147480_a(x,y,z,true);
      world.setBlockToAir(x,y,z);
    }
    if (world.isAirBlock(x,y,z) && block != null) {
      world.setBlock(x,y,z,block,0,3);
      --itemStack.stackSize;
      TileEntity tile=world.getTileEntity(x,y,z);
      if (radioactivity != RadiationEnum.stable && tile instanceof RadiationFluidTileEntity) {
        ((RadiationFluidTileEntity)tile).info=ElementItem.getRadiationInfo(itemStack,world);
      }
      ItemStack elementStack=new ItemStack(MinechemItemsRegistration.element,1,ElementEnum.heaviestMass);
      TileEntity inventoryTile=blockSource.getBlockTileEntity();
      if (inventoryTile instanceof IInventory) {
        elementStack=MinechemUtil.addItemToInventory((IInventory)inventoryTile,elementStack);
      }
      MinechemUtil.throwItemStack(world,elementStack,x,y,z);
    }
  }
  return itemStack;
}","@Override public ItemStack dispense(IBlockSource blockSource,ItemStack itemStack){
  EnumFacing enumfacing=BlockDispenser.func_149937_b(blockSource.getBlockMetadata());
  World world=blockSource.getWorld();
  int x=blockSource.getXInt() + enumfacing.getFrontOffsetX();
  int y=blockSource.getYInt() + enumfacing.getFrontOffsetY();
  int z=blockSource.getZInt() + enumfacing.getFrontOffsetZ();
  TileEntity inventoryTile=blockSource.getBlockTileEntity();
  if (itemStack.getItem() instanceof ElementItem && itemStack.getItemDamage() >= ElementEnum.heaviestMass) {
    Block frontBlock=world.getBlock(x,y,z);
    MinechemChemicalType chemical=MinechemUtil.getChemical(frontBlock);
    if (chemical != null && MinechemUtil.canDrain(world,frontBlock,x,y,z)) {
      ItemStack stack=MinechemUtil.createItemStack(chemical,8);
      if (stack != null) {
        if (itemStack.stackSize >= 8) {
          itemStack.stackSize-=8;
        }
 else {
          if (inventoryTile instanceof IInventory) {
            int needs=8 - itemStack.stackSize;
            IInventory inventory=(IInventory)inventoryTile;
            Set<ItemStack> otherTubes=MinechemUtil.findItemStacks(inventory,MinechemItemsRegistration.element,ElementEnum.heaviestMass);
            int free=0;
            otherTubes.remove(itemStack);
            Iterator<ItemStack> it2=otherTubes.iterator();
            while (it2.hasNext()) {
              ItemStack emptyStack=it2.next();
              free+=emptyStack.stackSize;
            }
            if (free < needs) {
              return itemStack;
            }
            itemStack.stackSize=0;
            Iterator<ItemStack> it=otherTubes.iterator();
            while (it.hasNext()) {
              ItemStack emptyStack=it.next();
              if (emptyStack.stackSize >= needs) {
                emptyStack.stackSize-=needs;
                needs=0;
              }
 else {
                needs-=emptyStack.stackSize;
                emptyStack.stackSize=0;
              }
              if (emptyStack.stackSize <= 0) {
                MinechemUtil.removeStackInInventory(inventory,emptyStack);
              }
              if (needs == 0) {
                break;
              }
            }
          }
        }
        TileEntity tile=world.getTileEntity(x,y,z);
        if (tile instanceof RadiationFluidTileEntity && ((RadiationFluidTileEntity)tile).info != null) {
          ElementItem.setRadiationInfo(((RadiationFluidTileEntity)tile).info,stack);
        }
        world.setBlockToAir(x,y,z);
        if (inventoryTile instanceof IInventory) {
          stack=MinechemUtil.addItemToInventory((IInventory)inventoryTile,stack);
        }
        MinechemUtil.throwItemStack(world,stack,x,y,z);
      }
    }
  }
 else {
    IInventory inventory;
    Block block;
    if (inventoryTile instanceof IInventory) {
      inventory=(IInventory)inventoryTile;
    }
 else {
      return itemStack;
    }
    if (itemStack.getItem() instanceof ElementItem) {
      ElementEnum element=ElementItem.getElement(itemStack);
      block=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(element));
    }
 else     if (itemStack.getItem() instanceof MoleculeItem) {
      MoleculeEnum molecule=MoleculeEnum.getById(itemStack.getItemDamage());
      block=FluidHelper.moleculeBlocks.get(FluidHelper.molecules.get(molecule));
    }
 else {
      return itemStack;
    }
    if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
      world.func_147480_a(x,y,z,true);
      world.setBlockToAir(x,y,z);
    }
    if (world.isAirBlock(x,y,z)) {
      RadiationInfo radioactivity=ElementItem.getRadiationInfo(itemStack,world);
      long worldtime=world.getTotalWorldTime();
      long leftTime=radioactivity.radioactivity.getLife() - (worldtime - radioactivity.decayStarted);
      if (itemStack.stackSize >= 8) {
        itemStack.stackSize-=8;
      }
 else {
        int needs=8 - itemStack.stackSize;
        itemStack.stackSize=0;
        Set<ItemStack> otherItemsStacks=MinechemUtil.findItemStacks(inventory,itemStack.getItem(),itemStack.getItemDamage());
        otherItemsStacks.remove(itemStack);
        int free=0;
        Iterator<ItemStack> it2=otherItemsStacks.iterator();
        while (it2.hasNext()) {
          ItemStack stack=it2.next();
          free+=stack.stackSize;
        }
        if (free < needs) {
          return itemStack;
        }
        Iterator<ItemStack> it=otherItemsStacks.iterator();
        while (it.hasNext()) {
          ItemStack stack=it.next();
          RadiationInfo anotherRadiation=ElementItem.getRadiationInfo(stack,world);
          long anotherLeft=anotherRadiation.radioactivity.getLife() - (worldtime - anotherRadiation.decayStarted);
          if (anotherLeft < leftTime) {
            radioactivity=anotherRadiation;
            leftTime=anotherLeft;
          }
          if (stack.stackSize >= needs) {
            stack.stackSize-=needs;
            needs=0;
          }
 else {
            needs-=stack.stackSize;
            stack.stackSize=0;
          }
          if (stack.stackSize <= 0) {
            MinechemUtil.removeStackInInventory(inventory,stack);
          }
          if (needs == 0) {
            break;
          }
        }
      }
      ItemStack empties=MinechemUtil.addItemToInventory(inventory,new ItemStack(MinechemItemsRegistration.element,8,ElementEnum.heaviestMass));
      MinechemUtil.throwItemStack(world,empties,x,y,z);
      world.setBlock(x,y,z,block,0,3);
      TileEntity tile=world.getTileEntity(x,y,z);
      if (radioactivity.isRadioactive() && tile instanceof RadiationFluidTileEntity) {
        ((RadiationFluidTileEntity)tile).info=radioactivity;
      }
    }
    return itemStack;
  }
  return itemStack;
}",0.4031793572169105
21801,"@Override public int getRenderType(){
  return super.getRenderType();
}","@Override public int getRenderType(){
  return RENDER_ID;
}",0.7846153846153846
21802,"@Override public void registerRenderers(){
  RENDER_ID=RenderingRegistry.getNextAvailableRenderId();
  MinechemFluidBlock.RENDER_ID=RenderingRegistry.getNextAvailableRenderId();
  MinecraftForgeClient.registerItemRenderer(MinechemItemsRegistration.element,new ElementItemRenderer());
  MinecraftForgeClient.registerItemRenderer(MinechemItemsRegistration.molecule,new MoleculeItemRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(MinechemBlocksGeneration.microscope),new MicroscopeItemRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(MinechemBlocksGeneration.decomposer),new DecomposerItemRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(MinechemBlocksGeneration.synthesis),new SynthesisItemRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(MinechemBlocksGeneration.blueprintProjector),new BlueprintProjectorItemRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(MinechemBlocksGeneration.leadChest),new LeadedChestItemRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(MicroscopeTileEntity.class,new MicroscopeTileEntityRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(DecomposerTileEntity.class,new DecomposerTileEntityRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(SynthesisTileEntity.class,new SynthesisTileEntityRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(BlueprintProjectorTileEntity.class,new BlueprintProjectorTileEntityRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(LeadedChestTileEntity.class,new LeadedChestTileEntityRenderer());
}","@Override public void registerRenderers(){
  RENDER_ID=RenderingRegistry.getNextAvailableRenderId();
  MinecraftForgeClient.registerItemRenderer(MinechemItemsRegistration.element,new ElementItemRenderer());
  MinecraftForgeClient.registerItemRenderer(MinechemItemsRegistration.molecule,new MoleculeItemRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(MinechemBlocksGeneration.microscope),new MicroscopeItemRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(MinechemBlocksGeneration.decomposer),new DecomposerItemRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(MinechemBlocksGeneration.synthesis),new SynthesisItemRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(MinechemBlocksGeneration.blueprintProjector),new BlueprintProjectorItemRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(MinechemBlocksGeneration.leadChest),new LeadedChestItemRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(MicroscopeTileEntity.class,new MicroscopeTileEntityRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(DecomposerTileEntity.class,new DecomposerTileEntityRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(SynthesisTileEntity.class,new SynthesisTileEntityRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(BlueprintProjectorTileEntity.class,new BlueprintProjectorTileEntityRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(LeadedChestTileEntity.class,new LeadedChestTileEntityRenderer());
}",0.9760795278036656
21803,"@Override public ItemStack dispense(IBlockSource blockSource,ItemStack itemStack){
  EnumFacing enumfacing=BlockDispenser.func_149937_b(blockSource.getBlockMetadata());
  World world=blockSource.getWorld();
  int x=blockSource.getXInt() + enumfacing.getFrontOffsetX();
  int y=blockSource.getYInt() + enumfacing.getFrontOffsetY();
  int z=blockSource.getZInt() + enumfacing.getFrontOffsetZ();
  if (itemStack.getItem() instanceof ElementItem && itemStack.getItemDamage() >= ElementEnum.heaviestMass) {
    Block frontBlock=world.getBlock(x,y,z);
    MinechemChemicalType chemical=MinechemUtil.getChemical(frontBlock);
    if (chemical != null && MinechemUtil.canDrain(world,frontBlock,x,y,z)) {
      ItemStack stack=MinechemUtil.createItemStack(chemical,1);
      if (stack != null) {
        TileEntity tile=world.getTileEntity(x,y,z);
        if (tile instanceof RadiationFluidTileEntity && ((RadiationFluidTileEntity)tile).info != null) {
          ElementItem.setRadiationInfo(((RadiationFluidTileEntity)tile).info,stack);
        }
        TileEntity inventoryTile=blockSource.getBlockTileEntity();
        if (inventoryTile instanceof IInventory) {
          stack=MinechemUtil.addItemToInventory((IInventory)inventoryTile,stack);
        }
        MinechemUtil.throwItemStack(world,stack,x,y,z);
        --itemStack.stackSize;
        world.setBlockToAir(x,y,z);
      }
    }
  }
 else {
    Block block=null;
    RadiationEnum radioactivity=null;
    if (itemStack.getItem() instanceof ElementItem) {
      ElementEnum element=ElementItem.getElement(itemStack);
      block=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(element));
      radioactivity=element.radioactivity();
    }
 else     if (itemStack.getItem() instanceof MoleculeItem) {
      MoleculeEnum molecule=MoleculeEnum.getById(itemStack.getItemDamage());
      block=FluidHelper.moleculeBlocks.get(FluidHelper.molecules.get(molecule));
      radioactivity=molecule.radioactivity();
    }
    if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
      world.func_147480_a(x,y,z,true);
      world.setBlockToAir(x,y,z);
    }
    if (world.isAirBlock(x,y,z) && block != null) {
      world.setBlock(x,y,z,block,0,3);
      --itemStack.stackSize;
      TileEntity tile=world.getTileEntity(x,y,z);
      if (radioactivity != RadiationEnum.stable && tile instanceof RadiationFluidTileEntity) {
        ((RadiationFluidTileEntity)tile).info=ElementItem.getRadiationInfo(itemStack,world);
      }
      ItemStack elementStack=new ItemStack(MinechemItemsRegistration.element,1,ElementEnum.heaviestMass);
      TileEntity inventoryTile=blockSource.getBlockTileEntity();
      if (inventoryTile instanceof IInventory) {
        elementStack=MinechemUtil.addItemToInventory((IInventory)inventoryTile,elementStack);
      }
      MinechemUtil.throwItemStack(world,elementStack,x,y,z);
    }
  }
  return itemStack;
}","@Override public ItemStack dispense(IBlockSource blockSource,ItemStack itemStack){
  EnumFacing enumfacing=BlockDispenser.func_149937_b(blockSource.getBlockMetadata());
  World world=blockSource.getWorld();
  int x=blockSource.getXInt() + enumfacing.getFrontOffsetX();
  int y=blockSource.getYInt() + enumfacing.getFrontOffsetY();
  int z=blockSource.getZInt() + enumfacing.getFrontOffsetZ();
  TileEntity inventoryTile=blockSource.getBlockTileEntity();
  if (itemStack.getItem() instanceof ElementItem && itemStack.getItemDamage() >= ElementEnum.heaviestMass) {
    Block frontBlock=world.getBlock(x,y,z);
    MinechemChemicalType chemical=MinechemUtil.getChemical(frontBlock);
    if (chemical != null && MinechemUtil.canDrain(world,frontBlock,x,y,z)) {
      ItemStack stack=MinechemUtil.createItemStack(chemical,8);
      if (stack != null) {
        if (itemStack.stackSize >= 8) {
          itemStack.stackSize-=8;
        }
 else {
          if (inventoryTile instanceof IInventory) {
            int needs=8 - itemStack.stackSize;
            IInventory inventory=(IInventory)inventoryTile;
            Set<ItemStack> otherTubes=MinechemUtil.findItemStacks(inventory,MinechemItemsRegistration.element,ElementEnum.heaviestMass);
            int free=0;
            otherTubes.remove(itemStack);
            Iterator<ItemStack> it2=otherTubes.iterator();
            while (it2.hasNext()) {
              ItemStack emptyStack=it2.next();
              free+=emptyStack.stackSize;
            }
            if (free < needs) {
              return itemStack;
            }
            itemStack.stackSize=0;
            Iterator<ItemStack> it=otherTubes.iterator();
            while (it.hasNext()) {
              ItemStack emptyStack=it.next();
              if (emptyStack.stackSize >= needs) {
                emptyStack.stackSize-=needs;
                needs=0;
              }
 else {
                needs-=emptyStack.stackSize;
                emptyStack.stackSize=0;
              }
              if (emptyStack.stackSize <= 0) {
                MinechemUtil.removeStackInInventory(inventory,emptyStack);
              }
              if (needs == 0) {
                break;
              }
            }
          }
        }
        TileEntity tile=world.getTileEntity(x,y,z);
        if (tile instanceof RadiationFluidTileEntity && ((RadiationFluidTileEntity)tile).info != null) {
          ElementItem.setRadiationInfo(((RadiationFluidTileEntity)tile).info,stack);
        }
        world.setBlockToAir(x,y,z);
        if (inventoryTile instanceof IInventory) {
          stack=MinechemUtil.addItemToInventory((IInventory)inventoryTile,stack);
        }
        MinechemUtil.throwItemStack(world,stack,x,y,z);
      }
    }
  }
 else {
    IInventory inventory;
    Block block;
    if (inventoryTile instanceof IInventory) {
      inventory=(IInventory)inventoryTile;
    }
 else {
      return itemStack;
    }
    if (itemStack.getItem() instanceof ElementItem) {
      ElementEnum element=ElementItem.getElement(itemStack);
      block=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(element));
    }
 else     if (itemStack.getItem() instanceof MoleculeItem) {
      MoleculeEnum molecule=MoleculeEnum.getById(itemStack.getItemDamage());
      block=FluidHelper.moleculeBlocks.get(FluidHelper.molecules.get(molecule));
    }
 else {
      return itemStack;
    }
    if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
      world.func_147480_a(x,y,z,true);
      world.setBlockToAir(x,y,z);
    }
    if (world.isAirBlock(x,y,z)) {
      RadiationInfo radioactivity=ElementItem.getRadiationInfo(itemStack,world);
      long worldtime=world.getTotalWorldTime();
      long leftTime=radioactivity.radioactivity.getLife() - (worldtime - radioactivity.decayStarted);
      if (itemStack.stackSize >= 8) {
        itemStack.stackSize-=8;
      }
 else {
        int needs=8 - itemStack.stackSize;
        itemStack.stackSize=0;
        Set<ItemStack> otherItemsStacks=MinechemUtil.findItemStacks(inventory,itemStack.getItem(),itemStack.getItemDamage());
        otherItemsStacks.remove(itemStack);
        int free=0;
        Iterator<ItemStack> it2=otherItemsStacks.iterator();
        while (it2.hasNext()) {
          ItemStack stack=it2.next();
          free+=stack.stackSize;
        }
        if (free < needs) {
          return itemStack;
        }
        Iterator<ItemStack> it=otherItemsStacks.iterator();
        while (it.hasNext()) {
          ItemStack stack=it.next();
          RadiationInfo anotherRadiation=ElementItem.getRadiationInfo(stack,world);
          long anotherLeft=anotherRadiation.radioactivity.getLife() - (worldtime - anotherRadiation.decayStarted);
          if (anotherLeft < leftTime) {
            radioactivity=anotherRadiation;
            leftTime=anotherLeft;
          }
          if (stack.stackSize >= needs) {
            stack.stackSize-=needs;
            needs=0;
          }
 else {
            needs-=stack.stackSize;
            stack.stackSize=0;
          }
          if (stack.stackSize <= 0) {
            MinechemUtil.removeStackInInventory(inventory,stack);
          }
          if (needs == 0) {
            break;
          }
        }
      }
      ItemStack empties=MinechemUtil.addItemToInventory(inventory,new ItemStack(MinechemItemsRegistration.element,8,ElementEnum.heaviestMass));
      MinechemUtil.throwItemStack(world,empties,x,y,z);
      world.setBlock(x,y,z,block,0,3);
      TileEntity tile=world.getTileEntity(x,y,z);
      if (radioactivity.isRadioactive() && tile instanceof RadiationFluidTileEntity) {
        ((RadiationFluidTileEntity)tile).info=radioactivity;
      }
    }
    return itemStack;
  }
  return itemStack;
}",0.4031793572169105
21804,"private ItemStack emptyTube(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z){
  if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
    Block sourceBlock=world.getBlock(x,y,z);
    int metadata=world.getBlockMetadata(x,y,z);
    sourceBlock.harvestBlock(world,player,x,y,z,metadata);
    sourceBlock.breakBlock(world,x,y,z,sourceBlock,metadata);
    world.setBlockToAir(x,y,z);
  }
  if (world.isAirBlock(x,y,z)) {
    RadiationEnum radioactivity=ElementEnum.elements.get(itemStack.getItemDamage()).radioactivity();
    if (!player.capabilities.isCreativeMode) {
      if (itemStack.stackSize >= 8) {
        itemStack.stackSize-=8;
      }
 else {
        int needs=8 - itemStack.stackSize;
        itemStack.stackSize=0;
        Set<ItemStack> otherItemsStacks=MinechemUtil.findItemStacks(player.inventory,itemStack.getItem(),itemStack.getItemDamage());
        otherItemsStacks.remove(itemStack);
        int free=0;
        Iterator<ItemStack> it2=otherItemsStacks.iterator();
        while (it2.hasNext()) {
          ItemStack stack=it2.next();
          free+=stack.stackSize;
        }
        if (free < needs) {
          return itemStack;
        }
        Iterator<ItemStack> it=otherItemsStacks.iterator();
        while (it.hasNext()) {
          ItemStack stack=it.next();
          RadiationEnum anotherRadiation=getRadioactivity(stack);
          if (anotherRadiation.getLife() < radioactivity.getLife()) {
            radioactivity=anotherRadiation;
          }
          if (stack.stackSize >= needs) {
            stack.stackSize-=needs;
            needs=0;
            break;
          }
 else {
            needs-=stack.stackSize;
            stack.stackSize=0;
          }
        }
      }
      ItemStack empties=MinechemUtil.addItemToInventory(player.inventory,new ItemStack(MinechemItemsRegistration.element,8,ElementEnum.heaviestMass));
      MinechemUtil.throwItemStack(world,empties,x,y,z);
    }
    Block block=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(getElement(itemStack)));
    world.setBlock(x,y,z,block,0,3);
    TileEntity tile=world.getTileEntity(x,y,z);
    if (radioactivity != RadiationEnum.stable && tile instanceof RadiationFluidTileEntity) {
      ((RadiationFluidTileEntity)tile).info=getRadiationInfo(itemStack,world);
    }
  }
  return itemStack;
}","private ItemStack emptyTube(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z){
  if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
    Block sourceBlock=world.getBlock(x,y,z);
    int metadata=world.getBlockMetadata(x,y,z);
    sourceBlock.harvestBlock(world,player,x,y,z,metadata);
    sourceBlock.breakBlock(world,x,y,z,sourceBlock,metadata);
    world.setBlockToAir(x,y,z);
  }
  if (world.isAirBlock(x,y,z)) {
    RadiationInfo radioactivity=getRadiationInfo(itemStack,world);
    long worldtime=world.getTotalWorldTime();
    long leftTime=radioactivity.radioactivity.getLife() - (worldtime - radioactivity.decayStarted);
    if (!player.capabilities.isCreativeMode) {
      if (itemStack.stackSize >= 8) {
        itemStack.stackSize-=8;
      }
 else {
        int needs=8 - itemStack.stackSize;
        itemStack.stackSize=0;
        Set<ItemStack> otherItemsStacks=MinechemUtil.findItemStacks(player.inventory,itemStack.getItem(),itemStack.getItemDamage());
        otherItemsStacks.remove(itemStack);
        int free=0;
        Iterator<ItemStack> it2=otherItemsStacks.iterator();
        while (it2.hasNext()) {
          ItemStack stack=it2.next();
          free+=stack.stackSize;
        }
        if (free < needs) {
          return itemStack;
        }
        Iterator<ItemStack> it=otherItemsStacks.iterator();
        while (it.hasNext()) {
          ItemStack stack=it.next();
          RadiationInfo anotherRadiation=getRadiationInfo(stack,world);
          long anotherLeft=anotherRadiation.radioactivity.getLife() - (worldtime - anotherRadiation.decayStarted);
          if (anotherLeft < leftTime) {
            radioactivity=anotherRadiation;
            leftTime=anotherLeft;
          }
          if (stack.stackSize >= needs) {
            stack.stackSize-=needs;
            needs=0;
          }
 else {
            needs-=stack.stackSize;
            stack.stackSize=0;
          }
          if (stack.stackSize <= 0) {
            MinechemUtil.removeStackInInventory(player.inventory,stack);
          }
          if (needs == 0) {
            break;
          }
        }
      }
      ItemStack empties=MinechemUtil.addItemToInventory(player.inventory,new ItemStack(MinechemItemsRegistration.element,8,ElementEnum.heaviestMass));
      MinechemUtil.throwItemStack(world,empties,x,y,z);
    }
    Block block=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(getElement(itemStack)));
    world.setBlock(x,y,z,block,0,3);
    TileEntity tile=world.getTileEntity(x,y,z);
    if (radioactivity.isRadioactive() && tile instanceof RadiationFluidTileEntity) {
      ((RadiationFluidTileEntity)tile).info=radioactivity;
    }
  }
  return itemStack;
}",0.7934143473147786
21805,"@Override public ItemStack onItemRightClick(ItemStack itemStack,World world,EntityPlayer player){
  boolean flag=itemStack.getItemDamage() == ElementEnum.heaviestMass;
  MovingObjectPosition movingObjectPosition=this.getMovingObjectPositionFromPlayer(world,player,flag);
  if (!player.capabilities.isCreativeMode && itemStack.stackSize < 8)   MinechemUtil.scanForMoreStacks(itemStack,player);
  if (movingObjectPosition == null || (itemStack.stackSize < 8 && !player.capabilities.isCreativeMode)) {
    return itemStack;
  }
  if (movingObjectPosition.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
    int blockX=movingObjectPosition.blockX;
    int blockY=movingObjectPosition.blockY;
    int blockZ=movingObjectPosition.blockZ;
    Block block=world.getBlock(blockX,blockY,blockZ);
    if (flag) {
      MinechemChemicalType chemical=MinechemUtil.getChemical(block);
      if (chemical != null && MinechemUtil.canDrain(world,block,blockX,blockY,blockZ)) {
        ItemStack stack=MinechemUtil.createItemStack(chemical,1);
        if (stack != null) {
          stack.stackSize=8;
          TileEntity tile=world.getTileEntity(blockX,blockY,blockZ);
          if (tile instanceof RadiationFluidTileEntity && ((RadiationFluidTileEntity)tile).info != null) {
            setRadiationInfo(((RadiationFluidTileEntity)tile).info,stack);
          }
          world.setBlockToAir(blockX,blockY,blockZ);
          world.removeTileEntity(blockX,blockY,blockZ);
          return fillTube(itemStack,player,stack);
        }
      }
    }
 else {
      ForgeDirection dir=ForgeDirection.getOrientation(movingObjectPosition.sideHit);
      blockX+=dir.offsetX;
      blockY+=dir.offsetY;
      blockZ+=dir.offsetZ;
      if (!player.canPlayerEdit(blockX,blockY,blockZ,movingObjectPosition.sideHit,itemStack)) {
        return itemStack;
      }
      return emptyTube(itemStack,player,world,blockX,blockY,blockZ);
    }
  }
  return itemStack;
}","@Override public ItemStack onItemRightClick(ItemStack itemStack,World world,EntityPlayer player){
  boolean flag=itemStack.getItemDamage() == ElementEnum.heaviestMass;
  MovingObjectPosition movingObjectPosition=this.getMovingObjectPositionFromPlayer(world,player,flag);
  if (movingObjectPosition == null || player.capabilities.isCreativeMode) {
    return itemStack;
  }
  if (movingObjectPosition.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
    int blockX=movingObjectPosition.blockX;
    int blockY=movingObjectPosition.blockY;
    int blockZ=movingObjectPosition.blockZ;
    Block block=world.getBlock(blockX,blockY,blockZ);
    if (flag) {
      MinechemChemicalType chemical=MinechemUtil.getChemical(block);
      if (chemical != null && MinechemUtil.canDrain(world,block,blockX,blockY,blockZ)) {
        ItemStack stack=MinechemUtil.createItemStack(chemical,1);
        if (stack != null) {
          stack.stackSize=8;
          TileEntity tile=world.getTileEntity(blockX,blockY,blockZ);
          if (tile instanceof RadiationFluidTileEntity && ((RadiationFluidTileEntity)tile).info != null) {
            setRadiationInfo(((RadiationFluidTileEntity)tile).info,stack);
          }
          world.setBlockToAir(blockX,blockY,blockZ);
          world.removeTileEntity(blockX,blockY,blockZ);
          return fillTube(itemStack,player,stack);
        }
      }
    }
 else {
      ForgeDirection dir=ForgeDirection.getOrientation(movingObjectPosition.sideHit);
      blockX+=dir.offsetX;
      blockY+=dir.offsetY;
      blockZ+=dir.offsetZ;
      if (!player.canPlayerEdit(blockX,blockY,blockZ,movingObjectPosition.sideHit,itemStack)) {
        return itemStack;
      }
      return emptyTube(itemStack,player,world,blockX,blockY,blockZ);
    }
  }
  return itemStack;
}",0.9594017094017094
21806,"private ItemStack emptyTube(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z){
  if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
    Block sourceBlock=world.getBlock(x,y,z);
    int metadata=world.getBlockMetadata(x,y,z);
    sourceBlock.harvestBlock(world,player,x,y,z,metadata);
    sourceBlock.breakBlock(world,x,y,z,sourceBlock,metadata);
    world.setBlockToAir(x,y,z);
  }
  if (world.isAirBlock(x,y,z)) {
    RadiationEnum radioactivity=MoleculeEnum.molecules.get(itemStack.getItemDamage()).radioactivity();
    if (!player.capabilities.isCreativeMode) {
      if (itemStack.stackSize >= 8) {
        itemStack.stackSize-=8;
      }
 else {
        int needs=8 - itemStack.stackSize;
        itemStack.stackSize=0;
        Set<ItemStack> otherItemsStacks=MinechemUtil.findItemStacks(player.inventory,itemStack.getItem(),itemStack.getItemDamage());
        otherItemsStacks.remove(itemStack);
        int free=0;
        Iterator<ItemStack> it2=otherItemsStacks.iterator();
        while (it2.hasNext()) {
          ItemStack stack=it2.next();
          free+=stack.stackSize;
        }
        if (free < needs) {
          return itemStack;
        }
        Iterator<ItemStack> it=otherItemsStacks.iterator();
        while (it.hasNext()) {
          ItemStack stack=it.next();
          RadiationEnum anotherRadiation=ElementItem.getRadioactivity(stack);
          if (anotherRadiation.getLife() < radioactivity.getLife()) {
            radioactivity=anotherRadiation;
          }
          if (stack.stackSize >= needs) {
            stack.stackSize-=needs;
            needs=0;
            break;
          }
 else {
            needs-=stack.stackSize;
            stack.stackSize=0;
          }
        }
      }
      ItemStack empties=MinechemUtil.addItemToInventory(player.inventory,new ItemStack(MinechemItemsRegistration.element,8,ElementEnum.heaviestMass));
      MinechemUtil.throwItemStack(world,empties,x,y,z);
    }
    Block block=FluidHelper.moleculeBlocks.get(FluidHelper.molecules.get(MoleculeEnum.molecules.get(itemStack.getItemDamage())));
    world.setBlock(x,y,z,block,0,3);
    TileEntity tile=world.getTileEntity(x,y,z);
    if (radioactivity != RadiationEnum.stable && tile instanceof RadiationFluidTileEntity) {
      ((RadiationFluidTileEntity)tile).info=ElementItem.getRadiationInfo(itemStack,world);
    }
  }
  return itemStack;
}","private ItemStack emptyTube(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z){
  if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
    Block sourceBlock=world.getBlock(x,y,z);
    int metadata=world.getBlockMetadata(x,y,z);
    sourceBlock.harvestBlock(world,player,x,y,z,metadata);
    sourceBlock.breakBlock(world,x,y,z,sourceBlock,metadata);
    world.setBlockToAir(x,y,z);
  }
  if (world.isAirBlock(x,y,z)) {
    RadiationInfo radioactivity=ElementItem.getRadiationInfo(itemStack,world);
    long worldtime=world.getTotalWorldTime();
    long leftTime=radioactivity.radioactivity.getLife() - (worldtime - radioactivity.decayStarted);
    if (!player.capabilities.isCreativeMode) {
      if (itemStack.stackSize >= 8) {
        itemStack.stackSize-=8;
      }
 else {
        int needs=8 - itemStack.stackSize;
        itemStack.stackSize=0;
        Set<ItemStack> otherItemsStacks=MinechemUtil.findItemStacks(player.inventory,itemStack.getItem(),itemStack.getItemDamage());
        otherItemsStacks.remove(itemStack);
        int free=0;
        Iterator<ItemStack> it2=otherItemsStacks.iterator();
        while (it2.hasNext()) {
          ItemStack stack=it2.next();
          free+=stack.stackSize;
        }
        if (free < needs) {
          return itemStack;
        }
        Iterator<ItemStack> it=otherItemsStacks.iterator();
        while (it.hasNext()) {
          ItemStack stack=it.next();
          RadiationInfo anotherRadiation=ElementItem.getRadiationInfo(stack,world);
          long anotherLeft=anotherRadiation.radioactivity.getLife() - (worldtime - anotherRadiation.decayStarted);
          if (anotherLeft < leftTime) {
            radioactivity=anotherRadiation;
            leftTime=anotherLeft;
          }
          if (stack.stackSize >= needs) {
            stack.stackSize-=needs;
            needs=0;
          }
 else {
            needs-=stack.stackSize;
            stack.stackSize=0;
          }
          if (stack.stackSize <= 0) {
            MinechemUtil.removeStackInInventory(player.inventory,stack);
          }
          if (needs == 0) {
            break;
          }
        }
      }
      ItemStack empties=MinechemUtil.addItemToInventory(player.inventory,new ItemStack(MinechemItemsRegistration.element,8,ElementEnum.heaviestMass));
      MinechemUtil.throwItemStack(world,empties,x,y,z);
    }
    Block block=FluidHelper.moleculeBlocks.get(FluidHelper.molecules.get(MoleculeEnum.molecules.get(itemStack.getItemDamage())));
    world.setBlock(x,y,z,block,0,3);
    TileEntity tile=world.getTileEntity(x,y,z);
    if (radioactivity.isRadioactive() && tile instanceof RadiationFluidTileEntity) {
      ((RadiationFluidTileEntity)tile).info=radioactivity;
    }
  }
  return itemStack;
}",0.5542353392104254
21807,"@Override public ItemStack onItemRightClick(ItemStack itemStack,World world,EntityPlayer player){
  player.setItemInUse(itemStack,getMaxItemUseDuration(itemStack));
  MovingObjectPosition movingObjectPosition=this.getMovingObjectPositionFromPlayer(world,player,false);
  if (!player.capabilities.isCreativeMode && itemStack.stackSize < 8)   MinechemUtil.scanForMoreStacks(itemStack,player);
  if (movingObjectPosition == null || (itemStack.stackSize < 8 && !player.capabilities.isCreativeMode)) {
    return itemStack;
  }
  if (movingObjectPosition.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
    int blockX=movingObjectPosition.blockX;
    int blockY=movingObjectPosition.blockY;
    int blockZ=movingObjectPosition.blockZ;
    ForgeDirection dir=ForgeDirection.getOrientation(movingObjectPosition.sideHit);
    blockX+=dir.offsetX;
    blockY+=dir.offsetY;
    blockZ+=dir.offsetZ;
    if (!player.canPlayerEdit(blockX,blockY,blockZ,movingObjectPosition.sideHit,itemStack)) {
      return itemStack;
    }
    return emptyTube(itemStack,player,world,blockX,blockY,blockZ);
  }
  return itemStack;
}","@Override public ItemStack onItemRightClick(ItemStack itemStack,World world,EntityPlayer player){
  player.setItemInUse(itemStack,getMaxItemUseDuration(itemStack));
  MovingObjectPosition movingObjectPosition=this.getMovingObjectPositionFromPlayer(world,player,false);
  if (movingObjectPosition == null || player.capabilities.isCreativeMode) {
    return itemStack;
  }
  if (movingObjectPosition.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
    int blockX=movingObjectPosition.blockX;
    int blockY=movingObjectPosition.blockY;
    int blockZ=movingObjectPosition.blockZ;
    ForgeDirection dir=ForgeDirection.getOrientation(movingObjectPosition.sideHit);
    blockX+=dir.offsetX;
    blockY+=dir.offsetY;
    blockZ+=dir.offsetZ;
    if (!player.canPlayerEdit(blockX,blockY,blockZ,movingObjectPosition.sideHit,itemStack)) {
      return itemStack;
    }
    return emptyTube(itemStack,player,world,blockX,blockY,blockZ);
  }
  return itemStack;
}",0.9269932756964456
21808,"private ItemStack emptyTube(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z){
  if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
    Block sourceBlock=world.getBlock(x,y,z);
    int metadata=world.getBlockMetadata(x,y,z);
    sourceBlock.harvestBlock(world,player,x,y,z,metadata);
    sourceBlock.breakBlock(world,x,y,z,sourceBlock,metadata);
    world.setBlockToAir(x,y,z);
  }
  if (world.isAirBlock(x,y,z)) {
    Block block=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(getElement(itemStack)));
    world.setBlock(x,y,z,block,0,3);
    RadiationEnum radioactivity=ElementEnum.elements.get(itemStack.getItemDamage()).radioactivity();
    TileEntity tile=world.getTileEntity(x,y,z);
    if (radioactivity != RadiationEnum.stable && tile instanceof RadiationFluidTileEntity) {
      ((RadiationFluidTileEntity)tile).info=getRadiationInfo(itemStack,world);
    }
    if (player.capabilities.isCreativeMode) {
      return itemStack;
    }
 else {
      MinechemUtil.incPlayerInventory(itemStack,-8,player,new ItemStack(MinechemItemsRegistration.element,8,ElementEnum.heaviestMass));
    }
  }
  return itemStack;
}","private ItemStack emptyTube(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z){
  if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
    Block sourceBlock=world.getBlock(x,y,z);
    int metadata=world.getBlockMetadata(x,y,z);
    sourceBlock.harvestBlock(world,player,x,y,z,metadata);
    sourceBlock.breakBlock(world,x,y,z,sourceBlock,metadata);
    world.setBlockToAir(x,y,z);
  }
  if (world.isAirBlock(x,y,z)) {
    RadiationEnum radioactivity=ElementEnum.elements.get(itemStack.getItemDamage()).radioactivity();
    if (!player.capabilities.isCreativeMode) {
      if (itemStack.stackSize >= 8) {
        itemStack.stackSize-=8;
      }
 else {
        int needs=8 - itemStack.stackSize;
        itemStack.stackSize=0;
        Set<ItemStack> otherItemsStacks=MinechemUtil.findItemStacks(player.inventory,itemStack.getItem(),itemStack.getItemDamage());
        otherItemsStacks.remove(itemStack);
        int free=0;
        Iterator<ItemStack> it2=otherItemsStacks.iterator();
        while (it2.hasNext()) {
          ItemStack stack=it2.next();
          free+=stack.stackSize;
        }
        if (free < needs) {
          return itemStack;
        }
        Iterator<ItemStack> it=otherItemsStacks.iterator();
        while (it.hasNext()) {
          ItemStack stack=it.next();
          RadiationEnum anotherRadiation=getRadioactivity(stack);
          if (anotherRadiation.getLife() < radioactivity.getLife()) {
            radioactivity=anotherRadiation;
          }
          if (stack.stackSize >= needs) {
            stack.stackSize-=needs;
            needs=0;
            break;
          }
 else {
            needs-=stack.stackSize;
            stack.stackSize=0;
          }
        }
      }
      ItemStack empties=MinechemUtil.addItemToInventory(player.inventory,new ItemStack(MinechemItemsRegistration.element,8,ElementEnum.heaviestMass));
      MinechemUtil.throwItemStack(world,empties,x,y,z);
    }
    Block block=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(getElement(itemStack)));
    world.setBlock(x,y,z,block,0,3);
    TileEntity tile=world.getTileEntity(x,y,z);
    if (radioactivity != RadiationEnum.stable && tile instanceof RadiationFluidTileEntity) {
      ((RadiationFluidTileEntity)tile).info=getRadiationInfo(itemStack,world);
    }
  }
  return itemStack;
}",0.4796839729119639
21809,"private ItemStack emptyTube(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z){
  if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
    Block sourceBlock=world.getBlock(x,y,z);
    int metadata=world.getBlockMetadata(x,y,z);
    sourceBlock.harvestBlock(world,player,x,y,z,metadata);
    sourceBlock.breakBlock(world,x,y,z,sourceBlock,metadata);
    world.setBlockToAir(x,y,z);
  }
  if (world.isAirBlock(x,y,z)) {
    Block block=FluidHelper.moleculeBlocks.get(FluidHelper.molecules.get(getMolecule(itemStack)));
    world.setBlock(x,y,z,block,0,3);
    RadiationEnum radioactivity=MoleculeEnum.molecules.get(itemStack.getItemDamage()).radioactivity();
    TileEntity tile=world.getTileEntity(x,y,z);
    if (radioactivity != RadiationEnum.stable && tile instanceof RadiationFluidTileEntity) {
      ((RadiationFluidTileEntity)tile).info=ElementItem.getRadiationInfo(itemStack,world);
    }
    if (player.capabilities.isCreativeMode) {
      return itemStack;
    }
 else {
      MinechemUtil.incPlayerInventory(itemStack,-8,player,new ItemStack(MinechemItemsRegistration.element,8,ElementEnum.heaviestMass));
    }
  }
  return itemStack;
}","private ItemStack emptyTube(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z){
  if (!world.isAirBlock(x,y,z) && !world.getBlock(x,y,z).getMaterial().isSolid()) {
    Block sourceBlock=world.getBlock(x,y,z);
    int metadata=world.getBlockMetadata(x,y,z);
    sourceBlock.harvestBlock(world,player,x,y,z,metadata);
    sourceBlock.breakBlock(world,x,y,z,sourceBlock,metadata);
    world.setBlockToAir(x,y,z);
  }
  if (world.isAirBlock(x,y,z)) {
    RadiationEnum radioactivity=MoleculeEnum.molecules.get(itemStack.getItemDamage()).radioactivity();
    if (!player.capabilities.isCreativeMode) {
      if (itemStack.stackSize >= 8) {
        itemStack.stackSize-=8;
      }
 else {
        int needs=8 - itemStack.stackSize;
        itemStack.stackSize=0;
        Set<ItemStack> otherItemsStacks=MinechemUtil.findItemStacks(player.inventory,itemStack.getItem(),itemStack.getItemDamage());
        otherItemsStacks.remove(itemStack);
        int free=0;
        Iterator<ItemStack> it2=otherItemsStacks.iterator();
        while (it2.hasNext()) {
          ItemStack stack=it2.next();
          free+=stack.stackSize;
        }
        if (free < needs) {
          return itemStack;
        }
        Iterator<ItemStack> it=otherItemsStacks.iterator();
        while (it.hasNext()) {
          ItemStack stack=it.next();
          RadiationEnum anotherRadiation=ElementItem.getRadioactivity(stack);
          if (anotherRadiation.getLife() < radioactivity.getLife()) {
            radioactivity=anotherRadiation;
          }
          if (stack.stackSize >= needs) {
            stack.stackSize-=needs;
            needs=0;
            break;
          }
 else {
            needs-=stack.stackSize;
            stack.stackSize=0;
          }
        }
      }
      ItemStack empties=MinechemUtil.addItemToInventory(player.inventory,new ItemStack(MinechemItemsRegistration.element,8,ElementEnum.heaviestMass));
      MinechemUtil.throwItemStack(world,empties,x,y,z);
    }
    Block block=FluidHelper.moleculeBlocks.get(FluidHelper.molecules.get(MoleculeEnum.molecules.get(itemStack.getItemDamage())));
    world.setBlock(x,y,z,block,0,3);
    TileEntity tile=world.getTileEntity(x,y,z);
    if (radioactivity != RadiationEnum.stable && tile instanceof RadiationFluidTileEntity) {
      ((RadiationFluidTileEntity)tile).info=ElementItem.getRadiationInfo(itemStack,world);
    }
  }
  return itemStack;
}",0.4675324675324675
21810,"@Override public ItemStack decrStackSize(int slot,int amount){
  if (slot == kJournal[0]) {
    clearRecipeMatrix();
  }
  if (this.inventory[slot] != null) {
    ItemStack itemstack;
    if (slot == kOutput[0]) {
      int toRemove=amount;
      while (toRemove > 0) {
        if (takeInputStacks()) {
          toRemove--;
        }
 else {
          if (amount == toRemove) {
            return null;
          }
 else {
            ItemStack result=getStackInSlot(slot).copy();
            result.stackSize=(amount - toRemove);
            return result;
          }
        }
      }
    }
    if (this.inventory[slot].stackSize <= amount) {
      itemstack=this.inventory[slot];
      this.inventory[slot]=null;
      return itemstack;
    }
 else {
      itemstack=this.inventory[slot].splitStack(amount);
      if (this.inventory[slot].stackSize == 0) {
        this.inventory[slot]=null;
      }
      return itemstack;
    }
  }
 else {
    return null;
  }
}","@Override public ItemStack decrStackSize(int slot,int amount){
  if (slot == kJournal[0]) {
    clearRecipeMatrix();
  }
  if (this.inventory[slot] != null) {
    ItemStack itemstack;
    if (slot == kOutput[0]) {
      int toRemove=amount;
      while (toRemove > 0) {
        ItemStack result=getStackInSlot(slot).copy();
        if (takeInputStacks()) {
          toRemove-=result.stackSize;
        }
 else {
          if (amount == toRemove) {
            return null;
          }
 else {
            result.stackSize=(amount - toRemove);
            return result;
          }
        }
      }
    }
    if (this.inventory[slot].stackSize <= amount) {
      itemstack=this.inventory[slot];
      this.inventory[slot]=null;
      return itemstack;
    }
 else {
      itemstack=this.inventory[slot].splitStack(amount);
      if (this.inventory[slot].stackSize == 0) {
        this.inventory[slot]=null;
      }
      return itemstack;
    }
  }
 else {
    return null;
  }
}",0.8317948717948718
21811,"public MinechemFluidBlock(MinechemFluid fluid,Material material){
  super(fluid,material);
  setQuantaPerBlock(fluid.getQuanta());
}","public MinechemFluidBlock(MinechemFluid fluid,Material material){
  super(fluid,material);
  setQuantaPerBlock(fluid.getQuanta());
  unlocalizedName=fluid.getUnlocalizedName();
}",0.8516129032258064
21812,"public static String getLongName(ItemStack itemstack){
  int atomicNumber=itemstack.getItemDamage();
  return atomicNumber < ElementEnum.heaviestMass ? elements[atomicNumber].name() : MinechemHelper.getLocalString(""String_Node_Str"");
}","public static String getLongName(ItemStack itemstack){
  int atomicNumber=itemstack.getItemDamage();
  return atomicNumber < ElementEnum.heaviestMass ? MinechemHelper.getLocalString(elements[atomicNumber].getUnlocalizedName()) : MinechemHelper.getLocalString(""String_Node_Str"");
}",0.8932038834951457
21813,"@Override public String getItemStackDisplayName(ItemStack par1ItemStack){
  int itemDamage=par1ItemStack.getItemDamage();
  return MoleculeEnum.getById(itemDamage).name();
}","@Override public String getItemStackDisplayName(ItemStack par1ItemStack){
  int itemDamage=par1ItemStack.getItemDamage();
  return MinechemHelper.getLocalString(MoleculeEnum.getById(itemDamage).getUnlocalizedName());
}",0.8593350383631714
21814,"protected PotionEnchantmentCoated(MoleculeEnum chem,int id){
  super(id,0,EnumEnchantmentType.weapon);
  this.chemical=chem;
  this.setName(chem.name() + ""String_Node_Str"");
  PotionEnchantmentCoated.chemLookup.put(chem,this);
}","protected PotionEnchantmentCoated(MoleculeEnum chem,int id){
  super(id,0,EnumEnchantmentType.weapon);
  this.chemical=chem;
  this.setName(chem.getUnlocalizedName() + ""String_Node_Str"");
  PotionEnchantmentCoated.chemLookup.put(chem,this);
}",0.9659574468085106
21815,"private String getLongName(ItemStack stack){
  Item item=stack.getItem();
  if (item == MinechemItemsRegistration.element) {
    return ElementItem.getLongName(stack);
  }
 else   if (item == MinechemItemsRegistration.molecule) {
    return MoleculeItem.getMolecule(stack).name();
  }
  return ""String_Node_Str"";
}","private String getLongName(ItemStack stack){
  Item item=stack.getItem();
  if (item == MinechemItemsRegistration.element) {
    return ElementItem.getLongName(stack);
  }
 else   if (item == MinechemItemsRegistration.molecule) {
    return MinechemHelper.getLocalString(MoleculeItem.getMolecule(stack).getUnlocalizedName());
  }
  return ""String_Node_Str"";
}",0.826151560178306
21816,"public static String getChemicalName(PotionChemical potionChemical){
  if (potionChemical instanceof Element)   return ((Element)potionChemical).element.name();
 else   return ((Molecule)potionChemical).molecule.name();
}","public static String getChemicalName(PotionChemical potionChemical){
  if (potionChemical instanceof Element)   return getLocalString(((Element)potionChemical).element.name());
 else   return getLocalString(((Molecule)potionChemical).molecule.name());
}",0.9324894514767932
21817,"private void renderItemInEquipped(ItemStack itemstack,ElementEnum element,IIcon testtube,IIcon contents){
  Tessellator tessellator=Tessellator.instance;
  setColorForElement(element);
  ItemRenderer.renderItemIn2D(tessellator,contents.getMaxU(),contents.getMinV(),contents.getMinU(),contents.getMaxV(),contents.getIconWidth(),contents.getIconHeight(),0.0625F);
  GL11.glColor3f(1.0F,1.0F,1.0F);
}","private void renderItemInEquipped(ItemStack itemstack,ElementEnum element,IIcon testtube,IIcon contents){
  Tessellator tessellator=Tessellator.instance;
  setColorForElement(element);
  ItemRenderer.renderItemIn2D(tessellator,contents.getMaxU(),contents.getMinV(),contents.getMinU(),contents.getMaxV(),contents.getIconWidth(),contents.getIconHeight(),0.0625F);
  GL11.glColor3f(1.0F,1.0F,1.0F);
  ItemRenderer.renderItemIn2D(tessellator,testtube.getMaxU(),testtube.getMinV(),testtube.getMinU(),testtube.getMaxV(),testtube.getIconWidth(),testtube.getIconHeight(),0.0625F);
}",0.8177136972193615
21818,"private void renderItemInEquipped(ItemRenderType type,ItemStack itemstack,IIcon testtube,IIcon pass1,IIcon pass2){
  MoleculeEnum molecule=MoleculeItem.getMolecule(itemstack);
  Tessellator tessellator=Tessellator.instance;
  GL11.glColor3f(molecule.red,molecule.green,molecule.blue);
  ItemRenderer.renderItemIn2D(tessellator,pass1.getMaxU(),pass1.getMinV(),pass1.getMinU(),pass1.getMaxV(),pass1.getIconWidth(),pass1.getIconHeight(),0.0625F);
  GL11.glColor3f(molecule.red2,molecule.green2,molecule.blue2);
  ItemRenderer.renderItemIn2D(tessellator,pass2.getMaxU(),pass2.getMinV(),pass2.getMinU(),pass2.getMaxV(),pass2.getIconWidth(),pass2.getIconHeight(),0.0625F);
  GL11.glColor3f(1.0F,1.0F,1.0F);
  ItemRenderer.renderItemIn2D(tessellator,testtube.getMaxU(),testtube.getMinV(),testtube.getMinU(),testtube.getMaxV(),testtube.getIconWidth(),testtube.getIconHeight(),0.0625F);
}","private void renderItemInEquipped(ItemRenderType type,ItemStack itemstack,IIcon testtube,IIcon pass1,IIcon pass2){
  MoleculeEnum molecule=MoleculeItem.getMolecule(itemstack);
  Tessellator tessellator=Tessellator.instance;
  GL11.glScalef(0.7f,0.7f,0.7f);
  GL11.glColor3f(molecule.red,molecule.green,molecule.blue);
  ItemRenderer.renderItemIn2D(tessellator,pass1.getMaxU(),pass1.getMinV(),pass1.getMinU(),pass1.getMaxV(),pass1.getIconWidth(),pass1.getIconHeight(),0.0625F);
  GL11.glColor3f(molecule.red2,molecule.green2,molecule.blue2);
  ItemRenderer.renderItemIn2D(tessellator,pass2.getMaxU(),pass2.getMinV(),pass2.getMinU(),pass2.getMaxV(),pass2.getIconWidth(),pass2.getIconHeight(),0.0625F);
  GL11.glColor3f(1.0F,1.0F,1.0F);
  ItemRenderer.renderItemIn2D(tessellator,testtube.getMaxU(),testtube.getMinV(),testtube.getMinU(),testtube.getMaxV(),testtube.getIconWidth(),testtube.getIconHeight(),0.0625F);
}",0.981574539363484
21819,"private static List<Object> toChemicalsWithAmount(Object[] chemicalsStr){
  List<Object> chemicals=new ArrayList<Object>();
  int pos=0;
  while (pos < chemicalsStr.length) {
    if (chemicalsStr[pos] instanceof Integer) {
      chemicals.add(createChemical(getChemicalType((String)chemicalsStr[pos + 1]),(Integer)chemicalsStr[pos]));
      pos+=2;
    }
 else     if (chemicalsStr[pos] instanceof String) {
      chemicals.add(createChemical(getChemicalType((String)chemicalsStr[pos + 1]),1));
      pos+=1;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  return chemicals;
}","private static List<Object> toChemicalsWithAmount(Object[] chemicalsStr){
  List<Object> chemicals=new ArrayList<Object>();
  int pos=0;
  while (pos < chemicalsStr.length) {
    if (chemicalsStr[pos] instanceof Integer) {
      chemicals.add(createChemical(getChemicalType((String)chemicalsStr[pos + 1]),(Integer)chemicalsStr[pos]));
      pos+=2;
    }
 else     if (chemicalsStr[pos] instanceof String) {
      chemicals.add(createChemical(getChemicalType((String)chemicalsStr[pos]),1));
      pos+=1;
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  return chemicals;
}",0.99673735725938
21820,"private void renderItemInEquipped(ItemRenderType type,ItemStack itemstack,IIcon testtube,IIcon pass1,IIcon pass2){
  MoleculeEnum molecule=MoleculeItem.getMolecule(itemstack);
  Tessellator tessellator=Tessellator.instance;
  GL11.glScalef(0.7f,0.7f,0.7f);
  GL11.glColor3f(molecule.red,molecule.green,molecule.blue);
  ItemRenderer.renderItemIn2D(tessellator,pass1.getMaxU(),pass1.getMinV(),pass1.getMinU(),pass1.getMaxV(),pass1.getIconWidth(),pass1.getIconHeight(),0.0625F);
  GL11.glColor3f(molecule.red2,molecule.green2,molecule.blue2);
  ItemRenderer.renderItemIn2D(tessellator,pass2.getMaxU(),pass2.getMinV(),pass2.getMinU(),pass2.getMaxV(),pass2.getIconWidth(),pass2.getIconHeight(),0.0625F);
  GL11.glColor3f(1.0F,1.0F,1.0F);
  ItemRenderer.renderItemIn2D(tessellator,testtube.getMaxU(),testtube.getMinV(),testtube.getMinU(),testtube.getMaxV(),testtube.getIconWidth(),testtube.getIconHeight(),0.0625F);
}","private void renderItemInEquipped(ItemRenderType type,ItemStack itemstack,IIcon testtube,IIcon pass1,IIcon pass2){
  MoleculeEnum molecule=MoleculeItem.getMolecule(itemstack);
  Tessellator tessellator=Tessellator.instance;
  GL11.glColor3f(molecule.red,molecule.green,molecule.blue);
  ItemRenderer.renderItemIn2D(tessellator,pass1.getMaxU(),pass1.getMinV(),pass1.getMinU(),pass1.getMaxV(),pass1.getIconWidth(),pass1.getIconHeight(),0.0625F);
  GL11.glColor3f(molecule.red2,molecule.green2,molecule.blue2);
  ItemRenderer.renderItemIn2D(tessellator,pass2.getMaxU(),pass2.getMinV(),pass2.getMinU(),pass2.getMaxV(),pass2.getIconWidth(),pass2.getIconHeight(),0.0625F);
  GL11.glColor3f(1.0F,1.0F,1.0F);
  ItemRenderer.renderItemIn2D(tessellator,testtube.getMaxU(),testtube.getMinV(),testtube.getMinU(),testtube.getMaxV(),testtube.getIconWidth(),testtube.getIconHeight(),0.0625F);
}",0.981574539363484
21821,"@Override public ItemStack getOutputStack(){
  return new ItemStack(MinechemItemsRegistration.element,0,element.ordinal());
}","@Override public ItemStack getOutputStack(){
  return new ItemStack(MinechemItemsRegistration.element,1,element.ordinal());
}",0.992
21822,"public static Vector<Vector3> findAvailableSpacesAtCrossSection(World world,int centerX,int centerY,int centerZ,int size){
  Vector<Vector3> spaces=new Vector<Vector3>();
  for (int xOffset=-size; xOffset <= size; xOffset++) {
    for (int zOffset=-size; zOffset <= size; zOffset++) {
      int x=centerX + xOffset;
      int z=centerZ + zOffset;
      if (world.isAirBlock(x,centerY,z) || !world.getBlock(x,centerY,z).getMaterial().isSolid()) {
        spaces.add(new Vector3(x,centerY,z));
      }
    }
  }
  return spaces;
}","public static List<CoordTuple> findAvailableSpacesAtCrossSection(World world,int centerX,int centerY,int centerZ,int size){
  List<CoordTuple> spaces=new ArrayList<CoordTuple>();
  for (int xOffset=-size; xOffset <= size; xOffset++) {
    for (int zOffset=-size; zOffset <= size; zOffset++) {
      int x=centerX + xOffset;
      int z=centerZ + zOffset;
      if (world.isAirBlock(x,centerY,z) || !world.getBlock(x,centerY,z).getMaterial().isSolid()) {
        spaces.add(new CoordTuple(x,centerY,z));
      }
    }
  }
  return spaces;
}",0.9034676663542645
21823,"private static void explosionReaction(World world,Entity entity,int x,int y,int z,ChemicalFluidReactionRule rule,boolean popFlowingFluid){
  ChemicalFluidReactionOutput output=reactionRules.get(rule);
  if (output == null) {
    return;
  }
  if (output.explosionLevel != Float.NaN) {
    world.createExplosion(null,x,y,z,output.explosionLevel,true);
  }
  int foundVectors=0;
  Vector[] availableSpaces=new Vector[3];
  for (int i=0; i < availableSpaces.length; i++) {
    availableSpaces[i]=findAvailableSpacesAtCrossSection(world,x,y - 1 + i,z,1);
    foundVectors+=availableSpaces[i].size();
  }
  int needVectors=output.outputs.size();
  Iterator<MinechemChemicalType> it=output.outputs.keySet().iterator();
  while (it.hasNext() && needVectors > 0 && foundVectors > 0) {
    MinechemChemicalType chemical=it.next();
    boolean isGas=chemical.roomState().isGas();
    if (ran.nextFloat() <= output.outputs.get(chemical)) {
      Vector3 vector=null;
      if (isGas) {
        for (int i=availableSpaces.length - 1; i > -1; i--) {
          if (!availableSpaces[i].isEmpty()) {
            vector=(Vector3)availableSpaces[i].remove(availableSpaces[i].size() - 1);
            break;
          }
        }
      }
 else {
        for (int i=0; i < availableSpaces.length; i++) {
          if (!availableSpaces[i].isEmpty()) {
            vector=(Vector3)availableSpaces[i].remove(availableSpaces[i].size() - 1);
            break;
          }
        }
      }
      if (vector == null) {
        ItemStack itemStack=MinechemUtil.createItemStack(chemical,1);
        MinechemUtil.throwItemStack(world,itemStack,x,y,z);
      }
 else {
        int px=vector.intX();
        int py=vector.intY();
        int pz=vector.intZ();
        world.func_147480_a(px,py,pz,true);
        world.setBlockToAir(px,py,pz);
        Block fluidBlock=null;
        if (chemical instanceof ElementEnum) {
          fluidBlock=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(chemical));
        }
 else         if (chemical instanceof MoleculeEnum) {
          fluidBlock=FluidHelper.moleculeBlocks.get(FluidHelper.molecule.get(chemical));
        }
        if (fluidBlock != null) {
          world.setBlock(px,py,pz,fluidBlock,popFlowingFluid ? 1 : 0,3);
        }
      }
    }
  }
}","private static void explosionReaction(World world,Entity entity,int x,int y,int z,ChemicalFluidReactionRule rule,boolean popFlowingFluid){
  ChemicalFluidReactionOutput output=reactionRules.get(rule);
  if (output == null) {
    return;
  }
  if (output.explosionLevel != Float.NaN) {
    world.createExplosion(null,x,y,z,output.explosionLevel,true);
  }
  int foundSpaces=0;
  int halfSpace=FLUIDS_GENERATE_SPACE / 2;
  List[] availableSpaces=new List[FLUIDS_GENERATE_SPACE];
  for (int i=0; i < availableSpaces.length; i++) {
    availableSpaces[i]=findAvailableSpacesAtCrossSection(world,x,y - halfSpace + i,z,1);
    foundSpaces+=availableSpaces[i].size();
  }
  int needSpaces=output.outputs.size();
  Iterator<MinechemChemicalType> it=output.outputs.iterator();
  while (it.hasNext() && needSpaces > 0 && foundSpaces > 0) {
    MinechemChemicalType chemical=it.next();
    boolean isGas=chemical.roomState().isGas();
    CoordTuple coords=null;
    if (isGas) {
      for (int i=availableSpaces.length - 1; i > -1; i--) {
        if (!availableSpaces[i].isEmpty()) {
          coords=(CoordTuple)availableSpaces[i].remove(availableSpaces[i].size() - 1);
          break;
        }
      }
    }
 else {
      for (int i=0; i < availableSpaces.length; i++) {
        if (!availableSpaces[i].isEmpty()) {
          coords=(CoordTuple)availableSpaces[i].remove(availableSpaces[i].size() - 1);
          break;
        }
      }
    }
    if (coords == null) {
      ItemStack itemStack=MinechemUtil.createItemStack(chemical,1);
      MinechemUtil.throwItemStack(world,itemStack,x,y,z);
    }
 else {
      int px=coords.getX();
      int py=coords.getY();
      int pz=coords.getZ();
      world.func_147480_a(px,py,pz,true);
      world.setBlockToAir(px,py,pz);
      Block fluidBlock=null;
      if (chemical instanceof ElementEnum) {
        fluidBlock=FluidHelper.elementsBlocks.get(FluidHelper.elements.get(chemical));
      }
 else       if (chemical instanceof MoleculeEnum) {
        fluidBlock=FluidHelper.moleculeBlocks.get(FluidHelper.molecule.get(chemical));
      }
      if (fluidBlock != null) {
        world.setBlock(px,py,pz,fluidBlock,popFlowingFluid ? 1 : 0,3);
      }
    }
  }
}",0.7744813740798573
21824,"public static void initExplodableChemical(){
  Map<MinechemChemicalType,Float> map;
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(ElementEnum.H,1f);
  map.put(MoleculeEnum.lithiumHydroxide,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.Li),new ChemicalFluidReactionOutput(map,0.1f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(ElementEnum.H,1f);
  map.put(MoleculeEnum.sodiumHydroxide,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.Na),new ChemicalFluidReactionOutput(map,0.15f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(ElementEnum.H,1f);
  map.put(MoleculeEnum.potassiumHydroxide,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.K),new ChemicalFluidReactionOutput(map,0.2f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(ElementEnum.H,1f);
  map.put(MoleculeEnum.rubidiumHydroxide,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.Rb),new ChemicalFluidReactionOutput(map,0.25f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(ElementEnum.H,1f);
  map.put(MoleculeEnum.cesiumHydroxide,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.Cs),new ChemicalFluidReactionOutput(map,0.3f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(ElementEnum.H,1f);
  map.put(MoleculeEnum.franciumHydroxide,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.Fr),new ChemicalFluidReactionOutput(map,0.4f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(ElementEnum.H,1f);
  map.put(ElementEnum.H,1f);
  map.put(MoleculeEnum.lightbluePigment,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.sulfuricAcid,ElementEnum.Cu),new ChemicalFluidReactionOutput(map,0.1f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(ElementEnum.H,1f);
  map.put(ElementEnum.H,1f);
  map.put(MoleculeEnum.sulfurDioxide,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.sulfuricAcid,ElementEnum.S),new ChemicalFluidReactionOutput(map,0.1f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(ElementEnum.S,1f);
  map.put(MoleculeEnum.sulfurDioxide,1f);
  map.put(MoleculeEnum.water,1f);
  map.put(MoleculeEnum.water,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.sulfuricAcid,MoleculeEnum.hydrogenSulfide),new ChemicalFluidReactionOutput(map,0.1f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(MoleculeEnum.salt,1f);
  map.put(MoleculeEnum.water,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.hcl,MoleculeEnum.sodiumHydroxide),new ChemicalFluidReactionOutput(map,0.1f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(MoleculeEnum.hcl,1f);
  reactionRules.put(new ChemicalFluidReactionRule(ElementEnum.H,ElementEnum.Cl),new ChemicalFluidReactionOutput(map,0.1f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(MoleculeEnum.sodiumBisulfate,1f);
  map.put(MoleculeEnum.hcl,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.salt,MoleculeEnum.sulfuricAcid),new ChemicalFluidReactionOutput(map,0.1f));
  map=new HashMap<MinechemChemicalType,Float>();
  map.put(MoleculeEnum.sodiumSulfate,1f);
  map.put(MoleculeEnum.hcl,1f);
  map.put(MoleculeEnum.hcl,1f);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.salt,MoleculeEnum.sodiumBisulfate),new ChemicalFluidReactionOutput(map,0.1f));
}","public static void initExplodableChemical(){
  List<MinechemChemicalType> map;
  map=new ArrayList<MinechemChemicalType>();
  map.add(ElementEnum.H);
  map.add(MoleculeEnum.lithiumHydroxide);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.Li),new ChemicalFluidReactionOutput(map,0.1f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(ElementEnum.H);
  map.add(MoleculeEnum.sodiumHydroxide);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.Na),new ChemicalFluidReactionOutput(map,0.15f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(ElementEnum.H);
  map.add(MoleculeEnum.potassiumHydroxide);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.K),new ChemicalFluidReactionOutput(map,0.2f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(ElementEnum.H);
  map.add(MoleculeEnum.rubidiumHydroxide);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.Rb),new ChemicalFluidReactionOutput(map,0.25f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(ElementEnum.H);
  map.add(MoleculeEnum.cesiumHydroxide);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.Cs),new ChemicalFluidReactionOutput(map,0.3f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(ElementEnum.H);
  map.add(MoleculeEnum.franciumHydroxide);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.water,ElementEnum.Fr),new ChemicalFluidReactionOutput(map,0.4f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(ElementEnum.H);
  map.add(ElementEnum.H);
  map.add(MoleculeEnum.lightbluePigment);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.sulfuricAcid,ElementEnum.Cu),new ChemicalFluidReactionOutput(map,0.1f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(ElementEnum.H);
  map.add(ElementEnum.H);
  map.add(MoleculeEnum.sulfurDioxide);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.sulfuricAcid,ElementEnum.S),new ChemicalFluidReactionOutput(map,0.1f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(ElementEnum.S);
  map.add(MoleculeEnum.sulfurDioxide);
  map.add(MoleculeEnum.water);
  map.add(MoleculeEnum.water);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.sulfuricAcid,MoleculeEnum.hydrogenSulfide),new ChemicalFluidReactionOutput(map,0.1f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(MoleculeEnum.salt);
  map.add(MoleculeEnum.water);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.hcl,MoleculeEnum.sodiumHydroxide),new ChemicalFluidReactionOutput(map,0.1f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(MoleculeEnum.hcl);
  reactionRules.put(new ChemicalFluidReactionRule(ElementEnum.H,ElementEnum.Cl),new ChemicalFluidReactionOutput(map,0.1f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(MoleculeEnum.sodiumBisulfate);
  map.add(MoleculeEnum.hcl);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.salt,MoleculeEnum.sulfuricAcid),new ChemicalFluidReactionOutput(map,0.1f));
  map=new ArrayList<MinechemChemicalType>();
  map.add(MoleculeEnum.sodiumSulfate);
  map.add(MoleculeEnum.hcl);
  map.add(MoleculeEnum.hcl);
  reactionRules.put(new ChemicalFluidReactionRule(MoleculeEnum.salt,MoleculeEnum.sodiumBisulfate),new ChemicalFluidReactionOutput(map,0.1f));
}",0.2329816447463506
21825,"/** 
 * The key of outputs is a chemical, the value of outputs is chance. If explosionLevel==Float.NaN, then it will not explode.
 * @param outputs
 * @param explosionLevel
 */
public ChemicalFluidReactionOutput(Map<MinechemChemicalType,Float> outputs,float explosionLevel){
  this.outputs=outputs;
  this.explosionLevel=explosionLevel;
}","/** 
 * If explosionLevel==Float.NaN, then it will not explode.
 * @param outputs
 * @param explosionLevel
 */
public ChemicalFluidReactionOutput(List<MinechemChemicalType> outputs,float explosionLevel){
  this.outputs=outputs;
  this.explosionLevel=explosionLevel;
}",0.8694214876033057
21826,"public List<ItemStack> getStorageInventory(){
  if (Settings.decaySafeMachines) {
    return new ArrayList<ItemStack>();
  }
 else {
    List<ItemStack> storageInventory=new ArrayList<ItemStack>();
    for (int slot=0; slot < 27; slot++) {
      ItemStack stack=getSlot(slot).getStack();
      if (stack != null) {
        storageInventory.add(stack);
      }
    }
    return storageInventory;
  }
}","@Override public List<ItemStack> getStorageInventory(){
  if (Settings.decaySafeMachines) {
    return new ArrayList<ItemStack>();
  }
 else {
    List<ItemStack> storageInventory=new ArrayList<ItemStack>();
    for (int slot=0; slot < 27; slot++) {
      ItemStack stack=getSlot(slot).getStack();
      if (stack != null) {
        storageInventory.add(stack);
      }
    }
    return storageInventory;
  }
}",0.9876543209876544
21827,"public List<ItemStack> getPlayerInventory(){
  if (Settings.decaySafeMachines) {
    List<ItemStack> inv=new ArrayList<ItemStack>();
    for (int slot=0; slot < this.inventorySlots.size(); slot++) {
      ItemStack stack=getSlot(slot).getStack();
      if (stack != null) {
        inv.add(stack);
      }
    }
    return inv;
  }
 else {
    List<ItemStack> playerInventory=new ArrayList<ItemStack>();
    for (int slot=27; slot < this.inventorySlots.size(); slot++) {
      ItemStack stack=getSlot(slot).getStack();
      if (stack != null) {
        playerInventory.add(stack);
      }
    }
    return playerInventory;
  }
}","@Override public List<ItemStack> getPlayerInventory(){
  if (Settings.decaySafeMachines) {
    List<ItemStack> inv=new ArrayList<ItemStack>();
    for (int slot=0; slot < this.inventorySlots.size(); slot++) {
      ItemStack stack=getSlot(slot).getStack();
      if (stack != null) {
        inv.add(stack);
      }
    }
    return inv;
  }
 else {
    List<ItemStack> playerInventory=new ArrayList<ItemStack>();
    for (int slot=27; slot < this.inventorySlots.size(); slot++) {
      ItemStack stack=getSlot(slot).getStack();
      if (stack != null) {
        playerInventory.add(stack);
      }
    }
    return playerInventory;
  }
}",0.9921135646687698
21828,"public List<ItemStack> getStorageInventory(){
  List<ItemStack> storageInventory=new ArrayList<ItemStack>();
  for (int slot=0; slot < 27; slot++) {
    ItemStack stack=getSlot(slot).getStack();
    if (stack != null) {
      storageInventory.add(stack);
    }
  }
  return storageInventory;
}","@Override public List<ItemStack> getStorageInventory(){
  List<ItemStack> storageInventory=new ArrayList<ItemStack>();
  for (int slot=0; slot < 27; slot++) {
    ItemStack stack=getSlot(slot).getStack();
    if (stack != null) {
      storageInventory.add(stack);
    }
  }
  return storageInventory;
}",0.9832214765100672
21829,"public List<ItemStack> getPlayerInventory(){
  List<ItemStack> playerInventory=new ArrayList<ItemStack>();
  for (int slot=27; slot < this.inventorySlots.size(); slot++) {
    ItemStack stack=getSlot(slot).getStack();
    if (stack != null) {
      playerInventory.add(stack);
    }
  }
  return playerInventory;
}","@Override public List<ItemStack> getPlayerInventory(){
  List<ItemStack> playerInventory=new ArrayList<ItemStack>();
  for (int slot=27; slot < this.inventorySlots.size(); slot++) {
    ItemStack stack=getSlot(slot).getStack();
    if (stack != null) {
      playerInventory.add(stack);
    }
  }
  return playerInventory;
}",0.9843260188087776
21830,"public List<ItemStack> getPlayerInventory(){
  List<ItemStack> playerInventory=new ArrayList<ItemStack>();
  for (int slot=27; slot < this.inventorySlots.size(); slot++) {
    ItemStack stack=getSlot(slot).getStack();
    if (stack != null) {
      playerInventory.add(stack);
    }
  }
  return playerInventory;
}","@Override public List<ItemStack> getPlayerInventory(){
  List<ItemStack> playerInventory=new ArrayList<ItemStack>();
  for (int slot=27; slot < this.inventorySlots.size(); slot++) {
    ItemStack stack=getSlot(slot).getStack();
    if (stack != null) {
      playerInventory.add(stack);
    }
  }
  return playerInventory;
}",0.9843260188087776
21831,"public List<ItemStack> getStorageInventory(){
  List<ItemStack> storageInventory=new ArrayList<ItemStack>();
  for (int slot=0; slot < 27; slot++) {
    ItemStack stack=getSlot(slot).getStack();
    if (stack != null) {
      storageInventory.add(stack);
    }
  }
  return storageInventory;
}","@Override public List<ItemStack> getStorageInventory(){
  List<ItemStack> storageInventory=new ArrayList<ItemStack>();
  for (int slot=0; slot < 27; slot++) {
    ItemStack stack=getSlot(slot).getStack();
    if (stack != null) {
      storageInventory.add(stack);
    }
  }
  return storageInventory;
}",0.9832214765100672
21832,"@Override public IMessage onMessage(ChemistJournalActiveItemMessage message,MessageContext ctx){
  ItemStack journal=ctx.getServerHandler().playerEntity.inventory.mainInventory[this.slot];
  if (journal != null && journal.getItem() == MinechemItemsRegistration.journal) {
    ItemStack activeStack=new ItemStack(Item.getItemById(message.itemID),1,message.itemDMG);
    MinechemItemsRegistration.journal.setActiveStack(activeStack,journal);
  }
  return null;
}","@Override public IMessage onMessage(ChemistJournalActiveItemMessage message,MessageContext ctx){
  ItemStack journal=ctx.getServerHandler().playerEntity.inventory.mainInventory[message.slot];
  if (journal != null && journal.getItem() == MinechemItemsRegistration.journal) {
    ItemStack activeStack=new ItemStack(Item.getItemById(message.itemID),1,message.itemDMG);
    MinechemItemsRegistration.journal.setActiveStack(activeStack,journal);
  }
  return null;
}",0.9880823401950164
21833,"@Override public void updateEntity(){
  super.updateEntity();
  if (!completeStructure) {
    return;
  }
  if (!worldObj.isRemote && worldObj.getTotalWorldTime() % 50 == 0 && energyUpdateTracker.markTimeIfDelay(worldObj,Constants.TICKS_PER_SECOND * 2)) {
    if (inventory[kStartInput] != null) {
      ItemStack fissionResult=getFissionOutput();
      if (inventory[kOutput[0]] == null || (inventory[kOutput[0]].stackSize < 64 && fissionResult != null && fissionResult.getItem() == inventory[kOutput[0]].getItem() && fissionResult.getItemDamage() == inventory[kOutput[0]].getItemDamage() && !worldObj.isRemote)) {
        if (useEnergy(getEnergyNeeded())) {
          addToOutput(fissionResult);
          removeInputs();
        }
      }
      fissionResult=getFissionOutput();
    }
  }
  if (!worldObj.isRemote) {
    FissionUpdateMessage message=new FissionUpdateMessage(this);
    MessageHandler.INSTANCE.sendToAllAround(message,new NetworkRegistry.TargetPoint(worldObj.provider.dimensionId,this.xCoord,this.yCoord,this.zCoord,Settings.UpdateRadius));
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!completeStructure) {
    return;
  }
  if (!worldObj.isRemote) {
    if (inventory[kStartInput] != null) {
      ItemStack fissionResult=getFissionOutput();
      if (fissionResult != null && (inventory[kOutput[0]] == null || (inventory[kOutput[0]].stackSize < 64 && fissionResult.getItem() == inventory[kOutput[0]].getItem() && fissionResult.getItemDamage() == inventory[kOutput[0]].getItemDamage()))) {
        if (useEnergy(getEnergyNeeded())) {
          addToOutput(fissionResult);
          removeInputs();
        }
      }
    }
    FissionUpdateMessage message=new FissionUpdateMessage(this);
    MessageHandler.INSTANCE.sendToAllAround(message,new NetworkRegistry.TargetPoint(worldObj.provider.dimensionId,this.xCoord,this.yCoord,this.zCoord,Settings.UpdateRadius));
  }
}",0.7797494780793319
21834,"private ItemStack getFissionOutput(){
  if (hasInputs()) {
    int mass=inventory[kInput[0]].getItemDamage() + 1;
    int newMass=mass / 2;
    if (newMass > 1) {
      return new ItemStack(MinechemItemsRegistration.element,2,newMass - 1);
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}","private ItemStack getFissionOutput(){
  if (hasInputs()) {
    int mass=inventory[kInput[0]].getItemDamage() + 1;
    int newMass=mass / 2;
    if (newMass > 0) {
      return new ItemStack(MinechemItemsRegistration.element,2,newMass - 1);
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}",0.9968051118210862
21835,"@Override public TileEntity createTileEntity(World world,int metadata){
  if (metadata == 2) {
    return new FusionTileEntity();
  }
  if (metadata == 3) {
    return new FissionTileEntity();
  }
 else {
    return new TileEntityProxy(Settings.energyPacketSize);
  }
}","@Override public TileEntity createTileEntity(World world,int metadata){
  if (metadata == 2) {
    return new FusionTileEntity();
  }
  if (metadata == 3) {
    return new FissionTileEntity();
  }
 else {
    return new TileEntityProxy();
  }
}",0.9512670565302144
21836,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float par7,float par8,float par9){
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity == null || entityPlayer.isSneaking()) {
    return false;
  }
  if (!world.isRemote) {
    entityPlayer.openGui(Minechem.INSTANCE,0,world,x,y,z);
  }
  return true;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer entityPlayer,int side,float par7,float par8,float par9){
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  if (tileEntity == null) {
    return false;
  }
  if (!world.isRemote) {
    entityPlayer.openGui(Minechem.INSTANCE,0,world,x,y,z);
  }
  return true;
}",0.96
21837,"@Override public TileEntity createNewTileEntity(World world,int i){
  return new TileEntityProxy(Settings.energyPacketSize);
}","@Override public TileEntity createNewTileEntity(World world,int i){
  return new TileEntityProxy();
}",0.8898678414096917
21838,"public TileEntityProxy(int maxEnergy){
  super(maxEnergy);
}","public TileEntityProxy(){
  super(Settings.energyPacketSize);
}",0.6991869918699187
21839,"private TileEntity buildManagerBlock(LocalPosition position){
  BlueprintBlock managerBlock=blueprint.getManagerBlock();
  if (managerBlock != null) {
    Pos3 worldPos=position.getLocalPos(blueprint.getManagerPosX(),blueprint.getManagerPosY(),blueprint.getManagerPosZ());
    worldObj.setBlock(worldPos.x,worldPos.y,worldPos.z,managerBlock.block,managerBlock.metadata,3);
    if (this.blueprint == MinechemBlueprint.fusion) {
      FusionTileEntity fusion=new FusionTileEntity();
      fusion.setWorldObj(this.worldObj);
      fusion.xCoord=worldPos.x;
      fusion.yCoord=worldPos.y;
      fusion.zCoord=worldPos.z;
      fusion.blockType=MinechemBlocksGeneration.fusion;
      worldObj.addTileEntity(fusion);
    }
    return worldObj.getTileEntity(worldPos.x,worldPos.y,worldPos.z);
  }
 else {
    return null;
  }
}","private TileEntity buildManagerBlock(LocalPosition position){
  BlueprintBlock managerBlock=blueprint.getManagerBlock();
  if (managerBlock != null) {
    Pos3 worldPos=position.getLocalPos(blueprint.getManagerPosX(),blueprint.getManagerPosY(),blueprint.getManagerPosZ());
    worldObj.setBlock(worldPos.x,worldPos.y,worldPos.z,managerBlock.block,managerBlock.metadata,3);
    if (this.blueprint == MinechemBlueprint.fusion && worldObj.getTileEntity(worldPos.x,worldPos.y,worldPos.z) == null) {
      FusionTileEntity fusion=new FusionTileEntity();
      fusion.setWorldObj(this.worldObj);
      fusion.xCoord=worldPos.x;
      fusion.yCoord=worldPos.y;
      fusion.zCoord=worldPos.z;
      fusion.blockType=MinechemBlocksGeneration.fusion;
      worldObj.addTileEntity(fusion);
    }
    return worldObj.getTileEntity(worldPos.x,worldPos.y,worldPos.z);
  }
 else {
    return null;
  }
}",0.960233918128655
21840,"@Override public void updateEntity(){
  super.updateEntity();
  if (!completeStructure) {
    return;
  }
  if (!worldObj.isRemote) {
    if (!canProcess) {
      if (this.getEnergyNeeded() < this.getEnergyStored() && inputsCanBeFused() && canOutput()) {
        canProcess=true;
      }
    }
    if (canProcess && this.useEnergy(1)) {
      fuseInputs();
      removeInputs();
      canProcess=false;
    }
 else {
      fusedResult=0;
    }
    FusionUpdateMessage message=new FusionUpdateMessage(this);
    MessageHandler.INSTANCE.sendToAllAround(message,new NetworkRegistry.TargetPoint(worldObj.provider.dimensionId,this.xCoord,this.yCoord,this.zCoord,Settings.UpdateRadius));
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!completeStructure) {
    return;
  }
  if (!worldObj.isRemote) {
    if (!canProcess) {
      if (this.getEnergyNeeded() < this.getEnergyStored() && inputsCanBeFused() && canOutput()) {
        canProcess=true;
      }
    }
    if (canProcess && this.useEnergy(this.getEnergyNeeded())) {
      fuseInputs();
      removeInputs();
      canProcess=false;
    }
 else {
      fusedResult=0;
    }
    FusionUpdateMessage message=new FusionUpdateMessage(this);
    MessageHandler.INSTANCE.sendToAllAround(message,new NetworkRegistry.TargetPoint(worldObj.provider.dimensionId,this.xCoord,this.yCoord,this.zCoord,Settings.UpdateRadius));
  }
}",0.9835125448028674
21841,"@Override public int getEnergyNeeded(){
  if (inventory[inputLeft] != null && inventory[inputRight] != null && this.inputsCanBeFused())   return (inventory[inputLeft].getItemDamage() + inventory[inputRight].getItemDamage() + 2) * Settings.fusionMultiplier;
  return 0;
}","@Override public int getEnergyNeeded(){
  if (inventory[inputLeft] != null && inventory[inputRight] != null && this.inputsCanBeFused()) {
    return (inventory[inputLeft].getItemDamage() + inventory[inputRight].getItemDamage() + 2) * Settings.fusionMultiplier;
  }
  return 0;
}",0.9854014598540146
21842,"@Override public boolean canExtractItem(int slot,ItemStack itemstack,int side){
  return false;
}","@Override public boolean canExtractItem(int slot,ItemStack itemstack,int side){
  if (Settings.AllowAutomation && side == 0 && slot == 2) {
    return true;
  }
  return false;
}",0.7054545454545454
21843,"@Override protected void drawGuiContainerBackgroundLayer(float f,int mouseX,int mouseY){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  Minecraft.getMinecraft().getTextureManager().bindTexture(texture);
  drawTexturedModalRect(guiLeft,guiTop,0,0,xSize,ySize);
  renders++;
  Iterator renderIter=elements.iterator();
  while (renderIter.hasNext()) {
    ((ElementGuiHelper)renderIter.next()).draw(this,renders);
  }
  drawItemStack(new ItemStack(MinechemItemsRegistration.polytool),80,42,""String_Node_Str"");
  String localizedName;
  localizedName=MinechemHelper.getLocalString(""String_Node_Str"");
  if (localizedName.isEmpty() || localizedName == ""String_Node_Str"") {
    localizedName=""String_Node_Str"";
  }
  fontRendererObj.drawString(localizedName + ""String_Node_Str"" + PolytoolItem.instance.getSwordStr(polytool),guiLeft + 10,guiTop + 80,0x404040);
  localizedName=MinechemHelper.getLocalString(""String_Node_Str"");
  if (localizedName.isEmpty() || localizedName == ""String_Node_Str"") {
    localizedName=""String_Node_Str"";
  }
  fontRendererObj.drawString(localizedName + ""String_Node_Str"" + PolytoolItem.instance.getPickaxeStr(polytool),guiLeft + 10,guiTop + 90,0x404040);
  localizedName=MinechemHelper.getLocalString(""String_Node_Str"");
  if (localizedName.isEmpty() || localizedName == ""String_Node_Str"") {
    localizedName=""String_Node_Str"";
  }
  fontRendererObj.drawString(localizedName + ""String_Node_Str"" + PolytoolItem.instance.getStoneStr(polytool),guiLeft + 10,guiTop + 100,0x404040);
  localizedName=MinechemHelper.getLocalString(""String_Node_Str"");
  if (localizedName.isEmpty() || localizedName == ""String_Node_Str"") {
    localizedName=""String_Node_Str"";
  }
  fontRendererObj.drawString(localizedName + ""String_Node_Str"" + PolytoolItem.instance.getAxeStr(polytool),guiLeft + 10,guiTop + 110,0x404040);
  localizedName=MinechemHelper.getLocalString(""String_Node_Str"");
  if (localizedName.isEmpty() || localizedName == ""String_Node_Str"") {
    localizedName=""String_Node_Str"";
  }
  fontRendererObj.drawString(localizedName + ""String_Node_Str"" + PolytoolItem.instance.getShovelStr(polytool),guiLeft + 10,guiTop + 120,0x404040);
}","@Override protected void drawGuiContainerBackgroundLayer(float f,int mouseX,int mouseY){
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  Minecraft.getMinecraft().getTextureManager().bindTexture(texture);
  drawTexturedModalRect(guiLeft,guiTop,0,0,xSize,ySize);
  renders++;
  Iterator renderIter=elements.iterator();
  while (renderIter.hasNext()) {
    ((ElementGuiHelper)renderIter.next()).draw(this,renders);
  }
  drawItemStack(polytoolItem,80,42,""String_Node_Str"");
  String localizedName;
  localizedName=MinechemHelper.getLocalString(""String_Node_Str"");
  if (localizedName.isEmpty() || localizedName == ""String_Node_Str"") {
    localizedName=""String_Node_Str"";
  }
  fontRendererObj.drawString(localizedName + ""String_Node_Str"" + PolytoolItem.instance.getSwordStr(polytool),guiLeft + 10,guiTop + 80,0x404040);
  localizedName=MinechemHelper.getLocalString(""String_Node_Str"");
  if (localizedName.isEmpty() || localizedName == ""String_Node_Str"") {
    localizedName=""String_Node_Str"";
  }
  fontRendererObj.drawString(localizedName + ""String_Node_Str"" + PolytoolItem.instance.getPickaxeStr(polytool),guiLeft + 10,guiTop + 90,0x404040);
  localizedName=MinechemHelper.getLocalString(""String_Node_Str"");
  if (localizedName.isEmpty() || localizedName == ""String_Node_Str"") {
    localizedName=""String_Node_Str"";
  }
  fontRendererObj.drawString(localizedName + ""String_Node_Str"" + PolytoolItem.instance.getStoneStr(polytool),guiLeft + 10,guiTop + 100,0x404040);
  localizedName=MinechemHelper.getLocalString(""String_Node_Str"");
  if (localizedName.isEmpty() || localizedName == ""String_Node_Str"") {
    localizedName=""String_Node_Str"";
  }
  fontRendererObj.drawString(localizedName + ""String_Node_Str"" + PolytoolItem.instance.getAxeStr(polytool),guiLeft + 10,guiTop + 110,0x404040);
  localizedName=MinechemHelper.getLocalString(""String_Node_Str"");
  if (localizedName.isEmpty() || localizedName == ""String_Node_Str"") {
    localizedName=""String_Node_Str"";
  }
  fontRendererObj.drawString(localizedName + ""String_Node_Str"" + PolytoolItem.instance.getShovelStr(polytool),guiLeft + 10,guiTop + 120,0x404040);
}",0.9875382083235364
21844,"@Override public void setInventorySlotContents(int i,ItemStack itemstack){
  item=itemstack;
  if (itemstack != null && itemstack.stackSize == 64 && (itemstack.getItem() instanceof ElementItem) && PolytoolHelper.getTypeFromElement(ElementItem.getElement(itemstack),1) != null && PolytoolItem.validAlloyInfusion(player.getCurrentEquippedItem(),itemstack)) {
    item=null;
    PolytoolUpgradeType upgrade=PolytoolHelper.getTypeFromElement(ElementItem.getElement(itemstack),1);
    PolytoolItem.addTypeToNBT(player.inventory.getCurrentItem(),upgrade);
    if (!player.worldObj.isRemote) {
      PolytoolUpdateMessage message=new PolytoolUpdateMessage(upgrade);
      MessageHandler.INSTANCE.sendToServer(message);
    }
 else {
      ((PolytoolGui)Minecraft.getMinecraft().currentScreen).addUpgrade(upgrade);
    }
  }
}","@Override public void setInventorySlotContents(int i,ItemStack itemstack){
  item=itemstack;
  if (itemstack != null && itemstack.stackSize == 64 && (itemstack.getItem() instanceof ElementItem) && PolytoolHelper.getTypeFromElement(ElementItem.getElement(itemstack),1) != null && PolytoolItem.validAlloyInfusion(player.getCurrentEquippedItem(),itemstack)) {
    item=null;
    PolytoolUpgradeType upgrade=PolytoolHelper.getTypeFromElement(ElementItem.getElement(itemstack),1);
    PolytoolItem.addTypeToNBT(player.inventory.getCurrentItem(),upgrade);
    if (!player.worldObj.isRemote) {
      PolytoolUpdateMessage message=new PolytoolUpdateMessage(upgrade);
      MessageHandler.INSTANCE.sendTo(message,(EntityPlayerMP)player);
    }
  }
}",0.9101412066752248
21845,"@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (Settings.generateOre) {
    if (world.provider.isSurfaceWorld()) {
      for (int k=0; k <= Settings.UraniumOreDensity; k++) {
        int firstBlockXCoord=(16 * chunkX) + random.nextInt(16);
        int firstBlockYCoord=random.nextInt(50);
        int firstBlockZCoord=(16 * chunkZ) + random.nextInt(16);
        int oreCount=random.nextInt(Settings.UraniumOreClusterSize + 10);
        (new WorldGenMinable(MinechemBlocksGeneration.uranium,oreCount)).generate(world,random,firstBlockXCoord,firstBlockYCoord,firstBlockZCoord);
        if (Settings.DebugMode) {
          System.out.println(""String_Node_Str"");
          System.out.println(""String_Node_Str"" + firstBlockXCoord);
          System.out.println(""String_Node_Str"" + firstBlockYCoord);
          System.out.println(""String_Node_Str"" + firstBlockZCoord);
        }
      }
    }
  }
}","@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (Settings.generateOre) {
    if (world.provider.isSurfaceWorld()) {
      for (int k=0; k <= Settings.UraniumOreDensity; k++) {
        int firstBlockXCoord=(16 * chunkX) + random.nextInt(16);
        int firstBlockYCoord=random.nextInt(50);
        int firstBlockZCoord=(16 * chunkZ) + random.nextInt(16);
        int oreCount=random.nextInt(Settings.UraniumOreClusterSize + 10);
        (new WorldGenMinable(MinechemBlocksGeneration.uranium,oreCount)).generate(world,random,firstBlockXCoord,firstBlockYCoord,firstBlockZCoord);
        if (Settings.DebugMode) {
          Minechem.LOGGER.info(""String_Node_Str"");
          Minechem.LOGGER.info(""String_Node_Str"" + firstBlockXCoord);
          Minechem.LOGGER.info(""String_Node_Str"" + firstBlockYCoord);
          Minechem.LOGGER.info(""String_Node_Str"" + firstBlockZCoord);
        }
      }
    }
  }
}",0.9235412474849096
21846,"public static void registerBlocks(){
  decomposer=new DecomposerBlock();
  GameRegistry.registerBlock(decomposer,decomposer.getUnlocalizedName());
  GameRegistry.registerTileEntity(DecomposerTileEntity.class,decomposer.getUnlocalizedName());
  microscope=new MicroscopeBlock();
  GameRegistry.registerBlock(microscope,microscope.getUnlocalizedName());
  GameRegistry.registerTileEntity(MicroscopeTileEntity.class,microscope.getUnlocalizedName());
  synthesis=new SynthesisBlock();
  GameRegistry.registerBlock(synthesis,synthesis.getUnlocalizedName());
  GameRegistry.registerTileEntity(SynthesisTileEntity.class,synthesis.getUnlocalizedName());
  fusion=new FusionBlock();
  GameRegistry.registerBlock(fusion,FusionItemBlock.class,fusion.getUnlocalizedName());
  GameRegistry.registerTileEntity(FusionTileEntity.class,fusion.getUnlocalizedName());
  ghostBlock=new GhostBlock();
  GameRegistry.registerBlock(ghostBlock,GhostBlockItem.class,ghostBlock.getUnlocalizedName());
  GameRegistry.registerTileEntity(GhostBlockTileEntity.class,ghostBlock.getUnlocalizedName());
  blueprintProjector=new BlueprintProjectorBlock();
  GameRegistry.registerBlock(blueprintProjector,blueprintProjector.getUnlocalizedName());
  GameRegistry.registerTileEntity(BlueprintProjectorTileEntity.class,blueprintProjector.getUnlocalizedName());
  uranium=new BlockUraniumOre();
  GameRegistry.registerBlock(uranium,uranium.getUnlocalizedName());
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(uranium));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(uranium),new Element(ElementEnum.U,48)));
  leadChest=new LeadedChestBlock();
  GameRegistry.registerBlock(leadChest,leadChest.getUnlocalizedName());
  GameRegistry.registerTileEntity(LeadedChestTileEntity.class,leadChest.getUnlocalizedName());
  GameRegistry.registerTileEntity(FissionTileEntity.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityProxy.class,""String_Node_Str"");
}","public static void registerBlocks(){
  decomposer=new DecomposerBlock();
  GameRegistry.registerBlock(decomposer,decomposer.getUnlocalizedName());
  GameRegistry.registerTileEntity(DecomposerTileEntity.class,decomposer.getUnlocalizedName());
  microscope=new MicroscopeBlock();
  GameRegistry.registerBlock(microscope,microscope.getUnlocalizedName());
  GameRegistry.registerTileEntity(MicroscopeTileEntity.class,microscope.getUnlocalizedName());
  synthesis=new SynthesisBlock();
  GameRegistry.registerBlock(synthesis,synthesis.getUnlocalizedName());
  GameRegistry.registerTileEntity(SynthesisTileEntity.class,synthesis.getUnlocalizedName());
  fusion=new FusionBlock();
  GameRegistry.registerBlock(fusion,FusionItemBlock.class,fusion.getUnlocalizedName());
  GameRegistry.registerTileEntity(FusionTileEntity.class,fusion.getUnlocalizedName());
  ghostBlock=new GhostBlock();
  GameRegistry.registerBlock(ghostBlock,GhostBlockItem.class,ghostBlock.getUnlocalizedName());
  GameRegistry.registerTileEntity(GhostBlockTileEntity.class,ghostBlock.getUnlocalizedName());
  blueprintProjector=new BlueprintProjectorBlock();
  GameRegistry.registerBlock(blueprintProjector,blueprintProjector.getUnlocalizedName());
  GameRegistry.registerTileEntity(BlueprintProjectorTileEntity.class,blueprintProjector.getUnlocalizedName());
  uranium=new BlockUraniumOre();
  GameRegistry.registerBlock(uranium,uranium.getUnlocalizedName());
  OreDictionary.registerOre(""String_Node_Str"",new ItemStack(uranium));
  DecomposerRecipe.createAndAddRecipeSafely(""String_Node_Str"",1,new Element(ElementEnum.U,48));
  leadChest=new LeadedChestBlock();
  GameRegistry.registerBlock(leadChest,leadChest.getUnlocalizedName());
  GameRegistry.registerTileEntity(LeadedChestTileEntity.class,leadChest.getUnlocalizedName());
  GameRegistry.registerTileEntity(FissionTileEntity.class,""String_Node_Str"");
  GameRegistry.registerTileEntity(TileEntityProxy.class,""String_Node_Str"");
}",0.9800102511532548
21847,"public void registerVanillaChemicalRecipes(){
  Molecule moleculeSiliconDioxide=this.molecule(MoleculeEnum.siliconDioxide,4);
  Molecule moleculeCellulose=this.molecule(MoleculeEnum.cellulose,1);
  Molecule moleculePolyvinylChloride=this.molecule(MoleculeEnum.polyvinylChloride);
  Molecule moleculeLazurite=this.molecule(MoleculeEnum.lazurite,9);
  Element elementHydrogen=this.element(ElementEnum.H,64);
  Element elementHelium=this.element(ElementEnum.He,64);
  Element elementCarbon=this.element(ElementEnum.C,64);
  ItemStack blockStone=new ItemStack(Blocks.stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockStone,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.stone,7),true,50,new PotionChemical[]{this.element(ElementEnum.Si),null,null,this.element(ElementEnum.O,2),null,null}));
  ItemStack blockGrass=new ItemStack(Blocks.grass,1,0);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockGrass,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)}),new DecomposerRecipe(new PotionChemical[]{moleculeCellulose})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.grass,16),true,50,new PotionChemical[]{null,moleculeCellulose,null,null,this.element(ElementEnum.O,2),this.element(ElementEnum.Si)}));
  ItemStack blockDirt=new ItemStack(Blocks.dirt,1,0);
  ItemStack blockPodzol=new ItemStack(Blocks.dirt,1,2);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockDirt,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)})}));
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockPodzol,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.dirt,1,0),true,50,new PotionChemical[]{null,null,null,null,this.element(ElementEnum.O,2),this.element(ElementEnum.Si)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.dirt,1,2),true,50,new PotionChemical[]{null,null,null,null,null,null,this.element(ElementEnum.O,2),this.element(ElementEnum.Si)}));
  ItemStack blockCobblestone=new ItemStack(Blocks.cobblestone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockCobblestone,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Na),this.element(ElementEnum.Cl)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.cobblestone),true,50,new PotionChemical[]{this.element(ElementEnum.Si),null,null,null,this.element(ElementEnum.O,2),null}));
  ItemStack blockOakWoodPlanks=new ItemStack(Blocks.planks,1,0);
  ItemStack blockSpruceWoodPlanks=new ItemStack(Blocks.planks,1,1);
  ItemStack blockBirchWoodPlanks=new ItemStack(Blocks.planks,1,2);
  ItemStack blockJungleWoodPlanks=new ItemStack(Blocks.planks,1,3);
  ItemStack blockAcaciaWoodPlanks=new ItemStack(Blocks.planks,1,4);
  ItemStack blockDarkOakWoodPlanks=new ItemStack(Blocks.planks,1,5);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAcaciaWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockDarkOakWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakWoodPlanks,true,20,new PotionChemical[]{null,null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceWoodPlanks,true,20,new PotionChemical[]{null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchWoodPlanks,true,20,new PotionChemical[]{null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleWoodPlanks,true,20,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose),null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockAcaciaWoodPlanks,true,20,new PotionChemical[]{null,null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDarkOakWoodPlanks,true,20,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose),null,null,null,null,null}));
  ItemStack blockOakWoodSlabs=new ItemStack(Blocks.wooden_slab,1,0);
  ItemStack blockSpruceWoodSlabs=new ItemStack(Blocks.wooden_slab,1,1);
  ItemStack blockBirchWoodSlabs=new ItemStack(Blocks.wooden_slab,1,2);
  ItemStack blockJungleWoodSlabs=new ItemStack(Blocks.wooden_slab,1,3);
  ItemStack blockAcaciaWoodSlabs=new ItemStack(Blocks.wooden_slab,1,4);
  ItemStack blockDarkOakWoodSlabs=new ItemStack(Blocks.wooden_slab,1,5);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAcaciaWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockDarkOakWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakWoodSlabs,true,20,new PotionChemical[]{null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceWoodSlabs,true,20,new PotionChemical[]{null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchWoodSlabs,true,20,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleWoodSlabs,true,20,new PotionChemical[]{null,null,null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose),null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockAcaciaWoodSlabs,true,20,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDarkOakWoodSlabs,true,20,new PotionChemical[]{null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose),null,null,null,null,null}));
  ItemStack blockOakSapling=new ItemStack(Blocks.sapling,1,0);
  ItemStack blockSpruceSapling=new ItemStack(Blocks.sapling,1,1);
  ItemStack blockBirchSapling=new ItemStack(Blocks.sapling,1,2);
  ItemStack blockJungleSapling=new ItemStack(Blocks.sapling,1,3);
  ItemStack blockAcaciaSapling=new ItemStack(Blocks.sapling,1,4);
  ItemStack blockDarkOakSapling=new ItemStack(Blocks.sapling,1,5);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAcaciaSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockDarkOakSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleSapling,true,20,new PotionChemical[]{null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockAcaciaSapling,true,20,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDarkOakSapling,true,20,new PotionChemical[]{null,null,null,this.molecule(MoleculeEnum.cellulose),null,null,null,null,null}));
  ItemStack blockSand=new ItemStack(Blocks.sand);
  DecomposerRecipe.add(new DecomposerRecipe(blockSand,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSand,true,200,new PotionChemical[]{moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide}));
  ItemStack blockGravel=new ItemStack(Blocks.gravel);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGravel,0.35F,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGravel,true,30,new PotionChemical[]{null,null,null,null,null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide)}));
  ItemStack goldOre=new ItemStack(Blocks.gold_ore);
  DecomposerRecipe.add(new DecomposerRecipe(goldOre,new PotionChemical[]{this.element(ElementEnum.Au,48)}));
  ItemStack ironOre=new ItemStack(Blocks.iron_ore);
  DecomposerRecipe.add(new DecomposerRecipe(ironOre,new PotionChemical[]{this.element(ElementEnum.Fe,48)}));
  ItemStack coalOre=new ItemStack(Blocks.coal_ore);
  DecomposerRecipe.add(new DecomposerRecipe(coalOre,new PotionChemical[]{this.element(ElementEnum.C,48)}));
  if (Settings.UraniumOreCraftable) {
    GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(uranium,1),new Object[]{""String_Node_Str""}));
  }
  ItemStack blockOakLog=new ItemStack(Blocks.log,1,0);
  ItemStack blockSpruceLog=new ItemStack(Blocks.log,1,1);
  ItemStack blockBirchLog=new ItemStack(Blocks.log,1,2);
  ItemStack blockJungleLog=new ItemStack(Blocks.log,1,3);
  ItemStack blockAcaciaLog=new ItemStack(Blocks.log2,1,0);
  ItemStack blockDarkOakLog=new ItemStack(Blocks.log2,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAcaciaLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockDarkOakLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakLog,true,100,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceLog,true,100,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchLog,true,100,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null,null,null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleLog,true,100,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2),null,null,this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockAcaciaLog,true,100,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2),null,null,this.molecule(MoleculeEnum.cellulose,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDarkOakLog,true,100,new PotionChemical[]{null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null}));
  ItemStack blockOakLeaves=new ItemStack(Blocks.leaves,1,0);
  ItemStack blockSpruceLeaves=new ItemStack(Blocks.leaves,1,1);
  ItemStack blockBirchLeaves=new ItemStack(Blocks.leaves,1,2);
  ItemStack blockJungleLeaves=new ItemStack(Blocks.leaves,1,3);
  ItemStack blockAcaciaLeaves=new ItemStack(Blocks.leaves2,1,0);
  ItemStack blockDarkOakLeaves=new ItemStack(Blocks.leaves2,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAcaciaLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockDarkOakLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakLeaves,true,100,new PotionChemical[]{moleculeCellulose,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceLeaves,true,100,new PotionChemical[]{null,null,null,null,moleculeCellulose,null,moleculeCellulose,moleculeCellulose,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchLeaves,true,100,new PotionChemical[]{moleculeCellulose,null,moleculeCellulose,null,null,null,moleculeCellulose,null,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleLeaves,true,100,new PotionChemical[]{moleculeCellulose,null,null,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockAcaciaLeaves,true,100,new PotionChemical[]{null,null,moleculeCellulose,null,moleculeCellulose,moleculeCellulose,null,null,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDarkOakLeaves,true,100,new PotionChemical[]{null,moleculeCellulose,null,moleculeCellulose,null,moleculeCellulose,null,moleculeCellulose,null}));
  ItemStack blockGlass=new ItemStack(Blocks.glass);
  ItemStack blockWhiteStainedGlass=new ItemStack(Blocks.stained_glass,1,0);
  ItemStack blockOrangeStainedGlass=new ItemStack(Blocks.stained_glass,1,1);
  ItemStack blockMagentaStainedGlass=new ItemStack(Blocks.stained_glass,1,2);
  ItemStack blockLiteBlueStainedGlass=new ItemStack(Blocks.stained_glass,1,3);
  ItemStack blockYellowStainedGlass=new ItemStack(Blocks.stained_glass,1,4);
  ItemStack blockLimeStainedGlass=new ItemStack(Blocks.stained_glass,1,5);
  ItemStack blockPinkStainedGlass=new ItemStack(Blocks.stained_glass,1,6);
  ItemStack blockGrayStainedGlass=new ItemStack(Blocks.stained_glass,1,7);
  ItemStack blockLiteGrayStainedGlass=new ItemStack(Blocks.stained_glass,1,8);
  ItemStack blockCyanStainedGlass=new ItemStack(Blocks.stained_glass,1,9);
  ItemStack blockPurpleStainedGlass=new ItemStack(Blocks.stained_glass,1,10);
  ItemStack blockBlueStainedGlass=new ItemStack(Blocks.stained_glass,1,11);
  ItemStack blockBrownStainedGlass=new ItemStack(Blocks.stained_glass,1,12);
  ItemStack blockGreenStainedGlass=new ItemStack(Blocks.stained_glass,1,13);
  ItemStack blockRedStainedGlass=new ItemStack(Blocks.stained_glass,1,14);
  ItemStack blockBlackStainedGlass=new ItemStack(Blocks.stained_glass,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockWhiteStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockOrangeStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMagentaStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockLiteBlueStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.lazurite),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockYellowStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockLimeStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockPinkStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockGrayStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.blackPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockCyanStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockPurpleStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockGreenStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockBrownStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockRedStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockBlackStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,null,null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWhiteStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.whitePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.orangePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.lightbluePigment),null,this.molecule(MoleculeEnum.redPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLiteBlueStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.lightbluePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.yellowPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.limePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.redPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.blackPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLiteGrayStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.lightbluePigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.purplePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.lazurite),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBrownStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.tannicacid),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.greenPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.redPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.blackPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  ItemStack blockGlassPane=new ItemStack(Blocks.glass_pane);
  ItemStack blockWhiteStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,0);
  ItemStack blockOrangeStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,1);
  ItemStack blockMagentaStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,2);
  ItemStack blockLiteBlueStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,3);
  ItemStack blockYellowStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,4);
  ItemStack blockLimeStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,5);
  ItemStack blockPinkStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,6);
  ItemStack blockGrayStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,7);
  ItemStack blockLiteGrayStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,8);
  ItemStack blockCyanStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,9);
  ItemStack blockPurpleStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,10);
  ItemStack blockBlueStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,11);
  ItemStack blockBrownStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,12);
  ItemStack blockGreenStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,13);
  ItemStack blockRedStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,14);
  ItemStack blockBlackStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockWhiteStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockOrangeStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMagentaStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockLiteBlueStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.lazurite),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockYellowStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockLimeStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockPinkStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockGrayStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.blackPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockCyanStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockPurpleStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockGreenStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockBrownStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockRedStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockBlackStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWhiteStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.whitePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.orangePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.lightbluePigment),null,this.molecule(MoleculeEnum.redPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLiteBlueStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.lightbluePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.yellowPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.limePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.redPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.blackPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLiteGrayStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.lightbluePigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.purplePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.lazurite),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBrownStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.tannicacid),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.greenPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.redPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.blackPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  ItemStack blockOreLapis=new ItemStack(Blocks.lapis_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreLapis,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite,6),this.molecule(MoleculeEnum.sodalite),this.molecule(MoleculeEnum.noselite),this.molecule(MoleculeEnum.calcite),this.molecule(MoleculeEnum.pyrite)}));
  ItemStack blockLapis=new ItemStack(Blocks.lapis_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockLapis,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite,9)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLapis,true,450,new PotionChemical[]{moleculeLazurite,null,null,null,null,null,null,null,null}));
  ItemStack blockCobweb=new ItemStack(Blocks.web);
  DecomposerRecipe.add(new DecomposerRecipe(blockCobweb,new PotionChemical[]{this.molecule(MoleculeEnum.fibroin)}));
  ItemStack blockSunFlower=new ItemStack(Blocks.double_plant,1,0);
  ItemStack blockLilac=new ItemStack(Blocks.double_plant,1,1);
  ItemStack blockTallGrass=new ItemStack(Blocks.double_plant,1,2);
  ItemStack blockLargeFern=new ItemStack(Blocks.double_plant,1,3);
  ItemStack blockRoseBush=new ItemStack(Blocks.double_plant,1,4);
  ItemStack blockPeony=new ItemStack(Blocks.double_plant,1,5);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSunFlower,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLilac,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockTallGrass,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLargeFern,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRoseBush,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPeony,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSunFlower,true,450,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.yellowPigment),null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLilac,true,450,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.redPigment),new Molecule(MoleculeEnum.whitePigment,2),null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockTallGrass,true,450,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLargeFern,true,450,new PotionChemical[]{null,new Molecule(MoleculeEnum.shikimicAcid,2),null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRoseBush,true,450,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.redPigment),null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPeony,true,450,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.redPigment),new Molecule(MoleculeEnum.whitePigment),null,null,null,null,null,null}));
  ItemStack blockSandStone=new ItemStack(Blocks.sandstone,1,0);
  ItemStack blockChiseledSandStone=new ItemStack(Blocks.sandstone,1,1);
  ItemStack blockSmoothSandStone=new ItemStack(Blocks.sandstone,1,2);
  DecomposerRecipe.add(new DecomposerRecipe(blockSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockChiseledSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockSmoothSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSandStone,true,20,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide,16),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockChiseledSandStone,true,20,new PotionChemical[]{null,null,null,null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide,16),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSmoothSandStone,true,20,new PotionChemical[]{null,this.molecule(MoleculeEnum.siliconDioxide,16),null,null,null,null,null,null,null}));
  ItemStack blockWool=new ItemStack(Blocks.wool,1,0);
  ItemStack blockOrangeWool=new ItemStack(Blocks.wool,1,1);
  ItemStack blockMagentaWool=new ItemStack(Blocks.wool,1,2);
  ItemStack blockLightBlueWool=new ItemStack(Blocks.wool,1,3);
  ItemStack blockYellowWool=new ItemStack(Blocks.wool,1,4);
  ItemStack blockLimeWool=new ItemStack(Blocks.wool,1,5);
  ItemStack blockPinkWool=new ItemStack(Blocks.wool,1,6);
  ItemStack blockGrayWool=new ItemStack(Blocks.wool,1,7);
  ItemStack blockLightGrayWool=new ItemStack(Blocks.wool,1,8);
  ItemStack blockCyanWool=new ItemStack(Blocks.wool,1,9);
  ItemStack blockPurpleWool=new ItemStack(Blocks.wool,1,10);
  ItemStack blockBlueWool=new ItemStack(Blocks.wool,1,11);
  ItemStack blockBrownWool=new ItemStack(Blocks.wool,1,12);
  ItemStack blockGreenWool=new ItemStack(Blocks.wool,1,13);
  ItemStack blockRedWool=new ItemStack(Blocks.wool,1,14);
  ItemStack blockBlackWool=new ItemStack(Blocks.wool,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOrangeWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMagentaWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightBlueWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLimeWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPinkWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGrayWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightGrayWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCyanWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPurpleWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlueWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBrownWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGreenWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlackWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightBlueWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightGrayWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  ItemStack carpetBlockWool=new ItemStack(Blocks.carpet,1,0);
  ItemStack carpetBlockOrangeWool=new ItemStack(Blocks.carpet,1,1);
  ItemStack carpetBlockMagentaWool=new ItemStack(Blocks.carpet,1,2);
  ItemStack carpetBlockLightBlueWool=new ItemStack(Blocks.carpet,1,3);
  ItemStack carpetBlockYellowWool=new ItemStack(Blocks.carpet,1,4);
  ItemStack carpetBlockLimeWool=new ItemStack(Blocks.carpet,1,5);
  ItemStack carpetBlockPinkWool=new ItemStack(Blocks.carpet,1,6);
  ItemStack carpetBlockGrayWool=new ItemStack(Blocks.carpet,1,7);
  ItemStack carpetBlockLightGrayWool=new ItemStack(Blocks.carpet,1,8);
  ItemStack carpetBlockCyanWool=new ItemStack(Blocks.carpet,1,9);
  ItemStack carpetBlockPurpleWool=new ItemStack(Blocks.carpet,1,10);
  ItemStack carpetBlockBlueWool=new ItemStack(Blocks.carpet,1,11);
  ItemStack carpetBlockBrownWool=new ItemStack(Blocks.carpet,1,12);
  ItemStack carpetBlockGreenWool=new ItemStack(Blocks.carpet,1,13);
  ItemStack carpetBlockRedWool=new ItemStack(Blocks.carpet,1,14);
  ItemStack carpetBlockBlackWool=new ItemStack(Blocks.carpet,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockOrangeWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockMagentaWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLightBlueWool,0.2F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockYellowWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLimeWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockPinkWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockGrayWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLightGrayWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockCyanWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockPurpleWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBlueWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBrownWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockGreenWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockRedWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBlackWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(carpetBlockWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  ItemStack blockYellowFlower=new ItemStack(Blocks.yellow_flower);
  ItemStack blockPoppyFlower=new ItemStack(Blocks.red_flower,1,0);
  ItemStack blockBlueOrchid=new ItemStack(Blocks.red_flower,1,1);
  ItemStack blockAllium=new ItemStack(Blocks.red_flower,1,2);
  ItemStack blockAsureBluet=new ItemStack(Blocks.red_flower,1,3);
  ItemStack blockRedTulip=new ItemStack(Blocks.red_flower,1,4);
  ItemStack blockOrangeTulip=new ItemStack(Blocks.red_flower,1,5);
  ItemStack blockWhiteTulip=new ItemStack(Blocks.red_flower,1,6);
  ItemStack blockPinkTulip=new ItemStack(Blocks.red_flower,1,7);
  ItemStack blockOxeyeDaisy=new ItemStack(Blocks.red_flower,1,8);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowFlower,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.yellowPigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPoppyFlower,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.redPigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlueOrchid,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAllium,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.purplePigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAsureBluet,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.whitePigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedTulip,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.redPigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOrangeTulip,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.orangePigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockWhiteTulip,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.whitePigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPinkTulip,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.whitePigment,1),new Molecule(MoleculeEnum.redPigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOxeyeDaisy,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.whitePigment,1)}));
  ItemStack blockMushroomBrown=new ItemStack(Blocks.brown_mushroom);
  ItemStack blockMushroomRed=new ItemStack(Blocks.red_mushroom);
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomBrown,new PotionChemical[]{this.molecule(MoleculeEnum.psilocybin),this.molecule(MoleculeEnum.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomRed,new PotionChemical[]{this.molecule(MoleculeEnum.pantherine),this.molecule(MoleculeEnum.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Blocks.gold_block),new PotionChemical[]{this.element(ElementEnum.Au,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Blocks.iron_block),new PotionChemical[]{this.element(ElementEnum.Fe,144)}));
  ItemStack blockTnt=new ItemStack(Blocks.tnt);
  DecomposerRecipe.add(new DecomposerRecipe(blockTnt,new PotionChemical[]{this.molecule(MoleculeEnum.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockTnt,false,1000,new PotionChemical[]{this.molecule(MoleculeEnum.tnt)}));
  ItemStack blockObsidian=new ItemStack(Blocks.obsidian);
  DecomposerRecipe.add(new DecomposerRecipe(blockObsidian,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.magnesiumOxide,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockObsidian,true,1000,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.magnesiumOxide,2),null,this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.magnesiumOxide,2),this.molecule(MoleculeEnum.magnesiumOxide,2),this.molecule(MoleculeEnum.magnesiumOxide,2)}));
  ItemStack blockOreDiamond=new ItemStack(Blocks.diamond_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,6)}));
  ItemStack blockDiamond=new ItemStack(Blocks.diamond_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,36)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDiamond,true,100000,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4)}));
  ItemStack blockPressurePlatePlanks=new ItemStack(Blocks.wooden_pressure_plate);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPressurePlatePlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  ItemStack blockOreRedstone=new ItemStack(Blocks.redstone_ore);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOreRedstone,0.8F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide,9),this.element(ElementEnum.Cu,9)}));
  ItemStack blockCactus=new ItemStack(Blocks.cactus);
  DecomposerRecipe.add(new DecomposerRecipe(blockCactus,new PotionChemical[]{this.molecule(MoleculeEnum.mescaline),this.molecule(MoleculeEnum.water,20)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCactus,true,200,new PotionChemical[]{this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.mescaline),null,this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.water,5)}));
  ItemStack blockPumpkin=new ItemStack(Blocks.pumpkin);
  DecomposerRecipe.add(new DecomposerRecipe(blockPumpkin,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPumpkin,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin)}));
  ItemStack blockNetherrack=new ItemStack(Blocks.netherrack);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockNetherrack,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Ni),this.element(ElementEnum.Tc)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,3),this.element(ElementEnum.Ti),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,1),this.element(ElementEnum.W,4),this.element(ElementEnum.Cr,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,10),this.element(ElementEnum.W,1),this.element(ElementEnum.Zn,8),this.element(ElementEnum.Be,4)})}));
  ItemStack itemNetherbrick=new ItemStack(Items.netherbrick);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemNetherbrick,0.15F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.C),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Ni),this.element(ElementEnum.Tc)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,3),this.element(ElementEnum.Ti),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,1),this.element(ElementEnum.W,4),this.element(ElementEnum.Cr,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,10),this.element(ElementEnum.W,1),this.element(ElementEnum.Zn,8),this.element(ElementEnum.Be,4)})}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherbrick,true,200,new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Si,2),null,this.element(ElementEnum.Zn,2),this.element(ElementEnum.W,1),null,this.element(ElementEnum.Be,2),this.element(ElementEnum.Be,2),null}));
  ItemStack itemPotion=new ItemStack(Items.potionitem,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemPotion,new PotionChemical[]{this.molecule(MoleculeEnum.water,8)}));
  ItemStack blockSlowSand=new ItemStack(Blocks.soul_sand);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockSlowSand,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb,3),this.element(ElementEnum.Be,1),this.element(ElementEnum.Si,2),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb,1),this.element(ElementEnum.Si,5),this.element(ElementEnum.O,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,6),this.element(ElementEnum.O,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Es,1),this.element(ElementEnum.O,2)})}));
  ItemStack blockGlowStone=new ItemStack(Blocks.glowstone);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlowStone,new PotionChemical[]{this.element(ElementEnum.P,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlowStone,true,500,new PotionChemical[]{this.element(ElementEnum.P),null,this.element(ElementEnum.P),this.element(ElementEnum.P),null,this.element(ElementEnum.P),null,null,null}));
  ItemStack blockMycelium=new ItemStack(Blocks.mycelium);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMycelium,0.09F,new PotionChemical[]{this.molecule(MoleculeEnum.fingolimod)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.mycelium,16),false,300,new PotionChemical[]{this.molecule(MoleculeEnum.fingolimod)}));
  ItemStack blockWhiteStone=new ItemStack(Blocks.end_stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockWhiteStone,0.8F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O),this.element(ElementEnum.H,4),this.element(ElementEnum.Li)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Es)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pu)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fr)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Nd)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O,4)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.H,4)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Be,8)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Li,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zr)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Na)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Rb)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)})}));
  ItemStack blockOreEmerald=new ItemStack(Blocks.emerald_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,6),this.element(ElementEnum.Cr,6),this.element(ElementEnum.V,6)}));
  ItemStack blockEmerald=new ItemStack(Blocks.emerald_block);
  SynthesisRecipe.add(new SynthesisRecipe(blockEmerald,true,150000,new PotionChemical[]{this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.V,9),this.molecule(MoleculeEnum.beryl,18),this.element(ElementEnum.V,9),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,18),this.element(ElementEnum.Cr,18),this.element(ElementEnum.V,18)}));
  ItemStack itemAppleRed=new ItemStack(Items.apple);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleRed,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemAppleRed,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid),this.molecule(MoleculeEnum.water,2)}));
  ItemStack itemArrow=new ItemStack(Items.arrow);
  DecomposerRecipe.add(new DecomposerRecipe(itemArrow,new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O,2),this.element(ElementEnum.N,6)}));
  ItemStack itemCoal=new ItemStack(Items.coal);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemCoal,0.92F,new PotionChemical[]{this.element(ElementEnum.C,8)}));
  ItemStack blockCoal=new ItemStack(Blocks.coal_block);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCoal,0.82F,new PotionChemical[]{this.element(ElementEnum.C,72)}));
  ItemStack itemChar=new ItemStack(Items.coal,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemChar,0.82F,new PotionChemical[]{this.element(ElementEnum.C,1)}));
  ItemStack itemDiamond=new ItemStack(Items.diamond);
  DecomposerRecipe.add(new DecomposerRecipe(itemDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(MinechemItemsRegistration.polytool),true,'\uea60',new PotionChemical[]{null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDiamond,true,'\uea60',new PotionChemical[]{null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null}));
  ItemStack itemIngotIron=new ItemStack(Items.iron_ingot);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotIron,new PotionChemical[]{this.element(ElementEnum.Fe,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotIron,false,1000,new PotionChemical[]{this.element(ElementEnum.Fe,16)}));
  ItemStack itemIngotGold=new ItemStack(Items.gold_ingot);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotGold,new PotionChemical[]{this.element(ElementEnum.Au,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotGold,false,1000,new PotionChemical[]{this.element(ElementEnum.Au,16)}));
  ItemStack itemStick=new ItemStack(Items.stick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemStick,0.3F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  ItemStack itemString=new ItemStack(Items.string);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemString,0.45F,new PotionChemical[]{this.molecule(MoleculeEnum.serine),this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.alinine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemString,true,150,new PotionChemical[]{this.molecule(MoleculeEnum.serine),this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.alinine)}));
  ItemStack itemFeather=new ItemStack(Items.feather);
  DecomposerRecipe.add(new DecomposerRecipe(itemFeather,new PotionChemical[]{this.molecule(MoleculeEnum.water,8),this.element(ElementEnum.N,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFeather,true,800,new PotionChemical[]{this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,2),this.element(ElementEnum.N),this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,1),this.element(ElementEnum.N),this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,5),this.element(ElementEnum.N)}));
  ItemStack itemGunpowder=new ItemStack(Items.gunpowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemGunpowder,new PotionChemical[]{this.molecule(MoleculeEnum.potassiumNitrate),this.element(ElementEnum.S,2),this.element(ElementEnum.C)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGunpowder,true,600,new PotionChemical[]{this.molecule(MoleculeEnum.potassiumNitrate),this.element(ElementEnum.C),null,this.element(ElementEnum.S,2),null,null,null,null,null}));
  ItemStack itemBread=new ItemStack(Items.bread);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBread,0.1F,new PotionChemical[]{this.molecule(MoleculeEnum.starch),this.molecule(MoleculeEnum.sucrose)}));
  ItemStack itemFlint=new ItemStack(Items.flint);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemFlint,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFlint,true,100,new PotionChemical[]{null,moleculeSiliconDioxide,null,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,null,null,null}));
  ItemStack itemAppleGold=new ItemStack(Items.golden_apple,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleGold,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid),this.element(ElementEnum.Au,64)}));
  ItemStack itemDoorWood=new ItemStack(Items.wooden_door);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDoorWood,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,12)}));
  ItemStack itemBucketWater=new ItemStack(Items.water_bucket);
  DecomposerRecipe.add(new DecomposerRecipe(itemBucketWater,new PotionChemical[]{this.molecule(MoleculeEnum.water,16),this.element(ElementEnum.Fe,48)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBucketWater,true,1000,new PotionChemical[]{null,null,null,this.element(ElementEnum.Fe,16),this.molecule(MoleculeEnum.water,16),this.element(ElementEnum.Fe,16),null,this.element(ElementEnum.Fe,16),null}));
  ItemStack itemRedstone=new ItemStack(Items.redstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRedstone,0.42F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide),this.element(ElementEnum.Cu)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRedstone,true,100,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.iron3oxide),null,this.element(ElementEnum.Cu),null,null,null,null}));
  ItemStack blockRedstone=new ItemStack(Blocks.redstone_block);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedstone,0.42F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide,9),this.element(ElementEnum.Cu,9)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedstone,true,900,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.iron3oxide,9),null,this.element(ElementEnum.Cu,9),null,null,null,null}));
  ItemStack itemSnowball=new ItemStack(Items.snowball);
  DecomposerRecipe.add(new DecomposerRecipe(itemSnowball,new PotionChemical[]{this.molecule(MoleculeEnum.water)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.snowball,5),true,20,new PotionChemical[]{this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water)}));
  ItemStack itemLeather=new ItemStack(Items.leather);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemLeather,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.keratin)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.leather,5),true,700,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.keratin),null,null,null,null}));
  ItemStack itemBrick=new ItemStack(Items.brick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBrick,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.brick,8),true,400,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite),this.molecule(MoleculeEnum.kaolinite),null,this.molecule(MoleculeEnum.kaolinite),this.molecule(MoleculeEnum.kaolinite),null}));
  ItemStack itemClayBall=new ItemStack(Items.clay_ball);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemClayBall,0.3F,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.clay_ball,12),false,100,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  ItemStack itemReed=new ItemStack(Items.reeds);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemReed,0.65F,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose),this.element(ElementEnum.H,2),this.element(ElementEnum.O)}));
  ItemStack itemPaper=new ItemStack(Items.paper);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPaper,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.paper,16),true,150,new PotionChemical[]{null,this.molecule(MoleculeEnum.cellulose),null,null,this.molecule(MoleculeEnum.cellulose),null,null,this.molecule(MoleculeEnum.cellulose),null}));
  ItemStack itemSlimeBall=new ItemStack(Items.slime_ball);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemSlimeBall,0.9F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.molecule(MoleculeEnum.pmma)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Hg)}),new DecomposerRecipe(new PotionChemical[]{this.molecule(MoleculeEnum.water,10)})}));
  ItemStack itemGlowstone=new ItemStack(Items.glowstone_dust);
  DecomposerRecipe.add(new DecomposerRecipe(itemGlowstone,new PotionChemical[]{this.element(ElementEnum.P)}));
  ItemStack itemDyePowderBlack=new ItemStack(Items.dye,1,0);
  ItemStack itemDyePowderRed=new ItemStack(Items.dye,1,1);
  ItemStack itemDyePowderGreen=new ItemStack(Items.dye,1,2);
  ItemStack itemDyePowderBrown=new ItemStack(Items.dye,1,3);
  ItemStack itemDyePowderBlue=new ItemStack(Items.dye,1,4);
  ItemStack itemDyePowderPurple=new ItemStack(Items.dye,1,5);
  ItemStack itemDyePowderCyan=new ItemStack(Items.dye,1,6);
  ItemStack itemDyePowderLightGray=new ItemStack(Items.dye,1,7);
  ItemStack itemDyePowderGray=new ItemStack(Items.dye,1,8);
  ItemStack itemDyePowderPink=new ItemStack(Items.dye,1,9);
  ItemStack itemDyePowderLime=new ItemStack(Items.dye,1,10);
  ItemStack itemDyePowderYellow=new ItemStack(Items.dye,1,11);
  ItemStack itemDyePowderLightBlue=new ItemStack(Items.dye,1,12);
  ItemStack itemDyePowderMagenta=new ItemStack(Items.dye,1,13);
  ItemStack itemDyePowderOrange=new ItemStack(Items.dye,1,14);
  ItemStack itemDyePowderWhite=new ItemStack(Items.dye,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlack,new PotionChemical[]{this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderRed,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGreen,new PotionChemical[]{this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDyePowderBrown,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.theobromine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlue,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPurple,new PotionChemical[]{this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderCyan,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightGray,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGray,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPink,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLime,new PotionChemical[]{this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderYellow,new PotionChemical[]{this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightBlue,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderMagenta,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderOrange,new PotionChemical[]{this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderWhite,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlack,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderRed,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGreen,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBrown,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.theobromine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlue,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPurple,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderCyan,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightGray,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGray,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPink,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLime,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderYellow,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightBlue,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderMagenta,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderOrange,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderWhite,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment)}));
  ItemStack itemBone=new ItemStack(Items.bone);
  DecomposerRecipe.add(new DecomposerRecipe(itemBone,new PotionChemical[]{this.molecule(MoleculeEnum.hydroxylapatite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBone,false,100,new PotionChemical[]{this.molecule(MoleculeEnum.hydroxylapatite)}));
  ItemStack itemSugar=new ItemStack(Items.sugar);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSugar,0.75F,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSugar,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose)}));
  ItemStack itemMelon=new ItemStack(Items.melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemMelon,new PotionChemical[]{this.molecule(MoleculeEnum.water,1)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.melon),false,300,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin),this.molecule(MoleculeEnum.asparticAcid),this.molecule(MoleculeEnum.water,1)}));
  ItemStack blockMelon=new ItemStack(Blocks.melon_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockMelon,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin),this.molecule(MoleculeEnum.asparticAcid),this.molecule(MoleculeEnum.water,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.melon_block,1),false,300,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin),this.molecule(MoleculeEnum.asparticAcid),this.molecule(MoleculeEnum.water,16)}));
  ItemStack itemChickenCooked=new ItemStack(Items.cooked_chicken);
  DecomposerRecipe.add(new DecomposerRecipe(itemChickenCooked,new PotionChemical[]{this.element(ElementEnum.K),this.element(ElementEnum.Na),this.element(ElementEnum.C,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemChickenCooked,true,5000,new PotionChemical[]{this.element(ElementEnum.K,16),this.element(ElementEnum.Na,16),this.element(ElementEnum.C,16)}));
  ItemStack itemRottenFlesh=new ItemStack(Items.rotten_flesh);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRottenFlesh,0.05F,new PotionChemical[]{new Molecule(MoleculeEnum.nodularin,1)}));
  ItemStack itemEnderPearl=new ItemStack(Items.ender_pearl);
  DecomposerRecipe.add(new DecomposerRecipe(itemEnderPearl,new PotionChemical[]{this.element(ElementEnum.Es),this.molecule(MoleculeEnum.calciumCarbonate,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEnderPearl,true,5000,new PotionChemical[]{this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.element(ElementEnum.Es),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate)}));
  ItemStack itemBlazeRod=new ItemStack(Items.blaze_rod);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazeRod,new PotionChemical[]{this.element(ElementEnum.Pu,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBlazeRod,true,15000,new PotionChemical[]{this.element(ElementEnum.Pu,2),null,null,this.element(ElementEnum.Pu,2),null,null,this.element(ElementEnum.Pu,2),null,null}));
  ItemStack itemBlazePowder=new ItemStack(Items.blaze_powder);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazePowder,new PotionChemical[]{this.element(ElementEnum.Pu)}));
  ItemStack itemGhastTear=new ItemStack(Items.ghast_tear);
  DecomposerRecipe.add(new DecomposerRecipe(itemGhastTear,new PotionChemical[]{this.element(ElementEnum.Yb,4),this.element(ElementEnum.No,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGhastTear,true,15000,new PotionChemical[]{this.element(ElementEnum.Yb),this.element(ElementEnum.Yb),this.element(ElementEnum.No),null,this.element(ElementEnum.Yb,2),this.element(ElementEnum.No,2),null,this.element(ElementEnum.No),null}));
  ItemStack itemNetherStalkSeeds=new ItemStack(Items.nether_wart);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemNetherStalkSeeds,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cocainehcl)}));
  ItemStack itemSpiderEye=new ItemStack(Items.spider_eye);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSpiderEye,0.2F,new PotionChemical[]{this.molecule(MoleculeEnum.tetrodotoxin)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSpiderEye,true,2000,new PotionChemical[]{this.element(ElementEnum.C),null,null,null,this.molecule(MoleculeEnum.tetrodotoxin),null,null,null,this.element(ElementEnum.C)}));
  ItemStack itemFermentedSpiderEye=new ItemStack(Items.fermented_spider_eye);
  DecomposerRecipe.add(new DecomposerRecipe(itemFermentedSpiderEye,new PotionChemical[]{this.element(ElementEnum.Po),this.molecule(MoleculeEnum.ethanol)}));
  ItemStack itemMagmaCream=new ItemStack(Items.magma_cream);
  DecomposerRecipe.add(new DecomposerRecipe(itemMagmaCream,new PotionChemical[]{this.element(ElementEnum.Hg),this.element(ElementEnum.Pu),this.molecule(MoleculeEnum.pmma,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemMagmaCream,true,5000,new PotionChemical[]{null,this.element(ElementEnum.Pu),null,this.molecule(MoleculeEnum.pmma),this.element(ElementEnum.Hg),this.molecule(MoleculeEnum.pmma),null,this.molecule(MoleculeEnum.pmma),null}));
  ItemStack itemSpeckledMelon=new ItemStack(Items.speckled_melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemSpeckledMelon,new PotionChemical[]{this.molecule(MoleculeEnum.water,4),this.molecule(MoleculeEnum.whitePigment),this.element(ElementEnum.Au,1)}));
  ItemStack itemEmerald=new ItemStack(Items.emerald);
  DecomposerRecipe.add(new DecomposerRecipe(itemEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,2),this.element(ElementEnum.Cr,2),this.element(ElementEnum.V,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEmerald,true,5000,new PotionChemical[]{null,this.element(ElementEnum.Cr),null,this.element(ElementEnum.V),this.molecule(MoleculeEnum.beryl,2),this.element(ElementEnum.V),null,this.element(ElementEnum.Cr),null}));
  ItemStack itemCarrot=new ItemStack(Items.carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemCarrot,new PotionChemical[]{this.molecule(MoleculeEnum.retinol)}));
  ItemStack itemPotato=new ItemStack(Items.potato);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPotato,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.water,8),this.element(ElementEnum.K,2),this.molecule(MoleculeEnum.cellulose)}));
  ItemStack itemGoldenCarrot=new ItemStack(Items.golden_carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemGoldenCarrot,new PotionChemical[]{this.molecule(MoleculeEnum.retinol),this.element(ElementEnum.Au,4)}));
  ItemStack itemNetherStar=new ItemStack(Items.nether_star);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherStar,new PotionChemical[]{this.element(ElementEnum.Cn,16),elementHydrogen,elementHydrogen,elementHydrogen,elementHelium,elementHelium,elementHelium,elementCarbon,elementCarbon}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherStar,true,5000,new PotionChemical[]{elementHelium,elementHelium,elementHelium,elementCarbon,this.element(ElementEnum.Cn,16),elementHelium,elementHydrogen,elementHydrogen,elementHydrogen}));
  ItemStack itemNetherQuartz=new ItemStack(Items.quartz);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherQuartz,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.galliumarsenide,1)}));
  ItemStack itemRecord13=new ItemStack(Items.record_13);
  ItemStack itemRecordCat=new ItemStack(Items.record_cat);
  ItemStack itemRecordFar=new ItemStack(Items.record_far);
  ItemStack itemRecordMall=new ItemStack(Items.record_mall);
  ItemStack itemRecordMellohi=new ItemStack(Items.record_mellohi);
  ItemStack itemRecordStal=new ItemStack(Items.record_stal);
  ItemStack itemRecordStrad=new ItemStack(Items.record_strad);
  ItemStack itemRecordWard=new ItemStack(Items.record_ward);
  ItemStack itemRecordChirp=new ItemStack(Items.record_chirp);
  DecomposerRecipe.add(new DecomposerRecipe(itemRecord13,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordCat,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordFar,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMall,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMellohi,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStal,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStrad,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordWard,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordChirp,new PotionChemical[]{moleculePolyvinylChloride}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecord13,true,1000,new PotionChemical[]{moleculePolyvinylChloride,null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordCat,true,1000,new PotionChemical[]{null,moleculePolyvinylChloride,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordFar,true,1000,new PotionChemical[]{null,null,moleculePolyvinylChloride,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMall,true,1000,new PotionChemical[]{null,null,null,moleculePolyvinylChloride,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMellohi,true,1000,new PotionChemical[]{null,null,null,null,moleculePolyvinylChloride,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStal,true,1000,new PotionChemical[]{null,null,null,null,null,moleculePolyvinylChloride,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStrad,true,1000,new PotionChemical[]{null,null,null,null,null,null,moleculePolyvinylChloride,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordWard,true,1000,new PotionChemical[]{null,null,null,null,null,null,null,moleculePolyvinylChloride,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordChirp,true,1000,new PotionChemical[]{null,null,null,null,null,null,null,null,moleculePolyvinylChloride}));
}","public void registerVanillaChemicalRecipes(){
  Molecule moleculeSiliconDioxide=this.molecule(MoleculeEnum.siliconDioxide,4);
  Molecule moleculeCellulose=this.molecule(MoleculeEnum.cellulose,1);
  Molecule moleculePolyvinylChloride=this.molecule(MoleculeEnum.polyvinylChloride);
  Molecule moleculeLazurite=this.molecule(MoleculeEnum.lazurite,9);
  Element elementHydrogen=this.element(ElementEnum.H,64);
  Element elementHelium=this.element(ElementEnum.He,64);
  Element elementCarbon=this.element(ElementEnum.C,64);
  ItemStack blockStone=new ItemStack(Blocks.stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockStone,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.stone,7),true,50,new PotionChemical[]{this.element(ElementEnum.Si),null,null,this.element(ElementEnum.O,2),null,null}));
  ItemStack blockGrass=new ItemStack(Blocks.grass,1,0);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockGrass,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)}),new DecomposerRecipe(new PotionChemical[]{moleculeCellulose})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.grass,16),true,50,new PotionChemical[]{null,moleculeCellulose,null,null,this.element(ElementEnum.O,2),this.element(ElementEnum.Si)}));
  ItemStack blockDirt=new ItemStack(Blocks.dirt,1,0);
  ItemStack blockPodzol=new ItemStack(Blocks.dirt,1,2);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockDirt,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)})}));
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockPodzol,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.dirt,1,0),true,50,new PotionChemical[]{null,null,null,null,this.element(ElementEnum.O,2),this.element(ElementEnum.Si)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.dirt,1,2),true,50,new PotionChemical[]{null,null,null,null,null,null,this.element(ElementEnum.O,2),this.element(ElementEnum.Si)}));
  ItemStack blockCobblestone=new ItemStack(Blocks.cobblestone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockCobblestone,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Na),this.element(ElementEnum.Cl)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.cobblestone),true,50,new PotionChemical[]{this.element(ElementEnum.Si),null,null,null,this.element(ElementEnum.O,2),null}));
  ItemStack blockOakWoodPlanks=new ItemStack(Blocks.planks,1,0);
  ItemStack blockSpruceWoodPlanks=new ItemStack(Blocks.planks,1,1);
  ItemStack blockBirchWoodPlanks=new ItemStack(Blocks.planks,1,2);
  ItemStack blockJungleWoodPlanks=new ItemStack(Blocks.planks,1,3);
  ItemStack blockAcaciaWoodPlanks=new ItemStack(Blocks.planks,1,4);
  ItemStack blockDarkOakWoodPlanks=new ItemStack(Blocks.planks,1,5);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAcaciaWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockDarkOakWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakWoodPlanks,true,20,new PotionChemical[]{null,null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceWoodPlanks,true,20,new PotionChemical[]{null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchWoodPlanks,true,20,new PotionChemical[]{null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleWoodPlanks,true,20,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose),null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockAcaciaWoodPlanks,true,20,new PotionChemical[]{null,null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDarkOakWoodPlanks,true,20,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.cellulose),this.molecule(MoleculeEnum.cellulose),null,null,null,null,null}));
  ItemStack blockOakWoodSlabs=new ItemStack(Blocks.wooden_slab,1,0);
  ItemStack blockSpruceWoodSlabs=new ItemStack(Blocks.wooden_slab,1,1);
  ItemStack blockBirchWoodSlabs=new ItemStack(Blocks.wooden_slab,1,2);
  ItemStack blockJungleWoodSlabs=new ItemStack(Blocks.wooden_slab,1,3);
  ItemStack blockAcaciaWoodSlabs=new ItemStack(Blocks.wooden_slab,1,4);
  ItemStack blockDarkOakWoodSlabs=new ItemStack(Blocks.wooden_slab,1,5);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAcaciaWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockDarkOakWoodSlabs,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakWoodSlabs,true,20,new PotionChemical[]{null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceWoodSlabs,true,20,new PotionChemical[]{null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchWoodSlabs,true,20,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleWoodSlabs,true,20,new PotionChemical[]{null,null,null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose),null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockAcaciaWoodSlabs,true,20,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDarkOakWoodSlabs,true,20,new PotionChemical[]{null,this.molecule(MoleculeEnum.cellulose),null,this.molecule(MoleculeEnum.cellulose),null,null,null,null,null}));
  ItemStack blockOakSapling=new ItemStack(Blocks.sapling,1,0);
  ItemStack blockSpruceSapling=new ItemStack(Blocks.sapling,1,1);
  ItemStack blockBirchSapling=new ItemStack(Blocks.sapling,1,2);
  ItemStack blockJungleSapling=new ItemStack(Blocks.sapling,1,3);
  ItemStack blockAcaciaSapling=new ItemStack(Blocks.sapling,1,4);
  ItemStack blockDarkOakSapling=new ItemStack(Blocks.sapling,1,5);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAcaciaSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockDarkOakSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleSapling,true,20,new PotionChemical[]{null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockAcaciaSapling,true,20,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDarkOakSapling,true,20,new PotionChemical[]{null,null,null,this.molecule(MoleculeEnum.cellulose),null,null,null,null,null}));
  ItemStack blockSand=new ItemStack(Blocks.sand);
  DecomposerRecipe.add(new DecomposerRecipe(blockSand,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSand,true,200,new PotionChemical[]{moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide}));
  ItemStack blockGravel=new ItemStack(Blocks.gravel);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGravel,0.35F,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGravel,true,30,new PotionChemical[]{null,null,null,null,null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide)}));
  ItemStack goldOre=new ItemStack(Blocks.gold_ore);
  DecomposerRecipe.add(new DecomposerRecipe(goldOre,new PotionChemical[]{this.element(ElementEnum.Au,48)}));
  ItemStack ironOre=new ItemStack(Blocks.iron_ore);
  DecomposerRecipe.add(new DecomposerRecipe(ironOre,new PotionChemical[]{this.element(ElementEnum.Fe,48)}));
  ItemStack coalOre=new ItemStack(Blocks.coal_ore);
  DecomposerRecipe.add(new DecomposerRecipe(coalOre,new PotionChemical[]{this.element(ElementEnum.C,48)}));
  ItemStack blockOakLog=new ItemStack(Blocks.log,1,0);
  ItemStack blockSpruceLog=new ItemStack(Blocks.log,1,1);
  ItemStack blockBirchLog=new ItemStack(Blocks.log,1,2);
  ItemStack blockJungleLog=new ItemStack(Blocks.log,1,3);
  ItemStack blockAcaciaLog=new ItemStack(Blocks.log2,1,0);
  ItemStack blockDarkOakLog=new ItemStack(Blocks.log2,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAcaciaLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockDarkOakLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakLog,true,100,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceLog,true,100,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchLog,true,100,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null,null,null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleLog,true,100,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2),null,null,this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockAcaciaLog,true,100,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),this.molecule(MoleculeEnum.cellulose,2),null,null,this.molecule(MoleculeEnum.cellulose,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDarkOakLog,true,100,new PotionChemical[]{null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null,this.molecule(MoleculeEnum.cellulose,2),null}));
  ItemStack blockOakLeaves=new ItemStack(Blocks.leaves,1,0);
  ItemStack blockSpruceLeaves=new ItemStack(Blocks.leaves,1,1);
  ItemStack blockBirchLeaves=new ItemStack(Blocks.leaves,1,2);
  ItemStack blockJungleLeaves=new ItemStack(Blocks.leaves,1,3);
  ItemStack blockAcaciaLeaves=new ItemStack(Blocks.leaves2,1,0);
  ItemStack blockDarkOakLeaves=new ItemStack(Blocks.leaves2,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAcaciaLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockDarkOakLeaves,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakLeaves,true,100,new PotionChemical[]{moleculeCellulose,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceLeaves,true,100,new PotionChemical[]{null,null,null,null,moleculeCellulose,null,moleculeCellulose,moleculeCellulose,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchLeaves,true,100,new PotionChemical[]{moleculeCellulose,null,moleculeCellulose,null,null,null,moleculeCellulose,null,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleLeaves,true,100,new PotionChemical[]{moleculeCellulose,null,null,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockAcaciaLeaves,true,100,new PotionChemical[]{null,null,moleculeCellulose,null,moleculeCellulose,moleculeCellulose,null,null,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDarkOakLeaves,true,100,new PotionChemical[]{null,moleculeCellulose,null,moleculeCellulose,null,moleculeCellulose,null,moleculeCellulose,null}));
  ItemStack blockGlass=new ItemStack(Blocks.glass);
  ItemStack blockWhiteStainedGlass=new ItemStack(Blocks.stained_glass,1,0);
  ItemStack blockOrangeStainedGlass=new ItemStack(Blocks.stained_glass,1,1);
  ItemStack blockMagentaStainedGlass=new ItemStack(Blocks.stained_glass,1,2);
  ItemStack blockLiteBlueStainedGlass=new ItemStack(Blocks.stained_glass,1,3);
  ItemStack blockYellowStainedGlass=new ItemStack(Blocks.stained_glass,1,4);
  ItemStack blockLimeStainedGlass=new ItemStack(Blocks.stained_glass,1,5);
  ItemStack blockPinkStainedGlass=new ItemStack(Blocks.stained_glass,1,6);
  ItemStack blockGrayStainedGlass=new ItemStack(Blocks.stained_glass,1,7);
  ItemStack blockLiteGrayStainedGlass=new ItemStack(Blocks.stained_glass,1,8);
  ItemStack blockCyanStainedGlass=new ItemStack(Blocks.stained_glass,1,9);
  ItemStack blockPurpleStainedGlass=new ItemStack(Blocks.stained_glass,1,10);
  ItemStack blockBlueStainedGlass=new ItemStack(Blocks.stained_glass,1,11);
  ItemStack blockBrownStainedGlass=new ItemStack(Blocks.stained_glass,1,12);
  ItemStack blockGreenStainedGlass=new ItemStack(Blocks.stained_glass,1,13);
  ItemStack blockRedStainedGlass=new ItemStack(Blocks.stained_glass,1,14);
  ItemStack blockBlackStainedGlass=new ItemStack(Blocks.stained_glass,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockWhiteStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockOrangeStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMagentaStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockLiteBlueStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.lazurite),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockYellowStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockLimeStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockPinkStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockGrayStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.blackPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockCyanStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockPurpleStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockGreenStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockBrownStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockRedStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockBlackStainedGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,null,null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWhiteStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.whitePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.orangePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.lightbluePigment),null,this.molecule(MoleculeEnum.redPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLiteBlueStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.lightbluePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.yellowPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.limePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.redPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.blackPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLiteGrayStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.lightbluePigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.purplePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.lazurite),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBrownStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.tannicacid),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.greenPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.redPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackStainedGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.blackPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  ItemStack blockGlassPane=new ItemStack(Blocks.glass_pane);
  ItemStack blockWhiteStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,0);
  ItemStack blockOrangeStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,1);
  ItemStack blockMagentaStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,2);
  ItemStack blockLiteBlueStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,3);
  ItemStack blockYellowStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,4);
  ItemStack blockLimeStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,5);
  ItemStack blockPinkStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,6);
  ItemStack blockGrayStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,7);
  ItemStack blockLiteGrayStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,8);
  ItemStack blockCyanStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,9);
  ItemStack blockPurpleStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,10);
  ItemStack blockBlueStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,11);
  ItemStack blockBrownStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,12);
  ItemStack blockGreenStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,13);
  ItemStack blockRedStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,14);
  ItemStack blockBlackStainedGlassPane=new ItemStack(Blocks.stained_glass_pane,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockWhiteStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockOrangeStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMagentaStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockLiteBlueStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.lazurite),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockYellowStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockLimeStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockPinkStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockGrayStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.blackPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockCyanStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockPurpleStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockGreenStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockBrownStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockRedStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockBlackStainedGlassPane,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWhiteStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.whitePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.orangePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.lightbluePigment),null,this.molecule(MoleculeEnum.redPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLiteBlueStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.lightbluePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.yellowPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.limePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.redPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.blackPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLiteGrayStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,this.molecule(MoleculeEnum.whitePigment),null,this.molecule(MoleculeEnum.lightbluePigment),moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.purplePigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.lazurite),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBrownStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.tannicacid),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.greenPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.redPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackStainedGlassPane,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,this.molecule(MoleculeEnum.blackPigment),null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  ItemStack blockOreLapis=new ItemStack(Blocks.lapis_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreLapis,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite,6),this.molecule(MoleculeEnum.sodalite),this.molecule(MoleculeEnum.noselite),this.molecule(MoleculeEnum.calcite),this.molecule(MoleculeEnum.pyrite)}));
  ItemStack blockLapis=new ItemStack(Blocks.lapis_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockLapis,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite,9)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLapis,true,450,new PotionChemical[]{moleculeLazurite,null,null,null,null,null,null,null,null}));
  ItemStack blockCobweb=new ItemStack(Blocks.web);
  DecomposerRecipe.add(new DecomposerRecipe(blockCobweb,new PotionChemical[]{this.molecule(MoleculeEnum.fibroin)}));
  ItemStack blockSunFlower=new ItemStack(Blocks.double_plant,1,0);
  ItemStack blockLilac=new ItemStack(Blocks.double_plant,1,1);
  ItemStack blockTallGrass=new ItemStack(Blocks.double_plant,1,2);
  ItemStack blockLargeFern=new ItemStack(Blocks.double_plant,1,3);
  ItemStack blockRoseBush=new ItemStack(Blocks.double_plant,1,4);
  ItemStack blockPeony=new ItemStack(Blocks.double_plant,1,5);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSunFlower,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLilac,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockTallGrass,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLargeFern,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRoseBush,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPeony,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSunFlower,true,450,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.yellowPigment),null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLilac,true,450,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.redPigment),new Molecule(MoleculeEnum.whitePigment,2),null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockTallGrass,true,450,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLargeFern,true,450,new PotionChemical[]{null,new Molecule(MoleculeEnum.shikimicAcid,2),null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRoseBush,true,450,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.redPigment),null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPeony,true,450,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.redPigment),new Molecule(MoleculeEnum.whitePigment),null,null,null,null,null,null}));
  ItemStack blockSandStone=new ItemStack(Blocks.sandstone,1,0);
  ItemStack blockChiseledSandStone=new ItemStack(Blocks.sandstone,1,1);
  ItemStack blockSmoothSandStone=new ItemStack(Blocks.sandstone,1,2);
  DecomposerRecipe.add(new DecomposerRecipe(blockSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockChiseledSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockSmoothSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSandStone,true,20,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide,16),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockChiseledSandStone,true,20,new PotionChemical[]{null,null,null,null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide,16),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSmoothSandStone,true,20,new PotionChemical[]{null,this.molecule(MoleculeEnum.siliconDioxide,16),null,null,null,null,null,null,null}));
  ItemStack blockWool=new ItemStack(Blocks.wool,1,0);
  ItemStack blockOrangeWool=new ItemStack(Blocks.wool,1,1);
  ItemStack blockMagentaWool=new ItemStack(Blocks.wool,1,2);
  ItemStack blockLightBlueWool=new ItemStack(Blocks.wool,1,3);
  ItemStack blockYellowWool=new ItemStack(Blocks.wool,1,4);
  ItemStack blockLimeWool=new ItemStack(Blocks.wool,1,5);
  ItemStack blockPinkWool=new ItemStack(Blocks.wool,1,6);
  ItemStack blockGrayWool=new ItemStack(Blocks.wool,1,7);
  ItemStack blockLightGrayWool=new ItemStack(Blocks.wool,1,8);
  ItemStack blockCyanWool=new ItemStack(Blocks.wool,1,9);
  ItemStack blockPurpleWool=new ItemStack(Blocks.wool,1,10);
  ItemStack blockBlueWool=new ItemStack(Blocks.wool,1,11);
  ItemStack blockBrownWool=new ItemStack(Blocks.wool,1,12);
  ItemStack blockGreenWool=new ItemStack(Blocks.wool,1,13);
  ItemStack blockRedWool=new ItemStack(Blocks.wool,1,14);
  ItemStack blockBlackWool=new ItemStack(Blocks.wool,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOrangeWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMagentaWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightBlueWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLimeWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPinkWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGrayWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightGrayWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCyanWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPurpleWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlueWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBrownWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGreenWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlackWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightBlueWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightGrayWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  ItemStack carpetBlockWool=new ItemStack(Blocks.carpet,1,0);
  ItemStack carpetBlockOrangeWool=new ItemStack(Blocks.carpet,1,1);
  ItemStack carpetBlockMagentaWool=new ItemStack(Blocks.carpet,1,2);
  ItemStack carpetBlockLightBlueWool=new ItemStack(Blocks.carpet,1,3);
  ItemStack carpetBlockYellowWool=new ItemStack(Blocks.carpet,1,4);
  ItemStack carpetBlockLimeWool=new ItemStack(Blocks.carpet,1,5);
  ItemStack carpetBlockPinkWool=new ItemStack(Blocks.carpet,1,6);
  ItemStack carpetBlockGrayWool=new ItemStack(Blocks.carpet,1,7);
  ItemStack carpetBlockLightGrayWool=new ItemStack(Blocks.carpet,1,8);
  ItemStack carpetBlockCyanWool=new ItemStack(Blocks.carpet,1,9);
  ItemStack carpetBlockPurpleWool=new ItemStack(Blocks.carpet,1,10);
  ItemStack carpetBlockBlueWool=new ItemStack(Blocks.carpet,1,11);
  ItemStack carpetBlockBrownWool=new ItemStack(Blocks.carpet,1,12);
  ItemStack carpetBlockGreenWool=new ItemStack(Blocks.carpet,1,13);
  ItemStack carpetBlockRedWool=new ItemStack(Blocks.carpet,1,14);
  ItemStack carpetBlockBlackWool=new ItemStack(Blocks.carpet,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockOrangeWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockMagentaWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLightBlueWool,0.2F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockYellowWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLimeWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockPinkWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockGrayWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLightGrayWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockCyanWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockPurpleWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBlueWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBrownWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockGreenWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockRedWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBlackWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(carpetBlockWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  ItemStack blockYellowFlower=new ItemStack(Blocks.yellow_flower);
  ItemStack blockPoppyFlower=new ItemStack(Blocks.red_flower,1,0);
  ItemStack blockBlueOrchid=new ItemStack(Blocks.red_flower,1,1);
  ItemStack blockAllium=new ItemStack(Blocks.red_flower,1,2);
  ItemStack blockAsureBluet=new ItemStack(Blocks.red_flower,1,3);
  ItemStack blockRedTulip=new ItemStack(Blocks.red_flower,1,4);
  ItemStack blockOrangeTulip=new ItemStack(Blocks.red_flower,1,5);
  ItemStack blockWhiteTulip=new ItemStack(Blocks.red_flower,1,6);
  ItemStack blockPinkTulip=new ItemStack(Blocks.red_flower,1,7);
  ItemStack blockOxeyeDaisy=new ItemStack(Blocks.red_flower,1,8);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowFlower,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.yellowPigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPoppyFlower,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.redPigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlueOrchid,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAllium,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.purplePigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockAsureBluet,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.whitePigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedTulip,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.redPigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOrangeTulip,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.orangePigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockWhiteTulip,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.whitePigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPinkTulip,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.whitePigment,1),new Molecule(MoleculeEnum.redPigment,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOxeyeDaisy,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2),new Molecule(MoleculeEnum.whitePigment,1)}));
  ItemStack blockMushroomBrown=new ItemStack(Blocks.brown_mushroom);
  ItemStack blockMushroomRed=new ItemStack(Blocks.red_mushroom);
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomBrown,new PotionChemical[]{this.molecule(MoleculeEnum.psilocybin),this.molecule(MoleculeEnum.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomRed,new PotionChemical[]{this.molecule(MoleculeEnum.pantherine),this.molecule(MoleculeEnum.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Blocks.gold_block),new PotionChemical[]{this.element(ElementEnum.Au,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Blocks.iron_block),new PotionChemical[]{this.element(ElementEnum.Fe,144)}));
  ItemStack blockTnt=new ItemStack(Blocks.tnt);
  DecomposerRecipe.add(new DecomposerRecipe(blockTnt,new PotionChemical[]{this.molecule(MoleculeEnum.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockTnt,false,1000,new PotionChemical[]{this.molecule(MoleculeEnum.tnt)}));
  ItemStack blockObsidian=new ItemStack(Blocks.obsidian);
  DecomposerRecipe.add(new DecomposerRecipe(blockObsidian,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.magnesiumOxide,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockObsidian,true,1000,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.magnesiumOxide,2),null,this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.magnesiumOxide,2),this.molecule(MoleculeEnum.magnesiumOxide,2),this.molecule(MoleculeEnum.magnesiumOxide,2)}));
  ItemStack blockOreDiamond=new ItemStack(Blocks.diamond_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,6)}));
  ItemStack blockDiamond=new ItemStack(Blocks.diamond_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,36)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDiamond,true,100000,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4)}));
  ItemStack blockPressurePlatePlanks=new ItemStack(Blocks.wooden_pressure_plate);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPressurePlatePlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  ItemStack blockOreRedstone=new ItemStack(Blocks.redstone_ore);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOreRedstone,0.8F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide,9),this.element(ElementEnum.Cu,9)}));
  ItemStack blockCactus=new ItemStack(Blocks.cactus);
  DecomposerRecipe.add(new DecomposerRecipe(blockCactus,new PotionChemical[]{this.molecule(MoleculeEnum.mescaline),this.molecule(MoleculeEnum.water,20)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCactus,true,200,new PotionChemical[]{this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.mescaline),null,this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.water,5)}));
  ItemStack blockPumpkin=new ItemStack(Blocks.pumpkin);
  DecomposerRecipe.add(new DecomposerRecipe(blockPumpkin,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPumpkin,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin)}));
  ItemStack blockNetherrack=new ItemStack(Blocks.netherrack);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockNetherrack,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Ni),this.element(ElementEnum.Tc)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,3),this.element(ElementEnum.Ti),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,1),this.element(ElementEnum.W,4),this.element(ElementEnum.Cr,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,10),this.element(ElementEnum.W,1),this.element(ElementEnum.Zn,8),this.element(ElementEnum.Be,4)})}));
  ItemStack itemNetherbrick=new ItemStack(Items.netherbrick);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemNetherbrick,0.15F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.C),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Ni),this.element(ElementEnum.Tc)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,3),this.element(ElementEnum.Ti),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,1),this.element(ElementEnum.W,4),this.element(ElementEnum.Cr,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,10),this.element(ElementEnum.W,1),this.element(ElementEnum.Zn,8),this.element(ElementEnum.Be,4)})}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherbrick,true,200,new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Si,2),null,this.element(ElementEnum.Zn,2),this.element(ElementEnum.W,1),null,this.element(ElementEnum.Be,2),this.element(ElementEnum.Be,2),null}));
  ItemStack itemPotion=new ItemStack(Items.potionitem,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemPotion,new PotionChemical[]{this.molecule(MoleculeEnum.water,8)}));
  ItemStack blockSlowSand=new ItemStack(Blocks.soul_sand);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockSlowSand,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb,3),this.element(ElementEnum.Be,1),this.element(ElementEnum.Si,2),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb,1),this.element(ElementEnum.Si,5),this.element(ElementEnum.O,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,6),this.element(ElementEnum.O,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Es,1),this.element(ElementEnum.O,2)})}));
  ItemStack blockGlowStone=new ItemStack(Blocks.glowstone);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlowStone,new PotionChemical[]{this.element(ElementEnum.P,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlowStone,true,500,new PotionChemical[]{this.element(ElementEnum.P),null,this.element(ElementEnum.P),this.element(ElementEnum.P),null,this.element(ElementEnum.P),null,null,null}));
  ItemStack blockMycelium=new ItemStack(Blocks.mycelium);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMycelium,0.09F,new PotionChemical[]{this.molecule(MoleculeEnum.fingolimod)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.mycelium,16),false,300,new PotionChemical[]{this.molecule(MoleculeEnum.fingolimod)}));
  ItemStack blockWhiteStone=new ItemStack(Blocks.end_stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockWhiteStone,0.8F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O),this.element(ElementEnum.H,4),this.element(ElementEnum.Li)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Es)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pu)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fr)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Nd)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O,4)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.H,4)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Be,8)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Li,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zr)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Na)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Rb)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)})}));
  ItemStack blockOreEmerald=new ItemStack(Blocks.emerald_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,6),this.element(ElementEnum.Cr,6),this.element(ElementEnum.V,6)}));
  ItemStack blockEmerald=new ItemStack(Blocks.emerald_block);
  SynthesisRecipe.add(new SynthesisRecipe(blockEmerald,true,150000,new PotionChemical[]{this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.V,9),this.molecule(MoleculeEnum.beryl,18),this.element(ElementEnum.V,9),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,18),this.element(ElementEnum.Cr,18),this.element(ElementEnum.V,18)}));
  ItemStack itemAppleRed=new ItemStack(Items.apple);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleRed,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemAppleRed,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid),this.molecule(MoleculeEnum.water,2)}));
  ItemStack itemArrow=new ItemStack(Items.arrow);
  DecomposerRecipe.add(new DecomposerRecipe(itemArrow,new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O,2),this.element(ElementEnum.N,6)}));
  ItemStack itemCoal=new ItemStack(Items.coal);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemCoal,0.92F,new PotionChemical[]{this.element(ElementEnum.C,8)}));
  ItemStack blockCoal=new ItemStack(Blocks.coal_block);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCoal,0.82F,new PotionChemical[]{this.element(ElementEnum.C,72)}));
  ItemStack itemChar=new ItemStack(Items.coal,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemChar,0.82F,new PotionChemical[]{this.element(ElementEnum.C,1)}));
  ItemStack itemDiamond=new ItemStack(Items.diamond);
  DecomposerRecipe.add(new DecomposerRecipe(itemDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(MinechemItemsRegistration.polytool),true,'\uea60',new PotionChemical[]{null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDiamond,true,'\uea60',new PotionChemical[]{null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null}));
  ItemStack itemIngotIron=new ItemStack(Items.iron_ingot);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotIron,new PotionChemical[]{this.element(ElementEnum.Fe,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotIron,false,1000,new PotionChemical[]{this.element(ElementEnum.Fe,16)}));
  ItemStack itemIngotGold=new ItemStack(Items.gold_ingot);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotGold,new PotionChemical[]{this.element(ElementEnum.Au,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotGold,false,1000,new PotionChemical[]{this.element(ElementEnum.Au,16)}));
  ItemStack itemStick=new ItemStack(Items.stick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemStick,0.3F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  ItemStack itemString=new ItemStack(Items.string);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemString,0.45F,new PotionChemical[]{this.molecule(MoleculeEnum.serine),this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.alinine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemString,true,150,new PotionChemical[]{this.molecule(MoleculeEnum.serine),this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.alinine)}));
  ItemStack itemFeather=new ItemStack(Items.feather);
  DecomposerRecipe.add(new DecomposerRecipe(itemFeather,new PotionChemical[]{this.molecule(MoleculeEnum.water,8),this.element(ElementEnum.N,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFeather,true,800,new PotionChemical[]{this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,2),this.element(ElementEnum.N),this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,1),this.element(ElementEnum.N),this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,5),this.element(ElementEnum.N)}));
  ItemStack itemGunpowder=new ItemStack(Items.gunpowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemGunpowder,new PotionChemical[]{this.molecule(MoleculeEnum.potassiumNitrate),this.element(ElementEnum.S,2),this.element(ElementEnum.C)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGunpowder,true,600,new PotionChemical[]{this.molecule(MoleculeEnum.potassiumNitrate),this.element(ElementEnum.C),null,this.element(ElementEnum.S,2),null,null,null,null,null}));
  ItemStack itemBread=new ItemStack(Items.bread);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBread,0.1F,new PotionChemical[]{this.molecule(MoleculeEnum.starch),this.molecule(MoleculeEnum.sucrose)}));
  ItemStack itemFlint=new ItemStack(Items.flint);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemFlint,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFlint,true,100,new PotionChemical[]{null,moleculeSiliconDioxide,null,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,null,null,null}));
  ItemStack itemAppleGold=new ItemStack(Items.golden_apple,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleGold,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid),this.element(ElementEnum.Au,64)}));
  ItemStack itemDoorWood=new ItemStack(Items.wooden_door);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDoorWood,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,12)}));
  ItemStack itemBucketWater=new ItemStack(Items.water_bucket);
  DecomposerRecipe.add(new DecomposerRecipe(itemBucketWater,new PotionChemical[]{this.molecule(MoleculeEnum.water,16),this.element(ElementEnum.Fe,48)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBucketWater,true,1000,new PotionChemical[]{null,null,null,this.element(ElementEnum.Fe,16),this.molecule(MoleculeEnum.water,16),this.element(ElementEnum.Fe,16),null,this.element(ElementEnum.Fe,16),null}));
  ItemStack itemRedstone=new ItemStack(Items.redstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRedstone,0.42F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide),this.element(ElementEnum.Cu)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRedstone,true,100,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.iron3oxide),null,this.element(ElementEnum.Cu),null,null,null,null}));
  ItemStack blockRedstone=new ItemStack(Blocks.redstone_block);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedstone,0.42F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide,9),this.element(ElementEnum.Cu,9)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedstone,true,900,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.iron3oxide,9),null,this.element(ElementEnum.Cu,9),null,null,null,null}));
  ItemStack itemSnowball=new ItemStack(Items.snowball);
  DecomposerRecipe.add(new DecomposerRecipe(itemSnowball,new PotionChemical[]{this.molecule(MoleculeEnum.water)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.snowball,5),true,20,new PotionChemical[]{this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water)}));
  ItemStack itemLeather=new ItemStack(Items.leather);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemLeather,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.keratin)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.leather,5),true,700,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.keratin),null,null,null,null}));
  ItemStack itemBrick=new ItemStack(Items.brick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBrick,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.brick,8),true,400,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite),this.molecule(MoleculeEnum.kaolinite),null,this.molecule(MoleculeEnum.kaolinite),this.molecule(MoleculeEnum.kaolinite),null}));
  ItemStack itemClayBall=new ItemStack(Items.clay_ball);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemClayBall,0.3F,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.clay_ball,12),false,100,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  ItemStack itemReed=new ItemStack(Items.reeds);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemReed,0.65F,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose),this.element(ElementEnum.H,2),this.element(ElementEnum.O)}));
  ItemStack itemPaper=new ItemStack(Items.paper);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPaper,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.paper,16),true,150,new PotionChemical[]{null,this.molecule(MoleculeEnum.cellulose),null,null,this.molecule(MoleculeEnum.cellulose),null,null,this.molecule(MoleculeEnum.cellulose),null}));
  ItemStack itemSlimeBall=new ItemStack(Items.slime_ball);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemSlimeBall,0.9F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.molecule(MoleculeEnum.pmma)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Hg)}),new DecomposerRecipe(new PotionChemical[]{this.molecule(MoleculeEnum.water,10)})}));
  ItemStack itemGlowstone=new ItemStack(Items.glowstone_dust);
  DecomposerRecipe.add(new DecomposerRecipe(itemGlowstone,new PotionChemical[]{this.element(ElementEnum.P)}));
  ItemStack itemDyePowderBlack=new ItemStack(Items.dye,1,0);
  ItemStack itemDyePowderRed=new ItemStack(Items.dye,1,1);
  ItemStack itemDyePowderGreen=new ItemStack(Items.dye,1,2);
  ItemStack itemDyePowderBrown=new ItemStack(Items.dye,1,3);
  ItemStack itemDyePowderBlue=new ItemStack(Items.dye,1,4);
  ItemStack itemDyePowderPurple=new ItemStack(Items.dye,1,5);
  ItemStack itemDyePowderCyan=new ItemStack(Items.dye,1,6);
  ItemStack itemDyePowderLightGray=new ItemStack(Items.dye,1,7);
  ItemStack itemDyePowderGray=new ItemStack(Items.dye,1,8);
  ItemStack itemDyePowderPink=new ItemStack(Items.dye,1,9);
  ItemStack itemDyePowderLime=new ItemStack(Items.dye,1,10);
  ItemStack itemDyePowderYellow=new ItemStack(Items.dye,1,11);
  ItemStack itemDyePowderLightBlue=new ItemStack(Items.dye,1,12);
  ItemStack itemDyePowderMagenta=new ItemStack(Items.dye,1,13);
  ItemStack itemDyePowderOrange=new ItemStack(Items.dye,1,14);
  ItemStack itemDyePowderWhite=new ItemStack(Items.dye,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlack,new PotionChemical[]{this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderRed,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGreen,new PotionChemical[]{this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDyePowderBrown,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.theobromine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlue,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPurple,new PotionChemical[]{this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderCyan,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightGray,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGray,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPink,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLime,new PotionChemical[]{this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderYellow,new PotionChemical[]{this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightBlue,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderMagenta,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderOrange,new PotionChemical[]{this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderWhite,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlack,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderRed,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGreen,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBrown,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.theobromine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlue,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPurple,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderCyan,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightGray,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGray,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPink,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLime,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderYellow,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightBlue,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderMagenta,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderOrange,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderWhite,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment)}));
  ItemStack itemBone=new ItemStack(Items.bone);
  DecomposerRecipe.add(new DecomposerRecipe(itemBone,new PotionChemical[]{this.molecule(MoleculeEnum.hydroxylapatite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBone,false,100,new PotionChemical[]{this.molecule(MoleculeEnum.hydroxylapatite)}));
  ItemStack itemSugar=new ItemStack(Items.sugar);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSugar,0.75F,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSugar,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose)}));
  ItemStack itemMelon=new ItemStack(Items.melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemMelon,new PotionChemical[]{this.molecule(MoleculeEnum.water,1)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.melon),false,300,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin),this.molecule(MoleculeEnum.asparticAcid),this.molecule(MoleculeEnum.water,1)}));
  ItemStack blockMelon=new ItemStack(Blocks.melon_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockMelon,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin),this.molecule(MoleculeEnum.asparticAcid),this.molecule(MoleculeEnum.water,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.melon_block,1),false,300,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin),this.molecule(MoleculeEnum.asparticAcid),this.molecule(MoleculeEnum.water,16)}));
  ItemStack itemChickenCooked=new ItemStack(Items.cooked_chicken);
  DecomposerRecipe.add(new DecomposerRecipe(itemChickenCooked,new PotionChemical[]{this.element(ElementEnum.K),this.element(ElementEnum.Na),this.element(ElementEnum.C,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemChickenCooked,true,5000,new PotionChemical[]{this.element(ElementEnum.K,16),this.element(ElementEnum.Na,16),this.element(ElementEnum.C,16)}));
  ItemStack itemRottenFlesh=new ItemStack(Items.rotten_flesh);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRottenFlesh,0.05F,new PotionChemical[]{new Molecule(MoleculeEnum.nodularin,1)}));
  ItemStack itemEnderPearl=new ItemStack(Items.ender_pearl);
  DecomposerRecipe.add(new DecomposerRecipe(itemEnderPearl,new PotionChemical[]{this.element(ElementEnum.Es),this.molecule(MoleculeEnum.calciumCarbonate,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEnderPearl,true,5000,new PotionChemical[]{this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.element(ElementEnum.Es),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate)}));
  ItemStack itemBlazeRod=new ItemStack(Items.blaze_rod);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazeRod,new PotionChemical[]{this.element(ElementEnum.Pu,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBlazeRod,true,15000,new PotionChemical[]{this.element(ElementEnum.Pu,2),null,null,this.element(ElementEnum.Pu,2),null,null,this.element(ElementEnum.Pu,2),null,null}));
  ItemStack itemBlazePowder=new ItemStack(Items.blaze_powder);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazePowder,new PotionChemical[]{this.element(ElementEnum.Pu)}));
  ItemStack itemGhastTear=new ItemStack(Items.ghast_tear);
  DecomposerRecipe.add(new DecomposerRecipe(itemGhastTear,new PotionChemical[]{this.element(ElementEnum.Yb,4),this.element(ElementEnum.No,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGhastTear,true,15000,new PotionChemical[]{this.element(ElementEnum.Yb),this.element(ElementEnum.Yb),this.element(ElementEnum.No),null,this.element(ElementEnum.Yb,2),this.element(ElementEnum.No,2),null,this.element(ElementEnum.No),null}));
  ItemStack itemNetherStalkSeeds=new ItemStack(Items.nether_wart);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemNetherStalkSeeds,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cocainehcl)}));
  ItemStack itemSpiderEye=new ItemStack(Items.spider_eye);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSpiderEye,0.2F,new PotionChemical[]{this.molecule(MoleculeEnum.tetrodotoxin)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSpiderEye,true,2000,new PotionChemical[]{this.element(ElementEnum.C),null,null,null,this.molecule(MoleculeEnum.tetrodotoxin),null,null,null,this.element(ElementEnum.C)}));
  ItemStack itemFermentedSpiderEye=new ItemStack(Items.fermented_spider_eye);
  DecomposerRecipe.add(new DecomposerRecipe(itemFermentedSpiderEye,new PotionChemical[]{this.element(ElementEnum.Po),this.molecule(MoleculeEnum.ethanol)}));
  ItemStack itemMagmaCream=new ItemStack(Items.magma_cream);
  DecomposerRecipe.add(new DecomposerRecipe(itemMagmaCream,new PotionChemical[]{this.element(ElementEnum.Hg),this.element(ElementEnum.Pu),this.molecule(MoleculeEnum.pmma,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemMagmaCream,true,5000,new PotionChemical[]{null,this.element(ElementEnum.Pu),null,this.molecule(MoleculeEnum.pmma),this.element(ElementEnum.Hg),this.molecule(MoleculeEnum.pmma),null,this.molecule(MoleculeEnum.pmma),null}));
  ItemStack itemSpeckledMelon=new ItemStack(Items.speckled_melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemSpeckledMelon,new PotionChemical[]{this.molecule(MoleculeEnum.water,4),this.molecule(MoleculeEnum.whitePigment),this.element(ElementEnum.Au,1)}));
  ItemStack itemEmerald=new ItemStack(Items.emerald);
  DecomposerRecipe.add(new DecomposerRecipe(itemEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,2),this.element(ElementEnum.Cr,2),this.element(ElementEnum.V,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEmerald,true,5000,new PotionChemical[]{null,this.element(ElementEnum.Cr),null,this.element(ElementEnum.V),this.molecule(MoleculeEnum.beryl,2),this.element(ElementEnum.V),null,this.element(ElementEnum.Cr),null}));
  ItemStack itemCarrot=new ItemStack(Items.carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemCarrot,new PotionChemical[]{this.molecule(MoleculeEnum.retinol)}));
  ItemStack itemPotato=new ItemStack(Items.potato);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPotato,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.water,8),this.element(ElementEnum.K,2),this.molecule(MoleculeEnum.cellulose)}));
  ItemStack itemGoldenCarrot=new ItemStack(Items.golden_carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemGoldenCarrot,new PotionChemical[]{this.molecule(MoleculeEnum.retinol),this.element(ElementEnum.Au,4)}));
  ItemStack itemNetherStar=new ItemStack(Items.nether_star);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherStar,new PotionChemical[]{this.element(ElementEnum.Cn,16),elementHydrogen,elementHydrogen,elementHydrogen,elementHelium,elementHelium,elementHelium,elementCarbon,elementCarbon}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherStar,true,5000,new PotionChemical[]{elementHelium,elementHelium,elementHelium,elementCarbon,this.element(ElementEnum.Cn,16),elementHelium,elementHydrogen,elementHydrogen,elementHydrogen}));
  ItemStack itemNetherQuartz=new ItemStack(Items.quartz);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherQuartz,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.galliumarsenide,1)}));
  ItemStack itemRecord13=new ItemStack(Items.record_13);
  ItemStack itemRecordCat=new ItemStack(Items.record_cat);
  ItemStack itemRecordFar=new ItemStack(Items.record_far);
  ItemStack itemRecordMall=new ItemStack(Items.record_mall);
  ItemStack itemRecordMellohi=new ItemStack(Items.record_mellohi);
  ItemStack itemRecordStal=new ItemStack(Items.record_stal);
  ItemStack itemRecordStrad=new ItemStack(Items.record_strad);
  ItemStack itemRecordWard=new ItemStack(Items.record_ward);
  ItemStack itemRecordChirp=new ItemStack(Items.record_chirp);
  DecomposerRecipe.add(new DecomposerRecipe(itemRecord13,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordCat,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordFar,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMall,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMellohi,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStal,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStrad,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordWard,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordChirp,new PotionChemical[]{moleculePolyvinylChloride}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecord13,true,1000,new PotionChemical[]{moleculePolyvinylChloride,null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordCat,true,1000,new PotionChemical[]{null,moleculePolyvinylChloride,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordFar,true,1000,new PotionChemical[]{null,null,moleculePolyvinylChloride,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMall,true,1000,new PotionChemical[]{null,null,null,moleculePolyvinylChloride,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMellohi,true,1000,new PotionChemical[]{null,null,null,null,moleculePolyvinylChloride,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStal,true,1000,new PotionChemical[]{null,null,null,null,null,moleculePolyvinylChloride,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStrad,true,1000,new PotionChemical[]{null,null,null,null,null,null,moleculePolyvinylChloride,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordWard,true,1000,new PotionChemical[]{null,null,null,null,null,null,null,moleculePolyvinylChloride,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordChirp,true,1000,new PotionChemical[]{null,null,null,null,null,null,null,null,moleculePolyvinylChloride}));
}",0.999149992730201
21848,"private static void loadConfig(){
  Property prop;
  List<String> configList=new ArrayList<String>();
  config.addCustomCategoryComment(""String_Node_Str"",StatCollector.translateToLocal(""String_Node_Str""));
  config.addCustomCategoryComment(""String_Node_Str"",StatCollector.translateToLocal(""String_Node_Str""));
  config.addCustomCategoryComment(""String_Node_Str"",StatCollector.translateToLocal(""String_Node_Str""));
  config.addCustomCategoryComment(Configuration.CATEGORY_GENERAL,StatCollector.translateToLocal(""String_Node_Str""));
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.generateOre);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  generateOre=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.UraniumOreClusterSize);
  prop.setMinValue(1).setMaxValue(10);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  UraniumOreClusterSize=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.UraniumOreDensity);
  prop.setMinValue(1).setMaxValue(64);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  UraniumOreDensity=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.UraniumOreCraftable);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  UraniumOreCraftable=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",Settings.DebugMode);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  DebugMode=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",Settings.UpdateRadius);
  prop.setMinValue(1).setMaxValue(50);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  UpdateRadius=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",Settings.AllowAutomation);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  AllowAutomation=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",Settings.FoodSpiking);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  FoodSpiking=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",Settings.SwordEffects);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  SwordEffects=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  prop.setLanguageKey(""String_Node_Str"").setRequiresMcRestart(true);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  DecomposerBlacklist=prop.getStringList();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  prop.setLanguageKey(""String_Node_Str"").setRequiresMcRestart(true);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  SynthesisMachineBlacklist=prop.getStringList();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.powerUseEnabled);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"").setRequiresMcRestart(true);
  powerUseEnabled=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.maxDecomposerStorage);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  maxDecomposerStorage=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.costDecomposition);
  prop.setMinValue(1).setMaxValue(Settings.maxDecomposerStorage);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  costDecomposition=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.maxSynthesizerStorage);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  maxSynthesizerStorage=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.synthesisMultiplier);
  prop.setMinValue(1).setMaxValue(100);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  synthesisMultiplier=prop.getInt();
  configList.add(prop.getName());
  if (config.hasChanged()) {
    config.save();
  }
}","private static void loadConfig(){
  Property prop;
  List<String> configList=new ArrayList<String>();
  config.addCustomCategoryComment(""String_Node_Str"",StatCollector.translateToLocal(""String_Node_Str""));
  config.addCustomCategoryComment(""String_Node_Str"",StatCollector.translateToLocal(""String_Node_Str""));
  config.addCustomCategoryComment(""String_Node_Str"",StatCollector.translateToLocal(""String_Node_Str""));
  config.addCustomCategoryComment(Configuration.CATEGORY_GENERAL,StatCollector.translateToLocal(""String_Node_Str""));
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.generateOre);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  generateOre=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.UraniumOreClusterSize);
  prop.setMinValue(1).setMaxValue(10);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  UraniumOreClusterSize=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.UraniumOreDensity);
  prop.setMinValue(1).setMaxValue(64);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  UraniumOreDensity=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",Settings.DebugMode);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  DebugMode=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",Settings.UpdateRadius);
  prop.setMinValue(1).setMaxValue(50);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  UpdateRadius=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",Settings.AllowAutomation);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  AllowAutomation=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",Settings.FoodSpiking);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  FoodSpiking=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",Settings.SwordEffects);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  SwordEffects=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  prop.setLanguageKey(""String_Node_Str"").setRequiresMcRestart(true);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  DecomposerBlacklist=prop.getStringList();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  prop.setLanguageKey(""String_Node_Str"").setRequiresMcRestart(true);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  SynthesisMachineBlacklist=prop.getStringList();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.powerUseEnabled);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"").setRequiresMcRestart(true);
  powerUseEnabled=prop.getBoolean();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.maxDecomposerStorage);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  maxDecomposerStorage=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.costDecomposition);
  prop.setMinValue(1).setMaxValue(Settings.maxDecomposerStorage);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  costDecomposition=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.maxSynthesizerStorage);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  maxSynthesizerStorage=prop.getInt();
  configList.add(prop.getName());
  prop=config.get(""String_Node_Str"",""String_Node_Str"",Settings.synthesisMultiplier);
  prop.setMinValue(1).setMaxValue(100);
  prop.comment=StatCollector.translateToLocal(""String_Node_Str"");
  prop.setLanguageKey(""String_Node_Str"");
  synthesisMultiplier=prop.getInt();
  configList.add(prop.getName());
  if (config.hasChanged()) {
    config.save();
  }
}",0.973407422107561
21849,"@Override public void readFromNBT(NBTTagCompound nbtTagCompound){
  super.readFromNBT(nbtTagCompound);
  managerXOffset=nbtTagCompound.getInteger(""String_Node_Str"");
  managerYOffset=nbtTagCompound.getInteger(""String_Node_Str"");
  managerZOffset=nbtTagCompound.getInteger(""String_Node_Str"");
  if (worldObj != null)   manager=worldObj.getBlockTileEntity(xCoord + managerXOffset,yCoord + managerYOffset,zCoord + managerZOffset);
}","@Override public void readFromNBT(NBTTagCompound nbtTagCompound){
  super.readFromNBT(nbtTagCompound);
  managerXOffset=nbtTagCompound.getInteger(""String_Node_Str"");
  managerYOffset=nbtTagCompound.getInteger(""String_Node_Str"");
  managerZOffset=nbtTagCompound.getInteger(""String_Node_Str"");
  if (worldObj != null) {
    manager=worldObj.getBlockTileEntity(xCoord + managerXOffset,yCoord + managerYOffset,zCoord + managerZOffset);
  }
}",0.9907621247113164
21850,"@Override public int[] getAccessibleSlotsFromSide(int var1){
  if (this.getManager() != null && this.getManager() instanceof ISidedInventory) {
    return ((ISidedInventory)this.getManager()).getAccessibleSlotsFromSide(var1);
  }
  return new int[0];
}","@Override public int[] getAccessibleSlotsFromSide(int var1){
  if (this.getManager() != null && this.getManager() instanceof ISidedInventory) {
    try {
      return ((ISidedInventory)this.getManager()).getAccessibleSlotsFromSide(var1);
    }
 catch (    StackOverflowError o) {
      if (Settings.DebugMode) {
        System.out.println(""String_Node_Str"" + this.xCoord + ""String_Node_Str""+ this.yCoord+ ""String_Node_Str""+ this.zCoord);
      }
    }
  }
  return new int[0];
}",0.6904109589041096
21851,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase el,ItemStack is){
  if (!world.isRemote) {
  }
  byte facing=0;
  int facingI=MathHelper.floor_double(el.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
  if (facingI == 0) {
    facing=2;
  }
  if (facingI == 1) {
    facing=5;
  }
  if (facingI == 2) {
    facing=3;
  }
  if (facingI == 3) {
    facing=4;
  }
  world.setBlockMetadataWithNotify(x,y,z,facing,2);
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase el,ItemStack is){
  if (!world.isRemote && el instanceof EntityPlayer) {
    EntityPlayer entityPlayer=(EntityPlayer)el;
    entityPlayer.addChatMessage(new ChatComponentText(""String_Node_Str""));
    entityPlayer.addChatMessage(new ChatComponentText(""String_Node_Str""));
  }
  byte facing=0;
  int facingI=MathHelper.floor_double(el.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
  if (facingI == 0) {
    facing=2;
  }
  if (facingI == 1) {
    facing=5;
  }
  if (facingI == 2) {
    facing=3;
  }
  if (facingI == 3) {
    facing=4;
  }
  world.setBlockMetadataWithNotify(x,y,z,facing,2);
}",0.7956989247311828
21852,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase el,ItemStack is){
  if (!world.isRemote) {
  }
  byte facing=0;
  int facingI=MathHelper.floor_double(el.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
  if (facingI == 0) {
    facing=2;
  }
  if (facingI == 1) {
    facing=5;
  }
  if (facingI == 2) {
    facing=3;
  }
  if (facingI == 3) {
    facing=4;
  }
  world.setBlockMetadataWithNotify(x,y,z,facing,2);
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase el,ItemStack is){
  if (!world.isRemote && el instanceof EntityPlayer) {
    EntityPlayer entityPlayer=(EntityPlayer)el;
    entityPlayer.addChatMessage(new ChatComponentText(""String_Node_Str""));
    entityPlayer.addChatMessage(new ChatComponentText(""String_Node_Str""));
  }
  byte facing=0;
  int facingI=MathHelper.floor_double(el.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
  if (facingI == 0) {
    facing=2;
  }
  if (facingI == 1) {
    facing=5;
  }
  if (facingI == 2) {
    facing=3;
  }
  if (facingI == 3) {
    facing=4;
  }
  world.setBlockMetadataWithNotify(x,y,z,facing,2);
}",0.7956989247311828
21853,"public void registerVanillaChemicalRecipes(){
  Molecule moleculeSiliconDioxide=this.molecule(MoleculeEnum.siliconDioxide,4);
  Molecule moleculeCellulose=this.molecule(MoleculeEnum.cellulose,1);
  Molecule moleculePolyvinylChloride=this.molecule(MoleculeEnum.polyvinylChloride);
  Molecule moleculeLazurite=this.molecule(MoleculeEnum.lazurite,9);
  Element elementHydrogen=this.element(ElementEnum.H,64);
  Element elementHelium=this.element(ElementEnum.He,64);
  Element elementCarbon=this.element(ElementEnum.C,64);
  ItemStack blockStone=new ItemStack(Blocks.stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockStone,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.stone,7),true,50,new PotionChemical[]{this.element(ElementEnum.Si),null,null,this.element(ElementEnum.O,2),null,null}));
  ItemStack blockGrass=new ItemStack(Blocks.grass);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockGrass,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)}),new DecomposerRecipe(new PotionChemical[]{moleculeCellulose})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.grass,16),true,50,new PotionChemical[]{null,moleculeCellulose,null,null,this.element(ElementEnum.O,2),this.element(ElementEnum.Si)}));
  ItemStack blockDirt=new ItemStack(Blocks.dirt);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockDirt,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.dirt,16),true,50,new PotionChemical[]{null,null,null,null,this.element(ElementEnum.O,2),this.element(ElementEnum.Si)}));
  ItemStack blockCobblestone=new ItemStack(Blocks.cobblestone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockCobblestone,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Na),this.element(ElementEnum.Cl)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.cobblestone,8),true,50,new PotionChemical[]{this.element(ElementEnum.Si),null,null,null,this.element(ElementEnum.O,2),null}));
  ItemStack blockOakWoodPlanks=new ItemStack(Blocks.planks,1,0);
  ItemStack blockSpruceWoodPlanks=new ItemStack(Blocks.planks,1,1);
  ItemStack blockBirchWoodPlanks=new ItemStack(Blocks.planks,1,2);
  ItemStack blockJungleWoodPlanks=new ItemStack(Blocks.planks,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  ItemStack blockOakSapling=new ItemStack(Blocks.sapling,1,0);
  ItemStack blockSpruceSapling=new ItemStack(Blocks.sapling,1,1);
  ItemStack blockBirchSapling=new ItemStack(Blocks.sapling,1,2);
  ItemStack blockJungleSapling=new ItemStack(Blocks.sapling,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleSapling,true,20,new PotionChemical[]{null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,null,null}));
  ItemStack blockSand=new ItemStack(Blocks.sand);
  DecomposerRecipe.add(new DecomposerRecipe(blockSand,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSand,true,200,new PotionChemical[]{moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide}));
  ItemStack blockGravel=new ItemStack(Blocks.gravel);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGravel,0.35F,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGravel,true,30,new PotionChemical[]{null,null,null,null,null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide)}));
  ItemStack goldOre=new ItemStack(Blocks.gold_ore);
  DecomposerRecipe.add(new DecomposerRecipe(goldOre,new PotionChemical[]{this.element(ElementEnum.Au,48)}));
  ItemStack ironOre=new ItemStack(Blocks.iron_ore);
  DecomposerRecipe.add(new DecomposerRecipe(ironOre,new PotionChemical[]{this.element(ElementEnum.Fe,48)}));
  ItemStack coalOre=new ItemStack(Blocks.coal_ore);
  DecomposerRecipe.add(new DecomposerRecipe(coalOre,new PotionChemical[]{this.element(ElementEnum.C,48)}));
  ItemStack blockOakLog=new ItemStack(Blocks.log,1,0);
  ItemStack blockSpruceLog=new ItemStack(Blocks.log,1,1);
  ItemStack blockBirchLog=new ItemStack(Blocks.log,1,2);
  ItemStack blockJungleLog=new ItemStack(Blocks.log,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakLog,true,100,new PotionChemical[]{moleculeCellulose,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceLog,true,100,new PotionChemical[]{null,null,null,null,moleculeCellulose,null,moleculeCellulose,moleculeCellulose,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchLog,true,100,new PotionChemical[]{moleculeCellulose,null,moleculeCellulose,null,null,null,moleculeCellulose,null,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleLog,true,100,new PotionChemical[]{moleculeCellulose,null,null,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null}));
  ItemStack blockGlass=new ItemStack(Blocks.glass);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,null,null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  ItemStack blockOreLapis=new ItemStack(Blocks.lapis_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreLapis,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite,6),this.molecule(MoleculeEnum.sodalite),this.molecule(MoleculeEnum.noselite),this.molecule(MoleculeEnum.calcite),this.molecule(MoleculeEnum.pyrite)}));
  ItemStack blockLapis=new ItemStack(Blocks.lapis_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockLapis,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite,9)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLapis,true,450,new PotionChemical[]{moleculeLazurite,null,null,null,null,null,null,null,null}));
  ItemStack blockCobweb=new ItemStack(Blocks.web);
  DecomposerRecipe.add(new DecomposerRecipe(blockCobweb,new PotionChemical[]{this.molecule(MoleculeEnum.fibroin)}));
  ItemStack blockTallGrass=new ItemStack(Blocks.tallgrass,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockTallGrass,0.1F,new PotionChemical[]{new Molecule(MoleculeEnum.thc,2)}));
  ItemStack blockSandStone=new ItemStack(Blocks.sandstone,1,0);
  ItemStack blockChiseledSandStone=new ItemStack(Blocks.sandstone,1,1);
  ItemStack blockSmoothSandStone=new ItemStack(Blocks.sandstone,1,2);
  DecomposerRecipe.add(new DecomposerRecipe(blockSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockChiseledSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockSmoothSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSandStone,true,20,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide,16),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockChiseledSandStone,true,20,new PotionChemical[]{null,null,null,null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide,16),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSmoothSandStone,true,20,new PotionChemical[]{null,this.molecule(MoleculeEnum.siliconDioxide,16),null,null,null,null,null,null,null}));
  ItemStack blockWool=new ItemStack(Blocks.wool,1,0);
  ItemStack blockOrangeWool=new ItemStack(Blocks.wool,1,1);
  ItemStack blockMagentaWool=new ItemStack(Blocks.wool,1,2);
  ItemStack blockLightBlueWool=new ItemStack(Blocks.wool,1,3);
  ItemStack blockYellowWool=new ItemStack(Blocks.wool,1,4);
  ItemStack blockLimeWool=new ItemStack(Blocks.wool,1,5);
  ItemStack blockPinkWool=new ItemStack(Blocks.wool,1,6);
  ItemStack blockGrayWool=new ItemStack(Blocks.wool,1,7);
  ItemStack blockLightGrayWool=new ItemStack(Blocks.wool,1,8);
  ItemStack blockCyanWool=new ItemStack(Blocks.wool,1,9);
  ItemStack blockPurpleWool=new ItemStack(Blocks.wool,1,10);
  ItemStack blockBlueWool=new ItemStack(Blocks.wool,1,11);
  ItemStack blockBrownWool=new ItemStack(Blocks.wool,1,12);
  ItemStack blockGreenWool=new ItemStack(Blocks.wool,1,13);
  ItemStack blockRedWool=new ItemStack(Blocks.wool,1,14);
  ItemStack blockBlackWool=new ItemStack(Blocks.wool,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOrangeWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMagentaWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightBlueWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLimeWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPinkWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGrayWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightGrayWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCyanWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPurpleWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlueWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBrownWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGreenWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlackWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightBlueWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightGrayWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  ItemStack carpetBlockWool=new ItemStack(Blocks.carpet,1,0);
  ItemStack carpetBlockOrangeWool=new ItemStack(Blocks.carpet,1,1);
  ItemStack carpetBlockMagentaWool=new ItemStack(Blocks.carpet,1,2);
  ItemStack carpetBlockLightBlueWool=new ItemStack(Blocks.carpet,1,3);
  ItemStack carpetBlockYellowWool=new ItemStack(Blocks.carpet,1,4);
  ItemStack carpetBlockLimeWool=new ItemStack(Blocks.carpet,1,5);
  ItemStack carpetBlockPinkWool=new ItemStack(Blocks.carpet,1,6);
  ItemStack carpetBlockGrayWool=new ItemStack(Blocks.carpet,1,7);
  ItemStack carpetBlockLightGrayWool=new ItemStack(Blocks.carpet,1,8);
  ItemStack carpetBlockCyanWool=new ItemStack(Blocks.carpet,1,9);
  ItemStack carpetBlockPurpleWool=new ItemStack(Blocks.carpet,1,10);
  ItemStack carpetBlockBlueWool=new ItemStack(Blocks.carpet,1,11);
  ItemStack carpetBlockBrownWool=new ItemStack(Blocks.carpet,1,12);
  ItemStack carpetBlockGreenWool=new ItemStack(Blocks.carpet,1,13);
  ItemStack carpetBlockRedWool=new ItemStack(Blocks.carpet,1,14);
  ItemStack carpetBlockBlackWool=new ItemStack(Blocks.carpet,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockOrangeWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockMagentaWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLightBlueWool,0.2F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockYellowWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLimeWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockPinkWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockGrayWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLightGrayWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockCyanWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockPurpleWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBlueWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBrownWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockGreenWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockRedWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBlackWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(carpetBlockWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  ItemStack blockYellowFlower=new ItemStack(Blocks.yellow_flower);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowFlower,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  ItemStack blockRedFlower=new ItemStack(Blocks.red_flower);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedFlower,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  ItemStack blockMushroomBrown=new ItemStack(Blocks.brown_mushroom);
  ItemStack blockMushroomRed=new ItemStack(Blocks.red_mushroom);
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomBrown,new PotionChemical[]{this.molecule(MoleculeEnum.psilocybin),this.molecule(MoleculeEnum.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomRed,new PotionChemical[]{this.molecule(MoleculeEnum.pantherine),this.molecule(MoleculeEnum.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Blocks.gold_block),new PotionChemical[]{this.element(ElementEnum.Au,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Blocks.iron_block),new PotionChemical[]{this.element(ElementEnum.Fe,144)}));
  ItemStack blockTnt=new ItemStack(Blocks.tnt);
  DecomposerRecipe.add(new DecomposerRecipe(blockTnt,new PotionChemical[]{this.molecule(MoleculeEnum.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockTnt,false,1000,new PotionChemical[]{this.molecule(MoleculeEnum.tnt)}));
  ItemStack blockObsidian=new ItemStack(Blocks.obsidian);
  DecomposerRecipe.add(new DecomposerRecipe(blockObsidian,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.magnesiumOxide,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockObsidian,true,1000,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.magnesiumOxide,2),null,this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.magnesiumOxide,2),this.molecule(MoleculeEnum.magnesiumOxide,2),this.molecule(MoleculeEnum.magnesiumOxide,2)}));
  ItemStack blockOreDiamond=new ItemStack(Blocks.diamond_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,6)}));
  ItemStack blockDiamond=new ItemStack(Blocks.diamond_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,36)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDiamond,true,120000,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4)}));
  ItemStack blockPressurePlatePlanks=new ItemStack(Blocks.wooden_pressure_plate);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPressurePlatePlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  ItemStack blockOreRedstone=new ItemStack(Blocks.redstone_ore);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOreRedstone,0.8F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide,9),this.element(ElementEnum.Cu,9)}));
  ItemStack blockCactus=new ItemStack(Blocks.cactus);
  DecomposerRecipe.add(new DecomposerRecipe(blockCactus,new PotionChemical[]{this.molecule(MoleculeEnum.mescaline),this.molecule(MoleculeEnum.water,20)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCactus,true,200,new PotionChemical[]{this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.mescaline),null,this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.water,5)}));
  ItemStack blockPumpkin=new ItemStack(Blocks.pumpkin);
  DecomposerRecipe.add(new DecomposerRecipe(blockPumpkin,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPumpkin,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin)}));
  ItemStack blockNetherrack=new ItemStack(Blocks.netherrack);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockNetherrack,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Ni),this.element(ElementEnum.Tc)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,3),this.element(ElementEnum.Ti),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,1),this.element(ElementEnum.W,4),this.element(ElementEnum.Cr,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,10),this.element(ElementEnum.W,1),this.element(ElementEnum.Zn,8),this.element(ElementEnum.Be,4)})}));
  ItemStack itemNetherbrick=new ItemStack(Items.netherbrick);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemNetherbrick,0.15F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.C),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Ni),this.element(ElementEnum.Tc)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,3),this.element(ElementEnum.Ti),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,1),this.element(ElementEnum.W,4),this.element(ElementEnum.Cr,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,10),this.element(ElementEnum.W,1),this.element(ElementEnum.Zn,8),this.element(ElementEnum.Be,4)})}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherbrick,true,200,new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Si,2),null,this.element(ElementEnum.Zn,2),this.element(ElementEnum.W,1),null,this.element(ElementEnum.Be,2),this.element(ElementEnum.Be,2),null}));
  ItemStack itemPotion=new ItemStack(Items.potionitem,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemPotion,new PotionChemical[]{this.molecule(MoleculeEnum.water,8)}));
  ItemStack blockSlowSand=new ItemStack(Blocks.soul_sand);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockSlowSand,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb,3),this.element(ElementEnum.Be,1),this.element(ElementEnum.Si,2),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb,1),this.element(ElementEnum.Si,5),this.element(ElementEnum.O,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,6),this.element(ElementEnum.O,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Es,1),this.element(ElementEnum.O,2)})}));
  ItemStack blockGlowStone=new ItemStack(Blocks.glowstone);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlowStone,new PotionChemical[]{this.element(ElementEnum.P,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlowStone,true,500,new PotionChemical[]{this.element(ElementEnum.P),null,this.element(ElementEnum.P),this.element(ElementEnum.P),null,this.element(ElementEnum.P),null,null,null}));
  ItemStack blockThinGlass=new ItemStack(Blocks.glass_pane);
  DecomposerRecipe.add(new DecomposerRecipe(blockThinGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockThinGlass,true,50,new PotionChemical[]{null,null,null,this.molecule(MoleculeEnum.siliconDioxide),null,null,null,null,null}));
  ItemStack blockMelon=new ItemStack(Blocks.melon_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockMelon,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin),this.molecule(MoleculeEnum.asparticAcid),this.molecule(MoleculeEnum.water,16)}));
  ItemStack blockMycelium=new ItemStack(Blocks.mycelium);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMycelium,0.09F,new PotionChemical[]{this.molecule(MoleculeEnum.fingolimod)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.mycelium,16),false,300,new PotionChemical[]{this.molecule(MoleculeEnum.fingolimod)}));
  ItemStack blockWhiteStone=new ItemStack(Blocks.end_stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockWhiteStone,0.8F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O),this.element(ElementEnum.H,4),this.element(ElementEnum.Li)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Es)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pu)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fr)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Nd)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O,4)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.H,4)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Be,8)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Li,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zr)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Na)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Rb)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)})}));
  ItemStack blockOreEmerald=new ItemStack(Blocks.emerald_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,6),this.element(ElementEnum.Cr,6),this.element(ElementEnum.V,6)}));
  ItemStack blockEmerald=new ItemStack(Blocks.emerald_block);
  SynthesisRecipe.add(new SynthesisRecipe(blockEmerald,true,150000,new PotionChemical[]{this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.V,9),this.molecule(MoleculeEnum.beryl,18),this.element(ElementEnum.V,9),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,18),this.element(ElementEnum.Cr,18),this.element(ElementEnum.V,18)}));
  ItemStack itemAppleRed=new ItemStack(Items.apple);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleRed,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemAppleRed,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid),this.molecule(MoleculeEnum.water,2)}));
  ItemStack itemArrow=new ItemStack(Items.arrow);
  DecomposerRecipe.add(new DecomposerRecipe(itemArrow,new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O,2),this.element(ElementEnum.N,6)}));
  ItemStack itemCoal=new ItemStack(Items.coal);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemCoal,0.92F,new PotionChemical[]{this.element(ElementEnum.C,8)}));
  ItemStack blockCoal=new ItemStack(Blocks.coal_block);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCoal,0.82F,new PotionChemical[]{this.element(ElementEnum.C,72)}));
  ItemStack itemChar=new ItemStack(Items.coal,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemChar,0.82F,new PotionChemical[]{this.element(ElementEnum.C,1)}));
  ItemStack itemDiamond=new ItemStack(Items.diamond);
  DecomposerRecipe.add(new DecomposerRecipe(itemDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(MinechemItemsGeneration.polytool),true,'\uea60',new PotionChemical[]{null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDiamond,true,'\uea60',new PotionChemical[]{null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null}));
  ItemStack itemIngotIron=new ItemStack(Items.iron_ingot);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotIron,new PotionChemical[]{this.element(ElementEnum.Fe,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotIron,false,1000,new PotionChemical[]{this.element(ElementEnum.Fe,16)}));
  ItemStack itemIngotGold=new ItemStack(Items.gold_ingot);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotGold,new PotionChemical[]{this.element(ElementEnum.Au,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotGold,false,1000,new PotionChemical[]{this.element(ElementEnum.Au,16)}));
  ItemStack itemStick=new ItemStack(Items.stick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemStick,0.3F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  ItemStack itemString=new ItemStack(Items.string);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemString,0.45F,new PotionChemical[]{this.molecule(MoleculeEnum.serine),this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.alinine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemString,true,150,new PotionChemical[]{this.molecule(MoleculeEnum.serine),this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.alinine)}));
  ItemStack itemFeather=new ItemStack(Items.feather);
  DecomposerRecipe.add(new DecomposerRecipe(itemFeather,new PotionChemical[]{this.molecule(MoleculeEnum.water,8),this.element(ElementEnum.N,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFeather,true,800,new PotionChemical[]{this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,2),this.element(ElementEnum.N),this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,1),this.element(ElementEnum.N),this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,5),this.element(ElementEnum.N)}));
  ItemStack itemGunpowder=new ItemStack(Items.gunpowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemGunpowder,new PotionChemical[]{this.molecule(MoleculeEnum.potassiumNitrate),this.element(ElementEnum.S,2),this.element(ElementEnum.C)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGunpowder,true,600,new PotionChemical[]{this.molecule(MoleculeEnum.potassiumNitrate),this.element(ElementEnum.C),null,this.element(ElementEnum.S,2),null,null,null,null,null}));
  ItemStack itemBread=new ItemStack(Items.bread);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBread,0.1F,new PotionChemical[]{this.molecule(MoleculeEnum.starch),this.molecule(MoleculeEnum.sucrose)}));
  ItemStack itemFlint=new ItemStack(Items.flint);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemFlint,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFlint,true,100,new PotionChemical[]{null,moleculeSiliconDioxide,null,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,null,null,null}));
  ItemStack itemAppleGold=new ItemStack(Items.golden_apple,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleGold,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid),this.element(ElementEnum.Au,64)}));
  ItemStack itemDoorWood=new ItemStack(Items.wooden_door);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDoorWood,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,12)}));
  ItemStack itemBucketWater=new ItemStack(Items.water_bucket);
  DecomposerRecipe.add(new DecomposerRecipe(itemBucketWater,new PotionChemical[]{this.molecule(MoleculeEnum.water,16)}));
  ItemStack itemRedstone=new ItemStack(Items.redstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRedstone,0.42F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide),this.element(ElementEnum.Cu)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRedstone,true,100,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.iron3oxide),null,this.element(ElementEnum.Cu),null,null,null,null}));
  ItemStack blockRedstone=new ItemStack(Blocks.redstone_block);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedstone,0.42F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide,9),this.element(ElementEnum.Cu,9)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedstone,true,900,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.iron3oxide,9),null,this.element(ElementEnum.Cu,9),null,null,null,null}));
  ItemStack itemSnowball=new ItemStack(Items.snowball);
  DecomposerRecipe.add(new DecomposerRecipe(itemSnowball,new PotionChemical[]{this.molecule(MoleculeEnum.water)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.snowball,5),true,20,new PotionChemical[]{this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water)}));
  ItemStack itemLeather=new ItemStack(Items.leather);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemLeather,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.keratin)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.leather,5),true,700,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.keratin),null,null,null,null}));
  ItemStack itemBrick=new ItemStack(Items.brick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBrick,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.brick,8),true,400,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite),this.molecule(MoleculeEnum.kaolinite),null,this.molecule(MoleculeEnum.kaolinite),this.molecule(MoleculeEnum.kaolinite),null}));
  ItemStack itemClayBall=new ItemStack(Items.clay_ball);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemClayBall,0.3F,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.clay_ball,12),false,100,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  ItemStack itemReed=new ItemStack(Items.reeds);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemReed,0.65F,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose),this.element(ElementEnum.H,2),this.element(ElementEnum.O)}));
  ItemStack itemPaper=new ItemStack(Items.paper);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPaper,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.paper,16),true,150,new PotionChemical[]{null,this.molecule(MoleculeEnum.cellulose),null,null,this.molecule(MoleculeEnum.cellulose),null,null,this.molecule(MoleculeEnum.cellulose),null}));
  ItemStack itemSlimeBall=new ItemStack(Items.slime_ball);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemSlimeBall,0.9F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.molecule(MoleculeEnum.pmma)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Hg)}),new DecomposerRecipe(new PotionChemical[]{this.molecule(MoleculeEnum.water,10)})}));
  ItemStack itemGlowstone=new ItemStack(Items.glowstone_dust);
  DecomposerRecipe.add(new DecomposerRecipe(itemGlowstone,new PotionChemical[]{this.element(ElementEnum.P)}));
  ItemStack itemDyePowderBlack=new ItemStack(Items.dye,1,0);
  ItemStack itemDyePowderRed=new ItemStack(Items.dye,1,1);
  ItemStack itemDyePowderGreen=new ItemStack(Items.dye,1,2);
  ItemStack itemDyePowderBrown=new ItemStack(Items.dye,1,3);
  ItemStack itemDyePowderBlue=new ItemStack(Items.dye,1,4);
  ItemStack itemDyePowderPurple=new ItemStack(Items.dye,1,5);
  ItemStack itemDyePowderCyan=new ItemStack(Items.dye,1,6);
  ItemStack itemDyePowderLightGray=new ItemStack(Items.dye,1,7);
  ItemStack itemDyePowderGray=new ItemStack(Items.dye,1,8);
  ItemStack itemDyePowderPink=new ItemStack(Items.dye,1,9);
  ItemStack itemDyePowderLime=new ItemStack(Items.dye,1,10);
  ItemStack itemDyePowderYellow=new ItemStack(Items.dye,1,11);
  ItemStack itemDyePowderLightBlue=new ItemStack(Items.dye,1,12);
  ItemStack itemDyePowderMagenta=new ItemStack(Items.dye,1,13);
  ItemStack itemDyePowderOrange=new ItemStack(Items.dye,1,14);
  ItemStack itemDyePowderWhite=new ItemStack(Items.dye,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlack,new PotionChemical[]{this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderRed,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGreen,new PotionChemical[]{this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDyePowderBrown,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.theobromine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlue,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPurple,new PotionChemical[]{this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderCyan,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightGray,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGray,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPink,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLime,new PotionChemical[]{this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderYellow,new PotionChemical[]{this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightBlue,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderMagenta,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderOrange,new PotionChemical[]{this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderWhite,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlack,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderRed,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGreen,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBrown,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.theobromine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlue,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPurple,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderCyan,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightGray,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGray,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPink,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLime,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderYellow,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightBlue,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderMagenta,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderOrange,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderWhite,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment)}));
  ItemStack itemBone=new ItemStack(Items.bone);
  DecomposerRecipe.add(new DecomposerRecipe(itemBone,new PotionChemical[]{this.molecule(MoleculeEnum.hydroxylapatite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBone,false,100,new PotionChemical[]{this.molecule(MoleculeEnum.hydroxylapatite)}));
  ItemStack itemSugar=new ItemStack(Items.sugar);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSugar,0.75F,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSugar,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose)}));
  ItemStack itemMelon=new ItemStack(Items.melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemMelon,new PotionChemical[]{this.molecule(MoleculeEnum.water)}));
  ItemStack itemChickenCooked=new ItemStack(Items.cooked_chicken);
  DecomposerRecipe.add(new DecomposerRecipe(itemChickenCooked,new PotionChemical[]{this.element(ElementEnum.K),this.element(ElementEnum.Na),this.element(ElementEnum.C,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemChickenCooked,true,5000,new PotionChemical[]{this.element(ElementEnum.K,16),this.element(ElementEnum.Na,16),this.element(ElementEnum.C,16)}));
  ItemStack itemRottenFlesh=new ItemStack(Items.rotten_flesh);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRottenFlesh,0.05F,new PotionChemical[]{new Molecule(MoleculeEnum.nodularin,1)}));
  ItemStack itemEnderPearl=new ItemStack(Items.ender_pearl);
  DecomposerRecipe.add(new DecomposerRecipe(itemEnderPearl,new PotionChemical[]{this.element(ElementEnum.Es),this.molecule(MoleculeEnum.calciumCarbonate,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEnderPearl,true,5000,new PotionChemical[]{this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.element(ElementEnum.Es),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate)}));
  ItemStack itemBlazeRod=new ItemStack(Items.blaze_rod);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazeRod,new PotionChemical[]{this.element(ElementEnum.Pu,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBlazeRod,true,15000,new PotionChemical[]{this.element(ElementEnum.Pu,2),null,null,this.element(ElementEnum.Pu,2),null,null,this.element(ElementEnum.Pu,2),null,null}));
  ItemStack itemBlazePowder=new ItemStack(Items.blaze_powder);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazePowder,new PotionChemical[]{this.element(ElementEnum.Pu)}));
  ItemStack itemGhastTear=new ItemStack(Items.ghast_tear);
  DecomposerRecipe.add(new DecomposerRecipe(itemGhastTear,new PotionChemical[]{this.element(ElementEnum.Yb,4),this.element(ElementEnum.No,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGhastTear,true,15000,new PotionChemical[]{this.element(ElementEnum.Yb),this.element(ElementEnum.Yb),this.element(ElementEnum.No),null,this.element(ElementEnum.Yb,2),this.element(ElementEnum.No,2),null,this.element(ElementEnum.No),null}));
  ItemStack itemNetherStalkSeeds=new ItemStack(Items.nether_wart);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemNetherStalkSeeds,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cocainehcl)}));
  ItemStack itemSpiderEye=new ItemStack(Items.spider_eye);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSpiderEye,0.2F,new PotionChemical[]{this.molecule(MoleculeEnum.tetrodotoxin)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSpiderEye,true,2000,new PotionChemical[]{this.element(ElementEnum.C),null,null,null,this.molecule(MoleculeEnum.tetrodotoxin),null,null,null,this.element(ElementEnum.C)}));
  ItemStack itemFermentedSpiderEye=new ItemStack(Items.fermented_spider_eye);
  DecomposerRecipe.add(new DecomposerRecipe(itemFermentedSpiderEye,new PotionChemical[]{this.element(ElementEnum.Po),this.molecule(MoleculeEnum.ethanol)}));
  ItemStack itemMagmaCream=new ItemStack(Items.magma_cream);
  DecomposerRecipe.add(new DecomposerRecipe(itemMagmaCream,new PotionChemical[]{this.element(ElementEnum.Hg),this.element(ElementEnum.Pu),this.molecule(MoleculeEnum.pmma,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemMagmaCream,true,5000,new PotionChemical[]{null,this.element(ElementEnum.Pu),null,this.molecule(MoleculeEnum.pmma),this.element(ElementEnum.Hg),this.molecule(MoleculeEnum.pmma),null,this.molecule(MoleculeEnum.pmma),null}));
  ItemStack itemSpeckledMelon=new ItemStack(Items.speckled_melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemSpeckledMelon,new PotionChemical[]{this.molecule(MoleculeEnum.water,4),this.molecule(MoleculeEnum.whitePigment),this.element(ElementEnum.Au,1)}));
  ItemStack itemEmerald=new ItemStack(Items.emerald);
  DecomposerRecipe.add(new DecomposerRecipe(itemEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,2),this.element(ElementEnum.Cr,2),this.element(ElementEnum.V,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEmerald,true,5000,new PotionChemical[]{null,this.element(ElementEnum.Cr),null,this.element(ElementEnum.V),this.molecule(MoleculeEnum.beryl,2),this.element(ElementEnum.V),null,this.element(ElementEnum.Cr),null}));
  ItemStack itemCarrot=new ItemStack(Items.carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemCarrot,new PotionChemical[]{this.molecule(MoleculeEnum.retinol)}));
  ItemStack itemPotato=new ItemStack(Items.potato);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPotato,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.water,8),this.element(ElementEnum.K,2),this.molecule(MoleculeEnum.cellulose)}));
  ItemStack itemGoldenCarrot=new ItemStack(Items.golden_carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemGoldenCarrot,new PotionChemical[]{this.molecule(MoleculeEnum.retinol),this.element(ElementEnum.Au,4)}));
  ItemStack itemNetherStar=new ItemStack(Items.nether_star);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherStar,new PotionChemical[]{this.element(ElementEnum.Cn,16),elementHydrogen,elementHydrogen,elementHydrogen,elementHelium,elementHelium,elementHelium,elementCarbon,elementCarbon}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherStar,true,5000,new PotionChemical[]{elementHelium,elementHelium,elementHelium,elementCarbon,this.element(ElementEnum.Cn,16),elementHelium,elementHydrogen,elementHydrogen,elementHydrogen}));
  ItemStack itemNetherQuartz=new ItemStack(Items.quartz);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherQuartz,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.galliumarsenide,1)}));
  ItemStack itemRecord13=new ItemStack(Items.record_13);
  ItemStack itemRecordCat=new ItemStack(Items.record_cat);
  ItemStack itemRecordFar=new ItemStack(Items.record_far);
  ItemStack itemRecordMall=new ItemStack(Items.record_mall);
  ItemStack itemRecordMellohi=new ItemStack(Items.record_mellohi);
  ItemStack itemRecordStal=new ItemStack(Items.record_stal);
  ItemStack itemRecordStrad=new ItemStack(Items.record_strad);
  ItemStack itemRecordWard=new ItemStack(Items.record_ward);
  ItemStack itemRecordChirp=new ItemStack(Items.record_chirp);
  DecomposerRecipe.add(new DecomposerRecipe(itemRecord13,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordCat,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordFar,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMall,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMellohi,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStal,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStrad,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordWard,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordChirp,new PotionChemical[]{moleculePolyvinylChloride}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecord13,true,1000,new PotionChemical[]{moleculePolyvinylChloride,null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordCat,true,1000,new PotionChemical[]{null,moleculePolyvinylChloride,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordFar,true,1000,new PotionChemical[]{null,null,moleculePolyvinylChloride,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMall,true,1000,new PotionChemical[]{null,null,null,moleculePolyvinylChloride,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMellohi,true,1000,new PotionChemical[]{null,null,null,null,moleculePolyvinylChloride,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStal,true,1000,new PotionChemical[]{null,null,null,null,null,moleculePolyvinylChloride,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStrad,true,1000,new PotionChemical[]{null,null,null,null,null,null,moleculePolyvinylChloride,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordWard,true,1000,new PotionChemical[]{null,null,null,null,null,null,null,moleculePolyvinylChloride,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordChirp,true,1000,new PotionChemical[]{null,null,null,null,null,null,null,null,moleculePolyvinylChloride}));
}","public void registerVanillaChemicalRecipes(){
  Molecule moleculeSiliconDioxide=this.molecule(MoleculeEnum.siliconDioxide,4);
  Molecule moleculeCellulose=this.molecule(MoleculeEnum.cellulose,1);
  Molecule moleculePolyvinylChloride=this.molecule(MoleculeEnum.polyvinylChloride);
  Molecule moleculeLazurite=this.molecule(MoleculeEnum.lazurite,9);
  Element elementHydrogen=this.element(ElementEnum.H,64);
  Element elementHelium=this.element(ElementEnum.He,64);
  Element elementCarbon=this.element(ElementEnum.C,64);
  ItemStack blockStone=new ItemStack(Blocks.stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockStone,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.stone,7),true,50,new PotionChemical[]{this.element(ElementEnum.Si),null,null,this.element(ElementEnum.O,2),null,null}));
  ItemStack blockGrass=new ItemStack(Blocks.grass);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockGrass,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)}),new DecomposerRecipe(new PotionChemical[]{moleculeCellulose})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.grass,16),true,50,new PotionChemical[]{null,moleculeCellulose,null,null,this.element(ElementEnum.O,2),this.element(ElementEnum.Si)}));
  ItemStack blockDirt=new ItemStack(Blocks.dirt);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockDirt,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zn),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.dirt,16),true,50,new PotionChemical[]{null,null,null,null,this.element(ElementEnum.O,2),this.element(ElementEnum.Si)}));
  ItemStack blockCobblestone=new ItemStack(Blocks.cobblestone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockCobblestone,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fe),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Mg),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ti),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Na),this.element(ElementEnum.Cl)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.cobblestone,8),true,50,new PotionChemical[]{this.element(ElementEnum.Si),null,null,null,this.element(ElementEnum.O,2),null}));
  ItemStack blockOakWoodPlanks=new ItemStack(Blocks.planks,1,0);
  ItemStack blockSpruceWoodPlanks=new ItemStack(Blocks.planks,1,1);
  ItemStack blockBirchWoodPlanks=new ItemStack(Blocks.planks,1,2);
  ItemStack blockJungleWoodPlanks=new ItemStack(Blocks.planks,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWoodPlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,2)}));
  ItemStack blockOakSapling=new ItemStack(Blocks.sapling,1,0);
  ItemStack blockSpruceSapling=new ItemStack(Blocks.sapling,1,1);
  ItemStack blockBirchSapling=new ItemStack(Blocks.sapling,1,2);
  ItemStack blockJungleSapling=new ItemStack(Blocks.sapling,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleSapling,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchSapling,true,20,new PotionChemical[]{null,null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleSapling,true,20,new PotionChemical[]{null,null,null,null,null,this.molecule(MoleculeEnum.cellulose),null,null,null}));
  ItemStack blockSand=new ItemStack(Blocks.sand);
  DecomposerRecipe.add(new DecomposerRecipe(blockSand,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSand,true,200,new PotionChemical[]{moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide}));
  ItemStack blockGravel=new ItemStack(Blocks.gravel);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGravel,0.35F,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGravel,true,30,new PotionChemical[]{null,null,null,null,null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide)}));
  ItemStack goldOre=new ItemStack(Blocks.gold_ore);
  DecomposerRecipe.add(new DecomposerRecipe(goldOre,new PotionChemical[]{this.element(ElementEnum.Au,48)}));
  ItemStack ironOre=new ItemStack(Blocks.iron_ore);
  DecomposerRecipe.add(new DecomposerRecipe(ironOre,new PotionChemical[]{this.element(ElementEnum.Fe,48)}));
  ItemStack coalOre=new ItemStack(Blocks.coal_ore);
  DecomposerRecipe.add(new DecomposerRecipe(coalOre,new PotionChemical[]{this.element(ElementEnum.C,48)}));
  ItemStack blockOakLog=new ItemStack(Blocks.log,1,0);
  ItemStack blockSpruceLog=new ItemStack(Blocks.log,1,1);
  ItemStack blockBirchLog=new ItemStack(Blocks.log,1,2);
  ItemStack blockJungleLog=new ItemStack(Blocks.log,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleLog,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakLog,true,100,new PotionChemical[]{moleculeCellulose,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceLog,true,100,new PotionChemical[]{null,null,null,null,moleculeCellulose,null,moleculeCellulose,moleculeCellulose,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchLog,true,100,new PotionChemical[]{moleculeCellulose,null,moleculeCellulose,null,null,null,moleculeCellulose,null,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleLog,true,100,new PotionChemical[]{moleculeCellulose,null,null,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null}));
  ItemStack blockGlass=new ItemStack(Blocks.glass);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlass,true,500,new PotionChemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,null,null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  ItemStack blockOreLapis=new ItemStack(Blocks.lapis_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreLapis,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite,6),this.molecule(MoleculeEnum.sodalite),this.molecule(MoleculeEnum.noselite),this.molecule(MoleculeEnum.calcite),this.molecule(MoleculeEnum.pyrite)}));
  ItemStack blockLapis=new ItemStack(Blocks.lapis_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockLapis,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite,9)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLapis,true,450,new PotionChemical[]{moleculeLazurite,null,null,null,null,null,null,null,null}));
  ItemStack blockCobweb=new ItemStack(Blocks.web);
  DecomposerRecipe.add(new DecomposerRecipe(blockCobweb,new PotionChemical[]{this.molecule(MoleculeEnum.fibroin)}));
  ItemStack blockTallGrass=new ItemStack(Blocks.tallgrass,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockTallGrass,0.1F,new PotionChemical[]{new Molecule(MoleculeEnum.thc,2)}));
  ItemStack blockSandStone=new ItemStack(Blocks.sandstone,1,0);
  ItemStack blockChiseledSandStone=new ItemStack(Blocks.sandstone,1,1);
  ItemStack blockSmoothSandStone=new ItemStack(Blocks.sandstone,1,2);
  DecomposerRecipe.add(new DecomposerRecipe(blockSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockChiseledSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockSmoothSandStone,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSandStone,true,20,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide,16),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockChiseledSandStone,true,20,new PotionChemical[]{null,null,null,null,null,null,null,this.molecule(MoleculeEnum.siliconDioxide,16),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSmoothSandStone,true,20,new PotionChemical[]{null,this.molecule(MoleculeEnum.siliconDioxide,16),null,null,null,null,null,null,null}));
  ItemStack blockWool=new ItemStack(Blocks.wool,1,0);
  ItemStack blockOrangeWool=new ItemStack(Blocks.wool,1,1);
  ItemStack blockMagentaWool=new ItemStack(Blocks.wool,1,2);
  ItemStack blockLightBlueWool=new ItemStack(Blocks.wool,1,3);
  ItemStack blockYellowWool=new ItemStack(Blocks.wool,1,4);
  ItemStack blockLimeWool=new ItemStack(Blocks.wool,1,5);
  ItemStack blockPinkWool=new ItemStack(Blocks.wool,1,6);
  ItemStack blockGrayWool=new ItemStack(Blocks.wool,1,7);
  ItemStack blockLightGrayWool=new ItemStack(Blocks.wool,1,8);
  ItemStack blockCyanWool=new ItemStack(Blocks.wool,1,9);
  ItemStack blockPurpleWool=new ItemStack(Blocks.wool,1,10);
  ItemStack blockBlueWool=new ItemStack(Blocks.wool,1,11);
  ItemStack blockBrownWool=new ItemStack(Blocks.wool,1,12);
  ItemStack blockGreenWool=new ItemStack(Blocks.wool,1,13);
  ItemStack blockRedWool=new ItemStack(Blocks.wool,1,14);
  ItemStack blockBlackWool=new ItemStack(Blocks.wool,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOrangeWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMagentaWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightBlueWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLimeWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPinkWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGrayWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightGrayWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCyanWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPurpleWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlueWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBrownWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGreenWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlackWool,0.6F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightBlueWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightGrayWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  ItemStack carpetBlockWool=new ItemStack(Blocks.carpet,1,0);
  ItemStack carpetBlockOrangeWool=new ItemStack(Blocks.carpet,1,1);
  ItemStack carpetBlockMagentaWool=new ItemStack(Blocks.carpet,1,2);
  ItemStack carpetBlockLightBlueWool=new ItemStack(Blocks.carpet,1,3);
  ItemStack carpetBlockYellowWool=new ItemStack(Blocks.carpet,1,4);
  ItemStack carpetBlockLimeWool=new ItemStack(Blocks.carpet,1,5);
  ItemStack carpetBlockPinkWool=new ItemStack(Blocks.carpet,1,6);
  ItemStack carpetBlockGrayWool=new ItemStack(Blocks.carpet,1,7);
  ItemStack carpetBlockLightGrayWool=new ItemStack(Blocks.carpet,1,8);
  ItemStack carpetBlockCyanWool=new ItemStack(Blocks.carpet,1,9);
  ItemStack carpetBlockPurpleWool=new ItemStack(Blocks.carpet,1,10);
  ItemStack carpetBlockBlueWool=new ItemStack(Blocks.carpet,1,11);
  ItemStack carpetBlockBrownWool=new ItemStack(Blocks.carpet,1,12);
  ItemStack carpetBlockGreenWool=new ItemStack(Blocks.carpet,1,13);
  ItemStack carpetBlockRedWool=new ItemStack(Blocks.carpet,1,14);
  ItemStack carpetBlockBlackWool=new ItemStack(Blocks.carpet,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockOrangeWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockMagentaWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLightBlueWool,0.2F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockYellowWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLimeWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockPinkWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockGrayWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockLightGrayWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockCyanWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockPurpleWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBlueWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBrownWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockGreenWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockRedWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(carpetBlockBlackWool,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(carpetBlockWool,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.whitePigment)}));
  ItemStack blockYellowFlower=new ItemStack(Blocks.yellow_flower);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowFlower,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  ItemStack blockRedFlower=new ItemStack(Blocks.red_flower);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedFlower,0.3F,new PotionChemical[]{new Molecule(MoleculeEnum.shikimicAcid,2)}));
  ItemStack blockMushroomBrown=new ItemStack(Blocks.brown_mushroom);
  ItemStack blockMushroomRed=new ItemStack(Blocks.red_mushroom);
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomBrown,new PotionChemical[]{this.molecule(MoleculeEnum.psilocybin),this.molecule(MoleculeEnum.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomRed,new PotionChemical[]{this.molecule(MoleculeEnum.pantherine),this.molecule(MoleculeEnum.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Blocks.gold_block),new PotionChemical[]{this.element(ElementEnum.Au,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Blocks.iron_block),new PotionChemical[]{this.element(ElementEnum.Fe,144)}));
  ItemStack blockTnt=new ItemStack(Blocks.tnt);
  DecomposerRecipe.add(new DecomposerRecipe(blockTnt,new PotionChemical[]{this.molecule(MoleculeEnum.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockTnt,false,1000,new PotionChemical[]{this.molecule(MoleculeEnum.tnt)}));
  ItemStack blockObsidian=new ItemStack(Blocks.obsidian);
  DecomposerRecipe.add(new DecomposerRecipe(blockObsidian,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,16),this.molecule(MoleculeEnum.magnesiumOxide,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockObsidian,true,1000,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.magnesiumOxide,2),null,this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.magnesiumOxide,2),this.molecule(MoleculeEnum.magnesiumOxide,2),this.molecule(MoleculeEnum.magnesiumOxide,2)}));
  ItemStack blockOreDiamond=new ItemStack(Blocks.diamond_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,6)}));
  ItemStack blockDiamond=new ItemStack(Blocks.diamond_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,36)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDiamond,true,100000,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4),this.molecule(MoleculeEnum.fullrene,4)}));
  ItemStack blockPressurePlatePlanks=new ItemStack(Blocks.wooden_pressure_plate);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPressurePlatePlanks,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,4)}));
  ItemStack blockOreRedstone=new ItemStack(Blocks.redstone_ore);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOreRedstone,0.8F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide,9),this.element(ElementEnum.Cu,9)}));
  ItemStack blockCactus=new ItemStack(Blocks.cactus);
  DecomposerRecipe.add(new DecomposerRecipe(blockCactus,new PotionChemical[]{this.molecule(MoleculeEnum.mescaline),this.molecule(MoleculeEnum.water,20)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCactus,true,200,new PotionChemical[]{this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.mescaline),null,this.molecule(MoleculeEnum.water,5),null,this.molecule(MoleculeEnum.water,5)}));
  ItemStack blockPumpkin=new ItemStack(Blocks.pumpkin);
  DecomposerRecipe.add(new DecomposerRecipe(blockPumpkin,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPumpkin,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin)}));
  ItemStack blockNetherrack=new ItemStack(Blocks.netherrack);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockNetherrack,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Ni),this.element(ElementEnum.Tc)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,3),this.element(ElementEnum.Ti),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,1),this.element(ElementEnum.W,4),this.element(ElementEnum.Cr,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,10),this.element(ElementEnum.W,1),this.element(ElementEnum.Zn,8),this.element(ElementEnum.Be,4)})}));
  ItemStack itemNetherbrick=new ItemStack(Items.netherbrick);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemNetherbrick,0.15F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.C),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Ni),this.element(ElementEnum.Tc)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,3),this.element(ElementEnum.Ti),this.element(ElementEnum.Fe)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,1),this.element(ElementEnum.W,4),this.element(ElementEnum.Cr,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,10),this.element(ElementEnum.W,1),this.element(ElementEnum.Zn,8),this.element(ElementEnum.Be,4)})}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherbrick,true,200,new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.Si,2),null,this.element(ElementEnum.Zn,2),this.element(ElementEnum.W,1),null,this.element(ElementEnum.Be,2),this.element(ElementEnum.Be,2),null}));
  ItemStack itemPotion=new ItemStack(Items.potionitem,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemPotion,new PotionChemical[]{this.molecule(MoleculeEnum.water,8)}));
  ItemStack blockSlowSand=new ItemStack(Blocks.soul_sand);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockSlowSand,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb,3),this.element(ElementEnum.Be,1),this.element(ElementEnum.Si,2),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pb,1),this.element(ElementEnum.Si,5),this.element(ElementEnum.O,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,6),this.element(ElementEnum.O,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Es,1),this.element(ElementEnum.O,2)})}));
  ItemStack blockGlowStone=new ItemStack(Blocks.glowstone);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlowStone,new PotionChemical[]{this.element(ElementEnum.P,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlowStone,true,500,new PotionChemical[]{this.element(ElementEnum.P),null,this.element(ElementEnum.P),this.element(ElementEnum.P),null,this.element(ElementEnum.P),null,null,null}));
  ItemStack blockThinGlass=new ItemStack(Blocks.glass_pane);
  DecomposerRecipe.add(new DecomposerRecipe(blockThinGlass,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,1)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockThinGlass,true,50,new PotionChemical[]{null,null,null,this.molecule(MoleculeEnum.siliconDioxide),null,null,null,null,null}));
  ItemStack blockMelon=new ItemStack(Blocks.melon_block);
  DecomposerRecipe.add(new DecomposerRecipe(blockMelon,new PotionChemical[]{this.molecule(MoleculeEnum.cucurbitacin),this.molecule(MoleculeEnum.asparticAcid),this.molecule(MoleculeEnum.water,16)}));
  ItemStack blockMycelium=new ItemStack(Blocks.mycelium);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMycelium,0.09F,new PotionChemical[]{this.molecule(MoleculeEnum.fingolimod)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Blocks.mycelium,16),false,300,new PotionChemical[]{this.molecule(MoleculeEnum.fingolimod)}));
  ItemStack blockWhiteStone=new ItemStack(Blocks.end_stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockWhiteStone,0.8F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O),this.element(ElementEnum.H,4),this.element(ElementEnum.Li)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Es)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Pu)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Fr)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Nd)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Si,2),this.element(ElementEnum.O,4)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.H,4)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Be,8)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Li,2)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Zr)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Na)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Rb)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Ga),this.element(ElementEnum.As)})}));
  ItemStack blockOreEmerald=new ItemStack(Blocks.emerald_ore);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,6),this.element(ElementEnum.Cr,6),this.element(ElementEnum.V,6)}));
  ItemStack blockEmerald=new ItemStack(Blocks.emerald_block);
  SynthesisRecipe.add(new SynthesisRecipe(blockEmerald,true,150000,new PotionChemical[]{this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.V,9),this.molecule(MoleculeEnum.beryl,18),this.element(ElementEnum.V,9),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3),this.element(ElementEnum.Cr,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,18),this.element(ElementEnum.Cr,18),this.element(ElementEnum.V,18)}));
  ItemStack itemAppleRed=new ItemStack(Items.apple);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleRed,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemAppleRed,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid),this.molecule(MoleculeEnum.water,2)}));
  ItemStack itemArrow=new ItemStack(Items.arrow);
  DecomposerRecipe.add(new DecomposerRecipe(itemArrow,new PotionChemical[]{this.element(ElementEnum.Si),this.element(ElementEnum.O,2),this.element(ElementEnum.N,6)}));
  ItemStack itemCoal=new ItemStack(Items.coal);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemCoal,0.92F,new PotionChemical[]{this.element(ElementEnum.C,8)}));
  ItemStack blockCoal=new ItemStack(Blocks.coal_block);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCoal,0.82F,new PotionChemical[]{this.element(ElementEnum.C,72)}));
  ItemStack itemChar=new ItemStack(Items.coal,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemChar,0.82F,new PotionChemical[]{this.element(ElementEnum.C,1)}));
  ItemStack itemDiamond=new ItemStack(Items.diamond);
  DecomposerRecipe.add(new DecomposerRecipe(itemDiamond,new PotionChemical[]{this.molecule(MoleculeEnum.fullrene,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(MinechemItemsGeneration.polytool),true,'\uea60',new PotionChemical[]{null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null,this.molecule(MoleculeEnum.fullrene,64),null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDiamond,true,'\uea60',new PotionChemical[]{null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null,this.molecule(MoleculeEnum.fullrene),null}));
  ItemStack itemIngotIron=new ItemStack(Items.iron_ingot);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotIron,new PotionChemical[]{this.element(ElementEnum.Fe,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotIron,false,1000,new PotionChemical[]{this.element(ElementEnum.Fe,16)}));
  ItemStack itemIngotGold=new ItemStack(Items.gold_ingot);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotGold,new PotionChemical[]{this.element(ElementEnum.Au,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotGold,false,1000,new PotionChemical[]{this.element(ElementEnum.Au,16)}));
  ItemStack itemStick=new ItemStack(Items.stick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemStick,0.3F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  ItemStack itemString=new ItemStack(Items.string);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemString,0.45F,new PotionChemical[]{this.molecule(MoleculeEnum.serine),this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.alinine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemString,true,150,new PotionChemical[]{this.molecule(MoleculeEnum.serine),this.molecule(MoleculeEnum.glycine),this.molecule(MoleculeEnum.alinine)}));
  ItemStack itemFeather=new ItemStack(Items.feather);
  DecomposerRecipe.add(new DecomposerRecipe(itemFeather,new PotionChemical[]{this.molecule(MoleculeEnum.water,8),this.element(ElementEnum.N,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFeather,true,800,new PotionChemical[]{this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,2),this.element(ElementEnum.N),this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,1),this.element(ElementEnum.N),this.element(ElementEnum.N),this.molecule(MoleculeEnum.water,5),this.element(ElementEnum.N)}));
  ItemStack itemGunpowder=new ItemStack(Items.gunpowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemGunpowder,new PotionChemical[]{this.molecule(MoleculeEnum.potassiumNitrate),this.element(ElementEnum.S,2),this.element(ElementEnum.C)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGunpowder,true,600,new PotionChemical[]{this.molecule(MoleculeEnum.potassiumNitrate),this.element(ElementEnum.C),null,this.element(ElementEnum.S,2),null,null,null,null,null}));
  ItemStack itemBread=new ItemStack(Items.bread);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBread,0.1F,new PotionChemical[]{this.molecule(MoleculeEnum.starch),this.molecule(MoleculeEnum.sucrose)}));
  ItemStack itemFlint=new ItemStack(Items.flint);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemFlint,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFlint,true,100,new PotionChemical[]{null,moleculeSiliconDioxide,null,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,null,null,null}));
  ItemStack itemAppleGold=new ItemStack(Items.golden_apple,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleGold,new PotionChemical[]{this.molecule(MoleculeEnum.malicAcid),this.element(ElementEnum.Au,64)}));
  ItemStack itemDoorWood=new ItemStack(Items.wooden_door);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDoorWood,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose,12)}));
  ItemStack itemBucketWater=new ItemStack(Items.water_bucket);
  DecomposerRecipe.add(new DecomposerRecipe(itemBucketWater,new PotionChemical[]{this.molecule(MoleculeEnum.water,16)}));
  ItemStack itemRedstone=new ItemStack(Items.redstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRedstone,0.42F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide),this.element(ElementEnum.Cu)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRedstone,true,100,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.iron3oxide),null,this.element(ElementEnum.Cu),null,null,null,null}));
  ItemStack blockRedstone=new ItemStack(Blocks.redstone_block);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedstone,0.42F,new PotionChemical[]{this.molecule(MoleculeEnum.iron3oxide,9),this.element(ElementEnum.Cu,9)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedstone,true,900,new PotionChemical[]{null,null,this.molecule(MoleculeEnum.iron3oxide,9),null,this.element(ElementEnum.Cu,9),null,null,null,null}));
  ItemStack itemSnowball=new ItemStack(Items.snowball);
  DecomposerRecipe.add(new DecomposerRecipe(itemSnowball,new PotionChemical[]{this.molecule(MoleculeEnum.water)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.snowball,5),true,20,new PotionChemical[]{this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water),null,this.molecule(MoleculeEnum.water)}));
  ItemStack itemLeather=new ItemStack(Items.leather);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemLeather,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.keratin)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.leather,5),true,700,new PotionChemical[]{null,null,null,null,this.molecule(MoleculeEnum.keratin),null,null,null,null}));
  ItemStack itemBrick=new ItemStack(Items.brick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBrick,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.brick,8),true,400,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite),this.molecule(MoleculeEnum.kaolinite),null,this.molecule(MoleculeEnum.kaolinite),this.molecule(MoleculeEnum.kaolinite),null}));
  ItemStack itemClayBall=new ItemStack(Items.clay_ball);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemClayBall,0.3F,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.clay_ball,12),false,100,new PotionChemical[]{this.molecule(MoleculeEnum.kaolinite)}));
  ItemStack itemReed=new ItemStack(Items.reeds);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemReed,0.65F,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose),this.element(ElementEnum.H,2),this.element(ElementEnum.O)}));
  ItemStack itemPaper=new ItemStack(Items.paper);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPaper,0.25F,new PotionChemical[]{this.molecule(MoleculeEnum.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Items.paper,16),true,150,new PotionChemical[]{null,this.molecule(MoleculeEnum.cellulose),null,null,this.molecule(MoleculeEnum.cellulose),null,null,this.molecule(MoleculeEnum.cellulose),null}));
  ItemStack itemSlimeBall=new ItemStack(Items.slime_ball);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemSlimeBall,0.9F,new DecomposerRecipe[]{new DecomposerRecipe(new PotionChemical[]{this.molecule(MoleculeEnum.pmma)}),new DecomposerRecipe(new PotionChemical[]{this.element(ElementEnum.Hg)}),new DecomposerRecipe(new PotionChemical[]{this.molecule(MoleculeEnum.water,10)})}));
  ItemStack itemGlowstone=new ItemStack(Items.glowstone_dust);
  DecomposerRecipe.add(new DecomposerRecipe(itemGlowstone,new PotionChemical[]{this.element(ElementEnum.P)}));
  ItemStack itemDyePowderBlack=new ItemStack(Items.dye,1,0);
  ItemStack itemDyePowderRed=new ItemStack(Items.dye,1,1);
  ItemStack itemDyePowderGreen=new ItemStack(Items.dye,1,2);
  ItemStack itemDyePowderBrown=new ItemStack(Items.dye,1,3);
  ItemStack itemDyePowderBlue=new ItemStack(Items.dye,1,4);
  ItemStack itemDyePowderPurple=new ItemStack(Items.dye,1,5);
  ItemStack itemDyePowderCyan=new ItemStack(Items.dye,1,6);
  ItemStack itemDyePowderLightGray=new ItemStack(Items.dye,1,7);
  ItemStack itemDyePowderGray=new ItemStack(Items.dye,1,8);
  ItemStack itemDyePowderPink=new ItemStack(Items.dye,1,9);
  ItemStack itemDyePowderLime=new ItemStack(Items.dye,1,10);
  ItemStack itemDyePowderYellow=new ItemStack(Items.dye,1,11);
  ItemStack itemDyePowderLightBlue=new ItemStack(Items.dye,1,12);
  ItemStack itemDyePowderMagenta=new ItemStack(Items.dye,1,13);
  ItemStack itemDyePowderOrange=new ItemStack(Items.dye,1,14);
  ItemStack itemDyePowderWhite=new ItemStack(Items.dye,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlack,new PotionChemical[]{this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderRed,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGreen,new PotionChemical[]{this.molecule(MoleculeEnum.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDyePowderBrown,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.theobromine),this.molecule(MoleculeEnum.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlue,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPurple,new PotionChemical[]{this.molecule(MoleculeEnum.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderCyan,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightGray,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGray,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPink,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLime,new PotionChemical[]{this.molecule(MoleculeEnum.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderYellow,new PotionChemical[]{this.molecule(MoleculeEnum.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightBlue,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderMagenta,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderOrange,new PotionChemical[]{this.molecule(MoleculeEnum.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderWhite,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlack,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderRed,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGreen,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBrown,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.theobromine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlue,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPurple,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderCyan,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightGray,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGray,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment),this.molecule(MoleculeEnum.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPink,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.redPigment),this.molecule(MoleculeEnum.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLime,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderYellow,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightBlue,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderMagenta,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.lightbluePigment),this.molecule(MoleculeEnum.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderOrange,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderWhite,false,50,new PotionChemical[]{this.molecule(MoleculeEnum.whitePigment)}));
  ItemStack itemBone=new ItemStack(Items.bone);
  DecomposerRecipe.add(new DecomposerRecipe(itemBone,new PotionChemical[]{this.molecule(MoleculeEnum.hydroxylapatite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBone,false,100,new PotionChemical[]{this.molecule(MoleculeEnum.hydroxylapatite)}));
  ItemStack itemSugar=new ItemStack(Items.sugar);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSugar,0.75F,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSugar,false,400,new PotionChemical[]{this.molecule(MoleculeEnum.sucrose)}));
  ItemStack itemMelon=new ItemStack(Items.melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemMelon,new PotionChemical[]{this.molecule(MoleculeEnum.water)}));
  ItemStack itemChickenCooked=new ItemStack(Items.cooked_chicken);
  DecomposerRecipe.add(new DecomposerRecipe(itemChickenCooked,new PotionChemical[]{this.element(ElementEnum.K),this.element(ElementEnum.Na),this.element(ElementEnum.C,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemChickenCooked,true,5000,new PotionChemical[]{this.element(ElementEnum.K,16),this.element(ElementEnum.Na,16),this.element(ElementEnum.C,16)}));
  ItemStack itemRottenFlesh=new ItemStack(Items.rotten_flesh);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRottenFlesh,0.05F,new PotionChemical[]{new Molecule(MoleculeEnum.nodularin,1)}));
  ItemStack itemEnderPearl=new ItemStack(Items.ender_pearl);
  DecomposerRecipe.add(new DecomposerRecipe(itemEnderPearl,new PotionChemical[]{this.element(ElementEnum.Es),this.molecule(MoleculeEnum.calciumCarbonate,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEnderPearl,true,5000,new PotionChemical[]{this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.element(ElementEnum.Es),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate),this.molecule(MoleculeEnum.calciumCarbonate)}));
  ItemStack itemBlazeRod=new ItemStack(Items.blaze_rod);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazeRod,new PotionChemical[]{this.element(ElementEnum.Pu,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBlazeRod,true,15000,new PotionChemical[]{this.element(ElementEnum.Pu,2),null,null,this.element(ElementEnum.Pu,2),null,null,this.element(ElementEnum.Pu,2),null,null}));
  ItemStack itemBlazePowder=new ItemStack(Items.blaze_powder);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazePowder,new PotionChemical[]{this.element(ElementEnum.Pu)}));
  ItemStack itemGhastTear=new ItemStack(Items.ghast_tear);
  DecomposerRecipe.add(new DecomposerRecipe(itemGhastTear,new PotionChemical[]{this.element(ElementEnum.Yb,4),this.element(ElementEnum.No,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGhastTear,true,15000,new PotionChemical[]{this.element(ElementEnum.Yb),this.element(ElementEnum.Yb),this.element(ElementEnum.No),null,this.element(ElementEnum.Yb,2),this.element(ElementEnum.No,2),null,this.element(ElementEnum.No),null}));
  ItemStack itemNetherStalkSeeds=new ItemStack(Items.nether_wart);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemNetherStalkSeeds,0.5F,new PotionChemical[]{this.molecule(MoleculeEnum.cocainehcl)}));
  ItemStack itemSpiderEye=new ItemStack(Items.spider_eye);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSpiderEye,0.2F,new PotionChemical[]{this.molecule(MoleculeEnum.tetrodotoxin)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSpiderEye,true,2000,new PotionChemical[]{this.element(ElementEnum.C),null,null,null,this.molecule(MoleculeEnum.tetrodotoxin),null,null,null,this.element(ElementEnum.C)}));
  ItemStack itemFermentedSpiderEye=new ItemStack(Items.fermented_spider_eye);
  DecomposerRecipe.add(new DecomposerRecipe(itemFermentedSpiderEye,new PotionChemical[]{this.element(ElementEnum.Po),this.molecule(MoleculeEnum.ethanol)}));
  ItemStack itemMagmaCream=new ItemStack(Items.magma_cream);
  DecomposerRecipe.add(new DecomposerRecipe(itemMagmaCream,new PotionChemical[]{this.element(ElementEnum.Hg),this.element(ElementEnum.Pu),this.molecule(MoleculeEnum.pmma,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemMagmaCream,true,5000,new PotionChemical[]{null,this.element(ElementEnum.Pu),null,this.molecule(MoleculeEnum.pmma),this.element(ElementEnum.Hg),this.molecule(MoleculeEnum.pmma),null,this.molecule(MoleculeEnum.pmma),null}));
  ItemStack itemSpeckledMelon=new ItemStack(Items.speckled_melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemSpeckledMelon,new PotionChemical[]{this.molecule(MoleculeEnum.water,4),this.molecule(MoleculeEnum.whitePigment),this.element(ElementEnum.Au,1)}));
  ItemStack itemEmerald=new ItemStack(Items.emerald);
  DecomposerRecipe.add(new DecomposerRecipe(itemEmerald,new PotionChemical[]{this.molecule(MoleculeEnum.beryl,2),this.element(ElementEnum.Cr,2),this.element(ElementEnum.V,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEmerald,true,5000,new PotionChemical[]{null,this.element(ElementEnum.Cr),null,this.element(ElementEnum.V),this.molecule(MoleculeEnum.beryl,2),this.element(ElementEnum.V),null,this.element(ElementEnum.Cr),null}));
  ItemStack itemCarrot=new ItemStack(Items.carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemCarrot,new PotionChemical[]{this.molecule(MoleculeEnum.retinol)}));
  ItemStack itemPotato=new ItemStack(Items.potato);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPotato,0.4F,new PotionChemical[]{this.molecule(MoleculeEnum.water,8),this.element(ElementEnum.K,2),this.molecule(MoleculeEnum.cellulose)}));
  ItemStack itemGoldenCarrot=new ItemStack(Items.golden_carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemGoldenCarrot,new PotionChemical[]{this.molecule(MoleculeEnum.retinol),this.element(ElementEnum.Au,4)}));
  ItemStack itemNetherStar=new ItemStack(Items.nether_star);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherStar,new PotionChemical[]{this.element(ElementEnum.Cn,16),elementHydrogen,elementHydrogen,elementHydrogen,elementHelium,elementHelium,elementHelium,elementCarbon,elementCarbon}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherStar,true,5000,new PotionChemical[]{elementHelium,elementHelium,elementHelium,elementCarbon,this.element(ElementEnum.Cn,16),elementHelium,elementHydrogen,elementHydrogen,elementHydrogen}));
  ItemStack itemNetherQuartz=new ItemStack(Items.quartz);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherQuartz,new PotionChemical[]{this.molecule(MoleculeEnum.siliconDioxide,4),this.molecule(MoleculeEnum.galliumarsenide,1)}));
  ItemStack itemRecord13=new ItemStack(Items.record_13);
  ItemStack itemRecordCat=new ItemStack(Items.record_cat);
  ItemStack itemRecordFar=new ItemStack(Items.record_far);
  ItemStack itemRecordMall=new ItemStack(Items.record_mall);
  ItemStack itemRecordMellohi=new ItemStack(Items.record_mellohi);
  ItemStack itemRecordStal=new ItemStack(Items.record_stal);
  ItemStack itemRecordStrad=new ItemStack(Items.record_strad);
  ItemStack itemRecordWard=new ItemStack(Items.record_ward);
  ItemStack itemRecordChirp=new ItemStack(Items.record_chirp);
  DecomposerRecipe.add(new DecomposerRecipe(itemRecord13,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordCat,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordFar,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMall,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMellohi,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStal,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStrad,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordWard,new PotionChemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordChirp,new PotionChemical[]{moleculePolyvinylChloride}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecord13,true,1000,new PotionChemical[]{moleculePolyvinylChloride,null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordCat,true,1000,new PotionChemical[]{null,moleculePolyvinylChloride,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordFar,true,1000,new PotionChemical[]{null,null,moleculePolyvinylChloride,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMall,true,1000,new PotionChemical[]{null,null,null,moleculePolyvinylChloride,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMellohi,true,1000,new PotionChemical[]{null,null,null,null,moleculePolyvinylChloride,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStal,true,1000,new PotionChemical[]{null,null,null,null,null,moleculePolyvinylChloride,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStrad,true,1000,new PotionChemical[]{null,null,null,null,null,null,moleculePolyvinylChloride,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordWard,true,1000,new PotionChemical[]{null,null,null,null,null,null,null,moleculePolyvinylChloride,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordChirp,true,1000,new PotionChemical[]{null,null,null,null,null,null,null,null,moleculePolyvinylChloride}));
}",0.999982761295661
21854,"public static void load(Configuration config){
  try {
    config.load();
    Field[] fields=Settings.class.getFields();
    for (    Field field : fields) {
      CfgId annoBlock=field.getAnnotation(CfgId.class);
      CfgBool annoBool=field.getAnnotation(CfgBool.class);
      CfgInt annoInt=field.getAnnotation(CfgInt.class);
      if (annoBlock != null && annoBool == null && annoInt == null) {
        int id=field.getInt(null);
        if (annoBlock.block()) {
          id=config.getBlock(field.getName(),id).getInt();
        }
 else {
          id=config.getItem(field.getName(),id).getInt();
        }
        field.setInt(null,id);
      }
 else       if (annoBool != null && annoBlock == null && annoInt == null) {
        if (field.isAnnotationPresent(CfgBool.class)) {
          boolean bool=field.getBoolean(null);
          bool=config.get(Configuration.CATEGORY_GENERAL,field.getName(),bool).getBoolean(bool);
          field.setBoolean(null,bool);
        }
      }
 else       if (annoBool == null && annoBlock == null && annoInt != null) {
        if (field.isAnnotationPresent(CfgInt.class)) {
          int someInt=field.getInt(null);
          someInt=config.get(Configuration.CATEGORY_GENERAL,field.getName(),someInt).getInt(someInt);
          field.setInt(null,someInt);
        }
      }
    }
  }
 catch (  Exception e) {
    LogWrapper.log(Level.WARNING,""String_Node_Str"");
  }
 finally {
    config.save();
  }
}","public static void load(Configuration config){
  try {
    config.load();
    Field[] fields=Settings.class.getFields();
    for (    Field field : fields) {
      CfgId annoBlock=field.getAnnotation(CfgId.class);
      CfgBool annoBool=field.getAnnotation(CfgBool.class);
      CfgInt annoInt=field.getAnnotation(CfgInt.class);
      if (annoBlock != null && annoBool == null && annoInt == null) {
        int id=field.getInt(null);
        if (annoBlock.block()) {
          id=config.getBlock(field.getName(),id).getInt();
        }
 else {
          id=config.getItem(field.getName(),id).getInt();
        }
        field.setInt(null,id);
      }
 else       if (annoBool != null && annoBlock == null && annoInt == null) {
        if (field.isAnnotationPresent(CfgBool.class)) {
          boolean bool=field.getBoolean(null);
          bool=config.get(Configuration.CATEGORY_GENERAL,field.getName(),bool).getBoolean(bool);
          field.setBoolean(null,bool);
        }
      }
 else       if (annoBool == null && annoBlock == null && annoInt != null) {
        if (field.isAnnotationPresent(CfgInt.class)) {
          int someInt=field.getInt(null);
          someInt=config.get(Configuration.CATEGORY_GENERAL,field.getName(),someInt).getInt(someInt);
          field.setInt(null,someInt);
        }
      }
    }
  }
 catch (  Exception e) {
    ModMinechem.LOGGER.log(Level.WARNING,""String_Node_Str"");
  }
 finally {
    config.save();
  }
}",0.9910096818810512
21855,"private boolean hasDiscovered(ArrayList<ItemStack> list,ItemStack itemstack){
  for (  ItemStack itemstack2 : list) {
    if (itemstack.isItemEqual(itemstack2))     return true;
  }
  return false;
}","private boolean hasDiscovered(ArrayList<ItemStack> list,ItemStack itemstack){
  for (  ItemStack itemstack2 : list) {
    if (itemstack.isItemEqual(itemstack2)) {
      return true;
    }
  }
  return false;
}",0.9754901960784312
21856,"public List<ItemStack> getItemList(ItemStack journal){
  NBTTagCompound tag=journal.getTagCompound();
  if (tag != null) {
    NBTTagList taglist=tag.getTagList(ITEMS_TAG_NAME);
    if (taglist != null)     return MinechemHelper.readTagListToItemStackList(taglist);
  }
  return null;
}","public List<ItemStack> getItemList(ItemStack journal){
  NBTTagCompound tag=journal.getTagCompound();
  if (tag != null) {
    NBTTagList taglist=tag.getTagList(ITEMS_TAG_NAME);
    if (taglist != null) {
      return MinechemHelper.readTagListToItemStackList(taglist);
    }
  }
  return null;
}",0.9381443298969072
21857,"@Override public ItemStack onItemRightClick(ItemStack par1ItemStack,World world,EntityPlayer entityPlayer){
  if (!world.isRemote)   entityPlayer.openGui(ModMinechem.INSTANCE,GuiHandler.GUI_ID_JOURNAL,world,entityPlayer.chunkCoordX,entityPlayer.chunkCoordY,entityPlayer.chunkCoordY);
  return par1ItemStack;
}","@Override public ItemStack onItemRightClick(ItemStack itemStack,World world,EntityPlayer entityPlayer){
  if (!world.isRemote) {
    entityPlayer.openGui(ModMinechem.INSTANCE,GuiHandler.GUI_ID_JOURNAL,world,entityPlayer.chunkCoordX,entityPlayer.chunkCoordY,entityPlayer.chunkCoordY);
    NBTTagCompound tagCompound=itemStack.getTagCompound();
    if (tagCompound == null) {
      tagCompound=new NBTTagCompound();
    }
    tagCompound.setString(JOURNAL_OWNER_TAG,entityPlayer.username);
    itemStack.setTagCompound(tagCompound);
  }
  return itemStack;
}",0.6566473988439306
21858,"@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack itemStack,EntityPlayer entityPlayer,List list,boolean par4){
  NBTTagCompound stackTag=itemStack.getTagCompound();
  if (stackTag != null) {
    NBTTagCompound activeTag=(NBTTagCompound)stackTag.getTag(ACTIVE_ITEMSTACK_TAG);
    String owner=stackTag.getString(""String_Node_Str"");
    if (activeTag != null) {
      ItemStack activeItemStack=ItemStack.loadItemStackFromNBT(activeTag);
      list.add(activeItemStack.getDisplayName());
    }
    list.add(""String_Node_Str"" + owner);
  }
}","@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack itemStack,EntityPlayer entityPlayer,List list,boolean par4){
  NBTTagCompound stackTag=itemStack.getTagCompound();
  if (stackTag != null) {
    NBTTagCompound activeTag=(NBTTagCompound)stackTag.getTag(ACTIVE_ITEMSTACK_TAG);
    if (activeTag != null) {
      ItemStack activeItemStack=ItemStack.loadItemStackFromNBT(activeTag);
      list.add(""String_Node_Str"" + activeItemStack.getDisplayName());
    }
    String owner=stackTag.getString(JOURNAL_OWNER_TAG);
    list.add(""String_Node_Str"" + owner);
  }
}",0.8835978835978836
21859,"public void setActiveStack(ItemStack itemstack,ItemStack journalStack){
  NBTTagCompound journalTag=journalStack.getTagCompound();
  if (journalTag == null)   journalTag=new NBTTagCompound();
  NBTTagCompound stackTag=itemstack.writeToNBT(new NBTTagCompound());
  journalTag.setTag(ACTIVE_ITEMSTACK_TAG,stackTag);
  journalStack.setTagCompound(journalTag);
}","public void setActiveStack(ItemStack itemstack,ItemStack journalStack){
  NBTTagCompound journalTag=journalStack.getTagCompound();
  if (journalTag == null) {
    journalTag=new NBTTagCompound();
  }
  NBTTagCompound stackTag=itemstack.writeToNBT(new NBTTagCompound());
  journalTag.setTag(ACTIVE_ITEMSTACK_TAG,stackTag);
  journalStack.setTagCompound(journalTag);
}",0.988950276243094
21860,"public void addItemStackToJournal(ItemStack itemstack,ItemStack journal,World world){
  NBTTagCompound tagCompound=journal.getTagCompound();
  if (tagCompound == null)   tagCompound=new NBTTagCompound();
  NBTTagList taglist=tagCompound.getTagList(ITEMS_TAG_NAME);
  if (taglist == null)   taglist=new NBTTagList();
  ArrayList<ItemStack> itemArrayList=MinechemHelper.readTagListToItemStackList(taglist);
  if (!hasDiscovered(itemArrayList,itemstack)) {
    taglist.appendTag(itemstack.writeToNBT(new NBTTagCompound()));
    tagCompound.setTag(ITEMS_TAG_NAME,taglist);
    journal.setTagCompound(tagCompound);
  }
}","public void addItemStackToJournal(ItemStack itemstack,ItemStack journal,World world){
  NBTTagCompound tagCompound=journal.getTagCompound();
  if (tagCompound == null) {
    tagCompound=new NBTTagCompound();
  }
  NBTTagList taglist=tagCompound.getTagList(ITEMS_TAG_NAME);
  if (taglist == null) {
    taglist=new NBTTagList();
  }
  ArrayList<ItemStack> itemArrayList=MinechemHelper.readTagListToItemStackList(taglist);
  if (!hasDiscovered(itemArrayList,itemstack)) {
    taglist.appendTag(itemstack.writeToNBT(new NBTTagCompound()));
    tagCompound.setTag(ITEMS_TAG_NAME,taglist);
    journal.setTagCompound(tagCompound);
  }
}",0.9871589085072232
21861,"public ItemStack getActiveStack(ItemStack journalStack){
  NBTTagCompound journalTag=journalStack.getTagCompound();
  if (journalTag != null) {
    NBTTagCompound stackTag=(NBTTagCompound)journalTag.getTag(ACTIVE_ITEMSTACK_TAG);
    if (stackTag != null)     return ItemStack.loadItemStackFromNBT(stackTag);
  }
  return null;
}","public ItemStack getActiveStack(ItemStack journalStack){
  NBTTagCompound journalTag=journalStack.getTagCompound();
  if (journalTag != null) {
    NBTTagCompound stackTag=(NBTTagCompound)journalTag.getTag(ACTIVE_ITEMSTACK_TAG);
    if (stackTag != null) {
      return ItemStack.loadItemStackFromNBT(stackTag);
    }
  }
  return null;
}",0.984984984984985
21862,"public void registerFluidRecipies(){
  int fluidPerIngot=144;
  DecomposerRecipe.add(new DecomposerFluidRecipe(new FluidStack(FluidRegistry.WATER,10000),new Chemical[]{this.element(EnumElement.H),this.element(EnumElement.O)}));
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.H),this.element(EnumElement.O)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Fe,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Au,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Cu,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Sn,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Al,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Co,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Fe,2),this.element(EnumElement.W,2),this.element(EnumElement.Si,2)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16),this.molecule(EnumMolecule.magnesiumOxide,8)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.molecule(EnumMolecule.beryl,6),this.element(EnumElement.Cr,6),this.element(EnumElement.V,6)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Ni,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Pb,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Ag,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Pt,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate)});
}","public void registerFluidRecipies(){
  int fluidPerIngot=144;
  int threeQuarterFluidPerIngot=108;
  DecomposerRecipe.add(new DecomposerFluidRecipe(new FluidStack(FluidRegistry.WATER,10000),new Chemical[]{this.element(EnumElement.H),this.element(EnumElement.O)}));
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.H),this.element(EnumElement.O)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Fe,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Au,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Cu,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Sn,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Al,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Co,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Fe,2),this.element(EnumElement.W,2),this.element(EnumElement.Si,2)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16),this.molecule(EnumMolecule.magnesiumOxide,8)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.molecule(EnumMolecule.beryl,6),this.element(EnumElement.Cr,6),this.element(EnumElement.V,6)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Ni,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Pb,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Ag,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.element(EnumElement.Pt,16)});
  DecomposerFluidRecipe.createAndAddFluidRecipeSafely(""String_Node_Str"",fluidPerIngot,new Chemical[]{this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate)});
}",0.9938384679433804
21863,"private void updateChemicalStorageContainer(EntityPlayer player,Container openContainer){
  ContainerChemicalStorage chemicalStorage=(ContainerChemicalStorage)openContainer;
  List<ItemStack> itemstacks=chemicalStorage.getStorageInventory();
  for (  ItemStack itemstack : itemstacks) {
    if (itemstack != null && itemstack.itemID == MinechemItems.element.itemID) {
      RadiationInfo radiationInfo=ItemElement.getRadiationInfo(itemstack,player.worldObj);
      radiationInfo.lastRadiationUpdate=player.worldObj.getTotalWorldTime();
      ItemElement.setRadiationInfo(radiationInfo,itemstack);
    }
  }
  List<ItemStack> playerStacks=chemicalStorage.getPlayerInventory();
  updateRadiationOnItems(player.worldObj,player,openContainer,playerStacks);
}","private void updateChemicalStorageContainer(EntityPlayer player,Container openContainer){
  ContainerChemicalStorage chemicalStorage=(ContainerChemicalStorage)openContainer;
  List<ItemStack> itemstacks=chemicalStorage.getStorageInventory();
  for (  ItemStack itemstack : itemstacks) {
    if (itemstack != null && itemstack.itemID == MinechemItems.element.itemID && ItemElement.getRadioactivity(itemstack) != EnumRadioactivity.stable) {
      RadiationInfo radiationInfo=ItemElement.getRadiationInfo(itemstack,player.worldObj);
      radiationInfo.lastRadiationUpdate=player.worldObj.getTotalWorldTime();
      ItemElement.setRadiationInfo(radiationInfo,itemstack);
    }
  }
  List<ItemStack> playerStacks=chemicalStorage.getPlayerInventory();
  updateRadiationOnItems(player.worldObj,player,openContainer,playerStacks);
}",0.9550348321722608
21864,"private List<DecayEvent> updateRadiationOnItems(World world,EntityPlayer player,Container container,List<ItemStack> itemstacks){
  List<DecayEvent> events=new ArrayList<DecayEvent>();
  for (  ItemStack itemstack : itemstacks) {
    if (itemstack != null && itemstack.itemID == MinechemItems.element.itemID) {
      DecayEvent decayEvent=new DecayEvent();
      decayEvent.before=itemstack.copy();
      decayEvent.damage=updateRadiation(world,itemstack);
      decayEvent.after=itemstack.copy();
      if (decayEvent.damage > 0)       events.add(decayEvent);
      if (decayEvent.damage > 0 && container != null) {
        applyRadiationDamage(player,container,decayEvent.damage);
        printRadiationDamageToChat(player,decayEvent);
      }
    }
  }
  return events;
}","private List<DecayEvent> updateRadiationOnItems(World world,EntityPlayer player,Container container,List<ItemStack> itemstacks){
  List<DecayEvent> events=new ArrayList<DecayEvent>();
  for (  ItemStack itemstack : itemstacks) {
    if (itemstack != null && itemstack.itemID == MinechemItems.element.itemID && ItemElement.getRadioactivity(itemstack) != EnumRadioactivity.stable) {
      DecayEvent decayEvent=new DecayEvent();
      decayEvent.before=itemstack.copy();
      decayEvent.damage=updateRadiation(world,itemstack);
      decayEvent.after=itemstack.copy();
      if (decayEvent.damage > 0)       events.add(decayEvent);
      if (decayEvent.damage > 0 && container != null) {
        applyRadiationDamage(player,container,decayEvent.damage);
        printRadiationDamageToChat(player,decayEvent);
      }
    }
  }
  return events;
}",0.603586889301175
21865,"public void RegisterRecipes(){
  this.registerVanillaChemicalRecipes();
  ItemStack blockGlass=new ItemStack(Block.glass);
  ItemStack blockThinGlass=new ItemStack(Block.thinGlass);
  ItemStack blockIron=new ItemStack(Block.blockIron);
  ItemStack itemIngotIron=new ItemStack(Item.ingotIron);
  ItemStack itemRedstone=new ItemStack(Item.redstone);
  ItemStack minechemItemsAtomicManipulator=new ItemStack(MinechemItems.atomicManipulator);
  ItemStack moleculePolyvinylChloride=new ItemStack(MinechemItems.molecule,1,EnumMolecule.polyvinylChloride.ordinal());
  GameRegistry.addRecipe(MinechemItems.concaveLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),blockGlass});
  GameRegistry.addRecipe(MinechemItems.convexLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),blockGlass});
  GameRegistry.addRecipe(MinechemItems.microscopeLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),MinechemItems.convexLens,Character.valueOf('B'),MinechemItems.concaveLens});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.microscope),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('L'),MinechemItems.microscopeLens,Character.valueOf('P'),blockThinGlass,Character.valueOf('I'),itemIngotIron});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.microscope),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('L'),MinechemItems.microscopeLens,Character.valueOf('P'),blockThinGlass,Character.valueOf('I'),itemIngotIron});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.atomicManipulator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),new ItemStack(Block.pistonBase),Character.valueOf('I'),blockIron});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.decomposer),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),minechemItemsAtomicManipulator,Character.valueOf('I'),itemIngotIron,Character.valueOf('R'),itemRedstone});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.synthesis),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),minechemItemsAtomicManipulator,Character.valueOf('I'),itemIngotIron,Character.valueOf('R'),itemRedstone,Character.valueOf('D'),new ItemStack(Item.diamond)});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.fusion,16,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),itemIngotIron,Character.valueOf('L'),ItemElement.createStackOf(EnumElement.Pb,1)});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.fusion,16,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),itemIngotIron,Character.valueOf('W'),ItemElement.createStackOf(EnumElement.W,1),Character.valueOf('B'),ItemElement.createStackOf(EnumElement.Be,1)});
  GameRegistry.addRecipe(MinechemItems.projectorLens,new Object[]{""String_Node_Str"",Character.valueOf('A'),MinechemItems.concaveLens,Character.valueOf('B'),MinechemItems.convexLens});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.blueprintProjector),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),itemIngotIron,Character.valueOf('P'),blockThinGlass,Character.valueOf('L'),MinechemItems.projectorLens,Character.valueOf('G'),new ItemStack(Block.redstoneLampIdle)});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatFeet),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),moleculePolyvinylChloride});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatLegs),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),moleculePolyvinylChloride});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatTorso),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),moleculePolyvinylChloride});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatHead),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),moleculePolyvinylChloride});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.chemicalStorage),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('L'),new ItemStack(MinechemItems.element,1,EnumElement.Pb.ordinal()),Character.valueOf('C'),new ItemStack(Block.chest)});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.IAintAvinit),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('Z'),new ItemStack(Item.ingotIron),Character.valueOf('S'),new ItemStack(Item.stick)});
  GameRegistry.addShapelessRecipe(new ItemStack(MinechemItems.journal),new Object[]{new ItemStack(Item.book),new ItemStack(Block.glass)});
  GameRegistry.addShapelessRecipe(new ItemStack(MinechemItems.EmptyPillz,4),new Object[]{new ItemStack(Item.sugar),new ItemStack(Item.slimeBall),new ItemStack(Item.slimeBall)});
  GameRegistry.addShapelessRecipe(ItemBlueprint.createItemStackFromBlueprint(MinechemBlueprint.fusion),new Object[]{new ItemStack(Item.paper),new ItemStack(Block.blockDiamond)});
  GameRegistry.addShapelessRecipe(ItemBlueprint.createItemStackFromBlueprint(MinechemBlueprint.fission),new Object[]{new ItemStack(Item.paper),new ItemStack(Item.diamond)});
  GameRegistry.addRecipe(new RecipeJournalCloning());
  this.addDecomposerRecipesFromMolecules();
  this.addSynthesisRecipesFromMolecules();
  this.addUnusedSynthesisRecipes();
  this.registerPoisonRecipes(EnumMolecule.poison);
  this.registerPoisonRecipes(EnumMolecule.sucrose);
  this.registerPoisonRecipes(EnumMolecule.psilocybin);
  this.registerPoisonRecipes(EnumMolecule.methamphetamine);
  this.registerPoisonRecipes(EnumMolecule.amphetamine);
  this.registerPoisonRecipes(EnumMolecule.pantherine);
  this.registerPoisonRecipes(EnumMolecule.ethanol);
  this.registerPoisonRecipes(EnumMolecule.penicillin);
  this.registerPoisonRecipes(EnumMolecule.testosterone);
  this.registerPoisonRecipes(EnumMolecule.xanax);
  this.registerPoisonRecipes(EnumMolecule.mescaline);
  this.registerPoisonRecipes(EnumMolecule.asprin);
  this.registerPoisonRecipes(EnumMolecule.sulfuricAcid);
  this.registerPoisonRecipes(EnumMolecule.ttx);
  this.registerPoisonRecipes(EnumMolecule.pal2);
  this.registerPoisonRecipes(EnumMolecule.nod);
  this.registerPoisonRecipes(EnumMolecule.afroman);
  this.registerPoisonRecipes(EnumMolecule.radchlor);
  this.registerPoisonRecipes(EnumMolecule.redrocks);
  this.registerPoisonRecipes(EnumMolecule.coke);
  this.registerPoisonRecipes(EnumMolecule.theobromine);
  this.registerPoisonRecipes(EnumMolecule.ctaxifolia);
  this.registerPoisonRecipes(EnumMolecule.latropine);
}","public void RegisterRecipes(){
  this.registerVanillaChemicalRecipes();
  ItemStack blockGlass=new ItemStack(Block.glass);
  ItemStack blockThinGlass=new ItemStack(Block.thinGlass);
  ItemStack blockIron=new ItemStack(Block.blockIron);
  ItemStack itemIngotIron=new ItemStack(Item.ingotIron);
  ItemStack itemRedstone=new ItemStack(Item.redstone);
  ItemStack minechemItemsAtomicManipulator=new ItemStack(MinechemItems.atomicManipulator);
  ItemStack moleculePolyvinylChloride=new ItemStack(MinechemItems.molecule,1,EnumMolecule.polyvinylChloride.ordinal());
  GameRegistry.addRecipe(MinechemItems.concaveLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),blockGlass});
  GameRegistry.addRecipe(MinechemItems.convexLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),blockGlass});
  GameRegistry.addRecipe(MinechemItems.microscopeLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),MinechemItems.convexLens,Character.valueOf('B'),MinechemItems.concaveLens});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.microscope),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('L'),MinechemItems.microscopeLens,Character.valueOf('P'),blockThinGlass,Character.valueOf('I'),itemIngotIron});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.microscope),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('L'),MinechemItems.microscopeLens,Character.valueOf('P'),blockThinGlass,Character.valueOf('I'),itemIngotIron});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.atomicManipulator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),new ItemStack(Block.pistonBase),Character.valueOf('I'),blockIron});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.decomposer),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),minechemItemsAtomicManipulator,Character.valueOf('I'),itemIngotIron,Character.valueOf('R'),itemRedstone});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.synthesis),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),minechemItemsAtomicManipulator,Character.valueOf('I'),itemIngotIron,Character.valueOf('R'),itemRedstone,Character.valueOf('D'),new ItemStack(Item.diamond)});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.fusion,16,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),itemIngotIron,Character.valueOf('L'),ItemElement.createStackOf(EnumElement.Pb,1)});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.fusion,16,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),itemIngotIron,Character.valueOf('W'),ItemElement.createStackOf(EnumElement.W,1),Character.valueOf('B'),ItemElement.createStackOf(EnumElement.Be,1)});
  GameRegistry.addRecipe(MinechemItems.projectorLens,new Object[]{""String_Node_Str"",Character.valueOf('A'),MinechemItems.concaveLens,Character.valueOf('B'),MinechemItems.convexLens});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.blueprintProjector),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),itemIngotIron,Character.valueOf('P'),blockThinGlass,Character.valueOf('L'),MinechemItems.projectorLens,Character.valueOf('G'),new ItemStack(Block.redstoneLampIdle)});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.chemicalStorage),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('L'),new ItemStack(MinechemItems.element,1,EnumElement.Pb.ordinal()),Character.valueOf('C'),new ItemStack(Block.chest)});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.IAintAvinit),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('Z'),new ItemStack(Item.ingotIron),Character.valueOf('S'),new ItemStack(Item.stick)});
  GameRegistry.addShapelessRecipe(new ItemStack(MinechemItems.journal),new Object[]{new ItemStack(Item.book),new ItemStack(Block.glass)});
  GameRegistry.addShapelessRecipe(new ItemStack(MinechemItems.EmptyPillz,4),new Object[]{new ItemStack(Item.sugar),new ItemStack(Item.slimeBall),new ItemStack(Item.slimeBall)});
  GameRegistry.addShapelessRecipe(ItemBlueprint.createItemStackFromBlueprint(MinechemBlueprint.fusion),new Object[]{new ItemStack(Item.paper),new ItemStack(Block.blockDiamond)});
  GameRegistry.addShapelessRecipe(ItemBlueprint.createItemStackFromBlueprint(MinechemBlueprint.fission),new Object[]{new ItemStack(Item.paper),new ItemStack(Item.diamond)});
  GameRegistry.addRecipe(new RecipeJournalCloning());
  this.addDecomposerRecipesFromMolecules();
  this.addSynthesisRecipesFromMolecules();
  this.addUnusedSynthesisRecipes();
  this.registerPoisonRecipes(EnumMolecule.poison);
  this.registerPoisonRecipes(EnumMolecule.sucrose);
  this.registerPoisonRecipes(EnumMolecule.psilocybin);
  this.registerPoisonRecipes(EnumMolecule.methamphetamine);
  this.registerPoisonRecipes(EnumMolecule.amphetamine);
  this.registerPoisonRecipes(EnumMolecule.pantherine);
  this.registerPoisonRecipes(EnumMolecule.ethanol);
  this.registerPoisonRecipes(EnumMolecule.penicillin);
  this.registerPoisonRecipes(EnumMolecule.testosterone);
  this.registerPoisonRecipes(EnumMolecule.xanax);
  this.registerPoisonRecipes(EnumMolecule.mescaline);
  this.registerPoisonRecipes(EnumMolecule.asprin);
  this.registerPoisonRecipes(EnumMolecule.sulfuricAcid);
  this.registerPoisonRecipes(EnumMolecule.ttx);
  this.registerPoisonRecipes(EnumMolecule.pal2);
  this.registerPoisonRecipes(EnumMolecule.nod);
  this.registerPoisonRecipes(EnumMolecule.afroman);
  this.registerPoisonRecipes(EnumMolecule.radchlor);
  this.registerPoisonRecipes(EnumMolecule.redrocks);
  this.registerPoisonRecipes(EnumMolecule.coke);
  this.registerPoisonRecipes(EnumMolecule.theobromine);
  this.registerPoisonRecipes(EnumMolecule.ctaxifolia);
  this.registerPoisonRecipes(EnumMolecule.latropine);
}",0.8511299215655821
21866,"@Override public int[] getAccessibleSlotsFromSide(int var1){
  if (var1 == 0) {
    return this.kOutput;
  }
  return this.kInput;
}","@Override public int[] getAccessibleSlotsFromSide(int var1){
  if (var1 == 1) {
    return this.kInput;
  }
  return this.kOutput;
}",0.9545454545454546
21867,"public int[] getSizeInventorySide(int side){
switch (side) {
case 0:
case 1:
case 2:
case 3:
    return kInput;
default :
  return kOutput;
}
}","public int[] getSizeInventorySide(int side){
switch (side) {
case 1:
    return kInput;
default :
  return kOutput;
}
}",0.9083969465648856
21868,"public int[] getSizeInventorySide(int side){
switch (side) {
case 0:
case 1:
case 4:
case 5:
    return kStorage;
default :
  return kOutput;
}
}","public int[] getSizeInventorySide(int side){
switch (side) {
case 1:
    return kStorage;
default :
  return kOutput;
}
}",0.9097744360902256
21869,"@Override public int[] getAccessibleSlotsFromSide(int var1){
  if (var1 == 0 && takeStacksFromStorage(false)) {
    return this.kOutput;
  }
  return this.kStorage;
}","@Override public int[] getAccessibleSlotsFromSide(int var1){
  if (var1 != 1 && takeStacksFromStorage(false)) {
    return this.kOutput;
  }
  return this.kStorage;
}",0.9879518072289156
21870,"public DecomposerRecipe getRecipe(ItemStack input,int level){
  for (  DecomposerRecipe recipe : DecomposerRecipe.recipes) {
    if (Util.stacksAreSameKind(input,recipe.getInput()))     return recipe;
  }
  if (level < 5) {
    ArrayList<Chemical> output=new ArrayList<Chemical>();
    int foundRecipies=0;
    for (    Object recipe : CraftingManager.getInstance().getRecipeList()) {
      if (recipe instanceof IRecipe) {
        if (((IRecipe)recipe).getRecipeOutput() != null && ((IRecipe)recipe).getRecipeOutput().isItemEqual(input)) {
          ItemStack[] components=null;
          if (recipe instanceof ShapelessOreRecipe && ((ShapelessOreRecipe)recipe).getInput().size() > 0) {
            ArrayList<ItemStack> inputs=new ArrayList<ItemStack>();
            for (            Object o : ((ShapelessOreRecipe)recipe).getInput()) {
              if (o instanceof ItemStack) {
                inputs.add((ItemStack)o);
              }
            }
            components=inputs.toArray(new ItemStack[inputs.size()]);
          }
          if (recipe instanceof ShapedOreRecipe) {
            ArrayList<ItemStack> inputs=new ArrayList<ItemStack>();
            for (            Object o : ((ShapedOreRecipe)recipe).getInput()) {
              if (o instanceof ItemStack) {
                inputs.add((ItemStack)o);
              }
 else               if (o instanceof String) {
                inputs.add(OreDictionary.getOres((String)o).get(0));
              }
 else               if (o instanceof ArrayList && !((ArrayList)o).isEmpty()) {
                inputs.add((ItemStack)((ArrayList)o).get(0));
              }
            }
            components=inputs.toArray(new ItemStack[inputs.size()]);
          }
          if (recipe instanceof ShapelessRecipes && ((ShapelessRecipes)recipe).recipeItems.toArray() instanceof ItemStack[]) {
            components=(ItemStack[])((ShapelessRecipes)recipe).recipeItems.toArray();
          }
          if (recipe instanceof ShapedRecipes && ((ShapedRecipes)recipe).recipeItems instanceof ItemStack[]) {
            components=((ShapedRecipes)recipe).recipeItems;
          }
          if (components != null) {
            ArrayList<Chemical> sum=new ArrayList<Chemical>();
            for (            ItemStack item : components) {
              if (item != null) {
                DecomposerRecipe decompRecipe=this.getRecipe(item,level + 1);
                if (decompRecipe != null) {
                  sum.addAll(decompRecipe.getOutputRaw());
                }
              }
            }
            if (!sum.isEmpty()) {
              Random rand=new Random();
              if (sum.containsAll(output)) {
                output=sum;
              }
 else               if (!output.containsAll(sum) && (foundRecipies < 1 || rand.nextInt(foundRecipies) == 0)) {
                output=sum;
                foundRecipies+=1;
              }
            }
          }
        }
      }
    }
    if (!output.isEmpty()) {
      return new DecomposerRecipe(input,output.toArray(new Chemical[output.size()]));
    }
  }
  return null;
}","public DecomposerRecipe getRecipe(ItemStack input,int level){
  for (  DecomposerRecipe recipe : DecomposerRecipe.recipes) {
    if (Util.stacksAreSameKind(input,recipe.getInput()))     return recipe;
  }
  if (level < 5) {
    ArrayList<Chemical> output=new ArrayList<Chemical>();
    int foundRecipies=0;
    for (    Object recipe : CraftingManager.getInstance().getRecipeList()) {
      if (recipe instanceof IRecipe) {
        if (((IRecipe)recipe).getRecipeOutput() != null && ((IRecipe)recipe).getRecipeOutput().isItemEqual(input)) {
          ItemStack[] components=null;
          if (recipe instanceof ShapelessOreRecipe && ((ShapelessOreRecipe)recipe).getInput().size() > 0) {
            ArrayList<ItemStack> inputs=new ArrayList<ItemStack>();
            for (            Object o : ((ShapelessOreRecipe)recipe).getInput()) {
              if (o instanceof ItemStack) {
                inputs.add((ItemStack)o);
              }
            }
            components=inputs.toArray(new ItemStack[inputs.size()]);
          }
          if (recipe instanceof ShapedOreRecipe) {
            ArrayList<ItemStack> inputs=new ArrayList<ItemStack>();
            for (            Object o : ((ShapedOreRecipe)recipe).getInput()) {
              if (o instanceof ItemStack) {
                inputs.add((ItemStack)o);
              }
 else               if (o instanceof String) {
                inputs.add(OreDictionary.getOres((String)o).get(0));
              }
 else               if (o instanceof ArrayList && !((ArrayList)o).isEmpty()) {
                inputs.add((ItemStack)((ArrayList)o).get(0));
              }
            }
            components=inputs.toArray(new ItemStack[inputs.size()]);
          }
          if (recipe instanceof ShapelessRecipes && ((ShapelessRecipes)recipe).recipeItems.toArray() instanceof ItemStack[]) {
            components=(ItemStack[])((ShapelessRecipes)recipe).recipeItems.toArray();
          }
          if (recipe instanceof ShapedRecipes && ((ShapedRecipes)recipe).recipeItems instanceof ItemStack[]) {
            components=((ShapedRecipes)recipe).recipeItems;
          }
          if (components != null) {
            ArrayList<Chemical> sum=new ArrayList<Chemical>();
            for (            ItemStack item : components) {
              if (item != null) {
                DecomposerRecipe decompRecipe=this.getRecipe(item,level + 1);
                if (decompRecipe != null) {
                  sum.addAll(decompRecipe.getPartialOutputRaw(((IRecipe)recipe).getRecipeOutput().stackSize));
                }
              }
            }
            if (!sum.isEmpty()) {
              Random rand=new Random();
              if (sum.containsAll(output)) {
                output=sum;
              }
 else               if (!output.containsAll(sum) && (foundRecipies < 1 || rand.nextInt(foundRecipies) == 0)) {
                output=sum;
                foundRecipies+=1;
              }
            }
          }
        }
      }
    }
    if (!output.isEmpty()) {
      return new DecomposerRecipe(input,output.toArray(new Chemical[output.size()]));
    }
  }
  return null;
}",0.9916666666666668
21871,"public void registerVanillaChemicalRecipes(){
  Molecule moleculeSiliconDioxide=this.molecule(EnumMolecule.siliconDioxide,4);
  Molecule moleculeCellulose=this.molecule(EnumMolecule.cellulose,1);
  Molecule moleculePolyvinylChloride=this.molecule(EnumMolecule.polyvinylChloride);
  Element elementHydrogen=this.element(EnumElement.H,64);
  Element elementHelium=this.element(EnumElement.He,64);
  Element elementCarbon=this.element(EnumElement.C,64);
  ItemStack blockStone=new ItemStack(Block.stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockStone,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.stone,7),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,this.element(EnumElement.O,2),null,null}));
  ItemStack blockGrass=new ItemStack(Block.grass);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockGrass,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)}),new DecomposerRecipe(new Chemical[]{moleculeCellulose})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.grass,16),true,50,new Chemical[]{null,moleculeCellulose,null,null,this.element(EnumElement.O,2),this.element(EnumElement.Si)}));
  ItemStack blockDirt=new ItemStack(Block.dirt);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockDirt,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.dirt,16),true,50,new Chemical[]{null,null,null,null,this.element(EnumElement.O,2),this.element(EnumElement.Si)}));
  ItemStack blockCobblestone=new ItemStack(Block.cobblestone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockCobblestone,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na),this.element(EnumElement.Cl)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.cobblestone,8),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,null,this.element(EnumElement.O,2),null}));
  ItemStack blockOakWoodPlanks=new ItemStack(Block.planks,1,0);
  ItemStack blockSpruceWoodPlanks=new ItemStack(Block.planks,1,1);
  ItemStack blockBirchWoodPlanks=new ItemStack(Block.planks,1,2);
  ItemStack blockJungleWoodPlanks=new ItemStack(Block.planks,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  ItemStack blockOakSapling=new ItemStack(Block.sapling,1,0);
  ItemStack blockSpruceSapling=new ItemStack(Block.sapling,1,1);
  ItemStack blockBirchSapling=new ItemStack(Block.sapling,1,2);
  ItemStack blockJungleSapling=new ItemStack(Block.sapling,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakSapling,true,20,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceSapling,true,20,new Chemical[]{null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchSapling,true,20,new Chemical[]{null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleSapling,true,20,new Chemical[]{null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null,null}));
  ItemStack blockSand=new ItemStack(Block.sand);
  DecomposerRecipe.add(new DecomposerRecipe(blockSand,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSand,true,200,new Chemical[]{moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide}));
  ItemStack blockGravel=new ItemStack(Block.gravel);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGravel,0.35F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGravel,true,30,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.siliconDioxide)}));
  ItemStack oreGold=new ItemStack(Block.oreGold);
  DecomposerRecipe.add(new DecomposerRecipe(oreGold,new Chemical[]{this.element(EnumElement.Au,48)}));
  ItemStack oreIron=new ItemStack(Block.oreIron);
  DecomposerRecipe.add(new DecomposerRecipe(oreIron,new Chemical[]{this.element(EnumElement.Fe,48)}));
  ItemStack oreCoal=new ItemStack(Block.oreCoal);
  DecomposerRecipe.add(new DecomposerRecipe(oreCoal,new Chemical[]{this.element(EnumElement.C,48)}));
  ItemStack blockOakWood=new ItemStack(Block.wood,1,0);
  ItemStack blockSpruceWood=new ItemStack(Block.wood,1,1);
  ItemStack blockBirchWood=new ItemStack(Block.wood,1,2);
  ItemStack blockJungleWood=new ItemStack(Block.wood,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakWood,true,100,new Chemical[]{moleculeCellulose,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceWood,true,100,new Chemical[]{null,null,null,null,moleculeCellulose,null,moleculeCellulose,moleculeCellulose,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchWood,true,100,new Chemical[]{moleculeCellulose,null,moleculeCellulose,null,null,null,moleculeCellulose,null,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleWood,true,100,new Chemical[]{moleculeCellulose,null,null,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null}));
  ItemStack blockGlass=new ItemStack(Block.glass);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlass,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlass,true,500,new Chemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,null,null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  ItemStack blockOreLapis=new ItemStack(Block.oreLapis);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreLapis,new Chemical[]{this.molecule(EnumMolecule.lazurite,6),this.molecule(EnumMolecule.sodalite),this.molecule(EnumMolecule.noselite),this.molecule(EnumMolecule.calcite),this.molecule(EnumMolecule.pyrite)}));
  ItemStack blockCobweb=new ItemStack(Block.web);
  DecomposerRecipe.add(new DecomposerRecipe(blockCobweb,new Chemical[]{this.molecule(EnumMolecule.fibroin)}));
  ItemStack blockTallGrass=new ItemStack(Block.tallGrass,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockTallGrass,0.1F,new Chemical[]{new Molecule(EnumMolecule.afroman,2)}));
  ItemStack blockSandStone=new ItemStack(Block.sandStone,1,0);
  ItemStack blockChiseledSandStone=new ItemStack(Block.sandStone,1,1);
  ItemStack blockSmoothSandStone=new ItemStack(Block.sandStone,1,2);
  DecomposerRecipe.add(new DecomposerRecipe(blockSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockChiseledSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockSmoothSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSandStone,true,20,new Chemical[]{null,null,null,null,this.molecule(EnumMolecule.siliconDioxide,16),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockChiseledSandStone,true,20,new Chemical[]{null,null,null,null,null,null,null,this.molecule(EnumMolecule.siliconDioxide,16),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSmoothSandStone,true,20,new Chemical[]{null,this.molecule(EnumMolecule.siliconDioxide,16),null,null,null,null,null,null,null}));
  ItemStack blockWool=new ItemStack(Block.cloth,1,0);
  ItemStack blockOrangeWool=new ItemStack(Block.cloth,1,1);
  ItemStack blockMagentaWool=new ItemStack(Block.cloth,1,2);
  ItemStack blockLightBlueWool=new ItemStack(Block.cloth,1,3);
  ItemStack blockYellowWool=new ItemStack(Block.cloth,1,4);
  ItemStack blockLimeWool=new ItemStack(Block.cloth,1,5);
  ItemStack blockPinkWool=new ItemStack(Block.cloth,1,6);
  ItemStack blockGrayWool=new ItemStack(Block.cloth,1,7);
  ItemStack blockLightGrayWool=new ItemStack(Block.cloth,1,8);
  ItemStack blockCyanWool=new ItemStack(Block.cloth,1,9);
  ItemStack blockPurpleWool=new ItemStack(Block.cloth,1,10);
  ItemStack blockBlueWool=new ItemStack(Block.cloth,1,11);
  ItemStack blockBrownWool=new ItemStack(Block.cloth,1,12);
  ItemStack blockGreenWool=new ItemStack(Block.cloth,1,13);
  ItemStack blockRedWool=new ItemStack(Block.cloth,1,14);
  ItemStack blockBlackWool=new ItemStack(Block.cloth,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOrangeWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMagentaWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightBlueWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLimeWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPinkWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGrayWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightGrayWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCyanWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPurpleWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlueWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBrownWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGreenWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlackWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightBlueWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightGrayWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  ItemStack blockPlantYellow=new ItemStack(Block.plantYellow);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPlantYellow,0.3F,new Chemical[]{new Molecule(EnumMolecule.shikimicAcid,2)}));
  ItemStack blockMushroomBrown=new ItemStack(Block.mushroomBrown);
  ItemStack blockMushroomRed=new ItemStack(Block.mushroomRed);
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomBrown,new Chemical[]{this.molecule(EnumMolecule.psilocybin),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomRed,new Chemical[]{this.molecule(EnumMolecule.pantherine),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockGold),new Chemical[]{this.element(EnumElement.Au,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockIron),new Chemical[]{this.element(EnumElement.Fe,144)}));
  ItemStack blockTnt=new ItemStack(Block.tnt);
  DecomposerRecipe.add(new DecomposerRecipe(blockTnt,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockTnt,false,1000,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  ItemStack blockObsidian=new ItemStack(Block.obsidian);
  DecomposerRecipe.add(new DecomposerRecipe(blockObsidian,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16),this.molecule(EnumMolecule.magnesiumOxide,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockObsidian,true,1000,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),null,this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2)}));
  ItemStack blockOreDiamond=new ItemStack(Block.oreDiamond);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,6)}));
  ItemStack blockDiamond=new ItemStack(Block.blockDiamond);
  DecomposerRecipe.add(new DecomposerRecipe(blockDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,36)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDiamond,true,120000,new Chemical[]{this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4)}));
  ItemStack blockPressurePlatePlanks=new ItemStack(Block.pressurePlatePlanks);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPressurePlatePlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,4)}));
  ItemStack blockOreRedstone=new ItemStack(Block.oreRedstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOreRedstone,0.8F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide,9),this.element(EnumElement.Cu,9)}));
  ItemStack blockCactus=new ItemStack(Block.cactus);
  DecomposerRecipe.add(new DecomposerRecipe(blockCactus,new Chemical[]{this.molecule(EnumMolecule.mescaline),this.molecule(EnumMolecule.water,20)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCactus,true,200,new Chemical[]{this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.mescaline),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5)}));
  ItemStack blockPumpkin=new ItemStack(Block.pumpkin);
  DecomposerRecipe.add(new DecomposerRecipe(blockPumpkin,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPumpkin,false,400,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  ItemStack blockNetherrack=new ItemStack(Block.netherrack);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockNetherrack,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.Ni),this.element(EnumElement.Tc)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,3),this.element(EnumElement.Ti),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,1),this.element(EnumElement.W,4),this.element(EnumElement.Cr,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,10),this.element(EnumElement.W,1),this.element(EnumElement.Zn,8),this.element(EnumElement.Be,4)})}));
  ItemStack itemPotion=new ItemStack(Item.potion,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemPotion,new Chemical[]{this.molecule(EnumMolecule.water,8)}));
  ItemStack blockSlowSand=new ItemStack(Block.slowSand);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockSlowSand,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,3),this.element(EnumElement.Be,1),this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,1),this.element(EnumElement.Si,5),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,6),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es,1),this.element(EnumElement.O,2)})}));
  ItemStack blockGlowStone=new ItemStack(Block.glowStone);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlowStone,new Chemical[]{this.element(EnumElement.P,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlowStone,true,500,new Chemical[]{this.element(EnumElement.P),null,this.element(EnumElement.P),this.element(EnumElement.P),null,this.element(EnumElement.P),null,null,null}));
  ItemStack blockThinGlass=new ItemStack(Block.thinGlass);
  DecomposerRecipe.add(new DecomposerRecipe(blockThinGlass,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,1)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockThinGlass,true,50,new Chemical[]{null,null,null,this.molecule(EnumMolecule.siliconDioxide),null,null,null,null,null}));
  ItemStack blockMelon=new ItemStack(Block.melon);
  DecomposerRecipe.add(new DecomposerRecipe(blockMelon,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin),this.molecule(EnumMolecule.asparticAcid),this.molecule(EnumMolecule.water,16)}));
  ItemStack blockMycelium=new ItemStack(Block.mycelium);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMycelium,0.09F,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.mycelium,16),false,300,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  ItemStack blockWhiteStone=new ItemStack(Block.whiteStone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockWhiteStone,0.8F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.H,4),this.element(EnumElement.Li)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pu)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Nd)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.H,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Be,8)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Li,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Rb)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  ItemStack blockOreEmerald=new ItemStack(Block.oreEmerald);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,6),this.element(EnumElement.Cr,6),this.element(EnumElement.V,6)}));
  ItemStack blockEmerald=new ItemStack(Block.blockEmerald);
  SynthesisRecipe.add(new SynthesisRecipe(blockEmerald,true,150000,new Chemical[]{this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.V,9),this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.V,9),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.Cr,18),this.element(EnumElement.V,18)}));
  ItemStack itemAppleRed=new ItemStack(Item.appleRed);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleRed,new Chemical[]{this.molecule(EnumMolecule.malicAcid)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemAppleRed,false,400,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.molecule(EnumMolecule.water,2)}));
  ItemStack itemArrow=new ItemStack(Item.arrow);
  DecomposerRecipe.add(new DecomposerRecipe(itemArrow,new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O,2),this.element(EnumElement.N,6)}));
  ItemStack itemCoal=new ItemStack(Item.coal);
  DecomposerRecipe.add(new DecomposerRecipe(itemCoal,new Chemical[]{this.element(EnumElement.C,16)}));
  ItemStack itemChar=new ItemStack(Item.coal,1,1);
  DecomposerRecipe.add(new DecomposerRecipe(itemChar,new Chemical[]{this.element(EnumElement.C,30)}));
  ItemStack itemDiamond=new ItemStack(Item.diamond);
  DecomposerRecipe.add(new DecomposerRecipe(itemDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(MinechemItems.polytool),true,'\uea60',new Chemical[]{null,this.molecule(EnumMolecule.fullrene,64),null,this.molecule(EnumMolecule.fullrene,64),null,this.molecule(EnumMolecule.fullrene,64),null,this.molecule(EnumMolecule.fullrene,64),null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDiamond,true,'\uea60',new Chemical[]{null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null}));
  ItemStack itemIngotIron=new ItemStack(Item.ingotIron);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotIron,new Chemical[]{this.element(EnumElement.Fe,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotIron,false,1000,new Chemical[]{this.element(EnumElement.Fe,16)}));
  ItemStack itemIngotGold=new ItemStack(Item.ingotGold);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotGold,new Chemical[]{this.element(EnumElement.Au,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotGold,false,1000,new Chemical[]{this.element(EnumElement.Au,16)}));
  ItemStack itemStick=new ItemStack(Item.stick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemStick,0.3F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  ItemStack itemSilk=new ItemStack(Item.silk);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSilk,0.45F,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSilk,true,150,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  ItemStack itemFeather=new ItemStack(Item.feather);
  DecomposerRecipe.add(new DecomposerRecipe(itemFeather,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.N,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFeather,true,800,new Chemical[]{this.element(EnumElement.N),this.molecule(EnumMolecule.water,2),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,1),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,5),this.element(EnumElement.N)}));
  ItemStack itemGunpowder=new ItemStack(Item.gunpowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemGunpowder,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.S,2),this.element(EnumElement.C)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGunpowder,true,600,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.C),null,this.element(EnumElement.S,2),null,null,null,null,null}));
  ItemStack itemBread=new ItemStack(Item.bread);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBread,0.1F,new Chemical[]{this.molecule(EnumMolecule.starch),this.molecule(EnumMolecule.sucrose)}));
  ItemStack itemFlint=new ItemStack(Item.flint);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemFlint,0.5F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFlint,true,100,new Chemical[]{null,moleculeSiliconDioxide,null,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,null,null,null}));
  ItemStack itemAppleGold=new ItemStack(Item.appleGold,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleGold,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.element(EnumElement.Au,64)}));
  ItemStack itemDoorWood=new ItemStack(Item.doorWood);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDoorWood,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,12)}));
  ItemStack itemBucketWater=new ItemStack(Item.bucketWater);
  DecomposerRecipe.add(new DecomposerRecipe(itemBucketWater,new Chemical[]{this.molecule(EnumMolecule.water,16),this.element(EnumElement.Fe,48)}));
  ItemStack itemRedstone=new ItemStack(Item.redstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRedstone,0.42F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide),this.element(EnumElement.Cu)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRedstone,true,100,new Chemical[]{null,null,this.molecule(EnumMolecule.iron3oxide),null,this.element(EnumElement.Cu),null,null,null,null}));
  ItemStack itemSnowball=new ItemStack(Item.snowball);
  DecomposerRecipe.add(new DecomposerRecipe(itemSnowball,new Chemical[]{this.molecule(EnumMolecule.water)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.snowball,5),true,20,new Chemical[]{this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water)}));
  ItemStack itemLeather=new ItemStack(Item.leather);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemLeather,0.5F,new Chemical[]{this.molecule(EnumMolecule.arginine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.keratin)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.leather,5),true,700,new Chemical[]{this.molecule(EnumMolecule.arginine),null,null,null,this.molecule(EnumMolecule.keratin),null,null,null,this.molecule(EnumMolecule.glycine)}));
  ItemStack itemBrick=new ItemStack(Item.brick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBrick,0.5F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.brick,8),true,400,new Chemical[]{this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null,this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null}));
  ItemStack itemClay=new ItemStack(Item.clay);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemClay,0.3F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.clay,12),false,100,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  ItemStack itemReed=new ItemStack(Item.reed);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemReed,0.65F,new Chemical[]{this.molecule(EnumMolecule.sucrose),this.element(EnumElement.H,2),this.element(EnumElement.O)}));
  ItemStack itemPaper=new ItemStack(Item.paper);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPaper,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.paper,16),true,150,new Chemical[]{null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null}));
  ItemStack itemSlimeBall=new ItemStack(Item.slimeBall);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemSlimeBall,0.9F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.polycyanoacrylate)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Hg)}),new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.water,10)})}));
  ItemStack itemGlowstone=new ItemStack(Item.glowstone);
  DecomposerRecipe.add(new DecomposerRecipe(itemGlowstone,new Chemical[]{this.element(EnumElement.P)}));
  ItemStack itemDyePowderBlack=new ItemStack(Item.dyePowder,1,0);
  ItemStack itemDyePowderRed=new ItemStack(Item.dyePowder,1,1);
  ItemStack itemDyePowderGreen=new ItemStack(Item.dyePowder,1,2);
  ItemStack itemDyePowderBrown=new ItemStack(Item.dyePowder,1,3);
  ItemStack itemDyePowderBlue=new ItemStack(Item.dyePowder,1,4);
  ItemStack itemDyePowderPurple=new ItemStack(Item.dyePowder,1,5);
  ItemStack itemDyePowderCyan=new ItemStack(Item.dyePowder,1,6);
  ItemStack itemDyePowderLightGray=new ItemStack(Item.dyePowder,1,7);
  ItemStack itemDyePowderGray=new ItemStack(Item.dyePowder,1,8);
  ItemStack itemDyePowderPink=new ItemStack(Item.dyePowder,1,9);
  ItemStack itemDyePowderLime=new ItemStack(Item.dyePowder,1,10);
  ItemStack itemDyePowderYellow=new ItemStack(Item.dyePowder,1,11);
  ItemStack itemDyePowderLightBlue=new ItemStack(Item.dyePowder,1,12);
  ItemStack itemDyePowderMagenta=new ItemStack(Item.dyePowder,1,13);
  ItemStack itemDyePowderOrange=new ItemStack(Item.dyePowder,1,14);
  ItemStack itemDyePowderWhite=new ItemStack(Item.dyePowder,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlack,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderRed,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGreen,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDyePowderBrown,0.4F,new Chemical[]{this.molecule(EnumMolecule.theobromine),this.molecule(EnumMolecule.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlue,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPurple,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderCyan,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightGray,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGray,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPink,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLime,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderYellow,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightBlue,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderMagenta,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderOrange,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderWhite,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlack,false,50,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderRed,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGreen,false,50,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBrown,false,400,new Chemical[]{this.molecule(EnumMolecule.theobromine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlue,false,50,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPurple,false,50,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderCyan,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightGray,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGray,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPink,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLime,false,50,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderYellow,false,50,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightBlue,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderMagenta,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderOrange,false,50,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderWhite,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  ItemStack itemBone=new ItemStack(Item.bone);
  DecomposerRecipe.add(new DecomposerRecipe(itemBone,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBone,false,100,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  ItemStack itemSugar=new ItemStack(Item.sugar);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSugar,0.75F,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSugar,false,400,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  ItemStack itemMelon=new ItemStack(Item.melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemMelon,new Chemical[]{this.molecule(EnumMolecule.water)}));
  ItemStack itemChickenCooked=new ItemStack(Item.chickenCooked);
  DecomposerRecipe.add(new DecomposerRecipe(itemChickenCooked,new Chemical[]{this.element(EnumElement.K),this.element(EnumElement.Na),this.element(EnumElement.C,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemChickenCooked,true,5000,new Chemical[]{this.element(EnumElement.K,16),this.element(EnumElement.Na,16),this.element(EnumElement.C,16)}));
  ItemStack itemRottenFlesh=new ItemStack(Item.rottenFlesh);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRottenFlesh,0.05F,new Chemical[]{new Molecule(EnumMolecule.nod,1)}));
  ItemStack itemEnderPearl=new ItemStack(Item.enderPearl);
  DecomposerRecipe.add(new DecomposerRecipe(itemEnderPearl,new Chemical[]{this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEnderPearl,true,5000,new Chemical[]{this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate)}));
  ItemStack itemBlazeRod=new ItemStack(Item.blazeRod);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazeRod,new Chemical[]{this.element(EnumElement.Pu,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBlazeRod,true,15000,new Chemical[]{this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null}));
  ItemStack itemGhastTear=new ItemStack(Item.ghastTear);
  DecomposerRecipe.add(new DecomposerRecipe(itemGhastTear,new Chemical[]{this.element(EnumElement.Yb,4),this.element(EnumElement.No,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGhastTear,true,15000,new Chemical[]{this.element(EnumElement.Yb),this.element(EnumElement.Yb),this.element(EnumElement.No),null,this.element(EnumElement.Yb,2),this.element(EnumElement.No,2),null,this.element(EnumElement.No),null}));
  ItemStack itemNetherStalkSeeds=new ItemStack(Item.netherStalkSeeds);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemNetherStalkSeeds,0.5F,new Chemical[]{this.molecule(EnumMolecule.coke)}));
  ItemStack itemSpiderEye=new ItemStack(Item.spiderEye);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSpiderEye,0.2F,new Chemical[]{this.molecule(EnumMolecule.ttx)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSpiderEye,true,2000,new Chemical[]{this.element(EnumElement.C),null,null,null,this.molecule(EnumMolecule.ttx),null,null,null,this.element(EnumElement.C)}));
  ItemStack itemFermentedSpiderEye=new ItemStack(Item.fermentedSpiderEye);
  DecomposerRecipe.add(new DecomposerRecipe(itemFermentedSpiderEye,new Chemical[]{this.element(EnumElement.Po),this.molecule(EnumMolecule.ethanol)}));
  ItemStack itemBlazePowder=new ItemStack(Item.blazePowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazePowder,new Chemical[]{this.element(EnumElement.Pu)}));
  ItemStack itemMagmaCream=new ItemStack(Item.magmaCream);
  DecomposerRecipe.add(new DecomposerRecipe(itemMagmaCream,new Chemical[]{this.element(EnumElement.Hg),this.element(EnumElement.Pu),this.molecule(EnumMolecule.polycyanoacrylate,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemMagmaCream,true,5000,new Chemical[]{null,this.element(EnumElement.Pu),null,this.molecule(EnumMolecule.polycyanoacrylate),this.element(EnumElement.Hg),this.molecule(EnumMolecule.polycyanoacrylate),null,this.molecule(EnumMolecule.polycyanoacrylate),null}));
  ItemStack itemSpeckledMelon=new ItemStack(Item.speckledMelon);
  DecomposerRecipe.add(new DecomposerRecipe(itemSpeckledMelon,new Chemical[]{this.molecule(EnumMolecule.water,4),this.molecule(EnumMolecule.whitePigment),this.element(EnumElement.Au,1)}));
  ItemStack itemEmerald=new ItemStack(Item.emerald);
  DecomposerRecipe.add(new DecomposerRecipe(itemEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.Cr,2),this.element(EnumElement.V,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEmerald,true,80000,new Chemical[]{null,this.element(EnumElement.Cr),null,this.element(EnumElement.V),this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.V),null,this.element(EnumElement.Cr),null}));
  ItemStack itemCarrot=new ItemStack(Item.carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemCarrot,new Chemical[]{this.molecule(EnumMolecule.ret)}));
  ItemStack itemPotato=new ItemStack(Item.potato);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPotato,0.4F,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.K,2),this.molecule(EnumMolecule.cellulose)}));
  ItemStack itemGoldenCarrot=new ItemStack(Item.goldenCarrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemGoldenCarrot,new Chemical[]{this.molecule(EnumMolecule.ret),this.element(EnumElement.Au,4)}));
  ItemStack itemNetherStar=new ItemStack(Item.netherStar);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherStar,new Chemical[]{this.element(EnumElement.Cn,16),elementHydrogen,elementHydrogen,elementHydrogen,elementHelium,elementHelium,elementHelium,elementCarbon,elementCarbon}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherStar,true,500000,new Chemical[]{elementHelium,elementHelium,elementHelium,elementCarbon,this.element(EnumElement.Cn,16),elementHelium,elementHydrogen,elementHydrogen,elementHydrogen}));
  ItemStack itemNetherQuartz=new ItemStack(Item.netherQuartz);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherQuartz,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.galliumarsenide,1)}));
  ItemStack itemRecord13=new ItemStack(Item.record13);
  ItemStack itemRecordCat=new ItemStack(Item.recordCat);
  ItemStack itemRecordFar=new ItemStack(Item.recordFar);
  ItemStack itemRecordMall=new ItemStack(Item.recordMall);
  ItemStack itemRecordMellohi=new ItemStack(Item.recordMellohi);
  ItemStack itemRecordStal=new ItemStack(Item.recordStal);
  ItemStack itemRecordStrad=new ItemStack(Item.recordStrad);
  ItemStack itemRecordWard=new ItemStack(Item.recordWard);
  ItemStack itemRecordChirp=new ItemStack(Item.recordChirp);
  DecomposerRecipe.add(new DecomposerRecipe(itemRecord13,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordCat,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordFar,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMall,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMellohi,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStal,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStrad,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordWard,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordChirp,new Chemical[]{moleculePolyvinylChloride}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecord13,true,1000,new Chemical[]{moleculePolyvinylChloride,null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordCat,true,1000,new Chemical[]{null,moleculePolyvinylChloride,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordFar,true,1000,new Chemical[]{null,null,moleculePolyvinylChloride,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMall,true,1000,new Chemical[]{null,null,null,moleculePolyvinylChloride,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMellohi,true,1000,new Chemical[]{null,null,null,null,moleculePolyvinylChloride,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStal,true,1000,new Chemical[]{null,null,null,null,null,moleculePolyvinylChloride,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStrad,true,1000,new Chemical[]{null,null,null,null,null,null,moleculePolyvinylChloride,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordWard,true,1000,new Chemical[]{null,null,null,null,null,null,null,moleculePolyvinylChloride,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordChirp,true,1000,new Chemical[]{null,null,null,null,null,null,null,null,moleculePolyvinylChloride}));
}","public void registerVanillaChemicalRecipes(){
  Molecule moleculeSiliconDioxide=this.molecule(EnumMolecule.siliconDioxide,4);
  Molecule moleculeCellulose=this.molecule(EnumMolecule.cellulose,1);
  Molecule moleculePolyvinylChloride=this.molecule(EnumMolecule.polyvinylChloride);
  Element elementHydrogen=this.element(EnumElement.H,64);
  Element elementHelium=this.element(EnumElement.He,64);
  Element elementCarbon=this.element(EnumElement.C,64);
  ItemStack blockStone=new ItemStack(Block.stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockStone,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.stone,7),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,this.element(EnumElement.O,2),null,null}));
  ItemStack blockGrass=new ItemStack(Block.grass);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockGrass,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)}),new DecomposerRecipe(new Chemical[]{moleculeCellulose})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.grass,16),true,50,new Chemical[]{null,moleculeCellulose,null,null,this.element(EnumElement.O,2),this.element(EnumElement.Si)}));
  ItemStack blockDirt=new ItemStack(Block.dirt);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockDirt,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.dirt,16),true,50,new Chemical[]{null,null,null,null,this.element(EnumElement.O,2),this.element(EnumElement.Si)}));
  ItemStack blockCobblestone=new ItemStack(Block.cobblestone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockCobblestone,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na),this.element(EnumElement.Cl)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.cobblestone,8),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,null,this.element(EnumElement.O,2),null}));
  ItemStack blockOakWoodPlanks=new ItemStack(Block.planks,1,0);
  ItemStack blockSpruceWoodPlanks=new ItemStack(Block.planks,1,1);
  ItemStack blockBirchWoodPlanks=new ItemStack(Block.planks,1,2);
  ItemStack blockJungleWoodPlanks=new ItemStack(Block.planks,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  ItemStack blockOakSapling=new ItemStack(Block.sapling,1,0);
  ItemStack blockSpruceSapling=new ItemStack(Block.sapling,1,1);
  ItemStack blockBirchSapling=new ItemStack(Block.sapling,1,2);
  ItemStack blockJungleSapling=new ItemStack(Block.sapling,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakSapling,true,20,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceSapling,true,20,new Chemical[]{null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchSapling,true,20,new Chemical[]{null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleSapling,true,20,new Chemical[]{null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null,null}));
  ItemStack blockSand=new ItemStack(Block.sand);
  DecomposerRecipe.add(new DecomposerRecipe(blockSand,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSand,true,200,new Chemical[]{moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide}));
  ItemStack blockGravel=new ItemStack(Block.gravel);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGravel,0.35F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGravel,true,30,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.siliconDioxide)}));
  ItemStack oreGold=new ItemStack(Block.oreGold);
  DecomposerRecipe.add(new DecomposerRecipe(oreGold,new Chemical[]{this.element(EnumElement.Au,48)}));
  ItemStack oreIron=new ItemStack(Block.oreIron);
  DecomposerRecipe.add(new DecomposerRecipe(oreIron,new Chemical[]{this.element(EnumElement.Fe,48)}));
  ItemStack oreCoal=new ItemStack(Block.oreCoal);
  DecomposerRecipe.add(new DecomposerRecipe(oreCoal,new Chemical[]{this.element(EnumElement.C,48)}));
  ItemStack blockOakWood=new ItemStack(Block.wood,1,0);
  ItemStack blockSpruceWood=new ItemStack(Block.wood,1,1);
  ItemStack blockBirchWood=new ItemStack(Block.wood,1,2);
  ItemStack blockJungleWood=new ItemStack(Block.wood,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakWood,true,100,new Chemical[]{moleculeCellulose,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceWood,true,100,new Chemical[]{null,null,null,null,moleculeCellulose,null,moleculeCellulose,moleculeCellulose,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchWood,true,100,new Chemical[]{moleculeCellulose,null,moleculeCellulose,null,null,null,moleculeCellulose,null,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleWood,true,100,new Chemical[]{moleculeCellulose,null,null,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null}));
  ItemStack blockGlass=new ItemStack(Block.glass);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlass,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlass,true,500,new Chemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,null,null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  ItemStack blockOreLapis=new ItemStack(Block.oreLapis);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreLapis,new Chemical[]{this.molecule(EnumMolecule.lazurite,6),this.molecule(EnumMolecule.sodalite),this.molecule(EnumMolecule.noselite),this.molecule(EnumMolecule.calcite),this.molecule(EnumMolecule.pyrite)}));
  ItemStack blockCobweb=new ItemStack(Block.web);
  DecomposerRecipe.add(new DecomposerRecipe(blockCobweb,new Chemical[]{this.molecule(EnumMolecule.fibroin)}));
  ItemStack blockTallGrass=new ItemStack(Block.tallGrass,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockTallGrass,0.1F,new Chemical[]{new Molecule(EnumMolecule.afroman,2)}));
  ItemStack blockSandStone=new ItemStack(Block.sandStone,1,0);
  ItemStack blockChiseledSandStone=new ItemStack(Block.sandStone,1,1);
  ItemStack blockSmoothSandStone=new ItemStack(Block.sandStone,1,2);
  DecomposerRecipe.add(new DecomposerRecipe(blockSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockChiseledSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockSmoothSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSandStone,true,20,new Chemical[]{null,null,null,null,this.molecule(EnumMolecule.siliconDioxide,16),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockChiseledSandStone,true,20,new Chemical[]{null,null,null,null,null,null,null,this.molecule(EnumMolecule.siliconDioxide,16),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSmoothSandStone,true,20,new Chemical[]{null,this.molecule(EnumMolecule.siliconDioxide,16),null,null,null,null,null,null,null}));
  ItemStack blockWool=new ItemStack(Block.cloth,1,0);
  ItemStack blockOrangeWool=new ItemStack(Block.cloth,1,1);
  ItemStack blockMagentaWool=new ItemStack(Block.cloth,1,2);
  ItemStack blockLightBlueWool=new ItemStack(Block.cloth,1,3);
  ItemStack blockYellowWool=new ItemStack(Block.cloth,1,4);
  ItemStack blockLimeWool=new ItemStack(Block.cloth,1,5);
  ItemStack blockPinkWool=new ItemStack(Block.cloth,1,6);
  ItemStack blockGrayWool=new ItemStack(Block.cloth,1,7);
  ItemStack blockLightGrayWool=new ItemStack(Block.cloth,1,8);
  ItemStack blockCyanWool=new ItemStack(Block.cloth,1,9);
  ItemStack blockPurpleWool=new ItemStack(Block.cloth,1,10);
  ItemStack blockBlueWool=new ItemStack(Block.cloth,1,11);
  ItemStack blockBrownWool=new ItemStack(Block.cloth,1,12);
  ItemStack blockGreenWool=new ItemStack(Block.cloth,1,13);
  ItemStack blockRedWool=new ItemStack(Block.cloth,1,14);
  ItemStack blockBlackWool=new ItemStack(Block.cloth,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOrangeWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMagentaWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightBlueWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLimeWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPinkWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGrayWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightGrayWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCyanWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPurpleWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlueWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBrownWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGreenWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlackWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightBlueWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightGrayWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  ItemStack blockPlantYellow=new ItemStack(Block.plantYellow);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPlantYellow,0.3F,new Chemical[]{new Molecule(EnumMolecule.shikimicAcid,2)}));
  ItemStack blockMushroomBrown=new ItemStack(Block.mushroomBrown);
  ItemStack blockMushroomRed=new ItemStack(Block.mushroomRed);
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomBrown,new Chemical[]{this.molecule(EnumMolecule.psilocybin),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomRed,new Chemical[]{this.molecule(EnumMolecule.pantherine),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockGold),new Chemical[]{this.element(EnumElement.Au,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockIron),new Chemical[]{this.element(EnumElement.Fe,144)}));
  ItemStack blockTnt=new ItemStack(Block.tnt);
  DecomposerRecipe.add(new DecomposerRecipe(blockTnt,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockTnt,false,1000,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  ItemStack blockObsidian=new ItemStack(Block.obsidian);
  DecomposerRecipe.add(new DecomposerRecipe(blockObsidian,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16),this.molecule(EnumMolecule.magnesiumOxide,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockObsidian,true,1000,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),null,this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2)}));
  ItemStack blockOreDiamond=new ItemStack(Block.oreDiamond);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,6)}));
  ItemStack blockDiamond=new ItemStack(Block.blockDiamond);
  DecomposerRecipe.add(new DecomposerRecipe(blockDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,36)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDiamond,true,120000,new Chemical[]{this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4)}));
  ItemStack blockPressurePlatePlanks=new ItemStack(Block.pressurePlatePlanks);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPressurePlatePlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,4)}));
  ItemStack blockOreRedstone=new ItemStack(Block.oreRedstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOreRedstone,0.8F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide,9),this.element(EnumElement.Cu,9)}));
  ItemStack blockCactus=new ItemStack(Block.cactus);
  DecomposerRecipe.add(new DecomposerRecipe(blockCactus,new Chemical[]{this.molecule(EnumMolecule.mescaline),this.molecule(EnumMolecule.water,20)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCactus,true,200,new Chemical[]{this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.mescaline),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5)}));
  ItemStack blockPumpkin=new ItemStack(Block.pumpkin);
  DecomposerRecipe.add(new DecomposerRecipe(blockPumpkin,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPumpkin,false,400,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  ItemStack blockNetherrack=new ItemStack(Block.netherrack);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockNetherrack,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.Ni),this.element(EnumElement.Tc)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,3),this.element(EnumElement.Ti),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,1),this.element(EnumElement.W,4),this.element(EnumElement.Cr,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,10),this.element(EnumElement.W,1),this.element(EnumElement.Zn,8),this.element(EnumElement.Be,4)})}));
  ItemStack itemPotion=new ItemStack(Item.potion,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemPotion,new Chemical[]{this.molecule(EnumMolecule.water,8)}));
  ItemStack blockSlowSand=new ItemStack(Block.slowSand);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockSlowSand,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,3),this.element(EnumElement.Be,1),this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,1),this.element(EnumElement.Si,5),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,6),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es,1),this.element(EnumElement.O,2)})}));
  ItemStack blockGlowStone=new ItemStack(Block.glowStone);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlowStone,new Chemical[]{this.element(EnumElement.P,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlowStone,true,500,new Chemical[]{this.element(EnumElement.P),null,this.element(EnumElement.P),this.element(EnumElement.P),null,this.element(EnumElement.P),null,null,null}));
  ItemStack blockThinGlass=new ItemStack(Block.thinGlass);
  DecomposerRecipe.add(new DecomposerRecipe(blockThinGlass,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,1)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockThinGlass,true,50,new Chemical[]{null,null,null,this.molecule(EnumMolecule.siliconDioxide),null,null,null,null,null}));
  ItemStack blockMelon=new ItemStack(Block.melon);
  DecomposerRecipe.add(new DecomposerRecipe(blockMelon,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin),this.molecule(EnumMolecule.asparticAcid),this.molecule(EnumMolecule.water,16)}));
  ItemStack blockMycelium=new ItemStack(Block.mycelium);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMycelium,0.09F,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.mycelium,16),false,300,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  ItemStack blockWhiteStone=new ItemStack(Block.whiteStone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockWhiteStone,0.8F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.H,4),this.element(EnumElement.Li)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pu)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Nd)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.H,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Be,8)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Li,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Rb)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  ItemStack blockOreEmerald=new ItemStack(Block.oreEmerald);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,6),this.element(EnumElement.Cr,6),this.element(EnumElement.V,6)}));
  ItemStack blockEmerald=new ItemStack(Block.blockEmerald);
  SynthesisRecipe.add(new SynthesisRecipe(blockEmerald,true,150000,new Chemical[]{this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.V,9),this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.V,9),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.Cr,18),this.element(EnumElement.V,18)}));
  ItemStack itemAppleRed=new ItemStack(Item.appleRed);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleRed,new Chemical[]{this.molecule(EnumMolecule.malicAcid)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemAppleRed,false,400,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.molecule(EnumMolecule.water,2)}));
  ItemStack itemArrow=new ItemStack(Item.arrow);
  DecomposerRecipe.add(new DecomposerRecipe(itemArrow,new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O,2),this.element(EnumElement.N,6)}));
  ItemStack itemCoal=new ItemStack(Item.coal);
  DecomposerRecipe.add(new DecomposerRecipe(itemCoal,new Chemical[]{this.element(EnumElement.C,16)}));
  ItemStack itemChar=new ItemStack(Item.coal,1,1);
  DecomposerRecipe.add(new DecomposerRecipe(itemChar,new Chemical[]{this.element(EnumElement.C,16)}));
  ItemStack itemDiamond=new ItemStack(Item.diamond);
  DecomposerRecipe.add(new DecomposerRecipe(itemDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(MinechemItems.polytool),true,'\uea60',new Chemical[]{null,this.molecule(EnumMolecule.fullrene,64),null,this.molecule(EnumMolecule.fullrene,64),null,this.molecule(EnumMolecule.fullrene,64),null,this.molecule(EnumMolecule.fullrene,64),null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDiamond,true,'\uea60',new Chemical[]{null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null}));
  ItemStack itemIngotIron=new ItemStack(Item.ingotIron);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotIron,new Chemical[]{this.element(EnumElement.Fe,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotIron,false,1000,new Chemical[]{this.element(EnumElement.Fe,16)}));
  ItemStack itemIngotGold=new ItemStack(Item.ingotGold);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotGold,new Chemical[]{this.element(EnumElement.Au,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotGold,false,1000,new Chemical[]{this.element(EnumElement.Au,16)}));
  ItemStack itemStick=new ItemStack(Item.stick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemStick,0.3F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  ItemStack itemSilk=new ItemStack(Item.silk);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSilk,0.45F,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSilk,true,150,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  ItemStack itemFeather=new ItemStack(Item.feather);
  DecomposerRecipe.add(new DecomposerRecipe(itemFeather,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.N,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFeather,true,800,new Chemical[]{this.element(EnumElement.N),this.molecule(EnumMolecule.water,2),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,1),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,5),this.element(EnumElement.N)}));
  ItemStack itemGunpowder=new ItemStack(Item.gunpowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemGunpowder,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.S,2),this.element(EnumElement.C)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGunpowder,true,600,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.C),null,this.element(EnumElement.S,2),null,null,null,null,null}));
  ItemStack itemBread=new ItemStack(Item.bread);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBread,0.1F,new Chemical[]{this.molecule(EnumMolecule.starch),this.molecule(EnumMolecule.sucrose)}));
  ItemStack itemFlint=new ItemStack(Item.flint);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemFlint,0.5F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFlint,true,100,new Chemical[]{null,moleculeSiliconDioxide,null,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,null,null,null}));
  ItemStack itemAppleGold=new ItemStack(Item.appleGold,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleGold,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.element(EnumElement.Au,64)}));
  ItemStack itemDoorWood=new ItemStack(Item.doorWood);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDoorWood,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,12)}));
  ItemStack itemBucketWater=new ItemStack(Item.bucketWater);
  DecomposerRecipe.add(new DecomposerRecipe(itemBucketWater,new Chemical[]{this.molecule(EnumMolecule.water,16),this.element(EnumElement.Fe,48)}));
  ItemStack itemRedstone=new ItemStack(Item.redstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRedstone,0.42F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide),this.element(EnumElement.Cu)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRedstone,true,100,new Chemical[]{null,null,this.molecule(EnumMolecule.iron3oxide),null,this.element(EnumElement.Cu),null,null,null,null}));
  ItemStack itemSnowball=new ItemStack(Item.snowball);
  DecomposerRecipe.add(new DecomposerRecipe(itemSnowball,new Chemical[]{this.molecule(EnumMolecule.water)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.snowball,5),true,20,new Chemical[]{this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water)}));
  ItemStack itemLeather=new ItemStack(Item.leather);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemLeather,0.5F,new Chemical[]{this.molecule(EnumMolecule.arginine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.keratin)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.leather,5),true,700,new Chemical[]{this.molecule(EnumMolecule.arginine),null,null,null,this.molecule(EnumMolecule.keratin),null,null,null,this.molecule(EnumMolecule.glycine)}));
  ItemStack itemBrick=new ItemStack(Item.brick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBrick,0.5F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.brick,8),true,400,new Chemical[]{this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null,this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null}));
  ItemStack itemClay=new ItemStack(Item.clay);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemClay,0.3F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.clay,12),false,100,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  ItemStack itemReed=new ItemStack(Item.reed);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemReed,0.65F,new Chemical[]{this.molecule(EnumMolecule.sucrose),this.element(EnumElement.H,2),this.element(EnumElement.O)}));
  ItemStack itemPaper=new ItemStack(Item.paper);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPaper,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.paper,16),true,150,new Chemical[]{null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null}));
  ItemStack itemSlimeBall=new ItemStack(Item.slimeBall);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemSlimeBall,0.9F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.polycyanoacrylate)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Hg)}),new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.water,10)})}));
  ItemStack itemGlowstone=new ItemStack(Item.glowstone);
  DecomposerRecipe.add(new DecomposerRecipe(itemGlowstone,new Chemical[]{this.element(EnumElement.P)}));
  ItemStack itemDyePowderBlack=new ItemStack(Item.dyePowder,1,0);
  ItemStack itemDyePowderRed=new ItemStack(Item.dyePowder,1,1);
  ItemStack itemDyePowderGreen=new ItemStack(Item.dyePowder,1,2);
  ItemStack itemDyePowderBrown=new ItemStack(Item.dyePowder,1,3);
  ItemStack itemDyePowderBlue=new ItemStack(Item.dyePowder,1,4);
  ItemStack itemDyePowderPurple=new ItemStack(Item.dyePowder,1,5);
  ItemStack itemDyePowderCyan=new ItemStack(Item.dyePowder,1,6);
  ItemStack itemDyePowderLightGray=new ItemStack(Item.dyePowder,1,7);
  ItemStack itemDyePowderGray=new ItemStack(Item.dyePowder,1,8);
  ItemStack itemDyePowderPink=new ItemStack(Item.dyePowder,1,9);
  ItemStack itemDyePowderLime=new ItemStack(Item.dyePowder,1,10);
  ItemStack itemDyePowderYellow=new ItemStack(Item.dyePowder,1,11);
  ItemStack itemDyePowderLightBlue=new ItemStack(Item.dyePowder,1,12);
  ItemStack itemDyePowderMagenta=new ItemStack(Item.dyePowder,1,13);
  ItemStack itemDyePowderOrange=new ItemStack(Item.dyePowder,1,14);
  ItemStack itemDyePowderWhite=new ItemStack(Item.dyePowder,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlack,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderRed,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGreen,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDyePowderBrown,0.4F,new Chemical[]{this.molecule(EnumMolecule.theobromine),this.molecule(EnumMolecule.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlue,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPurple,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderCyan,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightGray,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGray,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPink,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLime,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderYellow,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightBlue,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderMagenta,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderOrange,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderWhite,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlack,false,50,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderRed,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGreen,false,50,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBrown,false,400,new Chemical[]{this.molecule(EnumMolecule.theobromine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlue,false,50,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPurple,false,50,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderCyan,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightGray,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGray,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPink,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLime,false,50,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderYellow,false,50,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightBlue,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderMagenta,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderOrange,false,50,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderWhite,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  ItemStack itemBone=new ItemStack(Item.bone);
  DecomposerRecipe.add(new DecomposerRecipe(itemBone,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBone,false,100,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  ItemStack itemSugar=new ItemStack(Item.sugar);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSugar,0.75F,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSugar,false,400,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  ItemStack itemMelon=new ItemStack(Item.melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemMelon,new Chemical[]{this.molecule(EnumMolecule.water)}));
  ItemStack itemChickenCooked=new ItemStack(Item.chickenCooked);
  DecomposerRecipe.add(new DecomposerRecipe(itemChickenCooked,new Chemical[]{this.element(EnumElement.K),this.element(EnumElement.Na),this.element(EnumElement.C,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemChickenCooked,true,5000,new Chemical[]{this.element(EnumElement.K,16),this.element(EnumElement.Na,16),this.element(EnumElement.C,16)}));
  ItemStack itemRottenFlesh=new ItemStack(Item.rottenFlesh);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRottenFlesh,0.05F,new Chemical[]{new Molecule(EnumMolecule.nod,1)}));
  ItemStack itemEnderPearl=new ItemStack(Item.enderPearl);
  DecomposerRecipe.add(new DecomposerRecipe(itemEnderPearl,new Chemical[]{this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEnderPearl,true,5000,new Chemical[]{this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate)}));
  ItemStack itemBlazeRod=new ItemStack(Item.blazeRod);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazeRod,new Chemical[]{this.element(EnumElement.Pu,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBlazeRod,true,15000,new Chemical[]{this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null}));
  ItemStack itemGhastTear=new ItemStack(Item.ghastTear);
  DecomposerRecipe.add(new DecomposerRecipe(itemGhastTear,new Chemical[]{this.element(EnumElement.Yb,4),this.element(EnumElement.No,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGhastTear,true,15000,new Chemical[]{this.element(EnumElement.Yb),this.element(EnumElement.Yb),this.element(EnumElement.No),null,this.element(EnumElement.Yb,2),this.element(EnumElement.No,2),null,this.element(EnumElement.No),null}));
  ItemStack itemNetherStalkSeeds=new ItemStack(Item.netherStalkSeeds);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemNetherStalkSeeds,0.5F,new Chemical[]{this.molecule(EnumMolecule.coke)}));
  ItemStack itemSpiderEye=new ItemStack(Item.spiderEye);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSpiderEye,0.2F,new Chemical[]{this.molecule(EnumMolecule.ttx)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSpiderEye,true,2000,new Chemical[]{this.element(EnumElement.C),null,null,null,this.molecule(EnumMolecule.ttx),null,null,null,this.element(EnumElement.C)}));
  ItemStack itemFermentedSpiderEye=new ItemStack(Item.fermentedSpiderEye);
  DecomposerRecipe.add(new DecomposerRecipe(itemFermentedSpiderEye,new Chemical[]{this.element(EnumElement.Po),this.molecule(EnumMolecule.ethanol)}));
  ItemStack itemBlazePowder=new ItemStack(Item.blazePowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazePowder,new Chemical[]{this.element(EnumElement.Pu)}));
  ItemStack itemMagmaCream=new ItemStack(Item.magmaCream);
  DecomposerRecipe.add(new DecomposerRecipe(itemMagmaCream,new Chemical[]{this.element(EnumElement.Hg),this.element(EnumElement.Pu),this.molecule(EnumMolecule.polycyanoacrylate,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemMagmaCream,true,5000,new Chemical[]{null,this.element(EnumElement.Pu),null,this.molecule(EnumMolecule.polycyanoacrylate),this.element(EnumElement.Hg),this.molecule(EnumMolecule.polycyanoacrylate),null,this.molecule(EnumMolecule.polycyanoacrylate),null}));
  ItemStack itemSpeckledMelon=new ItemStack(Item.speckledMelon);
  DecomposerRecipe.add(new DecomposerRecipe(itemSpeckledMelon,new Chemical[]{this.molecule(EnumMolecule.water,4),this.molecule(EnumMolecule.whitePigment),this.element(EnumElement.Au,1)}));
  ItemStack itemEmerald=new ItemStack(Item.emerald);
  DecomposerRecipe.add(new DecomposerRecipe(itemEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.Cr,2),this.element(EnumElement.V,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEmerald,true,80000,new Chemical[]{null,this.element(EnumElement.Cr),null,this.element(EnumElement.V),this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.V),null,this.element(EnumElement.Cr),null}));
  ItemStack itemCarrot=new ItemStack(Item.carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemCarrot,new Chemical[]{this.molecule(EnumMolecule.ret)}));
  ItemStack itemPotato=new ItemStack(Item.potato);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPotato,0.4F,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.K,2),this.molecule(EnumMolecule.cellulose)}));
  ItemStack itemGoldenCarrot=new ItemStack(Item.goldenCarrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemGoldenCarrot,new Chemical[]{this.molecule(EnumMolecule.ret),this.element(EnumElement.Au,4)}));
  ItemStack itemNetherStar=new ItemStack(Item.netherStar);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherStar,new Chemical[]{this.element(EnumElement.Cn,16),elementHydrogen,elementHydrogen,elementHydrogen,elementHelium,elementHelium,elementHelium,elementCarbon,elementCarbon}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherStar,true,500000,new Chemical[]{elementHelium,elementHelium,elementHelium,elementCarbon,this.element(EnumElement.Cn,16),elementHelium,elementHydrogen,elementHydrogen,elementHydrogen}));
  ItemStack itemNetherQuartz=new ItemStack(Item.netherQuartz);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherQuartz,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.galliumarsenide,1)}));
  ItemStack itemRecord13=new ItemStack(Item.record13);
  ItemStack itemRecordCat=new ItemStack(Item.recordCat);
  ItemStack itemRecordFar=new ItemStack(Item.recordFar);
  ItemStack itemRecordMall=new ItemStack(Item.recordMall);
  ItemStack itemRecordMellohi=new ItemStack(Item.recordMellohi);
  ItemStack itemRecordStal=new ItemStack(Item.recordStal);
  ItemStack itemRecordStrad=new ItemStack(Item.recordStrad);
  ItemStack itemRecordWard=new ItemStack(Item.recordWard);
  ItemStack itemRecordChirp=new ItemStack(Item.recordChirp);
  DecomposerRecipe.add(new DecomposerRecipe(itemRecord13,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordCat,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordFar,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMall,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMellohi,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStal,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStrad,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordWard,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordChirp,new Chemical[]{moleculePolyvinylChloride}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecord13,true,1000,new Chemical[]{moleculePolyvinylChloride,null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordCat,true,1000,new Chemical[]{null,moleculePolyvinylChloride,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordFar,true,1000,new Chemical[]{null,null,moleculePolyvinylChloride,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMall,true,1000,new Chemical[]{null,null,null,moleculePolyvinylChloride,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMellohi,true,1000,new Chemical[]{null,null,null,null,moleculePolyvinylChloride,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStal,true,1000,new Chemical[]{null,null,null,null,null,moleculePolyvinylChloride,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStrad,true,1000,new Chemical[]{null,null,null,null,null,null,moleculePolyvinylChloride,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordWard,true,1000,new Chemical[]{null,null,null,null,null,null,null,moleculePolyvinylChloride,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordChirp,true,1000,new Chemical[]{null,null,null,null,null,null,null,null,moleculePolyvinylChloride}));
}",0.9999598199935712
21872,"@Override public void breakBlock(World world,int x,int y,int z,int oldBlockId,int oldMetadata){
  super.breakBlock(world,x,y,z,oldBlockId,oldMetadata);
  if (oldMetadata < 2) {
    if (world.getBlockTileEntity(x,y,z) instanceof TileEntityProxy) {
      TileEntityProxy tileEntity=(TileEntityProxy)world.getBlockTileEntity(x,y,z);
      world.destroyBlock(tileEntity.getManager().xCoord,tileEntity.getManager().yCoord,tileEntity.getManager().zCoord,true);
    }
  }
}","@Override public void breakBlock(World world,int x,int y,int z,int oldBlockId,int oldMetadata){
  super.breakBlock(world,x,y,z,oldBlockId,oldMetadata);
}",0.4943457189014539
21873,"@Override public void breakBlock(World world,int x,int y,int z,int oldBlockId,int oldMetadata){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity != null) {
    ArrayList<ItemStack> droppedStacks=new ArrayList<ItemStack>();
    addStacksDroppedOnBlockBreak(tileEntity,droppedStacks);
    for (    ItemStack itemstack : droppedStacks) {
      float randomX=this.random.nextFloat() * 0.8F + 0.1F;
      float randomY=this.random.nextFloat() * 0.8F + 0.1F;
      float randomZ=this.random.nextFloat() * 0.8F + 0.1F;
      while (itemstack.stackSize > 0) {
        int randomN=this.random.nextInt(21) + 10;
        if (randomN > itemstack.stackSize)         randomN=itemstack.stackSize;
        itemstack.stackSize-=randomN;
        ItemStack droppedStack=new ItemStack(itemstack.itemID,randomN,itemstack.getItemDamage());
        if (itemstack.hasTagCompound()) {
          droppedStack.setTagCompound((NBTTagCompound)itemstack.getTagCompound().copy());
        }
        EntityItem droppedEntityItem=new EntityItem(world,(double)((float)x + randomX),(double)((float)y + randomY),(double)((float)z + randomZ),droppedStack);
        world.spawnEntityInWorld(droppedEntityItem);
      }
    }
    super.breakBlock(world,x,y,z,oldBlockId,oldMetadata);
  }
}","@Override public void breakBlock(World world,int x,int y,int z,int oldBlockId,int oldMetadata){
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity != null) {
    ArrayList<ItemStack> droppedStacks=new ArrayList<ItemStack>();
    addStacksDroppedOnBlockBreak(tileEntity,droppedStacks);
    for (    ItemStack itemstack : droppedStacks) {
      float randomX=this.random.nextFloat() * 0.8F + 0.1F;
      float randomY=this.random.nextFloat() * 0.8F + 0.1F;
      float randomZ=this.random.nextFloat() * 0.8F + 0.1F;
      if (itemstack != null) {
        while (itemstack.stackSize > 0) {
          int randomN=this.random.nextInt(21) + 10;
          if (randomN > itemstack.stackSize)           randomN=itemstack.stackSize;
          itemstack.stackSize-=randomN;
          ItemStack droppedStack=new ItemStack(itemstack.itemID,randomN,itemstack.getItemDamage());
          if (itemstack.hasTagCompound()) {
            droppedStack.setTagCompound((NBTTagCompound)itemstack.getTagCompound().copy());
          }
          EntityItem droppedEntityItem=new EntityItem(world,(double)((float)x + randomX),(double)((float)y + randomY),(double)((float)z + randomZ),droppedStack);
          world.spawnEntityInWorld(droppedEntityItem);
        }
      }
    }
    super.breakBlock(world,x,y,z,oldBlockId,oldMetadata);
  }
}",0.9758897818599312
21874,"private void drawBlueprintInfo(ItemStack blueprintStack){
  MinechemBlueprint blueprint=MinechemItems.blueprint.getBlueprint(blueprintStack);
  if (blueprint == null) {
    System.out.println(""String_Node_Str"");
    return;
  }
  String name=blueprintStack.getDisplayName().replace(""String_Node_Str"",""String_Node_Str"");
  this.fontRenderer.drawStringWithShadow(name,64,12,0xFFFFFF);
  HashMap<Integer,Integer> blockCount=getBlockCount(blueprint);
  HashMap<Integer,BlueprintBlock> blockLookup=blueprint.getBlockLookup();
  int y=23;
  Iterator<Entry<Integer,Integer>> it=blockCount.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<Integer,Integer> entry=it.next();
    BlueprintBlock block=blockLookup.get(entry.getKey());
    if (block != null) {
      ItemStack itemstack=new ItemStack(block.block,1,block.metadata);
      String info=String.format(""String_Node_Str"",entry.getValue(),itemstack.getDisplayName());
      this.fontRenderer.drawString(info,64,y,0xDDDDDD);
      y+=10;
    }
  }
}","private void drawBlueprintInfo(ItemStack blueprintStack){
  MinechemBlueprint blueprint=MinechemItems.blueprint.getBlueprint(blueprintStack);
  if (blueprint == null) {
    return;
  }
  String name=blueprintStack.getDisplayName().replace(""String_Node_Str"",""String_Node_Str"");
  this.fontRenderer.drawStringWithShadow(name,64,12,0xFFFFFF);
  HashMap<Integer,Integer> blockCount=getBlockCount(blueprint);
  HashMap<Integer,BlueprintBlock> blockLookup=blueprint.getBlockLookup();
  int y=23;
  Iterator<Entry<Integer,Integer>> it=blockCount.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<Integer,Integer> entry=it.next();
    BlueprintBlock block=blockLookup.get(entry.getKey());
    if (block != null) {
      ItemStack itemstack=new ItemStack(block.block,1,block.metadata);
      String info=String.format(""String_Node_Str"",entry.getValue(),itemstack.getDisplayName());
      this.fontRenderer.drawString(info,64,y,0xDDDDDD);
      y+=10;
    }
  }
}",0.9782057780030412
21875,"@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GUI_ID_JOURNAL) {
    return getServerGuiElementForJournal(player,world);
  }
  if (ID == GUI_ID_POLYTOOL) {
    return getServerGuiElementForPolytool(player,world);
  }
  if (ID == GUI_TABLE) {
    return new CotainerTable(player.inventory);
  }
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityDecomposer)   return new ContainerDecomposer(player.inventory,(TileEntityDecomposer)tileEntity);
  if (tileEntity instanceof TileEntityMicroscope)   return new ContainerMicroscope(player.inventory,(TileEntityMicroscope)tileEntity);
  if (tileEntity instanceof TileEntitySynthesis)   return new ContainerSynthesis(player.inventory,(TileEntitySynthesis)tileEntity);
  if (tileEntity instanceof TileEntityFusion) {
    return new ContainerFusion(player.inventory,(TileEntityFusion)tileEntity);
  }
  if (tileEntity instanceof TileEntityFission) {
    System.out.println(1);
    return new ContainerFission(player.inventory,(TileEntityFission)tileEntity);
  }
  if (tileEntity instanceof TileEntityProxy) {
    System.out.println(2);
    return getServerGuiElementFromProxy((TileEntityProxy)tileEntity,player);
  }
  if (tileEntity instanceof TileEntityBlueprintProjector)   return new ContainerProjector(player.inventory,(TileEntityBlueprintProjector)tileEntity);
  if (tileEntity instanceof TileEntityChemicalStorage)   return new ContainerChemicalStorage(player.inventory,(TileEntityChemicalStorage)tileEntity);
  return null;
}","@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GUI_ID_JOURNAL) {
    return getServerGuiElementForJournal(player,world);
  }
  if (ID == GUI_ID_POLYTOOL) {
    return getServerGuiElementForPolytool(player,world);
  }
  if (ID == GUI_TABLE) {
    return new CotainerTable(player.inventory);
  }
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityDecomposer)   return new ContainerDecomposer(player.inventory,(TileEntityDecomposer)tileEntity);
  if (tileEntity instanceof TileEntityMicroscope)   return new ContainerMicroscope(player.inventory,(TileEntityMicroscope)tileEntity);
  if (tileEntity instanceof TileEntitySynthesis)   return new ContainerSynthesis(player.inventory,(TileEntitySynthesis)tileEntity);
  if (tileEntity instanceof TileEntityFusion) {
    return new ContainerFusion(player.inventory,(TileEntityFusion)tileEntity);
  }
  if (tileEntity instanceof TileEntityFission) {
    return new ContainerFission(player.inventory,(TileEntityFission)tileEntity);
  }
  if (tileEntity instanceof TileEntityProxy) {
    return getServerGuiElementFromProxy((TileEntityProxy)tileEntity,player);
  }
  if (tileEntity instanceof TileEntityBlueprintProjector)   return new ContainerProjector(player.inventory,(TileEntityBlueprintProjector)tileEntity);
  if (tileEntity instanceof TileEntityChemicalStorage)   return new ContainerChemicalStorage(player.inventory,(TileEntityChemicalStorage)tileEntity);
  return null;
}",0.9357739242132306
21876,"@Override public Object getClientGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GUI_ID_JOURNAL)   return getClientGuiElementForJournal(player,world);
  if (ID == GUI_TABLE)   return getClientGuiForJournal(player,world);
  if (ID == GUI_ID_POLYTOOL)   return getClientGuiForPolytool(player,world);
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityDecomposer)   return new GuiDecomposer(player.inventory,(TileEntityDecomposer)tileEntity);
  if (tileEntity instanceof TileEntityMicroscope)   return new GuiMicroscope(player.inventory,(TileEntityMicroscope)tileEntity);
  if (tileEntity instanceof TileEntitySynthesis)   return new GuiSynthesis(player.inventory,(TileEntitySynthesis)tileEntity);
  if (tileEntity instanceof TileEntityFusion)   return new GuiFusion(player.inventory,(TileEntityFusion)tileEntity);
  if (tileEntity instanceof TileEntityProxy) {
    System.out.println(3);
    return getClientGuiElementFromProxy((TileEntityProxy)tileEntity,player);
  }
  if (tileEntity instanceof TileEntityBlueprintProjector)   return new GuiProjector(player.inventory,(TileEntityBlueprintProjector)tileEntity);
  if (tileEntity instanceof TileEntityChemicalStorage)   return new GuiChemicalStorage(player.inventory,(TileEntityChemicalStorage)tileEntity);
  if (tileEntity instanceof TileEntityFission) {
    System.out.println(4);
    return new GuiFission(player.inventory,(TileEntityFission)tileEntity);
  }
  return null;
}","@Override public Object getClientGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GUI_ID_JOURNAL)   return getClientGuiElementForJournal(player,world);
  if (ID == GUI_TABLE)   return getClientGuiForJournal(player,world);
  if (ID == GUI_ID_POLYTOOL)   return getClientGuiForPolytool(player,world);
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityDecomposer)   return new GuiDecomposer(player.inventory,(TileEntityDecomposer)tileEntity);
  if (tileEntity instanceof TileEntityMicroscope)   return new GuiMicroscope(player.inventory,(TileEntityMicroscope)tileEntity);
  if (tileEntity instanceof TileEntitySynthesis)   return new GuiSynthesis(player.inventory,(TileEntitySynthesis)tileEntity);
  if (tileEntity instanceof TileEntityFusion)   return new GuiFusion(player.inventory,(TileEntityFusion)tileEntity);
  if (tileEntity instanceof TileEntityProxy) {
    return getClientGuiElementFromProxy((TileEntityProxy)tileEntity,player);
  }
  if (tileEntity instanceof TileEntityBlueprintProjector)   return new GuiProjector(player.inventory,(TileEntityBlueprintProjector)tileEntity);
  if (tileEntity instanceof TileEntityChemicalStorage)   return new GuiChemicalStorage(player.inventory,(TileEntityChemicalStorage)tileEntity);
  if (tileEntity instanceof TileEntityFission) {
    return new GuiFission(player.inventory,(TileEntityFission)tileEntity);
  }
  return null;
}",0.926201760324983
21877,"@Override public ItemStack getCraftingResult(InventoryCrafting inv){
  System.out.println(6);
  for (int i=0; i < inv.getSizeInventory(); i++) {
    ItemStack s=inv.getStackInSlot(i);
    if (s != null && s.getItem() instanceof ItemSword) {
      for (int j=0; j < inv.getSizeInventory(); j++) {
        ItemStack s2=inv.getStackInSlot(j);
        if (s2 != null && s2.getItem() instanceof ItemMolecule && PharmacologyEffect.givesEffect(EnumMolecule.getById(s2.getItemDamage()))) {
          NBTTagList l=s2.getEnchantmentTagList();
          int level=0;
          if (l != null) {
            for (int k=0; k < l.tagCount(); k++) {
              NBTTagCompound tag=(NBTTagCompound)l.tagAt(k);
              if (tag.getShort(""String_Node_Str"") == EnchantmentCoated.chemLookup.get(EnumMolecule.getById(s2.getItemDamage())).effectId) {
                level=tag.getShort(""String_Node_Str"");
                ItemStack result=s.copy();
                ((NBTTagCompound)result.getEnchantmentTagList().tagAt(k)).setInteger(""String_Node_Str"",level + 1);
              }
            }
          }
          ItemStack result=s.copy();
          result.addEnchantment(EnchantmentCoated.chemLookup.get(EnumMolecule.getById(s2.getItemDamage())),1);
          return result;
        }
      }
    }
  }
  return null;
}","@Override public ItemStack getCraftingResult(InventoryCrafting inv){
  for (int i=0; i < inv.getSizeInventory(); i++) {
    ItemStack s=inv.getStackInSlot(i);
    if (s != null && s.getItem() instanceof ItemSword) {
      for (int j=0; j < inv.getSizeInventory(); j++) {
        ItemStack s2=inv.getStackInSlot(j);
        if (s2 != null && s2.getItem() instanceof ItemMolecule && PharmacologyEffect.givesEffect(EnumMolecule.getById(s2.getItemDamage()))) {
          NBTTagList l=s2.getEnchantmentTagList();
          int level=0;
          if (l != null) {
            for (int k=0; k < l.tagCount(); k++) {
              NBTTagCompound tag=(NBTTagCompound)l.tagAt(k);
              if (tag.getShort(""String_Node_Str"") == EnchantmentCoated.chemLookup.get(EnumMolecule.getById(s2.getItemDamage())).effectId) {
                level=tag.getShort(""String_Node_Str"");
                ItemStack result=s.copy();
                ((NBTTagCompound)result.getEnchantmentTagList().tagAt(k)).setInteger(""String_Node_Str"",level + 1);
              }
            }
          }
          ItemStack result=s.copy();
          result.addEnchantment(EnchantmentCoated.chemLookup.get(EnumMolecule.getById(s2.getItemDamage())),1);
          return result;
        }
      }
    }
  }
  return null;
}",0.9903437620702974
21878,"public DecomposerRecipe getRecipe(ItemStack input,int level){
  for (  DecomposerRecipe recipe : DecomposerRecipe.recipes) {
    if (Util.stacksAreSameKind(input,recipe.getInput()))     return recipe;
  }
  if (level < 5) {
    ArrayList<Chemical> output=new ArrayList<Chemical>();
    int foundRecipies=0;
    for (    Object recipe : CraftingManager.getInstance().getRecipeList()) {
      if (recipe instanceof IRecipe) {
        if (((IRecipe)recipe).getRecipeOutput() != null && ((IRecipe)recipe).getRecipeOutput().isItemEqual(input)) {
          ItemStack[] components=null;
          if (recipe instanceof ShapelessOreRecipe && ((ShapelessOreRecipe)recipe).getInput().size() > 0) {
            ArrayList<ItemStack> inputs=new ArrayList<ItemStack>();
            for (            Object o : ((ShapelessOreRecipe)recipe).getInput()) {
              if (o instanceof ItemStack) {
                inputs.add((ItemStack)o);
              }
            }
            components=inputs.toArray(new ItemStack[inputs.size()]);
          }
          if (recipe instanceof ShapedOreRecipe) {
            ArrayList<ItemStack> inputs=new ArrayList<ItemStack>();
            for (            Object o : ((ShapedOreRecipe)recipe).getInput()) {
              if (o instanceof ItemStack) {
                inputs.add((ItemStack)o);
              }
 else               if (o instanceof String) {
                inputs.add(OreDictionary.getOres((String)o).get(0));
              }
 else               if (o instanceof ArrayList) {
                inputs.add((ItemStack)((ArrayList)o).get(0));
              }
 else               if (o != null) {
                System.out.println(o.getClass().getName());
              }
            }
            components=inputs.toArray(new ItemStack[inputs.size()]);
          }
          if (recipe instanceof ShapelessRecipes) {
            components=(ItemStack[])((ShapelessRecipes)recipe).recipeItems.toArray();
          }
          if (recipe instanceof ShapedRecipes) {
            components=((ShapedRecipes)recipe).recipeItems;
          }
          if (components != null) {
            ArrayList<Chemical> sum=new ArrayList<Chemical>();
            for (            ItemStack item : components) {
              if (item != null) {
                DecomposerRecipe decompRecipe=this.getRecipe(item,level + 1);
                if (decompRecipe != null) {
                  sum.addAll(decompRecipe.getOutputRaw());
                }
              }
            }
            if (!sum.isEmpty()) {
              System.out.println(8);
              Random rand=new Random();
              if (sum.containsAll(output)) {
                output=sum;
              }
 else               if (!output.containsAll(sum) && rand.nextInt(foundRecipies) == 0) {
                System.out.println(9);
                output=sum;
                foundRecipies+=1;
              }
            }
          }
        }
      }
    }
    if (!output.isEmpty()) {
      System.out.println(output);
      return new DecomposerRecipe(input,output.toArray(new Chemical[output.size()]));
    }
  }
  return null;
}","public DecomposerRecipe getRecipe(ItemStack input,int level){
  for (  DecomposerRecipe recipe : DecomposerRecipe.recipes) {
    if (Util.stacksAreSameKind(input,recipe.getInput()))     return recipe;
  }
  if (level < 5) {
    ArrayList<Chemical> output=new ArrayList<Chemical>();
    int foundRecipies=0;
    for (    Object recipe : CraftingManager.getInstance().getRecipeList()) {
      if (recipe instanceof IRecipe) {
        if (((IRecipe)recipe).getRecipeOutput() != null && ((IRecipe)recipe).getRecipeOutput().isItemEqual(input)) {
          ItemStack[] components=null;
          if (recipe instanceof ShapelessOreRecipe && ((ShapelessOreRecipe)recipe).getInput().size() > 0) {
            ArrayList<ItemStack> inputs=new ArrayList<ItemStack>();
            for (            Object o : ((ShapelessOreRecipe)recipe).getInput()) {
              if (o instanceof ItemStack) {
                inputs.add((ItemStack)o);
              }
            }
            components=inputs.toArray(new ItemStack[inputs.size()]);
          }
          if (recipe instanceof ShapedOreRecipe) {
            ArrayList<ItemStack> inputs=new ArrayList<ItemStack>();
            for (            Object o : ((ShapedOreRecipe)recipe).getInput()) {
              if (o instanceof ItemStack) {
                inputs.add((ItemStack)o);
              }
 else               if (o instanceof String) {
                inputs.add(OreDictionary.getOres((String)o).get(0));
              }
 else               if (o instanceof ArrayList) {
                inputs.add((ItemStack)((ArrayList)o).get(0));
              }
            }
            components=inputs.toArray(new ItemStack[inputs.size()]);
          }
          if (recipe instanceof ShapelessRecipes) {
            components=(ItemStack[])((ShapelessRecipes)recipe).recipeItems.toArray();
          }
          if (recipe instanceof ShapedRecipes) {
            components=((ShapedRecipes)recipe).recipeItems;
          }
          if (components != null) {
            ArrayList<Chemical> sum=new ArrayList<Chemical>();
            for (            ItemStack item : components) {
              if (item != null) {
                DecomposerRecipe decompRecipe=this.getRecipe(item,level + 1);
                if (decompRecipe != null) {
                  sum.addAll(decompRecipe.getOutputRaw());
                }
              }
            }
            if (!sum.isEmpty()) {
              Random rand=new Random();
              if (sum.containsAll(output)) {
                output=sum;
              }
 else               if (!output.containsAll(sum) && rand.nextInt(foundRecipies) == 0) {
                output=sum;
                foundRecipies+=1;
              }
            }
          }
        }
      }
    }
    if (!output.isEmpty()) {
      return new DecomposerRecipe(input,output.toArray(new Chemical[output.size()]));
    }
  }
  return null;
}",0.9630366318581136
21879,"public void checkForParticleCollision(){
  System.out.println(1);
  if (!worldObj.isRemote) {
    List<BaseParticle> nearbyParticles=this.worldObj.getEntitiesWithinAABB(BaseParticle.class,AxisAlignedBB.getBoundingBox(posX - 1.5,posY - 1.5,posZ - 1.5,posX + 1.5,posY + 1.5,posZ + 1.5));
    for (int i=0; i < nearbyParticles.size(); i++) {
      BaseParticle particle=nearbyParticles.get(i);
      if (this != particle && !this.isDead && !particle.isDead) {
        this.onCollideWithParticle(particle);
      }
    }
  }
}","public void checkForParticleCollision(){
  if (!worldObj.isRemote) {
    List<BaseParticle> nearbyParticles=this.worldObj.getEntitiesWithinAABB(BaseParticle.class,AxisAlignedBB.getBoundingBox(posX - 1.5,posY - 1.5,posZ - 1.5,posX + 1.5,posY + 1.5,posZ + 1.5));
    for (int i=0; i < nearbyParticles.size(); i++) {
      BaseParticle particle=nearbyParticles.get(i);
      if (this != particle && !this.isDead && !particle.isDead) {
        this.onCollideWithParticle(particle);
      }
    }
  }
}",0.9754661432777232
21880,"@Override public EnumElement getElement(){
  return EnumElement.Zn;
}","@Override public EnumElement getElement(){
  return EnumElement.Hg;
}",0.9710144927536232
21881,"public void registerVanillaChemicalRecipes(){
  Molecule moleculeSiliconDioxide=this.molecule(EnumMolecule.siliconDioxide,4);
  Molecule moleculeCellulose=this.molecule(EnumMolecule.cellulose,1);
  Molecule moleculePolyvinylChloride=this.molecule(EnumMolecule.polyvinylChloride);
  Element elementHydrogen=this.element(EnumElement.H,64);
  Element elementHelium=this.element(EnumElement.He,64);
  Element elementCarbon=this.element(EnumElement.C,64);
  ItemStack blockStone=new ItemStack(Block.stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockStone,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.stone,7),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,this.element(EnumElement.O,2),null,null}));
  ItemStack blockGrass=new ItemStack(Block.grass);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockGrass,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)}),new DecomposerRecipe(new Chemical[]{moleculeCellulose})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.grass,16),true,50,new Chemical[]{null,moleculeCellulose,null,null,this.element(EnumElement.O,2),this.element(EnumElement.Si)}));
  ItemStack blockDirt=new ItemStack(Block.dirt);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockDirt,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.dirt,16),true,50,new Chemical[]{null,null,null,null,this.element(EnumElement.O,2),this.element(EnumElement.Si)}));
  ItemStack blockCobblestone=new ItemStack(Block.cobblestone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockCobblestone,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na),this.element(EnumElement.Cl)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.cobblestone,8),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,null,this.element(EnumElement.O,2),null}));
  ItemStack blockOakWoodPlanks=new ItemStack(Block.planks,1,0);
  ItemStack blockSpruceWoodPlanks=new ItemStack(Block.planks,1,1);
  ItemStack blockBirchWoodPlanks=new ItemStack(Block.planks,1,2);
  ItemStack blockJungleWoodPlanks=new ItemStack(Block.planks,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  ItemStack blockOakSapling=new ItemStack(Block.sapling,1,0);
  ItemStack blockSpruceSapling=new ItemStack(Block.sapling,1,1);
  ItemStack blockBirchSapling=new ItemStack(Block.sapling,1,2);
  ItemStack blockJungleSapling=new ItemStack(Block.sapling,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakSapling,true,20,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceSapling,true,20,new Chemical[]{null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchSapling,true,20,new Chemical[]{null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleSapling,true,20,new Chemical[]{null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null,null}));
  ItemStack blockWaterSource=new ItemStack(Block.waterMoving);
  ItemStack blockWaterStill=new ItemStack(Block.waterStill);
  DecomposerRecipe.add(new DecomposerRecipe(blockWaterSource,new Chemical[]{this.molecule(EnumMolecule.water,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockWaterStill,new Chemical[]{this.molecule(EnumMolecule.water,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWaterSource,false,20,new Chemical[]{this.molecule(EnumMolecule.water,16)}));
  ItemStack blockSand=new ItemStack(Block.sand);
  DecomposerRecipe.add(new DecomposerRecipe(blockSand,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSand,true,200,new Chemical[]{moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide}));
  ItemStack blockGravel=new ItemStack(Block.gravel);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGravel,0.35F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGravel,true,30,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.siliconDioxide)}));
  ItemStack oreGold=new ItemStack(Block.oreGold);
  DecomposerRecipe.add(new DecomposerRecipe(oreGold,new Chemical[]{this.element(EnumElement.Au,48)}));
  ItemStack oreIron=new ItemStack(Block.oreIron);
  DecomposerRecipe.add(new DecomposerRecipe(oreIron,new Chemical[]{this.element(EnumElement.Fe,48)}));
  ItemStack oreCoal=new ItemStack(Block.oreCoal);
  DecomposerRecipe.add(new DecomposerRecipe(oreCoal,new Chemical[]{this.element(EnumElement.C,48)}));
  ItemStack blockOakWood=new ItemStack(Block.wood,1,0);
  ItemStack blockSpruceWood=new ItemStack(Block.wood,1,1);
  ItemStack blockBirchWood=new ItemStack(Block.wood,1,2);
  ItemStack blockJungleWood=new ItemStack(Block.wood,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakWood,true,100,new Chemical[]{moleculeCellulose,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceWood,true,100,new Chemical[]{null,null,null,null,moleculeCellulose,null,moleculeCellulose,moleculeCellulose,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchWood,true,100,new Chemical[]{moleculeCellulose,null,moleculeCellulose,null,null,null,moleculeCellulose,null,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleWood,true,100,new Chemical[]{moleculeCellulose,null,null,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null}));
  ItemStack blockGlass=new ItemStack(Block.glass);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlass,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlass,true,500,new Chemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,null,null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  ItemStack blockOreLapis=new ItemStack(Block.oreLapis);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreLapis,new Chemical[]{this.molecule(EnumMolecule.lazurite,6),this.molecule(EnumMolecule.sodalite),this.molecule(EnumMolecule.noselite),this.molecule(EnumMolecule.calcite),this.molecule(EnumMolecule.pyrite)}));
  ItemStack blockCobweb=new ItemStack(Block.web);
  DecomposerRecipe.add(new DecomposerRecipe(blockCobweb,new Chemical[]{this.molecule(EnumMolecule.fibroin)}));
  ItemStack blockTallGrass=new ItemStack(Block.tallGrass,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockTallGrass,0.1F,new Chemical[]{new Molecule(EnumMolecule.afroman,2)}));
  ItemStack blockSandStone=new ItemStack(Block.sandStone,1,0);
  ItemStack blockChiseledSandStone=new ItemStack(Block.sandStone,1,1);
  ItemStack blockSmoothSandStone=new ItemStack(Block.sandStone,1,2);
  DecomposerRecipe.add(new DecomposerRecipe(blockSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockChiseledSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockSmoothSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSandStone,true,20,new Chemical[]{null,null,null,null,this.molecule(EnumMolecule.siliconDioxide,16),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockChiseledSandStone,true,20,new Chemical[]{null,null,null,null,null,null,null,this.molecule(EnumMolecule.siliconDioxide,16),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSmoothSandStone,true,20,new Chemical[]{null,this.molecule(EnumMolecule.siliconDioxide,16),null,null,null,null,null,null,null}));
  ItemStack blockWool=new ItemStack(Block.cloth,1,0);
  ItemStack blockOrangeWool=new ItemStack(Block.cloth,1,1);
  ItemStack blockMagentaWool=new ItemStack(Block.cloth,1,2);
  ItemStack blockLightBlueWool=new ItemStack(Block.cloth,1,3);
  ItemStack blockYellowWool=new ItemStack(Block.cloth,1,4);
  ItemStack blockLimeWool=new ItemStack(Block.cloth,1,5);
  ItemStack blockPinkWool=new ItemStack(Block.cloth,1,6);
  ItemStack blockGrayWool=new ItemStack(Block.cloth,1,7);
  ItemStack blockLightGrayWool=new ItemStack(Block.cloth,1,8);
  ItemStack blockCyanWool=new ItemStack(Block.cloth,1,9);
  ItemStack blockPurpleWool=new ItemStack(Block.cloth,1,10);
  ItemStack blockBlueWool=new ItemStack(Block.cloth,1,11);
  ItemStack blockBrownWool=new ItemStack(Block.cloth,1,12);
  ItemStack blockGreenWool=new ItemStack(Block.cloth,1,13);
  ItemStack blockRedWool=new ItemStack(Block.cloth,1,14);
  ItemStack blockBlackWool=new ItemStack(Block.cloth,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOrangeWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMagentaWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightBlueWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLimeWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPinkWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGrayWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightGrayWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCyanWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPurpleWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlueWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBrownWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGreenWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlackWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightBlueWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightGrayWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  ItemStack blockPlantYellow=new ItemStack(Block.plantYellow);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPlantYellow,0.3F,new Chemical[]{new Molecule(EnumMolecule.shikimicAcid,2)}));
  ItemStack blockMushroomBrown=new ItemStack(Block.mushroomBrown);
  ItemStack blockMushroomRed=new ItemStack(Block.mushroomRed);
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomBrown,new Chemical[]{this.molecule(EnumMolecule.psilocybin),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomRed,new Chemical[]{this.molecule(EnumMolecule.pantherine),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockGold),new Chemical[]{this.element(EnumElement.Au,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockIron),new Chemical[]{this.element(EnumElement.Fe,144)}));
  ItemStack blockTnt=new ItemStack(Block.tnt);
  DecomposerRecipe.add(new DecomposerRecipe(blockTnt,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockTnt,false,1000,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  ItemStack blockObsidian=new ItemStack(Block.obsidian);
  DecomposerRecipe.add(new DecomposerRecipe(blockObsidian,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16),this.molecule(EnumMolecule.magnesiumOxide,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockObsidian,true,1000,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),null,this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2)}));
  ItemStack blockOreDiamond=new ItemStack(Block.oreDiamond);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,6)}));
  ItemStack blockDiamond=new ItemStack(Block.blockDiamond);
  DecomposerRecipe.add(new DecomposerRecipe(blockDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,36)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDiamond,true,120000,new Chemical[]{this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4)}));
  ItemStack blockPressurePlatePlanks=new ItemStack(Block.pressurePlatePlanks);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPressurePlatePlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,4)}));
  ItemStack blockOreRedstone=new ItemStack(Block.oreRedstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOreRedstone,0.8F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide,9),this.element(EnumElement.Cu,9)}));
  ItemStack blockCactus=new ItemStack(Block.cactus);
  DecomposerRecipe.add(new DecomposerRecipe(blockCactus,new Chemical[]{this.molecule(EnumMolecule.mescaline),this.molecule(EnumMolecule.water,20)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCactus,true,200,new Chemical[]{this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.mescaline),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5)}));
  ItemStack blockPumpkin=new ItemStack(Block.pumpkin);
  DecomposerRecipe.add(new DecomposerRecipe(blockPumpkin,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPumpkin,false,400,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  ItemStack blockNetherrack=new ItemStack(Block.netherrack);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockNetherrack,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.Ni),this.element(EnumElement.Tc)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,3),this.element(EnumElement.Ti),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,1),this.element(EnumElement.W,4),this.element(EnumElement.Cr,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,10),this.element(EnumElement.W,1),this.element(EnumElement.Zn,8),this.element(EnumElement.Be,4)})}));
  ItemStack itemPotion=new ItemStack(Item.potion,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemPotion,new Chemical[]{this.molecule(EnumMolecule.water,8)}));
  ItemStack blockSlowSand=new ItemStack(Block.slowSand);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockSlowSand,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,3),this.element(EnumElement.Be,1),this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,1),this.element(EnumElement.Si,5),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,6),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es,1),this.element(EnumElement.O,2)})}));
  ItemStack blockGlowStone=new ItemStack(Block.glowStone);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlowStone,new Chemical[]{this.element(EnumElement.P,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlowStone,true,500,new Chemical[]{this.element(EnumElement.P),null,this.element(EnumElement.P),this.element(EnumElement.P),null,this.element(EnumElement.P),null,null,null}));
  ItemStack blockThinGlass=new ItemStack(Block.thinGlass);
  DecomposerRecipe.add(new DecomposerRecipe(blockThinGlass,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,1)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockThinGlass,true,50,new Chemical[]{null,null,null,this.molecule(EnumMolecule.siliconDioxide),null,null,null,null,null}));
  ItemStack blockMelon=new ItemStack(Block.melon);
  DecomposerRecipe.add(new DecomposerRecipe(blockMelon,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin),this.molecule(EnumMolecule.asparticAcid),this.molecule(EnumMolecule.water,16)}));
  ItemStack blockMycelium=new ItemStack(Block.mycelium);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMycelium,0.09F,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.mycelium,16),false,300,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  ItemStack blockWhiteStone=new ItemStack(Block.whiteStone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockWhiteStone,0.8F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.H,4),this.element(EnumElement.Li)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pu)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Nd)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.H,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Be,8)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Li,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Rb)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  ItemStack blockOreEmerald=new ItemStack(Block.oreEmerald);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,6),this.element(EnumElement.Cr,6),this.element(EnumElement.V,6)}));
  ItemStack blockEmerald=new ItemStack(Block.blockEmerald);
  SynthesisRecipe.add(new SynthesisRecipe(blockEmerald,true,150000,new Chemical[]{this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.V,9),this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.V,9),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.Cr,18),this.element(EnumElement.V,18)}));
  ItemStack itemAppleRed=new ItemStack(Item.appleRed);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleRed,new Chemical[]{this.molecule(EnumMolecule.malicAcid)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemAppleRed,false,400,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.molecule(EnumMolecule.water,2)}));
  ItemStack itemArrow=new ItemStack(Item.arrow);
  DecomposerRecipe.add(new DecomposerRecipe(itemArrow,new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O,2),this.element(EnumElement.N,6)}));
  ItemStack itemCoal=new ItemStack(Item.coal);
  DecomposerRecipe.add(new DecomposerRecipe(itemCoal,new Chemical[]{this.element(EnumElement.C,16)}));
  ItemStack itemChar=new ItemStack(Item.coal,1,1);
  DecomposerRecipe.add(new DecomposerRecipe(itemChar,new Chemical[]{this.element(EnumElement.C,30)}));
  ItemStack itemDiamond=new ItemStack(Item.diamond);
  DecomposerRecipe.add(new DecomposerRecipe(itemDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDiamond,true,'\uea60',new Chemical[]{null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null}));
  ItemStack itemIngotIron=new ItemStack(Item.ingotIron);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotIron,new Chemical[]{this.element(EnumElement.Fe,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotIron,false,1000,new Chemical[]{this.element(EnumElement.Fe,16)}));
  ItemStack itemIngotGold=new ItemStack(Item.ingotGold);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotGold,new Chemical[]{this.element(EnumElement.Au,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotGold,false,1000,new Chemical[]{this.element(EnumElement.Au,16)}));
  ItemStack itemStick=new ItemStack(Item.stick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemStick,0.3F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  ItemStack itemSilk=new ItemStack(Item.silk);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSilk,0.45F,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSilk,true,150,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  ItemStack itemFeather=new ItemStack(Item.feather);
  DecomposerRecipe.add(new DecomposerRecipe(itemFeather,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.N,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFeather,true,800,new Chemical[]{this.element(EnumElement.N),this.molecule(EnumMolecule.water,2),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,1),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,5),this.element(EnumElement.N)}));
  ItemStack itemGunpowder=new ItemStack(Item.gunpowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemGunpowder,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.S,2),this.element(EnumElement.C)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGunpowder,true,600,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.C),null,this.element(EnumElement.S,2),null,null,null,null,null}));
  ItemStack itemBread=new ItemStack(Item.bread);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBread,0.1F,new Chemical[]{this.molecule(EnumMolecule.starch),this.molecule(EnumMolecule.sucrose)}));
  ItemStack itemFlint=new ItemStack(Item.flint);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemFlint,0.5F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFlint,true,100,new Chemical[]{null,moleculeSiliconDioxide,null,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,null,null,null}));
  ItemStack itemAppleGold=new ItemStack(Item.appleGold,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleGold,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.element(EnumElement.Au,64)}));
  ItemStack itemDoorWood=new ItemStack(Item.doorWood);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDoorWood,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,12)}));
  ItemStack itemBucketWater=new ItemStack(Item.bucketWater);
  DecomposerRecipe.add(new DecomposerRecipe(itemBucketWater,new Chemical[]{this.molecule(EnumMolecule.water,16)}));
  ItemStack itemRedstone=new ItemStack(Item.redstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRedstone,0.42F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide),this.element(EnumElement.Cu)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRedstone,true,100,new Chemical[]{null,null,this.molecule(EnumMolecule.iron3oxide),null,this.element(EnumElement.Cu),null,null,null,null}));
  ItemStack itemSnowball=new ItemStack(Item.snowball);
  DecomposerRecipe.add(new DecomposerRecipe(itemSnowball,new Chemical[]{this.molecule(EnumMolecule.water)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.snowball,5),true,20,new Chemical[]{this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water)}));
  ItemStack itemLeather=new ItemStack(Item.leather);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemLeather,0.5F,new Chemical[]{this.molecule(EnumMolecule.arginine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.keratin)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.leather,5),true,700,new Chemical[]{this.molecule(EnumMolecule.arginine),null,null,null,this.molecule(EnumMolecule.keratin),null,null,null,this.molecule(EnumMolecule.glycine)}));
  ItemStack itemBrick=new ItemStack(Item.brick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBrick,0.5F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.brick,8),true,400,new Chemical[]{this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null,this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null}));
  ItemStack itemClay=new ItemStack(Item.clay);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemClay,0.3F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.clay,12),false,100,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  ItemStack itemReed=new ItemStack(Item.reed);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemReed,0.65F,new Chemical[]{this.molecule(EnumMolecule.sucrose),this.element(EnumElement.H,2),this.element(EnumElement.O)}));
  ItemStack itemPaper=new ItemStack(Item.paper);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPaper,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.paper,16),true,150,new Chemical[]{null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null}));
  ItemStack itemSlimeBall=new ItemStack(Item.slimeBall);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemSlimeBall,0.9F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.polycyanoacrylate)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Hg)}),new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.water,10)})}));
  ItemStack itemGlowstone=new ItemStack(Item.glowstone);
  DecomposerRecipe.add(new DecomposerRecipe(itemGlowstone,new Chemical[]{this.element(EnumElement.P)}));
  ItemStack itemDyePowderBlack=new ItemStack(Item.dyePowder,1,0);
  ItemStack itemDyePowderRed=new ItemStack(Item.dyePowder,1,1);
  ItemStack itemDyePowderGreen=new ItemStack(Item.dyePowder,1,2);
  ItemStack itemDyePowderBrown=new ItemStack(Item.dyePowder,1,3);
  ItemStack itemDyePowderBlue=new ItemStack(Item.dyePowder,1,4);
  ItemStack itemDyePowderPurple=new ItemStack(Item.dyePowder,1,5);
  ItemStack itemDyePowderCyan=new ItemStack(Item.dyePowder,1,6);
  ItemStack itemDyePowderLightGray=new ItemStack(Item.dyePowder,1,7);
  ItemStack itemDyePowderGray=new ItemStack(Item.dyePowder,1,8);
  ItemStack itemDyePowderPink=new ItemStack(Item.dyePowder,1,9);
  ItemStack itemDyePowderLime=new ItemStack(Item.dyePowder,1,10);
  ItemStack itemDyePowderYellow=new ItemStack(Item.dyePowder,1,11);
  ItemStack itemDyePowderLightBlue=new ItemStack(Item.dyePowder,1,12);
  ItemStack itemDyePowderMagenta=new ItemStack(Item.dyePowder,1,13);
  ItemStack itemDyePowderOrange=new ItemStack(Item.dyePowder,1,14);
  ItemStack itemDyePowderWhite=new ItemStack(Item.dyePowder,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlack,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderRed,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGreen,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDyePowderBrown,0.4F,new Chemical[]{this.molecule(EnumMolecule.theobromine),this.molecule(EnumMolecule.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlue,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPurple,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderCyan,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightGray,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGray,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPink,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLime,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderYellow,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightBlue,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderMagenta,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderOrange,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderWhite,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlack,false,50,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderRed,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGreen,false,50,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBrown,false,400,new Chemical[]{this.molecule(EnumMolecule.theobromine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlue,false,50,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPurple,false,50,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderCyan,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightGray,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGray,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPink,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLime,false,50,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderYellow,false,50,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightBlue,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderMagenta,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderOrange,false,50,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderWhite,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  ItemStack itemBone=new ItemStack(Item.bone);
  DecomposerRecipe.add(new DecomposerRecipe(itemBone,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBone,false,100,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  ItemStack itemSugar=new ItemStack(Item.sugar);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSugar,0.75F,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSugar,false,400,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  ItemStack itemMelon=new ItemStack(Item.melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemMelon,new Chemical[]{this.molecule(EnumMolecule.water)}));
  ItemStack itemChickenCooked=new ItemStack(Item.chickenCooked);
  DecomposerRecipe.add(new DecomposerRecipe(itemChickenCooked,new Chemical[]{this.element(EnumElement.K),this.element(EnumElement.Na),this.element(EnumElement.C,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemChickenCooked,true,5000,new Chemical[]{this.element(EnumElement.K,16),this.element(EnumElement.Na,16),this.element(EnumElement.C,16)}));
  ItemStack itemRottenFlesh=new ItemStack(Item.rottenFlesh);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRottenFlesh,0.05F,new Chemical[]{new Molecule(EnumMolecule.nod,1)}));
  ItemStack itemEnderPearl=new ItemStack(Item.enderPearl);
  DecomposerRecipe.add(new DecomposerRecipe(itemEnderPearl,new Chemical[]{this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEnderPearl,true,5000,new Chemical[]{this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate)}));
  ItemStack itemBlazeRod=new ItemStack(Item.blazeRod);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazeRod,new Chemical[]{this.element(EnumElement.Pu,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBlazeRod,true,15000,new Chemical[]{this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null}));
  ItemStack itemGhastTear=new ItemStack(Item.ghastTear);
  DecomposerRecipe.add(new DecomposerRecipe(itemGhastTear,new Chemical[]{this.element(EnumElement.Yb,4),this.element(EnumElement.No,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGhastTear,true,15000,new Chemical[]{this.element(EnumElement.Yb),this.element(EnumElement.Yb),this.element(EnumElement.No),null,this.element(EnumElement.Yb,2),this.element(EnumElement.No,2),null,this.element(EnumElement.No),null}));
  ItemStack itemNetherStalkSeeds=new ItemStack(Item.netherStalkSeeds);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemNetherStalkSeeds,0.5F,new Chemical[]{this.molecule(EnumMolecule.coke)}));
  ItemStack itemSpiderEye=new ItemStack(Item.spiderEye);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSpiderEye,0.2F,new Chemical[]{this.molecule(EnumMolecule.ttx)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSpiderEye,true,2000,new Chemical[]{this.element(EnumElement.C),null,null,null,this.molecule(EnumMolecule.ttx),null,null,null,this.element(EnumElement.C)}));
  ItemStack itemFermentedSpiderEye=new ItemStack(Item.fermentedSpiderEye);
  DecomposerRecipe.add(new DecomposerRecipe(itemFermentedSpiderEye,new Chemical[]{this.element(EnumElement.Po),this.molecule(EnumMolecule.ethanol)}));
  ItemStack itemBlazePowder=new ItemStack(Item.blazePowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazePowder,new Chemical[]{this.element(EnumElement.Pu)}));
  ItemStack itemMagmaCream=new ItemStack(Item.magmaCream);
  DecomposerRecipe.add(new DecomposerRecipe(itemMagmaCream,new Chemical[]{this.element(EnumElement.Hg),this.element(EnumElement.Pu),this.molecule(EnumMolecule.polycyanoacrylate,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemMagmaCream,true,5000,new Chemical[]{null,this.element(EnumElement.Pu),null,this.molecule(EnumMolecule.polycyanoacrylate),this.element(EnumElement.Hg),this.molecule(EnumMolecule.polycyanoacrylate),null,this.molecule(EnumMolecule.polycyanoacrylate),null}));
  ItemStack itemSpeckledMelon=new ItemStack(Item.speckledMelon);
  DecomposerRecipe.add(new DecomposerRecipe(itemSpeckledMelon,new Chemical[]{this.molecule(EnumMolecule.water,4),this.molecule(EnumMolecule.whitePigment),this.element(EnumElement.Au,1)}));
  ItemStack itemEmerald=new ItemStack(Item.emerald);
  DecomposerRecipe.add(new DecomposerRecipe(itemEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.Cr,2),this.element(EnumElement.V,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEmerald,true,80000,new Chemical[]{null,this.element(EnumElement.Cr),null,this.element(EnumElement.V),this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.V),null,this.element(EnumElement.Cr),null}));
  ItemStack itemCarrot=new ItemStack(Item.carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemCarrot,new Chemical[]{this.molecule(EnumMolecule.ret)}));
  ItemStack itemPotato=new ItemStack(Item.potato);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPotato,0.4F,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.K,2),this.molecule(EnumMolecule.cellulose)}));
  ItemStack itemGoldenCarrot=new ItemStack(Item.goldenCarrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemGoldenCarrot,new Chemical[]{this.molecule(EnumMolecule.ret),this.element(EnumElement.Au,4)}));
  ItemStack itemNetherStar=new ItemStack(Item.netherStar);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherStar,new Chemical[]{this.element(EnumElement.Cn,16),elementHydrogen,elementHydrogen,elementHydrogen,elementHelium,elementHelium,elementHelium,elementCarbon,elementCarbon}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherStar,true,500000,new Chemical[]{elementHelium,elementHelium,elementHelium,elementCarbon,this.element(EnumElement.Cn,16),elementHelium,elementHydrogen,elementHydrogen,elementHydrogen}));
  ItemStack itemNetherQuartz=new ItemStack(Item.netherQuartz);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherQuartz,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.galliumarsenide,1)}));
  ItemStack itemRecord13=new ItemStack(Item.record13);
  ItemStack itemRecordCat=new ItemStack(Item.recordCat);
  ItemStack itemRecordFar=new ItemStack(Item.recordFar);
  ItemStack itemRecordMall=new ItemStack(Item.recordMall);
  ItemStack itemRecordMellohi=new ItemStack(Item.recordMellohi);
  ItemStack itemRecordStal=new ItemStack(Item.recordStal);
  ItemStack itemRecordStrad=new ItemStack(Item.recordStrad);
  ItemStack itemRecordWard=new ItemStack(Item.recordWard);
  ItemStack itemRecordChirp=new ItemStack(Item.recordChirp);
  DecomposerRecipe.add(new DecomposerRecipe(itemRecord13,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordCat,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordFar,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMall,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMellohi,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStal,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStrad,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordWard,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordChirp,new Chemical[]{moleculePolyvinylChloride}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecord13,true,1000,new Chemical[]{moleculePolyvinylChloride,null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordCat,true,1000,new Chemical[]{null,moleculePolyvinylChloride,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordFar,true,1000,new Chemical[]{null,null,moleculePolyvinylChloride,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMall,true,1000,new Chemical[]{null,null,null,moleculePolyvinylChloride,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMellohi,true,1000,new Chemical[]{null,null,null,null,moleculePolyvinylChloride,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStal,true,1000,new Chemical[]{null,null,null,null,null,moleculePolyvinylChloride,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStrad,true,1000,new Chemical[]{null,null,null,null,null,null,moleculePolyvinylChloride,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordWard,true,1000,new Chemical[]{null,null,null,null,null,null,null,moleculePolyvinylChloride,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordChirp,true,1000,new Chemical[]{null,null,null,null,null,null,null,null,moleculePolyvinylChloride}));
}","public void registerVanillaChemicalRecipes(){
  Molecule moleculeSiliconDioxide=this.molecule(EnumMolecule.siliconDioxide,4);
  Molecule moleculeCellulose=this.molecule(EnumMolecule.cellulose,1);
  Molecule moleculePolyvinylChloride=this.molecule(EnumMolecule.polyvinylChloride);
  Element elementHydrogen=this.element(EnumElement.H,64);
  Element elementHelium=this.element(EnumElement.He,64);
  Element elementCarbon=this.element(EnumElement.C,64);
  ItemStack blockStone=new ItemStack(Block.stone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockStone,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.stone,7),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,this.element(EnumElement.O,2),null,null}));
  ItemStack blockGrass=new ItemStack(Block.grass);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockGrass,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)}),new DecomposerRecipe(new Chemical[]{moleculeCellulose})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.grass,16),true,50,new Chemical[]{null,moleculeCellulose,null,null,this.element(EnumElement.O,2),this.element(EnumElement.Si)}));
  ItemStack blockDirt=new ItemStack(Block.dirt);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockDirt,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.dirt,16),true,50,new Chemical[]{null,null,null,null,this.element(EnumElement.O,2),this.element(EnumElement.Si)}));
  ItemStack blockCobblestone=new ItemStack(Block.cobblestone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockCobblestone,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na),this.element(EnumElement.Cl)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.cobblestone,8),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,null,this.element(EnumElement.O,2),null}));
  ItemStack blockOakWoodPlanks=new ItemStack(Block.planks,1,0);
  ItemStack blockSpruceWoodPlanks=new ItemStack(Block.planks,1,1);
  ItemStack blockBirchWoodPlanks=new ItemStack(Block.planks,1,2);
  ItemStack blockJungleWoodPlanks=new ItemStack(Block.planks,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWoodPlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  ItemStack blockOakSapling=new ItemStack(Block.sapling,1,0);
  ItemStack blockSpruceSapling=new ItemStack(Block.sapling,1,1);
  ItemStack blockBirchSapling=new ItemStack(Block.sapling,1,2);
  ItemStack blockJungleSapling=new ItemStack(Block.sapling,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleSapling,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakSapling,true,20,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceSapling,true,20,new Chemical[]{null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchSapling,true,20,new Chemical[]{null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleSapling,true,20,new Chemical[]{null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null,null}));
  ItemStack blockWaterSource=new ItemStack(Block.waterMoving);
  ItemStack blockWaterStill=new ItemStack(Block.waterStill);
  DecomposerRecipe.add(new DecomposerRecipe(blockWaterSource,new Chemical[]{this.molecule(EnumMolecule.water,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockWaterStill,new Chemical[]{this.molecule(EnumMolecule.water,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWaterSource,false,20,new Chemical[]{this.molecule(EnumMolecule.water,16)}));
  ItemStack blockSand=new ItemStack(Block.sand);
  DecomposerRecipe.add(new DecomposerRecipe(blockSand,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSand,true,200,new Chemical[]{moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide}));
  ItemStack blockGravel=new ItemStack(Block.gravel);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGravel,0.35F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGravel,true,30,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.siliconDioxide)}));
  ItemStack oreGold=new ItemStack(Block.oreGold);
  DecomposerRecipe.add(new DecomposerRecipe(oreGold,new Chemical[]{this.element(EnumElement.Au,48)}));
  ItemStack oreIron=new ItemStack(Block.oreIron);
  DecomposerRecipe.add(new DecomposerRecipe(oreIron,new Chemical[]{this.element(EnumElement.Fe,48)}));
  ItemStack oreCoal=new ItemStack(Block.oreCoal);
  DecomposerRecipe.add(new DecomposerRecipe(oreCoal,new Chemical[]{this.element(EnumElement.C,48)}));
  ItemStack blockOakWood=new ItemStack(Block.wood,1,0);
  ItemStack blockSpruceWood=new ItemStack(Block.wood,1,1);
  ItemStack blockBirchWood=new ItemStack(Block.wood,1,2);
  ItemStack blockJungleWood=new ItemStack(Block.wood,1,3);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOakWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockSpruceWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBirchWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockJungleWood,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOakWood,true,100,new Chemical[]{moleculeCellulose,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSpruceWood,true,100,new Chemical[]{null,null,null,null,moleculeCellulose,null,moleculeCellulose,moleculeCellulose,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBirchWood,true,100,new Chemical[]{moleculeCellulose,null,moleculeCellulose,null,null,null,moleculeCellulose,null,moleculeCellulose}));
  SynthesisRecipe.add(new SynthesisRecipe(blockJungleWood,true,100,new Chemical[]{moleculeCellulose,null,null,moleculeCellulose,moleculeCellulose,null,moleculeCellulose,null,null}));
  ItemStack blockGlass=new ItemStack(Block.glass);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlass,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlass,true,500,new Chemical[]{moleculeSiliconDioxide,null,moleculeSiliconDioxide,null,null,null,moleculeSiliconDioxide,null,moleculeSiliconDioxide}));
  ItemStack blockOreLapis=new ItemStack(Block.oreLapis);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreLapis,new Chemical[]{this.molecule(EnumMolecule.lazurite,6),this.molecule(EnumMolecule.sodalite),this.molecule(EnumMolecule.noselite),this.molecule(EnumMolecule.calcite),this.molecule(EnumMolecule.pyrite)}));
  ItemStack blockCobweb=new ItemStack(Block.web);
  DecomposerRecipe.add(new DecomposerRecipe(blockCobweb,new Chemical[]{this.molecule(EnumMolecule.fibroin)}));
  ItemStack blockTallGrass=new ItemStack(Block.tallGrass,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockTallGrass,0.1F,new Chemical[]{new Molecule(EnumMolecule.afroman,2)}));
  ItemStack blockSandStone=new ItemStack(Block.sandStone,1,0);
  ItemStack blockChiseledSandStone=new ItemStack(Block.sandStone,1,1);
  ItemStack blockSmoothSandStone=new ItemStack(Block.sandStone,1,2);
  DecomposerRecipe.add(new DecomposerRecipe(blockSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockChiseledSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockSmoothSandStone,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSandStone,true,20,new Chemical[]{null,null,null,null,this.molecule(EnumMolecule.siliconDioxide,16),null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockChiseledSandStone,true,20,new Chemical[]{null,null,null,null,null,null,null,this.molecule(EnumMolecule.siliconDioxide,16),null}));
  SynthesisRecipe.add(new SynthesisRecipe(blockSmoothSandStone,true,20,new Chemical[]{null,this.molecule(EnumMolecule.siliconDioxide,16),null,null,null,null,null,null,null}));
  ItemStack blockWool=new ItemStack(Block.cloth,1,0);
  ItemStack blockOrangeWool=new ItemStack(Block.cloth,1,1);
  ItemStack blockMagentaWool=new ItemStack(Block.cloth,1,2);
  ItemStack blockLightBlueWool=new ItemStack(Block.cloth,1,3);
  ItemStack blockYellowWool=new ItemStack(Block.cloth,1,4);
  ItemStack blockLimeWool=new ItemStack(Block.cloth,1,5);
  ItemStack blockPinkWool=new ItemStack(Block.cloth,1,6);
  ItemStack blockGrayWool=new ItemStack(Block.cloth,1,7);
  ItemStack blockLightGrayWool=new ItemStack(Block.cloth,1,8);
  ItemStack blockCyanWool=new ItemStack(Block.cloth,1,9);
  ItemStack blockPurpleWool=new ItemStack(Block.cloth,1,10);
  ItemStack blockBlueWool=new ItemStack(Block.cloth,1,11);
  ItemStack blockBrownWool=new ItemStack(Block.cloth,1,12);
  ItemStack blockGreenWool=new ItemStack(Block.cloth,1,13);
  ItemStack blockRedWool=new ItemStack(Block.cloth,1,14);
  ItemStack blockBlackWool=new ItemStack(Block.cloth,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOrangeWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMagentaWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightBlueWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockYellowWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLimeWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPinkWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGrayWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockLightGrayWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockCyanWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPurpleWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlueWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBrownWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockGreenWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockRedWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(blockBlackWool,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockOrangeWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockMagentaWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightBlueWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockYellowWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLimeWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPinkWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGrayWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockLightGrayWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCyanWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPurpleWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlueWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGreenWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockRedWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockBlackWool,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  ItemStack blockPlantYellow=new ItemStack(Block.plantYellow);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPlantYellow,0.3F,new Chemical[]{new Molecule(EnumMolecule.shikimicAcid,2)}));
  ItemStack blockMushroomBrown=new ItemStack(Block.mushroomBrown);
  ItemStack blockMushroomRed=new ItemStack(Block.mushroomRed);
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomBrown,new Chemical[]{this.molecule(EnumMolecule.psilocybin),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockMushroomRed,new Chemical[]{this.molecule(EnumMolecule.pantherine),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockGold),new Chemical[]{this.element(EnumElement.Au,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockIron),new Chemical[]{this.element(EnumElement.Fe,144)}));
  ItemStack blockTnt=new ItemStack(Block.tnt);
  DecomposerRecipe.add(new DecomposerRecipe(blockTnt,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockTnt,false,1000,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  ItemStack blockObsidian=new ItemStack(Block.obsidian);
  DecomposerRecipe.add(new DecomposerRecipe(blockObsidian,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16),this.molecule(EnumMolecule.magnesiumOxide,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockObsidian,true,1000,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),null,this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2)}));
  ItemStack blockOreDiamond=new ItemStack(Block.oreDiamond);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,6)}));
  ItemStack blockDiamond=new ItemStack(Block.blockDiamond);
  DecomposerRecipe.add(new DecomposerRecipe(blockDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,36)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockDiamond,true,120000,new Chemical[]{this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4)}));
  ItemStack blockPressurePlatePlanks=new ItemStack(Block.pressurePlatePlanks);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockPressurePlatePlanks,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,4)}));
  ItemStack blockOreRedstone=new ItemStack(Block.oreRedstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockOreRedstone,0.8F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide,9),this.element(EnumElement.Cu,9)}));
  ItemStack blockCactus=new ItemStack(Block.cactus);
  DecomposerRecipe.add(new DecomposerRecipe(blockCactus,new Chemical[]{this.molecule(EnumMolecule.mescaline),this.molecule(EnumMolecule.water,20)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockCactus,true,200,new Chemical[]{this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.mescaline),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5)}));
  ItemStack blockPumpkin=new ItemStack(Block.pumpkin);
  DecomposerRecipe.add(new DecomposerRecipe(blockPumpkin,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockPumpkin,false,400,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  ItemStack blockNetherrack=new ItemStack(Block.netherrack);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockNetherrack,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.Ni),this.element(EnumElement.Tc)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,3),this.element(EnumElement.Ti),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,1),this.element(EnumElement.W,4),this.element(EnumElement.Cr,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,10),this.element(EnumElement.W,1),this.element(EnumElement.Zn,8),this.element(EnumElement.Be,4)})}));
  ItemStack itemPotion=new ItemStack(Item.potion,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemPotion,new Chemical[]{this.molecule(EnumMolecule.water,8)}));
  ItemStack blockSlowSand=new ItemStack(Block.slowSand);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockSlowSand,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,3),this.element(EnumElement.Be,1),this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,1),this.element(EnumElement.Si,5),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,6),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es,1),this.element(EnumElement.O,2)})}));
  ItemStack blockGlowStone=new ItemStack(Block.glowStone);
  DecomposerRecipe.add(new DecomposerRecipe(blockGlowStone,new Chemical[]{this.element(EnumElement.P,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockGlowStone,true,500,new Chemical[]{this.element(EnumElement.P),null,this.element(EnumElement.P),this.element(EnumElement.P),null,this.element(EnumElement.P),null,null,null}));
  ItemStack blockThinGlass=new ItemStack(Block.thinGlass);
  DecomposerRecipe.add(new DecomposerRecipe(blockThinGlass,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,1)}));
  SynthesisRecipe.add(new SynthesisRecipe(blockThinGlass,true,50,new Chemical[]{null,null,null,this.molecule(EnumMolecule.siliconDioxide),null,null,null,null,null}));
  ItemStack blockMelon=new ItemStack(Block.melon);
  DecomposerRecipe.add(new DecomposerRecipe(blockMelon,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin),this.molecule(EnumMolecule.asparticAcid),this.molecule(EnumMolecule.water,16)}));
  ItemStack blockMycelium=new ItemStack(Block.mycelium);
  DecomposerRecipe.add(new DecomposerRecipeChance(blockMycelium,0.09F,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.mycelium,16),false,300,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  ItemStack blockWhiteStone=new ItemStack(Block.whiteStone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(blockWhiteStone,0.8F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.H,4),this.element(EnumElement.Li)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pu)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Nd)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.H,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Be,8)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Li,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Rb)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  ItemStack blockOreEmerald=new ItemStack(Block.oreEmerald);
  DecomposerRecipe.add(new DecomposerRecipe(blockOreEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,6),this.element(EnumElement.Cr,6),this.element(EnumElement.V,6)}));
  ItemStack blockEmerald=new ItemStack(Block.blockEmerald);
  SynthesisRecipe.add(new SynthesisRecipe(blockEmerald,true,150000,new Chemical[]{this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.V,9),this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.V,9),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(blockEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.Cr,18),this.element(EnumElement.V,18)}));
  ItemStack itemAppleRed=new ItemStack(Item.appleRed);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleRed,new Chemical[]{this.molecule(EnumMolecule.malicAcid)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemAppleRed,false,400,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.molecule(EnumMolecule.water,2)}));
  ItemStack itemArrow=new ItemStack(Item.arrow);
  DecomposerRecipe.add(new DecomposerRecipe(itemArrow,new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O,2),this.element(EnumElement.N,6)}));
  ItemStack itemCoal=new ItemStack(Item.coal);
  DecomposerRecipe.add(new DecomposerRecipe(itemCoal,new Chemical[]{this.element(EnumElement.C,16)}));
  ItemStack itemChar=new ItemStack(Item.coal,1,1);
  DecomposerRecipe.add(new DecomposerRecipe(itemChar,new Chemical[]{this.element(EnumElement.C,30)}));
  ItemStack itemDiamond=new ItemStack(Item.diamond);
  DecomposerRecipe.add(new DecomposerRecipe(itemDiamond,new Chemical[]{this.molecule(EnumMolecule.fullrene,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDiamond,true,'\uea60',new Chemical[]{null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null}));
  ItemStack itemIngotIron=new ItemStack(Item.ingotIron);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotIron,new Chemical[]{this.element(EnumElement.Fe,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotIron,false,1000,new Chemical[]{this.element(EnumElement.Fe,16)}));
  ItemStack itemIngotGold=new ItemStack(Item.ingotGold);
  DecomposerRecipe.add(new DecomposerRecipe(itemIngotGold,new Chemical[]{this.element(EnumElement.Au,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemIngotGold,false,1000,new Chemical[]{this.element(EnumElement.Au,16)}));
  ItemStack itemStick=new ItemStack(Item.stick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemStick,0.3F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  ItemStack itemSilk=new ItemStack(Item.silk);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSilk,0.45F,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSilk,true,150,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  ItemStack itemFeather=new ItemStack(Item.feather);
  DecomposerRecipe.add(new DecomposerRecipe(itemFeather,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.N,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFeather,true,800,new Chemical[]{this.element(EnumElement.N),this.molecule(EnumMolecule.water,2),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,1),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,5),this.element(EnumElement.N)}));
  ItemStack itemGunpowder=new ItemStack(Item.gunpowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemGunpowder,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.S,2),this.element(EnumElement.C)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGunpowder,true,600,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.C),null,this.element(EnumElement.S,2),null,null,null,null,null}));
  ItemStack itemBread=new ItemStack(Item.bread);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBread,0.1F,new Chemical[]{this.molecule(EnumMolecule.starch),this.molecule(EnumMolecule.sucrose)}));
  ItemStack itemFlint=new ItemStack(Item.flint);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemFlint,0.5F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemFlint,true,100,new Chemical[]{null,moleculeSiliconDioxide,null,moleculeSiliconDioxide,moleculeSiliconDioxide,moleculeSiliconDioxide,null,null,null}));
  ItemStack itemAppleGold=new ItemStack(Item.appleGold,1,0);
  DecomposerRecipe.add(new DecomposerRecipe(itemAppleGold,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.element(EnumElement.Au,64)}));
  ItemStack itemDoorWood=new ItemStack(Item.doorWood);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDoorWood,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,12)}));
  ItemStack itemBucketWater=new ItemStack(Item.bucketWater);
  DecomposerRecipe.add(new DecomposerRecipe(itemBucketWater,new Chemical[]{this.molecule(EnumMolecule.water,16),this.element(EnumElement.Fe,48)}));
  ItemStack itemRedstone=new ItemStack(Item.redstone);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRedstone,0.42F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide),this.element(EnumElement.Cu)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRedstone,true,100,new Chemical[]{null,null,this.molecule(EnumMolecule.iron3oxide),null,this.element(EnumElement.Cu),null,null,null,null}));
  ItemStack itemSnowball=new ItemStack(Item.snowball);
  DecomposerRecipe.add(new DecomposerRecipe(itemSnowball,new Chemical[]{this.molecule(EnumMolecule.water)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.snowball,5),true,20,new Chemical[]{this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water)}));
  ItemStack itemLeather=new ItemStack(Item.leather);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemLeather,0.5F,new Chemical[]{this.molecule(EnumMolecule.arginine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.keratin)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.leather,5),true,700,new Chemical[]{this.molecule(EnumMolecule.arginine),null,null,null,this.molecule(EnumMolecule.keratin),null,null,null,this.molecule(EnumMolecule.glycine)}));
  ItemStack itemBrick=new ItemStack(Item.brick);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemBrick,0.5F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.brick,8),true,400,new Chemical[]{this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null,this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null}));
  ItemStack itemClay=new ItemStack(Item.clay);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemClay,0.3F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.clay,12),false,100,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  ItemStack itemReed=new ItemStack(Item.reed);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemReed,0.65F,new Chemical[]{this.molecule(EnumMolecule.sucrose),this.element(EnumElement.H,2),this.element(EnumElement.O)}));
  ItemStack itemPaper=new ItemStack(Item.paper);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPaper,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.paper,16),true,150,new Chemical[]{null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null}));
  ItemStack itemSlimeBall=new ItemStack(Item.slimeBall);
  DecomposerRecipe.add(new DecomposerRecipeSelect(itemSlimeBall,0.9F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.polycyanoacrylate)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Hg)}),new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.water,10)})}));
  ItemStack itemGlowstone=new ItemStack(Item.glowstone);
  DecomposerRecipe.add(new DecomposerRecipe(itemGlowstone,new Chemical[]{this.element(EnumElement.P)}));
  ItemStack itemDyePowderBlack=new ItemStack(Item.dyePowder,1,0);
  ItemStack itemDyePowderRed=new ItemStack(Item.dyePowder,1,1);
  ItemStack itemDyePowderGreen=new ItemStack(Item.dyePowder,1,2);
  ItemStack itemDyePowderBrown=new ItemStack(Item.dyePowder,1,3);
  ItemStack itemDyePowderBlue=new ItemStack(Item.dyePowder,1,4);
  ItemStack itemDyePowderPurple=new ItemStack(Item.dyePowder,1,5);
  ItemStack itemDyePowderCyan=new ItemStack(Item.dyePowder,1,6);
  ItemStack itemDyePowderLightGray=new ItemStack(Item.dyePowder,1,7);
  ItemStack itemDyePowderGray=new ItemStack(Item.dyePowder,1,8);
  ItemStack itemDyePowderPink=new ItemStack(Item.dyePowder,1,9);
  ItemStack itemDyePowderLime=new ItemStack(Item.dyePowder,1,10);
  ItemStack itemDyePowderYellow=new ItemStack(Item.dyePowder,1,11);
  ItemStack itemDyePowderLightBlue=new ItemStack(Item.dyePowder,1,12);
  ItemStack itemDyePowderMagenta=new ItemStack(Item.dyePowder,1,13);
  ItemStack itemDyePowderOrange=new ItemStack(Item.dyePowder,1,14);
  ItemStack itemDyePowderWhite=new ItemStack(Item.dyePowder,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlack,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderRed,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGreen,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(itemDyePowderBrown,0.4F,new Chemical[]{this.molecule(EnumMolecule.theobromine),this.molecule(EnumMolecule.tannicacid)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderBlue,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPurple,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderCyan,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightGray,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderGray,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderPink,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLime,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderYellow,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderLightBlue,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderMagenta,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderOrange,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(itemDyePowderWhite,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlack,false,50,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderRed,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGreen,false,50,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBrown,false,400,new Chemical[]{this.molecule(EnumMolecule.theobromine)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderBlue,false,50,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPurple,false,50,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderCyan,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightGray,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderGray,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderPink,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLime,false,50,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderYellow,false,50,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderLightBlue,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderMagenta,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderOrange,false,50,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemDyePowderWhite,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  ItemStack itemBone=new ItemStack(Item.bone);
  DecomposerRecipe.add(new DecomposerRecipe(itemBone,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBone,false,100,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  ItemStack itemSugar=new ItemStack(Item.sugar);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSugar,0.75F,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSugar,false,400,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  ItemStack itemMelon=new ItemStack(Item.melon);
  DecomposerRecipe.add(new DecomposerRecipe(itemMelon,new Chemical[]{this.molecule(EnumMolecule.water)}));
  ItemStack itemChickenCooked=new ItemStack(Item.chickenCooked);
  DecomposerRecipe.add(new DecomposerRecipe(itemChickenCooked,new Chemical[]{this.element(EnumElement.K),this.element(EnumElement.Na),this.element(EnumElement.C,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemChickenCooked,true,5000,new Chemical[]{this.element(EnumElement.K,16),this.element(EnumElement.Na,16),this.element(EnumElement.C,16)}));
  ItemStack itemRottenFlesh=new ItemStack(Item.rottenFlesh);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemRottenFlesh,0.05F,new Chemical[]{new Molecule(EnumMolecule.nod,1)}));
  ItemStack itemEnderPearl=new ItemStack(Item.enderPearl);
  DecomposerRecipe.add(new DecomposerRecipe(itemEnderPearl,new Chemical[]{this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEnderPearl,true,5000,new Chemical[]{this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate)}));
  ItemStack itemBlazeRod=new ItemStack(Item.blazeRod);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazeRod,new Chemical[]{this.element(EnumElement.Pu,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemBlazeRod,true,15000,new Chemical[]{this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null}));
  ItemStack itemGhastTear=new ItemStack(Item.ghastTear);
  DecomposerRecipe.add(new DecomposerRecipe(itemGhastTear,new Chemical[]{this.element(EnumElement.Yb,4),this.element(EnumElement.No,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemGhastTear,true,15000,new Chemical[]{this.element(EnumElement.Yb),this.element(EnumElement.Yb),this.element(EnumElement.No),null,this.element(EnumElement.Yb,2),this.element(EnumElement.No,2),null,this.element(EnumElement.No),null}));
  ItemStack itemNetherStalkSeeds=new ItemStack(Item.netherStalkSeeds);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemNetherStalkSeeds,0.5F,new Chemical[]{this.molecule(EnumMolecule.coke)}));
  ItemStack itemSpiderEye=new ItemStack(Item.spiderEye);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemSpiderEye,0.2F,new Chemical[]{this.molecule(EnumMolecule.ttx)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemSpiderEye,true,2000,new Chemical[]{this.element(EnumElement.C),null,null,null,this.molecule(EnumMolecule.ttx),null,null,null,this.element(EnumElement.C)}));
  ItemStack itemFermentedSpiderEye=new ItemStack(Item.fermentedSpiderEye);
  DecomposerRecipe.add(new DecomposerRecipe(itemFermentedSpiderEye,new Chemical[]{this.element(EnumElement.Po),this.molecule(EnumMolecule.ethanol)}));
  ItemStack itemBlazePowder=new ItemStack(Item.blazePowder);
  DecomposerRecipe.add(new DecomposerRecipe(itemBlazePowder,new Chemical[]{this.element(EnumElement.Pu)}));
  ItemStack itemMagmaCream=new ItemStack(Item.magmaCream);
  DecomposerRecipe.add(new DecomposerRecipe(itemMagmaCream,new Chemical[]{this.element(EnumElement.Hg),this.element(EnumElement.Pu),this.molecule(EnumMolecule.polycyanoacrylate,3)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemMagmaCream,true,5000,new Chemical[]{null,this.element(EnumElement.Pu),null,this.molecule(EnumMolecule.polycyanoacrylate),this.element(EnumElement.Hg),this.molecule(EnumMolecule.polycyanoacrylate),null,this.molecule(EnumMolecule.polycyanoacrylate),null}));
  ItemStack itemSpeckledMelon=new ItemStack(Item.speckledMelon);
  DecomposerRecipe.add(new DecomposerRecipe(itemSpeckledMelon,new Chemical[]{this.molecule(EnumMolecule.water,4),this.molecule(EnumMolecule.whitePigment),this.element(EnumElement.Au,1)}));
  ItemStack itemEmerald=new ItemStack(Item.emerald);
  DecomposerRecipe.add(new DecomposerRecipe(itemEmerald,new Chemical[]{this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.Cr,2),this.element(EnumElement.V,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(itemEmerald,true,80000,new Chemical[]{null,this.element(EnumElement.Cr),null,this.element(EnumElement.V),this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.V),null,this.element(EnumElement.Cr),null}));
  ItemStack itemCarrot=new ItemStack(Item.carrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemCarrot,new Chemical[]{this.molecule(EnumMolecule.ret)}));
  ItemStack itemPotato=new ItemStack(Item.potato);
  DecomposerRecipe.add(new DecomposerRecipeChance(itemPotato,0.4F,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.K,2),this.molecule(EnumMolecule.cellulose)}));
  ItemStack itemGoldenCarrot=new ItemStack(Item.goldenCarrot);
  DecomposerRecipe.add(new DecomposerRecipe(itemGoldenCarrot,new Chemical[]{this.molecule(EnumMolecule.ret),this.element(EnumElement.Au,4)}));
  ItemStack itemNetherStar=new ItemStack(Item.netherStar);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherStar,new Chemical[]{this.element(EnumElement.Cn,16),elementHydrogen,elementHydrogen,elementHydrogen,elementHelium,elementHelium,elementHelium,elementCarbon,elementCarbon}));
  SynthesisRecipe.add(new SynthesisRecipe(itemNetherStar,true,500000,new Chemical[]{elementHelium,elementHelium,elementHelium,elementCarbon,this.element(EnumElement.Cn,16),elementHelium,elementHydrogen,elementHydrogen,elementHydrogen}));
  ItemStack itemNetherQuartz=new ItemStack(Item.netherQuartz);
  DecomposerRecipe.add(new DecomposerRecipe(itemNetherQuartz,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.galliumarsenide,1)}));
  ItemStack itemRecord13=new ItemStack(Item.record13);
  ItemStack itemRecordCat=new ItemStack(Item.recordCat);
  ItemStack itemRecordFar=new ItemStack(Item.recordFar);
  ItemStack itemRecordMall=new ItemStack(Item.recordMall);
  ItemStack itemRecordMellohi=new ItemStack(Item.recordMellohi);
  ItemStack itemRecordStal=new ItemStack(Item.recordStal);
  ItemStack itemRecordStrad=new ItemStack(Item.recordStrad);
  ItemStack itemRecordWard=new ItemStack(Item.recordWard);
  ItemStack itemRecordChirp=new ItemStack(Item.recordChirp);
  DecomposerRecipe.add(new DecomposerRecipe(itemRecord13,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordCat,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordFar,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMall,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordMellohi,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStal,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordStrad,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordWard,new Chemical[]{moleculePolyvinylChloride}));
  DecomposerRecipe.add(new DecomposerRecipe(itemRecordChirp,new Chemical[]{moleculePolyvinylChloride}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecord13,true,1000,new Chemical[]{moleculePolyvinylChloride,null,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordCat,true,1000,new Chemical[]{null,moleculePolyvinylChloride,null,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordFar,true,1000,new Chemical[]{null,null,moleculePolyvinylChloride,null,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMall,true,1000,new Chemical[]{null,null,null,moleculePolyvinylChloride,null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordMellohi,true,1000,new Chemical[]{null,null,null,null,moleculePolyvinylChloride,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStal,true,1000,new Chemical[]{null,null,null,null,null,moleculePolyvinylChloride,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordStrad,true,1000,new Chemical[]{null,null,null,null,null,null,moleculePolyvinylChloride,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordWard,true,1000,new Chemical[]{null,null,null,null,null,null,null,moleculePolyvinylChloride,null}));
  SynthesisRecipe.add(new SynthesisRecipe(itemRecordChirp,true,1000,new Chemical[]{null,null,null,null,null,null,null,null,moleculePolyvinylChloride}));
}",0.9996796347836534
21882,"@Override public void handle(OreRegisterEvent oreEvent){
  if (oreEvent.Name.equals(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(oreEvent.Ore,certusQuartzDecompositionFormula));
    if (Loader.isModLoaded(""String_Node_Str"")) {
      SynthesisRecipe.add(new SynthesisRecipe(oreEvent.Ore,true,30000,certusQuartzDustSynthesisFormula));
    }
  }
 else   if (oreEvent.Name.equals(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(oreEvent.Ore,certusQuartzDecompositionFormula));
    if (!Loader.isModLoaded(""String_Node_Str"")) {
      SynthesisRecipe.add(new SynthesisRecipe(oreEvent.Ore,true,30000,certusQuartzCrystalSynthesisFormula));
    }
  }
 else {
    ModMinechem.logger.info(""String_Node_Str"" + oreEvent.Name);
  }
}","@Override public void handle(OreRegisterEvent oreEvent){
  if (oreEvent.Name.equals(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(oreEvent.Ore,certusQuartzDecompositionFormula));
    SynthesisRecipe.add(new SynthesisRecipe(oreEvent.Ore,true,30000,certusQuartzDustSynthesisFormula));
  }
}",0.5783582089552238
21883,"@Override public void handle(OreRegisterEvent event){
  EnumOre ore=EnumOre.valueOf(event.Name);
switch (ore) {
case stoneGraniteBlack:
    DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.quartz,20),new Molecule(EnumMolecule.plagioclaseAlbite,4),new Molecule(EnumMolecule.plagioclaseAnorthite,4),new Molecule(EnumMolecule.orthoclase,3),new Molecule(EnumMolecule.biotite,1)}));
  break;
case stoneGraniteRed:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.quartz,20),new Molecule(EnumMolecule.plagioclaseAlbite,3),new Molecule(EnumMolecule.plagioclaseAnorthite,3),new Molecule(EnumMolecule.orthoclase,4),new Molecule(EnumMolecule.biotite,1),new Molecule(EnumMolecule.whitePigment,1)}));
break;
case stoneRhyolite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.quartz,18),new Molecule(EnumMolecule.plagioclaseAlbite,5),new Molecule(EnumMolecule.plagioclaseAnorthite,5),new Molecule(EnumMolecule.orthoclase,2),new Molecule(EnumMolecule.biotite,1),new Molecule(EnumMolecule.augite,1)}));
break;
case stoneAndesite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,12),new Molecule(EnumMolecule.plagioclaseAnorthite,12),new Molecule(EnumMolecule.augite,8)}));
break;
case stoneGabbro:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,16),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.augite,7),new Molecule(EnumMolecule.olivine,1)}));
break;
case stoneBasalt:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,8),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.augite,12),new Molecule(EnumMolecule.olivine,4)}));
break;
case stoneKomatiite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,8),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.augite,12),new Molecule(EnumMolecule.olivine,4)}));
break;
case stoneDacite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,6),new Molecule(EnumMolecule.plagioclaseAnorthite,6),new Molecule(EnumMolecule.biotite,8),new Molecule(EnumMolecule.quartz,8),new Molecule(EnumMolecule.augite,4)}));
break;
case stoneGneiss:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.orthoclase,8),new Molecule(EnumMolecule.plagioclaseAlbite,4),new Molecule(EnumMolecule.plagioclaseAnorthite,6),new Molecule(EnumMolecule.biotite,4),new Molecule(EnumMolecule.quartz,6),new Molecule(EnumMolecule.augite,4)}));
break;
case stoneEclogite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,8),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.augite,12),new Molecule(EnumMolecule.olivine,4)}));
break;
case stoneMarble:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.calcite,32)}));
break;
case stoneQuartzite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.quartz,32)}));
break;
case stoneGreenschist:
case stoneBlueschist:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,8),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.biotite,4),new Molecule(EnumMolecule.quartz,8),new Molecule(EnumMolecule.augite,4)}));
break;
case stoneSoapstone:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.talc,32)}));
break;
default :
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.quartz,8),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.plagioclaseAlbite,8),new Molecule(EnumMolecule.orthoclase,8)}));
break;
}
}","@Override public void handle(OreRegisterEvent event){
  EnumOre ore=EnumOre.valueOf(event.Name);
switch (ore) {
case stoneGraniteBlack:
    DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.siliconDioxide,20),new Molecule(EnumMolecule.plagioclaseAlbite,4),new Molecule(EnumMolecule.plagioclaseAnorthite,4),new Molecule(EnumMolecule.orthoclase,3),new Molecule(EnumMolecule.biotite,1)}));
  break;
case stoneGraniteRed:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.siliconDioxide,20),new Molecule(EnumMolecule.plagioclaseAlbite,3),new Molecule(EnumMolecule.plagioclaseAnorthite,3),new Molecule(EnumMolecule.orthoclase,4),new Molecule(EnumMolecule.biotite,1),new Molecule(EnumMolecule.whitePigment,1)}));
break;
case stoneRhyolite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.siliconDioxide,18),new Molecule(EnumMolecule.plagioclaseAlbite,5),new Molecule(EnumMolecule.plagioclaseAnorthite,5),new Molecule(EnumMolecule.orthoclase,2),new Molecule(EnumMolecule.biotite,1),new Molecule(EnumMolecule.augite,1)}));
break;
case stoneAndesite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,12),new Molecule(EnumMolecule.plagioclaseAnorthite,12),new Molecule(EnumMolecule.augite,8)}));
break;
case stoneGabbro:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,16),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.augite,7),new Molecule(EnumMolecule.olivine,1)}));
break;
case stoneBasalt:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,8),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.augite,12),new Molecule(EnumMolecule.olivine,4)}));
break;
case stoneKomatiite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,8),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.augite,12),new Molecule(EnumMolecule.olivine,4)}));
break;
case stoneDacite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,6),new Molecule(EnumMolecule.plagioclaseAnorthite,6),new Molecule(EnumMolecule.biotite,8),new Molecule(EnumMolecule.siliconDioxide,8),new Molecule(EnumMolecule.augite,4)}));
break;
case stoneGneiss:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.orthoclase,8),new Molecule(EnumMolecule.plagioclaseAlbite,4),new Molecule(EnumMolecule.plagioclaseAnorthite,6),new Molecule(EnumMolecule.biotite,4),new Molecule(EnumMolecule.siliconDioxide,6),new Molecule(EnumMolecule.augite,4)}));
break;
case stoneEclogite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,8),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.augite,12),new Molecule(EnumMolecule.olivine,4)}));
break;
case stoneMarble:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.calcite,32)}));
break;
case stonesiliconDioxideite:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.siliconDioxide,32)}));
break;
case stoneGreenschist:
case stoneBlueschist:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.plagioclaseAlbite,8),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.biotite,4),new Molecule(EnumMolecule.siliconDioxide,8),new Molecule(EnumMolecule.augite,4)}));
break;
case stoneSoapstone:
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.talc,32)}));
break;
default :
DecomposerRecipe.add(new DecomposerRecipe(event.Ore,new Chemical[]{new Molecule(EnumMolecule.siliconDioxide,8),new Molecule(EnumMolecule.plagioclaseAnorthite,8),new Molecule(EnumMolecule.plagioclaseAlbite,8),new Molecule(EnumMolecule.orthoclase,8)}));
break;
}
}",0.978112840466926
21884,"@Override public void registerRenderers(){
  CUSTOM_RENDER_ID=RenderingRegistry.getNextAvailableRenderId();
  MinecraftForgeClient.registerItemRenderer(MinechemItems.element.itemID,new ItemElementRenderer());
  MinecraftForgeClient.registerItemRenderer(MinechemItems.molecule.itemID,new ItemMoleculeRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.itemsList[MinechemBlocks.microscope.blockID].itemID,new ItemMicroscopeRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.itemsList[MinechemBlocks.decomposer.blockID].itemID,new ItemDecomposerRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.itemsList[MinechemBlocks.synthesis.blockID].itemID,new ItemSynthesisRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.itemsList[MinechemBlocks.blueprintProjector.blockID].itemID,new ItemBlueprintProjectorRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.itemsList[MinechemBlocks.chemicalStorage.blockID].itemID,new ItemChemicalStorageRenderer());
  RenderingRegistry.registerBlockHandler(new RenderBlockGhostBlock());
  TickRegistry.registerTickHandler(new TickHandler(),Side.CLIENT);
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityMicroscope.class,new TileEntityMicroscopeRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityDecomposer.class,new TileEntityDecomposerRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntitySynthesis.class,new TileEntitySynthesisRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityBlueprintProjector.class,new TileEntityBlueprintProjectorRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityGhostBlock.class,new TileEntityGhostBlockRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityChemicalStorage.class,new TileEntityChemicalStorageRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityBluePrintPrinter.class,new TileEntityBluePrintPrinterRenderer());
}","@Override public void registerRenderers(){
  CUSTOM_RENDER_ID=RenderingRegistry.getNextAvailableRenderId();
  MinecraftForgeClient.registerItemRenderer(MinechemItems.element.itemID,new ItemElementRenderer());
  MinecraftForgeClient.registerItemRenderer(MinechemItems.molecule.itemID,new ItemMoleculeRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.itemsList[MinechemBlocks.microscope.blockID].itemID,new ItemMicroscopeRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.itemsList[MinechemBlocks.decomposer.blockID].itemID,new ItemDecomposerRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.itemsList[MinechemBlocks.synthesis.blockID].itemID,new ItemSynthesisRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.itemsList[MinechemBlocks.blueprintProjector.blockID].itemID,new ItemBlueprintProjectorRenderer());
  MinecraftForgeClient.registerItemRenderer(Item.itemsList[MinechemBlocks.chemicalStorage.blockID].itemID,new ItemChemicalStorageRenderer());
  TickRegistry.registerTickHandler(new TickHandler(),Side.CLIENT);
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityMicroscope.class,new TileEntityMicroscopeRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityDecomposer.class,new TileEntityDecomposerRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntitySynthesis.class,new TileEntitySynthesisRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityBlueprintProjector.class,new TileEntityBlueprintProjectorRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityGhostBlock.class,new TileEntityGhostBlockRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityChemicalStorage.class,new TileEntityChemicalStorageRenderer());
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityBluePrintPrinter.class,new TileEntityBluePrintPrinterRenderer());
}",0.981437908496732
21885,"@Override public void renderTileEntityAt(TileEntity tileEntity,double x,double y,double z,float scale){
  BlueprintBlock blueprintBlock=getBlueprintBlock(tileEntity);
  if (blueprintBlock == null)   return;
  float alpha=random.nextFloat();
  GL11.glPushMatrix();
  GL11.glTranslated(x + 0.5D,y + 0.5D,z + 0.5D);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_DST_ALPHA);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  renderBlocks.blockAccess=tileEntity.worldObj;
  renderBlocks.renderBlockAsItem(blueprintBlock.block,blueprintBlock.metadata,alpha);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glPopMatrix();
}","@Override public void renderTileEntityAt(TileEntity tileEntity,double x,double y,double z,float scale){
  BlueprintBlock blueprintBlock=getBlueprintBlock(tileEntity);
  if (blueprintBlock == null)   return;
  float alpha=random.nextFloat();
  GL11.glPushMatrix();
  GL11.glTranslated(x + 0.5D,y + 0.5D,z + 0.5D);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,1 - GL11.GL_DST_ALPHA);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  renderBlocks.blockAccess=tileEntity.worldObj;
  renderBlocks.renderBlockAsItem(blueprintBlock.block,blueprintBlock.metadata,alpha);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glPopMatrix();
}",0.9973082099596232
21886,"/** 
 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given coordinates. Args: blockAccess, x, y, z, side
 */
@Override public boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess,int par2,int par3,int par4,int par5){
  int var6=par1IBlockAccess.getBlockId(par2,par3,par4);
  return var6 == this.blockID ? false : super.shouldSideBeRendered(par1IBlockAccess,par2,par3,par4,par5);
}","/** 
 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given coordinates. Args: blockAccess, x, y, z, side
 */
@Override public boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess,int par2,int par3,int par4,int par5){
  return true;
}",0.7713125845737483
21887,"@Override public void handle(OreRegisterEvent oreEvent){
switch (oreEvent.Name) {
case ""String_Node_Str"":
    DecomposerRecipe.add(new DecomposerRecipe(oreEvent.Ore,certusQuartzDecompositionFormula));
  if (Loader.isModLoaded(""String_Node_Str"")) {
    SynthesisRecipe.add(new SynthesisRecipe(oreEvent.Ore,true,20000,certusQuartzDustSynthesisFormula));
  }
break;
case ""String_Node_Str"":
DecomposerRecipe.add(new DecomposerRecipe(oreEvent.Ore,certusQuartzDecompositionFormula));
if (!Loader.isModLoaded(""String_Node_Str"")) {
SynthesisRecipe.add(new SynthesisRecipe(oreEvent.Ore,true,20000,certusQuartzCrystalSynthesisFormula));
}
break;
default :
System.err.println(""String_Node_Str"" + oreEvent.Name);
break;
}
}","@Override public void handle(OreRegisterEvent oreEvent){
switch (oreEvent.Name) {
case ""String_Node_Str"":
    DecomposerRecipe.add(new DecomposerRecipe(oreEvent.Ore,certusQuartzDecompositionFormula));
  if (Loader.isModLoaded(""String_Node_Str"")) {
    SynthesisRecipe.add(new SynthesisRecipe(oreEvent.Ore,true,30000,certusQuartzDustSynthesisFormula));
  }
break;
case ""String_Node_Str"":
DecomposerRecipe.add(new DecomposerRecipe(oreEvent.Ore,certusQuartzDecompositionFormula));
if (!Loader.isModLoaded(""String_Node_Str"")) {
SynthesisRecipe.add(new SynthesisRecipe(oreEvent.Ore,true,30000,certusQuartzCrystalSynthesisFormula));
}
break;
default :
System.err.println(""String_Node_Str"" + oreEvent.Name);
break;
}
}",0.9971870604781996
21888,"public static void renderEffects(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  if (mc.isSingleplayer()) {
    EntityPlayer player=mc.thePlayer;
    if (player instanceof EntityPlayer && player.isPotionActive(PotionInjector.atropineHigh)) {
      PotionEffect DHigh=player.getActivePotionEffect(PotionInjector.atropineHigh);
      int Multiplier=DHigh.getAmplifier();
      if (Multiplier == 1) {
        RenderDelirium(10);
      }
 else       if (Multiplier == 2) {
        RenderDelirium(15);
      }
 else       if (Multiplier == 3) {
        RenderDelirium(20);
      }
 else       if (Multiplier == 4) {
        RenderDelirium(25);
      }
 else {
        RenderDelirium(25);
      }
    }
  }
}","public static void renderEffects(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  if (mc.isSingleplayer()) {
    EntityPlayer player=mc.thePlayer;
    if (player instanceof EntityPlayer && player.isPotionActive(PotionInjector.atropineHigh)) {
      PotionEffect DHigh=player.getActivePotionEffect(PotionInjector.atropineHigh);
      int Multiplier=DHigh.getAmplifier();
      RenderDelirium(5 * Multiplier + 5);
    }
  }
}",0.7182608695652174
21889,"public void RegisterRecipes(){
  ItemStack var1=new ItemStack(Block.stone);
  new ItemStack(Block.cobblestone);
  ItemStack var3=new ItemStack(Block.dirt);
  ItemStack var4=new ItemStack(Block.sand);
  ItemStack var5=new ItemStack(Block.gravel);
  ItemStack var6=new ItemStack(Block.glass);
  ItemStack var7=new ItemStack(Block.thinGlass);
  ItemStack oreIron=new ItemStack(Block.oreIron);
  ItemStack oreGold=new ItemStack(Block.oreGold);
  ItemStack var10=new ItemStack(Block.oreDiamond);
  ItemStack var11=new ItemStack(Block.oreEmerald);
  ItemStack oreCoal=new ItemStack(Block.oreCoal);
  ItemStack var13=new ItemStack(Block.oreRedstone);
  ItemStack var14=new ItemStack(Block.oreLapis);
  ItemStack ingotIron=new ItemStack(Item.ingotIron);
  ItemStack blockIron=new ItemStack(Block.blockIron);
  ItemStack var17=new ItemStack(MinechemItems.atomicManipulator);
  ItemStack var18=new ItemStack(Item.redstone);
  ItemStack var19=new ItemStack(MinechemItems.testTube,16);
  ItemStack paper=new ItemStack(Item.paper);
  ItemStack bdye=new ItemStack(Item.dyePowder,1,6);
  GameRegistry.addRecipe(var19,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),var6});
  GameRegistry.addRecipe(MinechemItems.concaveLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),var6});
  GameRegistry.addRecipe(MinechemItems.convexLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),var6});
  GameRegistry.addRecipe(MinechemItems.microscopeLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),MinechemItems.convexLens,Character.valueOf('B'),MinechemItems.concaveLens});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.microscope),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('L'),MinechemItems.microscopeLens,Character.valueOf('P'),var7,Character.valueOf('I'),ingotIron});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.atomicManipulator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),new ItemStack(Block.pistonBase),Character.valueOf('I'),blockIron});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.decomposer),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),var17,Character.valueOf('I'),ingotIron,Character.valueOf('R'),var18});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.synthesis),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),var17,Character.valueOf('I'),ingotIron,Character.valueOf('R'),var18,Character.valueOf('D'),new ItemStack(Item.diamond)});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.fusion,16,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),ingotIron,Character.valueOf('L'),ItemElement.createStackOf(EnumElement.Pb,1)});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.fusion,16,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),ingotIron,Character.valueOf('W'),ItemElement.createStackOf(EnumElement.W,1),Character.valueOf('B'),ItemElement.createStackOf(EnumElement.Be,1)});
  GameRegistry.addRecipe(MinechemItems.projectorLens,new Object[]{""String_Node_Str"",Character.valueOf('A'),MinechemItems.concaveLens,Character.valueOf('B'),MinechemItems.convexLens});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.blueprintProjector),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),ingotIron,Character.valueOf('P'),var7,Character.valueOf('L'),MinechemItems.projectorLens,Character.valueOf('G'),new ItemStack(Block.redstoneLampIdle)});
  ItemStack var20=new ItemStack(MinechemItems.molecule,1,EnumMolecule.polyvinylChloride.ordinal());
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatFeet),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),var20});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatLegs),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),var20});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatTorso),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),var20});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatHead),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),var20});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.chemicalStorage),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('L'),new ItemStack(MinechemItems.element,1,EnumElement.Pb.ordinal()),Character.valueOf('C'),new ItemStack(Block.chest)});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.IAintAvinit),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('Z'),new ItemStack(Item.ingotIron),Character.valueOf('S'),new ItemStack(Item.stick)});
  GameRegistry.addShapelessRecipe(new ItemStack(MinechemItems.journal),new Object[]{new ItemStack(Item.book),new ItemStack(MinechemItems.testTube)});
  GameRegistry.addShapelessRecipe(new ItemStack(MinechemItems.EmptyPillz,2),new Object[]{new ItemStack(Item.sugar),ItemStack(Item.slimeBall)});
  for (  EnumElement element : EnumElement.values()) {
    GameRegistry.addShapelessRecipe(new ItemStack(MinechemItems.testTube),new Object[]{new ItemStack(MinechemItems.element,element.ordinal())});
  }
  GameRegistry.addRecipe(new RecipeJournalCloning());
  Element var21=this.element(EnumElement.C,64);
  DecomposerRecipe.add(new DecomposerRecipe(oreIron,new Chemical[]{this.element(EnumElement.Fe,32)}));
  DecomposerRecipe.add(new DecomposerRecipe(oreGold,new Chemical[]{this.element(EnumElement.Au,32)}));
  DecomposerRecipe.add(new DecomposerRecipe(var10,new Chemical[]{this.molecule(EnumMolecule.fullrene,6)}));
  DecomposerRecipe.add(new DecomposerRecipe(oreCoal,new Chemical[]{this.element(EnumElement.C,32)}));
  DecomposerRecipe.add(new DecomposerRecipe(var11,new Chemical[]{this.molecule(EnumMolecule.beryl,4),this.element(EnumElement.Cr,4),this.element(EnumElement.V,4)}));
  DecomposerRecipe.add(new DecomposerRecipe(var14,new Chemical[]{this.molecule(EnumMolecule.lazurite,4),this.molecule(EnumMolecule.sodalite),this.molecule(EnumMolecule.noselite),this.molecule(EnumMolecule.calcite),this.molecule(EnumMolecule.pyrite)}));
  ItemStack ingotGold=new ItemStack(Item.ingotGold);
  ItemStack var23=new ItemStack(Item.diamond);
  ItemStack var24=new ItemStack(Item.emerald);
  ItemStack chunkCoal=new ItemStack(Item.coal);
  ItemStack fusionblue=new ItemStack(MinechemItems.blueprint,1,MinechemBlueprint.fusion.id);
  ItemStack fusionBlock1=new ItemStack(MinechemBlocks.fusion,0);
  ItemStack fusionBlock2=new ItemStack(MinechemBlocks.fusion,1);
  DecomposerRecipe.add(new DecomposerRecipe(ingotIron,new Chemical[]{this.element(EnumElement.Fe,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(ingotGold,new Chemical[]{this.element(EnumElement.Au,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(var23,new Chemical[]{this.molecule(EnumMolecule.fullrene,4)}));
  DecomposerRecipe.add(new DecomposerRecipe(var24,new Chemical[]{this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.Cr,2),this.element(EnumElement.V,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(chunkCoal,new Chemical[]{this.element(EnumElement.C,16)}));
  this.recipeIron=new SynthesisRecipe(ingotIron,false,1000,new Chemical[]{this.element(EnumElement.Fe,16)});
  this.recipeGold=new SynthesisRecipe(ingotGold,false,1000,new Chemical[]{this.element(EnumElement.Au,16)});
  SynthesisRecipe.add(recipeIron);
  SynthesisRecipe.add(recipeGold);
  SynthesisRecipe.add(new SynthesisRecipe(var23,true,'\uea60',new Chemical[]{null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null}));
  SynthesisRecipe.add(new SynthesisRecipe(var24,true,80000,new Chemical[]{null,this.element(EnumElement.Cr),null,this.element(EnumElement.V),this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.V),null,this.element(EnumElement.Cr),null}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockIron),new Chemical[]{this.element(EnumElement.Fe,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockGold),new Chemical[]{this.element(EnumElement.Au,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockDiamond),new Chemical[]{this.molecule(EnumMolecule.fullrene,36)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockEmerald),new Chemical[]{this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.Cr,18),this.element(EnumElement.V,18)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.blockDiamond),true,120000,new Chemical[]{this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.blockEmerald),true,150000,new Chemical[]{this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.V,9),this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.V,9),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3)}));
  ItemStack var26=new ItemStack(Block.sandStone);
  ItemStack var27=new ItemStack(Item.flint);
  DecomposerRecipe.add(new DecomposerRecipe(var26,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(var4,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(var6,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(var7,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var5,0.35F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var27,0.5F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  Molecule var28=this.molecule(EnumMolecule.siliconDioxide,4);
  Molecule var29=this.molecule(EnumMolecule.siliconDioxide,4);
  SynthesisRecipe.add(new SynthesisRecipe(var6,true,500,new Chemical[]{var28,null,var28,null,null,null,var28,null,var28}));
  SynthesisRecipe.add(new SynthesisRecipe(var4,true,200,new Chemical[]{var28,var28,var28,var28}));
  SynthesisRecipe.add(new SynthesisRecipe(var27,true,100,new Chemical[]{null,var29,null,var29,var29,var29,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(var7,true,50,new Chemical[]{null,null,null,this.molecule(EnumMolecule.siliconDioxide),null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(var5,true,30,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.siliconDioxide)}));
  ItemStack var30=new ItemStack(Item.feather);
  DecomposerRecipe.add(new DecomposerRecipe(var30,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.N,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(var30,true,800,new Chemical[]{this.element(EnumElement.N),this.molecule(EnumMolecule.water,2),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,1),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,5),this.element(EnumElement.N)}));
  ItemStack var31=new ItemStack(Item.arrow);
  ItemStack var32=new ItemStack(Item.paper);
  ItemStack var33=new ItemStack(Item.leather);
  ItemStack var34=new ItemStack(Item.snowball);
  ItemStack var35=new ItemStack(Item.brick);
  ItemStack var36=new ItemStack(Item.clay);
  ItemStack var37=new ItemStack(Block.mycelium);
  ItemStack var38=new ItemStack(Block.sapling,1,-1);
  DecomposerRecipe.add(new DecomposerRecipe(var31,new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O,2),this.element(EnumElement.N,6)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var36,0.3F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var35,0.5F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  DecomposerRecipe.add(new DecomposerRecipe(var34,new Chemical[]{this.molecule(EnumMolecule.water)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var37,0.09F,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var33,0.5F,new Chemical[]{this.molecule(EnumMolecule.arginine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.keratin)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var38,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(new ItemStack(Block.sapling,1,1),0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(new ItemStack(Block.sapling,1,2),0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(new ItemStack(Block.sapling,1,3),0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var32,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.clay,12),false,100,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.brick,8),true,400,new Chemical[]{this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null,this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.snowball,5),true,20,new Chemical[]{this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.mycelium,16),false,300,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.leather,5),true,700,new Chemical[]{this.molecule(EnumMolecule.arginine),null,null,null,this.molecule(EnumMolecule.keratin),null,null,null,this.molecule(EnumMolecule.glycine)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.sapling,1,0),true,20,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.sapling,1,1),true,20,new Chemical[]{null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.sapling,1,2),true,20,new Chemical[]{null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.sapling,1,3),true,20,new Chemical[]{null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.paper,16),true,150,new Chemical[]{null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null}));
  ItemStack var39=new ItemStack(Item.slimeBall);
  ItemStack var40=new ItemStack(Item.blazeRod);
  ItemStack var41=new ItemStack(Item.blazePowder);
  ItemStack var42=new ItemStack(Item.magmaCream);
  ItemStack var43=new ItemStack(Item.ghastTear);
  ItemStack var44=new ItemStack(Item.netherStar);
  ItemStack var45=new ItemStack(Item.spiderEye);
  ItemStack var46=new ItemStack(Item.fermentedSpiderEye);
  ItemStack var47=new ItemStack(Item.netherStalkSeeds);
  ItemStack var48=new ItemStack(Block.glowStone);
  ItemStack var49=new ItemStack(Item.lightStoneDust);
  ItemStack var50=new ItemStack(Item.potion,1,0);
  ItemStack var51=new ItemStack(Item.bucketWater);
  DecomposerRecipe.add(new DecomposerRecipeSelect(var39,0.9F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.polycyanoacrylate)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Hg)}),new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.water,10)})}));
  DecomposerRecipe.add(new DecomposerRecipe(var40,new Chemical[]{this.element(EnumElement.Pu,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(var41,new Chemical[]{this.element(EnumElement.Pu)}));
  DecomposerRecipe.add(new DecomposerRecipe(var42,new Chemical[]{this.element(EnumElement.Hg),this.element(EnumElement.Pu),this.molecule(EnumMolecule.polycyanoacrylate,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(var43,new Chemical[]{this.element(EnumElement.Yb,4),this.element(EnumElement.No,4)}));
  Element var52=this.element(EnumElement.H,64);
  Element var53=this.element(EnumElement.He,64);
  DecomposerRecipe.add(new DecomposerRecipe(var44,new Chemical[]{this.element(EnumElement.Cn,16),var52,var52,var52,var53,var53,var53,var21,var21}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var45,0.2F,new Chemical[]{this.molecule(EnumMolecule.ttx)}));
  DecomposerRecipe.add(new DecomposerRecipe(var46,new Chemical[]{this.element(EnumElement.Po),this.molecule(EnumMolecule.ethanol)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var47,0.5F,new Chemical[]{this.molecule(EnumMolecule.coke)}));
  DecomposerRecipe.add(new DecomposerRecipe(var48,new Chemical[]{this.element(EnumElement.P,4)}));
  DecomposerRecipe.add(new DecomposerRecipe(var49,new Chemical[]{this.element(EnumElement.P)}));
  DecomposerRecipe.add(new DecomposerRecipe(var50,new Chemical[]{this.molecule(EnumMolecule.water,8)}));
  DecomposerRecipe.add(new DecomposerRecipe(var51,new Chemical[]{this.molecule(EnumMolecule.water,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(var40,true,15000,new Chemical[]{this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(var42,true,5000,new Chemical[]{null,this.element(EnumElement.Pu),null,this.molecule(EnumMolecule.polycyanoacrylate),this.element(EnumElement.Hg),this.molecule(EnumMolecule.polycyanoacrylate),null,this.molecule(EnumMolecule.polycyanoacrylate),null}));
  SynthesisRecipe.add(new SynthesisRecipe(var43,true,15000,new Chemical[]{this.element(EnumElement.Yb),this.element(EnumElement.Yb),this.element(EnumElement.No),null,this.element(EnumElement.Yb,2),this.element(EnumElement.No,2),null,this.element(EnumElement.No),null}));
  SynthesisRecipe.add(new SynthesisRecipe(var44,true,500000,new Chemical[]{var53,var53,var53,var21,this.element(EnumElement.Cn,16),var53,var52,var52,var52}));
  SynthesisRecipe.add(new SynthesisRecipe(var45,true,2000,new Chemical[]{this.element(EnumElement.C),null,null,null,this.molecule(EnumMolecule.ttx),null,null,null,this.element(EnumElement.C)}));
  SynthesisRecipe.add(new SynthesisRecipe(var48,true,500,new Chemical[]{this.element(EnumElement.P),null,this.element(EnumElement.P),this.element(EnumElement.P),null,this.element(EnumElement.P),null,null,null}));
  ItemStack var54=new ItemStack(Item.sugar);
  ItemStack var55=new ItemStack(Item.reed);
  ItemStack var56=new ItemStack(Block.pumpkin);
  ItemStack var57=new ItemStack(Block.melon);
  ItemStack var58=new ItemStack(Item.speckledMelon);
  ItemStack var59=new ItemStack(Item.melon);
  ItemStack var60=new ItemStack(Item.carrot);
  ItemStack var61=new ItemStack(Item.goldenCarrot);
  ItemStack var62=new ItemStack(Item.dyePowder,1,3);
  ItemStack var63=new ItemStack(Item.potato);
  ItemStack var64=new ItemStack(Item.bread);
  ItemStack var65=new ItemStack(Item.appleRed);
  ItemStack var66=new ItemStack(Item.appleGold,1,0);
  ItemStack var68=new ItemStack(Item.chickenCooked);
  DecomposerRecipe.add(new DecomposerRecipeChance(var54,0.75F,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var55,0.65F,new Chemical[]{this.molecule(EnumMolecule.sucrose),this.element(EnumElement.H,2),this.element(EnumElement.O)}));
  DecomposerRecipe.add(new DecomposerRecipe(var62,new Chemical[]{this.molecule(EnumMolecule.theobromine)}));
  DecomposerRecipe.add(new DecomposerRecipe(var56,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  DecomposerRecipe.add(new DecomposerRecipe(var57,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin),this.molecule(EnumMolecule.asparticAcid),this.molecule(EnumMolecule.water,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(var58,new Chemical[]{this.molecule(EnumMolecule.water,4),this.molecule(EnumMolecule.whitePigment),this.element(EnumElement.Au,1)}));
  DecomposerRecipe.add(new DecomposerRecipe(var59,new Chemical[]{this.molecule(EnumMolecule.water)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var60,0.05F,new Chemical[]{this.molecule(EnumMolecule.ret)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var61,0.2F,new Chemical[]{this.molecule(EnumMolecule.ret),this.element(EnumElement.Au,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var63,0.4F,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.K,2),this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var64,0.1F,new Chemical[]{this.molecule(EnumMolecule.starch),this.molecule(EnumMolecule.sucrose)}));
  DecomposerRecipe.add(new DecomposerRecipe(var65,new Chemical[]{this.molecule(EnumMolecule.malicAcid)}));
  DecomposerRecipe.add(new DecomposerRecipe(var66,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.element(EnumElement.Au,8)}));
  DecomposerRecipe.add(new DecomposerRecipe(var66,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.element(EnumElement.Au,64),this.element(EnumElement.Np)}));
  DecomposerRecipe.add(new DecomposerRecipe(var68,new Chemical[]{this.element(EnumElement.K),this.element(EnumElement.Na),this.element(EnumElement.C,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(var54,false,400,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  SynthesisRecipe.add(new SynthesisRecipe(var65,false,400,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.molecule(EnumMolecule.water,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(var62,false,400,new Chemical[]{this.molecule(EnumMolecule.theobromine)}));
  SynthesisRecipe.add(new SynthesisRecipe(var56,false,400,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  SynthesisRecipe.add(new SynthesisRecipe(var68,true,5000,new Chemical[]{this.element(EnumElement.K,16),this.element(EnumElement.Na,16),this.element(EnumElement.C,16)}));
  ItemStack var69=new ItemStack(Item.gunpowder);
  ItemStack var70=new ItemStack(Block.tnt);
  DecomposerRecipe.add(new DecomposerRecipe(var69,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.S,2),this.element(EnumElement.C)}));
  DecomposerRecipe.add(new DecomposerRecipe(var70,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(var70,false,1000,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(var69,true,600,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.C),null,this.element(EnumElement.S,2),null,null,null,null,null}));
  ItemStack var71=new ItemStack(Block.wood,1,-1);
  ItemStack var72=new ItemStack(Block.planks,1,-1);
  ItemStack var140=new ItemStack(Block.planks,1,0);
  ItemStack var141=new ItemStack(Block.planks,1,1);
  ItemStack var142=new ItemStack(Block.planks,1,2);
  ItemStack var143=new ItemStack(Block.planks,1,3);
  ItemStack var73=new ItemStack(Item.stick);
  ItemStack var74=new ItemStack(Block.wood,1,0);
  ItemStack var75=new ItemStack(Block.wood,1,1);
  ItemStack var76=new ItemStack(Block.wood,1,2);
  ItemStack var77=new ItemStack(Block.wood,1,3);
  ItemStack var78=new ItemStack(Item.doorWood);
  ItemStack var79=new ItemStack(Block.pressurePlatePlanks,1,-1);
  DecomposerRecipe.add(new DecomposerRecipeChance(var71,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var74,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var75,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var76,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var77,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var72,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var140,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var141,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var142,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var143,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var73,0.3F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var78,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,12)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var79,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,4)}));
  Molecule var81=this.molecule(EnumMolecule.cellulose,1);
  SynthesisRecipe.add(new SynthesisRecipe(var74,true,100,new Chemical[]{var81,var81,var81,null,var81,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(var75,true,100,new Chemical[]{null,null,null,null,var81,null,var81,var81,var81}));
  SynthesisRecipe.add(new SynthesisRecipe(var76,true,100,new Chemical[]{var81,null,var81,null,null,null,var81,null,var81}));
  SynthesisRecipe.add(new SynthesisRecipe(var77,true,100,new Chemical[]{var81,null,null,var81,var81,null,var81,null,null}));
  ItemStack var82=new ItemStack(Item.dyePowder,1,0);
  ItemStack var83=new ItemStack(Item.dyePowder,1,1);
  ItemStack var84=new ItemStack(Item.dyePowder,1,2);
  ItemStack var85=new ItemStack(Item.dyePowder,1,4);
  ItemStack var86=new ItemStack(Item.dyePowder,1,5);
  ItemStack var87=new ItemStack(Item.dyePowder,1,6);
  ItemStack var88=new ItemStack(Item.dyePowder,1,7);
  ItemStack var89=new ItemStack(Item.dyePowder,1,8);
  ItemStack var90=new ItemStack(Item.dyePowder,1,9);
  ItemStack var91=new ItemStack(Item.dyePowder,1,10);
  ItemStack var92=new ItemStack(Item.dyePowder,1,11);
  ItemStack var93=new ItemStack(Item.dyePowder,1,12);
  ItemStack var94=new ItemStack(Item.dyePowder,1,13);
  ItemStack var95=new ItemStack(Item.dyePowder,1,14);
  ItemStack var96=new ItemStack(Item.dyePowder,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(var82,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var83,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var84,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var85,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipe(var86,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var87,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var88,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var89,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(var90,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var91,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var92,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var93,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var94,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var95,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var96,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var82,false,50,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var83,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var84,false,50,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var85,false,50,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(var86,false,50,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var87,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var88,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var89,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(var90,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var91,false,50,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var92,false,50,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var93,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var94,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var95,false,50,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var96,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  ItemStack var97=new ItemStack(Block.cloth,1,0);
  ItemStack var98=new ItemStack(Block.cloth,1,1);
  ItemStack var99=new ItemStack(Block.cloth,1,2);
  ItemStack var100=new ItemStack(Block.cloth,1,3);
  ItemStack var101=new ItemStack(Block.cloth,1,4);
  ItemStack var102=new ItemStack(Block.cloth,1,5);
  ItemStack var103=new ItemStack(Block.cloth,1,6);
  ItemStack var104=new ItemStack(Block.cloth,1,7);
  ItemStack var105=new ItemStack(Block.cloth,1,8);
  ItemStack var106=new ItemStack(Block.cloth,1,9);
  ItemStack var107=new ItemStack(Block.cloth,1,10);
  ItemStack var108=new ItemStack(Block.cloth,1,11);
  ItemStack var109=new ItemStack(Block.cloth,1,12);
  ItemStack var110=new ItemStack(Block.cloth,1,13);
  ItemStack var111=new ItemStack(Block.cloth,1,14);
  ItemStack var112=new ItemStack(Block.cloth,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(var111,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var110,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var108,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var107,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var106,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var105,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var104,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var103,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var102,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var101,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var100,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var99,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var98,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var97,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var112,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var111,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var110,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var108,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(var107,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var106,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var105,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var104,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(var103,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var102,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var101,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var100,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var99,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var98,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var97,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var112,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  Molecule var113=this.molecule(EnumMolecule.polyvinylChloride);
  ItemStack var114=new ItemStack(Item.record13);
  ItemStack var115=new ItemStack(Item.recordCat);
  ItemStack var116=new ItemStack(Item.recordFar);
  ItemStack var117=new ItemStack(Item.recordMall);
  ItemStack var118=new ItemStack(Item.recordMellohi);
  ItemStack var119=new ItemStack(Item.recordStal);
  ItemStack var120=new ItemStack(Item.recordStrad);
  ItemStack var121=new ItemStack(Item.recordWard);
  ItemStack var122=new ItemStack(Item.recordChirp);
  DecomposerRecipe.add(new DecomposerRecipe(var114,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var115,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var116,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var117,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var118,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var119,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var120,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var121,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var122,new Chemical[]{var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var114,false,1000,new Chemical[]{var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var115,false,1000,new Chemical[]{null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var116,false,1000,new Chemical[]{null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var117,false,1000,new Chemical[]{null,null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var118,false,1000,new Chemical[]{null,null,null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var119,false,1000,new Chemical[]{null,null,null,null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var120,false,1000,new Chemical[]{null,null,null,null,null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var121,false,1000,new Chemical[]{null,null,null,null,null,null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var122,false,1000,new Chemical[]{null,null,null,null,null,null,null,null,var113}));
  ItemStack var123=new ItemStack(Block.mushroomBrown);
  ItemStack var124=new ItemStack(Block.mushroomRed);
  ItemStack var125=new ItemStack(Block.cactus);
  DecomposerRecipe.add(new DecomposerRecipe(var123,new Chemical[]{this.molecule(EnumMolecule.psilocybin),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(var124,new Chemical[]{this.molecule(EnumMolecule.pantherine),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(var125,new Chemical[]{this.molecule(EnumMolecule.mescaline),this.molecule(EnumMolecule.water,20)}));
  SynthesisRecipe.add(new SynthesisRecipe(var125,true,200,new Chemical[]{this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.mescaline),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var13,0.8F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide,6),this.molecule(EnumMolecule.strontiumNitrate,6)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var18,0.42F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide),this.molecule(EnumMolecule.strontiumNitrate)}));
  SynthesisRecipe.add(new SynthesisRecipe(var18,true,100,new Chemical[]{null,null,this.molecule(EnumMolecule.iron3oxide),null,this.molecule(EnumMolecule.strontiumNitrate),null,null,null,null}));
  ItemStack var126=new ItemStack(Item.enderPearl);
  DecomposerRecipe.add(new DecomposerRecipe(var126,new Chemical[]{this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(var126,true,5000,new Chemical[]{this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate)}));
  ItemStack var127=new ItemStack(Block.obsidian);
  DecomposerRecipe.add(new DecomposerRecipe(var127,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16),this.molecule(EnumMolecule.magnesiumOxide,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(var127,true,1000,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),null,this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2)}));
  ItemStack var128=new ItemStack(Item.bone);
  ItemStack var129=new ItemStack(Item.silk);
  DecomposerRecipe.add(new DecomposerRecipe(var128,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var129,0.45F,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  SynthesisRecipe.add(new SynthesisRecipe(var128,false,100,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  SynthesisRecipe.add(new SynthesisRecipe(var129,true,150,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  ItemStack var132=new ItemStack(Block.cobblestone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(var1,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)})}));
  DecomposerRecipe.add(new DecomposerRecipeSelect(var132,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na),this.element(EnumElement.Cl)})}));
  DecomposerRecipe.add(new DecomposerRecipeSelect(var3,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.cobblestone,8),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,null,this.element(EnumElement.O,2),null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.stone,7),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,this.element(EnumElement.O,2),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.dirt,16),true,50,new Chemical[]{null,null,null,null,this.element(EnumElement.O,2),this.element(EnumElement.Si)}));
  ItemStack var133=new ItemStack(Block.netherrack);
  ItemStack var134=new ItemStack(Block.slowSand);
  ItemStack var135=new ItemStack(Block.whiteStone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(var133,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.Ni),this.element(EnumElement.Tc)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,3),this.element(EnumElement.Ti),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,1),this.element(EnumElement.W,4),this.element(EnumElement.Cr,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,10),this.element(EnumElement.W,1),this.element(EnumElement.Zn,8),this.element(EnumElement.Be,4)})}));
  DecomposerRecipe.add(new DecomposerRecipeSelect(var134,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,3),this.element(EnumElement.Be,1),this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,1),this.element(EnumElement.Si,5),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,6),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es,1),this.element(EnumElement.O,2)})}));
  DecomposerRecipe.add(new DecomposerRecipeSelect(var135,0.8F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.H,4),this.element(EnumElement.Li)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pu)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Nd)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.H,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Be,8)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Li,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Rb)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  ItemStack var136=new ItemStack(Block.plantYellow);
  DecomposerRecipe.add(new DecomposerRecipeChance(var136,0.3F,new Chemical[]{new Molecule(EnumMolecule.shikimicAcid,2)}));
  ItemStack var137=new ItemStack(Item.rottenFlesh);
  DecomposerRecipe.add(new DecomposerRecipeChance(var137,0.05F,new Chemical[]{new Molecule(EnumMolecule.nod,1)}));
  ItemStack var139=new ItemStack(Block.tallGrass,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(var139,0.1F,new Chemical[]{new Molecule(EnumMolecule.afroman,2)}));
  this.addDecomposerRecipesFromMolecules();
  this.addSynthesisRecipesFromMolecules();
  this.addUnusedSynthesisRecipes();
  this.registerPoisonRecipes(EnumMolecule.poison);
  this.registerPoisonRecipes(EnumMolecule.sucrose);
  this.registerPoisonRecipes(EnumMolecule.psilocybin);
  this.registerPoisonRecipes(EnumMolecule.methamphetamine);
  this.registerPoisonRecipes(EnumMolecule.amphetamine);
  this.registerPoisonRecipes(EnumMolecule.pantherine);
  this.registerPoisonRecipes(EnumMolecule.ethanol);
  this.registerPoisonRecipes(EnumMolecule.penicillin);
  this.registerPoisonRecipes(EnumMolecule.testosterone);
  this.registerPoisonRecipes(EnumMolecule.xanax);
  this.registerPoisonRecipes(EnumMolecule.mescaline);
  this.registerPoisonRecipes(EnumMolecule.asprin);
  this.registerPoisonRecipes(EnumMolecule.sulfuricAcid);
  this.registerPoisonRecipes(EnumMolecule.ttx);
  this.registerPoisonRecipes(EnumMolecule.pal2);
  this.registerPoisonRecipes(EnumMolecule.nod);
  this.registerPoisonRecipes(EnumMolecule.afroman);
}","public void RegisterRecipes(){
  ItemStack var1=new ItemStack(Block.stone);
  new ItemStack(Block.cobblestone);
  ItemStack var3=new ItemStack(Block.dirt);
  ItemStack var4=new ItemStack(Block.sand);
  ItemStack var5=new ItemStack(Block.gravel);
  ItemStack var6=new ItemStack(Block.glass);
  ItemStack var7=new ItemStack(Block.thinGlass);
  ItemStack oreIron=new ItemStack(Block.oreIron);
  ItemStack oreGold=new ItemStack(Block.oreGold);
  ItemStack var10=new ItemStack(Block.oreDiamond);
  ItemStack var11=new ItemStack(Block.oreEmerald);
  ItemStack oreCoal=new ItemStack(Block.oreCoal);
  ItemStack var13=new ItemStack(Block.oreRedstone);
  ItemStack var14=new ItemStack(Block.oreLapis);
  ItemStack ingotIron=new ItemStack(Item.ingotIron);
  ItemStack blockIron=new ItemStack(Block.blockIron);
  ItemStack var17=new ItemStack(MinechemItems.atomicManipulator);
  ItemStack var18=new ItemStack(Item.redstone);
  ItemStack var19=new ItemStack(MinechemItems.testTube,16);
  ItemStack paper=new ItemStack(Item.paper);
  ItemStack bdye=new ItemStack(Item.dyePowder,1,6);
  GameRegistry.addRecipe(var19,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),var6});
  GameRegistry.addRecipe(MinechemItems.concaveLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),var6});
  GameRegistry.addRecipe(MinechemItems.convexLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('G'),var6});
  GameRegistry.addRecipe(MinechemItems.microscopeLens,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),MinechemItems.convexLens,Character.valueOf('B'),MinechemItems.concaveLens});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.microscope),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('L'),MinechemItems.microscopeLens,Character.valueOf('P'),var7,Character.valueOf('I'),ingotIron});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.atomicManipulator),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),new ItemStack(Block.pistonBase),Character.valueOf('I'),blockIron});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.decomposer),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),var17,Character.valueOf('I'),ingotIron,Character.valueOf('R'),var18});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.synthesis),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('A'),var17,Character.valueOf('I'),ingotIron,Character.valueOf('R'),var18,Character.valueOf('D'),new ItemStack(Item.diamond)});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.fusion,16,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),ingotIron,Character.valueOf('L'),ItemElement.createStackOf(EnumElement.Pb,1)});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.fusion,16,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),ingotIron,Character.valueOf('W'),ItemElement.createStackOf(EnumElement.W,1),Character.valueOf('B'),ItemElement.createStackOf(EnumElement.Be,1)});
  GameRegistry.addRecipe(MinechemItems.projectorLens,new Object[]{""String_Node_Str"",Character.valueOf('A'),MinechemItems.concaveLens,Character.valueOf('B'),MinechemItems.convexLens});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.blueprintProjector),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('I'),ingotIron,Character.valueOf('P'),var7,Character.valueOf('L'),MinechemItems.projectorLens,Character.valueOf('G'),new ItemStack(Block.redstoneLampIdle)});
  ItemStack var20=new ItemStack(MinechemItems.molecule,1,EnumMolecule.polyvinylChloride.ordinal());
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatFeet),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),var20});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatLegs),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),var20});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatTorso),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),var20});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.hazmatHead),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('P'),var20});
  GameRegistry.addRecipe(new ItemStack(MinechemBlocks.chemicalStorage),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('L'),new ItemStack(MinechemItems.element,1,EnumElement.Pb.ordinal()),Character.valueOf('C'),new ItemStack(Block.chest)});
  GameRegistry.addRecipe(new ItemStack(MinechemItems.IAintAvinit),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('Z'),new ItemStack(Item.ingotIron),Character.valueOf('S'),new ItemStack(Item.stick)});
  GameRegistry.addShapelessRecipe(new ItemStack(MinechemItems.journal),new Object[]{new ItemStack(Item.book),new ItemStack(MinechemItems.testTube)});
  GameRegistry.addShapelessRecipe(new ItemStack(MinechemItems.EmptyPillz,2),new Object[]{new ItemStack(Item.sugar),new ItemStack(Item.slimeBall)});
  for (  EnumElement element : EnumElement.values()) {
    GameRegistry.addShapelessRecipe(new ItemStack(MinechemItems.testTube),new Object[]{new ItemStack(MinechemItems.element,element.ordinal())});
  }
  GameRegistry.addRecipe(new RecipeJournalCloning());
  Element var21=this.element(EnumElement.C,64);
  DecomposerRecipe.add(new DecomposerRecipe(oreIron,new Chemical[]{this.element(EnumElement.Fe,32)}));
  DecomposerRecipe.add(new DecomposerRecipe(oreGold,new Chemical[]{this.element(EnumElement.Au,32)}));
  DecomposerRecipe.add(new DecomposerRecipe(var10,new Chemical[]{this.molecule(EnumMolecule.fullrene,6)}));
  DecomposerRecipe.add(new DecomposerRecipe(oreCoal,new Chemical[]{this.element(EnumElement.C,32)}));
  DecomposerRecipe.add(new DecomposerRecipe(var11,new Chemical[]{this.molecule(EnumMolecule.beryl,4),this.element(EnumElement.Cr,4),this.element(EnumElement.V,4)}));
  DecomposerRecipe.add(new DecomposerRecipe(var14,new Chemical[]{this.molecule(EnumMolecule.lazurite,4),this.molecule(EnumMolecule.sodalite),this.molecule(EnumMolecule.noselite),this.molecule(EnumMolecule.calcite),this.molecule(EnumMolecule.pyrite)}));
  ItemStack ingotGold=new ItemStack(Item.ingotGold);
  ItemStack var23=new ItemStack(Item.diamond);
  ItemStack var24=new ItemStack(Item.emerald);
  ItemStack chunkCoal=new ItemStack(Item.coal);
  ItemStack fusionblue=new ItemStack(MinechemItems.blueprint,1,MinechemBlueprint.fusion.id);
  ItemStack fusionBlock1=new ItemStack(MinechemBlocks.fusion,0);
  ItemStack fusionBlock2=new ItemStack(MinechemBlocks.fusion,1);
  DecomposerRecipe.add(new DecomposerRecipe(ingotIron,new Chemical[]{this.element(EnumElement.Fe,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(ingotGold,new Chemical[]{this.element(EnumElement.Au,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(var23,new Chemical[]{this.molecule(EnumMolecule.fullrene,4)}));
  DecomposerRecipe.add(new DecomposerRecipe(var24,new Chemical[]{this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.Cr,2),this.element(EnumElement.V,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(chunkCoal,new Chemical[]{this.element(EnumElement.C,16)}));
  this.recipeIron=new SynthesisRecipe(ingotIron,false,1000,new Chemical[]{this.element(EnumElement.Fe,16)});
  this.recipeGold=new SynthesisRecipe(ingotGold,false,1000,new Chemical[]{this.element(EnumElement.Au,16)});
  SynthesisRecipe.add(recipeIron);
  SynthesisRecipe.add(recipeGold);
  SynthesisRecipe.add(new SynthesisRecipe(var23,true,'\uea60',new Chemical[]{null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null,this.molecule(EnumMolecule.fullrene),null}));
  SynthesisRecipe.add(new SynthesisRecipe(var24,true,80000,new Chemical[]{null,this.element(EnumElement.Cr),null,this.element(EnumElement.V),this.molecule(EnumMolecule.beryl,2),this.element(EnumElement.V),null,this.element(EnumElement.Cr),null}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockIron),new Chemical[]{this.element(EnumElement.Fe,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockGold),new Chemical[]{this.element(EnumElement.Au,144)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockDiamond),new Chemical[]{this.molecule(EnumMolecule.fullrene,36)}));
  DecomposerRecipe.add(new DecomposerRecipe(new ItemStack(Block.blockEmerald),new Chemical[]{this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.Cr,18),this.element(EnumElement.V,18)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.blockDiamond),true,120000,new Chemical[]{this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4),this.molecule(EnumMolecule.fullrene,4)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.blockEmerald),true,150000,new Chemical[]{this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.V,9),this.molecule(EnumMolecule.beryl,18),this.element(EnumElement.V,9),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3),this.element(EnumElement.Cr,3)}));
  ItemStack var26=new ItemStack(Block.sandStone);
  ItemStack var27=new ItemStack(Item.flint);
  DecomposerRecipe.add(new DecomposerRecipe(var26,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(var4,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(var6,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(var7,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,1)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var5,0.35F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var27,0.5F,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide)}));
  Molecule var28=this.molecule(EnumMolecule.siliconDioxide,4);
  Molecule var29=this.molecule(EnumMolecule.siliconDioxide,4);
  SynthesisRecipe.add(new SynthesisRecipe(var6,true,500,new Chemical[]{var28,null,var28,null,null,null,var28,null,var28}));
  SynthesisRecipe.add(new SynthesisRecipe(var4,true,200,new Chemical[]{var28,var28,var28,var28}));
  SynthesisRecipe.add(new SynthesisRecipe(var27,true,100,new Chemical[]{null,var29,null,var29,var29,var29,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(var7,true,50,new Chemical[]{null,null,null,this.molecule(EnumMolecule.siliconDioxide),null,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(var5,true,30,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.siliconDioxide)}));
  ItemStack var30=new ItemStack(Item.feather);
  DecomposerRecipe.add(new DecomposerRecipe(var30,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.N,6)}));
  SynthesisRecipe.add(new SynthesisRecipe(var30,true,800,new Chemical[]{this.element(EnumElement.N),this.molecule(EnumMolecule.water,2),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,1),this.element(EnumElement.N),this.element(EnumElement.N),this.molecule(EnumMolecule.water,5),this.element(EnumElement.N)}));
  ItemStack var31=new ItemStack(Item.arrow);
  ItemStack var32=new ItemStack(Item.paper);
  ItemStack var33=new ItemStack(Item.leather);
  ItemStack var34=new ItemStack(Item.snowball);
  ItemStack var35=new ItemStack(Item.brick);
  ItemStack var36=new ItemStack(Item.clay);
  ItemStack var37=new ItemStack(Block.mycelium);
  ItemStack var38=new ItemStack(Block.sapling,1,-1);
  DecomposerRecipe.add(new DecomposerRecipe(var31,new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O,2),this.element(EnumElement.N,6)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var36,0.3F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var35,0.5F,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  DecomposerRecipe.add(new DecomposerRecipe(var34,new Chemical[]{this.molecule(EnumMolecule.water)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var37,0.09F,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var33,0.5F,new Chemical[]{this.molecule(EnumMolecule.arginine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.keratin)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var38,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(new ItemStack(Block.sapling,1,1),0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(new ItemStack(Block.sapling,1,2),0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(new ItemStack(Block.sapling,1,3),0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var32,0.25F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.clay,12),false,100,new Chemical[]{this.molecule(EnumMolecule.kaolinite)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.brick,8),true,400,new Chemical[]{this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null,this.molecule(EnumMolecule.kaolinite),this.molecule(EnumMolecule.kaolinite),null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.snowball,5),true,20,new Chemical[]{this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water),null,this.molecule(EnumMolecule.water)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.mycelium,16),false,300,new Chemical[]{this.molecule(EnumMolecule.fingolimod)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.leather,5),true,700,new Chemical[]{this.molecule(EnumMolecule.arginine),null,null,null,this.molecule(EnumMolecule.keratin),null,null,null,this.molecule(EnumMolecule.glycine)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.sapling,1,0),true,20,new Chemical[]{null,null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose)}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.sapling,1,1),true,20,new Chemical[]{null,null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.sapling,1,2),true,20,new Chemical[]{null,null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.sapling,1,3),true,20,new Chemical[]{null,null,null,null,null,this.molecule(EnumMolecule.cellulose),null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.paper,16),true,150,new Chemical[]{null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null,null,this.molecule(EnumMolecule.cellulose),null}));
  ItemStack var39=new ItemStack(Item.slimeBall);
  ItemStack var40=new ItemStack(Item.blazeRod);
  ItemStack var41=new ItemStack(Item.blazePowder);
  ItemStack var42=new ItemStack(Item.magmaCream);
  ItemStack var43=new ItemStack(Item.ghastTear);
  ItemStack var44=new ItemStack(Item.netherStar);
  ItemStack var45=new ItemStack(Item.spiderEye);
  ItemStack var46=new ItemStack(Item.fermentedSpiderEye);
  ItemStack var47=new ItemStack(Item.netherStalkSeeds);
  ItemStack var48=new ItemStack(Block.glowStone);
  ItemStack var49=new ItemStack(Item.lightStoneDust);
  ItemStack var50=new ItemStack(Item.potion,1,0);
  ItemStack var51=new ItemStack(Item.bucketWater);
  DecomposerRecipe.add(new DecomposerRecipeSelect(var39,0.9F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.polycyanoacrylate)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Hg)}),new DecomposerRecipe(new Chemical[]{this.molecule(EnumMolecule.water,10)})}));
  DecomposerRecipe.add(new DecomposerRecipe(var40,new Chemical[]{this.element(EnumElement.Pu,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(var41,new Chemical[]{this.element(EnumElement.Pu)}));
  DecomposerRecipe.add(new DecomposerRecipe(var42,new Chemical[]{this.element(EnumElement.Hg),this.element(EnumElement.Pu),this.molecule(EnumMolecule.polycyanoacrylate,3)}));
  DecomposerRecipe.add(new DecomposerRecipe(var43,new Chemical[]{this.element(EnumElement.Yb,4),this.element(EnumElement.No,4)}));
  Element var52=this.element(EnumElement.H,64);
  Element var53=this.element(EnumElement.He,64);
  DecomposerRecipe.add(new DecomposerRecipe(var44,new Chemical[]{this.element(EnumElement.Cn,16),var52,var52,var52,var53,var53,var53,var21,var21}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var45,0.2F,new Chemical[]{this.molecule(EnumMolecule.ttx)}));
  DecomposerRecipe.add(new DecomposerRecipe(var46,new Chemical[]{this.element(EnumElement.Po),this.molecule(EnumMolecule.ethanol)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var47,0.5F,new Chemical[]{this.molecule(EnumMolecule.coke)}));
  DecomposerRecipe.add(new DecomposerRecipe(var48,new Chemical[]{this.element(EnumElement.P,4)}));
  DecomposerRecipe.add(new DecomposerRecipe(var49,new Chemical[]{this.element(EnumElement.P)}));
  DecomposerRecipe.add(new DecomposerRecipe(var50,new Chemical[]{this.molecule(EnumMolecule.water,8)}));
  DecomposerRecipe.add(new DecomposerRecipe(var51,new Chemical[]{this.molecule(EnumMolecule.water,16)}));
  SynthesisRecipe.add(new SynthesisRecipe(var40,true,15000,new Chemical[]{this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null,this.element(EnumElement.Pu),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(var42,true,5000,new Chemical[]{null,this.element(EnumElement.Pu),null,this.molecule(EnumMolecule.polycyanoacrylate),this.element(EnumElement.Hg),this.molecule(EnumMolecule.polycyanoacrylate),null,this.molecule(EnumMolecule.polycyanoacrylate),null}));
  SynthesisRecipe.add(new SynthesisRecipe(var43,true,15000,new Chemical[]{this.element(EnumElement.Yb),this.element(EnumElement.Yb),this.element(EnumElement.No),null,this.element(EnumElement.Yb,2),this.element(EnumElement.No,2),null,this.element(EnumElement.No),null}));
  SynthesisRecipe.add(new SynthesisRecipe(var44,true,500000,new Chemical[]{var53,var53,var53,var21,this.element(EnumElement.Cn,16),var53,var52,var52,var52}));
  SynthesisRecipe.add(new SynthesisRecipe(var45,true,2000,new Chemical[]{this.element(EnumElement.C),null,null,null,this.molecule(EnumMolecule.ttx),null,null,null,this.element(EnumElement.C)}));
  SynthesisRecipe.add(new SynthesisRecipe(var48,true,500,new Chemical[]{this.element(EnumElement.P),null,this.element(EnumElement.P),this.element(EnumElement.P),null,this.element(EnumElement.P),null,null,null}));
  ItemStack var54=new ItemStack(Item.sugar);
  ItemStack var55=new ItemStack(Item.reed);
  ItemStack var56=new ItemStack(Block.pumpkin);
  ItemStack var57=new ItemStack(Block.melon);
  ItemStack var58=new ItemStack(Item.speckledMelon);
  ItemStack var59=new ItemStack(Item.melon);
  ItemStack var60=new ItemStack(Item.carrot);
  ItemStack var61=new ItemStack(Item.goldenCarrot);
  ItemStack var62=new ItemStack(Item.dyePowder,1,3);
  ItemStack var63=new ItemStack(Item.potato);
  ItemStack var64=new ItemStack(Item.bread);
  ItemStack var65=new ItemStack(Item.appleRed);
  ItemStack var66=new ItemStack(Item.appleGold,1,0);
  ItemStack var68=new ItemStack(Item.chickenCooked);
  DecomposerRecipe.add(new DecomposerRecipeChance(var54,0.75F,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var55,0.65F,new Chemical[]{this.molecule(EnumMolecule.sucrose),this.element(EnumElement.H,2),this.element(EnumElement.O)}));
  DecomposerRecipe.add(new DecomposerRecipe(var62,new Chemical[]{this.molecule(EnumMolecule.theobromine)}));
  DecomposerRecipe.add(new DecomposerRecipe(var56,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  DecomposerRecipe.add(new DecomposerRecipe(var57,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin),this.molecule(EnumMolecule.asparticAcid),this.molecule(EnumMolecule.water,16)}));
  DecomposerRecipe.add(new DecomposerRecipe(var58,new Chemical[]{this.molecule(EnumMolecule.water,4),this.molecule(EnumMolecule.whitePigment),this.element(EnumElement.Au,1)}));
  DecomposerRecipe.add(new DecomposerRecipe(var59,new Chemical[]{this.molecule(EnumMolecule.water)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var60,0.05F,new Chemical[]{this.molecule(EnumMolecule.ret)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var61,0.2F,new Chemical[]{this.molecule(EnumMolecule.ret),this.element(EnumElement.Au,4)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var63,0.4F,new Chemical[]{this.molecule(EnumMolecule.water,8),this.element(EnumElement.K,2),this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var64,0.1F,new Chemical[]{this.molecule(EnumMolecule.starch),this.molecule(EnumMolecule.sucrose)}));
  DecomposerRecipe.add(new DecomposerRecipe(var65,new Chemical[]{this.molecule(EnumMolecule.malicAcid)}));
  DecomposerRecipe.add(new DecomposerRecipe(var66,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.element(EnumElement.Au,8)}));
  DecomposerRecipe.add(new DecomposerRecipe(var66,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.element(EnumElement.Au,64),this.element(EnumElement.Np)}));
  DecomposerRecipe.add(new DecomposerRecipe(var68,new Chemical[]{this.element(EnumElement.K),this.element(EnumElement.Na),this.element(EnumElement.C,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(var54,false,400,new Chemical[]{this.molecule(EnumMolecule.sucrose)}));
  SynthesisRecipe.add(new SynthesisRecipe(var65,false,400,new Chemical[]{this.molecule(EnumMolecule.malicAcid),this.molecule(EnumMolecule.water,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(var62,false,400,new Chemical[]{this.molecule(EnumMolecule.theobromine)}));
  SynthesisRecipe.add(new SynthesisRecipe(var56,false,400,new Chemical[]{this.molecule(EnumMolecule.cucurbitacin)}));
  SynthesisRecipe.add(new SynthesisRecipe(var68,true,5000,new Chemical[]{this.element(EnumElement.K,16),this.element(EnumElement.Na,16),this.element(EnumElement.C,16)}));
  ItemStack var69=new ItemStack(Item.gunpowder);
  ItemStack var70=new ItemStack(Block.tnt);
  DecomposerRecipe.add(new DecomposerRecipe(var69,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.S,2),this.element(EnumElement.C)}));
  DecomposerRecipe.add(new DecomposerRecipe(var70,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(var70,false,1000,new Chemical[]{this.molecule(EnumMolecule.tnt)}));
  SynthesisRecipe.add(new SynthesisRecipe(var69,true,600,new Chemical[]{this.molecule(EnumMolecule.potassiumNitrate),this.element(EnumElement.C),null,this.element(EnumElement.S,2),null,null,null,null,null}));
  ItemStack var71=new ItemStack(Block.wood,1,-1);
  ItemStack var72=new ItemStack(Block.planks,1,-1);
  ItemStack var140=new ItemStack(Block.planks,1,0);
  ItemStack var141=new ItemStack(Block.planks,1,1);
  ItemStack var142=new ItemStack(Block.planks,1,2);
  ItemStack var143=new ItemStack(Block.planks,1,3);
  ItemStack var73=new ItemStack(Item.stick);
  ItemStack var74=new ItemStack(Block.wood,1,0);
  ItemStack var75=new ItemStack(Block.wood,1,1);
  ItemStack var76=new ItemStack(Block.wood,1,2);
  ItemStack var77=new ItemStack(Block.wood,1,3);
  ItemStack var78=new ItemStack(Item.doorWood);
  ItemStack var79=new ItemStack(Block.pressurePlatePlanks,1,-1);
  DecomposerRecipe.add(new DecomposerRecipeChance(var71,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var74,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var75,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var76,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var77,0.5F,new Chemical[]{this.molecule(EnumMolecule.cellulose,8)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var72,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var140,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var141,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var142,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var143,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var73,0.3F,new Chemical[]{this.molecule(EnumMolecule.cellulose)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var78,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,12)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var79,0.4F,new Chemical[]{this.molecule(EnumMolecule.cellulose,4)}));
  Molecule var81=this.molecule(EnumMolecule.cellulose,1);
  SynthesisRecipe.add(new SynthesisRecipe(var74,true,100,new Chemical[]{var81,var81,var81,null,var81,null,null,null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(var75,true,100,new Chemical[]{null,null,null,null,var81,null,var81,var81,var81}));
  SynthesisRecipe.add(new SynthesisRecipe(var76,true,100,new Chemical[]{var81,null,var81,null,null,null,var81,null,var81}));
  SynthesisRecipe.add(new SynthesisRecipe(var77,true,100,new Chemical[]{var81,null,null,var81,var81,null,var81,null,null}));
  ItemStack var82=new ItemStack(Item.dyePowder,1,0);
  ItemStack var83=new ItemStack(Item.dyePowder,1,1);
  ItemStack var84=new ItemStack(Item.dyePowder,1,2);
  ItemStack var85=new ItemStack(Item.dyePowder,1,4);
  ItemStack var86=new ItemStack(Item.dyePowder,1,5);
  ItemStack var87=new ItemStack(Item.dyePowder,1,6);
  ItemStack var88=new ItemStack(Item.dyePowder,1,7);
  ItemStack var89=new ItemStack(Item.dyePowder,1,8);
  ItemStack var90=new ItemStack(Item.dyePowder,1,9);
  ItemStack var91=new ItemStack(Item.dyePowder,1,10);
  ItemStack var92=new ItemStack(Item.dyePowder,1,11);
  ItemStack var93=new ItemStack(Item.dyePowder,1,12);
  ItemStack var94=new ItemStack(Item.dyePowder,1,13);
  ItemStack var95=new ItemStack(Item.dyePowder,1,14);
  ItemStack var96=new ItemStack(Item.dyePowder,1,15);
  DecomposerRecipe.add(new DecomposerRecipe(var82,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var83,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var84,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var85,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipe(var86,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var87,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var88,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var89,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(var90,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var91,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var92,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var93,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var94,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var95,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipe(var96,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var82,false,50,new Chemical[]{this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var83,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var84,false,50,new Chemical[]{this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var85,false,50,new Chemical[]{this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(var86,false,50,new Chemical[]{this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var87,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var88,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var89,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(var90,false,50,new Chemical[]{this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var91,false,50,new Chemical[]{this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var92,false,50,new Chemical[]{this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var93,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var94,false,50,new Chemical[]{this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var95,false,50,new Chemical[]{this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var96,false,50,new Chemical[]{this.molecule(EnumMolecule.whitePigment)}));
  ItemStack var97=new ItemStack(Block.cloth,1,0);
  ItemStack var98=new ItemStack(Block.cloth,1,1);
  ItemStack var99=new ItemStack(Block.cloth,1,2);
  ItemStack var100=new ItemStack(Block.cloth,1,3);
  ItemStack var101=new ItemStack(Block.cloth,1,4);
  ItemStack var102=new ItemStack(Block.cloth,1,5);
  ItemStack var103=new ItemStack(Block.cloth,1,6);
  ItemStack var104=new ItemStack(Block.cloth,1,7);
  ItemStack var105=new ItemStack(Block.cloth,1,8);
  ItemStack var106=new ItemStack(Block.cloth,1,9);
  ItemStack var107=new ItemStack(Block.cloth,1,10);
  ItemStack var108=new ItemStack(Block.cloth,1,11);
  ItemStack var109=new ItemStack(Block.cloth,1,12);
  ItemStack var110=new ItemStack(Block.cloth,1,13);
  ItemStack var111=new ItemStack(Block.cloth,1,14);
  ItemStack var112=new ItemStack(Block.cloth,1,15);
  DecomposerRecipe.add(new DecomposerRecipeChance(var111,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var110,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var108,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var107,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var106,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var105,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var104,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var103,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var102,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var101,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var100,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var99,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var98,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var97,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var112,0.6F,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var111,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var110,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.greenPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var108,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lazurite)}));
  SynthesisRecipe.add(new SynthesisRecipe(var107,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.purplePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var106,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var105,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var104,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment),this.molecule(EnumMolecule.blackPigment,2)}));
  SynthesisRecipe.add(new SynthesisRecipe(var103,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.redPigment),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var102,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.limePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var101,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.yellowPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var100,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var99,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.lightbluePigment),this.molecule(EnumMolecule.redPigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var98,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.orangePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var97,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.whitePigment)}));
  SynthesisRecipe.add(new SynthesisRecipe(var112,false,50,new Chemical[]{this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.blackPigment)}));
  Molecule var113=this.molecule(EnumMolecule.polyvinylChloride);
  ItemStack var114=new ItemStack(Item.record13);
  ItemStack var115=new ItemStack(Item.recordCat);
  ItemStack var116=new ItemStack(Item.recordFar);
  ItemStack var117=new ItemStack(Item.recordMall);
  ItemStack var118=new ItemStack(Item.recordMellohi);
  ItemStack var119=new ItemStack(Item.recordStal);
  ItemStack var120=new ItemStack(Item.recordStrad);
  ItemStack var121=new ItemStack(Item.recordWard);
  ItemStack var122=new ItemStack(Item.recordChirp);
  DecomposerRecipe.add(new DecomposerRecipe(var114,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var115,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var116,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var117,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var118,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var119,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var120,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var121,new Chemical[]{var113}));
  DecomposerRecipe.add(new DecomposerRecipe(var122,new Chemical[]{var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var114,false,1000,new Chemical[]{var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var115,false,1000,new Chemical[]{null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var116,false,1000,new Chemical[]{null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var117,false,1000,new Chemical[]{null,null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var118,false,1000,new Chemical[]{null,null,null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var119,false,1000,new Chemical[]{null,null,null,null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var120,false,1000,new Chemical[]{null,null,null,null,null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var121,false,1000,new Chemical[]{null,null,null,null,null,null,null,var113}));
  SynthesisRecipe.add(new SynthesisRecipe(var122,false,1000,new Chemical[]{null,null,null,null,null,null,null,null,var113}));
  ItemStack var123=new ItemStack(Block.mushroomBrown);
  ItemStack var124=new ItemStack(Block.mushroomRed);
  ItemStack var125=new ItemStack(Block.cactus);
  DecomposerRecipe.add(new DecomposerRecipe(var123,new Chemical[]{this.molecule(EnumMolecule.psilocybin),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(var124,new Chemical[]{this.molecule(EnumMolecule.pantherine),this.molecule(EnumMolecule.water,2)}));
  DecomposerRecipe.add(new DecomposerRecipe(var125,new Chemical[]{this.molecule(EnumMolecule.mescaline),this.molecule(EnumMolecule.water,20)}));
  SynthesisRecipe.add(new SynthesisRecipe(var125,true,200,new Chemical[]{this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.mescaline),null,this.molecule(EnumMolecule.water,5),null,this.molecule(EnumMolecule.water,5)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var13,0.8F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide,6),this.molecule(EnumMolecule.strontiumNitrate,6)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var18,0.42F,new Chemical[]{this.molecule(EnumMolecule.iron3oxide),this.molecule(EnumMolecule.strontiumNitrate)}));
  SynthesisRecipe.add(new SynthesisRecipe(var18,true,100,new Chemical[]{null,null,this.molecule(EnumMolecule.iron3oxide),null,this.molecule(EnumMolecule.strontiumNitrate),null,null,null,null}));
  ItemStack var126=new ItemStack(Item.enderPearl);
  DecomposerRecipe.add(new DecomposerRecipe(var126,new Chemical[]{this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(var126,true,5000,new Chemical[]{this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.element(EnumElement.Es),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate),this.molecule(EnumMolecule.calciumCarbonate)}));
  ItemStack var127=new ItemStack(Block.obsidian);
  DecomposerRecipe.add(new DecomposerRecipe(var127,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,16),this.molecule(EnumMolecule.magnesiumOxide,8)}));
  SynthesisRecipe.add(new SynthesisRecipe(var127,true,1000,new Chemical[]{this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),null,this.molecule(EnumMolecule.siliconDioxide,4),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2),this.molecule(EnumMolecule.magnesiumOxide,2)}));
  ItemStack var128=new ItemStack(Item.bone);
  ItemStack var129=new ItemStack(Item.silk);
  DecomposerRecipe.add(new DecomposerRecipe(var128,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  DecomposerRecipe.add(new DecomposerRecipeChance(var129,0.45F,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  SynthesisRecipe.add(new SynthesisRecipe(var128,false,100,new Chemical[]{this.molecule(EnumMolecule.hydroxylapatite)}));
  SynthesisRecipe.add(new SynthesisRecipe(var129,true,150,new Chemical[]{this.molecule(EnumMolecule.serine),this.molecule(EnumMolecule.glycine),this.molecule(EnumMolecule.alinine)}));
  ItemStack var132=new ItemStack(Block.cobblestone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(var1,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)})}));
  DecomposerRecipe.add(new DecomposerRecipeSelect(var132,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na),this.element(EnumElement.Cl)})}));
  DecomposerRecipe.add(new DecomposerRecipeSelect(var3,0.07F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fe),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Mg),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ti),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zn),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.cobblestone,8),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,null,this.element(EnumElement.O,2),null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.stone,7),true,50,new Chemical[]{this.element(EnumElement.Si),null,null,this.element(EnumElement.O,2),null,null}));
  SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Block.dirt,16),true,50,new Chemical[]{null,null,null,null,this.element(EnumElement.O,2),this.element(EnumElement.Si)}));
  ItemStack var133=new ItemStack(Block.netherrack);
  ItemStack var134=new ItemStack(Block.slowSand);
  ItemStack var135=new ItemStack(Block.whiteStone);
  DecomposerRecipe.add(new DecomposerRecipeSelect(var133,0.1F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.Ni),this.element(EnumElement.Tc)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,3),this.element(EnumElement.Ti),this.element(EnumElement.Fe)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,1),this.element(EnumElement.W,4),this.element(EnumElement.Cr,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,10),this.element(EnumElement.W,1),this.element(EnumElement.Zn,8),this.element(EnumElement.Be,4)})}));
  DecomposerRecipe.add(new DecomposerRecipeSelect(var134,0.2F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,3),this.element(EnumElement.Be,1),this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pb,1),this.element(EnumElement.Si,5),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,6),this.element(EnumElement.O,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es,1),this.element(EnumElement.O,2)})}));
  DecomposerRecipe.add(new DecomposerRecipeSelect(var135,0.8F,new DecomposerRecipe[]{new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O),this.element(EnumElement.H,4),this.element(EnumElement.Li)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Es)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Pu)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Fr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Nd)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Si,2),this.element(EnumElement.O,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.H,4)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Be,8)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Li,2)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Zr)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Na)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Rb)}),new DecomposerRecipe(new Chemical[]{this.element(EnumElement.Ga),this.element(EnumElement.As)})}));
  ItemStack var136=new ItemStack(Block.plantYellow);
  DecomposerRecipe.add(new DecomposerRecipeChance(var136,0.3F,new Chemical[]{new Molecule(EnumMolecule.shikimicAcid,2)}));
  ItemStack var137=new ItemStack(Item.rottenFlesh);
  DecomposerRecipe.add(new DecomposerRecipeChance(var137,0.05F,new Chemical[]{new Molecule(EnumMolecule.nod,1)}));
  ItemStack var139=new ItemStack(Block.tallGrass,1,1);
  DecomposerRecipe.add(new DecomposerRecipeChance(var139,0.1F,new Chemical[]{new Molecule(EnumMolecule.afroman,2)}));
  this.addDecomposerRecipesFromMolecules();
  this.addSynthesisRecipesFromMolecules();
  this.addUnusedSynthesisRecipes();
  this.registerPoisonRecipes(EnumMolecule.poison);
  this.registerPoisonRecipes(EnumMolecule.sucrose);
  this.registerPoisonRecipes(EnumMolecule.psilocybin);
  this.registerPoisonRecipes(EnumMolecule.methamphetamine);
  this.registerPoisonRecipes(EnumMolecule.amphetamine);
  this.registerPoisonRecipes(EnumMolecule.pantherine);
  this.registerPoisonRecipes(EnumMolecule.ethanol);
  this.registerPoisonRecipes(EnumMolecule.penicillin);
  this.registerPoisonRecipes(EnumMolecule.testosterone);
  this.registerPoisonRecipes(EnumMolecule.xanax);
  this.registerPoisonRecipes(EnumMolecule.mescaline);
  this.registerPoisonRecipes(EnumMolecule.asprin);
  this.registerPoisonRecipes(EnumMolecule.sulfuricAcid);
  this.registerPoisonRecipes(EnumMolecule.ttx);
  this.registerPoisonRecipes(EnumMolecule.pal2);
  this.registerPoisonRecipes(EnumMolecule.nod);
  this.registerPoisonRecipes(EnumMolecule.afroman);
}",0.9999596008564618
21890,"@PreInit public void preInit(FMLPreInitializationEvent event){
  logger=Logger.getLogger(""String_Node_Str"");
  logger.setParent(FMLLog.getLogger());
  Localization.loadLanguages(CommonProxy.LANG_DIR,LANGUAGES_SUPPORTED);
  loadConfig(event);
  MinechemItems.registerItems();
  MinechemBlocks.registerBlocks();
  MinechemBlueprint.registerBlueprints();
  MinechemRecipes.getInstance().RegisterRecipes();
  MinechemItems.registerToOreDictionary();
  proxy.registerHooks();
  MinecraftForge.EVENT_BUS.register(MinechemRecipes.getInstance());
  MinecraftForge.EVENT_BUS.register(this);
  logger.info(""String_Node_Str"");
  for (int i=0; i < 5; i++)   VillagerRegistry.instance().registerVillageTradeHandler(i,new VillageTradeHandler());
}","@PreInit public void preInit(FMLPreInitializationEvent event){
}",0.1606022584692597
21891,"@Init public void init(FMLInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,new GuiHandler());
  TickRegistry.registerScheduledTickHandler(new ScheduledTickHandler(),Side.SERVER);
  proxy.registerRenderers();
  System.out.println(""String_Node_Str"");
  LanguageRegistry.instance().addStringLocalization(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Modstats.instance().getReporter().registerMod(this);
  BasicComponents.requestAll();
  BasicComponents.registerTileEntities();
}","@Init public void init(FMLInitializationEvent event){
  NetworkRegistry.instance().registerGuiHandler(this,new GuiHandler());
  TickRegistry.registerScheduledTickHandler(new ScheduledTickHandler(),Side.SERVER);
  proxy.registerRenderers();
  System.out.println(""String_Node_Str"");
  LanguageRegistry.instance().addStringLocalization(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Modstats.instance().getReporter().registerMod(this);
}",0.9232365145228216
21892,"public ItemStack getStackInSlot(int i){
  if (inventory != null) {
    return inventory.getStackInSlot(i);
  }
 else {
    return container.getSlot(i).getStack();
  }
}","public ItemStack getStackInSlot(int i){
  if (inventory != null)   return inventory.getStackInSlot(i);
  return container.getSlot(i).getStack();
}",0.929936305732484
21893,"@Override public VisiblityData modifyVisiblity(GuiContainer gui,VisiblityData currentVisibility){
  currentVisibility.showItemPanel=false;
  currentVisibility.showItemSection=false;
  return currentVisibility;
}","@Override public VisiblityData modifyVisiblity(GuiContainer gui,VisiblityData currentVisibility){
  currentVisibility.showItemPanel=true;
  currentVisibility.showItemSection=true;
  return currentVisibility;
}",0.9666666666666668
21894,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type.ordinal()) {
case 0:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
      return;
    }
case 1:
{
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
    return;
  }
case 2:
{
  GL11.glTranslatef(0.0F,0.7f,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
  GL11.glScalef(0.5f,0.5f,0.5f);
  return;
}
case 3:
{
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type.ordinal()) {
case 0:
{
    }
case 1:
{
    GL11.glRotatef(2.0F,0F,0.0F,0.0F);
    GL11.glTranslatef(0F,-0.5F,0.5F);
  }
case 2:
{
  GL11.glTranslatef(0.0F,0.5F,0.0F);
  GL11.glRotatef(-4.0F,0.0F,1.0F,0.0F);
  GL11.glRotatef(2.0F,1.0F,0.0F,0.0F);
  GL11.glScalef(1F,1F,1F);
}
case 3:
{
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.7053941908713693
21895,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type.ordinal()) {
case 0:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
      return;
    }
case 1:
{
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
    return;
  }
case 2:
{
  GL11.glTranslatef(0.0F,0.7f,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
  GL11.glScalef(0.5f,0.5f,0.5f);
  return;
}
case 3:
{
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type.ordinal()) {
case 0:
{
    }
case 1:
{
    GL11.glRotatef(2.0F,0F,0.0F,0.0F);
    GL11.glTranslatef(0F,-0.5F,0.5F);
  }
case 2:
{
  GL11.glTranslatef(0.0F,0.5F,0.0F);
  GL11.glRotatef(-4.0F,0.0F,1.0F,0.0F);
  GL11.glRotatef(2.0F,1.0F,0.0F,0.0F);
  GL11.glScalef(1F,1F,1F);
}
case 3:
{
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.739972337482711
21896,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.MICROSCOPE_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type.ordinal()) {
case 0:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
      return;
    }
case 1:
{
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
    return;
  }
case 2:
{
  GL11.glTranslatef(0.0F,0.7f,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
  GL11.glScalef(0.5f,0.5f,0.5f);
  return;
}
case 3:
{
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
}
}
modelMicroscope.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.MICROSCOPE_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type.ordinal()) {
case 0:
{
    }
case 1:
{
    GL11.glRotatef(2.0F,0F,0.0F,0.0F);
    GL11.glTranslatef(0F,-0.5F,0.5F);
  }
case 2:
{
  GL11.glTranslatef(0.0F,0.5F,0.0F);
  GL11.glRotatef(-4.0F,0.0F,1.0F,0.0F);
  GL11.glRotatef(2.0F,1.0F,0.0F,0.0F);
  GL11.glScalef(1F,1F,1F);
}
case 3:
{
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
}
}
modelMicroscope.render(0.0625F);
GL11.glPopMatrix();
}",0.7424657534246575
21897,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type.ordinal()) {
case 0:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
      return;
    }
case 1:
{
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
    return;
  }
case 2:
{
  GL11.glTranslatef(0.0F,0.7f,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
  GL11.glScalef(0.5f,0.5f,0.5f);
  return;
}
case 3:
{
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type.ordinal()) {
case 0:
{
    }
case 1:
{
    GL11.glRotatef(2.0F,0F,0.0F,0.0F);
    GL11.glTranslatef(0F,-0.5F,0.5F);
  }
case 2:
{
  GL11.glTranslatef(0.0F,0.5F,0.0F);
  GL11.glRotatef(-4.0F,0.0F,1.0F,0.0F);
  GL11.glRotatef(2.0F,1.0F,0.0F,0.0F);
  GL11.glScalef(1F,1F,1F);
}
case 3:
{
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.7385257301808067
21898,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
    GL11.glTranslatef(0.5F,1.6F,0.0F);
  GL11.glRotatef(180f,-1f,0f,1f);
break;
}
switch (type) {
case EQUIPPED_FIRST_PERSON:
GL11.glTranslatef(0.5F,1.6F,0.0F);
GL11.glRotatef(180f,-1f,0f,1f);
break;
}
switch (type) {
case INVENTORY:
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
break;
}
switch (type) {
case ENTITY:
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
break;
}
model.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
    }
case EQUIPPED_FIRST_PERSON:
{
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
case INVENTORY:
{
  GL11.glTranslatef(0.0F,1.0F,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
}
case ENTITY:
{
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.8848641655886158
21899,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
    GL11.glTranslatef(0.5F,1.6F,0.0F);
  GL11.glRotatef(180f,-1f,0f,1f);
break;
}
switch (type) {
case EQUIPPED_FIRST_PERSON:
GL11.glTranslatef(0.5F,1.6F,0.0F);
GL11.glRotatef(180f,-1f,0f,1f);
break;
}
switch (type) {
case INVENTORY:
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
break;
}
switch (type) {
case ENTITY:
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
break;
}
model.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
    }
case EQUIPPED_FIRST_PERSON:
{
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
case INVENTORY:
{
  GL11.glTranslatef(0.0F,1.0F,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
}
case ENTITY:
{
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.8848641655886158
21900,"@Override public boolean handleRenderType(ItemStack item,ItemRenderType type){
switch (type) {
case EQUIPPED:
    return true;
}
switch (type) {
case EQUIPPED_FIRST_PERSON:
  return true;
}
switch (type) {
case INVENTORY:
return true;
}
switch (type) {
case ENTITY:
return true;
}
return false;
}","@Override public boolean handleRenderType(ItemStack item,ItemRenderType type){
switch (type) {
case EQUIPPED:
{
      return true;
    }
case EQUIPPED_FIRST_PERSON:
{
    return true;
  }
case INVENTORY:
{
  return true;
}
case ENTITY:
{
return true;
}
}
return false;
}",0.6643109540636042
21901,"@Override public boolean handleRenderType(ItemStack item,ItemRenderType type){
switch (type) {
case EQUIPPED:
    return true;
}
switch (type) {
case EQUIPPED_FIRST_PERSON:
  return true;
}
switch (type) {
case INVENTORY:
return true;
}
switch (type) {
case ENTITY:
return true;
}
return false;
}","@Override public boolean handleRenderType(ItemStack item,ItemRenderType type){
switch (type) {
case EQUIPPED:
{
      return true;
    }
case EQUIPPED_FIRST_PERSON:
{
    return true;
  }
case INVENTORY:
{
  return true;
}
case ENTITY:
{
return true;
}
}
return false;
}",0.6643109540636042
21902,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
    GL11.glTranslatef(0.5F,1.6F,0.0F);
  GL11.glRotatef(180f,-1f,0f,1f);
break;
}
switch (type) {
case EQUIPPED_FIRST_PERSON:
GL11.glTranslatef(0.5F,1.6F,0.0F);
GL11.glRotatef(180f,-1f,0f,1f);
break;
}
switch (type) {
case INVENTORY:
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
break;
}
switch (type) {
case ENTITY:
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
break;
}
model.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
    }
case EQUIPPED_FIRST_PERSON:
{
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
case INVENTORY:
{
  GL11.glTranslatef(0.0F,1.0F,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
}
case ENTITY:
{
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.8842652795838751
21903,"private void checkForPoison(EntityPlayer entityPlayer){
  ItemStack currentItem=entityPlayer.inventory.getCurrentItem();
  if (isPlayerEating(entityPlayer) && currentItem != null && currentItem.getTagCompound() != null) {
    NBTTagCompound stackTag=currentItem.getTagCompound();
    boolean isPoisoned=stackTag.getBoolean(""String_Node_Str"");
    int effectType=stackTag.getInteger(""String_Node_Str"");
    EnumMolecule molecule=EnumMolecule.getById(effectType);
    if (isPoisoned) {
      MinechemHelper.triggerPlayerEffect(molecule,entityPlayer);
      entityPlayer.inventory.decrStackSize(entityPlayer.inventory.currentItem,1);
    }
  }
}","private void checkForPoison(EntityPlayer entityPlayer){
  ItemStack currentItem=entityPlayer.inventory.getCurrentItem();
  if (isPlayerEating(entityPlayer) && currentItem != null && currentItem.getTagCompound() != null) {
    NBTTagCompound stackTag=currentItem.getTagCompound();
    boolean isPoisoned=stackTag.getBoolean(""String_Node_Str"");
    int effectType=stackTag.getInteger(""String_Node_Str"");
    EnumMolecule molecule=EnumMolecule.getById(effectType);
    if (isPoisoned) {
      Pharm.triggerPlayerEffect(molecule,entityPlayer);
      entityPlayer.inventory.decrStackSize(entityPlayer.inventory.currentItem,1);
    }
  }
}",0.9866666666666668
21904,"@Override public ItemStack onEaten(ItemStack itemStack,World world,EntityPlayer entityPlayer){
  --itemStack.stackSize;
  if (world.isRemote)   return itemStack;
  EnumMolecule molecule=getMolecule(itemStack);
  Pharm.triggerPlayerEffect(molecule,entityPlayer);
  world.playSoundAtEntity(player,""String_Node_Str"",0.5F,world.rand.nextFloat() * 0.1F + 0.9F);
  return itemStack;
}","@Override public ItemStack onEaten(ItemStack itemStack,World world,EntityPlayer entityPlayer){
  --itemStack.stackSize;
  if (world.isRemote)   return itemStack;
  EnumMolecule molecule=getMolecule(itemStack);
  Pharm.triggerPlayerEffect(molecule,entityPlayer);
  world.playSoundAtEntity(entityPlayer,""String_Node_Str"",0.5F,world.rand.nextFloat() * 0.1F + 0.9F);
  return itemStack;
}",0.989501312335958
21905,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.4F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.4F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}",0.9036729036729036
21906,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.4F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,0.7f,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
    GL11.glScalef(0.5f,0.5f,0.5f);
    GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
    GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  }
 else   if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
    GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}",0.6932750136686714
21907,"@Override public boolean handleRenderType(ItemStack item,ItemRenderType type){
  if (type == ItemRenderType.INVENTORY)   return true;
  if (type == ItemRenderType.EQUIPPED)   return true;
  if (type == ItemRenderType.ENTITY)   return true;
  return false;
}","@Override public boolean handleRenderType(ItemStack item,ItemRenderType type){
  if (type == ItemRenderType.INVENTORY)   return true;
  if (type == ItemRenderType.EQUIPPED)   return true;
  if (type == ItemRenderType.ENTITY)   return true;
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON)   return true;
  return false;
}",0.8846815834767642
21908,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.MICROSCOPE_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY)   GL11.glTranslatef(0.0F,0.5F,0.0F);
  if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  modelMicroscope.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.MICROSCOPE_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY)   GL11.glTranslatef(0.0F,0.5F,0.0F);
  if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,1f,0f,1f);
  }
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  modelMicroscope.render(0.0625F);
  GL11.glPopMatrix();
}",0.9015544041450776
21909,"@Override public boolean handleRenderType(ItemStack item,ItemRenderType type){
  if (type == ItemRenderType.EQUIPPED)   return true;
  if (type == ItemRenderType.INVENTORY)   return true;
  if (type == ItemRenderType.ENTITY)   return true;
  return false;
}","@Override public boolean handleRenderType(ItemStack item,ItemRenderType type){
  if (type == ItemRenderType.EQUIPPED)   return true;
  if (type == ItemRenderType.INVENTORY)   return true;
  if (type == ItemRenderType.ENTITY)   return true;
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON)   return true;
  return false;
}",0.8846815834767642
21910,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.5F,0.0F);
    GL11.glRotatef(180f,0.1f,0.0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,0.1f,0.0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.5F,0.0F);
    GL11.glRotatef(180f,0.1f,0.0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,0.1f,0.0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}",0.904071773636991
21911,"@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GUI_ID_JOURNAL) {
    return getServerGuiElementForJournal(player,world);
  }
  if (ID == GUI_TABLE) {
    return new CotainerTable(player.inventory);
  }
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityDecomposer)   return new ContainerDecomposer(player.inventory,(TileEntityDecomposer)tileEntity);
  if (tileEntity instanceof TileEntityMicroscope)   return new ContainerMicroscope(player.inventory,(TileEntityMicroscope)tileEntity);
  if (tileEntity instanceof TileEntitySynthesis)   return new ContainerSynthesis(player.inventory,(TileEntitySynthesis)tileEntity);
  if (tileEntity instanceof TileEntityFusion)   return new ContainerFusion(player.inventory,(TileEntityFusion)tileEntity);
  if (tileEntity instanceof TileEntityProxy)   return getServerGuiElementFromProxy((TileEntityProxy)tileEntity,player);
  if (tileEntity instanceof TileEntityBlueprintProjector)   return new ContainerProjector(player.inventory,(TileEntityBlueprintProjector)tileEntity);
  if (tileEntity instanceof TileEntityChemicalStorage)   return new ContainerChemicalStorage(player.inventory,(TileEntityChemicalStorage)tileEntity);
  return null;
}","@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
  if (ID == GUI_ID_JOURNAL) {
    return getServerGuiElementForJournal(player,world);
  }
  if (ID == GUI_TABLE) {
    return new CotainerTable(player.inventory);
  }
  TileEntity tileEntity=world.getBlockTileEntity(x,y,z);
  if (tileEntity instanceof TileEntityDecomposer)   return new ContainerDecomposer(player.inventory,(TileEntityDecomposer)tileEntity);
  if (tileEntity instanceof TileEntityMicroscope)   return new ContainerMicroscope(player.inventory,(TileEntityMicroscope)tileEntity);
  if (tileEntity instanceof TileEntitySynthesis)   return new ContainerSynthesis(player.inventory,(TileEntitySynthesis)tileEntity);
  if (tileEntity instanceof TileEntityFusion) {
    player.sendChatToPlayer(""String_Node_Str"");
    return new ContainerFusion(player.inventory,(TileEntityFusion)tileEntity);
  }
  if (tileEntity instanceof TileEntityProxy) {
    player.sendChatToPlayer(""String_Node_Str"");
    return getServerGuiElementFromProxy((TileEntityProxy)tileEntity,player);
  }
  if (tileEntity instanceof TileEntityBlueprintProjector)   return new ContainerProjector(player.inventory,(TileEntityBlueprintProjector)tileEntity);
  if (tileEntity instanceof TileEntityChemicalStorage)   return new ContainerChemicalStorage(player.inventory,(TileEntityChemicalStorage)tileEntity);
  return null;
}",0.9583333333333334
21912,"public void setBlueprint(MinechemBlueprint blueprint){
  this.blueprint=blueprint;
  this.structure=blueprint.getResultStructure();
  this.offsetX=xCoord - blueprint.getManagerPosX();
  this.offsetY=xCoord - blueprint.getManagerPosY();
  this.offsetZ=xCoord - blueprint.getManagerPosZ();
}","public void setBlueprint(MinechemBlueprint blueprint){
  this.blueprint=blueprint;
  this.structure=blueprint.getResultStructure();
  this.offsetX=xCoord - blueprint.getManagerPosX();
  this.offsetY=yCoord - blueprint.getManagerPosY();
  this.offsetZ=zCoord - blueprint.getManagerPosZ();
}",0.9930795847750864
21913,"private void linkProxies(){
  for (int y=0; y < blueprint.ySize; y++) {
    for (int x=0; x < blueprint.xSize; x++) {
      for (int z=0; z < blueprint.zSize; z++) {
        linkProxy(x,y,z);
      }
    }
  }
}","private void linkProxies(){
  for (int y=0; y < blueprint.ySize; y++) {
    for (int x=7; x < blueprint.xSize; ) {
      for (int z=7; z < blueprint.zSize; ) {
        linkProxy(x,y,z);
      }
    }
  }
}",0.9759615384615384
21914,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
    }
case EQUIPPED_FIRST_PERSON:
{
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
case INVENTORY:
{
  GL11.glTranslatef(0.0F,1.0F,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
}
case ENTITY:
{
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
      return;
    }
case EQUIPPED_FIRST_PERSON:
{
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
    return;
  }
case INVENTORY:
{
  GL11.glTranslatef(0.0F,1.0F,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
  return;
}
case ENTITY:
{
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
return;
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.9715762273901808
21915,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
    }
case EQUIPPED_FIRST_PERSON:
{
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
case INVENTORY:
{
  GL11.glTranslatef(0.0F,1.0F,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
}
case ENTITY:
{
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
      return;
    }
case EQUIPPED_FIRST_PERSON:
{
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
    return;
  }
case INVENTORY:
{
  GL11.glTranslatef(0.0F,1.0F,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
  return;
}
case ENTITY:
{
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
return;
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.9715762273901808
21916,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.MICROSCOPE_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
    GL11.glTranslatef(0.5F,1.6F,0.0F);
  GL11.glRotatef(180f,-1f,0f,1f);
break;
}
switch (type) {
case EQUIPPED_FIRST_PERSON:
GL11.glTranslatef(0.5F,1.6F,0.0F);
GL11.glRotatef(180f,-1f,0f,1f);
break;
}
switch (type) {
case INVENTORY:
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
break;
}
switch (type) {
case ENTITY:
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
break;
}
modelMicroscope.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.MICROSCOPE_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
      return;
    }
case EQUIPPED_FIRST_PERSON:
{
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
    return;
  }
case INVENTORY:
{
  GL11.glTranslatef(0.0F,1.0F,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
  return;
}
case ENTITY:
{
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
return;
}
}
modelMicroscope.render(0.0625F);
GL11.glPopMatrix();
}",0.8640897755610972
21917,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
    }
case EQUIPPED_FIRST_PERSON:
{
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
case INVENTORY:
{
  GL11.glTranslatef(0.0F,1.0F,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
}
case ENTITY:
{
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
{
      GL11.glTranslatef(0.5F,1.6F,0.0F);
      GL11.glRotatef(180f,-1f,0f,1f);
      return;
    }
case EQUIPPED_FIRST_PERSON:
{
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
    return;
  }
case INVENTORY:
{
  GL11.glTranslatef(0.0F,1.0F,0.0F);
  GL11.glRotatef(180f,0f,0f,1f);
  return;
}
case ENTITY:
{
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
return;
}
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.9714285714285714
21918,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.4F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.4F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}",0.8946700507614214
21919,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,0.7f,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
    GL11.glScalef(0.5f,0.5f,0.5f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,0.7f,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
    GL11.glScalef(0.5f,0.5f,0.5f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}",0.8991494532199271
21920,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.MICROSCOPE_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY)   GL11.glTranslatef(0.0F,0.5F,0.0F);
  if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,1f,0f,1f);
  }
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  modelMicroscope.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.MICROSCOPE_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY)   GL11.glTranslatef(0.0F,0.5F,0.0F);
  if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
  modelMicroscope.render(0.0625F);
  GL11.glPopMatrix();
}",0.8840970350404312
21921,"@Override public boolean handleRenderType(ItemStack item,ItemRenderType type){
  if (type == ItemRenderType.EQUIPPED)   return true;
  if (type == ItemRenderType.INVENTORY)   return true;
  if (type == ItemRenderType.ENTITY)   return true;
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON)   return true;
  return false;
}","@Override public boolean handleRenderType(ItemStack item,ItemRenderType type){
  if (type == ItemRenderType.EQUIPPED)   return true;
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON)   return true;
  if (type == ItemRenderType.INVENTORY)   return true;
  if (type == ItemRenderType.ENTITY)   return true;
  return false;
}",0.6697530864197531
21922,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.5F,0.0F);
    GL11.glRotatef(180f,0.1f,0.0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,0.1f,0.0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.5F,0.0F);
    GL11.glRotatef(180f,0.1f,0.0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,0.1f,0.0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}",0.8950695322376738
21923,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.4F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.PROJECTOR_MODEL_OFF;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
    GL11.glTranslatef(0.5F,1.6F,0.0F);
  GL11.glRotatef(180f,-1f,0f,1f);
break;
case EQUIPPED_FIRST_PERSON:
GL11.glTranslatef(0.5F,1.6F,0.0F);
GL11.glRotatef(180f,-1f,0f,1f);
break;
case INVENTORY:
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
break;
case ENTITY:
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
break;
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.6570491803278689
21924,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,0.7f,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
    GL11.glScalef(0.5f,0.5f,0.5f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.DECOMPOSER_MODEL_ON;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
    GL11.glTranslatef(0.5F,1.6F,0.0F);
  GL11.glRotatef(180f,-1f,0f,1f);
break;
case EQUIPPED_FIRST_PERSON:
GL11.glTranslatef(0.5F,1.6F,0.0F);
GL11.glRotatef(180f,-1f,0f,1f);
break;
case INVENTORY:
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
break;
case ENTITY:
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
break;
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.6423076923076924
21925,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.MICROSCOPE_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY)   GL11.glTranslatef(0.0F,0.5F,0.0F);
  if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,1f,0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
  modelMicroscope.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.MICROSCOPE_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
    GL11.glTranslatef(0.5F,1.6F,0.0F);
  GL11.glRotatef(180f,-1f,0f,1f);
break;
case EQUIPPED_FIRST_PERSON:
GL11.glTranslatef(0.5F,1.6F,0.0F);
GL11.glRotatef(180f,-1f,0f,1f);
break;
case INVENTORY:
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
break;
case ENTITY:
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
break;
}
modelMicroscope.render(0.0625F);
GL11.glPopMatrix();
}",0.6608462055070518
21926,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
  if (type == ItemRenderType.ENTITY) {
    GL11.glTranslatef(0.0F,1.5F,0.0F);
    GL11.glRotatef(180f,0.1f,0.0f,1f);
  }
 else   if (type == ItemRenderType.EQUIPPED) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,0.1f,0.0f,1f);
  }
 else {
    GL11.glTranslatef(0.0F,1.0F,0.0F);
    GL11.glRotatef(180f,0f,0f,1f);
  }
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    GL11.glTranslatef(0.5F,1.6F,0.0F);
    GL11.glRotatef(180f,-1f,0f,1f);
  }
  model.render(0.0625F);
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  String texture=ConstantValue.SYNTHESIS_MODEL;
  GL11.glPushMatrix();
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,FMLClientHandler.instance().getClient().renderEngine.getTexture(texture));
switch (type) {
case EQUIPPED:
    GL11.glTranslatef(0.5F,1.6F,0.0F);
  GL11.glRotatef(180f,-1f,0f,1f);
break;
case EQUIPPED_FIRST_PERSON:
GL11.glTranslatef(0.5F,1.6F,0.0F);
GL11.glRotatef(180f,-1f,0f,1f);
break;
case INVENTORY:
GL11.glTranslatef(0.0F,1.0F,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
break;
case ENTITY:
GL11.glTranslatef(0.0F,0.7f,0.0F);
GL11.glRotatef(180f,0f,0f,1f);
GL11.glScalef(0.5f,0.5f,0.5f);
break;
}
model.render(0.0625F);
GL11.glPopMatrix();
}",0.636482939632546
21927,"@ForgeSubscribe public void oreEvent(OreDictionary.OreRegisterEvent var1){
}","@ForgeSubscribe public void oreEvent(OreDictionary.OreRegisterEvent var1){
  String[] compounds={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  EnumElement[][] elements={{EnumElement.Al},{EnumElement.Ti},{EnumElement.Cr},{EnumElement.W},{EnumElement.Pb},{EnumElement.Zn},{EnumElement.Pt},{EnumElement.Ni},{EnumElement.Os},{EnumElement.Fe},{EnumElement.Au},{EnumElement.C},{EnumElement.Cu},{EnumElement.Sn},{EnumElement.Ag},{EnumElement.Fe},{EnumElement.Fe,EnumElement.C},{EnumElement.Sn,EnumElement.Cu},{EnumElement.Cu},{EnumElement.Zn,EnumElement.Cu},{EnumElement.Ag,EnumElement.Au},{EnumElement.Fe,EnumElement.Ni}};
  int[][] proportions={{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4,4},{1,3},{1,3},{2,2},{2,1}};
  String[] itemTypes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] craftable={true,true,false,false,false,false,false};
  int[] sizeCoeff={1,4,8,4,36,16,4};
  for (int i=0; i < compounds.length; i++) {
    for (int j=0; j < itemTypes.length; j++) {
      if (var1.Name.equals(itemTypes[j] + compounds[i])) {
        System.out.print(""String_Node_Str"" + itemTypes[j] + compounds[i]);
        List<Chemical> _elems=new ArrayList<Chemical>();
        for (int k=0; k < elements[i].length; k++) {
          _elems.add(this.element(elements[i][k],proportions[i][k] * sizeCoeff[j]));
        }
        DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,_elems.toArray(new Chemical[_elems.size()])));
        if (compounds[i].equals(""String_Node_Str"") && itemTypes[j].equals(""String_Node_Str"")) {
          SynthesisRecipe.recipes.remove(recipeIron);
        }
        if (compounds[i].equals(""String_Node_Str"") && itemTypes[j].equals(""String_Node_Str"")) {
          SynthesisRecipe.recipes.remove(recipeGold);
        }
        if (compounds[i].equals(""String_Node_Str"") && itemTypes[j].equals(""String_Node_Str"")) {
          SynthesisRecipe.remove(new ItemStack(Item.coal));
          SynthesisRecipe.remove(new ItemStack(Block.oreCoal));
          SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.coal),true,2000,new Chemical[]{this.element(EnumElement.C,4),null,this.element(EnumElement.C,4),null,null,null,this.element(EnumElement.C,4),null,this.element(EnumElement.C,4)}));
        }
        if (craftable[j]) {
          SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000 * sizeCoeff[j],_elems.toArray(new Chemical[_elems.size()])));
        }
        return;
      }
    }
  }
  if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.U,4)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.U,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,5000,new Chemical[]{this.element(EnumElement.U,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.U,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,5000,new Chemical[]{this.element(EnumElement.U,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Ca,5),this.molecule(EnumMolecule.phosphate,4),this.element(EnumElement.F)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.element(EnumElement.Ca,5),this.molecule(EnumMolecule.phosphate,4),this.element(EnumElement.F)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide),this.element(EnumElement.Cr)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide),this.element(EnumElement.Cr)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Si,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.element(EnumElement.Si,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Cu,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Cu,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Fe,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Fe,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.V,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.V,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Si,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Si,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Ti,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Ti,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Co,2),this.element(EnumElement.W,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,5000,new Chemical[]{this.element(EnumElement.Co,2),this.element(EnumElement.W,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Fe,2),this.element(EnumElement.W,2),this.element(EnumElement.Si,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,5000,new Chemical[]{this.element(EnumElement.Fe,2),this.element(EnumElement.W,2),this.element(EnumElement.Si,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Fe,2),this.element(EnumElement.W,2),this.element(EnumElement.Si,2),this.element(EnumElement.Co,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,7000,new Chemical[]{this.element(EnumElement.Fe,2),this.element(EnumElement.W,2),this.element(EnumElement.Si,2),this.element(EnumElement.Co,2)}));
  }
}",0.0190572989454961
21928,"@Override public ItemStack transferStackInSlot(EntityPlayer entityPlayer,int slot){
  return null;
}","@Override public ItemStack transferStackInSlot(EntityPlayer entityPlayer,int slot){
  Slot slotObject=(Slot)inventorySlots.get(slot);
  if (slotObject != null && slotObject.getHasStack()) {
    ItemStack stackInSlot=slotObject.getStack();
    ItemStack stack=stackInSlot.copy();
    if (slot >= 0 && slot < fusion.getSizeInventory()) {
      if (!mergeItemStack(stackInSlot,fusion.getSizeInventory(),inventorySlots.size(),true))       return null;
    }
 else     if (slot >= fusion.getSizeInventory()) {
      if (!mergeItemStack(stackInSlot,fusion.kStartInput1,fusion.kStartInput1 + 1,false))       return null;
    }
    if (stackInSlot.stackSize == 0)     slotObject.putStack(null);
 else     slotObject.onSlotChanged();
    return stack;
  }
  return null;
}",0.20162224797219
21929,"@Override public boolean canInteractWith(EntityPlayer var1){
  return fusion.isUseableByPlayer(var1);
}","@Override public boolean canInteractWith(EntityPlayer var1){
  return true;
}",0.8333333333333334
21930,"public TileEntityFusion(){
  inputInventory=new BoundedInventory(this,kInput);
  outputInventory=new BoundedInventory(this,kOutput);
  starInventory=new BoundedInventory(this,kFusionStar);
  inputTransactor=new Transactor(inputInventory);
  outputTransactor=new Transactor(outputInventory);
  starTransactor=new Transactor(starInventory,1);
  this.inventory=new ItemStack[this.getSizeInventory()];
  setBlueprint(new BlueprintFusion());
}","public TileEntityFusion(){
  inventory=new ItemStack[getSizeInventory()];
  inputInventory=new BoundedInventory(this,kInput);
  outputInventory=new BoundedInventory(this,kOutput);
  starInventory=new BoundedInventory(this,kFusionStar);
  inputTransactor=new Transactor(inputInventory);
  outputTransactor=new Transactor(outputInventory);
  starTransactor=new Transactor(starInventory,1);
  this.inventory=new ItemStack[this.getSizeInventory()];
  setBlueprint(new BlueprintFusion());
}",0.9490790899241603
21931,"@Override public boolean func_102007_a(int i,ItemStack itemstack,int j){
  return false;
}","@Override public boolean func_102007_a(int i,ItemStack itemstack,int j){
  return true;
}",0.9608938547486032
21932,"@Override public boolean func_102008_b(int i,ItemStack itemstack,int j){
  return false;
}","@Override public boolean func_102008_b(int i,ItemStack itemstack,int j){
  return true;
}",0.9608938547486032
21933,"@Override public boolean func_102007_a(int i,ItemStack itemstack,int j){
  return true;
}","@Override public boolean func_102007_a(int i,ItemStack itemstack,int j){
  return false;
}",0.9608938547486032
21934,"@Override public boolean func_102008_b(int i,ItemStack itemstack,int j){
  return true;
}","@Override public boolean func_102008_b(int i,ItemStack itemstack,int j){
  return false;
}",0.9608938547486032
21935,"@ForgeSubscribe public void oreEvent(OreDictionary.OreRegisterEvent var1){
  String[] compounds={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  EnumElement[][] elements={{EnumElement.Al},{EnumElement.Ti},{EnumElement.Cr},{EnumElement.W},{EnumElement.Pb},{EnumElement.Zn},{EnumElement.Pt},{EnumElement.Ni},{EnumElement.Os},{EnumElement.Fe},{EnumElement.Au},{EnumElement.C},{EnumElement.Cu},{EnumElement.Sn},{EnumElement.Ag},{EnumElement.Fe},{EnumElement.Fe,EnumElement.C},{EnumElement.Sn,EnumElement.Cu},{EnumElement.Cu},{EnumElement.Zn,EnumElement.Cu},{EnumElement.Ag,EnumElement.Au},{EnumElement.Fe,EnumElement.Ni}};
  int[][] proportions={{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4,4},{1,3},{1,3},{2,2},{2,1}};
  String[] itemTypes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] craftable={true,true,false,false,false,false,false};
  int[] sizeCoeff={1,4,8,4,36,16,4};
  for (int i=0; i < compounds.length; i++) {
    for (int j=0; j < itemTypes.length; j++) {
      if (var1.Name.equals(itemTypes[j] + compounds[i])) {
        System.out.print(""String_Node_Str"" + itemTypes[j] + compounds[i]);
        List<Chemical> _elems=new ArrayList<Chemical>();
        for (int k=0; k < elements[i].length; k++) {
          _elems.add(this.element(elements[i][k],proportions[i][k] * sizeCoeff[j]));
        }
        DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,_elems.toArray(new Chemical[_elems.size()])));
        if (compounds[i].equals(""String_Node_Str"") && itemTypes[j].equals(""String_Node_Str"")) {
          SynthesisRecipe.recipes.remove(recipeIron);
        }
        if (compounds[i].equals(""String_Node_Str"") && itemTypes[j].equals(""String_Node_Str"")) {
          SynthesisRecipe.recipes.remove(recipeGold);
        }
        if (compounds[i].equals(""String_Node_Str"") && itemTypes[j].equals(""String_Node_Str"")) {
          SynthesisRecipe.remove(new ItemStack(Item.coal));
          SynthesisRecipe.remove(new ItemStack(Block.oreCoal));
          SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.coal),true,2000,new Chemical[]{this.element(EnumElement.C,4),null,this.element(EnumElement.C,4),null,null,null,this.element(EnumElement.C,4),null,this.element(EnumElement.C,4)}));
        }
        if (craftable[j]) {
          SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000 * sizeCoeff[j],_elems.toArray(new Chemical[_elems.size()])));
        }
        return;
      }
    }
  }
  if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Cu,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Cu,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.element(EnumElement.Cu,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Ag,4)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Ag,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.element(EnumElement.Ag,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Sn,4)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Sn,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.element(EnumElement.Sn,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Pb,4)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Pb,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.element(EnumElement.Pb,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,this.element(EnumElement.Sn),this.element(EnumElement.Cu,9)));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,this.element(EnumElement.Cu,9),this.element(EnumElement.Cu,9)));
  }
  if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.U,4)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.U,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,5000,new Chemical[]{this.element(EnumElement.U,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.U,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,5000,new Chemical[]{this.element(EnumElement.U,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Ca,5),this.molecule(EnumMolecule.phosphate,4),this.element(EnumElement.F)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.element(EnumElement.Ca,5),this.molecule(EnumMolecule.phosphate,4),this.element(EnumElement.F)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide),this.element(EnumElement.Cr)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide),this.element(EnumElement.Cr)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Si,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.element(EnumElement.Si,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Cu,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Cu,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Fe,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Fe,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.V,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.V,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Si,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Si,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Ti,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Ti,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipeChance(var1.Ore,0.1F,new Chemical[]{new Molecule(EnumMolecule.pal2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Molecule(EnumMolecule.water,6),new Element(EnumElement.Cn,1),new Element(EnumElement.Co,1),new Element(EnumElement.Br,2),new Element(EnumElement.O,6)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,780,new Chemical[]{new Molecule(EnumMolecule.water,6),new Element(EnumElement.Cn,1),new Element(EnumElement.Co,1),new Element(EnumElement.Br,2),new Element(EnumElement.O,6)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Zr,1),new Element(EnumElement.O,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,720,new Chemical[]{new Element(EnumElement.Zr,1),new Element(EnumElement.O,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pt,1),new Element(EnumElement.B,1),new Element(EnumElement.N,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Pt,1),new Element(EnumElement.B,1),new Element(EnumElement.N,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Fe,2),new Element(EnumElement.Au,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Fe,2),new Element(EnumElement.Au,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.C,1),new Element(EnumElement.Ce,1),new Element(EnumElement.Ru,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,720,new Chemical[]{new Element(EnumElement.C,1),new Element(EnumElement.Ce,1),new Element(EnumElement.Ru,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Ag,1),new Element(EnumElement.Ni,1),new Element(EnumElement.Pd,1),new Element(EnumElement.Te,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,740,new Chemical[]{new Element(EnumElement.Ag,1),new Element(EnumElement.Ni,1),new Element(EnumElement.Pd,1),new Element(EnumElement.Te,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.W,3),new Element(EnumElement.C,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,780,new Chemical[]{new Element(EnumElement.W,3),new Element(EnumElement.C,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Fe,4),new Element(EnumElement.C,1),new Element(EnumElement.Mn,1),new Element(EnumElement.Zn,1),new Element(EnumElement.Th,1),new Element(EnumElement.O,3)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Fe,4),new Element(EnumElement.C,1),new Element(EnumElement.Mn,1),new Element(EnumElement.Zn,1),new Element(EnumElement.Th,1),new Element(EnumElement.O,3)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Ni,1),new Element(EnumElement.Re,1),new Element(EnumElement.Cl,3)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,740,new Chemical[]{new Element(EnumElement.Ni,1),new Element(EnumElement.Re,1),new Element(EnumElement.Cl,3)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pt,1),new Element(EnumElement.Re,1),new Element(EnumElement.B,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Pt,1),new Element(EnumElement.Re,1),new Element(EnumElement.B,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Os,3),new Element(EnumElement.C,12),new Element(EnumElement.O,12)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,690,new Chemical[]{new Element(EnumElement.Os,3),new Element(EnumElement.C,12),new Element(EnumElement.O,12)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Cu,3),new Element(EnumElement.Fe,2),new Element(EnumElement.Sn,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Cu,3),new Element(EnumElement.Fe,2),new Element(EnumElement.Sn,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Mn,1),new Element(EnumElement.Fe,1),new Element(EnumElement.Zn,1),new Element(EnumElement.C,1),new Element(EnumElement.O,3)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,660,new Chemical[]{new Element(EnumElement.Mn,1),new Element(EnumElement.Fe,1),new Element(EnumElement.Zn,1),new Element(EnumElement.C,1),new Element(EnumElement.O,3)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pd,3),new Element(EnumElement.Ti,1),new Element(EnumElement.U,1),new Element(EnumElement.O,8),new Element(EnumElement.N,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Pd,3),new Element(EnumElement.Ti,1),new Element(EnumElement.U,1),new Element(EnumElement.O,8),new Element(EnumElement.N,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pd,3),new Element(EnumElement.Ti,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,640,new Chemical[]{new Element(EnumElement.Pd,3),new Element(EnumElement.Ti,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pd,1),new Element(EnumElement.Nb,1),new Element(EnumElement.C,1),new Element(EnumElement.Ru,1),new Element(EnumElement.Te,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Pd,1),new Element(EnumElement.Nb,1),new Element(EnumElement.C,1),new Element(EnumElement.Ru,1),new Element(EnumElement.Te,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Au,2),new Element(EnumElement.Cu,3),new Element(EnumElement.Sn,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Au,2),new Element(EnumElement.Cu,3),new Element(EnumElement.Sn,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.O,3),new Element(EnumElement.Pd,1),new Element(EnumElement.Si,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,470,new Chemical[]{new Element(EnumElement.O,3),new Element(EnumElement.Pd,1),new Element(EnumElement.Si,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Fe,3),new Element(EnumElement.Th,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,700,new Chemical[]{new Element(EnumElement.Fe,3),new Element(EnumElement.Th,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Os,3),new Element(EnumElement.C,12),new Element(EnumElement.O,14),new Element(EnumElement.Zr,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Os,3),new Element(EnumElement.C,12),new Element(EnumElement.O,14),new Element(EnumElement.Zr,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.B,1),new Element(EnumElement.N,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,720,new Chemical[]{new Element(EnumElement.B,1),new Element(EnumElement.N,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Li,1),new Element(EnumElement.C,2),new Element(EnumElement.H,5),new Element(EnumElement.O,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,570,new Chemical[]{new Element(EnumElement.Li,1),new Element(EnumElement.C,2),new Element(EnumElement.H,5),new Element(EnumElement.O,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Es,1),new Element(EnumElement.N,3),new Element(EnumElement.O,9)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,740,new Chemical[]{new Element(EnumElement.Es,1),new Element(EnumElement.N,3),new Element(EnumElement.O,9)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Au,3),new Element(EnumElement.Cn,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,600,new Chemical[]{new Element(EnumElement.Au,3),new Element(EnumElement.Cn,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pd,1),new Element(EnumElement.Nb,1),new Element(EnumElement.C,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,740,new Chemical[]{new Element(EnumElement.Pd,1),new Element(EnumElement.Nb,1),new Element(EnumElement.C,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Re,1),new Element(EnumElement.B,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,750,new Chemical[]{new Element(EnumElement.Re,1),new Element(EnumElement.B,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Hg,1),new Element(EnumElement.Te,1),new Element(EnumElement.O,3)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,720,new Chemical[]{new Element(EnumElement.Hg,1),new Element(EnumElement.Te,1),new Element(EnumElement.O,3)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Ce,1),new Element(EnumElement.Fe,1),new Element(EnumElement.Zn,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,600,new Chemical[]{new Element(EnumElement.Ce,1),new Element(EnumElement.Fe,1),new Element(EnumElement.Zn,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Ru,1),new Element(EnumElement.Te,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,760,new Chemical[]{new Element(EnumElement.Ru,1),new Element(EnumElement.Te,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Ti,1),new Element(EnumElement.V,1),new Element(EnumElement.Fe,1),new Element(EnumElement.C,1),new Element(EnumElement.Co,1),new Element(EnumElement.N,2),new Element(EnumElement.O,6)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,760,new Chemical[]{new Element(EnumElement.Ti,1),new Element(EnumElement.V,1),new Element(EnumElement.Fe,1),new Element(EnumElement.C,1),new Element(EnumElement.Co,1),new Element(EnumElement.N,2),new Element(EnumElement.O,6)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Fe,4),new Element(EnumElement.Ni,1),new Element(EnumElement.S,4)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,530,new Chemical[]{new Element(EnumElement.Fe,4),new Element(EnumElement.Ni,1),new Element(EnumElement.S,4)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Li,1),new Element(EnumElement.C,2),new Element(EnumElement.H,5),new Element(EnumElement.O,1),new Element(EnumElement.Fe,4),new Element(EnumElement.Ni,1),new Element(EnumElement.S,4)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Li,1),new Element(EnumElement.C,2),new Element(EnumElement.H,5),new Element(EnumElement.O,1),new Element(EnumElement.Fe,4),new Element(EnumElement.Ni,1),new Element(EnumElement.S,4)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Molecule(EnumMolecule.water,6),new Element(EnumElement.W,3),new Element(EnumElement.C,1),new Element(EnumElement.Cn,1),new Element(EnumElement.Co,1),new Element(EnumElement.Br,2),new Element(EnumElement.O,6)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Molecule(EnumMolecule.water,6),new Element(EnumElement.W,3),new Element(EnumElement.C,1),new Element(EnumElement.Cn,1),new Element(EnumElement.Co,1),new Element(EnumElement.Br,2),new Element(EnumElement.O,6)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Al,1),new Element(EnumElement.Cr,2),new Element(EnumElement.O,3)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,760,new Chemical[]{new Element(EnumElement.Al,1),new Element(EnumElement.Cr,2),new Element(EnumElement.O,3)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Zn,1),new Element(EnumElement.W,1),new Element(EnumElement.O,4)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,610,new Chemical[]{new Element(EnumElement.Zn,1),new Element(EnumElement.W,1),new Element(EnumElement.O,4)}));
  }
}","@ForgeSubscribe public void oreEvent(OreDictionary.OreRegisterEvent var1){
  String[] compounds={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  EnumElement[][] elements={{EnumElement.Al},{EnumElement.Ti},{EnumElement.Cr},{EnumElement.W},{EnumElement.Pb},{EnumElement.Zn},{EnumElement.Pt},{EnumElement.Ni},{EnumElement.Os},{EnumElement.Fe},{EnumElement.Au},{EnumElement.C},{EnumElement.Cu},{EnumElement.Sn},{EnumElement.Ag},{EnumElement.Fe},{EnumElement.Fe,EnumElement.C},{EnumElement.Sn,EnumElement.Cu},{EnumElement.Cu},{EnumElement.Zn,EnumElement.Cu},{EnumElement.Ag,EnumElement.Au},{EnumElement.Fe,EnumElement.Ni}};
  int[][] proportions={{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4},{4,4},{1,3},{1,3},{2,2},{2,1}};
  String[] itemTypes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  boolean[] craftable={true,true,false,false,false,false,false};
  int[] sizeCoeff={1,4,8,4,36,16,4};
  for (int i=0; i < compounds.length; i++) {
    for (int j=0; j < itemTypes.length; j++) {
      if (var1.Name.equals(itemTypes[j] + compounds[i])) {
        System.out.print(""String_Node_Str"" + itemTypes[j] + compounds[i]);
        List<Chemical> _elems=new ArrayList<Chemical>();
        for (int k=0; k < elements[i].length; k++) {
          _elems.add(this.element(elements[i][k],proportions[i][k] * sizeCoeff[j]));
        }
        DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,_elems.toArray(new Chemical[_elems.size()])));
        if (compounds[i].equals(""String_Node_Str"") && itemTypes[j].equals(""String_Node_Str"")) {
          SynthesisRecipe.recipes.remove(recipeIron);
        }
        if (compounds[i].equals(""String_Node_Str"") && itemTypes[j].equals(""String_Node_Str"")) {
          SynthesisRecipe.recipes.remove(recipeGold);
        }
        if (compounds[i].equals(""String_Node_Str"") && itemTypes[j].equals(""String_Node_Str"")) {
          SynthesisRecipe.remove(new ItemStack(Item.coal));
          SynthesisRecipe.remove(new ItemStack(Block.oreCoal));
          SynthesisRecipe.add(new SynthesisRecipe(new ItemStack(Item.coal),true,2000,new Chemical[]{this.element(EnumElement.C,4),null,this.element(EnumElement.C,4),null,null,null,this.element(EnumElement.C,4),null,this.element(EnumElement.C,4)}));
        }
        if (craftable[j]) {
          SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000 * sizeCoeff[j],_elems.toArray(new Chemical[_elems.size()])));
        }
        return;
      }
    }
  }
  if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.U,4)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.U,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,5000,new Chemical[]{this.element(EnumElement.U,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.U,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,5000,new Chemical[]{this.element(EnumElement.U,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Ca,5),this.molecule(EnumMolecule.phosphate,4),this.element(EnumElement.F)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.element(EnumElement.Ca,5),this.molecule(EnumMolecule.phosphate,4),this.element(EnumElement.F)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide),this.element(EnumElement.Cr)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide),this.element(EnumElement.Cr)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.molecule(EnumMolecule.aluminiumOxide,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Si,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,1000,new Chemical[]{this.element(EnumElement.Si,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Cu,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Cu,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Fe,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Fe,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.V,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.V,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Si,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Si,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Ti,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,300,new Chemical[]{this.element(EnumElement.Zr,2),this.element(EnumElement.Ti,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipeChance(var1.Ore,0.1F,new Chemical[]{new Molecule(EnumMolecule.pal2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Molecule(EnumMolecule.water,6),new Element(EnumElement.Cn,1),new Element(EnumElement.Co,1),new Element(EnumElement.Br,2),new Element(EnumElement.O,6)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,780,new Chemical[]{new Molecule(EnumMolecule.water,6),new Element(EnumElement.Cn,1),new Element(EnumElement.Co,1),new Element(EnumElement.Br,2),new Element(EnumElement.O,6)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Zr,1),new Element(EnumElement.O,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,720,new Chemical[]{new Element(EnumElement.Zr,1),new Element(EnumElement.O,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pt,1),new Element(EnumElement.B,1),new Element(EnumElement.N,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Pt,1),new Element(EnumElement.B,1),new Element(EnumElement.N,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Fe,2),new Element(EnumElement.Au,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Fe,2),new Element(EnumElement.Au,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.C,1),new Element(EnumElement.Ce,1),new Element(EnumElement.Ru,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,720,new Chemical[]{new Element(EnumElement.C,1),new Element(EnumElement.Ce,1),new Element(EnumElement.Ru,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Ag,1),new Element(EnumElement.Ni,1),new Element(EnumElement.Pd,1),new Element(EnumElement.Te,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,740,new Chemical[]{new Element(EnumElement.Ag,1),new Element(EnumElement.Ni,1),new Element(EnumElement.Pd,1),new Element(EnumElement.Te,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.W,3),new Element(EnumElement.C,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,780,new Chemical[]{new Element(EnumElement.W,3),new Element(EnumElement.C,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Fe,4),new Element(EnumElement.C,1),new Element(EnumElement.Mn,1),new Element(EnumElement.Zn,1),new Element(EnumElement.Th,1),new Element(EnumElement.O,3)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Fe,4),new Element(EnumElement.C,1),new Element(EnumElement.Mn,1),new Element(EnumElement.Zn,1),new Element(EnumElement.Th,1),new Element(EnumElement.O,3)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Ni,1),new Element(EnumElement.Re,1),new Element(EnumElement.Cl,3)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,740,new Chemical[]{new Element(EnumElement.Ni,1),new Element(EnumElement.Re,1),new Element(EnumElement.Cl,3)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pt,1),new Element(EnumElement.Re,1),new Element(EnumElement.B,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Pt,1),new Element(EnumElement.Re,1),new Element(EnumElement.B,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Os,3),new Element(EnumElement.C,12),new Element(EnumElement.O,12)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,690,new Chemical[]{new Element(EnumElement.Os,3),new Element(EnumElement.C,12),new Element(EnumElement.O,12)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Cu,3),new Element(EnumElement.Fe,2),new Element(EnumElement.Sn,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Cu,3),new Element(EnumElement.Fe,2),new Element(EnumElement.Sn,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Mn,1),new Element(EnumElement.Fe,1),new Element(EnumElement.Zn,1),new Element(EnumElement.C,1),new Element(EnumElement.O,3)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,660,new Chemical[]{new Element(EnumElement.Mn,1),new Element(EnumElement.Fe,1),new Element(EnumElement.Zn,1),new Element(EnumElement.C,1),new Element(EnumElement.O,3)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pd,3),new Element(EnumElement.Ti,1),new Element(EnumElement.U,1),new Element(EnumElement.O,8),new Element(EnumElement.N,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Pd,3),new Element(EnumElement.Ti,1),new Element(EnumElement.U,1),new Element(EnumElement.O,8),new Element(EnumElement.N,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pd,3),new Element(EnumElement.Ti,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,640,new Chemical[]{new Element(EnumElement.Pd,3),new Element(EnumElement.Ti,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pd,1),new Element(EnumElement.Nb,1),new Element(EnumElement.C,1),new Element(EnumElement.Ru,1),new Element(EnumElement.Te,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Pd,1),new Element(EnumElement.Nb,1),new Element(EnumElement.C,1),new Element(EnumElement.Ru,1),new Element(EnumElement.Te,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Au,2),new Element(EnumElement.Cu,3),new Element(EnumElement.Sn,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Au,2),new Element(EnumElement.Cu,3),new Element(EnumElement.Sn,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.O,3),new Element(EnumElement.Pd,1),new Element(EnumElement.Si,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,470,new Chemical[]{new Element(EnumElement.O,3),new Element(EnumElement.Pd,1),new Element(EnumElement.Si,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Fe,3),new Element(EnumElement.Th,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,700,new Chemical[]{new Element(EnumElement.Fe,3),new Element(EnumElement.Th,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Os,3),new Element(EnumElement.C,12),new Element(EnumElement.O,14),new Element(EnumElement.Zr,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Os,3),new Element(EnumElement.C,12),new Element(EnumElement.O,14),new Element(EnumElement.Zr,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.B,1),new Element(EnumElement.N,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,720,new Chemical[]{new Element(EnumElement.B,1),new Element(EnumElement.N,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Li,1),new Element(EnumElement.C,2),new Element(EnumElement.H,5),new Element(EnumElement.O,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,570,new Chemical[]{new Element(EnumElement.Li,1),new Element(EnumElement.C,2),new Element(EnumElement.H,5),new Element(EnumElement.O,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Es,1),new Element(EnumElement.N,3),new Element(EnumElement.O,9)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,740,new Chemical[]{new Element(EnumElement.Es,1),new Element(EnumElement.N,3),new Element(EnumElement.O,9)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Au,3),new Element(EnumElement.Cn,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,600,new Chemical[]{new Element(EnumElement.Au,3),new Element(EnumElement.Cn,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Pd,1),new Element(EnumElement.Nb,1),new Element(EnumElement.C,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,740,new Chemical[]{new Element(EnumElement.Pd,1),new Element(EnumElement.Nb,1),new Element(EnumElement.C,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Re,1),new Element(EnumElement.B,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,750,new Chemical[]{new Element(EnumElement.Re,1),new Element(EnumElement.B,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Hg,1),new Element(EnumElement.Te,1),new Element(EnumElement.O,3)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,720,new Chemical[]{new Element(EnumElement.Hg,1),new Element(EnumElement.Te,1),new Element(EnumElement.O,3)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Ce,1),new Element(EnumElement.Fe,1),new Element(EnumElement.Zn,1)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,600,new Chemical[]{new Element(EnumElement.Ce,1),new Element(EnumElement.Fe,1),new Element(EnumElement.Zn,1)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Ru,1),new Element(EnumElement.Te,2)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,760,new Chemical[]{new Element(EnumElement.Ru,1),new Element(EnumElement.Te,2)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Ti,1),new Element(EnumElement.V,1),new Element(EnumElement.Fe,1),new Element(EnumElement.C,1),new Element(EnumElement.Co,1),new Element(EnumElement.N,2),new Element(EnumElement.O,6)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,760,new Chemical[]{new Element(EnumElement.Ti,1),new Element(EnumElement.V,1),new Element(EnumElement.Fe,1),new Element(EnumElement.C,1),new Element(EnumElement.Co,1),new Element(EnumElement.N,2),new Element(EnumElement.O,6)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Fe,4),new Element(EnumElement.Ni,1),new Element(EnumElement.S,4)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,530,new Chemical[]{new Element(EnumElement.Fe,4),new Element(EnumElement.Ni,1),new Element(EnumElement.S,4)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Li,1),new Element(EnumElement.C,2),new Element(EnumElement.H,5),new Element(EnumElement.O,1),new Element(EnumElement.Fe,4),new Element(EnumElement.Ni,1),new Element(EnumElement.S,4)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Element(EnumElement.Li,1),new Element(EnumElement.C,2),new Element(EnumElement.H,5),new Element(EnumElement.O,1),new Element(EnumElement.Fe,4),new Element(EnumElement.Ni,1),new Element(EnumElement.S,4)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Molecule(EnumMolecule.water,6),new Element(EnumElement.W,3),new Element(EnumElement.C,1),new Element(EnumElement.Cn,1),new Element(EnumElement.Co,1),new Element(EnumElement.Br,2),new Element(EnumElement.O,6)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,400,new Chemical[]{new Molecule(EnumMolecule.water,6),new Element(EnumElement.W,3),new Element(EnumElement.C,1),new Element(EnumElement.Cn,1),new Element(EnumElement.Co,1),new Element(EnumElement.Br,2),new Element(EnumElement.O,6)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Al,1),new Element(EnumElement.Cr,2),new Element(EnumElement.O,3)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,760,new Chemical[]{new Element(EnumElement.Al,1),new Element(EnumElement.Cr,2),new Element(EnumElement.O,3)}));
  }
 else   if (var1.Name.contains(""String_Node_Str"")) {
    DecomposerRecipe.add(new DecomposerRecipe(var1.Ore,new Chemical[]{new Element(EnumElement.Zn,1),new Element(EnumElement.W,1),new Element(EnumElement.O,4)}));
    SynthesisRecipe.add(new SynthesisRecipe(var1.Ore,false,610,new Chemical[]{new Element(EnumElement.Zn,1),new Element(EnumElement.W,1),new Element(EnumElement.O,4)}));
  }
}",0.9544667051663632
21936,"private void setBlock(int x,int y,int z,LocalPosition position,int structureId,HashMap<Integer,BlueprintBlock> blockLookup,TileEntity managerTileEntity){
  Pos3 worldPos=position.getLocalPos(x,y,z);
  if (structureId == MinechemBlueprint.wildcard) {
    return;
  }
  if (structureId == air) {
    worldObj.setBlockToAir(worldPos.x,worldPos.y,worldPos.z);
  }
 else {
    BlueprintBlock blueprintBlock=blockLookup.get(structureId);
    if (blueprintBlock.type == Type.MANAGER)     return;
    worldObj.setBlock(worldPos.x,worldPos.y,worldPos.z,blueprintBlock.block.blockID,blueprintBlock.metadata,3);
    if (blueprintBlock.type == Type.PROXY) {
      TileEntityProxy proxy=(TileEntityProxy)worldObj.getBlockTileEntity(worldPos.x,worldPos.y,worldPos.z);
      if (proxy instanceof TileEntityProxy) {
        if (proxy != null)         proxy.setManager(managerTileEntity);
      }
    }
  }
}","private void setBlock(int x,int y,int z,LocalPosition position,int structureId,HashMap<Integer,BlueprintBlock> blockLookup,TileEntity managerTileEntity){
  Pos3 worldPos=position.getLocalPos(x,y,z);
  if (structureId == MinechemBlueprint.wildcard) {
    return;
  }
  if (structureId == air) {
    worldObj.setBlockToAir(worldPos.x,worldPos.y,worldPos.z);
  }
 else {
    BlueprintBlock blueprintBlock=blockLookup.get(structureId);
    if (blueprintBlock.type == Type.MANAGER)     return;
    worldObj.setBlock(worldPos.x,worldPos.y,worldPos.z,blueprintBlock.block.blockID,blueprintBlock.metadata,3);
    if (blueprintBlock.type == Type.PROXY) {
      TileEntity te=worldObj.getBlockTileEntity(worldPos.x,worldPos.y,worldPos.z);
      if (te instanceof TileEntityProxy) {
        TileEntityProxy proxy=(TileEntityProxy)te;
      }
    }
  }
}",0.8240046162723601
21937,"@Override public void updateEntity(){
  super.updateEntity();
  powerProvider.receiveEnergy((float)wattsReceived / 437.5F,ForgeDirection.UP);
  powerProvider.update(this);
  if (!worldObj.isRemote && powerProvider.didEnergyStoredChange()) {
    sendUpdatePacket();
  }
  if (powerProvider.getEnergyStored() >= powerProvider.getMaxEnergyStored())   hasFullEnergy=true;
  if (hasFullEnergy && powerProvider.getEnergyStored() < powerProvider.getMaxEnergyStored() / 2)   hasFullEnergy=false;
  if (currentRecipe != null && inventory[kOutput[0]] == null) {
    inventory[kOutput[0]]=currentRecipe.getOutput().copy();
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  powerProvider.receiveEnergy((float)wattsReceived / 437.5F,ForgeDirection.UP);
  powerProvider.update(this);
  if (!worldObj.isRemote && (powerProvider.didEnergyStoredChange() || powerProvider.didEnergyUsageChange()))   sendUpdatePacket();
  float energyStored=powerProvider.getEnergyStored();
  if (energyStored >= powerProvider.getMaxEnergyStored())   hasFullEnergy=true;
  if (hasFullEnergy && energyStored < powerProvider.getMaxEnergyStored() / 2)   hasFullEnergy=false;
  if (powerProvider.getEnergyStored() >= powerProvider.getMaxEnergyStored())   hasFullEnergy=true;
  if (hasFullEnergy && powerProvider.getEnergyStored() < powerProvider.getMaxEnergyStored() / 2)   hasFullEnergy=false;
  if (currentRecipe != null && inventory[kOutput[0]] == null) {
    inventory[kOutput[0]]=currentRecipe.getOutput().copy();
  }
}",0.803725881570193
21938,"public static void registerItems(){
  element=new ItemElement(elementID);
  molecule=new ItemMolecule(moleculeID);
  lens=new ItemLens(lensID);
  atomicManipulator=new ItemAtomicManipulator(atomicManipulatorID);
  fusionStar=new ItemFusionStar(fusionStarID);
  blueprint=new ItemBlueprint(blueprintID);
  testTube=new ItemTestTube(testTubeID);
  journal=new ItemChemistJournal(journalID);
  hazmatFeet=new ItemArmorRadiationShield(hazmatFeetID,3,0.1F,ConstantValue.HAZMAT_FEET_TEX);
  hazmatLegs=new ItemArmorRadiationShield(hazmatLegsID,2,0.1F,ConstantValue.HAZMAT_LEGS_TEX);
  hazmatTorso=new ItemArmorRadiationShield(hazmatTorsoID,1,0.5F,ConstantValue.HAZMAT_TORSO_TEX);
  hazmatHead=new ItemArmorRadiationShield(hazmatHeadID,0,0.2F,ConstantValue.HAZMAT_HEAD_TEX);
  IAintAvinit=new PhotonicInduction(photonID,EnumToolMaterial.IRON,5F);
  tableelements=new ItemHangableTableOfElements(hangableTableOfElementsID,EntityTableOfElements.class);
  LanguageRegistry.addName(atomicManipulator,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(fusionStar,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(testTube,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(journal,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(hazmatFeet,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(hazmatLegs,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(hazmatTorso,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(hazmatHead,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(IAintAvinit,""String_Node_Str"");
  LanguageRegistry.addName(tableelements,""String_Node_Str"");
  concaveLens=new ItemStack(lens,1,0);
  convexLens=new ItemStack(lens,1,1);
  microscopeLens=new ItemStack(lens,1,2);
  projectorLens=new ItemStack(lens,1,3);
}","public static void registerItems(){
  element=new ItemElement(elementID);
  molecule=new ItemMolecule(moleculeID);
  lens=new ItemLens(lensID);
  atomicManipulator=new ItemAtomicManipulator(atomicManipulatorID);
  fusionStar=new ItemFusionStar(fusionStarID);
  blueprint=new ItemBlueprint(blueprintID);
  testTube=new ItemTestTube(testTubeID);
  journal=new ItemChemistJournal(journalID);
  hazmatFeet=new ItemArmorRadiationShield(hazmatFeetID,3,0.1F,ConstantValue.HAZMAT_FEET_TEX);
  hazmatLegs=new ItemArmorRadiationShield(hazmatLegsID,2,0.1F,ConstantValue.HAZMAT_LEGS_TEX);
  hazmatTorso=new ItemArmorRadiationShield(hazmatTorsoID,1,0.5F,ConstantValue.HAZMAT_TORSO_TEX);
  hazmatHead=new ItemArmorRadiationShield(hazmatHeadID,0,0.2F,ConstantValue.HAZMAT_HEAD_TEX);
  IAintAvinit=new PhotonicInduction(photonID,EnumToolMaterial.IRON,5F);
  tableelements=new ItemHangableTableOfElements(hangableTableOfElementsID);
  LanguageRegistry.addName(atomicManipulator,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(fusionStar,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(testTube,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(journal,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(hazmatFeet,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(hazmatLegs,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(hazmatTorso,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(hazmatHead,MinechemHelper.getLocalString(""String_Node_Str""));
  LanguageRegistry.addName(IAintAvinit,""String_Node_Str"");
  LanguageRegistry.addName(tableelements,""String_Node_Str"");
  concaveLens=new ItemStack(lens,1,0);
  convexLens=new ItemStack(lens,1,1);
  microscopeLens=new ItemStack(lens,1,2);
  projectorLens=new ItemStack(lens,1,3);
}",0.9927310488058152
21939,"private void func_77008_a(EntityPainting par1EntityPainting,float par2,float par3){
  int i=MathHelper.floor_double(par1EntityPainting.posX);
  int j=MathHelper.floor_double(par1EntityPainting.posY + (double)(par3 / 16.0F));
  int k=MathHelper.floor_double(par1EntityPainting.posZ);
  if (par1EntityPainting.hangingDirection == 2) {
    i=MathHelper.floor_double(par1EntityPainting.posX + (double)(par2 / 16.0F));
  }
  if (par1EntityPainting.hangingDirection == 1) {
    k=MathHelper.floor_double(par1EntityPainting.posZ - (double)(par2 / 16.0F));
  }
  if (par1EntityPainting.hangingDirection == 0) {
    i=MathHelper.floor_double(par1EntityPainting.posX - (double)(par2 / 16.0F));
  }
  if (par1EntityPainting.hangingDirection == 3) {
    k=MathHelper.floor_double(par1EntityPainting.posZ + (double)(par2 / 16.0F));
  }
  int l=this.renderManager.worldObj.getLightBrightnessForSkyBlocks(i,j,k,0);
  int i1=l % 65536;
  int j1=l / 65536;
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,(float)i1,(float)j1);
  GL11.glColor3f(1.0F,1.0F,1.0F);
}","private void func_77008_a(EntityTableOfElements par1EntityPainting,float par2,float par3){
  int i=MathHelper.floor_double(par1EntityPainting.posX);
  int j=MathHelper.floor_double(par1EntityPainting.posY + (double)(par3 / 16.0F));
  int k=MathHelper.floor_double(par1EntityPainting.posZ);
  if (par1EntityPainting.hangingDirection == 2) {
    i=MathHelper.floor_double(par1EntityPainting.posX + (double)(par2 / 16.0F));
  }
  if (par1EntityPainting.hangingDirection == 1) {
    k=MathHelper.floor_double(par1EntityPainting.posZ - (double)(par2 / 16.0F));
  }
  if (par1EntityPainting.hangingDirection == 0) {
    i=MathHelper.floor_double(par1EntityPainting.posX - (double)(par2 / 16.0F));
  }
  if (par1EntityPainting.hangingDirection == 3) {
    k=MathHelper.floor_double(par1EntityPainting.posZ + (double)(par2 / 16.0F));
  }
  int l=this.renderManager.worldObj.getLightBrightnessForSkyBlocks(i,j,k,0);
  int i1=l % 65536;
  int j1=l / 65536;
  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,(float)i1,(float)j1);
  GL11.glColor3f(1.0F,1.0F,1.0F);
}",0.989247311827957
21940,"/** 
 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic (Render<T extends Entity) and this method has signature public void doRender(T entity, double d, double d1, double d2, float f, float f1). But JAD is pre 1.5 so doesn't do that.
 */
public void doRender(Entity par1Entity,double par2,double par4,double par6,float par8,float par9){
  this.renderThePainting((EntityPainting)par1Entity,par2,par4,par6,par8,par9);
}","/** 
 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic (Render<T extends Entity) and this method has signature public void doRender(T entity, double d, double d1, double d2, float f, float f1). But JAD is pre 1.5 so doesn't do that.
 */
public void doRender(Entity par1Entity,double par2,double par4,double par6,float par8,float par9){
  this.renderThePainting((EntityTableOfElements)par1Entity,par2,par4,par6,par8,par9);
}",0.9807531380753138
21941,"private void func_77010_a(EntityPainting par1EntityPainting,int par2,int par3,int par4,int par5){
  float f=(float)(-par2) / 2.0F;
  float f1=(float)(-par3) / 2.0F;
  float f2=0.5F;
  float f3=0.75F;
  float f4=0.8125F;
  float f5=0.0F;
  float f6=0.0625F;
  float f7=0.75F;
  float f8=0.8125F;
  float f9=0.001953125F;
  float f10=0.001953125F;
  float f11=0.7519531F;
  float f12=0.7519531F;
  float f13=0.0F;
  float f14=0.0625F;
  for (int i1=0; i1 < par2 / 16; ++i1) {
    for (int j1=0; j1 < par3 / 16; ++j1) {
      float f15=f + (float)((i1 + 1) * 16);
      float f16=f + (float)(i1 * 16);
      float f17=f1 + (float)((j1 + 1) * 16);
      float f18=f1 + (float)(j1 * 16);
      this.func_77008_a(par1EntityPainting,(f15 + f16) / 2.0F,(f17 + f18) / 2.0F);
      float f19=(float)(par4 + par2 - i1 * 16) / 256.0F;
      float f20=(float)(par4 + par2 - (i1 + 1) * 16) / 256.0F;
      float f21=(float)(par5 + par3 - j1 * 16) / 256.0F;
      float f22=(float)(par5 + par3 - (j1 + 1) * 16) / 256.0F;
      Tessellator tessellator=Tessellator.instance;
      tessellator.startDrawingQuads();
      tessellator.setNormal(0.0F,0.0F,-1.0F);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)(-f2),(double)f20,(double)f21);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)(-f2),(double)f19,(double)f21);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)(-f2),(double)f19,(double)f22);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)(-f2),(double)f20,(double)f22);
      tessellator.setNormal(0.0F,0.0F,1.0F);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)f2,(double)f3,(double)f5);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)f2,(double)f4,(double)f5);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)f2,(double)f4,(double)f6);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)f2,(double)f3,(double)f6);
      tessellator.setNormal(0.0F,1.0F,0.0F);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)(-f2),(double)f7,(double)f9);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)(-f2),(double)f8,(double)f9);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)f2,(double)f8,(double)f10);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)f2,(double)f7,(double)f10);
      tessellator.setNormal(0.0F,-1.0F,0.0F);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)f2,(double)f7,(double)f9);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)f2,(double)f8,(double)f9);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)(-f2),(double)f8,(double)f10);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)(-f2),(double)f7,(double)f10);
      tessellator.setNormal(-1.0F,0.0F,0.0F);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)f2,(double)f12,(double)f13);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)f2,(double)f12,(double)f14);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)(-f2),(double)f11,(double)f14);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)(-f2),(double)f11,(double)f13);
      tessellator.setNormal(1.0F,0.0F,0.0F);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)(-f2),(double)f12,(double)f13);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)(-f2),(double)f12,(double)f14);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)f2,(double)f11,(double)f14);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)f2,(double)f11,(double)f13);
      tessellator.draw();
    }
  }
}","private void func_77010_a(EntityTableOfElements par1EntityPainting,int par2,int par3,int par4,int par5){
  float f=(float)(-par2) / 2.0F;
  float f1=(float)(-par3) / 2.0F;
  float f2=0.5F;
  float f3=0.75F;
  float f4=0.8125F;
  float f5=0.0F;
  float f6=0.0625F;
  float f7=0.75F;
  float f8=0.8125F;
  float f9=0.001953125F;
  float f10=0.001953125F;
  float f11=0.7519531F;
  float f12=0.7519531F;
  float f13=0.0F;
  float f14=0.0625F;
  for (int i1=0; i1 < par2 / 16; ++i1) {
    for (int j1=0; j1 < par3 / 16; ++j1) {
      float f15=f + (float)((i1 + 1) * 16);
      float f16=f + (float)(i1 * 16);
      float f17=f1 + (float)((j1 + 1) * 16);
      float f18=f1 + (float)(j1 * 16);
      this.func_77008_a(par1EntityPainting,(f15 + f16) / 2.0F,(f17 + f18) / 2.0F);
      float f19=(float)(par4 + par2 - i1 * 16) / 256.0F;
      float f20=(float)(par4 + par2 - (i1 + 1) * 16) / 256.0F;
      float f21=(float)(par5 + par3 - j1 * 16) / 256.0F;
      float f22=(float)(par5 + par3 - (j1 + 1) * 16) / 256.0F;
      Tessellator tessellator=Tessellator.instance;
      tessellator.startDrawingQuads();
      tessellator.setNormal(0.0F,0.0F,-1.0F);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)(-f2),(double)f20,(double)f21);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)(-f2),(double)f19,(double)f21);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)(-f2),(double)f19,(double)f22);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)(-f2),(double)f20,(double)f22);
      tessellator.setNormal(0.0F,0.0F,1.0F);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)f2,(double)f3,(double)f5);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)f2,(double)f4,(double)f5);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)f2,(double)f4,(double)f6);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)f2,(double)f3,(double)f6);
      tessellator.setNormal(0.0F,1.0F,0.0F);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)(-f2),(double)f7,(double)f9);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)(-f2),(double)f8,(double)f9);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)f2,(double)f8,(double)f10);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)f2,(double)f7,(double)f10);
      tessellator.setNormal(0.0F,-1.0F,0.0F);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)f2,(double)f7,(double)f9);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)f2,(double)f8,(double)f9);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)(-f2),(double)f8,(double)f10);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)(-f2),(double)f7,(double)f10);
      tessellator.setNormal(-1.0F,0.0F,0.0F);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)f2,(double)f12,(double)f13);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)f2,(double)f12,(double)f14);
      tessellator.addVertexWithUV((double)f15,(double)f18,(double)(-f2),(double)f11,(double)f14);
      tessellator.addVertexWithUV((double)f15,(double)f17,(double)(-f2),(double)f11,(double)f13);
      tessellator.setNormal(1.0F,0.0F,0.0F);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)(-f2),(double)f12,(double)f13);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)(-f2),(double)f12,(double)f14);
      tessellator.addVertexWithUV((double)f16,(double)f18,(double)f2,(double)f11,(double)f14);
      tessellator.addVertexWithUV((double)f16,(double)f17,(double)f2,(double)f11,(double)f13);
      tessellator.draw();
    }
  }
}",0.9974369351139888
21942,"public void renderThePainting(EntityPainting par1EntityPainting,double par2,double par4,double par6,float par8,float par9){
  GL11.glPushMatrix();
  GL11.glTranslatef((float)par2,(float)par4,(float)par6);
  GL11.glRotatef(par8,0.0F,1.0F,0.0F);
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  this.loadTexture(ConstantValue.table_HEX);
  EnumArt enumart=par1EntityPainting.art;
  float f2=0.0625F;
  GL11.glScalef(f2,f2,f2);
  this.func_77010_a(par1EntityPainting,enumart.sizeX,enumart.sizeY,enumart.offsetX,enumart.offsetY);
  GL11.glDisable(GL12.GL_RESCALE_NORMAL);
  GL11.glPopMatrix();
}","public void renderThePainting(EntityTableOfElements par1EntityPainting,double par2,double par4,double par6,float par8,float par9){
  GL11.glPushMatrix();
  GL11.glTranslatef((float)par2,(float)par4,(float)par6);
  GL11.glRotatef(par8,0.0F,1.0F,0.0F);
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  this.loadTexture(ConstantValue.table_HEX);
  EnumArt enumart=par1EntityPainting.art;
  float f2=0.0625F;
  GL11.glScalef(f2,f2,f2);
  this.func_77010_a(par1EntityPainting,enumart.sizeX,enumart.sizeY,enumart.offsetX,enumart.offsetY);
  GL11.glDisable(GL12.GL_RESCALE_NORMAL);
  GL11.glPopMatrix();
}",0.9804587935429055
21943,"/** 
 * Build rule table viewer
 */
private Table buildRuleTableViewer(Composite parent){
  int tableStyle=SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL| SWT.SINGLE| SWT.FULL_SELECTION;
  ruleTableViewer=new TableViewer(parent,tableStyle);
  Table ruleTable=ruleTableViewer.getTable();
  addColumnTo(ruleTable,SWT.LEFT,true,getMessage(StringKeys.PREF_RULESET_COLUMN_LANGUAGE),70,RuleTableViewerSorter.RULE_LANGUAGE_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,getMessage(StringKeys.PREF_RULESET_COLUMN_RULESET_NAME),110,RuleTableViewerSorter.RULE_RULESET_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,getMessage(StringKeys.PREF_RULESET_COLUMN_RULE_NAME),170,RuleTableViewerSorter.RULE_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,false,getMessage(StringKeys.PREF_RULESET_COLUMN_SINCE),40,RuleTableViewerSorter.RULE_SINCE_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,false,getMessage(StringKeys.PREF_RULESET_COLUMN_PRIORITY),80,RuleTableViewerSorter.RULE_PRIORITY_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,getMessage(StringKeys.PREF_RULESET_COLUMN_DESCRIPTION),300,RuleTableViewerSorter.RULE_DESCRIPTION_COMPARATOR);
  ruleTable.setLinesVisible(true);
  ruleTable.setHeaderVisible(true);
  ruleTableViewer.setContentProvider(new RuleSetContentProvider());
  ruleTableViewer.setLabelProvider(new RuleLabelProvider());
  ruleTableViewer.setSorter(ruleTableViewerSorter);
  ruleTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(SelectionChangedEvent)
 */
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      Rule selectedRule=(Rule)selection.getFirstElement();
      rulePropertiesTableViewer.setInput(selectedRule);
      removeRuleButton.setEnabled(selectedRule != null);
      editRuleButton.setEnabled(selectedRule != null);
    }
  }
);
  ruleTableViewer.setColumnProperties(new String[]{PROPERTY_LANGUAGE,PROPERTY_RULESET_NAME,PROPERTY_RULE_NAME,PROPERTY_SINCE,PROPERTY_PRIORITY,PROPERTY_DESCRIPTION});
  ruleTableViewer.setCellModifier(new RuleCellModifier(ruleTableViewer));
  ruleTableViewer.setCellEditors(new CellEditor[]{null,null,null,null,new ComboBoxCellEditor(ruleTable,UISettings.getPriorityLabels()),new TextCellEditor(ruleTable)});
  populateRuleTable();
  return ruleTable;
}","/** 
 * Build rule table viewer
 */
private Table buildRuleTableViewer(Composite parent){
  int tableStyle=SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL| SWT.SINGLE| SWT.FULL_SELECTION;
  ruleTableViewer=new TableViewer(parent,tableStyle);
  Table ruleTable=ruleTableViewer.getTable();
  addColumnTo(ruleTable,SWT.LEFT,true,getMessage(StringKeys.PREF_RULESET_COLUMN_LANGUAGE),70,RuleTableViewerSorter.RULE_LANGUAGE_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,getMessage(StringKeys.PREF_RULESET_COLUMN_RULESET_NAME),110,RuleTableViewerSorter.RULE_RULESET_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,getMessage(StringKeys.PREF_RULESET_COLUMN_RULE_NAME),170,RuleTableViewerSorter.RULE_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,false,getMessage(StringKeys.PREF_RULESET_COLUMN_SINCE),40,RuleTableViewerSorter.RULE_SINCE_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,false,getMessage(StringKeys.PREF_RULESET_COLUMN_PRIORITY),80,RuleTableViewerSorter.RULE_PRIORITY_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,getMessage(StringKeys.PREF_RULESET_COLUMN_DESCRIPTION),300,RuleTableViewerSorter.RULE_DESCRIPTION_COMPARATOR);
  ruleTable.setLinesVisible(true);
  ruleTable.setHeaderVisible(true);
  ruleTableViewer.setContentProvider(new RuleSetContentProvider());
  ruleTableViewer.setLabelProvider(new RuleLabelProvider());
  ruleTableViewer.setComparator(ruleTableViewerSorter);
  ruleTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    /** 
 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(SelectionChangedEvent)
 */
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      Rule selectedRule=(Rule)selection.getFirstElement();
      rulePropertiesTableViewer.setInput(selectedRule);
      removeRuleButton.setEnabled(selectedRule != null);
      editRuleButton.setEnabled(selectedRule != null);
    }
  }
);
  ruleTableViewer.setColumnProperties(new String[]{PROPERTY_LANGUAGE,PROPERTY_RULESET_NAME,PROPERTY_RULE_NAME,PROPERTY_SINCE,PROPERTY_PRIORITY,PROPERTY_DESCRIPTION});
  ruleTableViewer.setCellModifier(new RuleCellModifier(ruleTableViewer));
  ruleTableViewer.setCellEditors(new CellEditor[]{null,null,null,null,new ComboBoxCellEditor(ruleTable,UISettings.getPriorityLabels()),new TextCellEditor(ruleTable)});
  populateRuleTable();
  return ruleTable;
}",0.997119341563786
21944,"/** 
 * @see org.eclipse.jface.viewers.ViewerSorter#compare(org.eclipse.jface.viewers.Viewer,java.lang.Object,java.lang.Object)
 */
public int compare(Viewer viewer,Object e1,Object e2){
  int result=comparator.compare((Rule)e1,(Rule)e2);
  return sortDescending ? 0 - result : result;
}","@Override public int compare(Viewer viewer,Object e1,Object e2){
  int result=comparator.compare((Rule)e1,(Rule)e2);
  return sortDescending ? 0 - result : result;
}",0.7035398230088495
21945,"/** 
 * @return Returns the comparator.
 */
public Comparator<Rule> getComparator(){
  return comparator;
}","@Override protected Comparator<? super String> getComparator(){
  throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"");
}",0.4251968503937008
21946,"/** 
 * Build rule table viewer
 */
private Table buildAvailableRulesTableViewer(final Composite parent){
  final int tableStyle=SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL| SWT.SINGLE| SWT.FULL_SELECTION| SWT.CHECK;
  availableRulesTableViewer=new TableViewer(parent,tableStyle);
  final Table ruleTable=availableRulesTableViewer.getTable();
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_LANGUAGE,70 + 20,RuleTableViewerSorter.RULE_LANGUAGE_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_RULESET_NAME,110,RuleTableViewerSorter.RULE_RULESET_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_RULE_NAME,170,RuleTableViewerSorter.RULE_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,false,StringKeys.PREF_RULESET_COLUMN_PRIORITY,80,RuleTableViewerSorter.RULE_PRIORITY_COMPARATOR);
  ruleTable.setLinesVisible(true);
  ruleTable.setHeaderVisible(true);
  availableRulesTableViewer.setContentProvider(new RuleSetContentProvider());
  availableRulesTableViewer.setLabelProvider(new RuleLabelProvider());
  availableRulesTableViewer.setSorter(availableRuleTableViewerSorter);
  availableRulesTableViewer.setColumnProperties(new String[]{PMDPreferencePage.PROPERTY_LANGUAGE,PMDPreferencePage.PROPERTY_RULESET_NAME,PMDPreferencePage.PROPERTY_RULE_NAME,PMDPreferencePage.PROPERTY_PRIORITY});
  availableRulesTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateDescriptionField();
    }
  }
);
  populateAvailableRulesTable();
  activeControls.add(ruleTable);
  return ruleTable;
}","/** 
 * Build rule table viewer
 */
private Table buildAvailableRulesTableViewer(final Composite parent){
  final int tableStyle=SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL| SWT.SINGLE| SWT.FULL_SELECTION| SWT.CHECK;
  availableRulesTableViewer=new TableViewer(parent,tableStyle);
  final Table ruleTable=availableRulesTableViewer.getTable();
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_LANGUAGE,70 + 20,RuleTableViewerSorter.RULE_LANGUAGE_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_RULESET_NAME,110,RuleTableViewerSorter.RULE_RULESET_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_RULE_NAME,170,RuleTableViewerSorter.RULE_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,false,StringKeys.PREF_RULESET_COLUMN_PRIORITY,80,RuleTableViewerSorter.RULE_PRIORITY_COMPARATOR);
  ruleTable.setLinesVisible(true);
  ruleTable.setHeaderVisible(true);
  availableRulesTableViewer.setContentProvider(new RuleSetContentProvider());
  availableRulesTableViewer.setLabelProvider(new RuleLabelProvider());
  availableRulesTableViewer.setComparator(availableRuleTableViewerSorter);
  availableRulesTableViewer.setColumnProperties(new String[]{PMDPreferencePage.PROPERTY_LANGUAGE,PMDPreferencePage.PROPERTY_RULESET_NAME,PMDPreferencePage.PROPERTY_RULE_NAME,PMDPreferencePage.PROPERTY_PRIORITY});
  availableRulesTableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateDescriptionField();
    }
  }
);
  populateAvailableRulesTable();
  activeControls.add(ruleTable);
  return ruleTable;
}",0.9958008398320336
21947,"/** 
 * Build rule table viewer
 */
private Table buildAvailableRulesTableViewer(final Composite parent){
  final int tableStyle=SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL| SWT.SINGLE| SWT.FULL_SELECTION| SWT.CHECK;
  availableRulesTableViewer=new TableViewer(parent,tableStyle);
  final Table ruleTable=availableRulesTableViewer.getTable();
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_LANGUAGE,70 + 20,RuleTableViewerSorter.RULE_LANGUAGE_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_RULESET_NAME,110,RuleTableViewerSorter.RULE_RULESET_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_RULE_NAME,170,RuleTableViewerSorter.RULE_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,false,StringKeys.PREF_RULESET_COLUMN_SINCE,40,RuleTableViewerSorter.RULE_SINCE_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,false,StringKeys.PREF_RULESET_COLUMN_PRIORITY,80,RuleTableViewerSorter.RULE_PRIORITY_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_DESCRIPTION,300,RuleTableViewerSorter.RULE_DESCRIPTION_COMPARATOR);
  ruleTable.setLinesVisible(true);
  ruleTable.setHeaderVisible(true);
  availableRulesTableViewer.setContentProvider(new RuleSetContentProvider());
  availableRulesTableViewer.setLabelProvider(new RuleLabelProvider());
  availableRulesTableViewer.setSorter(availableRuleTableViewerSorter);
  availableRulesTableViewer.setColumnProperties(new String[]{PMDPreferencePage.PROPERTY_LANGUAGE,PMDPreferencePage.PROPERTY_RULESET_NAME,PMDPreferencePage.PROPERTY_RULE_NAME,PMDPreferencePage.PROPERTY_SINCE,PMDPreferencePage.PROPERTY_PRIORITY,PMDPreferencePage.PROPERTY_DESCRIPTION});
  populateAvailableRulesTable();
  activeControls.add(ruleTable);
  return ruleTable;
}","/** 
 * Build rule table viewer
 */
private Table buildAvailableRulesTableViewer(final Composite parent){
  final int tableStyle=SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL| SWT.SINGLE| SWT.FULL_SELECTION| SWT.CHECK;
  availableRulesTableViewer=new TableViewer(parent,tableStyle);
  final Table ruleTable=availableRulesTableViewer.getTable();
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_LANGUAGE,70 + 20,RuleTableViewerSorter.RULE_LANGUAGE_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_RULESET_NAME,110,RuleTableViewerSorter.RULE_RULESET_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_RULE_NAME,170,RuleTableViewerSorter.RULE_NAME_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,false,StringKeys.PREF_RULESET_COLUMN_SINCE,40,RuleTableViewerSorter.RULE_SINCE_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,false,StringKeys.PREF_RULESET_COLUMN_PRIORITY,80,RuleTableViewerSorter.RULE_PRIORITY_COMPARATOR);
  addColumnTo(ruleTable,SWT.LEFT,true,StringKeys.PREF_RULESET_COLUMN_DESCRIPTION,300,RuleTableViewerSorter.RULE_DESCRIPTION_COMPARATOR);
  ruleTable.setLinesVisible(true);
  ruleTable.setHeaderVisible(true);
  availableRulesTableViewer.setContentProvider(new RuleSetContentProvider());
  availableRulesTableViewer.setLabelProvider(new RuleLabelProvider());
  availableRulesTableViewer.setComparator(availableRuleTableViewerSorter);
  availableRulesTableViewer.setColumnProperties(new String[]{PMDPreferencePage.PROPERTY_LANGUAGE,PMDPreferencePage.PROPERTY_RULESET_NAME,PMDPreferencePage.PROPERTY_RULE_NAME,PMDPreferencePage.PROPERTY_SINCE,PMDPreferencePage.PROPERTY_PRIORITY,PMDPreferencePage.PROPERTY_DESCRIPTION});
  populateAvailableRulesTable();
  activeControls.add(ruleTable);
  return ruleTable;
}",0.9961111111111112
21948,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  registerStandardRuleSets();
  IPreferences prefs=loadPreferences();
  configureLogs(prefs);
  registerAdditionalRuleSets();
  fileChangeListenerEnabled(prefs.isCheckAfterSaveEnabled());
  ResourcesPlugin.getWorkspace().addResourceChangeListener(new IResourceChangeListener(){
    public void resourceChanged(    IResourceChangeEvent arg0){
      if (arg0.getType() == IResourceChangeEvent.PRE_DELETE && arg0.getResource() instanceof IProject) {
        getPropertiesManager().removeProjectProperties((IProject)arg0.getResource());
      }
    }
  }
);
  VERSION=context.getBundle().getHeaders().get((Object)""String_Node_Str"");
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  registerStandardRuleSets();
  IPreferences prefs=loadPreferences();
  configureLogs(prefs);
  registerAdditionalRuleSets();
  fileChangeListenerEnabled(prefs.isCheckAfterSaveEnabled());
  ResourcesPlugin.getWorkspace().addResourceChangeListener(new IResourceChangeListener(){
    public void resourceChanged(    IResourceChangeEvent arg0){
      if (arg0.getType() == IResourceChangeEvent.PRE_DELETE && arg0.getResource() instanceof IProject) {
        getPropertiesManager().removeProjectProperties((IProject)arg0.getResource());
      }
    }
  }
);
  VERSION=context.getBundle().getHeaders().get(""String_Node_Str"");
}",0.9944827586206896
21949,"public Control setupOn(Composite parent){
  GridData gridData;
  Composite panel=new Composite(parent,0);
  GridLayout layout=new GridLayout(2,false);
  panel.setLayout(layout);
  xpathField=newCodeField(panel);
  SyntaxManager.adapt(xpathField,""String_Node_Str"",null);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.grabExcessHorizontalSpace=true;
  gridData.horizontalSpan=2;
  xpathField.setLayoutData(gridData);
  xpathField.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      if (!isActive())       return;
      Rule soleRule=soleRule();
      if (soleRule == null)       return;
      String newValue=xpathField.getText().trim();
      String existingValue=soleRule.getProperty(XPathRule.XPATH_DESCRIPTOR).trim();
      if (StringUtil.areSemanticEquals(existingValue,newValue))       return;
      validate();
      soleRule.setProperty(XPathRule.XPATH_DESCRIPTOR,newValue);
      valueChanged(XPathRule.XPATH_DESCRIPTOR,newValue);
    }
  }
);
  versionLabel=new Label(panel,0);
  versionLabel.setText(SWTUtil.stringFor(StringKeys.PREF_RULEEDIT_LABEL_XPATH_VERSION));
  gridData=new GridData();
  gridData.horizontalSpan=1;
  gridData.grabExcessHorizontalSpace=false;
  versionLabel.setLayoutData(gridData);
  final EnumeratedProperty<String> ep=XPathRule.VERSION_DESCRIPTOR;
  xpathVersionField=new Combo(panel,SWT.READ_ONLY);
  gridData=new GridData();
  gridData.horizontalSpan=1;
  gridData.grabExcessHorizontalSpace=false;
  xpathVersionField.setLayoutData(gridData);
  xpathVersionField.setItems(SWTUtil.labelsIn(ep.choices(),0));
  xpathVersionField.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Rule rule=soleRule();
      int selectionIdx=xpathVersionField.getSelectionIndex();
      Object newValue=ep.choices()[selectionIdx][1];
      if (newValue.equals(rule.getProperty(ep)))       return;
      rule.setProperty(ep,newValue);
    }
  }
);
  return panel;
}","public Control setupOn(Composite parent){
  GridData gridData;
  Composite panel=new Composite(parent,0);
  GridLayout layout=new GridLayout(2,false);
  panel.setLayout(layout);
  xpathField=newCodeField(panel);
  SyntaxManager.adapt(xpathField,""String_Node_Str"",null);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.grabExcessHorizontalSpace=true;
  gridData.horizontalSpan=2;
  xpathField.setLayoutData(gridData);
  xpathField.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      if (!isActive())       return;
      Rule soleRule=soleRule();
      if (soleRule == null)       return;
      String newValue=xpathField.getText().trim();
      String existingValue=soleRule.getProperty(XPathRule.XPATH_DESCRIPTOR).trim();
      if (StringUtil.areSemanticEquals(existingValue,newValue))       return;
      validate();
      soleRule.setProperty(XPathRule.XPATH_DESCRIPTOR,newValue);
      valueChanged(XPathRule.XPATH_DESCRIPTOR,newValue);
    }
  }
);
  versionLabel=new Label(panel,0);
  versionLabel.setText(SWTUtil.stringFor(StringKeys.PREF_RULEEDIT_LABEL_XPATH_VERSION));
  gridData=new GridData();
  gridData.horizontalSpan=1;
  gridData.grabExcessHorizontalSpace=false;
  versionLabel.setLayoutData(gridData);
  final EnumeratedProperty<String> ep=XPathRule.VERSION_DESCRIPTOR;
  xpathVersionField=new Combo(panel,SWT.READ_ONLY);
  gridData=new GridData();
  gridData.horizontalSpan=1;
  gridData.grabExcessHorizontalSpace=false;
  xpathVersionField.setLayoutData(gridData);
  xpathVersionField.setItems(SWTUtil.labelsIn(ep.choices(),0));
  xpathVersionField.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Rule rule=soleRule();
      int selectionIdx=xpathVersionField.getSelectionIndex();
      String newValue=(String)ep.choices()[selectionIdx][1];
      if (newValue.equals(rule.getProperty(ep)))       return;
      rule.setProperty(ep,newValue);
    }
  }
);
  return panel;
}",0.9949874686716792
21950,"public void widgetSelected(SelectionEvent e){
  Rule rule=soleRule();
  int selectionIdx=xpathVersionField.getSelectionIndex();
  Object newValue=ep.choices()[selectionIdx][1];
  if (newValue.equals(rule.getProperty(ep)))   return;
  rule.setProperty(ep,newValue);
}","public void widgetSelected(SelectionEvent e){
  Rule rule=soleRule();
  int selectionIdx=xpathVersionField.getSelectionIndex();
  String newValue=(String)ep.choices()[selectionIdx][1];
  if (newValue.equals(rule.getProperty(ep)))   return;
  rule.setProperty(ep,newValue);
}",0.9629629629629628
21951,"public Control setupOn(Composite parent){
  GridData gridData;
  Composite panel=new Composite(parent,0);
  GridLayout layout=new GridLayout(2,false);
  panel.setLayout(layout);
  xpathField=newCodeField(panel);
  SyntaxManager.adapt(xpathField,""String_Node_Str"",null);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.grabExcessHorizontalSpace=true;
  gridData.horizontalSpan=2;
  xpathField.setLayoutData(gridData);
  xpathField.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      if (!isActive())       return;
      Rule soleRule=soleRule();
      if (soleRule == null)       return;
      String newValue=xpathField.getText().trim();
      String existingValue=soleRule.getProperty(XPathRule.XPATH_DESCRIPTOR).trim();
      if (StringUtil.areSemanticEquals(existingValue,newValue))       return;
      validate();
      soleRule.setProperty(XPathRule.XPATH_DESCRIPTOR,newValue);
      valueChanged(XPathRule.XPATH_DESCRIPTOR,newValue);
    }
  }
);
  versionLabel=new Label(panel,0);
  versionLabel.setText(SWTUtil.stringFor(StringKeys.PREF_RULEEDIT_LABEL_XPATH_VERSION));
  gridData=new GridData();
  gridData.horizontalSpan=1;
  gridData.grabExcessHorizontalSpace=false;
  versionLabel.setLayoutData(gridData);
  final EnumeratedProperty<String> ep=XPathRule.VERSION_DESCRIPTOR;
  xpathVersionField=new Combo(panel,SWT.READ_ONLY);
  gridData=new GridData();
  gridData.horizontalSpan=1;
  gridData.grabExcessHorizontalSpace=false;
  xpathVersionField.setLayoutData(gridData);
  xpathVersionField.setItems(SWTUtil.labelsIn(ep.choices(),0));
  xpathVersionField.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Rule rule=soleRule();
      int selectionIdx=xpathVersionField.getSelectionIndex();
      Object newValue=ep.choices()[selectionIdx][1];
      if (newValue.equals(rule.getProperty(ep)))       return;
      rule.setProperty(ep,newValue);
    }
  }
);
  return panel;
}","public Control setupOn(Composite parent){
  GridData gridData;
  Composite panel=new Composite(parent,0);
  GridLayout layout=new GridLayout(2,false);
  panel.setLayout(layout);
  xpathField=newCodeField(panel);
  SyntaxManager.adapt(xpathField,""String_Node_Str"",null);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.grabExcessHorizontalSpace=true;
  gridData.horizontalSpan=2;
  xpathField.setLayoutData(gridData);
  xpathField.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent event){
      if (!isActive())       return;
      Rule soleRule=soleRule();
      if (soleRule == null)       return;
      String newValue=xpathField.getText().trim();
      String existingValue=soleRule.getProperty(XPathRule.XPATH_DESCRIPTOR).trim();
      if (StringUtil.areSemanticEquals(existingValue,newValue))       return;
      validate();
      soleRule.setProperty(XPathRule.XPATH_DESCRIPTOR,newValue);
      valueChanged(XPathRule.XPATH_DESCRIPTOR,newValue);
    }
  }
);
  versionLabel=new Label(panel,0);
  versionLabel.setText(SWTUtil.stringFor(StringKeys.PREF_RULEEDIT_LABEL_XPATH_VERSION));
  gridData=new GridData();
  gridData.horizontalSpan=1;
  gridData.grabExcessHorizontalSpace=false;
  versionLabel.setLayoutData(gridData);
  final EnumeratedProperty<String> ep=XPathRule.VERSION_DESCRIPTOR;
  xpathVersionField=new Combo(panel,SWT.READ_ONLY);
  gridData=new GridData();
  gridData.horizontalSpan=1;
  gridData.grabExcessHorizontalSpace=false;
  xpathVersionField.setLayoutData(gridData);
  xpathVersionField.setItems(SWTUtil.labelsIn(ep.choices(),0));
  xpathVersionField.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      Rule rule=soleRule();
      int selectionIdx=xpathVersionField.getSelectionIndex();
      String newValue=(String)ep.choices()[selectionIdx][1];
      if (newValue.equals(rule.getProperty(ep)))       return;
      rule.setProperty(ep,newValue);
    }
  }
);
  return panel;
}",0.9949874686716792
21952,"public void widgetSelected(SelectionEvent e){
  Rule rule=soleRule();
  int selectionIdx=xpathVersionField.getSelectionIndex();
  Object newValue=ep.choices()[selectionIdx][1];
  if (newValue.equals(rule.getProperty(ep)))   return;
  rule.setProperty(ep,newValue);
}","public void widgetSelected(SelectionEvent e){
  Rule rule=soleRule();
  int selectionIdx=xpathVersionField.getSelectionIndex();
  String newValue=(String)ep.choices()[selectionIdx][1];
  if (newValue.equals(rule.getProperty(ep)))   return;
  rule.setProperty(ep,newValue);
}",0.9629629629629628
21953,"public String[] names(){
  if (rulesByFilterName == null)   return StringUtil.EMPTY_STRINGS;
  return rulesByFilterName.keySet().toArray(new String[rulesByFilterName.size()]);
}","public String[] names(){
  if (rulesByFilterName == null)   return StringUtil.getEmptyStrings();
  return rulesByFilterName.keySet().toArray(new String[rulesByFilterName.size()]);
}",0.9273743016759776
21954,"protected String[] textWidgetValues(Text textWidget){
  String values=textWidget.getText().trim();
  if (StringUtil.isEmpty(values))   return StringUtil.EMPTY_STRINGS;
  String[] valueSet=values.split(delimiter);
  List<String> valueList=new ArrayList<String>(valueSet.length);
  for (  String value : valueSet) {
    String str=value.trim();
    if (str.length() > 0)     valueList.add(str);
  }
  return valueList.toArray(new String[valueList.size()]);
}","protected String[] textWidgetValues(Text textWidget){
  String values=textWidget.getText().trim();
  if (StringUtil.isEmpty(values))   return StringUtil.getEmptyStrings();
  String[] valueSet=values.split(delimiter);
  List<String> valueList=new ArrayList<String>(valueSet.length);
  for (  String value : valueSet) {
    String str=value.trim();
    if (str.length() > 0)     valueList.add(str);
  }
  return valueList.toArray(new String[valueList.size()]);
}",0.9694323144104804
21955,"public MethodPicker(Composite parent,int style,String[] theUnwantedPrefixes){
  super(parent,SWT.None);
  unwantedPrefixes=theUnwantedPrefixes == null ? StringUtil.EMPTY_STRINGS : theUnwantedPrefixes;
  GridLayout layout=new GridLayout(2,true);
  layout.verticalSpacing=0;
  layout.horizontalSpacing=0;
  layout.marginHeight=0;
  layout.marginWidth=0;
  this.setLayout(layout);
  typeText=new TypeText(this,style,false,""String_Node_Str"");
  typeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  typeText.addListener(SWT.FocusOut,new Listener(){
    public void handleEvent(    Event event){
      reviseMethodListFor(typeText.getType(true));
    }
  }
);
  typeText.addListener(SWT.Modify,new Listener(){
    public void handleEvent(    Event event){
      reviseMethodListFor(typeText.getType(false));
    }
  }
);
  methodList=new Combo(this,style);
  methodList.setLayoutData(new GridData(GridData.FILL_BOTH));
}","public MethodPicker(Composite parent,int style,String[] theUnwantedPrefixes){
  super(parent,SWT.None);
  unwantedPrefixes=theUnwantedPrefixes == null ? StringUtil.getEmptyStrings() : theUnwantedPrefixes;
  GridLayout layout=new GridLayout(2,true);
  layout.verticalSpacing=0;
  layout.horizontalSpacing=0;
  layout.marginHeight=0;
  layout.marginWidth=0;
  this.setLayout(layout);
  typeText=new TypeText(this,style,false,""String_Node_Str"");
  typeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  typeText.addListener(SWT.FocusOut,new Listener(){
    public void handleEvent(    Event event){
      reviseMethodListFor(typeText.getType(true));
    }
  }
);
  typeText.addListener(SWT.Modify,new Listener(){
    public void handleEvent(    Event event){
      reviseMethodListFor(typeText.getType(false));
    }
  }
);
  methodList=new Combo(this,style);
  methodList.setLayoutData(new GridData(GridData.FILL_BOTH));
}",0.9860064585575888
21956,"private Integer[] currentIntegers(Text textWidget){
  String[] numberStrings=textWidgetValues(textWidget);
  if (numberStrings.length == 0)   return emptyIntSet;
  List<Integer> ints=new ArrayList<Integer>(numberStrings.length);
  Integer intrg;
  for (  String numString : numberStrings) {
    try {
      intrg=Integer.parseInt(numString);
    }
 catch (    Exception e) {
    }
    if (intrg != null)     ints.add(intrg);
  }
  return ints.toArray(new Integer[ints.size()]);
}","private Integer[] currentIntegers(Text textWidget){
  String[] numberStrings=textWidgetValues(textWidget);
  if (numberStrings.length == 0)   return emptyIntSet;
  List<Integer> ints=new ArrayList<Integer>(numberStrings.length);
  for (  String numString : numberStrings) {
    try {
      Integer intrg=Integer.parseInt(numString);
      ints.add(intrg);
    }
 catch (    Exception e) {
    }
  }
  return ints.toArray(new Integer[ints.size()]);
}",0.9008620689655172
21957,"public void showOn(StyledText widget){
}","public void showOn(StyledText widget){
  String text=buffer.toString();
  widget.setText(text);
  List<StyleRange> ranges=new ArrayList<StyleRange>();
  int[] span;
  for (int i=0; i < headingSpans.size(); i++) {
    span=headingSpans.get(i);
    ranges.add(new StyleRange(span[0],span[1] - span[0],headingColor,BACKGROUND,SWT.BOLD));
  }
  for (  int[] spn : linksBySpan.keySet()) {
    StyleRange style=new StyleRange(spn[0],spn[1] - spn[0],headingColor,BACKGROUND,SWT.UNDERLINE_LINK);
    style.underline=true;
    ranges.add(style);
  }
  String crStr=Character.toString(CR);
  StyleRange sr;
  for (int i=0; i < codeSpans.size(); i++) {
    span=codeSpans.get(i);
    sr=new StyleRange(codeStyle);
    sr.start=span[0];
    sr.length=span[1] - span[0];
    List<StyleRange> colorRanges=codeStyleExtractor.stylesFor(text,sr.start,sr.length,crStr);
    for (    StyleRange range : colorRanges) {
      ranges.add(range);
    }
  }
  StyleRange[] styles=sort(ranges);
  widget.setStyleRanges(styles);
}",0.0766283524904214
21958,"/** 
 * @see net.sourceforge.pmd.eclipse.ui.model.AbstractPMDRecord#getResource()
 */
@Override public IResource getResource(){
  IResource resource=null;
  try {
    resource=((IJavaElement)folder).getCorrespondingResource();
  }
 catch (  JavaModelException jme) {
    PMDPlugin.getDefault().logError(StringKeys.ERROR_JAVAMODEL_EXCEPTION + this.toString(),jme);
  }
  return resource;
}","/** 
 * @see net.sourceforge.pmd.eclipse.ui.model.AbstractPMDRecord#getResource()
 */
@Override public IResource getResource(){
  return (IResource)folder;
}",0.5467889908256881
21959,"private void checkNonDupes(){
  RuleSet rs=selectedRuleset();
  if (rs == null) {
    ruleTable.setCheckedElements(new Object[0]);
    return;
  }
  List<Rule> nonDupes=new ArrayList<Rule>();
  for (  Rule rule : rs.getRules()) {
    if (dupeChecker.isDuplicate(rule))     continue;
    nonDupes.add(rule);
  }
  ruleTable.setCheckedElements(nonDupes.toArray());
}","private void checkNonDupes(){
  List<Rule> nonDupes=new ArrayList<Rule>();
  for (  TableItem item : ruleTable.getTable().getItems()) {
    Rule rule=(Rule)item.getData();
    if (dupeChecker.isDuplicate(rule)) {
      continue;
    }
    nonDupes.add(rule);
  }
  ruleTable.setCheckedElements(nonDupes.toArray());
}",0.1705882352941176
21960,"/** 
 * @param event
 */
public void resourceChanged(IResourceChangeEvent event){
  Set<ResourceChange> itemsChanged=new HashSet<ResourceChange>();
switch (event.getType()) {
case IResourceChangeEvent.POST_CHANGE:
    changed(itemsChanged,event.getDelta(),new NullProgressMonitor());
}
if (itemsChanged.isEmpty()) return;
ReviewCodeCmd cmd=new ReviewCodeCmd();
cmd.reset();
for (ResourceChange chg : itemsChanged) cmd.addResource(chg.file);
try {
  cmd.performExecute();
}
 catch (CommandException e) {
  PMDPlugin.getDefault().log(IStatus.ERROR,""String_Node_Str"",e);
}
}","/** 
 * @param event
 */
public void resourceChanged(IResourceChangeEvent event){
  Set<ResourceChange> itemsChanged=new HashSet<ResourceChange>();
switch (event.getType()) {
case IResourceChangeEvent.POST_CHANGE:
    changed(itemsChanged,event.getDelta(),new NullProgressMonitor());
}
if (itemsChanged.isEmpty()) return;
ReviewCodeCmd cmd=new ReviewCodeCmd();
cmd.clearExistingMarkersBeforeApplying(true);
cmd.reset();
for (ResourceChange chg : itemsChanged) cmd.addResource(chg.file);
try {
  cmd.performExecute();
}
 catch (CommandException e) {
  PMDPlugin.getDefault().log(IStatus.ERROR,""String_Node_Str"",e);
}
}",0.9612794612794612
21961,"/** 
 * Apply PMD markers after the review
 */
private void applyMarkers(){
  log.info(""String_Node_Str"");
  int violationCount=0;
  final Timer timer=new Timer();
  String currentFile=""String_Node_Str"";
  beginTask(""String_Node_Str"",markersByFile.size());
  try {
    for (    IFile file : markersByFile.keySet()) {
      if (isCanceled())       break;
      currentFile=file.getName();
      Set<MarkerInfo2> markerInfoSet=markersByFile.get(file);
      for (      MarkerInfo2 markerInfo : markerInfoSet) {
        markerInfo.addAsMarkerTo(file);
        violationCount++;
      }
      worked(1);
    }
  }
 catch (  CoreException e) {
    log.warn(""String_Node_Str"" + currentFile + ""String_Node_Str""+ e.getMessage());
  }
 finally {
    timer.stop();
    int count=markersByFile.size();
    logInfo(""String_Node_Str"" + violationCount + ""String_Node_Str""+ count+ ""String_Node_Str""+ timer.getDuration()+ ""String_Node_Str"");
    log.info(""String_Node_Str"" + violationCount + ""String_Node_Str""+ count+ ""String_Node_Str"");
  }
}","/** 
 * Apply PMD markers after the review
 */
private void applyMarkers(){
  log.info(""String_Node_Str"");
  int violationCount=0;
  final Timer timer=new Timer();
  String currentFile=""String_Node_Str"";
  beginTask(""String_Node_Str"",markersByFile.size());
  try {
    for (    IFile file : markersByFile.keySet()) {
      if (isCanceled())       break;
      currentFile=file.getName();
      Set<MarkerInfo2> markerInfoSet=markersByFile.get(file);
      if (clearExistingMarkersBeforeApplying) {
        MarkerUtil.deleteAllMarkersIn(file);
      }
      for (      MarkerInfo2 markerInfo : markerInfoSet) {
        markerInfo.addAsMarkerTo(file);
        violationCount++;
      }
      worked(1);
    }
  }
 catch (  CoreException e) {
    log.warn(""String_Node_Str"" + currentFile + ""String_Node_Str""+ e.getMessage());
  }
 finally {
    timer.stop();
    int count=markersByFile.size();
    logInfo(""String_Node_Str"" + violationCount + ""String_Node_Str""+ count+ ""String_Node_Str""+ timer.getDuration()+ ""String_Node_Str"");
    log.info(""String_Node_Str"" + violationCount + ""String_Node_Str""+ count+ ""String_Node_Str"");
  }
}",0.9531322505800464
21962,"private CPD newCPD(){
  CPDConfiguration config=new CPDConfiguration(minTileSize,language,System.getProperty(""String_Node_Str""));
  return new CPD(config);
}","private CPD newCPD(){
  CPDConfiguration config=new CPDConfiguration();
  config.setMinimumTileSize(minTileSize);
  config.setLanguage(language);
  config.setEncoding(System.getProperty(""String_Node_Str""));
  return new CPD(config);
}",0.7416879795396419
21963,"/** 
 * Save the properties of all renderers to the specified filename.
 * @param propertyFilename String
 */
private static void saveReportProperties(String propertyFilename){
  Properties props=new Properties();
  for (  Renderer renderer : ReportManager.instance.allRenderers()) {
    Map<PropertyDescriptor<?>,Object> valuesByProp=renderer.getPropertiesByPropertyDescriptor();
    for (    Map.Entry<PropertyDescriptor<?>,Object> entry : valuesByProp.entrySet()) {
      PropertyDescriptor desc=entry.getKey();
      props.put(keyOf(renderer,desc),desc.asDelimitedString(entry.getValue()));
    }
  }
  FileOutputStream fos=null;
  try {
    fos=new FileOutputStream(propertyFilename);
    props.storeToXML(fos,""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    IOUtil.closeQuietly(fos);
  }
}","/** 
 * Save the properties of all renderers to the specified filename.
 * @param propertyFilename String
 */
private static void saveReportProperties(String propertyFilename){
  Properties props=new Properties();
  for (  Renderer renderer : ReportManager.instance.allRenderers()) {
    Map<PropertyDescriptor<?>,Object> valuesByProp=renderer.getPropertiesByPropertyDescriptor();
    for (    Map.Entry<PropertyDescriptor<?>,Object> entry : valuesByProp.entrySet()) {
      PropertyDescriptor desc=entry.getKey();
      props.put(keyOf(renderer,desc),desc.asDelimitedString(entry.getValue()));
    }
  }
  FileOutputStream fos=null;
  try {
    fos=new FileOutputStream(propertyFilename);
    props.storeToXML(fos,""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (fos != null) {
        fos.close();
      }
    }
 catch (    Exception e) {
    }
  }
}",0.9331810394060536
21964,"/** 
 * Load the properties for all renderers from the specified filename. Return whether we succeeded or not.
 * @param propertyFilename String
 * @return boolean
 */
private static boolean loadReportProperties(String propertyFilename){
  Properties props=new Properties();
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(propertyFilename);
    props.loadFromXML(fis);
  }
 catch (  Exception e) {
    return false;
  }
 finally {
    IOUtil.closeQuietly(fis);
  }
  for (  Renderer renderer : ReportManager.instance.allRenderers()) {
    for (    PropertyDescriptor pDesc : renderer.getPropertyDescriptors()) {
      String key=keyOf(renderer,pDesc);
      if (props.containsKey(key)) {
        Object value=pDesc.valueFrom((String)props.get(key));
        renderer.setProperty(pDesc,value);
      }
    }
  }
  return true;
}","/** 
 * Load the properties for all renderers from the specified filename. Return whether we succeeded or not.
 * @param propertyFilename String
 * @return boolean
 */
private static boolean loadReportProperties(String propertyFilename){
  Properties props=new Properties();
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(propertyFilename);
    props.loadFromXML(fis);
  }
 catch (  Exception e) {
    return false;
  }
 finally {
    try {
      if (fis != null) {
        fis.close();
      }
    }
 catch (    Exception e) {
    }
  }
  for (  Renderer renderer : ReportManager.instance.allRenderers()) {
    for (    PropertyDescriptor pDesc : renderer.getPropertyDescriptors()) {
      String key=keyOf(renderer,pDesc);
      if (props.containsKey(key)) {
        Object value=pDesc.valueFrom((String)props.get(key));
        renderer.setProperty(pDesc,value);
      }
    }
  }
  return true;
}",0.9324247586598524
21965,"/** 
 * Test the basic usage of the report rendering command
 */
@Test public void testRenderReportCmdBasic() throws CommandException, CoreException {
  final ReviewCodeCmd reviewCmd=new ReviewCodeCmd();
  reviewCmd.addResource(this.testProject);
  reviewCmd.performExecute();
  final RenderReportsCmd cmd=new RenderReportsCmd();
  cmd.setProject(this.testProject);
  cmd.registerRenderer(new HTMLRenderer(new Properties()),PMDRuntimeConstants.HTML_REPORT_NAME);
  cmd.performExecute();
  cmd.join();
  final IFolder reportFolder=this.testProject.getFolder(PMDRuntimeConstants.REPORT_FOLDER);
  Assert.assertTrue(reportFolder.exists());
  final IFile reportFile=reportFolder.getFile(PMDRuntimeConstants.HTML_REPORT_NAME);
  Assert.assertTrue(reportFile.exists());
  this.testProject.deleteMarkers(PMDRuntimeConstants.PMD_MARKER,true,IResource.DEPTH_INFINITE);
  if (reportFile.exists()) {
    reportFile.delete(true,false,null);
  }
  if (reportFolder.exists()) {
    reportFolder.delete(true,false,null);
  }
}","/** 
 * Test the basic usage of the report rendering command
 */
@Test public void testRenderReportCmdBasic() throws CommandException, CoreException {
  final ReviewCodeCmd reviewCmd=new ReviewCodeCmd();
  reviewCmd.addResource(this.testProject);
  reviewCmd.performExecute();
  final RenderReportsCmd cmd=new RenderReportsCmd();
  cmd.setProject(this.testProject);
  cmd.registerRenderer(new HTMLRenderer(),PMDRuntimeConstants.HTML_REPORT_NAME);
  cmd.performExecute();
  cmd.join();
  final IFolder reportFolder=this.testProject.getFolder(PMDRuntimeConstants.REPORT_FOLDER);
  Assert.assertTrue(reportFolder.exists());
  final IFile reportFile=reportFolder.getFile(PMDRuntimeConstants.HTML_REPORT_NAME);
  Assert.assertTrue(reportFile.exists());
  this.testProject.deleteMarkers(PMDRuntimeConstants.PMD_MARKER,true,IResource.DEPTH_INFINITE);
  if (reportFile.exists()) {
    reportFile.delete(true,false,null);
  }
  if (reportFolder.exists()) {
    reportFolder.delete(true,false,null);
  }
}",0.992023928215354
21966,"/** 
 * Test robustness #1
 * @throws CommandException
 */
@Test public void testRenderReportCmdNullArg1() throws CommandException {
  try {
    final RenderReportsCmd cmd=new RenderReportsCmd();
    cmd.setProject(null);
    cmd.registerRenderer(new HTMLRenderer(new Properties()),PMDRuntimeConstants.HTML_REPORT_NAME);
    cmd.performExecute();
    Assert.fail();
  }
 catch (  final UnsetInputPropertiesException e) {
  }
}","/** 
 * Test robustness #1
 * @throws CommandException
 */
@Test public void testRenderReportCmdNullArg1() throws CommandException {
  try {
    final RenderReportsCmd cmd=new RenderReportsCmd();
    cmd.setProject(null);
    cmd.registerRenderer(new HTMLRenderer(),PMDRuntimeConstants.HTML_REPORT_NAME);
    cmd.performExecute();
    Assert.fail();
  }
 catch (  final UnsetInputPropertiesException e) {
  }
}",0.9808612440191388
21967,"/** 
 * Test robustness #3
 * @throws CommandException
 */
@Test public void testRenderReportCmdNullArg3() throws CommandException {
  try {
    final RenderReportsCmd cmd=new RenderReportsCmd();
    cmd.setProject(this.testProject);
    cmd.registerRenderer(new HTMLRenderer(new Properties()),null);
    cmd.performExecute();
    Assert.fail();
  }
 catch (  final UnsetInputPropertiesException e) {
  }
}","/** 
 * Test robustness #3
 * @throws CommandException
 */
@Test public void testRenderReportCmdNullArg3() throws CommandException {
  try {
    final RenderReportsCmd cmd=new RenderReportsCmd();
    cmd.setProject(this.testProject);
    cmd.registerRenderer(new HTMLRenderer(),null);
    cmd.performExecute();
    Assert.fail();
  }
 catch (  final UnsetInputPropertiesException e) {
  }
}",0.9798994974874372
21968,"/** 
 * Test robustness #5
 * @throws CommandException
 */
@Test public void testRenderReportCmdNullArg5() throws CommandException {
  try {
    final RenderReportsCmd cmd=new RenderReportsCmd();
    cmd.setProject(null);
    cmd.registerRenderer(new HTMLRenderer(new Properties()),null);
    cmd.performExecute();
    Assert.fail();
  }
 catch (  final UnsetInputPropertiesException e) {
  }
}","/** 
 * Test robustness #5
 * @throws CommandException
 */
@Test public void testRenderReportCmdNullArg5() throws CommandException {
  try {
    final RenderReportsCmd cmd=new RenderReportsCmd();
    cmd.setProject(null);
    cmd.registerRenderer(new HTMLRenderer(),null);
    cmd.performExecute();
    Assert.fail();
  }
 catch (  final UnsetInputPropertiesException e) {
  }
}",0.9792746113989638
21969,"public boolean equals(Object other){
  if (other == this)   return true;
  if (other.getClass() == getClass()) {
    ResourceChange chg=(ResourceChange)other;
    return chg.file.equals(file) && resourceDeltaType == chg.resourceDeltaType && flags == chg.flags;
  }
  return false;
}","public boolean equals(Object other){
  if (other == null)   return false;
  if (other == this)   return true;
  if (other.getClass() == getClass()) {
    ResourceChange chg=(ResourceChange)other;
    return chg.file.equals(file) && resourceDeltaType == chg.resourceDeltaType && flags == chg.flags;
  }
  return false;
}",0.9384359400998336
21970,"private void addFilesTo(IResource resource,Collection<IResource> allKids){
  if (resource instanceof IFile) {
    allKids.add(resource);
    return;
  }
  if (resource instanceof IFolder) {
    IFolder folder=(IFolder)resource;
    IResource[] kids=null;
    try {
      kids=folder.members();
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    for (    IResource irc : kids) {
      if (irc instanceof IFile) {
        allKids.add(irc);
        continue;
      }
      if (irc instanceof IFolder) {
        addFilesTo(irc,allKids);
      }
    }
    allKids.add(folder);
    return;
  }
  if (resource instanceof IProject) {
    IProject project=(IProject)resource;
    IResource[] kids=null;
    try {
      kids=project.members();
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    for (    IResource irc : kids) {
      if (irc instanceof IFile) {
        allKids.add(irc);
        continue;
      }
      if (irc instanceof IFolder) {
        addFilesTo(irc,allKids);
      }
    }
    allKids.add(project);
    return;
  }
}","private void addFilesTo(IResource resource,Collection<IResource> allKids){
  if (resource instanceof IFile) {
    allKids.add(resource);
    return;
  }
  if (resource instanceof IFolder) {
    IFolder folder=(IFolder)resource;
    IResource[] kids=null;
    try {
      kids=folder.members();
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    addKids(allKids,kids);
    allKids.add(folder);
    return;
  }
  if (resource instanceof IProject) {
    IProject project=(IProject)resource;
    IResource[] kids=null;
    try {
      kids=project.members();
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    addKids(allKids,kids);
    allKids.add(project);
    return;
  }
}",0.7369007803790413
21971,"public static boolean hasAnyRuleMarkers(IResource resource) throws CoreException {
  final boolean[] foundOne=new boolean[]{false};
  IResourceVisitor ruleMarkerFinder=new IResourceVisitor(){
    public boolean visit(    IResource resource){
      if (foundOne[0])       return false;
      if (resource instanceof IFile) {
        for (        String markerType : PMDRuntimeConstants.RULE_MARKER_TYPES) {
          IMarker[] ruleMarkers=null;
          try {
            ruleMarkers=resource.findMarkers(markerType,true,IResource.DEPTH_INFINITE);
          }
 catch (          CoreException ex) {
          }
          if (ruleMarkers.length > 0) {
            foundOne[0]=true;
            return false;
          }
        }
      }
      return true;
    }
  }
;
  try {
    resource.accept(ruleMarkerFinder);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  return foundOne[0];
}","public static boolean hasAnyRuleMarkers(IResource resource) throws CoreException {
  final boolean[] foundOne=new boolean[]{false};
  IResourceVisitor ruleMarkerFinder=new IResourceVisitor(){
    public boolean visit(    IResource resource){
      if (foundOne[0])       return false;
      if (resource instanceof IFile) {
        for (        String markerType : PMDRuntimeConstants.RULE_MARKER_TYPES) {
          IMarker[] ruleMarkers=null;
          try {
            ruleMarkers=resource.findMarkers(markerType,true,IResource.DEPTH_INFINITE);
          }
 catch (          CoreException ex) {
          }
          if (ruleMarkers != null && ruleMarkers.length > 0) {
            foundOne[0]=true;
            return false;
          }
        }
      }
      return true;
    }
  }
;
  try {
    resource.accept(ruleMarkerFinder);
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  return foundOne[0];
}",0.9873695771554092
21972,"public boolean visit(IResource resource){
  if (foundOne[0])   return false;
  if (resource instanceof IFile) {
    for (    String markerType : PMDRuntimeConstants.RULE_MARKER_TYPES) {
      IMarker[] ruleMarkers=null;
      try {
        ruleMarkers=resource.findMarkers(markerType,true,IResource.DEPTH_INFINITE);
      }
 catch (      CoreException ex) {
      }
      if (ruleMarkers.length > 0) {
        foundOne[0]=true;
        return false;
      }
    }
  }
  return true;
}","public boolean visit(IResource resource){
  if (foundOne[0])   return false;
  if (resource instanceof IFile) {
    for (    String markerType : PMDRuntimeConstants.RULE_MARKER_TYPES) {
      IMarker[] ruleMarkers=null;
      try {
        ruleMarkers=resource.findMarkers(markerType,true,IResource.DEPTH_INFINITE);
      }
 catch (      CoreException ex) {
      }
      if (ruleMarkers != null && ruleMarkers.length > 0) {
        foundOne[0]=true;
        return false;
      }
    }
  }
  return true;
}",0.9767911200807264
21973,"/** 
 * @see net.sourceforge.pmd.eclipse.runtime.properties.IProjectProperties#setRuleSetFile(String)
 */
public void setRuleSetFile(String ruleSetFile) throws PropertiesException {
  log.debug(""String_Node_Str"" + this.project.getName() + ""String_Node_Str""+ ruleSetFile);
  this.needRebuild|=this.ruleSetFile == null || !ruleSetFile.equals(ruleSetFile);
  this.ruleSetFile=ruleSetFile;
  if (this.ruleSetStoredInProject && !isRuleSetFileExist()) {
    throw new PropertiesException(""String_Node_Str"" + this.project.getName());
  }
}","/** 
 * @see net.sourceforge.pmd.eclipse.runtime.properties.IProjectProperties#setRuleSetFile(String)
 */
public void setRuleSetFile(String ruleSetFile) throws PropertiesException {
  log.debug(""String_Node_Str"" + project.getName() + ""String_Node_Str""+ ruleSetFile);
  needRebuild|=this.ruleSetFile == null || !this.ruleSetFile.equals(ruleSetFile);
  this.ruleSetFile=ruleSetFile;
  if (ruleSetStoredInProject && !isRuleSetFileExist()) {
    throw new PropertiesException(""String_Node_Str"" + project.getName());
  }
}",0.9761677788369876
21974,"public boolean equals(Object other){
  if (this == other)   return true;
  if (other.getClass() != getClass())   return false;
  ShapeDescriptor otherOne=(ShapeDescriptor)other;
  return shape.equals(otherOne.shape) && rgbColor.equals(otherOne.rgbColor) && size == otherOne.size;
}","public boolean equals(Object other){
  if (other == null)   return false;
  if (this == other)   return true;
  if (other.getClass() != getClass())   return false;
  ShapeDescriptor otherOne=(ShapeDescriptor)other;
  return shape.equals(otherOne.shape) && rgbColor.equals(otherOne.rgbColor) && size == otherOne.size;
}",0.9382303839732888
21975,"private T itemAt(int xIn,int yIn){
  if (items == null)   return null;
  int width=getSize().x;
  int xBoundary=3;
  for (int i=0; i < items.length; i++) {
    int xOffset=0;
    int step=(itemWidth + gap) * i;
switch (SWT.LEFT) {
case SWT.CENTER:
      xOffset=(width / 2) - (itemWidth / 2) - xBoundary + step;
    break;
case SWT.RIGHT:
  xOffset=width - width - xBoundary;
break;
case SWT.LEFT:
xOffset=xBoundary + step;
}
if (xIn < xOffset) {
return items[i == 0 ? 0 : i - 1];
}
if (xIn < xOffset + itemWidth) return items[i];
}
return null;
}","private T itemAt(int xIn,int yIn){
  if (items == null)   return null;
  int width=getSize().x;
  int xBoundary=3;
  for (int i=0; i < items.length; i++) {
    int xOffset=0;
    int step=(itemWidth + gap) * i;
switch (SWT.LEFT) {
case SWT.CENTER:
      xOffset=(width / 2) - (itemWidth / 2) - xBoundary + step;
    break;
case SWT.RIGHT:
  xOffset=0 - xBoundary;
break;
case SWT.LEFT:
xOffset=xBoundary + step;
}
if (xIn < xOffset) {
return items[i == 0 ? 0 : i - 1];
}
if (xIn < xOffset + itemWidth) return items[i];
}
return null;
}",0.9870609981515712
21976,"private void doPaint(PaintEvent pe){
  if (items == null)   return;
  GC gc=pe.gc;
  int width=getSize().x;
  int xBoundary=3;
  if (isFocusControl()) {
    gc.drawFocus(0,0,getSize().x,getSize().y);
  }
  for (int i=0; i < items.length; i++) {
    gc.setBackground(selectedItem == items[i] ? selectedItemFillColor : colourFor(i));
    int xOffset=0;
    int step=(itemWidth + gap) * i;
switch (SWT.LEFT) {
case SWT.CENTER:
      xOffset=(width / 2) - (itemWidth / 2) - xBoundary + step;
    break;
case SWT.RIGHT:
  xOffset=width - width - xBoundary;
break;
case SWT.LEFT:
xOffset=xBoundary + step;
}
gc.setLineWidth(showHighlightOn(items[i]) ? 3 : 1);
ShapePainter.drawShape(itemWidth,itemWidth,shapeFor(i),gc,pe.x + xOffset,pe.y + gap,null);
}
}","private void doPaint(PaintEvent pe){
  if (items == null)   return;
  GC gc=pe.gc;
  int width=getSize().x;
  int xBoundary=3;
  if (isFocusControl()) {
    gc.drawFocus(0,0,getSize().x,getSize().y);
  }
  for (int i=0; i < items.length; i++) {
    gc.setBackground(selectedItem == items[i] ? selectedItemFillColor : colourFor(i));
    int xOffset=0;
    int step=(itemWidth + gap) * i;
switch (SWT.LEFT) {
case SWT.CENTER:
      xOffset=(width / 2) - (itemWidth / 2) - xBoundary + step;
    break;
case SWT.RIGHT:
  xOffset=0 - xBoundary;
break;
case SWT.LEFT:
xOffset=xBoundary + step;
}
gc.setLineWidth(showHighlightOn(items[i]) ? 3 : 1);
ShapePainter.drawShape(itemWidth,itemWidth,shapeFor(i),gc,pe.x + xOffset,pe.y + gap,null);
}
}",0.9905660377358492
21977,"/** 
 * remove reviews from file content
 * @param file
 * @return
 */
private String removeReviews(IFile file){
  if (!isReviewable(file))   return null;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintWriter out=null;
  boolean noChange=true;
  try {
    boolean comment=false;
    BufferedReader reader=new BufferedReader(new InputStreamReader(file.getContents()));
    out=new PrintWriter(baos);
    while (reader.ready()) {
      String origLine=reader.readLine();
      String line=origLine.trim();
      int index=origLine.indexOf(PMDRuntimeConstants.PMD_STYLE_REVIEW_COMMENT);
      int quoteIndex=origLine.indexOf('""');
      if (line.startsWith(""String_Node_Str"")) {
        if (line.indexOf(""String_Node_Str"") == -1) {
          comment=true;
        }
        out.println(origLine);
      }
 else       if (comment && line.indexOf(""String_Node_Str"") != -1) {
        comment=false;
        out.println(origLine);
      }
 else       if (!comment && line.startsWith(PMDRuntimeConstants.PLUGIN_STYLE_REVIEW_COMMENT)) {
        noChange=false;
      }
 else       if (!comment && index != -1 && !(quoteIndex != -1 && quoteIndex < index && index < origLine.lastIndexOf('""'))) {
        noChange=false;
        out.println(origLine.substring(0,index));
      }
 else {
        out.println(origLine);
      }
    }
    out.flush();
  }
 catch (  CoreException e) {
    logError(StringKeys.ERROR_CORE_EXCEPTION,e);
  }
catch (  IOException e) {
    logError(StringKeys.ERROR_IO_EXCEPTION,e);
  }
 finally {
    IOUtil.closeQuietly(baos);
    IOUtil.closeQuietly(out);
  }
  return noChange ? null : baos.toString();
}","/** 
 * remove reviews from file content
 * @param file
 * @return
 */
private String removeReviews(IFile file){
  if (!isReviewable(file))   return null;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintWriter out=null;
  boolean noChange=true;
  try {
    boolean comment=false;
    BufferedReader reader=new BufferedReader(new InputStreamReader(file.getContents()));
    out=new PrintWriter(baos);
    while (reader.ready()) {
      String origLine=reader.readLine();
      String line=origLine.trim();
      if (line == null)       break;
      int index=origLine.indexOf(PMDRuntimeConstants.PMD_STYLE_REVIEW_COMMENT);
      int quoteIndex=origLine.indexOf('""');
      if (line.startsWith(""String_Node_Str"")) {
        if (line.indexOf(""String_Node_Str"") == -1) {
          comment=true;
        }
        out.println(origLine);
      }
 else       if (comment && line.indexOf(""String_Node_Str"") != -1) {
        comment=false;
        out.println(origLine);
      }
 else       if (!comment && line.startsWith(PMDRuntimeConstants.PLUGIN_STYLE_REVIEW_COMMENT)) {
        noChange=false;
      }
 else       if (!comment && index != -1 && !(quoteIndex != -1 && quoteIndex < index && index < origLine.lastIndexOf('""'))) {
        noChange=false;
        out.println(origLine.substring(0,index));
      }
 else {
        out.println(origLine);
      }
    }
    out.flush();
  }
 catch (  CoreException e) {
    logError(StringKeys.ERROR_CORE_EXCEPTION,e);
  }
catch (  IOException e) {
    logError(StringKeys.ERROR_IO_EXCEPTION,e);
  }
 finally {
    IOUtil.closeQuietly(baos);
    IOUtil.closeQuietly(out);
  }
  return noChange ? null : baos.toString();
}",0.9888386123680242
21978,"/** 
 * @see org.eclipse.jface.preference.IPreferencePage#performOk()
 */
public boolean performOk(){
  updateMarkerIcons();
  if (additionalCommentText != null) {
    preferences.setReviewAdditionalComment(additionalCommentText.getText());
  }
  if (showPerspectiveBox != null) {
    preferences.setPmdPerspectiveEnabled(showPerspectiveBox.getSelection());
  }
  if (checkCodeOnSave != null) {
    preferences.isCheckAfterSaveEnabled(checkCodeOnSave.getSelection());
  }
  if (useCustomPriorityNames != null) {
    preferences.useCustomPriorityNames(useCustomPriorityNames.getSelection());
  }
  if (useProjectBuildPath != null) {
    preferences.setProjectBuildPathEnabled(useProjectBuildPath.getSelection());
  }
  if (maxViolationsPerFilePerRule != null) {
    preferences.setMaxViolationsPerFilePerRule(Integer.valueOf(maxViolationsPerFilePerRule.getText()).intValue());
  }
  if (reviewPmdStyleBox != null) {
    preferences.setReviewPmdStyleEnabled(reviewPmdStyleBox.getSelection());
  }
  if (logFileNameText != null) {
    preferences.setLogFileName(logFileNameText.getText());
  }
  if (logLevelScale != null) {
    preferences.setLogLevel(Level.toLevel(LOG_LEVELS[logLevelScale.getSelection()]));
  }
  preferences.sync();
  PMDPlugin.getDefault().fileChangeListenerEnabled(checkCodeOnSave.getSelection());
  PMDPlugin.getDefault().applyLogPreferences(preferences);
  return true;
}","/** 
 * @see org.eclipse.jface.preference.IPreferencePage#performOk()
 */
public boolean performOk(){
  updateMarkerIcons();
  if (additionalCommentText != null) {
    preferences.setReviewAdditionalComment(additionalCommentText.getText());
  }
  if (showPerspectiveBox != null) {
    preferences.setPmdPerspectiveEnabled(showPerspectiveBox.getSelection());
  }
  if (checkCodeOnSave != null) {
    boolean doCheck=checkCodeOnSave.getSelection();
    preferences.isCheckAfterSaveEnabled(doCheck);
    PMDPlugin.getDefault().fileChangeListenerEnabled(doCheck);
  }
  if (useCustomPriorityNames != null) {
    preferences.useCustomPriorityNames(useCustomPriorityNames.getSelection());
  }
  if (useProjectBuildPath != null) {
    preferences.setProjectBuildPathEnabled(useProjectBuildPath.getSelection());
  }
  if (maxViolationsPerFilePerRule != null) {
    preferences.setMaxViolationsPerFilePerRule(Integer.valueOf(maxViolationsPerFilePerRule.getText()).intValue());
  }
  if (reviewPmdStyleBox != null) {
    preferences.setReviewPmdStyleEnabled(reviewPmdStyleBox.getSelection());
  }
  if (logFileNameText != null) {
    preferences.setLogFileName(logFileNameText.getText());
  }
  if (logLevelScale != null) {
    preferences.setLogLevel(Level.toLevel(LOG_LEVELS[logLevelScale.getSelection()]));
  }
  preferences.sync();
  PMDPlugin.getDefault().applyLogPreferences(preferences);
  return true;
}",0.9148174659985684
21979,"protected List<String> fieldWarnings(){
  List<String> warnings=new ArrayList<String>(2);
  if (rules != null && !canManageMultipleRules()) {
    Rule soleRule=soleRule();
    if (soleRule != null) {
      String dysfunctionReason=soleRule.dysfunctionReason();
      if (dysfunctionReason != null) {
        warnings.add(dysfunctionReason);
      }
    }
  }
  if (unreferencedVariables == null || unreferencedVariables.isEmpty()) {
    return warnings;
  }
  warnings.add(""String_Node_Str"" + unreferencedVariables.toArray(new String[unreferencedVariables.size()]));
  return warnings;
}","protected List<String> fieldWarnings(){
  List<String> warnings=new ArrayList<String>(2);
  if (rules != null && !canManageMultipleRules()) {
    Rule soleRule=soleRule();
    if (soleRule != null) {
      String dysfunctionReason=soleRule.dysfunctionReason();
      if (dysfunctionReason != null) {
        warnings.add(dysfunctionReason);
      }
    }
  }
  if (unreferencedVariables == null || unreferencedVariables.isEmpty()) {
    return warnings;
  }
  warnings.add(""String_Node_Str"" + unreferencedVariables);
  return warnings;
}",0.9341637010676156
21980,"public boolean equals(Object other){
  if (this == other)   return true;
  if (other.getClass() != getClass())   return false;
  PriorityDescriptor otherOne=(PriorityDescriptor)other;
  return priority.equals(otherOne.priority) && StringUtil.isSame(label,otherOne.label,false,false,false) && shape.equals(otherOne.shape)&& StringUtil.isSame(description,otherOne.description,false,false,false)&& StringUtil.isSame(filterText,otherOne.filterText,false,false,false)&& StringUtil.isSame(iconId,otherOne.iconId,false,false,false);
}","public boolean equals(Object other){
  if (other == null)   return false;
  if (this == other)   return true;
  if (other.getClass() != getClass())   return false;
  PriorityDescriptor otherOne=(PriorityDescriptor)other;
  return priority.equals(otherOne.priority) && StringUtil.isSame(label,otherOne.label,false,false,false) && shape.equals(otherOne.shape)&& StringUtil.isSame(description,otherOne.description,false,false,false)&& StringUtil.isSame(filterText,otherOne.filterText,false,false,false)&& StringUtil.isSame(iconId,otherOne.iconId,false,false,false);
}",0.9660861594867094
21981,"/** 
 * Checks for an XML-Structure in a File
 * @param file
 * @return true, if the File is a XML-File we can use, false otherwise
 */
protected final boolean checkForXMLFile(File file){
  boolean isXmlFile=false;
  BufferedReader contentReader=null;
  try {
    contentReader=new BufferedReader(new FileReader(file));
    while (contentReader.ready()) {
      final String line=contentReader.readLine();
      if (line.length() != 0) {
        isXmlFile=XML_PREFIX.equalsIgnoreCase(line);
        break;
      }
    }
  }
 catch (  FileNotFoundException fnfe) {
    PMDPlugin.getDefault().logError(StringKeys.ERROR_FILE_NOT_FOUND + file.toString() + ""String_Node_Str""+ this.toString(),fnfe);
  }
catch (  IOException ioe) {
    PMDPlugin.getDefault().logError(StringKeys.ERROR_IO_EXCEPTION + this.toString(),ioe);
  }
 finally {
    if (contentReader != null) {
      try {
        contentReader.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return isXmlFile;
}","/** 
 * Checks for an XML-Structure in a File
 * @param file
 * @return true, if the File is a XML-File we can use, false otherwise
 */
protected final boolean checkForXMLFile(File file){
  boolean isXmlFile=false;
  BufferedReader contentReader=null;
  try {
    contentReader=new BufferedReader(new FileReader(file));
    while (contentReader.ready()) {
      String line=contentReader.readLine();
      if (line != null && line.length() != 0) {
        isXmlFile=XML_PREFIX.equalsIgnoreCase(line);
        break;
      }
    }
  }
 catch (  FileNotFoundException fnfe) {
    PMDPlugin.getDefault().logError(StringKeys.ERROR_FILE_NOT_FOUND + file.toString() + ""String_Node_Str""+ this.toString(),fnfe);
  }
catch (  IOException ioe) {
    PMDPlugin.getDefault().logError(StringKeys.ERROR_IO_EXCEPTION + this.toString(),ioe);
  }
 finally {
    if (contentReader != null) {
      try {
        contentReader.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return isXmlFile;
}",0.9888888888888888
21982,"@Override protected void clearControls(){
  nameField.setText(""String_Node_Str"");
  ruleSetNameField.select(-1);
  implementationClassField.setType(null);
  ruleSetNameField.setText(""String_Node_Str"");
  languageCombo.select(-1);
  priorityCombo.select(-1);
  priorityDisplay.setItems(null);
  minLanguageVersionCombo.select(-1);
  maxLanguageVersionCombo.select(-1);
  usesDfaButton.setSelection(false);
  usesTypeResolutionButton.setSelection(false);
}","@Override protected void clearControls(){
  nameField.setText(""String_Node_Str"");
  ruleSetNameField.select(-1);
  implementationClassField.setType(null);
  ruleSetNameField.setText(""String_Node_Str"");
  languageCombo.select(-1);
  priorityCombo.select(-1);
  priorityDisplay.setItems(null);
  usesDfaButton.setSelection(false);
  usesTypeResolutionButton.setSelection(false);
  clearLanguageVersionCombos();
}",0.875
21983,"private Combo buildLanguageVersionCombo(Composite parent,final boolean isMinVersion){
  int style=creatingNewRule() ? SWT.SINGLE | SWT.BORDER : SWT.READ_ONLY | SWT.BORDER;
  final Combo combo=new Combo(parent,style);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (rules == null)       return;
      final LanguageVersion version=selectedLanguage().getVersions().get(combo.getSelectionIndex());
      RuleVisitor visitor=new RuleVisitor(){
        public boolean accept(        Rule rule){
          if (isMinVersion) {
            rule.setMinimumLanguageVersion(version);
          }
 else {
            rule.setMaximumLanguageVersion(version);
          }
          return true;
        }
      }
;
      rules.rulesDo(visitor);
      valueChanged(null,version.getName());
    }
  }
);
  return combo;
}","private Combo buildLanguageVersionCombo(Composite parent,final boolean isMinVersion){
  int style=creatingNewRule() ? SWT.SINGLE | SWT.BORDER : SWT.READ_ONLY | SWT.BORDER;
  final Combo combo=new Combo(parent,style);
  combo.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (rules == null)       return;
      final int selIdx=combo.getSelectionIndex();
      final LanguageVersion version=selIdx == 0 ? null : selectedLanguage().getVersions().get(selIdx - 1);
      RuleVisitor visitor=new RuleVisitor(){
        public boolean accept(        Rule rule){
          if (isMinVersion) {
            rule.setMinimumLanguageVersion(version);
          }
 else {
            rule.setMaximumLanguageVersion(version);
          }
          return true;
        }
      }
;
      rules.rulesDo(visitor);
      valueChanged(null,version == null ? ""String_Node_Str"" : version.getName());
    }
  }
);
  return combo;
}",0.92
21984,"private void showLanguageVersionFields(Language language){
  int versionCount=language == null ? 0 : language.getVersions().size();
  boolean hasVersions=versionCount > 1;
  minLanguageLabel.setVisible(hasVersions);
  maxLanguageLabel.setVisible(hasVersions);
  minLanguageVersionCombo.setVisible(hasVersions);
  maxLanguageVersionCombo.setVisible(hasVersions);
  if (hasVersions) {
    List<LanguageVersion> versions=language.getVersions();
    populate(minLanguageVersionCombo,versions);
    populate(maxLanguageVersionCombo,versions);
  }
}","private void showLanguageVersionFields(Language language){
  int versionCount=language == null ? 0 : language.getVersions().size();
  boolean hasVersions=versionCount > 1;
  minLanguageLabel.setVisible(hasVersions);
  maxLanguageLabel.setVisible(hasVersions);
  minLanguageVersionCombo.setVisible(hasVersions);
  maxLanguageVersionCombo.setVisible(hasVersions);
  if (hasVersions) {
    List<LanguageVersion> versions=new ArrayList<LanguageVersion>();
    versions.add(null);
    versions.addAll(language.getVersions());
    populate(minLanguageVersionCombo,versions);
    populate(maxLanguageVersionCombo,versions);
  }
}",0.896137339055794
21985,"private void populate(Combo field,List<LanguageVersion> versions){
  field.removeAll();
  for (  LanguageVersion version : versions) {
    field.add(version.getName());
  }
}","private void populate(Combo field,List<LanguageVersion> versions){
  field.removeAll();
  for (  LanguageVersion version : versions) {
    field.add(version == null ? ""String_Node_Str"" : version.getName());
  }
}",0.9015544041450776
21986,"public static String textValueOf(Collection<FilterHolder> holders,Accessor textAccessor){
  Set<String> values=new HashSet<String>();
  for (  FilterHolder fh : holders)   values.add(textAccessor.textValueFor(fh));
  return values.size() > 1 ? ""String_Node_Str"" : values.iterator().next();
}","public static String textValueOf(Collection<FilterHolder> holders,Accessor textAccessor){
  Set<String> values=new HashSet<String>();
  for (  FilterHolder fh : holders)   values.add(textAccessor.textValueFor(fh));
  return (values.size() == 1) ? values.iterator().next() : ""String_Node_Str"";
}",0.8991452991452992
21987,"public static Boolean boolValueOf(Collection<FilterHolder> holders,Accessor boolAccessor){
  Set<Boolean> values=new HashSet<Boolean>();
  for (  FilterHolder fh : holders)   values.add(boolAccessor.boolValueFor(fh));
  return values.size() == 2 ? null : values.iterator().next();
}","public static Boolean boolValueOf(Collection<FilterHolder> holders,Accessor boolAccessor){
  Set<Boolean> values=new HashSet<Boolean>();
  for (  FilterHolder fh : holders)   values.add(boolAccessor.boolValueFor(fh));
  int valueCount=values.size();
  return (valueCount == 2 || valueCount == 0) ? null : values.iterator().next();
}",0.8957654723127035
21988,"public Control newEditorOn(Composite parent,final PropertyDescriptor<?> desc,final PropertySource source,final ValueChangeListener listener,SizeChangeListener sizeListener){
  final FilePicker picker=new FilePicker(parent,SWT.SINGLE | SWT.BORDER,""String_Node_Str"",null);
  picker.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  fillWidget(picker,desc,source);
  final FileProperty fp=filePropertyFrom(desc);
  picker.addListener(SWT.FocusOut,new Listener(){
    public void handleEvent(    Event event){
      File newValue=picker.getFile();
      File existingValue=(File)valueFor(source,fp);
      if (areSemanticEquals(existingValue,newValue))       return;
      setValue(source,fp,newValue);
      fillWidget(picker,desc,source);
      listener.changed(source,desc,newValue);
    }
  }
);
  return picker;
}","public Control newEditorOn(Composite parent,final PropertyDescriptor<?> desc,final PropertySource source,final ValueChangeListener listener,SizeChangeListener sizeListener){
  final FilePicker picker=new FilePicker(parent,SWT.SINGLE | SWT.BORDER,""String_Node_Str"",null);
  picker.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  fillWidget(picker,desc,source);
  final FileProperty fp=filePropertyFrom(desc);
  picker.addFocusOutListener(new Listener(){
    public void handleEvent(    Event event){
      File newValue=picker.getFile();
      File existingValue=(File)valueFor(source,fp);
      if (areSemanticEquals(existingValue,newValue))       return;
      setValue(source,fp,newValue);
      fillWidget(picker,desc,source);
      listener.changed(source,desc,newValue);
    }
  }
);
  return picker;
}",0.9859499083689676
21989,"public File getFile(){
  String name=fileField.getText();
  if (StringUtil.isEmpty(name))   return null;
  File file=new File(name);
  return file.exists() ? file : null;
}","public File getFile(){
  String name=fileField.getText();
  return StringUtil.isEmpty(name) ? null : new File(name);
}",0.7586206896551724
21990,"private void openFileDialog(Shell shell){
  FileDialog fd=new FileDialog(shell,SWT.OPEN);
  fd.setText(dialogTitle);
  fd.setFilterPath(""String_Node_Str"");
  if (filterExtensions != null)   fd.setFilterExtensions(filterExtensions);
  String selected=fd.open();
  fileField.setText(selected == null ? ""String_Node_Str"" : selected);
}","private void openFileDialog(Shell shell){
  FileDialog fd=new FileDialog(shell,SWT.OPEN);
  fd.setText(dialogTitle);
  fd.setFilterPath(""String_Node_Str"");
  if (filterExtensions != null)   fd.setFilterExtensions(filterExtensions);
  String selected=fd.open();
  fileField.setText(selected == null ? ""String_Node_Str"" : selected);
  fileField.setFocus();
}",0.9651162790697676
21991,"private Renderer[] knownRenderers(){
  Properties props=new Properties();
  return new Renderer[]{new HTMLRenderer(props),new CSVRenderer(props),new XMLRenderer(props),new TextRenderer(props),new VBHTMLRenderer(props)};
}","private Renderer[] knownRenderers(){
  Properties props=new Properties();
  return new Renderer[]{new HTMLRenderer(props),new SummaryHTMLRenderer(props),new CSVRenderer(props),new XMLRenderer(props),new TextRenderer(props),new VBHTMLRenderer(props)};
}",0.93446088794926
21992,"public static String[] sourceLinesFrom(Match match,boolean trimLeadingWhitespace){
  final String text=match.getSourceCodeSlice().replaceAll(""String_Node_Str"",""String_Node_Str"");
  final StringTokenizer lines=new StringTokenizer(text,""String_Node_Str"");
  List<String> sourceLines=new ArrayList<String>();
  for (int i=0; lines.hasMoreTokens(); i++) {
    String line=lines.nextToken();
    sourceLines.add(line);
  }
  String[] lineArr=new String[sourceLines.size()];
  lineArr=sourceLines.toArray(lineArr);
  if (trimLeadingWhitespace) {
    int trimDepth=StringUtil.maxCommonLeadingWhitespaceForAll(lineArr);
    if (trimDepth > 0) {
      lineArr=StringUtil.trimStartOn(lineArr,trimDepth);
    }
  }
  return lineArr;
}","public static String[] sourceLinesFrom(Match match,boolean trimLeadingWhitespace){
  final String text=match.getSourceCodeSlice().replaceAll(""String_Node_Str"",TabEquivalent);
  final StringTokenizer lines=new StringTokenizer(text,""String_Node_Str"");
  List<String> sourceLines=new ArrayList<String>();
  for (int i=0; lines.hasMoreTokens(); i++) {
    String line=lines.nextToken();
    sourceLines.add(line);
  }
  String[] lineArr=new String[sourceLines.size()];
  lineArr=sourceLines.toArray(lineArr);
  if (trimLeadingWhitespace) {
    int trimDepth=StringUtil.maxCommonLeadingWhitespaceForAll(lineArr);
    if (trimDepth > 0) {
      lineArr=StringUtil.trimStartOn(lineArr,trimDepth);
    }
  }
  return lineArr;
}",0.8987517337031901
21993,"@Override public void createPartControl(Composite parent){
  int treeStyle=SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI| SWT.FULL_SELECTION;
  treeViewer=new TreeViewer(parent,treeStyle);
  treeViewer.setUseHashlookup(true);
  Tree tree=treeViewer.getTree();
  tree.addListener(SWT.Move,measureListener);
  tree.addListener(SWT.Resize,resizeListener);
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  addPainters(tree);
  treeViewer.setContentProvider(contentProvider);
  treeViewer.setLabelProvider(labelProvider);
  createColumns(tree);
  CPDViewTooltipListener2 tooltipListener=new CPDViewTooltipListener2(this);
  tree.addListener(SWT.MouseMove,tooltipListener);
  tree.addListener(SWT.MouseHover,tooltipListener);
  tree.addListener(SWT.MouseDown,tooltipListener);
  Display disp=tree.getDisplay();
  classColor=disp.getSystemColor(SWT.COLOR_BLUE);
  packageColor=disp.getSystemColor(SWT.COLOR_GRAY);
}","@Override public void createPartControl(Composite parent){
  int treeStyle=SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI| SWT.FULL_SELECTION;
  treeViewer=new TreeViewer(parent,treeStyle);
  treeViewer.setUseHashlookup(true);
  Tree tree=treeViewer.getTree();
  tree.addListener(SWT.Move,measureListener);
  tree.addListener(SWT.Resize,resizeListener);
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  addPainters(tree);
  treeViewer.setContentProvider(contentProvider);
  treeViewer.setLabelProvider(labelProvider);
  addDeleteListener(treeViewer.getControl());
  createColumns(tree);
  CPDViewTooltipListener2 tooltipListener=new CPDViewTooltipListener2(this);
  tree.addListener(SWT.MouseMove,tooltipListener);
  tree.addListener(SWT.MouseHover,tooltipListener);
  tree.addListener(SWT.MouseDown,tooltipListener);
  Display disp=tree.getDisplay();
  classColor=disp.getSystemColor(SWT.COLOR_BLUE);
  packageColor=disp.getSystemColor(SWT.COLOR_GRAY);
}",0.9755058572949948
21994,"private TokenEntry itemAt(TreeItem treeItem,Point location,GC gc){
  if (treeItem == null)   return null;
  Object item=((TreeNode)treeItem.getData()).getValue();
  String[] names=null;
  if (item instanceof Match) {
    names=CPDViewLabelProvider2.sourcesFor((Match)item);
  }
 else {
    return null;
  }
  location.x-=view.widthOf(0);
  int colWidth=view.widthOf(CPDView2.SourceColumnIdx);
  int cellWidth=colWidth / names.length;
  for (int i=0; i < names.length; i++) {
    int rightEdge=colWidth - (cellWidth * i);
    int[] widths=view.widthsFor(names[i]);
    int classWidth=widths[1];
    if (location.x > rightEdge - classWidth && location.x < rightEdge) {
      return CPDViewLabelProvider2.entriesFor((Match)item)[i];
    }
  }
  return null;
}","private TokenEntry itemAt(TreeItem treeItem,Point location,GC gc){
  if (treeItem == null)   return null;
  Object item=((TreeNode)treeItem.getData()).getValue();
  String[] names=null;
  if (item instanceof Match) {
    names=CPDViewLabelProvider2.sourcesFor((Match)item);
  }
 else {
    return null;
  }
  location.x-=view.widthOf(0);
  int colWidth=view.widthOf(CPDView2.SourceColumnIdx);
  int cellWidth=colWidth / names.length;
  for (int i=0; i < names.length; i++) {
    int rightEdge=colWidth - (cellWidth * i);
    int[] widths=view.widthsFor(names[i]);
    if (widths == null)     continue;
    int classWidth=widths[1];
    if (location.x > rightEdge - classWidth && location.x < rightEdge) {
      return CPDViewLabelProvider2.entriesFor((Match)item)[i];
    }
  }
  return null;
}",0.975483870967742
21995,"public String labelFor(Rule rule){
  List<String> types=new ArrayList<String>(3);
  if (rule.hasDescriptor(XPathRule.XPATH_DESCRIPTOR))   types.add(ruleTypeXPath[1]);
  if (rule.usesDFA())   types.add(ruleTypeDFlow[1]);
  if (rule.usesTypeResolution())   types.add(ruleTypeTypeRes[1]);
  if (types.isEmpty())   types.add(ruleTypeGeneric[1]);
  return Util.asString(types,""String_Node_Str"");
}","public String labelFor(Rule rule){
  return rule.getLanguage().getName();
}",0.2355460385438972
21996,"public void handleEvent(Event event){
  if (event.index != columnIndex)   return;
  Object value=valueFor((TreeItem)event.item,getter);
  if (value instanceof RuleCollection)   return;
  String text=String.valueOf(value);
  Point size=event.gc.textExtent(text);
  event.width=size.x + 2 * (3);
}","public void handleEvent(Event event){
  if (event.index != columnIndex)   return;
  String text=textFor((TreeItem)event.item,getter);
  Point size=event.gc.textExtent(text);
  event.width=size.x + 2 * (3);
}",0.7609561752988048
21997,"public void addPainterFor(final Tree tree,final int columnIndex,final RuleFieldAccessor getter,Map<Integer,List<Listener>> paintListeners){
  Listener paintListener=new Listener(){
    public void handleEvent(    Event event){
      if (event.index != columnIndex)       return;
      Object value=((TreeItem)event.item).getData();
      if (value instanceof RuleCollection)       return;
      GC gc=event.gc;
      int imgOffset=0;
      Rule rule=(Rule)value;
      gc.setFont(fontFor(tree,rule));
      imgOffset=rule.dysfunctionReason() != null ? ImgOffset : 0;
      value=valueFor((TreeItem)event.item,getter);
      String text=String.valueOf(value);
      int descent=gc.getFontMetrics().getDescent();
      gc.drawString(text,event.x + imgOffset,event.y + descent,true);
    }
  }
;
  Listener measureListener=new Listener(){
    public void handleEvent(    Event event){
      if (event.index != columnIndex)       return;
      Object value=valueFor((TreeItem)event.item,getter);
      if (value instanceof RuleCollection)       return;
      String text=String.valueOf(value);
      Point size=event.gc.textExtent(text);
      event.width=size.x + 2 * (3);
    }
  }
;
  Util.addListener(tree,SWT.PaintItem,paintListener,paintListeners);
  Util.addListener(tree,SWT.MeasureItem,measureListener,paintListeners);
}","public void addPainterFor(final Tree tree,final int columnIndex,final RuleFieldAccessor getter,Map<Integer,List<Listener>> paintListeners){
  Listener paintListener=new Listener(){
    public void handleEvent(    Event event){
      if (event.index != columnIndex)       return;
      Object value=((TreeItem)event.item).getData();
      if (value instanceof RuleCollection)       return;
      GC gc=event.gc;
      int imgOffset=0;
      Rule rule=(Rule)value;
      gc.setFont(fontFor(tree,rule));
      imgOffset=rule.dysfunctionReason() != null ? ImgOffset : 0;
      String text=textFor((TreeItem)event.item,getter);
      int descent=gc.getFontMetrics().getDescent();
      gc.drawString(text,event.x + imgOffset,event.y + descent,true);
    }
  }
;
  Listener measureListener=new Listener(){
    public void handleEvent(    Event event){
      if (event.index != columnIndex)       return;
      String text=textFor((TreeItem)event.item,getter);
      Point size=event.gc.textExtent(text);
      event.width=size.x + 2 * (3);
    }
  }
;
  Util.addListener(tree,SWT.PaintItem,paintListener,paintListeners);
  Util.addListener(tree,SWT.MeasureItem,measureListener,paintListeners);
}",0.9204455051710422
21998,"public Control newEditorOn(Composite parent,final PropertyDescriptor<?> desc,final Rule rule,final ValueChangeListener listener,SizeChangeListener sizeListener){
  final Button butt=new Button(parent,SWT.CHECK);
  butt.setText(""String_Node_Str"");
  final BooleanProperty bp=booleanPropertyFrom(desc);
  boolean set=((Boolean)valueFor(rule,desc)).booleanValue();
  butt.setSelection(set);
  butt.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      boolean selected=butt.getSelection();
      if (selected == (((Boolean)valueFor(rule,bp))).booleanValue())       return;
      rule.setProperty(bp,Boolean.valueOf(selected));
      listener.changed(rule,desc,Boolean.valueOf(selected));
      adjustRendering(rule,desc,butt);
    }
  }
);
  return butt;
}","public Control newEditorOn(Composite parent,final PropertyDescriptor<?> desc,final Rule rule,final ValueChangeListener listener,SizeChangeListener sizeListener){
  final Button butt=new Button(parent,SWT.CHECK);
  butt.setText(""String_Node_Str"");
  final BooleanProperty bp=booleanPropertyFrom(desc);
  boolean set=((Boolean)valueFor(rule,desc)).booleanValue();
  butt.setSelection(set);
  SelectionAdapter sa=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      boolean selected=butt.getSelection();
      if (selected == (((Boolean)valueFor(rule,bp))).booleanValue())       return;
      rule.setProperty(bp,Boolean.valueOf(selected));
      listener.changed(rule,desc,Boolean.valueOf(selected));
      adjustRendering(rule,desc,butt);
    }
  }
;
  butt.addSelectionListener(sa);
  return butt;
}",0.9524969549330086
21999,"/** 
 * Build the group of priority preferences
 * @param parent the parent composite
 * @return the group widget
 */
private Group buildPriorityGroup(final Composite parent){
  Group group=new Group(parent,SWT.SHADOW_IN);
  group.setText(getMessage(StringKeys.MSGKEY_PREF_GENERAL_GROUP_PRIORITIES));
  group.setLayout(new GridLayout(1,false));
  Link link=new Link(group,SWT.None);
  link.setText(""String_Node_Str"");
  link.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent se){
      System.out.println(""String_Node_Str"" + se.text);
    }
  }
);
  IStructuredContentProvider contentProvider=new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      return (RulePriority[])inputElement;
    }
  }
;
  PriorityTableLabelProvider labelProvider=new PriorityTableLabelProvider(PriorityColumnDescriptor.VisibleColumns);
  tableViewer=new TableViewer(group,SWT.BORDER | SWT.MULTI);
  Table table=tableViewer.getTable();
  table.setLayoutData(new GridData(GridData.BEGINNING,GridData.CENTER,true,true));
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setContentProvider(contentProvider);
  table.setHeaderVisible(true);
  labelProvider.addColumnsTo(table);
  tableViewer.setInput(UISettings.currentPriorities(true));
  TableColumn[] columns=table.getColumns();
  for (  TableColumn column : columns)   column.pack();
  GridData data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  table.setLayoutData(data);
  Composite editorPanel=new Composite(group,SWT.None);
  editorPanel.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,true));
  editorPanel.setLayout(new GridLayout(6,false));
  Label shapeLabel=new Label(editorPanel,SWT.None);
  shapeLabel.setLayoutData(new GridData());
  shapeLabel.setText(""String_Node_Str"");
  final ShapePicker<Shape> ssc=new ShapePicker<Shape>(editorPanel,SWT.None,14);
  ssc.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  ssc.setSize(280,30);
  ssc.setShapeMap(UISettings.shapeSet(SHAPE_COLOR,10));
  ssc.setItems(UISettings.allShapes());
  Label colourLabel=new Label(editorPanel,SWT.None);
  colourLabel.setLayoutData(new GridData());
  colourLabel.setText(""String_Node_Str"");
  final ColorSelector colorPicker=new ColorSelector(editorPanel);
  Label nameLabel=new Label(editorPanel,SWT.None);
  nameLabel.setLayoutData(new GridData());
  nameLabel.setText(""String_Node_Str"");
  final Text priorityName=new Text(editorPanel,SWT.BORDER);
  priorityName.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,true));
  final Label descLabel=new Label(editorPanel,SWT.None);
  descLabel.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,false,true,1,1));
  descLabel.setText(""String_Node_Str"");
  final Text priorityDesc=new Text(editorPanel,SWT.BORDER);
  priorityDesc.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,true,5,1));
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      selectedPriorities(selection.toList(),ssc,colorPicker,priorityName);
    }
  }
);
  ssc.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      setShape((Shape)selection.getFirstElement());
    }
  }
);
  colorPicker.addListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      setColor((RGB)event.getNewValue());
    }
  }
);
  priorityName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent me){
      setName(priorityName.getText());
    }
  }
);
  return group;
}","/** 
 * Build the group of priority preferences
 * @param parent the parent composite
 * @return the group widget
 */
private Group buildPriorityGroup(final Composite parent){
  Group group=new Group(parent,SWT.SHADOW_IN);
  group.setText(getMessage(StringKeys.MSGKEY_PREF_GENERAL_GROUP_PRIORITIES));
  group.setLayout(new GridLayout(1,false));
  Link link=new Link(group,SWT.None);
  link.setText(""String_Node_Str"");
  link.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent se){
      PreferenceDialog pref=PreferencesUtil.createPreferenceDialogOn(getShell(),""String_Node_Str"",new String[]{},null);
      if (pref != null) {
        pref.open();
      }
    }
  }
);
  IStructuredContentProvider contentProvider=new IStructuredContentProvider(){
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public Object[] getElements(    Object inputElement){
      return (RulePriority[])inputElement;
    }
  }
;
  PriorityTableLabelProvider labelProvider=new PriorityTableLabelProvider(PriorityColumnDescriptor.VisibleColumns);
  tableViewer=new TableViewer(group,SWT.BORDER | SWT.MULTI);
  Table table=tableViewer.getTable();
  table.setLayoutData(new GridData(GridData.BEGINNING,GridData.CENTER,true,true));
  tableViewer.setLabelProvider(labelProvider);
  tableViewer.setContentProvider(contentProvider);
  table.setHeaderVisible(true);
  labelProvider.addColumnsTo(table);
  tableViewer.setInput(UISettings.currentPriorities(true));
  TableColumn[] columns=table.getColumns();
  for (  TableColumn column : columns)   column.pack();
  GridData data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  table.setLayoutData(data);
  Composite editorPanel=new Composite(group,SWT.None);
  editorPanel.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,true));
  editorPanel.setLayout(new GridLayout(6,false));
  Label shapeLabel=new Label(editorPanel,SWT.None);
  shapeLabel.setLayoutData(new GridData());
  shapeLabel.setText(""String_Node_Str"");
  final ShapePicker<Shape> ssc=new ShapePicker<Shape>(editorPanel,SWT.None,14);
  ssc.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false,1,1));
  ssc.setSize(280,30);
  ssc.setShapeMap(UISettings.shapeSet(SHAPE_COLOR,10));
  ssc.setItems(UISettings.allShapes());
  Label colourLabel=new Label(editorPanel,SWT.None);
  colourLabel.setLayoutData(new GridData());
  colourLabel.setText(""String_Node_Str"");
  final ColorSelector colorPicker=new ColorSelector(editorPanel);
  Label nameLabel=new Label(editorPanel,SWT.None);
  nameLabel.setLayoutData(new GridData());
  nameLabel.setText(""String_Node_Str"");
  final Text priorityName=new Text(editorPanel,SWT.BORDER);
  priorityName.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,true));
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      selectedPriorities(selection.toList(),ssc,colorPicker,priorityName);
    }
  }
);
  ssc.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      setShape((Shape)selection.getFirstElement());
    }
  }
);
  colorPicker.addListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      setColor((RGB)event.getNewValue());
    }
  }
);
  priorityName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent me){
      setName(priorityName.getText());
    }
  }
);
  return group;
}",0.934403260731117
22000,"/** 
 * Build the group of review preferences
 * @param parent the parent composite
 * @return the group widget
 */
private Group buildReviewGroup(final Composite parent){
  Group group=new Group(parent,SWT.SHADOW_IN);
  group.setText(getMessage(StringKeys.MSGKEY_PREF_GENERAL_GROUP_REVIEW));
  group.setLayout(new GridLayout(1,false));
  this.reviewPmdStyleBox=buildReviewPmdStyleBoxButton(group);
  Label separator=new Label(group,SWT.SEPARATOR | SWT.SHADOW_IN | SWT.HORIZONTAL);
  buildLabel(group,StringKeys.MSGKEY_PREF_GENERAL_LABEL_ADDCOMMENT);
  this.additionalCommentText=buildAdditionalCommentText(group);
  buildLabel(group,StringKeys.MSGKEY_PREF_GENERAL_LABEL_SAMPLE);
  this.sampleLabel=buildSampleLabel(group);
  updateSampleLabel();
  GridData data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  this.reviewPmdStyleBox.setLayoutData(data);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  separator.setLayoutData(data);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  this.additionalCommentText.setLayoutData(data);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  sampleLabel.setLayoutData(data);
  return group;
}","/** 
 * Build the group of review preferences
 * @param parent the parent composite
 * @return the group widget
 */
private Group buildReviewGroup(final Composite parent){
  Group group=new Group(parent,SWT.SHADOW_IN);
  group.setText(getMessage(StringKeys.MSGKEY_PREF_GENERAL_GROUP_REVIEW));
  group.setLayout(new GridLayout(1,false));
  this.reviewPmdStyleBox=buildReviewPmdStyleBoxButton(group);
  Label separator=new Label(group,SWT.SEPARATOR | SWT.SHADOW_IN | SWT.HORIZONTAL);
  buildLabel(group,StringKeys.MSGKEY_PREF_GENERAL_LABEL_ADDCOMMENT);
  additionalCommentText=buildAdditionalCommentText(group);
  buildLabel(group,StringKeys.MSGKEY_PREF_GENERAL_LABEL_SAMPLE);
  sampleLabel=buildSampleLabel(group);
  updateSampleLabel();
  GridData data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  reviewPmdStyleBox.setLayoutData(data);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  separator.setLayoutData(data);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  additionalCommentText.setLayoutData(data);
  data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  sampleLabel.setLayoutData(data);
  return group;
}",0.992553983618764
