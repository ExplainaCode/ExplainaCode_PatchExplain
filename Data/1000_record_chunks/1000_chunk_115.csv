record_number,buggy_code,fixed_code,code_similarity
114001,"public TwitterDigitsHelper(Context context){
  this.context=context;
  initTwitterDigits();
}","public TwitterDigitsHelper(){
}",0.5
114002,"private void checkPermissions(){
  String[] permissionList=new String[2];
  permissionList[0]=Manifest.permission.RECORD_AUDIO;
  if (QBRTCTypes.QBConferenceType.QB_CONFERENCE_TYPE_VIDEO.equals(qbConferenceType)) {
    permissionList[1]=(Manifest.permission.CAMERA);
  }
  if (systemPermissionHelper.isAllPermissionGranted(permissionList)) {
    initCallFragment();
  }
 else {
    ActivityCompat.requestPermissions(this,permissionList,SystemPermissionHelper.PERMISSIONS_REQUEST);
  }
}","private void checkPermissions(){
  String[] permissionList=new String[2];
  permissionList[0]=Manifest.permission.RECORD_AUDIO;
  if (QBRTCTypes.QBConferenceType.QB_CONFERENCE_TYPE_VIDEO.equals(qbConferenceType)) {
    permissionList[1]=(Manifest.permission.CAMERA);
  }
  if (systemPermissionHelper.isAllPermissionGranted(permissionList)) {
    initCallFragment();
  }
 else {
    systemPermissionHelper.checkAndRequestPermissions(permissionList);
  }
}",0.9
114003,"private String[] collectDaniedPermissions(String... permissions){
  String[] daniedPermissions=new String[permissions.length];
  for (  String permission : permissions) {
    if (isPermissionDanied(permission)) {
      daniedPermissions[daniedPermissions.length - 1]=permission;
    }
  }
  return daniedPermissions;
}","private String[] collectDaniedPermissions(String... permissions){
  ArrayList<String> daniedPermissionsList=new ArrayList<>();
  for (  String permission : permissions) {
    if (isPermissionDanied(permission)) {
      daniedPermissionsList.add(permission);
    }
  }
  return daniedPermissionsList.toArray(new String[daniedPermissionsList.size()]);
}",0.2361733931240657
114004,"@Override public void onSessionClosed(final QBRTCSession session){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      Log.d(TAG,""String_Node_Str"" + session.getSessionID() + ""String_Node_Str"");
      if (session.equals(getCurrentSession())) {
        Fragment currentFragment=getCurrentFragment();
        if (isInComingCall) {
          stopIncomeCallTimer();
          if (currentFragment instanceof IncomingCallFragment) {
            removeFragment();
            finish();
          }
        }
        Log.d(TAG,""String_Node_Str"");
        if (qbCallChatHelper != null) {
          qbCallChatHelper.releaseCurrentSession(CallActivity.this,CallActivity.this);
        }
        stopTimer();
        closeByWifiStateAllow=true;
      }
    }
  }
);
}","@Override public void onSessionClosed(final QBRTCSession session){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      Log.d(TAG,""String_Node_Str"" + session.getSessionID() + ""String_Node_Str"");
      if (session.equals(getCurrentSession())) {
        Fragment currentFragment=getCurrentFragment();
        if (isInComingCall) {
          stopIncomeCallTimer();
          if (currentFragment instanceof IncomingCallFragment) {
            removeFragment();
            finish();
          }
        }
        Log.d(TAG,""String_Node_Str"");
        if (qbCallChatHelper != null) {
          qbCallChatHelper.releaseCurrentSession(CallActivity.this,CallActivity.this);
        }
        stopTimer();
        closeByWifiStateAllow=true;
        finish();
      }
    }
  }
);
}",0.9884910485933504
114005,"public void parseChatMessage(Bundle extras){
  if (extras.getString(ChatNotificationHelper.MESSAGE) != null) {
    message=extras.getString(ChatNotificationHelper.MESSAGE);
  }
  if (extras.getString(ChatNotificationHelper.USER_ID) != null) {
    userId=Integer.parseInt(extras.getString(ChatNotificationHelper.USER_ID));
  }
  if (extras.getString(ChatNotificationHelper.DIALOG_ID) != null) {
    dialogId=extras.getString(ChatNotificationHelper.DIALOG_ID);
  }
  if (SystemUtils.isAppRunningNow()) {
    return;
  }
  boolean chatPush=userId != 0 && !TextUtils.isEmpty(dialogId);
  if (chatPush) {
    saveOpeningDialogData(userId,dialogId);
    if (AppSession.getSession().getUser() != null && !isLoginNow) {
      isLoginNow=true;
      LoginHelper loginHelper=new LoginHelper(context);
      loginHelper.makeGeneralLogin(new GlobalLoginListener());
      return;
    }
  }
  saveOpeningDialog(false);
}","public void parseChatMessage(Bundle extras){
  if (extras.getString(ChatNotificationHelper.MESSAGE) != null) {
    message=extras.getString(ChatNotificationHelper.MESSAGE);
  }
  if (extras.getString(ChatNotificationHelper.USER_ID) != null) {
    userId=Integer.parseInt(extras.getString(ChatNotificationHelper.USER_ID));
  }
  if (extras.getString(ChatNotificationHelper.DIALOG_ID) != null) {
    dialogId=extras.getString(ChatNotificationHelper.DIALOG_ID);
  }
  if (SystemUtils.isAppRunningNow()) {
    return;
  }
  boolean chatPush=userId != 0 && !TextUtils.isEmpty(dialogId);
  if (chatPush) {
    saveOpeningDialogData(userId,dialogId);
    if (AppSession.getSession().getUser() != null && !isLoginNow) {
      isLoginNow=true;
      LoginHelper loginHelper=new LoginHelper(context);
      loginHelper.makeGeneralLogin(new GlobalLoginListener());
      return;
    }
  }
 else {
    sendNotification(message);
  }
  saveOpeningDialog(false);
}",0.9768443726440496
114006,"@Override public Bundle perform(Bundle extras) throws Exception {
  String socialProvider=(String)extras.getSerializable(QBServiceConsts.EXTRA_SOCIAL_PROVIDER);
  String accessToken=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN);
  String accessTokenSecret=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN_SECRET);
  QBUser user=authHelper.login(socialProvider,accessToken,accessTokenSecret);
  if (user.getCustomData() == null) {
    CoreSharedHelper.getInstance().saveUsersImportInitialized(false);
    extras.putSerializable(QBServiceConsts.AUTH_ACTION_TYPE,QBServiceConsts.AUTH_TYPE_REGISTRATION);
    extras.putSerializable(QBServiceConsts.EXTRA_USER,getUserWithAvatar(user));
  }
 else {
    CoreSharedHelper.getInstance().saveUsersImportInitialized(true);
    extras.putSerializable(QBServiceConsts.AUTH_ACTION_TYPE,QBServiceConsts.AUTH_TYPE_LOGIN);
    extras.putSerializable(QBServiceConsts.EXTRA_USER,user);
  }
  return extras;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  String socialProvider=(String)extras.getSerializable(QBServiceConsts.EXTRA_SOCIAL_PROVIDER);
  String accessToken=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN);
  String accessTokenSecret=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN_SECRET);
  QBUser user=authHelper.login(socialProvider,accessToken,accessTokenSecret);
  UserCustomData userCustomData=Utils.customDataToObject(user.getCustomData());
  if (TextUtils.isEmpty(userCustomData.getAvatar_url())) {
    CoreSharedHelper.getInstance().saveUsersImportInitialized(false);
    extras.putSerializable(QBServiceConsts.AUTH_ACTION_TYPE,QBServiceConsts.AUTH_TYPE_REGISTRATION);
    extras.putSerializable(QBServiceConsts.EXTRA_USER,getUserWithAvatar(user));
  }
 else {
    CoreSharedHelper.getInstance().saveUsersImportInitialized(true);
    extras.putSerializable(QBServiceConsts.AUTH_ACTION_TYPE,QBServiceConsts.AUTH_TYPE_LOGIN);
    extras.putSerializable(QBServiceConsts.EXTRA_USER,user);
  }
  return extras;
}",0.9304136253041364
114007,"private QBUser getUserWithAvatar(QBUser user){
  String avatarUrl=context.getString(R.string.url_to_facebook_avatar,user.getFacebookId());
  QBUser newUser=new QBUser();
  newUser.setId(user.getId());
  newUser.setPassword(user.getPassword());
  newUser.setCustomData(Utils.customDataToString(getUserCustomData(avatarUrl)));
  return newUser;
}","private QBUser getUserWithAvatar(QBUser user){
  String avatarUrl=context.getString(R.string.url_to_facebook_avatar,user.getFacebookId());
  user.setCustomData(Utils.customDataToString(getUserCustomData(avatarUrl)));
  return user;
}",0.8006932409012132
114008,"private void closeChatLocally(){
  if (baseChatHelper != null) {
    baseChatHelper.closeChat(ChatUtils.createQBDialogFromLocalDialog(dataManager,dialog),generateBundleToInitDialog());
  }
  dialog=null;
}","private void closeChatLocally(){
  if (baseChatHelper != null && dialog != null) {
    baseChatHelper.closeChat(ChatUtils.createQBDialogFromLocalDialog(dataManager,dialog),generateBundleToInitDialog());
  }
  dialog=null;
}",0.9579439252336448
114009,"private void initFields(){
  chatHelperIdentifier=QBService.GROUP_CHAT_HELPER;
  dialog=(Dialog)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG);
  combinationMessagesList=createCombinationMessagesList();
  title=dialog.getTitle();
}","private void initFields(){
  chatHelperIdentifier=QBService.GROUP_CHAT_HELPER;
  dialog=(Dialog)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG);
  combinationMessagesList=createCombinationMessagesList();
  if (dialog != null)   title=dialog.getTitle();
}",0.958490566037736
114010,"@Override protected void updateActionBar(){
  if (isNetworkAvailable()) {
    setActionBarTitle(dialog.getTitle());
    checkActionBarLogo(dialog.getPhoto(),R.drawable.placeholder_group);
  }
}","@Override protected void updateActionBar(){
  if (isNetworkAvailable() && dialog != null) {
    setActionBarTitle(dialog.getTitle());
    checkActionBarLogo(dialog.getPhoto(),R.drawable.placeholder_group);
  }
}",0.9554455445544554
114011,"private void checkImportFriends(){
  if (!appSharedHelper.isUsersImportInitialized()) {
    showProgress();
    importFriendsHelper=new ImportFriendsHelper(MainActivity.this,facebookHelper);
  }
}","private void checkImportFriends(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (!appSharedHelper.isUsersImportInitialized()) {
    showProgress();
    importFriendsHelper=new ImportFriendsHelper(MainActivity.this,facebookHelper);
  }
}",0.8949771689497716
114012,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (facebookHelper != null && resultCode != Activity.RESULT_CANCELED) {
    facebookHelper.onActivityResult(requestCode,resultCode,data);
  }
 else {
    FacebookHelper.logout();
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (facebookHelper != null) {
    facebookHelper.onActivityResult(requestCode,resultCode,data);
  }
 else {
  }
}",0.8773747841105354
114013,"@Override public void call(Session session,SessionState state,Exception exception){
  if (session.isOpened()) {
    importFriendsHelper.startGetFriendsListTask(true);
  }
 else   if (!session.isClosed() && !appSharedHelper.isUsersImportInitialized()) {
    importFriendsHelper.startGetFriendsListTask(false);
    hideProgress();
  }
}","@Override public void call(Session session,SessionState state,Exception exception){
  if (session.isOpened()) {
    importFriendsHelper.startGetFriendsListTask(true);
  }
 else   if (!session.isClosed() && !appSharedHelper.isUsersImportInitialized()) {
    importFriendsHelper.startGetFriendsListTask(false);
    appSharedHelper.saveUsersImportInitialized(true);
    hideProgress();
  }
}",0.925207756232687
114014,"@OnItemClick(R.id.chats_listview) void startChat(int position){
  Dialog dialog=dialogsListAdapter.getItem(position);
  if (dialog.getType() == Dialog.Type.PRIVATE) {
    startPrivateChatActivity(dialog);
  }
 else {
    startGroupChatActivity(dialog);
  }
}","@OnItemClick(R.id.chats_listview) void startChat(int position){
  Dialog dialog=dialogsListAdapter.getItem(position);
  if (!baseActivity.checkNetworkAvailableWithError() && isFirstOpeningDialog(dialog.getDialogId())) {
    return;
  }
  if (dialog.getType() == Dialog.Type.PRIVATE) {
    startPrivateChatActivity(dialog);
  }
 else {
    startGroupChatActivity(dialog);
  }
}",0.8138801261829653
114015,"private void startPrivateChatActivity(Dialog dialog){
  List<DialogOccupant> occupantsList=dataManager.getDialogOccupantDataManager().getDialogOccupantsListByDialogId(dialog.getDialogId());
  User occupant=ChatUtils.getOpponentFromPrivateDialog(UserFriendUtils.createLocalUser(qbUser),occupantsList);
  boolean isFirstOpenDialog=!dataManager.getMessageDataManager().getTempMessagesByDialogId(dialog.getDialogId()).isEmpty();
  if (!TextUtils.isEmpty(dialog.getDialogId())) {
    if (!baseActivity.checkNetworkAvailableWithError() && isFirstOpenDialog) {
      return;
    }
    PrivateDialogActivity.start(baseActivity,occupant,dialog);
  }
}","private void startPrivateChatActivity(Dialog dialog){
  List<DialogOccupant> occupantsList=dataManager.getDialogOccupantDataManager().getDialogOccupantsListByDialogId(dialog.getDialogId());
  User opponent=ChatUtils.getOpponentFromPrivateDialog(UserFriendUtils.createLocalUser(qbUser),occupantsList);
  if (!TextUtils.isEmpty(dialog.getDialogId())) {
    PrivateDialogActivity.start(baseActivity,opponent,dialog);
  }
}",0.7502356267672008
114016,"private void rejectUser(final int userId){
  showRejectUserDialog(userId);
}","private void rejectUser(final int userId){
  if (isNetworkAvailable()) {
    if (!isChatInitializedAndUserLoggedIn()) {
      ToastUtils.longToast(R.string.call_chat_service_is_initializing);
      return;
    }
    showRejectUserDialog(userId);
  }
 else {
    ToastUtils.longToast(R.string.dlg_fail_connection);
    return;
  }
}",0.3734643734643734
114017,"private void acceptUser(final int userId){
  showProgress();
  QBAcceptFriendCommand.start(this,userId);
}","private void acceptUser(final int userId){
  if (isNetworkAvailable()) {
    if (!isChatInitializedAndUserLoggedIn()) {
      ToastUtils.longToast(R.string.call_chat_service_is_initializing);
      return;
    }
    showProgress();
    QBAcceptFriendCommand.start(this,userId);
  }
 else {
    ToastUtils.longToast(R.string.dlg_fail_connection);
    return;
  }
}",0.4520255863539446
114018,"private void startPrivateChatActivity(Dialog dialog){
  List<DialogOccupant> occupantsList=dataManager.getDialogOccupantDataManager().getDialogOccupantsListByDialogId(dialog.getDialogId());
  User occupant=ChatUtils.getOpponentFromPrivateDialog(UserFriendUtils.createLocalUser(qbUser),occupantsList);
  if (!TextUtils.isEmpty(dialog.getDialogId())) {
    PrivateDialogActivity.start(baseActivity,occupant,dialog);
  }
}","private void startPrivateChatActivity(Dialog dialog){
  List<DialogOccupant> occupantsList=dataManager.getDialogOccupantDataManager().getDialogOccupantsListByDialogId(dialog.getDialogId());
  User occupant=ChatUtils.getOpponentFromPrivateDialog(UserFriendUtils.createLocalUser(qbUser),occupantsList);
  boolean isFirstOpenDialog=!dataManager.getMessageDataManager().getTempMessagesByDialogId(dialog.getDialogId()).isEmpty();
  if (!TextUtils.isEmpty(dialog.getDialogId())) {
    if (!baseActivity.checkNetworkAvailableWithError() && isFirstOpenDialog) {
      return;
    }
    PrivateDialogActivity.start(baseActivity,occupant,dialog);
  }
}",0.7898209236569275
114019,"private void addToFriendList(final int userId){
  baseActivity.showProgress();
  QBAddFriendCommand.start(baseActivity,userId);
  KeyboardUtils.hideKeyboard(baseActivity);
}","private void addToFriendList(final int userId){
  if (!baseActivity.checkNetworkAvailableWithError()) {
    return;
  }
  baseActivity.showProgress();
  QBAddFriendCommand.start(baseActivity,userId);
  KeyboardUtils.hideKeyboard(baseActivity);
}",0.8277511961722488
114020,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (facebookHelper != null) {
    facebookHelper.onActivityResult(requestCode,resultCode,data);
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (facebookHelper != null && resultCode != Activity.RESULT_CANCELED) {
    facebookHelper.onActivityResult(requestCode,resultCode,data);
  }
 else {
    FacebookHelper.logout();
  }
}",0.8536155202821869
114021,"public void loginWithFacebook(){
  Session currentSession=Session.getActiveSession();
  if (currentSession == null || currentSession.getState().isClosed()) {
    Session session=new Session.Builder(activity).build();
    Session.setActiveSession(session);
    currentSession=session;
  }
  if (currentSession.isOpened()) {
    Session.openActiveSession(activity,true,facebookStatusCallback);
  }
 else {
    Session.OpenRequest openRequest=new Session.OpenRequest(activity);
    openRequest.setLoginBehavior(SessionLoginBehavior.SUPPRESS_SSO);
    openRequest.setCallback(facebookStatusCallback);
    List<String> permissionsList=generatePermissionsList();
    openRequest.setPermissions(permissionsList);
    Session session=new Session.Builder(activity).build();
    Session.setActiveSession(session);
    session.openForPublish(openRequest);
  }
}","public void loginWithFacebook(){
  Session currentSession=Session.getActiveSession();
  if (currentSession == null || currentSession.getState().isClosed()) {
    Session session=new Session.Builder(activity).build();
    Session.setActiveSession(session);
    currentSession=session;
  }
  if (currentSession.isOpened()) {
    Session.openActiveSession(activity,true,facebookStatusCallback);
  }
 else {
    Session.OpenRequest openRequest=new Session.OpenRequest(activity);
    openRequest.setCallback(facebookStatusCallback);
    List<String> permissionsList=generatePermissionsList();
    openRequest.setPermissions(permissionsList);
    Session session=new Session.Builder(activity).build();
    Session.setActiveSession(session);
    session.openForPublish(openRequest);
  }
}",0.9576946658491724
114022,"private void initFields(Bundle savedInstanceState){
  title=""String_Node_Str"" + AppSession.getSession().getUser().getFullName();
  gsmHelper=new GSMHelper(this);
  importFriendsSuccessAction=new ImportFriendsSuccessAction();
  importFriendsFailAction=new ImportFriendsFailAction();
  if (!appSharedHelper.isUsersImportInitialized()) {
    showProgress();
    facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
    importFriendsHelper=new ImportFriendsHelper(MainActivity.this,facebookHelper);
  }
}","private void initFields(Bundle savedInstanceState){
  title=""String_Node_Str"" + AppSession.getSession().getUser().getFullName();
  gsmHelper=new GSMHelper(this);
  importFriendsSuccessAction=new ImportFriendsSuccessAction();
  importFriendsFailAction=new ImportFriendsFailAction();
  facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
}",0.8246753246753247
114023,"private void removeActions(){
  removeAction(QBServiceConsts.IMPORT_FRIENDS_SUCCESS_ACTION);
  removeAction(QBServiceConsts.IMPORT_FRIENDS_FAIL_ACTION);
  removeAction(QBServiceConsts.LOGIN_CHAT_COMPOSITE_SUCCESS_ACTION);
  removeAction(QBServiceConsts.LOAD_CHATS_DIALOGS_SUCCESS_ACTION);
  updateBroadcastActionList();
}","private void removeActions(){
  removeAction(QBServiceConsts.IMPORT_FRIENDS_SUCCESS_ACTION);
  removeAction(QBServiceConsts.IMPORT_FRIENDS_FAIL_ACTION);
  updateBroadcastActionList();
}",0.7312252964426877
114024,"private void deleteDialog(Dialog dialog){
  if (Dialog.Type.GROUP.equals(dialog.getType())) {
    if (groupChatHelper != null) {
      try {
        List<Integer> occupantsIdsList=new ArrayList<>();
        occupantsIdsList.add(qbUser.getId());
        groupChatHelper.sendGroupMessageToFriends(ChatUtils.createQBDialogFromLocalDialog(dataManager,dialog),DialogNotification.Type.OCCUPANTS_DIALOG,occupantsIdsList,true);
        DbUtils.deleteDialogLocal(dataManager,dialog.getDialogId());
      }
 catch (      QBResponseException e) {
        ErrorUtils.logError(e);
      }
    }
  }
  QBDeleteChatCommand.start(baseActivity,dialog.getDialogId(),dialog.getType());
}","private void deleteDialog(Dialog dialog){
  if (Dialog.Type.GROUP.equals(dialog.getType())) {
    if (groupChatHelper != null) {
      try {
        QBDialog localDialog=ChatUtils.createQBDialogFromLocalDialogWithoutLeaved(dataManager,dataManager.getDialogDataManager().getByDialogId(dialog.getDialogId()));
        List<Integer> occupantsIdsList=new ArrayList<>();
        occupantsIdsList.add(qbUser.getId());
        groupChatHelper.sendGroupMessageToFriends(localDialog,DialogNotification.Type.OCCUPANTS_DIALOG,occupantsIdsList,true);
        DbUtils.deleteDialogLocal(dataManager,dialog.getDialogId());
      }
 catch (      QBResponseException e) {
        ErrorUtils.logError(e);
      }
    }
  }
  QBDeleteChatCommand.start(baseActivity,dialog.getDialogId(),dialog.getType());
}",0.8371134020618557
114025,"private void startTimer(){
  if (!isStarted) {
    timerChronometer.setBase(SystemClock.elapsedRealtime());
    timerChronometer.start();
    isStarted=true;
  }
}","public void startTimer(){
  if (!isStarted) {
    timerChronometer.setVisibility(View.VISIBLE);
    timerChronometer.setBase(SystemClock.elapsedRealtime());
    timerChronometer.start();
    isStarted=true;
  }
}",0.832
114026,"@Override protected void onDestroy(){
  super.onDestroy();
  opponentsList=null;
}","@Override protected void onDestroy(){
  super.onDestroy();
  opponentsList=null;
  if (qbCallChatHelper != null) {
    qbCallChatHelper.releaseCurrentSession(CallActivity.this,CallActivity.this);
  }
}",0.5795053003533569
114027,"private void callToUser(User user,QBRTCTypes.QBConferenceType qbConferenceType){
  List<QBUser> qbUserList=new ArrayList<>(1);
  qbUserList.add(UserFriendUtils.createQbUser(user));
  CallActivity.start(PrivateDialogActivity.this,qbUserList,qbConferenceType,null);
}","private void callToUser(User user,QBRTCTypes.QBConferenceType qbConferenceType){
  if (!isChatInitializedAndUserLoggedIn()) {
    ToastUtils.longToast(R.string.call_chat_service_is_initializing);
    return;
  }
  List<QBUser> qbUserList=new ArrayList<>(1);
  qbUserList.add(UserFriendUtils.createQbUser(user));
  CallActivity.start(PrivateDialogActivity.this,qbUserList,qbConferenceType,null);
}",0.8018154311649016
114028,"private void callToUser(QBRTCTypes.QBConferenceType qbConferenceType){
  List<QBUser> qbUserList=new ArrayList<>(1);
  qbUserList.add(UserFriendUtils.createQbUser(user));
  CallActivity.start(this,qbUserList,qbConferenceType,null);
}","private void callToUser(QBRTCTypes.QBConferenceType qbConferenceType){
  if (!isChatInitializedAndUserLoggedIn()) {
    ToastUtils.longToast(R.string.call_chat_service_is_initializing);
    return;
  }
  List<QBUser> qbUserList=new ArrayList<>(1);
  qbUserList.add(UserFriendUtils.createQbUser(user));
  CallActivity.start(this,qbUserList,qbConferenceType,null);
}",0.7805695142378559
114029,"private void accept(){
  takeBtn.setClickable(false);
  stopCallNotification();
  ((CallActivity)getActivity()).addConversationFragmentReceiveCall();
  Log.d(TAG,""String_Node_Str"");
}","private void accept(){
  takeBtn.setClickable(false);
  stopCallNotification();
  ((CallActivity)getActivity()).addConversationFragmentReceiveCall();
  ((CallActivity)getActivity()).startTimer();
  Log.d(TAG,""String_Node_Str"");
}",0.8883495145631068
114030,"public void rejectCurrentSession(){
  if (qbCallChatHelper != null && qbCallChatHelper.getCurrentRtcSession() != null) {
    qbCallChatHelper.getCurrentRtcSession().rejectCall(new HashMap<String,String>());
  }
}","public void rejectCurrentSession(){
  if (qbCallChatHelper != null && qbCallChatHelper.getCurrentRtcSession() != null) {
    qbCallChatHelper.getCurrentRtcSession().rejectCall(new HashMap<String,String>());
  }
  finish();
}",0.9724770642201837
114031,"@Override public void onSessionClosed(final QBRTCSession session){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      Log.d(TAG,""String_Node_Str"" + session.getSessionID() + ""String_Node_Str"");
      if (session.equals(getCurrentSession())) {
        Fragment currentFragment=getCurrentFragment();
        if (isInComingCall) {
          stopIncomeCallTimer();
          if (currentFragment instanceof IncomingCallFragment) {
            removeFragment();
          }
        }
        Log.d(TAG,""String_Node_Str"");
        if (qbCallChatHelper != null) {
          qbCallChatHelper.releaseCurrentSession(CallActivity.this,CallActivity.this);
        }
        stopTimer();
        closeByWifiStateAllow=true;
      }
    }
  }
);
}","@Override public void onSessionClosed(final QBRTCSession session){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      Log.d(TAG,""String_Node_Str"" + session.getSessionID() + ""String_Node_Str"");
      if (session.equals(getCurrentSession())) {
        Fragment currentFragment=getCurrentFragment();
        if (isInComingCall) {
          stopIncomeCallTimer();
          if (currentFragment instanceof IncomingCallFragment) {
            removeFragment();
            finish();
          }
        }
        Log.d(TAG,""String_Node_Str"");
        if (qbCallChatHelper != null) {
          qbCallChatHelper.releaseCurrentSession(CallActivity.this,CallActivity.this);
        }
        stopTimer();
        closeByWifiStateAllow=true;
      }
    }
  }
);
}",0.9855643044619422
114032,"@Override public void onConnectionClosedForUser(QBRTCSession session,Integer userID){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      Intent returnIntent=new Intent();
      setResult(CALL_ACTIVITY_CLOSE_WIFI_DISABLED,returnIntent);
      finish();
    }
  }
);
}","@Override public void onConnectionClosedForUser(QBRTCSession session,Integer userID){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (hangUpReason != null && hangUpReason.equals(QBServiceConsts.EXTRA_WIFI_DISABLED)) {
        Intent returnIntent=new Intent();
        setResult(CALL_ACTIVITY_CLOSE_WIFI_DISABLED,returnIntent);
      }
      finish();
    }
  }
);
}",0.7876106194690266
114033,"public void hangUpCurrentSession(){
  ringtonePlayer.stop();
  if (qbCallChatHelper != null && qbCallChatHelper.getCurrentRtcSession() != null) {
    qbCallChatHelper.getCurrentRtcSession().hangUp(new HashMap<String,String>());
  }
}","public void hangUpCurrentSession(){
  ringtonePlayer.stop();
  if (qbCallChatHelper != null && qbCallChatHelper.getCurrentRtcSession() != null) {
    qbCallChatHelper.getCurrentRtcSession().hangUp(new HashMap<String,String>());
  }
  finish();
}",0.9748953974895398
114034,"private void readAllMessages(){
  List<Message> messagesList=dataManager.getMessageDataManager().getMessagesByDialogId(dialog.getDialogId());
  dataManager.getMessageDataManager().createOrUpdateAll(ChatUtils.readAllMessages(messagesList,AppSession.getSession().getUser()));
  List<DialogNotification> dialogNotificationsList=dataManager.getDialogNotificationDataManager().getDialogNotificationsByDialogId(dialog.getDialogId());
  dataManager.getDialogNotificationDataManager().createOrUpdateAll(ChatUtils.readAllDialogNotification(dialogNotificationsList,AppSession.getSession().getUser()));
}","private void readAllMessages(){
  if (dialog != null) {
    List<Message> messagesList=dataManager.getMessageDataManager().getMessagesByDialogId(dialog.getDialogId());
    dataManager.getMessageDataManager().createOrUpdateAll(ChatUtils.readAllMessages(messagesList,AppSession.getSession().getUser()));
    List<DialogNotification> dialogNotificationsList=dataManager.getDialogNotificationDataManager().getDialogNotificationsByDialogId(dialog.getDialogId());
    dataManager.getDialogNotificationDataManager().createOrUpdateAll(ChatUtils.readAllDialogNotification(dialogNotificationsList,AppSession.getSession().getUser()));
  }
}",0.9705400981996728
114035,"@Override protected void onResume(){
  super.onResume();
  if (isNetworkAvailable()) {
    startLoadDialogMessages();
  }
  checkMessageSendingPossibility();
}","@Override protected void onResume(){
  super.onResume();
  checkForCorrectChat();
  if (isNetworkAvailable()) {
    startLoadDialogMessages();
  }
  checkMessageSendingPossibility();
}",0.9271137026239068
114036,"@OnClick(R.id.video_call_button) void videoCall(View view){
  ErrorUtils.showError(this,getString(R.string.coming_soon));
}","@OnClick(R.id.video_call_button) void videoCall(View view){
  callToUser(QBRTCTypes.QBConferenceType.QB_CONFERENCE_TYPE_VIDEO);
}",0.5634920634920635
114037,"@OnClick(R.id.audio_call_button) void audioCall(View view){
  ErrorUtils.showError(this,getString(R.string.coming_soon));
}","@OnClick(R.id.audio_call_button) void audioCall(View view){
  callToUser(QBRTCTypes.QBConferenceType.QB_CONFERENCE_TYPE_AUDIO);
}",0.5634920634920635
114038,"private void reject(){
  rejectBtn.setClickable(false);
  Log.d(TAG,""String_Node_Str"");
  stopCallNotification();
  ((CallActivity)getActivity()).rejectCurrentSession();
  getActivity().finish();
}","private void reject(){
  rejectBtn.setClickable(false);
  Log.d(TAG,""String_Node_Str"");
  stopCallNotification();
  ((CallActivity)getActivity()).rejectCurrentSession();
}",0.9293478260869564
114039,"@Override public void initActionBar(){
  super.initActionBar();
  actionBarBridge.setActionBarUpButtonEnabled(false);
  checkVisibilityUserIcon();
}","@Override public void initActionBar(){
  super.initActionBar();
  actionBarBridge.setActionBarUpButtonEnabled(false);
  checkVisibilityUserIcon();
  loadingBridge.hideActionBarProgress();
}",0.8783382789317508
114040,"protected void parseExceptionMessage(Exception exception){
  hideProgress();
  String errorMessage=exception.getMessage();
  if (errorMessage != null) {
    if (errorMessage.equals(getString(R.string.error_bad_timestamp))) {
      errorMessage=getString(R.string.error_bad_timestamp_from_app);
    }
 else     if (errorMessage.equals(getString(R.string.error_login_or_email_required))) {
      errorMessage=getString(R.string.error_login_or_email_required_from_app);
    }
 else     if (errorMessage.equals(getString(R.string.error_email_already_taken)) && loginType.equals(LoginType.FACEBOOK)) {
      errorMessage=getString(R.string.error_email_already_taken_from_app);
    }
    ErrorUtils.showError(this,errorMessage);
  }
}","protected void parseExceptionMessage(Exception exception){
  hideProgress();
  String errorMessage=exception.getMessage();
  if (errorMessage != null) {
    if (errorMessage.equals(getString(R.string.error_bad_timestamp))) {
      errorMessage=getString(R.string.error_bad_timestamp_from_app);
    }
 else     if (errorMessage.equals(getString(R.string.error_login_or_email_required))) {
      errorMessage=getString(R.string.error_login_or_email_required_from_app);
    }
 else     if (errorMessage.equals(getString(R.string.error_email_already_taken)) && loginType.equals(LoginType.FACEBOOK)) {
      errorMessage=getString(R.string.error_email_already_taken_from_app);
    }
 else     if (errorMessage.equals(getString(R.string.error_unauthorized))) {
      errorMessage=getString(R.string.error_unauthorized_from_app);
    }
    ErrorUtils.showError(this,errorMessage);
  }
}",0.9060360920970753
114041,"private void initFields(){
  dataManager=DataManager.getInstance();
  String dialogId=(String)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG_ID);
  qbDialog=ChatUtils.createQBDialogFromLocalDialog(dataManager,dataManager.getDialogDataManager().getByDialogId(dialogId));
  imageUtils=new ImageUtils(this);
  friendOperationAction=new UserOperationAction();
  currentNotificationTypeList=new ArrayList<>();
  updatingDialogDetailsBroadcastReceiver=new UpdatingDialogDetailsBroadcastReceiver();
  occupantsList=dataManager.getUserDataManager().getUsersForGroupChat(qbDialog.getOccupants());
}","private void initFields(){
  dataManager=DataManager.getInstance();
  String dialogId=(String)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG_ID);
  qbDialog=ChatUtils.createQBDialogFromLocalDialog(dataManager,dataManager.getDialogDataManager().getByDialogId(dialogId));
  imageUtils=new ImageUtils(this);
  friendOperationAction=new UserOperationAction();
  currentNotificationTypeList=new ArrayList<>();
  updatingDialogDetailsBroadcastReceiver=new UpdatingDialogDetailsBroadcastReceiver();
  occupantsList=dataManager.getUserDataManager().getUsersForGroupChat(qbDialog.getDialogId(),qbDialog.getOccupants());
}",0.9815261044176706
114042,"protected void showUserAgreement(DialogInterface.OnClickListener positiveClickListener,DialogInterface.OnClickListener negativeClickListener){
  if (userAgreementDialog == null) {
    userAgreementDialog=UserAgreementDialog.newInstance(positiveClickListener,negativeClickListener);
  }
  userAgreementDialog.show(getFragmentManager(),null);
}","protected void showUserAgreement(DialogInterface.OnClickListener positiveClickListener,DialogInterface.OnClickListener negativeClickListener){
  UserAgreementDialog userAgreementDialog=UserAgreementDialog.newInstance(positiveClickListener,negativeClickListener);
  userAgreementDialog.show(getFragmentManager(),null);
}",0.907715582450832
114043,"protected void showContactRequestNotification(Bundle extras){
  int senderUserId=extras.getInt(QBServiceConsts.EXTRA_USER_ID);
  senderUser=UsersDatabaseManager.getUserById(activity,senderUserId);
  String message=extras.getString(QBServiceConsts.EXTRA_MESSAGE);
  String dialogId=ChatDatabaseManager.getPrivateDialogIdByOpponentId(activity,senderUserId);
  isPrivateMessage=true;
  if (isMessagesDialogCorrect(dialogId)) {
    showNewMessageAlert(senderUser,message);
  }
}","protected void showContactRequestNotification(Bundle extras){
  int senderUserId=extras.getInt(QBServiceConsts.EXTRA_USER_ID);
  senderUser=UsersDatabaseManager.getUserById(activity,senderUserId);
  String message=extras.getString(QBServiceConsts.EXTRA_MESSAGE);
  String dialogId=ChatDatabaseManager.getPrivateDialogIdByOpponentId(activity,senderUserId);
  isPrivateMessage=true;
  if (isMessagesDialogCorrect(dialogId) && senderUser != null) {
    showNewMessageAlert(senderUser,message);
  }
}",0.977319587628866
114044,"protected void showChatMessageNotification(Bundle extras){
  senderUser=(User)extras.getSerializable(QBServiceConsts.EXTRA_USER);
  String message=extras.getString(QBServiceConsts.EXTRA_CHAT_MESSAGE);
  dialogId=extras.getString(QBServiceConsts.EXTRA_DIALOG_ID);
  isPrivateMessage=extras.getBoolean(QBServiceConsts.EXTRA_IS_PRIVATE_MESSAGE);
  if (isMessagesDialogCorrect(dialogId)) {
    showNewMessageAlert(senderUser,message);
  }
}","protected void showChatMessageNotification(Bundle extras){
  senderUser=(User)extras.getSerializable(QBServiceConsts.EXTRA_USER);
  String message=extras.getString(QBServiceConsts.EXTRA_CHAT_MESSAGE);
  dialogId=extras.getString(QBServiceConsts.EXTRA_DIALOG_ID);
  isPrivateMessage=extras.getBoolean(QBServiceConsts.EXTRA_IS_PRIVATE_MESSAGE);
  if (isMessagesDialogCorrect(dialogId) && senderUser != null) {
    showNewMessageAlert(senderUser,message);
  }
}",0.9753914988814316
114045,"@Override protected void onStop(){
  activityHelper.onStop();
  super.onStop();
}","@Override protected void onStop(){
  isNeedShowTostAboutDisconnected=false;
  activityHelper.onStop();
  super.onStop();
}",0.7980295566502463
114046,"@Override protected void onResume(){
  super.onResume();
  activityHelper.onResume();
  addAction(QBServiceConsts.LOGIN_REST_SUCCESS_ACTION,successAction);
}","@Override protected void onResume(){
  super.onResume();
  isNeedShowTostAboutDisconnected=true;
  activityHelper.onResume();
  addAction(QBServiceConsts.LOGIN_REST_SUCCESS_ACTION,successAction);
}",0.8870056497175142
114047,"@Override public void onConnectionChange(boolean isConnected){
  if (isConnected) {
    QBReloginCommand.start(this);
  }
 else {
    Toast.makeText(this,this.getString(com.quickblox.q_municate_core.R.string.connection_lost),Toast.LENGTH_LONG).show();
  }
}","@Override public void onConnectionChange(boolean isConnected){
  if (isConnected) {
    QBReloginCommand.start(this);
  }
 else {
    showToastAboutDisconnectedIfNeed();
  }
}",0.7361111111111112
114048,"@Override protected void onStart(){
  activityHelper.onStart();
  super.onStart();
}","@Override protected void onStart(){
  activityHelper.onStart();
  if (!isConnectionEnabled()) {
    Toast.makeText(this,getString(R.string.connection_lost),Toast.LENGTH_LONG).show();
  }
  super.onStart();
}",0.5773195876288659
114049,"@Override protected void onResume(){
  super.onResume();
  activityHelper.onResume();
  addAction(QBServiceConsts.LOGIN_REST_SUCCESS_ACTION,successAction);
  if (!isConnectionEnabled()) {
    Toast.makeText(this,getString(R.string.connection_lost),Toast.LENGTH_LONG).show();
  }
}","@Override protected void onResume(){
  super.onResume();
  activityHelper.onResume();
  addAction(QBServiceConsts.LOGIN_REST_SUCCESS_ACTION,successAction);
}",0.7185354691075515
114050,"protected void startLoadDialogMessages(){
  if (dialog == null) {
    return;
  }
  lastMessagesCountInDB=ChatDatabaseManager.getAllDialogMessagesByDialogId(this,dialogId).getCount();
  showActionBarProgress();
  MessageCache lastReadMessage=ChatDatabaseManager.getLastSyncMessage(this,dialog);
  if (lastReadMessage == null) {
    startLoadDialogMessages(dialog,ConstsCore.ZERO_LONG_VALUE);
    updateMessagesReason=UpdateMessagesReason.DEFAULT;
  }
 else   if (UpdateMessagesReason.DEFAULT == updateMessagesReason) {
    startNewMessagesLoadDialogMessages(dialog,lastReadMessage.getTime(),lastReadMessage.getId());
  }
 else   if (UpdateMessagesReason.ON_USER_REQUEST == updateMessagesReason) {
    startLoadDialogMessages(dialog,lastReadMessage.getTime());
  }
}","protected void startLoadDialogMessages(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(updateMessagesReason));
  if (dialog == null) {
    return;
  }
  lastMessagesCountInDB=ChatDatabaseManager.getAllDialogMessagesByDialogId(this,dialogId).getCount();
  showActionBarProgress();
  MessageCache lastReadMessage=ChatDatabaseManager.getLastSyncMessage(this,dialog);
  Log.d(""String_Node_Str"",""String_Node_Str"" + lastReadMessage);
  if (lastReadMessage == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    startLoadDialogMessages(dialog,ConstsCore.ZERO_LONG_VALUE);
    updateMessagesReason=UpdateMessagesReason.DEFAULT;
  }
 else   if (UpdateMessagesReason.DEFAULT == updateMessagesReason) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    startNewMessagesLoadDialogMessages(dialog,lastReadMessage.getTime(),lastReadMessage.getId());
  }
 else   if (UpdateMessagesReason.ON_USER_REQUEST == updateMessagesReason) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    startLoadDialogMessages(dialog,lastReadMessage.getTime());
  }
}",0.8186195826645265
114051,"@Override protected void onStart(){
  super.onStart();
  updateMessagesReason=UpdateMessagesReason.DEFAULT;
  if (TextUtils.isEmpty(messageEditText.getText().toString().trim())) {
    String messageBody=ChatDatabaseManager.getNotSendMessageBodyByDialogId(getApplicationContext(),dialogId);
    if (messageBody != null) {
      messageEditText.setText(messageBody);
    }
  }
}","@Override protected void onStart(){
  super.onStart();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  updateMessagesReason=UpdateMessagesReason.DEFAULT;
  if (TextUtils.isEmpty(messageEditText.getText().toString().trim())) {
    String messageBody=ChatDatabaseManager.getNotSendMessageBodyByDialogId(getApplicationContext(),dialogId);
    if (messageBody != null) {
      messageEditText.setText(messageBody);
    }
  }
}",0.9423558897243108
114052,"@Override protected void onStop(){
  if (!TextUtils.isEmpty(messageEditText.getText().toString().trim())) {
    ChatDatabaseManager.saveNotSendMessage(getApplicationContext(),messageEditText.getText().toString(),dialogId,null);
  }
 else {
    ChatDatabaseManager.deleteNotSentMessagesByDialogId(getApplicationContext(),dialogId);
  }
  super.onStop();
}","@Override protected void onStop(){
  isNeedShowTostAboutDisconnected=false;
  if (!TextUtils.isEmpty(messageEditText.getText().toString().trim())) {
    ChatDatabaseManager.saveNotSendMessage(getApplicationContext(),messageEditText.getText().toString(),dialogId,null);
  }
 else {
    ChatDatabaseManager.deleteNotSentMessagesByDialogId(getApplicationContext(),dialogId);
  }
  super.onStop();
}",0.945260347129506
114053,"@Override protected void onResume(){
  super.onResume();
  startLoadDialogMessages();
}","@Override protected void onResume(){
  super.onResume();
  isNeedShowTostAboutDisconnected=true;
  Log.d(""String_Node_Str"",""String_Node_Str"");
  startLoadDialogMessages();
}",0.6692307692307692
114054,"@Override protected void onPause(){
  super.onPause();
  onUpdateChatDialog();
  hideSmileLayout();
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (isTypingNow) {
      isTypingNow=false;
      sendTypingStatus();
    }
  }
}","@Override protected void onPause(){
  super.onPause();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  onUpdateChatDialog();
  hideSmileLayout();
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (isTypingNow) {
      isTypingNow=false;
      sendTypingStatus();
    }
  }
}",0.9125475285171104
114055,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor messagesCursor){
  if (messagesAdapter == null) {
    initListView(messagesCursor);
  }
 else {
    messagesAdapter.swapCursor(messagesCursor);
    int currentMessageCountInBase=ChatDatabaseManager.getAllDialogMessagesByDialogId(this,dialogId).getCount();
    if (currentMessageCountInBase > lastMessagesCountInDB) {
      totalEntries=currentMessageCountInBase - lastMessagesCountInDB;
      lastMessagesCountInDB=currentMessageCountInBase;
    }
    if (totalEntries > 0) {
      if (UpdateMessagesReason.ON_USER_REQUEST == updateMessagesReason) {
        int loadMessages=ConstsCore.DIALOG_MESSAGES_PER_PAGE < totalEntries ? ConstsCore.DIALOG_MESSAGES_PER_PAGE : totalEntries;
        messagesListView.setSelection(loadMessages - 1);
        resetTotalEntries();
      }
 else       if (UpdateMessagesReason.DEFAULT == updateMessagesReason) {
        scrollListView();
      }
    }
  }
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor messagesCursor){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (messagesAdapter == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    initListView(messagesCursor);
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Log.d(""String_Node_Str"",""String_Node_Str"" + updateMessagesReason.name());
    messagesAdapter.swapCursor(messagesCursor);
    int currentMessageCountInBase=ChatDatabaseManager.getAllDialogMessagesByDialogId(this,dialogId).getCount();
    if (currentMessageCountInBase > lastMessagesCountInDB) {
      totalEntries=currentMessageCountInBase - lastMessagesCountInDB;
      lastMessagesCountInDB=currentMessageCountInBase;
    }
    if (totalEntries > 0) {
      if (UpdateMessagesReason.ON_USER_REQUEST == updateMessagesReason) {
        int loadMessages=ConstsCore.DIALOG_MESSAGES_PER_PAGE < totalEntries ? ConstsCore.DIALOG_MESSAGES_PER_PAGE : totalEntries;
        Log.d(""String_Node_Str"",""String_Node_Str"" + loadMessages);
        messagesListView.setSelection(loadMessages - 1);
        resetTotalEntries();
      }
 else       if (UpdateMessagesReason.DEFAULT == updateMessagesReason) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        scrollListView();
      }
    }
  }
}",0.8495339547270306
114056,"protected void startNewMessagesLoadDialogMessages(QBDialog dialog,long lastDateLoad,String lastReadMessageID){
  if (loadingMore) {
    QBLoadDialogMessagesCommand.start(this,dialog,lastDateLoad,lastReadMessageID,ConstsCore.NOT_INITIALIZED_VALUE);
    loadingMore=false;
  }
}","protected void startNewMessagesLoadDialogMessages(QBDialog dialog,long lastDateLoad,String lastReadMessageID){
  Log.d(""String_Node_Str"",""String_Node_Str"" + loadingMore);
  if (loadingMore) {
    Log.d(""String_Node_Str"",""String_Node_Str"" + dialog + ""String_Node_Str""+ lastDateLoad+ ""String_Node_Str""+ skipMessages);
    QBLoadDialogMessagesCommand.start(this,dialog,lastDateLoad,lastReadMessageID,ConstsCore.NOT_INITIALIZED_VALUE);
    loadingMore=false;
  }
}",0.75
114057,"@Override public void onConnectionChange(boolean isConnected){
  super.onConnectionChange(isConnected);
  if (!isConnected) {
    updateMessagesReason=UpdateMessagesReason.NONE;
  }
}","@Override public void onConnectionChange(boolean isConnected){
  super.onConnectionChange(isConnected);
  if (!isConnected) {
    updateMessagesReason=UpdateMessagesReason.NONE;
    showToastAboutDisconnectedIfNeed();
  }
}",0.9014778325123152
114058,"@Override public void onComplete(Bundle values,FacebookException facebookException){
  parseFacebookRequestError(values,facebookException);
}","@Override public void onComplete(Bundle values,FacebookException facebookException){
  parseFacebookFeedError(values,facebookException);
}",0.974910394265233
114059,"public WebDialog getWebDialogRequest(){
  Bundle postParams=getBundleForFriendsRequest();
  return (new WebDialog.RequestsDialogBuilder(activity,Session.getActiveSession(),postParams)).setOnCompleteListener(getWebDialogOnCompleteListener()).build();
}","public WebDialog getWebDialogRequest(){
  Bundle postParams=getBundleForPostToWall();
  return (new WebDialog.FeedDialogBuilder(activity,Session.getActiveSession(),postParams)).setOnCompleteListener(getWebDialogOnCompleteListener()).build();
}",0.9271255060728744
114060,"private WebDialog.OnCompleteListener getWebDialogOnCompleteListener(){
  return new WebDialog.OnCompleteListener(){
    @Override public void onComplete(    Bundle values,    FacebookException facebookException){
      parseFacebookRequestError(values,facebookException);
    }
  }
;
}","private WebDialog.OnCompleteListener getWebDialogOnCompleteListener(){
  return new WebDialog.OnCompleteListener(){
    @Override public void onComplete(    Bundle values,    FacebookException facebookException){
      parseFacebookFeedError(values,facebookException);
    }
  }
;
}",0.980599647266314
114061,"@Override protected void onStop(){
  activityHelper.onStop();
  super.onStop();
}","@Override protected void onStop(){
  isNeedShowTostAboutDisconnected=false;
  activityHelper.onStop();
  super.onStop();
}",0.7980295566502463
114062,"@Override protected void onResume(){
  super.onResume();
  activityHelper.onResume();
  addAction(QBServiceConsts.LOGIN_REST_SUCCESS_ACTION,successAction);
}","@Override protected void onResume(){
  super.onResume();
  isNeedShowTostAboutDisconnected=true;
  activityHelper.onResume();
  addAction(QBServiceConsts.LOGIN_REST_SUCCESS_ACTION,successAction);
}",0.8870056497175142
114063,"@Override public void onConnectionChange(boolean isConnected){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + isConnected);
  if (isConnected) {
    QBReloginCommand.start(this);
  }
 else {
    Toast.makeText(this,this.getString(com.quickblox.q_municate_core.R.string.connection_lost),Toast.LENGTH_LONG).show();
  }
}","@Override public void onConnectionChange(boolean isConnected){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + isConnected);
  if (isConnected) {
    QBReloginCommand.start(this);
  }
 else {
    showToastAboutDisconnectedIfNeed();
  }
}",0.7919254658385093
114064,"@Override protected void onStart(){
  activityHelper.onStart();
  super.onStart();
}","@Override protected void onStart(){
  activityHelper.onStart();
  if (!isConnectionEnabled()) {
    Toast.makeText(this,getString(R.string.connection_lost),Toast.LENGTH_LONG).show();
  }
  super.onStart();
}",0.5773195876288659
114065,"@Override protected void onResume(){
  super.onResume();
  activityHelper.onResume();
  addAction(QBServiceConsts.LOGIN_REST_SUCCESS_ACTION,successAction);
  if (!isConnectionEnabled()) {
    Toast.makeText(this,getString(R.string.connection_lost),Toast.LENGTH_LONG).show();
  }
}","@Override protected void onResume(){
  super.onResume();
  activityHelper.onResume();
  addAction(QBServiceConsts.LOGIN_REST_SUCCESS_ACTION,successAction);
}",0.7185354691075515
114066,"@Override protected void onStop(){
  if (!TextUtils.isEmpty(messageEditText.getText().toString().trim())) {
    ChatDatabaseManager.saveNotSendMessage(getApplicationContext(),messageEditText.getText().toString(),dialogId,null);
  }
 else {
    ChatDatabaseManager.deleteNotSentMessagesByDialogId(getApplicationContext(),dialogId);
  }
  super.onStop();
}","@Override protected void onStop(){
  isNeedShowTostAboutDisconnected=false;
  if (!TextUtils.isEmpty(messageEditText.getText().toString().trim())) {
    ChatDatabaseManager.saveNotSendMessage(getApplicationContext(),messageEditText.getText().toString(),dialogId,null);
  }
 else {
    ChatDatabaseManager.deleteNotSentMessagesByDialogId(getApplicationContext(),dialogId);
  }
  super.onStop();
}",0.945260347129506
114067,"@Override protected void onResume(){
  super.onResume();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  startLoadDialogMessages();
}","@Override protected void onResume(){
  super.onResume();
  isNeedShowTostAboutDisconnected=true;
  Log.d(""String_Node_Str"",""String_Node_Str"");
  startLoadDialogMessages();
}",0.869281045751634
114068,"@Override public void onConnectionChange(boolean isConnected){
  super.onConnectionChange(isConnected);
  if (!isConnected) {
    updateMessagesReason=UpdateMessagesReason.NONE;
  }
}","@Override public void onConnectionChange(boolean isConnected){
  super.onConnectionChange(isConnected);
  if (!isConnected) {
    updateMessagesReason=UpdateMessagesReason.NONE;
    showToastAboutDisconnectedIfNeed();
  }
}",0.9014778325123152
114069,"/** 
 * Override this method in each child which need to listen connectivity state
 * @param isConnected
 */
@Override public void onConnectionChange(final boolean isConnected){
  isConnectivityExists=isConnected;
  notifyAllConnectivityListeners();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + isConnected);
  if (isConnected) {
    QBReloginCommand.start(context);
  }
 else {
    Toast.makeText(context,context.getString(R.string.connection_lost),Toast.LENGTH_LONG).show();
  }
}","/** 
 * Override this method in each child which need to listen connectivity state
 * @param isConnected
 */
@Override public void onConnectionChange(final boolean isConnected){
  isConnectivityExists=isConnected;
  notifyAllConnectivityListeners();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + isConnected);
  if (isConnected) {
    QBReloginCommand.start(context);
  }
}",0.8839662447257384
114070,"@Override public Bundle perform(Bundle extras) throws QBResponseException {
  QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  GroupDialog groupDialog=new GroupDialog(dialog);
  List<Integer> participantIdsList=dialog.getOccupants();
  try {
    List<Integer> onlineParticipantIdsList=multiChatHelper.getRoomOnlineParticipantList(dialog.getRoomJid());
    QBPagedRequestBuilder requestBuilder=new QBPagedRequestBuilder();
    requestBuilder.setPage(ConstsCore.FL_FRIENDS_PAGE_NUM);
    requestBuilder.setPerPage(ConstsCore.FL_FRIENDS_PER_PAGE);
    Bundle requestParams=new Bundle();
    List<QBUser> userList=QBUsers.getUsersByIDs(participantIdsList,requestBuilder,requestParams);
    Map<Integer,User> friendMap=FriendUtils.createUserMap(userList);
    for (    Integer onlineParticipantId : onlineParticipantIdsList) {
      User user=friendMap.get(onlineParticipantId);
      if (user != null) {
        user.setOnline(true);
      }
    }
    ArrayList<User> friendList=new ArrayList<User>(friendMap.values());
    Collections.sort(friendList,new UserComparator());
    groupDialog.setOccupantList(friendList);
  }
 catch (  XMPPException e) {
    throw new QBResponseException(e.getLocalizedMessage());
  }
  Bundle params=new Bundle();
  params.putSerializable(QBServiceConsts.EXTRA_GROUP_DIALOG,groupDialog);
  return params;
}","@Override public Bundle perform(Bundle extras) throws QBResponseException {
  QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  GroupDialog groupDialog=new GroupDialog(dialog);
  List<Integer> participantIdsList=dialog.getOccupants();
  try {
    List<Integer> onlineParticipantIdsList=multiChatHelper.getRoomOnlineParticipantList(dialog.getRoomJid());
    QBPagedRequestBuilder requestBuilder=new QBPagedRequestBuilder();
    requestBuilder.setPage(ConstsCore.FL_FRIENDS_PAGE_NUM);
    requestBuilder.setPerPage(ConstsCore.FL_FRIENDS_PER_PAGE_TEMP_VALUE);
    Bundle requestParams=new Bundle();
    List<QBUser> userList=QBUsers.getUsersByIDs(participantIdsList,requestBuilder,requestParams);
    Map<Integer,User> friendMap=FriendUtils.createUserMap(userList);
    for (    Integer onlineParticipantId : onlineParticipantIdsList) {
      User user=friendMap.get(onlineParticipantId);
      if (user != null) {
        user.setOnline(true);
      }
    }
    ArrayList<User> friendList=new ArrayList<User>(friendMap.values());
    Collections.sort(friendList,new UserComparator());
    groupDialog.setOccupantList(friendList);
  }
 catch (  XMPPException e) {
    throw new QBResponseException(e.getLocalizedMessage());
  }
  Bundle params=new Bundle();
  params.putSerializable(QBServiceConsts.EXTRA_GROUP_DIALOG,groupDialog);
  return params;
}",0.995995631598107
114071,"protected void showUserAgreement(DialogInterface.OnClickListener positiveClickListener,DialogInterface.OnClickListener negativeClickListener){
  if (userAgreementDialog == null) {
    userAgreementDialog=UserAgreementDialog.newInstance(positiveClickListener,negativeClickListener);
  }
  userAgreementDialog.show(getFragmentManager(),null);
}","protected void showUserAgreement(DialogInterface.OnClickListener positiveClickListener,DialogInterface.OnClickListener negativeClickListener){
  UserAgreementDialog userAgreementDialog=UserAgreementDialog.newInstance(positiveClickListener,negativeClickListener);
  userAgreementDialog.show(getFragmentManager(),null);
}",0.907715582450832
114072,"@Override public Bundle perform(Bundle extras) throws QBResponseException {
  QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  GroupDialog groupDialog=new GroupDialog(dialog);
  List<Integer> participantIdsList=dialog.getOccupants();
  try {
    List<Integer> onlineParticipantIdsList=multiChatHelper.getRoomOnlineParticipantList(dialog.getRoomJid());
    QBPagedRequestBuilder requestBuilder=new QBPagedRequestBuilder();
    requestBuilder.setPage(ConstsCore.FL_FRIENDS_PAGE_NUM);
    requestBuilder.setPerPage(ConstsCore.FL_FRIENDS_PER_PAGE);
    Bundle requestParams=new Bundle();
    List<QBUser> userList=QBUsers.getUsersByIDs(participantIdsList,requestBuilder,requestParams);
    Map<Integer,User> friendMap=FriendUtils.createUserMap(userList);
    for (    Integer onlineParticipantId : onlineParticipantIdsList) {
      User user=friendMap.get(onlineParticipantId);
      if (user != null) {
        user.setOnline(true);
      }
    }
    ArrayList<User> friendList=new ArrayList<User>(friendMap.values());
    Collections.sort(friendList,new UserComparator());
    groupDialog.setOccupantList(friendList);
  }
 catch (  XMPPException e) {
    throw new QBResponseException(e.getLocalizedMessage());
  }
  Bundle params=new Bundle();
  params.putSerializable(QBServiceConsts.EXTRA_GROUP_DIALOG,groupDialog);
  return params;
}","@Override public Bundle perform(Bundle extras) throws QBResponseException {
  QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  GroupDialog groupDialog=new GroupDialog(dialog);
  List<Integer> participantIdsList=dialog.getOccupants();
  try {
    List<Integer> onlineParticipantIdsList=multiChatHelper.getRoomOnlineParticipantList(dialog.getRoomJid());
    QBPagedRequestBuilder requestBuilder=new QBPagedRequestBuilder();
    requestBuilder.setPage(ConstsCore.FL_FRIENDS_PAGE_NUM);
    requestBuilder.setPerPage(ConstsCore.FL_FRIENDS_PER_PAGE_TEMP_VALUE);
    Bundle requestParams=new Bundle();
    List<QBUser> userList=QBUsers.getUsersByIDs(participantIdsList,requestBuilder,requestParams);
    Map<Integer,User> friendMap=FriendUtils.createUserMap(userList);
    for (    Integer onlineParticipantId : onlineParticipantIdsList) {
      User user=friendMap.get(onlineParticipantId);
      if (user != null) {
        user.setOnline(true);
      }
    }
    ArrayList<User> friendList=new ArrayList<User>(friendMap.values());
    Collections.sort(friendList,new UserComparator());
    groupDialog.setOccupantList(friendList);
  }
 catch (  XMPPException e) {
    throw new QBResponseException(e.getLocalizedMessage());
  }
  Bundle params=new Bundle();
  params.putSerializable(QBServiceConsts.EXTRA_GROUP_DIALOG,groupDialog);
  return params;
}",0.995995631598107
114073,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor messagesCursor){
  if (messagesAdapter == null) {
    initListView(messagesCursor);
  }
 else {
    messagesAdapter.changeCursor(messagesCursor);
    if (totalEntries > 0 && updateMessagesReason == UpdateMessagesReason.ON_USER_REQUEST) {
      messagesListView.setSelection(totalEntries - 1);
    }
 else     if (totalEntries > 0 && updateMessagesReason == UpdateMessagesReason.DEFAULT) {
      scrollListView();
    }
  }
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor messagesCursor){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + messagesAdapter);
  if (messagesAdapter == null) {
    initListView(messagesCursor);
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"" + updateMessagesReason);
    messagesAdapter.changeCursor(messagesCursor);
    if (totalEntries > 0 && updateMessagesReason == UpdateMessagesReason.ON_USER_REQUEST) {
      messagesListView.setSelection(totalEntries - 1);
    }
 else     if (totalEntries > 0 && updateMessagesReason == UpdateMessagesReason.DEFAULT) {
      scrollListView();
    }
  }
}",0.8440999138673557
114074,"@Override protected void initListView(Cursor messagesCursor){
  messagesAdapter=new GroupDialogMessagesAdapter(this,messagesCursor,this,dialog);
  messagesListView.setAdapter((StickyListHeadersAdapter)messagesAdapter);
  isNeedToScrollMessages=true;
  scrollListView();
}","@Override protected void initListView(Cursor messagesCursor){
  messagesAdapter=new GroupDialogMessagesAdapter(this,messagesCursor,this,dialog);
  messagesListView.setAdapter((StickyListHeadersAdapter)messagesAdapter);
  isNeedToScrollMessages=true;
}",0.9616858237547892
114075,"@Override protected void initListView(Cursor messagesCursor){
  messagesAdapter=new PrivateDialogMessagesAdapter(this,friendOperationAction,messagesCursor,this,dialog);
  messagesListView.setAdapter((StickyListHeadersAdapter)messagesAdapter);
  ((PrivateDialogMessagesAdapter)messagesAdapter).findLastFriendsRequestMessagesPosition();
  isNeedToScrollMessages=true;
  scrollListView();
}","@Override protected void initListView(Cursor messagesCursor){
  messagesAdapter=new PrivateDialogMessagesAdapter(this,friendOperationAction,messagesCursor,this,dialog);
  messagesListView.setAdapter((StickyListHeadersAdapter)messagesAdapter);
  ((PrivateDialogMessagesAdapter)messagesAdapter).findLastFriendsRequestMessagesPosition();
  isNeedToScrollMessages=true;
}",0.973474801061008
114076,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long arg3){
  Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
  QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
  if (dialog.getType() == QBDialogType.PRIVATE) {
    startPrivateChatActivity(dialog);
  }
 else {
    startGroupChatActivity(dialog);
  }
  selectedPositionList=position;
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long arg3){
  Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
  QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
  if (dialog.getType() == QBDialogType.PRIVATE) {
    startPrivateChatActivity(dialog);
  }
 else {
    startGroupChatActivity(dialog);
  }
  selectedPositionList=dialogsListView.getFirstVisiblePosition();
}",0.943089430894309
114077,"private void initListeners(){
  dialogsListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long arg3){
      Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
      QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
      if (dialog.getType() == QBDialogType.PRIVATE) {
        startPrivateChatActivity(dialog);
      }
 else {
        startGroupChatActivity(dialog);
      }
      selectedPositionList=position;
    }
  }
);
}","private void initListeners(){
  dialogsListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long arg3){
      Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
      QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
      if (dialog.getType() == QBDialogType.PRIVATE) {
        startPrivateChatActivity(dialog);
      }
 else {
        startGroupChatActivity(dialog);
      }
      selectedPositionList=dialogsListView.getFirstVisiblePosition();
    }
  }
);
}",0.9595375722543352
114078,"@Override public void onReceiveHangUpFromUser(Integer integer){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (!isCleintReadyAccept) {
    waitingTasksMap.clear();
    finish();
  }
  if (currentFragment instanceof IncomingCallFragment || currentFragment instanceof OutgoingCallFragment) {
    showToastMessage(getString(R.string.user_hang_up_call));
  }
}","@Override public void onReceiveHangUpFromUser(Integer integer){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (currentFragment instanceof IncomingCallFragment || currentFragment instanceof OutgoingCallFragment) {
    showToastMessage(getString(R.string.user_hang_up_call));
  }
}",0.880248833592535
114079,"/** 
 * Start call rejecting task
 */
@Override public void rejectCallClick(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  cancelPlayer();
  if (isCleintReadyAccept) {
    Runnable rejectTask=callTasksMap.get(REJECT_CALL_TASK);
    executeCallTask(rejectTask);
  }
 else {
    waitingTasksMap.put(REJECT_CALL_TASK,callTasksMap.get(REJECT_CALL_TASK));
  }
}","/** 
 * Start call rejecting task
 */
@Override public void rejectCallClick(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  cancelPlayer();
  Runnable rejectTask=callTasksMap.get(REJECT_CALL_TASK);
  executeCallTask(rejectTask);
}",0.7851099830795262
114080,"/** 
 * Start call accepting task
 */
@Override public void acceptCallClick(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  cancelPlayer();
  showOutgoingFragment();
  if (isCleintReadyAccept) {
    Runnable acceptTask=callTasksMap.get(ACCEPT_CALL_TASK);
    executeCallTask(acceptTask);
  }
 else {
    waitingTasksMap.put(ACCEPT_CALL_TASK,callTasksMap.get(ACCEPT_CALL_TASK));
  }
}","/** 
 * Start call accepting task
 */
@Override public void acceptCallClick(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  cancelPlayer();
  showOutgoingFragment();
  Runnable acceptTask=callTasksMap.get(ACCEPT_CALL_TASK);
  executeCallTask(acceptTask);
}",0.80248833592535
114081,"@Override public void onSessionClosed(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  cancelPlayer();
  finish();
}","@Override public void onSessionClosed(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  cancelPlayer();
  stopIncomeCallTimer();
  finish();
}",0.9034749034749034
114082,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  QBRTCClient.getInstance().prepareToProcessCalls(this);
  if (getIntent().getExtras() != null) {
    parseIntentExtras(getIntent().getExtras());
  }
  canPerformLogout.set(false);
  setContentView(R.layout.activity_main_call);
  actionBar.hide();
  mediaPlayer=App.getInstance().getMediaPlayer();
  callTasksQueue=new LinkedList<>();
  videoTracksSetEnumMap=new EnumMap<>(VideoTracks.class);
  for (  VideoTracks videoTracks : VideoTracks.values()) {
    videoTracksSetEnumMap.put(videoTracks,new HashSet<Runnable>());
  }
  waitingTasksMap=new TreeMap<>();
  initCallTasksMap();
  if (call_direction_type == ConstsCore.CALL_DIRECTION_TYPE.OUTGOING) {
    startCall();
  }
  addAction(QBServiceConsts.SEND_PUSH_MESSAGES_FAIL_ACTION,failAction);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  if (getIntent().getExtras() != null) {
    parseIntentExtras(getIntent().getExtras());
  }
  canPerformLogout.set(false);
  setContentView(R.layout.activity_main_call);
  actionBar.hide();
  mediaPlayer=App.getInstance().getMediaPlayer();
  callTasksQueue=new LinkedList<>();
  videoTracksSetEnumMap=new EnumMap<>(VideoTracks.class);
  for (  VideoTracks videoTracks : VideoTracks.values()) {
    videoTracksSetEnumMap.put(videoTracks,new HashSet<Runnable>());
  }
  initCallTasksMap();
  if (call_direction_type == ConstsCore.CALL_DIRECTION_TYPE.OUTGOING) {
    startCall();
  }
  addAction(QBServiceConsts.SEND_PUSH_MESSAGES_FAIL_ACTION,failAction);
}",0.92175899486008
114083,"@Override protected void onDestroy(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  stopIncomeCallTimer();
  cancelPlayer();
  if (QBRTCClient.isInitiated()) {
    QBRTCClient.getInstance().close(true);
  }
  if (videoChatHelper != null) {
    videoChatHelper.setClientClosed();
    videoChatHelper.removeVideoChatHelperListener(this);
  }
  super.onDestroy();
}","@Override protected void onDestroy(){
  super.onDestroy();
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  stopCall();
}",0.4233870967741935
114084,"/** 
 * Start call task
 */
public void startCall(){
  if (waitingTasksMap != null && !waitingTasksMap.containsKey(REJECT_CALL_TASK)) {
    Log.d(CALL_INTEGRATION,""String_Node_Str"");
    Runnable callTask=callTasksMap.get(START_CALL_TASK);
    executeCallTask(callTask);
  }
}","/** 
 * Start call task
 */
public void startCall(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  Runnable callTask=callTasksMap.get(START_CALL_TASK);
  executeCallTask(callTask);
}",0.7973856209150327
114085,"private void initChatData(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (call_direction_type != null) {
    return;
  }
  call_direction_type=(ConstsCore.CALL_DIRECTION_TYPE)getArguments().getSerializable(ConstsCore.CALL_DIRECTION_TYPE_EXTRA);
  opponent=(User)getArguments().getSerializable(ConstsCore.EXTRA_FRIEND);
  call_type=(QBRTCTypes.QBConferenceType)getArguments().getSerializable(ConstsCore.CALL_TYPE_EXTRA);
  sessionId=getArguments().getString(ConstsCore.SESSION_ID,""String_Node_Str"");
}","private void initChatData(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (call_direction_type != null) {
    return;
  }
  call_direction_type=(ConstsCore.CALL_DIRECTION_TYPE)getArguments().getSerializable(ConstsCore.CALL_DIRECTION_TYPE_EXTRA);
  opponent=(User)getArguments().getSerializable(ConstsCore.EXTRA_FRIEND);
}",0.7836538461538461
114086,"@Override public void onConnectedToUser(QBRTCSession qbrtcSession,Integer integer){
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      ((CallActivity)getActivity()).stopIncomeCallTimer();
      startTimer(timerTextView);
      setActionButtonsEnability(true);
      QBGLVideoView localVideoView=((CallActivity)getActivity()).getLocalVideoView();
      if (localVideoView != null) {
      }
      QBGLVideoView remoteView=((CallActivity)getActivity()).getRemoteVideoView();
      if (remoteView != null) {
      }
    }
  }
);
}","@Override public void onConnectedToUser(QBRTCSession qbrtcSession,Integer integer){
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      ((CallActivity)getActivity()).stopIncomeCallTimer();
      startTimer(timerTextView);
      setActionButtonsEnability(true);
    }
  }
);
}",0.7321613236814891
114087,"@Override public void onPause(){
  if (isCallStopped()) {
    toggleCamera(false);
    if (cameraState == null) {
      cameraState=CameraState.NONE;
    }
  }
  super.onPause();
}","@Override public void onPause(){
  if (!isCallStopped()) {
    toggleCamera(false);
    if (cameraState == null) {
      cameraState=CameraState.NONE;
    }
  }
  super.onPause();
}",0.997229916897507
114088,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor messagesCursor){
  if (messagesAdapter == null) {
    initListView(messagesCursor);
  }
 else {
    messagesAdapter.changeCursor(messagesCursor);
    if (totalEntries > 0) {
      messagesListView.setSelection(totalEntries);
    }
  }
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor messagesCursor){
  if (messagesAdapter == null) {
    initListView(messagesCursor);
  }
 else {
    messagesAdapter.changeCursor(messagesCursor);
    if (totalEntries > 0) {
      messagesListView.setSelection(totalEntries - 1);
    }
  }
}",0.993421052631579
114089,"@Override protected void onResume(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  super.onResume();
  if (getLocalVideoView() != null) {
    getLocalVideoView().onResume();
  }
  if (getLocalVideoView() != null) {
    getRemoteVideoView().onResume();
  }
}","@Override protected void onResume(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  super.onResume();
  if (getLocalVideoView() != null) {
    getLocalVideoView().onResume();
  }
  if (getRemoteVideoView() != null) {
    getRemoteVideoView().onResume();
  }
}",0.9792843691148776
114090,"@Override protected void onPause(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  super.onPause();
  if (getLocalVideoView() != null) {
    getLocalVideoView().onPause();
  }
  if (getLocalVideoView() != null) {
    getRemoteVideoView().onPause();
  }
}","@Override protected void onPause(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  super.onPause();
  if (getLocalVideoView() != null) {
    getLocalVideoView().onPause();
  }
  if (getRemoteVideoView() != null) {
    getRemoteVideoView().onPause();
  }
}",0.9789674952198852
114091,"private Runnable initHangUpCallTask(){
  return new Runnable(){
    @Override public void run(){
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      try {
        videoChatHelper.hangUpCall(userInfo);
      }
 catch (      QBRTCSessionIsAbsentException e) {
        CallActivity.this.finish();
        Log.d(CALL_INTEGRATION,e.getMessage() + ""String_Node_Str"");
      }
    }
  }
;
}","private Runnable initHangUpCallTask(){
  return new Runnable(){
    @Override public void run(){
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      try {
        videoChatHelper.hangUpCall(userInfo);
      }
 catch (      QBRTCSessionIsAbsentException e) {
        videoChatHelper.setVideoChatHelperState(QBVideoChatHelper.VideoHelperStates.WAIT_FOR_CALL);
        CallActivity.this.finish();
        Log.d(CALL_INTEGRATION,e.getMessage() + ""String_Node_Str"");
      }
    }
  }
;
}",0.8853211009174312
114092,"/** 
 * Executes all scheduled tasks as soon as we receive QBVideoChatHelper instance
 */
private void executeScheduledTasks(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  for (  Runnable task : callTasksQueue) {
    runOnUiThread(task);
  }
}","/** 
 * Executes all scheduled tasks as soon as we receive QBVideoChatHelper instance
 */
private void executeScheduledTasks(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (videoChatHelper != null) {
    for (    Runnable task : callTasksQueue) {
      runOnUiThread(task);
    }
  }
}",0.9013035381750466
114093,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.muteDynamicButton:
    switchAudioOutput();
  break;
case R.id.stopСallButton:
setActionButtonsEnability(false);
stopСallButton.setEnabled(false);
stopСallButton.setActivated(false);
stopCall();
Log.d(""String_Node_Str"",""String_Node_Str"");
break;
case R.id.muteMicrophoneButton:
toggleMicrophone();
break;
default :
break;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.muteDynamicButton:
    switchAudioOutput();
  break;
case R.id.stopСallButton:
setCallState(true);
setActionButtonsEnability(false);
stopСallButton.setEnabled(false);
stopСallButton.setActivated(false);
stopCall();
Log.d(""String_Node_Str"",""String_Node_Str"");
break;
case R.id.muteMicrophoneButton:
toggleMicrophone();
break;
default :
break;
}
}",0.9753086419753086
114094,"private void toggleCamera(boolean isCameraEnabled){
  if (outgoingCallFragmentInterface != null) {
    DisplayMetrics displaymetrics=new DisplayMetrics();
    displaymetrics.setToDefaults();
    getActivity().getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
    ViewGroup.LayoutParams layoutParams=imgMyCameraOff.getLayoutParams();
    int videoViewHeight=localVideoView.getHeight();
    int videoViewWidth=localVideoView.getWidth();
    layoutParams.height=videoViewHeight;
    layoutParams.width=videoViewWidth;
    imgMyCameraOff.setLayoutParams(layoutParams);
    if (!isCameraEnabled) {
      switchCameraButton.setVisibility(View.INVISIBLE);
      cameraOffButton.setChecked(true);
      imgMyCameraOff.setVisibility(View.VISIBLE);
      Log.d(TAG,""String_Node_Str"");
      outgoingCallFragmentInterface.offCam();
    }
 else {
      switchCameraButton.setVisibility(View.VISIBLE);
      cameraOffButton.setChecked(false);
      imgMyCameraOff.setVisibility(View.INVISIBLE);
      Log.d(TAG,""String_Node_Str"");
      outgoingCallFragmentInterface.onCam();
    }
  }
}","private void toggleCamera(boolean isCameraEnabled){
  if (outgoingCallFragmentInterface != null) {
    ViewGroup.LayoutParams layoutParams=imgMyCameraOff.getLayoutParams();
    int videoViewHeight=localVideoView.getHeight();
    int videoViewWidth=localVideoView.getWidth();
    layoutParams.height=videoViewHeight;
    layoutParams.width=videoViewWidth;
    imgMyCameraOff.setLayoutParams(layoutParams);
    if (!isCameraEnabled) {
      switchCameraButton.setVisibility(View.INVISIBLE);
      cameraOffButton.setChecked(true);
      imgMyCameraOff.setVisibility(View.VISIBLE);
      Log.d(TAG,""String_Node_Str"");
      outgoingCallFragmentInterface.offCam();
    }
 else {
      switchCameraButton.setVisibility(View.VISIBLE);
      cameraOffButton.setChecked(false);
      imgMyCameraOff.setVisibility(View.INVISIBLE);
      Log.d(TAG,""String_Node_Str"");
      outgoingCallFragmentInterface.onCam();
    }
  }
}",0.911720698254364
114095,"@Override public void onPause(){
  toggleCamera(false);
  if (cameraState == null) {
    cameraState=CameraState.NONE;
  }
  super.onPause();
}","@Override public void onPause(){
  if (isCallStopped()) {
    toggleCamera(false);
    if (cameraState == null) {
      cameraState=CameraState.NONE;
    }
  }
  super.onPause();
}",0.8854489164086687
114096,"@Override public void bindView(View view,final Context context,Cursor cursor){
  ViewHolder viewHolder=(ViewHolder)view.getTag();
  MessageCache messageCache=ChatDatabaseManager.getMessageCacheFromCursor(cursor);
  boolean ownMessage=isOwnMessage(messageCache.getSenderId());
  boolean friendsRequestMessage=MessagesNotificationType.FRIENDS_REQUEST.equals(messageCache.getMessagesNotificationType());
  boolean friendsInfoRequestMessage=messageCache.getMessagesNotificationType() != null && !friendsRequestMessage;
  if (friendsRequestMessage) {
    viewHolder.messageTextView.setText(messageCache.getMessage());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    setVisibilityFriendsActions(viewHolder,View.GONE);
  }
 else   if (friendsInfoRequestMessage) {
    viewHolder.messageTextView.setText(messageCache.getMessage());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    setVisibilityFriendsActions(viewHolder,View.GONE);
    lastInfoRequestPosition=cursor.getPosition();
  }
 else   if (!TextUtils.isEmpty(messageCache.getAttachUrl())) {
    resetUI(viewHolder);
    setViewVisibility(viewHolder.progressRelativeLayout,View.VISIBLE);
    viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    if (ownMessage) {
      setMessageStatus(viewHolder.attachDeliveryStatusImageView,messageCache.isDelivered(),messageCache.isRead());
    }
    displayAttachImage(messageCache.getAttachUrl(),viewHolder);
  }
 else {
    resetUI(viewHolder);
    setViewVisibility(viewHolder.textMessageView,View.VISIBLE);
    viewHolder.messageTextView.setText(messageCache.getMessage());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    if (ownMessage) {
      setMessageStatus(viewHolder.messageDeliveryStatusImageView,messageCache.isDelivered(),messageCache.isRead());
    }
  }
  if (!messageCache.isRead() && !ownMessage) {
    messageCache.setRead(true);
    QBUpdateStatusMessageCommand.start(context,dialog,messageCache,true);
  }
  boolean lastRequestMessage=cursor.getPosition() == cursor.getCount() - 1 && friendsRequestMessage;
  if (lastRequestMessage) {
    findLastFriendsRequestForCursor(cursor);
  }
  if (lastRequestPosition != EMPTY_POSITION && lastRequestPosition < lastInfoRequestPosition) {
    lastRequestPosition=EMPTY_POSITION;
  }
 else   if ((lastRequestPosition != EMPTY_POSITION && lastRequestPosition == cursor.getPosition())) {
    setVisibilityFriendsActions(viewHolder,View.VISIBLE);
    initListeners(viewHolder,messageCache.getSenderId());
  }
}","@Override public void bindView(View view,final Context context,Cursor cursor){
  ViewHolder viewHolder=(ViewHolder)view.getTag();
  MessageCache messageCache=ChatDatabaseManager.getMessageCacheFromCursor(cursor);
  boolean ownMessage=isOwnMessage(messageCache.getSenderId());
  boolean friendsRequestMessage=MessagesNotificationType.FRIENDS_REQUEST.equals(messageCache.getMessagesNotificationType());
  boolean friendsInfoRequestMessage=messageCache.getMessagesNotificationType() != null && !friendsRequestMessage;
  if (!ownMessage && !messageCache.isRead()) {
    if (positionLastReadMessage == -1) {
      positionLastReadMessage=cursor.getPosition();
    }
  }
  if (friendsRequestMessage) {
    viewHolder.messageTextView.setText(messageCache.getMessage());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    setVisibilityFriendsActions(viewHolder,View.GONE);
  }
 else   if (friendsInfoRequestMessage) {
    viewHolder.messageTextView.setText(messageCache.getMessage());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    setVisibilityFriendsActions(viewHolder,View.GONE);
    lastInfoRequestPosition=cursor.getPosition();
  }
 else   if (!TextUtils.isEmpty(messageCache.getAttachUrl())) {
    resetUI(viewHolder);
    setViewVisibility(viewHolder.progressRelativeLayout,View.VISIBLE);
    viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    if (ownMessage) {
      setMessageStatus(viewHolder.attachDeliveryStatusImageView,messageCache.isDelivered(),messageCache.isRead());
    }
    displayAttachImage(messageCache.getAttachUrl(),viewHolder);
  }
 else {
    resetUI(viewHolder);
    setViewVisibility(viewHolder.textMessageView,View.VISIBLE);
    viewHolder.messageTextView.setText(messageCache.getMessage());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    if (ownMessage) {
      setMessageStatus(viewHolder.messageDeliveryStatusImageView,messageCache.isDelivered(),messageCache.isRead());
    }
  }
  if (!messageCache.isRead() && !ownMessage) {
    messageCache.setRead(true);
    QBUpdateStatusMessageCommand.start(context,dialog,messageCache,true);
  }
  boolean lastRequestMessage=cursor.getPosition() == cursor.getCount() - 1 && friendsRequestMessage;
  if (lastRequestMessage) {
    findLastFriendsRequestForCursor(cursor);
  }
  if (lastRequestPosition != EMPTY_POSITION && lastRequestPosition < lastInfoRequestPosition) {
    lastRequestPosition=EMPTY_POSITION;
  }
 else   if ((lastRequestPosition != EMPTY_POSITION && lastRequestPosition == cursor.getPosition())) {
    setVisibilityFriendsActions(viewHolder,View.VISIBLE);
    initListeners(viewHolder,messageCache.getSenderId());
  }
}",0.9727272727272728
114097,"@Override public void onReceive(Context context,Intent intent){
  isPushForbidden=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_NOTIFICATIONS,false);
  if (isPushForbidden) {
    return;
  }
  ComponentName comp=new ComponentName(context.getPackageName(),GCMIntentService.class.getName());
  startWakefulService(context,(intent.setComponent(comp)));
  setResultCode(Activity.RESULT_OK);
}","@Override public void onReceive(Context context,Intent intent){
  isPushForbidden=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_NOTIFICATIONS,false) || PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_NOTIFICATIONS_ON_LOGOUT,false);
  Log.i(""String_Node_Str"",""String_Node_Str"" + isPushForbidden);
  if (isPushForbidden) {
    return;
  }
  ComponentName comp=new ComponentName(context.getPackageName(),GCMIntentService.class.getName());
  startWakefulService(context,(intent.setComponent(comp)));
  setResultCode(Activity.RESULT_OK);
}",0.8362877997914494
114098,"public static void start(Context context){
  Intent intent=new Intent(context,MainActivity.class);
  context.startActivity(intent);
}","public static void start(Context context){
  PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_NOTIFICATIONS_ON_LOGOUT,false);
  Intent intent=new Intent(context,MainActivity.class);
  context.startActivity(intent);
}",0.7388888888888889
114099,"@Override public void onClick(DialogInterface dialog,int which){
  baseActivity.showProgress();
  FacebookHelper.logout();
  QBLogoutCommand.start(baseActivity);
}","@Override public void onClick(DialogInterface dialog,int which){
  PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_NOTIFICATIONS_ON_LOGOUT,true);
  baseActivity.showProgress();
  FacebookHelper.logout();
  QBLogoutCommand.start(baseActivity);
}",0.7780429594272077
114100,"private void logout(){
  ConfirmDialog dialog=ConfirmDialog.newInstance(R.string.dlg_logout,R.string.dlg_confirm);
  dialog.setPositiveButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      baseActivity.showProgress();
      FacebookHelper.logout();
      QBLogoutCommand.start(baseActivity);
    }
  }
);
  dialog.show(getFragmentManager(),null);
}","private void logout(){
  ConfirmDialog dialog=ConfirmDialog.newInstance(R.string.dlg_logout,R.string.dlg_confirm);
  dialog.setPositiveButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_NOTIFICATIONS_ON_LOGOUT,true);
      baseActivity.showProgress();
      FacebookHelper.logout();
      QBLogoutCommand.start(baseActivity);
    }
  }
);
  dialog.show(getFragmentManager(),null);
}",0.897136797454931
114101,"@Override protected void onStop(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  super.onStop();
  if (videoChatHelper != null) {
    try {
      videoChatHelper.setCamState(false);
    }
 catch (    QBRTCSessionIsAbsentException e) {
      Log.d(CALL_INTEGRATION,e.getMessage() + ""String_Node_Str"");
    }
  }
}","@Override protected void onStop(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  super.onStop();
  if (videoChatHelper != null) {
    try {
      videoChatHelper.setCamState(false);
    }
 catch (    QBRTCSessionIsAbsentException e) {
      Log.d(CALL_INTEGRATION,e.getMessage() + ""String_Node_Str"");
    }
  }
}",0.9889415481832544
114102,"@Override public void onReceiveHangUpFromUser(Integer integer){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  showToastMessage(getString(R.string.user_hang_up_call));
}","@Override public void onReceiveHangUpFromUser(Integer integer){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (!isCleintReadyAccept) {
    waitingTasksMap.clear();
    finish();
  }
  if (currentFragment instanceof IncomingCallFragment || currentFragment instanceof OutgoingCallFragment) {
    showToastMessage(getString(R.string.user_hang_up_call));
  }
}",0.6389413988657845
114103,"@Override protected void onResume(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  super.onResume();
  if (getLocalVideoView() != null) {
    getLocalVideoView().onResume();
  }
  if (getLocalVideoView() != null) {
    getRemoteVideoView().onResume();
  }
}","@Override protected void onResume(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  super.onResume();
  if (getLocalVideoView() != null) {
    getLocalVideoView().onResume();
  }
  if (getLocalVideoView() != null) {
    getRemoteVideoView().onResume();
  }
}",0.9866156787762906
114104,"@Override protected void onPause(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  super.onPause();
  if (getLocalVideoView() != null) {
    getLocalVideoView().onPause();
  }
  if (getLocalVideoView() != null) {
    getRemoteVideoView().onPause();
  }
}","@Override protected void onPause(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  super.onPause();
  if (getLocalVideoView() != null) {
    getLocalVideoView().onPause();
  }
  if (getLocalVideoView() != null) {
    getRemoteVideoView().onPause();
  }
}",0.9864077669902912
114105,"private Runnable initHangUpCallTask(){
  return new Runnable(){
    @Override public void run(){
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      try {
        videoChatHelper.hangUpCall(userInfo);
      }
 catch (      QBRTCSessionIsAbsentException e) {
        Log.d(CALL_INTEGRATION,e.getMessage() + ""String_Node_Str"");
      }
    }
  }
;
}","private Runnable initHangUpCallTask(){
  return new Runnable(){
    @Override public void run(){
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      try {
        videoChatHelper.hangUpCall(userInfo);
      }
 catch (      QBRTCSessionIsAbsentException e) {
        CallActivity.this.finish();
        Log.d(CALL_INTEGRATION,e.getMessage() + ""String_Node_Str"");
      }
    }
  }
;
}",0.9510869565217392
114106,"@Override protected void onDestroy(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  cancelPlayer();
  super.onDestroy();
  if (QBRTCClient.isInitiated()) {
    QBRTCClient.getInstance().close(true);
  }
  if (videoChatHelper != null) {
    videoChatHelper.setClientClosed();
    videoChatHelper.removeVideoChatHelperListener(this);
  }
}","@Override protected void onDestroy(){
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + this);
  stopIncomeCallTimer();
  cancelPlayer();
  if (QBRTCClient.isInitiated()) {
    QBRTCClient.getInstance().close(true);
  }
  if (videoChatHelper != null) {
    videoChatHelper.setClientClosed();
    videoChatHelper.removeVideoChatHelperListener(this);
  }
  super.onDestroy();
}",0.8954802259887006
114107,"public void stopCall(){
  if (outgoingCallFragmentInterface != null) {
    outgoingCallFragmentInterface.hungUpClick();
  }
  stopTimer();
}","public void stopCall(){
  if (outgoingCallFragmentInterface != null) {
    outgoingCallFragmentInterface.hungUpClick();
  }
  stopTimer();
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + getActivity());
}",0.8211143695014663
114108,"@Override public void onChange(boolean selfChange){
  selectedPositionList=dialogsListView.getFirstVisiblePosition();
  initCursorLoaders();
}","@Override public void onChange(boolean selfChange){
  initCursorLoaders();
}",0.6972477064220184
114109,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long arg3){
  Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
  QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
  if (dialog.getType() == QBDialogType.PRIVATE) {
    startPrivateChatActivity(dialog);
  }
 else {
    startGroupChatActivity(dialog);
  }
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long arg3){
  Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
  QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
  if (dialog.getType() == QBDialogType.PRIVATE) {
    startPrivateChatActivity(dialog);
  }
 else {
    startGroupChatActivity(dialog);
  }
  selectedPositionList=position;
}",0.958490566037736
114110,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_dialogs_list,container,false);
  initUI(view);
  initListeners();
  Crouton.cancelAllCroutons();
  addActions();
  initCursorLoaders();
  registerForContextMenu(dialogsListView);
  registerContentObservers();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_dialogs_list,container,false);
  if (savedInstanceState != null) {
    selectedPositionList=savedInstanceState.getInt(ConstsCore.LAST_CLICKED_DIALOG);
  }
  initUI(view);
  initListeners();
  Crouton.cancelAllCroutons();
  addActions();
  initCursorLoaders();
  registerForContextMenu(dialogsListView);
  registerContentObservers();
  return view;
}",0.8594104308390023
114111,"private void initListeners(){
  dialogsListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long arg3){
      Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
      QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
      if (dialog.getType() == QBDialogType.PRIVATE) {
        startPrivateChatActivity(dialog);
      }
 else {
        startGroupChatActivity(dialog);
      }
    }
  }
);
}","private void initListeners(){
  dialogsListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long arg3){
      Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
      QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
      if (dialog.getType() == QBDialogType.PRIVATE) {
        startPrivateChatActivity(dialog);
      }
 else {
        startGroupChatActivity(dialog);
      }
      selectedPositionList=position;
    }
  }
);
}",0.967572304995618
114112,"private void registerContentObservers(){
  userTableContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      selectedPositionList=dialogsListView.getFirstVisiblePosition();
      initCursorLoaders();
    }
  }
;
  baseActivity.getContentResolver().registerContentObserver(UserTable.CONTENT_URI,true,userTableContentObserver);
}","private void registerContentObservers(){
  userTableContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      initCursorLoaders();
    }
  }
;
  baseActivity.getContentResolver().registerContentObserver(UserTable.CONTENT_URI,true,userTableContentObserver);
}",0.9008498583569404
114113,"private void saveOpeningDialogData(int userId,String dialogId){
  PrefsHelper prefsHelper=PrefsHelper.getPrefsHelper();
  if (userId != ConstsCore.ZERO_INT_VALUE && !TextUtils.isEmpty(dialogId)) {
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_USER_ID,userId);
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_DIALOG_ID,dialogId);
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,true);
  }
 else {
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  }
}","private void saveOpeningDialogData(int userId,String dialogId){
  PrefsHelper prefsHelper=PrefsHelper.getPrefsHelper();
  if (userId != ConstsCore.ZERO_INT_VALUE && !TextUtils.isEmpty(dialogId)) {
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_USER_ID,userId);
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_DIALOG_ID,dialogId);
    Log.d(""String_Node_Str"",""String_Node_Str"");
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,true);
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  }
}",0.9165217391304348
114114,"@Override protected void onResume(){
  super.onResume();
  boolean isNeedToOpenDialog=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  if (isNeedToOpenDialog) {
    finish();
  }
  if (skipMessages == ConstsCore.ZERO_INT_VALUE) {
    startLoadDialogMessages();
  }
 else {
  }
}","@Override protected void onResume(){
  super.onResume();
  boolean isNeedToOpenDialog=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  if (isNeedToOpenDialog) {
  }
  if (skipMessages == ConstsCore.ZERO_INT_VALUE) {
    startLoadDialogMessages();
  }
 else {
  }
}",0.9780564263322884
114115,"@Override public void onChange(boolean selfChange){
  selectedPositionList=dialogsListView.getFirstVisiblePosition();
  initCursorLoaders();
}","@Override public void onChange(boolean selfChange){
  initCursorLoaders();
}",0.6972477064220184
114116,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long arg3){
  Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
  QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
  if (dialog.getType() == QBDialogType.PRIVATE) {
    startPrivateChatActivity(dialog);
  }
 else {
    startGroupChatActivity(dialog);
  }
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long arg3){
  Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
  QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
  if (dialog.getType() == QBDialogType.PRIVATE) {
    startPrivateChatActivity(dialog);
  }
 else {
    startGroupChatActivity(dialog);
  }
  selectedPositionList=position;
}",0.958490566037736
114117,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_dialogs_list,container,false);
  initUI(view);
  initListeners();
  Crouton.cancelAllCroutons();
  addActions();
  initCursorLoaders();
  registerForContextMenu(dialogsListView);
  registerContentObservers();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_dialogs_list,container,false);
  if (savedInstanceState != null) {
    selectedPositionList=savedInstanceState.getInt(ConstsCore.LAST_CLICKED_DIALOG);
  }
  initUI(view);
  initListeners();
  Crouton.cancelAllCroutons();
  addActions();
  initCursorLoaders();
  registerForContextMenu(dialogsListView);
  registerContentObservers();
  return view;
}",0.8594104308390023
114118,"private void initListeners(){
  dialogsListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long arg3){
      Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
      QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
      if (dialog.getType() == QBDialogType.PRIVATE) {
        startPrivateChatActivity(dialog);
      }
 else {
        startGroupChatActivity(dialog);
      }
    }
  }
);
}","private void initListeners(){
  dialogsListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long arg3){
      Cursor selectedChatCursor=(Cursor)dialogsAdapter.getItem(position);
      QBDialog dialog=ChatDatabaseManager.getDialogFromCursor(selectedChatCursor);
      if (dialog.getType() == QBDialogType.PRIVATE) {
        startPrivateChatActivity(dialog);
      }
 else {
        startGroupChatActivity(dialog);
      }
      selectedPositionList=position;
    }
  }
);
}",0.967572304995618
114119,"private void registerContentObservers(){
  userTableContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      selectedPositionList=dialogsListView.getFirstVisiblePosition();
      initCursorLoaders();
    }
  }
;
  baseActivity.getContentResolver().registerContentObserver(UserTable.CONTENT_URI,true,userTableContentObserver);
}","private void registerContentObservers(){
  userTableContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      initCursorLoaders();
    }
  }
;
  baseActivity.getContentResolver().registerContentObserver(UserTable.CONTENT_URI,true,userTableContentObserver);
}",0.9008498583569404
114120,"private void startDialog(){
  PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  String dialogId=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_DIALOG_ID,null);
  long userId=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_USER_ID,ConstsCore.NOT_INITIALIZED_VALUE);
  QBDialog dialog=ChatDatabaseManager.getDialogByDialogId(this,dialogId);
  if (dialog.getType() == QBDialogType.PRIVATE) {
    startPrivateChatActivity(dialog,userId);
  }
 else {
    startGroupChatActivity(dialog);
  }
}","private void startDialog(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  String dialogId=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_DIALOG_ID,null);
  long userId=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_USER_ID,ConstsCore.NOT_INITIALIZED_VALUE);
  QBDialog dialog=ChatDatabaseManager.getDialogByDialogId(this,dialogId);
  if (dialog.getType() == QBDialogType.PRIVATE) {
    startPrivateChatActivity(dialog,userId);
  }
 else {
    startGroupChatActivity(dialog);
  }
}",0.9614740368509213
114121,"@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(QBServiceConsts.UPDATE_DIALOG)) {
    updateDialogData();
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(QBServiceConsts.UPDATE_DIALOG)) {
  }
}",0.9183673469387756
114122,"protected void scrollListView(){
  if (isNeedToScrollMessages) {
    isNeedToScrollMessages=false;
    messagesListView.setSelection(messagesAdapter.getCount() - 1);
  }
}","protected void scrollListView(){
  isNeedToScrollMessages=false;
  messagesListView.setSelection(messagesAdapter.getCount() - 1);
}",0.8675496688741722
114123,"@Override protected void onResume(){
  super.onResume();
  boolean isNeedToOpenDialog=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  if (isNeedToOpenDialog) {
  }
}","@Override protected void onResume(){
  super.onResume();
  boolean isNeedToOpenDialog=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  if (isNeedToOpenDialog) {
  }
  if (skipMessages == ConstsCore.ZERO_INT_VALUE) {
    startLoadDialogMessages();
  }
 else {
  }
}",0.8136882129277566
114124,"private void initUI(){
  emojisFragment=_findViewById(R.id.emojicons_fragment);
  chatEditText=_findViewById(R.id.message_edittext);
  messagesListView=_findViewById(R.id.messages_listview);
  messageEditText=_findViewById(R.id.message_edittext);
  sendButton=_findViewById(R.id.send_button);
  smilePanelImageButton=_findViewById(R.id.smile_panel_imagebutton);
  sendButton.setEnabled(false);
  messageTextView=_findViewById(R.id.message_textview);
  messageTypingView=_findViewById(R.id.message_typing_view);
  messageTypingBoxImageView=_findViewById(R.id.message_typing_box_imageview);
  messageTypingAnimationDrawable=(AnimationDrawable)messageTypingBoxImageView.getDrawable();
  loadMoreView=_findViewById(R.id.load_more_linearlayout);
  loadMoreView.setVisibility(View.GONE);
  messagesListView.setOnScrollListener(this);
}","private void initUI(){
  emojisFragment=_findViewById(R.id.emojicons_fragment);
  chatEditText=_findViewById(R.id.message_edittext);
  messagesListView=_findViewById(R.id.messages_listview);
  messageEditText=_findViewById(R.id.message_edittext);
  sendButton=_findViewById(R.id.send_button);
  smilePanelImageButton=_findViewById(R.id.smile_panel_imagebutton);
  sendButton.setEnabled(false);
  messageTextView=_findViewById(R.id.message_textview);
  messageTypingView=_findViewById(R.id.message_typing_view);
  messageTypingBoxImageView=_findViewById(R.id.message_typing_box_imageview);
  messageTypingAnimationDrawable=(AnimationDrawable)messageTypingBoxImageView.getDrawable();
  messagesListView.setOnScrollListener(this);
}",0.9358151476251604
114125,"@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  firstVisiblePosition=firstVisibleItem;
}","@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  firstVisiblePosition=firstVisibleItem;
  lastVisiblePosition=firstVisibleItem + visibleItemCount;
  this.visibleItemCount=visibleItemCount;
}",0.7518427518427518
114126,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor messagesCursor){
  if (messagesAdapter == null) {
    initListView(messagesCursor);
  }
 else {
    messagesAdapter.swapCursor(messagesCursor);
  }
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor messagesCursor){
  if (messagesAdapter == null) {
    initListView(messagesCursor);
  }
 else {
    messagesAdapter.changeCursor(messagesCursor);
    if (totalEntries > 0) {
      messagesListView.setSelection(totalEntries);
    }
  }
}",0.7388781431334622
114127,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  rootView=getLayoutInflater().inflate(layoutResID,null);
  setContentView(rootView);
  resources=getResources();
  imageUtils=new ImageUtils(this);
  loadAttachFileSuccessAction=new LoadAttachFileSuccessAction();
  loadDialogMessagesSuccessAction=new LoadDialogMessagesSuccessAction();
  loadDialogMessagesFailAction=new LoadDialogMessagesFailAction();
  typingTimer=new Timer();
  initUI();
  initListeners();
  initActionBar();
  addActions();
  isNeedToScrollMessages=true;
  initLocalBroadcastManagers();
  hideSmileLayout();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  rootView=getLayoutInflater().inflate(layoutResID,null);
  setContentView(rootView);
  resources=getResources();
  imageUtils=new ImageUtils(this);
  loadAttachFileSuccessAction=new LoadAttachFileSuccessAction();
  loadDialogMessagesSuccessAction=new LoadDialogMessagesSuccessAction();
  loadDialogMessagesFailAction=new LoadDialogMessagesFailAction();
  typingTimer=new Timer();
  isNeedToScrollMessages=true;
  initUI();
  initListeners();
  initActionBar();
  addActions();
  initLocalBroadcastManagers();
  hideSmileLayout();
}",0.8887122416534181
114128,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getIntent().hasExtra(QBServiceConsts.EXTRA_ROOM_JID)) {
    dialogId=getIntent().getStringExtra(QBServiceConsts.EXTRA_ROOM_JID);
  }
  dialog=(QBDialog)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG);
  initCursorLoaders();
  startLoadDialogMessages();
  setCurrentDialog(dialog);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getIntent().hasExtra(QBServiceConsts.EXTRA_ROOM_JID)) {
    dialogId=getIntent().getStringExtra(QBServiceConsts.EXTRA_ROOM_JID);
  }
  dialog=(QBDialog)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG);
  skipMessages=ChatDatabaseManager.getAllDialogMessagesByDialogId(this,dialog.getDialogId()).getCount();
  initCursorLoaders();
  updateActionBar();
  setCurrentDialog(dialog);
}",0.8430296377607025
114129,"@Override protected void onResume(){
  super.onResume();
  updateDialogData();
  if (messagesAdapter != null && !messagesAdapter.isEmpty()) {
    scrollListView();
  }
}","@Override protected void onResume(){
  super.onResume();
}",0.5110132158590308
114130,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  friendOperationAction=new FriendOperationAction();
  opponentFriend=(User)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_OPPONENT);
  dialog=(QBDialog)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG);
  dialogId=dialog.getDialogId();
  friendCursor=UsersDatabaseManager.getFriendCursorById(this,opponentFriend.getUserId());
  initCursorLoaders();
  initActionBar();
  registerContentObservers();
  setCurrentDialog(dialog);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  friendOperationAction=new FriendOperationAction();
  opponentFriend=(User)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_OPPONENT);
  dialog=(QBDialog)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG);
  dialogId=dialog.getDialogId();
  friendCursor=UsersDatabaseManager.getFriendCursorById(this,opponentFriend.getUserId());
  skipMessages=ChatDatabaseManager.getAllDialogMessagesByDialogId(this,dialogId).getCount();
  initCursorLoaders();
  initActionBar();
  registerContentObservers();
  setCurrentDialog(dialog);
}",0.9233305853256388
114131,"@Override protected void onResume(){
  super.onResume();
  if (messagesAdapter != null && !messagesAdapter.isEmpty()) {
    scrollListView();
  }
  startLoadDialogMessages();
  currentOpponent=opponentFriend.getFullName();
  checkMessageSendingPossibility();
}","@Override protected void onResume(){
  super.onResume();
  currentOpponent=opponentFriend.getFullName();
  checkMessageSendingPossibility();
}",0.7064676616915423
114132,"private void initUI(){
  emojisFragment=_findViewById(R.id.emojicons_fragment);
  chatEditText=_findViewById(R.id.message_edittext);
  messagesListView=_findViewById(R.id.messages_listview);
  messageEditText=_findViewById(R.id.message_edittext);
  sendButton=_findViewById(R.id.send_button);
  smilePanelImageButton=_findViewById(R.id.smile_panel_imagebutton);
  sendButton.setEnabled(false);
  messageTextView=_findViewById(R.id.message_textview);
  messageTypingView=_findViewById(R.id.message_typing_view);
  messageTypingBoxImageView=_findViewById(R.id.message_typing_box_imageview);
  messageTypingAnimationDrawable=(AnimationDrawable)messageTypingBoxImageView.getDrawable();
  loadMoreView=_findViewById(R.id.load_more_linearlayout);
  loadMoreView.setVisibility(View.GONE);
}","private void initUI(){
  emojisFragment=_findViewById(R.id.emojicons_fragment);
  chatEditText=_findViewById(R.id.message_edittext);
  messagesListView=_findViewById(R.id.messages_listview);
  messageEditText=_findViewById(R.id.message_edittext);
  sendButton=_findViewById(R.id.send_button);
  smilePanelImageButton=_findViewById(R.id.smile_panel_imagebutton);
  sendButton.setEnabled(false);
  messageTextView=_findViewById(R.id.message_textview);
  messageTypingView=_findViewById(R.id.message_typing_view);
  messageTypingBoxImageView=_findViewById(R.id.message_typing_box_imageview);
  messageTypingAnimationDrawable=(AnimationDrawable)messageTypingBoxImageView.getDrawable();
  loadMoreView=_findViewById(R.id.load_more_linearlayout);
  loadMoreView.setVisibility(View.GONE);
  messagesListView.setOnScrollListener(this);
}",0.9714640198511166
114133,"@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  firstItemInList=(firstVisibleItem + totalItemCount) == totalItemCount;
  totalItemCountInList=totalItemCount;
}","@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
  firstVisiblePosition=firstVisibleItem;
}",0.7480106100795756
114134,"@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  if (scrollState == SCROLL_STATE_IDLE) {
    if (firstItemInList && !loadingMore) {
      firstVisiblePositionList=totalItemCountInList - 1;
      loadMoreItems();
    }
  }
}","@Override public void onScrollStateChanged(AbsListView view,int scrollState){
  if (scrollState == SCROLL_STATE_IDLE) {
    if (firstVisiblePosition == 0) {
      loadMoreItems();
    }
  }
}",0.8359550561797753
114135,"@Override public Bundle perform(Bundle extras) throws QBResponseException {
  QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  long lastDateLoad=extras.getLong(QBServiceConsts.EXTRA_DATE_LAST_UPDATE_HISTORY);
  int skipMessages=extras.getInt(QBServiceConsts.EXTRA_SKIP_ITEMS);
  Bundle returnedBundle=new Bundle();
  QBRequestGetBuilder customObjectRequestBuilder=new QBRequestGetBuilder();
  customObjectRequestBuilder.setPagesSkip(skipMessages);
  customObjectRequestBuilder.setPagesLimit(ConstsCore.DIALOG_MESSAGES_PER_PAGE);
  List<QBChatMessage> dialogMessagesList=baseChatHelper.getDialogMessages(customObjectRequestBuilder,returnedBundle,dialog,lastDateLoad);
  Bundle bundleResult=new Bundle();
  bundleResult.putSerializable(QBServiceConsts.EXTRA_DIALOG_MESSAGES,(java.io.Serializable)dialogMessagesList);
  bundleResult.putInt(QBServiceConsts.EXTRA_TOTAL_ENTRIES,returnedBundle.getInt(QBServiceConsts.EXTRA_TOTAL_ENTRIES));
  return bundleResult;
}","@Override public Bundle perform(Bundle extras) throws QBResponseException {
  QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  long lastDateLoad=extras.getLong(QBServiceConsts.EXTRA_DATE_LAST_UPDATE_HISTORY);
  int skipMessages=extras.getInt(QBServiceConsts.EXTRA_SKIP_ITEMS);
  Bundle returnedBundle=new Bundle();
  QBRequestGetBuilder customObjectRequestBuilder=new QBRequestGetBuilder();
  customObjectRequestBuilder.setPagesSkip(skipMessages);
  customObjectRequestBuilder.setPagesLimit(ConstsCore.DIALOG_MESSAGES_PER_PAGE);
  customObjectRequestBuilder.sortDesc(QBServiceConsts.EXTRA_DATE_SENT);
  List<QBChatMessage> dialogMessagesList=baseChatHelper.getDialogMessages(customObjectRequestBuilder,returnedBundle,dialog,lastDateLoad);
  Bundle bundleResult=new Bundle();
  bundleResult.putSerializable(QBServiceConsts.EXTRA_DIALOG_MESSAGES,(java.io.Serializable)dialogMessagesList);
  bundleResult.putInt(QBServiceConsts.EXTRA_TOTAL_ENTRIES,returnedBundle.getInt(QBServiceConsts.EXTRA_TOTAL_ENTRIES));
  return bundleResult;
}",0.9649464459591042
114136,"public List<QBChatMessage> getDialogMessages(QBRequestGetBuilder customObjectRequestBuilder,Bundle returnedBundle,QBDialog dialog,long lastDateLoad) throws QBResponseException {
  if (lastDateLoad != ConstsCore.ZERO_LONG_VALUE) {
    customObjectRequestBuilder.gt(com.quickblox.chat.Consts.MESSAGE_DATE_SENT,lastDateLoad);
  }
 else {
    deleteMessagesByDialogId(dialog.getDialogId());
  }
  List<QBChatMessage> dialogMessagesList=QBChatService.getDialogMessages(dialog,customObjectRequestBuilder,returnedBundle);
  if (dialogMessagesList != null) {
    ChatDatabaseManager.saveChatMessages(context,dialogMessagesList,dialog.getDialogId());
  }
  return dialogMessagesList;
}","public List<QBChatMessage> getDialogMessages(QBRequestGetBuilder customObjectRequestBuilder,Bundle returnedBundle,QBDialog dialog,long lastDateLoad) throws QBResponseException {
  if (lastDateLoad != ConstsCore.ZERO_LONG_VALUE) {
  }
 else {
    deleteMessagesByDialogId(dialog.getDialogId());
  }
  List<QBChatMessage> dialogMessagesList=QBChatService.getDialogMessages(dialog,customObjectRequestBuilder,returnedBundle);
  if (dialogMessagesList != null) {
    ChatDatabaseManager.saveChatMessages(context,dialogMessagesList,dialog.getDialogId());
  }
  return dialogMessagesList;
}",0.6942017474185862
114137,"@Override public void onReceiveNewSession(QBRTCSession session){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (getVideoChatHelperState() != VideoHelperStates.RTC_CLIENT_PROCESS_CALLS) {
    setVideoChatHelperState(VideoHelperStates.RTC_CLIENT_PROCESS_CALLS);
    Log.d(CALL_INTEGRATION,""String_Node_Str"");
    setCurrentSession(session);
    for (    VideoChatHelperListener listener : videoChatListenersList) {
      listener.onClientReady();
    }
  }
 else {
    sessionManager.addSession(session);
    rejectCall(getCurrentSession().getUserInfo());
  }
}","@Override public void onReceiveNewSession(QBRTCSession session){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (getVideoChatHelperState() != VideoHelperStates.RTC_CLIENT_PROCESS_CALLS) {
    setVideoChatHelperState(VideoHelperStates.RTC_CLIENT_PROCESS_CALLS);
    Log.d(CALL_INTEGRATION,""String_Node_Str"");
    setCurrentSession(session);
    for (    VideoChatHelperListener listener : videoChatListenersList) {
      listener.onClientReady();
    }
  }
 else {
    sessionManager.addSession(session);
    session.rejectCall(getCurrentSession().getUserInfo());
  }
}",0.9929453262786596
114138,"@Override protected void onResume(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  super.onResume();
}","@Override protected void onResume(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  super.onResume();
  if (getLocalVideoView() != null) {
    getLocalVideoView().onResume();
  }
  if (getLocalVideoView() != null) {
    getRemoteVideoView().onResume();
  }
}",0.5730027548209367
114139,"@Override protected void onPause(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  super.onPause();
}","@Override protected void onPause(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  super.onPause();
  if (getLocalVideoView() != null) {
    getLocalVideoView().onPause();
  }
  if (getLocalVideoView() != null) {
    getRemoteVideoView().onPause();
  }
}",0.5714285714285714
114140,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(""String_Node_Str"",""String_Node_Str"");
  QBRTCClient.getInstance().prepareToProcessCalls(this);
  canPerformLogout.set(false);
  setContentView(R.layout.activity_main_call);
  actionBar.hide();
  mediaPlayer=App.getInstance().getMediaPlayer();
  callTasksQueue=new LinkedList<>();
  videoTracksSetEnumMap=new EnumMap<>(VideoTracks.class);
  for (  VideoTracks videoTracks : VideoTracks.values()) {
    videoTracksSetEnumMap.put(videoTracks,new HashSet<Runnable>());
  }
  waitingTasksMap=new TreeMap<>();
  initCallTasksMap();
  parseIntentExtras(getIntent().getExtras());
  addAction(QBServiceConsts.SEND_PUSH_MESSAGES_FAIL_ACTION,failAction);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(""String_Node_Str"",""String_Node_Str"");
  QBRTCClient.getInstance().prepareToProcessCalls(this);
  if (getIntent().getExtras() != null) {
    parseIntentExtras(getIntent().getExtras());
  }
  canPerformLogout.set(false);
  setContentView(R.layout.activity_main_call);
  actionBar.hide();
  mediaPlayer=App.getInstance().getMediaPlayer();
  callTasksQueue=new LinkedList<>();
  videoTracksSetEnumMap=new EnumMap<>(VideoTracks.class);
  for (  VideoTracks videoTracks : VideoTracks.values()) {
    videoTracksSetEnumMap.put(videoTracks,new HashSet<Runnable>());
  }
  waitingTasksMap=new TreeMap<>();
  initCallTasksMap();
  if (call_direction_type == ConstsCore.CALL_DIRECTION_TYPE.OUTGOING) {
    startCall();
  }
  addAction(QBServiceConsts.SEND_PUSH_MESSAGES_FAIL_ACTION,failAction);
}",0.8626974483596598
114141,"public void startCall(){
  if (!waitingTasksMap.containsKey(REJECT_CALL_TASK)) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Runnable callTask=callTasksMap.get(START_CALL_TASK);
    executeCallTask(callTask);
  }
}","public void startCall(){
  if (waitingTasksMap != null && !waitingTasksMap.containsKey(REJECT_CALL_TASK)) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Runnable callTask=callTasksMap.get(START_CALL_TASK);
    executeCallTask(callTask);
  }
}",0.9426751592356688
114142,"@Override public void onStart(){
  Log.d(TAG,""String_Node_Str"");
  super.onStart();
  if (!callIsStarted) {
    Log.d(CALL_INTEGRATION,""String_Node_Str"");
    QBRTCClient.getInstance().addConnectionCallbacksListener(this);
  }
  Log.d(CALL_INTEGRATION,""String_Node_Str"" + getArguments());
  if (getArguments() != null) {
    ConstsCore.CALL_DIRECTION_TYPE directionType=(ConstsCore.CALL_DIRECTION_TYPE)getArguments().getSerializable(ConstsCore.CALL_DIRECTION_TYPE_EXTRA);
    if (directionType == ConstsCore.CALL_DIRECTION_TYPE.OUTGOING && !callIsStarted) {
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      ((CallActivity)getActivity()).startCall();
      callIsStarted=true;
    }
  }
}","@Override public void onStart(){
  Log.d(TAG,""String_Node_Str"");
  super.onStart();
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  QBRTCClient.getInstance().addConnectionCallbacksListener(this);
}",0.4409448818897638
114143,"@Override public void onStop(){
  super.onStop();
}","@Override public void onStop(){
  super.onStop();
  QBRTCClient.getInstance().removeConnectionCallbacksListener(this);
}",0.5964912280701754
114144,"/** 
 * Start call logic
 */
public void startCall(Map<String,String> userInfo,List<Integer> opponents,QBRTCTypes.QBConferenceType qbConferenceType){
  if (getVideoChatHelperState() == VideoHelperStates.WAIT_FOR_CALL) {
    setVideoChatHelperState(VideoHelperStates.RECIVE_INCOME_CALL_MESSAGE);
    Log.d(CALL_INTEGRATION,""String_Node_Str"");
    if (isClientClosed) {
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      setUpCallClient();
    }
    QBRTCSession newSessionWithOpponents=QBRTCClient.getInstance().createNewSessionWithOpponents(opponents,qbConferenceType);
    setCurrentSession(newSessionWithOpponents);
    newSessionWithOpponents.startCall(userInfo);
  }
}","/** 
 * Start call logic
 */
public void startCall(Map<String,String> userInfo,List<Integer> opponents,QBRTCTypes.QBConferenceType qbConferenceType){
  if (getVideoChatHelperState() == VideoHelperStates.WAIT_FOR_CALL) {
    setVideoChatHelperState(VideoHelperStates.RTC_CLIENT_PROCESS_CALLS);
    Log.d(CALL_INTEGRATION,""String_Node_Str"");
    if (isClientClosed) {
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      setUpCallClient();
    }
    QBRTCSession newSessionWithOpponents=QBRTCClient.getInstance().createNewSessionWithOpponents(opponents,qbConferenceType);
    setCurrentSession(newSessionWithOpponents);
    newSessionWithOpponents.startCall(userInfo);
  }
}",0.9748148148148148
114145,"@Override public void onReceiveNewSession(QBRTCSession session){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (getVideoChatHelperState() != VideoHelperStates.RTC_CLIENT_PROCESS_CALLS) {
    setVideoChatHelperState(VideoHelperStates.RTC_CLIENT_PROCESS_CALLS);
    Log.d(CALL_INTEGRATION,""String_Node_Str"");
    setCurrentSession(session);
    for (    VideoChatHelperListener listener : videoChatListenersList) {
      listener.onClientReady();
    }
  }
 else {
    sessionManager.addSession(session);
    session.rejectCall(getCurrentSession().getUserInfo());
  }
}","@Override public void onReceiveNewSession(QBRTCSession session){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (getVideoChatHelperState().ordinal() < VideoHelperStates.RTC_CLIENT_PROCESS_CALLS.ordinal()) {
    setVideoChatHelperState(VideoHelperStates.RTC_CLIENT_PROCESS_CALLS);
    Log.d(CALL_INTEGRATION,""String_Node_Str"");
    setCurrentSession(session);
    for (    VideoChatHelperListener listener : videoChatListenersList) {
      listener.onClientReady();
    }
  }
 else {
    sessionManager.addSession(session);
    session.rejectCall(getCurrentSession().getUserInfo());
  }
}",0.9784668389319552
114146,"@Override public void onReceiveCallFromUser(Integer integer,QBRTCSessionDescription qbrtcSessionDescription,SessionDescription sessionDescription){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (activityClass != null) {
    if (getVideoChatHelperState() == VideoHelperStates.WAIT_FOR_CALL) {
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      setVideoChatHelperState(VideoHelperStates.RECIVE_INCOME_CALL_MESSAGE);
      startCallActivity(qbrtcSessionDescription);
    }
 else {
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
    }
  }
 else {
    Log.d(CALL_INTEGRATION,""String_Node_Str"");
  }
}","@Override public void onReceiveCallFromUser(Integer integer,QBRTCSessionDescription qbrtcSessionDescription,SessionDescription sessionDescription){
  Log.d(CALL_INTEGRATION,""String_Node_Str"");
  if (activityClass != null) {
    if (getVideoChatHelperState().ordinal() < VideoHelperStates.RECIVE_INCOME_CALL_MESSAGE.ordinal()) {
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
      setVideoChatHelperState(VideoHelperStates.RECIVE_INCOME_CALL_MESSAGE);
      startCallActivity(qbrtcSessionDescription);
    }
 else {
      Log.d(CALL_INTEGRATION,""String_Node_Str"");
    }
  }
 else {
    Log.d(CALL_INTEGRATION,""String_Node_Str"");
  }
}",0.784219001610306
114147,"private void parseIntentExtras(Bundle extras){
  call_direction_type=(ConstsCore.CALL_DIRECTION_TYPE)extras.getSerializable(ConstsCore.CALL_DIRECTION_TYPE_EXTRA);
  call_type=(QBRTCTypes.QBConferenceType)extras.getSerializable(ConstsCore.CALL_TYPE_EXTRA);
  sessionId=extras.getString(""String_Node_Str"",""String_Node_Str"");
  opponent=(User)extras.getSerializable(ConstsCore.EXTRA_FRIEND);
  Log.i(TAG,""String_Node_Str"" + opponent);
}","private void parseIntentExtras(Bundle extras){
  call_direction_type=(ConstsCore.CALL_DIRECTION_TYPE)extras.getSerializable(ConstsCore.CALL_DIRECTION_TYPE_EXTRA);
  call_type=(QBRTCTypes.QBConferenceType)extras.getSerializable(ConstsCore.CALL_TYPE_EXTRA);
  sessionId=extras.getString(ConstsCore.SESSION_ID,""String_Node_Str"");
  opponent=(User)extras.getSerializable(ConstsCore.EXTRA_FRIEND);
  Log.i(TAG,""String_Node_Str"" + opponent);
}",0.9563218390804598
114148,"@Override protected void onStart(){
  super.onStart();
  if (videoChatHelper != null) {
    videoChatHelper.setCamState(true);
    videoChatHelper.removeVideoChatHelperListener(this);
  }
}","@Override protected void onStart(){
  super.onStart();
  if (videoChatHelper != null) {
    videoChatHelper.setCamState(true);
    videoChatHelper.addVideoChatHelperListener(this);
  }
}",0.976
114149,"@Override public void onLocalVideoTrackReceive(final QBRTCVideoTrack videoTrack){
  if (getLocalVideoView() == null) {
    onVideoViewWaitTaskList.add(initLocalVideoTrackTask(videoTrack));
  }
 else {
    initLocalVideoTrack(videoTrack);
  }
}","@Override public void onLocalVideoTrackReceive(final QBRTCVideoTrack videoTrack){
  if (getLocalVideoView() == null) {
    videoTracksSetEnumMap.get(VideoTracks.LOCAL_VIDEO_TRACK).add(initLocalVideoTrackTask(videoTrack));
  }
 else {
    initLocalVideoTrack(videoTrack);
  }
}",0.8477842003853564
114150,"@Override public void onRemoteVideoTrackReceive(final QBRTCVideoTrack videoTrack,Integer userID){
  if (getRemoteVideoView() == null) {
    onVideoViewWaitTaskList.add(initRemoteVideoTrackTask(videoTrack));
  }
 else {
    initRemoteVideoTrack(videoTrack);
  }
}","@Override public void onRemoteVideoTrackReceive(final QBRTCVideoTrack videoTrack,Integer userID){
  if (getRemoteVideoView() == null) {
    videoTracksSetEnumMap.get(VideoTracks.REMOTE_VIDEO_TRACK).add(initRemoteVideoTrackTask(videoTrack));
  }
 else {
    initRemoteVideoTrack(videoTrack);
  }
}",0.8566308243727598
114151,"private Runnable initSwitchSpeakerTask(){
  return new Runnable(){
    @Override public void run(){
      Log.d(""String_Node_Str"",""String_Node_Str"");
      boolean result=videoChatHelper.switchMic();
    }
  }
;
}","private Runnable initSwitchSpeakerTask(){
  return new Runnable(){
    @Override public void run(){
      Log.d(""String_Node_Str"",""String_Node_Str"");
      videoChatHelper.switchMic();
    }
  }
;
}",0.9635036496350364
114152,"public void setLocalVideoView(QBGLVideoView videoView){
  this.localVideoView=videoView;
  onVideoViewCreated();
}","public void setLocalVideoView(QBGLVideoView videoView){
  this.localVideoView=videoView;
  onLocalVideoViewCreated();
}",0.9785407725321889
114153,"public void startIncomeCallTimer(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (singleTheadScheduledExecutor == null) {
    initIncommingCallTask();
  }
  closeIncomeCallFutureTask=singleTheadScheduledExecutor.schedule(closeIncomeCallTimerTask,QBRTCConfig.getAnswerTimeInterval(),TimeUnit.SECONDS);
}","public void startIncomeCallTimer(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (singleTheadScheduledExecutor == null) {
    initIncomingCallTask();
  }
  closeIncomeCallFutureTask=singleTheadScheduledExecutor.schedule(closeIncomeCallTimerTask,QBRTCConfig.getAnswerTimeInterval(),TimeUnit.SECONDS);
}",0.9983739837398374
114154,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(""String_Node_Str"",""String_Node_Str"");
  QBRTCClient.getInstance().prepareToProcessCalls(this);
  canPerformLogout.set(false);
  setContentView(R.layout.activity_main_call);
  actionBar.hide();
  mediaPlayer=App.getInstance().getMediaPlayer();
  callTasksHandler=new Handler();
  callTasksQueue=new LinkedList<>();
  onVideoViewWaitTaskList=new LinkedList<>();
  waitingTasksMap=new TreeMap<>();
  parseIntentExtras(getIntent().getExtras());
  initCallTasksMap();
  addAction(QBServiceConsts.SEND_PUSH_MESSAGES_FAIL_ACTION,failAction);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(""String_Node_Str"",""String_Node_Str"");
  QBRTCClient.getInstance().prepareToProcessCalls(this);
  canPerformLogout.set(false);
  setContentView(R.layout.activity_main_call);
  actionBar.hide();
  mediaPlayer=App.getInstance().getMediaPlayer();
  callTasksQueue=new LinkedList<>();
  videoTracksSetEnumMap=new EnumMap<>(VideoTracks.class);
  for (  VideoTracks videoTracks : VideoTracks.values()) {
    videoTracksSetEnumMap.put(videoTracks,new HashSet<Runnable>());
  }
  waitingTasksMap=new TreeMap<>();
  initCallTasksMap();
  parseIntentExtras(getIntent().getExtras());
  addAction(QBServiceConsts.SEND_PUSH_MESSAGES_FAIL_ACTION,failAction);
}",0.7874015748031497
114155,"@Override protected void onDestroy(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  cancelPlayer();
  super.onDestroy();
  if (QBRTCClient.isInitiated()) {
    QBRTCClient.getInstance().close(true);
  }
  if (videoChatHelper != null) {
    videoChatHelper.removeVideoChatHelperListener(this);
    videoChatHelper.disposeAllResources();
    videoChatHelper.setClientClosed();
  }
}","@Override protected void onDestroy(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  cancelPlayer();
  super.onDestroy();
  if (QBRTCClient.isInitiated()) {
    QBRTCClient.getInstance().close(true);
  }
  if (videoChatHelper != null) {
    videoChatHelper.setClientClosed();
  }
}",0.8493975903614458
114156,"private Runnable initRejectCallTask(){
  return new Runnable(){
    @Override public void run(){
      Log.d(""String_Node_Str"",""String_Node_Str"");
      cancelPlayer();
      videoChatHelper.rejectCall(userInfo);
      finish();
    }
  }
;
}","private Runnable initRejectCallTask(){
  return new Runnable(){
    @Override public void run(){
      Log.d(""String_Node_Str"",""String_Node_Str"");
      cancelPlayer();
      videoChatHelper.rejectCall(userInfo);
    }
  }
;
}",0.9658119658119658
114157,"public void setRemoteVideoView(QBGLVideoView videoView){
  this.remoteVideoView=videoView;
  onVideoViewCreated();
}","public void setRemoteVideoView(QBGLVideoView videoView){
  this.remoteVideoView=videoView;
  onRemoteVideoViewCreated();
}",0.9747899159663864
114158,"private Runnable initStartCallTask(){
  final List<Integer> opponents=new ArrayList<>();
  opponents.add(opponent.getUserId());
  return new Runnable(){
    @Override public void run(){
      Log.d(""String_Node_Str"",""String_Node_Str"");
      videoChatHelper.startCall(userInfo,opponents,call_type);
    }
  }
;
}","private Runnable initStartCallTask(){
  return new Runnable(){
    @Override public void run(){
      final List<Integer> opponents=new ArrayList<>();
      opponents.add(opponent.getUserId());
      Log.d(""String_Node_Str"",""String_Node_Str"");
      videoChatHelper.startCall(userInfo,opponents,call_type);
    }
  }
;
}",0.7025316455696202
114159,"@Override public void onClick(View v){
  ((CallActivity)getActivity()).stopIncomeCallTimer();
switch (v.getId()) {
case R.id.acceptCallButton:
    Log.d(TAG,""String_Node_Str"");
  accept();
break;
case R.id.denyCallButton:
Log.d(TAG,""String_Node_Str"");
reject();
break;
default :
break;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.acceptCallButton:
    Log.d(TAG,""String_Node_Str"");
  accept();
break;
case R.id.denyCallButton:
Log.d(TAG,""String_Node_Str"");
((CallActivity)getActivity()).stopIncomeCallTimer();
reject();
break;
default :
break;
}
}",0.8125
114160,"protected void showContactRequestNotification(Bundle extras){
  int senderUserId=extras.getInt(QBServiceConsts.EXTRA_USER_ID);
  senderUser=UsersDatabaseManager.getUserById(activity,senderUserId);
  String message=extras.getString(QBServiceConsts.EXTRA_MESSAGE);
  String dialogId=ChatDatabaseManager.getPrivateDialogIdByOpponentId(activity,senderUserId);
  isPrivateMessage=true;
  if (isMessagesDialogCorrect(dialogId)) {
    showNewMessageAlert(senderUser,message);
  }
}","protected void showContactRequestNotification(Bundle extras){
  int senderUserId=extras.getInt(QBServiceConsts.EXTRA_USER_ID);
  senderUser=DatabaseManager.getInstance().getUserManager().get(senderUserId);
  String message=extras.getString(QBServiceConsts.EXTRA_MESSAGE);
  String dialogId=ChatDatabaseManager.getPrivateDialogIdByOpponentId(activity,senderUserId);
  isPrivateMessage=true;
  if (isMessagesDialogCorrect(dialogId)) {
    showNewMessageAlert(senderUser,message);
  }
}",0.942528735632184
114161,"@Override public void bindView(View view,Context context,Cursor cursor){
  ViewHolder viewHolder=(ViewHolder)view.getTag();
  String avatarUrl=null;
  String senderName;
  MessageCache messageCache=ChatDatabaseManager.getMessageCacheFromCursor(cursor);
  boolean ownMessage=isOwnMessage(messageCache.getSenderId());
  boolean notificationMessage=messageCache.getMessagesNotificationType() != null;
  if (notificationMessage) {
    viewHolder.messageTextView.setText(messageCache.getMessage());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
  }
 else {
    resetUI(viewHolder);
    if (ownMessage) {
      avatarUrl=getAvatarUrlForCurrentUser();
    }
 else {
      User senderFriend=UsersDatabaseManager.getUserById(context,messageCache.getSenderId());
      if (senderFriend != null) {
        senderName=senderFriend.getFullName();
        avatarUrl=getAvatarUrlForFriend(senderFriend);
      }
 else {
        senderName=messageCache.getSenderId() + ConstsCore.EMPTY_STRING;
      }
      viewHolder.nameTextView.setTextColor(getTextColor(messageCache.getSenderId()));
      viewHolder.nameTextView.setText(senderName);
    }
    if (!TextUtils.isEmpty(messageCache.getAttachUrl())) {
      viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
      setViewVisibility(viewHolder.progressRelativeLayout,View.VISIBLE);
      displayAttachImage(messageCache.getAttachUrl(),viewHolder);
    }
 else {
      setViewVisibility(viewHolder.textMessageView,View.VISIBLE);
      viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
      viewHolder.messageTextView.setText(messageCache.getMessage());
    }
  }
  if (!messageCache.isRead() && !ownMessage) {
    messageCache.setRead(true);
    QBUpdateStatusMessageCommand.start(context,dialog,messageCache,false);
  }
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
}","@Override public void bindView(View view,Context context,Cursor cursor){
  ViewHolder viewHolder=(ViewHolder)view.getTag();
  String avatarUrl=null;
  String senderName;
  MessageCache messageCache=ChatDatabaseManager.getMessageCacheFromCursor(cursor);
  boolean ownMessage=isOwnMessage(messageCache.getSenderId());
  boolean notificationMessage=messageCache.getMessagesNotificationType() != null;
  if (notificationMessage) {
    viewHolder.messageTextView.setText(messageCache.getMessage());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
  }
 else {
    resetUI(viewHolder);
    if (ownMessage) {
      avatarUrl=getAvatarUrlForCurrentUser();
    }
 else {
      User senderFriend=DatabaseManager.getInstance().getUserManager().get(messageCache.getSenderId());
      if (senderFriend != null) {
        senderName=senderFriend.getFullName();
        avatarUrl=getAvatarUrlForFriend(senderFriend);
      }
 else {
        senderName=messageCache.getSenderId() + ConstsCore.EMPTY_STRING;
      }
      viewHolder.nameTextView.setTextColor(getTextColor(messageCache.getSenderId()));
      viewHolder.nameTextView.setText(senderName);
    }
    if (!TextUtils.isEmpty(messageCache.getAttachUrl())) {
      viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
      setViewVisibility(viewHolder.progressRelativeLayout,View.VISIBLE);
      displayAttachImage(messageCache.getAttachUrl(),viewHolder);
    }
 else {
      setViewVisibility(viewHolder.textMessageView,View.VISIBLE);
      viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
      viewHolder.messageTextView.setText(messageCache.getMessage());
    }
  }
  if (!messageCache.isRead() && !ownMessage) {
    messageCache.setRead(true);
    QBUpdateStatusMessageCommand.start(context,dialog,messageCache,false);
  }
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
}",0.9787126203750632
114162,"@Override protected void onFileSelected(Uri originalUri){
  Bitmap bitmap=imageUtils.getBitmap(originalUri);
  new ReceiveFileFromBitmapTask(PrivateDialogActivity.this).execute(imageUtils,bitmap,true);
}","@Override protected void onFileSelected(Bitmap bitmap){
  new ReceiveFileFromBitmapTask(PrivateDialogActivity.this).execute(imageUtils,bitmap,true);
}",0.8441926345609065
114163,"private void showRejectUserDialog(final int userId){
  User user=UsersDatabaseManager.getUserById(this,userId);
  AlertDialog alertDialog=AlertDialog.newInstance(getResources().getString(R.string.frl_dlg_reject_friend,user.getFullName()));
  alertDialog.setPositiveButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      showProgress();
      QBRejectFriendCommand.start(PrivateDialogActivity.this,userId);
    }
  }
);
  alertDialog.setNegativeButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  alertDialog.show(getFragmentManager(),null);
}","private void showRejectUserDialog(final int userId){
  User user=DatabaseManager.getInstance().getUserManager().get(userId);
  AlertDialog alertDialog=AlertDialog.newInstance(getResources().getString(R.string.frl_dlg_reject_friend,user.getFullName()));
  alertDialog.setPositiveButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      showProgress();
      QBRejectFriendCommand.start(PrivateDialogActivity.this,userId);
    }
  }
);
  alertDialog.setNegativeButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  alertDialog.show(getFragmentManager(),null);
}",0.9527170077628794
114164,"private void checkMessageSendingPossibility(){
  boolean isFriend=UsersDatabaseManager.isFriendInBase(PrivateDialogActivity.this,opponentFriend.getUserId());
  messageEditText.setEnabled(isFriend);
  smilePanelImageButton.setEnabled(isFriend);
}","private void checkMessageSendingPossibility(){
  boolean isFriend=DatabaseManager.getInstance().getFriendManager().getByUserId(opponentFriend.getUserId()) != null;
  messageEditText.setEnabled(isFriend);
  smilePanelImageButton.setEnabled(isFriend);
}",0.75
114165,"private void initActionBar(){
  actionBar.setTitle(opponentFriend.getFullName());
  actionBar.setLogo(R.drawable.placeholder_user);
  if (!TextUtils.isEmpty(opponentFriend.getAvatar())) {
    loadLogoActionBar(opponentFriend.getAvatar());
  }
}","private void initActionBar(){
  actionBar.setTitle(opponentFriend.getFullName());
  actionBar.setSubtitle(OnlineStatusHelper.getOnlineStatus(opponentFriend.isOnline()));
  actionBar.setLogo(R.drawable.placeholder_user);
  if (!TextUtils.isEmpty(opponentFriend.getAvatar())) {
    loadLogoActionBar(opponentFriend.getAvatar());
  }
}",0.8472222222222222
114166,"private void setOnlineStatus(User friend){
  if (friend != null) {
    ActionBar actionBar=getActionBar();
  }
}","private void setOnlineStatus(User friend){
  if (friend != null) {
    ActionBar actionBar=getActionBar();
    actionBar.setSubtitle(OnlineStatusHelper.getOnlineStatus(friend.isOnline()));
  }
}",0.7320261437908496
114167,"private void registerContentObservers(){
  statusContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      opponentFriend=UsersDatabaseManager.getUserById(PrivateDialogActivity.this,PrivateDialogActivity.this.opponentFriend.getUserId());
      setOnlineStatus(opponentFriend);
    }
  }
;
  friendCursor.registerContentObserver(statusContentObserver);
  friendsTableContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      checkMessageSendingPossibility();
    }
  }
;
  getContentResolver().registerContentObserver(FriendTable.CONTENT_URI,true,friendsTableContentObserver);
}","private void registerContentObservers(){
  statusContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      opponentFriend=DatabaseManager.getInstance().getUserManager().get(PrivateDialogActivity.this.opponentFriend.getUserId());
      setOnlineStatus(opponentFriend);
    }
  }
;
  friendCursor.registerContentObserver(statusContentObserver);
  friendsTableContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      checkMessageSendingPossibility();
    }
  }
;
  getContentResolver().registerContentObserver(FriendTable.CONTENT_URI,true,friendsTableContentObserver);
}",0.935740072202166
114168,"public User getOccupantById(int occupantId){
  User friend=UsersDatabaseManager.getUserById(context,occupantId);
  if (friend == null) {
    friend=new User();
    friend.setUserId(occupantId);
    friend.setFullName(occupantId + ConstsCore.EMPTY_STRING);
  }
  return friend;
}","public User getOccupantById(int occupantId){
  User friend=DatabaseManager.getInstance().getUserManager().get(occupantId);
  if (friend == null) {
    friend=new User();
    friend.setUserId(occupantId);
    friend.setFullName(occupantId + ConstsCore.EMPTY_STRING);
  }
  return friend;
}",0.9045936395759716
114169,"private void startNewDialogPage(){
  boolean isFriends=UsersDatabaseManager.getAllFriends(baseActivity).getCount() > ConstsCore.ZERO_INT_VALUE;
  if (isFriends) {
    NewDialogActivity.start(baseActivity);
  }
 else {
    DialogUtils.showLong(baseActivity,getResources().getString(R.string.ndl_no_friends_for_new_chat));
  }
}","private void startNewDialogPage(){
  boolean isFriends=!DatabaseManager.getInstance().getFriendManager().getAll().isEmpty();
  if (isFriends) {
    NewDialogActivity.start(baseActivity);
  }
 else {
    DialogUtils.showLong(baseActivity,getResources().getString(R.string.ndl_no_friends_for_new_chat));
  }
}",0.8309636650868878
114170,"private void setOnlineStatus(User user){
  if (user != null) {
    if (user.isOnline()) {
      onlineImageView.setVisibility(View.VISIBLE);
    }
 else {
      onlineImageView.setVisibility(View.GONE);
    }
  }
}","private void setOnlineStatus(User user){
  if (user != null) {
    if (user.isOnline()) {
      onlineImageView.setVisibility(View.VISIBLE);
    }
 else {
      onlineImageView.setVisibility(View.GONE);
    }
    onlineStatusTextView.setText(OnlineStatusHelper.getOnlineStatus(user.isOnline()));
  }
}",0.8310679611650486
114171,"private void checkVisibilityItemsMyContacts(ViewHolder viewHolder,User user){
  Friend friend=DatabaseManager.getInstance().getFriendManager().getByUserId(user.getUserId());
  User pendingUser=DatabaseManager.getInstance().getUserRequestManager().getUserById(user.getUserId());
  if (friend == null && pendingUser == null) {
    return;
  }
  String status;
  if (pendingUser != null) {
    viewHolder.onlineImageView.setVisibility(View.GONE);
    status=resources.getString(R.string.frl_pending_request_status);
  }
 else {
    status=""String_Node_Str"";
  }
  viewHolder.addFriendImageView.setVisibility(View.GONE);
  viewHolder.statusTextView.setText(status);
  viewHolder.statusTextView.setVisibility(View.VISIBLE);
  setStatusVisibility(viewHolder,user.isOnline());
}","private void checkVisibilityItemsMyContacts(ViewHolder viewHolder,User user){
  Friend friend=DatabaseManager.getInstance().getFriendManager().getByUserId(user.getUserId());
  User pendingUser=DatabaseManager.getInstance().getUserRequestManager().getUserById(user.getUserId());
  if (friend == null && pendingUser == null) {
    return;
  }
  String status;
  if (pendingUser != null) {
    viewHolder.onlineImageView.setVisibility(View.GONE);
    status=resources.getString(R.string.frl_pending_request_status);
  }
 else {
    status=resources.getString(OnlineStatusHelper.getOnlineStatus(user.isOnline()));
  }
  viewHolder.addFriendImageView.setVisibility(View.GONE);
  viewHolder.statusTextView.setText(status);
  viewHolder.statusTextView.setVisibility(View.VISIBLE);
  setStatusVisibility(viewHolder,user.isOnline());
}",0.9542892924232936
114172,"private void startDialog(){
  String dialogId=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_DIALOG_ID,null);
  long userId=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_USER_ID,ConstsCore.NOT_INITIALIZED_VALUE);
  QBDialog dialog=ChatDatabaseManager.getDialogByDialogId(this,dialogId);
  if (dialog == null) {
    return;
  }
  if (dialog.getType() == QBDialogType.PRIVATE) {
    startPrivateChatActivity(dialog,userId);
  }
 else {
    startGroupChatActivity(dialog);
  }
  PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
}","private void startDialog(){
  String dialogId=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_DIALOG_ID,null);
  int userId=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_USER_ID,ConstsCore.NOT_INITIALIZED_VALUE);
  QBDialog dialog=ChatDatabaseManager.getDialogByDialogId(this,dialogId);
  if (dialog == null) {
    return;
  }
  if (dialog.getType() == QBDialogType.PRIVATE) {
    startPrivateChatActivity(dialog,userId);
  }
 else {
    startGroupChatActivity(dialog);
  }
  PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
}",0.9959250203748982
114173,"private void startPrivateChatActivity(QBDialog dialog,long userId){
  User occupantUser=UsersDatabaseManager.getUserById(this,userId);
  if (occupantUser != null && userId != ConstsCore.ZERO_INT_VALUE) {
    PrivateDialogActivity.start(this,occupantUser,dialog);
  }
}","private void startPrivateChatActivity(QBDialog dialog,int userId){
  User occupantUser=DatabaseManager.getInstance().getUserManager().get(userId);
  if (occupantUser != null && userId != ConstsCore.ZERO_INT_VALUE) {
    PrivateDialogActivity.start(this,occupantUser,dialog);
  }
}",0.8941605839416058
114174,"private void initLocalBroadcastManagers(){
  typingMessageBroadcastReceiver=new TypingStatusBroadcastReceiver();
  LocalBroadcastManager.getInstance(this).registerReceiver(typingMessageBroadcastReceiver,new IntentFilter(QBServiceConsts.TYPING_MESSAGE));
  updatingDialogBroadcastReceiver=new UpdatingDialogBroadcastReceiver();
  LocalBroadcastManager.getInstance(this).registerReceiver(updatingDialogBroadcastReceiver,new IntentFilter(QBServiceConsts.UPDATE_DIALOG));
}","private void initLocalBroadcastManagers(){
  BroadcastReceiver typingMessageBroadcastReceiver=new TypingStatusBroadcastReceiver();
  LocalBroadcastManager.getInstance(this).registerReceiver(typingMessageBroadcastReceiver,new IntentFilter(QBServiceConsts.TYPING_MESSAGE));
  BroadcastReceiver updatingDialogBroadcastReceiver=new UpdatingDialogBroadcastReceiver();
  LocalBroadcastManager.getInstance(this).registerReceiver(updatingDialogBroadcastReceiver,new IntentFilter(QBServiceConsts.UPDATE_DIALOG));
}",0.9630390143737166
114175,"@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(QBServiceConsts.UPDATE_DIALOG)) {
    updateDialogData();
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(QBServiceConsts.UPDATE_DIALOG)) {
    updateData();
  }
}",0.9807692307692308
114176,"private void deleteObservers(){
  databaseManager.getMessageManager().deleteObserver(messageObserver);
}","private void deleteObservers(){
  databaseManager.getMessageManager().deleteObserver(messageObserver);
  databaseManager.getDialogNotificationManager().deleteObserver(dialogNotificationObserver);
}",0.6910299003322259
114177,"@Override public void update(Observable observable,Object data){
  if (data != null && data.equals(MessageManager.OBSERVE_MESSAGE)) {
    updateMessagesList();
  }
}","@Override public void update(Observable observable,Object data){
  if (data != null && data.equals(DialogNotificationManager.OBSERVE_DIALOG_NOTIFICATION)) {
    updateMessagesList();
  }
}",0.8781869688385269
114178,"private void addObservers(){
  databaseManager.getMessageManager().addObserver(messageObserver);
}","private void addObservers(){
  databaseManager.getMessageManager().addObserver(messageObserver);
  databaseManager.getDialogNotificationManager().addObserver(dialogNotificationObserver);
}",0.6853146853146853
114179,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  rootView=getLayoutInflater().inflate(layoutResID,null);
  setContentView(rootView);
  resources=getResources();
  databaseManager=DatabaseManager.getInstance();
  imageUtils=new ImageUtils(this);
  loadAttachFileSuccessAction=new LoadAttachFileSuccessAction();
  loadDialogMessagesSuccessAction=new LoadDialogMessagesSuccessAction();
  loadDialogMessagesFailAction=new LoadDialogMessagesFailAction();
  typingTimer=new Timer();
  messageObserver=new MessageObserver();
  initUI();
  initListeners();
  initActionBar();
  addActions();
  isNeedToScrollMessages=true;
  initLocalBroadcastManagers();
  addObservers();
  hideSmileLayout();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  rootView=getLayoutInflater().inflate(layoutResID,null);
  setContentView(rootView);
  resources=getResources();
  databaseManager=DatabaseManager.getInstance();
  imageUtils=new ImageUtils(this);
  loadAttachFileSuccessAction=new LoadAttachFileSuccessAction();
  loadDialogMessagesSuccessAction=new LoadDialogMessagesSuccessAction();
  loadDialogMessagesFailAction=new LoadDialogMessagesFailAction();
  typingTimer=new Timer();
  messageObserver=new MessageObserver();
  dialogNotificationObserver=new DialogNotificationObserver();
  initUI();
  initListeners();
  initActionBar();
  addActions();
  isNeedToScrollMessages=true;
  initLocalBroadcastManagers();
  addObservers();
  hideSmileLayout();
}",0.959011060507482
114180,"@Override protected void onDestroy(){
  super.onDestroy();
  if (baseChatHelper != null) {
    baseChatHelper.closeChat(ChatUtils.createQBDialogFromLocalDialog(dialog),generateBundleToInitDialog());
  }
  removeActions();
  deleteObservers();
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (baseChatHelper != null) {
    baseChatHelper.closeChat(ChatUtils.createQBDialogFromLocalDialog(dialog),generateBundleToInitDialog());
  }
  removeActions();
  deleteObservers();
  readAllMessages();
}",0.9587426326129664
114181,"@Override protected void onResume(){
  super.onResume();
  updateDialogData();
  if (messagesAdapter != null && !messagesAdapter.isEmpty()) {
    scrollListView();
  }
}","@Override protected void onResume(){
  super.onResume();
  updateData();
  if (messagesAdapter != null && !messagesAdapter.isEmpty()) {
    scrollListView();
  }
}",0.9819277108433736
114182,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_group_dialog_details);
  dialogId=(String)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG_ID);
  imageUtils=new ImageUtils(this);
  friendOperationAction=new FriendOperationAction();
  loadedDialogInfo=false;
  currentNotificationTypeList=new ArrayList<DialogNotification.NotificationType>();
  initUI();
  initDialogs();
  initUIWithData();
  addActions();
  initLocalBroadcastManagers();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_group_dialog_details);
  dialogId=(String)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG_ID);
  databaseManager=DatabaseManager.getInstance();
  imageUtils=new ImageUtils(this);
  friendOperationAction=new FriendOperationAction();
  loadedDialogInfo=false;
  currentNotificationTypeList=new ArrayList<DialogNotification.NotificationType>();
  initUI();
  initDialogs();
  initUIWithData();
  addActions();
  initLocalBroadcastManagers();
}",0.9569041336851364
114183,"@Override public View getView(int position,View view,ViewGroup parent){
  ViewHolder viewHolder;
  CombinationMessage combinationMessage=getItem(position);
  boolean ownMessage=!combinationMessage.isIncoming(currentQBUser.getId());
  if (view == null) {
    viewHolder=new ViewHolder();
    if (combinationMessage.getNotificationType() == null) {
      if (ownMessage) {
        view=layoutInflater.inflate(R.layout.list_item_message_own,null,true);
      }
 else {
        view=layoutInflater.inflate(R.layout.list_item_group_message_opponent,null,true);
        viewHolder.avatarImageView=(RoundedImageView)view.findViewById(R.id.avatar_imageview);
        setViewVisibility(viewHolder.avatarImageView,View.VISIBLE);
        viewHolder.nameTextView=(TextView)view.findViewById(R.id.name_textview);
        setViewVisibility(viewHolder.nameTextView,View.VISIBLE);
      }
      viewHolder.attachMessageRelativeLayout=(RelativeLayout)view.findViewById(R.id.attach_message_relativelayout);
      viewHolder.timeAttachMessageTextView=(TextView)view.findViewById(R.id.time_attach_message_textview);
      viewHolder.progressRelativeLayout=(RelativeLayout)view.findViewById(R.id.progress_relativelayout);
      viewHolder.textMessageView=view.findViewById(R.id.text_message_view);
      viewHolder.messageTextView=(EmojiTextView)view.findViewById(R.id.message_textview);
      viewHolder.attachImageView=(MaskedImageView)view.findViewById(R.id.attach_imageview);
      viewHolder.timeTextMessageTextView=(TextView)view.findViewById(R.id.time_text_message_textview);
      viewHolder.verticalProgressBar=(ProgressBar)view.findViewById(R.id.vertical_progressbar);
      viewHolder.verticalProgressBar.setProgressDrawable(context.getResources().getDrawable(R.drawable.vertical_progressbar));
      viewHolder.centeredProgressBar=(ProgressBar)view.findViewById(R.id.centered_progressbar);
    }
 else {
      view=layoutInflater.inflate(R.layout.list_item_notification_message,null,true);
      viewHolder.messageTextView=(EmojiTextView)view.findViewById(R.id.message_textview);
      viewHolder.timeTextMessageTextView=(TextView)view.findViewById(R.id.time_text_message_textview);
    }
    view.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)view.getTag();
  }
  String avatarUrl;
  String senderName;
  resetUI(viewHolder);
  if (ownMessage) {
    avatarUrl=combinationMessage.getDialogOccupant().getUser().getAvatar();
  }
 else {
    senderName=combinationMessage.getDialogOccupant().getUser().getFullName();
    avatarUrl=combinationMessage.getDialogOccupant().getUser().getAvatar();
    viewHolder.nameTextView.setTextColor(getTextColor(combinationMessage.getDialogOccupant().getUser().getUserId()));
    viewHolder.nameTextView.setText(senderName);
  }
  if (combinationMessage.getAttachment() != null) {
    viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(combinationMessage.getCreatedDate()));
    setViewVisibility(viewHolder.progressRelativeLayout,View.VISIBLE);
    displayAttachImage(combinationMessage.getAttachment().getRemoteUrl(),viewHolder);
  }
 else {
    setViewVisibility(viewHolder.textMessageView,View.VISIBLE);
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(combinationMessage.getCreatedDate()));
    viewHolder.messageTextView.setText(combinationMessage.getBody());
  }
  if (!State.READ.equals(combinationMessage.getState()) && !ownMessage) {
    combinationMessage.setState(State.READ);
    QBUpdateStatusMessageCommand.start(context,ChatUtils.createQBDialogFromLocalDialog(dialog),combinationMessage.toMessage(),true);
  }
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
  return view;
}","@Override public View getView(int position,View view,ViewGroup parent){
  ViewHolder viewHolder;
  CombinationMessage combinationMessage=getItem(position);
  boolean ownMessage=!combinationMessage.isIncoming(currentQBUser.getId());
  boolean notificationMessage=combinationMessage.getNotificationType() != null;
  if (view == null) {
    viewHolder=new ViewHolder();
    if (!notificationMessage) {
      if (ownMessage) {
        view=layoutInflater.inflate(R.layout.list_item_message_own,null,true);
      }
 else {
        view=layoutInflater.inflate(R.layout.list_item_group_message_opponent,null,true);
        viewHolder.avatarImageView=(RoundedImageView)view.findViewById(R.id.avatar_imageview);
        setViewVisibility(viewHolder.avatarImageView,View.VISIBLE);
        viewHolder.nameTextView=(TextView)view.findViewById(R.id.name_textview);
        setViewVisibility(viewHolder.nameTextView,View.VISIBLE);
      }
      viewHolder.attachMessageRelativeLayout=(RelativeLayout)view.findViewById(R.id.attach_message_relativelayout);
      viewHolder.timeAttachMessageTextView=(TextView)view.findViewById(R.id.time_attach_message_textview);
      viewHolder.progressRelativeLayout=(RelativeLayout)view.findViewById(R.id.progress_relativelayout);
      viewHolder.textMessageView=view.findViewById(R.id.text_message_view);
      viewHolder.messageTextView=(EmojiTextView)view.findViewById(R.id.message_textview);
      viewHolder.attachImageView=(MaskedImageView)view.findViewById(R.id.attach_imageview);
      viewHolder.timeTextMessageTextView=(TextView)view.findViewById(R.id.time_text_message_textview);
      viewHolder.verticalProgressBar=(ProgressBar)view.findViewById(R.id.vertical_progressbar);
      viewHolder.verticalProgressBar.setProgressDrawable(context.getResources().getDrawable(R.drawable.vertical_progressbar));
      viewHolder.centeredProgressBar=(ProgressBar)view.findViewById(R.id.centered_progressbar);
    }
 else {
      view=layoutInflater.inflate(R.layout.list_item_notification_message,null,true);
      viewHolder.messageTextView=(EmojiTextView)view.findViewById(R.id.message_textview);
      viewHolder.timeTextMessageTextView=(TextView)view.findViewById(R.id.time_text_message_textview);
    }
    view.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)view.getTag();
  }
  String avatarUrl=null;
  String senderName;
  if (notificationMessage) {
    viewHolder.messageTextView.setText(combinationMessage.getBody());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(combinationMessage.getCreatedDate()));
  }
 else {
    resetUI(viewHolder);
    if (ownMessage) {
      avatarUrl=combinationMessage.getDialogOccupant().getUser().getAvatar();
    }
 else {
      senderName=combinationMessage.getDialogOccupant().getUser().getFullName();
      avatarUrl=combinationMessage.getDialogOccupant().getUser().getAvatar();
      viewHolder.nameTextView.setTextColor(getTextColor(combinationMessage.getDialogOccupant().getUser().getUserId()));
      viewHolder.nameTextView.setText(senderName);
    }
    if (combinationMessage.getAttachment() != null) {
      viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(combinationMessage.getCreatedDate()));
      setViewVisibility(viewHolder.progressRelativeLayout,View.VISIBLE);
      displayAttachImage(combinationMessage.getAttachment().getRemoteUrl(),viewHolder);
    }
 else {
      setViewVisibility(viewHolder.textMessageView,View.VISIBLE);
      viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(combinationMessage.getCreatedDate()));
      viewHolder.messageTextView.setText(combinationMessage.getBody());
    }
  }
  if (!State.READ.equals(combinationMessage.getState()) && !ownMessage) {
    combinationMessage.setState(State.READ);
    QBUpdateStatusMessageCommand.start(context,ChatUtils.createQBDialogFromLocalDialog(dialog),combinationMessage.toMessage(),true);
  }
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
  return view;
}",0.9430725240447102
114184,"@Override protected void updateMessagesList(){
  List<CombinationMessage> combinationMessagesList=createCombinationMessagesList();
  messagesAdapter.setNewData(combinationMessagesList);
  messagesAdapter.notifyDataSetChanged();
}","@Override protected void updateMessagesList(){
  initListView();
}",0.4135593220338983
114185,"@Override public void update(Observable observable,Object data){
  if (data != null && data.equals(DialogManager.OBSERVE_DIALOG)) {
    updateDialogsList();
  }
}","@Override public void update(Observable observable,Object data){
  if (data != null && data.equals(MessageManager.OBSERVE_MESSAGE)) {
    updateDialogsList();
  }
}",0.9447852760736196
114186,"@Override public void onResume(){
  super.onResume();
  addObservers();
  Crouton.cancelAllCroutons();
  if (dialogsAdapter != null) {
    checkVisibilityEmptyLabel();
  }
}","@Override public void onResume(){
  super.onResume();
  addObservers();
  Crouton.cancelAllCroutons();
  if (dialogsAdapter != null) {
    checkVisibilityEmptyLabel();
  }
  if (dialogsAdapter != null) {
    dialogsAdapter.notifyDataSetChanged();
  }
}",0.8141176470588235
114187,"private void deleteObservers(){
  databaseManager.getDialogManager().deleteObserver(dialogObserver);
}","private void deleteObservers(){
  databaseManager.getDialogManager().deleteObserver(dialogObserver);
  databaseManager.getMessageManager().deleteObserver(messageObserver);
}",0.7418181818181818
114188,"private void initFields(){
  databaseManager=DatabaseManager.getInstance();
  dialogObserver=new DialogObserver();
}","private void initFields(){
  databaseManager=DatabaseManager.getInstance();
  dialogObserver=new DialogObserver();
  messageObserver=new MessageObserver();
}",0.8498168498168498
114189,"private void addObservers(){
  databaseManager.getDialogManager().addObserver(dialogObserver);
}","private void addObservers(){
  databaseManager.getDialogManager().addObserver(dialogObserver);
  databaseManager.getMessageManager().addObserver(messageObserver);
}",0.7384615384615385
114190,"@Override public Bundle perform(Bundle extras) throws Exception {
  QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  File file=(File)extras.getSerializable(QBServiceConsts.EXTRA_FILE);
  if (file == null) {
    dialog=multiChatHelper.updateDialog(dialog);
  }
 else {
    dialog=multiChatHelper.updateDialog(dialog,file);
  }
  Bundle bundle=new Bundle();
  bundle.putSerializable(QBServiceConsts.EXTRA_DIALOG,dialog);
  return bundle;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  File file=(File)extras.getSerializable(QBServiceConsts.EXTRA_FILE);
  if (file == null) {
    dialog=multiChatHelper.updateDialog(dialog);
  }
 else {
    dialog=multiChatHelper.updateDialog(dialog,file);
  }
  Bundle bundle=new Bundle();
  bundle.putSerializable(QBServiceConsts.EXTRA_DIALOG,ChatUtils.createLocalDialog(dialog));
  return bundle;
}",0.957688338493292
114191,"protected Message parseReceivedMessage(QBChatMessage qbChatMessage){
  long createdDate=Long.parseLong(qbChatMessage.getProperty(ChatNotificationUtils.PROPERTY_DATE_SENT));
  String attachUrl=ChatUtils.getAttachUrlIfExists(qbChatMessage);
  String dialogId=qbChatMessage.getProperty(ChatNotificationUtils.PROPERTY_DIALOG_ID);
  Message message=new Message();
  message.setMessageId(qbChatMessage.getId());
  message.setBody(qbChatMessage.getBody());
  message.setCreatedDate(createdDate);
  DialogOccupant dialogOccupant=new DialogOccupant();
  Dialog dialog=databaseManager.getDialogManager().getByDialogId(dialogId);
  dialogOccupant.setDialog(dialog);
  User user=databaseManager.getUserManager().get(qbChatMessage.getSenderId());
  dialogOccupant.setUser(user);
  message.setDialogOccupant(dialogOccupant);
  if (qbChatMessage.getAttachments().size() != 0) {
    Attachment attachment=new Attachment();
    attachment.setType(Attachment.Type.PICTURE);
    attachment.setRemoteUrl(attachUrl);
    message.setAttachment(attachment);
  }
  return message;
}","protected Message parseReceivedMessage(QBChatMessage qbChatMessage){
  long createdDate=Long.parseLong(qbChatMessage.getProperty(ChatNotificationUtils.PROPERTY_DATE_SENT));
  String attachUrl=ChatUtils.getAttachUrlIfExists(qbChatMessage);
  String dialogId=qbChatMessage.getProperty(ChatNotificationUtils.PROPERTY_DIALOG_ID);
  Message message=new Message();
  message.setMessageId(qbChatMessage.getId());
  message.setBody(qbChatMessage.getBody());
  message.setCreatedDate(createdDate);
  DialogOccupant dialogOccupant=new DialogOccupant();
  Dialog dialog=databaseManager.getDialogManager().getByDialogId(dialogId);
  dialogOccupant.setDialog(dialog);
  User user=databaseManager.getUserManager().get(qbChatMessage.getSenderId());
  dialogOccupant.setUser(user);
  message.setDialogOccupant(dialogOccupant);
  if (qbChatMessage.getAttachments() != null && !qbChatMessage.getAttachments().isEmpty()) {
    Attachment attachment=new Attachment();
    attachment.setType(Attachment.Type.PICTURE);
    attachment.setRemoteUrl(attachUrl);
    message.setAttachment(attachment);
  }
  return message;
}",0.9735744089012516
114192,"protected void saveDialogNotificationToCache(String dialogId,DialogOccupant dialogOccupant,QBChatMessage qbChatMessage){
  DialogNotification dialogNotification=ChatUtils.createLocalDialogNotification(context,qbChatMessage,dialogOccupant);
  databaseManager.getDialogNotificationManager().createOrUpdate(dialogNotification);
}","protected void saveDialogNotificationToCache(DialogOccupant dialogOccupant,QBChatMessage qbChatMessage){
  DialogNotification dialogNotification=ChatUtils.createLocalDialogNotification(context,qbChatMessage,dialogOccupant);
  databaseManager.getDialogNotificationManager().createOrUpdate(dialogNotification);
}",0.9748427672955976
114193,"protected void saveMessageToCache(String dialogId,QBChatMessage qbChatMessage,State state){
  DialogOccupant dialogOccupant;
  if (qbChatMessage.getSenderId() == null) {
    dialogOccupant=databaseManager.getDialogOccupantManager().getDialogOccupant(dialogId,chatCreator.getId());
  }
 else {
    dialogOccupant=databaseManager.getDialogOccupantManager().getDialogOccupant(dialogId,qbChatMessage.getSenderId());
  }
  boolean isDialogNotification=qbChatMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE) != null;
  if (isDialogNotification) {
    saveDialogNotificationToCache(dialogId,dialogOccupant,qbChatMessage);
  }
 else {
    Message message=ChatUtils.createLocalMessage(qbChatMessage,dialogOccupant,state);
    if (qbChatMessage.getAttachments() != null && !qbChatMessage.getAttachments().isEmpty()) {
      ArrayList<QBAttachment> attachmentsList=new ArrayList<QBAttachment>(qbChatMessage.getAttachments());
      Attachment attachment=ChatUtils.createLocalAttachment(attachmentsList.get(0));
      message.setAttachment(attachment);
      databaseManager.getAttachmentManager().createOrUpdate(attachment);
    }
    databaseManager.getMessageManager().createOrUpdate(message);
  }
}","protected void saveMessageToCache(String dialogId,QBChatMessage qbChatMessage,State state){
  DialogOccupant dialogOccupant;
  if (qbChatMessage.getSenderId() == null) {
    dialogOccupant=databaseManager.getDialogOccupantManager().getDialogOccupant(dialogId,chatCreator.getId());
  }
 else {
    dialogOccupant=databaseManager.getDialogOccupantManager().getDialogOccupant(dialogId,qbChatMessage.getSenderId());
  }
  boolean isDialogNotification=qbChatMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE) != null;
  if (isDialogNotification) {
    saveDialogNotificationToCache(dialogOccupant,qbChatMessage);
  }
 else {
    Message message=ChatUtils.createLocalMessage(qbChatMessage,dialogOccupant,state);
    if (qbChatMessage.getAttachments() != null && !qbChatMessage.getAttachments().isEmpty()) {
      ArrayList<QBAttachment> attachmentsList=new ArrayList<QBAttachment>(qbChatMessage.getAttachments());
      Attachment attachment=ChatUtils.createLocalAttachment(attachmentsList.get(0));
      message.setAttachment(attachment);
      databaseManager.getAttachmentManager().createOrUpdate(attachment);
    }
    databaseManager.getMessageManager().createOrUpdate(message);
  }
}",0.996270203066722
114194,"private void friendRequestMessageReceived(QBChatMessage qbChatMessage,DialogNotification.NotificationType notificationType){
  Message message=parseReceivedMessage(qbChatMessage);
  DialogNotification dialogNotification=ChatUtils.convertMessageToDialogNotification(message);
  dialogNotification.setNotificationType(notificationType);
  QBDialog dialog=ChatUtils.createQBDialogFromLocalDialog(DatabaseManager.getInstance().getDialogManager().getByDialogId(qbChatMessage.getDialogId()));
  if (dialog == null) {
    dialog=ChatNotificationUtils.parseDialogFromQBMessage(context,qbChatMessage,QBDialogType.PRIVATE);
    ArrayList<Integer> occupantsIdsList=ChatUtils.createOccupantsIdsFromPrivateMessage(chatCreator.getId(),qbChatMessage.getSenderId());
    dialog.setOccupantsIds(occupantsIdsList);
    saveDialogToCache(dialog);
  }
  DialogOccupant dialogOccupant=databaseManager.getDialogOccupantManager().getDialogOccupant(qbChatMessage.getDialogId(),qbChatMessage.getSenderId());
  saveDialogNotificationToCache(qbChatMessage.getDialogId(),dialogOccupant,qbChatMessage);
}","private void friendRequestMessageReceived(QBChatMessage qbChatMessage,DialogNotification.NotificationType notificationType){
  Message message=parseReceivedMessage(qbChatMessage);
  DialogNotification dialogNotification=ChatUtils.convertMessageToDialogNotification(message);
  dialogNotification.setNotificationType(notificationType);
  QBDialog dialog=ChatUtils.createQBDialogFromLocalDialog(DatabaseManager.getInstance().getDialogManager().getByDialogId(qbChatMessage.getDialogId()));
  if (dialog == null) {
    dialog=ChatNotificationUtils.parseDialogFromQBMessage(context,qbChatMessage,QBDialogType.PRIVATE);
    ArrayList<Integer> occupantsIdsList=ChatUtils.createOccupantsIdsFromPrivateMessage(chatCreator.getId(),qbChatMessage.getSenderId());
    dialog.setOccupantsIds(occupantsIdsList);
    saveDialogToCache(dialog);
  }
  DialogOccupant dialogOccupant=databaseManager.getDialogOccupantManager().getDialogOccupant(qbChatMessage.getDialogId(),qbChatMessage.getSenderId());
  saveDialogNotificationToCache(dialogOccupant,qbChatMessage);
}",0.9868049010367578
114195,"@Override public void bindView(View view,Context context,final Cursor cursor){
  final ViewHolder viewHolder=(ViewHolder)view.getTag();
  final User friend=UsersDatabaseManager.getUserFromCursor(cursor);
  viewHolder.nameTextView.setText(friend.getFullName());
  viewHolder.statusMessageTextView.setText(friend.getStatus());
  viewHolder.nameTextView.setText(friend.getFullName());
  if (friend.isOnline()) {
    viewHolder.onlineImageView.setVisibility(View.VISIBLE);
  }
 else {
    viewHolder.onlineImageView.setVisibility(View.GONE);
  }
  final int position=cursor.getPosition();
  viewHolder.selectFriendCheckBox.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      CheckBox checkBox=(CheckBox)view;
      sparseArrayCheckBoxes.put(position,checkBox.isChecked());
      friend.setSelected(checkBox.isChecked());
      notifyCounterChanged(checkBox.isChecked());
      if (checkBox.isChecked()) {
        selectedFriends.add(friend);
      }
 else       if (selectedFriends.contains(friend)) {
        selectedFriends.remove(friend);
      }
      viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(viewHolder.selectFriendCheckBox.isChecked()));
    }
  }
);
  boolean checked=sparseArrayCheckBoxes.get(position);
  viewHolder.selectFriendCheckBox.setChecked(checked);
  String avatarUrl=getAvatarUrlForFriend(friend);
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
  viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(checked));
}","@Override public void bindView(View view,Context context,final Cursor cursor){
  final ViewHolder viewHolder=(ViewHolder)view.getTag();
  final User friend=UsersDatabaseManager.getUserFromCursor(cursor);
  viewHolder.nameTextView.setText(friend.getFullName());
  viewHolder.statusMessageTextView.setText(friend.getOnlineStatus(context));
  viewHolder.nameTextView.setText(friend.getFullName());
  if (friend.isOnline()) {
    viewHolder.onlineImageView.setVisibility(View.VISIBLE);
  }
 else {
    viewHolder.onlineImageView.setVisibility(View.GONE);
  }
  final int position=cursor.getPosition();
  viewHolder.selectFriendCheckBox.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      CheckBox checkBox=(CheckBox)view;
      sparseArrayCheckBoxes.put(position,checkBox.isChecked());
      friend.setSelected(checkBox.isChecked());
      notifyCounterChanged(checkBox.isChecked());
      if (checkBox.isChecked()) {
        selectedFriends.add(friend);
      }
 else       if (selectedFriends.contains(friend)) {
        selectedFriends.remove(friend);
      }
      viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(viewHolder.selectFriendCheckBox.isChecked()));
    }
  }
);
  boolean checked=sparseArrayCheckBoxes.get(position);
  viewHolder.selectFriendCheckBox.setChecked(checked);
  String avatarUrl=getAvatarUrlForFriend(friend);
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
  viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(checked));
}",0.99581589958159
114196,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  ViewHolder viewHolder;
  View view=layoutInflater.inflate(R.layout.list_item_chat_friend_selectable,null);
  viewHolder=new ViewHolder();
  viewHolder.contentRelativeLayout=(RelativeLayout)view.findViewById(R.id.contentRelativeLayout);
  viewHolder.avatarImageView=(RoundedImageView)view.findViewById(R.id.avatar_imageview);
  viewHolder.nameTextView=(TextView)view.findViewById(R.id.name_textview);
  viewHolder.onlineImageView=(ImageView)view.findViewById(R.id.online_imageview);
  viewHolder.statusMessageTextView=(TextView)view.findViewById(R.id.statusMessageTextView);
  viewHolder.selectFriendCheckBox=(CheckBox)view.findViewById(R.id.selected_friend_checkbox);
  view.setTag(viewHolder);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  ViewHolder viewHolder;
  View view=layoutInflater.inflate(R.layout.list_item_chat_friend_selectable,null);
  viewHolder=new ViewHolder();
  viewHolder.contentRelativeLayout=(RelativeLayout)view.findViewById(R.id.contentRelativeLayout);
  viewHolder.avatarImageView=(RoundedImageView)view.findViewById(R.id.avatar_imageview);
  viewHolder.nameTextView=(TextView)view.findViewById(R.id.name_textview);
  viewHolder.onlineImageView=(ImageView)view.findViewById(R.id.online_imageview);
  viewHolder.statusMessageTextView=(TextView)view.findViewById(R.id.status_textview);
  viewHolder.selectFriendCheckBox=(CheckBox)view.findViewById(R.id.selected_friend_checkbox);
  view.setTag(viewHolder);
  return view;
}",0.988593155893536
114197,"protected GroupDialogOccupantsAdapter getFriendsAdapter(){
  return new GroupDialogOccupantsAdapter(this,groupDialog.getOccupantList());
}","protected GroupDialogOccupantsAdapter getFriendsAdapter(){
  return new GroupDialogOccupantsAdapter(this,friendOperationAction,groupDialog.getOccupantList());
}",0.9261744966442952
114198,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_group_dialog_details);
  dialogId=(String)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG_ID);
  currentDialog=ChatDatabaseManager.getDialogByDialogId(this,dialogId);
  groupDialog=new GroupDialog(currentDialog);
  imageUtils=new ImageUtils(this);
  initUI();
  initUIWithData();
  addActions();
  startLoadGroupDialog();
  currentNotificationTypeList=new ArrayList<MessagesNotificationType>();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_group_dialog_details);
  dialogId=(String)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG_ID);
  currentDialog=ChatDatabaseManager.getDialogByDialogId(this,dialogId);
  groupDialog=new GroupDialog(currentDialog);
  imageUtils=new ImageUtils(this);
  friendOperationAction=new FriendOperationAction();
  initUI();
  initUIWithData();
  addActions();
  startLoadGroupDialog();
  currentNotificationTypeList=new ArrayList<MessagesNotificationType>();
}",0.9539530842745438
114199,"private void addActions(){
  UpdateGroupFailAction updateGroupFailAction=new UpdateGroupFailAction();
  addAction(QBServiceConsts.LOAD_GROUP_DIALOG_SUCCESS_ACTION,new LoadGroupDialogSuccessAction());
  addAction(QBServiceConsts.LOAD_GROUP_DIALOG_FAIL_ACTION,failAction);
  addAction(QBServiceConsts.LEAVE_GROUP_DIALOG_SUCCESS_ACTION,new LeaveGroupDialogSuccessAction());
  addAction(QBServiceConsts.LEAVE_GROUP_DIALOG_FAIL_ACTION,failAction);
  addAction(QBServiceConsts.UPDATE_GROUP_DIALOG_SUCCESS_ACTION,new UpdateGroupDialogSuccessAction());
  addAction(QBServiceConsts.UPDATE_GROUP_DIALOG_FAIL_ACTION,updateGroupFailAction);
  updateBroadcastActionList();
}","private void addActions(){
  UpdateGroupFailAction updateGroupFailAction=new UpdateGroupFailAction();
  addAction(QBServiceConsts.LOAD_GROUP_DIALOG_SUCCESS_ACTION,new LoadGroupDialogSuccessAction());
  addAction(QBServiceConsts.LOAD_GROUP_DIALOG_FAIL_ACTION,failAction);
  addAction(QBServiceConsts.LEAVE_GROUP_DIALOG_SUCCESS_ACTION,new LeaveGroupDialogSuccessAction());
  addAction(QBServiceConsts.LEAVE_GROUP_DIALOG_FAIL_ACTION,failAction);
  addAction(QBServiceConsts.UPDATE_GROUP_DIALOG_SUCCESS_ACTION,new UpdateGroupDialogSuccessAction());
  addAction(QBServiceConsts.UPDATE_GROUP_DIALOG_FAIL_ACTION,updateGroupFailAction);
  addAction(QBServiceConsts.ADD_FRIEND_SUCCESS_ACTION,new AddFriendSuccessAction());
  addAction(QBServiceConsts.ADD_FRIEND_FAIL_ACTION,failAction);
  updateBroadcastActionList();
}",0.8905506458191706
114200,"private void setOnlineStatusVisibility(ViewHolder viewHolder,User user){
  if (isMe(user)) {
    user.setOnline(true);
  }
  viewHolder.onlineStatusMessageTextView.setText(user.getOnlineStatus(baseActivity));
  if (user.isOnline()) {
    viewHolder.onlineImageView.setVisibility(View.VISIBLE);
  }
 else {
    viewHolder.onlineImageView.setVisibility(View.GONE);
  }
}","private void setOnlineStatusVisibility(ViewHolder viewHolder,User user){
  if (isMe(user)) {
    user.setOnline(true);
  }
  viewHolder.onlineStatusTextView.setText(user.getOnlineStatus(baseActivity));
  if (user.isOnline()) {
    viewHolder.onlineImageView.setVisibility(View.VISIBLE);
  }
 else {
    viewHolder.onlineImageView.setVisibility(View.GONE);
  }
}",0.99039780521262
114201,"private boolean isFriend(User user){
  return user.getFullName() != null;
}","private boolean isFriend(User user){
  boolean isFriend;
  isFriend=isMe(user) ? true : UsersDatabaseManager.isFriendInBaseWithPending(baseActivity,user.getUserId());
  return isFriend;
}",0.4503816793893129
114202,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder viewHolder;
  User user=getItem(position);
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_dialog_friend,null);
    viewHolder=new ViewHolder();
    viewHolder.avatarImageView=(RoundedImageView)convertView.findViewById(R.id.avatar_imageview);
    viewHolder.nameTextView=(TextView)convertView.findViewById(R.id.name_textview);
    viewHolder.onlineImageView=(ImageView)convertView.findViewById(R.id.online_imageview);
    viewHolder.onlineStatusMessageTextView=(TextView)convertView.findViewById(R.id.statusMessageTextView);
    convertView.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
  }
  String fullName;
  if (isFriend(user)) {
    fullName=user.getFullName();
    viewHolder.onlineStatusMessageTextView.setVisibility(View.VISIBLE);
  }
 else {
    fullName=String.valueOf(user.getUserId());
    viewHolder.onlineStatusMessageTextView.setVisibility(View.GONE);
  }
  viewHolder.nameTextView.setText(fullName);
  setOnlineStatusVisibility(viewHolder,user);
  displayImage(user.getAvatarUrl(),viewHolder.avatarImageView);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder viewHolder;
  User user=getItem(position);
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_dialog_friend,null);
    viewHolder=new ViewHolder();
    viewHolder.avatarImageView=(RoundedImageView)convertView.findViewById(R.id.avatar_imageview);
    viewHolder.nameTextView=(TextView)convertView.findViewById(R.id.name_textview);
    viewHolder.onlineImageView=(ImageView)convertView.findViewById(R.id.online_imageview);
    viewHolder.onlineStatusTextView=(TextView)convertView.findViewById(R.id.status_textview);
    viewHolder.addFriendImageView=(ImageView)convertView.findViewById(R.id.add_friend_imagebutton);
    convertView.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
  }
  String fullName;
  if (isFriendValid(user)) {
    fullName=user.getFullName();
    viewHolder.onlineStatusTextView.setVisibility(View.VISIBLE);
  }
 else {
    fullName=String.valueOf(user.getUserId());
    viewHolder.onlineStatusTextView.setVisibility(View.GONE);
  }
  viewHolder.nameTextView.setText(fullName);
  setOnlineStatusVisibility(viewHolder,user);
  viewHolder.addFriendImageView.setVisibility(isFriend(user) ? View.GONE : View.VISIBLE);
  initListeners(viewHolder,user.getUserId());
  displayImage(user.getAvatarUrl(),viewHolder.avatarImageView);
  return convertView;
}",0.7632375189107413
114203,"public GroupDialogOccupantsAdapter(BaseActivity baseActivity,List<User> objectsList){
  super(baseActivity,objectsList);
}","public GroupDialogOccupantsAdapter(BaseActivity baseActivity,FriendOperationListener friendOperationListener,List<User> objectsList){
  super(baseActivity,objectsList);
  this.friendOperationListener=friendOperationListener;
}",0.7011494252873564
114204,"private void setName(){
  nameTextView.setText(friend.getFullName());
}","private void setName(){
  nameTextView.setText(user.getFullName());
}",0.9428571428571428
114205,"private void initUI(){
  avatarImageView=_findViewById(R.id.avatar_imageview);
  nameTextView=_findViewById(R.id.name_textview);
  onlineImageView=_findViewById(R.id.online_imageview);
  onlineStatusTextView=_findViewById(R.id.online_status_textview);
  phoneTextView=_findViewById(R.id.phone_textview);
  phoneView=_findViewById(R.id.phone_relativelayout);
}","private void initUI(){
  avatarImageView=_findViewById(R.id.avatar_imageview);
  nameTextView=_findViewById(R.id.name_textview);
  statusTextView=_findViewById(R.id.status_textview);
  onlineImageView=_findViewById(R.id.online_imageview);
  onlineStatusTextView=_findViewById(R.id.online_status_textview);
  phoneTextView=_findViewById(R.id.phone_textview);
  phoneView=_findViewById(R.id.phone_relativelayout);
}",0.9300518134715026
114206,"public void voiceCallClickListener(View view){
  callToUser(friend,com.quickblox.videochat.webrtc.Consts.MEDIA_STREAM.AUDIO);
}","public void voiceCallClickListener(View view){
  callToUser(user,com.quickblox.videochat.webrtc.Consts.MEDIA_STREAM.AUDIO);
}",0.9682539682539684
114207,"public void chatClickListener(View view){
  if (checkFriendStatus(friend.getUserId())) {
    try {
      QBDialog existingPrivateDialog=privateChatHelper.createPrivateDialogIfNotExist(friend.getUserId());
      PrivateDialogActivity.start(FriendDetailsActivity.this,friend,existingPrivateDialog);
    }
 catch (    QBResponseException e) {
      ErrorUtils.showError(this,e);
    }
  }
}","public void chatClickListener(View view){
  if (checkFriendStatus(user.getUserId())) {
    try {
      QBDialog existingPrivateDialog=privateChatHelper.createPrivateDialogIfNotExist(user.getUserId());
      PrivateDialogActivity.start(FriendDetailsActivity.this,user,existingPrivateDialog);
    }
 catch (    QBResponseException e) {
      ErrorUtils.showError(this,e);
    }
  }
}",0.9609375
114208,"private void loadAvatar(){
  String url=friend.getAvatarUrl();
  ImageLoader.getInstance().displayImage(url,avatarImageView,Consts.UIL_USER_AVATAR_DISPLAY_OPTIONS);
}","private void loadAvatar(){
  String url=user.getAvatarUrl();
  ImageLoader.getInstance().displayImage(url,avatarImageView,Consts.UIL_USER_AVATAR_DISPLAY_OPTIONS);
}",0.9757575757575756
114209,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_friend_details);
  canPerformLogout.set(true);
  int friendId=getIntent().getExtras().getInt(QBServiceConsts.EXTRA_FRIEND_ID);
  friendCursor=UsersDatabaseManager.getFriendCursorById(this,friendId);
  friend=UsersDatabaseManager.getUserById(this,friendId);
  initUI();
  registerStatusChangingObserver();
  initUIWithFriendsData();
  initBroadcastActionList();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_friend_details);
  canPerformLogout.set(true);
  int friendId=getIntent().getExtras().getInt(QBServiceConsts.EXTRA_FRIEND_ID);
  friendCursor=UsersDatabaseManager.getFriendCursorById(this,friendId);
  user=UsersDatabaseManager.getUserById(this,friendId);
  initUI();
  registerStatusChangingObserver();
  initUIWithFriendsData();
  initBroadcastActionList();
}",0.9898580121703854
114210,"@Override public void onChange(boolean selfChange){
  if (FriendDetailsActivity.this.friend != null) {
    friend=UsersDatabaseManager.getUserById(FriendDetailsActivity.this,FriendDetailsActivity.this.friend.getUserId());
    setOnlineStatus(friend);
  }
}","@Override public void onChange(boolean selfChange){
  if (FriendDetailsActivity.this.user != null) {
    user=UsersDatabaseManager.getUserById(FriendDetailsActivity.this,FriendDetailsActivity.this.user.getUserId());
    setOnlineStatus(user);
  }
}",0.9206349206349206
114211,"private void deleteDialog(){
  String dialogId=ChatDatabaseManager.getPrivateDialogIdByOpponentId(this,friend.getUserId());
  QBDeleteDialogCommand.start(this,dialogId,QBDialogType.PRIVATE);
}","private void deleteDialog(){
  String dialogId=ChatDatabaseManager.getPrivateDialogIdByOpponentId(this,user.getUserId());
  QBDeleteDialogCommand.start(this,dialogId,QBDialogType.PRIVATE);
}",0.9790575916230366
114212,"private void setPhone(){
  if (friend.getPhone() != null) {
    phoneView.setVisibility(View.VISIBLE);
  }
 else {
    phoneView.setVisibility(View.GONE);
  }
  phoneTextView.setText(friend.getPhone());
}","private void setPhone(){
  if (user.getPhone() != null) {
    phoneView.setVisibility(View.VISIBLE);
  }
 else {
    phoneView.setVisibility(View.GONE);
  }
  phoneTextView.setText(user.getPhone());
}",0.9603960396039604
114213,"@Override public void execute(Bundle bundle){
  deleteDialog();
  DialogUtils.showLong(FriendDetailsActivity.this,getString(R.string.dlg_friend_removed,friend.getFullName()));
  finish();
}","@Override public void execute(Bundle bundle){
  deleteDialog();
  DialogUtils.showLong(FriendDetailsActivity.this,getString(R.string.dlg_friend_removed,user.getFullName()));
  finish();
}",0.9787234042553192
114214,"private void showRemoveUserDialog(){
  AlertDialog alertDialog=AlertDialog.newInstance(getResources().getString(R.string.frd_dlg_remove_friend,friend.getFullName()));
  alertDialog.setPositiveButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      showProgress();
      QBRemoveFriendCommand.start(FriendDetailsActivity.this,friend.getUserId());
    }
  }
);
  alertDialog.setNegativeButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  alertDialog.show(getFragmentManager(),null);
}","private void showRemoveUserDialog(){
  AlertDialog alertDialog=AlertDialog.newInstance(getResources().getString(R.string.frd_dlg_remove_friend,user.getFullName()));
  alertDialog.setPositiveButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      showProgress();
      QBRemoveFriendCommand.start(FriendDetailsActivity.this,user.getUserId());
    }
  }
);
  alertDialog.setNegativeButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  alertDialog.show(getFragmentManager(),null);
}",0.9843505477308294
114215,"public void videoCallClickListener(View view){
  callToUser(friend,com.quickblox.videochat.webrtc.Consts.MEDIA_STREAM.VIDEO);
}","public void videoCallClickListener(View view){
  callToUser(user,com.quickblox.videochat.webrtc.Consts.MEDIA_STREAM.VIDEO);
}",0.9682539682539684
114216,"private void registerStatusChangingObserver(){
  statusContentObserver=new ContentObserver(new Handler()){
    @Override public boolean deliverSelfNotifications(){
      return true;
    }
    @Override public void onChange(    boolean selfChange){
      if (FriendDetailsActivity.this.friend != null) {
        friend=UsersDatabaseManager.getUserById(FriendDetailsActivity.this,FriendDetailsActivity.this.friend.getUserId());
        setOnlineStatus(friend);
      }
    }
  }
;
  friendCursor.registerContentObserver(statusContentObserver);
}","private void registerStatusChangingObserver(){
  statusContentObserver=new ContentObserver(new Handler()){
    @Override public boolean deliverSelfNotifications(){
      return true;
    }
    @Override public void onChange(    boolean selfChange){
      if (FriendDetailsActivity.this.user != null) {
        user=UsersDatabaseManager.getUserById(FriendDetailsActivity.this,FriendDetailsActivity.this.user.getUserId());
        setOnlineStatus(user);
      }
    }
  }
;
  friendCursor.registerContentObserver(statusContentObserver);
}",0.7481481481481481
114217,"private void initUIWithFriendsData(){
  loadAvatar();
  setName();
  setOnlineStatus(friend);
  setPhone();
}","private void initUIWithFriendsData(){
  loadAvatar();
  setName();
  setOnlineStatus(user);
  setStatus();
  setPhone();
}",0.9090909090909092
114218,"@Override public View getGroupView(int groupPosition,boolean isLastChild,View view,ViewGroup parent){
  FriendGroup friendGroup=(FriendGroup)getGroup(groupPosition);
  if (view == null) {
    view=layoutInflater.inflate(R.layout.view_section_title_friends_list,null);
  }
  TextView headerName=(TextView)view.findViewById(R.id.list_title_textview);
  headerName.setText(friendGroup.getHeaderName());
  view.setVisibility(friendGroup.getUserList().isEmpty() ? View.GONE : View.VISIBLE);
  return view;
}","@Override public View getGroupView(int groupPosition,boolean isLastChild,View view,ViewGroup parent){
  FriendGroup friendGroup=(FriendGroup)getGroup(groupPosition);
  View hiddenView=new FrameLayout(context);
  if (friendGroup.getUserList().isEmpty()) {
    return hiddenView;
  }
 else {
    view=layoutInflater.inflate(R.layout.view_section_title_friends_list,null);
  }
  TextView headerName=(TextView)view.findViewById(R.id.list_title_textview);
  headerName.setText(friendGroup.getHeaderName());
  return view;
}",0.7843137254901961
114219,"private void checkVisibilityItemsMyContacts(ViewHolder viewHolder,User user){
  String status=null;
  Friend friend=UsersDatabaseManager.getFriendById(context,user.getUserId());
  String relationStatus=friend.getRelationStatus();
  boolean isAddedFriend;
  isAddedFriend=relationStatus.equals(QBFriendListHelper.RELATION_STATUS_NONE) && friend.isPendingStatus();
  if (isAddedFriend) {
    viewHolder.onlineImageView.setVisibility(View.GONE);
    status=resources.getString(R.string.frl_pending_request_status);
  }
  viewHolder.addFriendImageView.setVisibility(View.GONE);
  viewHolder.statusTextView.setText(status);
  viewHolder.statusTextView.setVisibility(View.VISIBLE);
  setStatusVisibility(viewHolder,user.isOnline());
}","private void checkVisibilityItemsMyContacts(ViewHolder viewHolder,User user){
  String status=null;
  Friend friend=UsersDatabaseManager.getFriendById(context,user.getUserId());
  if (friend == null) {
    return;
  }
  String relationStatus=friend.getRelationStatus();
  boolean isAddedFriend;
  isAddedFriend=relationStatus.equals(QBFriendListHelper.RELATION_STATUS_NONE) && friend.isPendingStatus();
  if (isAddedFriend) {
    viewHolder.onlineImageView.setVisibility(View.GONE);
    status=resources.getString(R.string.frl_pending_request_status);
  }
  viewHolder.addFriendImageView.setVisibility(View.GONE);
  viewHolder.statusTextView.setText(status);
  viewHolder.statusTextView.setVisibility(View.VISIBLE);
  setStatusVisibility(viewHolder,user.isOnline());
}",0.9732620320855616
114220,"private void updateFriendList(Collection<User> newUserCollection){
  friendGroupAllUsers.addUserList(new ArrayList<User>(newUserCollection));
  friendGroupAllUsers.removeFriendsFromList(friendGroupAllFriends.getUserList());
  initFriendAdapter();
  performQueryTextChange();
}","private void updateFriendList(Collection<User> newUserCollection){
  friendGroupAllUsers.removeFriendsFromList(new ArrayList<User>(newUserCollection));
  friendGroupAllUsers.addUserList(new ArrayList<User>(newUserCollection));
  friendGroupAllUsers.removeFriendsFromList(friendGroupAllFriends.getUserList());
  initFriendAdapter();
  performQueryTextChange();
}",0.8665620094191523
114221,"private void checkVisibilityEmptyLabel(){
  if (state == State.GLOBAL_LIST) {
    emptyListTextView.setVisibility(View.GONE);
  }
 else {
    int countFriends=UsersDatabaseManager.getAllFriendsCountWithPending(baseActivity);
    if ((countFriends + friendGroupList.size()) > ConstsCore.ZERO_INT_VALUE) {
      emptyListTextView.setVisibility(View.GONE);
    }
 else {
      emptyListTextView.setVisibility(View.VISIBLE);
    }
  }
}","private void checkVisibilityEmptyLabel(){
  if (state == State.GLOBAL_LIST) {
    emptyListTextView.setVisibility(View.GONE);
  }
 else {
    int countFriends=UsersDatabaseManager.getAllFriendsCountWithPending(baseActivity);
    if ((countFriends + friendGroupAllUsers.getUserList().size()) > ConstsCore.ZERO_INT_VALUE) {
      emptyListTextView.setVisibility(View.GONE);
    }
 else {
      emptyListTextView.setVisibility(View.VISIBLE);
    }
  }
}",0.9705215419501134
114222,"private void removeActions(){
  baseActivity.removeAction(QBServiceConsts.ADD_FRIEND_SUCCESS_ACTION);
  baseActivity.removeAction(QBServiceConsts.ADD_FRIEND_FAIL_ACTION);
  baseActivity.removeAction(QBServiceConsts.FIND_USERS_SUCCESS_ACTION);
  baseActivity.removeAction(QBServiceConsts.FIND_USERS_FAIL_ACTION);
  baseActivity.removeAction(QBServiceConsts.LOAD_FRIENDS_SUCCESS_ACTION);
  baseActivity.removeAction(QBServiceConsts.LOAD_FRIENDS_FAIL_ACTION);
}","private void removeActions(){
  baseActivity.removeAction(QBServiceConsts.ADD_FRIEND_SUCCESS_ACTION);
  baseActivity.removeAction(QBServiceConsts.ADD_FRIEND_FAIL_ACTION);
  baseActivity.removeAction(QBServiceConsts.FIND_USERS_SUCCESS_ACTION);
  baseActivity.removeAction(QBServiceConsts.FIND_USERS_FAIL_ACTION);
}",0.8119325551232166
114223,"private void updateAllFriendsData(){
  firstVisiblePositionList=friendsListView.getFirstVisiblePosition();
  updateAllFriends();
  initFriendAdapter();
  if (!TextUtils.isEmpty(constraint)) {
    performQueryTextChange();
  }
  friendsListView.setSelection(firstVisiblePositionList);
}","private void updateAllFriendsData(){
  firstVisiblePositionList=friendsListView.getFirstVisiblePosition();
  updateAllFriends();
  initFriendAdapter();
  if (!TextUtils.isEmpty(constraint)) {
    performQueryTextChange();
  }
  checkVisibilityEmptyLabel();
  friendsListView.setSelection(firstVisiblePositionList);
}",0.9484193011647256
114224,"@Override public void execute(Bundle bundle){
  String notFoundError=getResources().getString(R.string.frl_not_found_users);
  showErrorToast(notFoundError);
  friendsListView.removeFooterView(listLoadingView);
  baseActivity.hideActionBarProgress();
}","@Override public void execute(Bundle bundle){
  String notFoundError=getResources().getString(R.string.frl_not_found_users);
  showErrorToast(notFoundError);
  checkVisibilityEmptyLabel();
  friendsListView.removeFooterView(listLoadingView);
  baseActivity.hideActionBarProgress();
}",0.9420560747663552
114225,"@Override public boolean onQueryTextChange(String query){
  if (state.equals(State.GLOBAL_LIST)) {
    constraint=query;
    page=1;
    initFriendList();
    checkUsersListLoader();
  }
  baseActivity.hideActionBarProgress();
  return true;
}","@Override public boolean onQueryTextChange(String query){
  if (state.equals(State.GLOBAL_LIST)) {
    constraint=query;
    page=1;
    initFriendList();
    if (!TextUtils.isEmpty(constraint)) {
      performQueryTextChange();
    }
 else {
      baseActivity.hideActionBarProgress();
    }
    checkUsersListLoader();
  }
  return true;
}",0.6952054794520548
114226,"@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  inflater.inflate(R.menu.friend_list_menu,menu);
  searchOnActionExpandListener=new SearchOnActionExpandListener();
  MenuItem searchItem=menu.findItem(R.id.action_search);
  searchItem.setOnActionExpandListener(searchOnActionExpandListener);
  searchView=(SearchView)searchItem.getActionView();
  searchView.setOnQueryTextListener(this);
}","@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  inflater.inflate(R.menu.friend_list_menu,menu);
  SearchOnActionExpandListener searchOnActionExpandListener=new SearchOnActionExpandListener();
  MenuItem searchItem=menu.findItem(R.id.action_search);
  searchItem.setOnActionExpandListener(searchOnActionExpandListener);
  searchView=(SearchView)searchItem.getActionView();
  searchView.setOnQueryTextListener(this);
}",0.966396292004635
114227,"private void saveOpeningDialogData(Intent intent,int userId,String dialogId){
  if (userId != ConstsCore.ZERO_INT_VALUE && !TextUtils.isEmpty(dialogId)) {
    PrefsHelper prefsHelper=PrefsHelper.getPrefsHelper();
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_USER_ID,userId);
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_DIALOG_ID,dialogId);
    intent.putExtra(CLICKED_ON_PUSH,true);
  }
 else {
    intent.putExtra(CLICKED_ON_PUSH,false);
  }
}","private void saveOpeningDialogData(int userId,String dialogId){
  PrefsHelper prefsHelper=PrefsHelper.getPrefsHelper();
  if (userId != ConstsCore.ZERO_INT_VALUE && !TextUtils.isEmpty(dialogId)) {
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_USER_ID,userId);
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_DIALOG_ID,dialogId);
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,true);
  }
 else {
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  }
}",0.5887096774193549
114228,"private void sendNotification(){
  notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  Intent intent=new Intent(this,SplashActivity.class);
  saveOpeningDialogData(intent,userId,dialogId);
  PendingIntent contentIntent=PendingIntent.getActivity(this,ConstsCore.ZERO_INT_VALUE,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_launcher).setContentTitle(getString(R.string.push_title)).setStyle(new NotificationCompat.BigTextStyle().bigText(message)).setContentText(message).setVibrate(new long[]{ConstsCore.ZERO_INT_VALUE,VIBRATOR_DURATION});
  builder.setAutoCancel(true);
  builder.setContentIntent(contentIntent);
  builder.getNotification().flags|=Notification.FLAG_AUTO_CANCEL;
  notificationManager.notify(NOTIFICATION_ID,builder.build());
}","private void sendNotification(){
  notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  Intent intent=new Intent(this,SplashActivity.class);
  saveOpeningDialogData(userId,dialogId);
  PendingIntent contentIntent=PendingIntent.getActivity(this,ConstsCore.ZERO_INT_VALUE,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_launcher).setContentTitle(getString(R.string.push_title)).setStyle(new NotificationCompat.BigTextStyle().bigText(message)).setContentText(message).setVibrate(new long[]{ConstsCore.ZERO_INT_VALUE,VIBRATOR_DURATION});
  builder.setAutoCancel(true);
  builder.setContentIntent(contentIntent);
  builder.getNotification().flags|=Notification.FLAG_AUTO_CANCEL;
  notificationManager.notify(NOTIFICATION_ID,builder.build());
}",0.9960022844089093
114229,"@Override public void onReceiveRefreshSessionAction(Bundle extras){
  DialogUtils.show(BaseActivity.this,getString(R.string.dlg_refresh_session));
  showProgress();
  activityHelper.refreshSession();
}","@Override public void onReceiveRefreshSessionAction(Bundle extras){
  DialogUtils.show(BaseActivity.this,getString(R.string.dlg_refresh_session));
  activityHelper.refreshSession();
}",0.953125
114230,"@Override public void onReceiveRefreshSessionAction(Bundle extras){
  DialogUtils.show(BaseFragmentActivity.this,getString(R.string.dlg_refresh_session));
  showProgress();
  activityHelper.refreshSession();
}","@Override public void onReceiveRefreshSessionAction(Bundle extras){
  DialogUtils.show(BaseFragmentActivity.this,getString(R.string.dlg_refresh_session));
  activityHelper.refreshSession();
}",0.955
114231,"private void checkMessageSendingPossibility(){
  boolean isFriend=UsersDatabaseManager.isFriendInBase(PrivateDialogActivity.this,opponentFriend.getUserId());
  messageEditText.setEnabled(isFriend);
}","private void checkMessageSendingPossibility(){
  boolean isFriend=UsersDatabaseManager.isFriendInBase(PrivateDialogActivity.this,opponentFriend.getUserId());
  messageEditText.setEnabled(isFriend);
  smilePanelImageButton.setEnabled(isFriend);
}",0.8963963963963963
114232,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  useDoubleBackPressed=true;
  gsmHelper=new GSMHelper(this);
  initNavigationDrawer();
  if (!isImportInitialized()) {
    showProgress();
    facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
    importFriends=new ImportFriends(MainActivity.this,facebookHelper);
    PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_SIGN_UP_INITIALIZED,false);
  }
  showActionBarProgress();
  initBroadcastActionList();
  checkGCMRegistration();
  loadFriendsList();
  initVideoChat();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  useDoubleBackPressed=true;
  gsmHelper=new GSMHelper(this);
  initNavigationDrawer();
  if (!isImportInitialized()) {
    showProgress();
    facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
    importFriends=new ImportFriends(MainActivity.this,facebookHelper);
    PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_SIGN_UP_INITIALIZED,false);
  }
  initBroadcastActionList();
  checkGCMRegistration();
  loadFriendsList();
  initVideoChat();
}",0.9793420045906656
114233,"@Override protected void onResume(){
  super.onResume();
  gsmHelper.checkPlayServices();
  checkVisibilityProgressBars();
}","@Override protected void onResume(){
  super.onResume();
  gsmHelper.checkPlayServices();
  showActionBarProgress();
  checkVisibilityProgressBars();
}",0.901818181818182
114234,"private void checkVisibilityProgressBars(){
  isNeedToOpenDialog=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  if (isNeedToOpenDialog) {
    hideActionBarProgress();
    showProgress();
  }
 else {
    hideProgress();
  }
}","private void checkVisibilityProgressBars(){
  isNeedToOpenDialog=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,false);
  if (isJoinedToDialogs()) {
    hideActionBarProgress();
  }
  if (isNeedToOpenDialog && !isJoinedToDialogs()) {
    hideActionBarProgress();
    showProgress();
  }
}",0.7408637873754153
114235,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Crashlytics.start(this);
  addActions();
  facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
  String userEmail=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_USER_EMAIL);
  String userPassword=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_USER_PASSWORD);
  boolean isRememberMe=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_REMEMBER_ME,false);
  if (getIntent().hasExtra(GCMIntentService.CLICKED_ON_PUSH)) {
    PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,getIntent().getBooleanExtra(GCMIntentService.CLICKED_ON_PUSH,false));
  }
  if (isRememberMe) {
    checkStartExistSession(userEmail,userPassword);
  }
 else {
    startLanding();
  }
  setContentView(R.layout.activity_splash);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Crashlytics.start(this);
  addActions();
  facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
  String userEmail=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_USER_EMAIL);
  String userPassword=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_USER_PASSWORD);
  boolean isRememberMe=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_REMEMBER_ME,false);
  if (isRememberMe) {
    checkStartExistSession(userEmail,userPassword);
  }
 else {
    startLanding();
  }
  setContentView(R.layout.activity_splash);
}",0.8536895674300254
114236,"@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  startMainActivity();
  AnalyticsUtils.pushAnalyticsData(SplashActivity.this,user,""String_Node_Str"");
  finish();
}","@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  startMainActivity();
  AnalyticsUtils.pushAnalyticsData(SplashActivity.this,user,""String_Node_Str"");
  finish();
}",0.8504504504504504
114237,"private void startMainActivity(){
  MainActivity.start(SplashActivity.this);
}","private void startMainActivity(){
  PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  MainActivity.start(SplashActivity.this);
}",0.6527196652719666
114238,"public static ImageLoaderConfiguration getImageLoaderConfiguration(Context context){
  final int MEMORY_CACHE_LIMIT=2 * 1024 * 1024;
  final int THREAD_POOL_SIZE=5;
  final int COMPRESS_QUALITY=60;
  final int MAX_IMAGE_WIDTH_FOR_MEMORY_CACHE=600;
  final int MAX_IMAGE_HEIGHT_FOR_MEMORY_CACHE=1200;
  ImageLoaderConfiguration imageLoaderConfiguration=new ImageLoaderConfiguration.Builder(context).memoryCacheExtraOptions(MAX_IMAGE_WIDTH_FOR_MEMORY_CACHE,MAX_IMAGE_HEIGHT_FOR_MEMORY_CACHE).discCacheExtraOptions(MAX_IMAGE_WIDTH_FOR_MEMORY_CACHE,MAX_IMAGE_HEIGHT_FOR_MEMORY_CACHE,Bitmap.CompressFormat.JPEG,COMPRESS_QUALITY,null).threadPoolSize(THREAD_POOL_SIZE).threadPriority(Thread.NORM_PRIORITY).denyCacheImageMultipleSizesInMemory().memoryCache(new UsingFreqLimitedMemoryCache(MEMORY_CACHE_LIMIT)).writeDebugLogs().defaultDisplayImageOptions(Consts.UIL_DEFAULT_DISPLAY_OPTIONS).imageDecoder(new SmartUriDecoder(context,new BaseImageDecoder(false))).denyCacheImageMultipleSizesInMemory().discCacheFileNameGenerator(new HashCodeFileNameGeneratorWithoutToken()).build();
  return imageLoaderConfiguration;
}","public static ImageLoaderConfiguration getImageLoaderConfiguration(Context context){
  final int MEMORY_CACHE_LIMIT=2 * 1024 * 1024;
  final int THREAD_POOL_SIZE=5;
  ImageLoaderConfiguration imageLoaderConfiguration=new ImageLoaderConfiguration.Builder(context).threadPoolSize(THREAD_POOL_SIZE).threadPriority(Thread.NORM_PRIORITY).denyCacheImageMultipleSizesInMemory().memoryCache(new UsingFreqLimitedMemoryCache(MEMORY_CACHE_LIMIT)).writeDebugLogs().defaultDisplayImageOptions(Consts.UIL_DEFAULT_DISPLAY_OPTIONS).imageDecoder(new SmartUriDecoder(context,new BaseImageDecoder(false))).denyCacheImageMultipleSizesInMemory().discCacheFileNameGenerator(new HashCodeFileNameGeneratorWithoutToken()).build();
  return imageLoaderConfiguration;
}",0.7491891891891892
114239,"protected void startMainActivity(Context context,QBUser user,boolean saveRememberMe){
  AppSession.getSession().updateUser(user);
  AppSession.saveRememberMe(saveRememberMe);
  ChatDatabaseManager.clearAllCache(context);
  MainActivity.start(context);
  finish();
}","protected void startMainActivity(Context context,QBUser user,boolean saveRememberMe){
  ChatDatabaseManager.clearAllCache(context);
  AppSession.getSession().updateUser(user);
  AppSession.saveRememberMe(saveRememberMe);
  MainActivity.start(context);
  finish();
}",0.6641509433962264
114240,"private QBUser createUserForUpdating(){
  QBUser newUser=new QBUser();
  newUser.setId(user.getId());
  if (isFieldValueChanged(fullNameCurrent,fullNameOld)) {
    user.setFullName(fullNameCurrent);
    newUser.setFullName(fullNameCurrent);
  }
  if (isFieldValueChanged(phoneCurrent,phoneOld)) {
    user.setPhone(phoneCurrent);
    newUser.setPhone(phoneCurrent);
  }
  if (isFieldValueChanged(statusCurrent,statusOld)) {
    userCustomData.setStatus(statusCurrent);
    user.setCustomData(Utils.customDataToString(userCustomData));
    newUser.setCustomData(Utils.customDataToString(userCustomData));
  }
  return newUser;
}","private QBUser createUserForUpdating(){
  QBUser newUser=new QBUser();
  newUser.setId(user.getId());
  if (isFieldValueChanged(fullNameCurrent,fullNameOld)) {
    user.setFullName(fullNameCurrent);
    newUser.setFullName(fullNameCurrent);
  }
  if (isFieldValueChanged(phoneCurrent,phoneOld)) {
    user.setPhone(phoneCurrent);
    newUser.setPhone(phoneCurrent);
  }
  if (isFieldValueChanged(statusCurrent,statusOld) || isNeedUpdateAvatar) {
    userCustomData.setStatus(statusCurrent);
    user.setCustomData(Utils.customDataToString(userCustomData));
  }
  newUser.setCustomData(Utils.customDataToString(userCustomData));
  return newUser;
}",0.9529042386185244
114241,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == Crop.REQUEST_CROP) {
    handleCrop(resultCode,data);
  }
 else   if (requestCode == ImageUtils.GALLERY_INTENT_CALLED && resultCode == RESULT_OK) {
    Uri originalUri=data.getData();
    if (originalUri != null) {
      showProgress();
      new ReceiveUriScaledBitmapTask(this).execute(imageUtils,originalUri);
    }
  }
  canPerformLogout.set(true);
  super.onActivityResult(requestCode,resultCode,data);
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == Crop.REQUEST_CROP) {
    handleCrop(resultCode,data);
  }
 else   if (requestCode == ImageUtils.GALLERY_INTENT_CALLED && resultCode == RESULT_OK) {
    Uri originalUri=data.getData();
    if (originalUri != null) {
      showProgress();
      new ReceiveUriScaledBitmapTask(this).execute(imageUtils,originalUri);
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}",0.8717434869739479
114242,"private void handleCrop(int resultCode,Intent result){
  if (resultCode == RESULT_OK) {
    isNeedUpdateAvatar=true;
    avatarBitmapCurrent=imageUtils.getBitmap(outputUri);
    avatarImageView.setImageBitmap(avatarBitmapCurrent);
    showAction();
  }
 else   if (resultCode == Crop.RESULT_ERROR) {
    DialogUtils.showLong(this,Crop.getError(result).getMessage());
  }
}","private void handleCrop(int resultCode,Intent result){
  if (resultCode == RESULT_OK) {
    isNeedUpdateAvatar=true;
    avatarBitmapCurrent=imageUtils.getBitmap(outputUri);
    avatarImageView.setImageBitmap(avatarBitmapCurrent);
    showAction();
  }
 else   if (resultCode == Crop.RESULT_ERROR) {
    DialogUtils.showLong(this,Crop.getError(result).getMessage());
  }
  canPerformLogout.set(true);
}",0.9612403100775194
114243,"@Override protected Bundle perform(Bundle extras) throws Exception {
  QBUser user=(QBUser)extras.getSerializable(QBServiceConsts.EXTRA_USER);
  File file=(File)extras.getSerializable(QBServiceConsts.EXTRA_FILE);
  user.setOldPassword(user.getPassword());
  int authorizationType=extras.getInt(QBServiceConsts.AUTH_ACTION_TYPE,ConstsCore.NOT_INITIALIZED_VALUE);
  Bundle result=new Bundle();
  if (isLoggedViaFB(user,authorizationType)) {
    result.putSerializable(QBServiceConsts.EXTRA_USER,user);
    return result;
  }
  updateUser(user,file);
  result.putSerializable(QBServiceConsts.EXTRA_USER,user);
  return result;
}","@Override protected Bundle perform(Bundle extras) throws Exception {
  QBUser user=(QBUser)extras.getSerializable(QBServiceConsts.EXTRA_USER);
  File file=(File)extras.getSerializable(QBServiceConsts.EXTRA_FILE);
  user.setOldPassword(user.getPassword());
  int authorizationType=extras.getInt(QBServiceConsts.AUTH_ACTION_TYPE,ConstsCore.NOT_INITIALIZED_VALUE);
  Bundle result=new Bundle();
  if (isLoggedViaFB(user,authorizationType)) {
    result.putSerializable(QBServiceConsts.EXTRA_USER,user);
    return result;
  }
  QBUser newUser=updateUser(user,file);
  result.putSerializable(QBServiceConsts.EXTRA_USER,newUser);
  return result;
}",0.9842271293375394
114244,"private void updateUser(QBUser user,File file) throws QBResponseException, SmackException.NotConnectedException {
  if (file == null) {
    authHelper.updateUser(user);
  }
 else {
    authHelper.updateUser(user,file);
  }
}","private QBUser updateUser(QBUser user,File file) throws QBResponseException, SmackException.NotConnectedException {
  if (file == null) {
    return authHelper.updateUser(user);
  }
 else {
    return authHelper.updateUser(user,file);
  }
}",0.9482758620689656
114245,"@Override public void onStartSessionSuccess(){
  unregisterBroadcastReceiver();
  sendNotification();
}","@Override public void onStartSessionSuccess(){
  loginHelper.loginChat();
}",0.7078651685393258
114246,"private void registerCommandBroadcastReceiver(){
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(QBServiceConsts.COMMAND_ACTION);
  intentFilter.addAction(QBServiceConsts.LOGIN_SUCCESS_ACTION);
  intentFilter.addAction(QBServiceConsts.SOCIAL_LOGIN_SUCCESS_ACTION);
  intentFilter.addAction(QBServiceConsts.LOGIN_FAIL_ACTION);
  intentFilter.addAction(QBServiceConsts.SOCIAL_LOGIN_FAIL_ACTION);
  intentFilter.addAction(QBServiceConsts.SIGNUP_FAIL_ACTION);
  LocalBroadcastManager.getInstance(this).registerReceiver(commandBroadcastReceiver,intentFilter);
}","private void registerCommandBroadcastReceiver(){
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(QBServiceConsts.COMMAND_ACTION);
  intentFilter.addAction(QBServiceConsts.LOGIN_SUCCESS_ACTION);
  intentFilter.addAction(QBServiceConsts.SOCIAL_LOGIN_SUCCESS_ACTION);
  intentFilter.addAction(QBServiceConsts.LOGIN_FAIL_ACTION);
  intentFilter.addAction(QBServiceConsts.SOCIAL_LOGIN_FAIL_ACTION);
  intentFilter.addAction(QBServiceConsts.SIGNUP_FAIL_ACTION);
  intentFilter.addAction(QBServiceConsts.LOGIN_CHAT_COMPOSITE_SUCCESS_ACTION);
  intentFilter.addAction(QBServiceConsts.LOGIN_CHAT_COMPOSITE_FAIL_ACTION);
  LocalBroadcastManager.getInstance(this).registerReceiver(commandBroadcastReceiver,intentFilter);
}",0.8823082763857252
114247,"private void parseMessage(Bundle extras){
  prefsHelper=PrefsHelper.getPrefsHelper();
  if (extras.getString(NotificationHelper.MESSAGE) != null) {
    message=extras.getString(NotificationHelper.MESSAGE);
  }
  if (extras.getString(NotificationHelper.USER_ID) != null) {
    userId=Integer.parseInt(extras.getString(NotificationHelper.USER_ID));
  }
  if (extras.getString(NotificationHelper.DIALOG_ID) != null) {
    dialogId=extras.getString(NotificationHelper.DIALOG_ID);
  }
  boolean chatPush=userId != ConstsCore.ZERO_INT_VALUE && !TextUtils.isEmpty(dialogId);
  if (chatPush) {
    saveOpeningDialogData(userId,dialogId,true);
    commandBroadcastReceiver=new CommandBroadcastReceiver();
    registerCommandBroadcastReceiver();
    boolean checkedRememberMe=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_REMEMBER_ME);
    LoginHelper loginHelper=new LoginHelper(this,this,checkedRememberMe);
    loginHelper.checkStartExistSession();
  }
 else {
    saveOpeningDialogData(false);
    sendNotification();
  }
}","private void parseMessage(Bundle extras){
  prefsHelper=PrefsHelper.getPrefsHelper();
  if (extras.getString(NotificationHelper.MESSAGE) != null) {
    message=extras.getString(NotificationHelper.MESSAGE);
  }
  if (extras.getString(NotificationHelper.USER_ID) != null) {
    userId=Integer.parseInt(extras.getString(NotificationHelper.USER_ID));
  }
  if (extras.getString(NotificationHelper.DIALOG_ID) != null) {
    dialogId=extras.getString(NotificationHelper.DIALOG_ID);
  }
  boolean chatPush=userId != ConstsCore.ZERO_INT_VALUE && !TextUtils.isEmpty(dialogId);
  if (chatPush) {
    saveOpeningDialogData(userId,dialogId,true);
    commandBroadcastReceiver=new CommandBroadcastReceiver();
    registerCommandBroadcastReceiver();
    boolean checkedRememberMe=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_REMEMBER_ME);
    loginHelper=new LoginHelper(this,this,checkedRememberMe);
    loginHelper.checkStartExistSession();
  }
 else {
    saveOpeningDialogData(false);
    sendNotification();
  }
}",0.9784102060843964
114248,"@Override public void onReceive(Context context,final Intent intent){
  final String action=intent.getAction();
  return;
}","@Override public void onReceive(Context context,final Intent intent){
  if (intent.getAction().equals(QBServiceConsts.LOGIN_CHAT_COMPOSITE_SUCCESS_ACTION)) {
    saveOpeningDialogData(true);
  }
 else   if (intent.getAction().equals(QBServiceConsts.LOGIN_CHAT_COMPOSITE_FAIL_ACTION)) {
    saveOpeningDialogData(false);
  }
  sendNotification();
}",0.3446808510638298
114249,"@Override public void onReceive(Context context,Intent intent){
  isPushForbidden=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_NOTIFICATIONS,false);
  if (isPushForbidden) {
    return;
  }
  ComponentName comp=new ComponentName(context.getPackageName(),GCMIntentService.class.getName());
  startWakefulService(context,(intent.setComponent(comp)));
  setResultCode(Activity.RESULT_OK);
}","@Override public void onReceive(Context context,Intent intent){
  boolean isPushForbidden=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_NOTIFICATIONS,false);
  if (isPushForbidden) {
    return;
  }
  ComponentName comp=new ComponentName(context.getPackageName(),GCMIntentService.class.getName());
  startWakefulService(context,(intent.setComponent(comp)));
  setResultCode(Activity.RESULT_OK);
}",0.9901234567901236
114250,"private void loginWithFacebook(){
  FacebookHelper.logout();
  facebookHelper.loginWithFacebook();
}","private void loginWithFacebook(){
  ChatDatabaseManager.clearAllCache(this);
  AppSession.saveRememberMe(true);
  showProgress();
  FacebookHelper.logout();
  facebookHelper.loginWithFacebook();
}",0.6756756756756757
114251,"protected void login(String userEmail,String userPassword){
  PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  QBUser user=new QBUser(null,userPassword,userEmail);
  AppSession.getSession().closeAndClear();
  QBLoginCompositeCommand.start(this,user);
}","protected void login(String userEmail,String userPassword){
  AppSession.saveRememberMe(checkedRememberMe);
  PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  QBUser user=new QBUser(null,userPassword,userEmail);
  AppSession.getSession().closeAndClear();
  QBLoginCompositeCommand.start(this,user);
}",0.9225806451612903
114252,"protected void performLoginSuccessAction(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  startMainActivity(BaseAuthActivity.this,user,checkedRememberMe);
  AnalyticsUtils.pushAnalyticsData(BaseAuthActivity.this,user,""String_Node_Str"");
}","protected void performLoginSuccessAction(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  startMainActivity(BaseAuthActivity.this,user);
  AnalyticsUtils.pushAnalyticsData(BaseAuthActivity.this,user,""String_Node_Str"");
}",0.9669117647058824
114253,"@Override public void call(Session session,SessionState state,Exception exception){
  if (session.isOpened()) {
    showProgress();
    AppSession.getSession().closeAndClear();
    QBSocialLoginCommand.start(BaseAuthActivity.this,QBProvider.FACEBOOK,session.getAccessToken(),null);
  }
}","@Override public void call(Session session,SessionState state,Exception exception){
  if (session.isOpened()) {
    checkedRememberMe=true;
    AppSession.getSession().closeAndClear();
    QBSocialLoginCommand.start(BaseAuthActivity.this,QBProvider.FACEBOOK,session.getAccessToken(),null);
  }
}",0.9415807560137456
114254,"public void loginOnClickListener(View view){
  String userEmail=emailEditText.getText().toString();
  String userPassword=passwordEditText.getText().toString();
  initCheckedRememberMe();
  if (validationUtils.isValidUserDate(userEmail,userPassword)) {
    showProgress();
    login(userEmail,userPassword);
  }
}","public void loginOnClickListener(View view){
  String userEmail=emailEditText.getText().toString();
  String userPassword=passwordEditText.getText().toString();
  if (validationUtils.isValidUserDate(userEmail,userPassword)) {
    showProgress();
    ChatDatabaseManager.clearAllCache(this);
    initCheckedRememberMe();
    login(userEmail,userPassword);
  }
}",0.6478454680534919
114255,"protected void performUpdateUserSuccessAction(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  startMainActivity(SignUpActivity.this,user,true);
  AnalyticsUtils.pushAnalyticsData(SignUpActivity.this,user,""String_Node_Str"");
}","protected void performUpdateUserSuccessAction(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  AppSession.saveRememberMe(true);
  startMainActivity(SignUpActivity.this,user);
  AnalyticsUtils.pushAnalyticsData(SignUpActivity.this,user,""String_Node_Str"");
}",0.9119718309859156
114256,"private void startSignUp(File imageFile){
  AppSession.getSession().closeAndClear();
  QBSignUpCommand.start(SignUpActivity.this,user,imageFile);
}","private void startSignUp(File imageFile){
  ChatDatabaseManager.clearAllCache(this);
  AppSession.getSession().closeAndClear();
  QBSignUpCommand.start(SignUpActivity.this,user,imageFile);
}",0.8724035608308606
114257,"@Override public void onStartSessionSuccess(){
  startMainActivity();
  finish();
}","@Override public void onStartSessionSuccess(){
  checkedRememberMe=true;
  startMainActivity();
  finish();
}",0.8645833333333334
114258,"public void showNewMessageAlert(User senderUser,String message){
  newMessageTextView.setText(message);
  senderMessageTextView.setText(senderUser.getFullName());
  Crouton.cancelAllCroutons();
  Crouton.show(activity,newMessageView);
}","public void showNewMessageAlert(User senderUser,String message){
  if (senderUser == null) {
    return;
  }
  newMessageTextView.setText(message);
  senderMessageTextView.setText(senderUser.getFullName());
  Crouton.cancelAllCroutons();
  Crouton.show(activity,newMessageView);
}",0.9147286821705426
114259,"private void setOnlineStatus(User friend){
  ActionBar actionBar=getActionBar();
  actionBar.setSubtitle(friend.getOnlineStatus(this));
}","private void setOnlineStatus(User friend){
  if (friend != null) {
    ActionBar actionBar=getActionBar();
    actionBar.setSubtitle(friend.getOnlineStatus(this));
  }
}",0.8954248366013072
114260,protected abstract void onFileSelected(Uri originalUri);,protected abstract void onFileSelected(Bitmap bitmap);,0.8181818181818182
114261,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  canPerformLogout.set(true);
  if ((isGalleryCalled(requestCode) || isCaptureCalled(requestCode)) && resultCode == RESULT_OK) {
    isNeedToScrollMessages=true;
    onFileSelected(data.getData());
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  canPerformLogout.set(true);
  if ((isGalleryCalled(requestCode) || isCaptureCalled(requestCode)) && resultCode == RESULT_OK) {
    isNeedToScrollMessages=true;
    if (data.getData() == null) {
      onFileSelected((Bitmap)data.getExtras().get(""String_Node_Str""));
    }
 else {
      onFileSelected(data.getData());
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}",0.8445532435740514
114262,"protected void startLoadAttachFile(final File file){
  AlertDialog alertDialog=AlertDialog.newInstance(getResources().getString(R.string.dlg_confirm_sending_attach));
  alertDialog.setPositiveButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      showProgress();
      QBLoadAttachFileCommand.start(BaseDialogActivity.this,file);
    }
  }
);
  alertDialog.show(getFragmentManager(),null);
}","protected void startLoadAttachFile(final File file){
  final AlertDialog alertDialog=AlertDialog.newInstance(getResources().getString(R.string.dlg_confirm_sending_attach));
  alertDialog.setPositiveButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      showProgress();
      QBLoadAttachFileCommand.start(BaseDialogActivity.this,file);
    }
  }
);
  alertDialog.setNegativeButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      alertDialog.dismiss();
    }
  }
);
  alertDialog.show(getFragmentManager(),null);
}",0.822380106571936
114263,"@Override protected void onFileSelected(Uri originalUri){
  Bitmap bitmap=imageUtils.getBitmap(originalUri);
  new ReceiveFileFromBitmapTask(GroupDialogActivity.this).execute(imageUtils,bitmap,true);
}","@Override protected void onFileSelected(Bitmap bitmap){
  new ReceiveFileFromBitmapTask(GroupDialogActivity.this).execute(imageUtils,bitmap,true);
}",0.8424068767908309
114264,"protected void onReceiveMessage(Bundle extras){
  senderUser=(User)extras.getSerializable(QBServiceConsts.EXTRA_USER);
  String message=extras.getString(QBServiceConsts.EXTRA_CHAT_MESSAGE);
  String dialogId=extras.getString(QBServiceConsts.EXTRA_DIALOG_ID);
  messagesDialog=ChatDatabaseManager.getDialogByDialogId(activity,dialogId);
  isPrivateMessage=extras.getBoolean(QBServiceConsts.EXTRA_IS_PRIVATE_MESSAGE);
  showNewMessageAlert(senderUser,message);
}","protected void onReceiveMessage(Bundle extras){
  senderUser=(User)extras.getSerializable(QBServiceConsts.EXTRA_USER);
  String message=extras.getString(QBServiceConsts.EXTRA_CHAT_MESSAGE);
  String dialogId=extras.getString(QBServiceConsts.EXTRA_DIALOG_ID);
  messagesDialog=ChatDatabaseManager.getDialogByDialogId(activity,dialogId);
  isPrivateMessage=extras.getBoolean(QBServiceConsts.EXTRA_IS_PRIVATE_MESSAGE);
  if (messagesDialog != null) {
    showNewMessageAlert(senderUser,message);
  }
}",0.9603340292275574
114265,"@Override public void onReceiveChatMessageAction(Bundle extras){
  boolean isSplashActivity=activityHelper.getContext() instanceof SplashActivity;
  if (!isSplashActivity) {
    activityHelper.onReceiveMessage(extras);
  }
}","@Override public void onReceiveChatMessageAction(Bundle extras){
  boolean isSplashActivity=activityHelper.getContext() instanceof SplashActivity;
  boolean isCallActivity=activityHelper.getContext() instanceof CallActivity;
  if (!isSplashActivity && !isCallActivity) {
    activityHelper.onReceiveMessage(extras);
  }
}",0.818348623853211
114266,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  canPerformLogout.set(true);
  if (isGalleryCalled(requestCode) && resultCode == RESULT_OK) {
    isNeedToScrollMessages=true;
    onFileSelected(data.getData());
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  canPerformLogout.set(true);
  if ((isGalleryCalled(requestCode) || isCaptureCalled(requestCode)) && resultCode == RESULT_OK) {
    isNeedToScrollMessages=true;
    onFileSelected(data.getData());
  }
  super.onActivityResult(requestCode,resultCode,data);
}",0.948170731707317
114267,"protected void startLoadAttachFile(File file){
  showProgress();
  QBLoadAttachFileCommand.start(this,file);
}","protected void startLoadAttachFile(final File file){
  AlertDialog alertDialog=AlertDialog.newInstance(getResources().getString(R.string.dlg_confirm_sending_attach));
  alertDialog.setPositiveButton(new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      showProgress();
      QBLoadAttachFileCommand.start(BaseDialogActivity.this,file);
    }
  }
);
  alertDialog.show(getFragmentManager(),null);
}",0.3826086956521739
114268,"protected void attachButtonOnClick(){
  canPerformLogout.set(false);
  imageUtils.getImage();
}","protected void attachButtonOnClick(){
  canPerformLogout.set(false);
  CharSequence[] itemsArray=resources.getStringArray(R.array.dlg_attach_types_array);
  Dialog dialog=DialogUtils.createSingleChoiceItemsDialog(this,resources.getString(R.string.dlg_select_attach_type),itemsArray,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int item){
switch (item) {
case 0:
        imageUtils.getCaptureImage();
      break;
case 1:
    imageUtils.getImage();
  break;
}
dialog.dismiss();
}
}
);
dialog.show();
}",0.2515527950310559
114269,"@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  String errorMessage=exception.getMessage();
  if (exception.getMessage().equals(resources.getString(R.string.error_bad_timestamp))) {
    errorMessage=resources.getString(R.string.error_bad_timestamp_from_app);
  }
 else   if (exception.getMessage().equals(resources.getString(R.string.error_email_already_taken)) && startedLoginType.equals(LoginType.FACEBOOK)) {
    errorMessage=resources.getString(R.string.error_email_already_taken_from_app);
  }
  DialogUtils.showLong(LandingActivity.this,errorMessage);
  hideProgress();
}","@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  int errorCode=bundle.getInt(QBServiceConsts.EXTRA_ERROR_CODE);
  parseExceptionMessage(exception);
}",0.3121516164994425
114270,"@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  int errorCode=bundle.getInt(QBServiceConsts.EXTRA_ERROR_CODE);
  String errorMessage;
  if (exception.getMessage().equals(resources.getString(R.string.error_bad_timestamp))) {
    errorMessage=resources.getString(R.string.error_bad_timestamp_from_app);
    validationUtils.setError(errorMessage);
  }
 else   if (exception.getMessage().equals(resources.getString(R.string.error_email_already_taken)) && startedLoginType.equals(LoginType.FACEBOOK)) {
    errorMessage=resources.getString(R.string.error_email_already_taken_from_app);
    DialogUtils.showLong(LoginActivity.this,errorMessage);
  }
  hideProgress();
}","@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  int errorCode=bundle.getInt(QBServiceConsts.EXTRA_ERROR_CODE);
  parseExceptionMessage(exception);
}",0.4130213631739572
114271,"@Override public void onReceive(Context context,Intent intent){
  updateDialogData();
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(QBServiceConsts.UPDATE_DIALOG)) {
    updateDialogData();
  }
}",0.7073170731707317
114272,"@Override public void onAbsolutePathExtFileReceived(String absolutePath){
  imageUtils.showFullImage(context,absolutePath);
}","@Override public void onAbsolutePathExtFileReceived(String absolutePath){
  chatUIHelperListener.onScreenResetPossibilityPerformLogout(false);
  imageUtils.showFullImage((android.app.Activity)context,absolutePath);
}",0.7331378299120235
114273,"private void initMaskedImageView(Bitmap loadedBitmap){
  loadedImageBitmap=loadedBitmap;
  viewHolder.attachImageView.setOnClickListener(receiveImageFileOnClickListener());
  viewHolder.attachImageView.setImageBitmap(loadedImageBitmap);
  setViewVisibility(viewHolder.attachMessageRelativeLayout,View.VISIBLE);
  setViewVisibility(viewHolder.attachImageView,View.VISIBLE);
  updateUIAfterLoading();
  scrollMessagesListener.onScrollToBottom();
}","private void initMaskedImageView(Bitmap loadedBitmap){
  loadedImageBitmap=loadedBitmap;
  viewHolder.attachImageView.setOnClickListener(receiveImageFileOnClickListener());
  viewHolder.attachImageView.setImageBitmap(loadedImageBitmap);
  setViewVisibility(viewHolder.attachMessageRelativeLayout,View.VISIBLE);
  setViewVisibility(viewHolder.attachImageView,View.VISIBLE);
  updateUIAfterLoading();
  chatUIHelperListener.onScrollMessagesToBottom();
}",0.953125
114274,"@Override public void onUriScaledBitmapReceived(Uri originalUri){
  hideProgress();
  startCropActivity(originalUri);
}","@Override public void onUriScaledBitmapReceived(Uri originalUri){
  hideProgress();
  canPerformLogout.set(false);
  startCropActivity(originalUri);
}",0.8847583643122676
114275,"public GroupDialogMessagesAdapter(Context context,Cursor cursor,ScrollMessagesListener scrollMessagesListener,QBDialog dialog){
  super(context,cursor);
  this.scrollMessagesListener=scrollMessagesListener;
  this.dialog=dialog;
}","public GroupDialogMessagesAdapter(Context context,Cursor cursor,ChatUIHelperListener chatUIHelperListener,QBDialog dialog){
  super(context,cursor);
  this.chatUIHelperListener=chatUIHelperListener;
  this.dialog=dialog;
}",0.7300884955752213
114276,"public PrivateDialogMessagesAdapter(Context context,PrivateDialogActivity.FriendOperationListener friendOperationListener,Cursor cursor,ScrollMessagesListener scrollMessagesListener,QBDialog dialog){
  super(context,cursor);
  this.friendOperationListener=friendOperationListener;
  this.scrollMessagesListener=scrollMessagesListener;
  this.dialog=dialog;
}","public PrivateDialogMessagesAdapter(Context context,PrivateDialogActivity.FriendOperationListener friendOperationListener,Cursor cursor,ChatUIHelperListener chatUIHelperListener,QBDialog dialog){
  super(context,cursor);
  this.friendOperationListener=friendOperationListener;
  this.chatUIHelperListener=chatUIHelperListener;
  this.dialog=dialog;
}",0.827683615819209
114277,"public void showFullImage(Context context,String absolutePath){
  Intent intent=new Intent();
  intent.setAction(android.content.Intent.ACTION_VIEW);
  Uri uri=Uri.parse(""String_Node_Str"" + absolutePath);
  intent.setDataAndType(uri,""String_Node_Str"");
  context.startActivity(intent);
}","public void showFullImage(Activity activity,String absolutePath){
  Intent intent=new Intent();
  intent.setAction(android.content.Intent.ACTION_VIEW);
  Uri uri=Uri.parse(""String_Node_Str"" + absolutePath);
  intent.setDataAndType(uri,""String_Node_Str"");
  activity.startActivityForResult(intent,GALLERY_IMAGE_PREVIEWER_CALLED);
}",0.7909238249594813
114278,"@Override public Bundle perform(Bundle extras) throws Exception {
  Class<? extends Activity> callClass=(Class<? extends Activity>)extras.getSerializable(QBServiceConsts.EXTRA_CALL_ACTIVITY);
  if (callClass == null) {
    videoChatHelper.init(QBChatService.getInstance());
  }
 else {
    videoChatHelper.initActivityClass(callClass);
  }
  return extras;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  if (extras == null) {
    videoChatHelper.init(QBChatService.getInstance());
  }
 else   if (extras.getSerializable(QBServiceConsts.EXTRA_CALL_ACTIVITY) != null) {
    videoChatHelper.initActivityClass((Class<? extends Activity>)extras.getSerializable(QBServiceConsts.EXTRA_CALL_ACTIVITY));
  }
  return extras;
}",0.3653585926928281
114279,"@Override public void onClick(DialogInterface dialog,int which){
  saveUserAgreementShowing();
  facebookHelper.loginWithFacebook();
}","@Override public void onClick(DialogInterface dialog,int which){
  saveUserAgreementShowing();
  loginWithFacebook();
}",0.9407114624505928
114280,"public void connectFacebookOnClickListener(View view){
  startedLoginType=LoginType.FACEBOOK;
  if (!isUserAgreementShown()) {
    positiveUserAgreementOnClickListener=new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        saveUserAgreementShowing();
        facebookHelper.loginWithFacebook();
      }
    }
;
    showUserAgreement(positiveUserAgreementOnClickListener,negativeUserAgreementOnClickListener);
  }
 else {
    facebookHelper.loginWithFacebook();
  }
}","public void connectFacebookOnClickListener(View view){
  startedLoginType=LoginType.FACEBOOK;
  if (!isUserAgreementShown()) {
    positiveUserAgreementOnClickListener=new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        saveUserAgreementShowing();
        loginWithFacebook();
      }
    }
;
    showUserAgreement(positiveUserAgreementOnClickListener,negativeUserAgreementOnClickListener);
  }
 else {
    loginWithFacebook();
  }
}",0.6996197718631179
114281,"@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  String errorMessage=exception.getMessage();
  if (exception.getMessage().equals(resources.getString(R.string.error_bad_timestamp))) {
    errorMessage=resources.getString(R.string.error_bad_timestamp_from_app);
  }
  DialogUtils.showLong(LandingActivity.this,errorMessage);
  hideProgress();
}","@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  String errorMessage=exception.getMessage();
  if (exception.getMessage().equals(resources.getString(R.string.error_bad_timestamp))) {
    errorMessage=resources.getString(R.string.error_bad_timestamp_from_app);
  }
 else   if (exception.getMessage().equals(resources.getString(R.string.error_email_already_taken)) && startedLoginType.equals(LoginType.FACEBOOK)) {
    errorMessage=resources.getString(R.string.error_email_already_taken_from_app);
  }
  DialogUtils.showLong(LandingActivity.this,errorMessage);
  hideProgress();
}",0.7834862385321101
114282,"@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  int errorCode=bundle.getInt(QBServiceConsts.EXTRA_ERROR_CODE);
  String errorMessage=exception.getMessage();
  if (exception.getMessage().equals(resources.getString(R.string.error_bad_timestamp))) {
    errorMessage=resources.getString(R.string.error_bad_timestamp_from_app);
  }
  validationUtils.setError(errorMessage);
  hideProgress();
}","@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  int errorCode=bundle.getInt(QBServiceConsts.EXTRA_ERROR_CODE);
  String errorMessage;
  if (exception.getMessage().equals(resources.getString(R.string.error_bad_timestamp))) {
    errorMessage=resources.getString(R.string.error_bad_timestamp_from_app);
    validationUtils.setError(errorMessage);
  }
 else   if (exception.getMessage().equals(resources.getString(R.string.error_email_already_taken)) && startedLoginType.equals(LoginType.FACEBOOK)) {
    errorMessage=resources.getString(R.string.error_email_already_taken_from_app);
    DialogUtils.showLong(LoginActivity.this,errorMessage);
  }
  hideProgress();
}",0.4330065359477124
114283,"private void handleAddedFriends(Intent data){
  addedFriendIdsList=(ArrayList<Integer>)data.getSerializableExtra(QBServiceConsts.EXTRA_FRIENDS);
  if (addedFriendIdsList != null) {
    currentNotificationTypeList.add(MessagesNotificationType.ADDED_DIALOG);
    sendNotificationToGroup();
  }
}","private void handleAddedFriends(Intent data){
  addedFriendIdsList=(ArrayList<Integer>)data.getSerializableExtra(QBServiceConsts.EXTRA_FRIENDS);
  if (addedFriendIdsList != null) {
    try {
      multiChatHelper.sendNotificationToPrivateChatAboutCreatingGroupChat(currentDialog,addedFriendIdsList);
    }
 catch (    Exception e) {
      ErrorUtils.logError(e);
    }
    currentNotificationTypeList.add(MessagesNotificationType.ADDED_DIALOG);
    sendNotificationToGroup();
  }
}",0.7571059431524548
114284,"private void doAutoLogin(String userEmail,String userPassword){
  if (LoginType.EMAIL.equals(getCurrentLoginType())) {
    login(userEmail,userPassword);
  }
 else {
    facebookHelper.loginWithFacebook();
  }
}","private void doAutoLogin(String userEmail,String userPassword){
  if (LoginType.EMAIL.equals(getCurrentLoginType())) {
    login(userEmail,userPassword);
  }
 else {
    FacebookHelper.logout();
    facebookHelper.loginWithFacebook();
  }
}",0.9312638580931264
114285,"@Override public void run(){
  stopTypingMessage();
}","@Override public void run(){
  isTypingNow=false;
  sendTypingStatus();
}",0.7301587301587301
114286,"@Override protected void onPause(){
  super.onPause();
  onUpdateChatDialog();
  hideSmileLayout();
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (isTypingNow) {
      stopTypingMessage();
    }
  }
}","@Override protected void onPause(){
  super.onPause();
  onUpdateChatDialog();
  hideSmileLayout();
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (isTypingNow) {
      isTypingNow=false;
      sendTypingStatus();
    }
  }
}",0.8728070175438597
114287,"@Override public void onTextChanged(CharSequence charSequence,int start,int before,int count){
  super.onTextChanged(charSequence,start,before,count);
  setSendButtonVisibility(charSequence);
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (!isTypingNow) {
      startTypingMessage();
    }
    checkStopTyping();
  }
}","@Override public void onTextChanged(CharSequence charSequence,int start,int before,int count){
  super.onTextChanged(charSequence,start,before,count);
  setSendButtonVisibility(charSequence);
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (!isTypingNow) {
      isTypingNow=true;
      sendTypingStatus();
    }
    checkStopTyping();
  }
}",0.9156976744186046
114288,"private void initListeners(){
  messageEditText.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      hideSmileLayout();
      if (QBDialogType.PRIVATE.equals(dialog.getType())) {
        if (!isTypingNow) {
          startTypingMessage();
        }
      }
      return false;
    }
  }
);
  messageEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      setSendButtonVisibility(charSequence);
      if (QBDialogType.PRIVATE.equals(dialog.getType())) {
        if (!isTypingNow) {
          startTypingMessage();
        }
        checkStopTyping();
      }
    }
  }
);
  smilePanelImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSmilesLayoutShowing()) {
        hideSmileLayout();
        KeyboardUtils.showKeyboard(BaseDialogActivity.this);
      }
 else {
        KeyboardUtils.hideKeyboard(BaseDialogActivity.this);
        needToShowSmileLayout=true;
        if (keyboardHeight == ConstsCore.ZERO_INT_VALUE) {
          showSmileLayout(ConstsCore.ZERO_INT_VALUE);
        }
      }
    }
  }
);
  rootView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      initKeyboardHeight();
      if (needToShowSmileLayout) {
        showSmileLayout(keyboardHeight);
      }
    }
  }
);
}","private void initListeners(){
  messageEditText.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      hideSmileLayout();
      if (QBDialogType.PRIVATE.equals(dialog.getType())) {
        if (!isTypingNow) {
          isTypingNow=true;
          sendTypingStatus();
        }
      }
      return false;
    }
  }
);
  messageEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      setSendButtonVisibility(charSequence);
      if (QBDialogType.PRIVATE.equals(dialog.getType())) {
        if (!isTypingNow) {
          isTypingNow=true;
          sendTypingStatus();
        }
        checkStopTyping();
      }
    }
  }
);
  smilePanelImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSmilesLayoutShowing()) {
        hideSmileLayout();
        KeyboardUtils.showKeyboard(BaseDialogActivity.this);
      }
 else {
        KeyboardUtils.hideKeyboard(BaseDialogActivity.this);
        needToShowSmileLayout=true;
        if (keyboardHeight == ConstsCore.ZERO_INT_VALUE) {
          showSmileLayout(ConstsCore.ZERO_INT_VALUE);
        }
      }
    }
  }
);
  rootView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      initKeyboardHeight();
      if (needToShowSmileLayout) {
        showSmileLayout(keyboardHeight);
      }
    }
  }
);
}",0.9620330679730558
114289,"@Override public boolean onTouch(View view,MotionEvent event){
  hideSmileLayout();
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (!isTypingNow) {
      startTypingMessage();
    }
  }
  return false;
}","@Override public boolean onTouch(View view,MotionEvent event){
  hideSmileLayout();
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (!isTypingNow) {
      isTypingNow=true;
      sendTypingStatus();
    }
  }
  return false;
}",0.8733624454148472
114290,"public QBBaseChatHelper(Context context){
  super(context);
  privateChatMessageListener=new PrivateChatMessageListener();
  privateChatManagerListener=new PrivateChatManagerListener();
  privateChatIsTypingListener=new PrivateChatIsTypingListener();
  groupChatMessageListener=new GroupChatMessageListener();
  notificationChatListeners=new CopyOnWriteArrayList<QBNotificationChatListener>();
}","public QBBaseChatHelper(Context context){
  super(context);
  privateChatMessageListener=new PrivateChatMessageListener();
  groupChatMessageListener=new GroupChatMessageListener();
  notificationChatListeners=new CopyOnWriteArrayList<QBNotificationChatListener>();
}",0.8066465256797583
114291,"protected void onPrivateMessageReceived(QBPrivateChat privateChat,QBChatMessage chatMessage){
}","public void onPrivateMessageReceived(QBChat privateChat,final QBChatMessage chatMessage){
}",0.8709677419354839
114292,"public void init(QBUser chatCreator){
  this.chatService=QBChatService.getInstance();
  this.chatCreator=chatCreator;
  privateChatManager=chatService.getPrivateChatManager();
  privateChatManager.addPrivateChatManagerListener(privateChatManagerListener);
  groupChatManager=chatService.getGroupChatManager();
}","public void init(QBUser chatCreator){
  this.chatService=QBChatService.getInstance();
  this.chatCreator=chatCreator;
  privateChatManager=chatService.getPrivateChatManager();
  groupChatManager=chatService.getGroupChatManager();
}",0.8523985239852399
114293,"protected void onGroupMessageReceived(QBGroupChat groupChat,QBChatMessage chatMessage){
}","public void onGroupMessageReceived(QBChat groupChat,final QBChatMessage chatMessage){
}",0.875
114294,"@Override protected void onGroupMessageReceived(QBGroupChat groupChat,QBChatMessage chatMessage){
  User user=UsersDatabaseManager.getUserById(context,chatMessage.getSenderId());
  MessageCache messageCache;
  if (user == null) {
    user=ChatUtils.getTempUserFromChatMessage(chatMessage);
  }
  messageCache=parseReceivedMessage(chatMessage);
  if (ChatNotificationUtils.isNotificationMessage(chatMessage)) {
    messageCache.setMessagesNotificationType(ChatNotificationUtils.getUpdateChatNotificationMessageType(chatMessage));
    messageCache.setMessage(ChatNotificationUtils.getBodyForUpdateChatNotificationMessage(context,chatMessage));
  }
  saveMessageToCache(messageCache);
  if (!chatMessage.getSenderId().equals(chatCreator.getId())) {
    notifyMessageReceived(chatMessage,user,messageCache.getDialogId(),false);
  }
}","public void onGroupMessageReceived(QBChat chat,QBChatMessage chatMessage){
  User user=UsersDatabaseManager.getUserById(context,chatMessage.getSenderId());
  MessageCache messageCache;
  if (user == null) {
    user=ChatUtils.getTempUserFromChatMessage(chatMessage);
  }
  messageCache=parseReceivedMessage(chatMessage);
  if (ChatNotificationUtils.isNotificationMessage(chatMessage)) {
    messageCache.setMessagesNotificationType(ChatNotificationUtils.getUpdateChatNotificationMessageType(chatMessage));
    messageCache.setMessage(ChatNotificationUtils.getBodyForUpdateChatNotificationMessage(context,chatMessage));
  }
  saveMessageToCache(messageCache);
  if (!chatMessage.getSenderId().equals(chatCreator.getId())) {
    notifyMessageReceived(chatMessage,user,messageCache.getDialogId(),false);
  }
}",0.9724770642201837
114295,"private QBDialog getQBDialog(){
  Cursor cursor=(Cursor)messagesAdapter.getItem(messagesAdapter.getCount() - 1);
  MessageCache messageCache=ChatDatabaseManager.getMessageCacheFromCursor(cursor);
  if (messageCache.getMessagesNotificationType() == null) {
    dialog.setLastMessage(messageCache.getMessage());
  }
 else {
    dialog.setLastMessage(getResources().getString(R.string.notification_message));
  }
  dialog.setLastMessageDateSent(messageCache.getTime());
  dialog.setUnreadMessageCount(ConstsCore.ZERO_INT_VALUE);
  return dialog;
}","private QBDialog getQBDialog(){
  Cursor cursor=(Cursor)messagesAdapter.getItem(messagesAdapter.getCount() - 1);
  MessageCache messageCache=ChatDatabaseManager.getMessageCacheFromCursor(cursor);
  MessagesNotificationType messagesNotificationType=messageCache.getMessagesNotificationType();
  if (messagesNotificationType == null) {
    dialog.setLastMessage(messageCache.getMessage());
  }
 else   if (ChatNotificationUtils.isUpdateDialogNotificationMessage(messagesNotificationType.getCode())) {
    dialog.setLastMessage(messageCache.getMessage());
  }
  dialog.setLastMessageDateSent(messageCache.getTime());
  dialog.setUnreadMessageCount(ConstsCore.ZERO_INT_VALUE);
  return dialog;
}",0.7578947368421053
114296,"@Override public void execute(Bundle bundle){
  hideProgress();
  QBDialog dialog=(QBDialog)bundle.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  if (dialog.getRoomJid() != null) {
    GroupDialogActivity.start(NewDialogActivity.this,dialog);
    sendNotificationToGroup(dialog);
    finish();
  }
 else {
    ErrorUtils.showError(NewDialogActivity.this,getString(R.string.dlg_fail_create_groupchat));
  }
}","@Override public void execute(Bundle bundle){
  hideProgress();
  QBDialog dialog=(QBDialog)bundle.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  if (dialog.getRoomJid() != null) {
    GroupDialogActivity.start(NewDialogActivity.this,dialog);
    finish();
  }
 else {
    ErrorUtils.showError(NewDialogActivity.this,getString(R.string.dlg_fail_create_groupchat));
  }
}",0.9526248399487836
114297,"private QBDialog getDialog(){
  Cursor cursor=(Cursor)messagesAdapter.getItem(messagesAdapter.getCount() - 1);
  MessageCache messageCache=ChatDatabaseManager.getMessageCacheFromCursor(cursor);
  if (messageCache.getMessagesNotificationType() == null) {
    dialog.setLastMessage(messageCache.getMessage());
  }
 else {
    dialog.setLastMessage(getResources().getString(R.string.notification_message));
  }
  dialog.setLastMessageDateSent(messageCache.getTime());
  dialog.setUnreadMessageCount(ConstsCore.ZERO_INT_VALUE);
  dialog.setLastMessageUserId(messageCache.getSenderId());
  dialog.setType(QBDialogType.PRIVATE);
  return dialog;
}","private QBDialog getDialog(){
  Cursor cursor=(Cursor)messagesAdapter.getItem(messagesAdapter.getCount() - 1);
  MessageCache messageCache=ChatDatabaseManager.getMessageCacheFromCursor(cursor);
  MessagesNotificationType messagesNotificationType=messageCache.getMessagesNotificationType();
  if (messagesNotificationType == null) {
    dialog.setLastMessage(messageCache.getMessage());
  }
 else   if (ChatNotificationUtils.isFriendsNotificationMessage(messagesNotificationType.getCode())) {
    dialog.setLastMessage(getResources().getString(R.string.frl_friends_contact_request));
  }
 else   if (ChatNotificationUtils.isUpdateDialogNotificationMessage(messagesNotificationType.getCode())) {
    dialog.setLastMessage(messageCache.getMessage());
  }
  dialog.setLastMessageDateSent(messageCache.getTime());
  dialog.setUnreadMessageCount(ConstsCore.ZERO_INT_VALUE);
  dialog.setLastMessageUserId(messageCache.getSenderId());
  dialog.setType(QBDialogType.PRIVATE);
  return dialog;
}",0.7380073800738007
114298,"public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  MessageCache messageCache=null;
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    int friendsMessageTypeCode;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    messageCache=new MessageCache(messageId,dialogId,senderId,message,attachURL,time,historyMessage.isRead(),true,true);
    if (historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE) != null) {
      friendsMessageTypeCode=Integer.parseInt(historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE).toString());
      if (ChatNotificationUtils.isFriendsMessageTypeCode(friendsMessageTypeCode)) {
        messageCache.setMessagesNotificationType(MessagesNotificationType.parseByCode(friendsMessageTypeCode));
      }
 else       if (ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_UPDATE.equals(friendsMessageTypeCode + ConstsCore.EMPTY_STRING)) {
        messageCache.setMessage(ChatNotificationUtils.getNotificationMessage(context,historyMessage));
        messageCache.setMessagesNotificationType(ChatNotificationUtils.getNotificationMessageType(historyMessage));
      }
    }
    saveChatMessage(context,messageCache,true);
  }
}","public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  MessageCache messageCache=null;
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    int friendsMessageTypeCode;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    messageCache=new MessageCache(messageId,dialogId,senderId,message,attachURL,time,historyMessage.isRead(),true,true);
    if (historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE) != null) {
      friendsMessageTypeCode=Integer.parseInt(historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE).toString());
      if (ChatNotificationUtils.isFriendsNotificationMessage(friendsMessageTypeCode)) {
        messageCache.setMessagesNotificationType(MessagesNotificationType.parseByCode(friendsMessageTypeCode));
      }
 else       if (ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_UPDATE.equals(friendsMessageTypeCode + ConstsCore.EMPTY_STRING)) {
        messageCache.setMessage(ChatNotificationUtils.getBodyForChatNotificationMessage(context,historyMessage));
        messageCache.setMessagesNotificationType(ChatNotificationUtils.getNotificationMessageType(historyMessage));
      }
    }
    saveChatMessage(context,messageCache);
  }
}",0.984179301252472
114299,"public static void updateDialog(Context context,String dialogId,String lastMessage,long dateSent,long lastSenderId,int countUnreadMessages){
  ContentResolver resolver=context.getContentResolver();
  ContentValues values=new ContentValues();
  if (countUnreadMessages >= ConstsCore.ZERO_INT_VALUE) {
    values.put(DialogTable.Cols.COUNT_UNREAD_MESSAGES,countUnreadMessages);
  }
  if (TextUtils.isEmpty(lastMessage)) {
    values.put(DialogTable.Cols.LAST_MESSAGE,lastMessage);
  }
 else {
    values.put(DialogTable.Cols.LAST_MESSAGE,Html.fromHtml(lastMessage).toString());
  }
  values.put(DialogTable.Cols.LAST_MESSAGE_USER_ID,lastSenderId);
  values.put(DialogTable.Cols.LAST_DATE_SENT,dateSent);
  String condition=DialogTable.Cols.DIALOG_ID + ""String_Node_Str"" + dialogId+ ""String_Node_Str"";
  resolver.update(DialogTable.CONTENT_URI,values,condition,null);
}","public static void updateDialog(Context context,String dialogId,String lastMessage,long dateSent,long lastSenderId,int countUnreadMessages){
  ContentResolver resolver=context.getContentResolver();
  ContentValues values=getContentValuesForUpdateDialog(dateSent,lastSenderId,countUnreadMessages);
  if (TextUtils.isEmpty(lastMessage)) {
    values.put(DialogTable.Cols.LAST_MESSAGE,lastMessage);
  }
 else {
    values.put(DialogTable.Cols.LAST_MESSAGE,Html.fromHtml(lastMessage).toString());
  }
  String condition=DialogTable.Cols.DIALOG_ID + ""String_Node_Str"" + dialogId+ ""String_Node_Str"";
  resolver.update(DialogTable.CONTENT_URI,values,condition,null);
}",0.6797642436149313
114300,"private static String parseMessageBody(Context context,MessageCache messageCache){
  String resultMessage=messageCache.getMessage();
  if (messageCache.getMessagesNotificationType() != null && !ChatNotificationUtils.isNotificationMessageUpdateDialog(messageCache.getMessagesNotificationType().getCode())) {
    resultMessage=ChatNotificationUtils.getResourceBodyForNotificationType(context,messageCache.getMessagesNotificationType(),messageCache);
  }
 else {
    if (!TextUtils.isEmpty(messageCache.getMessage())) {
      resultMessage=Html.fromHtml(messageCache.getMessage()).toString();
    }
  }
  return resultMessage;
}","private static String parseMessageBody(Context context,MessageCache messageCache){
  String resultMessage=messageCache.getMessage();
  if (messageCache.getMessagesNotificationType() != null && !ChatNotificationUtils.isUpdateDialogNotificationMessage(messageCache.getMessagesNotificationType().getCode())) {
    resultMessage=ChatNotificationUtils.getBodyForFriendsNotificationMessage(context,messageCache.getMessagesNotificationType(),messageCache);
  }
 else {
    if (!TextUtils.isEmpty(messageCache.getMessage())) {
      resultMessage=Html.fromHtml(messageCache.getMessage()).toString();
    }
  }
  return resultMessage;
}",0.8769968051118211
114301,"public static void saveChatMessage(Context context,MessageCache messageCache,boolean fromHistory){
  int countUnreadMessagesLocal;
  boolean ownMessage=AppSession.getSession().getUser().getId() == messageCache.getSenderId();
  ContentValues values=new ContentValues();
  String condition=MessageTable.Cols.MESSAGE_ID + ""String_Node_Str"" + messageCache.getId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(MessageTable.CONTENT_URI,null,condition,null,null);
  String body;
  if (messageCache.getMessagesNotificationType() != null) {
    values.put(MessageTable.Cols.FRIENDS_NOTIFICATION_TYPE,messageCache.getMessagesNotificationType().getCode());
  }
  body=parseMessageBody(context,messageCache);
  values.put(MessageTable.Cols.BODY,body);
  values.put(MessageTable.Cols.TIME,messageCache.getTime());
  values.put(MessageTable.Cols.ATTACH_FILE_ID,messageCache.getAttachUrl());
  values.put(MessageTable.Cols.IS_READ,messageCache.isRead());
  values.put(MessageTable.Cols.IS_DELIVERED,messageCache.isDelivered());
  values.put(MessageTable.Cols.IS_SYNC,messageCache.isSync());
  if (cursor != null && cursor.getCount() > ConstsCore.ZERO_INT_VALUE) {
    resolver.update(MessageTable.CONTENT_URI,values,condition,null);
  }
 else {
    values.put(MessageTable.Cols.MESSAGE_ID,messageCache.getId());
    values.put(MessageTable.Cols.DIALOG_ID,messageCache.getDialogId());
    values.put(MessageTable.Cols.SENDER_ID,messageCache.getSenderId());
    resolver.insert(MessageTable.CONTENT_URI,values);
  }
  if (fromHistory) {
    countUnreadMessagesLocal=ConstsCore.ZERO_INT_VALUE;
  }
 else   if (!messageCache.isSync() && !ownMessage) {
    countUnreadMessagesLocal=getCountUnreadMessagesByDialogIdLocal(context,messageCache.getDialogId());
    countUnreadMessagesLocal=++countUnreadMessagesLocal;
  }
 else {
    countUnreadMessagesLocal=getCountUnreadMessagesByDialogIdLocal(context,messageCache.getDialogId());
  }
  updateDialog(context,messageCache.getDialogId(),body,messageCache.getTime(),messageCache.getSenderId(),countUnreadMessagesLocal);
}","private static void saveChatMessage(Context context,MessageCache messageCache){
  ContentValues values=new ContentValues();
  MessagesNotificationType messagesNotificationType=messageCache.getMessagesNotificationType();
  messageCache.setMessage(parseMessageBody(context,messageCache));
  values.put(MessageTable.Cols.BODY,messageCache.getMessage());
  values.put(MessageTable.Cols.TIME,messageCache.getTime());
  values.put(MessageTable.Cols.ATTACH_FILE_ID,messageCache.getAttachUrl());
  values.put(MessageTable.Cols.IS_READ,messageCache.isRead());
  values.put(MessageTable.Cols.IS_DELIVERED,messageCache.isDelivered());
  values.put(MessageTable.Cols.IS_SYNC,messageCache.isSync());
  values.put(MessageTable.Cols.FRIENDS_NOTIFICATION_TYPE,messagesNotificationType == null ? ConstsCore.ZERO_INT_VALUE : messagesNotificationType.getCode());
  String condition=MessageTable.Cols.MESSAGE_ID + ""String_Node_Str"" + messageCache.getId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(MessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > ConstsCore.ZERO_INT_VALUE) {
    resolver.update(MessageTable.CONTENT_URI,values,condition,null);
  }
 else {
    values.put(MessageTable.Cols.MESSAGE_ID,messageCache.getId());
    values.put(MessageTable.Cols.DIALOG_ID,messageCache.getDialogId());
    values.put(MessageTable.Cols.SENDER_ID,messageCache.getSenderId());
    resolver.insert(MessageTable.CONTENT_URI,values);
  }
}",0.4761642325709562
114302,"private void initLocalBroadcastManagers(){
  typingMessageBroadcastReceiver=new TypingStatusBroadcastReceiver();
  LocalBroadcastManager.getInstance(this).registerReceiver(typingMessageBroadcastReceiver,new IntentFilter(QBServiceConsts.TYPING_MESSAGE));
}","private void initLocalBroadcastManagers(){
  typingMessageBroadcastReceiver=new TypingStatusBroadcastReceiver();
  LocalBroadcastManager.getInstance(this).registerReceiver(typingMessageBroadcastReceiver,new IntentFilter(QBServiceConsts.TYPING_MESSAGE));
  updatingDialogBroadcastReceiver=new UpdatingDialogBroadcastReceiver();
  LocalBroadcastManager.getInstance(this).registerReceiver(updatingDialogBroadcastReceiver,new IntentFilter(QBServiceConsts.UPDATE_DIALOG));
}",0.7044198895027625
114303,"@Override public void onReceive(Context context,Intent intent){
  Bundle extras=intent.getExtras();
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    boolean isTyping=extras.getBoolean(QBServiceConsts.EXTRA_IS_TYPING);
    if (isTyping) {
      startMessageTypingAnimation();
    }
 else {
      stopMessageTypingAnimation();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  updateDialogData();
}",0.3926096997690531
114304,"@Override protected void onResume(){
  super.onResume();
  updateChatData();
  scrollListView();
}","@Override protected void onResume(){
  super.onResume();
  updateDialogData();
  scrollListView();
}",0.9595959595959596
114305,"private void updateActionBar(){
  actionBar.setTitle(groupName);
  actionBar.setSubtitle(getString(R.string.gdd_participants,dialog.getOccupants().size()));
  actionBar.setLogo(R.drawable.placeholder_group);
  if (!TextUtils.isEmpty(dialog.getPhoto())) {
    loadLogoActionBar(dialog.getPhoto());
  }
}","protected void updateActionBar(){
  actionBar.setTitle(dialog.getName());
  actionBar.setSubtitle(getString(R.string.gdd_participants,dialog.getOccupants().size()));
  actionBar.setLogo(R.drawable.placeholder_group);
  if (!TextUtils.isEmpty(dialog.getPhoto())) {
    loadLogoActionBar(dialog.getPhoto());
  }
}",0.9494290375203916
114306,"public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    int friendsMessageTypeCode;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    MessageCache messageCache=new MessageCache(messageId,dialogId,senderId,message,attachURL,time,historyMessage.isRead(),true,true);
    if (historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE) != null) {
      friendsMessageTypeCode=Integer.parseInt(historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE).toString());
      if (ChatNotificationUtils.isFriendsNotificationMessage(friendsMessageTypeCode)) {
        messageCache.setMessagesNotificationType(MessagesNotificationType.parseByCode(friendsMessageTypeCode));
      }
 else       if (ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_UPDATE.equals(friendsMessageTypeCode + ConstsCore.EMPTY_STRING)) {
        messageCache.setMessage(ChatNotificationUtils.getBodyForUpdateChatNotificationMessage(context,historyMessage));
        messageCache.setMessagesNotificationType(ChatNotificationUtils.getUpdateChatNotificationMessageType(historyMessage));
      }
    }
    saveChatMessage(context,messageCache);
  }
  updateDialog(context,dialogId,ConstsCore.ZERO_INT_VALUE);
}","public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    int friendsMessageTypeCode;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    MessageCache messageCache=new MessageCache(messageId,dialogId,senderId,message,attachURL,time,historyMessage.isRead(),true,true);
    if (historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE) != null) {
      friendsMessageTypeCode=Integer.parseInt(historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE).toString());
      if (ChatNotificationUtils.isFriendsNotificationMessage(friendsMessageTypeCode)) {
        messageCache.setMessagesNotificationType(MessagesNotificationType.parseByCode(friendsMessageTypeCode));
      }
 else       if (ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_UPDATE.equals(friendsMessageTypeCode + ConstsCore.EMPTY_STRING) || ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_CREATE.equals(friendsMessageTypeCode + ConstsCore.EMPTY_STRING)) {
        messageCache.setMessage(ChatNotificationUtils.getBodyForUpdateChatNotificationMessage(context,historyMessage));
        messageCache.setMessagesNotificationType(ChatNotificationUtils.getUpdateChatNotificationMessageType(historyMessage));
      }
    }
    saveChatMessage(context,messageCache);
  }
  updateDialog(context,dialogId,ConstsCore.ZERO_INT_VALUE);
}",0.9607066707279928
114307,"public QBDialog createGroupChat(String name,List<Integer> friendIdsList) throws Exception {
  ArrayList<Integer> occupantIdsList=ChatUtils.getOccupantIdsWithUser(friendIdsList);
  QBDialog dialogToCreate=new QBDialog();
  dialogToCreate.setName(name);
  dialogToCreate.setType(QBDialogType.GROUP);
  dialogToCreate.setOccupantsIds(occupantIdsList);
  QBDialog dialog=groupChatManager.createDialog(dialogToCreate);
  joinRoomChat(dialog);
  saveDialogToCache(dialog);
  sendNotificationToPrivateChatAboutCreatingGroupChat(dialog,friendIdsList);
  QBChatMessage chatMessage=ChatNotificationUtils.createNotificationMessageForUpdateChat(context,dialog,MessagesNotificationType.CREATE_DIALOG,dialog.getOccupants());
  sendGroupMessage(chatMessage,dialog.getRoomJid(),dialog.getDialogId());
  return dialog;
}","public QBDialog createGroupChat(String name,List<Integer> friendIdsList) throws Exception {
  ArrayList<Integer> occupantIdsList=ChatUtils.getOccupantIdsWithUser(friendIdsList);
  QBDialog dialogToCreate=new QBDialog();
  dialogToCreate.setName(name);
  dialogToCreate.setType(QBDialogType.GROUP);
  dialogToCreate.setOccupantsIds(occupantIdsList);
  QBDialog dialog=groupChatManager.createDialog(dialogToCreate);
  joinRoomChat(dialog);
  saveDialogToCache(dialog);
  sendNotificationToPrivateChatAboutCreatingGroupChat(dialog,friendIdsList);
  QBChatMessage chatMessage=ChatNotificationUtils.createNotificationMessageForCreateGroupChat(context,dialog.getOccupants());
  sendGroupMessage(chatMessage,dialog.getRoomJid(),dialog.getDialogId());
  return dialog;
}",0.9597444089456868
114308,"public void onGroupMessageReceived(QBChat chat,QBChatMessage chatMessage){
  User user=UsersDatabaseManager.getUserById(context,chatMessage.getSenderId());
  MessageCache messageCache;
  if (user == null) {
    user=ChatUtils.getTempUserFromChatMessage(chatMessage);
  }
  messageCache=parseReceivedMessage(chatMessage);
  if (ChatNotificationUtils.isNotificationMessage(chatMessage)) {
    messageCache.setMessagesNotificationType(ChatNotificationUtils.getUpdateChatNotificationMessageType(chatMessage));
    messageCache.setMessage(ChatNotificationUtils.getBodyForUpdateChatNotificationMessage(context,chatMessage));
  }
  saveMessageToCache(messageCache);
  if (!chatMessage.getSenderId().equals(chatCreator.getId())) {
    notifyMessageReceived(chatMessage,user,messageCache.getDialogId(),false);
  }
}","public void onGroupMessageReceived(QBChat chat,QBChatMessage chatMessage){
  User user=UsersDatabaseManager.getUserById(context,chatMessage.getSenderId());
  MessageCache messageCache;
  if (user == null) {
    user=ChatUtils.getTempUserFromChatMessage(chatMessage);
  }
  messageCache=parseReceivedMessage(chatMessage);
  if (ChatNotificationUtils.isNotificationMessage(chatMessage)) {
    messageCache.setMessagesNotificationType(ChatNotificationUtils.getUpdateChatNotificationMessageType(chatMessage));
    messageCache.setMessage(ChatNotificationUtils.getBodyForUpdateChatNotificationMessage(context,chatMessage));
    updateDialogByNotification(chatMessage);
  }
  saveMessageToCache(messageCache);
  if (!chatMessage.getSenderId().equals(chatCreator.getId())) {
    notifyMessageReceived(chatMessage,user,messageCache.getDialogId(),false);
  }
}",0.9728424864212432
114309,"@Override public void onReceivedNotification(String notificationType,QBChatMessage chatMessage){
  if (ChatNotificationUtils.PROPERTY_TYPE_TO_PRIVATE_CHAT__GROUP_CHAT_CREATE.equals(notificationType)) {
    createDialogByNotification(chatMessage,MessagesNotificationType.CREATE_DIALOG);
  }
 else   if (ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_UPDATE.equals(notificationType)) {
    updateDialogByNotification(chatMessage);
  }
}","@Override public void onReceivedNotification(String notificationType,QBChatMessage chatMessage){
  if (ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_CREATE.equals(notificationType)) {
    createDialogByNotification(chatMessage,MessagesNotificationType.CREATE_DIALOG);
  }
 else   if (ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_UPDATE.equals(notificationType)) {
    updateDialogByNotification(chatMessage);
  }
}",0.9866071428571428
114310,"private void updateDialogByNotification(QBChatMessage chatMessage){
  String dialogId=chatMessage.getProperty(ChatNotificationUtils.PROPERTY_DIALOG_ID);
  String lastMessage=ChatNotificationUtils.getBodyForUpdateChatNotificationMessage(context,chatMessage);
  QBDialog dialog=ChatDatabaseManager.getDialogByDialogId(context,dialogId);
  if (dialog == null) {
    dialog=ChatNotificationUtils.parseDialogFromQBMessage(context,chatMessage,lastMessage,QBDialogType.GROUP);
    saveDialogToCache(dialog);
  }
}","private void updateDialogByNotification(QBChatMessage chatMessage){
  String dialogId=chatMessage.getProperty(ChatNotificationUtils.PROPERTY_DIALOG_ID);
  QBDialog dialog=ChatDatabaseManager.getDialogByDialogId(context,dialogId);
  ChatNotificationUtils.updateDialogFromQBMessage(context,chatMessage,dialog);
  saveDialogToCache(dialog);
  notifyUpdatingDialog();
}",0.5281285878300803
114311,"public static MessagesNotificationType getUpdateChatNotificationMessageType(QBMessage chatMessage){
  String notificationType=chatMessage.getProperty(PROPERTY_NOTIFICATION_TYPE);
  String occupantsIds=chatMessage.getProperty(PROPERTY_OCCUPANTS_IDS);
  String dialogName=chatMessage.getProperty(PROPERTY_ROOM_NAME);
  String photoUrl=chatMessage.getProperty(PROPERTY_ROOM_PHOTO);
  String leave=chatMessage.getProperty(PROPERTY_ROOM_LEAVE);
  if (!TextUtils.isEmpty(occupantsIds) && notificationType.equals(PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_UPDATE)) {
    return MessagesNotificationType.ADDED_DIALOG;
  }
  if (!TextUtils.isEmpty(occupantsIds) && notificationType.equals(PROPERTY_TYPE_TO_PRIVATE_CHAT__GROUP_CHAT_CREATE)) {
    return MessagesNotificationType.CREATE_DIALOG;
  }
  if (!TextUtils.isEmpty(dialogName)) {
    return MessagesNotificationType.NAME_DIALOG;
  }
  if (!TextUtils.isEmpty(photoUrl)) {
    return MessagesNotificationType.PHOTO_DIALOG;
  }
  if (!TextUtils.isEmpty(leave)) {
    return MessagesNotificationType.LEAVE_DIALOG;
  }
  return null;
}","public static MessagesNotificationType getUpdateChatNotificationMessageType(QBMessage chatMessage){
  String notificationType=chatMessage.getProperty(PROPERTY_NOTIFICATION_TYPE);
  String occupantsIds=chatMessage.getProperty(PROPERTY_OCCUPANTS_IDS);
  String dialogName=chatMessage.getProperty(PROPERTY_ROOM_NAME);
  String photoUrl=chatMessage.getProperty(PROPERTY_ROOM_PHOTO);
  String leave=chatMessage.getProperty(PROPERTY_ROOM_LEAVE);
  if (!TextUtils.isEmpty(occupantsIds) && notificationType.equals(PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_UPDATE)) {
    return MessagesNotificationType.ADDED_DIALOG;
  }
  if (!TextUtils.isEmpty(occupantsIds) && notificationType.equals(PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_CREATE)) {
    return MessagesNotificationType.CREATE_DIALOG;
  }
  if (!TextUtils.isEmpty(dialogName)) {
    return MessagesNotificationType.NAME_DIALOG;
  }
  if (!TextUtils.isEmpty(photoUrl)) {
    return MessagesNotificationType.PHOTO_DIALOG;
  }
  if (!TextUtils.isEmpty(leave)) {
    return MessagesNotificationType.LEAVE_DIALOG;
  }
  return null;
}",0.994413407821229
114312,"public static int getNotificationTypeIfExist(QBChatMessage chatMessage){
  int friendsMessageTypeCode=ConstsCore.ZERO_INT_VALUE;
  if (chatMessage.getProperty(PROPERTY_NOTIFICATION_TYPE) != null) {
    String inputCode=chatMessage.getProperty(PROPERTY_NOTIFICATION_TYPE);
    if (PROPERTY_TYPE_TO_PRIVATE_CHAT__GROUP_CHAT_CREATE.equals(inputCode)) {
      friendsMessageTypeCode=MessagesNotificationType.CREATE_DIALOG.getCode();
    }
 else {
      friendsMessageTypeCode=Integer.parseInt(inputCode);
    }
  }
  return friendsMessageTypeCode;
}","public static int getNotificationTypeIfExist(QBChatMessage chatMessage){
  int friendsMessageTypeCode=ConstsCore.ZERO_INT_VALUE;
  if (chatMessage.getProperty(PROPERTY_NOTIFICATION_TYPE) != null) {
    String inputCode=chatMessage.getProperty(PROPERTY_NOTIFICATION_TYPE);
    if (PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_CREATE.equals(inputCode)) {
      friendsMessageTypeCode=MessagesNotificationType.CREATE_DIALOG.getCode();
    }
 else {
      friendsMessageTypeCode=Integer.parseInt(inputCode);
    }
  }
  return friendsMessageTypeCode;
}",0.9889705882352942
114313,"public static QBChatMessage createMessageToPrivateChatAboutCreatingGroupChat(QBDialog dialog,String body){
  String occupantsIds=ChatUtils.getOccupantsIdsStringFromList(dialog.getOccupants());
  QBChatMessage chatMessage=new QBChatMessage();
  chatMessage.setBody(body);
  chatMessage.setProperty(PROPERTY_NOTIFICATION_TYPE,PROPERTY_TYPE_TO_PRIVATE_CHAT__GROUP_CHAT_CREATE);
  chatMessage.setProperty(PROPERTY_OCCUPANTS_IDS,occupantsIds);
  chatMessage.setProperty(PROPERTY_ROOM_JID,dialog.getRoomJid());
  chatMessage.setProperty(PROPERTY_ROOM_NAME,dialog.getName());
  return chatMessage;
}","public static QBChatMessage createMessageToPrivateChatAboutCreatingGroupChat(QBDialog dialog,String body){
  String occupantsIds=ChatUtils.getOccupantsIdsStringFromList(dialog.getOccupants());
  QBChatMessage chatMessage=new QBChatMessage();
  chatMessage.setBody(body);
  chatMessage.setProperty(PROPERTY_NOTIFICATION_TYPE,PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_CREATE);
  chatMessage.setProperty(PROPERTY_OCCUPANTS_IDS,occupantsIds);
  chatMessage.setProperty(PROPERTY_ROOM_JID,dialog.getRoomJid());
  chatMessage.setProperty(PROPERTY_ROOM_NAME,dialog.getName());
  return chatMessage;
}",0.9898477157360406
114314,"public static String getBodyForUpdateChatNotificationMessage(Context context,QBMessage chatMessage){
  String occupantsIds=chatMessage.getProperty(PROPERTY_OCCUPANTS_IDS);
  String dialogName=chatMessage.getProperty(PROPERTY_ROOM_NAME);
  String photoUrl=chatMessage.getProperty(PROPERTY_ROOM_PHOTO);
  String leave=chatMessage.getProperty(PROPERTY_ROOM_LEAVE);
  String notificationType=chatMessage.getProperty(PROPERTY_NOTIFICATION_TYPE);
  Resources resources=context.getResources();
  String resultMessage=resources.getString(R.string.cht_notification_message);
  QBUser user=AppSession.getSession().getUser();
  boolean ownMessage=user.getId().equals(chatMessage.getSenderId());
  if (notificationType.equals(PROPERTY_TYPE_TO_PRIVATE_CHAT__GROUP_CHAT_CREATE)) {
    resultMessage=ownMessage ? resources.getString(R.string.user_created_room,user.getFullName()) : resources.getString(R.string.user_created_room,ChatUtils.getFullNameById(context,chatMessage.getSenderId()));
    return resultMessage;
  }
  if (!TextUtils.isEmpty(occupantsIds)) {
    String fullNames=ChatUtils.getFullNamesFromOpponentIds(context,occupantsIds);
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_added_message,user.getFullName(),fullNames) : resources.getString(R.string.cht_update_group_added_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),fullNames);
  }
  if (!TextUtils.isEmpty(dialogName)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_name_message,user.getFullName(),dialogName) : resources.getString(R.string.cht_update_group_name_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),dialogName);
  }
  if (!TextUtils.isEmpty(photoUrl)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_photo_message,user.getFullName()) : resources.getString(R.string.cht_update_group_photo_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()));
  }
  if (!TextUtils.isEmpty(leave)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_leave_message,user.getFullName()) : resources.getString(R.string.cht_update_group_leave_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()));
  }
  return resultMessage;
}","public static String getBodyForUpdateChatNotificationMessage(Context context,QBMessage chatMessage){
  String occupantsIds=chatMessage.getProperty(PROPERTY_OCCUPANTS_IDS);
  String dialogName=chatMessage.getProperty(PROPERTY_ROOM_NAME);
  String photoUrl=chatMessage.getProperty(PROPERTY_ROOM_PHOTO);
  String leave=chatMessage.getProperty(PROPERTY_ROOM_LEAVE);
  String notificationType=chatMessage.getProperty(PROPERTY_NOTIFICATION_TYPE);
  Resources resources=context.getResources();
  String resultMessage=resources.getString(R.string.cht_notification_message);
  QBUser user=AppSession.getSession().getUser();
  boolean ownMessage=user.getId().equals(chatMessage.getSenderId());
  if (notificationType.equals(PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_CREATE)) {
    String fullNames=ChatUtils.getFullNamesFromOpponentIds(context,occupantsIds);
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_added_message,user.getFullName(),fullNames) : resources.getString(R.string.cht_update_group_added_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),fullNames);
    return resultMessage;
  }
  if (!TextUtils.isEmpty(occupantsIds)) {
    String fullNames=ChatUtils.getFullNamesFromOpponentIds(context,occupantsIds);
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_added_message,user.getFullName(),fullNames) : resources.getString(R.string.cht_update_group_added_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),fullNames);
  }
  if (!TextUtils.isEmpty(dialogName)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_name_message,user.getFullName(),dialogName) : resources.getString(R.string.cht_update_group_name_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),dialogName);
  }
  if (!TextUtils.isEmpty(photoUrl)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_photo_message,user.getFullName()) : resources.getString(R.string.cht_update_group_photo_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()));
  }
  if (!TextUtils.isEmpty(leave)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_leave_message,user.getFullName()) : resources.getString(R.string.cht_update_group_leave_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()));
  }
  return resultMessage;
}",0.9502572898799314
114315,"private void saveOpeningDialogData(int userId,String dialogId){
  if (userId != ConstsCore.ZERO_INT_VALUE && !TextUtils.isEmpty(dialogId)) {
    PrefsHelper prefsHelper=PrefsHelper.getPrefsHelper();
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,true);
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_USER_ID,userId);
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_DIALOG_ID,dialogId);
  }
}","private void saveOpeningDialogData(int userId,String dialogId){
  if (userId != ConstsCore.ZERO_INT_VALUE && !TextUtils.isEmpty(dialogId)) {
    PrefsHelper prefsHelper=PrefsHelper.getPrefsHelper();
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_USER_ID,userId);
    prefsHelper.savePref(PrefsHelper.PREF_PUSH_MESSAGE_DIALOG_ID,dialogId);
  }
}",0.6870229007633588
114316,"private void sendNotification(){
  notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  Intent intent=new Intent(this,SplashActivity.class);
  saveOpeningDialogData(userId,dialogId);
  PendingIntent contentIntent=PendingIntent.getActivity(this,ConstsCore.ZERO_INT_VALUE,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_launcher).setContentTitle(getString(R.string.push_title)).setStyle(new NotificationCompat.BigTextStyle().bigText(message)).setContentText(message).setVibrate(new long[]{ConstsCore.ZERO_INT_VALUE,VIBRATOR_DURATION});
  builder.setAutoCancel(true);
  builder.setContentIntent(contentIntent);
  builder.getNotification().flags|=Notification.FLAG_AUTO_CANCEL;
  notificationManager.notify(NOTIFICATION_ID,builder.build());
}","private void sendNotification(){
  notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  Intent intent=new Intent(this,SplashActivity.class);
  intent.putExtra(CLICKED_ON_PUSH,true);
  saveOpeningDialogData(userId,dialogId);
  PendingIntent contentIntent=PendingIntent.getActivity(this,ConstsCore.ZERO_INT_VALUE,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_launcher).setContentTitle(getString(R.string.push_title)).setStyle(new NotificationCompat.BigTextStyle().bigText(message)).setContentText(message).setVibrate(new long[]{ConstsCore.ZERO_INT_VALUE,VIBRATOR_DURATION});
  builder.setAutoCancel(true);
  builder.setContentIntent(contentIntent);
  builder.getNotification().flags|=Notification.FLAG_AUTO_CANCEL;
  notificationManager.notify(NOTIFICATION_ID,builder.build());
}",0.97703081232493
114317,"public void sendMessageOnClick(View view){
  try {
    ((QBMultiChatHelper)baseChatHelper).sendGroupMessage(dialog.getRoomJid(),messageEditText.getText().toString());
  }
 catch (  QBResponseException e) {
    ErrorUtils.showError(this,e);
  }
  messageEditText.setText(ConstsCore.EMPTY_STRING);
  isNeedToScrollMessages=true;
  scrollListView();
}","public void sendMessageOnClick(View view){
  sendMessage(false);
}",0.3140096618357488
114318,"public void sendMessageOnClick(View view){
  try {
    ((QBPrivateChatHelper)baseChatHelper).sendPrivateMessage(messageEditText.getText().toString(),opponentFriend.getUserId());
  }
 catch (  QBResponseException exc) {
    ErrorUtils.showError(this,exc);
  }
  messageEditText.setText(ConstsCore.EMPTY_STRING);
  isNeedToScrollMessages=true;
  scrollListView();
}","public void sendMessageOnClick(View view){
  sendMessage(true);
}",0.3037383177570093
114319,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Crashlytics.start(this);
  addActions();
  facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
  String userEmail=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_USER_EMAIL);
  String userPassword=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_USER_PASSWORD);
  boolean isRememberMe=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_REMEMBER_ME,false);
  if (isRememberMe) {
    checkStartExistSession(userEmail,userPassword);
  }
 else {
    startLanding();
  }
  setContentView(R.layout.activity_splash);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Crashlytics.start(this);
  addActions();
  facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
  String userEmail=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_USER_EMAIL);
  String userPassword=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_USER_PASSWORD);
  boolean isRememberMe=PrefsHelper.getPrefsHelper().getPref(PrefsHelper.PREF_REMEMBER_ME,false);
  if (getIntent().hasExtra(GCMIntentService.CLICKED_ON_PUSH)) {
    PrefsHelper.getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_MESSAGE_NEED_TO_OPEN_DIALOG,true);
  }
  if (isRememberMe) {
    checkStartExistSession(userEmail,userPassword);
  }
 else {
    startLanding();
  }
  setContentView(R.layout.activity_splash);
}",0.8893306825712393
114320,"private void sendGroupMessage(QBChatMessage chatMessage,String roomJId,String dialogId) throws QBResponseException {
  QBGroupChat groupChat=groupChatManager.getGroupChat(roomJId);
  QBDialog existingDialog=null;
  if (groupChat == null) {
    existingDialog=ChatDatabaseManager.getDialogByDialogId(context,dialogId);
    groupChat=(QBGroupChat)createChatLocally(existingDialog,null);
  }
  String error=null;
  addNecessaryPropertyForQBChatMessage(chatMessage,dialogId);
  try {
    groupChat.sendMessage(chatMessage);
  }
 catch (  XMPPException e) {
    error=context.getString(R.string.dlg_fail_send_msg);
  }
catch (  SmackException.NotConnectedException e) {
    error=context.getString(R.string.dlg_fail_connection);
  }
catch (  IllegalStateException e) {
    ErrorUtils.showError(context,context.getString(R.string.dlg_not_joined_room));
    tryJoinRoomChat(existingDialog);
  }
  if (error != null) {
    throw new QBResponseException(error);
  }
}","private void sendGroupMessage(QBChatMessage chatMessage,String roomJId,String dialogId) throws QBResponseException {
  QBGroupChat groupChat=groupChatManager.getGroupChat(roomJId);
  QBDialog existingDialog=null;
  if (groupChat == null) {
    existingDialog=ChatDatabaseManager.getDialogByDialogId(context,dialogId);
    groupChat=(QBGroupChat)createChatLocally(existingDialog,null);
  }
  String error=null;
  addNecessaryPropertyForQBChatMessage(chatMessage,dialogId);
  try {
    groupChat.sendMessage(chatMessage);
  }
 catch (  XMPPException e) {
    error=context.getString(R.string.dlg_fail_send_msg);
  }
catch (  SmackException.NotConnectedException e) {
    error=context.getString(R.string.dlg_fail_connection);
  }
catch (  IllegalStateException e) {
    tryJoinRoomChat(existingDialog);
    throw new IllegalStateException(e);
  }
  if (error != null) {
    throw new QBResponseException(error);
  }
}",0.9343299519487454
114321,"private void createMessageTable(SQLiteDatabase db){
  StringBuilder messageTableFields=new StringBuilder();
  messageTableFields.append(MessageTable.Cols.ID).append(""String_Node_Str"").append(MessageTable.Cols.MESSAGE_ID).append(""String_Node_Str"").append(MessageTable.Cols.DIALOG_ID).append(""String_Node_Str"").append(MessageTable.Cols.SENDER_ID).append(""String_Node_Str"").append(MessageTable.Cols.BODY).append(""String_Node_Str"").append(MessageTable.Cols.TIME).append(""String_Node_Str"").append(MessageTable.Cols.ATTACH_FILE_ID).append(""String_Node_Str"").append(MessageTable.Cols.IS_READ).append(""String_Node_Str"").append(MessageTable.Cols.IS_DELIVERED).append(""String_Node_Str"").append(MessageTable.Cols.IS_SYNC).append(""String_Node_Str"").append(MessageTable.Cols.FRIENDS_NOTIFICATION_TYPE).append(""String_Node_Str"");
  createTable(db,MessageTable.TABLE_NAME,messageTableFields.toString());
}","private void createMessageTable(SQLiteDatabase db){
  StringBuilder messageTableFields=new StringBuilder();
  messageTableFields.append(MessageTable.Cols.ID).append(""String_Node_Str"").append(MessageTable.Cols.MESSAGE_ID).append(""String_Node_Str"").append(MessageTable.Cols.DIALOG_ID).append(""String_Node_Str"").append(MessageTable.Cols.SENDER_ID).append(""String_Node_Str"").append(MessageTable.Cols.RECIPIENT_ID).append(""String_Node_Str"").append(MessageTable.Cols.BODY).append(""String_Node_Str"").append(MessageTable.Cols.TIME).append(""String_Node_Str"").append(MessageTable.Cols.ATTACH_FILE_ID).append(""String_Node_Str"").append(MessageTable.Cols.IS_READ).append(""String_Node_Str"").append(MessageTable.Cols.IS_DELIVERED).append(""String_Node_Str"").append(MessageTable.Cols.IS_SYNC).append(""String_Node_Str"").append(MessageTable.Cols.FRIENDS_NOTIFICATION_TYPE).append(""String_Node_Str"");
  createTable(db,MessageTable.TABLE_NAME,messageTableFields.toString());
}",0.964769647696477
114322,"public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    int friendsMessageTypeCode;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    MessageCache messageCache=new MessageCache(messageId,dialogId,senderId,message,attachURL,time,historyMessage.isRead(),true,true);
    if (historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE) != null) {
      friendsMessageTypeCode=Integer.parseInt(historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE).toString());
      if (ChatNotificationUtils.isFriendsNotificationMessage(friendsMessageTypeCode)) {
        messageCache.setMessagesNotificationType(MessagesNotificationType.parseByCode(friendsMessageTypeCode));
      }
 else       if (ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_UPDATE.equals(friendsMessageTypeCode + ConstsCore.EMPTY_STRING) || ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_CREATE.equals(friendsMessageTypeCode + ConstsCore.EMPTY_STRING)) {
        messageCache.setMessage(ChatNotificationUtils.getBodyForUpdateChatNotificationMessage(context,historyMessage));
        messageCache.setMessagesNotificationType(ChatNotificationUtils.getUpdateChatNotificationMessageType(historyMessage));
      }
    }
    saveChatMessage(context,messageCache);
  }
  updateDialog(context,dialogId,ConstsCore.ZERO_INT_VALUE);
}","public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    int recipientId;
    long time=historyMessage.getDateSent();
    if (historyMessage.getRecipientId() == null) {
      recipientId=ConstsCore.ZERO_INT_VALUE;
    }
 else {
      recipientId=historyMessage.getRecipientId();
    }
    String attachURL;
    int friendsMessageTypeCode;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    MessageCache messageCache=new MessageCache(messageId,dialogId,senderId,recipientId,message,attachURL,time,historyMessage.isRead(),true,true);
    if (historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE) != null) {
      friendsMessageTypeCode=Integer.parseInt(historyMessage.getProperty(ChatNotificationUtils.PROPERTY_NOTIFICATION_TYPE).toString());
      if (ChatNotificationUtils.isFriendsNotificationMessage(friendsMessageTypeCode)) {
        messageCache.setMessagesNotificationType(MessagesNotificationType.parseByCode(friendsMessageTypeCode));
      }
 else       if (ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_UPDATE.equals(friendsMessageTypeCode + ConstsCore.EMPTY_STRING) || ChatNotificationUtils.PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_CREATE.equals(friendsMessageTypeCode + ConstsCore.EMPTY_STRING)) {
        messageCache.setMessage(ChatNotificationUtils.getBodyForUpdateChatNotificationMessage(context,historyMessage));
        messageCache.setMessagesNotificationType(ChatNotificationUtils.getUpdateChatNotificationMessageType(historyMessage));
      }
    }
    saveChatMessage(context,messageCache);
  }
  updateDialog(context,dialogId,ConstsCore.ZERO_INT_VALUE);
}",0.2159468438538206
114323,"public static MessageCache getMessageCacheFromCursor(Cursor cursor){
  String id=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.MESSAGE_ID));
  String dialogId=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.DIALOG_ID));
  Integer senderId=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.SENDER_ID));
  String body=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.BODY));
  long time=cursor.getLong(cursor.getColumnIndex(MessageTable.Cols.TIME));
  String attachUrl=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.ATTACH_FILE_ID));
  boolean isRead=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.IS_READ)) > ConstsCore.ZERO_INT_VALUE;
  boolean isDelivered=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.IS_DELIVERED)) > ConstsCore.ZERO_INT_VALUE;
  boolean isSync=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.IS_SYNC)) > ConstsCore.ZERO_INT_VALUE;
  MessagesNotificationType messagesNotificationType=MessagesNotificationType.parseByCode(cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.FRIENDS_NOTIFICATION_TYPE)));
  MessageCache messageCache=new MessageCache(id,dialogId,senderId,body,attachUrl,time,isRead,isDelivered,isSync);
  messageCache.setMessagesNotificationType(messagesNotificationType);
  return messageCache;
}","public static MessageCache getMessageCacheFromCursor(Cursor cursor){
  String id=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.MESSAGE_ID));
  String dialogId=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.DIALOG_ID));
  Integer senderId=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.SENDER_ID));
  Integer recipientId=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.RECIPIENT_ID));
  String body=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.BODY));
  long time=cursor.getLong(cursor.getColumnIndex(MessageTable.Cols.TIME));
  String attachUrl=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.ATTACH_FILE_ID));
  boolean isRead=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.IS_READ)) > ConstsCore.ZERO_INT_VALUE;
  boolean isDelivered=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.IS_DELIVERED)) > ConstsCore.ZERO_INT_VALUE;
  boolean isSync=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.IS_SYNC)) > ConstsCore.ZERO_INT_VALUE;
  MessagesNotificationType messagesNotificationType=MessagesNotificationType.parseByCode(cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.FRIENDS_NOTIFICATION_TYPE)));
  MessageCache messageCache=new MessageCache(id,dialogId,senderId,recipientId,body,attachUrl,time,isRead,isDelivered,isSync);
  messageCache.setMessagesNotificationType(messagesNotificationType);
  return messageCache;
}",0.961395694135115
114324,"public static void updateStatusMessage(Context context,MessageCache messageCache){
  ContentValues values=new ContentValues();
  String condition=MessageTable.Cols.MESSAGE_ID + ""String_Node_Str"" + messageCache.getId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(MessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    String dialogId=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.DIALOG_ID));
    String message=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.BODY));
    long time=cursor.getLong(cursor.getColumnIndex(MessageTable.Cols.TIME));
    int lastSenderId=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.SENDER_ID));
    messageCache.setDialogId(dialogId);
    messageCache.setMessage(message);
    messageCache.setSenderId(lastSenderId);
    messageCache.setTime(time);
    values.put(MessageTable.Cols.IS_READ,messageCache.isRead());
    resolver.update(MessageTable.CONTENT_URI,values,condition,null);
    cursor.close();
    int countUnreadMessagesLocal=getCountUnreadMessagesByDialogIdLocal(context,messageCache.getDialogId());
    countUnreadMessagesLocal=--countUnreadMessagesLocal;
    checkUpdatingDialogForFriendsNotificationMessage(context,messageCache,countUnreadMessagesLocal);
  }
}","public static void updateStatusMessage(Context context,MessageCache messageCache){
  ContentValues values=new ContentValues();
  String condition=MessageTable.Cols.MESSAGE_ID + ""String_Node_Str"" + messageCache.getId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(MessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    String dialogId=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.DIALOG_ID));
    String message=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.BODY));
    long time=cursor.getLong(cursor.getColumnIndex(MessageTable.Cols.TIME));
    int lastSenderId=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.SENDER_ID));
    int recipientId=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.RECIPIENT_ID));
    messageCache.setDialogId(dialogId);
    messageCache.setMessage(message);
    messageCache.setSenderId(lastSenderId);
    messageCache.setRecipientId(recipientId);
    messageCache.setTime(time);
    values.put(MessageTable.Cols.IS_READ,messageCache.isRead());
    resolver.update(MessageTable.CONTENT_URI,values,condition,null);
    cursor.close();
    int countUnreadMessagesLocal=getCountUnreadMessagesByDialogIdLocal(context,messageCache.getDialogId());
    countUnreadMessagesLocal=--countUnreadMessagesLocal;
    checkUpdatingDialogForFriendsNotificationMessage(context,messageCache,countUnreadMessagesLocal);
  }
}",0.9518413597733713
114325,"private static void saveChatMessage(Context context,MessageCache messageCache){
  ContentValues values=new ContentValues();
  MessagesNotificationType messagesNotificationType=messageCache.getMessagesNotificationType();
  messageCache.setMessage(parseMessageBody(context,messageCache));
  values.put(MessageTable.Cols.BODY,messageCache.getMessage());
  values.put(MessageTable.Cols.TIME,messageCache.getTime());
  values.put(MessageTable.Cols.ATTACH_FILE_ID,messageCache.getAttachUrl());
  values.put(MessageTable.Cols.IS_READ,messageCache.isRead());
  values.put(MessageTable.Cols.IS_DELIVERED,messageCache.isDelivered());
  values.put(MessageTable.Cols.IS_SYNC,messageCache.isSync());
  values.put(MessageTable.Cols.FRIENDS_NOTIFICATION_TYPE,messagesNotificationType == null ? ConstsCore.ZERO_INT_VALUE : messagesNotificationType.getCode());
  String condition=MessageTable.Cols.MESSAGE_ID + ""String_Node_Str"" + messageCache.getId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(MessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > ConstsCore.ZERO_INT_VALUE) {
    resolver.update(MessageTable.CONTENT_URI,values,condition,null);
  }
 else {
    values.put(MessageTable.Cols.MESSAGE_ID,messageCache.getId());
    values.put(MessageTable.Cols.DIALOG_ID,messageCache.getDialogId());
    values.put(MessageTable.Cols.SENDER_ID,messageCache.getSenderId());
    resolver.insert(MessageTable.CONTENT_URI,values);
  }
}","private static void saveChatMessage(Context context,MessageCache messageCache){
  ContentValues values=new ContentValues();
  MessagesNotificationType messagesNotificationType=messageCache.getMessagesNotificationType();
  messageCache.setMessage(parseMessageBody(context,messageCache));
  values.put(MessageTable.Cols.BODY,messageCache.getMessage());
  values.put(MessageTable.Cols.TIME,messageCache.getTime());
  values.put(MessageTable.Cols.ATTACH_FILE_ID,messageCache.getAttachUrl());
  values.put(MessageTable.Cols.IS_READ,messageCache.isRead());
  values.put(MessageTable.Cols.IS_DELIVERED,messageCache.isDelivered());
  values.put(MessageTable.Cols.IS_SYNC,messageCache.isSync());
  values.put(MessageTable.Cols.FRIENDS_NOTIFICATION_TYPE,messagesNotificationType == null ? ConstsCore.ZERO_INT_VALUE : messagesNotificationType.getCode());
  String condition=MessageTable.Cols.MESSAGE_ID + ""String_Node_Str"" + messageCache.getId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(MessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > ConstsCore.ZERO_INT_VALUE) {
    resolver.update(MessageTable.CONTENT_URI,values,condition,null);
  }
 else {
    values.put(MessageTable.Cols.MESSAGE_ID,messageCache.getId());
    values.put(MessageTable.Cols.DIALOG_ID,messageCache.getDialogId());
    values.put(MessageTable.Cols.SENDER_ID,messageCache.getSenderId());
    values.put(MessageTable.Cols.RECIPIENT_ID,messageCache.getRecipientId());
    resolver.insert(MessageTable.CONTENT_URI,values);
  }
}",0.9749679075738126
114326,"public MessageCache(String id,String dialogId,Integer senderId,String message,String attachUrl,long time,boolean isRead,boolean isDelivered,boolean isSync){
  this.id=id;
  this.dialogId=dialogId;
  this.senderId=senderId;
  this.message=message;
  this.attachUrl=attachUrl;
  this.time=time;
  this.isRead=isRead;
  this.isDelivered=isDelivered;
  this.isSync=isSync;
}","public MessageCache(String id,String dialogId,Integer senderId,Integer recipientId,String message,String attachUrl,long time,boolean isRead,boolean isDelivered,boolean isSync){
  this.id=id;
  this.dialogId=dialogId;
  this.senderId=senderId;
  this.recipientId=recipientId;
  this.message=message;
  this.attachUrl=attachUrl;
  this.time=time;
  this.isRead=isRead;
  this.isDelivered=isDelivered;
  this.isSync=isSync;
}",0.9343434343434344
114327,"private void savePrivateMessageToCache(QBChatMessage chatMessage,String dialogId){
  String messageId=chatMessage.getId();
  long time=Long.parseLong(chatMessage.getProperty(ChatNotificationUtils.PROPERTY_DATE_SENT).toString());
  String attachUrl=ChatUtils.getAttachUrlFromMessage(new ArrayList<QBAttachment>(chatMessage.getAttachments()));
  MessageCache messageCache=new MessageCache(messageId,dialogId,chatCreator.getId(),chatMessage.getBody(),attachUrl,time,false,false,true);
  if (ChatNotificationUtils.isNotificationMessage(chatMessage)) {
    int friendsMessageTypeCode=ChatNotificationUtils.getNotificationTypeIfExist(chatMessage);
    messageCache.setMessagesNotificationType(MessagesNotificationType.parseByCode(friendsMessageTypeCode));
  }
  saveMessageToCache(messageCache);
}","private void savePrivateMessageToCache(QBChatMessage chatMessage,String dialogId){
  String messageId=chatMessage.getId();
  long time=Long.parseLong(chatMessage.getProperty(ChatNotificationUtils.PROPERTY_DATE_SENT).toString());
  String attachUrl=ChatUtils.getAttachUrlFromMessage(new ArrayList<QBAttachment>(chatMessage.getAttachments()));
  Integer recipientId;
  if (chatMessage.getRecipientId() == null) {
    recipientId=ConstsCore.ZERO_INT_VALUE;
  }
 else {
    recipientId=chatMessage.getRecipientId();
  }
  MessageCache messageCache=new MessageCache(messageId,dialogId,chatCreator.getId(),recipientId,chatMessage.getBody(),attachUrl,time,false,false,true);
  if (ChatNotificationUtils.isNotificationMessage(chatMessage)) {
    int friendsMessageTypeCode=ChatNotificationUtils.getNotificationTypeIfExist(chatMessage);
    messageCache.setMessagesNotificationType(MessagesNotificationType.parseByCode(friendsMessageTypeCode));
  }
  saveMessageToCache(messageCache);
}",0.8947963800904978
114328,"protected MessageCache parseReceivedMessage(QBChatMessage chatMessage){
  long time;
  String attachUrl;
  time=Long.parseLong(chatMessage.getProperty(ChatNotificationUtils.PROPERTY_DATE_SENT));
  attachUrl=ChatUtils.getAttachUrlIfExists(chatMessage);
  String dialogId=chatMessage.getProperty(ChatNotificationUtils.PROPERTY_DIALOG_ID);
  MessageCache messageCache=new MessageCache(chatMessage.getId(),dialogId,chatMessage.getSenderId(),chatMessage.getBody(),attachUrl,time,false,false,false);
  return messageCache;
}","protected MessageCache parseReceivedMessage(QBChatMessage chatMessage){
  long time;
  String attachUrl;
  time=Long.parseLong(chatMessage.getProperty(ChatNotificationUtils.PROPERTY_DATE_SENT));
  attachUrl=ChatUtils.getAttachUrlIfExists(chatMessage);
  String dialogId=chatMessage.getProperty(ChatNotificationUtils.PROPERTY_DIALOG_ID);
  Integer recipientId;
  if (chatMessage.getRecipientId() == null) {
    recipientId=ConstsCore.ZERO_INT_VALUE;
  }
 else {
    recipientId=chatMessage.getRecipientId();
  }
  MessageCache messageCache=new MessageCache(chatMessage.getId(),dialogId,chatMessage.getSenderId(),recipientId,chatMessage.getBody(),attachUrl,time,false,false,false);
  return messageCache;
}",0.8477905073649754
114329,"public static String getBodyForFriendsNotificationMessage(Context context,MessagesNotificationType messagesNotificationType,MessageCache messageCache){
  Resources resources=context.getResources();
  String resultMessage=resources.getString(R.string.frl_friends_contact_request);
  QBUser user=AppSession.getSession().getUser();
  boolean ownMessage=user.getId().equals(messageCache.getSenderId());
switch (messagesNotificationType) {
case FRIENDS_REQUEST:
{
      resultMessage=ownMessage ? resources.getString(R.string.frl_friends_request_message_for_me) : resources.getString(R.string.frl_friends_request_message_for_friend,ChatUtils.getFullNameById(context,messageCache.getSenderId()));
      break;
    }
case FRIENDS_ACCEPT:
{
    resultMessage=ownMessage ? resources.getString(R.string.frl_friends_request_accept_message_for_me) : resources.getString(R.string.frl_friends_request_accept_message_for_friend);
    break;
  }
case FRIENDS_REJECT:
{
  resultMessage=ownMessage ? resources.getString(R.string.frl_friends_request_reject_message_for_me) : resources.getString(R.string.frl_friends_request_reject_message_for_friend);
  break;
}
case FRIENDS_REMOVE:
{
resultMessage=ownMessage ? resources.getString(R.string.frl_friends_request_remove_message_for_me,user.getFullName()) : resources.getString(R.string.frl_friends_request_remove_message_for_friend,ChatUtils.getFullNameById(context,messageCache.getSenderId()));
break;
}
}
return resultMessage;
}","public static String getBodyForFriendsNotificationMessage(Context context,MessagesNotificationType messagesNotificationType,MessageCache messageCache){
  Resources resources=context.getResources();
  String resultMessage=resources.getString(R.string.frl_friends_contact_request);
  QBUser user=AppSession.getSession().getUser();
  boolean ownMessage=user.getId().equals(messageCache.getSenderId());
switch (messagesNotificationType) {
case FRIENDS_REQUEST:
{
      resultMessage=ownMessage ? resources.getString(R.string.frl_friends_request_message_for_me) : resources.getString(R.string.frl_friends_request_message_for_friend,ChatUtils.getFullNameById(context,messageCache.getSenderId()));
      break;
    }
case FRIENDS_ACCEPT:
{
    resultMessage=ownMessage ? resources.getString(R.string.frl_friends_request_accept_message_for_me) : resources.getString(R.string.frl_friends_request_accept_message_for_friend);
    break;
  }
case FRIENDS_REJECT:
{
  resultMessage=ownMessage ? resources.getString(R.string.frl_friends_request_reject_message_for_me) : resources.getString(R.string.frl_friends_request_reject_message_for_friend);
  break;
}
case FRIENDS_REMOVE:
{
User deletedUser=UsersDatabaseManager.getUserById(context,messageCache.getRecipientId());
String fullName;
if (deletedUser == null) {
  fullName=ChatUtils.getFullNameById(context,messageCache.getRecipientId());
}
 else {
  fullName=deletedUser.getFullName();
}
resultMessage=ownMessage ? resources.getString(R.string.frl_friends_request_remove_message_for_me,fullName) : resources.getString(R.string.frl_friends_request_remove_message_for_friend,fullName);
break;
}
}
return resultMessage;
}",0.796023091725465
114330,"public static String getBodyForUpdateChatNotificationMessage(Context context,QBMessage chatMessage){
  String occupantsIds=chatMessage.getProperty(PROPERTY_OCCUPANTS_IDS);
  String dialogName=chatMessage.getProperty(PROPERTY_ROOM_NAME);
  String photoUrl=chatMessage.getProperty(PROPERTY_ROOM_PHOTO);
  String leave=chatMessage.getProperty(PROPERTY_ROOM_LEAVE);
  String notificationType=chatMessage.getProperty(PROPERTY_NOTIFICATION_TYPE);
  Resources resources=context.getResources();
  String resultMessage=resources.getString(R.string.cht_notification_message);
  QBUser user=AppSession.getSession().getUser();
  boolean ownMessage=user.getId().equals(chatMessage.getSenderId());
  if (notificationType.equals(PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_CREATE)) {
    String fullNames=ChatUtils.getFullNamesFromOpponentIds(context,occupantsIds);
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_added_message,user.getFullName(),fullNames) : resources.getString(R.string.cht_update_group_added_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),fullNames);
    return resultMessage;
  }
  if (!TextUtils.isEmpty(occupantsIds)) {
    String fullNames=ChatUtils.getFullNamesFromOpponentIds(context,occupantsIds);
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_added_message,user.getFullName(),fullNames) : resources.getString(R.string.cht_update_group_added_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),fullNames);
  }
  if (!TextUtils.isEmpty(dialogName)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_name_message,user.getFullName(),dialogName) : resources.getString(R.string.cht_update_group_name_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),dialogName);
  }
  if (!TextUtils.isEmpty(photoUrl)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_photo_message,user.getFullName()) : resources.getString(R.string.cht_update_group_photo_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()));
  }
  if (!TextUtils.isEmpty(leave)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_leave_message,user.getFullName()) : resources.getString(R.string.cht_update_group_leave_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()));
  }
  return resultMessage;
}","public static String getBodyForUpdateChatNotificationMessage(Context context,QBMessage chatMessage){
  String occupantsIds=chatMessage.getProperty(PROPERTY_OCCUPANTS_IDS);
  String dialogName=chatMessage.getProperty(PROPERTY_ROOM_NAME);
  String photoUrl=chatMessage.getProperty(PROPERTY_ROOM_PHOTO);
  String leave=chatMessage.getProperty(PROPERTY_ROOM_LEAVE);
  String notificationType=chatMessage.getProperty(PROPERTY_NOTIFICATION_TYPE);
  Resources resources=context.getResources();
  String resultMessage=resources.getString(R.string.cht_notification_message);
  QBUser user=AppSession.getSession().getUser();
  boolean ownMessage=user.getId().equals(chatMessage.getSenderId());
  if (notificationType.equals(PROPERTY_TYPE_TO_GROUP_CHAT__GROUP_CHAT_CREATE)) {
    String fullNames;
    if (ownMessage) {
      fullNames=ChatUtils.getFullNamesFromOpponentId(context,user,occupantsIds);
      resultMessage=resources.getString(R.string.cht_update_group_added_message,user.getFullName(),fullNames);
    }
 else {
      fullNames=ChatUtils.getFullNamesFromOpponentIds(context,occupantsIds);
      resultMessage=resources.getString(R.string.cht_update_group_added_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),fullNames);
    }
    return resultMessage;
  }
  if (!TextUtils.isEmpty(occupantsIds)) {
    String fullNames=ChatUtils.getFullNamesFromOpponentIds(context,occupantsIds);
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_added_message,user.getFullName(),fullNames) : resources.getString(R.string.cht_update_group_added_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),fullNames);
  }
  if (!TextUtils.isEmpty(dialogName)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_name_message,user.getFullName(),dialogName) : resources.getString(R.string.cht_update_group_name_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()),dialogName);
  }
  if (!TextUtils.isEmpty(photoUrl)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_photo_message,user.getFullName()) : resources.getString(R.string.cht_update_group_photo_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()));
  }
  if (!TextUtils.isEmpty(leave)) {
    resultMessage=ownMessage ? resources.getString(R.string.cht_update_group_leave_message,user.getFullName()) : resources.getString(R.string.cht_update_group_leave_message,ChatUtils.getFullNameById(context,chatMessage.getSenderId()));
  }
  return resultMessage;
}",0.9631429728635076
114331,"public static boolean deleteUserById(Context context,int userId){
  int deletedRow=context.getContentResolver().delete(FriendTable.CONTENT_URI,FriendTable.Cols.USER_ID + ""String_Node_Str"" + userId,null);
  return deletedRow > Consts.ZERO_INT_VALUE;
}","public static boolean deleteUserById(Context context,int userId){
  int deletedRow=context.getContentResolver().delete(UserTable.CONTENT_URI,UserTable.Cols.USER_ID + ""String_Node_Str"" + userId,null);
  return deletedRow > Consts.ZERO_INT_VALUE;
}",0.9596774193548387
114332,"private void createFriend(int userId,boolean requestedFriend) throws QBResponseException {
  Log.d(""String_Node_Str"",""String_Node_Str"" + requestedFriend);
  User user=restHelper.loadUser(userId);
  Friend friend=FriendUtils.createFriend(userId,requestedFriend);
  fillUserOnlineStatus(user);
  saveUser(user);
  saveFriend(friend);
  Log.d(""String_Node_Str"",""String_Node_Str"" + requestedFriend + ""String_Node_Str"");
}","private void createFriend(int userId,boolean requestedFriend) throws QBResponseException {
  User user=restHelper.loadUser(userId);
  Friend friend=FriendUtils.createFriend(userId,requestedFriend);
  fillUserOnlineStatus(user);
  saveUser(user);
  saveFriend(friend);
}",0.7842565597667639
114333,"@Override public void subscriptionRequested(int userId){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  try {
    createFriend(userId,true);
    notifyContactRequest();
  }
 catch (  QBResponseException e) {
    Log.e(TAG,SUBSCRIPTION_ERROR,e);
  }
}","@Override public void subscriptionRequested(int userId){
  try {
    createFriend(userId,true);
    notifyContactRequest();
  }
 catch (  QBResponseException e) {
    Log.e(TAG,SUBSCRIPTION_ERROR,e);
  }
}",0.8991228070175439
114334,"@Override public void entriesAdded(Collection<Integer> userIdsList){
  Log.d(""String_Node_Str"",""String_Node_Str"");
}","@Override public void entriesAdded(Collection<Integer> userIdsList){
}",0.7526881720430108
114335,"public void init(){
  roster=QBChatService.getInstance().getRoster(QBRoster.SubscriptionMode.mutual,new SubscriptionListener());
  roster.setSubscriptionMode(QBRoster.SubscriptionMode.mutual);
  roster.addRosterListener(new RosterListener());
  restHelper=new QBRestHelper(context);
}","public void init(){
  restHelper=new QBRestHelper(context);
  roster=QBChatService.getInstance().getRoster(QBRoster.SubscriptionMode.mutual,new SubscriptionListener());
  roster.setSubscriptionMode(QBRoster.SubscriptionMode.mutual);
  roster.addRosterListener(new RosterListener());
}",0.8591549295774648
114336,"private void updateFriend(int userId) throws QBResponseException {
  QBRosterEntry rosterEntry=roster.getEntry(userId);
  User user=restHelper.loadUser(userId);
  if (user == null) {
    return;
  }
  Friend friend=FriendUtils.createFriend(rosterEntry);
  fillUserOnlineStatus(user);
  Friend oldFriend=DatabaseManager.getFriendById(context,friend.getUserId());
  if (oldFriend != null) {
    checkAlertShowing(friend,oldFriend);
  }
  saveUser(user);
  saveFriend(friend);
}","private void updateFriend(int userId) throws QBResponseException {
  QBRosterEntry rosterEntry=roster.getEntry(userId);
  User user=restHelper.loadUser(userId);
  if (user == null) {
    return;
  }
  Friend friend=FriendUtils.createFriend(rosterEntry);
  Friend oldFriend=DatabaseManager.getFriendById(context,friend.getUserId());
  saveUser(user);
  saveFriend(friend);
  if (oldFriend != null) {
    checkAlertShowing(friend,oldFriend);
  }
  fillUserOnlineStatus(user);
}",0.8631578947368421
114337,"@Override public void entriesUpdated(Collection<Integer> userIdsList){
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    updateFriends(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,ENTRIES_UPDATING_ERROR,e);
  }
}","@Override public void entriesUpdated(Collection<Integer> userIdsList){
  try {
    updateFriends(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,ENTRIES_UPDATING_ERROR,e);
  }
}",0.8909090909090909
114338,"@Override public void entriesDeleted(Collection<Integer> userIdsList){
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    deleteUsers(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,ENTRIES_DELETED_ERROR,e);
  }
}","@Override public void entriesDeleted(Collection<Integer> userIdsList){
  try {
    deleteUsers(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,ENTRIES_DELETED_ERROR,e);
  }
}",0.8894009216589862
114339,"private void checkAlertShowing(Friend newFriend,Friend oldFriend){
  String alertMessage=null;
  String friendName=DatabaseManager.getUserById(context,newFriend.getUserId()).getFullName();
  boolean friendRejectedMe=oldFriend.isAskStatus() && !newFriend.isAskStatus() && newFriend.getRelationStatus().equals(RELATION_STATUS_NONE);
  boolean friendAcceptedMe=oldFriend.isAskStatus() && newFriend.getRelationStatus().equals(RELATION_STATUS_TO);
  boolean friendDeletedMe=(oldFriend.getRelationStatus().equals(RELATION_STATUS_TO) || oldFriend.getRelationStatus().equals(RELATION_STATUS_FROM) || oldFriend.getRelationStatus().equals(RELATION_STATUS_BOTH)) && newFriend.getRelationStatus().equals(RELATION_STATUS_NONE);
  if (friendRejectedMe) {
    alertMessage=context.getString(R.string.frl_alrt_reject_friend,friendName);
  }
 else   if (friendAcceptedMe) {
    alertMessage=context.getString(R.string.frl_alrt_accepted_friend,friendName);
  }
 else   if (friendDeletedMe) {
    alertMessage=context.getString(R.string.frl_alrt_deleted_friend,friendName);
  }
  if (alertMessage != null) {
    notifyFriendAlert(alertMessage);
  }
}","private void checkAlertShowing(Friend newFriend,Friend oldFriend){
  String alertMessage=null;
  String friendName=DatabaseManager.getUserById(context,newFriend.getUserId()).getFullName();
  boolean friendRejectedMe=oldFriend.isAskStatus() && !newFriend.isAskStatus() && newFriend.getRelationStatus().equals(RELATION_STATUS_NONE);
  boolean friendAcceptedMe=oldFriend.isAskStatus() && newFriend.getRelationStatus().equals(RELATION_STATUS_TO);
  boolean friendDeletedMe=(oldFriend.getRelationStatus().equals(RELATION_STATUS_TO) || oldFriend.getRelationStatus().equals(RELATION_STATUS_FROM) || oldFriend.getRelationStatus().equals(RELATION_STATUS_BOTH)) && newFriend.getRelationStatus().equals(RELATION_STATUS_NONE);
  if (friendRejectedMe || friendDeletedMe) {
    try {
      clearRosterEntry(newFriend.getUserId());
      deleteUser(newFriend.getUserId());
    }
 catch (    Exception e) {
      ErrorUtils.logError(e);
    }
    if (friendRejectedMe) {
      alertMessage=context.getString(R.string.frl_alrt_reject_friend,friendName);
    }
 else     if (friendDeletedMe) {
      alertMessage=context.getString(R.string.frl_alrt_deleted_friend,friendName);
    }
  }
 else   if (friendAcceptedMe) {
    alertMessage=context.getString(R.string.frl_alrt_accepted_friend,friendName);
  }
  if (alertMessage != null) {
    notifyFriendAlert(alertMessage);
  }
}",0.8152610441767069
114340,"private void getFacebookFriendsList(){
  Request.executeMyFriendsRequestAsync(Session.getActiveSession(),new Request.GraphUserListCallback(){
    @Override public void onCompleted(    List<com.facebook.model.GraphUser> users,    Response response){
      for (      com.facebook.model.GraphUser user : users) {
        friendsFacebookList.add(new InviteFriend(user.getId(),user.getName(),user.getLink(),InviteFriend.VIA_FACEBOOK_TYPE,null,false));
      }
      fiendsReceived();
    }
  }
);
}","private void getFacebookFriendsList(){
  Request.newMyFriendsRequest(Session.getActiveSession(),new Request.GraphUserListCallback(){
    @Override public void onCompleted(    List<GraphUser> users,    Response response){
      for (      com.facebook.model.GraphUser user : users) {
        friendsFacebookList.add(new InviteFriend(user.getId(),user.getName(),user.getLink(),InviteFriend.VIA_FACEBOOK_TYPE,null,false));
      }
      fiendsReceived();
    }
  }
).executeAsync();
}",0.9497435897435896
114341,"@Override public void onCompleted(List<com.facebook.model.GraphUser> users,Response response){
  for (  com.facebook.model.GraphUser user : users) {
    friendsFacebookList.add(new InviteFriend(user.getId(),user.getName(),user.getLink(),InviteFriend.VIA_FACEBOOK_TYPE,null,false));
  }
  fiendsReceived();
}","@Override public void onCompleted(List<GraphUser> users,Response response){
  for (  com.facebook.model.GraphUser user : users) {
    friendsFacebookList.add(new InviteFriend(user.getId(),user.getName(),user.getLink(),InviteFriend.VIA_FACEBOOK_TYPE,null,false));
  }
  fiendsReceived();
}",0.9680672268907564
114342,"public void loginWithFacebook(){
  TipsManager.setIsJustLogined(true);
  Session session=Session.getActiveSession();
  if (!session.isOpened() && !session.isClosed()) {
    session.openForRead(new Session.OpenRequest(activity).setCallback(facebookStatusCallback));
  }
 else {
    Session.openActiveSession(activity,true,facebookStatusCallback);
  }
}","public void loginWithFacebook(){
  TipsManager.setIsJustLogined(true);
  Session session=Session.getActiveSession();
  if (!session.isOpened() && !session.isClosed()) {
    session.openForRead(new Session.OpenRequest(activity).setPermissions(Arrays.asList(""String_Node_Str"")).setCallback(facebookStatusCallback));
  }
 else {
    Session.openActiveSession(activity,true,facebookStatusCallback);
  }
}",0.9347536617842876
114343,"private void setOnlineStatus(User friend){
  if (friend.isOnline()) {
    onlineImageView.setVisibility(View.VISIBLE);
  }
 else {
    onlineImageView.setVisibility(View.GONE);
  }
  statusTextView.setText(friend.getStatus());
  onlineStatusTextView.setText(friend.getOnlineStatus());
}","private void setOnlineStatus(User friend){
  if (friend != null) {
    if (friend.isOnline()) {
      onlineImageView.setVisibility(View.VISIBLE);
    }
 else {
      onlineImageView.setVisibility(View.GONE);
    }
    statusTextView.setText(friend.getStatus());
    onlineStatusTextView.setText(friend.getOnlineStatus());
  }
}",0.9315960912052116
114344,"public static void saveChatMessage(Context context,MessageCache messageCache){
  ContentValues values=new ContentValues();
  String body=messageCache.getMessage();
  values.put(MessageTable.Cols.ID,messageCache.getId());
  values.put(MessageTable.Cols.DIALOG_ID,messageCache.getDialogId());
  values.put(MessageTable.Cols.PACKET_ID,messageCache.getPacketId());
  values.put(MessageTable.Cols.SENDER_ID,messageCache.getSenderId());
  if (TextUtils.isEmpty(body)) {
    values.put(MessageTable.Cols.BODY,body);
  }
 else {
    values.put(MessageTable.Cols.BODY,Html.fromHtml(body).toString());
  }
  if (messageCache.getFriendsNotificationType() != null) {
    values.put(MessageTable.Cols.FRIENDS_NOTIFICATION_TYPE,messageCache.getFriendsNotificationType().getCode());
  }
  values.put(MessageTable.Cols.TIME,messageCache.getTime());
  values.put(MessageTable.Cols.ATTACH_FILE_ID,messageCache.getAttachUrl());
  values.put(MessageTable.Cols.IS_READ,messageCache.isRead());
  values.put(MessageTable.Cols.IS_DELIVERED,messageCache.isDelivered());
  context.getContentResolver().insert(MessageTable.CONTENT_URI,values);
  int countUnreadMessagesLocal=getCountUnreadMessagesByDialogIdLocal(context,messageCache.getDialogId());
  if (!messageCache.isRead()) {
    countUnreadMessagesLocal=++countUnreadMessagesLocal;
  }
  updateDialog(context,messageCache.getDialogId(),messageCache.getMessage(),messageCache.getTime(),messageCache.getSenderId(),countUnreadMessagesLocal);
}","public static void saveChatMessage(Context context,MessageCache messageCache){
  ContentValues values=new ContentValues();
  values.put(MessageTable.Cols.ID,messageCache.getId());
  values.put(MessageTable.Cols.DIALOG_ID,messageCache.getDialogId());
  values.put(MessageTable.Cols.PACKET_ID,messageCache.getPacketId());
  values.put(MessageTable.Cols.SENDER_ID,messageCache.getSenderId());
  if (messageCache.getFriendsNotificationType() != null) {
    values.put(MessageTable.Cols.FRIENDS_NOTIFICATION_TYPE,messageCache.getFriendsNotificationType().getCode());
  }
  values.put(MessageTable.Cols.BODY,parseMessageBody(context,messageCache));
  values.put(MessageTable.Cols.TIME,messageCache.getTime());
  values.put(MessageTable.Cols.ATTACH_FILE_ID,messageCache.getAttachUrl());
  values.put(MessageTable.Cols.IS_READ,messageCache.isRead());
  values.put(MessageTable.Cols.IS_DELIVERED,messageCache.isDelivered());
  context.getContentResolver().insert(MessageTable.CONTENT_URI,values);
  int countUnreadMessagesLocal=getCountUnreadMessagesByDialogIdLocal(context,messageCache.getDialogId());
  if (!messageCache.isRead()) {
    countUnreadMessagesLocal=++countUnreadMessagesLocal;
  }
  updateDialog(context,messageCache.getDialogId(),messageCache.getMessage(),messageCache.getTime(),messageCache.getSenderId(),countUnreadMessagesLocal);
}",0.8993240839558876
114345,"public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  MessageCache messageCache=null;
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    String friendsMessageType;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    messageCache=new MessageCache(messageId,dialogId,null,senderId,message,attachURL,time,true,true);
    if (historyMessage.getProperty(ChatUtils.PROPERTY_NOTIFICATION_TYPE) != null) {
      friendsMessageType=historyMessage.getProperty(ChatUtils.PROPERTY_NOTIFICATION_TYPE).toString();
      if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_FRIENDS_REQUEST.equals(friendsMessageType)) {
        messageCache.setFriendsNotificationType(FriendsNotificationType.REQUEST);
      }
    }
    saveChatMessage(context,messageCache);
  }
  if (messageCache != null) {
    updateDialog(context,messageCache.getDialogId(),messageCache.getMessage(),messageCache.getTime(),messageCache.getSenderId(),Consts.ZERO_INT_VALUE);
  }
}","public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  MessageCache messageCache=null;
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    int friendsMessageTypeCode;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    messageCache=new MessageCache(messageId,dialogId,null,senderId,message,attachURL,time,true,true);
    if (historyMessage.getProperty(ChatUtils.PROPERTY_NOTIFICATION_TYPE) != null) {
      friendsMessageTypeCode=Integer.parseInt(historyMessage.getProperty(ChatUtils.PROPERTY_NOTIFICATION_TYPE).toString());
      if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_FRIENDS_REQUEST.equals(friendsMessageTypeCode + Consts.EMPTY_STRING) || ChatUtils.PROPERTY_NOTIFICATION_TYPE_FRIENDS_ACCEPT_REQUEST.equals(friendsMessageTypeCode + Consts.EMPTY_STRING) || ChatUtils.PROPERTY_NOTIFICATION_TYPE_FRIENDS_REJECT_REQUEST.equals(friendsMessageTypeCode + Consts.EMPTY_STRING)|| ChatUtils.PROPERTY_NOTIFICATION_TYPE_FRIENDS_REMOVE_REQUEST.equals(friendsMessageTypeCode + Consts.EMPTY_STRING)) {
        messageCache.setFriendsNotificationType(FriendsNotificationType.parseByCode(friendsMessageTypeCode));
      }
    }
    saveChatMessage(context,messageCache);
  }
  if (messageCache != null) {
    updateDialog(context,messageCache.getDialogId(),messageCache.getMessage(),messageCache.getTime(),messageCache.getSenderId(),Consts.ZERO_INT_VALUE);
  }
}",0.7828492392807745
114346,"private void sendNotificationToFriend(int userId) throws QBResponseException {
  QBDialog existingPrivateDialog=ChatUtils.getExistPrivateDialog(context,userId);
  if (existingPrivateDialog == null) {
    existingPrivateDialog=privateChatHelper.createPrivateChatOnRest(userId);
  }
  QBChatMessage chatMessage=ChatUtils.createNotificationMessageForFriendsRequest(context);
  privateChatHelper.sendPrivateMessage(chatMessage,userId,existingPrivateDialog.getDialogId());
}","private void sendNotificationToFriend(QBChatMessage chatMessage,int userId) throws QBResponseException {
  QBDialog existingPrivateDialog=createPrivateDialog(userId);
  privateChatHelper.sendPrivateMessage(chatMessage,userId,existingPrivateDialog.getDialogId());
}",0.5948158253751705
114347,"public void rejectFriend(int userId) throws Exception {
  roster.reject(userId);
  clearRosterEntry(userId);
  deleteUser(userId);
}","public void rejectFriend(int userId) throws Exception {
  roster.reject(userId);
  clearRosterEntry(userId);
  deleteFriend(userId);
  QBChatMessage chatMessage=ChatUtils.createNotificationMessageForRejectFriendsRequest(context);
  sendNotificationToFriend(chatMessage,userId);
}",0.6228710462287105
114348,"public void removeFriend(int userId) throws Exception {
  roster.unsubscribe(userId);
  clearRosterEntry(userId);
  deleteUser(userId);
}","public void removeFriend(int userId) throws Exception {
  roster.unsubscribe(userId);
  clearRosterEntry(userId);
  deleteFriend(userId);
  QBChatMessage chatMessage=ChatUtils.createNotificationMessageForRemoveFriendsRequest(context);
  sendNotificationToFriend(chatMessage,userId);
}",0.6318289786223278
114349,"public void inviteFriend(int userId) throws Exception {
  if (isNotInvited(userId)) {
    sendInvitation(userId);
  }
}","public void inviteFriend(int userId) throws Exception {
  if (isNotInvited(userId)) {
    sendInvitation(userId);
    QBChatMessage chatMessage=ChatUtils.createNotificationMessageForFriendsRequest(context);
    sendNotificationToFriend(chatMessage,userId);
  }
}",0.6246719160104987
114350,"public void addFriend(int userId) throws Exception {
  createFriend(userId,false);
  sendInvitation(userId);
  sendNotificationToFriend(userId);
}","public void addFriend(int userId) throws Exception {
  createFriend(userId,false);
  sendInvitation(userId);
  QBChatMessage chatMessage=ChatUtils.createNotificationMessageForFriendsRequest(context);
  sendNotificationToFriend(chatMessage,userId);
}",0.7189873417721518
114351,"private void updateFriend(int userId) throws QBResponseException {
  QBRosterEntry rosterEntry=roster.getEntry(userId);
  User user=restHelper.loadUser(userId);
  if (user == null) {
    return;
  }
  Friend friend=FriendUtils.createFriend(rosterEntry);
  Friend oldFriend=DatabaseManager.getFriendById(context,friend.getUserId());
  saveUser(user);
  saveFriend(friend);
  if (oldFriend != null) {
    checkAlertShowing(friend,oldFriend);
  }
  fillUserOnlineStatus(user);
}","private void updateFriend(int userId) throws QBResponseException {
  QBRosterEntry rosterEntry=roster.getEntry(userId);
  User user=restHelper.loadUser(userId);
  if (user == null) {
    return;
  }
  Friend friend=FriendUtils.createFriend(rosterEntry);
  saveUser(user);
  saveFriend(friend);
  fillUserOnlineStatus(user);
}",0.6625
114352,"public void acceptFriend(int userId) throws Exception {
  roster.confirmSubscription(userId);
}","public void acceptFriend(int userId) throws Exception {
  roster.confirmSubscription(userId);
  QBChatMessage chatMessage=ChatUtils.createNotificationMessageForAcceptFriendsRequest(context);
  sendNotificationToFriend(chatMessage,userId);
}",0.5671641791044776
114353,"private void friendRequestMessageReceived(QBChatMessage chatMessage){
  MessageCache messageCache=parseReceivedMessage(chatMessage);
  messageCache.setFriendsNotificationType(FriendsNotificationType.REQUEST);
  saveMessageToCache(messageCache);
}","private void friendRequestMessageReceived(QBChatMessage chatMessage,FriendsNotificationType type){
  MessageCache messageCache=parseReceivedMessage(chatMessage);
  messageCache.setFriendsNotificationType(type);
  saveMessageToCache(messageCache);
}",0.728744939271255
114354,"@Override public void onReceivedNotification(String notificationType,QBChatMessage chatMessage){
  if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_CREATE_CHAT.equals(notificationType)) {
    createDialogByNotification(chatMessage);
  }
 else   if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_MESSAGE_DELIVERY_STATUS.equals(notificationType)) {
    messageDeliveryStatusReceived(chatMessage);
  }
 else   if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_FRIENDS_REQUEST.equals(notificationType)) {
    friendRequestMessageReceived(chatMessage);
  }
 else {
    updateDialogByNotification(chatMessage);
  }
}","@Override public void onReceivedNotification(String notificationType,QBChatMessage chatMessage){
  if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_CREATE_CHAT.equals(notificationType)) {
    createDialogByNotification(chatMessage);
  }
 else   if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_MESSAGE_DELIVERY_STATUS.equals(notificationType)) {
    messageDeliveryStatusReceived(chatMessage);
  }
 else   if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_FRIENDS_REQUEST.equals(notificationType)) {
    friendRequestMessageReceived(chatMessage,FriendsNotificationType.REQUEST);
  }
 else   if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_FRIENDS_ACCEPT_REQUEST.equals(notificationType)) {
    friendRequestMessageReceived(chatMessage,FriendsNotificationType.ACCEPT);
  }
 else   if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_FRIENDS_REJECT_REQUEST.equals(notificationType)) {
    friendRequestMessageReceived(chatMessage,FriendsNotificationType.REJECT);
  }
 else   if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_FRIENDS_REMOVE_REQUEST.equals(notificationType)) {
    friendRequestMessageReceived(chatMessage,FriendsNotificationType.REMOVE);
  }
 else {
    updateDialogByNotification(chatMessage);
  }
}",0.6620847651775487
114355,"protected void addActions(){
  addAction(QBServiceConsts.LOAD_ATTACH_FILE_SUCCESS_ACTION,loadAttachFileSuccessAction);
  addAction(QBServiceConsts.LOAD_ATTACH_FILE_FAIL_ACTION,failAction);
  addAction(QBServiceConsts.LOAD_DIALOG_MESSAGES_SUCCESS_ACTION,loadDialogMessagesSuccessAction);
  addAction(QBServiceConsts.LOAD_DIALOG_MESSAGES_FAIL_ACTION,failAction);
  updateBroadcastActionList();
}","protected void addActions(){
  addAction(QBServiceConsts.LOAD_ATTACH_FILE_SUCCESS_ACTION,loadAttachFileSuccessAction);
  addAction(QBServiceConsts.LOAD_ATTACH_FILE_FAIL_ACTION,failAction);
  addAction(QBServiceConsts.LOAD_DIALOG_MESSAGES_SUCCESS_ACTION,loadDialogMessagesSuccessAction);
  addAction(QBServiceConsts.LOAD_DIALOG_MESSAGES_FAIL_ACTION,failAction);
  addAction(QBServiceConsts.ACCEPT_FRIEND_SUCCESS_ACTION,new AcceptFriendSuccessAction());
  addAction(QBServiceConsts.ACCEPT_FRIEND_FAIL_ACTION,failAction);
  addAction(QBServiceConsts.REJECT_FRIEND_SUCCESS_ACTION,new RejectFriendSuccessAction());
  addAction(QBServiceConsts.REJECT_FRIEND_FAIL_ACTION,failAction);
  updateBroadcastActionList();
}",0.7132486388384754
114356,"@Override public void execute(Bundle bundle){
  hideActionBarProgress();
}","@Override public void execute(Bundle bundle){
  hideProgress();
}",0.935251798561151
114357,"public void sendStopTypingToServer(int opponentId){
  QBPrivateChat privateChat=privateChatManager.getChat(opponentId);
  try {
    privateChat.sendStopTypingNotification();
  }
 catch (  XMPPException e) {
    ErrorUtils.logError(e);
  }
catch (  SmackException.NotConnectedException e) {
    ErrorUtils.logError(e);
  }
}","public void sendStopTypingToServer(int opponentId){
  QBPrivateChat privateChat=getPrivateChatByOpponent(opponentId);
  try {
    privateChat.sendStopTypingNotification();
  }
 catch (  XMPPException e) {
    ErrorUtils.logError(e);
  }
catch (  SmackException.NotConnectedException e) {
    ErrorUtils.logError(e);
  }
}",0.9254658385093169
114358,"public void sendIsTypingToServer(int opponentId){
  QBPrivateChat privateChat=privateChatManager.getChat(opponentId);
  try {
    privateChat.sendIsTypingNotification();
  }
 catch (  XMPPException e) {
    ErrorUtils.logError(e);
  }
catch (  SmackException.NotConnectedException e) {
    ErrorUtils.logError(e);
  }
}","public void sendIsTypingToServer(int opponentId){
  QBPrivateChat privateChat=getPrivateChatByOpponent(opponentId);
  try {
    privateChat.sendIsTypingNotification();
  }
 catch (  XMPPException e) {
    ErrorUtils.logError(e);
  }
catch (  SmackException.NotConnectedException e) {
    ErrorUtils.logError(e);
  }
}",0.9245283018867924
114359,"@Override protected void onPause(){
  super.onPause();
  onUpdateChatDialog();
  hideSmileLayout();
}","@Override protected void onPause(){
  super.onPause();
  onUpdateChatDialog();
  hideSmileLayout();
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (isTypingNow) {
      stopTypingMessage();
    }
  }
}",0.637223974763407
114360,"private void checkMessageSendingPossibility(){
  messageEditText.setEnabled(DatabaseManager.isFriendInBase(PrivateDialogActivity.this,opponentFriend.getUserId()));
}","private void checkMessageSendingPossibility(){
  boolean isFriend=DatabaseManager.isFriendInBase(PrivateDialogActivity.this,opponentFriend.getUserId());
  messageEditText.setEnabled(isFriend);
}",0.7910863509749304
114361,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    navigateToParent();
  return true;
case R.id.action_attach:
attachButtonOnClick();
return true;
case R.id.action_audio_call:
callToUser(opponentFriend,com.quickblox.videochat.webrtc.Consts.MEDIA_STREAM.AUDIO);
return true;
case R.id.action_video_call:
callToUser(opponentFriend,com.quickblox.videochat.webrtc.Consts.MEDIA_STREAM.VIDEO);
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  boolean isFriend=DatabaseManager.isFriendInBase(PrivateDialogActivity.this,opponentFriend.getUserId());
  if (!isFriend && item.getItemId() != android.R.id.home) {
    DialogUtils.showLong(PrivateDialogActivity.this,getResources().getString(R.string.dlg_user_is_not_friend));
    return true;
  }
switch (item.getItemId()) {
case android.R.id.home:
    navigateToParent();
  return true;
case R.id.action_attach:
attachButtonOnClick();
return true;
case R.id.action_audio_call:
callToUser(opponentFriend,com.quickblox.videochat.webrtc.Consts.MEDIA_STREAM.AUDIO);
return true;
case R.id.action_video_call:
callToUser(opponentFriend,com.quickblox.videochat.webrtc.Consts.MEDIA_STREAM.VIDEO);
return true;
}
return super.onOptionsItemSelected(item);
}",0.774679728711379
114362,"@Override public void onTextChanged(CharSequence charSequence,int start,int before,int count){
  super.onTextChanged(charSequence,start,before,count);
  if (TextUtils.isEmpty(charSequence) || TextUtils.isEmpty(charSequence.toString().trim())) {
    sendButton.setEnabled(false);
  }
 else {
    sendButton.setEnabled(true);
  }
  if (!isTypingNow) {
    startTypingMessage();
  }
  checkStopTyping();
}","@Override public void onTextChanged(CharSequence charSequence,int start,int before,int count){
  super.onTextChanged(charSequence,start,before,count);
  setSendButtonVisibility(charSequence);
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (!isTypingNow) {
      startTypingMessage();
    }
    checkStopTyping();
  }
}",0.5142857142857142
114363,"private void initListeners(){
  messageEditText.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      hideSmileLayout();
      if (!isTypingNow) {
        startTypingMessage();
      }
      return false;
    }
  }
);
  messageEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      if (TextUtils.isEmpty(charSequence) || TextUtils.isEmpty(charSequence.toString().trim())) {
        sendButton.setEnabled(false);
      }
 else {
        sendButton.setEnabled(true);
      }
      if (!isTypingNow) {
        startTypingMessage();
      }
      checkStopTyping();
    }
  }
);
  smilePanelImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSmilesLayoutShowing()) {
        hideSmileLayout();
        KeyboardUtils.showKeyboard(BaseDialogActivity.this);
      }
 else {
        KeyboardUtils.hideKeyboard(BaseDialogActivity.this);
        needToShowSmileLayout=true;
        if (keyboardHeight == Consts.ZERO_INT_VALUE) {
          showSmileLayout(Consts.ZERO_INT_VALUE);
        }
      }
    }
  }
);
  rootView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      initKeyboardHeight();
      if (needToShowSmileLayout) {
        showSmileLayout(keyboardHeight);
      }
    }
  }
);
}","private void initListeners(){
  messageEditText.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      hideSmileLayout();
      if (QBDialogType.PRIVATE.equals(dialog.getType())) {
        if (!isTypingNow) {
          startTypingMessage();
        }
      }
      return false;
    }
  }
);
  messageEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      setSendButtonVisibility(charSequence);
      if (QBDialogType.PRIVATE.equals(dialog.getType())) {
        if (!isTypingNow) {
          startTypingMessage();
        }
        checkStopTyping();
      }
    }
  }
);
  smilePanelImageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (isSmilesLayoutShowing()) {
        hideSmileLayout();
        KeyboardUtils.showKeyboard(BaseDialogActivity.this);
      }
 else {
        KeyboardUtils.hideKeyboard(BaseDialogActivity.this);
        needToShowSmileLayout=true;
        if (keyboardHeight == Consts.ZERO_INT_VALUE) {
          showSmileLayout(Consts.ZERO_INT_VALUE);
        }
      }
    }
  }
);
  rootView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      initKeyboardHeight();
      if (needToShowSmileLayout) {
        showSmileLayout(keyboardHeight);
      }
    }
  }
);
}",0.8813241723922548
114364,"@Override public boolean onTouch(View view,MotionEvent event){
  hideSmileLayout();
  if (!isTypingNow) {
    startTypingMessage();
  }
  return false;
}","@Override public boolean onTouch(View view,MotionEvent event){
  hideSmileLayout();
  if (QBDialogType.PRIVATE.equals(dialog.getType())) {
    if (!isTypingNow) {
      startTypingMessage();
    }
  }
  return false;
}",0.8247978436657682
114365,"@Override public void bindView(View view,Context context,Cursor cursor){
  ViewHolder viewHolder=(ViewHolder)view.getTag();
  String avatarUrl=null;
  String senderName;
  MessageCache messageCache=DatabaseManager.getMessageCacheFromCursor(cursor);
  boolean ownMessage=isOwnMessage(messageCache.getSenderId());
  resetUI(viewHolder);
  viewHolder.messageDeliveryStatusImageView=(ImageView)view.findViewById(R.id.text_message_delivery_status_imageview);
  viewHolder.messageDeliveryStatusImageView=(ImageView)view.findViewById(R.id.attach_message_delivery_status_imageview);
  if (ownMessage) {
    avatarUrl=getAvatarUrlForCurrentUser();
  }
 else {
    setMessageStatus(view,viewHolder,R.id.text_message_delivery_status_imageview,messageCache.isDelivered(),messageCache.isRead());
    User senderFriend=DatabaseManager.getUserById(context,messageCache.getSenderId());
    if (senderFriend != null) {
      senderName=senderFriend.getFullName();
      avatarUrl=getAvatarUrlForFriend(senderFriend);
    }
 else {
      senderName=messageCache.getSenderId() + Consts.EMPTY_STRING;
    }
    viewHolder.nameTextView.setTextColor(getTextColor(messageCache.getSenderId()));
    viewHolder.nameTextView.setText(senderName);
  }
  if (!TextUtils.isEmpty(messageCache.getAttachUrl())) {
    viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    setViewVisibility(viewHolder.progressRelativeLayout,View.VISIBLE);
    displayAttachImage(messageCache.getAttachUrl(),viewHolder);
  }
 else {
    setViewVisibility(viewHolder.textMessageView,View.VISIBLE);
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    viewHolder.messageTextView.setText(messageCache.getMessage());
  }
  if (!messageCache.isRead() && ownMessage) {
    messageCache.setRead(true);
    QBUpdateStatusMessageReadCommand.start(context,dialog,messageCache);
  }
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
}","@Override public void bindView(View view,Context context,Cursor cursor){
  ViewHolder viewHolder=(ViewHolder)view.getTag();
  String avatarUrl=null;
  String senderName;
  MessageCache messageCache=DatabaseManager.getMessageCacheFromCursor(cursor);
  boolean ownMessage=isOwnMessage(messageCache.getSenderId());
  resetUI(viewHolder);
  viewHolder.messageDeliveryStatusImageView=(ImageView)view.findViewById(R.id.text_message_delivery_status_imageview);
  viewHolder.messageDeliveryStatusImageView=(ImageView)view.findViewById(R.id.attach_message_delivery_status_imageview);
  if (ownMessage) {
    avatarUrl=getAvatarUrlForCurrentUser();
  }
 else {
    User senderFriend=DatabaseManager.getUserById(context,messageCache.getSenderId());
    if (senderFriend != null) {
      senderName=senderFriend.getFullName();
      avatarUrl=getAvatarUrlForFriend(senderFriend);
    }
 else {
      senderName=messageCache.getSenderId() + Consts.EMPTY_STRING;
    }
    viewHolder.nameTextView.setTextColor(getTextColor(messageCache.getSenderId()));
    viewHolder.nameTextView.setText(senderName);
  }
  if (!TextUtils.isEmpty(messageCache.getAttachUrl())) {
    viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    setViewVisibility(viewHolder.progressRelativeLayout,View.VISIBLE);
    displayAttachImage(messageCache.getAttachUrl(),viewHolder);
  }
 else {
    setViewVisibility(viewHolder.textMessageView,View.VISIBLE);
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    viewHolder.messageTextView.setText(messageCache.getMessage());
  }
  if (!messageCache.isRead() && ownMessage) {
    messageCache.setRead(true);
    QBUpdateStatusMessageReadCommand.start(context,dialog,messageCache);
  }
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
}",0.9655712050078248
114366,"public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  MessageCache messageCache=null;
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    int friendsMessageTypeCode;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    messageCache=new MessageCache(messageId,dialogId,senderId,message,attachURL,time,historyMessage.isRead(),true,true);
    if (historyMessage.getProperty(ChatUtils.PROPERTY_NOTIFICATION_TYPE) != null) {
      friendsMessageTypeCode=Integer.parseInt(historyMessage.getProperty(ChatUtils.PROPERTY_NOTIFICATION_TYPE).toString());
      if (isFriendsMessageTypeCode(friendsMessageTypeCode)) {
        messageCache.setFriendsNotificationType(FriendsNotificationType.parseByCode(friendsMessageTypeCode));
      }
    }
    saveChatMessage(context,messageCache,true);
  }
}","public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  MessageCache messageCache=null;
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    int friendsMessageTypeCode;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    messageCache=new MessageCache(messageId,dialogId,senderId,message,attachURL,time,historyMessage.isRead(),true,true);
    if (historyMessage.getProperty(ChatUtils.PROPERTY_NOTIFICATION_TYPE) != null) {
      friendsMessageTypeCode=Integer.parseInt(historyMessage.getProperty(ChatUtils.PROPERTY_NOTIFICATION_TYPE).toString());
      if (ChatUtils.isFriendsMessageTypeCode(friendsMessageTypeCode)) {
        messageCache.setFriendsNotificationType(FriendsNotificationType.parseByCode(friendsMessageTypeCode));
      }
    }
    saveChatMessage(context,messageCache,true);
  }
}",0.9954421148587056
114367,"public void onActivityResumed(Activity activity){
  Lo.g(""String_Node_Str"" + numberOfActivitiesInForeground);
  boolean activityLogeable=isActivityLogeable(activity);
  chatDestroyed=chatDestroyed && !isLoggedIn();
  if (numberOfActivitiesInForeground == 0 && chatDestroyed && activityLogeable) {
    boolean canLogin=chatDestroyed && AppSession.getSession().isSessionExist();
    if (canLogin) {
      QBLoginAndJoinDialogsCommand.start(activity);
    }
  }
  if (activityLogeable) {
    ++numberOfActivitiesInForeground;
  }
}","public void onActivityResumed(Activity activity){
  Lo.g(""String_Node_Str"" + numberOfActivitiesInForeground);
  boolean activityLogeable=isActivityLogeable(activity);
  chatDestroyed=chatDestroyed && !isLoggedIn();
  if (numberOfActivitiesInForeground == 0 && chatDestroyed && activityLogeable) {
    boolean canLogin=chatDestroyed && AppSession.getSession().isSessionExist();
    if (canLogin) {
      QBLoginAndJoinDialogsCommand.start(activity);
      QBLoadDialogsCommand.start(activity);
    }
  }
  if (activityLogeable) {
    ++numberOfActivitiesInForeground;
  }
}",0.96
114368,"private void updateFriendsList(){
  friendsListView.setAdapter(friendsListAdapter);
  friendsListView.setGroupIndicator(null);
  expandAllGroups(headersCursor);
  baseActivity.hideActionBarProgress();
}","private void updateFriendsList(){
  friendsListView.setAdapter(friendsListAdapter);
  friendsListView.setGroupIndicator(null);
  expandAllGroups(headersCursor);
  if (selectedPositionList != Consts.ZERO_INT_VALUE) {
    friendsListView.setSelection(selectedPositionList);
  }
  baseActivity.hideActionBarProgress();
}",0.7784200385356455
114369,"private void registerContentObservers(){
  userTableContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      checkInitFriendsList();
    }
  }
;
  friendTableContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      checkInitFriendsList();
    }
  }
;
  baseActivity.getContentResolver().registerContentObserver(UserTable.CONTENT_URI,true,userTableContentObserver);
  baseActivity.getContentResolver().registerContentObserver(FriendTable.CONTENT_URI,true,friendTableContentObserver);
}","private void registerContentObservers(){
  userTableContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      selectedPositionList=friendsListView.getFirstVisiblePosition();
      checkInitFriendsList();
    }
  }
;
  friendTableContentObserver=new ContentObserver(new Handler()){
    @Override public void onChange(    boolean selfChange){
      checkInitFriendsList();
    }
  }
;
  baseActivity.getContentResolver().registerContentObserver(UserTable.CONTENT_URI,true,userTableContentObserver);
  baseActivity.getContentResolver().registerContentObserver(FriendTable.CONTENT_URI,true,friendTableContentObserver);
}",0.9453978159126364
114370,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_profile);
  useDoubleBackPressed=false;
  user=AppSession.getSession().getUser();
  imageUtils=new ImageUtils(this);
  initUI();
  initListeners();
  initUIWithUsersData();
  initBroadcastActionList();
  initTextChangedListeners();
  updateOldUserData();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_profile);
  useDoubleBackPressed=false;
  user=AppSession.getSession().getUser();
  imageUtils=new ImageUtils(this);
  actionModeCallback=new ActionModeCallback();
  initUI();
  initListeners();
  initUIWithUsersData();
  initBroadcastActionList();
  initTextChangedListeners();
  updateOldUserData();
}",0.942891859052248
114371,"private void startAction(){
  if (actionMode != null) {
    return;
  }
  actionMode=startActionMode(new ActionModeCallback());
}","private void startAction(){
  if (actionMode != null) {
    return;
  }
  actionMode=startActionMode(actionModeCallback);
}",0.9682539682539684
114372,"private void createFriend(int userId,boolean requestedFriend) throws QBResponseException {
  Log.d(""String_Node_Str"",""String_Node_Str"" + requestedFriend);
  User user=restHelper.loadUser(userId);
  Friend friend=FriendUtils.createFriend(userId,requestedFriend);
  fillUserOnlineStatus(user);
  saveUser(user);
  saveFriend(friend);
  Log.d(""String_Node_Str"",""String_Node_Str"" + requestedFriend + ""String_Node_Str"");
}","private void createFriend(int userId,boolean requestedFriend) throws QBResponseException {
  User user=restHelper.loadUser(userId);
  Friend friend=FriendUtils.createFriend(userId,requestedFriend);
  fillUserOnlineStatus(user);
  saveUser(user);
  saveFriend(friend);
}",0.7842565597667639
114373,"@Override public void subscriptionRequested(int userId){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  try {
    createFriend(userId,true);
    notifyContactRequest();
  }
 catch (  QBResponseException e) {
    Log.e(TAG,SUBSCRIPTION_ERROR,e);
  }
}","@Override public void subscriptionRequested(int userId){
  try {
    createFriend(userId,true);
    notifyContactRequest();
  }
 catch (  QBResponseException e) {
    Log.e(TAG,SUBSCRIPTION_ERROR,e);
  }
}",0.8991228070175439
114374,"@Override public void entriesAdded(Collection<Integer> userIdsList){
  Log.d(""String_Node_Str"",""String_Node_Str"");
}","@Override public void entriesAdded(Collection<Integer> userIdsList){
}",0.7526881720430108
114375,"public void init(){
  roster=QBChatService.getInstance().getRoster(QBRoster.SubscriptionMode.mutual,new SubscriptionListener());
  roster.setSubscriptionMode(QBRoster.SubscriptionMode.mutual);
  roster.addRosterListener(new RosterListener());
  restHelper=new QBRestHelper(context);
}","public void init(){
  restHelper=new QBRestHelper(context);
  roster=QBChatService.getInstance().getRoster(QBRoster.SubscriptionMode.mutual,new SubscriptionListener());
  roster.setSubscriptionMode(QBRoster.SubscriptionMode.mutual);
  roster.addRosterListener(new RosterListener());
}",0.8591549295774648
114376,"@Override public void entriesUpdated(Collection<Integer> userIdsList){
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    updateFriends(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,ENTRIES_UPDATING_ERROR,e);
  }
}","@Override public void entriesUpdated(Collection<Integer> userIdsList){
  try {
    updateFriends(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,ENTRIES_UPDATING_ERROR,e);
  }
}",0.8909090909090909
114377,"@Override public void entriesDeleted(Collection<Integer> userIdsList){
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    deleteUsers(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,ENTRIES_DELETED_ERROR,e);
  }
}","@Override public void entriesDeleted(Collection<Integer> userIdsList){
  try {
    deleteUsers(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,ENTRIES_DELETED_ERROR,e);
  }
}",0.8894009216589862
114378,"protected void startMainActivity(Context context,QBUser user,boolean saveRememberMe){
  AppSession.getSession().updateUser(user);
  AppSession.saveRememberMe(saveRememberMe);
  DatabaseManager.clearAllCache(context);
  MainActivity.start(context);
  KeyboardUtils.hideKeyboard(this);
  finish();
}","protected void startMainActivity(Context context,QBUser user,boolean saveRememberMe){
  AppSession.getSession().updateUser(user);
  AppSession.saveRememberMe(saveRememberMe);
  DatabaseManager.clearAllCache(context);
  MainActivity.start(context);
  finish();
}",0.9175627240143368
114379,"private void initFriendsList(){
  createHeadersCursor();
  friendsListAdapter=new FriendsListCursorAdapter(baseActivity,headersCursor,null,friendOperationAction,false);
  updateFriendsList();
}","private void initFriendsList(){
  baseActivity.showActionBarProgress();
  createHeadersCursor();
  friendsListAdapter=new FriendsListCursorAdapter(baseActivity,headersCursor,null,friendOperationAction,false);
  updateFriendsList();
}",0.9061032863849764
114380,"private void updateFriendsList(){
  friendsListView.setAdapter(friendsListAdapter);
  friendsListView.setGroupIndicator(null);
  expandAllGroups(headersCursor);
}","private void updateFriendsList(){
  friendsListView.setAdapter(friendsListAdapter);
  friendsListView.setGroupIndicator(null);
  expandAllGroups(headersCursor);
  baseActivity.hideActionBarProgress();
}",0.8901098901098901
114381,"protected void sendPrivateMessage(QBChatMessage chatMessage,int opponentId,String dialogId) throws QBResponseException {
  QBPrivateChat privateChat=privateChatManager.getChat(opponentId);
  if (privateChat == null) {
    createChatIfNotExist(opponentId);
  }
  if (!TextUtils.isEmpty(dialogId)) {
    chatMessage.setProperty(ChatUtils.PROPERTY_DIALOG_ID,dialogId);
  }
  String error=null;
  try {
    privateChat.sendMessage(chatMessage);
  }
 catch (  XMPPException e) {
    error=context.getString(R.string.dlg_fail_connection);
  }
catch (  SmackException.NotConnectedException e) {
    error=context.getString(R.string.dlg_fail_connection);
  }
  if (error != null) {
    throw new QBResponseException(error);
  }
}","protected void sendPrivateMessage(QBChatMessage chatMessage,int opponentId,String dialogId) throws QBResponseException {
  QBPrivateChat privateChat=privateChatManager.getChat(opponentId);
  if (privateChat == null) {
    privateChat=createChatIfNotExist(opponentId);
  }
  if (!TextUtils.isEmpty(dialogId)) {
    chatMessage.setProperty(ChatUtils.PROPERTY_DIALOG_ID,dialogId);
  }
  String error=null;
  try {
    privateChat.sendMessage(chatMessage);
  }
 catch (  XMPPException e) {
    error=context.getString(R.string.dlg_fail_connection);
  }
catch (  SmackException.NotConnectedException e) {
    error=context.getString(R.string.dlg_fail_connection);
  }
  if (error != null) {
    throw new QBResponseException(error);
  }
}",0.9917469050894084
114382,"private void loadAvatar(){
  String url=userCustomData.getAvatar_url();
  if (!TextUtils.isEmpty(url)) {
    ImageLoader.getInstance().displayImage(url,avatarImageView,Consts.UIL_USER_AVATAR_DISPLAY_OPTIONS);
  }
}","private void loadAvatar(){
  if (userCustomData != null && !TextUtils.isEmpty(userCustomData.getAvatar_url())) {
    ImageLoader.getInstance().displayImage(userCustomData.getAvatar_url(),avatarImageView,Consts.UIL_USER_AVATAR_DISPLAY_OPTIONS);
  }
}",0.6997840172786177
114383,"public synchronized void login(QBUser user) throws XMPPException, IOException, SmackException, QBResponseException {
  if (!QBChatService.isInitialized()) {
    QBChatService.init(context);
    QBChatService.setDefaultPacketReplyTimeout(Consts.DEFAULT_PACKET_REPLY_TIMEOUT);
    chatService=QBChatService.getInstance();
    chatService.addConnectionListener(connectionListener);
  }
  if (!chatService.isLoggedIn() && user != null) {
    chatService.login(user);
    chatService.startAutoSendPresence(AUTO_PRESENCE_INTERVAL_IN_SECONDS);
  }
}","public synchronized void login(QBUser user) throws XMPPException, IOException, SmackException, QBResponseException {
  if (!chatService.isLoggedIn() && user != null) {
    chatService.login(user);
    chatService.startAutoSendPresence(AUTO_PRESENCE_INTERVAL_IN_SECONDS);
  }
}",0.6748166259168704
114384,"public void init(){
  roster=QBChatService.getInstance().getRoster();
  roster.setSubscriptionMode(QBRoster.SubscriptionMode.mutual);
  roster.addRosterListener(new RosterListener());
  roster.addSubscriptionListener(new SubscriptionListener());
}","public void init(){
  roster=QBChatService.getInstance().getRoster();
  roster.setSubscriptionMode(QBRoster.SubscriptionMode.mutual);
  roster.addSubscriptionListener(new SubscriptionListener());
  roster.addRosterListener(new RosterListener());
}",0.7530364372469636
114385,"private void updateFriend(int userId) throws QBResponseException {
  QBRosterEntry rosterEntry=roster.getEntry(userId);
  User user=loadUser(userId);
  if (user == null) {
    return;
  }
  Friend friend=FriendUtils.createFriend(rosterEntry);
  checkAlertShowing(friend);
  fillUserOnlineStatus(user);
  saveUser(user);
  saveFriend(friend);
}","private void updateFriend(int userId) throws QBResponseException {
  QBRosterEntry rosterEntry=roster.getEntry(userId);
  User user=loadUser(userId);
  if (user == null) {
    return;
  }
  Friend friend=FriendUtils.createFriend(rosterEntry);
  fillUserOnlineStatus(user);
  saveUser(user);
  saveFriend(friend);
  checkAlertShowing(friend);
}",0.7959183673469388
114386,"public void leaveDialogs() throws XMPPException, SmackException.NotConnectedException {
  for (  QBDialog dialog : dialogsList) {
    if (!QBDialogType.PRIVATE.equals(dialog.getType())) {
      QBRoomChat roomChat=roomChatManager.getRoom(dialog.getRoomJid());
      if (roomChat != null && roomChat.isJoined()) {
        roomChat.leave();
      }
    }
  }
}","public void leaveDialogs() throws XMPPException, SmackException.NotConnectedException {
  if (dialogsList != null) {
    for (    QBDialog dialog : dialogsList) {
      if (!QBDialogType.PRIVATE.equals(dialog.getType())) {
        QBRoomChat roomChat=roomChatManager.getRoom(dialog.getRoomJid());
        if (roomChat != null && roomChat.isJoined()) {
          roomChat.leave();
        }
      }
    }
  }
}",0.9230769230769232
114387,"private void addLoginChatAndInitCommands(CompositeServiceCommand loginCommand){
  QBPrivateChatHelper chatHelper=(QBPrivateChatHelper)getHelper(PRIVATE_CHAT_HELPER);
  QBMultiChatHelper multiChatHelper=(QBMultiChatHelper)getHelper(MULTI_CHAT_HELPER);
  QBInitChatCommand initChatCommand=new QBInitChatCommand(this,chatHelper,multiChatHelper,QBServiceConsts.INIT_CHAT_SUCCESS_ACTION,QBServiceConsts.INIT_CHAT_FAIL_ACTION);
  QBChatRestHelper chatRestHelper=(QBChatRestHelper)getHelper(CHAT_REST_HELPER);
  QBLoginChatCommand loginChatCommand=new QBLoginChatCommand(this,authHelper,chatRestHelper,QBServiceConsts.LOGIN_CHAT_SUCCESS_ACTION,QBServiceConsts.LOGIN_CHAT_FAIL_ACTION);
  QBInitVideoChatCommand initVideoChatCommand=new QBInitVideoChatCommand(this,videoChatHelper,QBServiceConsts.INIT_VIDEO_CHAT_SUCCESS_ACTION,QBServiceConsts.INIT_VIDEO_CHAT_FAIL_ACTION);
  QBInitFriendListCommand initFriendListCommand=new QBInitFriendListCommand(this,friendListHelper,QBServiceConsts.INIT_FRIEND_LIST_SUCCESS_ACTION,QBServiceConsts.INIT_FRIEND_LIST_FAIL_ACTION);
  loginCommand.addCommand(loginChatCommand);
  loginCommand.addCommand(initChatCommand);
  loginCommand.addCommand(initVideoChatCommand);
  loginCommand.addCommand(initFriendListCommand);
}","private void addLoginChatAndInitCommands(CompositeServiceCommand loginCommand){
  QBChatRestHelper chatRestHelper=(QBChatRestHelper)getHelper(CHAT_REST_HELPER);
  QBPrivateChatHelper chatHelper=(QBPrivateChatHelper)getHelper(PRIVATE_CHAT_HELPER);
  QBMultiChatHelper multiChatHelper=(QBMultiChatHelper)getHelper(MULTI_CHAT_HELPER);
  QBInitChatServiceCommand initChatServiceCommand=new QBInitChatServiceCommand(this,chatRestHelper,QBServiceConsts.INIT_CHAT_SERVICE_SUCCESS_ACTION,QBServiceConsts.INIT_CHAT_SERVICE_FAIL_ACTION);
  QBLoginChatCommand loginChatCommand=new QBLoginChatCommand(this,authHelper,chatRestHelper,QBServiceConsts.LOGIN_CHAT_SUCCESS_ACTION,QBServiceConsts.LOGIN_CHAT_FAIL_ACTION);
  QBInitFriendListCommand initFriendListCommand=new QBInitFriendListCommand(this,friendListHelper,QBServiceConsts.INIT_FRIEND_LIST_SUCCESS_ACTION,QBServiceConsts.INIT_FRIEND_LIST_FAIL_ACTION);
  QBInitChatsCommand initChatsCommand=new QBInitChatsCommand(this,chatHelper,multiChatHelper,QBServiceConsts.INIT_CHATS_SUCCESS_ACTION,QBServiceConsts.INIT_CHATS_FAIL_ACTION);
  QBInitVideoChatCommand initVideoChatCommand=new QBInitVideoChatCommand(this,videoChatHelper,QBServiceConsts.INIT_VIDEO_CHAT_SUCCESS_ACTION,QBServiceConsts.INIT_VIDEO_CHAT_FAIL_ACTION);
  loginCommand.addCommand(initChatServiceCommand);
  loginCommand.addCommand(loginChatCommand);
  loginCommand.addCommand(initFriendListCommand);
  loginCommand.addCommand(initChatsCommand);
  loginCommand.addCommand(initVideoChatCommand);
}",0.5933745904623225
114388,"@Override public void execute(Bundle bundle){
  ArrayList<ParcelableQBDialog> parcelableDialogsList=bundle.getParcelableArrayList(QBServiceConsts.EXTRA_CHATS_DIALOGS);
  if (parcelableDialogsList.isEmpty()) {
    emptyListTextView.setVisibility(View.VISIBLE);
  }
}","@Override public void execute(Bundle bundle){
  ArrayList<ParcelableQBDialog> parcelableDialogsList=bundle.getParcelableArrayList(QBServiceConsts.EXTRA_CHATS_DIALOGS);
  if (parcelableDialogsList == null) {
    emptyListTextView.setVisibility(View.VISIBLE);
  }
}",0.7727272727272727
114389,"public static void saveChatMessage(Context context,MessageCache messageCache){
  ContentValues values=new ContentValues();
  String body=messageCache.getMessage();
  values.put(MessageTable.Cols.ID,messageCache.getId());
  values.put(MessageTable.Cols.DIALOG_ID,messageCache.getDialogId());
  values.put(MessageTable.Cols.PACKET_ID,messageCache.getPacketId());
  values.put(MessageTable.Cols.SENDER_ID,messageCache.getSenderId());
  if (TextUtils.isEmpty(body)) {
    values.put(MessageTable.Cols.BODY,body);
  }
 else {
    values.put(MessageTable.Cols.BODY,Html.fromHtml(body).toString());
  }
  values.put(MessageTable.Cols.TIME,messageCache.getTime());
  values.put(MessageTable.Cols.ATTACH_FILE_ID,messageCache.getAttachUrl());
  values.put(MessageTable.Cols.IS_READ,messageCache.isRead());
  values.put(MessageTable.Cols.IS_DELIVERED,messageCache.isDelivered());
  context.getContentResolver().insert(MessageTable.CONTENT_URI,values);
  updateDialog(context,messageCache.getDialogId(),messageCache.getMessage(),messageCache.getTime(),messageCache.getSenderId());
}","public static void saveChatMessage(Context context,MessageCache messageCache){
  ContentValues values=new ContentValues();
  String body=messageCache.getMessage();
  values.put(MessageTable.Cols.ID,messageCache.getId());
  values.put(MessageTable.Cols.DIALOG_ID,messageCache.getDialogId());
  values.put(MessageTable.Cols.PACKET_ID,messageCache.getPacketId());
  values.put(MessageTable.Cols.SENDER_ID,messageCache.getSenderId());
  if (TextUtils.isEmpty(body)) {
    values.put(MessageTable.Cols.BODY,body);
  }
 else {
    values.put(MessageTable.Cols.BODY,Html.fromHtml(body).toString());
  }
  values.put(MessageTable.Cols.TIME,messageCache.getTime());
  values.put(MessageTable.Cols.ATTACH_FILE_ID,messageCache.getAttachUrl());
  values.put(MessageTable.Cols.IS_READ,messageCache.isRead());
  values.put(MessageTable.Cols.IS_DELIVERED,messageCache.isDelivered());
  context.getContentResolver().insert(MessageTable.CONTENT_URI,values);
  int countUnreadMessagesLocal=getCountUnreadMessagesByDialogIdLocal(context,messageCache.getDialogId());
  if (!messageCache.isRead()) {
    countUnreadMessagesLocal=++countUnreadMessagesLocal;
  }
  updateDialog(context,messageCache.getDialogId(),messageCache.getMessage(),messageCache.getTime(),messageCache.getSenderId(),countUnreadMessagesLocal);
}",0.9052453468697124
114390,"public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    MessageCache messageCache=new MessageCache(messageId,dialogId,null,senderId,message,attachURL,time,true,true);
    saveChatMessage(context,messageCache);
  }
}","public static void saveChatMessages(Context context,List<QBChatHistoryMessage> messagesList,String dialogId){
  MessageCache messageCache=null;
  for (  QBChatHistoryMessage historyMessage : messagesList) {
    String messageId=historyMessage.getId();
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    long time=historyMessage.getDateSent();
    String attachURL;
    attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    messageCache=new MessageCache(messageId,dialogId,null,senderId,message,attachURL,time,true,true);
    saveChatMessage(context,messageCache);
  }
  if (messageCache != null) {
    updateDialog(context,messageCache.getDialogId(),messageCache.getMessage(),messageCache.getTime(),messageCache.getSenderId(),Consts.ZERO_INT_VALUE);
  }
}",0.8391994478951
114391,"public static void updateDialog(Context context,String dialogId,String lastMessage,long dateSent,long lastSenderId){
  ContentResolver resolver=context.getContentResolver();
  ContentValues values=new ContentValues();
  values.put(DialogTable.Cols.COUNT_UNREAD_MESSAGES,getCountUnreadMessagesByRoomJid(context,dialogId));
  if (TextUtils.isEmpty(lastMessage)) {
    values.put(DialogTable.Cols.LAST_MESSAGE,lastMessage);
  }
 else {
    values.put(DialogTable.Cols.LAST_MESSAGE,Html.fromHtml(lastMessage).toString());
  }
  values.put(DialogTable.Cols.LAST_MESSAGE_USER_ID,lastSenderId);
  values.put(DialogTable.Cols.LAST_DATE_SENT,dateSent);
  String condition=DialogTable.Cols.DIALOG_ID + ""String_Node_Str"" + dialogId+ ""String_Node_Str"";
  resolver.update(DialogTable.CONTENT_URI,values,condition,null);
}","public static void updateDialog(Context context,String dialogId,String lastMessage,long dateSent,long lastSenderId,int countUnreadMessages){
  ContentResolver resolver=context.getContentResolver();
  ContentValues values=new ContentValues();
  values.put(DialogTable.Cols.COUNT_UNREAD_MESSAGES,countUnreadMessages);
  if (TextUtils.isEmpty(lastMessage)) {
    values.put(DialogTable.Cols.LAST_MESSAGE,lastMessage);
  }
 else {
    values.put(DialogTable.Cols.LAST_MESSAGE,Html.fromHtml(lastMessage).toString());
  }
  values.put(DialogTable.Cols.LAST_MESSAGE_USER_ID,lastSenderId);
  values.put(DialogTable.Cols.LAST_DATE_SENT,dateSent);
  String condition=DialogTable.Cols.DIALOG_ID + ""String_Node_Str"" + dialogId+ ""String_Node_Str"";
  resolver.update(DialogTable.CONTENT_URI,values,condition,null);
}",0.9652173913043478
114392,"public static void updateStatusMessage(Context context,String messageId,boolean isRead){
  ContentValues values=new ContentValues();
  String condition=MessageTable.Cols.ID + ""String_Node_Str"" + messageId+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(MessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    String roomJidId=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.DIALOG_ID));
    String message=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.BODY));
    long time=cursor.getLong(cursor.getColumnIndex(MessageTable.Cols.TIME));
    long lastSenderId=cursor.getLong(cursor.getColumnIndex(MessageTable.Cols.SENDER_ID));
    values.put(MessageTable.Cols.IS_READ,isRead);
    resolver.update(MessageTable.CONTENT_URI,values,condition,null);
    cursor.close();
    updateDialog(context,roomJidId,message,time,lastSenderId);
  }
}","public static void updateStatusMessage(Context context,String messageId,boolean isRead){
  ContentValues values=new ContentValues();
  String condition=MessageTable.Cols.ID + ""String_Node_Str"" + messageId+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(MessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    String dialogId=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.DIALOG_ID));
    String message=cursor.getString(cursor.getColumnIndex(MessageTable.Cols.BODY));
    long time=cursor.getLong(cursor.getColumnIndex(MessageTable.Cols.TIME));
    long lastSenderId=cursor.getLong(cursor.getColumnIndex(MessageTable.Cols.SENDER_ID));
    values.put(MessageTable.Cols.IS_READ,isRead);
    resolver.update(MessageTable.CONTENT_URI,values,condition,null);
    cursor.close();
    int countUnreadMessagesLocal=getCountUnreadMessagesByDialogIdLocal(context,dialogId);
    countUnreadMessagesLocal=--countUnreadMessagesLocal;
    updateDialog(context,dialogId,message,time,lastSenderId,countUnreadMessagesLocal);
  }
}",0.8815663801337154
114393,"public void updateDialog(QBDialog dialog){
  DatabaseManager.updateDialog(context,dialog.getDialogId(),dialog.getLastMessage(),dialog.getLastMessageDateSent(),dialog.getLastMessageUserId());
}","public void updateDialog(QBDialog dialog){
  int countUnreadDialog=DatabaseManager.getCountUnreadMessagesByDialogIdLocal(context,dialog.getDialogId());
  DatabaseManager.updateDialog(context,dialog.getDialogId(),dialog.getLastMessage(),dialog.getLastMessageDateSent(),dialog.getLastMessageUserId(),countUnreadDialog);
}",0.7514677103718199
114394,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  rootView=getLayoutInflater().inflate(layoutResID,null);
  setContentView(rootView);
  imageUtils=new ImageUtils(this);
  loadAttachFileSuccessAction=new LoadAttachFileSuccessAction();
  loadDialogMessagesSuccessAction=new LoadDialogMessagesSuccessAction();
  initUI();
  initListeners();
  initActionBar();
  addActions();
  isNeedToScrollMessages=true;
  hideSmileLayout();
  registerContentObservers();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  rootView=getLayoutInflater().inflate(layoutResID,null);
  setContentView(rootView);
  imageUtils=new ImageUtils(this);
  loadAttachFileSuccessAction=new LoadAttachFileSuccessAction();
  loadDialogMessagesSuccessAction=new LoadDialogMessagesSuccessAction();
  initUI();
  initListeners();
  initActionBar();
  addActions();
  isNeedToScrollMessages=true;
  hideSmileLayout();
}",0.9693877551020408
114395,"@Override protected void onDestroy(){
  super.onDestroy();
  if (chatHelper != null) {
    chatHelper.closeChat(dialog,generateBundleToInitDialog());
  }
  unregisterContentObservers();
  removeActions();
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (chatHelper != null) {
    chatHelper.closeChat(dialog,generateBundleToInitDialog());
  }
  removeActions();
}",0.9157894736842104
114396,"private void createFriendTable(SQLiteDatabase db){
  StringBuilder friendTableFields=new StringBuilder();
  friendTableFields.append(FriendTable.Cols.ID).append(""String_Node_Str"").append(FriendTable.Cols.USER_ID).append(""String_Node_Str"").append(FriendTable.Cols.RELATION_STATUS_ID).append(""String_Node_Str"").append(FriendTable.Cols.USER_ID).append(""String_Node_Str"").append(UserTable.TABLE_NAME).append(""String_Node_Str"").append(UserTable.Cols.USER_ID).append(""String_Node_Str"").append(FriendTable.Cols.RELATION_STATUS_ID).append(""String_Node_Str"").append(FriendsRelationTable.TABLE_NAME).append(""String_Node_Str"").append(FriendsRelationTable.Cols.RELATION_STATUS_ID).append(""String_Node_Str"");
  createTable(db,FriendTable.TABLE_NAME,friendTableFields.toString());
}","private void createFriendTable(SQLiteDatabase db){
  StringBuilder friendTableFields=new StringBuilder();
  friendTableFields.append(FriendTable.Cols.ID).append(""String_Node_Str"").append(FriendTable.Cols.USER_ID).append(""String_Node_Str"").append(FriendTable.Cols.TEMP_RELATION_STATUS_ID).append(""String_Node_Str"").append(FriendTable.Cols.RELATION_STATUS_ID).append(""String_Node_Str"").append(FriendTable.Cols.USER_ID).append(""String_Node_Str"").append(UserTable.TABLE_NAME).append(""String_Node_Str"").append(UserTable.Cols.USER_ID).append(""String_Node_Str"").append(FriendTable.Cols.RELATION_STATUS_ID).append(""String_Node_Str"").append(FriendsRelationTable.TABLE_NAME).append(""String_Node_Str"").append(FriendsRelationTable.Cols.RELATION_STATUS_ID).append(""String_Node_Str"");
  createTable(db,FriendTable.TABLE_NAME,friendTableFields.toString());
}",0.9534450651769087
114397,"public static boolean isFriendInBase(Context context,int searchId){
  int relationStatusFromId=DatabaseManager.getRelationStatusIdByName(context,QBFriendListHelper.RELATION_STATUS_FROM);
  int relationStatusBothId=DatabaseManager.getRelationStatusIdByName(context,QBFriendListHelper.RELATION_STATUS_BOTH);
  String condition=FriendTable.TABLE_NAME + ""String_Node_Str"" + FriendTable.Cols.RELATION_STATUS_ID+ ""String_Node_Str""+ relationStatusFromId+ ""String_Node_Str""+ FriendTable.TABLE_NAME+ ""String_Node_Str""+ FriendTable.Cols.RELATION_STATUS_ID+ ""String_Node_Str""+ relationStatusBothId+ ""String_Node_Str""+ FriendTable.TABLE_NAME+ ""String_Node_Str""+ FriendTable.Cols.USER_ID+ ""String_Node_Str""+ searchId;
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(UserTable.USER_FRIEND_CONTENT_URI,null,USER_FRIEND_RELATION_KEY + ""String_Node_Str"" + condition+ ""String_Node_Str"",null,null);
  boolean isFriendInBase=cursor.getCount() > Consts.ZERO_INT_VALUE;
  cursor.close();
  return isFriendInBase;
}","public static boolean isFriendInBase(Context context,int searchId){
  int relationStatusFromId=DatabaseManager.getRelationStatusIdByName(context,QBFriendListHelper.RELATION_STATUS_FROM);
  int relationStatusToId=DatabaseManager.getRelationStatusIdByName(context,QBFriendListHelper.RELATION_STATUS_TO);
  int relationStatusBothId=DatabaseManager.getRelationStatusIdByName(context,QBFriendListHelper.RELATION_STATUS_BOTH);
  String condition=FriendTable.TABLE_NAME + ""String_Node_Str"" + FriendTable.Cols.RELATION_STATUS_ID+ ""String_Node_Str""+ relationStatusFromId+ ""String_Node_Str""+ FriendTable.TABLE_NAME+ ""String_Node_Str""+ FriendTable.Cols.RELATION_STATUS_ID+ ""String_Node_Str""+ relationStatusBothId+ ""String_Node_Str""+ FriendTable.TABLE_NAME+ ""String_Node_Str""+ FriendTable.Cols.RELATION_STATUS_ID+ ""String_Node_Str""+ relationStatusToId+ ""String_Node_Str""+ FriendTable.TABLE_NAME+ ""String_Node_Str""+ FriendTable.Cols.USER_ID+ ""String_Node_Str""+ searchId;
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(UserTable.USER_FRIEND_CONTENT_URI,null,USER_FRIEND_RELATION_KEY + ""String_Node_Str"" + condition+ ""String_Node_Str"",null,null);
  boolean isFriendInBase=cursor.getCount() > Consts.ZERO_INT_VALUE;
  cursor.close();
  return isFriendInBase;
}",0.8908070781182563
114398,"private static ContentValues getContentValuesFriendTable(Friend friend){
  ContentValues values=new ContentValues();
  values.put(FriendTable.Cols.USER_ID,friend.getUserId());
  values.put(FriendTable.Cols.RELATION_STATUS_ID,friend.getRelationStatusId());
  return values;
}","private static ContentValues getContentValuesFriendTable(Friend friend){
  ContentValues values=new ContentValues();
  values.put(FriendTable.Cols.USER_ID,friend.getUserId());
  values.put(FriendTable.Cols.RELATION_STATUS_ID,friend.getRelationStatusId());
  values.put(FriendTable.Cols.TEMP_RELATION_STATUS_ID,friend.getTempRelationStatusId());
  return values;
}",0.8602825745682888
114399,"public static void savePeople(Context context,List<User> usersList,List<Friend> friendsList){
  for (  User user : usersList) {
    saveUser(context,user);
  }
  for (  Friend friend : friendsList) {
    saveFriend(context,friend);
  }
}","public static void savePeople(Context context,List<User> usersList,List<Friend> friendsList){
  for (  User user : usersList) {
    saveUser(context,user);
  }
  for (  Friend friend : friendsList) {
    if (!DatabaseManager.hasFriendTempStatus(context,friend.getUserId())) {
      saveFriend(context,friend);
    }
  }
}",0.8494623655913979
114400,"public static void deleteUserById(Context context,int userId){
  context.getContentResolver().delete(FriendTable.CONTENT_URI,FriendTable.Cols.USER_ID + ""String_Node_Str"" + userId,null);
}","public static boolean deleteUserById(Context context,int userId){
  int deletedRow=context.getContentResolver().delete(FriendTable.CONTENT_URI,FriendTable.Cols.USER_ID + ""String_Node_Str"" + userId,null);
  return deletedRow > Consts.ZERO_INT_VALUE;
}",0.8375286041189931
114401,"public Friend(Integer userId,String relationStatus){
  this.userId=userId;
  this.relationStatus=relationStatus;
}","public Friend(Integer userId,String relationStatus,int tempRelationStatusId){
  this.userId=userId;
  this.relationStatus=relationStatus;
  this.tempRelationStatusId=tempRelationStatusId;
}",0.7524752475247525
114402,"@Override protected Bundle perform(Bundle extras) throws Exception {
  int userId=extras.getInt(QBServiceConsts.EXTRA_USER_ID);
  friendListHelper.inviteFriend(userId);
  Bundle result=new Bundle();
  result.putSerializable(QBServiceConsts.EXTRA_FRIEND_ID,userId);
  return result;
}","@Override protected Bundle perform(Bundle extras) throws Exception {
  int userId=extras.getInt(QBServiceConsts.EXTRA_USER_ID);
  friendListHelper.addFriend(userId);
  Bundle result=new Bundle();
  result.putSerializable(QBServiceConsts.EXTRA_FRIEND_ID,userId);
  return result;
}",0.9840142095914742
114403,"public QBRemoveFriendCommand(Context context,String successAction,String failAction){
  super(context,successAction,failAction);
}","public QBRemoveFriendCommand(Context context,QBFriendListHelper friendListHelper,String successAction,String failAction){
  super(context,successAction,failAction);
  this.friendListHelper=friendListHelper;
}",0.7692307692307693
114404,"public static void start(Context context,User friend){
  Intent intent=new Intent(QBServiceConsts.REMOVE_FRIEND_ACTION,null,context,QBService.class);
  intent.putExtra(QBServiceConsts.EXTRA_FRIEND,friend);
  context.startService(intent);
}","public static void start(Context context,int friendId){
  Intent intent=new Intent(QBServiceConsts.REMOVE_FRIEND_ACTION,null,context,QBService.class);
  intent.putExtra(QBServiceConsts.EXTRA_FRIEND_ID,friendId);
  context.startService(intent);
}",0.9710743801652892
114405,"@Override protected Bundle perform(Bundle extras) throws Exception {
  User friend=(User)extras.getSerializable(QBServiceConsts.EXTRA_FRIEND);
  QBCustomObjectRequestBuilder builder=new QBCustomObjectRequestBuilder();
  builder.eq(Consts.FRIEND_FIELD_USER_ID,AppSession.getSession().getUser().getId());
  builder.eq(Consts.FRIEND_FIELD_FRIEND_ID,friend.getUserId());
  List<QBCustomObject> objects=QBCustomObjects.getObjects(Consts.EXTRA_FRIEND,builder,(Bundle)null);
  QBCustomObjects.deleteObject(Consts.EXTRA_FRIEND,objects.get(0).getCustomObjectId());
  return null;
}","@Override protected Bundle perform(Bundle extras) throws Exception {
  int friendId=extras.getInt(QBServiceConsts.EXTRA_FRIEND_ID);
  friendListHelper.removeFriend(friendId);
  Bundle result=new Bundle();
  result.putSerializable(QBServiceConsts.EXTRA_FRIEND_ID,friendId);
  return result;
}",0.3198146002317497
114406,"public static void savePeople(Context context,List<User> usersList,List<Friend> friendsList){
  for (  User user : usersList) {
    saveUser(context,user);
  }
  for (  Friend friend : friendsList) {
    saveFriend(context,friend);
  }
}","public static void savePeople(Context context,List<User> usersList,List<Friend> friendsList){
  for (  User user : usersList) {
    saveUser(context,user);
  }
  for (  Friend friend : friendsList) {
    if (!isUserRequested(context,friend.getUserId())) {
      saveFriend(context,friend);
    }
  }
}",0.8810408921933085
114407,"public void removeFriend(int userId) throws Exception {
  roster.unsubscribe(userId);
  QBRosterEntry rosterEntry=roster.getEntry(userId);
  if (rosterEntry != null) {
    roster.removeEntry(rosterEntry);
  }
 else {
    deleteUser(userId);
  }
}","public void removeFriend(int userId) throws Exception {
  roster.unsubscribe(userId);
  QBRosterEntry rosterEntry=roster.getEntry(userId);
  if (rosterEntry != null && roster.contains(userId)) {
    roster.removeEntry(rosterEntry);
  }
 else {
    deleteUser(userId);
  }
}",0.9479768786127168
114408,"public void addFriend(int userId) throws Exception {
  if (isNotInvited(userId)) {
    sendInvitation(userId);
  }
}","public void addFriend(int userId) throws Exception {
  if (isNotInvited(userId)) {
    Friend friend=new Friend(userId);
    friend.setRequestedFriend(false);
    saveFriend(friend);
    sendInvitation(userId);
  }
}",0.6987951807228916
114409,"public static Cursor getAllFriends(Context context){
  String sortOrder=UserTable.Cols.ID + ""String_Node_Str"" + UserTable.Cols.FULL_NAME+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(UserTable.USER_FRIEND_CONTENT_URI,null,USER_FRIEND_RELATION_KEY,null,sortOrder);
  return cursor;
}","public static Cursor getAllFriends(Context context,int relationStatusId){
  String condition=FriendTable.TABLE_NAME + ""String_Node_Str"" + FriendTable.Cols.RELATION_STATUS_ID+ ""String_Node_Str""+ relationStatusId;
  String sortOrder=UserTable.Cols.ID + ""String_Node_Str"" + UserTable.Cols.FULL_NAME+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(UserTable.USER_FRIEND_CONTENT_URI,null,USER_FRIEND_RELATION_KEY + ""String_Node_Str"" + condition,null,sortOrder);
  return cursor;
}",0.782707622298066
114410,"public static void saveFriend(Context context,Friend friend){
  ContentValues values=getContentValuesFriendTable(context,friend);
  String condition=FriendTable.Cols.USER_ID + ""String_Node_Str"" + friend.getUserId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(FriendTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > Consts.ZERO_INT_VALUE) {
    resolver.update(FriendTable.CONTENT_URI,values,condition,null);
  }
 else {
    resolver.insert(FriendTable.CONTENT_URI,values);
  }
  if (cursor != null) {
    cursor.close();
  }
}","public static void saveFriend(Context context,Friend friend){
  initFriendsRelationStatuses(context);
  int relationStatusId=getRelationStatusIdByName(context,friend.getRelationStatus());
  friend.setRelationStatusId(relationStatusId);
  ContentValues values=getContentValuesFriendTable(friend);
  String condition=FriendTable.Cols.USER_ID + ""String_Node_Str"" + friend.getUserId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(FriendTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > Consts.ZERO_INT_VALUE) {
    resolver.update(FriendTable.CONTENT_URI,values,condition,null);
  }
 else {
    resolver.insert(FriendTable.CONTENT_URI,values);
  }
  if (cursor != null) {
    cursor.close();
  }
}",0.8721910112359551
114411,"private static ContentValues getContentValuesFriendTable(Context context,Friend friend){
  ContentValues values=new ContentValues();
  int relationStatusId=getRelationStatusId(context,friend.getRelationStatus());
  if (relationStatusId == Consts.ZERO_INT_VALUE) {
    relationStatusId=saveFriendsRelationStatus(context,friend.getRelationStatus());
  }
  values.put(FriendTable.Cols.USER_ID,friend.getUserId());
  values.put(FriendTable.Cols.RELATION_STATUS_ID,relationStatusId);
  return values;
}","private static ContentValues getContentValuesFriendTable(Friend friend){
  ContentValues values=new ContentValues();
  values.put(FriendTable.Cols.USER_ID,friend.getUserId());
  values.put(FriendTable.Cols.RELATION_STATUS_ID,friend.getRelationStatusId());
  return values;
}",0.6381322957198443
114412,"public List<Integer> updateFriendList() throws QBResponseException {
  Collection<QBRosterEntry> rosterEntryCollection;
  List<Integer> userIdsList=new ArrayList<Integer>();
  if (roster != null) {
    rosterEntryCollection=roster.getEntries();
    if (!rosterEntryCollection.isEmpty()) {
      userIdsList=FriendUtils.getUserIdsFromRoster(rosterEntryCollection);
      updateFriends(userIdsList,rosterEntryCollection);
    }
    try {
      makeAutoSubscription(rosterEntryCollection);
    }
 catch (    QBResponseException e) {
      ErrorUtils.logError(e);
    }
  }
 else {
    ErrorUtils.showError(context,""String_Node_Str"");
  }
  return userIdsList;
}","public List<Integer> updateFriendList() throws QBResponseException {
  Collection<QBRosterEntry> rosterEntryCollection;
  List<Integer> userIdsList=new ArrayList<Integer>();
  if (roster != null) {
    rosterEntryCollection=roster.getEntries();
    if (!rosterEntryCollection.isEmpty()) {
      userIdsList=FriendUtils.getUserIdsFromRoster(rosterEntryCollection);
      updateFriends(userIdsList,rosterEntryCollection);
    }
  }
 else {
    ErrorUtils.logError(TAG,ROSTER_INIT_ERROR);
  }
  return userIdsList;
}",0.7566182749786508
114413,"@Override public void entriesUpdated(Collection<Integer> userIdsList){
  try {
    updateFriends(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","@Override public void entriesUpdated(Collection<Integer> userIdsList){
  try {
    updateFriends(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,ENTRIES_UPDATING_ERROR,e);
  }
}",0.9198966408268734
114414,"@Override public void presenceChanged(QBPresence presence){
  User user=DatabaseManager.getUserById(context,presence.getUserId());
  if (user == null) {
    ErrorUtils.logError(TAG,""String_Node_Str"" + presence.getUserId());
  }
 else {
    fillUserOnlineStatus(user,presence);
    DatabaseManager.saveUser(context,user);
  }
}","@Override public void presenceChanged(QBPresence presence){
  User user=DatabaseManager.getUserById(context,presence.getUserId());
  if (user == null) {
    ErrorUtils.logError(TAG,PRESENCE_CHANGE_ERROR + presence.getUserId());
  }
 else {
    fillUserOnlineStatus(user,presence);
    DatabaseManager.saveUser(context,user);
  }
}",0.5945121951219512
114415,"private void makeAutoSubscription(Collection<QBRosterEntry> entries) throws QBResponseException {
  for (  QBRosterEntry entry : entries) {
    if (RosterPacket.ItemType.from.equals(entry.getType())) {
      boolean errorOccurred=false;
      try {
        roster.confirmSubscription(entry.getUserId());
      }
 catch (      SmackException.NotConnectedException e) {
        errorOccurred=true;
      }
catch (      SmackException.NotLoggedInException e) {
        errorOccurred=true;
      }
catch (      XMPPException e) {
        errorOccurred=true;
      }
catch (      SmackException.NoResponseException e) {
        errorOccurred=true;
      }
      if (errorOccurred) {
        throw new QBResponseException(""String_Node_Str"");
      }
    }
  }
}","private void makeAutoSubscription(Collection<QBRosterEntry> entriesList) throws QBResponseException {
  for (  QBRosterEntry rosterEntry : entriesList) {
    if (RosterPacket.ItemType.from.equals(rosterEntry.getType())) {
      boolean errorOccurred=false;
      try {
        roster.confirmSubscription(rosterEntry.getUserId());
      }
 catch (      SmackException.NotConnectedException e) {
        errorOccurred=true;
      }
catch (      SmackException.NotLoggedInException e) {
        errorOccurred=true;
      }
catch (      XMPPException e) {
        errorOccurred=true;
      }
catch (      SmackException.NoResponseException e) {
        errorOccurred=true;
      }
      if (errorOccurred) {
        throw new QBResponseException(""String_Node_Str"");
      }
    }
  }
}",0.9791666666666666
114416,"private void addUserToFriendList(int userId) throws Exception {
  User user=loadUser(userId);
  Friend friend=FriendUtils.createNewFriend(user);
  fillUserOnlineStatus(user);
  DatabaseManager.saveUser(context,user);
  DatabaseManager.saveFriend(context,friend);
}","private void addUserToFriendList(int userId) throws Exception {
  User user=loadUser(userId);
  Friend friend=FriendUtils.getFriendWithStatus(user.getUserId(),RosterPacket.ItemType.to.name());
  fillUserOnlineStatus(user);
  DatabaseManager.saveUser(context,user);
  DatabaseManager.saveFriend(context,friend);
}",0.8506944444444444
114417,"@Override public void subscriptionRequested(int userId){
  try {
    roster.confirmSubscription(userId);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","@Override public void subscriptionRequested(int userId){
  try {
    createFriendWithStatusFrom(userId);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,SUBSCRIPTION_ERROR,e);
  }
}",0.7590027700831025
114418,"@Override public void entriesAdded(Collection<Integer> userIdsList){
  try {
    updateFriends(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","@Override public void entriesAdded(Collection<Integer> userIdsList){
  try {
    updateFriends(userIdsList);
  }
 catch (  QBResponseException e) {
    Log.e(TAG,ENTRIES_ADDED_ERROR,e);
  }
}",0.9210526315789472
114419,"private void initImageLoader(Context context){
  ImageLoader.getInstance().init(ImageHelper.getImageLoaderConfiguration(context));
}","private void initImageLoader(Context context){
  ImageLoader.getInstance().init(ImageUtils.getImageLoaderConfiguration(context));
}",0.9657794676806084
114420,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_signup);
  resources=getResources();
  initUI();
  initListeners();
  useDoubleBackPressed=true;
  user=new QBUser();
  imageHelper=new ImageHelper(this);
  validationUtils=new ValidationUtils(SignUpActivity.this,new EditText[]{fullnameEditText,emailEditText,passwordEditText},new String[]{resources.getString(R.string.dlg_not_fullname_field_entered),resources.getString(R.string.dlg_not_email_field_entered),resources.getString(R.string.dlg_not_password_field_entered)});
  addActions();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_signup);
  resources=getResources();
  initUI();
  initListeners();
  useDoubleBackPressed=true;
  user=new QBUser();
  imageUtils=new ImageUtils(this);
  validationUtils=new ValidationUtils(SignUpActivity.this,new EditText[]{fullnameEditText,emailEditText,passwordEditText},new String[]{resources.getString(R.string.dlg_not_fullname_field_entered),resources.getString(R.string.dlg_not_email_field_entered),resources.getString(R.string.dlg_not_password_field_entered)});
  addActions();
}",0.9822866344605476
114421,"public void signUpOnClickListener(View view){
  String fullNameText=fullnameEditText.getText().toString();
  String emailText=emailEditText.getText().toString();
  String passwordText=passwordEditText.getText().toString();
  if (validationUtils.isValidUserDate(fullNameText,emailText,passwordText)) {
    user.setFullName(fullNameText);
    user.setEmail(emailText);
    user.setPassword(passwordText);
    showProgress();
    if (isNeedUpdateAvatar) {
      new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
    }
 else {
      App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,false);
      QBSignUpCommand.start(SignUpActivity.this,user,null);
    }
  }
}","public void signUpOnClickListener(View view){
  String fullNameText=fullnameEditText.getText().toString();
  String emailText=emailEditText.getText().toString();
  String passwordText=passwordEditText.getText().toString();
  if (validationUtils.isValidUserDate(fullNameText,emailText,passwordText)) {
    user.setFullName(fullNameText);
    user.setEmail(emailText);
    user.setPassword(passwordText);
    showProgress();
    if (isNeedUpdateAvatar) {
      new ReceiveImageFileTask(this).execute(imageUtils,avatarBitmapCurrent,true);
    }
 else {
      App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,false);
      QBSignUpCommand.start(SignUpActivity.this,user,null);
    }
  }
}",0.992313067784766
114422,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == ImageCropperActivity.ACTIVITY_RESULT_CODE) {
    if (resultCode == RESULT_OK) {
      isNeedUpdateAvatar=true;
      String filePath=data.getStringExtra(QBServiceConsts.EXTRA_FILE_PATH);
      avatarBitmapCurrent=BitmapFactory.decodeFile(filePath);
      imageHelper.removeFile(filePath);
      avatarImageView.setImageBitmap(avatarBitmapCurrent);
    }
  }
 else   if (requestCode == ImageHelper.GALLERY_INTENT_CALLED) {
    if (resultCode == RESULT_OK) {
      Uri originalUri=data.getData();
      if (originalUri != null) {
        startCropActivity(originalUri);
      }
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == ImageCropperActivity.INTENT_RESULT_CODE) {
    if (resultCode == RESULT_OK) {
      isNeedUpdateAvatar=true;
      String filePath=data.getStringExtra(QBServiceConsts.EXTRA_FILE_PATH);
      avatarBitmapCurrent=BitmapFactory.decodeFile(filePath);
      FileUtils.removeFile(filePath);
      avatarImageView.setImageBitmap(avatarBitmapCurrent);
    }
  }
 else   if (requestCode == ImageUtils.GALLERY_INTENT_CALLED) {
    if (resultCode == RESULT_OK) {
      Uri originalUri=data.getData();
      if (originalUri != null) {
        startCropActivity(originalUri);
      }
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}",0.961719274680994
114423,"public void changeAvatarOnClickListener(View view){
  imageHelper.getImage();
}","public void changeAvatarOnClickListener(View view){
  imageUtils.getImage();
}",0.9426751592356688
114424,"private boolean isGalleryCalled(int requestCode){
  return ImageHelper.GALLERY_INTENT_CALLED == requestCode;
}","private boolean isGalleryCalled(int requestCode){
  return ImageUtils.GALLERY_INTENT_CALLED == requestCode;
}",0.958904109589041
114425,"protected void attachButtonOnClick(){
  canPerformLogout.set(false);
  imageHelper.getImage();
}","protected void attachButtonOnClick(){
  canPerformLogout.set(false);
  imageUtils.getImage();
}",0.9528795811518324
114426,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  rootView=getLayoutInflater().inflate(layoutResID,null);
  setContentView(rootView);
  imageHelper=new ImageHelper(this);
  loadAttachFileSuccessAction=new LoadAttachFileSuccessAction();
  initUI();
  initListeners();
  initActionBar();
  initBitmapOption();
  addActions();
  isNeedToScrollMessages=true;
  hideSmileLayout();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  rootView=getLayoutInflater().inflate(layoutResID,null);
  setContentView(rootView);
  imageUtils=new ImageUtils(this);
  loadAttachFileSuccessAction=new LoadAttachFileSuccessAction();
  initUI();
  initListeners();
  initActionBar();
  initBitmapOption();
  addActions();
  isNeedToScrollMessages=true;
  hideSmileLayout();
}",0.9741176470588236
114427,"@Override public void onClick(View view){
  view.startAnimation(AnimationUtils.loadAnimation(context,R.anim.chat_attached_file_click));
  new ReceiveImageFileTask(BaseDialogMessagesAdapter.this).execute(imageHelper,loadedImageBitmap,false);
}","@Override public void onClick(View view){
  view.startAnimation(AnimationUtils.loadAnimation(context,R.anim.chat_attached_file_click));
  new ReceiveImageFileTask(BaseDialogMessagesAdapter.this).execute(imageUtils,loadedImageBitmap,false);
}",0.9772256728778468
114428,"@Override public void onAbsolutePathExtFileReceived(String absolutePath){
  imageHelper.showFullImage(context,absolutePath);
}","@Override public void onAbsolutePathExtFileReceived(String absolutePath){
  imageUtils.showFullImage(context,absolutePath);
}",0.9641434262948207
114429,"private View.OnClickListener receiveImageFileOnClickListener(){
  return new View.OnClickListener(){
    @Override public void onClick(    View view){
      view.startAnimation(AnimationUtils.loadAnimation(context,R.anim.chat_attached_file_click));
      new ReceiveImageFileTask(BaseDialogMessagesAdapter.this).execute(imageHelper,loadedImageBitmap,false);
    }
  }
;
}","private View.OnClickListener receiveImageFileOnClickListener(){
  return new View.OnClickListener(){
    @Override public void onClick(    View view){
      view.startAnimation(AnimationUtils.loadAnimation(context,R.anim.chat_attached_file_click));
      new ReceiveImageFileTask(BaseDialogMessagesAdapter.this).execute(imageUtils,loadedImageBitmap,false);
    }
  }
;
}",0.9851551956815114
114430,"public BaseDialogMessagesAdapter(Context context,Cursor cursor){
  super(context,cursor,true);
  random=new Random();
  colorsMap=new HashMap<Integer,Integer>();
  imageHelper=new ImageHelper((android.app.Activity)context);
}","public BaseDialogMessagesAdapter(Context context,Cursor cursor){
  super(context,cursor,true);
  random=new Random();
  colorsMap=new HashMap<Integer,Integer>();
  imageUtils=new ImageUtils((android.app.Activity)context);
}",0.9508928571428572
114431,"@Override protected void onFileSelected(Uri originalUri){
  try {
    ParcelFileDescriptor descriptor=getContentResolver().openFileDescriptor(originalUri,""String_Node_Str"");
    Bitmap bitmap=BitmapFactory.decodeFileDescriptor(descriptor.getFileDescriptor(),null,bitmapOptions);
    new ReceiveImageFileTask(GroupDialogActivity.this).execute(imageHelper,bitmap,true);
  }
 catch (  FileNotFoundException e) {
    ErrorUtils.showError(this,e.getMessage());
  }
}","@Override protected void onFileSelected(Uri originalUri){
  try {
    ParcelFileDescriptor descriptor=getContentResolver().openFileDescriptor(originalUri,""String_Node_Str"");
    Bitmap bitmap=BitmapFactory.decodeFileDescriptor(descriptor.getFileDescriptor(),null,bitmapOptions);
    new ReceiveImageFileTask(GroupDialogActivity.this).execute(imageUtils,bitmap,true);
  }
 catch (  FileNotFoundException e) {
    ErrorUtils.showError(this,e.getMessage());
  }
}",0.988056460369164
114432,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == ImageCropperActivity.ACTIVITY_RESULT_CODE) {
    if (resultCode == RESULT_OK) {
      isNeedUpdateAvatar=true;
      String filePath=data.getStringExtra(QBServiceConsts.EXTRA_FILE_PATH);
      avatarBitmapCurrent=BitmapFactory.decodeFile(filePath);
      imageHelper.removeFile(filePath);
      avatarImageView.setImageBitmap(avatarBitmapCurrent);
      startAction();
    }
  }
 else   if (requestCode == ImageHelper.GALLERY_INTENT_CALLED) {
    if (resultCode == RESULT_OK) {
      Uri originalUri=data.getData();
      if (originalUri != null) {
        startCropActivity(originalUri);
      }
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == ImageCropperActivity.INTENT_RESULT_CODE) {
    if (resultCode == RESULT_OK) {
      isNeedUpdateAvatar=true;
      String filePath=data.getStringExtra(QBServiceConsts.EXTRA_FILE_PATH);
      avatarBitmapCurrent=BitmapFactory.decodeFile(filePath);
      FileUtils.removeFile(filePath);
      avatarImageView.setImageBitmap(avatarBitmapCurrent);
      startAction();
    }
  }
 else   if (requestCode == ImageUtils.GALLERY_INTENT_CALLED) {
    if (resultCode == RESULT_OK) {
      Uri originalUri=data.getData();
      if (originalUri != null) {
        startCropActivity(originalUri);
      }
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}",0.9627694317439582
114433,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_group_dialog_details);
  dialogId=(String)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG_ID);
  dialogCurrent=DatabaseManager.getDialogByDialogId(this,dialogId);
  groupDialog=new GroupDialog(dialogCurrent);
  imageHelper=new ImageHelper(this);
  initUI();
  initUIWithData();
  addActions();
  startLoadGroupDialog();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_group_dialog_details);
  dialogId=(String)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG_ID);
  dialogCurrent=DatabaseManager.getDialogByDialogId(this,dialogId);
  groupDialog=new GroupDialog(dialogCurrent);
  imageUtils=new ImageUtils(this);
  initUI();
  initUIWithData();
  addActions();
  startLoadGroupDialog();
}",0.9767441860465116
114434,"public void changeAvatarOnClick(View view){
  canPerformLogout.set(false);
  imageHelper.getImage();
}","public void changeAvatarOnClick(View view){
  canPerformLogout.set(false);
  imageUtils.getImage();
}",0.955665024630542
114435,"private void saveChanges(){
  if (!isUserDataCorrect()) {
    DialogUtils.showLong(this,getString(R.string.gdd_name_not_entered));
    return;
  }
  dialogCurrent.setName(groupNameCurrent);
  if (isNeedUpdateAvatar) {
    new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
  }
 else {
    startUpdatingGroupDialog(null);
  }
  showProgress();
}","private void saveChanges(){
  if (!isUserDataCorrect()) {
    DialogUtils.showLong(this,getString(R.string.gdd_name_not_entered));
    return;
  }
  dialogCurrent.setName(groupNameCurrent);
  if (isNeedUpdateAvatar) {
    new ReceiveImageFileTask(this).execute(imageUtils,avatarBitmapCurrent,true);
  }
 else {
    startUpdatingGroupDialog(null);
  }
  showProgress();
}",0.9851551956815114
114436,"@Override protected void onFileSelected(Uri originalUri){
  try {
    ParcelFileDescriptor descriptor=getContentResolver().openFileDescriptor(originalUri,""String_Node_Str"");
    Bitmap bitmap=BitmapFactory.decodeFileDescriptor(descriptor.getFileDescriptor(),null,bitmapOptions);
    new ReceiveImageFileTask(PrivateDialogActivity.this).execute(imageHelper,bitmap,true);
  }
 catch (  FileNotFoundException e) {
    ErrorUtils.showError(this,e.getMessage());
  }
}","@Override protected void onFileSelected(Uri originalUri){
  try {
    ParcelFileDescriptor descriptor=getContentResolver().openFileDescriptor(originalUri,""String_Node_Str"");
    Bitmap bitmap=BitmapFactory.decodeFileDescriptor(descriptor.getFileDescriptor(),null,bitmapOptions);
    new ReceiveImageFileTask(PrivateDialogActivity.this).execute(imageUtils,bitmap,true);
  }
 catch (  FileNotFoundException e) {
    ErrorUtils.showError(this,e.getMessage());
  }
}",0.988108108108108
114437,"private void initFields(){
  imageHelper=new ImageHelper(this);
  croppedImageBitmap=null;
  Uri originalUri=getIntent().getParcelableExtra(QBServiceConsts.EXTRA_FILE_PATH);
  defaultImageBitmap=imageHelper.getBitmap(originalUri);
  cropImageView.setImageBitmap(defaultImageBitmap);
  cropImageView.setAspectRatio(DEFAULT_ASPECT_RATIO_VALUES,DEFAULT_ASPECT_RATIO_VALUES);
}","private void initFields(){
  imageUtils=new ImageUtils(this);
  croppedImageBitmap=null;
  Uri originalUri=getIntent().getParcelableExtra(QBServiceConsts.EXTRA_FILE_PATH);
  defaultImageBitmap=imageUtils.getBitmap(originalUri);
  cropImageView.setImageBitmap(defaultImageBitmap);
  cropImageView.setAspectRatio(DEFAULT_ASPECT_RATIO_VALUES,DEFAULT_ASPECT_RATIO_VALUES);
}",0.5464333781965006
114438,"@Override protected byte[] doInBackground(Object[] params){
  byte[] byteArray=ImageHelper.getBytesBitmap(croppedImageBitmap);
  File file;
  try {
    file=imageHelper.createFile(byteArray);
    onCompressedBitmapReceived(file.getAbsolutePath());
  }
 catch (  IOException e) {
    ErrorUtils.logError(e);
  }
  return null;
}","@Override protected Object doInBackground(Object[] params){
  byte[] byteArray=ImageUtils.getBytesBitmap(croppedImageBitmap);
  File file=null;
  try {
    file=imageUtils.createFile(byteArray);
  }
 catch (  IOException e) {
    ErrorUtils.logError(e);
  }
  return file != null ? file.getAbsolutePath() : null;
}",0.6739469578783152
114439,"public static void start(Activity activity,Uri originalUri){
  Intent intent=new Intent(activity,ImageCropperActivity.class);
  intent.putExtra(QBServiceConsts.EXTRA_FILE_PATH,originalUri);
  activity.startActivityForResult(intent,ACTIVITY_RESULT_CODE);
}","public static void start(Activity activity,Uri originalUri){
  Intent intent=new Intent(activity,ImageCropperActivity.class);
  intent.putExtra(QBServiceConsts.EXTRA_FILE_PATH,originalUri);
  activity.startActivityForResult(intent,INTENT_RESULT_CODE);
}",0.9724409448818898
114440,"public static void updateMessageDeliveryStatus(Context context,String messageId,boolean isDelivered){
  ContentValues values=new ContentValues();
  String condition=MessageTable.Cols.ID + ""String_Node_Str"" + messageId+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(MessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    values.put(MessageTable.Cols.IS_DELIVERED,isDelivered);
    resolver.update(MessageTable.CONTENT_URI,values,condition,null);
    cursor.close();
  }
}","public static void updateMessageDeliveryStatus(Context context,String messageId,boolean isDelivered){
  Log.d(""String_Node_Str"",""String_Node_Str"" + messageId);
  ContentValues values=new ContentValues();
  String condition=MessageTable.Cols.ID + ""String_Node_Str"" + messageId+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(MessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    values.put(MessageTable.Cols.IS_DELIVERED,isDelivered);
    resolver.update(MessageTable.CONTENT_URI,values,condition,null);
    cursor.close();
  }
}",0.9523809523809524
114441,"protected void sendMessageDeliveryStatus(String packedId,String messageId,int friendId,int dialogTypeCode){
  QBPrivateChat chat=chatService.getPrivateChatManager().getChat(friendId);
  if (chat == null) {
    chat=chatService.getPrivateChatManager().createChat(friendId,null);
  }
  QBChatMessage chatMessage=ChatUtils.createNotificationMessageForDeliveryStatusRead(context,packedId,messageId,dialogTypeCode);
  try {
    chat.sendMessage(chatMessage);
  }
 catch (  Exception e) {
    ErrorUtils.logError(e);
  }
}","protected void sendMessageDeliveryStatus(String packedId,String messageId,int friendId,int dialogTypeCode){
  QBPrivateChat chat=chatService.getPrivateChatManager().getChat(friendId);
  if (chat == null) {
    chat=chatService.getPrivateChatManager().createChat(friendId,null);
  }
  QBChatMessage chatMessage=ChatUtils.createNotificationMessageForDeliveryStatusRead(context,packedId,messageId,dialogTypeCode);
  Log.d(""String_Node_Str"",""String_Node_Str"" + chatMessage.getPacketId() + ""String_Node_Str""+ chatMessage.getMessageId());
  try {
    chat.sendMessage(chatMessage);
  }
 catch (  Exception e) {
    ErrorUtils.logError(e);
  }
}",0.8942807625649913
114442,"protected void sendPrivateMessage(QBChatMessage chatMessage,int opponentId,String dialogId) throws QBResponseException {
  QBPrivateChat privateChat=privateChatManager.getChat(opponentId);
  if (privateChat == null) {
    throw new QBResponseException(""String_Node_Str"");
  }
  if (!TextUtils.isEmpty(dialogId)) {
    chatMessage.setProperty(ChatUtils.PROPERTY_DIALOG_ID,dialogId);
  }
  String error=null;
  try {
    privateChat.sendMessage(chatMessage);
  }
 catch (  XMPPException e) {
    error=context.getString(R.string.dlg_fail_send_msg);
  }
catch (  SmackException.NotConnectedException e) {
    error=context.getString(R.string.dlg_fail_connection);
  }
  if (error != null) {
    throw new QBResponseException(error);
  }
}","protected void sendPrivateMessage(QBChatMessage chatMessage,int opponentId,String dialogId) throws QBResponseException {
  QBPrivateChat privateChat=privateChatManager.getChat(opponentId);
  if (privateChat == null) {
    throw new QBResponseException(""String_Node_Str"");
  }
  if (!TextUtils.isEmpty(dialogId)) {
    chatMessage.setProperty(ChatUtils.PROPERTY_DIALOG_ID,dialogId);
  }
  String error=null;
  try {
    privateChat.sendMessage(chatMessage);
  }
 catch (  XMPPException e) {
    error=context.getString(R.string.dlg_fail_send_msg);
  }
catch (  SmackException.NotConnectedException e) {
    error=context.getString(R.string.dlg_fail_connection);
  }
  if (error != null) {
    throw new QBResponseException(error);
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + chatMessage.getPacketId() + ""String_Node_Str""+ chatMessage.getMessageId());
}",0.9233668341708544
114443,"private void messageDeliveryStatusReceived(QBChatMessage chatMessage){
  String messageId;
  String dialogTypeCodeString=chatMessage.getProperty(ChatUtils.PROPERTY_DIALOG_TYPE_CODE);
  boolean messageDelivered=true;
  if (QBDialogType.PRIVATE.equals(ChatUtils.parseDialogType(dialogTypeCodeString))) {
    messageId=chatMessage.getPacketId();
  }
 else {
    messageId=chatMessage.getProperty(ChatUtils.PROPERTY_MESSAGE_ID);
  }
  updateMessageStatusDelivered(messageId,messageDelivered);
}","private void messageDeliveryStatusReceived(QBChatMessage chatMessage){
  String messageId;
  boolean messageDelivered=true;
  messageId=chatMessage.getProperty(ChatUtils.PROPERTY_MESSAGE_ID);
  Log.d(""String_Node_Str"",""String_Node_Str"" + chatMessage.getPacketId() + ""String_Node_Str""+ messageId);
  updateMessageStatusDelivered(messageId,messageDelivered);
}",0.5047169811320755
114444,"@Override public void onReceivedNotification(String notificationType,QBChatMessage chatMessage){
  Log.d(""String_Node_Str"",""String_Node_Str"" + chatMessage.getPacketId());
  if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_CREATE_CHAT.equals(notificationType)) {
    createDialogByNotification(chatMessage);
  }
 else   if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_MESSAGE_DELIVERY_STATUS.equals(notificationType)) {
    messageDeliveryStatusReceived(chatMessage);
  }
 else {
    updateDialogByNotification(chatMessage);
  }
}","@Override public void onReceivedNotification(String notificationType,QBChatMessage chatMessage){
  if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_CREATE_CHAT.equals(notificationType)) {
    createDialogByNotification(chatMessage);
  }
 else   if (ChatUtils.PROPERTY_NOTIFICATION_TYPE_MESSAGE_DELIVERY_STATUS.equals(notificationType)) {
    messageDeliveryStatusReceived(chatMessage);
  }
 else {
    updateDialogByNotification(chatMessage);
  }
}",0.9224318658280922
114445,"@Override protected void onPrivateMessageReceived(QBPrivateChat privateChat,QBChatMessage chatMessage){
  Log.d(""String_Node_Str"",""String_Node_Str"" + chatMessage.getPacketId());
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  if (friend == null) {
    friend=new Friend();
    friend.setFullname(Consts.EMPTY_STRING + chatMessage.getSenderId());
  }
  String messageId;
  long time;
  String attachUrl;
  messageId=chatMessage.getProperty(ChatUtils.PROPERTY_MESSAGE_ID);
  time=Long.parseLong(chatMessage.getProperty(ChatUtils.PROPERTY_DATE_SENT));
  attachUrl=ChatUtils.getAttachUrlIfExists(chatMessage);
  String dialogId=chatMessage.getProperty(ChatUtils.PROPERTY_DIALOG_ID);
  String packetId=chatMessage.getPacketId();
  saveMessageToCache(new MessageCache(messageId,dialogId,packetId,chatMessage.getSenderId(),chatMessage.getBody(),attachUrl,time,false,false));
  notifyMessageReceived(chatMessage,friend,dialogId);
}","@Override protected void onPrivateMessageReceived(QBPrivateChat privateChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  if (friend == null) {
    friend=new Friend();
    friend.setFullname(Consts.EMPTY_STRING + chatMessage.getSenderId());
  }
  String messageId;
  long time;
  String attachUrl;
  messageId=chatMessage.getProperty(ChatUtils.PROPERTY_MESSAGE_ID);
  time=Long.parseLong(chatMessage.getProperty(ChatUtils.PROPERTY_DATE_SENT));
  attachUrl=ChatUtils.getAttachUrlIfExists(chatMessage);
  String dialogId=chatMessage.getProperty(ChatUtils.PROPERTY_DIALOG_ID);
  String packetId=chatMessage.getPacketId();
  saveMessageToCache(new MessageCache(messageId,dialogId,packetId,chatMessage.getSenderId(),chatMessage.getBody(),attachUrl,time,false,false));
  notifyMessageReceived(chatMessage,friend,dialogId);
  Log.d(""String_Node_Str"",""String_Node_Str"" + chatMessage.getPacketId() + ""String_Node_Str""+ messageId);
}",0.9081580297588508
114446,"@Override public void bindView(View view,final Context context,Cursor cursor){
  ViewHolder viewHolder=new ViewHolder();
  viewHolder.attachMessageRelativeLayout=(RelativeLayout)view.findViewById(R.id.attach_message_relativelayout);
  viewHolder.timeAttachMessageTextView=(TextView)view.findViewById(R.id.time_attach_message_textview);
  viewHolder.progressRelativeLayout=(RelativeLayout)view.findViewById(R.id.progress_relativelayout);
  viewHolder.textMessageView=view.findViewById(R.id.text_message_view);
  viewHolder.messageTextView=(EmojiTextView)view.findViewById(R.id.message_textview);
  viewHolder.attachImageView=(ImageView)view.findViewById(R.id.attach_imageview);
  viewHolder.timeTextMessageTextView=(TextView)view.findViewById(R.id.time_text_message_textview);
  viewHolder.verticalProgressBar=(ProgressBar)view.findViewById(R.id.vertical_progressbar);
  viewHolder.verticalProgressBar.setProgressDrawable(context.getResources().getDrawable(R.drawable.vertical_progressbar));
  viewHolder.centeredProgressBar=(ProgressBar)view.findViewById(R.id.centered_progressbar);
  MessageCache messageCache=DatabaseManager.getMessageCacheFromCursor(cursor);
  resetUI(viewHolder);
  if (!TextUtils.isEmpty(messageCache.getAttachUrl())) {
    setViewVisibility(viewHolder.progressRelativeLayout,View.VISIBLE);
    viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    int maskedBackgroundId=getMaskedImageBackgroundId(messageCache.getSenderId());
    displayAttachImage(messageCache.getAttachUrl(),viewHolder,maskedBackgroundId);
  }
 else {
    setViewVisibility(viewHolder.textMessageView,View.VISIBLE);
    viewHolder.messageTextView.setText(messageCache.getMessage());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    if (isOwnMessage(messageCache.getSenderId())) {
      viewHolder.messageDeliveryStatusImageView=(ImageView)view.findViewById(R.id.message_delivery_status_imageview);
      viewHolder.messageDeliveryStatusImageView.setImageResource(getMessageDeliveredIconId(messageCache.isDelivered()));
    }
  }
  boolean isRead=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.IS_READ)) > Consts.ZERO_INT_VALUE;
  if (!isRead) {
    messageCache.setRead(true);
    QBUpdateStatusMessageCommand.start(context,dialog,messageCache);
  }
}","@Override public void bindView(View view,final Context context,Cursor cursor){
  ViewHolder viewHolder=new ViewHolder();
  viewHolder.attachMessageRelativeLayout=(RelativeLayout)view.findViewById(R.id.attach_message_relativelayout);
  viewHolder.timeAttachMessageTextView=(TextView)view.findViewById(R.id.time_attach_message_textview);
  viewHolder.progressRelativeLayout=(RelativeLayout)view.findViewById(R.id.progress_relativelayout);
  viewHolder.textMessageView=view.findViewById(R.id.text_message_view);
  viewHolder.messageTextView=(EmojiTextView)view.findViewById(R.id.message_textview);
  viewHolder.attachImageView=(ImageView)view.findViewById(R.id.attach_imageview);
  viewHolder.timeTextMessageTextView=(TextView)view.findViewById(R.id.time_text_message_textview);
  viewHolder.verticalProgressBar=(ProgressBar)view.findViewById(R.id.vertical_progressbar);
  viewHolder.verticalProgressBar.setProgressDrawable(context.getResources().getDrawable(R.drawable.vertical_progressbar));
  viewHolder.centeredProgressBar=(ProgressBar)view.findViewById(R.id.centered_progressbar);
  MessageCache messageCache=DatabaseManager.getMessageCacheFromCursor(cursor);
  resetUI(viewHolder);
  if (!TextUtils.isEmpty(messageCache.getAttachUrl())) {
    setViewVisibility(viewHolder.progressRelativeLayout,View.VISIBLE);
    viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    int maskedBackgroundId=getMaskedImageBackgroundId(messageCache.getSenderId());
    displayAttachImage(messageCache.getAttachUrl(),viewHolder,maskedBackgroundId);
  }
 else {
    setViewVisibility(viewHolder.textMessageView,View.VISIBLE);
    viewHolder.messageTextView.setText(messageCache.getMessage());
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(messageCache.getTime()));
    if (isOwnMessage(messageCache.getSenderId())) {
      viewHolder.messageDeliveryStatusImageView=(ImageView)view.findViewById(R.id.message_delivery_status_imageview);
      viewHolder.messageDeliveryStatusImageView.setImageResource(getMessageDeliveredIconId(messageCache.isDelivered()));
    }
  }
  boolean isRead=cursor.getInt(cursor.getColumnIndex(MessageTable.Cols.IS_READ)) > Consts.ZERO_INT_VALUE;
  if (!isRead) {
    messageCache.setRead(true);
    Log.d(""String_Node_Str"",""String_Node_Str"" + messageCache.getId() + ""String_Node_Str""+ messageCache.getPacketId());
    QBUpdateStatusMessageCommand.start(context,dialog,messageCache);
  }
}",0.9753674187538812
114447,"@Override public void onDestroyActionMode(ActionMode mode){
  if (!closeActionMode) {
    updateCurrentUserData();
    updateUserData();
  }
  actionMode=null;
}","@Override public void onDestroyActionMode(ActionMode mode){
  if (!closeActionMode) {
    updateUserData();
    updateCurrentUserData();
  }
  actionMode=null;
}",0.9565217391304348
114448,"private void initUI(){
  groupNameEditText=_findViewById(R.id.name_textview);
  participantsTextView=_findViewById(R.id.participants_textview);
  friendsListView=_findViewById(R.id.chat_friends_listview);
  onlineParticipantsTextView=_findViewById(R.id.online_participants_textview);
}","private void initUI(){
  avatarImageView=_findViewById(R.id.avatar_imageview);
  avatarImageView.setOval(true);
  groupNameEditText=_findViewById(R.id.name_textview);
  participantsTextView=_findViewById(R.id.participants_textview);
  friendsListView=_findViewById(R.id.chat_friends_listview);
  onlineParticipantsTextView=_findViewById(R.id.online_participants_textview);
}",0.8649468892261002
114449,"private boolean isGroupDataChanged(String groupName){
  return !groupName.equals(groupNameOld);
}","private boolean isGroupDataChanged(String groupName){
  return !groupName.equals(groupNameOld) || isNeedUpdateAvatar;
}",0.8981481481481481
114450,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_group_dialog_details);
  dialogId=(String)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG_ID);
  groupDialog=new GroupDialog(DatabaseManager.getDialogByDialogId(this,dialogId));
  initUI();
  initUIWithData();
  addActions();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_group_dialog_details);
  dialogId=(String)getIntent().getExtras().getSerializable(QBServiceConsts.EXTRA_DIALOG_ID);
  groupDialog=new GroupDialog(DatabaseManager.getDialogByDialogId(this,dialogId));
  imageHelper=new ImageHelper(this);
  initUI();
  initUIWithData();
  addActions();
}",0.9535759096612296
114451,"public static void addEmojis(Context context,Spannable text,int emojiSize){
  int length=text.length();
  EmojiSpan[] oldSpans=text.getSpans(0,length,EmojiSpan.class);
  for (int i=0; i < oldSpans.length; i++) {
    text.removeSpan(oldSpans[i]);
  }
  int skip;
  for (int i=0; i < length; i+=skip) {
    skip=0;
    int icon=0;
    char c=text.charAt(i);
    if (isSoftBankEmoji(c)) {
      icon=getSoftbankEmojiResource(c);
      skip=icon == 0 ? 0 : 1;
    }
    if (icon == 0) {
      int unicode=Character.codePointAt(text,i);
      skip=Character.charCount(unicode);
      if (unicode > 0xff) {
        icon=getEmojiResource(context,unicode);
      }
      if (icon == 0 && i + skip < length) {
        int followUnicode=Character.codePointAt(text,i + skip);
        if (followUnicode == 0x20e3) {
          int followSkip=Character.charCount(followUnicode);
switch (unicode) {
case 0x0031:
            icon=R.drawable.emoji_0031;
          break;
case 0x0032:
        icon=R.drawable.emoji_0032;
      break;
case 0x0033:
    icon=R.drawable.emoji_0033;
  break;
case 0x0034:
icon=R.drawable.emoji_0034;
break;
case 0x0035:
icon=R.drawable.emoji_0035;
break;
case 0x0036:
icon=R.drawable.emoji_0036;
break;
case 0x0037:
icon=R.drawable.emoji_0037;
break;
case 0x0038:
icon=R.drawable.emoji_0038;
break;
case 0x0039:
icon=R.drawable.emoji_0039;
break;
case 0x0030:
icon=R.drawable.emoji_0030;
break;
case 0x0023:
icon=R.drawable.emoji_0023;
break;
default :
followSkip=0;
break;
}
skip+=followSkip;
}
 else {
int followSkip=Character.charCount(followUnicode);
switch (unicode) {
case 0x1f1ef:
icon=(followUnicode == 0x1f1f5) ? R.drawable.emoji_1f1ef_1f1f5 : 0;
break;
case 0x1f1fa:
icon=(followUnicode == 0x1f1f8) ? R.drawable.emoji_1f1fa_1f1f8 : 0;
break;
case 0x1f1eb:
icon=(followUnicode == 0x1f1f7) ? R.drawable.emoji_1f1eb_1f1f7 : 0;
break;
case 0x1f1e9:
icon=(followUnicode == 0x1f1ea) ? R.drawable.emoji_1f1e9_1f1ea : 0;
break;
case 0x1f1ee:
icon=(followUnicode == 0x1f1f9) ? R.drawable.emoji_1f1ee_1f1f9 : 0;
break;
case 0x1f1ec:
icon=(followUnicode == 0x1f1e7) ? R.drawable.emoji_1f1ec_1f1e7 : 0;
break;
case 0x1f1ea:
icon=(followUnicode == 0x1f1f8) ? R.drawable.emoji_1f1ea_1f1f8 : 0;
break;
case 0x1f1f7:
icon=(followUnicode == 0x1f1fa) ? R.drawable.emoji_1f1f7_1f1fa : 0;
break;
case 0x1f1e8:
icon=(followUnicode == 0x1f1f3) ? R.drawable.emoji_1f1e8_1f1f3 : 0;
break;
case 0x1f1f0:
icon=(followUnicode == 0x1f1f7) ? R.drawable.emoji_1f1f0_1f1f7 : 0;
break;
default :
followSkip=0;
break;
}
skip+=followSkip;
}
}
}
if (icon > 0) {
text.setSpan(new EmojiSpan(context,icon,emojiSize),i,i + skip,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
}
}
}","public static void addEmojis(Context context,Spannable text,int emojiSize){
  int length=text.length();
  if (length == Consts.ZERO_INT_VALUE) {
    return;
  }
  EmojiSpan[] oldSpans=text.getSpans(0,length,EmojiSpan.class);
  for (int i=0; i < oldSpans.length; i++) {
    text.removeSpan(oldSpans[i]);
  }
  int skip;
  for (int i=0; i < length; i+=skip) {
    skip=0;
    int icon=0;
    char c=text.charAt(i);
    if (isSoftBankEmoji(c)) {
      icon=getSoftbankEmojiResource(c);
      skip=icon == 0 ? 0 : 1;
    }
    if (icon == 0) {
      int unicode=Character.codePointAt(text,i);
      skip=Character.charCount(unicode);
      if (unicode > 0xff) {
        icon=getEmojiResource(context,unicode);
      }
      if (icon == 0 && i + skip < length) {
        int followUnicode=Character.codePointAt(text,i + skip);
        if (followUnicode == 0x20e3) {
          int followSkip=Character.charCount(followUnicode);
switch (unicode) {
case 0x0031:
            icon=R.drawable.emoji_0031;
          break;
case 0x0032:
        icon=R.drawable.emoji_0032;
      break;
case 0x0033:
    icon=R.drawable.emoji_0033;
  break;
case 0x0034:
icon=R.drawable.emoji_0034;
break;
case 0x0035:
icon=R.drawable.emoji_0035;
break;
case 0x0036:
icon=R.drawable.emoji_0036;
break;
case 0x0037:
icon=R.drawable.emoji_0037;
break;
case 0x0038:
icon=R.drawable.emoji_0038;
break;
case 0x0039:
icon=R.drawable.emoji_0039;
break;
case 0x0030:
icon=R.drawable.emoji_0030;
break;
case 0x0023:
icon=R.drawable.emoji_0023;
break;
default :
followSkip=0;
break;
}
skip+=followSkip;
}
 else {
int followSkip=Character.charCount(followUnicode);
switch (unicode) {
case 0x1f1ef:
icon=(followUnicode == 0x1f1f5) ? R.drawable.emoji_1f1ef_1f1f5 : 0;
break;
case 0x1f1fa:
icon=(followUnicode == 0x1f1f8) ? R.drawable.emoji_1f1fa_1f1f8 : 0;
break;
case 0x1f1eb:
icon=(followUnicode == 0x1f1f7) ? R.drawable.emoji_1f1eb_1f1f7 : 0;
break;
case 0x1f1e9:
icon=(followUnicode == 0x1f1ea) ? R.drawable.emoji_1f1e9_1f1ea : 0;
break;
case 0x1f1ee:
icon=(followUnicode == 0x1f1f9) ? R.drawable.emoji_1f1ee_1f1f9 : 0;
break;
case 0x1f1ec:
icon=(followUnicode == 0x1f1e7) ? R.drawable.emoji_1f1ec_1f1e7 : 0;
break;
case 0x1f1ea:
icon=(followUnicode == 0x1f1f8) ? R.drawable.emoji_1f1ea_1f1f8 : 0;
break;
case 0x1f1f7:
icon=(followUnicode == 0x1f1fa) ? R.drawable.emoji_1f1f7_1f1fa : 0;
break;
case 0x1f1e8:
icon=(followUnicode == 0x1f1f3) ? R.drawable.emoji_1f1e8_1f1f3 : 0;
break;
case 0x1f1f0:
icon=(followUnicode == 0x1f1f7) ? R.drawable.emoji_1f1f0_1f1f7 : 0;
break;
default :
followSkip=0;
break;
}
skip+=followSkip;
}
}
}
if (icon > 0) {
text.setSpan(new EmojiSpan(context,icon,emojiSize),i,i + skip,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
}
}
}",0.9893676552881924
114452,"@Override public void setText(CharSequence text,BufferType type){
  SpannableStringBuilder builder=new SpannableStringBuilder(text);
  EmojiCreator.addEmojis(getContext(),builder,emojiconSize);
  super.setText(builder,type);
}","@Override public void setText(CharSequence text,BufferType type){
  if (text == null) {
    super.setText(Consts.EMPTY_STRING);
    return;
  }
  SpannableStringBuilder builder=new SpannableStringBuilder(text);
  EmojiCreator.addEmojis(getContext(),builder,emojiconSize);
  super.setText(builder,type);
}",0.8528301886792453
114453,"private void initUI(){
  changeAvatarLinearLayout=_findViewById(R.id.change_avatar_linearlayout);
  avatarTextView=_findViewById(R.id.avatar_textview);
  avatarImageView=_findViewById(R.id.avatar_imageview);
  avatarImageView.setOval(true);
  emailLinearLayout=_findViewById(R.id.email_linearlayout);
  changeFullNameRelativeLayout=_findViewById(R.id.change_fullname_relativelayout);
  changePhoneRelativeLayout=_findViewById(R.id.change_phone_relativelayout);
  changeStatusRelativeLayout=_findViewById(R.id.change_status_relativelayout);
  emailTextView=_findViewById(R.id.email_textview);
  fullNameEditText=_findViewById(R.id.fullname_edittext);
  phoneEditText=_findViewById(R.id.phone_edittext);
  statusEditText=_findViewById(R.id.status_edittext);
}","private void initUI(){
  changeAvatarLinearLayout=_findViewById(R.id.change_avatar_linearlayout);
  avatarImageView=_findViewById(R.id.avatar_imageview);
  avatarImageView.setOval(true);
  emailLinearLayout=_findViewById(R.id.email_linearlayout);
  changeFullNameRelativeLayout=_findViewById(R.id.change_fullname_relativelayout);
  changePhoneRelativeLayout=_findViewById(R.id.change_phone_relativelayout);
  changeStatusRelativeLayout=_findViewById(R.id.change_status_relativelayout);
  emailTextView=_findViewById(R.id.email_textview);
  fullNameEditText=_findViewById(R.id.fullname_edittext);
  phoneEditText=_findViewById(R.id.phone_edittext);
  statusEditText=_findViewById(R.id.status_edittext);
}",0.963013698630137
114454,"private void resetUserData(){
  user.setFullName(fullnameOld);
  user.setPhone(phoneOld);
  user.setCustomData(statusOld);
}","private void resetUserData(){
  user.setFullName(fullnameOld);
  user.setPhone(phoneOld);
  user.setCustomData(statusOld);
  isNeedUpdateAvatar=false;
}",0.8985507246376812
114455,"private void updateOldUserData(){
  fullnameOld=fullNameEditText.getText().toString();
  phoneOld=phoneEditText.getText().toString();
  statusOld=statusEditText.getText().toString();
}","private void updateOldUserData(){
  fullnameOld=fullNameEditText.getText().toString();
  phoneOld=phoneEditText.getText().toString();
  statusOld=statusEditText.getText().toString();
  isNeedUpdateAvatar=false;
}",0.9292929292929292
114456,"public static ImageLoaderConfiguration getImageLoaderConfiguration(Context context){
  final int MEMORY_CACHE_LIMIT=2 * 1024 * 1024;
  final int THREAD_POOL_SIZE=5;
  final int COMPRESS_QUALITY=60;
  final int MAX_IMAGE_WIDTH_FOR_MEMORY_CACHE=300;
  final int MAX_IMAGE_HEIGHT_FOR_MEMORY_CACHE=800;
  ImageLoaderConfiguration imageLoaderConfiguration=new ImageLoaderConfiguration.Builder(context).memoryCacheExtraOptions(MAX_IMAGE_WIDTH_FOR_MEMORY_CACHE,MAX_IMAGE_HEIGHT_FOR_MEMORY_CACHE).discCacheExtraOptions(MAX_IMAGE_WIDTH_FOR_MEMORY_CACHE,MAX_IMAGE_HEIGHT_FOR_MEMORY_CACHE,Bitmap.CompressFormat.JPEG,COMPRESS_QUALITY,null).threadPoolSize(THREAD_POOL_SIZE).threadPriority(Thread.NORM_PRIORITY).denyCacheImageMultipleSizesInMemory().memoryCache(new UsingFreqLimitedMemoryCache(MEMORY_CACHE_LIMIT)).writeDebugLogs().defaultDisplayImageOptions(Consts.UIL_DEFAULT_DISPLAY_OPTIONS).imageDecoder(new SmartUriDecoder(context,new BaseImageDecoder(false))).denyCacheImageMultipleSizesInMemory().discCacheFileNameGenerator(new HashCodeFileNameGeneratorWithoutToken()).build();
  return imageLoaderConfiguration;
}","public static ImageLoaderConfiguration getImageLoaderConfiguration(Context context){
  final int MEMORY_CACHE_LIMIT=2 * 1024 * 1024;
  final int THREAD_POOL_SIZE=5;
  final int COMPRESS_QUALITY=60;
  final int MAX_IMAGE_WIDTH_FOR_MEMORY_CACHE=600;
  final int MAX_IMAGE_HEIGHT_FOR_MEMORY_CACHE=1200;
  ImageLoaderConfiguration imageLoaderConfiguration=new ImageLoaderConfiguration.Builder(context).memoryCacheExtraOptions(MAX_IMAGE_WIDTH_FOR_MEMORY_CACHE,MAX_IMAGE_HEIGHT_FOR_MEMORY_CACHE).discCacheExtraOptions(MAX_IMAGE_WIDTH_FOR_MEMORY_CACHE,MAX_IMAGE_HEIGHT_FOR_MEMORY_CACHE,Bitmap.CompressFormat.JPEG,COMPRESS_QUALITY,null).threadPoolSize(THREAD_POOL_SIZE).threadPriority(Thread.NORM_PRIORITY).denyCacheImageMultipleSizesInMemory().memoryCache(new UsingFreqLimitedMemoryCache(MEMORY_CACHE_LIMIT)).writeDebugLogs().defaultDisplayImageOptions(Consts.UIL_DEFAULT_DISPLAY_OPTIONS).imageDecoder(new SmartUriDecoder(context,new BaseImageDecoder(false))).denyCacheImageMultipleSizesInMemory().discCacheFileNameGenerator(new HashCodeFileNameGeneratorWithoutToken()).build();
  return imageLoaderConfiguration;
}",0.9977426636568848
114457,"@Override public void setText(CharSequence text,BufferType type){
  if (TextUtils.isEmpty(text)) {
    super.setText(Consts.EMPTY_STRING);
    return;
  }
  SpannableStringBuilder builder=new SpannableStringBuilder(text);
  EmojiCreator.addEmojis(getContext(),builder,emojiconSize);
  super.setText(builder,type);
}","@Override public void setText(CharSequence text,BufferType type){
  if (text == null) {
    super.setText(Consts.EMPTY_STRING);
    return;
  }
  SpannableStringBuilder builder=new SpannableStringBuilder(text);
  EmojiCreator.addEmojis(getContext(),builder,emojiconSize);
  super.setText(builder,type);
}",0.9434571890145396
114458,"public File getFileFromImageView(Bitmap origBitmap) throws IOException {
  int width=SizeUtility.dipToPixels(activity,Consts.CHAT_ATTACH_WIDTH);
  int origWidth=origBitmap.getWidth();
  int origHeight=origBitmap.getHeight();
  File tempFile=new File(activity.getCacheDir(),TEMP_FILE_NAME);
  tempFile.createNewFile();
  Bitmap bitmap=getScaledBitmap(origBitmap,origWidth,origHeight,width);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  bitmap.compress(Bitmap.CompressFormat.PNG,Consts.FULL_QUALITY,bos);
  byte[] bitmapData=bos.toByteArray();
  FileOutputStream fos=new FileOutputStream(tempFile);
  fos.write(bitmapData);
  fos.close();
  bos.close();
  return tempFile;
}","public File getFileFromImageView(Bitmap origBitmap) throws IOException {
  int width=SizeUtility.dipToPixels(activity,Consts.CHAT_ATTACH_WIDTH);
  File tempFile=new File(activity.getCacheDir(),TEMP_FILE_NAME);
  tempFile.createNewFile();
  Bitmap bitmap=getBitmap(origBitmap,width,width);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  bitmap.compress(Bitmap.CompressFormat.PNG,Consts.FULL_QUALITY,bos);
  byte[] bitmapData=bos.toByteArray();
  FileOutputStream fos=new FileOutputStream(tempFile);
  fos.write(bitmapData);
  fos.close();
  bos.close();
  return tempFile;
}",0.8890637293469709
114459,"public Bitmap generateMask(Bitmap mask,Bitmap original){
  int width=SizeUtility.dipToPixels(activity,Consts.CHAT_ATTACH_WIDTH);
  original=getScaledBitmap(original,original.getWidth(),original.getHeight(),width);
  Bitmap result=Bitmap.createBitmap(width,original.getHeight(),Bitmap.Config.ARGB_8888);
  mask=getNinepatch(resources,mask,width,original.getHeight());
  Canvas canvas=new Canvas(result);
  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);
  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
  canvas.drawBitmap(original,Consts.ZERO_INT_VALUE,Consts.ZERO_INT_VALUE,null);
  canvas.drawBitmap(mask,Consts.ZERO_INT_VALUE,Consts.ZERO_INT_VALUE,paint);
  paint.setXfermode(null);
  return result;
}","public Bitmap generateMask(Bitmap mask,Bitmap original){
  int width=SizeUtility.dipToPixels(activity,Consts.CHAT_ATTACH_WIDTH);
  original=getBitmap(original,width,width);
  Bitmap result=Bitmap.createBitmap(width,original.getHeight(),Bitmap.Config.ARGB_8888);
  mask=getNinepatch(resources,mask,width,original.getHeight());
  Canvas canvas=new Canvas(result);
  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);
  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
  canvas.drawBitmap(original,Consts.ZERO_INT_VALUE,Consts.ZERO_INT_VALUE,null);
  canvas.drawBitmap(mask,Consts.ZERO_INT_VALUE,Consts.ZERO_INT_VALUE,paint);
  paint.setXfermode(null);
  return result;
}",0.9408410548823948
114460,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_friend_details);
  canPerformLogout.set(true);
  int friendId=getIntent().getExtras().getInt(QBServiceConsts.EXTRA_FRIEND_ID);
  friendCursor=DatabaseManager.getFriendCursorById(this,friendId);
  friend=DatabaseManager.getFriendById(this,friendId);
  initUI();
  initListeners();
  initUIWithFriendsData();
  initBroadcastActionList();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_friend_details);
  canPerformLogout.set(true);
  int friendId=getIntent().getExtras().getInt(QBServiceConsts.EXTRA_FRIEND_ID);
  friendCursor=DatabaseManager.getFriendCursorById(this,friendId);
  friend=DatabaseManager.getFriendById(this,friendId);
  initUI();
  registerStatusChangingObserver();
  initUIWithFriendsData();
  initBroadcastActionList();
}",0.9549738219895288
114461,"@Override public void onCounterFriendsChanged(int valueCounter){
  if (actionMode != null) {
    if (valueCounter == Consts.ZERO_INT_VALUE) {
      closeActionModeWithRedirect(true);
      return;
    }
  }
 else {
    startAction();
  }
  countSelectedFriendsTextView.setText(valueCounter + Consts.EMPTY_STRING);
}","@Override public void onCounterFriendsChanged(int valueCounter){
  if (actionMode != null) {
    if (valueCounter == Consts.ZERO_INT_VALUE) {
      closeActionModeWithRedirect(true);
      return;
    }
  }
 else {
    startAction();
  }
  actionMode.setTitle(getResources().getString(R.string.ndl_ac_mode_title) + Consts.SPACE + valueCounter);
}",0.7776096822995462
114462,"private void startAction(){
  actionMode=startActionMode(new ActionModeCallback());
  View view=getLayoutInflater().inflate(getActionModeLayoutId(),null);
  countSelectedFriendsTextView=(TextView)view.findViewById(R.id.count_selected_friends_textview);
  actionMode.setCustomView(view);
}","private void startAction(){
  actionMode=startActionMode(new ActionModeCallback());
}",0.4557640750670241
114463,"public DialogsSelectableFriendsAdapter(Context context,Cursor cursor){
  super(context,cursor,true);
  selectedFriends=new ArrayList<Friend>();
  layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
}","public DialogsSelectableFriendsAdapter(Context context,Cursor cursor){
  super(context,cursor,true);
  selectedFriends=new ArrayList<Friend>();
  layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  sparseArrayCheckBoxes=new HashMap<Integer,Boolean>();
}",0.8943396226415095
114464,"@Override public void bindView(View view,Context context,Cursor cursor){
  final ViewHolder viewHolder=(ViewHolder)view.getTag();
  Friend friend=DatabaseManager.getFriendFromCursor(cursor);
  viewHolder.nameTextView.setText(friend.getFullname());
  viewHolder.statusMessageTextView.setText(friend.getStatus());
  viewHolder.nameTextView.setText(friend.getFullname());
  viewHolder.selectFriendCheckBox.setChecked(friend.isSelected());
  viewHolder.selectFriendCheckBox.setTag(friend);
  if (friend.isOnline()) {
    viewHolder.onlineImageView.setVisibility(View.VISIBLE);
  }
 else {
    viewHolder.onlineImageView.setVisibility(View.GONE);
  }
  viewHolder.selectFriendCheckBox.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      CheckBox checkBox=(CheckBox)view;
      Friend friend=(Friend)checkBox.getTag();
      friend.setSelected(checkBox.isChecked());
      notifyCounterChanged(checkBox.isChecked());
      if (checkBox.isChecked()) {
        selectedFriends.add(friend);
      }
 else       if (selectedFriends.contains(friend)) {
        selectedFriends.remove(friend);
      }
      viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(viewHolder.selectFriendCheckBox.isChecked()));
    }
  }
);
  String avatarUrl=getAvatarUrlForFriend(friend);
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
  viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(viewHolder.selectFriendCheckBox.isChecked()));
}","@Override public void bindView(View view,Context context,final Cursor cursor){
  final ViewHolder viewHolder=(ViewHolder)view.getTag();
  final Friend friend=DatabaseManager.getFriendFromCursor(cursor);
  viewHolder.nameTextView.setText(friend.getFullname());
  viewHolder.statusMessageTextView.setText(friend.getStatus());
  viewHolder.nameTextView.setText(friend.getFullname());
  if (friend.isOnline()) {
    viewHolder.onlineImageView.setVisibility(View.VISIBLE);
  }
 else {
    viewHolder.onlineImageView.setVisibility(View.GONE);
  }
  final int position=cursor.getPosition();
  viewHolder.selectFriendCheckBox.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      CheckBox checkBox=(CheckBox)view;
      sparseArrayCheckBoxes.put(position,checkBox.isChecked());
      friend.setSelected(checkBox.isChecked());
      notifyCounterChanged(checkBox.isChecked());
      if (checkBox.isChecked()) {
        selectedFriends.add(friend);
      }
 else       if (selectedFriends.contains(friend)) {
        selectedFriends.remove(friend);
      }
      viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(viewHolder.selectFriendCheckBox.isChecked()));
    }
  }
);
  boolean checked=sparseArrayCheckBoxes.get(position) == null ? false : sparseArrayCheckBoxes.get(position);
  viewHolder.selectFriendCheckBox.setChecked(checked);
  String avatarUrl=getAvatarUrlForFriend(friend);
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
  viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(checked));
}",0.584436551501453
114465,"public void onClick(View view){
  CheckBox checkBox=(CheckBox)view;
  Friend friend=(Friend)checkBox.getTag();
  friend.setSelected(checkBox.isChecked());
  notifyCounterChanged(checkBox.isChecked());
  if (checkBox.isChecked()) {
    selectedFriends.add(friend);
  }
 else   if (selectedFriends.contains(friend)) {
    selectedFriends.remove(friend);
  }
  viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(viewHolder.selectFriendCheckBox.isChecked()));
}","public void onClick(View view){
  CheckBox checkBox=(CheckBox)view;
  sparseArrayCheckBoxes.put(position,checkBox.isChecked());
  friend.setSelected(checkBox.isChecked());
  notifyCounterChanged(checkBox.isChecked());
  if (checkBox.isChecked()) {
    selectedFriends.add(friend);
  }
 else   if (selectedFriends.contains(friend)) {
    selectedFriends.remove(friend);
  }
  viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(viewHolder.selectFriendCheckBox.isChecked()));
}",0.9050051072522982
114466,"private void hideSmileLayout(){
  hideView(smilesLayout);
  chatEditText.switchSmileIcon();
}","private void hideSmileLayout(){
  hideView(smilesLayout);
  prepareChatEditText(true);
}",0.850828729281768
114467,"@Override public void onSmileClick(){
  int smilesLayoutHeight=getSmileLayoutSizeInPixels();
  if (isSmilesLayoutShowing()) {
    smilesAnimator.animateHeightFrom(smilesLayoutHeight,Consts.ZERO_INT_VALUE);
  }
 else {
    smilesAnimator.animateHeightFrom(Consts.ZERO_INT_VALUE,smilesLayoutHeight);
  }
}","@Override public void onSmileClick(){
  if (isSmilesLayoutShowing()) {
    hideSmileLayout();
  }
 else {
    KeyboardUtils.hideKeyboard(BaseDialogActivity.this);
    showSmileLayout();
  }
}",0.4979757085020243
114468,"public void initSmileWidgets(){
  chatEditText.setSmileClickListener(new OnSmileClickListener());
  chatEditText.setSwitchViewListener(this);
  FragmentStatePagerAdapter adapter=new SmilesTabFragmentAdapter(getSupportFragmentManager());
  smilesViewPager.setAdapter(adapter);
  smilesViewPager.setOffscreenPageLimit(1);
  smilesPagerIndicator.setViewPager(smilesViewPager);
  smilesAnimator=new HeightAnimator(chatEditText,smilesLayout);
}","public void initSmileWidgets(){
  chatEditText.setSmileClickListener(new OnSmileClickListener());
  chatEditText.setSwitchViewListener(this);
  FragmentStatePagerAdapter adapter=new SmilesTabFragmentAdapter(getSupportFragmentManager());
  smilesViewPager.setAdapter(adapter);
  smilesPagerIndicator.setViewPager(smilesViewPager);
}",0.7948051948051948
114469,"@Override public boolean onTouch(View v,MotionEvent event){
  if (event.getAction() != MotionEvent.ACTION_UP) {
    return false;
  }
  if (event.getX() > (getWidth() - getPaddingRight() - smileIcon.getIntrinsicWidth()) && smileClickListener != null) {
    switchSmileIcon();
    smileClickListener.onSmileClick();
  }
 else   if (switchViewListener != null) {
    switchViewListener.showLastListItem();
  }
  return false;
}","@Override public boolean onTouch(View v,MotionEvent event){
  if (event.getAction() != MotionEvent.ACTION_UP) {
    return false;
  }
  if (event.getX() > (getWidth() - getPaddingRight() - smileIcon.getIntrinsicWidth()) && smileClickListener != null) {
    smileClickListener.onSmileClick();
    return true;
  }
 else   if (switchViewListener != null) {
    switchViewListener.showLastListItem();
  }
  return false;
}",0.9075829383886256
114470,"private List<Integer> getSelectedUsersList(List<QBUser> realFriendsFacebookList,List<QBUser> realFriendsContactsList){
  List<Integer> userIdsList=new ArrayList<Integer>();
  if (!realFriendsFacebookList.isEmpty()) {
    userIdsList.addAll(FriendUtils.getFriendIdsList(realFriendsFacebookList));
  }
  if (!realFriendsContactsList.isEmpty()) {
    userIdsList.addAll(FriendUtils.getFriendIdsList(realFriendsContactsList));
  }
  return userIdsList;
}","private List<Integer> getSelectedUsersList(List<QBUser> realFriendsFacebookList,List<QBUser> realFriendsContactsList){
  List<Integer> userIdsList=new ArrayList<Integer>();
  if (realFriendsFacebookList != null && !realFriendsFacebookList.isEmpty()) {
    userIdsList.addAll(FriendUtils.getFriendIdsList(realFriendsFacebookList));
  }
  if (realFriendsContactsList != null && !realFriendsContactsList.isEmpty()) {
    userIdsList.addAll(FriendUtils.getFriendIdsList(realFriendsContactsList));
  }
  return userIdsList;
}",0.9278350515463918
114471,"public static List<InviteFriend> getContactsWithEmail(Context context){
  List<InviteFriend> friendsContactsList=new ArrayList<InviteFriend>();
  Uri uri=null;
  ContentResolver contentResolver=context.getContentResolver();
  String[] PROJECTION=new String[]{ContactsContract.RawContacts._ID,ContactsContract.Contacts.DISPLAY_NAME,ContactsContract.Contacts.PHOTO_ID,ContactsContract.CommonDataKinds.Email.DATA,ContactsContract.CommonDataKinds.Photo.CONTACT_ID};
  String order=""String_Node_Str"" + ContactsContract.Contacts.DISPLAY_NAME + ""String_Node_Str""+ ContactsContract.CommonDataKinds.Phone.CONTACT_ID+ ""String_Node_Str""+ ContactsContract.Contacts.DISPLAY_NAME+ ""String_Node_Str""+ ContactsContract.CommonDataKinds.Email.DATA+ ""String_Node_Str"";
  String filter=ContactsContract.CommonDataKinds.Email.DATA + ""String_Node_Str"";
  Cursor cursor=contentResolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,PROJECTION,filter,null,order);
  if (cursor != null) {
    cursor.moveToFirst();
    String id;
    String name;
    String email;
    do {
      name=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
      email=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA));
      id=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.CONTACT_ID));
      if (ContactsContract.Contacts.CONTENT_URI != null) {
        uri=ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,Long.parseLong(id));
        uri=Uri.withAppendedPath(uri,ContactsContract.Contacts.Photo.CONTENT_DIRECTORY);
      }
      friendsContactsList.add(new InviteFriend(email,name,null,InviteFriend.VIA_CONTACTS_TYPE,uri,false));
    }
 while (cursor.moveToNext());
    cursor.close();
  }
  return friendsContactsList;
}","public static List<InviteFriend> getContactsWithEmail(Context context){
  List<InviteFriend> friendsContactsList=new ArrayList<InviteFriend>();
  Uri uri=null;
  ContentResolver contentResolver=context.getContentResolver();
  String[] PROJECTION=new String[]{ContactsContract.RawContacts._ID,ContactsContract.Contacts.DISPLAY_NAME,ContactsContract.Contacts.PHOTO_ID,ContactsContract.CommonDataKinds.Email.DATA,ContactsContract.CommonDataKinds.Photo.CONTACT_ID};
  String order=""String_Node_Str"" + ContactsContract.Contacts.DISPLAY_NAME + ""String_Node_Str""+ ContactsContract.CommonDataKinds.Phone.CONTACT_ID+ ""String_Node_Str""+ ContactsContract.Contacts.DISPLAY_NAME+ ""String_Node_Str""+ ContactsContract.CommonDataKinds.Email.DATA+ ""String_Node_Str"";
  String filter=ContactsContract.CommonDataKinds.Email.DATA + ""String_Node_Str"";
  Cursor cursor=contentResolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,PROJECTION,filter,null,order);
  if (cursor != null && cursor.moveToFirst()) {
    String id;
    String name;
    String email;
    do {
      name=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
      email=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA));
      id=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.CONTACT_ID));
      if (ContactsContract.Contacts.CONTENT_URI != null) {
        uri=ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,Long.parseLong(id));
        uri=Uri.withAppendedPath(uri,ContactsContract.Contacts.Photo.CONTENT_DIRECTORY);
      }
      friendsContactsList.add(new InviteFriend(email,name,null,InviteFriend.VIA_CONTACTS_TYPE,uri,false));
    }
 while (cursor.moveToNext());
  }
  if (cursor != null) {
    cursor.close();
  }
  return friendsContactsList;
}",0.9786768726079824
114472,"public static void start(Context context,List<QBDialog> roomJidList){
  Intent intent=new Intent(QBServiceConsts.JOIN_GROUP_CHAT_ACTION,null,context,QBService.class);
  intent.putExtra(QBServiceConsts.EXTRA_ROOM_JID_LIST,new ArrayList<QBDialog>(roomJidList));
  context.startService(intent);
}","public static void start(Context context,ArrayList<QBDialog> dialogList){
  Intent intent=new Intent(QBServiceConsts.JOIN_GROUP_CHAT_ACTION,null,context,QBService.class);
  intent.putExtra(QBServiceConsts.EXTRA_ROOM_JID_LIST,dialogList);
  context.startService(intent);
}",0.9078014184397164
114473,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_change_password);
  resources=getResources();
  canPerformLogout.set(false);
  initUI();
  addActions();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_change_password);
  resources=getResources();
  canPerformLogout.set(false);
  initUI();
  addActions();
  user=AppSession.getSession().getUser();
}",0.918918918918919
114474,"public void changePasswordOnClickListener(View view){
  String oldPasswordText=oldPasswordEditText.getText().toString();
  String newPasswordText=newPasswordEditText.getText().toString();
  if (validationUtils.isValidChangePasswordData(oldPasswordText,newPasswordText)) {
    QBUser user=AppSession.getSession().getUser();
    user.setOldPassword(oldPasswordText);
    user.setPassword(newPasswordText);
    showProgress();
    QBChangePasswordCommand.start(this,user);
  }
}","public void changePasswordOnClickListener(View view){
  oldPasswordText=oldPasswordEditText.getText().toString();
  newPasswordText=newPasswordEditText.getText().toString();
  if (validationUtils.isValidChangePasswordData(oldPasswordText,newPasswordText)) {
    updatePasswords(oldPasswordText,newPasswordText);
    showProgress();
    QBChangePasswordCommand.start(this,user);
  }
}",0.682983682983683
114475,"private void addActions(){
  addAction(QBServiceConsts.CHANGE_PASSWORD_SUCCESS_ACTION,new ChangePasswordSuccessAction());
  addAction(QBServiceConsts.CHANGE_PASSWORD_FAIL_ACTION,failAction);
  updateBroadcastActionList();
}","private void addActions(){
  addAction(QBServiceConsts.CHANGE_PASSWORD_SUCCESS_ACTION,new ChangePasswordSuccessAction());
  addAction(QBServiceConsts.CHANGE_PASSWORD_FAIL_ACTION,new ChangePasswordFailAction());
  updateBroadcastActionList();
}",0.9527896995708156
114476,"@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  saveUserCredentials(user);
  hideProgress();
  clearFields();
  DialogUtils.showLong(ChangePasswordActivity.this,getString(R.string.dlg_password_changed));
}","@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  hideProgress();
  DialogUtils.showLong(ChangePasswordActivity.this,exception.getMessage());
  updatePasswords(oldPasswordText,oldPasswordText);
  clearFields();
}",0.4139130434782608
114477,"@Override public void onCounterFriendsChanged(int valueCounter){
  if (actionMode != null) {
    if (valueCounter == Consts.ZERO_INT_VALUE) {
      isNeedToCloseWithoutRedirect=true;
      actionMode.finish();
      return;
    }
  }
 else {
    startAction();
  }
  countSelectedFriendsTextView.setText(valueCounter + Consts.EMPTY_STRING);
}","@Override public void onCounterFriendsChanged(int valueCounter){
  if (actionMode != null) {
    if (valueCounter == Consts.ZERO_INT_VALUE) {
      closeActionModeWithRedirect(true);
      return;
    }
  }
 else {
    startAction();
  }
  countSelectedFriendsTextView.setText(valueCounter + Consts.EMPTY_STRING);
}",0.9010654490106544
114478,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (actionMode != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
    isNeedToCloseWithoutRedirect=true;
    actionMode.finish();
    return true;
  }
 else {
    isNeedToCloseWithoutRedirect=false;
  }
  return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (actionMode != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
    closeActionModeWithRedirect(true);
    return true;
  }
 else {
    isNeedToCloseWithoutRedirect=false;
  }
  return super.dispatchKeyEvent(event);
}",0.5642737896494157
114479,"private void tryLogin() throws XMPPException, IOException, SmackException {
  long startTime=new Date().getTime();
  long currentTime=startTime;
  while (!chatRestHelper.isLoggedIn() && (currentTime - startTime) < Consts.LOGIN_TIMEOUT) {
    currentTime=new Date().getTime();
    try {
      chatRestHelper.login(AppSession.getSession().getUser());
    }
 catch (    SmackException ignore) {
    }
  }
}","private void tryLogin() throws XMPPException, IOException, SmackException, QBResponseException {
  long startTime=new Date().getTime();
  long currentTime=startTime;
  while (!chatRestHelper.isLoggedIn() && (currentTime - startTime) < Consts.LOGIN_TIMEOUT) {
    currentTime=new Date().getTime();
    try {
      chatRestHelper.login(AppSession.getSession().getUser());
    }
 catch (    SmackException ignore) {
    }
  }
}",0.9746070133010882
114480,"public synchronized void login(QBUser user) throws XMPPException, IOException, SmackException {
  if (!QBChatService.isInitialized()) {
    QBChatService.init(context);
    chatService=QBChatService.getInstance();
    chatService.addConnectionListener(connectionListener);
  }
  if (!chatService.isLoggedIn() && user != null) {
    chatService.login(user);
    chatService.startAutoSendPresence(AUTO_PRESENCE_INTERVAL_IN_SECONDS);
  }
}","public synchronized void login(QBUser user) throws XMPPException, IOException, SmackException, QBResponseException {
  if (chatService != null) {
    logout();
    destroy();
  }
  if (!QBChatService.isInitialized()) {
    QBChatService.init(context);
    chatService=QBChatService.getInstance();
    chatService.addConnectionListener(connectionListener);
  }
  if (!chatService.isLoggedIn() && user != null) {
    chatService.login(user);
    chatService.startAutoSendPresence(AUTO_PRESENCE_INTERVAL_IN_SECONDS);
  }
}",0.913089005235602
114481,"@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  hideProgress();
  DialogUtils.showLong(ChangePasswordActivity.this,exception.getMessage());
  updatePasswords(oldPasswordText,oldPasswordText);
  clearFields();
}","@Override public void execute(Bundle bundle){
  Exception exception=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  hideProgress();
  DialogUtils.showLong(ChangePasswordActivity.this,exception.getMessage());
  updatePasswords(oldPasswordText,oldPasswordText);
  clearFieldNewPassword();
}",0.9800664451827242
114482,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_profile);
  useDoubleBackPressed=false;
  user=AppSession.getSession().getUser();
  imageHelper=new ImageHelper(this);
  initUI();
  initListeners();
  initUIWithUsersData();
  initBroadcastActionList();
  initTextChangedListeners();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_profile);
  useDoubleBackPressed=false;
  user=AppSession.getSession().getUser();
  imageHelper=new ImageHelper(this);
  initUI();
  initListeners();
  initUIWithUsersData();
  initBroadcastActionList();
  initTextChangedListeners();
  updateOldUserData();
}",0.9696169088507266
114483,"@Override protected Bundle perform(Bundle extras) throws Exception {
  ArrayList<String> friendsFacebookList=extras.getStringArrayList(QBServiceConsts.EXTRA_FRIENDS_FACEBOOK);
  ArrayList<String> friendsContactsList=extras.getStringArrayList(QBServiceConsts.EXTRA_FRIENDS_CONTACTS);
  Bundle params=new Bundle();
  QBPagedRequestBuilder requestBuilder=new QBPagedRequestBuilder();
  requestBuilder.setPage(Consts.FL_FRIENDS_PAGE_NUM);
  requestBuilder.setPerPage(Consts.FL_FRIENDS_PER_PAGE);
  List<QBUser> realFriendsFacebookList=QBUsers.getUsersByFacebookId(friendsFacebookList,requestBuilder,params);
  List<QBUser> realFriendsContactsList=QBUsers.getUsersByEmails(friendsContactsList,requestBuilder,params);
  List<Integer> realFriendsList=getSelectedUsersList(realFriendsFacebookList,realFriendsContactsList);
  for (  int userId : realFriendsList) {
    friendListHelper.inviteFriend(userId);
  }
  Bundle result=new Bundle();
  result.putSerializable(QBServiceConsts.EXTRA_FRIENDS,(java.io.Serializable)realFriendsList);
  return result;
}","@Override protected Bundle perform(Bundle extras) throws Exception {
  ArrayList<String> friendsFacebookList=extras.getStringArrayList(QBServiceConsts.EXTRA_FRIENDS_FACEBOOK);
  ArrayList<String> friendsContactsList=extras.getStringArrayList(QBServiceConsts.EXTRA_FRIENDS_CONTACTS);
  Bundle params=new Bundle();
  QBPagedRequestBuilder requestBuilder=new QBPagedRequestBuilder();
  requestBuilder.setPage(Consts.FL_FRIENDS_PAGE_NUM);
  requestBuilder.setPerPage(Consts.FL_FRIENDS_PER_PAGE);
  List<QBUser> realFriendsFacebookList=null;
  List<QBUser> realFriendsContactsList=null;
  if (!friendsFacebookList.isEmpty()) {
    realFriendsFacebookList=QBUsers.getUsersByFacebookId(friendsFacebookList,requestBuilder,params);
  }
  if (!friendsContactsList.isEmpty()) {
    realFriendsContactsList=QBUsers.getUsersByEmails(friendsContactsList,requestBuilder,params);
  }
  List<Integer> realFriendsList=getSelectedUsersList(realFriendsFacebookList,realFriendsContactsList);
  for (  int userId : realFriendsList) {
    friendListHelper.inviteFriend(userId);
  }
  Bundle result=new Bundle();
  result.putSerializable(QBServiceConsts.EXTRA_FRIENDS,(java.io.Serializable)realFriendsList);
  return result;
}",0.9199288256227758
114484,"private void getFacebookFriendsList(){
  Request.executeMyFriendsRequestAsync(Session.getActiveSession(),new Request.GraphUserListCallback(){
    @Override public void onCompleted(    List<com.facebook.model.GraphUser> users,    Response response){
      friendsFacebookList=new ArrayList<InviteFriend>();
      for (      com.facebook.model.GraphUser user : users) {
        friendsFacebookList.add(new InviteFriend(user.getId(),user.getName(),user.getLink(),InviteFriend.VIA_FACEBOOK_TYPE,null,false));
      }
      fiendsReceived();
    }
  }
);
}","private void getFacebookFriendsList(){
  Request.executeMyFriendsRequestAsync(Session.getActiveSession(),new Request.GraphUserListCallback(){
    @Override public void onCompleted(    List<com.facebook.model.GraphUser> users,    Response response){
      for (      com.facebook.model.GraphUser user : users) {
        friendsFacebookList.add(new InviteFriend(user.getId(),user.getName(),user.getLink(),InviteFriend.VIA_FACEBOOK_TYPE,null,false));
      }
      fiendsReceived();
    }
  }
);
}",0.9454545454545454
114485,"@Override public void onCompleted(List<com.facebook.model.GraphUser> users,Response response){
  friendsFacebookList=new ArrayList<InviteFriend>();
  for (  com.facebook.model.GraphUser user : users) {
    friendsFacebookList.add(new InviteFriend(user.getId(),user.getName(),user.getLink(),InviteFriend.VIA_FACEBOOK_TYPE,null,false));
  }
  fiendsReceived();
}","@Override public void onCompleted(List<com.facebook.model.GraphUser> users,Response response){
  for (  com.facebook.model.GraphUser user : users) {
    friendsFacebookList.add(new InviteFriend(user.getId(),user.getName(),user.getLink(),InviteFriend.VIA_FACEBOOK_TYPE,null,false));
  }
  fiendsReceived();
}",0.9205397301349324
114486,"private List<String> getIdsList(List<InviteFriend> friendsList){
  List<String> idsList=new ArrayList<String>();
  for (  InviteFriend friend : friendsList) {
    idsList.add(friend.getId());
  }
  return idsList;
}","private List<String> getIdsList(List<InviteFriend> friendsList){
  if (friendsList.isEmpty()) {
    return new ArrayList<String>();
  }
  List<String> idsList=new ArrayList<String>();
  for (  InviteFriend friend : friendsList) {
    idsList.add(friend.getId());
  }
  return idsList;
}",0.8582834331337326
114487,"public ImportFriends(Activity activity,FacebookHelper facebookHelper){
  this.activity=activity;
  this.facebookHelper=facebookHelper;
  this.facebookHelper.loginWithFacebook();
}","public ImportFriends(Activity activity,FacebookHelper facebookHelper){
  this.activity=activity;
  this.facebookHelper=facebookHelper;
  this.facebookHelper.loginWithFacebook();
  friendsFacebookList=new ArrayList<InviteFriend>();
  friendsContactsList=new ArrayList<InviteFriend>();
}",0.771551724137931
114488,"@Override public Bundle perform(Bundle extras) throws Exception {
  String socialProvider=(String)extras.getSerializable(QBServiceConsts.EXTRA_SOCIAL_PROVIDER);
  String accessToken=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN);
  String accessTokenSecret=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN_SECRET);
  QBUser user=authHelper.login(socialProvider,accessToken,accessTokenSecret);
  if (TextUtils.isEmpty(user.getWebsite())) {
    QBUser newUser=new QBUser();
    newUser.setId(user.getId());
    newUser.setPassword(user.getPassword());
    newUser.setWebsite(context.getString(R.string.inf_url_to_facebook_avatar,user.getFacebookId()));
    extras.putSerializable(QBServiceConsts.EXTRA_USER,newUser);
  }
 else {
    extras.putSerializable(QBServiceConsts.EXTRA_USER,user);
  }
  return extras;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  String socialProvider=(String)extras.getSerializable(QBServiceConsts.EXTRA_SOCIAL_PROVIDER);
  String accessToken=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN);
  String accessTokenSecret=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN_SECRET);
  QBUser user=authHelper.login(socialProvider,accessToken,accessTokenSecret);
  if (TextUtils.isEmpty(user.getWebsite())) {
    QBUser newUser=new QBUser();
    newUser.setId(user.getId());
    newUser.setPassword(user.getPassword());
    newUser.setWebsite(context.getString(R.string.inf_url_to_facebook_avatar,user.getFacebookId()));
    App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,false);
    extras.putSerializable(QBServiceConsts.EXTRA_USER,newUser);
  }
 else {
    App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
    extras.putSerializable(QBServiceConsts.EXTRA_USER,user);
  }
  return extras;
}",0.9025039957378796
114489,"@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  startMainActivity(user);
}","@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  startMainActivity(user);
}",0.7688311688311689
114490,"public void loginOnClickListener(View view){
  String userEmail=emailEditText.getText().toString();
  String userPassword=passwordEditText.getText().toString();
  if (validationUtils.isValidUserDate(userEmail,userPassword)) {
    login(userEmail,userPassword);
  }
}","public void loginOnClickListener(View view){
  String userEmail=emailEditText.getText().toString();
  String userPassword=passwordEditText.getText().toString();
  if (validationUtils.isValidUserDate(userEmail,userPassword)) {
    App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
    login(userEmail,userPassword);
  }
}",0.8539325842696629
114491,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  useDoubleBackPressed=true;
  initPrefValues();
  gsmHelper=new GSMHelper(this);
  initNavigationDrawer();
  if (!isImportInitialized && isSignUpInitialized) {
    showProgress();
    facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
    importFriends=new ImportFriends(MainActivity.this,facebookHelper);
    App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_SIGN_UP_INITIALIZED,false);
  }
  checkGCMRegistration();
  loadFriendsList();
  loadChatsDialogs();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  useDoubleBackPressed=true;
  initPrefValues();
  gsmHelper=new GSMHelper(this);
  initNavigationDrawer();
  if (!isImportInitialized) {
    showProgress();
    facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
    importFriends=new ImportFriends(MainActivity.this,facebookHelper);
    App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_SIGN_UP_INITIALIZED,false);
  }
  checkGCMRegistration();
  loadFriendsList();
  loadChatsDialogs();
}",0.9822940723633564
114492,"public void signUpOnClickListener(View view){
  String fullNameText=fullnameEditText.getText().toString();
  String emailText=emailEditText.getText().toString();
  String passwordText=passwordEditText.getText().toString();
  if (validationUtils.isValidUserDate(fullNameText,emailText,passwordText)) {
    qbUser.setFullName(fullNameText);
    qbUser.setEmail(emailText);
    qbUser.setPassword(passwordText);
    showProgress();
    if (isNeedUpdateAvatar) {
      new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
    }
 else {
      QBSignUpCommand.start(SignUpActivity.this,qbUser,null);
    }
  }
}","public void signUpOnClickListener(View view){
  String fullNameText=fullnameEditText.getText().toString();
  String emailText=emailEditText.getText().toString();
  String passwordText=passwordEditText.getText().toString();
  if (validationUtils.isValidUserDate(fullNameText,emailText,passwordText)) {
    qbUser.setFullName(fullNameText);
    qbUser.setEmail(emailText);
    qbUser.setPassword(passwordText);
    showProgress();
    if (isNeedUpdateAvatar) {
      new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
    }
 else {
      App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,false);
      QBSignUpCommand.start(SignUpActivity.this,qbUser,null);
    }
  }
}",0.930576070901034
114493,"public void onCompleted(Response response){
  FacebookRequestError error=response.getError();
  if (error != null) {
    Log.e(getString(R.string.facebook_exception),error);
    DialogUtils.showLong(getActivity(),getResources().getString(R.string.facebook_exception) + error);
  }
 else {
    DialogUtils.showLong(getActivity(),getResources().getString(R.string.dlg_success_posted_to_facebook));
  }
  baseActivity.hideProgress();
}","public void onCompleted(Response response){
  FacebookRequestError error=response.getError();
  if (error != null) {
    Log.e(getString(R.string.facebook_exception),error.toString());
    DialogUtils.showLong(getActivity(),getResources().getString(R.string.facebook_exception) + error);
  }
 else {
    DialogUtils.showLong(getActivity(),getResources().getString(R.string.dlg_success_posted_to_facebook));
  }
  baseActivity.hideProgress();
}",0.9874285714285714
114494,"private void tryLogin() throws XMPPException, IOException, SmackException {
  long startTime=new Date().getTime();
  long currentTime=startTime;
  while (!chatHelper.isLoggedIn() && (currentTime - startTime) < Consts.LOGIN_TIMEOUT) {
    currentTime=new Date().getTime();
    try {
      chatHelper.login(AppSession.getSession().getUser());
    }
 catch (    SmackException ignore) {
    }
  }
}","private void tryLogin() throws XMPPException, IOException, SmackException, QBResponseException {
  long startTime=new Date().getTime();
  long currentTime=startTime;
  while (!chatHelper.isLoggedIn() && (currentTime - startTime) < Consts.LOGIN_TIMEOUT) {
    currentTime=new Date().getTime();
    chatHelper.login(AppSession.getSession().getUser());
  }
}",0.8906666666666667
114495,"@Override public Bundle perform(Bundle extras) throws Exception {
  QBUser user=(QBUser)extras.getSerializable(QBServiceConsts.EXTRA_USER);
  user=authHelper.login(user);
  extras.putSerializable(QBServiceConsts.EXTRA_USER,user);
  AppSession.startSession(LoginType.EMAIL,user);
  return extras;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  QBUser user=(QBUser)extras.getSerializable(QBServiceConsts.EXTRA_USER);
  user=authHelper.login(user);
  extras.putSerializable(QBServiceConsts.EXTRA_USER,user);
  return extras;
}",0.910091743119266
114496,"@Override public Bundle perform(Bundle extras) throws Exception {
  String socialProvider=(String)extras.getSerializable(QBServiceConsts.EXTRA_SOCIAL_PROVIDER);
  String accessToken=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN);
  String accessTokenSecret=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN_SECRET);
  QBUser user=authHelper.login(socialProvider,accessToken,accessTokenSecret);
  if (TextUtils.isEmpty(user.getWebsite())) {
    QBUser newUser=new QBUser();
    newUser.setId(user.getId());
    newUser.setPassword(user.getPassword());
    newUser.setWebsite(context.getString(R.string.inf_url_to_facebook_avatar,user.getFacebookId()));
    extras.putSerializable(QBServiceConsts.EXTRA_USER,newUser);
    AppSession.startSession(LoginType.FACEBOOK,newUser);
  }
 else {
    extras.putSerializable(QBServiceConsts.EXTRA_USER,user);
    AppSession.startSession(LoginType.FACEBOOK,user);
  }
  return extras;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  String socialProvider=(String)extras.getSerializable(QBServiceConsts.EXTRA_SOCIAL_PROVIDER);
  String accessToken=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN);
  String accessTokenSecret=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN_SECRET);
  QBUser user=authHelper.login(socialProvider,accessToken,accessTokenSecret);
  if (TextUtils.isEmpty(user.getWebsite())) {
    QBUser newUser=new QBUser();
    newUser.setId(user.getId());
    newUser.setPassword(user.getPassword());
    newUser.setWebsite(context.getString(R.string.inf_url_to_facebook_avatar,user.getFacebookId()));
    extras.putSerializable(QBServiceConsts.EXTRA_USER,newUser);
  }
 else {
    extras.putSerializable(QBServiceConsts.EXTRA_USER,user);
  }
  return extras;
}",0.8509695290858725
114497,"public void logout() throws QBResponseException {
  AppSession activeSession=AppSession.getSession();
  if (activeSession != null) {
    activeSession.closeAndClear();
  }
  Session.getActiveSession().closeAndClearTokenInformation();
  QBAuth.deleteSession();
  user=null;
}","public void logout() throws QBResponseException {
  AppSession activeSession=AppSession.getSession();
  if (activeSession != null) {
    activeSession.closeAndClear();
  }
  Session.getActiveSession().closeAndClearTokenInformation();
  QBAuth.deleteSession();
}",0.9757009345794392
114498,"public QBUser login(String socialProvider,String accessToken,String accessTokenSecret) throws QBResponseException {
  QBSession session=QBAuth.createSession();
  user=QBUsers.signInUsingSocialProvider(socialProvider,accessToken,accessTokenSecret);
  user.setPassword(session.getToken());
  return user;
}","public QBUser login(String socialProvider,String accessToken,String accessTokenSecret) throws QBResponseException {
  QBUser user;
  QBSession session=QBAuth.createSession();
  user=QBUsers.signInUsingSocialProvider(socialProvider,accessToken,accessTokenSecret);
  user.setPassword(session.getToken());
  AppSession.startSession(LoginType.FACEBOOK,user);
  return user;
}",0.9007407407407408
114499,"public QBUser signup(QBUser user,File file) throws QBResponseException {
  QBAuth.createSession();
  String password=user.getPassword();
  user.setOldPassword(password);
  this.user=QBUsers.signUpSignInTask(user);
  if (null != file) {
    QBFile qbFile=QBContent.uploadFileTask(file,true,(String)null);
    this.user.setWebsite(qbFile.getPublicUrl());
    this.user=QBUsers.updateUser(user);
  }
  this.user.setPassword(password);
  return user;
}","public QBUser signup(QBUser inputUser,File file) throws QBResponseException {
  QBUser user;
  QBAuth.createSession();
  String password=inputUser.getPassword();
  inputUser.setOldPassword(password);
  user=QBUsers.signUpSignInTask(inputUser);
  if (null != file) {
    QBFile qbFile=QBContent.uploadFileTask(file,true,(String)null);
    user.setWebsite(qbFile.getPublicUrl());
    user=QBUsers.updateUser(inputUser);
  }
  user.setPassword(password);
  AppSession.startSession(LoginType.EMAIL,user);
  return inputUser;
}",0.8556701030927835
114500,"public synchronized void login(QBUser user) throws XMPPException, IOException, SmackException {
  if (!QBChatService.isInitialized()) {
    QBChatService.init(context);
    chatService=QBChatService.getInstance();
  }
  if (!chatService.isLoggedIn() && user != null) {
    chatService.login(user);
    chatService.startAutoSendPresence(AUTO_PRESENCE_INTERVAL_IN_SECONDS);
  }
}","public synchronized void login(QBUser user) throws XMPPException, IOException, SmackException, QBResponseException {
  if (chatService != null) {
    logout();
    destroy();
  }
  if (!QBChatService.isInitialized()) {
    QBChatService.init(context);
    chatService=QBChatService.getInstance();
  }
  if (user != null) {
    chatService.login(user);
    chatService.startAutoSendPresence(AUTO_PRESENCE_INTERVAL_IN_SECONDS);
  }
}",0.8613861386138614
114501,"@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  AppSession.startSession(LoginType.FACEBOOK,user);
  startMainActivity(user);
}","@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  startMainActivity(user);
}",0.8365019011406845
114502,"@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  AppSession.startSession(getCurrentLoginType(),user);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  MainActivity.start(SplashActivity.this);
  finish();
}","@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  MainActivity.start(SplashActivity.this);
  finish();
}",0.905982905982906
114503,"public BaseCursorAdapter(Context context,Cursor cursor,boolean autoRequery){
  super(context,cursor,autoRequery);
  this.context=context;
  resources=context.getResources();
  layoutInflater=LayoutInflater.from(context);
  currentUser=AppSession.getSession().getUser();
  currentLoginType=AppSession.getSession().getLoginType();
  imageHelper=new ImageHelper((android.app.Activity)context);
}","public BaseCursorAdapter(Context context,Cursor cursor,boolean autoRequery){
  super(context,cursor,autoRequery);
  this.context=context;
  resources=context.getResources();
  layoutInflater=LayoutInflater.from(context);
  currentUser=AppSession.getSession().getUser();
  currentLoginType=AppSession.getSession().getLoginType();
}",0.9141274238227148
114504,"public BaseDialogMessagesAdapter(Context context,Cursor cursor){
  super(context,cursor,true);
  random=new Random();
  colorsMap=new HashMap<Integer,Integer>();
}","public BaseDialogMessagesAdapter(Context context,Cursor cursor){
  super(context,cursor,true);
  random=new Random();
  colorsMap=new HashMap<Integer,Integer>();
  imageHelper=new ImageHelper((android.app.Activity)context);
}",0.8402061855670103
114505,"public static Bitmap generateMask(Context context,Bitmap mask,Bitmap original){
  int width=SizeUtility.dipToPixels(context,Consts.CHAT_ATTACH_WIDTH);
  int height=SizeUtility.dipToPixels(context,Consts.CHAT_ATTACH_HEIGHT);
  original=ImageHelper.getScaledBitmap(original,original.getWidth(),original.getHeight(),width);
  Bitmap result=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
  mask=getNinepatch(context.getResources(),mask,width,height);
  Canvas canvas=new Canvas(result);
  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);
  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
  canvas.drawBitmap(original,Consts.ZERO_INT_VALUE,Consts.ZERO_INT_VALUE,null);
  canvas.drawBitmap(mask,Consts.ZERO_INT_VALUE,Consts.ZERO_INT_VALUE,paint);
  paint.setXfermode(null);
  return result;
}","public static Bitmap generateMask(Context context,Bitmap mask,Bitmap original){
  int width=SizeUtility.dipToPixels(context,Consts.CHAT_ATTACH_WIDTH);
  original=ImageHelper.getScaledBitmap(original,original.getWidth(),original.getHeight(),width);
  Bitmap result=Bitmap.createBitmap(width,original.getHeight(),Bitmap.Config.ARGB_8888);
  mask=getNinepatch(context.getResources(),mask,width,original.getHeight());
  Canvas canvas=new Canvas(result);
  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);
  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
  canvas.drawBitmap(original,Consts.ZERO_INT_VALUE,Consts.ZERO_INT_VALUE,null);
  canvas.drawBitmap(mask,Consts.ZERO_INT_VALUE,Consts.ZERO_INT_VALUE,paint);
  paint.setXfermode(null);
  return result;
}",0.7530006317119393
114506,"public static Bitmap getScaledBitmap(Bitmap bitmapOrg,int width,int height,int preferredWidth){
  int newWidth=preferredWidth;
  int newHeight=preferredWidth;
  float scaleWidth=((float)newWidth) / width;
  float scaleHeight=((float)newHeight) / height;
  Matrix matrix=new Matrix();
  matrix.postScale(scaleWidth,scaleHeight);
  Bitmap resizedBitmap=Bitmap.createBitmap(bitmapOrg,Consts.ZERO_INT_VALUE,Consts.ZERO_INT_VALUE,width,height,matrix,true);
  return resizedBitmap;
}","public static Bitmap getScaledBitmap(Bitmap bitmapOrg,int width,int height,int preferredWidth){
  float scaleValue=((float)preferredWidth) / width;
  Matrix matrix=new Matrix();
  matrix.postScale(scaleValue,scaleValue);
  Bitmap resizedBitmap=Bitmap.createBitmap(bitmapOrg,Consts.ZERO_INT_VALUE,Consts.ZERO_INT_VALUE,width,height,matrix,true);
  return resizedBitmap;
}",0.6847697756788665
114507,"public synchronized void login(QBUser user) throws XMPPException, IOException, SmackException {
  if (!QBChatService.isInitialized()) {
    QBChatService.init(context);
    chatService=QBChatService.getInstance();
  }
  if (!chatService.isLoggedIn() && user != null) {
    chatService.login(user);
    chatService.startAutoSendPresence(AUTO_PRESENCE_INTERVAL_IN_SECONDS);
  }
}","public synchronized void login(QBUser user) throws XMPPException, IOException, SmackException {
  if (!QBChatService.isInitialized()) {
    QBChatService.init(context);
    chatService=QBChatService.getInstance();
    chatService.addConnectionListener(connectionListener);
  }
  if (!chatService.isLoggedIn() && user != null) {
    chatService.login(user);
    chatService.startAutoSendPresence(AUTO_PRESENCE_INTERVAL_IN_SECONDS);
  }
}",0.9274292742927428
114508,"private void fillFriendOnlineStatus(Friend friend){
  QBPresence presence=roster.getPresence(friend.getId());
  if (presence.getType() == QBPresence.Type.online) {
    friend.setOnline(true);
  }
 else {
    friend.setOnline(false);
  }
}","private void fillFriendOnlineStatus(Friend friend){
  QBPresence presence=roster.getPresence(friend.getId());
  if (presence == null) {
    return;
  }
  if (presence.getType() == QBPresence.Type.online) {
    friend.setOnline(true);
  }
 else {
    friend.setOnline(false);
  }
}",0.918918918918919
114509,"@Override public void presenceChanged(QBPresence presence){
  Friend friend=DatabaseManager.getFriendById(context,presence.getUserId());
  fillFriendOnlineStatus(friend);
  fillFriendStatus(friend);
  DatabaseManager.saveFriend(context,friend);
  notifyFriendStatusChanged(friend);
}","@Override public void presenceChanged(QBPresence presence){
  Friend friend=DatabaseManager.getFriendById(context,presence.getUserId());
  if (friend == null) {
    ErrorUtils.logError(TAG,""String_Node_Str"" + friend.getId());
    return;
  }
  fillFriendOnlineStatus(friend);
  fillFriendStatus(friend);
  DatabaseManager.saveFriend(context,friend);
  notifyFriendStatusChanged(friend);
}",0.8435171385991058
114510,"public static void start(Context context,String message,QBFile file){
  Intent intent=new Intent(QBServiceConsts.SEND_GROUP_MESSAGE_ACTION,null,context,QBService.class);
  intent.putExtra(QBServiceConsts.EXTRA_CHAT_MESSAGE,message);
  intent.putExtra(QBServiceConsts.EXTRA_QBFILE,file);
  context.startService(intent);
}","public static void start(Context context,String roomJidId,String message,QBFile file){
  Intent intent=new Intent(QBServiceConsts.SEND_GROUP_MESSAGE_ACTION,null,context,QBService.class);
  intent.putExtra(QBServiceConsts.EXTRA_ROOM_JID,roomJidId);
  intent.putExtra(QBServiceConsts.EXTRA_CHAT_MESSAGE,message);
  intent.putExtra(QBServiceConsts.EXTRA_QBFILE,file);
  context.startService(intent);
}",0.8913649025069638
114511,"@Override protected Bundle perform(Bundle extras) throws Exception {
  String message=extras.getString(QBServiceConsts.EXTRA_CHAT_MESSAGE);
  QBFile file=(QBFile)extras.getSerializable(QBServiceConsts.EXTRA_QBFILE);
  if (file == null) {
    chatHelper.sendGroupMessage(message);
  }
 else {
    chatHelper.sendGroupMessageWithAttachImage(file);
  }
  return null;
}","@Override protected Bundle perform(Bundle extras) throws Exception {
  String roomJidId=extras.getString(QBServiceConsts.EXTRA_ROOM_JID);
  String message=extras.getString(QBServiceConsts.EXTRA_CHAT_MESSAGE);
  QBFile file=(QBFile)extras.getSerializable(QBServiceConsts.EXTRA_QBFILE);
  if (file == null) {
    chatHelper.sendGroupMessage(roomJidId,message);
  }
 else {
    chatHelper.sendGroupMessageWithAttachImage(roomJidId,file);
  }
  return null;
}",0.8745432399512789
114512,"public void sendGroupMessage(String message) throws Exception {
  QBChatMessage chatMessage=getQBChatMessage(message);
  sendRoomMessage(chatMessage);
}","public void sendGroupMessage(String roomJidId,String message) throws Exception {
  roomChat=roomChatManager.getRoom(roomJidId);
  if (roomChat == null) {
    return;
  }
  QBChatMessage chatMessage=getQBChatMessage(message);
  sendRoomMessage(chatMessage);
}",0.7414634146341463
114513,"public synchronized void login(QBUser user) throws XMPPException, IOException, SmackException {
  if (!QBChatService.isInitialized()) {
    QBChatService.init(context);
    QBChatService.setDefaultPacketReplyTimeout(Consts.DEFAULT_PACKET_REPLY_TIMEOUT);
    chatService=QBChatService.getInstance();
  }
  if (!chatService.isLoggedIn() && user != null) {
    chatService.login(user);
    chatService.startAutoSendPresence(AUTO_PRESENCE_INTERVAL_IN_SECONDS);
    this.user=user;
  }
}","public synchronized void login(QBUser user) throws XMPPException, IOException, SmackException {
  if (!QBChatService.isInitialized()) {
    QBChatService.init(context);
    chatService=QBChatService.getInstance();
  }
  if (!chatService.isLoggedIn() && user != null) {
    chatService.login(user);
    chatService.startAutoSendPresence(AUTO_PRESENCE_INTERVAL_IN_SECONDS);
    this.user=user;
  }
}",0.9032992036405004
114514,"public void sendGroupMessageWithAttachImage(QBFile file) throws Exception {
  QBChatMessage chatMessage=getQBChatMessageWithImage(file);
  sendRoomMessage(chatMessage);
}","public void sendGroupMessageWithAttachImage(String roomJidId,QBFile file) throws Exception {
  roomChat=roomChatManager.getRoom(roomJidId);
  if (roomChat == null) {
    return;
  }
  QBChatMessage chatMessage=getQBChatMessageWithImage(file);
  sendRoomMessage(chatMessage);
}",0.7623318385650224
114515,"@Override protected void onFileLoaded(QBFile file){
  QBSendGroupDialogMessageCommand.start(GroupDialogActivity.this,null,file);
}","@Override protected void onFileLoaded(QBFile file){
  QBSendGroupDialogMessageCommand.start(GroupDialogActivity.this,chatJidId,null,file);
}",0.9629629629629628
114516,"public void sendMessageOnClick(View view){
  QBSendGroupDialogMessageCommand.start(this,messageEditText.getText().toString(),null);
  messageEditText.setText(Consts.EMPTY_STRING);
  scrollListView();
}","public void sendMessageOnClick(View view){
  QBSendGroupDialogMessageCommand.start(this,chatJidId,messageEditText.getText().toString(),null);
  messageEditText.setText(Consts.EMPTY_STRING);
  scrollListView();
}",0.9757281553398058
114517,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getIntent().hasExtra(EXTRA_ROOM_JID)) {
    chatJidId=getIntent().getStringExtra(EXTRA_ROOM_JID);
  }
  initListView();
  registerForContextMenu(messagesListView);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getIntent().hasExtra(EXTRA_ROOM_JID)) {
    chatJidId=getIntent().getStringExtra(EXTRA_ROOM_JID);
  }
  initListView();
  startLoadDialogMessages();
  registerForContextMenu(messagesListView);
}",0.9486725663716814
114518,"private void updateChatData(){
  dialog=DatabaseManager.getDialogByRoomJidId(this,chatJidId);
  groupName=dialog.getName();
  startLoadDialogMessages();
  updateActionBar();
}","private void updateChatData(){
  dialog=DatabaseManager.getDialogByRoomJidId(this,chatJidId);
  groupName=dialog.getName();
  updateActionBar();
}",0.909657320872274
114519,"@Override public void bindView(View view,final Context context,Cursor cursor){
  final ViewHolder viewHolder=(ViewHolder)view.getTag();
  int senderId=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.SENDER_ID));
  String body=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.BODY));
  String attachUrl=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ATTACH_FILE_ID));
  long time=cursor.getLong(cursor.getColumnIndex(DialogMessageTable.Cols.TIME));
  boolean isOwnMessage=isOwnMessage(senderId);
  viewHolder.attachMessageRelativeLayout.setVisibility(View.GONE);
  if (!TextUtils.isEmpty(attachUrl)) {
    viewHolder.timeAttachMessageTextView.setText(DateUtils.longToMessageDate(time));
    viewHolder.textMessageLinearLayout.setVisibility(View.GONE);
    viewHolder.progressRelativeLayout.setVisibility(View.VISIBLE);
    displayAttachImage(attachUrl,viewHolder.attachImageView,viewHolder.progressRelativeLayout,viewHolder.attachMessageRelativeLayout,viewHolder.verticalProgressBar,viewHolder.centeredProgressBar,isOwnMessage);
  }
 else {
    viewHolder.timeTextMessageTextView.setText(DateUtils.longToMessageDate(time));
    viewHolder.textMessageLinearLayout.setVisibility(View.VISIBLE);
    viewHolder.attachImageView.setVisibility(View.GONE);
    viewHolder.messageTextView.setText(body);
  }
  boolean isRead=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.IS_READ)) > Consts.ZERO_INT_VALUE;
  if (!isRead) {
    String messageId=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ID));
    QBUpdateStatusMessageCommand.start(context,messageId,true);
  }
}","@Override public void bindView(View view,final Context context,Cursor cursor){
  attachMessageRelativeLayout=(RelativeLayout)view.findViewById(R.id.attach_message_relativelayout);
  timeAttachMessageTextView=(TextView)view.findViewById(R.id.time_attach_message_textview);
  progressRelativeLayout=(RelativeLayout)view.findViewById(R.id.progress_relativelayout);
  textMessageLinearLayout=(LinearLayout)view.findViewById(R.id.text_message_linearlayout);
  messageTextView=(ChatTextView)view.findViewById(R.id.message_textview);
  attachImageView=(ImageView)view.findViewById(R.id.attach_imageview);
  timeTextMessageTextView=(TextView)view.findViewById(R.id.time_text_message_textview);
  verticalProgressBar=(ProgressBar)view.findViewById(R.id.vertical_progressbar);
  verticalProgressBar.setProgressDrawable(context.getResources().getDrawable(R.drawable.vertical_progressbar));
  centeredProgressBar=(ProgressBar)view.findViewById(R.id.centered_progressbar);
  int senderId=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.SENDER_ID));
  String body=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.BODY));
  String attachUrl=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ATTACH_FILE_ID));
  long time=cursor.getLong(cursor.getColumnIndex(DialogMessageTable.Cols.TIME));
  boolean isOwnMessage=isOwnMessage(senderId);
  attachMessageRelativeLayout.setVisibility(View.GONE);
  if (!TextUtils.isEmpty(attachUrl)) {
    timeAttachMessageTextView.setText(DateUtils.longToMessageDate(time));
    textMessageLinearLayout.setVisibility(View.GONE);
    progressRelativeLayout.setVisibility(View.VISIBLE);
    displayAttachImage(attachUrl,attachImageView,progressRelativeLayout,attachMessageRelativeLayout,verticalProgressBar,centeredProgressBar,isOwnMessage);
  }
 else {
    timeTextMessageTextView.setText(DateUtils.longToMessageDate(time));
    textMessageLinearLayout.setVisibility(View.VISIBLE);
    attachImageView.setVisibility(View.GONE);
    messageTextView.setText(body);
  }
  boolean isRead=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.IS_READ)) > Consts.ZERO_INT_VALUE;
  if (!isRead) {
    String messageId=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ID));
    QBUpdateStatusMessageCommand.start(context,messageId,true);
  }
}",0.7305054610109221
114520,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  View view;
  ViewHolder viewHolder=new ViewHolder();
  int senderId=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.SENDER_ID));
  if (isOwnMessage(senderId)) {
    view=layoutInflater.inflate(R.layout.list_item_dialog_own_message,null,true);
  }
 else {
    view=layoutInflater.inflate(R.layout.list_item_private_dialog_opponent_message,null,true);
  }
  viewHolder.attachMessageRelativeLayout=(RelativeLayout)view.findViewById(R.id.attach_message_relativelayout);
  viewHolder.timeAttachMessageTextView=(TextView)view.findViewById(R.id.time_attach_message_textview);
  viewHolder.progressRelativeLayout=(RelativeLayout)view.findViewById(R.id.progress_relativelayout);
  viewHolder.textMessageLinearLayout=(LinearLayout)view.findViewById(R.id.text_message_linearlayout);
  viewHolder.messageTextView=(ChatTextView)view.findViewById(R.id.message_textview);
  viewHolder.attachImageView=(ImageView)view.findViewById(R.id.attach_imageview);
  viewHolder.timeTextMessageTextView=(TextView)view.findViewById(R.id.time_text_message_textview);
  viewHolder.verticalProgressBar=(ProgressBar)view.findViewById(R.id.vertical_progressbar);
  viewHolder.verticalProgressBar.setProgressDrawable(context.getResources().getDrawable(R.drawable.vertical_progressbar));
  viewHolder.centeredProgressBar=(ProgressBar)view.findViewById(R.id.centered_progressbar);
  view.setTag(viewHolder);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  View view;
  int senderId=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.SENDER_ID));
  if (isOwnMessage(senderId)) {
    view=layoutInflater.inflate(R.layout.list_item_dialog_own_message,null,true);
  }
 else {
    view=layoutInflater.inflate(R.layout.list_item_private_dialog_opponent_message,null,true);
  }
  return view;
}",0.4311251314405888
114521,"private void initUI(){
  feedbackDescriptionEditText=_findViewById(R.id.feedback_description_edittext);
}","private void initUI(){
  actionBar.setHomeButtonEnabled(true);
  actionBar.setDisplayHomeAsUpEnabled(true);
  feedbackDescriptionEditText=_findViewById(R.id.feedback_description_edittext);
}",0.711864406779661
114522,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_feedback,container,false);
  initUI(view);
  initListeners();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_feedback,container,false);
  initUI(view);
  return view;
}",0.907865168539326
114523,"public static QBDialog createTempPrivateDialogByRoomJidId(Context context,String roomJidId,String lastMessage,long dateSent,int lastSenderId){
  QBDialog dialog=new QBDialog();
  dialog.setRoomJid(roomJidId);
  Friend opponentFriend=getFriendById(context,Integer.parseInt(roomJidId));
  if (opponentFriend == null) {
    opponentFriend=new Friend();
    opponentFriend.setId(Integer.parseInt(roomJidId));
    opponentFriend.setFullname(roomJidId);
  }
  dialog.setName(opponentFriend.getFullname());
  ArrayList<Integer> occupantsIdsList=ChatUtils.getOccupantsIdsListForCreatePrivateDialog(opponentFriend.getId());
  dialog.setOccupantsIds(occupantsIdsList);
  dialog.setType(QBDialogType.PRIVATE);
  dialog.setLastMessage(lastMessage);
  dialog.setLastMessageDateSent(dateSent);
  dialog.setUnreadMessageCount(Consts.ZERO_INT_VALUE);
  dialog.setLastMessageUserId(lastSenderId);
  saveDialog(context,dialog,roomJidId);
  return dialog;
}","public static QBDialog createTempPrivateDialogByRoomJidId(Context context,String roomJidId,String lastMessage,long dateSent,int lastSenderId){
  QBDialog dialog=new QBDialog();
  dialog.setRoomJid(roomJidId);
  Friend opponentFriend=DatabaseManager.getFriendById(context,Integer.parseInt(roomJidId));
  if (opponentFriend == null) {
    opponentFriend=new Friend();
    opponentFriend.setId(Integer.parseInt(roomJidId));
    opponentFriend.setFullname(roomJidId);
  }
  dialog.setName(opponentFriend.getFullname());
  ArrayList<Integer> occupantsIdsList=ChatUtils.getOccupantsIdsListForCreatePrivateDialog(opponentFriend.getId());
  dialog.setOccupantsIds(occupantsIdsList);
  dialog.setType(QBDialogType.PRIVATE);
  dialog.setLastMessage(lastMessage);
  dialog.setLastMessageDateSent(dateSent);
  dialog.setUnreadMessageCount(Consts.ZERO_INT_VALUE);
  dialog.setLastMessageUserId(lastSenderId);
  DatabaseManager.saveDialog(context,dialog,roomJidId);
  return dialog;
}",0.9832285115303984
114524,"private void initStartLoadDialogMessages(){
  startLoadDialogMessages(dialog,chatJidId,Consts.ZERO_LONG_VALUE);
}","private void initStartLoadDialogMessages(){
  if (dialog != null) {
    startLoadDialogMessages(dialog,chatJidId,Consts.ZERO_LONG_VALUE);
  }
}",0.8828125
114525,"@Override public void onResume(){
  super.onResume();
  if (isFriendsListLoaded) {
    checkVisibilityEmptyLabel();
  }
}","@Override public void onResume(){
  super.onResume();
  if (isFriendsListLoaded && !isNeedToHideSearchView) {
    checkVisibilityEmptyLabel();
  }
}",0.8996282527881041
114526,"public static QBDialog parseDialogFromMessage(QBMessage chatMessage,String lastMessage,long dateSent){
  final int COUNT_START_VALUE=1;
  String dialogId=chatMessage.getProperty(PROPERTY_DIALOG_ID);
  String roomJid=chatMessage.getProperty(PROPERTY_ROOM_JID);
  String occupantsIds=chatMessage.getProperty(PROPERTY_OCCUPANTS_IDS);
  String dialogName=chatMessage.getProperty(PROPERTY_ROOM_NAME);
  String dialogTypeCode=chatMessage.getProperty(PROPERTY_DIALOG_TYPE_CODE);
  QBDialog dialog=new QBDialog(dialogId);
  dialog.setRoomJid(roomJid);
  dialog.setOccupantsIds(getOccupantsIdsListFromString(occupantsIds));
  dialog.setName(dialogName);
  dialog.setType(parseByCode(Integer.parseInt(dialogTypeCode)));
  dialog.setLastMessage(lastMessage);
  dialog.setLastMessageDateSent(dateSent);
  dialog.setUnreadMessageCount(COUNT_START_VALUE);
  return dialog;
}","public static QBDialog parseDialogFromMessage(QBMessage chatMessage,String lastMessage,long dateSent){
  String dialogId=chatMessage.getProperty(PROPERTY_DIALOG_ID);
  String roomJid=chatMessage.getProperty(PROPERTY_ROOM_JID);
  String occupantsIds=chatMessage.getProperty(PROPERTY_OCCUPANTS_IDS);
  String dialogName=chatMessage.getProperty(PROPERTY_ROOM_NAME);
  String dialogTypeCode=chatMessage.getProperty(PROPERTY_DIALOG_TYPE_CODE);
  QBDialog dialog=new QBDialog(dialogId);
  dialog.setRoomJid(roomJid);
  dialog.setOccupantsIds(getOccupantsIdsListFromString(occupantsIds));
  dialog.setName(dialogName);
  dialog.setType(parseByCode(Integer.parseInt(dialogTypeCode)));
  dialog.setLastMessage(lastMessage);
  dialog.setLastMessageDateSent(dateSent);
  dialog.setUnreadMessageCount(Consts.ZERO_INT_VALUE);
  return dialog;
}",0.1537551744529864
114527,"@Override public void onTextChanged(CharSequence charSequence,int start,int before,int count){
  super.onTextChanged(charSequence,start,before,count);
  emailEditText.setError(null);
}","@Override public void onTextChanged(CharSequence charSequence,int start,int before,int count){
  super.onTextChanged(charSequence,start,before,count);
  clearErrors();
}",0.9348441926345608
114528,"public void loginOnClickListener(View view){
  String userEmail=emailEditText.getText().toString();
  String userPassword=passwordEditText.getText().toString();
  boolean isEmailEntered=!TextUtils.isEmpty(userEmail);
  boolean isPasswordEntered=!TextUtils.isEmpty(userPassword);
  if (isEmailEntered && isPasswordEntered) {
    login(userEmail,userPassword);
  }
 else {
    DialogUtils.showLong(LoginActivity.this,getString(R.string.dlg_not_all_fields_entered));
  }
}","public void loginOnClickListener(View view){
  String userEmail=emailEditText.getText().toString();
  String userPassword=passwordEditText.getText().toString();
  if (isValidUserDate(userEmail,userPassword)) {
    login(userEmail,userPassword);
  }
}",0.4784422809457579
114529,"private void initListeners(){
  emailEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      emailEditText.setError(null);
    }
  }
);
}","private void initListeners(){
  emailEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      clearErrors();
    }
  }
);
  passwordEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      clearErrors();
    }
  }
);
}",0.6540600667408232
114530,"private void clearErrors(){
  fullnameEditText.setError(null);
  emailEditText.setError(null);
}","private void clearErrors(){
  fullnameEditText.setError(null);
  emailEditText.setError(null);
  passwordEditText.setError(null);
}",0.8458149779735683
114531,"public void signUpOnClickListener(View view){
  String fullNameText=fullnameEditText.getText().toString();
  String emailText=emailEditText.getText().toString();
  String passwordText=passwordEditText.getText().toString();
  boolean isFullNameEntered=!TextUtils.isEmpty(fullNameText);
  boolean isEmailEntered=!TextUtils.isEmpty(emailText);
  boolean isPasswordEntered=!TextUtils.isEmpty(passwordText);
  if (isFullNameEntered && isEmailEntered && isPasswordEntered) {
    qbUser.setFullName(fullNameText);
    qbUser.setEmail(emailText);
    qbUser.setPassword(passwordText);
    showProgress();
    if (isNeedUpdateAvatar) {
      new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
    }
 else {
      QBSignUpCommand.start(SignUpActivity.this,qbUser,null);
    }
  }
 else {
    DialogUtils.showLong(SignUpActivity.this,getString(R.string.dlg_not_all_fields_entered));
  }
}","public void signUpOnClickListener(View view){
  String fullNameText=fullnameEditText.getText().toString();
  String emailText=emailEditText.getText().toString();
  String passwordText=passwordEditText.getText().toString();
  if (isValidUserDate(fullNameText,emailText,passwordText)) {
    qbUser.setFullName(fullNameText);
    qbUser.setEmail(emailText);
    qbUser.setPassword(passwordText);
    showProgress();
    if (isNeedUpdateAvatar) {
      new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
    }
 else {
      QBSignUpCommand.start(SignUpActivity.this,qbUser,null);
    }
  }
}",0.7444005270092227
114532,"private void setErrors(String errors){
  emailEditText.setError(errors);
  fullnameEditText.setError(errors);
}","private void setErrors(boolean isFullNameEntered,boolean isEmailEntered,boolean isPasswordEntered){
  fullnameEditText.setError(isFullNameEntered ? null : getString(R.string.dlg_not_fullname_field_entered));
  emailEditText.setError(isEmailEntered ? null : getString(R.string.dlg_not_email_field_entered));
  passwordEditText.setError(isPasswordEntered ? null : getString(R.string.dlg_not_password_field_entered));
}",0.2808349146110057
114533,"private void initListeners(){
  emailEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      clearErrors();
    }
  }
);
  fullnameEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      clearErrors();
    }
  }
);
}","private void initListeners(){
  emailEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      clearErrors();
    }
  }
);
  fullnameEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      clearErrors();
    }
  }
);
  passwordEditText.addTextChangedListener(new SimpleTextWatcher(){
    @Override public void onTextChanged(    CharSequence charSequence,    int start,    int before,    int count){
      super.onTextChanged(charSequence,start,before,count);
      clearErrors();
    }
  }
);
}",0.807799442896936
114534,"public List<QBHistoryMessage> getDialogMessages(QBDialog dialog,String roomJidId,long lastDateLoad) throws QBResponseException {
  Bundle bundle=new Bundle();
  QBCustomObjectRequestBuilder customObjectRequestBuilder=new QBCustomObjectRequestBuilder();
  customObjectRequestBuilder.setPagesLimit(Consts.DIALOG_MESSAGES_PER_PAGE);
  if (lastDateLoad != Consts.ZERO_LONG_VALUE) {
    customObjectRequestBuilder.gt(com.quickblox.internal.module.chat.Consts.MESSAGE_DATE_SENT,lastDateLoad);
  }
  List<QBHistoryMessage> dialogMessagesList=QBChatService.getDialogMessages(dialog,customObjectRequestBuilder,bundle);
  if (dialogMessagesList != null) {
    boolean isPrivate=QBDialogType.PRIVATE.equals(dialog.getType());
    saveChatMessagesToCache(dialogMessagesList,roomJidId,isPrivate);
  }
  return dialogMessagesList;
}","public List<QBHistoryMessage> getDialogMessages(QBDialog dialog,String roomJidId,long lastDateLoad) throws QBResponseException {
  Bundle bundle=new Bundle();
  QBCustomObjectRequestBuilder customObjectRequestBuilder=new QBCustomObjectRequestBuilder();
  customObjectRequestBuilder.setPagesLimit(Consts.DIALOG_MESSAGES_PER_PAGE);
  if (lastDateLoad != Consts.ZERO_LONG_VALUE) {
    customObjectRequestBuilder.gt(com.quickblox.internal.module.chat.Consts.MESSAGE_DATE_SENT,lastDateLoad);
  }
  List<QBHistoryMessage> dialogMessagesList=QBChatService.getDialogMessages(dialog,customObjectRequestBuilder,bundle);
  boolean isPrivate=QBDialogType.PRIVATE.equals(dialog.getType());
  if (dialogMessagesList != null) {
    deleteMessagesByRoomJidId(roomJidId);
    saveChatMessagesToCache(dialogMessagesList,roomJidId,isPrivate);
  }
  return dialogMessagesList;
}",0.9307875894988068
114535,"private void startLoadDialogMessages(){
  if (messagesAdapter.isEmpty()) {
    startLoadDialogMessages(dialog,chatJidId,Consts.ZERO_LONG_VALUE);
  }
 else {
    startLoadDialogMessages(dialog,chatJidId,dialog.getLastMessageDateSent());
  }
}","private void startLoadDialogMessages(){
  startLoadDialogMessages(dialog,chatJidId,Consts.ZERO_LONG_VALUE);
}",0.6228571428571429
114536,"private void initStartLoadDialogMessages(){
  if (dialog != null && messagesAdapter.isEmpty()) {
    startLoadDialogMessages(dialog,chatJidId,Consts.ZERO_LONG_VALUE);
  }
 else   if (dialog != null && !messagesAdapter.isEmpty()) {
    startLoadDialogMessages(dialog,chatJidId,dialog.getLastMessageDateSent());
  }
}","private void initStartLoadDialogMessages(){
  startLoadDialogMessages(dialog,chatJidId,Consts.ZERO_LONG_VALUE);
}",0.5280373831775701
114537,"public static QBDialog parseDialogFromMessage(QBMessage chatMessage,String lastMessage,long dateSent){
  String dialogId=chatMessage.getProperty(PROPERTY_DIALOG_ID);
  String roomJid=chatMessage.getProperty(PROPERTY_ROOM_JID);
  String occupantsIds=chatMessage.getProperty(PROPERTY_OCCUPANTS_IDS);
  String dialogName=chatMessage.getProperty(PROPERTY_ROOM_NAME);
  String dialogTypeCode=chatMessage.getProperty(PROPERTY_DIALOG_TYPE_CODE);
  QBDialog dialog=new QBDialog(dialogId);
  dialog.setRoomJid(roomJid);
  dialog.setOccupantsIds(getOccupantsIdsListFromString(occupantsIds));
  dialog.setName(dialogName);
  dialog.setType(parseByCode(Integer.parseInt(dialogTypeCode)));
  dialog.setLastMessage(lastMessage);
  dialog.setLastMessageDateSent(dateSent);
  dialog.setUnreadMessageCount(Consts.ZERO_INT_VALUE);
  return dialog;
}","public static QBDialog parseDialogFromMessage(QBMessage chatMessage,String lastMessage,long dateSent){
  final int COUNT_START_VALUE=1;
  String dialogId=chatMessage.getProperty(PROPERTY_DIALOG_ID);
  String roomJid=chatMessage.getProperty(PROPERTY_ROOM_JID);
  String occupantsIds=chatMessage.getProperty(PROPERTY_OCCUPANTS_IDS);
  String dialogName=chatMessage.getProperty(PROPERTY_ROOM_NAME);
  String dialogTypeCode=chatMessage.getProperty(PROPERTY_DIALOG_TYPE_CODE);
  QBDialog dialog=new QBDialog(dialogId);
  dialog.setRoomJid(roomJid);
  dialog.setOccupantsIds(getOccupantsIdsListFromString(occupantsIds));
  dialog.setName(dialogName);
  dialog.setType(parseByCode(Integer.parseInt(dialogTypeCode)));
  dialog.setLastMessage(lastMessage);
  dialog.setLastMessageDateSent(dateSent);
  dialog.setUnreadMessageCount(COUNT_START_VALUE);
  return dialog;
}",0.1490242460082791
114538,"@Override public void onResume(){
  Crouton.cancelAllCroutons();
  checkVisibilityEmptyLabel();
  super.onResume();
}","@Override public void onResume(){
  Crouton.cancelAllCroutons();
  if (isChatsListLoaded) {
    checkVisibilityEmptyLabel();
  }
  super.onResume();
}",0.8764044943820225
114539,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_dialogs_list,container,false);
  initUI(view);
  initListeners();
  initChatsDialogs();
  Crouton.cancelAllCroutons();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_dialogs_list,container,false);
  initUI(view);
  initListeners();
  initChatsDialogs();
  Crouton.cancelAllCroutons();
  addActions();
  return view;
}",0.9730639730639732
114540,"@Override public boolean onMenuItemActionCollapse(MenuItem item){
  state=State.FRIENDS_LIST;
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
  if (isHideSearchView) {
    isHideSearchView=false;
    friendsListAdapter.setSearchCharacters(null);
    friendsListAdapter.setFilterQueryProvider(null);
    friendsListView.removeFooterView(globalSearchLayout);
    friendsListView.removeHeaderView(friendsListViewTitle);
    positionCounter--;
    initFriendsList();
  }
  return true;
}","@Override public boolean onMenuItemActionCollapse(MenuItem item){
  state=State.FRIENDS_LIST;
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
  if (isNeedToHideSearchView) {
    isNeedToHideSearchView=false;
    friendsListAdapter.setSearchCharacters(null);
    friendsListAdapter.setFilterQueryProvider(null);
    friendsListView.removeFooterView(globalSearchLayout);
    friendsListView.removeHeaderView(friendsListViewTitle);
    positionCounter--;
    initFriendsList();
  }
  return true;
}",0.988095238095238
114541,"private void initFriendsList(){
  if (friendsCursor != null && !friendsCursor.isClosed()) {
    friendsCursor.close();
  }
  friendsCursor=getAllFriends();
  friendsListAdapter=new FriendsListCursorAdapter(baseActivity,friendsCursor);
  friendsListView.setAdapter(friendsListAdapter);
  friendsListView.setSelector(R.drawable.list_item_background_selector);
  friendsListView.setOnItemClickListener(this);
  if (isFriendsListLoaded) {
    checkVisibilityEmptyLabel();
  }
}","private void initFriendsList(){
  if (friendsCursor != null && !friendsCursor.isClosed()) {
    friendsCursor.close();
  }
  friendsCursor=getAllFriends();
  friendsListAdapter=new FriendsListCursorAdapter(baseActivity,friendsCursor);
  friendsListView.setAdapter(friendsListAdapter);
  friendsListView.setSelector(R.drawable.list_item_background_selector);
  friendsListView.setOnItemClickListener(this);
  friendsListAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      if (state.equals(State.GLOBAL_LIST) && isNeedToHideSearchView) {
        checkVisibilityEmptyLabel();
      }
    }
  }
);
  if (isFriendsListLoaded) {
    checkVisibilityEmptyLabel();
  }
}",0.7423363711681856
114542,"@Override public boolean onMenuItemActionExpand(MenuItem item){
  isHideSearchView=true;
  emptyListTextView.setVisibility(View.GONE);
  return true;
}","@Override public boolean onMenuItemActionExpand(MenuItem item){
  isNeedToHideSearchView=true;
  emptyListTextView.setVisibility(View.GONE);
  return true;
}",0.9805194805194806
114543,"@Override public boolean onQueryTextChange(String newText){
  constraint=newText;
  friendsListAdapter.setFilterQueryProvider(this);
  if (state == State.FRIENDS_LIST && isHideSearchView) {
    friendsListAdapter.getFilter().filter(newText);
    friendsListAdapter.setSearchCharacters(newText);
  }
 else   if (state == State.GLOBAL_LIST) {
    startUsersListLoader(newText);
  }
  return true;
}","@Override public boolean onQueryTextChange(String newText){
  constraint=newText;
  friendsListAdapter.setFilterQueryProvider(this);
  if (state == State.FRIENDS_LIST && isNeedToHideSearchView) {
    friendsListAdapter.getFilter().filter(newText);
    friendsListAdapter.setSearchCharacters(newText);
  }
 else   if (state == State.GLOBAL_LIST) {
    startUsersListLoader(newText);
  }
  return true;
}",0.9924812030075189
114544,"@Override protected void onResume(){
  super.onResume();
  gsmHelper.checkPlayServices();
  addActions();
}","@Override protected void onResume(){
  super.onResume();
  gsmHelper.checkPlayServices();
}",0.9191919191919192
114545,"public static void saveChatMessages(Context context,List<QBHistoryMessage> messagesList,String roomJidId,boolean isPrivate){
  for (  QBHistoryMessage historyMessage : messagesList) {
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    String attachURL;
    if (TextUtils.isEmpty(message)) {
      attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    }
 else {
      attachURL=Consts.EMPTY_STRING;
    }
    if (TextUtils.isEmpty(message) && TextUtils.isEmpty(attachURL)) {
      message=getMessageForNotification(context,senderId);
    }
    DialogMessageCache dialogMessageCache=new DialogMessageCache(roomJidId,senderId,message,attachURL,historyMessage.getDateSent(),true);
    saveChatMessage(context,dialogMessageCache);
  }
}","public static void saveChatMessages(Context context,List<QBHistoryMessage> messagesList,String roomJidId,boolean isPrivate){
  for (  QBHistoryMessage historyMessage : messagesList) {
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    String attachURL;
    if (TextUtils.isEmpty(message)) {
      attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    }
 else {
      attachURL=Consts.EMPTY_STRING;
    }
    DialogMessageCache dialogMessageCache=new DialogMessageCache(roomJidId,senderId,message,attachURL,historyMessage.getDateSent(),true);
    saveChatMessage(context,dialogMessageCache);
  }
}",0.6883910386965377
114546,"private void notifyFriendAboutInvitation(QBDialog dialog,Integer friendId) throws XMPPException, SmackException {
  long time=DateUtils.getCurrentTime();
  QBPrivateChat chat=privateChatManager.createChat(friendId,privateChatMessageListener);
  QBChatMessage chatMessage=ChatUtils.createRoomNotificationMessage(dialog);
  chatMessage.setProperty(propertyDateSent,time + Consts.EMPTY_STRING);
  chatMessage.setProperty(propertySaveToHistory,valuePropertySaveToHistory);
  chat.sendMessage(chatMessage);
}","private void notifyFriendAboutInvitation(QBDialog dialog,Integer friendId) throws XMPPException, SmackException {
  long time=DateUtils.getCurrentTime();
  QBUser user=App.getInstance().getUser();
  QBPrivateChat chat=privateChatManager.createChat(friendId,privateChatMessageListener);
  QBChatMessage chatMessage=ChatUtils.createRoomNotificationMessage(dialog);
  chatMessage.setBody(context.getResources().getString(R.string.user_created_room,user.getFullName()));
  chatMessage.setProperty(propertyDateSent,time + Consts.EMPTY_STRING);
  chatMessage.setProperty(propertySaveToHistory,valuePropertySaveToHistory);
  chatMessage.setProperty(propertyNotificationTypeCreating,valuePropertyNotificationTypeCreating);
  chat.sendMessage(chatMessage);
}",0.6757188498402555
114547,"@Override public boolean onMenuItemActionCollapse(MenuItem item){
  state=State.FRIENDS_LIST;
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
  emptyListTextView.setVisibility(friendsListAdapter.isEmpty() ? View.VISIBLE : View.GONE);
  if (isHideSearchView) {
    isHideSearchView=false;
    friendsListAdapter.setSearchCharacters(null);
    friendsListAdapter.setFilterQueryProvider(null);
    friendsListView.removeFooterView(globalSearchLayout);
    friendsListView.removeHeaderView(friendsListViewTitle);
    positionCounter--;
    initFriendsList();
  }
  return true;
}","@Override public boolean onMenuItemActionCollapse(MenuItem item){
  state=State.FRIENDS_LIST;
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
  if (isHideSearchView) {
    isHideSearchView=false;
    friendsListAdapter.setSearchCharacters(null);
    friendsListAdapter.setFilterQueryProvider(null);
    friendsListView.removeFooterView(globalSearchLayout);
    friendsListView.removeHeaderView(friendsListViewTitle);
    positionCounter--;
    initFriendsList();
  }
  return true;
}",0.9154411764705882
114548,"private void initFriendsList(){
  if (friendsCursor != null && !friendsCursor.isClosed()) {
    friendsCursor.close();
  }
  friendsCursor=getAllFriends();
  friendsListAdapter=new FriendsListCursorAdapter(baseActivity,friendsCursor);
  friendsListView.setAdapter(friendsListAdapter);
  friendsListView.setSelector(R.drawable.list_item_background_selector);
  friendsListView.setOnItemClickListener(this);
}","private void initFriendsList(){
  if (friendsCursor != null && !friendsCursor.isClosed()) {
    friendsCursor.close();
  }
  friendsCursor=getAllFriends();
  friendsListAdapter=new FriendsListCursorAdapter(baseActivity,friendsCursor);
  friendsListView.setAdapter(friendsListAdapter);
  friendsListView.setSelector(R.drawable.list_item_background_selector);
  friendsListView.setOnItemClickListener(this);
  if (isFriendsListLoaded) {
    checkVisibilityEmptyLabel();
  }
}",0.925
114549,"@Override public void execute(Bundle bundle){
  if (getActivity() != null) {
    emptyListTextView.setVisibility(friendsListAdapter.isEmpty() ? View.VISIBLE : View.GONE);
  }
}","@Override public void execute(Bundle bundle){
  isFriendsListLoaded=true;
  if (baseActivity != null) {
    emptyListTextView.setVisibility(friendsListAdapter.isEmpty() ? View.VISIBLE : View.GONE);
  }
}",0.9023746701846964
114550,"private void initUI(View view){
  setHasOptionsMenu(true);
  dialogsListView=(ListView)view.findViewById(R.id.chats_listview);
}","private void initUI(View view){
  setHasOptionsMenu(true);
  dialogsListView=(ListView)view.findViewById(R.id.chats_listview);
  emptyListTextView=(TextView)view.findViewById(R.id.empty_list_textview);
}",0.7734138972809668
114551,"@Override public void onResume(){
  Crouton.cancelAllCroutons();
  super.onResume();
}","@Override public void onResume(){
  Crouton.cancelAllCroutons();
  checkVisibilityEmptyLabel();
  super.onResume();
}",0.8472906403940886
114552,"@Override public Bundle perform(Bundle extras) throws Exception {
  try {
    authHelper.logout();
  }
 catch (  QBResponseException e) {
    e.printStackTrace();
  }
  return extras;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  authHelper.logout();
  return extras;
}",0.7328767123287672
114553,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  final String data=getItem(position);
  String chatItem=resources.getStringArray(R.array.nvd_items_array)[MainActivity.ID_CHATS_LIST_FRAGMENT];
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_navigation_drawer,null);
    holder=new ViewHolder();
    holder.nameTextView=(TextView)convertView.findViewById(R.id.name_textview);
    holder.unreadMessagesTextView=(TextView)convertView.findViewById(R.id.unread_messages_textview);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  if (data.equals(chatItem)) {
    counterUnreadChatsDialogs=holder.unreadMessagesTextView;
  }
  holder.nameTextView.setText(data);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ViewHolder holder;
  final String data=getItem(position);
  String chatItem=resources.getStringArray(R.array.nvd_items_array)[MainActivity.ID_CHATS_LIST_FRAGMENT];
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_navigation_drawer,null);
    holder=new ViewHolder();
    holder.nameTextView=(TextView)convertView.findViewById(R.id.name_textview);
    holder.unreadMessagesTextView=(TextView)convertView.findViewById(R.id.unread_messages_textview);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  if (data.equals(chatItem)) {
    int count=getCounterUnreadDialogs();
    holder.unreadMessagesTextView.setText(count + Consts.EMPTY_STRING);
    if (count > Consts.ZERO_INT_VALUE) {
      holder.unreadMessagesTextView.setVisibility(View.VISIBLE);
    }
 else {
      holder.unreadMessagesTextView.setVisibility(View.GONE);
    }
  }
  holder.nameTextView.setText(data);
  return convertView;
}",0.8232161874334398
114554,"@Override public void onDrawerOpened(View drawerView){
  super.onDrawerOpened(drawerView);
  Crouton.cancelAllCroutons();
  baseActivity.invalidateOptionsMenu();
  if (!userLearnedDrawer) {
    userLearnedDrawer=true;
    saveUserLearnedDrawer();
  }
  updateCountUnreadDialogsListener.onUpdateCountUnreadDialogs(getCounterUnreadDialogs());
}","@Override public void onDrawerOpened(View drawerView){
  super.onDrawerOpened(drawerView);
  Crouton.cancelAllCroutons();
  baseActivity.invalidateOptionsMenu();
  if (!userLearnedDrawer) {
    userLearnedDrawer=true;
    saveUserLearnedDrawer();
  }
}",0.8484848484848485
114555,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_navigation_drawer,container,false);
  initUI(rootView);
  initListeners();
  NavigationDrawerAdapter navigationDrawerAdapter=new NavigationDrawerAdapter(baseActivity,getNavigationDrawerItems());
  drawerListView.setAdapter(navigationDrawerAdapter);
  drawerListView.setItemChecked(currentSelectedPosition,true);
  updateCountUnreadDialogsListener=navigationDrawerAdapter;
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_navigation_drawer,container,false);
  initUI(rootView);
  initListeners();
  initNavigationAdapter();
  drawerListView.setItemChecked(currentSelectedPosition,true);
  return rootView;
}",0.7569988801791714
114556,"private static ContentValues getContentValuesForCreateDialogTable(QBDialog dialog,String roomJidId){
  ContentValues values=new ContentValues();
  values.put(DialogTable.Cols.DIALOG_ID,dialog.getDialogId());
  values.put(DialogTable.Cols.ROOM_JID_ID,roomJidId);
  values.put(DialogTable.Cols.NAME,dialog.getName());
  values.put(DialogTable.Cols.COUNT_UNREAD_MESSAGES,dialog.getUnreadMessageCount());
  values.put(DialogTable.Cols.LAST_MESSAGE,dialog.getLastMessage());
  values.put(DialogTable.Cols.LAST_MESSAGE_USER_ID,dialog.getLastMessageUserId());
  values.put(DialogTable.Cols.LAST_DATE_SENT,dialog.getLastMessageDateSent());
  String occupantsIdsString=ChatUtils.getOccupantsIdsStringFromList(dialog.getOccupants());
  values.put(DialogTable.Cols.OCCUPANTS_IDS,occupantsIdsString);
  values.put(DialogTable.Cols.TYPE,dialog.getType().name());
  return values;
}","private static ContentValues getContentValuesForCreateDialogTable(Context context,QBDialog dialog,String roomJidId){
  ContentValues values=new ContentValues();
  values.put(DialogTable.Cols.DIALOG_ID,dialog.getDialogId());
  values.put(DialogTable.Cols.ROOM_JID_ID,roomJidId);
  values.put(DialogTable.Cols.NAME,dialog.getName());
  values.put(DialogTable.Cols.COUNT_UNREAD_MESSAGES,dialog.getUnreadMessageCount());
  values.put(DialogTable.Cols.LAST_MESSAGE,TextUtils.isEmpty(dialog.getLastMessage()) ? context.getString(R.string.dlg_attached_last_message) : dialog.getLastMessage());
  values.put(DialogTable.Cols.LAST_MESSAGE_USER_ID,dialog.getLastMessageUserId());
  values.put(DialogTable.Cols.LAST_DATE_SENT,dialog.getLastMessageDateSent());
  String occupantsIdsString=ChatUtils.getOccupantsIdsStringFromList(dialog.getOccupants());
  values.put(DialogTable.Cols.OCCUPANTS_IDS,occupantsIdsString);
  values.put(DialogTable.Cols.TYPE,dialog.getType().name());
  return values;
}",0.9368591473286564
114557,"private static ContentValues getContentValuesForUpdateDialogTable(QBDialog dialog){
  ContentValues values=new ContentValues();
  if (!TextUtils.isEmpty(dialog.getDialogId())) {
    values.put(DialogTable.Cols.DIALOG_ID,dialog.getDialogId());
  }
  values.put(DialogTable.Cols.NAME,dialog.getName());
  values.put(DialogTable.Cols.OCCUPANTS_IDS,ChatUtils.getOccupantsIdsStringFromList(dialog.getOccupants()));
  if (!TextUtils.isEmpty(dialog.getLastMessage())) {
    values.put(DialogTable.Cols.LAST_MESSAGE,dialog.getLastMessage());
  }
  if (dialog.getLastMessageUserId() != null) {
    values.put(DialogTable.Cols.LAST_MESSAGE_USER_ID,dialog.getLastMessageUserId());
  }
  values.put(DialogTable.Cols.LAST_DATE_SENT,dialog.getLastMessageDateSent());
  values.put(DialogTable.Cols.COUNT_UNREAD_MESSAGES,dialog.getUnreadMessageCount());
  return values;
}","private static ContentValues getContentValuesForUpdateDialogTable(Context context,QBDialog dialog){
  ContentValues values=new ContentValues();
  if (!TextUtils.isEmpty(dialog.getDialogId())) {
    values.put(DialogTable.Cols.DIALOG_ID,dialog.getDialogId());
  }
  values.put(DialogTable.Cols.NAME,dialog.getName());
  values.put(DialogTable.Cols.OCCUPANTS_IDS,ChatUtils.getOccupantsIdsStringFromList(dialog.getOccupants()));
  if (!TextUtils.isEmpty(dialog.getLastMessage())) {
    values.put(DialogTable.Cols.LAST_MESSAGE,dialog.getLastMessage());
  }
  values.put(DialogTable.Cols.LAST_MESSAGE,TextUtils.isEmpty(dialog.getLastMessage()) ? context.getString(R.string.dlg_attached_last_message) : dialog.getLastMessage());
  values.put(DialogTable.Cols.LAST_DATE_SENT,dialog.getLastMessageDateSent());
  values.put(DialogTable.Cols.COUNT_UNREAD_MESSAGES,dialog.getUnreadMessageCount());
  return values;
}",0.8320090805902384
114558,"public static void saveDialog(Context context,QBDialog dialog,String roomJidId){
  ContentValues values;
  String condition=DialogTable.Cols.ROOM_JID_ID + ""String_Node_Str"" + roomJidId+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(DialogTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > Consts.ZERO_INT_VALUE) {
    values=getContentValuesForUpdateDialogTable(dialog);
    resolver.update(DialogTable.CONTENT_URI,values,condition,null);
  }
 else {
    values=getContentValuesForCreateDialogTable(dialog,roomJidId);
    resolver.insert(DialogTable.CONTENT_URI,values);
  }
  cursor.close();
}","public static void saveDialog(Context context,QBDialog dialog,String roomJidId){
  ContentValues values;
  String condition=DialogTable.Cols.ROOM_JID_ID + ""String_Node_Str"" + roomJidId+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(DialogTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > Consts.ZERO_INT_VALUE) {
    values=getContentValuesForUpdateDialogTable(context,dialog);
    resolver.update(DialogTable.CONTENT_URI,values,condition,null);
  }
 else {
    values=getContentValuesForCreateDialogTable(context,dialog,roomJidId);
    resolver.insert(DialogTable.CONTENT_URI,values);
  }
  cursor.close();
}",0.9885877318116976
114559,"@Override public Bundle perform(Bundle extras) throws Exception {
  String socialProvider=(String)extras.getSerializable(QBServiceConsts.EXTRA_SOCIAL_PROVIDER);
  String accessToken=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN);
  String accessTokenSecret=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN_SECRET);
  QBUser user=authHelper.login(socialProvider,accessToken,accessTokenSecret);
  extras.putSerializable(QBServiceConsts.EXTRA_USER,user);
  return extras;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  String socialProvider=(String)extras.getSerializable(QBServiceConsts.EXTRA_SOCIAL_PROVIDER);
  String accessToken=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN);
  String accessTokenSecret=(String)extras.getSerializable(QBServiceConsts.EXTRA_ACCESS_TOKEN_SECRET);
  QBUser user=authHelper.login(socialProvider,accessToken,accessTokenSecret);
  if (TextUtils.isEmpty(user.getWebsite())) {
    QBUser newUser=new QBUser();
    newUser.setId(user.getId());
    newUser.setPassword(user.getPassword());
    newUser.setWebsite(context.getString(R.string.inf_url_to_facebook_avatar,user.getFacebookId()));
    extras.putSerializable(QBServiceConsts.EXTRA_USER,newUser);
  }
 else {
    extras.putSerializable(QBServiceConsts.EXTRA_USER,user);
  }
  return extras;
}",0.7031019202363368
114560,"private void updateUser(QBUser user,File file,String status) throws QBResponseException, SmackException.NotConnectedException {
  if (file == null) {
    authHelper.updateUser(user);
  }
 else {
    authHelper.updateUser(user,file);
  }
  friendListHelper.sendStatus(status);
}","private void updateUser(QBUser user,File file,String status) throws QBResponseException, SmackException.NotConnectedException {
  if (file == null) {
    authHelper.updateUser(user);
  }
 else {
    authHelper.updateUser(user,file);
  }
}",0.9242718446601942
114561,"@Override public void processMessage(QBRoomChat roomChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  String attachUrl=getAttachUrlIfExists(chatMessage);
  String roomJid=roomChat.getJid();
  long time=Long.parseLong(chatMessage.getProperty(propertyDateSent).toString());
  saveMessageToCache(new DialogMessageCache(roomJid,chatMessage.getSenderId(),chatMessage.getBody(),attachUrl,time,false));
  if (!chatMessage.getSenderId().equals(user.getId())) {
    notifyMessageReceived(chatMessage,friend);
  }
}","@Override public void processMessage(QBRoomChat roomChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  String attachUrl=ChatUtils.getAttachUrlIfExists(chatMessage);
  String roomJid=roomChat.getJid();
  long time=Long.parseLong(chatMessage.getProperty(propertyDateSent).toString());
  saveMessageToCache(new DialogMessageCache(roomJid,chatMessage.getSenderId(),chatMessage.getBody(),attachUrl,time,false));
  if (!chatMessage.getSenderId().equals(user.getId())) {
    notifyMessageReceived(chatMessage,friend);
  }
}",0.9913344887348352
114562,"private void registerLoginWithSocialCommand(){
  QBLoginWithSocialCommand loginCommand=new QBLoginWithSocialCommand(this,QBServiceConsts.LOGIN_SUCCESS_ACTION,QBServiceConsts.LOGIN_FAIL_ACTION);
  QBLoginRestWithSocialCommand loginRestCommand=new QBLoginRestWithSocialCommand(this,authHelper,QBServiceConsts.LOGIN_REST_SUCCESS_ACTION,QBServiceConsts.LOGIN_REST_FAIL_ACTION);
  loginCommand.addCommand(loginRestCommand);
  addLoginChatAndInitCommands(loginCommand);
  serviceCommandMap.put(QBServiceConsts.SOCIAL_LOGIN_ACTION,loginCommand);
}","private void registerLoginWithSocialCommand(){
  QBLoginWithSocialCommand loginCommand=new QBLoginWithSocialCommand(this,QBServiceConsts.LOGIN_SUCCESS_ACTION,QBServiceConsts.LOGIN_FAIL_ACTION);
  QBLoginRestWithSocialCommand loginRestCommand=new QBLoginRestWithSocialCommand(this,authHelper,QBServiceConsts.LOGIN_REST_SUCCESS_ACTION,QBServiceConsts.LOGIN_REST_FAIL_ACTION);
  QBUpdateUserCommand updateUserCommand=new QBUpdateUserCommand(this,authHelper,friendListHelper,QBServiceConsts.UPDATE_USER_SUCCESS_ACTION,QBServiceConsts.UPDATE_USER_FAIL_ACTION);
  loginCommand.addCommand(loginRestCommand);
  loginCommand.addCommand(updateUserCommand);
  addLoginChatAndInitCommands(loginCommand);
  serviceCommandMap.put(QBServiceConsts.SOCIAL_LOGIN_ACTION,loginCommand);
}",0.7889908256880734
114563,"@Override public void bindView(View view,final Context context,Cursor cursor){
  final ViewHolder viewHolder=(ViewHolder)view.getTag();
  QBDialog dialog=DatabaseManager.getDialogFromCursor(cursor);
  if (dialog.getType().equals(QBDialogType.PRIVATE)) {
    int occupantId=ChatUtils.getOccupantIdFromList(dialog.getOccupants());
    Friend occupant=getOccupantById(occupantId);
    viewHolder.nameTextView.setText(occupant.getFullname());
    viewHolder.userCountTextView.setVisibility(View.GONE);
    displayAvatarImage(getAvatarUrlForFriend(occupant),viewHolder.avatarImageView);
  }
 else {
    viewHolder.nameTextView.setText(dialog.getName());
    viewHolder.userCountTextView.setVisibility(View.VISIBLE);
    viewHolder.userCountTextView.setText(dialog.getOccupants().size() + Consts.EMPTY_STRING);
    viewHolder.avatarImageView.setImageResource(R.drawable.placeholder_group);
  }
  if (dialog.getUnreadMessageCount() > Consts.ZERO_INT_VALUE) {
    viewHolder.unreadMessagesTextView.setText(dialog.getUnreadMessageCount() + Consts.EMPTY_STRING);
    viewHolder.unreadMessagesTextView.setVisibility(View.VISIBLE);
  }
 else {
    viewHolder.unreadMessagesTextView.setVisibility(View.GONE);
  }
  if (dialog.getLastMessage() == null && dialog.getLastMessageUserId() != Consts.ZERO_INT_VALUE) {
    viewHolder.lastMessageTextView.setText(resources.getString(R.string.dlg_attached_last_message));
  }
 else {
    viewHolder.lastMessageTextView.setText(dialog.getLastMessage());
  }
}","@Override public void bindView(View view,final Context context,Cursor cursor){
  final ViewHolder viewHolder=(ViewHolder)view.getTag();
  QBDialog dialog=DatabaseManager.getDialogFromCursor(cursor);
  if (dialog.getType().equals(QBDialogType.PRIVATE)) {
    int occupantId=ChatUtils.getOccupantIdFromList(dialog.getOccupants());
    Friend occupant=getOccupantById(occupantId);
    viewHolder.nameTextView.setText(occupant.getFullname());
    viewHolder.userCountTextView.setVisibility(View.GONE);
    displayAvatarImage(getAvatarUrlForFriend(occupant),viewHolder.avatarImageView);
  }
 else {
    viewHolder.nameTextView.setText(dialog.getName());
    viewHolder.userCountTextView.setVisibility(View.VISIBLE);
    viewHolder.userCountTextView.setText(dialog.getOccupants().size() + Consts.EMPTY_STRING);
    viewHolder.avatarImageView.setImageResource(R.drawable.placeholder_group);
  }
  if (dialog.getUnreadMessageCount() > Consts.ZERO_INT_VALUE) {
    viewHolder.unreadMessagesTextView.setText(dialog.getUnreadMessageCount() + Consts.EMPTY_STRING);
    viewHolder.unreadMessagesTextView.setVisibility(View.VISIBLE);
  }
 else {
    viewHolder.unreadMessagesTextView.setVisibility(View.GONE);
  }
  viewHolder.lastMessageTextView.setText(dialog.getLastMessage());
}",0.8910675381263616
114564,"private boolean isUserDataCorrect(){
  return fullnameCurrent.length() > Consts.ZERO_INT_VALUE && emailCurrent.length() > Consts.ZERO_INT_VALUE;
}","private boolean isUserDataCorrect(){
  return fullnameCurrent.length() > Consts.ZERO_INT_VALUE;
}",0.7983539094650206
114565,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.avatar_textview:
case R.id.changeAvatarLinearLayout:
case R.id.avatar_imageview:
    changeAvatarOnClick();
  break;
case R.id.changeFullNameRelativeLayout:
changeFullNameOnClick();
break;
case R.id.changeStatusLinearLayout:
changeStatusOnClick();
break;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.avatar_textview:
case R.id.change_avatar_linearlayout:
case R.id.avatar_imageview:
    changeAvatarOnClick();
  break;
case R.id.change_fullname_relativelayout:
changeFullNameOnClick();
break;
case R.id.changeStatusLinearLayout:
changeStatusOnClick();
break;
}
}",0.4393939393939394
114566,"private void initUI(){
  changeAvatarLinearLayout=_findViewById(R.id.changeAvatarLinearLayout);
  avatarTextView=_findViewById(R.id.avatar_textview);
  changeFullNameRelativeLayout=_findViewById(R.id.changeFullNameRelativeLayout);
  changeStatusLinearLayout=_findViewById(R.id.changeStatusLinearLayout);
  avatarImageView=_findViewById(R.id.avatar_imageview);
  avatarImageView.setOval(true);
  fullNameEditText=_findViewById(R.id.fullNameEditText);
  emailTextView=_findViewById(R.id.email_textview);
  statusMessageEditText=_findViewById(R.id.statusMessageEditText);
}","private void initUI(){
  changeAvatarLinearLayout=_findViewById(R.id.change_avatar_linearlayout);
  avatarTextView=_findViewById(R.id.avatar_textview);
  changeFullNameRelativeLayout=_findViewById(R.id.change_fullname_relativelayout);
  emailLinearLayout=_findViewById(R.id.email_linearlayout);
  changeStatusLinearLayout=_findViewById(R.id.changeStatusLinearLayout);
  avatarImageView=_findViewById(R.id.avatar_imageview);
  avatarImageView.setOval(true);
  fullNameEditText=_findViewById(R.id.fullname_edittext);
  emailTextView=_findViewById(R.id.email_textview);
  statusMessageEditText=_findViewById(R.id.statusMessageEditText);
}",0.700414937759336
114567,"private void initUIWithUsersData(){
  loadAvatar();
  fullNameEditText.setText(user.getFullName());
  emailTextView.setText(user.getEmail());
  String status=App.getInstance().getPrefsHelper().getPref(PrefsHelper.PREF_STATUS,Consts.EMPTY_STRING);
  statusMessageEditText.setText(status);
}","private void initUIWithUsersData(){
  loadAvatar();
  fullNameEditText.setText(user.getFullName());
  if (TextUtils.isEmpty(user.getEmail())) {
    emailLinearLayout.setVisibility(View.GONE);
  }
 else {
    emailLinearLayout.setVisibility(View.VISIBLE);
    emailTextView.setText(user.getEmail());
  }
  String status=App.getInstance().getPrefsHelper().getPref(PrefsHelper.PREF_STATUS,Consts.EMPTY_STRING);
  statusMessageEditText.setText(status);
}",0.6901217861975643
114568,"private void checkFields(){
  AlertDialog dialog=(AlertDialog)getDialog();
  final Button yesButton=dialog == null ? null : dialog.getButton(AlertDialog.BUTTON_POSITIVE);
  if (yesButton != null) {
    yesButton.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View v,      MotionEvent event){
        String oldPasswordText=oldPassword.getText().toString();
        String newPasswordText=newPassword.getText().toString();
        String confirmPasswordText=confirmPassword.getText().toString();
        boolean isOldPasswordEmpty=TextUtils.isEmpty(oldPasswordText);
        boolean isNewPasswordEmpty=TextUtils.isEmpty(newPasswordText);
        boolean isConfirmPasswordEmpty=TextUtils.isEmpty(confirmPasswordText);
        if (isOldPasswordEmpty || isNewPasswordEmpty || isConfirmPasswordEmpty) {
          DialogUtils.showLong(getActivity(),getString(R.string.dlg_not_all_fields_entered));
          yesButton.setClickable(false);
          return false;
        }
        if (!newPasswordText.equals(confirmPasswordText)) {
          DialogUtils.showLong(getActivity(),getString(R.string.dlg_passwords_not_equal));
          yesButton.setClickable(false);
          return false;
        }
        yesButton.setClickable(true);
        return false;
      }
    }
);
  }
}","private void checkFields(){
  AlertDialog dialog=(AlertDialog)getDialog();
  final Button yesButton=dialog == null ? null : dialog.getButton(AlertDialog.BUTTON_POSITIVE);
  if (yesButton != null) {
    yesButton.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View v,      MotionEvent event){
        String oldPasswordText=oldPassword.getText().toString();
        String newPasswordText=newPassword.getText().toString();
        String confirmPasswordText=confirmPassword.getText().toString();
        QBUser user=App.getInstance().getUser();
        boolean isOldPasswordEmpty=TextUtils.isEmpty(oldPasswordText);
        boolean isNewPasswordEmpty=TextUtils.isEmpty(newPasswordText);
        boolean isConfirmPasswordEmpty=TextUtils.isEmpty(confirmPasswordText);
        if (isOldPasswordEmpty || isNewPasswordEmpty || isConfirmPasswordEmpty) {
          DialogUtils.showLong(getActivity(),getString(R.string.dlg_not_all_fields_entered));
          yesButton.setClickable(false);
          return false;
        }
        if (!newPasswordText.equals(confirmPasswordText)) {
          DialogUtils.showLong(getActivity(),getString(R.string.dlg_passwords_not_equal));
          yesButton.setClickable(false);
          return false;
        }
        if (!user.getPassword().equals(oldPasswordText)) {
          DialogUtils.showLong(getActivity(),getString(R.string.dlg_old_password_wrong));
          yesButton.setClickable(false);
          return false;
        }
        yesButton.setClickable(true);
        return false;
      }
    }
);
  }
}",0.8843117061448679
114569,"@Override public boolean onTouch(View v,MotionEvent event){
  String oldPasswordText=oldPassword.getText().toString();
  String newPasswordText=newPassword.getText().toString();
  String confirmPasswordText=confirmPassword.getText().toString();
  boolean isOldPasswordEmpty=TextUtils.isEmpty(oldPasswordText);
  boolean isNewPasswordEmpty=TextUtils.isEmpty(newPasswordText);
  boolean isConfirmPasswordEmpty=TextUtils.isEmpty(confirmPasswordText);
  if (isOldPasswordEmpty || isNewPasswordEmpty || isConfirmPasswordEmpty) {
    DialogUtils.showLong(getActivity(),getString(R.string.dlg_not_all_fields_entered));
    yesButton.setClickable(false);
    return false;
  }
  if (!newPasswordText.equals(confirmPasswordText)) {
    DialogUtils.showLong(getActivity(),getString(R.string.dlg_passwords_not_equal));
    yesButton.setClickable(false);
    return false;
  }
  yesButton.setClickable(true);
  return false;
}","@Override public boolean onTouch(View v,MotionEvent event){
  String oldPasswordText=oldPassword.getText().toString();
  String newPasswordText=newPassword.getText().toString();
  String confirmPasswordText=confirmPassword.getText().toString();
  QBUser user=App.getInstance().getUser();
  boolean isOldPasswordEmpty=TextUtils.isEmpty(oldPasswordText);
  boolean isNewPasswordEmpty=TextUtils.isEmpty(newPasswordText);
  boolean isConfirmPasswordEmpty=TextUtils.isEmpty(confirmPasswordText);
  if (isOldPasswordEmpty || isNewPasswordEmpty || isConfirmPasswordEmpty) {
    DialogUtils.showLong(getActivity(),getString(R.string.dlg_not_all_fields_entered));
    yesButton.setClickable(false);
    return false;
  }
  if (!newPasswordText.equals(confirmPasswordText)) {
    DialogUtils.showLong(getActivity(),getString(R.string.dlg_passwords_not_equal));
    yesButton.setClickable(false);
    return false;
  }
  if (!user.getPassword().equals(oldPasswordText)) {
    DialogUtils.showLong(getActivity(),getString(R.string.dlg_old_password_wrong));
    yesButton.setClickable(false);
    return false;
  }
  yesButton.setClickable(true);
  return false;
}",0.862953995157385
114570,"@Override public boolean onMenuItemActionCollapse(MenuItem item){
  state=State.FRIENDS_LIST;
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
  if (isHideSearchView) {
    isHideSearchView=false;
    emptyListTextView.setVisibility(friendsListAdapter.isEmpty() ? View.VISIBLE : View.GONE);
    friendsListAdapter.setSearchCharacters(null);
    friendsListAdapter.setFilterQueryProvider(null);
    friendsListView.removeFooterView(globalSearchLayout);
    friendsListView.removeHeaderView(friendsListViewTitle);
    positionCounter--;
    initFriendsList();
  }
  return true;
}","@Override public boolean onMenuItemActionCollapse(MenuItem item){
  state=State.FRIENDS_LIST;
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
  emptyListTextView.setVisibility(friendsListAdapter.isEmpty() ? View.VISIBLE : View.GONE);
  if (isHideSearchView) {
    isHideSearchView=false;
    friendsListAdapter.setSearchCharacters(null);
    friendsListAdapter.setFilterQueryProvider(null);
    friendsListView.removeFooterView(globalSearchLayout);
    friendsListView.removeHeaderView(friendsListViewTitle);
    positionCounter--;
    initFriendsList();
  }
  return true;
}",0.9069373942470388
114571,"public void execute(Bundle bundle){
  Bundle result;
  try {
    result=perform(bundle);
    sendResult(result,successAction);
  }
 catch (  Exception e) {
    ErrorUtils.logError(e);
    result=new Bundle();
    result.putSerializable(QBServiceConsts.EXTRA_ERROR,e);
    sendResult(result,failAction);
  }
}","public void execute(Bundle bundle){
  Bundle result;
  try {
    result=perform(bundle);
    sendResult(result,successAction);
  }
 catch (  Exception e) {
    ErrorUtils.logError(e);
    result=new Bundle();
    result.putSerializable(QBServiceConsts.EXTRA_ERROR,e);
    result.putString(QBServiceConsts.COMMAND_ACTION,failAction);
    sendResult(result,failAction);
  }
}",0.8546255506607929
114572,"@Override public Bundle perform(Bundle extras) throws Exception {
  super.perform(extras);
  resetFriendList();
  resetRememberMe();
  resetUserData();
  return extras;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  try {
    super.perform(extras);
  }
 catch (  Exception e) {
    ErrorUtils.logError(TAG,e);
  }
  resetFriendList();
  resetRememberMe();
  resetUserData();
  return extras;
}",0.8192771084337349
114573,"@Override public Bundle perform(Bundle extras) throws Exception {
  authHelper.logout();
  return extras;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  try {
    authHelper.logout();
  }
 catch (  QBResponseException e) {
    e.printStackTrace();
  }
  return extras;
}",0.7328767123287672
114574,"@Override public void execute(Bundle bundle){
  Exception e=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  ErrorUtils.showError(BaseFragmentActivity.this,e);
  hideProgress();
}","@Override public void execute(Bundle bundle){
  Exception e=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  ErrorUtils.showError(BaseFragmentActivity.this,e);
  hideProgress();
  onFailAction(bundle.getString(QBServiceConsts.COMMAND_ACTION));
}",0.8558951965065502
114575,"@Override protected void onUpdateChatDialog(){
  if (!messagesAdapter.isEmpty()) {
    startUpdateChatDialog();
  }
}","@Override protected void onUpdateChatDialog(){
  if (messagesAdapter != null && !messagesAdapter.isEmpty()) {
    startUpdateChatDialog();
  }
}",0.896551724137931
114576,"public QBService(){
  threadQueue=new LinkedBlockingQueue<Runnable>();
  threadPool=new ThreadPoolExecutor(NUMBER_OF_CORES,NUMBER_OF_CORES,KEEP_ALIVE_TIME,KEEP_ALIVE_TIME_UNIT,threadQueue);
  initHelpers();
  initCommands();
}","public QBService(){
  threadQueue=new LinkedBlockingQueue<Runnable>();
  initThreads();
  initHelpers();
  initCommands();
}",0.6857142857142857
114577,"private void startAsync(final ServiceCommand command,final Intent intent){
  threadPool.execute(new Runnable(){
    @Override public void run(){
      command.execute(intent.getExtras());
    }
  }
);
}","private void startAsync(final ServiceCommand command,final Intent intent){
  if (threadPool.getActiveCount() >= NUMBER_OF_CORES) {
    initThreads();
  }
  threadPool.execute(new Runnable(){
    @Override public void run(){
      command.execute(intent.getExtras());
    }
  }
);
}",0.8364389233954451
114578,"protected void displayAvatarImage(String uri,ImageView imageView){
  if (uri != null) {
    ImageLoader.getInstance().displayImage(uri,imageView,Consts.UIL_AVATAR_DISPLAY_OPTIONS);
  }
}","protected void displayAvatarImage(String uri,ImageView imageView){
  ImageLoader.getInstance().displayImage(uri,imageView,Consts.UIL_AVATAR_DISPLAY_OPTIONS);
}",0.9217391304347826
114579,"public static void saveChatMessage(Context context,DialogMessageCache dialogMessageCache){
  ContentValues values=new ContentValues();
  values.put(DialogMessageTable.Cols.ROOM_JID_ID,dialogMessageCache.getRoomJidId());
  values.put(DialogMessageTable.Cols.SENDER_ID,dialogMessageCache.getSenderId());
  values.put(DialogMessageTable.Cols.BODY,dialogMessageCache.getMessage());
  values.put(DialogMessageTable.Cols.TIME,dialogMessageCache.getTime());
  values.put(DialogMessageTable.Cols.ATTACH_FILE_ID,dialogMessageCache.getAttachUrl());
  values.put(DialogMessageTable.Cols.IS_READ,dialogMessageCache.isRead());
  context.getContentResolver().insert(DialogMessageTable.CONTENT_URI,values);
  updateDialog(context,dialogMessageCache.getRoomJidId(),dialogMessageCache.getMessage(),dialogMessageCache.getTime());
}","public static void saveChatMessage(Context context,DialogMessageCache dialogMessageCache){
  ContentValues values=new ContentValues();
  values.put(DialogMessageTable.Cols.ROOM_JID_ID,dialogMessageCache.getRoomJidId());
  values.put(DialogMessageTable.Cols.SENDER_ID,dialogMessageCache.getSenderId());
  values.put(DialogMessageTable.Cols.BODY,dialogMessageCache.getMessage());
  values.put(DialogMessageTable.Cols.TIME,dialogMessageCache.getTime());
  values.put(DialogMessageTable.Cols.ATTACH_FILE_ID,dialogMessageCache.getAttachUrl());
  values.put(DialogMessageTable.Cols.IS_READ,dialogMessageCache.isRead());
  Uri uri=context.getContentResolver().insert(DialogMessageTable.CONTENT_URI,values);
  updateDialog(context,dialogMessageCache.getRoomJidId(),dialogMessageCache.getMessage(),dialogMessageCache.getTime());
}",0.9951040391676866
114580,"@Override public void processMessage(QBRoomChat roomChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  String attachUrl=getAttachUrlIfExists(chatMessage);
  long time=Long.parseLong(chatMessage.getProperty(propertyDateSent).toString());
  saveMessageToCache(new DialogMessageCache(roomChat.getJid(),chatMessage.getSenderId(),chatMessage.getBody(),attachUrl,time,false));
  if (!chatMessage.getSenderId().equals(user.getId())) {
    notifyMessageReceived(chatMessage,friend);
  }
}","@Override public void processMessage(QBRoomChat roomChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  String attachUrl=getAttachUrlIfExists(chatMessage);
  String roomJid=roomChat.getJid();
  long time=Long.parseLong(chatMessage.getProperty(propertyDateSent).toString());
  saveMessageToCache(new DialogMessageCache(roomJid,chatMessage.getSenderId(),chatMessage.getBody(),attachUrl,time,false));
  if (!chatMessage.getSenderId().equals(user.getId())) {
    notifyMessageReceived(chatMessage,friend);
  }
}",0.958855098389982
114581,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(layoutResID);
  imageHelper=new ImageHelper(this);
  messagesAdapter=getMessagesAdapter();
  initUI();
  initListeners();
  initSmileWidgets();
  initSmiles();
  addActions();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(layoutResID);
  imageHelper=new ImageHelper(this);
  initUI();
  initListeners();
  initSmileWidgets();
  initSmiles();
  addActions();
}",0.6678966789667896
114582,"private void initListView(){
  messagesAdapter=getMessagesAdapter();
  messagesListView.setAdapter(messagesAdapter);
}","private void initListView(){
  messagesAdapter=new GroupDialogMessagesAdapter(this,getAllDialogMessagesByRoomJidId(),dialog,this);
  messagesListView.setAdapter(messagesAdapter);
}",0.7785234899328859
114583,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getIntent().hasExtra(EXTRA_ROOM_JID)) {
    roomJid=getIntent().getStringExtra(EXTRA_ROOM_JID);
  }
  initListView();
  registerForContextMenu(messagesListView);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getIntent().hasExtra(EXTRA_ROOM_JID)) {
    roomJid=getIntent().getStringExtra(EXTRA_ROOM_JID);
  }
  if (roomJid != null) {
    dialog=DatabaseManager.getDialogByRoomJidId(this,roomJid);
    groupName=dialog.getName();
  }
  initListView();
  initChat();
  initActionBar();
  initStartLoadDialogMessages();
  registerForContextMenu(messagesListView);
}",0.7368421052631579
114584,"@Override protected void onResume(){
  super.onResume();
  initChat();
  initStartLoadDialogMessages();
  addActions();
  initActionBar();
}","@Override protected void onResume(){
  super.onResume();
  scrollListView();
  addActions();
}",0.7094017094017094
114585,"private void initChat(){
  if (roomJid != null) {
    dialog=DatabaseManager.getDialogByRoomJidId(this,roomJid);
    groupName=dialog.getName();
  }
 else {
    showProgress();
    friendList=(ArrayList<Friend>)getIntent().getSerializableExtra(EXTRA_FRIENDS);
    groupName=createChatName();
    QBCreateGroupDialogCommand.start(this,groupName,friendList);
  }
}","private void initChat(){
  if (roomJid == null) {
    showProgress();
    friendList=(ArrayList<Friend>)getIntent().getSerializableExtra(EXTRA_FRIENDS);
    groupName=createChatName();
    QBCreateGroupDialogCommand.start(this,groupName,friendList);
  }
}",0.8006482982171799
114586,"private void initListView(){
  messagesAdapter=getMessagesAdapter();
  messagesListView.setAdapter(messagesAdapter);
}","private void initListView(){
  messagesAdapter=new PrivateDialogMessagesAdapter(this,getAllDialogMessagesByRoomJidId(),opponentFriend,dialog,this);
  messagesListView.setAdapter(messagesAdapter);
}",0.7365079365079366
114587,"protected String getAvatarUrlForCurrentUser(){
  if (currentLoginType == LoginType.FACEBOOK) {
    return context.getString(R.string.inf_url_to_facebook_avatar,currentUser.getFacebookId());
  }
 else   if (currentLoginType == LoginType.EMAIL) {
    return currentUser.getWebsite();
  }
  return null;
}","protected String getAvatarUrlForCurrentUser(){
  return currentUser.getWebsite();
}",0.4311688311688311
114588,"private void startUpdateChatDialog(){
  QBUpdateDialogCommand.start(this,getQBDialog(),roomJid);
}","private void startUpdateChatDialog(){
  QBDialog dialog=getQBDialog();
  if (dialog != null) {
    QBUpdateDialogCommand.start(this,getQBDialog(),roomJid);
  }
}",0.7567567567567568
114589,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_landing);
  useDoubleBackPressed=true;
  addAction(QBServiceConsts.LOGIN_SUCCESS_ACTION,new SocialLoginSuccessAction());
  addAction(QBServiceConsts.LOGIN_FAIL_ACTION,failAction);
  facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
  initVersionName();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_landing);
  useDoubleBackPressed=true;
  addActions();
  facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
  initVersionName();
}",0.5234899328859061
114590,"@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().setUser(getUserWithAvatar(user));
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  DatabaseManager.clearAllCache(LandingActivity.this);
  MainActivity.start(LandingActivity.this);
  finish();
}","@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  user.setWebsite(getAvatarUrl(user));
  DatabaseManager.clearAllCache(LandingActivity.this);
  QBUpdateUserCommand.start(LandingActivity.this,user,null,null);
}",0.3963414634146341
114591,"@Override public void onReceive(Context context,Intent intent){
  if (isPushForbidden) {
    return;
  }
  ComponentName comp=new ComponentName(context.getPackageName(),GCMIntentService.class.getName());
  startWakefulService(context,(intent.setComponent(comp)));
  setResultCode(Activity.RESULT_OK);
}","@Override public void onReceive(Context context,Intent intent){
  isPushForbidden=App.getInstance().getPrefsHelper().getPref(PrefsHelper.PREF_PUSH_NOTIFICATIONS,false);
  if (isPushForbidden) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  Log.i(""String_Node_Str"",""String_Node_Str"");
  ComponentName comp=new ComponentName(context.getPackageName(),GCMIntentService.class.getName());
  startWakefulService(context,(intent.setComponent(comp)));
  setResultCode(Activity.RESULT_OK);
}",0.7422166874221668
114592,"private void savePushNotification(boolean value){
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_NOTIFICATIONS,value);
}","private void savePushNotification(boolean value){
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_PUSH_NOTIFICATIONS,!value);
}",0.9964664310954064
114593,"private void updateUserData(){
  if (isUserDataChanged(fullnameCurrent,emailCurrent,statusCurrent)) {
    trySaveUserData();
  }
}","private void updateUserData(){
  if (isUserDataChanged(fullnameCurrent,emailCurrent,statusCurrent)) {
    saveChanges(fullnameCurrent,emailCurrent);
  }
}",0.8591549295774648
114594,"private void saveChanges(final String fullname,final String email) throws IOException {
  if (!isUserDataCorrect()) {
    DialogUtils.showLong(this,getString(R.string.dlg_not_all_fields_entered));
    return;
  }
  showProgress();
  user.setFullName(fullname);
  user.setEmail(email);
  if (isNeedUpdateAvatar) {
    new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
  }
 else {
    String status=statusMessageEditText.getText().toString();
    QBUpdateUserCommand.start(this,user,null,status);
  }
}","private void saveChanges(final String fullname,final String email){
  if (!isUserDataCorrect()) {
    DialogUtils.showLong(this,getString(R.string.dlg_not_all_fields_entered));
    return;
  }
  showProgress();
  user.setFullName(fullname);
  user.setEmail(email);
  if (isNeedUpdateAvatar) {
    new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
  }
 else {
    String status=statusMessageEditText.getText().toString();
    QBUpdateUserCommand.start(this,user,null,status);
  }
}",0.9806949806949808
114595,"public BaseCursorAdapter(Context context,Cursor cursor,boolean autoRequery){
  super(context,cursor,autoRequery);
  this.context=context;
  layoutInflater=LayoutInflater.from(context);
  currentUser=App.getInstance().getUser();
  currentLoginType=App.getInstance().getUserLoginType();
  imageHelper=new ImageHelper((android.app.Activity)context);
}","public BaseCursorAdapter(Context context,Cursor cursor,boolean autoRequery){
  super(context,cursor,autoRequery);
  this.context=context;
  resources=context.getResources();
  layoutInflater=LayoutInflater.from(context);
  currentUser=App.getInstance().getUser();
  currentLoginType=App.getInstance().getUserLoginType();
  imageHelper=new ImageHelper((android.app.Activity)context);
}",0.9508196721311476
114596,"public DialogsSelectableFriendsAdapter(Context context,Cursor cursor){
  super(context,cursor,true);
  this.context=context;
  selectedFriends=new ArrayList<Friend>();
  layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
}","public DialogsSelectableFriendsAdapter(Context context,Cursor cursor){
  super(context,cursor,true);
  selectedFriends=new ArrayList<Friend>();
  layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
}",0.9518072289156626
114597,"@Override public void bindView(View view,Context context,Cursor cursor){
  ViewHolder holder=(ViewHolder)view.getTag();
  Friend friend=DatabaseManager.getFriendFromCursor(cursor);
  holder.nameTextView.setText(friend.getFullname());
  holder.statusMessageTextView.setText(friend.getStatus());
  holder.nameTextView.setText(friend.getFullname());
  holder.selectFriendCheckBox.setChecked(friend.isSelected());
  holder.selectFriendCheckBox.setTag(friend);
  if (friend.isOnline()) {
    holder.onlineImageView.setVisibility(View.VISIBLE);
  }
 else {
    holder.onlineImageView.setVisibility(View.INVISIBLE);
  }
  holder.selectFriendCheckBox.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      CheckBox cb=(CheckBox)v;
      Friend friend=(Friend)cb.getTag();
      friend.setSelected(cb.isChecked());
      notifyCounterChanged(cb.isChecked());
      if (cb.isChecked()) {
        selectedFriends.add(friend);
      }
 else       if (selectedFriends.contains(friend)) {
        selectedFriends.remove(friend);
      }
    }
  }
);
  String avatarUrl=getAvatarUrlForFriend(friend);
  displayAvatarImage(avatarUrl,holder.avatarImageView);
  if (!TextUtils.isEmpty(searchCharacters)) {
    TextViewHelper.changeTextColorView(context,holder.nameTextView,searchCharacters);
  }
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final ViewHolder viewHolder=(ViewHolder)view.getTag();
  Friend friend=DatabaseManager.getFriendFromCursor(cursor);
  viewHolder.nameTextView.setText(friend.getFullname());
  viewHolder.statusMessageTextView.setText(friend.getStatus());
  viewHolder.nameTextView.setText(friend.getFullname());
  viewHolder.selectFriendCheckBox.setChecked(friend.isSelected());
  viewHolder.selectFriendCheckBox.setTag(friend);
  if (friend.isOnline()) {
    viewHolder.onlineImageView.setVisibility(View.VISIBLE);
  }
 else {
    viewHolder.onlineImageView.setVisibility(View.INVISIBLE);
  }
  viewHolder.selectFriendCheckBox.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      CheckBox checkBox=(CheckBox)view;
      Friend friend=(Friend)checkBox.getTag();
      friend.setSelected(checkBox.isChecked());
      notifyCounterChanged(checkBox.isChecked());
      if (checkBox.isChecked()) {
        selectedFriends.add(friend);
      }
 else       if (selectedFriends.contains(friend)) {
        selectedFriends.remove(friend);
      }
      viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(viewHolder.selectFriendCheckBox.isChecked()));
    }
  }
);
  String avatarUrl=getAvatarUrlForFriend(friend);
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
  viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(viewHolder.selectFriendCheckBox.isChecked()));
}",0.8096249115357396
114598,"public void onClick(View v){
  CheckBox cb=(CheckBox)v;
  Friend friend=(Friend)cb.getTag();
  friend.setSelected(cb.isChecked());
  notifyCounterChanged(cb.isChecked());
  if (cb.isChecked()) {
    selectedFriends.add(friend);
  }
 else   if (selectedFriends.contains(friend)) {
    selectedFriends.remove(friend);
  }
}","public void onClick(View view){
  CheckBox checkBox=(CheckBox)view;
  Friend friend=(Friend)checkBox.getTag();
  friend.setSelected(checkBox.isChecked());
  notifyCounterChanged(checkBox.isChecked());
  if (checkBox.isChecked()) {
    selectedFriends.add(friend);
  }
 else   if (selectedFriends.contains(friend)) {
    selectedFriends.remove(friend);
  }
  viewHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(viewHolder.selectFriendCheckBox.isChecked()));
}",0.7331670822942643
114599,"@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  ViewHolder holder;
  View view=layoutInflater.inflate(R.layout.list_item_chat_friend_selectable,null);
  holder=new ViewHolder();
  holder.avatarImageView=(RoundedImageView)view.findViewById(R.id.avatar_imageview);
  holder.avatarImageView.setOval(true);
  holder.nameTextView=(TextView)view.findViewById(R.id.name_textview);
  holder.onlineImageView=(ImageView)view.findViewById(R.id.online_imageview);
  holder.statusMessageTextView=(TextView)view.findViewById(R.id.statusMessageTextView);
  holder.selectFriendCheckBox=(CheckBox)view.findViewById(R.id.time_textview);
  view.setTag(holder);
  return view;
}","@Override public View newView(Context context,Cursor cursor,ViewGroup parent){
  ViewHolder viewHolder;
  View view=layoutInflater.inflate(R.layout.list_item_chat_friend_selectable,null);
  viewHolder=new ViewHolder();
  viewHolder.contentRelativeLayout=(RelativeLayout)view.findViewById(R.id.contentRelativeLayout);
  viewHolder.avatarImageView=(RoundedImageView)view.findViewById(R.id.avatar_imageview);
  viewHolder.avatarImageView.setOval(true);
  viewHolder.nameTextView=(TextView)view.findViewById(R.id.name_textview);
  viewHolder.onlineImageView=(ImageView)view.findViewById(R.id.online_imageview);
  viewHolder.statusMessageTextView=(TextView)view.findViewById(R.id.statusMessageTextView);
  viewHolder.selectFriendCheckBox=(CheckBox)view.findViewById(R.id.selected_friend_checkbox);
  view.setTag(viewHolder);
  return view;
}",0.3117223313686968
114600,"public void hideProgress(){
  if (progress != null) {
    progress.dismissAllowingStateLoss();
  }
}","public void hideProgress(){
  try {
    if (progress != null && !progress.isDetached()) {
      progress.dismissAllowingStateLoss();
    }
  }
 catch (  NullPointerException npe) {
    ErrorUtils.logError(npe);
  }
}",0.5632911392405063
114601,"protected void startLoadDialogMessages(QBDialog dialog,String roomJidId,long lastDateLoad){
  QBLoadDialogMessagesCommand.start(this,dialog,roomJidId,lastDateLoad);
}","protected void startLoadDialogMessages(QBDialog dialog,String roomJidId,long lastDateLoad){
  if (dialog != null) {
    QBLoadDialogMessagesCommand.start(this,dialog,roomJidId,lastDateLoad);
  }
}",0.9171270718232044
114602,"@Override public void execute(Bundle bundle){
  dialog=(QBDialog)bundle.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  groupName=dialog.getName();
  roomJidId=dialog.getRoomJid();
  initListView();
}","@Override public void execute(Bundle bundle){
  hideProgress();
  dialog=(QBDialog)bundle.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  groupName=dialog.getName();
  roomJidId=dialog.getRoomJid();
  initListView();
}",0.9571428571428572
114603,"private void initChat(){
  Bundle extras=getIntent().getExtras();
  if (getIntent().hasExtra(QBServiceConsts.EXTRA_DIALOG)) {
    dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
    groupName=dialog.getName();
    roomJidId=dialog.getRoomJid();
    QBJoinGroupChatCommand.start(this,roomJidId);
  }
 else {
    friendList=(ArrayList<Friend>)extras.getSerializable(QBServiceConsts.EXTRA_FRIENDS);
    groupName=createChatName();
    QBCreateGroupDialogCommand.start(this,groupName,friendList);
  }
}","private void initChat(){
  Bundle extras=getIntent().getExtras();
  if (getIntent().hasExtra(QBServiceConsts.EXTRA_DIALOG)) {
    dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
    groupName=dialog.getName();
    roomJidId=dialog.getRoomJid();
    QBJoinGroupChatCommand.start(this,roomJidId);
  }
 else {
    showProgress();
    friendList=(ArrayList<Friend>)extras.getSerializable(QBServiceConsts.EXTRA_FRIENDS);
    groupName=createChatName();
    QBCreateGroupDialogCommand.start(this,groupName,friendList);
  }
}",0.9811676082862524
114604,"@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().setUser(user);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  MainActivity.start(LandingActivity.this);
  finish();
}","@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().setUser(user);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  DatabaseManager.clearAllCache(LandingActivity.this);
  MainActivity.start(LandingActivity.this);
  finish();
}",0.9101978691019786
114605,"@Override public void execute(Bundle bundle){
  clearCache();
  LoginActivity.start(baseActivity);
  baseActivity.finish();
}","@Override public void execute(Bundle bundle){
  LoginActivity.start(baseActivity);
  baseActivity.finish();
}",0.9316239316239316
114606,"@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().setUser(user);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_SIGN_UP_INITIALIZED,true);
  MainActivity.start(SignUpActivity.this);
  finish();
}","@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().setUser(user);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_SIGN_UP_INITIALIZED,true);
  DatabaseManager.clearAllCache(SignUpActivity.this);
  MainActivity.start(SignUpActivity.this);
  finish();
}",0.875
114607,"@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().setUser(user);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  MainActivity.start(SplashActivity.this);
  finish();
}","@Override public void execute(Bundle bundle){
  QBUser user=(QBUser)bundle.getSerializable(QBServiceConsts.EXTRA_USER);
  App.getInstance().setUser(user);
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_IMPORT_INITIALIZED,true);
  DatabaseManager.clearAllCache(SplashActivity.this);
  MainActivity.start(SplashActivity.this);
  finish();
}",0.8746177370030581
114608,"@Override public void onCounterFriendsChanged(int valueCounter){
  if (actionMode != null) {
    if (valueCounter == Consts.ZERO_VALUE) {
      closeWithoutRedirect=true;
      actionMode.finish();
      return;
    }
  }
 else {
    startAction();
  }
  countSelectedFriendsTextView.setText(valueCounter + ""String_Node_Str"");
}","@Override public void onCounterFriendsChanged(int valueCounter){
  if (actionMode != null) {
    if (valueCounter == Consts.ZERO_VALUE) {
      isNeedToCloseWithoutRedirect=true;
      actionMode.finish();
      return;
    }
  }
 else {
    startAction();
  }
  countSelectedFriendsTextView.setText(valueCounter + Consts.EMPTY_STRING);
}",0.9369369369369368
114609,"@Override public void onDestroyActionMode(ActionMode mode){
  if (!closeWithoutRedirect) {
    List<Friend> membersList=new ArrayList<Friend>(friendsAdapter.getSelectedFriends());
    Collections.sort(membersList,new SimpleComparator());
    GroupDialogActivity.start(activity,(ArrayList<Friend>)membersList);
    finish();
    actionMode=null;
    closeWithoutRedirect=false;
  }
 else {
    actionMode=null;
    closeWithoutRedirect=false;
  }
}","@Override public void onDestroyActionMode(ActionMode mode){
  if (isNeedToCloseWithoutRedirect) {
    isNeedToCloseWithoutRedirect=false;
    actionMode=null;
    finish();
  }
 else {
    isNeedToCloseWithoutRedirect=false;
    List<Friend> membersList=new ArrayList<Friend>(friendsAdapter.getSelectedFriends());
    Collections.sort(membersList,new SimpleComparator());
    GroupDialogActivity.start(activity,(ArrayList<Friend>)membersList);
    finish();
    actionMode=null;
  }
}",0.7475832438238453
114610,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    navigateToParent();
  return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    isNeedToCloseWithoutRedirect=true;
  navigateToParent();
return true;
}
return super.onOptionsItemSelected(item);
}",0.9099307159353348
114611,"public static void saveChatMessages(Context context,List<QBHistoryMessage> messagesList,String roomJidId,boolean isGroupMessage){
  for (  QBHistoryMessage historyMessage : messagesList) {
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    String attachURL;
    if (TextUtils.isEmpty(message)) {
      attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    }
 else {
      attachURL=Consts.EMPTY_STRING;
    }
    if (TextUtils.isEmpty(message) && TextUtils.isEmpty(attachURL)) {
      if (isGroupMessage) {
        message=getMessageForNotification(context,senderId);
      }
 else {
        return;
      }
    }
    DialogMessageCache dialogMessageCache=new DialogMessageCache(roomJidId,senderId,message,attachURL,historyMessage.getDateSent());
    saveChatMessage(context,dialogMessageCache);
  }
}","public static void saveChatMessages(Context context,List<QBHistoryMessage> messagesList,String roomJidId,boolean isGroupMessage){
  for (  QBHistoryMessage historyMessage : messagesList) {
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    String attachURL;
    if (TextUtils.isEmpty(message)) {
      attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    }
 else {
      attachURL=Consts.EMPTY_STRING;
    }
    if (TextUtils.isEmpty(message) && TextUtils.isEmpty(attachURL)) {
      if (isGroupMessage) {
        message=getMessageForNotification(context,senderId);
      }
 else {
        return;
      }
    }
    DialogMessageCache dialogMessageCache=new DialogMessageCache(roomJidId,senderId,message,attachURL,historyMessage.getDateSent(),true);
    saveChatMessage(context,dialogMessageCache);
  }
}",0.9971477467199088
114612,"public static void updateDialog(Context context,QBDialog dialog,String roomJidId){
  ContentResolver resolver=context.getContentResolver();
  ContentValues values=new ContentValues();
  values.put(DialogTable.Cols.COUNT_UNREAD_MESSAGES,getCountUnreadMessagesByDialog(context,dialog));
  values.put(DialogTable.Cols.LAST_MESSAGE,dialog.getLastMessage());
  values.put(DialogTable.Cols.LAST_DATE_SENT,dialog.getLastMessageDateSent());
  String condition=DialogTable.Cols.ROOM_JID_ID + ""String_Node_Str"" + roomJidId+ ""String_Node_Str"";
  resolver.update(DialogTable.CONTENT_URI,values,condition,null);
}","public static void updateDialog(Context context,String roomJidId,String lastMessage,long dateSent){
  ContentResolver resolver=context.getContentResolver();
  ContentValues values=new ContentValues();
  values.put(DialogTable.Cols.COUNT_UNREAD_MESSAGES,getCountUnreadMessagesByRoomJid(context,roomJidId));
  values.put(DialogTable.Cols.LAST_MESSAGE,lastMessage);
  values.put(DialogTable.Cols.LAST_DATE_SENT,dateSent);
  String condition=DialogTable.Cols.ROOM_JID_ID + ""String_Node_Str"" + roomJidId+ ""String_Node_Str"";
  resolver.update(DialogTable.CONTENT_URI,values,condition,null);
}",0.8920741989881956
114613,"public static void updateStatusMessage(Context context,String messageId,boolean isRead){
  ContentValues values=new ContentValues();
  String condition=DialogMessageTable.Cols.ID + ""String_Node_Str"" + messageId+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(DialogMessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > Consts.ZERO_INT_VALUE) {
    values.put(DialogMessageTable.Cols.IS_READ,isRead);
    resolver.update(DialogMessageTable.CONTENT_URI,values,condition,null);
    cursor.close();
  }
}","public static void updateStatusMessage(Context context,String messageId,boolean isRead){
  ContentValues values=new ContentValues();
  String condition=DialogMessageTable.Cols.ID + ""String_Node_Str"" + messageId+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(DialogMessageTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    String roomJidId=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ROOM_JID_ID));
    String message=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.BODY));
    long time=cursor.getLong(cursor.getColumnIndex(DialogMessageTable.Cols.TIME));
    values.put(DialogMessageTable.Cols.IS_READ,isRead);
    resolver.update(DialogMessageTable.CONTENT_URI,values,condition,null);
    cursor.close();
    updateDialog(context,roomJidId,message,time);
  }
}",0.7601328903654485
114614,"public static void saveChatMessage(Context context,DialogMessageCache dialogMessageCache){
  ContentValues values=new ContentValues();
  values.put(DialogMessageTable.Cols.ROOM_JID_ID,dialogMessageCache.getRoomJidId());
  values.put(DialogMessageTable.Cols.SENDER_ID,dialogMessageCache.getSenderId());
  values.put(DialogMessageTable.Cols.BODY,dialogMessageCache.getMessage());
  values.put(DialogMessageTable.Cols.TIME,dialogMessageCache.getTime());
  values.put(DialogMessageTable.Cols.ATTACH_FILE_ID,dialogMessageCache.getAttachUrl());
  values.put(DialogMessageTable.Cols.IS_READ,false);
  context.getContentResolver().insert(DialogMessageTable.CONTENT_URI,values);
}","public static void saveChatMessage(Context context,DialogMessageCache dialogMessageCache){
  ContentValues values=new ContentValues();
  values.put(DialogMessageTable.Cols.ROOM_JID_ID,dialogMessageCache.getRoomJidId());
  values.put(DialogMessageTable.Cols.SENDER_ID,dialogMessageCache.getSenderId());
  values.put(DialogMessageTable.Cols.BODY,dialogMessageCache.getMessage());
  values.put(DialogMessageTable.Cols.TIME,dialogMessageCache.getTime());
  values.put(DialogMessageTable.Cols.ATTACH_FILE_ID,dialogMessageCache.getAttachUrl());
  values.put(DialogMessageTable.Cols.IS_READ,dialogMessageCache.isRead());
  context.getContentResolver().insert(DialogMessageTable.CONTENT_URI,values);
  updateDialog(context,dialogMessageCache.getRoomJidId(),dialogMessageCache.getMessage(),dialogMessageCache.getTime());
}",0.8975741239892183
114615,"public DialogMessageCache(String roomJidId,Integer senderId,String message,String attachUrl,long time){
  this.roomJidId=roomJidId;
  this.senderId=senderId;
  this.message=message;
  this.attachUrl=attachUrl;
  this.time=time;
}","public DialogMessageCache(String roomJidId,Integer senderId,String message,String attachUrl,long time,boolean isRead){
  this.roomJidId=roomJidId;
  this.senderId=senderId;
  this.message=message;
  this.attachUrl=attachUrl;
  this.time=time;
  this.isRead=isRead;
}",0.9252525252525252
114616,"public void sendPrivateMessage(String message) throws XMPPException, SmackException.NotConnectedException {
  QBChatMessage chatMessage=getQBChatMessage(message);
  privateChat.sendMessage(chatMessage);
  String roomJidId=opponentId + Consts.EMPTY_STRING;
  String attachUrl=Consts.EMPTY_STRING;
  long time=DateUtils.getCurrentTime();
  saveMessageToCache(new DialogMessageCache(roomJidId,user.getId(),chatMessage.getBody(),attachUrl,time));
}","public void sendPrivateMessage(String message) throws XMPPException, SmackException.NotConnectedException {
  QBChatMessage chatMessage=getQBChatMessage(message);
  privateChat.sendMessage(chatMessage);
  String roomJidId=opponentId + Consts.EMPTY_STRING;
  String attachUrl=Consts.EMPTY_STRING;
  long time=DateUtils.getCurrentTime();
  saveMessageToCache(new DialogMessageCache(roomJidId,user.getId(),chatMessage.getBody(),attachUrl,time,true));
}",0.9944008958566628
114617,"@Override public void processMessage(QBRoomChat roomChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  String attachUrl=getAttachUrlIfExists(chatMessage);
  long time=Integer.parseInt(chatMessage.getProperty(propertyDateSent).toString());
  saveMessageToCache(new DialogMessageCache(roomChat.getJid(),chatMessage.getSenderId(),chatMessage.getBody(),attachUrl,time));
  if (!chatMessage.getSenderId().equals(user.getId())) {
    notifyMessageReceived(chatMessage,friend);
  }
}","@Override public void processMessage(QBRoomChat roomChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  String attachUrl=getAttachUrlIfExists(chatMessage);
  long time=Integer.parseInt(chatMessage.getProperty(propertyDateSent).toString());
  saveMessageToCache(new DialogMessageCache(roomChat.getJid(),chatMessage.getSenderId(),chatMessage.getBody(),attachUrl,time,false));
  if (!chatMessage.getSenderId().equals(user.getId())) {
    notifyMessageReceived(chatMessage,friend);
  }
}",0.9944954128440368
114618,"public void updateDialog(QBDialog dialog,String roomJidId){
  DatabaseManager.updateDialog(context,dialog,roomJidId);
}","public void updateDialog(QBDialog dialog,String roomJidId){
  DatabaseManager.updateDialog(context,roomJidId,dialog.getLastMessage(),dialog.getLastMessageDateSent());
}",0.7804878048780488
114619,"public void sendPrivateMessageWithAttachImage(QBFile file) throws XMPPException, SmackException.NotConnectedException {
  QBChatMessage chatMessage=getQBChatMessageWithImage(file);
  privateChat.sendMessage(chatMessage);
  String roomJidId=opponentId + Consts.EMPTY_STRING;
  String attachUrl=file.getPublicUrl();
  long time=DateUtils.getCurrentTime();
  saveMessageToCache(new DialogMessageCache(roomJidId,user.getId(),chatMessage.getBody(),attachUrl,time));
}","public void sendPrivateMessageWithAttachImage(QBFile file) throws XMPPException, SmackException.NotConnectedException {
  QBChatMessage chatMessage=getQBChatMessageWithImage(file);
  privateChat.sendMessage(chatMessage);
  String roomJidId=opponentId + Consts.EMPTY_STRING;
  String attachUrl=file.getPublicUrl();
  long time=DateUtils.getCurrentTime();
  saveMessageToCache(new DialogMessageCache(roomJidId,user.getId(),chatMessage.getBody(),attachUrl,time,true));
}",0.9946178686759956
114620,"@Override public void bindView(View view,Context context,Cursor cursor){
  ViewHolder viewHolder=(ViewHolder)view.getTag();
  String avatarUrl=null;
  String senderName;
  String body=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.BODY));
  String attachUrl=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ATTACH_FILE_ID));
  int senderId=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.SENDER_ID));
  long time=cursor.getLong(cursor.getColumnIndex(DialogMessageTable.Cols.TIME));
  viewHolder.attachImageView.setVisibility(View.GONE);
  if (isOwnMessage(senderId)) {
    senderName=currentUser.getFullName();
    avatarUrl=getAvatarUrlForCurrentUser();
  }
 else {
    Friend senderFriend=DatabaseManager.getFriendById(context,senderId);
    if (senderFriend != null) {
      senderName=senderFriend.getFullname();
      avatarUrl=getAvatarUrlForFriend(senderFriend);
    }
 else {
      senderName=senderId + Consts.EMPTY_STRING;
    }
  }
  viewHolder.nameTextView.setText(senderName);
  if (!TextUtils.isEmpty(attachUrl)) {
    viewHolder.messageTextView.setVisibility(View.GONE);
    displayAttachImage(attachUrl,viewHolder.pleaseWaitTextView,viewHolder.attachImageView,viewHolder.progressBar);
  }
 else {
    viewHolder.messageTextView.setVisibility(View.VISIBLE);
    viewHolder.attachImageView.setVisibility(View.GONE);
    viewHolder.messageTextView.setText(body);
  }
  viewHolder.timeTextView.setText(DateUtils.longToMessageDate(time));
  if (dialog != null) {
    boolean isRead=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.IS_READ)) > 0;
    if (!isRead) {
      String messageId=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ID));
      QBUpdateStatusMessageCommand.start(context,messageId,true);
    }
  }
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
}","@Override public void bindView(View view,Context context,Cursor cursor){
  ViewHolder viewHolder=(ViewHolder)view.getTag();
  String avatarUrl=null;
  String senderName;
  String body=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.BODY));
  String attachUrl=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ATTACH_FILE_ID));
  int senderId=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.SENDER_ID));
  long time=cursor.getLong(cursor.getColumnIndex(DialogMessageTable.Cols.TIME));
  viewHolder.attachImageView.setVisibility(View.GONE);
  if (isOwnMessage(senderId)) {
    senderName=currentUser.getFullName();
    avatarUrl=getAvatarUrlForCurrentUser();
  }
 else {
    Friend senderFriend=DatabaseManager.getFriendById(context,senderId);
    if (senderFriend != null) {
      senderName=senderFriend.getFullname();
      avatarUrl=getAvatarUrlForFriend(senderFriend);
    }
 else {
      senderName=senderId + Consts.EMPTY_STRING;
    }
  }
  viewHolder.nameTextView.setText(senderName);
  if (!TextUtils.isEmpty(attachUrl)) {
    viewHolder.messageTextView.setVisibility(View.GONE);
    displayAttachImage(attachUrl,viewHolder.pleaseWaitTextView,viewHolder.attachImageView,viewHolder.progressBar);
  }
 else {
    viewHolder.messageTextView.setVisibility(View.VISIBLE);
    viewHolder.attachImageView.setVisibility(View.GONE);
    viewHolder.messageTextView.setText(body);
  }
  viewHolder.timeTextView.setText(DateUtils.longToMessageDate(time));
  boolean isRead=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.IS_READ)) > Consts.ZERO_INT_VALUE;
  if (dialog != null && !isRead) {
    String messageId=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ID));
    QBUpdateStatusMessageCommand.start(context,messageId,true);
  }
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
}",0.9779332615715824
114621,"@Override public void bindView(View view,final Context context,Cursor cursor){
  final ViewHolder viewHolder=(ViewHolder)view.getTag();
  String avatarUrl;
  String body=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.BODY));
  String attachUrl=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ATTACH_FILE_ID));
  int senderId=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.SENDER_ID));
  long time=cursor.getLong(cursor.getColumnIndex(DialogMessageTable.Cols.TIME));
  viewHolder.attachImageView.setVisibility(View.GONE);
  if (isOwnMessage(senderId)) {
    avatarUrl=getAvatarUrlForCurrentUser();
  }
 else {
    avatarUrl=getAvatarUrlForFriend(opponentFriend);
  }
  if (!TextUtils.isEmpty(attachUrl)) {
    viewHolder.messageTextView.setVisibility(View.GONE);
    displayAttachImage(attachUrl,viewHolder.pleaseWaitTextView,viewHolder.attachImageView,viewHolder.progressBar);
  }
 else {
    viewHolder.messageTextView.setVisibility(View.VISIBLE);
    viewHolder.attachImageView.setVisibility(View.GONE);
    viewHolder.messageTextView.setText(body);
  }
  viewHolder.timeTextView.setText(DateUtils.longToMessageDate(time));
  if (dialog != null) {
    boolean isRead=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.IS_READ)) > 0;
    if (!isRead) {
      String messageId=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ID));
      QBUpdateStatusMessageCommand.start(context,messageId,true);
    }
  }
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
}","@Override public void bindView(View view,final Context context,Cursor cursor){
  final ViewHolder viewHolder=(ViewHolder)view.getTag();
  String avatarUrl;
  String body=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.BODY));
  String attachUrl=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ATTACH_FILE_ID));
  int senderId=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.SENDER_ID));
  long time=cursor.getLong(cursor.getColumnIndex(DialogMessageTable.Cols.TIME));
  viewHolder.attachImageView.setVisibility(View.GONE);
  if (isOwnMessage(senderId)) {
    avatarUrl=getAvatarUrlForCurrentUser();
  }
 else {
    avatarUrl=getAvatarUrlForFriend(opponentFriend);
  }
  if (!TextUtils.isEmpty(attachUrl)) {
    viewHolder.messageTextView.setVisibility(View.GONE);
    displayAttachImage(attachUrl,viewHolder.pleaseWaitTextView,viewHolder.attachImageView,viewHolder.progressBar);
  }
 else {
    viewHolder.messageTextView.setVisibility(View.VISIBLE);
    viewHolder.attachImageView.setVisibility(View.GONE);
    viewHolder.messageTextView.setText(body);
  }
  viewHolder.timeTextView.setText(DateUtils.longToMessageDate(time));
  boolean isRead=cursor.getInt(cursor.getColumnIndex(DialogMessageTable.Cols.IS_READ)) > Consts.ZERO_INT_VALUE;
  if (dialog != null && !isRead) {
    String messageId=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.ID));
    QBUpdateStatusMessageCommand.start(context,messageId,true);
  }
  displayAvatarImage(avatarUrl,viewHolder.avatarImageView);
}",0.9733072916666666
114622,"private void saveChanges(final String fullname,final String email) throws IOException {
  if (!isUserDataCorrect()) {
    DialogUtils.showLong(this,getString(R.string.dlg_not_all_fields_entered));
    return;
  }
  showProgress();
  user.setFullName(fullname);
  user.setEmail(email);
  if (isNeedUpdateAvatar) {
    new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
  }
 else {
    String status=statusMessageEditText.getText().toString();
    QBUpdateUserCommand.start(this,user,null,status);
  }
}","private void saveChanges(final String fullname,final String email) throws IOException {
  if (!isUserDataCorrect()) {
    DialogUtils.showLong(this,getString(R.string.dlg_not_all_fields_entered));
    return;
  }
  showProgress();
  App.getInstance().getPrefsHelper().savePref(PrefsHelper.PREF_REMEMBER_ME,false);
  user.setFullName(fullname);
  user.setEmail(email);
  if (isNeedUpdateAvatar) {
    new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
  }
 else {
    String status=statusMessageEditText.getText().toString();
    QBUpdateUserCommand.start(this,user,null,status);
  }
}",0.9271290605794557
114623,"public void loginWithFacebook(){
  Session session=Session.getActiveSession();
  if (!session.isOpened() && !session.isClosed()) {
    session.openForRead(new Session.OpenRequest(activity).setCallback(facebookStatusCallback));
  }
 else {
    Session.openActiveSession(activity,true,facebookStatusCallback);
  }
}","public void loginWithFacebook(){
  TipsManager.setIsJustLogined(true);
  Session session=Session.getActiveSession();
  if (!session.isOpened() && !session.isClosed()) {
    session.openForRead(new Session.OpenRequest(activity).setCallback(facebookStatusCallback));
  }
 else {
    Session.openActiveSession(activity,true,facebookStatusCallback);
  }
}",0.9427710843373494
114624,"public static void saveDialog(Context context,QBDialog dialog){
  ContentValues values=getContentValuesDialogTable(dialog);
  String condition=DialogTable.Cols.DIALOG_ID + ""String_Node_Str"" + dialog.getDialogId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(DialogTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > Consts.ZERO_VALUE) {
    resolver.update(DialogTable.CONTENT_URI,values,condition,null);
  }
 else {
    resolver.insert(DialogTable.CONTENT_URI,values);
  }
}","public static void saveDialog(Context context,QBDialog dialog,String roomJidId){
  unreadMessagesCount=Consts.ZERO_VALUE;
  ContentValues values;
  String condition=DialogTable.Cols.ROOM_JID_ID + ""String_Node_Str"" + roomJidId+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(DialogTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > Consts.ZERO_VALUE) {
    values=getContentValuesForUpdateDialogTable(dialog);
    resolver.update(DialogTable.CONTENT_URI,values,condition,null);
  }
 else {
    values=getContentValuesForCreateDialogTable(dialog,roomJidId);
    resolver.insert(DialogTable.CONTENT_URI,values);
  }
}",0.2408702408702408
114625,"public static void saveChatMessage(Context context,DialogMessageCache dialogMessageCache){
  ContentValues values=new ContentValues();
  values.put(DialogMessageTable.Cols.ROOM_JID_ID,dialogMessageCache.getRoomJidId());
  values.put(DialogMessageTable.Cols.SENDER_ID,dialogMessageCache.getSenderId());
  values.put(DialogMessageTable.Cols.BODY,dialogMessageCache.getMessage());
  values.put(DialogMessageTable.Cols.TIME,System.currentTimeMillis());
  values.put(DialogMessageTable.Cols.ATTACH_FILE_ID,dialogMessageCache.getAttachUrl());
  context.getContentResolver().insert(DialogMessageTable.CONTENT_URI,values);
}","public static void saveChatMessage(Context context,DialogMessageCache dialogMessageCache){
  unreadMessagesCount++;
  ContentValues values=new ContentValues();
  values.put(DialogMessageTable.Cols.ROOM_JID_ID,dialogMessageCache.getRoomJidId());
  values.put(DialogMessageTable.Cols.SENDER_ID,dialogMessageCache.getSenderId());
  values.put(DialogMessageTable.Cols.BODY,dialogMessageCache.getMessage());
  values.put(DialogMessageTable.Cols.TIME,System.currentTimeMillis());
  values.put(DialogMessageTable.Cols.ATTACH_FILE_ID,dialogMessageCache.getAttachUrl());
  context.getContentResolver().insert(DialogMessageTable.CONTENT_URI,values);
  updateUnreadMessagesCount(context,dialogMessageCache.getRoomJidId(),dialogMessageCache.getMessage());
}",0.90521675238795
114626,"public static void saveDialogs(Context context,List<QBDialog> dialogsList){
  for (  QBDialog dialog : dialogsList) {
    saveDialog(context,dialog);
  }
}","public static void saveDialogs(Context context,List<QBDialog> dialogsList){
  for (  QBDialog dialog : dialogsList) {
    if (dialog.getType().equals(QBDialogType.PRIVATE)) {
      String roomJidId=ChatUtils.getOccupantIdFromList(dialog.getOccupants()) + Consts.EMPTY_STRING;
      saveDialog(context,dialog,roomJidId);
    }
 else {
      saveDialog(context,dialog,dialog.getRoomJid());
    }
  }
}",0.5595667870036101
114627,"public static void start(Context context,Object chatId,String lastMessage,int countMessage){
  Intent intent=new Intent(QBServiceConsts.UPDATE_CHAT_DIALOG_ACTION,null,context,QBService.class);
  intent.putExtra(QBServiceConsts.EXTRA_ROOM_JID_ID,(java.io.Serializable)chatId);
  intent.putExtra(QBServiceConsts.EXTRA_LAST_CHAT_MESSAGE,lastMessage);
  intent.putExtra(QBServiceConsts.EXTRA_DIALOG_COUNT_UNREAD_MESSAGE,countMessage);
  context.startService(intent);
}","public static void start(Context context,QBDialog dialog,String roomJidId){
  Intent intent=new Intent(QBServiceConsts.UPDATE_CHAT_DIALOG_ACTION,null,context,QBService.class);
  intent.putExtra(QBServiceConsts.EXTRA_ROOM_JID_ID,roomJidId);
  intent.putExtra(QBServiceConsts.EXTRA_DIALOG,dialog);
  context.startService(intent);
}",0.648171500630517
114628,"@Override public Bundle perform(Bundle extras) throws Exception {
  Object chatId=extras.getInt(QBServiceConsts.EXTRA_ROOM_JID_ID);
  String lastMessage=extras.getString(QBServiceConsts.EXTRA_LAST_CHAT_MESSAGE);
  int countMessage=extras.getInt(QBServiceConsts.EXTRA_DIALOG_COUNT_UNREAD_MESSAGE);
  return null;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  String roomJidId=extras.getString(QBServiceConsts.EXTRA_ROOM_JID_ID);
  chatHelper.updateLoadedChatDialog(dialog,roomJidId);
  return null;
}",0.5099337748344371
114629,"public QBDialog createRoomChat(String roomName,List<Integer> friendIdsList) throws SmackException, XMPPException, QBResponseException {
  ArrayList<Integer> occupantIdsList=ChatUtils.getOccupantIdsWithUserList(friendIdsList);
  QBDialog dialog=roomChatManager.createDialog(roomName,QBDialogType.GROUP,occupantIdsList);
  joinRoomChat(dialog.getRoomJid());
  inviteFriendsToRoom(dialog,friendIdsList);
  saveDialogToCache(dialog);
  return dialog;
}","public QBDialog createRoomChat(String roomName,List<Integer> friendIdsList) throws SmackException, XMPPException, QBResponseException {
  ArrayList<Integer> occupantIdsList=ChatUtils.getOccupantIdsWithUserList(friendIdsList);
  QBDialog dialog=roomChatManager.createDialog(roomName,QBDialogType.GROUP,occupantIdsList);
  joinRoomChat(dialog.getRoomJid());
  inviteFriendsToRoom(dialog,friendIdsList);
  saveDialogToCache(dialog,dialog.getRoomJid());
  return dialog;
}",0.9781659388646288
114630,"private void processIfInvitationToRoomMessage(Friend sender,QBChatMessage chatMessage){
  if (ChatUtils.isNotificationMessage(chatMessage)) {
    QBDialog dialog=ChatUtils.parseDialogFromMessage(chatMessage);
    tryJoinRoomChat(dialog.getRoomJid());
    saveDialogToCache(dialog);
    String message=context.getResources().getString(R.string.user_created_room,sender.getFullname(),dialog.getName());
    chatMessage.setBody(message);
  }
}","private void processIfInvitationToRoomMessage(Friend sender,QBChatMessage chatMessage){
  if (ChatUtils.isNotificationMessage(chatMessage)) {
    QBDialog dialog=ChatUtils.parseDialogFromMessage(chatMessage);
    tryJoinRoomChat(dialog.getRoomJid());
    saveDialogToCache(dialog,dialog.getRoomJid());
    String message=context.getResources().getString(R.string.user_created_room,sender.getFullname(),dialog.getName());
    chatMessage.setBody(message);
  }
}",0.9777777777777776
114631,"private void saveDialogToCache(QBDialog dialog){
  DatabaseManager.saveDialog(context,dialog);
}","private void saveDialogToCache(QBDialog dialog,String roomJidId){
  DatabaseManager.saveDialog(context,dialog,roomJidId);
}",0.8767123287671232
114632,"private void startUpdateChatDialog(){
  Cursor cursor=(Cursor)messagesAdapter.getItem(messagesAdapter.getCount() - 1);
  String lastMessage=cursor.getString(cursor.getColumnIndex(DialogMessageTable.Cols.BODY));
  QBUpdateDialogCommand.start(this,roomJidId,lastMessage,Consts.ZERO_VALUE);
}","private void startUpdateChatDialog(){
  QBUpdateDialogCommand.start(this,getQBDialog(),roomJidId);
}",0.442159383033419
114633,"private static UriMatcher buildUriMatcher(){
  final UriMatcher matcher=new UriMatcher(UriMatcher.NO_MATCH);
  matcher.addURI(AUTHORITY,FriendTable.PATH,FriendTable.PATH_TOKEN);
  matcher.addURI(AUTHORITY,ChatMessagesTable.PATH,ChatMessagesTable.PATH_TOKEN);
  return matcher;
}","private static UriMatcher buildUriMatcher(){
  final UriMatcher matcher=new UriMatcher(UriMatcher.NO_MATCH);
  matcher.addURI(AUTHORITY,FriendTable.PATH,FriendTable.PATH_TOKEN);
  matcher.addURI(AUTHORITY,ChatMessageTable.PATH,ChatMessageTable.PATH_TOKEN);
  matcher.addURI(AUTHORITY,ChatTable.PATH,ChatTable.PATH_TOKEN);
  return matcher;
}",0.8917609046849758
114634,"@Override public void onCreate(SQLiteDatabase db){
  createFriendTable(db);
  createChatMessageTable(db);
}","@Override public void onCreate(SQLiteDatabase db){
  createFriendTable(db);
  createChatMessageTable(db);
  createChatTable(db);
}",0.9029535864978904
114635,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  dropTable(db,FriendTable.TABLE_NAME);
  dropTable(db,ChatMessagesTable.TABLE_NAME);
  onCreate(db);
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  dropTable(db,FriendTable.TABLE_NAME);
  dropTable(db,ChatMessageTable.TABLE_NAME);
  dropTable(db,ChatTable.TABLE_NAME);
  onCreate(db);
}",0.8943488943488943
114636,"private void createChatMessageTable(SQLiteDatabase db){
  StringBuilder privateChatMessagesTableFields=new StringBuilder();
  privateChatMessagesTableFields.append(ChatMessagesTable.Cols.ID).append(""String_Node_Str"").append(ChatMessagesTable.Cols.BODY).append(""String_Node_Str"").append(ChatMessagesTable.Cols.SENDER_ID).append(""String_Node_Str"").append(ChatMessagesTable.Cols.TIME).append(""String_Node_Str"").append(ChatMessagesTable.Cols.GROUP_ID).append(""String_Node_Str"").append(ChatMessagesTable.Cols.SENDER_NAME).append(""String_Node_Str"").append(ChatMessagesTable.Cols.OPPONENT_NAME).append(""String_Node_Str"").append(ChatMessagesTable.Cols.ATTACH_FILE_ID).append(""String_Node_Str"").append(ChatMessagesTable.Cols.CHAT_ID).append(""String_Node_Str"");
  createTable(db,ChatMessagesTable.TABLE_NAME,privateChatMessagesTableFields.toString());
}","private void createChatMessageTable(SQLiteDatabase db){
  StringBuilder chatMessageTableFields=new StringBuilder();
  chatMessageTableFields.append(ChatMessageTable.Cols.ID).append(""String_Node_Str"").append(ChatMessageTable.Cols.BODY).append(""String_Node_Str"").append(ChatMessageTable.Cols.SENDER_ID).append(""String_Node_Str"").append(ChatMessageTable.Cols.TIME).append(""String_Node_Str"").append(ChatMessageTable.Cols.GROUP_ID).append(""String_Node_Str"").append(ChatMessageTable.Cols.ATTACH_FILE_ID).append(""String_Node_Str"").append(ChatMessageTable.Cols.CHAT_ID).append(""String_Node_Str"");
  createTable(db,ChatMessageTable.TABLE_NAME,chatMessageTableFields.toString());
}",0.8428005284015853
114637,"public static void deleteAllChats(Context context){
  context.getContentResolver().delete(ChatMessagesTable.CONTENT_URI,null,null);
}","public static void deleteAllChats(Context context){
  context.getContentResolver().delete(ChatTable.CONTENT_URI,null,null);
}",0.9689922480620154
114638,"public static void deleteMessagesByChatId(Context context,int chatId){
  context.getContentResolver().delete(ChatMessagesTable.CONTENT_URI,ChatMessagesTable.Cols.CHAT_ID + ""String_Node_Str"" + chatId,null);
}","public static void deleteMessagesByChatId(Context context,int chatId){
  context.getContentResolver().delete(ChatMessageTable.CONTENT_URI,ChatMessageTable.Cols.CHAT_ID + ""String_Node_Str"" + chatId,null);
}",0.9951456310679612
114639,"public static void saveFriend(Context context,Friend friend){
  ContentValues values=getContentValues(friend);
  String condition=FriendTable.Cols.ID + ""String_Node_Str"" + friend.getId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(FriendTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > Consts.ZERO_VALUE) {
    resolver.update(FriendTable.CONTENT_URI,values,condition,null);
  }
 else {
    resolver.insert(FriendTable.CONTENT_URI,values);
  }
}","public static void saveFriend(Context context,Friend friend){
  ContentValues values=getContentValuesFriendTable(friend);
  String condition=FriendTable.Cols.ID + ""String_Node_Str"" + friend.getId()+ ""String_Node_Str"";
  ContentResolver resolver=context.getContentResolver();
  Cursor cursor=resolver.query(FriendTable.CONTENT_URI,null,condition,null,null);
  if (cursor != null && cursor.getCount() > Consts.ZERO_VALUE) {
    resolver.update(FriendTable.CONTENT_URI,values,condition,null);
  }
 else {
    resolver.insert(FriendTable.CONTENT_URI,values);
  }
}",0.9900811541929666
114640,"public static void deleteMessagesByGroupId(Context context,String groupId){
  context.getContentResolver().delete(ChatMessagesTable.CONTENT_URI,ChatMessagesTable.Cols.GROUP_ID + ""String_Node_Str"" + groupId+ ""String_Node_Str"",null);
}","public static void deleteMessagesByGroupId(Context context,String groupId){
  context.getContentResolver().delete(ChatMessageTable.CONTENT_URI,ChatMessageTable.Cols.GROUP_ID + ""String_Node_Str"" + groupId+ ""String_Node_Str"",null);
}",0.9956896551724138
114641,"public static void saveChatMessage(Context context,ChatMessageCache chatMessageCache){
  ContentValues values=new ContentValues();
  values.put(ChatMessagesTable.Cols.BODY,chatMessageCache.getMessage());
  values.put(ChatMessagesTable.Cols.SENDER_ID,chatMessageCache.getSenderId());
  values.put(ChatMessagesTable.Cols.TIME,System.currentTimeMillis());
  values.put(ChatMessagesTable.Cols.ATTACH_FILE_ID,chatMessageCache.getAttachUrl());
  if (chatMessageCache.getRoomJid() != null) {
    values.put(ChatMessagesTable.Cols.GROUP_ID,chatMessageCache.getRoomJid());
  }
 else   if (chatMessageCache.getChatId() != null) {
    values.put(ChatMessagesTable.Cols.CHAT_ID,chatMessageCache.getChatId());
  }
  context.getContentResolver().insert(ChatMessagesTable.CONTENT_URI,values);
}","public static void saveChatMessage(Context context,ChatMessageCache chatMessageCache){
  ContentValues values=new ContentValues();
  values.put(ChatMessageTable.Cols.BODY,chatMessageCache.getMessage());
  values.put(ChatMessageTable.Cols.SENDER_ID,chatMessageCache.getSenderId());
  values.put(ChatMessageTable.Cols.TIME,System.currentTimeMillis());
  values.put(ChatMessageTable.Cols.ATTACH_FILE_ID,chatMessageCache.getAttachUrl());
  if (chatMessageCache.getRoomJid() != null) {
    values.put(ChatMessageTable.Cols.GROUP_ID,chatMessageCache.getRoomJid());
  }
 else   if (chatMessageCache.getChatId() != null) {
    values.put(ChatMessageTable.Cols.CHAT_ID,chatMessageCache.getChatId());
  }
  context.getContentResolver().insert(ChatMessageTable.CONTENT_URI,values);
}",0.9954867827208252
114642,"public static Cursor getAllPrivateChatMessagesByChatId(Context context,int chatId){
  return context.getContentResolver().query(ChatMessagesTable.CONTENT_URI,null,ChatMessagesTable.Cols.CHAT_ID + ""String_Node_Str"" + chatId,null,null);
}","public static Cursor getAllPrivateChatMessagesByChatId(Context context,int chatId){
  return context.getContentResolver().query(ChatMessageTable.CONTENT_URI,null,ChatMessageTable.Cols.CHAT_ID + ""String_Node_Str"" + chatId,null,null);
}",0.9957446808510638
114643,"public static Cursor getAllGroupChatMessagesByGroupId(Context context,String groupId){
  return context.getContentResolver().query(ChatMessagesTable.CONTENT_URI,null,ChatMessagesTable.Cols.GROUP_ID + ""String_Node_Str"" + ""String_Node_Str""+ groupId+ ""String_Node_Str"",null,null);
}","public static Cursor getAllGroupChatMessagesByGroupId(Context context,String groupId){
  return context.getContentResolver().query(ChatMessageTable.CONTENT_URI,null,ChatMessageTable.Cols.GROUP_ID + ""String_Node_Str"" + ""String_Node_Str""+ groupId+ ""String_Node_Str"",null,null);
}",0.9964028776978416
114644,"@Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  SQLiteDatabase db=dbHelper.getReadableDatabase();
  final int token=ContentDescriptor.URI_MATCHER.match(uri);
  Cursor result=null;
switch (token) {
case FriendTable.PATH_TOKEN:
{
      result=doQuery(db,uri,FriendTable.TABLE_NAME,projection,selection,selectionArgs,sortOrder);
      break;
    }
case ChatMessagesTable.PATH_TOKEN:
{
    result=doQuery(db,uri,ChatMessagesTable.TABLE_NAME,projection,selection,selectionArgs,sortOrder);
    break;
  }
}
return result;
}","@Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  SQLiteDatabase db=dbHelper.getReadableDatabase();
  final int token=ContentDescriptor.URI_MATCHER.match(uri);
  Cursor result=null;
switch (token) {
case FriendTable.PATH_TOKEN:
{
      result=doQuery(db,uri,FriendTable.TABLE_NAME,projection,selection,selectionArgs,sortOrder);
      break;
    }
case ChatMessageTable.PATH_TOKEN:
{
    result=doQuery(db,uri,ChatMessageTable.TABLE_NAME,projection,selection,selectionArgs,sortOrder);
    break;
  }
case ChatTable.PATH_TOKEN:
{
  result=doQuery(db,uri,ChatTable.TABLE_NAME,projection,selection,selectionArgs,sortOrder);
  break;
}
}
return result;
}",0.8744257274119449
114645,"@Override public int bulkInsert(Uri uri,ContentValues[] values){
  String table=null;
  int token=ContentDescriptor.URI_MATCHER.match(uri);
switch (token) {
case FriendTable.PATH_TOKEN:
{
      table=FriendTable.TABLE_NAME;
      break;
    }
case ChatMessagesTable.PATH_TOKEN:
{
    table=ChatMessagesTable.TABLE_NAME;
    break;
  }
}
SQLiteDatabase db=dbHelper.getWritableDatabase();
db.beginTransaction();
for (ContentValues cv : values) {
db.insert(table,null,cv);
}
db.setTransactionSuccessful();
db.endTransaction();
return values.length;
}","@Override public int bulkInsert(Uri uri,ContentValues[] values){
  String table=null;
  int token=ContentDescriptor.URI_MATCHER.match(uri);
switch (token) {
case FriendTable.PATH_TOKEN:
{
      table=FriendTable.TABLE_NAME;
      break;
    }
case ChatMessageTable.PATH_TOKEN:
{
    table=ChatMessageTable.TABLE_NAME;
    break;
  }
case ChatTable.PATH_TOKEN:
{
  table=ChatTable.TABLE_NAME;
  break;
}
}
SQLiteDatabase db=dbHelper.getWritableDatabase();
db.beginTransaction();
for (ContentValues cv : values) {
db.insert(table,null,cv);
}
db.setTransactionSuccessful();
db.endTransaction();
return values.length;
}",0.9380378657487092
114646,"@Override public Uri insert(Uri uri,ContentValues values){
  SQLiteDatabase db=dbHelper.getWritableDatabase();
  int token=ContentDescriptor.URI_MATCHER.match(uri);
  Uri result=null;
switch (token) {
case FriendTable.PATH_TOKEN:
{
      result=doInsert(db,FriendTable.TABLE_NAME,FriendTable.CONTENT_URI,uri,values);
      break;
    }
case ChatMessagesTable.PATH_TOKEN:
{
    result=doInsert(db,ChatMessagesTable.TABLE_NAME,ChatMessagesTable.CONTENT_URI,uri,values);
    break;
  }
}
if (result == null) {
throw new IllegalArgumentException(UNKNOWN_URI + uri);
}
return result;
}","@Override public Uri insert(Uri uri,ContentValues values){
  SQLiteDatabase db=dbHelper.getWritableDatabase();
  int token=ContentDescriptor.URI_MATCHER.match(uri);
  Uri result=null;
switch (token) {
case FriendTable.PATH_TOKEN:
{
      result=doInsert(db,FriendTable.TABLE_NAME,FriendTable.CONTENT_URI,uri,values);
      break;
    }
case ChatMessageTable.PATH_TOKEN:
{
    result=doInsert(db,ChatMessageTable.TABLE_NAME,ChatMessageTable.CONTENT_URI,uri,values);
    break;
  }
case ChatTable.PATH_TOKEN:
{
  result=doInsert(db,ChatTable.TABLE_NAME,ChatTable.CONTENT_URI,uri,values);
  break;
}
}
if (result == null) {
throw new IllegalArgumentException(UNKNOWN_URI + uri);
}
return result;
}",0.9058084772370488
114647,"@Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){
  SQLiteDatabase db=dbHelper.getWritableDatabase();
  int token=ContentDescriptor.URI_MATCHER.match(uri);
  int result=0;
switch (token) {
case FriendTable.PATH_TOKEN:
{
      result=doUpdate(db,uri,FriendTable.TABLE_NAME,selection,selectionArgs,values);
      break;
    }
case ChatMessagesTable.PATH_TOKEN:
{
    result=doUpdate(db,uri,ChatMessagesTable.TABLE_NAME,selection,selectionArgs,values);
    break;
  }
}
return result;
}","@Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){
  SQLiteDatabase db=dbHelper.getWritableDatabase();
  int token=ContentDescriptor.URI_MATCHER.match(uri);
  int result=Consts.ZERO_VALUE;
switch (token) {
case FriendTable.PATH_TOKEN:
{
      result=doUpdate(db,uri,FriendTable.TABLE_NAME,selection,selectionArgs,values);
      break;
    }
case ChatMessageTable.PATH_TOKEN:
{
    result=doUpdate(db,uri,ChatMessageTable.TABLE_NAME,selection,selectionArgs,values);
    break;
  }
case ChatTable.PATH_TOKEN:
{
  result=doUpdate(db,uri,ChatTable.TABLE_NAME,selection,selectionArgs,values);
  break;
}
}
return result;
}",0.858813700918964
114648,"@Override public int delete(Uri uri,String selection,String[] selectionArgs){
  SQLiteDatabase db=dbHelper.getWritableDatabase();
  int token=ContentDescriptor.URI_MATCHER.match(uri);
  int result=0;
switch (token) {
case FriendTable.PATH_TOKEN:
{
      result=doDelete(db,uri,FriendTable.TABLE_NAME,selection,selectionArgs);
      break;
    }
case ChatMessagesTable.PATH_TOKEN:
{
    result=doDelete(db,uri,ChatMessagesTable.TABLE_NAME,selection,selectionArgs);
    break;
  }
}
return result;
}","@Override public int delete(Uri uri,String selection,String[] selectionArgs){
  SQLiteDatabase db=dbHelper.getWritableDatabase();
  int token=ContentDescriptor.URI_MATCHER.match(uri);
  int result=Consts.ZERO_VALUE;
switch (token) {
case FriendTable.PATH_TOKEN:
{
      result=doDelete(db,uri,FriendTable.TABLE_NAME,selection,selectionArgs);
      break;
    }
case ChatMessageTable.PATH_TOKEN:
{
    result=doDelete(db,uri,ChatMessageTable.TABLE_NAME,selection,selectionArgs);
    break;
  }
case ChatTable.PATH_TOKEN:
{
  result=doDelete(db,uri,ChatTable.TABLE_NAME,selection,selectionArgs);
  break;
}
}
return result;
}",0.8553571428571428
114649,"public static void saveChatMessages(Context context,List<QBHistoryMessage> messagesList,String roomJidId){
  for (  QBHistoryMessage historyMessage : messagesList) {
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    String attachURL;
    if (TextUtils.isEmpty(message)) {
      attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    }
 else {
      attachURL=Consts.EMPTY_STRING;
    }
    DialogMessageCache dialogMessageCache=new DialogMessageCache(roomJidId,senderId,message,attachURL);
    saveChatMessage(context,dialogMessageCache);
  }
}","public static void saveChatMessages(Context context,List<QBHistoryMessage> messagesList,String roomJidId){
  for (  QBHistoryMessage historyMessage : messagesList) {
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    String attachURL;
    if (TextUtils.isEmpty(message)) {
      attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    }
 else {
      attachURL=Consts.EMPTY_STRING;
    }
    DialogMessageCache dialogMessageCache=new DialogMessageCache(roomJidId,senderId,message,attachURL,historyMessage.getDateSent());
    saveChatMessage(context,dialogMessageCache);
  }
}",0.9770387965162312
114650,"public static void saveChatMessage(Context context,DialogMessageCache dialogMessageCache){
  unreadMessagesCount++;
  ContentValues values=new ContentValues();
  values.put(DialogMessageTable.Cols.ROOM_JID_ID,dialogMessageCache.getRoomJidId());
  values.put(DialogMessageTable.Cols.SENDER_ID,dialogMessageCache.getSenderId());
  values.put(DialogMessageTable.Cols.BODY,dialogMessageCache.getMessage());
  values.put(DialogMessageTable.Cols.TIME,System.currentTimeMillis());
  values.put(DialogMessageTable.Cols.ATTACH_FILE_ID,dialogMessageCache.getAttachUrl());
  context.getContentResolver().insert(DialogMessageTable.CONTENT_URI,values);
  updateUnreadMessagesCount(context,dialogMessageCache.getRoomJidId(),dialogMessageCache.getMessage());
}","public static void saveChatMessage(Context context,DialogMessageCache dialogMessageCache){
  unreadMessagesCount++;
  ContentValues values=new ContentValues();
  values.put(DialogMessageTable.Cols.ROOM_JID_ID,dialogMessageCache.getRoomJidId());
  values.put(DialogMessageTable.Cols.SENDER_ID,dialogMessageCache.getSenderId());
  values.put(DialogMessageTable.Cols.BODY,dialogMessageCache.getMessage());
  values.put(DialogMessageTable.Cols.TIME,dialogMessageCache.getTime());
  values.put(DialogMessageTable.Cols.ATTACH_FILE_ID,dialogMessageCache.getAttachUrl());
  context.getContentResolver().insert(DialogMessageTable.CONTENT_URI,values);
  updateUnreadMessagesCount(context,dialogMessageCache.getRoomJidId(),dialogMessageCache.getMessage());
}",0.967828418230563
114651,"public static QBDialog getQBDialogByRoomJidId(Context context,String roomJidId){
  QBDialog dialog;
  Cursor cursor=context.getContentResolver().query(DialogTable.CONTENT_URI,null,DialogTable.Cols.ROOM_JID_ID + ""String_Node_Str"" + roomJidId+ ""String_Node_Str"",null,null);
  if (cursor != null && cursor.moveToFirst()) {
    dialog=getQBDialogFromCursor(cursor);
  }
 else {
    dialog=new QBDialog(null);
    dialog.setRoomJid(roomJidId);
    Friend opponentFriend=getFriendById(context,Integer.parseInt(roomJidId));
    dialog.setName(opponentFriend.getFullname());
    saveDialog(context,dialog,roomJidId);
  }
  return dialog;
}","public static QBDialog getQBDialogByRoomJidId(Context context,String roomJidId){
  QBDialog dialog;
  Cursor cursor=context.getContentResolver().query(DialogTable.CONTENT_URI,null,DialogTable.Cols.ROOM_JID_ID + ""String_Node_Str"" + roomJidId+ ""String_Node_Str"",null,null);
  if (cursor != null && cursor.moveToFirst()) {
    dialog=getQBDialogFromCursor(cursor);
  }
 else {
    dialog=new QBDialog(Consts.EMPTY_STRING);
    dialog.setRoomJid(roomJidId);
    Friend opponentFriend=getFriendById(context,Integer.parseInt(roomJidId));
    dialog.setName(opponentFriend.getFullname());
    ArrayList<Integer> occupantsIdsList=ChatUtils.getOccupantsIdsListForCreatePrivateDialog(opponentFriend.getId());
    dialog.setOccupantsIds(occupantsIdsList);
    saveDialog(context,dialog,roomJidId);
  }
  return dialog;
}",0.8680555555555556
114652,"public DialogMessageCache(String roomJidId,int senderId,String message,String attachUrl){
  this.roomJidId=roomJidId;
  this.senderId=senderId;
  this.message=message;
  this.attachUrl=attachUrl;
}","public DialogMessageCache(String roomJidId,int senderId,String message,String attachUrl,long time){
  this.roomJidId=roomJidId;
  this.senderId=senderId;
  this.message=message;
  this.attachUrl=attachUrl;
  this.time=time;
}",0.933649289099526
114653,"public void sendPrivateMessage(String message) throws XMPPException, SmackException.NotConnectedException {
  QBChatMessage chatMessage=getQBChatMessage(message);
  privateChat.sendMessage(chatMessage);
  String roomJidId=opponentId + Consts.EMPTY_STRING;
  String attachUrl=Consts.EMPTY_STRING;
  saveMessageToCache(new DialogMessageCache(roomJidId,user.getId(),chatMessage.getBody(),attachUrl));
}","public void sendPrivateMessage(String message) throws XMPPException, SmackException.NotConnectedException {
  QBChatMessage chatMessage=getQBChatMessage(message);
  privateChat.sendMessage(chatMessage);
  String roomJidId=opponentId + Consts.EMPTY_STRING;
  String attachUrl=Consts.EMPTY_STRING;
  saveMessageToCache(new DialogMessageCache(roomJidId,user.getId(),chatMessage.getBody(),attachUrl,System.currentTimeMillis()));
}",0.9672727272727272
114654,"@Override public void processMessage(QBRoomChat roomChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  String attachURL=getAttachUrlIfExists(chatMessage);
  saveMessageToCache(new DialogMessageCache(roomChat.getJid(),chatMessage.getSenderId(),chatMessage.getBody(),attachURL));
  if (!chatMessage.getSenderId().equals(user.getId())) {
    notifyMessageReceived(chatMessage,friend);
  }
}","@Override public void processMessage(QBRoomChat roomChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  String attachURL=getAttachUrlIfExists(chatMessage);
  saveMessageToCache(new DialogMessageCache(roomChat.getJid(),chatMessage.getSenderId(),chatMessage.getBody(),attachURL,System.currentTimeMillis()));
  if (!chatMessage.getSenderId().equals(user.getId())) {
    notifyMessageReceived(chatMessage,friend);
  }
}",0.9710610932475884
114655,"public void sendPrivateMessageWithAttachImage(QBFile qbFile) throws XMPPException, SmackException.NotConnectedException {
  QBChatMessage chatMessage=getQBChatMessageWithImage(qbFile);
  privateChat.sendMessage(chatMessage);
  String roomJidId=opponentId + Consts.EMPTY_STRING;
  String attachUrl=qbFile.getPublicUrl();
  saveMessageToCache(new DialogMessageCache(roomJidId,user.getId(),chatMessage.getBody(),attachUrl));
}","public void sendPrivateMessageWithAttachImage(QBFile qbFile) throws XMPPException, SmackException.NotConnectedException {
  QBChatMessage chatMessage=getQBChatMessageWithImage(qbFile);
  privateChat.sendMessage(chatMessage);
  String roomJidId=opponentId + Consts.EMPTY_STRING;
  String attachUrl=qbFile.getPublicUrl();
  saveMessageToCache(new DialogMessageCache(roomJidId,user.getId(),chatMessage.getBody(),attachUrl,System.currentTimeMillis()));
}",0.9690721649484536
114656,"@Override public void execute(Bundle bundle){
  Exception e=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  ErrorUtils.logError(e);
  hideProgress();
}","@Override public void execute(Bundle bundle){
  Exception e=(Exception)bundle.getSerializable(QBServiceConsts.EXTRA_ERROR);
  ErrorUtils.showError(BaseActivity.this,e);
  hideProgress();
}",0.9355742296918768
114657,"public static void showError(Context context,String error){
  Toast.makeText(context,error,Toast.LENGTH_SHORT).show();
}","public static void showError(Context context,String error){
  Toast.makeText(context,error,Toast.LENGTH_LONG).show();
}",0.9707112970711296
114658,"public static void saveChatMessages(Context context,List<QBHistoryMessage> messagesList,String roomJidId){
  for (  QBHistoryMessage historyMessage : messagesList) {
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    String attachURL;
    if (TextUtils.isEmpty(message)) {
      attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    }
 else {
      attachURL=Consts.EMPTY_STRING;
    }
    if (TextUtils.isEmpty(message) && TextUtils.isEmpty(attachURL)) {
      Friend friend=DatabaseManager.getFriendById(context,senderId);
      message=context.getResources().getString(R.string.user_created_room,friend.getFullname());
    }
    DialogMessageCache dialogMessageCache=new DialogMessageCache(roomJidId,senderId,message,attachURL,historyMessage.getDateSent());
    saveChatMessage(context,dialogMessageCache);
  }
}","public static void saveChatMessages(Context context,List<QBHistoryMessage> messagesList,String roomJidId){
  for (  QBHistoryMessage historyMessage : messagesList) {
    String message=historyMessage.getBody();
    int senderId=historyMessage.getSenderId();
    String attachURL;
    if (TextUtils.isEmpty(message)) {
      attachURL=ChatUtils.getAttachUrlFromMessage(historyMessage.getAttachments());
    }
 else {
      attachURL=Consts.EMPTY_STRING;
    }
    if (TextUtils.isEmpty(message) && TextUtils.isEmpty(attachURL)) {
      Friend friend=DatabaseManager.getFriendById(context,senderId);
      if (friend == null) {
        message=context.getResources().getString(R.string.user_created_room,senderId);
      }
 else {
        message=context.getResources().getString(R.string.user_created_room,friend.getFullname());
      }
    }
    DialogMessageCache dialogMessageCache=new DialogMessageCache(roomJidId,senderId,message,attachURL,historyMessage.getDateSent());
    saveChatMessage(context,dialogMessageCache);
  }
}",0.9264475743348984
114659,"public static Dialog createTempDialogByRoomJidId(Context context,String roomJidId){
  Dialog dialog=new Dialog();
  dialog.setRoomJidId(roomJidId);
  Friend opponentFriend=getFriendById(context,Integer.parseInt(roomJidId));
  dialog.setName(opponentFriend.getFullname());
  ArrayList<Integer> occupantsIdsList=ChatUtils.getOccupantsIdsListForCreatePrivateDialog(opponentFriend.getId());
  dialog.setOccupantsIds(occupantsIdsList);
  dialog.setType(QBDialogType.PRIVATE);
  createTempDialog(context,dialog,roomJidId);
  return dialog;
}","public static QBDialog createTempDialogByRoomJidId(Context context,String roomJidId){
  QBDialog dialog=new QBDialog();
  dialog.setRoomJid(roomJidId);
  Friend opponentFriend=getFriendById(context,Integer.parseInt(roomJidId));
  dialog.setName(opponentFriend.getFullname());
  ArrayList<Integer> occupantsIdsList=ChatUtils.getOccupantsIdsListForCreatePrivateDialog(opponentFriend.getId());
  dialog.setOccupantsIds(occupantsIdsList);
  dialog.setType(QBDialogType.PRIVATE);
  saveDialog(context,dialog,roomJidId);
  return dialog;
}",0.9794007490636704
114660,"public static void start(Context context,Dialog dialog,String roomJidId,boolean isTempDialog){
  Intent intent=new Intent(QBServiceConsts.UPDATE_CHAT_DIALOG_ACTION,null,context,QBService.class);
  intent.putExtra(QBServiceConsts.EXTRA_ROOM_JID_ID,roomJidId);
  intent.putExtra(QBServiceConsts.EXTRA_DIALOG,dialog);
  intent.putExtra(QBServiceConsts.EXTRA_IS_TEMP_DIALOG,isTempDialog);
  context.startService(intent);
}","public static void start(Context context,QBDialog dialog,String roomJidId){
  Intent intent=new Intent(QBServiceConsts.UPDATE_CHAT_DIALOG_ACTION,null,context,QBService.class);
  intent.putExtra(QBServiceConsts.EXTRA_ROOM_JID_ID,roomJidId);
  intent.putExtra(QBServiceConsts.EXTRA_DIALOG,dialog);
  context.startService(intent);
}",0.8032128514056225
114661,"@Override public Bundle perform(Bundle extras) throws Exception {
  boolean isTempDialog=extras.getBoolean(QBServiceConsts.EXTRA_IS_TEMP_DIALOG);
  String roomJidId=extras.getString(QBServiceConsts.EXTRA_ROOM_JID_ID);
  if (isTempDialog) {
    Dialog dialog=(Dialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
    chatHelper.updateTempDialog(dialog,roomJidId);
  }
 else {
    QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
    chatHelper.updateDialog(dialog,roomJidId);
  }
  return null;
}","@Override public Bundle perform(Bundle extras) throws Exception {
  String roomJidId=extras.getString(QBServiceConsts.EXTRA_ROOM_JID_ID);
  QBDialog dialog=(QBDialog)extras.getSerializable(QBServiceConsts.EXTRA_DIALOG);
  chatHelper.updateDialog(dialog,roomJidId);
  return null;
}",0.456441717791411
114662,"public List<QBHistoryMessage> getDialogMessages(QBDialog dialog,String roomJidId) throws QBResponseException {
  Bundle bundle=new Bundle();
  QBCustomObjectRequestBuilder customObjectRequestBuilder=new QBCustomObjectRequestBuilder();
  customObjectRequestBuilder.setPagesLimit(Consts.DIALOG_MESSAGES_PER_PAGE);
  List<QBHistoryMessage> dialogMessagesList=QBChatService.getDialogMessages(dialog,customObjectRequestBuilder,bundle);
  deleteMessagesByRoomJidId(roomJidId);
  saveChatMessagesToCache(dialogMessagesList,roomJidId);
  return dialogMessagesList;
}","public List<QBHistoryMessage> getDialogMessages(QBDialog dialog,String roomJidId) throws QBResponseException {
  Bundle bundle=new Bundle();
  QBCustomObjectRequestBuilder customObjectRequestBuilder=new QBCustomObjectRequestBuilder();
  customObjectRequestBuilder.setPagesLimit(Consts.DIALOG_MESSAGES_PER_PAGE);
  List<QBHistoryMessage> dialogMessagesList=QBChatService.getDialogMessages(dialog,customObjectRequestBuilder,bundle);
  if (dialogMessagesList != null) {
    deleteMessagesByRoomJidId(roomJidId);
    saveChatMessagesToCache(dialogMessagesList,roomJidId);
  }
  return dialogMessagesList;
}",0.9620689655172414
114663,"private void startUpdateChatDialog(){
  if (dialog != null) {
    QBUpdateDialogCommand.start(this,getDialog(),roomJidId);
  }
 else {
    QBUpdateDialogCommand.start(this,getTempDialog(),roomJidId,true);
  }
}","private void startUpdateChatDialog(){
  if (dialog != null) {
    QBUpdateDialogCommand.start(this,getDialog(),roomJidId);
  }
}",0.757396449704142
114664,"@Override public void processMessage(QBRoomChat roomChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  saveGroupMessageToCache(chatMessage,chatMessage.getSenderId(),roomChat.getJid());
  if (!chatMessage.getSenderId().equals(user.getId())) {
    notifyMessageReceived(chatMessage,friend);
  }
  updateLoadedChatDialog(chatMessage.getSenderId(),chatMessage.getBody(),-1);
}","@Override public void processMessage(QBRoomChat roomChat,QBChatMessage chatMessage){
  Friend friend=DatabaseManager.getFriendById(context,chatMessage.getSenderId());
  saveGroupMessageToCache(chatMessage,chatMessage.getSenderId(),roomChat.getJid());
  if (!chatMessage.getSenderId().equals(user.getId())) {
    notifyMessageReceived(chatMessage,friend);
  }
}",0.9022556390977444
114665,"public void sendPrivateMessageWithAttachImage(QBFile qbFile) throws XMPPException, SmackException.NotConnectedException {
  QBChatMessage chatMessage=getQBChatMessageWithImage(qbFile);
  privateChat.sendMessage(chatMessage);
  saveMessageToCache(new ChatMessageCache(Consts.EMPTY_STRING,user.getId(),String.valueOf(privateChatId),qbFile.getPublicUrl()));
}","public void sendPrivateMessageWithAttachImage(QBFile qbFile) throws XMPPException, SmackException.NotConnectedException {
  QBChatMessage chatMessage=getQBChatMessageWithImage(qbFile);
  privateChat.sendMessage(chatMessage);
  saveMessageToCache(new ChatMessageCache(Consts.EMPTY_STRING,user.getId(),privateChatId,qbFile.getPublicUrl()));
}",0.9396551724137931
114666,"private void notifyFriendAboutInvitation(QBDialog dialog,Integer friendId) throws XMPPException, SmackException {
  QBPrivateChat chat=privateChatManager.createChat(friendId,new PrivateChatMessageListener());
  QBChatMessage message=createRoomNotificationMessage(dialog);
  chat.sendMessage(message);
  Log.d(TAG,""String_Node_Str"" + friendId);
}","private void notifyFriendAboutInvitation(QBDialog dialog,Integer friendId) throws XMPPException, SmackException {
  QBPrivateChat chat=privateChatManager.createChat(friendId,privateChatMessageListener);
  QBChatMessage message=createRoomNotificationMessage(dialog);
  chat.sendMessage(message);
  Log.d(TAG,""String_Node_Str"" + friendId);
}",0.9883040935672516
114667,"public QBFile loadAttachFile(File file){
  QBFile qbFile=null;
  try {
    qbFile=QBContent.uploadFileTask(file,true,(String)null);
  }
 catch (  QBResponseException e) {
    ErrorUtils.showError(context,e);
  }
  return qbFile;
}","public QBFile loadAttachFile(File file){
  QBFile qbFile=null;
  try {
    qbFile=QBContent.uploadFileTask(file,true,(String)null);
  }
 catch (  QBResponseException e) {
    ErrorUtils.logError(e);
  }
  return qbFile;
}",0.966740576496674
114668,"private void registerLoadAttachFileCommand(){
  ServiceCommand loadFriendListCommand=new QBLoadFriendListCommand(this,friendListHelper,QBServiceConsts.LOAD_ATTACH_FILE_SUCCESS_ACTION,QBServiceConsts.LOAD_ATTACH_FILE_FAIL_ACTION);
  serviceCommandMap.put(QBServiceConsts.LOAD_ATTACH_FILE_ACTION,loadFriendListCommand);
}","private void registerLoadAttachFileCommand(){
  ServiceCommand loadAttachFileCommand=new QBLoadAttachFileCommand(this,chatHelper,QBServiceConsts.LOAD_ATTACH_FILE_SUCCESS_ACTION,QBServiceConsts.LOAD_ATTACH_FILE_FAIL_ACTION);
  serviceCommandMap.put(QBServiceConsts.LOAD_ATTACH_FILE_ACTION,loadAttachFileCommand);
}",0.8860759493670886
114669,"private void addNewChatDialog(int occupantId,String lastMessage,QBDialogType type){
  QBDialog newDialog=new QBDialog();
  newDialog.setId(occupantId);
  newDialog.setLastMessage(lastMessage);
  ArrayList occupantsIdsList=new ArrayList<Integer>();
  occupantsIdsList.add(App.getInstance().getUser().getId());
  occupantsIdsList.add(occupantId);
  newDialog.setOccupantsIds(occupantsIdsList);
  newDialog.setUnreadMessageCount(Consts.ZERO_VALUE);
  newDialog.setType(type);
  chatsDialogsList.add(newDialog);
}","private void addNewChatDialog(int occupantId,String lastMessage,QBDialogType type){
  QBDialog newDialog=new QBDialog(occupantId + Consts.EMPTY_STRING);
  newDialog.setLastMessage(lastMessage);
  ArrayList occupantsIdsList=new ArrayList<Integer>();
  occupantsIdsList.add(App.getInstance().getUser().getId());
  occupantsIdsList.add(occupantId);
  newDialog.setOccupantsIds(occupantsIdsList);
  newDialog.setUnreadMessageCount(Consts.ZERO_VALUE);
  newDialog.setType(type);
  chatsDialogsList.add(newDialog);
}",0.9381746810598626
114670,"public List<QBDialog> getChatsDialogs(){
  Bundle bundle=new Bundle();
  try {
    QBCustomObjectRequestBuilder customObjectRequestBuilder=new QBCustomObjectRequestBuilder();
    customObjectRequestBuilder.setPagesLimit(Consts.CHATS_DIALOGS_PER_PAGE);
    chatsDialogsList=QBChatService.getChatDialogs(null,customObjectRequestBuilder,bundle);
  }
 catch (  QBResponseException e) {
    e.printStackTrace();
  }
  return chatsDialogsList;
}","public List<QBDialog> getChatsDialogs() throws QBResponseException {
  Bundle bundle=new Bundle();
  QBCustomObjectRequestBuilder customObjectRequestBuilder=new QBCustomObjectRequestBuilder();
  customObjectRequestBuilder.setPagesLimit(Consts.CHATS_DIALOGS_PER_PAGE);
  chatsDialogsList=QBChatService.getChatDialogs(null,customObjectRequestBuilder,bundle);
  return chatsDialogsList;
}",0.8058252427184466
114671,"@Override public boolean onMenuItemActionCollapse(MenuItem item){
  state=State.FRIENDS_LIST;
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
  if (isHideSearchView) {
    isHideSearchView=false;
    friendsListAdapter.setSearchCharacters(null);
    friendsListAdapter.setFilterQueryProvider(null);
    friendsListView.removeFooterView(globalSearchLayout);
    friendsListView.removeHeaderView(friendsListViewTitle);
    positionCounter--;
    initFriendsList();
  }
  return true;
}","@Override public boolean onMenuItemActionCollapse(MenuItem item){
  state=State.FRIENDS_LIST;
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
  if (isHideSearchView) {
    isHideSearchView=false;
    emptyListTextView.setVisibility(friendsListAdapter.isEmpty() ? View.VISIBLE : View.GONE);
    friendsListAdapter.setSearchCharacters(null);
    friendsListAdapter.setFilterQueryProvider(null);
    friendsListView.removeFooterView(globalSearchLayout);
    friendsListView.removeHeaderView(friendsListViewTitle);
    positionCounter--;
    initFriendsList();
  }
  return true;
}",0.9137614678899084
114672,"private void initUI(View view,LayoutInflater layoutInflater){
  friendsListView=(ListView)view.findViewById(R.id.friendList);
  friendsListViewTitle=layoutInflater.inflate(R.layout.view_section_title_friends_list,null);
  friendsTitle=(TextView)friendsListViewTitle.findViewById(R.id.listTitle);
}","private void initUI(View view,LayoutInflater layoutInflater){
  friendsListView=(ListView)view.findViewById(R.id.friends_listview);
  friendsListViewTitle=layoutInflater.inflate(R.layout.view_section_title_friends_list,null);
  friendsTitle=(TextView)friendsListViewTitle.findViewById(R.id.listTitle);
  emptyListTextView=(TextView)view.findViewById(R.id.empty_list_textview);
}",0.8681481481481481
114673,"@Override public boolean onMenuItemActionExpand(MenuItem item){
  isHideSearchView=true;
  return true;
}","@Override public boolean onMenuItemActionExpand(MenuItem item){
  isHideSearchView=true;
  emptyListTextView.setVisibility(View.GONE);
  return true;
}",0.8203125
114674,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder viewHolder;
  final QBDialog data=getItem(position);
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_chat,null);
    viewHolder=createViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
  }
  if (data.getType() == QBDialogType.PRIVATE) {
    int occupantId=ChatUtils.getOccupantsIdsFromDialog(data).get(Consts.ZERO_VALUE);
    Friend occupant=getOccupantById(occupantId);
    viewHolder.nameTextView.setText(occupant.getFullname());
  }
 else {
    viewHolder.nameTextView.setText(data.getName());
  }
  viewHolder.lastMessageTextView.setText(data.getLastMessage());
  viewHolder.userCountTextView.setText(data.getOccupants().size() + Consts.EMPTY_STRING);
  viewHolder.unreadMessagesTextView.setText(data.getUnreadMessageCount() + Consts.EMPTY_STRING);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder viewHolder;
  final QBDialog data=getItem(position);
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_chat,null);
    viewHolder=createViewHolder(convertView);
    convertView.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)convertView.getTag();
  }
  if (data.getType() == QBDialogType.PRIVATE) {
    int occupantId=ChatUtils.getOccupantsIdsFromDialog(data).get(Consts.ZERO_VALUE);
    Friend occupant=getOccupantById(occupantId);
    viewHolder.nameTextView.setText(occupant.getFullname());
    viewHolder.userCountTextView.setVisibility(View.GONE);
  }
 else {
    viewHolder.nameTextView.setText(data.getName());
    viewHolder.userCountTextView.setVisibility(View.VISIBLE);
    viewHolder.userCountTextView.setText(data.getOccupants().size() + Consts.EMPTY_STRING);
  }
  viewHolder.lastMessageTextView.setText(data.getLastMessage());
  viewHolder.unreadMessagesTextView.setText(data.getUnreadMessageCount() + Consts.EMPTY_STRING);
  return convertView;
}",0.8888888888888888
114675,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  final String data=getItem(position);
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_navigation_drawer,null);
    holder=new ViewHolder();
    holder.nameTextView=(TextView)convertView.findViewById(R.id.name_textview);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.nameTextView.setText(data);
  Resources res=baseActivity.getResources();
  final TransitionDrawable transition=(TransitionDrawable)res.getDrawable(R.drawable.menu_item_background_longclick_transition);
  convertView.setOnTouchListener(new View.OnTouchListener(){
    public boolean onTouch(    View view,    MotionEvent motionEvent){
      if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
        transition.startTransition(Consts.DELAY_LONG_CLICK_ANIMATION_LONG);
        view.setBackgroundDrawable(transition);
      }
      return false;
    }
  }
);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  final String data=getItem(position);
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_navigation_drawer,null);
    holder=new ViewHolder();
    holder.nameTextView=(TextView)convertView.findViewById(R.id.name_textview);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.nameTextView.setText(data);
  return convertView;
}",0.6316463805253043
114676,"private void initUI(View rootView){
  drawerListView=(ListView)rootView.findViewById(R.id.navigationList);
  logoutButton=(ImageButton)rootView.findViewById(R.id.logoutImageButton);
  fullnameTextView=(TextView)rootView.findViewById(R.id.fullnameTextView);
}","private void initUI(View rootView){
  drawerListView=(ListView)rootView.findViewById(R.id.navigation_listview);
  logoutButton=(ImageButton)rootView.findViewById(R.id.logout_imagebutton);
  fullnameTextView=(TextView)rootView.findViewById(R.id.fullname_textview);
}",0.9521988527724664
114677,"@Override public void onItemClick(AdapterView<?> parent,final View view,final int position,long id){
  performItemClick(view,position);
}","@Override public void onItemClick(AdapterView<?> parent,final View view,final int position,long id){
  selectItem(position);
}",0.9201520912547528
114678,"private void initListeners(){
  drawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    final View view,    final int position,    long id){
      performItemClick(view,position);
    }
  }
);
  logoutButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      logout();
    }
  }
);
}","private void initListeners(){
  drawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    final View view,    final int position,    long id){
      selectItem(position);
    }
  }
);
  logoutButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      logout();
    }
  }
);
}",0.9626955475330926
114679,"public BaseListAdapter(BaseActivity baseActivity,List<T> objectsList){
  this.baseActivity=baseActivity;
  this.objectsList=objectsList;
  this.layoutInflater=LayoutInflater.from(baseActivity);
}","public BaseListAdapter(BaseActivity baseActivity,List<T> objectsList){
  this.baseActivity=baseActivity;
  this.objectsList=objectsList;
  this.layoutInflater=LayoutInflater.from(baseActivity);
  resources=baseActivity.getResources();
}",0.9048723897911832
114680,"@Override public void onLoadingComplete(String imageUri,View view,final Bitmap loadedImageBitmap){
  progressBar.setVisibility(View.GONE);
  pleaseWaitTextView.setVisibility(View.GONE);
  attachImageView.setVisibility(View.VISIBLE);
  attachImageView.setImageBitmap(loadedImageBitmap);
  attachImageView.setOnClickListener(receiveImageFileOnClickListener());
}","@Override public void onLoadingComplete(String imageUri,View view,final Bitmap loadedImageBitmap){
  progressBar.setVisibility(View.GONE);
  pleaseWaitTextView.setVisibility(View.GONE);
  attachImageView.setVisibility(View.VISIBLE);
  attachImageView.setImageBitmap(loadedImageBitmap);
  attachImageView.setOnClickListener(receiveImageFileOnClickListener());
  this.loadedImageBitmap=loadedImageBitmap;
}",0.9424083769633508
114681,"public void onClick(View v){
  CheckBox cb=(CheckBox)v;
  InviteFriend inviteFriend=(InviteFriend)cb.getTag();
  inviteFriend.setSelected(cb.isChecked());
  notifyCounterChanged(cb.isChecked(),inviteFriend.getViaLabelType());
}","public void onClick(View view){
  CheckBox checkBox=(CheckBox)view;
  InviteFriend inviteFriend=(InviteFriend)checkBox.getTag();
  inviteFriend.setSelected(checkBox.isChecked());
  notifyCounterChanged(checkBox.isChecked(),inviteFriend.getViaLabelType());
  finalHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(checkBox.isChecked()));
}",0.7610921501706485
114682,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder=null;
  final InviteFriend data=getItem(position);
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_invite_friend,null);
    holder=new ViewHolder();
    holder.avatarImageView=(RoundedImageView)convertView.findViewById(R.id.avatar_imageview);
    holder.avatarImageView.setOval(true);
    holder.nameTextView=(TextView)convertView.findViewById(R.id.name_textview);
    holder.viaTextView=(TextView)convertView.findViewById(R.id.viaTextView);
    holder.checkBox=(CheckBox)convertView.findViewById(R.id.selectUserCheckBox);
    convertView.setTag(holder);
    holder.checkBox.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        CheckBox cb=(CheckBox)v;
        InviteFriend inviteFriend=(InviteFriend)cb.getTag();
        inviteFriend.setSelected(cb.isChecked());
        notifyCounterChanged(cb.isChecked(),inviteFriend.getViaLabelType());
      }
    }
);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.nameTextView.setText(data.getName());
  holder.viaTextView.setText(getViaLabelById(data.getViaLabelType()));
  holder.checkBox.setChecked(data.isSelected());
  holder.checkBox.setTag(data);
  String uri=null;
  if (data.getViaLabelType() == InviteFriend.VIA_CONTACTS_TYPE) {
    uri=data.getUri().toString();
  }
 else   if (data.getViaLabelType() == InviteFriend.VIA_FACEBOOK_TYPE) {
    uri=baseActivity.getString(R.string.inf_url_to_facebook_avatar,data.getId());
  }
  displayImage(uri,holder.avatarImageView);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  final InviteFriend data=getItem(position);
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_invite_friend,null);
    holder=new ViewHolder();
    holder.contentRelativeLayout=(RelativeLayout)convertView.findViewById(R.id.contentRelativeLayout);
    holder.avatarImageView=(RoundedImageView)convertView.findViewById(R.id.avatar_imageview);
    holder.avatarImageView.setOval(true);
    holder.nameTextView=(TextView)convertView.findViewById(R.id.name_textview);
    holder.viaTextView=(TextView)convertView.findViewById(R.id.viaTextView);
    holder.checkBox=(CheckBox)convertView.findViewById(R.id.selectUserCheckBox);
    convertView.setTag(holder);
    final ViewHolder finalHolder=holder;
    holder.checkBox.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View view){
        CheckBox checkBox=(CheckBox)view;
        InviteFriend inviteFriend=(InviteFriend)checkBox.getTag();
        inviteFriend.setSelected(checkBox.isChecked());
        notifyCounterChanged(checkBox.isChecked(),inviteFriend.getViaLabelType());
        finalHolder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(checkBox.isChecked()));
      }
    }
);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.nameTextView.setText(data.getName());
  holder.viaTextView.setText(getViaLabelById(data.getViaLabelType()));
  holder.checkBox.setChecked(data.isSelected());
  holder.checkBox.setTag(data);
  String uri=null;
  if (data.getViaLabelType() == InviteFriend.VIA_CONTACTS_TYPE) {
    uri=data.getUri().toString();
  }
 else   if (data.getViaLabelType() == InviteFriend.VIA_FACEBOOK_TYPE) {
    uri=baseActivity.getString(R.string.inf_url_to_facebook_avatar,data.getId());
  }
  holder.contentRelativeLayout.setBackgroundColor(getBackgroundColorItem(holder.checkBox.isChecked()));
  displayImage(uri,holder.avatarImageView);
  return convertView;
}",0.8914285714285715
114683,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode == RESULT_OK) {
    Uri originalUri=data.getData();
    try {
      ParcelFileDescriptor descriptor=getContentResolver().openFileDescriptor(originalUri,""String_Node_Str"");
      new GetImageFileTask(PrivateChatActivity.this).execute(imageHelper,BitmapFactory.decodeFileDescriptor(descriptor.getFileDescriptor()),true);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode == RESULT_OK) {
    Uri originalUri=data.getData();
    try {
      ParcelFileDescriptor descriptor=getContentResolver().openFileDescriptor(originalUri,""String_Node_Str"");
      new ReceiveImageFileTask(PrivateChatActivity.this).execute(imageHelper,BitmapFactory.decodeFileDescriptor(descriptor.getFileDescriptor()),true);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
  super.onActivityResult(requestCode,resultCode,data);
}",0.9911190053285968
114684,"@Override public void onClick(View v){
  new GetImageFileTask(PrivateChatMessagesAdapter.this).execute(imageHelper,loadedImageBitmap,false);
}","@Override public void onClick(View v){
  new ReceiveImageFileTask(PrivateChatMessagesAdapter.this).execute(imageHelper,loadedImageBitmap,false);
}",0.9722222222222222
114685,"@Override public void onLoadingComplete(String imageUri,View view,final Bitmap loadedImageBitmap){
  progressBar.setVisibility(View.GONE);
  pleaseWaitTextView.setVisibility(View.GONE);
  attachImageView.setVisibility(View.VISIBLE);
  attachImageView.setImageBitmap(loadedImageBitmap);
  attachImageView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      new GetImageFileTask(PrivateChatMessagesAdapter.this).execute(imageHelper,loadedImageBitmap,false);
    }
  }
);
}","@Override public void onLoadingComplete(String imageUri,View view,final Bitmap loadedImageBitmap){
  progressBar.setVisibility(View.GONE);
  pleaseWaitTextView.setVisibility(View.GONE);
  attachImageView.setVisibility(View.VISIBLE);
  attachImageView.setImageBitmap(loadedImageBitmap);
  attachImageView.setOnClickListener(receiveImageFileOnClickListener());
}",0.7767653758542141
114686,"private int getItemViewType(Cursor cursor){
  int senderId=cursor.getInt(cursor.getColumnIndex(ChatMessagesTable.Cols.SENDER_ID));
  if (isOwnMessage(senderId)) {
    return Consts.MESSAGE_TYPE_1;
  }
 else {
    return Consts.MESSAGE_TYPE_2;
  }
}","private int getItemViewType(Cursor cursor){
  int senderId=cursor.getInt(cursor.getColumnIndex(ChatMessagesTable.Cols.SENDER_ID));
  if (isOwnMessage(senderId)) {
    return Consts.LEFT_CHAT_MESSAGE_TYPE_1;
  }
 else {
    return Consts.RIGHT_CHAT_MESSAGE_TYPE_2;
  }
}",0.9593810444874274
114687,"@Override public boolean onMenuItemActionCollapse(MenuItem item){
  state=State.FRIENDS_LIST;
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
  if (isHideSearchView) {
    isHideSearchView=false;
    friendsListView.removeFooterView(globalSearchLayout);
    friendsListView.removeHeaderView(friendsListViewTitle);
    positionCounter--;
    initFriendsList();
  }
  return true;
}","@Override public boolean onMenuItemActionCollapse(MenuItem item){
  state=State.FRIENDS_LIST;
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
  if (isHideSearchView) {
    isHideSearchView=false;
    friendsListAdapter.setSearchCharacters(null);
    friendsListAdapter.setFilterQueryProvider(null);
    friendsListView.removeFooterView(globalSearchLayout);
    friendsListView.removeHeaderView(friendsListViewTitle);
    positionCounter--;
    initFriendsList();
  }
  return true;
}",0.8846584546472565
114688,"@Override public boolean onQueryTextChange(String newText){
  constraint=newText;
  if (state == State.FRIENDS_LIST) {
    friendsListAdapter.setFilterQueryProvider(this);
    friendsListAdapter.getFilter().filter(newText);
    friendsListAdapter.setSearchCharacters(newText);
  }
 else {
    startUsersListLoader(newText);
  }
  return true;
}","@Override public boolean onQueryTextChange(String newText){
  constraint=newText;
  friendsListAdapter.setFilterQueryProvider(this);
  if (state == State.FRIENDS_LIST && isHideSearchView) {
    friendsListAdapter.getFilter().filter(newText);
    friendsListAdapter.setSearchCharacters(newText);
  }
 else   if (state == State.GLOBAL_LIST) {
    startUsersListLoader(newText);
  }
  return true;
}",0.5243243243243243
114689,"private void saveChanges(final String fullname,final String email) throws IOException {
  if (!isUserDataCorrect()) {
    DialogUtils.showLong(this,getString(R.string.dlg_not_all_fields_entered));
    return;
  }
  if (isUserDataChanges(fullname,email)) {
    showProgress();
    qbUser.setFullName(fullname);
    qbUser.setEmail(email);
    if (isNeedUpdateAvatar) {
      new GetImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
    }
 else {
      QBUpdateUserCommand.start(this,qbUser,null);
    }
  }
}","private void saveChanges(final String fullname,final String email) throws IOException {
  if (!isUserDataCorrect()) {
    DialogUtils.showLong(this,getString(R.string.dlg_not_all_fields_entered));
    return;
  }
  if (isUserDataChanges(fullname,email)) {
    showProgress();
    qbUser.setFullName(fullname);
    qbUser.setEmail(email);
    if (isNeedUpdateAvatar) {
      new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
    }
 else {
      QBUpdateUserCommand.start(this,qbUser,null);
    }
  }
}",0.9904942965779469
114690,"public void signUpOnClickListener(View view){
  String fullNameText=fullnameEditText.getText().toString();
  String emailText=emailEditText.getText().toString();
  String passwordText=passwordEditText.getText().toString();
  boolean isFullNameEntered=!TextUtils.isEmpty(fullNameText);
  boolean isEmailEntered=!TextUtils.isEmpty(emailText);
  boolean isPasswordEntered=!TextUtils.isEmpty(passwordText);
  if (isFullNameEntered && isEmailEntered && isPasswordEntered) {
    qbUser.setFullName(fullNameText);
    qbUser.setEmail(emailText);
    qbUser.setPassword(passwordText);
    showProgress();
    if (isNeedUpdateAvatar) {
      new GetImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
    }
 else {
      QBSignUpCommand.start(SignUpActivity.this,qbUser,null);
    }
  }
 else {
    DialogUtils.show(SignUpActivity.this,getString(R.string.dlg_not_all_fields_entered));
  }
}","public void signUpOnClickListener(View view){
  String fullNameText=fullnameEditText.getText().toString();
  String emailText=emailEditText.getText().toString();
  String passwordText=passwordEditText.getText().toString();
  boolean isFullNameEntered=!TextUtils.isEmpty(fullNameText);
  boolean isEmailEntered=!TextUtils.isEmpty(emailText);
  boolean isPasswordEntered=!TextUtils.isEmpty(passwordText);
  if (isFullNameEntered && isEmailEntered && isPasswordEntered) {
    qbUser.setFullName(fullNameText);
    qbUser.setEmail(emailText);
    qbUser.setPassword(passwordText);
    showProgress();
    if (isNeedUpdateAvatar) {
      new ReceiveImageFileTask(this).execute(imageHelper,avatarBitmapCurrent,true);
    }
 else {
      QBSignUpCommand.start(SignUpActivity.this,qbUser,null);
    }
  }
 else {
    DialogUtils.show(SignUpActivity.this,getString(R.string.dlg_not_all_fields_entered));
  }
}",0.9944320712694876
114691,"public String getAbsolutePathByBitmap(Bitmap origBitmap){
  File tempFile=new File(activity.getExternalFilesDir(null),""String_Node_Str"");
  try {
    Bitmap bitmap=resizeBitmap(origBitmap,origBitmap.getWidth(),origBitmap.getHeight());
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    bitmap.compress(Bitmap.CompressFormat.PNG,0,bos);
    byte[] bitmapData=bos.toByteArray();
    FileOutputStream fos=new FileOutputStream(tempFile);
    fos.write(bitmapData);
    fos.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return tempFile.getAbsolutePath();
}","public String getAbsolutePathByBitmap(Bitmap origBitmap){
  File tempFile=new File(activity.getExternalFilesDir(null),""String_Node_Str"");
  ByteArrayOutputStream bos=null;
  FileOutputStream fos=null;
  try {
    Bitmap bitmap=resizeBitmap(origBitmap,origBitmap.getWidth(),origBitmap.getHeight());
    bos=new ByteArrayOutputStream();
    bitmap.compress(Bitmap.CompressFormat.PNG,Consts.ZERO_VALUE,bos);
    byte[] bitmapData=bos.toByteArray();
    fos=new FileOutputStream(tempFile);
    fos.write(bitmapData);
    fos.close();
    bos.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    Utils.closeOutputStream(fos);
    Utils.closeOutputStream(bos);
  }
  return tempFile.getAbsolutePath();
}",0.7781155015197568
114692,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_search:
    friendsListView.addFooterView(globalSearchLayout);
  friendsTitle.setText(R.string.frl_friends);
friendsListView.addHeaderView(friendsListViewTitle);
positionCounter++;
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_search:
    friendsTitle.setText(R.string.frl_friends);
  positionCounter++;
friendsListView.setAdapter(null);
friendsListView.addHeaderView(friendsListViewTitle);
friendsListView.addFooterView(globalSearchLayout);
friendsListView.setAdapter(friendsListAdapter);
return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.5778894472361809
114693,"@Override public boolean onQueryTextChange(String newText){
  constraint=newText;
  if (state == State.FRIENDS_LIST) {
    FriendsListCursorAdapter friendListCursorAdapter=(FriendsListCursorAdapter)friendsListAdapter;
    friendListCursorAdapter.setFilterQueryProvider(this);
    friendListCursorAdapter.getFilter().filter(newText);
    friendListCursorAdapter.setSearchCharacters(newText);
  }
 else {
    startUsersListLoader(newText);
  }
  return true;
}","@Override public boolean onQueryTextChange(String newText){
  constraint=newText;
  if (state == State.FRIENDS_LIST) {
    friendsListAdapter.setFilterQueryProvider(this);
    friendsListAdapter.getFilter().filter(newText);
    friendsListAdapter.setSearchCharacters(newText);
  }
 else {
    startUsersListLoader(newText);
  }
  return true;
}",0.8054862842892768
114694,"@Override public void onDetach(){
  super.onDetach();
  callbacks=null;
}","@Override public void onDetach(){
  super.onDetach();
  navigationDrawerCallbacks=null;
}",0.8888888888888888
114695,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  callbacks=(NavigationDrawerCallbacks)activity;
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  navigationDrawerCallbacks=(NavigationDrawerCallbacks)activity;
}",0.9343065693430656
114696,"private void selectItem(int position){
  currentSelectedPosition=position;
  if (drawerListView != null) {
    drawerListView.setItemChecked(position,true);
  }
  if (drawerLayout != null) {
    drawerLayout.closeDrawer(fragmentContainerView);
  }
  if (callbacks != null) {
    callbacks.onNavigationDrawerItemSelected(position);
  }
}","private void selectItem(int position){
  currentSelectedPosition=position;
  if (drawerListView != null) {
    drawerListView.setItemChecked(position,true);
  }
  if (drawerLayout != null) {
    drawerLayout.closeDrawer(fragmentContainerView);
  }
  if (navigationDrawerCallbacks != null) {
    navigationDrawerCallbacks.onNavigationDrawerItemSelected(position);
  }
}",0.9488636363636364
114697,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_navigation_drawer,container,false);
  initUI(rootView);
  initListeners();
  NavigationDrawerAdapter navigationDrawerAdapter=new NavigationDrawerAdapter(baseActivity,getNavigationDrawerItems());
  drawerListView.setAdapter(navigationDrawerAdapter);
  drawerListView.setItemChecked(currentSelectedPosition,true);
  QBUser user=App.getInstance().getUser();
  if (user != null) {
    fullnameTextView.setText(user.getFullName());
  }
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_navigation_drawer,container,false);
  initUI(rootView);
  initListeners();
  NavigationDrawerAdapter navigationDrawerAdapter=new NavigationDrawerAdapter(baseActivity,getNavigationDrawerItems());
  drawerListView.setAdapter(navigationDrawerAdapter);
  drawerListView.setItemChecked(currentSelectedPosition,true);
  return rootView;
}",0.8607825295723385
114698,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_friend_details);
  avatarImageView=_findViewById(R.id.avatarImageView);
  nameTextView=_findViewById(R.id.nameTextView);
  onlineImageView=_findViewById(R.id.onlineImageView);
  onlineStatusTextView=_findViewById(R.id.onlineStatusTextView);
  phoneTextView=_findViewById(R.id.phoneTextView);
  phoneView=_findViewById(R.id.phoneView);
  addAction(QBServiceConsts.REMOVE_FRIEND_SUCCESS_ACTION,new RemoveFriendSuccessAction());
  addAction(QBServiceConsts.REMOVE_FRIEND_FAIL_ACTION,failAction);
  addAction(QBServiceConsts.GET_FILE_FAIL_ACTION,failAction);
  updateBroadcastActionList();
  friend=(Friend)getIntent().getExtras().getSerializable(EXTRA_FRIEND);
  fillUI(friend);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_friend_details);
  avatarImageView=_findViewById(R.id.avatarImageView);
  nameTextView=_findViewById(R.id.nameTextView);
  onlineImageView=_findViewById(R.id.onlineImageView);
  onlineStatusTextView=_findViewById(R.id.onlineStatusTextView);
  phoneTextView=_findViewById(R.id.phoneTextView);
  phoneView=_findViewById(R.id.phoneView);
  addAction(QBServiceConsts.REMOVE_FRIEND_SUCCESS_ACTION,new RemoveFriendSuccessAction());
  addAction(QBServiceConsts.REMOVE_FRIEND_FAIL_ACTION,failAction);
  addAction(QBServiceConsts.GET_FILE_FAIL_ACTION,failAction);
  updateBroadcastActionList();
  friend=(Friend)getIntent().getExtras().getSerializable(EXTRA_FRIEND);
  initFriendsFields(friend);
}",0.9858809085328424
114699,"public static Cursor getAllPrivateChatMessagesBySenderId(Context context,int senderId){
  return context.getContentResolver().query(FriendTable.CONTENT_URI,null,null,null,PrivateChatMessagesTable.Cols.ID + ""String_Node_Str"" + PrivateChatMessagesTable.Cols.SENDER_NAME+ ""String_Node_Str"");
}","public static Cursor getAllPrivateChatMessagesBySenderId(Context context,int senderId){
  return context.getContentResolver().query(PrivateChatMessagesTable.CONTENT_URI,null,PrivateChatMessagesTable.Cols.SENDER_ID + ""String_Node_Str"" + senderId,null,null);
}",0.7846715328467153
114700,"public static void savePrivateChatMessage(Context context,ChatMessage message){
  ContentValues values=new ContentValues();
  values.put(PrivateChatMessagesTable.Cols.ID,message.getId());
  values.put(PrivateChatMessagesTable.Cols.SUBJECT,message.getSubject());
  values.put(PrivateChatMessagesTable.Cols.BODY,message.getBody());
  values.put(PrivateChatMessagesTable.Cols.SENDER_NAME,message.getSenderName());
  values.put(PrivateChatMessagesTable.Cols.SENDER_ID,message.getSenderId());
  values.put(PrivateChatMessagesTable.Cols.TIME,DateUtils.dateToLong(message.getTime()));
  values.put(PrivateChatMessagesTable.Cols.INCOMING,message.isIncoming());
  context.getContentResolver().insert(PrivateChatMessagesTable.CONTENT_URI,values);
}","public static void savePrivateChatMessage(Context context,ChatMessage message){
  ContentValues values=new ContentValues();
  values.put(PrivateChatMessagesTable.Cols.SUBJECT,message.getSubject());
  values.put(PrivateChatMessagesTable.Cols.BODY,message.getBody());
  values.put(PrivateChatMessagesTable.Cols.SENDER_NAME,message.getSenderName());
  values.put(PrivateChatMessagesTable.Cols.SENDER_ID,message.getSenderId());
  values.put(PrivateChatMessagesTable.Cols.TIME,message.getTime());
  values.put(PrivateChatMessagesTable.Cols.INCOMING,message.isIncoming());
  context.getContentResolver().insert(PrivateChatMessagesTable.CONTENT_URI,values);
}",0.9151079136690649
114701,"public Date getTime(){
  return time;
}","public long getTime(){
  return time;
}",0.8974358974358975
114702,"public void setTime(Date time){
  this.time=time;
}","public void setTime(long time){
  this.time=time;
}",0.9215686274509804
114703,"private void initChat(){
  QBChatService qbChatService;
  QBPrivateChatManager qbPrivateChatManager;
  qbChatService=QBChatService.getInstance();
  try {
    qbChatService.login(App.getInstance().getUser());
  }
 catch (  XMPPException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  SmackException e) {
    e.printStackTrace();
  }
  qbPrivateChatManager=qbChatService.getPrivateChatManager();
  qbPrivateChatManager.addPrivateChatManagerListener(this);
  qbPrivateChat=qbPrivateChatManager.createChat(opponentFriend.getId(),this);
}","private void initChat(){
  QBPrivateChatManager qbPrivateChatManager;
  qbChatService=QBChatService.getInstance();
  if (!qbChatService.isLoggedIn()) {
    loginToChat();
  }
  qbPrivateChatManager=qbChatService.getPrivateChatManager();
  qbPrivateChatManager.addPrivateChatManagerListener(this);
  qbPrivateChat=qbPrivateChatManager.createChat(opponentFriend.getId(),this);
}",0.3041666666666666
114704,"public void sendMessageOnClick(View view){
  Message message=getMessage();
  try {
    qbPrivateChat.sendMessage(message);
    saveMessageToCache(message);
  }
 catch (  XMPPException e) {
    e.printStackTrace();
  }
catch (  SmackException.NotConnectedException e) {
    e.printStackTrace();
  }
}","public void sendMessageOnClick(View view){
  Message message=getMessage();
  try {
    qbPrivateChat.sendMessage(message);
  }
 catch (  XMPPException e) {
    e.printStackTrace();
  }
catch (  SmackException.NotConnectedException e) {
    e.printStackTrace();
  }
  saveMessageToCache(message);
  messageEditText.setText(""String_Node_Str"");
}",0.8286604361370716
114705,"protected BaseAdapter getMessagesAdapter(){
  Cursor cursor=getAllPrivateChatMessagesBySenderId();
  if (cursor != null) {
    return new PrivateChatMessagesAdapter(this,getAllPrivateChatMessagesBySenderId());
  }
 else {
    return null;
  }
}","protected BaseAdapter getMessagesAdapter(){
  return new PrivateChatMessagesAdapter(this,getAllPrivateChatMessages());
}",0.6593406593406593
114706,"private void saveMessageToCache(Message message){
  ChatMessage chatMessage=new ChatMessage();
  chatMessage.setSubject(message.getSubject());
  chatMessage.setBody(message.getBody());
  chatMessage.setSenderName(opponentFriend.getEmail());
  chatMessage.setSenderId(opponentFriend.getId());
  chatMessage.setTime(new Date(System.currentTimeMillis()));
  DatabaseManager.savePrivateChatMessage(this,chatMessage);
}","private void saveMessageToCache(Message message){
  ChatMessage chatMessage=new ChatMessage();
  chatMessage.setSubject(message.getSubject());
  chatMessage.setBody(message.getBody());
  chatMessage.setSenderName(opponentFriend.getEmail());
  chatMessage.setSenderId(opponentFriend.getId());
  chatMessage.setTime(System.currentTimeMillis());
  DatabaseManager.savePrivateChatMessage(this,chatMessage);
}",0.9877750611246944
114707,"@Override public void bindView(View view,Context context,Cursor cursor){
  ViewHolder holder=(ViewHolder)view.getTag();
  String subject=cursor.getString(cursor.getColumnIndex(PrivateChatMessagesTable.Cols.SUBJECT));
  String body=cursor.getString(cursor.getColumnIndex(PrivateChatMessagesTable.Cols.BODY));
  String senderName=cursor.getString(cursor.getColumnIndex(PrivateChatMessagesTable.Cols.SENDER_NAME));
  String time=cursor.getString(cursor.getColumnIndex(PrivateChatMessagesTable.Cols.TIME));
  holder.messageTextView.setText(body);
  holder.nameTextView.setText(senderName);
  holder.timeTextView.setText(time);
}","@Override public void bindView(View view,Context context,Cursor cursor){
  ViewHolder holder=(ViewHolder)view.getTag();
  String subject=cursor.getString(cursor.getColumnIndex(PrivateChatMessagesTable.Cols.SUBJECT));
  String body=cursor.getString(cursor.getColumnIndex(PrivateChatMessagesTable.Cols.BODY));
  String senderName=cursor.getString(cursor.getColumnIndex(PrivateChatMessagesTable.Cols.SENDER_NAME));
  long time=cursor.getLong(cursor.getColumnIndex(PrivateChatMessagesTable.Cols.TIME));
  holder.messageTextView.setText(body);
  holder.nameTextView.setText(senderName);
  holder.timeTextView.setText(DateUtils.longToMessageDate(time));
}",0.9615082482325216
114708,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setHasOptionsMenu(true);
  title=getString(R.string.nvd_title_friends);
  state=State.FRIENDS_LIST;
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  title=getString(R.string.nvd_title_friends);
  state=State.FRIENDS_LIST;
}",0.9276139410187668
114709,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  addActionsAddFriend();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  addActionsAddFriend();
  setHasOptionsMenu(true);
}",0.912621359223301
114710,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  title=getString(R.string.nvd_title_friends);
  state=State.FRIENDS_LIST;
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setHasOptionsMenu(true);
  title=getString(R.string.nvd_title_friends);
  state=State.FRIENDS_LIST;
}",0.9276139410187668
114711,"@Override public void onItemClick(AdapterView<?> parent,final View view,int position,long id){
  Cursor selectedItem=(Cursor)friendsListAdapter.getItem(position - headersAndFootersCounter);
  FriendDetailsActivity.start(baseActivity,DatabaseManager.getFriendFromCursor(selectedItem));
}","@Override public void onItemClick(AdapterView<?> parent,final View view,int position,long id){
  if (position == Consts.ZERO_VALUE) {
    return;
  }
  Cursor selectedItem=(Cursor)friendsListAdapter.getItem(position - headersAndFootersCounter);
  FriendDetailsActivity.start(baseActivity,DatabaseManager.getFriendFromCursor(selectedItem));
}",0.912280701754386
114712,"public void hideProgress(){
  if (progress != null) {
    progress.dismissAllowingStateLoss();
  }
}","public void hideProgress(){
  if (progress != null && progress.isVisible()) {
    progress.dismissAllowingStateLoss();
  }
}",0.8928571428571429
114713,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setHasOptionsMenu(true);
  title=getString(R.string.nvd_title_friends);
  state=State.FRIENDS_LIST;
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  title=getString(R.string.nvd_title_friends);
  state=State.FRIENDS_LIST;
}",0.9276139410187668
114714,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_navigation_drawer,container,false);
  drawerListView=(ListView)rootView.findViewById(R.id.navigationList);
  drawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      selectItem(position);
    }
  }
);
  drawerListView.setAdapter(new ArrayAdapter<String>(baseActivity.getActionBar().getThemedContext(),R.layout.list_item_navigation_drawler,R.id.textView,new String[]{getString(R.string.nvd_title_friends),getString(R.string.nvd_title_chats),getString(R.string.nvd_title_settings),getString(R.string.nvd_title_invite_friends)}));
  drawerListView.setItemChecked(currentSelectedPosition,true);
  logoutButton=(ImageButton)rootView.findViewById(R.id.logoutButton);
  logoutButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      logout();
    }
  }
);
  fullName=(TextView)rootView.findViewById(R.id.fullname);
  QBUser user=App.getInstance().getUser();
  if (user != null) {
    fullName.setText(user.getFullName());
  }
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_navigation_drawer,container,false);
  drawerListView=(ListView)rootView.findViewById(R.id.navigationList);
  drawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      selectItem(position);
    }
  }
);
  drawerListView.setAdapter(new ArrayAdapter<String>(baseActivity.getActionBar().getThemedContext(),R.layout.list_item_navigation_drawler,R.id.textView,new String[]{getString(R.string.nvd_title_friends),getString(R.string.nvd_title_chats),getString(R.string.nvd_title_settings),getString(R.string.nvd_title_invite_friends)}));
  drawerListView.setItemChecked(currentSelectedPosition,true);
  logoutButton=(ImageButton)rootView.findViewById(R.id.logoutImageButton);
  logoutButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      logout();
    }
  }
);
  fullName=(TextView)rootView.findViewById(R.id.fullnameTextView);
  QBUser user=App.getInstance().getUser();
  if (user != null) {
    fullName.setText(user.getFullName());
  }
  return rootView;
}",0.9949553744664338
114715,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  baseActivity.addAction(QBServiceConsts.LOGOUT_SUCCESS_ACTION,new LogoutSuccessAction());
  baseActivity.addAction(QBServiceConsts.LOGOUT_FAIL_ACTION,new BaseActivity.FailAction(baseActivity));
  baseActivity.updateBroadcastActionList();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setHasOptionsMenu(true);
  baseActivity.addAction(QBServiceConsts.LOGOUT_SUCCESS_ACTION,new LogoutSuccessAction());
  baseActivity.addAction(QBServiceConsts.LOGOUT_FAIL_ACTION,new BaseActivity.FailAction(baseActivity));
  baseActivity.updateBroadcastActionList();
  baseActivity.getActionBar().setIcon(android.R.color.transparent);
  baseActivity.getActionBar().setDisplayShowHomeEnabled(true);
}",0.8536312849162011
114716,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder=null;
  final InviteFriend data=getItem(position);
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_invite_friend,null);
    holder=new ViewHolder();
    holder.avatarImageView=(ImageView)convertView.findViewById(R.id.avatarImageView);
    holder.nameTextView=(TextView)convertView.findViewById(R.id.nameTextView);
    holder.viaTextView=(TextView)convertView.findViewById(R.id.viaTextView);
    holder.checkBox=(CheckBox)convertView.findViewById(R.id.selectUserCheckBox);
    convertView.setTag(holder);
    holder.checkBox.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        CheckBox cb=(CheckBox)v;
        InviteFriend inviteFriend=(InviteFriend)cb.getTag();
        inviteFriend.setSelected(cb.isChecked());
        notifyCounterChanged(cb.isChecked(),inviteFriend.getViaLabelType());
      }
    }
);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.nameTextView.setText(data.getName());
  holder.viaTextView.setText(getViaLabelById(data.getViaLabelType()));
  holder.checkBox.setChecked(data.isSelected());
  holder.checkBox.setTag(data);
  String uri=""String_Node_Str"";
  if (data.getViaLabelType() == InviteFriend.VIA_CONTACTS_TYPE) {
    uri=data.getLink();
  }
 else   if (data.getViaLabelType() == InviteFriend.VIA_FACEBOOK_TYPE) {
    uri=String.format(activity.getString(R.string.inf_url_to_facebook_avatar),data.getId());
  }
  displayImage(uri,holder.avatarImageView);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder=null;
  final InviteFriend data=getItem(position);
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.list_item_invite_friend,null);
    holder=new ViewHolder();
    holder.avatarImageView=(ImageView)convertView.findViewById(R.id.avatarImageView);
    holder.nameTextView=(TextView)convertView.findViewById(R.id.nameTextView);
    holder.viaTextView=(TextView)convertView.findViewById(R.id.viaTextView);
    holder.checkBox=(CheckBox)convertView.findViewById(R.id.selectUserCheckBox);
    convertView.setTag(holder);
    holder.checkBox.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        CheckBox cb=(CheckBox)v;
        InviteFriend inviteFriend=(InviteFriend)cb.getTag();
        inviteFriend.setSelected(cb.isChecked());
        notifyCounterChanged(cb.isChecked(),inviteFriend.getViaLabelType());
      }
    }
);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.nameTextView.setText(data.getName());
  holder.viaTextView.setText(getViaLabelById(data.getViaLabelType()));
  holder.checkBox.setChecked(data.isSelected());
  holder.checkBox.setTag(data);
  String uri=null;
  if (data.getViaLabelType() == InviteFriend.VIA_CONTACTS_TYPE) {
    uri=data.getUri().toString();
  }
 else   if (data.getViaLabelType() == InviteFriend.VIA_FACEBOOK_TYPE) {
    uri=String.format(activity.getString(R.string.inf_url_to_facebook_avatar),data.getId());
  }
  displayImage(uri,holder.avatarImageView);
  return convertView;
}",0.9878769039477774
114717,"public List<InviteFriend> getContactsWithEmail(){
  List<InviteFriend> friendsContactsList=new ArrayList<InviteFriend>();
  Uri uri=null;
  ContentResolver contentResolver=context.getContentResolver();
  String[] PROJECTION=new String[]{ContactsContract.RawContacts._ID,ContactsContract.Contacts.DISPLAY_NAME,ContactsContract.Contacts.PHOTO_ID,ContactsContract.CommonDataKinds.Email.DATA,ContactsContract.CommonDataKinds.Photo.CONTACT_ID};
  String order=""String_Node_Str"" + ContactsContract.Contacts.DISPLAY_NAME + ""String_Node_Str""+ ContactsContract.CommonDataKinds.Phone.CONTACT_ID+ ""String_Node_Str""+ ContactsContract.Contacts.DISPLAY_NAME+ ""String_Node_Str""+ ContactsContract.CommonDataKinds.Email.DATA+ ""String_Node_Str"";
  String filter=ContactsContract.CommonDataKinds.Email.DATA + ""String_Node_Str"";
  Cursor cursor=contentResolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,PROJECTION,filter,null,order);
  if (cursor.moveToFirst()) {
    String id;
    String name;
    String email;
    do {
      name=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
      email=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA));
      id=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.CONTACT_ID));
      if (ContactsContract.Contacts.CONTENT_URI != null) {
        uri=ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,Long.parseLong(id));
      }
      friendsContactsList.add(new InviteFriend(email,name,null,InviteFriend.VIA_CONTACTS_TYPE,uri,false));
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  return friendsContactsList;
}","public List<InviteFriend> getContactsWithEmail(){
  List<InviteFriend> friendsContactsList=new ArrayList<InviteFriend>();
  Uri uri=null;
  ContentResolver contentResolver=context.getContentResolver();
  String[] PROJECTION=new String[]{ContactsContract.RawContacts._ID,ContactsContract.Contacts.DISPLAY_NAME,ContactsContract.Contacts.PHOTO_ID,ContactsContract.CommonDataKinds.Email.DATA,ContactsContract.CommonDataKinds.Photo.CONTACT_ID};
  String order=""String_Node_Str"" + ContactsContract.Contacts.DISPLAY_NAME + ""String_Node_Str""+ ContactsContract.CommonDataKinds.Phone.CONTACT_ID+ ""String_Node_Str""+ ContactsContract.Contacts.DISPLAY_NAME+ ""String_Node_Str""+ ContactsContract.CommonDataKinds.Email.DATA+ ""String_Node_Str"";
  String filter=ContactsContract.CommonDataKinds.Email.DATA + ""String_Node_Str"";
  Cursor cursor=contentResolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,PROJECTION,filter,null,order);
  if (cursor.moveToFirst()) {
    String id;
    String name;
    String email;
    do {
      name=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
      email=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA));
      id=cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.CONTACT_ID));
      if (ContactsContract.Contacts.CONTENT_URI != null) {
        uri=ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,Long.parseLong(id));
        uri=Uri.withAppendedPath(uri,ContactsContract.Contacts.Photo.CONTENT_DIRECTORY);
      }
      friendsContactsList.add(new InviteFriend(email,name,null,InviteFriend.VIA_CONTACTS_TYPE,uri,false));
    }
 while (cursor.moveToNext());
  }
  cursor.close();
  return friendsContactsList;
}",0.9742402315484804
114718,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  useDoubleBackPressed=true;
  NavigationDrawerFragment navigationDrawerFragment=(NavigationDrawerFragment)getFragmentManager().findFragmentById(R.id.navigation_drawer);
  if (!isImportInitialized) {
    showProgress();
    facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
    importFriends=new ImportFriends(MainActivity.this,facebookHelper);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  useDoubleBackPressed=true;
  isImportInitialized=App.getInstance().getPrefsHelper().getPref(PrefsHelper.PREF_IMPORT_INITIALIZED,false);
  initNavigationDrawer();
  if (!isImportInitialized) {
    showProgress();
    facebookHelper=new FacebookHelper(this,savedInstanceState,new FacebookSessionStatusCallback());
    importFriends=new ImportFriends(MainActivity.this,facebookHelper);
  }
}",0.7813084112149533
114719,"@Override public void onNavigationDrawerItemSelected(int position){
  Fragment fragment=null;
switch (position) {
case ID_FRIEND_LIST_FRAGMENT:
    fragment=FriendListFragment.newInstance();
  break;
case ID_CHAT_LIST_FRAGMENT:
fragment=ChatsListFragment.newInstance();
break;
case ID_SETTINGS_FRAGMENT:
fragment=SettingsFragment.newInstance();
break;
case ID_INVITE_FRIENDS_FRAGMENT:
fragment=InviteFriendsFragment.newInstance();
break;
}
setCurrentFragment(fragment);
}","@Override public void onNavigationDrawerItemSelected(int position){
  Fragment fragment=null;
switch (position) {
case ID_FRIEND_LIST_FRAGMENT:
    fragment=FriendListFragment.newInstance();
  break;
case ID_CHATS_LIST_FRAGMENT:
fragment=ChatsListFragment.newInstance();
break;
case ID_SETTINGS_FRAGMENT:
fragment=SettingsFragment.newInstance();
break;
case ID_INVITE_FRIENDS_FRAGMENT:
fragment=InviteFriendsFragment.newInstance();
break;
}
setCurrentFragment(fragment);
}",0.9989395546129376
114720,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_profile);
  findViewById(this);
  linearLayoutChangeAvatar.setOnClickListener(linearLayoutChangeAvatarOnClickListener);
  textViewChangeFullName.setOnClickListener(textViewChangeFullNameOnClickListener);
  textViewChangeEmail.setOnClickListener(textViewChangeEmailOnClickListener);
  textViewChangeStatusMessage.setOnClickListener(textViewChangeStatusMessageOnClickListener);
  actionBar.setDisplayHomeAsUpEnabled(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_profile);
  findViewById(this);
  linearLayoutChangeAvatar.setOnClickListener(linearLayoutChangeAvatarOnClickListener);
  textViewChangeFullName.setOnClickListener(textViewChangeFullNameOnClickListener);
  textViewChangeEmail.setOnClickListener(textViewChangeEmailOnClickListener);
  textViewChangeStatusMessage.setOnClickListener(textViewChangeStatusMessageOnClickListener);
  imageHelper=new ImageHelper(this);
}",0.94
114721,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == REQUEST_CODE && resultCode == Activity.RESULT_OK)   try {
    pathToImage=getPath(data.getData());
    if (bitmap != null) {
      bitmap.recycle();
    }
    InputStream stream=getContentResolver().openInputStream(data.getData());
    bitmap=BitmapFactory.decodeStream(stream);
    stream.close();
    imageViewAvatar.setImageBitmap(bitmap);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == ImageHelper.REQUEST_CODE && resultCode == Activity.RESULT_OK)   try {
    pathToImage=imageHelper.getPath(data.getData());
    if (bitmap != null) {
      bitmap.recycle();
    }
    InputStream stream=getContentResolver().openInputStream(data.getData());
    bitmap=BitmapFactory.decodeStream(stream);
    stream.close();
    imageViewAvatar.setImageBitmap(bitmap);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  super.onActivityResult(requestCode,resultCode,data);
}",0.9813664596273292
114722,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    NavUtils.navigateUpFromSameTask(this);
  return true;
case R.id.action_audio_call:
DialogUtils.show(this,getString(R.string.comming_soon));
return true;
case R.id.action_video_call:
DialogUtils.show(this,getString(R.string.comming_soon));
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    NavUtils.navigateUpFromSameTask(this);
  return true;
}
return super.onOptionsItemSelected(item);
}",0.5615141955835962
114723,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_registration);
  useDoubleBackPressed=true;
  fullname=_findViewById(R.id.fullnameEdit);
  avatarLayout=_findViewById(R.id.avatarLayout);
  email=_findViewById(R.id.emailEdit);
  password=_findViewById(R.id.password);
  avatarImageView=_findViewById(R.id.avatarImageView);
  registerButton=_findViewById(R.id.signUpButton);
  initListeners();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_registration);
  useDoubleBackPressed=true;
  fullname=_findViewById(R.id.fullnameEdit);
  avatarLayout=_findViewById(R.id.avatarLayout);
  email=_findViewById(R.id.emailEdit);
  password=_findViewById(R.id.password);
  avatarImageView=_findViewById(R.id.avatarImageView);
  registerButton=_findViewById(R.id.signUpButton);
  imageHelper=new ImageHelper(this);
  initListeners();
}",0.962588473205258
114724,"private void initListeners(){
  avatarLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      getImage();
    }
  }
);
  registerButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      register();
    }
  }
);
}","private void initListeners(){
  avatarLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      imageHelper.getImage();
    }
  }
);
  registerButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      register();
    }
  }
);
}",0.9811912225705328
114725,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == REQUEST_CODE && resultCode == Activity.RESULT_OK)   try {
    pathToImage=getPath(data.getData());
    if (bitmap != null) {
      bitmap.recycle();
    }
    InputStream stream=getContentResolver().openInputStream(data.getData());
    bitmap=BitmapFactory.decodeStream(stream);
    stream.close();
    avatarImageView.setImageBitmap(bitmap);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == ImageHelper.REQUEST_CODE && resultCode == Activity.RESULT_OK)   try {
    pathToImage=imageHelper.getPath(data.getData());
    if (bitmap != null) {
      bitmap.recycle();
    }
    InputStream stream=getContentResolver().openInputStream(data.getData());
    bitmap=BitmapFactory.decodeStream(stream);
    stream.close();
    avatarImageView.setImageBitmap(bitmap);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  super.onActivityResult(requestCode,resultCode,data);
}",0.9813664596273292
114726,"public void isEqualTo(Object expected){
  assertEquals(expected,objectUnderTest);
}","public void isEqualTo(Object expected){
}",0.6612903225806451
114727,"public void isEmpty(){
  assertTrue(objectUnderTest.isEmpty());
}","public void isEmpty(){
}",0.5393258426966292
114728,"@When(""String_Node_Str"") public void handleFill(Fill fill){
  Order order=fill.getOrder();
  if (order.getParentOrder() != null) {
switch (order.getParentOrder().getFillType()) {
case GOOD_TIL_CANCELLED:
      break;
case GTC_OR_MARGIN_CAP:
    break;
case CANCEL_REMAINDER:
  break;
case LIMIT:
break;
case STOP_LIMIT:
break;
case TRAILING_STOP_LIMIT:
break;
case STOP_LOSS:
OrderBuilder.CommonOrderBuilder orderBuilder=buildStopLimitOrder(fill);
if (orderBuilder != null) {
Order stopOrder=orderBuilder.getOrder();
placeOrder(stopOrder);
}
break;
}
}
if (log.isInfoEnabled()) log.info(""String_Node_Str"" + fill);
OrderState state=orderStateMap.get(order);
if (state == null) {
log.warn(""String_Node_Str"" + order);
state=OrderState.PLACED;
}
if (state == OrderState.NEW) log.warn(""String_Node_Str"");
if (state.isOpen()) {
OrderState newState=order.isFilled() ? OrderState.FILLED : OrderState.PARTFILLED;
updateOrderState(order,newState);
}
PersitOrderFill(fill);
CreateTransaction(fill);
}","@When(""String_Node_Str"") public void handleFill(Fill fill){
  Order order=fill.getOrder();
  if (order.getParentOrder() != null) {
switch (order.getParentOrder().getFillType()) {
case GOOD_TIL_CANCELLED:
      break;
case GTC_OR_MARGIN_CAP:
    break;
case CANCEL_REMAINDER:
  break;
case LIMIT:
break;
case STOP_LIMIT:
break;
case TRAILING_STOP_LIMIT:
break;
case STOP_LOSS:
OrderBuilder.CommonOrderBuilder orderBuilder=buildStopLimitOrder(fill);
if (orderBuilder != null) {
Order stopOrder=orderBuilder.getOrder();
placeOrder(stopOrder);
}
break;
}
}
if (log.isInfoEnabled()) log.info(""String_Node_Str"" + fill);
OrderState state=orderStateMap.get(order);
if (state == null) {
log.warn(""String_Node_Str"" + order);
state=OrderState.PLACED;
}
if (state == OrderState.NEW) log.warn(""String_Node_Str"");
if (state.isOpen()) {
OrderState newState=order.isFilled() ? OrderState.FILLED : OrderState.PARTFILLED;
if (newState == OrderState.FILLED) {
log.info(""String_Node_Str"");
}
updateOrderState(order,newState);
}
PersitOrderFill(fill);
CreateTransaction(fill);
}",0.9667644183773216
114729,"@When(""String_Node_Str"") public void announceFill(Fill f){
  writer.println(""String_Node_Str"" + f.getOrder().getId() + ""String_Node_Str""+ f);
  writer.flush();
}","@When(""String_Node_Str"") private void announceFill(Fill f){
  out.println(""String_Node_Str"" + f.getOrder().getId() + ""String_Node_Str""+ f);
  out.flush();
}",0.9274447949526814
114730,"@When(""String_Node_Str"") public void announceUpdate(OrderUpdate update){
  writer.println(""String_Node_Str"" + update.getOrder().getId() + ""String_Node_Str""+ update.getState());
  writer.flush();
}","@When(""String_Node_Str"") private void announceUpdate(OrderUpdate update){
  Order order=update.getOrder();
switch (update.getState()) {
case NEW:
    out.println(""String_Node_Str"" + order);
case PLACED:
  out.println(""String_Node_Str"" + order);
case PARTFILLED:
out.println(""String_Node_Str"" + order);
case FILLED:
out.println(""String_Node_Str"" + order);
case CANCELLING:
out.println(""String_Node_Str"" + order);
case CANCELLED:
out.println(""String_Node_Str"" + order);
case REJECTED:
out.println(""String_Node_Str"" + order);
case EXPIRED:
out.println(""String_Node_Str"" + order);
}
out.flush();
}",0.2078580481622306
114731,"private void init() throws IOException {
  context=Context.create();
  context.attach(XchangeData.class);
  context.attach(TickWindow.class);
  context.attach(BasicQuoteService.class);
  context.attach(BasicAccountService.class);
  context.attach(MockOrderService.class);
  Terminal terminal=TerminalFactory.get();
  try {
    terminal.init();
  }
 catch (  Exception e) {
    throw new Error(""String_Node_Str"",e);
  }
  terminal.setEchoEnabled(false);
  console=new ConsoleReader();
  String prompt=config.getString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  console.setPrompt(prompt);
  history=new MemoryHistory();
  history.setMaxSize(config.getInt(""String_Node_Str"",100));
  console.setHistory(history);
  console.setHistoryEnabled(true);
  console.setKeyMap(KeyMap.EMACS);
  out=new ConsoleWriter(console);
  context.attach(ConsoleWriter.class,out);
  context.attach(PrintWriter.class,out);
  notifications=context.attach(ConsoleNotifications.class);
  console.println(""String_Node_Str"" + config.getString(""String_Node_Str""));
}","private void init() throws IOException {
  context=Context.create();
  context.attach(XchangeData.class);
  context.attach(BasicQuoteService.class);
  context.attach(BasicAccountService.class);
  context.attach(MockOrderService.class);
  Terminal terminal=TerminalFactory.get();
  try {
    terminal.init();
  }
 catch (  Exception e) {
    throw new Error(""String_Node_Str"",e);
  }
  terminal.setEchoEnabled(false);
  console=new ConsoleReader();
  String prompt=config.getString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  console.setPrompt(prompt);
  history=new MemoryHistory();
  history.setMaxSize(config.getInt(""String_Node_Str"",100));
  console.setHistory(history);
  console.setHistoryEnabled(true);
  console.setKeyMap(KeyMap.EMACS);
  out=new ConsoleWriter(console);
  context.attach(ConsoleWriter.class,out);
  context.attach(PrintWriter.class,out);
  notifications=context.attach(ConsoleNotifications.class);
  console.println(""String_Node_Str"" + config.getString(""String_Node_Str""));
}",0.9825750242013552
114732,"@SuppressWarnings(""String_Node_Str"") public void write(char[] cbuf,int off,int len) throws IOException {
  String output=new String(cbuf,off,len);
  try {
    console.print(output);
  }
 catch (  IOException e) {
    throw new Error(""String_Node_Str"",e);
  }
}","@SuppressWarnings(""String_Node_Str"") public void write(char[] cbuf,int off,int len) throws IOException {
  String output=new String(cbuf,off,len);
  try {
    console.print(output);
    if (output.contains(""String_Node_Str""))     console.flush();
  }
 catch (  IOException e) {
    throw new Error(""String_Node_Str"",e);
  }
}",0.8888888888888888
114733,"protected void handleSpecificOrder(SpecificOrder specificOrder){
  if (specificOrder.getStopPrice() != null)   reject(specificOrder,""String_Node_Str"");
  pendingOrders.add(specificOrder);
}","protected void handleSpecificOrder(SpecificOrder specificOrder){
  if (specificOrder.getStopPrice() != null)   reject(specificOrder,""String_Node_Str"");
  pendingOrders.add(specificOrder);
  updateOrderState(specificOrder,OrderState.PLACED);
}",0.877030162412993
114734,"@When(""String_Node_Str"") public void handleMarketData(MarketData m){
  if (m instanceof Trade) {
    Trade trade=(Trade)m;
    final Trade duplicate=PersistUtil.queryZeroOne(Trade.class,""String_Node_Str"",trade.getMarket(),trade.getRemoteKey());
    if (duplicate == null)     PersistUtil.insert(trade);
 else     log.warn(""String_Node_Str"" + trade);
  }
 else   PersistUtil.insert(m);
}","@When(""String_Node_Str"") public void handleMarketData(MarketData m){
  if (m instanceof Trade) {
    Trade trade=(Trade)m;
    final Trade duplicate=PersistUtil.queryZeroOne(Trade.class,""String_Node_Str"",trade.getMarket(),trade.getRemoteKey());
    if (duplicate == null)     PersistUtil.insert(trade);
 else     log.warn(""String_Node_Str"" + trade);
  }
 else {
    try {
      PersistUtil.insert(m);
    }
 catch (    Throwable e) {
      throw new Error(""String_Node_Str"" + m,e);
    }
  }
}",0.8782707622298066
114735,"private void construct(){
  com.espertech.esper.client.Configuration config=new com.espertech.esper.client.Configuration();
  config.addEventType(Event.class);
  Set<Class<? extends Event>> eventTypes=ReflectionUtil.getSubtypesOf(Event.class);
  for (  Class<? extends Event> eventType : eventTypes)   config.addEventType(eventType);
  config.addImport(IntoMethod.class);
  if (timeProvider != null) {
    config.getEngineDefaults().getThreading().setInternalTimerEnabled(false);
  }
  epService=EPServiceProviderManager.getDefaultProvider(config);
  if (timeProvider != null) {
    lastTime=timeProvider.getInitialTime();
    final EPServiceProviderImpl epService1=(EPServiceProviderImpl)epService;
    epService1.initialize(lastTime.getMillis());
  }
  epRuntime=epService.getEPRuntime();
  epAdministrator=epService.getEPAdministrator();
  injector=Guice.createInjector(new Module(){
    public void configure(    Binder binder){
      binder.bind(Context.class).toInstance(Context.this);
      binder.bindListener(Matchers.any(),new ProvisionListener(){
        public <T>void onProvision(        ProvisionInvocation<T> tProvisionInvocation){
          T provision=tProvisionInvocation.provision();
          subscribe(provision);
        }
      }
);
      binder.bindListener(Matchers.any(),new TypeListener(){
        public <I>void hear(        TypeLiteral<I> typeLiteral,        TypeEncounter<I> typeEncounter){
          for (Class<?> c=typeLiteral.getRawType(); c != Object.class; c=c.getSuperclass()) {
            for (            final Field field : c.getDeclaredFields()) {
              if (field.getType().isAssignableFrom(Logger.class)) {
                typeEncounter.register(new MembersInjector<I>(){
                  public void injectMembers(                  I i){
                    try {
                      boolean wasAccessible=field.isAccessible();
                      field.setAccessible(true);
                      if (field.get(i) == null) {
                        field.set(i,LoggerFactory.getLogger(field.getDeclaringClass()));
                      }
                      field.setAccessible(wasAccessible);
                    }
 catch (                    IllegalAccessException e) {
                      e.printStackTrace();
                    }
                  }
                }
);
              }
            }
          }
        }
      }
);
    }
  }
);
}","private void construct(){
  final com.espertech.esper.client.Configuration esperConfig=new com.espertech.esper.client.Configuration();
  esperConfig.addEventType(Event.class);
  Set<Class<? extends Event>> eventTypes=ReflectionUtil.getSubtypesOf(Event.class);
  for (  Class<? extends Event> eventType : eventTypes)   esperConfig.addEventType(eventType);
  esperConfig.addImport(IntoMethod.class);
  if (timeProvider != null) {
    esperConfig.getEngineDefaults().getThreading().setInternalTimerEnabled(false);
  }
  epService=EPServiceProviderManager.getDefaultProvider(esperConfig);
  if (timeProvider != null) {
    lastTime=timeProvider.getInitialTime();
    final EPServiceProviderImpl epService1=(EPServiceProviderImpl)epService;
    epService1.initialize(lastTime.getMillis());
  }
  epRuntime=epService.getEPRuntime();
  epAdministrator=epService.getEPAdministrator();
  config=Config.combined();
  injector=Guice.createInjector(new Module(){
    public void configure(    Binder binder){
      binder.bind(Context.class).toInstance(Context.this);
      binder.bind(Configuration.class).toInstance(Context.this.config);
      binder.bindListener(Matchers.any(),new ProvisionListener(){
        public <T>void onProvision(        ProvisionInvocation<T> tProvisionInvocation){
          T provision=tProvisionInvocation.provision();
          subscribe(provision);
        }
      }
);
      binder.bindListener(Matchers.any(),new TypeListener(){
        public <I>void hear(        TypeLiteral<I> typeLiteral,        TypeEncounter<I> typeEncounter){
          for (Class<?> c=typeLiteral.getRawType(); c != Object.class; c=c.getSuperclass()) {
            for (            final Field field : c.getDeclaredFields()) {
              if (field.getType().isAssignableFrom(Logger.class)) {
                typeEncounter.register(new MembersInjector<I>(){
                  public void injectMembers(                  I i){
                    try {
                      boolean wasAccessible=field.isAccessible();
                      field.setAccessible(true);
                      if (field.get(i) == null) {
                        field.set(i,LoggerFactory.getLogger(field.getDeclaringClass()));
                      }
                      field.setAccessible(wasAccessible);
                    }
 catch (                    IllegalAccessException e) {
                      e.printStackTrace();
                    }
                  }
                }
);
              }
            }
          }
        }
      }
);
    }
  }
);
}",0.970173317210802
114736,"public void configure(Binder binder){
  binder.bind(Context.class).toInstance(Context.this);
  binder.bindListener(Matchers.any(),new ProvisionListener(){
    public <T>void onProvision(    ProvisionInvocation<T> tProvisionInvocation){
      T provision=tProvisionInvocation.provision();
      subscribe(provision);
    }
  }
);
  binder.bindListener(Matchers.any(),new TypeListener(){
    public <I>void hear(    TypeLiteral<I> typeLiteral,    TypeEncounter<I> typeEncounter){
      for (Class<?> c=typeLiteral.getRawType(); c != Object.class; c=c.getSuperclass()) {
        for (        final Field field : c.getDeclaredFields()) {
          if (field.getType().isAssignableFrom(Logger.class)) {
            typeEncounter.register(new MembersInjector<I>(){
              public void injectMembers(              I i){
                try {
                  boolean wasAccessible=field.isAccessible();
                  field.setAccessible(true);
                  if (field.get(i) == null) {
                    field.set(i,LoggerFactory.getLogger(field.getDeclaringClass()));
                  }
                  field.setAccessible(wasAccessible);
                }
 catch (                IllegalAccessException e) {
                  e.printStackTrace();
                }
              }
            }
);
          }
        }
      }
    }
  }
);
}","public void configure(Binder binder){
  binder.bind(Context.class).toInstance(Context.this);
  binder.bind(Configuration.class).toInstance(Context.this.config);
  binder.bindListener(Matchers.any(),new ProvisionListener(){
    public <T>void onProvision(    ProvisionInvocation<T> tProvisionInvocation){
      T provision=tProvisionInvocation.provision();
      subscribe(provision);
    }
  }
);
  binder.bindListener(Matchers.any(),new TypeListener(){
    public <I>void hear(    TypeLiteral<I> typeLiteral,    TypeEncounter<I> typeEncounter){
      for (Class<?> c=typeLiteral.getRawType(); c != Object.class; c=c.getSuperclass()) {
        for (        final Field field : c.getDeclaredFields()) {
          if (field.getType().isAssignableFrom(Logger.class)) {
            typeEncounter.register(new MembersInjector<I>(){
              public void injectMembers(              I i){
                try {
                  boolean wasAccessible=field.isAccessible();
                  field.setAccessible(true);
                  if (field.get(i) == null) {
                    field.set(i,LoggerFactory.getLogger(field.getDeclaringClass()));
                  }
                  field.setAccessible(wasAccessible);
                }
 catch (                IllegalAccessException e) {
                  e.printStackTrace();
                }
              }
            }
);
          }
        }
      }
    }
  }
);
}",0.9755571531272466
114737,"@SuppressWarnings(""String_Node_Str"") @When(""String_Node_Str"") private void handleBook(Book b){
  List<Fill> fills=new ArrayList<>();
  for (  SpecificOrder order : pendingOrders) {
    if (order.getMarket().equals(b.getMarket())) {
      if (order.isBid()) {
        long remainingVolume=order.getUnfilledVolumeCount();
        for (        Offer ask : b.getAsks()) {
          if (order.getLimitPrice() != null && order.getLimitPrice().getCount() < ask.getPriceCount())           break;
          long fillVolume=Math.min(Math.abs(ask.getVolumeCount()),remainingVolume);
          Fill fill=new Fill(order,ask.getTime(),ask.getMarket(),ask.getPriceCount(),fillVolume);
          fills.add(fill);
          remainingVolume-=fillVolume;
          logFill(order,ask,fill);
          if (remainingVolume == 0)           break;
        }
      }
      if (order.isAsk()) {
        long remainingVolume=order.getVolume().getCount();
        for (        Offer bid : b.getBids()) {
          if (order.getLimitPrice() != null && order.getLimitPrice().getCount() > bid.getPriceCount())           break;
          long fillVolume=-Math.min(bid.getVolumeCount(),Math.abs(remainingVolume));
          Fill fill=new Fill(order,bid.getTime(),bid.getMarket(),bid.getPriceCount(),fillVolume);
          fills.add(fill);
          remainingVolume-=fillVolume;
          logFill(order,bid,fill);
          if (remainingVolume == 0)           break;
        }
      }
    }
  }
  for (  Fill fill : fills)   context.publish(fill);
}","@SuppressWarnings(""String_Node_Str"") @When(""String_Node_Str"") private void handleBook(Book b){
  List<Fill> fills=new ArrayList<>();
  for (  SpecificOrder order : pendingOrders) {
    if (order.getMarket().equals(b.getMarket())) {
      if (order.isBid()) {
        long remainingVolume=order.getUnfilledVolumeCount();
        for (        Offer ask : b.getAsks()) {
          if (order.getLimitPrice() != null && order.getLimitPrice().getCount() < ask.getPriceCount())           break;
          long fillVolume=Math.min(Math.abs(ask.getVolumeCount()),remainingVolume);
          Fill fill=new Fill(order,ask.getTime(),ask.getMarket(),ask.getPriceCount(),fillVolume);
          fills.add(fill);
          remainingVolume-=fillVolume;
          logFill(order,ask,fill);
          if (remainingVolume == 0)           break;
        }
      }
      if (order.isAsk()) {
        long remainingVolume=order.getUnfilledVolumeCount();
        for (        Offer bid : b.getBids()) {
          if (order.getLimitPrice() != null && order.getLimitPrice().getCount() > bid.getPriceCount())           break;
          long fillVolume=-Math.min(bid.getVolumeCount(),Math.abs(remainingVolume));
          Fill fill=new Fill(order,bid.getTime(),bid.getMarket(),bid.getPriceCount(),fillVolume);
          fills.add(fill);
          remainingVolume-=fillVolume;
          logFill(order,bid,fill);
          if (remainingVolume == 0)           break;
        }
      }
    }
  }
  for (  Fill fill : fills) {
    fill.getOrder().addFill(fill);
    context.publish(fill);
  }
}",0.977560975609756
114738,"protected @ManyToOne Book getParent(){
  return parent;
}","protected @ManyToOne(cascade=CascadeType.PERSIST) Book getParent(){
  return parent;
}",0.7972027972027972
114739,"@Override public void onScrollStateChanged(final AbsListView view,final int scrollState){
}","@Override public void onScrollStateChanged(AbsListView view,int scrollState){
}",0.9294117647058824
114740,"@Override public void onScroll(final AbsListView view,final int firstVisibleItem,final int visibleItemCount,final int totalItemCount){
}","@Override public void onScroll(AbsListView view,int firstVisibleItem,int visibleItemCount,int totalItemCount){
}",0.9032258064516128
114741,"@Override public void onItemClick(final AdapterView<?> parent,final View view,final int position,final long id){
  Toast.makeText(this,""String_Node_Str"" + position + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
}","@Override public void onItemClick(final AdapterView<?> parent,View view,int position,long id){
  Toast.makeText(this,""String_Node_Str"" + position + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
}",0.9558823529411764
114742,"private void initialize(final int layoutId){
  setContentView(layoutId);
  offset=0;
  final ViewGroup viewGroup=(ViewGroup)findViewById(R.id.listView);
  topTextView=(TextView)findViewById(R.id.quickReturnTopTarget);
  bottomTextView=(TextView)findViewById(R.id.quickReturnBottomTarget);
  adapter=new ArrayAdapter<>(this,R.layout.list_item);
  addMoreItems(100);
  if (viewGroup instanceof AbsListView) {
    int numColumns=(viewGroup instanceof GridView) ? 3 : 1;
    final AbsListView absListView=(AbsListView)viewGroup;
    absListView.setAdapter(new QuickReturnAdapter(adapter,numColumns));
  }
  final QuickReturnAttacher quickReturnAttacher=QuickReturnAttacher.forView(viewGroup);
  quickReturnAttacher.addTargetView(bottomTextView,AbsListViewScrollTarget.POSITION_BOTTOM);
  topTargetView=quickReturnAttacher.addTargetView(topTextView,AbsListViewScrollTarget.POSITION_TOP,dpToPx(this,50));
  if (quickReturnAttacher instanceof AbsListViewQuickReturnAttacher) {
    final AbsListViewQuickReturnAttacher attacher=(AbsListViewQuickReturnAttacher)quickReturnAttacher;
    attacher.addOnScrollListener(this);
    attacher.setOnItemClickListener(this);
  }
}","private void initialize(final int layoutId){
  setContentView(layoutId);
  offset=0;
  final ViewGroup viewGroup=(ViewGroup)findViewById(R.id.listView);
  topTextView=(TextView)findViewById(R.id.quickReturnTopTarget);
  bottomTextView=(TextView)findViewById(R.id.quickReturnBottomTarget);
  adapter=new ArrayAdapter<>(this,R.layout.list_item);
  addMoreItems(100);
  if (viewGroup instanceof AbsListView) {
    int numColumns=(viewGroup instanceof GridView) ? 3 : 1;
    final AbsListView absListView=(AbsListView)viewGroup;
    absListView.setAdapter(new QuickReturnAdapter(adapter,numColumns));
  }
  final QuickReturnAttacher quickReturnAttacher=QuickReturnAttacher.forView(viewGroup);
  quickReturnAttacher.addTargetView(bottomTextView,AbsListViewScrollTarget.POSITION_BOTTOM);
  topTargetView=quickReturnAttacher.addTargetView(topTextView,AbsListViewScrollTarget.POSITION_TOP,dpToPx(this,50));
  if (quickReturnAttacher instanceof AbsListViewQuickReturnAttacher) {
    final AbsListViewQuickReturnAttacher attacher=(AbsListViewQuickReturnAttacher)quickReturnAttacher;
    attacher.addOnScrollListener(this);
    attacher.setOnItemClickListener(this);
    attacher.setOnItemLongClickListener(this);
  }
}",0.980160405234276
114743,"@Override public boolean onNavigationItemSelected(final int itemPos,final long itemId){
  if (itemPos == currentPos)   return false;
  currentPos=itemPos;
switch (itemPos) {
case 0:
    currentPos=R.layout.activity_main;
  break;
case 1:
currentPos=R.layout.activity_main_grid;
break;
case 2:
currentPos=R.layout.activity_main_scrollview;
break;
}
initialize(currentPos);
return true;
}","@Override public boolean onNavigationItemSelected(int itemPos,long itemId){
  if (itemPos == currentPos)   return false;
  currentPos=itemPos;
switch (itemPos) {
case 0:
    currentPos=R.layout.activity_main;
  break;
case 1:
currentPos=R.layout.activity_main_grid;
break;
case 2:
currentPos=R.layout.activity_main_scrollview;
break;
}
initialize(currentPos);
return true;
}",0.9842105263157894
114744,"public AbsListViewQuickReturnAttacher(final AbsListView listView){
  this.absListView=listView;
  listView.setOnScrollListener(onScrollListener);
  listView.setOnItemClickListener(this);
}","public AbsListViewQuickReturnAttacher(AbsListView listView){
  this.absListView=listView;
  listView.setOnScrollListener(onScrollListener);
  listView.setOnItemClickListener(this);
  listView.setOnItemLongClickListener(this);
}",0.8771084337349397
114745,"public QuickReturnTargetView addTargetView(View view,int position,int viewHeight){
  final AbsListViewScrollTarget targetView=new AbsListViewScrollTarget(absListView,view,position,viewHeight);
  onScrollListener.registerOnScrollListener(targetView);
  return targetView;
}","public QuickReturnTargetView addTargetView(View view,int position,int viewHeight){
  AbsListViewScrollTarget targetView=new AbsListViewScrollTarget(absListView,view,position,viewHeight);
  onScrollListener.registerOnScrollListener(targetView);
  return targetView;
}",0.9888475836431226
114746,"public void setOnItemClickListener(final AbsListView.OnItemClickListener listener){
  onItemClickListener=listener;
}","public void setOnItemClickListener(AbsListView.OnItemClickListener listener){
  onItemClickListener=listener;
}",0.9736842105263158
114747,"public void addOnScrollListener(final AbsListView.OnScrollListener listener){
  onScrollListener.registerOnScrollListener(listener);
}","public void addOnScrollListener(AbsListView.OnScrollListener listener){
  onScrollListener.registerOnScrollListener(listener);
}",0.9770992366412212
114748,"@Override public void onItemClick(final AdapterView<?> parent,View view,int position,long id){
  int positionOffset;
  if (onItemClickListener != null) {
    if (parent instanceof ListView)     positionOffset=1;
 else     if (parent instanceof GridView)     positionOffset=((GridView)parent).getNumColumns();
 else     positionOffset=0;
    onItemClickListener.onItemClick(parent,view,position - positionOffset,id);
  }
}","@Override public void onItemClick(final AdapterView<?> parent,View view,int position,long id){
  if (onItemClickListener != null) {
    onItemClickListener.onItemClick(parent,view,position - getClickPositionOffset(parent),id);
  }
}",0.4900459418070444
114749,"public void removeTargetView(final AbsListViewScrollTarget targetView){
  onScrollListener.unregisterOnScrollListener(targetView);
}","public void removeTargetView(AbsListViewScrollTarget targetView){
  onScrollListener.unregisterOnScrollListener(targetView);
}",0.9767441860465116
114750,"@Override public View getView(final int position,final View convertView,final ViewGroup parent){
  View v;
  int finalHeight;
  if (position < numColumns) {
    if (convertView == null)     v=new View(parent.getContext());
 else     v=convertView;
    v.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT,targetViewHeight));
    finalHeight=targetViewHeight;
  }
 else {
    v=wrappedAdapter.getView(position - numColumns,convertView,parent);
    v.measure(View.MeasureSpec.makeMeasureSpec(parent.getWidth() / numColumns,View.MeasureSpec.AT_MOST),heightMeasureSpec);
    finalHeight=v.getMeasuredHeight();
  }
  if (position + numColumns < itemsVerticalOffset.length)   itemsVerticalOffset[position + numColumns]=itemsVerticalOffset[position] + finalHeight + verticalSpacing;
  return v;
}","@Override public View getView(final int position,final View convertView,final ViewGroup parent){
  View v;
  int finalHeight;
  if (position < numColumns) {
    if (convertView == null)     v=new View(parent.getContext());
 else     v=convertView;
    v.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT,targetViewHeight));
    finalHeight=targetViewHeight;
  }
 else {
    v=wrappedAdapter.getView(position - numColumns,convertView,parent);
    v.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT,AbsListView.LayoutParams.WRAP_CONTENT));
    v.measure(View.MeasureSpec.makeMeasureSpec(parent.getWidth() / numColumns,View.MeasureSpec.AT_MOST),heightMeasureSpec);
    finalHeight=v.getMeasuredHeight();
  }
  if (position + numColumns < itemsVerticalOffset.length)   itemsVerticalOffset[position + numColumns]=itemsVerticalOffset[position] + finalHeight + verticalSpacing;
  return v;
}",0.9266365688487584
114751,"private void initialize(final int layoutId){
  setContentView(layoutId);
  offset=0;
  final AbsListView listView=(AbsListView)findViewById(R.id.listView);
  topTextView=(TextView)findViewById(R.id.quickReturnTopTarget);
  bottomTextView=(TextView)findViewById(R.id.quickReturnBottomTarget);
  adapter=new ArrayAdapter<>(this,R.layout.list_item);
  addMoreItems(100);
  int numColumns=(listView instanceof GridView) ? 3 : 1;
  listView.setAdapter(new QuickReturnAdapter(adapter,numColumns));
  final QuickReturnAttacher quickReturnAttacher=new QuickReturnAttacher(listView);
  topTargetView=quickReturnAttacher.addTargetView(topTextView,QuickReturnTargetView.POSITION_TOP,dpToPx(this,50));
  quickReturnAttacher.addTargetView(bottomTextView,QuickReturnTargetView.POSITION_BOTTOM);
  quickReturnAttacher.addOnScrollListener(this);
}","private void initialize(final int layoutId){
  setContentView(layoutId);
  offset=0;
  final AbsListView listView=(AbsListView)findViewById(R.id.listView);
  topTextView=(TextView)findViewById(R.id.quickReturnTopTarget);
  bottomTextView=(TextView)findViewById(R.id.quickReturnBottomTarget);
  adapter=new ArrayAdapter<>(this,R.layout.list_item);
  addMoreItems(100);
  int numColumns=(listView instanceof GridView) ? 3 : 1;
  listView.setAdapter(new QuickReturnAdapter(adapter,numColumns));
  final QuickReturnAttacher quickReturnAttacher=new QuickReturnAttacher(listView);
  topTargetView=quickReturnAttacher.addTargetView(topTextView,QuickReturnTargetView.POSITION_TOP,dpToPx(this,50));
  quickReturnAttacher.addTargetView(bottomTextView,QuickReturnTargetView.POSITION_BOTTOM);
  quickReturnAttacher.addOnScrollListener(this);
  listView.setOnItemClickListener(this);
}",0.9759248385202584
114752,"@Override public int getViewTypeCount(){
  return wrappedAdapter.getViewTypeCount() + numColumns;
}","@Override public int getViewTypeCount(){
  return wrappedAdapter.getViewTypeCount() + 1;
}",0.9417989417989416
114753,"@Override public int getItemViewType(final int position){
  if (position < numColumns)   return VIEW_TYPE_PLACEHOLDER;
  return wrappedAdapter.getItemViewType(position);
}","@Override public int getItemViewType(final int position){
  if (position < numColumns)   return wrappedAdapter.getViewTypeCount();
  return wrappedAdapter.getItemViewType(position);
}",0.864406779661017
114754,"private static String getAccessToken(String scopeList){
  if (consumerKey == null) {
    makeDCRRequest();
  }
  URL url;
  HttpURLConnection urlConn=null;
  try {
    createSSLConnection();
    url=new URL(""String_Node_Str"");
    urlConn=(HttpURLConnection)url.openConnection();
    urlConn.setDoOutput(true);
    urlConn.setRequestMethod(""String_Node_Str"");
    urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    String clientEncoded=Base64.getEncoder().encodeToString((consumerKey + ':' + consumerSecret).getBytes(StandardCharsets.UTF_8));
    urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + clientEncoded);
    String postParams=""String_Node_Str"";
    if (!scopeList.isEmpty()) {
      postParams+=""String_Node_Str"" + scopeList;
    }
    urlConn.getOutputStream().write((postParams).getBytes(""String_Node_Str""));
    int responseCode=urlConn.getResponseCode();
    if (responseCode == 200) {
      String responseStr=getResponseString(urlConn.getInputStream());
      JsonParser parser=new JsonParser();
      JsonObject obj=parser.parse(responseStr).getAsJsonObject();
      return obj.get(""String_Node_Str"").getAsString();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + responseCode);
    }
  }
 catch (  IOException e) {
    String msg=""String_Node_Str"";
    throw new RuntimeException(msg,e);
  }
 finally {
    if (urlConn != null) {
      urlConn.disconnect();
    }
  }
}","private String getAccessToken(String scopeList){
  if (consumerKey == null) {
    makeDCRRequest();
  }
  URL url;
  HttpsURLConnection urlConn=null;
  try {
    url=new URL(""String_Node_Str"");
    urlConn=(HttpsURLConnection)url.openConnection();
    urlConn.setDoOutput(true);
    urlConn.setRequestMethod(""String_Node_Str"");
    urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    String clientEncoded=Base64.getEncoder().encodeToString((consumerKey + ':' + consumerSecret).getBytes(StandardCharsets.UTF_8));
    urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + clientEncoded);
    String postParams=""String_Node_Str"";
    if (!scopeList.isEmpty()) {
      postParams+=""String_Node_Str"" + scopeList;
    }
    urlConn.setHostnameVerifier((s,sslSession) -> true);
    SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
    sslContext.init(null,new TrustManager[]{trustAll},new SecureRandom());
    urlConn.setSSLSocketFactory(sslContext.getSocketFactory());
    urlConn.getOutputStream().write((postParams).getBytes(""String_Node_Str""));
    int responseCode=urlConn.getResponseCode();
    if (responseCode == 200) {
      String responseStr=getResponseString(urlConn.getInputStream());
      JsonParser parser=new JsonParser();
      JsonObject obj=parser.parse(responseStr).getAsJsonObject();
      return obj.get(""String_Node_Str"").getAsString();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + responseCode);
    }
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"";
    throw new RuntimeException(msg,e);
  }
 finally {
    if (urlConn != null) {
      urlConn.disconnect();
    }
  }
}",0.902478274863212
114755,"private static String getAccessTokenForPublisher(){
  return getAccessToken(""String_Node_Str"" + ""String_Node_Str"");
}","private String getAccessTokenForPublisher(){
  return getAccessToken(""String_Node_Str"" + ""String_Node_Str"");
}",0.9691629955947136
114756,"public void checkClientTrusted(java.security.cert.X509Certificate[] certs,String authType){
}","@Override public void checkClientTrusted(X509Certificate[] chain,String authType) throws CertificateException {
}",0.6796116504854369
114757,"public java.security.cert.X509Certificate[] getAcceptedIssuers(){
  return new java.security.cert.X509Certificate[0];
}","@Override public X509Certificate[] getAcceptedIssuers(){
  return null;
}",0.6354166666666666
114758,"private static String getAccessTokenForStore(){
  return getAccessToken(""String_Node_Str"");
}","private String getAccessTokenForStore(){
  return getAccessToken(""String_Node_Str"");
}",0.9608938547486032
114759,"public void checkServerTrusted(java.security.cert.X509Certificate[] certs,String authType){
}","@Override public void checkServerTrusted(X509Certificate[] chain,String authType) throws CertificateException {
}",0.6796116504854369
114760,"/** 
 * Apply SSL related settings to httpClient according to the current values of verifyingSsl and sslCaCert.
 */
private void applySslSettings(){
  try {
    KeyManager[] keyManagers=null;
    TrustManager[] trustManagers=null;
    HostnameVerifier hostnameVerifier=null;
    if (!verifyingSsl) {
      TrustManager trustAll=new X509TrustManager(){
        @Override public void checkClientTrusted(        X509Certificate[] chain,        String authType) throws CertificateException {
        }
        @Override public void checkServerTrusted(        X509Certificate[] chain,        String authType) throws CertificateException {
        }
        @Override public X509Certificate[] getAcceptedIssuers(){
          return null;
        }
      }
;
      SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
      trustManagers=new TrustManager[]{trustAll};
      hostnameVerifier=new HostnameVerifier(){
        @Override public boolean verify(        String hostname,        SSLSession session){
          return true;
        }
      }
;
    }
 else     if (sslCaCert != null) {
      char[] password=null;
      CertificateFactory certificateFactory=CertificateFactory.getInstance(""String_Node_Str"");
      Collection<? extends Certificate> certificates=certificateFactory.generateCertificates(sslCaCert);
      if (certificates.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      KeyStore caKeyStore=newEmptyKeyStore(password);
      int index=0;
      for (      Certificate certificate : certificates) {
        String certificateAlias=""String_Node_Str"" + Integer.toString(index++);
        caKeyStore.setCertificateEntry(certificateAlias,certificate);
      }
      TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
      trustManagerFactory.init(caKeyStore);
      trustManagers=trustManagerFactory.getTrustManagers();
    }
    if (keyManagers != null || trustManagers != null) {
      SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
      sslContext.init(keyManagers,trustManagers,new SecureRandom());
      httpClient.setSslSocketFactory(sslContext.getSocketFactory());
    }
 else {
      httpClient.setSslSocketFactory(null);
    }
    httpClient.setHostnameVerifier(hostnameVerifier);
  }
 catch (  GeneralSecurityException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Apply SSL related settings to httpClient according to the current values of verifyingSsl and sslCaCert.
 */
private void applySslSettings(){
  try {
    TrustManager[] trustManagers=null;
    HostnameVerifier hostnameVerifier=null;
    if (!verifyingSsl) {
      trustManagers=new TrustManager[]{trustAll};
      hostnameVerifier=(hostname,session) -> true;
    }
 else     if (sslCaCert != null) {
      char[] password=null;
      CertificateFactory certificateFactory=CertificateFactory.getInstance(""String_Node_Str"");
      Collection<? extends Certificate> certificates=certificateFactory.generateCertificates(sslCaCert);
      if (certificates.isEmpty()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      KeyStore caKeyStore=newEmptyKeyStore(password);
      int index=0;
      for (      Certificate certificate : certificates) {
        String certificateAlias=""String_Node_Str"" + Integer.toString(index++);
        caKeyStore.setCertificateEntry(certificateAlias,certificate);
      }
      TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
      trustManagerFactory.init(caKeyStore);
      trustManagers=trustManagerFactory.getTrustManagers();
    }
    if (trustManagers != null) {
      SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
      sslContext.init(null,trustManagers,new SecureRandom());
      httpClient.setSslSocketFactory(sslContext.getSocketFactory());
    }
 else {
      httpClient.setSslSocketFactory(null);
    }
    httpClient.setHostnameVerifier(hostnameVerifier);
  }
 catch (  GeneralSecurityException e) {
    throw new RuntimeException(e);
  }
}",0.8097087378640777
114761,"private static void makeDCRRequest(){
  String applicationName=""String_Node_Str"";
  URL url;
  HttpURLConnection urlConn=null;
  try {
    JsonObject json=new JsonObject();
    JsonArray callbackArray=new JsonArray();
    callbackArray.add(""String_Node_Str"");
    json.add(""String_Node_Str"",callbackArray);
    json.addProperty(""String_Node_Str"",applicationName);
    json.addProperty(""String_Node_Str"",""String_Node_Str"");
    JsonArray grantArray=new JsonArray();
    grantArray.add(""String_Node_Str"");
    json.add(""String_Node_Str"",grantArray);
    createSSLConnection();
    String dcrEndpoint=""String_Node_Str"";
    url=new URL(dcrEndpoint);
    urlConn=(HttpURLConnection)url.openConnection();
    urlConn.setDoOutput(true);
    urlConn.setRequestMethod(""String_Node_Str"");
    urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    String clientEncoded=Base64.getEncoder().encodeToString((System.getProperty(""String_Node_Str"",""String_Node_Str"") + ':' + System.getProperty(""String_Node_Str"",""String_Node_Str"")).getBytes(StandardCharsets.UTF_8));
    urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + clientEncoded);
    urlConn.getOutputStream().write((json.toString()).getBytes(""String_Node_Str""));
    int responseCode=urlConn.getResponseCode();
    if (responseCode == 201) {
      String responseStr=getResponseString(urlConn.getInputStream());
      JsonParser parser=new JsonParser();
      JsonObject jObj=parser.parse(responseStr).getAsJsonObject();
      consumerKey=jObj.getAsJsonPrimitive(""String_Node_Str"").getAsString();
      consumerSecret=jObj.getAsJsonPrimitive(""String_Node_Str"").getAsString();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + responseCode);
    }
  }
 catch (  IOException e) {
    String errorMsg=""String_Node_Str"" + applicationName;
    throw new RuntimeException(errorMsg,e);
  }
 finally {
    if (urlConn != null) {
      urlConn.disconnect();
    }
  }
}","private static void makeDCRRequest(){
  String applicationName=""String_Node_Str"";
  URL url;
  HttpURLConnection urlConn=null;
  try {
    JsonObject json=new JsonObject();
    JsonArray callbackArray=new JsonArray();
    callbackArray.add(""String_Node_Str"");
    json.add(""String_Node_Str"",callbackArray);
    json.addProperty(""String_Node_Str"",applicationName);
    json.addProperty(""String_Node_Str"",""String_Node_Str"");
    JsonArray grantArray=new JsonArray();
    grantArray.add(""String_Node_Str"");
    json.add(""String_Node_Str"",grantArray);
    String dcrEndpoint=""String_Node_Str"";
    url=new URL(dcrEndpoint);
    urlConn=(HttpURLConnection)url.openConnection();
    urlConn.setDoOutput(true);
    urlConn.setRequestMethod(""String_Node_Str"");
    urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    String clientEncoded=Base64.getEncoder().encodeToString((System.getProperty(""String_Node_Str"",""String_Node_Str"") + ':' + System.getProperty(""String_Node_Str"",""String_Node_Str"")).getBytes(StandardCharsets.UTF_8));
    urlConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + clientEncoded);
    urlConn.getOutputStream().write((json.toString()).getBytes(""String_Node_Str""));
    int responseCode=urlConn.getResponseCode();
    if (responseCode == 201) {
      String responseStr=getResponseString(urlConn.getInputStream());
      JsonParser parser=new JsonParser();
      JsonObject jObj=parser.parse(responseStr).getAsJsonObject();
      consumerKey=jObj.getAsJsonPrimitive(""String_Node_Str"").getAsString();
      consumerSecret=jObj.getAsJsonPrimitive(""String_Node_Str"").getAsString();
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + responseCode);
    }
  }
 catch (  IOException e) {
    String errorMsg=""String_Node_Str"" + applicationName;
    throw new RuntimeException(errorMsg,e);
  }
 finally {
    if (urlConn != null) {
      urlConn.disconnect();
    }
  }
}",0.9930250581245156
114762,"public static String getResponseString(InputStream input) throws IOException {
  try (BufferedReader buffer=new BufferedReader(new InputStreamReader(input))){
    return buffer.lines().collect(Collectors.joining(""String_Node_Str""));
  }
 }","private static String getResponseString(InputStream input) throws IOException {
  try (BufferedReader buffer=new BufferedReader(new InputStreamReader(input,StandardCharsets.UTF_8))){
    return buffer.lines().collect(Collectors.joining(""String_Node_Str""));
  }
 }",0.9322709163346612
114763,"/** 
 * Clean api by removing unnecessary details
 * @param api api to be exported
 */
private static void cleanApiDataToExport(API api){
  api.setThumbnailUrl(null);
  api.setScopes(new TreeSet<Scope>());
}","/** 
 * Clean api by removing unnecessary details
 * @param api api to be exported
 */
private static void cleanApiDataToExport(API api){
  api.setThumbnailUrl(null);
  api.setWsdlUrl(null);
  api.setScopes(new TreeSet<Scope>());
}",0.9452054794520548
114764,"/** 
 * Retrieve meta information of the API to export URL template information are stored in swagger.json definition while rest of the required data are in api.json
 * @param apiToReturn API to be exported
 * @param registry    Current tenant registry
 * @throws APIExportException If an error occurs while exporting meta information
 */
private static void exportMetaInformation(API apiToReturn,Registry registry) throws APIExportException {
  APIDefinition definitionFromSwagger20=new APIDefinitionFromSwagger20();
  String archivePath=archiveBasePath.concat(File.separator + apiToReturn.getId().getApiName() + ""String_Node_Str""+ apiToReturn.getId().getVersion());
  createDirectory(archivePath + File.separator + ""String_Node_Str"");
  cleanApiDataToExport(apiToReturn);
  Gson gson=new GsonBuilder().setPrettyPrinting().create();
  String apiInJson=gson.toJson(apiToReturn);
  writeFile(archivePath + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",apiInJson);
  try {
    String swaggerDefinition=definitionFromSwagger20.getAPIDefinition(apiToReturn.getId(),registry);
    JsonParser parser=new JsonParser();
    JsonObject json=parser.parse(swaggerDefinition).getAsJsonObject();
    String formattedSwaggerJson=gson.toJson(json);
    writeFile(archivePath + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",formattedSwaggerJson);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
  }
 catch (  APIManagementException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIExportException(errorMessage,e);
  }
}","/** 
 * Retrieve meta information of the API to export URL template information are stored in swagger.json definition while rest of the required data are in api.json
 * @param apiToReturn API to be exported
 * @param registry    Current tenant registry
 * @throws APIExportException If an error occurs while exporting meta information
 */
private static void exportMetaInformation(API apiToReturn,Registry registry) throws APIExportException {
  APIDefinition definitionFromSwagger20=new APIDefinitionFromSwagger20();
  String archivePath=archiveBasePath.concat(File.separator + apiToReturn.getId().getApiName() + ""String_Node_Str""+ apiToReturn.getId().getVersion());
  createDirectory(archivePath + File.separator + ""String_Node_Str"");
  cleanApiDataToExport(apiToReturn);
  Gson gson=new GsonBuilder().setPrettyPrinting().create();
  String apiInJson=gson.toJson(apiToReturn);
  writeFile(archivePath + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",apiInJson);
  try {
    if (!APIConstants.APIType.WS.toString().equalsIgnoreCase(apiToReturn.getType())) {
      String swaggerDefinition=definitionFromSwagger20.getAPIDefinition(apiToReturn.getId(),registry);
      JsonParser parser=new JsonParser();
      JsonObject json=parser.parse(swaggerDefinition).getAsJsonObject();
      String formattedSwaggerJson=gson.toJson(json);
      writeFile(archivePath + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"",formattedSwaggerJson);
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"");
      }
    }
  }
 catch (  APIManagementException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIExportException(errorMessage,e);
  }
}",0.9675305332141794
114765,"/** 
 * This method imports an API
 * @param pathToArchive            location of the extracted folder of the API
 * @param currentUser              the current logged in user
 * @param isDefaultProviderAllowed decision to keep or replace the provider
 * @throws APIImportException     if there is an error in importing an API
 */
public static void importAPI(String pathToArchive,String currentUser,boolean isDefaultProviderAllowed) throws APIImportException {
  API importedApi=null;
  String prevProvider;
  APIDefinition definitionFromSwagger20=new APIDefinitionFromSwagger20();
  String pathToJSONFile=pathToArchive + APIImportExportConstants.JSON_FILE_LOCATION;
  try {
    String jsonContent=FileUtils.readFileToString(new File(pathToJSONFile));
    JsonElement configElement=new JsonParser().parse(jsonContent);
    JsonObject configObject=configElement.getAsJsonObject();
    JsonObject apiId=configObject.getAsJsonObject(APIImportExportConstants.ID_ELEMENT);
    prevProvider=apiId.get(APIImportExportConstants.PROVIDER_ELEMENT).getAsString();
    String prevTenantDomain=MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(prevProvider));
    String currentTenantDomain=MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(currentUser));
    if (isDefaultProviderAllowed) {
      if (!StringUtils.equals(prevTenantDomain,currentTenantDomain)) {
        String errorMessage=""String_Node_Str"" + ""String_Node_Str"";
        log.error(errorMessage);
        throw new APIImportException(errorMessage);
      }
      importedApi=new Gson().fromJson(configElement,API.class);
    }
 else {
      apiId.addProperty(APIImportExportConstants.PROVIDER_ELEMENT,APIUtil.replaceEmailDomain(currentUser));
      importedApi=new Gson().fromJson(configElement,API.class);
      importedApi=SetCurrentProvidertoAPIProperties(importedApi,currentTenantDomain,prevTenantDomain);
    }
    if (provider.isAPIAvailable(importedApi.getId())) {
      String errorMessage=""String_Node_Str"" + importedApi.getId().getApiName() + ""String_Node_Str""+ importedApi.getId().getVersion();
      log.error(errorMessage);
      throw new APIImportException(errorMessage);
    }
  }
 catch (  IOException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
catch (  APIManagementException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
  Set<Tier> allowedTiers;
  Set<Tier> unsupportedTiersList;
  try {
    allowedTiers=provider.getTiers();
  }
 catch (  APIManagementException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
  if (!(allowedTiers.isEmpty())) {
    unsupportedTiersList=Sets.difference(importedApi.getAvailableTiers(),allowedTiers);
    if (!(unsupportedTiersList.isEmpty())) {
      for (      Tier unsupportedTier : unsupportedTiersList) {
        log.warn(""String_Node_Str"" + unsupportedTier.getName() + ""String_Node_Str"");
      }
      importedApi.removeAvailableTiers(unsupportedTiersList);
    }
  }
  try {
    String swaggerContent=FileUtils.readFileToString(new File(pathToArchive + APIImportExportConstants.SWAGGER_DEFINITION_LOCATION));
    provider.addAPI(importedApi);
    addSwaggerDefinition(importedApi.getId(),swaggerContent);
    Set<URITemplate> uriTemplates=definitionFromSwagger20.getURITemplates(importedApi,swaggerContent);
    importedApi.setUriTemplates(uriTemplates);
    Set<Scope> scopes=definitionFromSwagger20.getScopes(swaggerContent);
    importedApi.setScopes(scopes);
    for (    URITemplate uriTemplate : uriTemplates) {
      Scope scope=uriTemplate.getScope();
      if (scope != null && !(APIUtil.isWhiteListedScope(scope.getKey()))) {
        if (provider.isScopeKeyAssigned(importedApi.getId(),scope.getKey(),PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantId(true))) {
          String errorMessage=""String_Node_Str"" + scope.getKey() + ""String_Node_Str""+ ""String_Node_Str"";
          log.error(errorMessage);
          throw new APIImportException(errorMessage);
        }
      }
    }
    provider.updateAPI(importedApi);
  }
 catch (  APIManagementException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
catch (  IOException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
catch (  FaultGatewaysException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
  addAPIImage(pathToArchive,importedApi);
  addAPIDocuments(pathToArchive,importedApi);
  addAPISequences(pathToArchive,importedApi);
  addAPISpecificSequences(pathToArchive,importedApi);
  addAPIWsdl(pathToArchive,importedApi);
}","/** 
 * This method imports an API
 * @param pathToArchive            location of the extracted folder of the API
 * @param currentUser              the current logged in user
 * @param isDefaultProviderAllowed decision to keep or replace the provider
 * @throws APIImportException     if there is an error in importing an API
 */
public static void importAPI(String pathToArchive,String currentUser,boolean isDefaultProviderAllowed) throws APIImportException {
  API importedApi=null;
  String prevProvider;
  APIDefinition definitionFromSwagger20=new APIDefinitionFromSwagger20();
  String pathToJSONFile=pathToArchive + APIImportExportConstants.JSON_FILE_LOCATION;
  try {
    String jsonContent=FileUtils.readFileToString(new File(pathToJSONFile));
    JsonElement configElement=new JsonParser().parse(jsonContent);
    JsonObject configObject=configElement.getAsJsonObject();
    JsonObject apiId=configObject.getAsJsonObject(APIImportExportConstants.ID_ELEMENT);
    prevProvider=apiId.get(APIImportExportConstants.PROVIDER_ELEMENT).getAsString();
    String prevTenantDomain=MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(prevProvider));
    String currentTenantDomain=MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(currentUser));
    if (isDefaultProviderAllowed) {
      if (!StringUtils.equals(prevTenantDomain,currentTenantDomain)) {
        String errorMessage=""String_Node_Str"" + ""String_Node_Str"";
        log.error(errorMessage);
        throw new APIImportException(errorMessage);
      }
      importedApi=new Gson().fromJson(configElement,API.class);
    }
 else {
      apiId.addProperty(APIImportExportConstants.PROVIDER_ELEMENT,APIUtil.replaceEmailDomain(currentUser));
      importedApi=new Gson().fromJson(configElement,API.class);
      importedApi=SetCurrentProvidertoAPIProperties(importedApi,currentTenantDomain,prevTenantDomain);
    }
    if (provider.isAPIAvailable(importedApi.getId())) {
      String errorMessage=""String_Node_Str"" + importedApi.getId().getApiName() + ""String_Node_Str""+ importedApi.getId().getVersion();
      log.error(errorMessage);
      throw new APIImportException(errorMessage);
    }
  }
 catch (  IOException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
catch (  APIManagementException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
  Set<Tier> allowedTiers;
  Set<Tier> unsupportedTiersList;
  try {
    allowedTiers=provider.getTiers();
  }
 catch (  APIManagementException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
  if (!(allowedTiers.isEmpty())) {
    unsupportedTiersList=Sets.difference(importedApi.getAvailableTiers(),allowedTiers);
    if (!(unsupportedTiersList.isEmpty())) {
      for (      Tier unsupportedTier : unsupportedTiersList) {
        log.warn(""String_Node_Str"" + unsupportedTier.getName() + ""String_Node_Str"");
      }
      importedApi.removeAvailableTiers(unsupportedTiersList);
    }
  }
  try {
    provider.addAPI(importedApi);
    if (!APIConstants.APIType.WS.toString().equalsIgnoreCase(importedApi.getType())) {
      String swaggerContent=FileUtils.readFileToString(new File(pathToArchive + APIImportExportConstants.SWAGGER_DEFINITION_LOCATION));
      addSwaggerDefinition(importedApi.getId(),swaggerContent);
      Set<URITemplate> uriTemplates=definitionFromSwagger20.getURITemplates(importedApi,swaggerContent);
      importedApi.setUriTemplates(uriTemplates);
      Set<Scope> scopes=definitionFromSwagger20.getScopes(swaggerContent);
      importedApi.setScopes(scopes);
      for (      URITemplate uriTemplate : uriTemplates) {
        Scope scope=uriTemplate.getScope();
        if (scope != null && !(APIUtil.isWhiteListedScope(scope.getKey()))) {
          if (provider.isScopeKeyAssigned(importedApi.getId(),scope.getKey(),PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantId(true))) {
            String errorMessage=""String_Node_Str"" + scope.getKey() + ""String_Node_Str""+ ""String_Node_Str"";
            log.error(errorMessage);
            throw new APIImportException(errorMessage);
          }
        }
      }
      provider.updateAPI(importedApi);
    }
  }
 catch (  APIManagementException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
catch (  IOException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
catch (  FaultGatewaysException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
  addAPIImage(pathToArchive,importedApi);
  addAPIDocuments(pathToArchive,importedApi);
  addAPISequences(pathToArchive,importedApi);
  addAPISpecificSequences(pathToArchive,importedApi);
  addAPIWsdl(pathToArchive,importedApi);
}",0.9746546068979228
114766,"/** 
 * This method adds the WSDL to the registry, if there is a WSDL associated with the API
 * @param pathToArchive location of the extracted folder of the API
 * @param importedApi   the imported API object
 */
private static void addAPIWsdl(String pathToArchive,API importedApi){
  String wsdlFileName=importedApi.getId().getApiName() + ""String_Node_Str"" + importedApi.getId().getVersion()+ APIImportExportConstants.WSDL_EXTENSION;
  String wsdlPath=pathToArchive + APIImportExportConstants.WSDL_LOCATION + wsdlFileName;
  if (checkFileExistence(wsdlPath)) {
    try {
      URL wsdlFileUrl=new File(wsdlPath).toURI().toURL();
      importedApi.setWsdlUrl(wsdlFileUrl.toString());
      Registry registry=APIExportUtil.getRegistry();
      APIUtil.createWSDL((org.wso2.carbon.registry.core.Registry)registry,importedApi);
    }
 catch (    MalformedURLException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    org.wso2.carbon.registry.core.exceptions.RegistryException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    APIManagementException e) {
      log.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * This method adds the WSDL to the registry, if there is a WSDL associated with the API
 * @param pathToArchive location of the extracted folder of the API
 * @param importedApi   the imported API object
 */
private static void addAPIWsdl(String pathToArchive,API importedApi){
  String wsdlFileName=importedApi.getId().getApiName() + ""String_Node_Str"" + importedApi.getId().getVersion()+ APIImportExportConstants.WSDL_EXTENSION;
  String wsdlPath=pathToArchive + APIImportExportConstants.WSDL_LOCATION + wsdlFileName;
  if (checkFileExistence(wsdlPath)) {
    try {
      URL wsdlFileUrl=new File(wsdlPath).toURI().toURL();
      importedApi.setWsdlUrl(wsdlFileUrl.toString());
      Registry registry=APIExportUtil.getRegistry();
      APIUtil.createWSDL((org.wso2.carbon.registry.core.Registry)registry,importedApi);
      provider.updateAPI(importedApi);
    }
 catch (    MalformedURLException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    org.wso2.carbon.registry.core.exceptions.RegistryException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    APIManagementException e) {
      log.error(""String_Node_Str"",e);
    }
catch (    FaultGatewaysException e) {
      log.error(""String_Node_Str"",e);
    }
  }
}",0.94843617920541
114767,"/** 
 * Test throttling by invoking API
 * @param accessToken API accessToken
 */
private void testThrottling(String accessToken) throws Exception {
  int limit=4;
  int numberOfIterations=6;
  WebSocketClient client=new WebSocketClient();
  WebSocketClientImpl socket=new WebSocketClientImpl();
  client.start();
  URI echoUri=new URI(apiEndPoint);
  ClientUpgradeRequest request=new ClientUpgradeRequest();
  request.setHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  client.connect(socket,echoUri,request);
  socket.getLatch().await(3,TimeUnit.SECONDS);
  try {
    for (int count=1; count <= numberOfIterations; count++) {
      socket.sendMessage(testMessage);
      waitForReply(socket);
      log.info(""String_Node_Str"" + count + ""String_Node_Str""+ socket.getResponseMessage());
      if (count >= limit) {
        assertEquals(socket.getResponseMessage(),""String_Node_Str"",""String_Node_Str"");
      }
 else {
        assertEquals(socket.getResponseMessage(),testMessage.toUpperCase(),""String_Node_Str"");
      }
      socket.setResponseMessage(null);
    }
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"" + ex);
    assertTrue(false,""String_Node_Str"");
  }
 finally {
    client.stop();
  }
}","/** 
 * Test throttling by invoking API
 * @param accessToken API accessToken
 */
private void testThrottling(String accessToken) throws Exception {
  int limit=4;
  int numberOfIterations=6;
  WebSocketClient client=new WebSocketClient();
  WebSocketClientImpl socket=new WebSocketClientImpl();
  client.start();
  URI echoUri=new URI(apiEndPoint);
  ClientUpgradeRequest request=new ClientUpgradeRequest();
  request.setHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  client.connect(socket,echoUri,request);
  socket.getLatch().await(3,TimeUnit.SECONDS);
  try {
    for (int count=1; count <= numberOfIterations; count++) {
      socket.sendMessage(testMessage);
      waitForReply(socket);
      log.info(""String_Node_Str"" + count + ""String_Node_Str""+ socket.getResponseMessage());
      if (count > limit) {
        assertEquals(socket.getResponseMessage(),""String_Node_Str"",""String_Node_Str"");
      }
 else {
        assertEquals(socket.getResponseMessage(),testMessage.toUpperCase(),""String_Node_Str"");
      }
      socket.setResponseMessage(null);
    }
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"" + ex);
    assertTrue(false,""String_Node_Str"");
  }
 finally {
    client.stop();
  }
}",0.999592335915206
114768,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  startWebSocketServer(webSocketServerPort);
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  webSocketServerHost=InetAddress.getLocalHost().getHostName();
  int lowerPortLimit=9950;
  int upperPortLimit=9999;
  webSocketServerPort=getAvailablePort(lowerPortLimit,upperPortLimit);
  if (webSocketServerPort == -1) {
    throw new APIManagerIntegrationTestException(""String_Node_Str"" + lowerPortLimit + ""String_Node_Str""+ upperPortLimit+ ""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + webSocketServerPort + ""String_Node_Str"");
  startWebSocketServer(webSocketServerPort);
}",0.3994565217391304
114769,"@Test(description=""String_Node_Str"") public void publishWebSocketAPI() throws Exception {
  apiPublisher=new APIPublisherRestClient(getPublisherURLHttp());
  apiStore=new APIStoreRestClient(getStoreURLHttp());
  provider=user.getUserName();
  String apiContext=""String_Node_Str"";
  String apiVersion=""String_Node_Str"";
  String webSocketServerHost=InetAddress.getLocalHost().getHostName();
  URI endpointUri=new URI(""String_Node_Str"" + webSocketServerHost + ""String_Node_Str""+ webSocketServerPort);
  apiRequest=new APIRequest(apiName,apiContext,endpointUri,endpointUri);
  apiRequest.setVersion(apiVersion);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiRequest.setType(""String_Node_Str"");
  apiPublisher.login(user.getUserName(),user.getPassword());
  HttpResponse addAPIResponse=apiPublisher.addAPI(apiRequest);
  verifyResponse(addAPIResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),apiName,apiVersion,APIMIntegrationConstants.IS_API_EXISTS);
  APIIdentifier apiIdentifierWebSocket=new APIIdentifier(provider,apiName,apiVersion);
  apiStore.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiEndPoint=getWebSocketAPIInvocationURL(apiContext,apiVersion).replace(""String_Node_Str"",""String_Node_Str"");
  List<APIIdentifier> publisherAPIList=APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse(apiPublisher.getAllAPIs());
  assertTrue(APIMTestCaseUtils.isAPIAvailable(apiIdentifierWebSocket,publisherAPIList),""String_Node_Str"");
  List<APIIdentifier> storeAPIList=APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse(apiStore.getAllPublishedAPIs());
  assertTrue(APIMTestCaseUtils.isAPIAvailable(apiIdentifierWebSocket,storeAPIList),""String_Node_Str"");
}","@Test(description=""String_Node_Str"") public void publishWebSocketAPI() throws Exception {
  apiPublisher=new APIPublisherRestClient(getPublisherURLHttp());
  apiStore=new APIStoreRestClient(getStoreURLHttp());
  provider=user.getUserName();
  String apiContext=""String_Node_Str"";
  String apiVersion=""String_Node_Str"";
  URI endpointUri=new URI(""String_Node_Str"" + webSocketServerHost + ""String_Node_Str""+ webSocketServerPort);
  apiRequest=new APIRequest(apiName,apiContext,endpointUri,endpointUri);
  apiRequest.setVersion(apiVersion);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiRequest.setType(""String_Node_Str"");
  apiPublisher.login(user.getUserName(),user.getPassword());
  HttpResponse addAPIResponse=apiPublisher.addAPI(apiRequest);
  verifyResponse(addAPIResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),apiName,apiVersion,APIMIntegrationConstants.IS_API_EXISTS);
  APIIdentifier apiIdentifierWebSocket=new APIIdentifier(provider,apiName,apiVersion);
  apiStore.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiEndPoint=getWebSocketAPIInvocationURL(apiContext,apiVersion).replace(""String_Node_Str"",""String_Node_Str"");
  List<APIIdentifier> publisherAPIList=APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse(apiPublisher.getAllAPIs());
  assertTrue(APIMTestCaseUtils.isAPIAvailable(apiIdentifierWebSocket,publisherAPIList),""String_Node_Str"");
  List<APIIdentifier> storeAPIList=APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse(apiStore.getAllPublishedAPIs());
  assertTrue(APIMTestCaseUtils.isAPIAvailable(apiIdentifierWebSocket,storeAPIList),""String_Node_Str"");
}",0.9817902026160554
114770,"/** 
 * Test throttling by invoking API
 * @param accessToken API accessToken
 */
private void testThrottling(String accessToken) throws Exception {
  int limit=4;
  int numberOfIterations=6;
  WebSocketClient client=new WebSocketClient();
  WebSocketClientImpl socket=new WebSocketClientImpl();
  client.start();
  URI echoUri=new URI(apiEndPoint);
  ClientUpgradeRequest request=new ClientUpgradeRequest();
  request.setHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  client.connect(socket,echoUri,request);
  socket.getLatch().await(3,TimeUnit.SECONDS);
  try {
    for (int count=1; count <= numberOfIterations; count++) {
      socket.sendMessage(testMessage);
      waitForReply(socket);
      log.info(""String_Node_Str"" + count + ""String_Node_Str""+ socket.getResponseMessage());
      if (count >= limit) {
        assertEquals(socket.getResponseMessage(),""String_Node_Str"",""String_Node_Str"");
      }
 else {
        assertEquals(socket.getResponseMessage(),testMessage.toUpperCase(),""String_Node_Str"");
      }
      socket.setResponseMessage(null);
    }
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"" + ex);
    assertTrue(false,""String_Node_Str"");
  }
 finally {
    client.stop();
  }
}","/** 
 * Test throttling by invoking API
 * @param accessToken API accessToken
 */
private void testThrottling(String accessToken) throws Exception {
  int limit=4;
  int numberOfIterations=6;
  WebSocketClient client=new WebSocketClient();
  WebSocketClientImpl socket=new WebSocketClientImpl();
  client.start();
  URI echoUri=new URI(apiEndPoint);
  ClientUpgradeRequest request=new ClientUpgradeRequest();
  request.setHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  client.connect(socket,echoUri,request);
  socket.getLatch().await(3,TimeUnit.SECONDS);
  try {
    for (int count=1; count <= numberOfIterations; count++) {
      socket.sendMessage(testMessage);
      waitForReply(socket);
      log.info(""String_Node_Str"" + count + ""String_Node_Str""+ socket.getResponseMessage());
      if (count > limit) {
        assertEquals(socket.getResponseMessage(),""String_Node_Str"",""String_Node_Str"");
      }
 else {
        assertEquals(socket.getResponseMessage(),testMessage.toUpperCase(),""String_Node_Str"");
      }
      socket.setResponseMessage(null);
    }
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"" + ex);
    assertTrue(false,""String_Node_Str"");
  }
 finally {
    client.stop();
  }
}",0.999592335915206
114771,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  startWebSocketServer(webSocketServerPort);
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  webSocketServerHost=InetAddress.getLocalHost().getHostName();
  int lowerPortLimit=9950;
  int upperPortLimit=9999;
  webSocketServerPort=getAvailablePort(lowerPortLimit,upperPortLimit);
  if (webSocketServerPort == -1) {
    throw new APIManagerIntegrationTestException(""String_Node_Str"" + lowerPortLimit + ""String_Node_Str""+ upperPortLimit+ ""String_Node_Str"");
  }
  log.info(""String_Node_Str"" + webSocketServerPort + ""String_Node_Str"");
  startWebSocketServer(webSocketServerPort);
}",0.3994565217391304
114772,"@Test(description=""String_Node_Str"") public void publishWebSocketAPI() throws Exception {
  apiPublisher=new APIPublisherRestClient(getPublisherURLHttp());
  apiStore=new APIStoreRestClient(getStoreURLHttp());
  provider=user.getUserName();
  String apiContext=""String_Node_Str"";
  String apiVersion=""String_Node_Str"";
  String webSocketServerHost=InetAddress.getLocalHost().getHostName();
  URI endpointUri=new URI(""String_Node_Str"" + webSocketServerHost + ""String_Node_Str""+ webSocketServerPort);
  apiRequest=new APIRequest(apiName,apiContext,endpointUri,endpointUri);
  apiRequest.setVersion(apiVersion);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiRequest.setType(""String_Node_Str"");
  apiPublisher.login(user.getUserName(),user.getPassword());
  HttpResponse addAPIResponse=apiPublisher.addAPI(apiRequest);
  verifyResponse(addAPIResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),apiName,apiVersion,APIMIntegrationConstants.IS_API_EXISTS);
  APIIdentifier apiIdentifierWebSocket=new APIIdentifier(provider,apiName,apiVersion);
  apiStore.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiEndPoint=getWebSocketAPIInvocationURL(apiContext,apiVersion).replace(""String_Node_Str"",""String_Node_Str"");
  List<APIIdentifier> publisherAPIList=APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse(apiPublisher.getAllAPIs());
  assertTrue(APIMTestCaseUtils.isAPIAvailable(apiIdentifierWebSocket,publisherAPIList),""String_Node_Str"");
  List<APIIdentifier> storeAPIList=APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse(apiStore.getAllPublishedAPIs());
  assertTrue(APIMTestCaseUtils.isAPIAvailable(apiIdentifierWebSocket,storeAPIList),""String_Node_Str"");
}","@Test(description=""String_Node_Str"") public void publishWebSocketAPI() throws Exception {
  apiPublisher=new APIPublisherRestClient(getPublisherURLHttp());
  apiStore=new APIStoreRestClient(getStoreURLHttp());
  provider=user.getUserName();
  String apiContext=""String_Node_Str"";
  String apiVersion=""String_Node_Str"";
  URI endpointUri=new URI(""String_Node_Str"" + webSocketServerHost + ""String_Node_Str""+ webSocketServerPort);
  apiRequest=new APIRequest(apiName,apiContext,endpointUri,endpointUri);
  apiRequest.setVersion(apiVersion);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiRequest.setType(""String_Node_Str"");
  apiPublisher.login(user.getUserName(),user.getPassword());
  HttpResponse addAPIResponse=apiPublisher.addAPI(apiRequest);
  verifyResponse(addAPIResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),apiName,apiVersion,APIMIntegrationConstants.IS_API_EXISTS);
  APIIdentifier apiIdentifierWebSocket=new APIIdentifier(provider,apiName,apiVersion);
  apiStore.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiEndPoint=getWebSocketAPIInvocationURL(apiContext,apiVersion).replace(""String_Node_Str"",""String_Node_Str"");
  List<APIIdentifier> publisherAPIList=APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse(apiPublisher.getAllAPIs());
  assertTrue(APIMTestCaseUtils.isAPIAvailable(apiIdentifierWebSocket,publisherAPIList),""String_Node_Str"");
  List<APIIdentifier> storeAPIList=APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse(apiStore.getAllPublishedAPIs());
  assertTrue(APIMTestCaseUtils.isAPIAvailable(apiIdentifierWebSocket,storeAPIList),""String_Node_Str"");
}",0.9817902026160554
114773,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokingWithAPIGoldTierApplicationGoldResourceSilver() throws Exception {
  initialize();
  Thread.sleep(THROTTLING_UNIT_TIME + THROTTLING_ADDITIONAL_WAIT_TIME);
  String swagger=""String_Node_Str"" + ""String_Node_Str"" + APIMIntegrationConstants.RESOURCE_TIER.PLUS + ""String_Node_Str""+ ""String_Node_Str""+ API_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ API_VERSION_1_0_0+ ""String_Node_Str"";
  apiPublisherClientUser1.updateResourceOfAPI(providerName,API_NAME,API_VERSION_1_0_0,swagger);
  waitForAPIDeploymentSync(providerName,API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  apiStoreClientUser1.waitForSwaggerDocument(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.RESOURCE_TIER.PLUS,executionMode);
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= GOLD_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  currentTime=System.currentTimeMillis();
  HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (true) {
      invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
      System.out.println(""String_Node_Str"" + invokeResponse.getResponseCode());
      if (invokeResponse.getResponseCode() == HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS) {
        break;
      }
    }
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (SILVER_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT),""String_Node_Str"" + (SILVER_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokingWithAPIGoldTierApplicationGoldResourceSilver() throws Exception {
  initialize();
  Thread.sleep(THROTTLING_UNIT_TIME + THROTTLING_ADDITIONAL_WAIT_TIME);
  String swagger=""String_Node_Str"" + ""String_Node_Str"" + APIMIntegrationConstants.RESOURCE_TIER.PLUS + ""String_Node_Str""+ ""String_Node_Str""+ API_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ API_VERSION_1_0_0+ ""String_Node_Str"";
  apiPublisherClientUser1.updateResourceOfAPI(providerName,API_NAME,API_VERSION_1_0_0,swagger);
  waitForAPIDeploymentSync(providerName,API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  apiStoreClientUser1.waitForSwaggerDocument(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.RESOURCE_TIER.PLUS,executionMode);
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= SILVER_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  currentTime=System.currentTimeMillis();
  HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (true) {
      invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
      System.out.println(""String_Node_Str"" + invokeResponse.getResponseCode());
      if (invokeResponse.getResponseCode() == HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS) {
        break;
      }
    }
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (SILVER_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT_RESOURCE),""String_Node_Str"" + (SILVER_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9969539509048556
114774,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokingWithAPIGoldTierApplicationGoldResourceGold() throws Exception {
  initialize();
  Thread.sleep(THROTTLING_UNIT_TIME + THROTTLING_ADDITIONAL_WAIT_TIME);
  String swagger=""String_Node_Str"" + ""String_Node_Str"" + APIMIntegrationConstants.RESOURCE_TIER.ULTIMATE + ""String_Node_Str""+ ""String_Node_Str""+ API_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ API_VERSION_1_0_0+ ""String_Node_Str"";
  apiPublisherClientUser1.updateResourceOfAPI(providerName,API_NAME,API_VERSION_1_0_0,swagger);
  apiStoreClientUser1.waitForSwaggerDocument(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.RESOURCE_TIER.ULTIMATE,executionMode);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= GOLD_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  currentTime=System.currentTimeMillis();
  HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (true) {
      invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
      System.out.println(""String_Node_Str"" + invokeResponse.getResponseCode());
      if (invokeResponse.getResponseCode() == HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS) {
        break;
      }
    }
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT),""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokingWithAPIGoldTierApplicationGoldResourceGold() throws Exception {
  initialize();
  Thread.sleep(THROTTLING_UNIT_TIME + THROTTLING_ADDITIONAL_WAIT_TIME);
  String swagger=""String_Node_Str"" + ""String_Node_Str"" + APIMIntegrationConstants.RESOURCE_TIER.ULTIMATE + ""String_Node_Str""+ ""String_Node_Str""+ API_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ API_VERSION_1_0_0+ ""String_Node_Str"";
  apiPublisherClientUser1.updateResourceOfAPI(providerName,API_NAME,API_VERSION_1_0_0,swagger);
  apiStoreClientUser1.waitForSwaggerDocument(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.RESOURCE_TIER.ULTIMATE,executionMode);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= GOLD_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  currentTime=System.currentTimeMillis();
  HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (true) {
      invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
      System.out.println(""String_Node_Str"" + invokeResponse.getResponseCode());
      if (invokeResponse.getResponseCode() == HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS) {
        break;
      }
    }
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT_RESOURCE),""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.998391420911528
114775,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testThrottleEventTest() throws Exception {
  thriftTestServer.clearTables();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(THROTTLE_API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.UNLIMITED);
  HttpResponse serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(THROTTLE_API_CONTEXT,API_VERSION);
  for (int i=0; i < 3; i++) {
    serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  }
  Assert.assertNotEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  String context, apiVersion, userId;
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    userId=user.getUserName() + ""String_Node_Str"" + user.getUserDomain();
    context=""String_Node_Str"" + THROTTLE_API_CONTEXT + ""String_Node_Str""+ API_VERSION;
    apiVersion=user.getUserName() + ""String_Node_Str"" + THROTTLE_API_NAME+ ""String_Node_Str""+ API_VERSION;
  }
 else {
    userId=user.getUserName();
    context=""String_Node_Str"" + ""String_Node_Str"" + user.getUserDomain() + ""String_Node_Str""+ THROTTLE_API_CONTEXT+ ""String_Node_Str""+ API_VERSION;
    apiVersion=user.getUserName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + THROTTLE_API_NAME+ ""String_Node_Str""+ API_VERSION;
  }
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(""String_Node_Str"",accessToken);
  map.put(""String_Node_Str"",userId);
  map.put(""String_Node_Str"",user.getUserDomain());
  map.put(""String_Node_Str"",THROTTLE_API_NAME);
  map.put(""String_Node_Str"",apiVersion);
  map.put(""String_Node_Str"",context);
  map.put(""String_Node_Str"",user.getUserName());
  map.put(""String_Node_Str"",APP_NAME);
  map.put(""String_Node_Str"",user.getUserName());
  map.put(""String_Node_Str"",""String_Node_Str"");
  testThrottleEvent(map);
  Thread.sleep(5000);
  thriftTestServer.clearTables();
  invokeURL=getAPIInvocationURLHttp(THROTTLE_API_CONTEXT,API_VERSION);
  for (int i=0; i < 3; i++) {
    serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",null);
  }
  Assert.assertNotEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  map.put(""String_Node_Str"",null);
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",null);
  map.put(""String_Node_Str"",null);
  testThrottleEvent(map);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testThrottleEventTest() throws Exception {
  thriftTestServer.clearTables();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(THROTTLE_API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.UNLIMITED);
  HttpResponse serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(THROTTLE_API_CONTEXT,API_VERSION);
  for (int i=0; i < 10; i++) {
    serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
    if (serviceResponse.getResponseCode() == 503) {
      break;
    }
  }
  Assert.assertNotEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  String context, apiVersion, userId;
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    userId=user.getUserName() + ""String_Node_Str"" + user.getUserDomain();
    context=""String_Node_Str"" + THROTTLE_API_CONTEXT + ""String_Node_Str""+ API_VERSION;
    apiVersion=user.getUserName() + ""String_Node_Str"" + THROTTLE_API_NAME+ ""String_Node_Str""+ API_VERSION;
  }
 else {
    userId=user.getUserName();
    context=""String_Node_Str"" + ""String_Node_Str"" + user.getUserDomain() + ""String_Node_Str""+ THROTTLE_API_CONTEXT+ ""String_Node_Str""+ API_VERSION;
    apiVersion=user.getUserName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + THROTTLE_API_NAME+ ""String_Node_Str""+ API_VERSION;
  }
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(""String_Node_Str"",accessToken);
  map.put(""String_Node_Str"",userId);
  map.put(""String_Node_Str"",user.getUserDomain());
  map.put(""String_Node_Str"",THROTTLE_API_NAME);
  map.put(""String_Node_Str"",apiVersion);
  map.put(""String_Node_Str"",context);
  map.put(""String_Node_Str"",user.getUserName());
  map.put(""String_Node_Str"",APP_NAME);
  map.put(""String_Node_Str"",user.getUserName());
  map.put(""String_Node_Str"",""String_Node_Str"");
  testThrottleEvent(map);
  Thread.sleep(5000);
  thriftTestServer.clearTables();
  invokeURL=getAPIInvocationURLHttp(THROTTLE_API_CONTEXT,API_VERSION);
  for (int i=0; i < 10; i++) {
    serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",null);
    if (serviceResponse.getResponseCode() == 503) {
      break;
    }
  }
  Assert.assertNotEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  map.put(""String_Node_Str"",null);
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",null);
  map.put(""String_Node_Str"",null);
  testThrottleEvent(map);
}",0.9730418943533696
114776,"/** 
 * used to test Throttle event stream data
 * @throws Exception if any exception throws
 */
private void testThrottleEvent(Map<String,Object> expected) throws Exception {
  List<Event> faultTable=null;
  long currentTime=System.currentTimeMillis();
  long waitTime=currentTime + WAIT_TIME;
  while (waitTime > System.currentTimeMillis()) {
    faultTable=thriftTestServer.getDataTables().get(StreamDefinitions.APIMGT_STATISTICS_THROTTLE_STREAM_ID);
    if (faultTable == null || faultTable.isEmpty()) {
      Thread.sleep(1000);
      continue;
    }
 else {
      break;
    }
  }
  Assert.assertTrue(faultTable.size() > 0,""String_Node_Str"");
  Map<String,Object> map=convertToMap(faultTable.get(0).getPayloadData(),StreamDefinitions.getStreamDefinitionThrottle());
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
}","/** 
 * used to test Throttle event stream data
 * @throws Exception if any exception throws
 */
private void testThrottleEvent(Map<String,Object> expected) throws Exception {
  List<Event> throttleTable=null;
  long currentTime=System.currentTimeMillis();
  long waitTime=currentTime + WAIT_TIME;
  while (waitTime > System.currentTimeMillis()) {
    throttleTable=thriftTestServer.getDataTables().get(StreamDefinitions.APIMGT_STATISTICS_THROTTLE_STREAM_ID);
    if (throttleTable == null || throttleTable.isEmpty()) {
      Thread.sleep(1000);
      continue;
    }
 else {
      break;
    }
  }
  Assert.assertEquals(1,throttleTable.size(),""String_Node_Str"");
  Map<String,Object> map=convertToMap(throttleTable.get(0).getPayloadData(),StreamDefinitions.getStreamDefinitionThrottle());
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(expected.get(""String_Node_Str""),map.get(""String_Node_Str"").toString(),""String_Node_Str"");
}",0.9732498577120092
114777,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws AutomationUtilException, XPathExpressionException, IOException, APIManagerIntegrationTestException, URISyntaxException, ResourceAdminServiceExceptionException {
  super.init(userMode);
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    String carbonHome=System.getProperty(ServerConstants.CARBON_HOME);
    String apimConfigArtifactLocation=getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    serverConfigurationManager=new ServerConfigurationManager(gatewayContextWrk);
    String apimRepositoryConfigLocation=carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ APIM_CONFIG_XML;
    File apimConfSourceFile=new File(apimConfigArtifactLocation);
    File apimConfTargetFile=new File(apimRepositoryConfigLocation);
    serverConfigurationManager.applyConfiguration(apimConfSourceFile,apimConfTargetFile);
  }
  String testArtifactPath=TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ APIMIntegrationConstants.BPMN_PROCESS_ENGINE_WEB_APP_NAME+ ""String_Node_Str"";
  String gatewayMgtSessionId=createSession(gatewayContextMgt);
  webAppAdminClient=new WebAppAdminClient(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId);
  webAppAdminClient.uploadWarFile(testArtifactPath);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.BPMN_PROCESS_ENGINE_WEB_APP_NAME);
  String url=getGatewayURLHttp();
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  userName=user.getUserName();
  resourceAdminServiceClient=new ResourceAdminServiceClient(gatewayContextMgt.getContextUrls().getBackEndUrl(),createSession(gatewayContextMgt));
  originalWFExtentionsXML=resourceAdminServiceClient.getTextContent(DEFAULT_WF_EXTENTIONS_XML_REG_CONFIG_LOCATION);
  newWFExtentionsXML=readFile(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  resourceAdminServiceClient.updateTextContent(DEFAULT_WF_EXTENTIONS_XML_REG_CONFIG_LOCATION,newWFExtentionsXML);
  APIStoreRestClient apiStore;
  String backendurl=""String_Node_Str"";
  String description=""String_Node_Str"";
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher.login(userName,userName);
  APIRequest apiRequest=new APIRequest(apiName,apiVersion,new URL(backendurl));
  apiRequest.setDescription(description);
  apiRequest.setVersion(apiVersion);
  apiRequest.setProvider(userName);
  apiPublisher.addAPI(apiRequest);
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws AutomationUtilException, XPathExpressionException, IOException, APIManagerIntegrationTestException, URISyntaxException, ResourceAdminServiceExceptionException {
  super.init();
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    String carbonHome=System.getProperty(ServerConstants.CARBON_HOME);
    String apimConfigArtifactLocation=getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    serverConfigurationManager=new ServerConfigurationManager(gatewayContextWrk);
    String apimRepositoryConfigLocation=carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ APIM_CONFIG_XML;
    File apimConfSourceFile=new File(apimConfigArtifactLocation);
    File apimConfTargetFile=new File(apimRepositoryConfigLocation);
    serverConfigurationManager.applyConfiguration(apimConfSourceFile,apimConfTargetFile);
  }
  String testArtifactPath=TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ APIMIntegrationConstants.BPMN_PROCESS_ENGINE_WEB_APP_NAME+ ""String_Node_Str"";
  String gatewayMgtSessionId=createSession(gatewayContextMgt);
  webAppAdminClient=new WebAppAdminClient(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId);
  webAppAdminClient.uploadWarFile(testArtifactPath);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.BPMN_PROCESS_ENGINE_WEB_APP_NAME);
  String url=getGatewayURLHttp();
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  userName=user.getUserName();
  resourceAdminServiceClient=new ResourceAdminServiceClient(gatewayContextMgt.getContextUrls().getBackEndUrl(),createSession(gatewayContextMgt));
  originalWFExtentionsXML=resourceAdminServiceClient.getTextContent(DEFAULT_WF_EXTENTIONS_XML_REG_CONFIG_LOCATION);
  newWFExtentionsXML=readFile(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  resourceAdminServiceClient.updateTextContent(DEFAULT_WF_EXTENTIONS_XML_REG_CONFIG_LOCATION,newWFExtentionsXML);
  APIStoreRestClient apiStore;
  String backendurl=""String_Node_Str"";
  String description=""String_Node_Str"";
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher.login(userName,userName);
  APIRequest apiRequest=new APIRequest(apiName,apiVersion,new URL(backendurl));
  apiRequest.setDescription(description);
  apiRequest.setVersion(apiVersion);
  apiRequest.setProvider(userName);
  apiPublisher.addAPI(apiRequest);
}",0.9986206896551724
114778,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testThrottleEventTest() throws Exception {
  thriftTestServer.clearTables();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(THROTTLE_API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.UNLIMITED);
  HttpResponse serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(THROTTLE_API_CONTEXT,API_VERSION);
  for (int i=0; i < 5; i++) {
    serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  }
  Assert.assertNotEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  String context, apiVersion, userId;
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    userId=user.getUserName() + ""String_Node_Str"" + user.getUserDomain();
    context=""String_Node_Str"" + THROTTLE_API_CONTEXT + ""String_Node_Str""+ API_VERSION;
    apiVersion=user.getUserName() + ""String_Node_Str"" + THROTTLE_API_NAME+ ""String_Node_Str""+ API_VERSION;
  }
 else {
    userId=user.getUserName();
    context=""String_Node_Str"" + ""String_Node_Str"" + user.getUserDomain() + ""String_Node_Str""+ THROTTLE_API_CONTEXT+ ""String_Node_Str""+ API_VERSION;
    apiVersion=user.getUserName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + THROTTLE_API_NAME+ ""String_Node_Str""+ API_VERSION;
  }
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(""String_Node_Str"",accessToken);
  map.put(""String_Node_Str"",userId);
  map.put(""String_Node_Str"",user.getUserDomain());
  map.put(""String_Node_Str"",THROTTLE_API_NAME);
  map.put(""String_Node_Str"",apiVersion);
  map.put(""String_Node_Str"",context);
  map.put(""String_Node_Str"",user.getUserName());
  map.put(""String_Node_Str"",APP_NAME);
  map.put(""String_Node_Str"",user.getUserName());
  map.put(""String_Node_Str"",""String_Node_Str"");
  testThrottleEvent(map);
  thriftTestServer.clearTables();
  invokeURL=getAPIInvocationURLHttp(THROTTLE_API_CONTEXT,API_VERSION);
  for (int i=0; i < 5; i++) {
    serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",null);
  }
  Assert.assertNotEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  map.put(""String_Node_Str"",null);
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",null);
  map.put(""String_Node_Str"",null);
  testThrottleEvent(map);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testThrottleEventTest() throws Exception {
  thriftTestServer.clearTables();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(THROTTLE_API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.UNLIMITED);
  HttpResponse serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(THROTTLE_API_CONTEXT,API_VERSION);
  for (int i=0; i < 3; i++) {
    serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  }
  Assert.assertNotEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  String context, apiVersion, userId;
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    userId=user.getUserName() + ""String_Node_Str"" + user.getUserDomain();
    context=""String_Node_Str"" + THROTTLE_API_CONTEXT + ""String_Node_Str""+ API_VERSION;
    apiVersion=user.getUserName() + ""String_Node_Str"" + THROTTLE_API_NAME+ ""String_Node_Str""+ API_VERSION;
  }
 else {
    userId=user.getUserName();
    context=""String_Node_Str"" + ""String_Node_Str"" + user.getUserDomain() + ""String_Node_Str""+ THROTTLE_API_CONTEXT+ ""String_Node_Str""+ API_VERSION;
    apiVersion=user.getUserName().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + THROTTLE_API_NAME+ ""String_Node_Str""+ API_VERSION;
  }
  Map<String,Object> map=new HashMap<String,Object>();
  map.put(""String_Node_Str"",accessToken);
  map.put(""String_Node_Str"",userId);
  map.put(""String_Node_Str"",user.getUserDomain());
  map.put(""String_Node_Str"",THROTTLE_API_NAME);
  map.put(""String_Node_Str"",apiVersion);
  map.put(""String_Node_Str"",context);
  map.put(""String_Node_Str"",user.getUserName());
  map.put(""String_Node_Str"",APP_NAME);
  map.put(""String_Node_Str"",user.getUserName());
  map.put(""String_Node_Str"",""String_Node_Str"");
  testThrottleEvent(map);
  Thread.sleep(5000);
  thriftTestServer.clearTables();
  invokeURL=getAPIInvocationURLHttp(THROTTLE_API_CONTEXT,API_VERSION);
  for (int i=0; i < 3; i++) {
    serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",null);
  }
  Assert.assertNotEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  map.put(""String_Node_Str"",null);
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",null);
  map.put(""String_Node_Str"",null);
  testThrottleEvent(map);
}",0.9951164537941396
114779,"@Test(description=""String_Node_Str"") public void getAllEndpointUrlsTest() throws Exception {
  HttpResponse getApiResponse=apiStore.getAllPublishedAPIs();
  assertEquals(getApiResponse.getResponseCode(),Response.Status.OK.getStatusCode());
  JSONObject getApiJsonObject=new JSONObject(getApiResponse.getData());
  assertFalse(getApiJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  JSONArray getApiJsonArray=getApiJsonObject.getJSONArray(""String_Node_Str"");
  boolean isApiAvailable=false;
  boolean isEndpointUrlValid=false;
  boolean isHttpsUrlAvailable=false;
  boolean isHttpUrlAvailable=false;
  String environmentName=""String_Node_Str"";
  String environmentType=""String_Node_Str"";
  for (int apiIndex=0; apiIndex < getApiJsonArray.length(); apiIndex++) {
    if (getApiJsonArray.getJSONObject(apiIndex).getString(""String_Node_Str"").equals(apiName)) {
      isApiAvailable=true;
      HttpResponse getEndpointApiResponse=apiStore.getApiEndpointUrls(apiName,apiVersion,apiProvider);
      assertEquals(getEndpointApiResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
      JSONObject getEndpointJsonObject=new JSONObject(getEndpointApiResponse.getData());
      assertFalse(getEndpointJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
      JSONArray getEndPointUrlsJsonArray=getEndpointJsonObject.getJSONArray(""String_Node_Str"");
      for (int index=0; index < getEndPointUrlsJsonArray.length(); index++) {
        if (getEndPointUrlsJsonArray.getJSONObject(index).getString(""String_Node_Str"").contains(apiContext)) {
          isEndpointUrlValid=true;
          assertTrue(getEndPointUrlsJsonArray.getJSONObject(index).getString(""String_Node_Str"").equalsIgnoreCase(environmentName),""String_Node_Str"");
          assertTrue(getEndPointUrlsJsonArray.getJSONObject(index).getString(""String_Node_Str"").equalsIgnoreCase(environmentType),""String_Node_Str"");
          JSONArray environmentUrlsArray=getEndPointUrlsJsonArray.getJSONObject(index).getJSONArray(""String_Node_Str"");
          Map<String,String> urlMap=new HashMap<String,String>();
          for (int mapIndex=0; mapIndex < environmentUrlsArray.length(); mapIndex++) {
            String jsonArrayElement=environmentUrlsArray.getString(mapIndex);
            String[] keyValue=jsonArrayElement.split(""String_Node_Str"");
            urlMap.put(keyValue[0],keyValue[1]);
            URL url=new URL(keyValue[1]);
            if (keyValue[0].equals(""String_Node_Str"")) {
              isHttpsUrlAvailable=true;
              assertEquals(url.getProtocol(),keyValue[0],""String_Node_Str"");
              assertEquals(url.getPath(),""String_Node_Str"" + apiContext + ""String_Node_Str""+ apiVersion,""String_Node_Str"");
            }
 else             if (keyValue[0].equals(""String_Node_Str"")) {
              isHttpUrlAvailable=true;
              assertEquals(url.getProtocol(),keyValue[0],""String_Node_Str"");
              assertEquals(url.getPath(),""String_Node_Str"" + apiContext + ""String_Node_Str""+ apiVersion,""String_Node_Str"");
            }
            if (isHttpsUrlAvailable == true && isHttpUrlAvailable == true) {
              break;
            }
          }
        }
      }
      break;
    }
  }
  assertTrue(isHttpsUrlAvailable,""String_Node_Str"");
  assertTrue(isHttpUrlAvailable,""String_Node_Str"");
  assertTrue(isEndpointUrlValid,""String_Node_Str"");
  assertTrue(isApiAvailable,""String_Node_Str"");
}","@Test(description=""String_Node_Str"") public void getAllEndpointUrlsTest() throws Exception {
  HttpResponse getApiResponse=apiStore.getAllPublishedAPIs();
  assertEquals(getApiResponse.getResponseCode(),Response.Status.OK.getStatusCode());
  JSONObject getApiJsonObject=new JSONObject(getApiResponse.getData());
  assertFalse(getApiJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  JSONArray getApiJsonArray=getApiJsonObject.getJSONArray(""String_Node_Str"");
  boolean isApiAvailable=false;
  boolean isEndpointUrlValid=false;
  boolean isHttpsUrlAvailable=false;
  boolean isHttpUrlAvailable=false;
  String environmentName=""String_Node_Str"";
  String environmentType=""String_Node_Str"";
  for (int apiIndex=0; apiIndex < getApiJsonArray.length(); apiIndex++) {
    if (getApiJsonArray.getJSONObject(apiIndex).getString(""String_Node_Str"").equals(apiName)) {
      isApiAvailable=true;
      HttpResponse getEndpointApiResponse=apiStore.getApiEndpointUrls(apiName,apiVersion,apiProvider);
      assertEquals(getEndpointApiResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
      JSONObject getEndpointJsonObject=new JSONObject(getEndpointApiResponse.getData());
      assertFalse(getEndpointJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
      JSONArray getEndPointUrlsJsonArray=getEndpointJsonObject.getJSONArray(""String_Node_Str"");
      for (int index=0; index < getEndPointUrlsJsonArray.length(); index++) {
        if (getEndPointUrlsJsonArray.getJSONObject(index).getString(""String_Node_Str"").contains(apiContext)) {
          isEndpointUrlValid=true;
          assertTrue(getEndPointUrlsJsonArray.getJSONObject(index).getString(""String_Node_Str"").equalsIgnoreCase(environmentName),""String_Node_Str"");
          assertTrue(getEndPointUrlsJsonArray.getJSONObject(index).getString(""String_Node_Str"").equalsIgnoreCase(environmentType),""String_Node_Str"");
          JSONArray environmentUrlsArray=getEndPointUrlsJsonArray.getJSONObject(index).getJSONArray(""String_Node_Str"");
          Map<String,String> urlMap=new HashMap<String,String>();
          for (int mapIndex=0; mapIndex < environmentUrlsArray.length(); mapIndex++) {
            String jsonArrayElement=environmentUrlsArray.getString(mapIndex);
            if (jsonArrayElement.startsWith(""String_Node_Str"") || jsonArrayElement.startsWith(""String_Node_Str"")) {
              String[] keyValue=jsonArrayElement.split(""String_Node_Str"");
              urlMap.put(keyValue[0],keyValue[1]);
              URL url=new URL(keyValue[1]);
              if (keyValue[0].equals(""String_Node_Str"")) {
                isHttpsUrlAvailable=true;
                assertEquals(url.getProtocol(),keyValue[0],""String_Node_Str"");
                assertEquals(url.getPath(),""String_Node_Str"" + apiContext + ""String_Node_Str""+ apiVersion,""String_Node_Str"");
              }
 else               if (keyValue[0].equals(""String_Node_Str"")) {
                isHttpUrlAvailable=true;
                assertEquals(url.getProtocol(),keyValue[0],""String_Node_Str"");
                assertEquals(url.getPath(),""String_Node_Str"" + apiContext + ""String_Node_Str""+ apiVersion,""String_Node_Str"");
              }
              if (isHttpsUrlAvailable == true && isHttpUrlAvailable == true) {
                break;
              }
            }
          }
        }
      }
      break;
    }
  }
  assertTrue(isHttpsUrlAvailable,""String_Node_Str"");
  assertTrue(isHttpUrlAvailable,""String_Node_Str"");
  assertTrue(isEndpointUrlValid,""String_Node_Str"");
  assertTrue(isApiAvailable,""String_Node_Str"");
}",0.9769230769230768
114780,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testHttpPatchSupport() throws Exception {
  apiPublisher.login(user.getUserName(),user.getPassword());
  String APIName=""String_Node_Str"";
  String APIContext=""String_Node_Str"";
  String url=getGatewayURLNhttp() + ""String_Node_Str"";
  String providerName=user.getUserName();
  String APIVersion=""String_Node_Str"";
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setVersion(APIVersion);
  apiRequest.setProvider(providerName);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(providerName,APIName,APIVersion,APIMIntegrationConstants.IS_API_EXISTS);
  String modifiedResource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  apiPublisher.updateResourceOfAPI(providerName,APIName,APIVersion,modifiedResource);
  waitForAPIDeployment();
  apiStore.login(user.getUserName(),user.getPassword());
  apiStore.addApplication(""String_Node_Str"",APIMIntegrationConstants.APPLICATION_TIER.DEFAULT_APP_POLICY_FIFTY_REQ_PER_MIN,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(APIName,APIVersion,providerName,""String_Node_Str"",APIMIntegrationConstants.API_TIER.GOLD);
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(""String_Node_Str"");
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject jsonResponse=new JSONObject(responseString);
  String accessToken=jsonResponse.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  String apiInvocationUrl=getAPIInvocationURLHttp(APIContext,APIVersion);
  HttpClient client=HttpClientBuilder.create().build();
  HttpPatch request=new HttpPatch(apiInvocationUrl);
  request.setHeader(""String_Node_Str"",""String_Node_Str"");
  request.setHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  StringEntity payload=new StringEntity(""String_Node_Str"",""String_Node_Str"");
  payload.setContentType(""String_Node_Str"");
  request.setEntity(payload);
  HttpResponse httpResponsePatch=client.execute(request);
  assertEquals(httpResponsePatch.getStatusLine().getStatusCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testHttpPatchSupport() throws Exception {
  apiPublisher.login(user.getUserName(),user.getPassword());
  String APIName=""String_Node_Str"";
  String APIContext=""String_Node_Str"";
  String url=getGatewayURLNhttp() + ""String_Node_Str"";
  String providerName=user.getUserName();
  String APIVersion=""String_Node_Str"";
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setVersion(APIVersion);
  apiRequest.setProvider(providerName);
  apiRequest.setResourceMethod(""String_Node_Str"");
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(providerName,APIName,APIVersion,APIMIntegrationConstants.IS_API_EXISTS);
  apiStore.login(user.getUserName(),user.getPassword());
  apiStore.addApplication(""String_Node_Str"",APIMIntegrationConstants.APPLICATION_TIER.DEFAULT_APP_POLICY_FIFTY_REQ_PER_MIN,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(APIName,APIVersion,providerName,""String_Node_Str"",APIMIntegrationConstants.API_TIER.GOLD);
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(""String_Node_Str"");
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject jsonResponse=new JSONObject(responseString);
  String accessToken=jsonResponse.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  String apiInvocationUrl=getAPIInvocationURLHttp(APIContext,APIVersion);
  HttpClient client=HttpClientBuilder.create().build();
  HttpPatch request=new HttpPatch(apiInvocationUrl);
  request.setHeader(""String_Node_Str"",""String_Node_Str"");
  request.setHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  StringEntity payload=new StringEntity(""String_Node_Str"",""String_Node_Str"");
  payload.setContentType(""String_Node_Str"");
  request.setEntity(payload);
  HttpResponse httpResponsePatch=client.execute(request);
  assertEquals(httpResponsePatch.getStatusLine().getStatusCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
}",0.9411037891268532
114781,"public void initialize() throws Exception {
  if (!isInitialised) {
    super.init();
    apiEndPointUrl=getGatewayURLHttp() + API_END_POINT_POSTFIX_URL;
    providerName=user.getUserName();
    String publisherURLHttp=getPublisherURLHttp();
    String storeURLHttp=getStoreURLHttp();
    apiPublisherClientUser1=new APIPublisherRestClient(publisherURLHttp);
    apiStoreClientUser1=new APIStoreRestClient(storeURLHttp);
    apiPublisherClientUser1.login(user.getUserName(),user.getPassword());
    apiStoreClientUser1.login(user.getUserName(),user.getPassword());
    apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
    isInitialised=true;
  }
}","public void initialize() throws Exception {
  if (!isInitialised) {
    new AdvancedThrottlingConfig().disableAdvancedThrottling();
    super.init();
    apiEndPointUrl=getGatewayURLHttp() + API_END_POINT_POSTFIX_URL;
    providerName=user.getUserName();
    String publisherURLHttp=getPublisherURLHttp();
    String storeURLHttp=getStoreURLHttp();
    apiPublisherClientUser1=new APIPublisherRestClient(publisherURLHttp);
    apiStoreClientUser1=new APIStoreRestClient(storeURLHttp);
    apiPublisherClientUser1.login(user.getUserName(),user.getPassword());
    apiStoreClientUser1.login(user.getUserName(),user.getPassword());
    apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
    isInitialised=true;
  }
}",0.9545454545454546
114782,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testSetScopeToResourceTestCase() throws Exception {
  String APIContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=""String_Node_Str"";
  String description=""String_Node_Str"";
  apiPublisher.login(user.getUserName(),user.getPassword());
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setVisibility(""String_Node_Str"");
  apiRequest.setRoles(""String_Node_Str"");
  apiRequest.setProvider(providerName);
  apiPublisher.addAPI(apiRequest);
  apiPublisher.deleteAPI(APIName,APIVersion,providerName);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String modifiedResource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HttpResponse response=apiPublisher.updateResourceOfAPI(providerName,APIName,APIVersion,modifiedResource);
  apiStoreRestClient.waitForSwaggerDocument(providerName,APIName,APIVersion,""String_Node_Str"",executionMode);
  JSONObject jsonObject=new JSONObject(response.getData());
  boolean error=(Boolean)jsonObject.get(""String_Node_Str"");
  assertEquals(error,false,""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testSetScopeToResourceTestCase() throws Exception {
  String APIContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=""String_Node_Str"";
  String description=""String_Node_Str"";
  apiPublisher.login(user.getUserName(),user.getPassword());
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setVisibility(""String_Node_Str"");
  apiRequest.setRoles(""String_Node_Str"");
  apiRequest.setProvider(providerName);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String modifiedResource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HttpResponse response=apiPublisher.updateResourceOfAPI(providerName,APIName,APIVersion,modifiedResource);
  apiStoreRestClient.waitForSwaggerDocument(providerName,APIName,APIVersion,""String_Node_Str"",executionMode);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
}",0.5761482675261885
114783,"/** 
 * This method is used to migrate database tables This executes the database queries according to the user's db type and alters the tables
 * @throws SQLException
 */
@Override public void databaseMigration() throws SQLException {
  final String productHome=CarbonUtils.getCarbonHome();
  String scriptPath=productHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  updateAPIManagerDatabase(scriptPath);
  String constraintsScriptPath=productHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
}","/** 
 * This method is used to migrate database tables This executes the database queries according to the user's db type and alters the tables
 * @throws SQLException
 */
@Override public void databaseMigration() throws SQLException {
  final String productHome=CarbonUtils.getCarbonHome();
  String scriptPath=productHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  updateAPIManagerDatabase(scriptPath);
  String constraintsScriptPath=productHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  dropFKConstraint(constraintsScriptPath);
}",0.9646090534979423
114784,"/** 
 * This method is used to remove the FK constraint which is unnamed This finds the name of the constraint and build the query to delete the constraint and execute it
 * @param sqlScriptPath path of sql script
 * @throws SQLException
 */
protected void dropFKConstraint(String sqlScriptPath) throws SQLException {
  Connection connection=null;
  PreparedStatement preparedStatement=null;
  ResultSet resultSet=null;
  Statement statement=null;
  try {
    String queryToExecute=IOUtils.toString(new FileInputStream(new File(sqlScriptPath + ""String_Node_Str"")),""String_Node_Str"");
    String queryArray[]=queryToExecute.split(Constants.LINE_BREAK);
    connection=APIMgtDBUtil.getConnection();
    String dbType=MigrationDBCreator.getDatabaseType(connection);
    connection.setAutoCommit(false);
    statement=connection.createStatement();
    if (Constants.DB_TYPE_ORACLE.equals(dbType)) {
      queryArray[0]=queryArray[0].replace(Constants.DELIMITER,""String_Node_Str"");
    }
    resultSet=statement.executeQuery(queryArray[0]);
    String constraintName=null;
    while (resultSet.next()) {
      constraintName=resultSet.getString(""String_Node_Str"");
    }
    if (constraintName != null) {
      queryToExecute=queryArray[1].replace(""String_Node_Str"",constraintName);
      if (Constants.DB_TYPE_ORACLE.equals(dbType)) {
        queryToExecute=queryToExecute.replace(Constants.DELIMITER,""String_Node_Str"");
      }
      if (queryToExecute.contains(""String_Node_Str"")) {
        queryToExecute=queryToExecute.replace(""String_Node_Str"",""String_Node_Str"");
      }
      preparedStatement=connection.prepareStatement(queryToExecute);
      preparedStatement.execute();
      connection.commit();
    }
  }
 catch (  APIMigrationException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        log.error(""String_Node_Str"",e);
      }
    }
    APIMgtDBUtil.closeAllConnections(preparedStatement,connection,resultSet);
  }
}","/** 
 * This method is used to remove the FK constraint which is unnamed This finds the name of the constraint and build the query to delete the constraint and execute it
 * @param sqlScriptPath path of sql script
 * @throws SQLException
 */
protected void dropFKConstraint(String sqlScriptPath) throws SQLException {
  Connection connection=null;
  PreparedStatement preparedStatement=null;
  ResultSet resultSet=null;
  Statement statement=null;
  try {
    connection=APIMgtDBUtil.getConnection();
    String dbType=MigrationDBCreator.getDatabaseType(connection);
    String queryToExecute=IOUtils.toString(new FileInputStream(new File(sqlScriptPath + ""String_Node_Str"" + File.separator+ dbType+ ""String_Node_Str"")),""String_Node_Str"");
    String queryArray[]=queryToExecute.split(Constants.LINE_BREAK);
    connection.setAutoCommit(false);
    statement=connection.createStatement();
    if (Constants.DB_TYPE_ORACLE.equals(dbType)) {
      queryArray[0]=queryArray[0].replace(Constants.DELIMITER,""String_Node_Str"");
      queryArray[0]=queryArray[0].replace(""String_Node_Str"",connection.getMetaData().getUserName());
    }
    resultSet=statement.executeQuery(queryArray[0]);
    String constraintName=null;
    while (resultSet.next()) {
      constraintName=resultSet.getString(""String_Node_Str"");
    }
    if (constraintName != null) {
      queryToExecute=queryArray[1].replace(""String_Node_Str"",constraintName);
      if (Constants.DB_TYPE_ORACLE.equals(dbType)) {
        queryToExecute=queryToExecute.replace(Constants.DELIMITER,""String_Node_Str"");
      }
      if (queryToExecute.contains(""String_Node_Str"")) {
        queryToExecute=queryToExecute.replace(""String_Node_Str"",""String_Node_Str"");
      }
      preparedStatement=connection.prepareStatement(queryToExecute);
      preparedStatement.execute();
      connection.commit();
    }
  }
 catch (  APIMigrationException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        log.error(""String_Node_Str"",e);
      }
    }
    APIMgtDBUtil.closeAllConnections(preparedStatement,connection,resultSet);
  }
}",0.8806401422538341
114785,"/** 
 * This method is used to migrate swagger v1.2 resources to swagger v2.0 resource This reads the swagger v1.2 doc from the registry and creates swagger v2.0 doc
 * @throws APIMigrationException
 */
void swaggerResourceMigration() throws APIMigrationException {
  log.info(""String_Node_Str"" + Constants.VERSION_1_9 + ""String_Node_Str"");
  for (  Tenant tenant : getTenantsArray()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    }
    try {
      registryService.startTenantFlow(tenant);
      GenericArtifact[] artifacts=registryService.getGenericAPIArtifacts();
      updateSwaggerResources(artifacts,tenant);
    }
  finally {
      registryService.endTenantFlow();
    }
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}","/** 
 * This method is used to migrate swagger v1.2 resources to swagger v2.0 resource This reads the swagger v1.2 doc from the registry and creates swagger v2.0 doc
 * @throws APIMigrationException
 */
void swaggerResourceMigration() throws APIMigrationException {
  log.info(""String_Node_Str"" + Constants.VERSION_1_10 + ""String_Node_Str"");
  for (  Tenant tenant : getTenantsArray()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    }
    try {
      registryService.startTenantFlow(tenant);
      GenericArtifact[] artifacts=registryService.getGenericAPIArtifacts();
      updateSwaggerResources(artifacts,tenant);
    }
  finally {
      registryService.endTenantFlow();
    }
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}",0.9982788296041308
114786,"/** 
 * This method is used to migrate database tables This executes the database queries according to the user's db type and alters the tables
 * @throws SQLException
 */
@Override public void databaseMigration() throws SQLException {
  final String productHome=CarbonUtils.getCarbonHome();
  String scriptPath=productHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  updateAPIManagerDatabase(scriptPath);
  String constraintsScriptPath=productHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  dropFKConstraint(constraintsScriptPath);
}","/** 
 * This method is used to migrate database tables This executes the database queries according to the user's db type and alters the tables
 * @throws SQLException
 */
@Override public void databaseMigration() throws SQLException {
  final String productHome=CarbonUtils.getCarbonHome();
  String scriptPath=productHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  updateAPIManagerDatabase(scriptPath);
  String constraintsScriptPath=productHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
}",0.9646090534979423
114787,"protected void updateAPIManagerDatabase(String sqlScriptPath) throws SQLException {
  log.info(""String_Node_Str"");
  Connection connection=null;
  PreparedStatement preparedStatement=null;
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    connection=APIMgtDBUtil.getConnection();
    connection.setAutoCommit(false);
    String dbType=MigrationDBCreator.getDatabaseType(connection);
    if (Constants.DB_TYPE_MYSQL.equals(dbType)) {
      statement=connection.createStatement();
      resultSet=statement.executeQuery(GET_MYSQL_SESSION_MODE);
      if (resultSet.next()) {
        String mode=resultSet.getString(""String_Node_Str"");
        log.info(""String_Node_Str"" + mode);
        if (mode.contains(NO_ZERO_DATE_MODE)) {
          File timeStampFixScript=new File(sqlScriptPath + dbType + ""String_Node_Str"");
          if (timeStampFixScript.exists()) {
            log.info(NO_ZERO_DATE_MODE + ""String_Node_Str"");
            InputStream is=new FileInputStream(timeStampFixScript);
            List<String> sqlStatements=readSQLStatements(is,dbType);
            for (            String sqlStatement : sqlStatements) {
              preparedStatement=connection.prepareStatement(sqlStatement);
              preparedStatement.execute();
              connection.commit();
            }
          }
        }
      }
    }
    InputStream is=new FileInputStream(sqlScriptPath + dbType + ""String_Node_Str"");
    List<String> sqlStatements=readSQLStatements(is,dbType);
    for (    String sqlStatement : sqlStatements) {
      log.debug(""String_Node_Str"" + sqlStatement);
      if (Constants.DB_TYPE_ORACLE.equals(dbType)) {
        statement=connection.createStatement();
        statement.executeQuery(sqlStatement);
      }
 else {
        preparedStatement=connection.prepareStatement(sqlStatement);
        preparedStatement.execute();
      }
    }
    connection.commit();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    connection.rollback();
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    if (preparedStatement != null) {
      preparedStatement.close();
    }
    if (connection != null) {
      connection.close();
    }
  }
  log.info(""String_Node_Str"");
}","protected void updateAPIManagerDatabase(String sqlScriptPath) throws SQLException {
  log.info(""String_Node_Str"");
  Connection connection=null;
  PreparedStatement preparedStatement=null;
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    connection=APIMgtDBUtil.getConnection();
    connection.setAutoCommit(false);
    String dbType=MigrationDBCreator.getDatabaseType(connection);
    if (Constants.DB_TYPE_MYSQL.equals(dbType)) {
      statement=connection.createStatement();
      resultSet=statement.executeQuery(GET_MYSQL_SESSION_MODE);
      if (resultSet.next()) {
        String mode=resultSet.getString(""String_Node_Str"");
        log.info(""String_Node_Str"" + mode);
        if (mode.contains(NO_ZERO_DATE_MODE)) {
          File timeStampFixScript=new File(sqlScriptPath + dbType + ""String_Node_Str"");
          if (timeStampFixScript.exists()) {
            log.info(NO_ZERO_DATE_MODE + ""String_Node_Str"");
            InputStream is=new FileInputStream(timeStampFixScript);
            List<String> sqlStatements=readSQLStatements(is,dbType);
            for (            String sqlStatement : sqlStatements) {
              preparedStatement=connection.prepareStatement(sqlStatement);
              preparedStatement.execute();
              connection.commit();
            }
          }
        }
      }
    }
    InputStream is=new FileInputStream(sqlScriptPath + dbType + ""String_Node_Str"");
    List<String> sqlStatements=readSQLStatements(is,dbType);
    for (    String sqlStatement : sqlStatements) {
      log.debug(""String_Node_Str"" + sqlStatement);
      if (Constants.DB_TYPE_ORACLE.equals(dbType)) {
        statement=connection.createStatement();
        statement.executeUpdate(sqlStatement);
      }
 else {
        preparedStatement=connection.prepareStatement(sqlStatement);
        preparedStatement.execute();
      }
    }
    connection.commit();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    connection.rollback();
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    if (preparedStatement != null) {
      preparedStatement.close();
    }
    if (connection != null) {
      connection.close();
    }
  }
  log.info(""String_Node_Str"");
}",0.9976112920738328
114788,"/** 
 * This method generates swagger v2 doc using swagger 1.2 doc
 * @param tenant            Tenant
 * @param swagger12location the location of swagger 1.2 doc
 * @return JSON string of swagger v2 doc
 * @throws java.net.MalformedURLException
 * @throws org.json.simple.parser.ParseException
 * @throws org.wso2.carbon.registry.core.exceptions.RegistryException
 */
private String getSwagger2docUsingSwagger12RegistryResources(Tenant tenant,String swagger12location,API api) throws MalformedURLException, ParseException, RegistryException, UserStoreException {
  log.debug(""String_Node_Str"");
  JSONParser parser=new JSONParser();
  Object rawResource=registryService.getGovernanceRegistryResource(swagger12location);
  String swaggerRes=ResourceUtil.getResourceContent(rawResource);
  JSONObject swagger12doc=(JSONObject)parser.parse(swaggerRes);
  Object existSecDef=swagger12doc.get(Constants.SECURITY_DEFINITION__KEY);
  if (existSecDef == null) {
    JSONObject existScopes=new JSONObject();
    JSONObject xWso2Security=(JSONObject)swagger12doc.get(Constants.SWAGGER_X_WSO2_SECURITY);
    if (xWso2Security == null) {
      log.info(""String_Node_Str"" + swagger12location + ""String_Node_Str"");
    }
 else {
      JSONArray scopes=(JSONArray)((JSONObject)xWso2Security.get(Constants.SWAGGER_OBJECT_NAME_APIM)).get(Constants.SWAGGER_X_WSO2_SCOPES);
      for (int i=0; i < scopes.size(); i++) {
        JSONObject scope=(JSONObject)scopes.get(i);
        existScopes.put(scope.get(Constants.SECURITY_DEFINITION_SCOPE_NAME),scope.get(Constants.SECURITY_DEFINITION_SCOPE_KEY));
      }
    }
    JSONObject sec=generateSecurityDefinitionsObject(api.getId().getApiName(),existScopes);
    swagger12doc.put(Constants.SECURITY_DEFINITION__KEY,sec);
  }
 else {
    log.info(""String_Node_Str"" + swagger12location);
  }
  JSONObject paths=(JSONObject)swagger12doc.get(Constants.SWAGGER_PATHS);
  Set<Map.Entry> res=paths.entrySet();
  for (  Map.Entry e : res) {
    JSONObject methods=(JSONObject)e.getValue();
    Set<Map.Entry> mes=methods.entrySet();
    for (    Map.Entry m : mes) {
      JSONObject re=(JSONObject)m.getValue();
      JSONObject xWso2Security=(JSONObject)swagger12doc.get(Constants.SWAGGER_X_WSO2_SECURITY);
      JSONArray scopes=new JSONArray();
      if (xWso2Security != null) {
        scopes=(JSONArray)((JSONObject)xWso2Security.get(Constants.SWAGGER_OBJECT_NAME_APIM)).get(Constants.SWAGGER_X_WSO2_SCOPES);
      }
      JSONArray scopeList=new JSONArray();
      for (int i=0; i < scopes.size(); i++) {
        JSONObject scope=(JSONObject)scopes.get(i);
        scopeList.add(scope.get(Constants.SECURITY_DEFINITION_SCOPE_NAME));
      }
      JSONArray authScopeArray=new JSONArray();
      JSONObject authScopeObj=new JSONObject();
      authScopeObj.put(api.getId().getApiName() + Constants.SECURITY_DEFINITION_NAME_KEY_SUFFIX,scopeList);
      authScopeArray.add(authScopeObj);
      re.put(Constants.SWAGGER_PATH_SECURITY_KEY,authScopeArray);
      re.put(Constants.SWAGGER_PATH_PARAMETERS_KEY,new JSONArray());
    }
  }
  return swagger12doc.toJSONString();
}","/** 
 * This method generates swagger v2 doc using swagger 1.2 doc
 * @param tenant            Tenant
 * @param swagger12location the location of swagger 1.2 doc
 * @return JSON string of swagger v2 doc
 * @throws java.net.MalformedURLException
 * @throws org.json.simple.parser.ParseException
 * @throws org.wso2.carbon.registry.core.exceptions.RegistryException
 */
private String getSwagger2docUsingSwagger12RegistryResources(Tenant tenant,String swagger12location,API api) throws MalformedURLException, ParseException, RegistryException, UserStoreException {
  log.debug(""String_Node_Str"");
  JSONParser parser=new JSONParser();
  Object rawResource=registryService.getGovernanceRegistryResource(swagger12location);
  if (rawResource == null) {
    return ""String_Node_Str"";
  }
  String swaggerRes=ResourceUtil.getResourceContent(rawResource);
  JSONObject swagger12doc=(JSONObject)parser.parse(swaggerRes);
  Object existSecDef=swagger12doc.get(Constants.SECURITY_DEFINITION__KEY);
  if (existSecDef == null) {
    JSONObject existScopes=new JSONObject();
    JSONObject xWso2Security=(JSONObject)swagger12doc.get(Constants.SWAGGER_X_WSO2_SECURITY);
    if (xWso2Security == null) {
      log.info(""String_Node_Str"" + swagger12location + ""String_Node_Str"");
    }
 else {
      JSONArray scopes=(JSONArray)((JSONObject)xWso2Security.get(Constants.SWAGGER_OBJECT_NAME_APIM)).get(Constants.SWAGGER_X_WSO2_SCOPES);
      for (int i=0; i < scopes.size(); i++) {
        JSONObject scope=(JSONObject)scopes.get(i);
        existScopes.put(scope.get(Constants.SECURITY_DEFINITION_SCOPE_NAME),scope.get(Constants.SECURITY_DEFINITION_SCOPE_KEY));
      }
    }
    JSONObject sec=generateSecurityDefinitionsObject(api.getId().getApiName(),existScopes);
    swagger12doc.put(Constants.SECURITY_DEFINITION__KEY,sec);
  }
 else {
    log.info(""String_Node_Str"" + swagger12location);
  }
  JSONObject paths=(JSONObject)swagger12doc.get(Constants.SWAGGER_PATHS);
  Set<Map.Entry> res=paths.entrySet();
  for (  Map.Entry e : res) {
    JSONObject methods=(JSONObject)e.getValue();
    Set<Map.Entry> mes=methods.entrySet();
    for (    Map.Entry m : mes) {
      JSONObject re=(JSONObject)m.getValue();
      JSONObject xWso2Security=(JSONObject)swagger12doc.get(Constants.SWAGGER_X_WSO2_SECURITY);
      JSONArray scopes=new JSONArray();
      if (xWso2Security != null) {
        scopes=(JSONArray)((JSONObject)xWso2Security.get(Constants.SWAGGER_OBJECT_NAME_APIM)).get(Constants.SWAGGER_X_WSO2_SCOPES);
      }
      JSONArray scopeList=new JSONArray();
      for (int i=0; i < scopes.size(); i++) {
        JSONObject scope=(JSONObject)scopes.get(i);
        scopeList.add(scope.get(Constants.SECURITY_DEFINITION_SCOPE_NAME));
      }
      JSONArray authScopeArray=new JSONArray();
      JSONObject authScopeObj=new JSONObject();
      authScopeObj.put(api.getId().getApiName() + Constants.SECURITY_DEFINITION_NAME_KEY_SUFFIX,scopeList);
      authScopeArray.add(authScopeObj);
      re.put(Constants.SWAGGER_PATH_SECURITY_KEY,authScopeArray);
      Object produceObj=re.get(Constants.SWAGGER_PRODUCES);
      if (produceObj != null && !(produceObj instanceof JSONArray)) {
        JSONArray prodArr=new JSONArray();
        prodArr.add((String)produceObj);
        re.put(Constants.SWAGGER_PRODUCES,prodArr);
      }
      JSONObject responses=(JSONObject)re.get(Constants.SWAGGER_RESPONSES);
      JSONObject response;
      Iterator itr=responses.keySet().iterator();
      while (itr.hasNext()) {
        String key=(String)itr.next();
        response=(JSONObject)responses.get(key);
        boolean isExist=response.containsKey(Constants.SWAGGER_DESCRIPTION);
        if (!isExist) {
          response.put(Constants.SWAGGER_DESCRIPTION,""String_Node_Str"");
        }
      }
    }
  }
  return swagger12doc.toJSONString();
}",0.8837880756460228
114789,"/** 
 * This method is used to migrate rxt and rxt data This adds three new attributes to the api rxt
 * @throws APIMigrationException
 */
private void rxtMigration() throws APIMigrationException {
  log.info(""String_Node_Str"");
  String rxtName=""String_Node_Str"";
  String rxtDir=CarbonUtils.getCarbonHome() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ rxtName;
  for (  Tenant tenant : getTenantsArray()) {
    try {
      registryService.startTenantFlow(tenant);
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      String rxt=FileUtil.readFileToString(rxtDir);
      registryService.updateRXTResource(rxtName,rxt);
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      GenericArtifact[] artifacts=registryService.getGenericAPIArtifacts();
      for (      GenericArtifact artifact : artifacts) {
        String val=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
        artifact.setAttribute(""String_Node_Str"",val);
        artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
        artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
      registryService.updateGenericAPIArtifacts(artifacts);
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    }
 catch (    GovernanceException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    IOException e) {
      log.error(""String_Node_Str"" + rxtDir + ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
    }
catch (    org.wso2.carbon.registry.core.exceptions.RegistryException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    UserStoreException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
 finally {
      registryService.endTenantFlow();
    }
  }
  log.info(""String_Node_Str"");
}","/** 
 * This method is used to migrate rxt and rxt data This adds three new attributes to the api rxt
 * @throws APIMigrationException
 */
private void rxtMigration() throws APIMigrationException {
  log.info(""String_Node_Str"");
  String rxtName=""String_Node_Str"";
  String rxtDir=CarbonUtils.getCarbonHome() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ rxtName;
  for (  Tenant tenant : getTenantsArray()) {
    try {
      registryService.startTenantFlow(tenant);
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      String rxt=FileUtil.readFileToString(rxtDir);
      registryService.updateRXTResource(rxtName,rxt);
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      GenericArtifact[] artifacts=registryService.getGenericAPIArtifacts();
      for (      GenericArtifact artifact : artifacts) {
        String val=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
        artifact.setAttribute(""String_Node_Str"",val);
        artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
        artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
        String env=artifact.getAttribute(""String_Node_Str"");
        if (env == null) {
          artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
        }
        String trans=artifact.getAttribute(""String_Node_Str"");
        if (trans == null) {
          artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
        }
      }
      registryService.updateGenericAPIArtifacts(artifacts);
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    }
 catch (    GovernanceException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    IOException e) {
      log.error(""String_Node_Str"" + rxtDir + ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
    }
catch (    org.wso2.carbon.registry.core.exceptions.RegistryException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    UserStoreException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
 finally {
      registryService.endTenantFlow();
    }
  }
  log.info(""String_Node_Str"");
}",0.9275671069450362
114790,"protected void updateAPIManagerDatabase(String sqlScriptPath) throws SQLException {
  log.info(""String_Node_Str"");
  Connection connection=null;
  PreparedStatement preparedStatement=null;
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    connection=APIMgtDBUtil.getConnection();
    connection.setAutoCommit(false);
    String dbType=MigrationDBCreator.getDatabaseType(connection);
    if (Constants.DB_TYPE_MYSQL.equals(dbType)) {
      statement=connection.createStatement();
      resultSet=statement.executeQuery(GET_MYSQL_SESSION_MODE);
      if (resultSet.next()) {
        String mode=resultSet.getString(""String_Node_Str"");
        log.info(""String_Node_Str"" + mode);
        if (mode.contains(NO_ZERO_DATE_MODE)) {
          File timeStampFixScript=new File(sqlScriptPath + dbType + ""String_Node_Str"");
          if (timeStampFixScript.exists()) {
            log.info(NO_ZERO_DATE_MODE + ""String_Node_Str"");
            InputStream is=new FileInputStream(timeStampFixScript);
            List<String> sqlStatements=readSQLStatements(is,dbType);
            for (            String sqlStatement : sqlStatements) {
              preparedStatement=connection.prepareStatement(sqlStatement);
              preparedStatement.execute();
              connection.commit();
            }
          }
        }
      }
    }
    InputStream is=new FileInputStream(sqlScriptPath + dbType + ""String_Node_Str"");
    List<String> sqlStatements=readSQLStatements(is,dbType);
    for (    String sqlStatement : sqlStatements) {
      log.debug(""String_Node_Str"" + sqlStatement);
      statement=connection.createStatement();
      statement.executeQuery(sqlStatement);
    }
    connection.commit();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    connection.rollback();
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    if (preparedStatement != null) {
      preparedStatement.close();
    }
    if (connection != null) {
      connection.close();
    }
  }
  log.info(""String_Node_Str"");
}","protected void updateAPIManagerDatabase(String sqlScriptPath) throws SQLException {
  log.info(""String_Node_Str"");
  Connection connection=null;
  PreparedStatement preparedStatement=null;
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    connection=APIMgtDBUtil.getConnection();
    connection.setAutoCommit(false);
    String dbType=MigrationDBCreator.getDatabaseType(connection);
    if (Constants.DB_TYPE_MYSQL.equals(dbType)) {
      statement=connection.createStatement();
      resultSet=statement.executeQuery(GET_MYSQL_SESSION_MODE);
      if (resultSet.next()) {
        String mode=resultSet.getString(""String_Node_Str"");
        log.info(""String_Node_Str"" + mode);
        if (mode.contains(NO_ZERO_DATE_MODE)) {
          File timeStampFixScript=new File(sqlScriptPath + dbType + ""String_Node_Str"");
          if (timeStampFixScript.exists()) {
            log.info(NO_ZERO_DATE_MODE + ""String_Node_Str"");
            InputStream is=new FileInputStream(timeStampFixScript);
            List<String> sqlStatements=readSQLStatements(is,dbType);
            for (            String sqlStatement : sqlStatements) {
              preparedStatement=connection.prepareStatement(sqlStatement);
              preparedStatement.execute();
              connection.commit();
            }
          }
        }
      }
    }
    InputStream is=new FileInputStream(sqlScriptPath + dbType + ""String_Node_Str"");
    List<String> sqlStatements=readSQLStatements(is,dbType);
    for (    String sqlStatement : sqlStatements) {
      log.debug(""String_Node_Str"" + sqlStatement);
      if (Constants.DB_TYPE_ORACLE.equals(dbType)) {
        statement=connection.createStatement();
        statement.executeQuery(sqlStatement);
      }
 else {
        preparedStatement=connection.prepareStatement(sqlStatement);
        preparedStatement.execute();
      }
    }
    connection.commit();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    connection.rollback();
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    if (preparedStatement != null) {
      preparedStatement.close();
    }
    if (connection != null) {
      connection.close();
    }
  }
  log.info(""String_Node_Str"");
}",0.9576635725605614
114791,"/** 
 * adding address_endpoint to endpoints if not available
 * @param endpointElement endpoint element
 * @param doc             xml document
 */
public static void addingAddressPropertyToEndpoint(Element endpointElement,Document doc){
  NodeList addressProp=endpointElement.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_PROPERTY);
  Element propertyElement, propertyElementExist;
  boolean exist=false;
  for (int i=0; i < addressProp.getLength(); i++) {
    propertyElement=(Element)addressProp.item(i);
    if (propertyElement.hasAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME)) {
      if (Constants.SYNAPSE_ENDPOINT_ADDRESS_XML_ELEMENT.equalsIgnoreCase(propertyElement.getAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME))) {
        exist=true;
        break;
      }
    }
  }
  if (!exist) {
    Element uriElement=(Element)endpointElement.getElementsByTagName(Constants.SYNAPSE_HTTP_XML_ELEMENT).item(0);
    String val=uriElement.getAttribute(Constants.SYNAPSE_URI_TEMPLATE_ATTRIBUTE_NAME);
    propertyElementExist=doc.createElementNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_PROPERTY);
    propertyElementExist.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_VALUE,val);
    propertyElementExist.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME,Constants.SYNAPSE_ENDPOINT_ADDRESS_XML_ELEMENT);
    endpointElement.appendChild(propertyElementExist);
  }
}","/** 
 * adding address_endpoint to endpoints if not available
 * @param endpointElement endpoint element
 * @param doc             xml document
 */
public static void addingAddressPropertyToEndpoint(Element endpointElement,Document doc){
  NodeList addressProp=endpointElement.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_PROPERTY);
  Element propertyElement, propertyElementExist;
  boolean exist=false;
  for (int i=0; i < addressProp.getLength(); i++) {
    propertyElement=(Element)addressProp.item(i);
    if (propertyElement.hasAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME)) {
      if (Constants.SYNAPSE_ENDPOINT_ADDRESS_XML_ELEMENT.equalsIgnoreCase(propertyElement.getAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME))) {
        exist=true;
        break;
      }
    }
  }
  if (!exist) {
    Element uriElement=(Element)endpointElement.getElementsByTagName(Constants.SYNAPSE_HTTP_XML_ELEMENT).item(0);
    Element addressElement=(Element)endpointElement.getElementsByTagName(""String_Node_Str"").item(0);
    String val;
    if (uriElement != null) {
      val=uriElement.getAttribute(Constants.SYNAPSE_URI_TEMPLATE_ATTRIBUTE_NAME);
    }
 else     if (addressElement != null) {
      val=addressElement.getAttribute(""String_Node_Str"");
    }
 else {
      return;
    }
    propertyElementExist=doc.createElementNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_PROPERTY);
    propertyElementExist.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_VALUE,val);
    propertyElementExist.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME,Constants.SYNAPSE_ENDPOINT_ADDRESS_XML_ELEMENT);
    endpointElement.appendChild(propertyElementExist);
  }
}",0.9049803407601572
114792,"private List<String> readSQLStatements(InputStream is,String dbType){
  List<String> sqlStatements=new ArrayList<>();
  try {
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
    String sqlQuery=""String_Node_Str"";
    boolean isFoundQueryEnd=false;
    String line;
    while ((line=bufferedReader.readLine()) != null) {
      line=line.trim();
      if (line.startsWith(""String_Node_Str"") || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      StringTokenizer stringTokenizer=new StringTokenizer(line);
      if (stringTokenizer.hasMoreTokens()) {
        String token=stringTokenizer.nextToken();
        if (""String_Node_Str"".equalsIgnoreCase(token)) {
          continue;
        }
      }
      if (line.contains(""String_Node_Str"")) {
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
      }
      sqlQuery+=' ' + line;
      if (line.contains(""String_Node_Str"")) {
        isFoundQueryEnd=true;
      }
      if (org.wso2.carbon.apimgt.migration.util.Constants.DB_TYPE_ORACLE.equals(dbType)) {
        if (""String_Node_Str"".equals(line.trim())) {
          isFoundQueryEnd=true;
        }
 else {
          isFoundQueryEnd=false;
        }
        sqlQuery=sqlQuery.replaceAll(""String_Node_Str"",""String_Node_Str"");
        sqlQuery=sqlQuery.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      if (org.wso2.carbon.apimgt.migration.util.Constants.DB_TYPE_DB2.equals(dbType)) {
        sqlQuery=sqlQuery.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (isFoundQueryEnd) {
        if (sqlQuery.length() > 0) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + sqlQuery);
          }
          sqlStatements.add(sqlQuery.trim());
        }
        sqlQuery=""String_Node_Str"";
        isFoundQueryEnd=false;
      }
    }
    bufferedReader.close();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
  return sqlStatements;
}","private List<String> readSQLStatements(InputStream is,String dbType){
  List<String> sqlStatements=new ArrayList<>();
  try {
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(is,""String_Node_Str""));
    String sqlQuery=""String_Node_Str"";
    boolean isFoundQueryEnd=false;
    String line;
    while ((line=bufferedReader.readLine()) != null) {
      line=line.trim();
      if (line.startsWith(""String_Node_Str"") || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      StringTokenizer stringTokenizer=new StringTokenizer(line);
      if (stringTokenizer.hasMoreTokens()) {
        String token=stringTokenizer.nextToken();
        if (""String_Node_Str"".equalsIgnoreCase(token)) {
          continue;
        }
      }
      if (line.contains(""String_Node_Str"")) {
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
      }
      sqlQuery+=' ' + line;
      if (line.contains(""String_Node_Str"")) {
        isFoundQueryEnd=true;
      }
      if (org.wso2.carbon.apimgt.migration.util.Constants.DB_TYPE_ORACLE.equals(dbType)) {
        if (""String_Node_Str"".equals(line.trim())) {
          isFoundQueryEnd=true;
        }
 else {
          isFoundQueryEnd=false;
        }
        sqlQuery=sqlQuery.replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      if (org.wso2.carbon.apimgt.migration.util.Constants.DB_TYPE_DB2.equals(dbType)) {
        sqlQuery=sqlQuery.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (isFoundQueryEnd) {
        if (sqlQuery.length() > 0) {
          if (log.isDebugEnabled()) {
            log.debug(""String_Node_Str"" + sqlQuery);
          }
          sqlStatements.add(sqlQuery.trim());
        }
        sqlQuery=""String_Node_Str"";
        isFoundQueryEnd=false;
      }
    }
    bufferedReader.close();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
  return sqlStatements;
}",0.980744544287548
114793,"protected void updateAPIManagerDatabase(String sqlScriptPath) throws SQLException {
  log.info(""String_Node_Str"");
  Connection connection=null;
  PreparedStatement preparedStatement=null;
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    connection=APIMgtDBUtil.getConnection();
    connection.setAutoCommit(false);
    String dbType=MigrationDBCreator.getDatabaseType(connection);
    if (Constants.DB_TYPE_MYSQL.equals(dbType)) {
      statement=connection.createStatement();
      resultSet=statement.executeQuery(GET_MYSQL_SESSION_MODE);
      if (resultSet.next()) {
        String mode=resultSet.getString(""String_Node_Str"");
        log.info(""String_Node_Str"" + mode);
        if (mode.contains(NO_ZERO_DATE_MODE)) {
          File timeStampFixScript=new File(sqlScriptPath + dbType + ""String_Node_Str"");
          if (timeStampFixScript.exists()) {
            log.info(NO_ZERO_DATE_MODE + ""String_Node_Str"");
            InputStream is=new FileInputStream(timeStampFixScript);
            List<String> sqlStatements=readSQLStatements(is,dbType);
            for (            String sqlStatement : sqlStatements) {
              preparedStatement=connection.prepareStatement(sqlStatement);
              preparedStatement.execute();
              connection.commit();
            }
          }
        }
      }
    }
    InputStream is=new FileInputStream(sqlScriptPath + dbType + ""String_Node_Str"");
    List<String> sqlStatements=readSQLStatements(is,dbType);
    for (    String sqlStatement : sqlStatements) {
      preparedStatement=connection.prepareStatement(sqlStatement);
      preparedStatement.execute();
    }
    connection.commit();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    if (preparedStatement != null) {
      preparedStatement.close();
    }
    if (connection != null) {
      connection.close();
    }
  }
  log.info(""String_Node_Str"");
}","protected void updateAPIManagerDatabase(String sqlScriptPath) throws SQLException {
  log.info(""String_Node_Str"");
  Connection connection=null;
  PreparedStatement preparedStatement=null;
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    connection=APIMgtDBUtil.getConnection();
    connection.setAutoCommit(false);
    String dbType=MigrationDBCreator.getDatabaseType(connection);
    if (Constants.DB_TYPE_MYSQL.equals(dbType)) {
      statement=connection.createStatement();
      resultSet=statement.executeQuery(GET_MYSQL_SESSION_MODE);
      if (resultSet.next()) {
        String mode=resultSet.getString(""String_Node_Str"");
        log.info(""String_Node_Str"" + mode);
        if (mode.contains(NO_ZERO_DATE_MODE)) {
          File timeStampFixScript=new File(sqlScriptPath + dbType + ""String_Node_Str"");
          if (timeStampFixScript.exists()) {
            log.info(NO_ZERO_DATE_MODE + ""String_Node_Str"");
            InputStream is=new FileInputStream(timeStampFixScript);
            List<String> sqlStatements=readSQLStatements(is,dbType);
            for (            String sqlStatement : sqlStatements) {
              preparedStatement=connection.prepareStatement(sqlStatement);
              preparedStatement.execute();
              connection.commit();
            }
          }
        }
      }
    }
    InputStream is=new FileInputStream(sqlScriptPath + dbType + ""String_Node_Str"");
    List<String> sqlStatements=readSQLStatements(is,dbType);
    for (    String sqlStatement : sqlStatements) {
      log.debug(""String_Node_Str"" + sqlStatement);
      statement=connection.createStatement();
      statement.executeQuery(sqlStatement);
    }
    connection.commit();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    connection.rollback();
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    if (preparedStatement != null) {
      preparedStatement.close();
    }
    if (connection != null) {
      connection.close();
    }
  }
  log.info(""String_Node_Str"");
}",0.9553314121037464
114794,"/** 
 * This method is used to migrate synapse files This changes the synapse api and add the new handlers
 */
private void synapseAPIMigration(){
  String repository=CarbonUtils.getCarbonRepository();
  String tenantRepository=CarbonUtils.getCarbonTenantsDirPath();
  for (  Tenant tenant : getTenantsArray()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    }
    String apiFilePath;
    if (tenant.getId() != MultitenantConstants.SUPER_TENANT_ID) {
      apiFilePath=tenantRepository + '/' + tenant.getId()+ ""String_Node_Str"";
    }
 else {
      apiFilePath=repository + ""String_Node_Str"";
    }
    File APIFiles=new File(apiFilePath);
    File[] synapseFiles=APIFiles.listFiles();
    if (synapseFiles == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + apiFilePath + ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')');
      }
      continue;
    }
    for (    File synapseFile : synapseFiles) {
      DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
      docFactory.setNamespaceAware(true);
      try {
        docFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
        DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
        Document doc=docBuilder.parse(synapseFile);
        doc.getDocumentElement().normalize();
        Element rootElement=doc.getDocumentElement();
        if (Constants.SYNAPSE_API_ROOT_ELEMENT.equals(rootElement.getNodeName()) && rootElement.hasAttribute(Constants.SYNAPSE_API_ATTRIBUTE_VERSION)) {
          ResourceUtil.updateSynapseAPI(doc,synapseFile);
        }
      }
 catch (      ParserConfigurationException e) {
        log.error(""String_Node_Str"" + synapseFile.getAbsolutePath(),e);
      }
catch (      SAXException e) {
        log.error(""String_Node_Str"" + synapseFile.getAbsolutePath(),e);
      }
catch (      IOException e) {
        log.error(""String_Node_Str"" + synapseFile.getAbsolutePath(),e);
      }
catch (      APIMigrationException e) {
        log.error(""String_Node_Str"" + synapseFile.getAbsolutePath(),e);
      }
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    }
  }
}","/** 
 * This method is used to migrate synapse files This changes the synapse api and add the new handlers
 */
private void synapseAPIMigration(){
  String repository=CarbonUtils.getCarbonRepository();
  String tenantRepository=CarbonUtils.getCarbonTenantsDirPath();
  for (  Tenant tenant : getTenantsArray()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    }
    String apiFilePath;
    if (tenant.getId() != MultitenantConstants.SUPER_TENANT_ID) {
      apiFilePath=tenantRepository + '/' + tenant.getId()+ ""String_Node_Str"";
    }
 else {
      apiFilePath=repository + ""String_Node_Str"";
    }
    File APIFiles=new File(apiFilePath);
    File[] synapseFiles=APIFiles.listFiles();
    if (synapseFiles == null) {
      if (log.isDebugEnabled()) {
        log.debug(""String_Node_Str"" + apiFilePath + ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')');
      }
      continue;
    }
    for (    File synapseFile : synapseFiles) {
      DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();
      docFactory.setNamespaceAware(true);
      try {
        docFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
        DocumentBuilder docBuilder=docFactory.newDocumentBuilder();
        Document doc=docBuilder.parse(synapseFile);
        doc.getDocumentElement().normalize();
        Element rootElement=doc.getDocumentElement();
        if (Constants.SYNAPSE_API_ROOT_ELEMENT.equals(rootElement.getNodeName()) && rootElement.hasAttribute(Constants.SYNAPSE_API_ATTRIBUTE_VERSION)) {
          ResourceUtil.updateSynapseAPI(doc,synapseFile);
        }
      }
 catch (      ParserConfigurationException e) {
        log.error(""String_Node_Str"" + synapseFile.getAbsolutePath(),e);
      }
catch (      SAXException e) {
        log.error(""String_Node_Str"" + synapseFile.getAbsolutePath(),e);
      }
catch (      IOException e) {
        log.error(""String_Node_Str"" + synapseFile.getAbsolutePath(),e);
      }
catch (      APIMigrationException e) {
        log.error(""String_Node_Str"" + synapseFile.getAbsolutePath(),e);
      }
catch (      Exception e) {
        log.error(""String_Node_Str"" + synapseFile.getAbsolutePath(),e);
      }
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    }
  }
}",0.9768736616702356
114795,"/** 
 * Generate Swagger v2 paths object from swagger v1.2 document See <a href=""https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#paths-object"">Swagger v2 paths object</a>
 * @param apiDefinitionPaths API definition paths
 * @return swagger v2 paths object
 * @throws ParseException
 */
private static JSONObject generatePathsObj(JSONObject swagger12doc,Map<String,SwaggerInfoDTO> apiDefinitionPaths) throws ParseException {
  JSONObject pathsObj=new JSONObject();
  JSONArray producesMimeArray=extractProducesObject(swagger12doc);
  JSONArray consumesMimeArray=extractConsumesObject(swagger12doc);
  for (  Map.Entry<String,SwaggerInfoDTO> entry : apiDefinitionPaths.entrySet()) {
    try {
      String key=entry.getKey();
      List<JSONArray> operationsList=entry.getValue().getOperationList();
      JSONObject pathItemObj=new JSONObject();
      String tagName=entry.getValue().getTagName();
      for (      JSONArray operations : operationsList) {
        for (        Object operation : operations) {
          JSONObject operationObject=(JSONObject)operation;
          if (operationObject.containsKey(""String_Node_Str"")) {
            String method=(String)operationObject.get(""String_Node_Str"");
            if (operationObject.containsKey(""String_Node_Str"")) {
              JSONObject swagger2OperationsObj=new JSONObject();
              JSONArray newParameters;
              Object swagger12Params=operationObject.get(""String_Node_Str"");
              if (swagger12Params != null && (swagger12Params instanceof JSONArray)) {
                JSONArray swagger12ParamObjects=(JSONArray)swagger12Params;
                newParameters=new JSONArray();
                generateSwagger2OperationParameters(newParameters,swagger12ParamObjects);
                swagger2OperationsObj.put(Constants.SWAGGER_PARAMETERS,newParameters);
              }
              swagger2OperationsObj.put(Constants.SWAGGER_OPERATION_ID,operationObject.get(""String_Node_Str""));
              if (operationObject.containsKey(Constants.SWAGGER_AUTH_TYPE)) {
                swagger2OperationsObj.put(Constants.SWAGGER_X_AUTH_TYPE,operationObject.get(Constants.SWAGGER_AUTH_TYPE));
              }
              if (operationObject.containsKey(Constants.SWAGGER_THROTTLING_TIER)) {
                swagger2OperationsObj.put(Constants.SWAGGER_X_THROTTLING_TIER,operationObject.get(Constants.SWAGGER_THROTTLING_TIER));
              }
              if (operationObject.containsKey(""String_Node_Str"")) {
                swagger2OperationsObj.put(Constants.SWAGGER_DESCRIPTION,operationObject.get(""String_Node_Str""));
              }
              if (operationObject.containsKey(Constants.SWAGGER_SUMMARY)) {
                swagger2OperationsObj.put(Constants.SWAGGER_SUMMARY,operationObject.get(Constants.SWAGGER_SUMMARY));
              }
              if (entry.getValue().getProducesList() != null) {
                swagger2OperationsObj.put(Constants.SWAGGER_PRODUCES,entry.getValue().getProducesList());
              }
 else               if (producesMimeArray != null) {
                swagger2OperationsObj.put(Constants.SWAGGER_PRODUCES,producesMimeArray);
              }
              if (entry.getValue().getConsumeList() != null) {
                swagger2OperationsObj.put(Constants.SWAGGER_CONSUMES,entry.getValue().getConsumeList());
              }
 else               if (consumesMimeArray != null) {
                swagger2OperationsObj.put(Constants.SWAGGER_CONSUMES,consumesMimeArray);
              }
              buildResponseObject(operationObject,swagger2OperationsObj);
              if (tagName != null) {
                JSONArray tagsArray=new JSONArray();
                tagsArray.add(tagName);
                swagger2OperationsObj.put(""String_Node_Str"",tagsArray);
              }
              pathItemObj.put(method.toLowerCase(),swagger2OperationsObj);
            }
          }
 else {
            log.error(""String_Node_Str"");
          }
        }
      }
      pathsObj.put(key,pathItemObj);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue().toString(),e);
    }
  }
  return pathsObj;
}","/** 
 * Generate Swagger v2 paths object from swagger v1.2 document See <a href=""https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#paths-object"">Swagger v2 paths object</a>
 * @param apiDefinitionPaths API definition paths
 * @return swagger v2 paths object
 * @throws ParseException
 */
private static JSONObject generatePathsObj(JSONObject swagger12doc,Map<String,SwaggerInfoDTO> apiDefinitionPaths) throws ParseException {
  JSONObject pathsObj=new JSONObject();
  JSONArray producesMimeArray=extractProducesObject(swagger12doc);
  JSONArray consumesMimeArray=extractConsumesObject(swagger12doc);
  for (  Map.Entry<String,SwaggerInfoDTO> entry : apiDefinitionPaths.entrySet()) {
    try {
      String key=entry.getKey();
      List<JSONArray> operationsList=entry.getValue().getOperationList();
      JSONObject pathItemObj=new JSONObject();
      String tagName=entry.getValue().getTagName();
      for (      JSONArray operations : operationsList) {
        for (        Object operation : operations) {
          JSONObject operationObject=(JSONObject)operation;
          if (operationObject.containsKey(""String_Node_Str"")) {
            String method=(String)operationObject.get(""String_Node_Str"");
            if (operationObject.containsKey(""String_Node_Str"")) {
              JSONObject swagger2OperationsObj=new JSONObject();
              JSONArray newParameters;
              Object swagger12Params=operationObject.get(""String_Node_Str"");
              if (swagger12Params != null && (swagger12Params instanceof JSONArray)) {
                JSONArray swagger12ParamObjects=(JSONArray)swagger12Params;
                newParameters=new JSONArray();
                generateSwagger2OperationParameters(newParameters,swagger12ParamObjects);
                swagger2OperationsObj.put(Constants.SWAGGER_PARAMETERS,newParameters);
              }
              swagger2OperationsObj.put(Constants.SWAGGER_OPERATION_ID,operationObject.get(""String_Node_Str""));
              if (operationObject.containsKey(Constants.SWAGGER_AUTH_TYPE)) {
                swagger2OperationsObj.put(Constants.SWAGGER_X_AUTH_TYPE,operationObject.get(Constants.SWAGGER_AUTH_TYPE));
              }
              if (operationObject.containsKey(Constants.SWAGGER_THROTTLING_TIER)) {
                swagger2OperationsObj.put(Constants.SWAGGER_X_THROTTLING_TIER,operationObject.get(Constants.SWAGGER_THROTTLING_TIER));
              }
              if (operationObject.containsKey(""String_Node_Str"")) {
                swagger2OperationsObj.put(Constants.SWAGGER_DESCRIPTION,operationObject.get(""String_Node_Str""));
              }
              if (operationObject.containsKey(Constants.SWAGGER_SUMMARY)) {
                swagger2OperationsObj.put(Constants.SWAGGER_SUMMARY,operationObject.get(Constants.SWAGGER_SUMMARY));
              }
              JSONArray operationsLevelProduces=extractProducesObject(operationObject);
              if (operationsLevelProduces != null) {
                swagger2OperationsObj.put(Constants.SWAGGER_PRODUCES,operationsLevelProduces);
              }
 else               if (entry.getValue().getProducesList() != null) {
                swagger2OperationsObj.put(Constants.SWAGGER_PRODUCES,entry.getValue().getProducesList());
              }
 else               if (producesMimeArray != null) {
                swagger2OperationsObj.put(Constants.SWAGGER_PRODUCES,producesMimeArray);
              }
              JSONArray operationLevelConsumes=extractConsumesObject(operationObject);
              if (operationLevelConsumes != null) {
                swagger2OperationsObj.put(Constants.SWAGGER_CONSUMES,operationLevelConsumes);
              }
 else               if (entry.getValue().getConsumeList() != null) {
                swagger2OperationsObj.put(Constants.SWAGGER_CONSUMES,entry.getValue().getConsumeList());
              }
 else               if (consumesMimeArray != null) {
                swagger2OperationsObj.put(Constants.SWAGGER_CONSUMES,consumesMimeArray);
              }
              buildResponseObject(operationObject,swagger2OperationsObj);
              if (tagName != null) {
                JSONArray tagsArray=new JSONArray();
                tagsArray.add(tagName);
                swagger2OperationsObj.put(""String_Node_Str"",tagsArray);
              }
              pathItemObj.put(method.toLowerCase(),swagger2OperationsObj);
            }
          }
 else {
            log.error(""String_Node_Str"");
          }
        }
      }
      pathsObj.put(key,pathItemObj);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue().toString(),e);
    }
  }
  return pathsObj;
}",0.8902995879273862
114796,"private void updateTiers() throws APIMigrationException {
  log.info(""String_Node_Str"");
  for (  Tenant tenant : getTenantsArray()) {
    log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    try {
      registryService.startTenantFlow(tenant);
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.API_TIER_LOCATION)) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
        }
        continue;
      }
 else {
        String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
        String updatedApiTiers=ResourceModifier.modifyTiers(apiTiers,APIConstants.API_TIER_LOCATION);
        registryService.updateGovernanceRegistryResource(APIConstants.API_TIER_LOCATION,updatedApiTiers);
      }
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.APP_TIER_LOCATION)) {
        String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
        registryService.addGovernanceRegistryResource(APIConstants.APP_TIER_LOCATION,apiTiers,""String_Node_Str"");
      }
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.RES_TIER_LOCATION)) {
        String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
        registryService.addGovernanceRegistryResource(APIConstants.RES_TIER_LOCATION,apiTiers,""String_Node_Str"");
      }
    }
 catch (    UserStoreException e) {
      log.error(""String_Node_Str"" + +tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    RegistryException e) {
      log.error(""String_Node_Str"" + +tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
 finally {
      registryService.endTenantFlow();
    }
    log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}","private void updateTiers() throws APIMigrationException {
  log.info(""String_Node_Str"");
  for (  Tenant tenant : getTenantsArray()) {
    log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    try {
      registryService.startTenantFlow(tenant);
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.API_TIER_LOCATION)) {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
        }
        continue;
      }
 else {
        String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
        String updatedApiTiers=ResourceModifier.modifyTiers(apiTiers,APIConstants.API_TIER_LOCATION);
        registryService.updateGovernanceRegistryResource(APIConstants.API_TIER_LOCATION,updatedApiTiers);
      }
      String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
      registryService.addGovernanceRegistryResource(APIConstants.APP_TIER_LOCATION,apiTiers,""String_Node_Str"");
      registryService.addGovernanceRegistryResource(APIConstants.RES_TIER_LOCATION,apiTiers,""String_Node_Str"");
    }
 catch (    UserStoreException e) {
      log.error(""String_Node_Str"" + +tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    RegistryException e) {
      log.error(""String_Node_Str"" + +tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
 finally {
      registryService.endTenantFlow();
    }
    log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}",0.7606239913932221
114797,"private static void updateHandlers(Document document){
  Element handlersElement=(Element)document.getElementsByTagNameNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_HANDLERS).item(0);
  NodeList handlerNodes=handlersElement.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_HANDLER);
  for (int i=0; i < handlerNodes.getLength(); ++i) {
    Element handler=(Element)handlerNodes.item(i);
    String className=handler.getAttribute(Constants.SYNAPSE_API_ATTRIBUTE_CLASS);
    if (Constants.SYNAPSE_API_VALUE_CORS_HANDLER.equals(className)) {
      handlersElement.removeChild(handler);
      break;
    }
  }
  Element inSequenceElement=(Element)document.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_INSEQUENCE).item(0);
  NodeList sendElements=inSequenceElement.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_SEND);
  Element corsHandler=document.createElementNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_HANDLER);
  corsHandler.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_CLASS,Constants.SYNAPSE_API_VALUE_CORS_HANDLER);
  Element property=document.createElementNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_PROPERTY);
  property.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME,Constants.SYNAPSE_API_VALUE_INLINE);
  if (0 < sendElements.getLength()) {
    property.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_VALUE,Constants.SYNAPSE_API_VALUE_ENPOINT);
  }
 else {
    property.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_VALUE,Constants.SYNAPSE_API_VALUE_INLINE_UPPERCASE);
  }
  corsHandler.appendChild(property);
  handlersElement.insertBefore(corsHandler,handlersElement.getFirstChild());
}","private static void updateHandlers(Document document){
  Element handlersElement=(Element)document.getElementsByTagNameNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_HANDLERS).item(0);
  if (handlersElement != null) {
    NodeList handlerNodes=handlersElement.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_HANDLER);
    for (int i=0; i < handlerNodes.getLength(); ++i) {
      Element handler=(Element)handlerNodes.item(i);
      String className=handler.getAttribute(Constants.SYNAPSE_API_ATTRIBUTE_CLASS);
      if (Constants.SYNAPSE_API_VALUE_CORS_HANDLER.equals(className)) {
        handlersElement.removeChild(handler);
        break;
      }
    }
  }
  Element inSequenceElement=(Element)document.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_INSEQUENCE).item(0);
  NodeList sendElements=inSequenceElement.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_SEND);
  Element corsHandler=document.createElementNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_HANDLER);
  corsHandler.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_CLASS,Constants.SYNAPSE_API_VALUE_CORS_HANDLER);
  Element property=document.createElementNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_PROPERTY);
  property.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME,Constants.SYNAPSE_API_VALUE_INLINE);
  if (0 < sendElements.getLength() && handlersElement != null) {
    property.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_VALUE,Constants.SYNAPSE_API_VALUE_ENPOINT);
  }
 else {
    property.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_VALUE,Constants.SYNAPSE_API_VALUE_INLINE_UPPERCASE);
  }
  corsHandler.appendChild(property);
  if (handlersElement != null) {
    handlersElement.insertBefore(corsHandler,handlersElement.getFirstChild());
  }
 else {
    handlersElement=document.createElementNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_HANDLERS);
    handlersElement.appendChild(corsHandler);
    document.getFirstChild().appendChild(handlersElement);
  }
}",0.9039825422804146
114798,"private static void updateOutSequence(Element resourceElement,Document doc){
  Element outSequenceElement=(Element)resourceElement.getElementsByTagNameNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_OUTSEQUENCE).item(0);
  NodeList classNodes=outSequenceElement.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_CLASS);
  boolean isResponseHandlerSet=false;
  for (int i=0; i < classNodes.getLength(); ++i) {
    Element classElement=(Element)classNodes.item(i);
    if (Constants.SYNAPSE_API_VALUE_RESPONSE_HANDLER.equals(classElement.getAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME))) {
      isResponseHandlerSet=true;
      break;
    }
  }
  if (!isResponseHandlerSet) {
    Element sendElement=(Element)outSequenceElement.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_SEND).item(0);
    Element classElement=doc.createElementNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_CLASS);
    classElement.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME,Constants.SYNAPSE_API_VALUE_RESPONSE_HANDLER);
    classElement.removeAttribute(Constants.SYNAPSE_API_ATTRIBUTE_XMLNS);
    outSequenceElement.insertBefore(classElement,sendElement);
  }
}","private static void updateOutSequence(Element resourceElement,Document doc){
  Element outSequenceElement=(Element)resourceElement.getElementsByTagNameNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_OUTSEQUENCE).item(0);
  if (outSequenceElement == null) {
    return;
  }
  NodeList classNodes=outSequenceElement.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_CLASS);
  boolean isResponseHandlerSet=false;
  for (int i=0; i < classNodes.getLength(); ++i) {
    Element classElement=(Element)classNodes.item(i);
    if (Constants.SYNAPSE_API_VALUE_RESPONSE_HANDLER.equals(classElement.getAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME))) {
      isResponseHandlerSet=true;
      break;
    }
  }
  if (!isResponseHandlerSet) {
    Element sendElement=(Element)outSequenceElement.getElementsByTagName(Constants.SYNAPSE_API_ELEMENT_SEND).item(0);
    Element classElement=doc.createElementNS(Constants.SYNAPSE_API_XMLNS,Constants.SYNAPSE_API_ELEMENT_CLASS);
    classElement.setAttribute(Constants.SYNAPSE_API_ATTRIBUTE_NAME,Constants.SYNAPSE_API_VALUE_RESPONSE_HANDLER);
    classElement.removeAttribute(Constants.SYNAPSE_API_ATTRIBUTE_XMLNS);
    outSequenceElement.insertBefore(classElement,sendElement);
  }
}",0.978369384359401
114799,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIRoleChangeEffectInStore() throws Exception {
  apiPublisher.login(contextUsername,contextUserPassword);
  APIRequest brokenApiRequest=new APIRequest(BROKEN_API,BROKEN_API,new URL(EP_URL));
  brokenApiRequest.setVersion(API_VERSION);
  brokenApiRequest.setProvider(contextUsername);
  brokenApiRequest.setVisibility(""String_Node_Str"");
  brokenApiRequest.setRoles(FIRST_ROLE);
  apiPublisher.addAPI(brokenApiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(BROKEN_API,contextUsername,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  APIRequest healthyApiRequest=new APIRequest(HEALTHY_API,HEALTHY_API,new URL(EP_URL));
  healthyApiRequest.setVersion(API_VERSION);
  healthyApiRequest.setProvider(contextUsername);
  healthyApiRequest.setVisibility(""String_Node_Str"");
  healthyApiRequest.setRoles(FIRST_ROLE);
  apiPublisher.addAPI(healthyApiRequest);
  updateRequest=new APILifeCycleStateRequest(HEALTHY_API,contextUsername,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(contextUsername,HEALTHY_API,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  apiStoreRestClient.login(FIRST_USER,USER_PASSWORD);
  apiStoreRestClient.addApplication(APP_NAME,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(BROKEN_API,contextUsername);
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStoreRestClient.subscribe(subscriptionRequest);
  subscriptionRequest=new SubscriptionRequest(HEALTHY_API,contextUsername);
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStoreRestClient.subscribe(subscriptionRequest);
  brokenApiRequest.setRoles(SECOND_ROLE);
  brokenApiRequest.setTags(""String_Node_Str"");
  Thread.sleep(1000);
  apiPublisher.updateAPI(brokenApiRequest);
  waitForAPIDeployment();
  HttpResponse response=new HttpResponse(""String_Node_Str"",HttpStatus.SC_INTERNAL_SERVER_ERROR);
  try {
    response=apiStoreRestClient.getAllSubscriptions();
  }
 catch (  Exception e) {
  }
  LogFactory.getLog(APIMANAGER4373BrokenAPIInStoreTestCase.class).error(response.getData());
  assertTrue(response.getData().contains(HEALTHY_API),""String_Node_Str"" + response.getData());
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIRoleChangeEffectInStore() throws Exception {
  apiPublisher.login(contextUsername,contextUserPassword);
  APIRequest brokenApiRequest=new APIRequest(BROKEN_API,BROKEN_API,new URL(EP_URL));
  brokenApiRequest.setVersion(API_VERSION);
  brokenApiRequest.setProvider(contextUsername);
  brokenApiRequest.setVisibility(RESTRICTED);
  brokenApiRequest.setRoles(FIRST_ROLE);
  apiPublisher.addAPI(brokenApiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(BROKEN_API,contextUsername,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  APIRequest healthyApiRequest=new APIRequest(HEALTHY_API,HEALTHY_API,new URL(EP_URL));
  healthyApiRequest.setVersion(API_VERSION);
  healthyApiRequest.setProvider(contextUsername);
  healthyApiRequest.setVisibility(RESTRICTED);
  healthyApiRequest.setRoles(FIRST_ROLE);
  apiPublisher.addAPI(healthyApiRequest);
  updateRequest=new APILifeCycleStateRequest(HEALTHY_API,contextUsername,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(contextUsername,HEALTHY_API,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  apiStoreRestClient.login(FIRST_USER,USER_PASSWORD);
  apiStoreRestClient.addApplication(APP_NAME,APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(BROKEN_API,contextUsername);
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStoreRestClient.subscribe(subscriptionRequest);
  subscriptionRequest=new SubscriptionRequest(HEALTHY_API,contextUsername);
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStoreRestClient.subscribe(subscriptionRequest);
  brokenApiRequest.setRoles(SECOND_ROLE);
  brokenApiRequest.setTags(TAG_UPDATED);
  Thread.sleep(1000);
  apiPublisher.updateAPI(brokenApiRequest);
  waitForAPIDeployment();
  HttpResponse response=new HttpResponse(""String_Node_Str"",HttpStatus.SC_INTERNAL_SERVER_ERROR);
  try {
    response=apiStoreRestClient.getAllSubscriptions();
  }
 catch (  Exception e) {
  }
  LogFactory.getLog(APIMANAGER4373BrokenAPIInStoreTestCase.class).error(response.getData());
  assertTrue(response.getData().contains(HEALTHY_API),""String_Node_Str"" + response.getData());
}",0.9692631578947368
114800,"private void updateSwaggerResources(GenericArtifact[] artifacts,Tenant tenant) throws APIMigrationException {
  log.debug(""String_Node_Str"");
  APIDefinitionFromSwagger20 definitionFromSwagger20=new APIDefinitionFromSwagger20();
  for (  GenericArtifact artifact : artifacts) {
    API api=registryService.getAPI(artifact);
    if (api != null) {
      APIIdentifier apiIdentifier=api.getId();
      String apiName=apiIdentifier.getApiName();
      String apiVersion=apiIdentifier.getVersion();
      String apiProviderName=apiIdentifier.getProviderName();
      try {
        String swagger2location=ResourceUtil.getSwagger2ResourceLocation(apiName,apiVersion,apiProviderName);
        String swagger12location=ResourceUtil.getSwagger12ResourceLocation(apiName,apiVersion,apiProviderName);
        String swagger2Document;
        if (!registryService.isGovernanceRegistryResourceExists(swagger12location)) {
          log.debug(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName);
          swagger2Document=definitionFromSwagger20.generateAPIDefinition(api);
        }
 else {
          log.debug(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName);
          swagger2Document=getSwagger2docUsingSwagger12RegistryResources(tenant,swagger12location,api);
        }
        registryService.addGovernanceRegistryResource(swagger2location,swagger2Document,""String_Node_Str"");
        registryService.setGovernanceRegistryResourcePermissions(apiProviderName,null,null,swagger2location);
      }
 catch (      RegistryException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      ParseException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      UserStoreException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      MalformedURLException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      APIManagementException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
    }
  }
}","private void updateSwaggerResources(GenericArtifact[] artifacts,Tenant tenant) throws APIMigrationException {
  log.debug(""String_Node_Str"");
  APIDefinitionFromSwagger20 definitionFromSwagger20=new APIDefinitionFromSwagger20();
  for (  GenericArtifact artifact : artifacts) {
    API api=registryService.getAPI(artifact);
    if (api != null) {
      APIIdentifier apiIdentifier=api.getId();
      String apiName=apiIdentifier.getApiName();
      String apiVersion=apiIdentifier.getVersion();
      String apiProviderName=apiIdentifier.getProviderName();
      try {
        String swagger2location=ResourceUtil.getSwagger2ResourceLocation(apiName,apiVersion,apiProviderName);
        String swagger12location=ResourceUtil.getSwagger12ResourceLocation(apiName,apiVersion,apiProviderName);
        String swagger2Document;
        if (!registryService.isGovernanceRegistryResourceExists(swagger12location)) {
          log.debug(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName);
          swagger2Document=definitionFromSwagger20.generateAPIDefinition(api);
        }
 else {
          log.debug(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName);
          swagger2Document=getSwagger2docUsingSwagger12RegistryResources(tenant,swagger12location,api);
        }
        registryService.addGovernanceRegistryResource(swagger2location,swagger2Document,""String_Node_Str"");
        registryService.setGovernanceRegistryResourcePermissions(apiProviderName,null,null,swagger2location);
      }
 catch (      RegistryException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      ParseException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      UserStoreException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      MalformedURLException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      APIManagementException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      Exception e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
    }
  }
}",0.9637777356343638
114801,"/** 
 * Generate Swagger v2 paths object from swagger v1.2 document See <a href=""https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#paths-object"">Swagger v2 paths object</a>
 * @param apiDefinitionPaths API definition paths
 * @return swagger v2 paths object
 * @throws ParseException
 */
private static JSONObject generatePathsObj(Map<String,JSONArray> apiDefinitionPaths) throws ParseException {
  JSONObject pathsObj=new JSONObject();
  String defaultType=""String_Node_Str"";
  JSONObject responseObject=new JSONObject();
  JSONObject status200=new JSONObject();
  status200.put(Constants.SWAGGER_DESCRIPTION,""String_Node_Str"");
  responseObject.put(Constants.SWAGGER_RESPONSE_200,status200);
  for (  Map.Entry<String,JSONArray> entry : apiDefinitionPaths.entrySet()) {
    String key=entry.getKey();
    JSONArray operations=entry.getValue();
    JSONObject pathItemObj=new JSONObject();
    for (    Object operation : operations) {
      JSONObject operationObject=(JSONObject)operation;
      if (operationObject.containsKey(""String_Node_Str"")) {
        String method=(String)operationObject.get(""String_Node_Str"");
        if (operationObject.containsKey(""String_Node_Str"")) {
          JSONArray swagger2ParamObjects=(JSONArray)operationObject.get(""String_Node_Str"");
          JSONObject swagger2OperationsObj=new JSONObject();
          JSONArray newParameters=new JSONArray();
          for (          Object swagger2ParamObj : swagger2ParamObjects) {
            JSONObject oldParam=(JSONObject)swagger2ParamObj;
            JSONObject paramObj=new JSONObject();
            paramObj.put(Constants.SWAGGER_NAME,oldParam.get(Constants.SWAGGER_NAME));
            paramObj.put(Constants.SWAGGER_PARAM_TYPE_IN,oldParam.get(""String_Node_Str""));
            if (Constants.SWAGGER_PARAM_TYPE_BODY.equals(oldParam.get(""String_Node_Str""))) {
              JSONObject refObject=new JSONObject();
              refObject.put(Constants.SWAGGER_REF,""String_Node_Str"");
              paramObj.put(Constants.SWAGGER_BODY_SCHEMA,refObject);
            }
 else {
              if (paramObj.containsKey(Constants.SWAGGER_REQUIRED_PARAM)) {
                paramObj.put(Constants.SWAGGER_PARAM_TYPE,oldParam.get(""String_Node_Str""));
              }
 else {
                paramObj.put(Constants.SWAGGER_PARAM_TYPE,defaultType);
              }
            }
            if (paramObj.containsKey(Constants.SWAGGER_REQUIRED_PARAM)) {
              paramObj.put(Constants.SWAGGER_REQUIRED_PARAM,oldParam.get(Constants.SWAGGER_REQUIRED_PARAM));
            }
 else {
              paramObj.put(Constants.SWAGGER_REQUIRED_PARAM,Boolean.FALSE);
            }
            if (paramObj.containsKey(Constants.SWAGGER_DESCRIPTION)) {
              paramObj.put(Constants.SWAGGER_DESCRIPTION,oldParam.get(Constants.SWAGGER_DESCRIPTION));
            }
 else {
              paramObj.put(Constants.SWAGGER_DESCRIPTION,""String_Node_Str"");
            }
            newParameters.add(paramObj);
          }
          swagger2OperationsObj.put(Constants.SWAGGER_OPERATION_ID,operationObject.get(""String_Node_Str""));
          swagger2OperationsObj.put(Constants.SWAGGER_PARAMETERS,newParameters);
          if (operationObject.containsKey(Constants.SWAGGER_AUTH_TYPE)) {
            swagger2OperationsObj.put(Constants.SWAGGER_X_AUTH_TYPE,operationObject.get(Constants.SWAGGER_AUTH_TYPE));
          }
          if (operationObject.containsKey(Constants.SWAGGER_THROTTLING_TIER)) {
            swagger2OperationsObj.put(Constants.SWAGGER_X_THROTTLING_TIER,operationObject.get(Constants.SWAGGER_THROTTLING_TIER));
          }
          if (operationObject.containsKey(""String_Node_Str"")) {
            swagger2OperationsObj.put(Constants.SWAGGER_DESCRIPTION,operationObject.get(""String_Node_Str""));
          }
          if (operationObject.containsKey(Constants.SWAGGER_SUMMARY)) {
            swagger2OperationsObj.put(Constants.SWAGGER_SUMMARY,operationObject.get(Constants.SWAGGER_SUMMARY));
          }
          pathItemObj.put(method.toLowerCase(),swagger2OperationsObj);
          if (operationObject.containsKey(""String_Node_Str"")) {
            responseObject=new JSONObject();
            JSONArray responseMessages=(JSONArray)operationObject.get(""String_Node_Str"");
            for (            Object responseMessage : responseMessages) {
              JSONObject errorObj=(JSONObject)responseMessage;
              responseObject.put(errorObj.get(""String_Node_Str""),errorObj.get(""String_Node_Str""));
            }
          }
          swagger2OperationsObj.put(Constants.SWAGGER_RESPONSES,responseObject);
        }
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
    pathsObj.put(key,pathItemObj);
  }
  return pathsObj;
}","/** 
 * Generate Swagger v2 paths object from swagger v1.2 document See <a href=""https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#paths-object"">Swagger v2 paths object</a>
 * @param apiDefinitionPaths API definition paths
 * @return swagger v2 paths object
 * @throws ParseException
 */
private static JSONObject generatePathsObj(Map<String,JSONArray> apiDefinitionPaths) throws ParseException {
  JSONObject pathsObj=new JSONObject();
  String defaultType=""String_Node_Str"";
  JSONObject responseObject=new JSONObject();
  JSONObject status200=new JSONObject();
  status200.put(Constants.SWAGGER_DESCRIPTION,""String_Node_Str"");
  responseObject.put(Constants.SWAGGER_RESPONSE_200,status200);
  for (  Map.Entry<String,JSONArray> entry : apiDefinitionPaths.entrySet()) {
    try {
      String key=entry.getKey();
      JSONArray operations=entry.getValue();
      JSONObject pathItemObj=new JSONObject();
      for (      Object operation : operations) {
        JSONObject operationObject=(JSONObject)operation;
        if (operationObject.containsKey(""String_Node_Str"")) {
          String method=(String)operationObject.get(""String_Node_Str"");
          if (operationObject.containsKey(""String_Node_Str"")) {
            JSONObject swagger2OperationsObj=null;
            JSONArray newParameters=null;
            Object swagger2Params=operationObject.get(""String_Node_Str"");
            if (swagger2Params == null) {
              continue;
            }
            if (swagger2Params instanceof JSONArray) {
              JSONArray swagger2ParamObjects=(JSONArray)swagger2Params;
              swagger2OperationsObj=new JSONObject();
              newParameters=new JSONArray();
              for (              Object swagger2ParamObj : swagger2ParamObjects) {
                JSONObject oldParam=(JSONObject)swagger2ParamObj;
                JSONObject paramObj=new JSONObject();
                paramObj.put(Constants.SWAGGER_NAME,oldParam.get(Constants.SWAGGER_NAME));
                paramObj.put(Constants.SWAGGER_PARAM_TYPE_IN,oldParam.get(""String_Node_Str""));
                if (Constants.SWAGGER_PARAM_TYPE_BODY.equals(oldParam.get(""String_Node_Str""))) {
                  JSONObject refObject=new JSONObject();
                  refObject.put(Constants.SWAGGER_REF,""String_Node_Str"");
                  paramObj.put(Constants.SWAGGER_BODY_SCHEMA,refObject);
                }
 else {
                  if (paramObj.containsKey(Constants.SWAGGER_REQUIRED_PARAM)) {
                    paramObj.put(Constants.SWAGGER_PARAM_TYPE,oldParam.get(""String_Node_Str""));
                  }
 else {
                    paramObj.put(Constants.SWAGGER_PARAM_TYPE,defaultType);
                  }
                }
                if (paramObj.containsKey(Constants.SWAGGER_REQUIRED_PARAM)) {
                  paramObj.put(Constants.SWAGGER_REQUIRED_PARAM,oldParam.get(Constants.SWAGGER_REQUIRED_PARAM));
                }
 else {
                  paramObj.put(Constants.SWAGGER_REQUIRED_PARAM,Boolean.FALSE);
                }
                if (paramObj.containsKey(Constants.SWAGGER_DESCRIPTION)) {
                  paramObj.put(Constants.SWAGGER_DESCRIPTION,oldParam.get(Constants.SWAGGER_DESCRIPTION));
                }
 else {
                  paramObj.put(Constants.SWAGGER_DESCRIPTION,""String_Node_Str"");
                }
                newParameters.add(paramObj);
              }
            }
            swagger2OperationsObj.put(Constants.SWAGGER_OPERATION_ID,operationObject.get(""String_Node_Str""));
            swagger2OperationsObj.put(Constants.SWAGGER_PARAMETERS,newParameters);
            if (operationObject.containsKey(Constants.SWAGGER_AUTH_TYPE)) {
              swagger2OperationsObj.put(Constants.SWAGGER_X_AUTH_TYPE,operationObject.get(Constants.SWAGGER_AUTH_TYPE));
            }
            if (operationObject.containsKey(Constants.SWAGGER_THROTTLING_TIER)) {
              swagger2OperationsObj.put(Constants.SWAGGER_X_THROTTLING_TIER,operationObject.get(Constants.SWAGGER_THROTTLING_TIER));
            }
            if (operationObject.containsKey(""String_Node_Str"")) {
              swagger2OperationsObj.put(Constants.SWAGGER_DESCRIPTION,operationObject.get(""String_Node_Str""));
            }
            if (operationObject.containsKey(Constants.SWAGGER_SUMMARY)) {
              swagger2OperationsObj.put(Constants.SWAGGER_SUMMARY,operationObject.get(Constants.SWAGGER_SUMMARY));
            }
            pathItemObj.put(method.toLowerCase(),swagger2OperationsObj);
            if (operationObject.containsKey(""String_Node_Str"")) {
              responseObject=new JSONObject();
              JSONArray responseMessages=(JSONArray)operationObject.get(""String_Node_Str"");
              for (              Object responseMessage : responseMessages) {
                JSONObject errorObj=(JSONObject)responseMessage;
                responseObject.put(errorObj.get(""String_Node_Str""),errorObj.get(""String_Node_Str""));
              }
            }
            swagger2OperationsObj.put(Constants.SWAGGER_RESPONSES,responseObject);
          }
        }
 else {
          log.error(""String_Node_Str"");
        }
      }
      pathsObj.put(key,pathItemObj);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue().toString(),e);
    }
  }
  return pathsObj;
}",0.9173301877518922
114802,"/** 
 * This method is used to migrate rxt This adds three new attributes to the api rxt
 * @throws APIMigrationException
 */
void rxtMigration() throws APIMigrationException {
  log.info(""String_Node_Str"" + Constants.VERSION_1_9 + ""String_Node_Str"");
  boolean isTenantFlowStarted=false;
  for (  Tenant tenant : getTenantsArray()) {
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    try {
      PrivilegedCarbonContext.startTenantFlow();
      isTenantFlowStarted=true;
      PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenant.getDomain(),true);
      PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(tenant.getId(),true);
      String adminName=ServiceHolder.getRealmService().getTenantUserRealm(tenant.getId()).getRealmConfiguration().getAdminUserName();
      log.debug(""String_Node_Str"" + adminName);
      ServiceHolder.getTenantRegLoader().loadTenantRegistry(tenant.getId());
      Registry registry=ServiceHolder.getRegistryService().getGovernanceUserRegistry(adminName,tenant.getId());
      GenericArtifactManager artifactManager=APIUtil.getArtifactManager(registry,APIConstants.API_KEY);
      if (artifactManager != null) {
        GovernanceUtils.loadGovernanceArtifacts((UserRegistry)registry);
        GenericArtifact[] artifacts=artifactManager.getAllGenericArtifacts();
        for (        GenericArtifact artifact : artifacts) {
          API api=APIUtil.getAPI(artifact,registry);
          if (api == null) {
            log.error(""String_Node_Str"" + artifact.getAttribute(""String_Node_Str"") + '-'+ artifact.getAttribute(""String_Node_Str"")+ '-'+ artifact.getAttribute(""String_Node_Str"")+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ""String_Node_Str"");
            continue;
          }
          APIIdentifier apiIdentifier=api.getId();
          String apiVersion=apiIdentifier.getVersion();
          if (!(api.getContext().endsWith(RegistryConstants.PATH_SEPARATOR + apiVersion))) {
            artifact.setAttribute(""String_Node_Str"",api.getContext() + RegistryConstants.PATH_SEPARATOR + apiVersion);
          }
          artifact.setAttribute(""String_Node_Str"",api.getContext() + RegistryConstants.PATH_SEPARATOR + ""String_Node_Str"");
          artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
          artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
          artifactManager.updateGenericArtifact(artifact);
        }
      }
 else {
        log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      }
    }
 catch (    APIManagementException e) {
      ResourceUtil.handleException(""String_Node_Str"",e);
    }
catch (    RegistryException e) {
      ResourceUtil.handleException(""String_Node_Str"",e);
    }
catch (    UserStoreException e) {
      ResourceUtil.handleException(""String_Node_Str"",e);
    }
 finally {
      if (isTenantFlowStarted) {
        PrivilegedCarbonContext.endTenantFlow();
      }
    }
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}","/** 
 * This method is used to migrate rxt This adds three new attributes to the api rxt
 * @throws APIMigrationException
 */
void rxtMigration() throws APIMigrationException {
  log.info(""String_Node_Str"" + Constants.VERSION_1_9 + ""String_Node_Str"");
  boolean isTenantFlowStarted=false;
  for (  Tenant tenant : getTenantsArray()) {
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    try {
      PrivilegedCarbonContext.startTenantFlow();
      isTenantFlowStarted=true;
      PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenant.getDomain(),true);
      PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantId(tenant.getId(),true);
      String adminName=ServiceHolder.getRealmService().getTenantUserRealm(tenant.getId()).getRealmConfiguration().getAdminUserName();
      log.debug(""String_Node_Str"" + adminName);
      ServiceHolder.getTenantRegLoader().loadTenantRegistry(tenant.getId());
      Registry registry=ServiceHolder.getRegistryService().getGovernanceUserRegistry(adminName,tenant.getId());
      GenericArtifactManager artifactManager=APIUtil.getArtifactManager(registry,APIConstants.API_KEY);
      if (artifactManager != null) {
        GovernanceUtils.loadGovernanceArtifacts((UserRegistry)registry);
        GenericArtifact[] artifacts=artifactManager.getAllGenericArtifacts();
        for (        GenericArtifact artifact : artifacts) {
          try {
            API api=APIUtil.getAPI(artifact,registry);
            if (api == null) {
              log.error(""String_Node_Str"" + artifact.getAttribute(""String_Node_Str"") + '-'+ artifact.getAttribute(""String_Node_Str"")+ '-'+ artifact.getAttribute(""String_Node_Str"")+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ""String_Node_Str"");
              continue;
            }
            APIIdentifier apiIdentifier=api.getId();
            String apiVersion=apiIdentifier.getVersion();
            if (!(api.getContext().endsWith(RegistryConstants.PATH_SEPARATOR + apiVersion))) {
              artifact.setAttribute(""String_Node_Str"",api.getContext() + RegistryConstants.PATH_SEPARATOR + apiVersion);
            }
            artifact.setAttribute(""String_Node_Str"",api.getContext() + RegistryConstants.PATH_SEPARATOR + ""String_Node_Str"");
            artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
            artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
            artifactManager.updateGenericArtifact(artifact);
          }
 catch (          Exception e) {
            log.error(""String_Node_Str"" + artifact.getAttribute(""String_Node_Str"") + '-'+ artifact.getAttribute(""String_Node_Str"")+ '-'+ artifact.getAttribute(""String_Node_Str""),e);
          }
        }
      }
 else {
        log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      }
    }
 catch (    APIManagementException e) {
      ResourceUtil.handleException(""String_Node_Str"",e);
    }
catch (    RegistryException e) {
      ResourceUtil.handleException(""String_Node_Str"",e);
    }
catch (    UserStoreException e) {
      ResourceUtil.handleException(""String_Node_Str"",e);
    }
 finally {
      if (isTenantFlowStarted) {
        PrivilegedCarbonContext.endTenantFlow();
      }
    }
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}",0.9564280215550424
114803,"@BeforeTest(alwaysRun=true) public void startDeployingWebAPPs() throws Exception {
  super.init();
  String testArtifactPath=TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  String testArtifactWarFilePath=testArtifactPath + ""String_Node_Str"" + File.separator;
  String APIStatusMonitorWebAppSourcePath=testArtifactPath + ""String_Node_Str"" + File.separator+ APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME+ ""String_Node_Str"";
  String APIImportExportWebAppSourcePath=testArtifactPath + ""String_Node_Str"" + File.separator+ APIMIntegrationConstants.AM_IMPORT_EXPORT_WEB_APP_NAME+ ""String_Node_Str"";
  String gatewayMgtSessionId=createSession(gatewayContextMgt);
  String publisherSessionId=createSession(publisherContext);
  WebAppAdminClient webAppAdminClient=new WebAppAdminClient(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId);
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.JAXRS_BASIC_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.PRODEP1_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.PRODEP2_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.PRODEP3_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.SANDBOXEP1_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.SANDBOXEP2_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.SANDBOXEP3_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(APIStatusMonitorWebAppSourcePath);
  WebAppAdminClient webAppAdminClientForPublisher=new WebAppAdminClient(getPublisherURLHttps(),publisherSessionId);
  webAppAdminClientForPublisher.uploadWarFile(APIImportExportWebAppSourcePath);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.JAXRS_BASIC_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.PRODEP1_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.PRODEP2_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.PRODEP3_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.SANDBOXEP1_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.SANDBOXEP2_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.SANDBOXEP3_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(publisherContext.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.AM_IMPORT_EXPORT_WEB_APP_NAME);
  WebAppDeploymentUtil.isMonitoringAppDeployed(gatewayContextWrk.getContextUrls().getWebAppURL());
}","@BeforeTest(alwaysRun=true) public void startDeployingWebAPPs() throws Exception {
  super.init();
  String testArtifactPath=TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  String testArtifactWarFilePath=testArtifactPath + ""String_Node_Str"" + File.separator;
  String APIStatusMonitorWebAppSourcePath=testArtifactPath + ""String_Node_Str"" + File.separator+ APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME+ ""String_Node_Str"";
  String APIImportExportWebAppSourcePath=testArtifactPath + ""String_Node_Str"" + File.separator+ APIMIntegrationConstants.AM_IMPORT_EXPORT_WEB_APP_NAME+ ""String_Node_Str"";
  String gatewayMgtSessionId=createSession(gatewayContextMgt);
  String publisherSessionId=createSession(publisherContext);
  WebAppAdminClient webAppAdminClient=new WebAppAdminClient(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId);
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.JAXRS_BASIC_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.PRODEP1_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.PRODEP2_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.PRODEP3_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.SANDBOXEP1_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.SANDBOXEP2_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(testArtifactWarFilePath + APIMIntegrationConstants.SANDBOXEP3_WEB_APP_NAME + ""String_Node_Str"");
  webAppAdminClient.uploadWarFile(APIStatusMonitorWebAppSourcePath);
  WebAppAdminClient webAppAdminClientForPublisher=new WebAppAdminClient(publisherContext.getContextUrls().getBackEndUrl(),publisherSessionId);
  webAppAdminClientForPublisher.uploadWarFile(APIImportExportWebAppSourcePath);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.JAXRS_BASIC_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.PRODEP1_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.PRODEP2_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.PRODEP3_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.SANDBOXEP1_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.SANDBOXEP2_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.SANDBOXEP3_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextMgt.getContextUrls().getBackEndUrl(),gatewayMgtSessionId,APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME);
  WebAppDeploymentUtil.isWebApplicationDeployed(publisherContext.getContextUrls().getBackEndUrl(),publisherSessionId,APIMIntegrationConstants.AM_IMPORT_EXPORT_WEB_APP_NAME);
  WebAppDeploymentUtil.isMonitoringAppDeployed(gatewayContextWrk.getContextUrls().getWebAppURL());
}",0.9909670563230606
114804,"/** 
 * Upload a file to the given URL
 * @param importUrl URL to be file upload
 * @param fileName  Name of the file to be upload
 * @throws IOException throws if connection issues occurred
 */
private void importAPI(String importUrl,File fileName,String user,char[] pass) throws IOException {
  URL url=new URL(importUrl);
  HttpURLConnection connection=(HttpURLConnection)url.openConnection();
  connection.setDoOutput(true);
  connection.setRequestMethod(""String_Node_Str"");
  FileBody fileBody=new FileBody(fileName);
  MultipartEntity multipartEntity=new MultipartEntity(HttpMultipartMode.STRICT);
  multipartEntity.addPart(""String_Node_Str"",fileBody);
  connection.setRequestProperty(""String_Node_Str"",multipartEntity.getContentType().getValue());
  connection.setRequestProperty(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + encodeCredentials(user,pass));
  OutputStream out=connection.getOutputStream();
  try {
    multipartEntity.writeTo(out);
  }
  finally {
    out.close();
  }
  int status=connection.getResponseCode();
  BufferedReader read=new BufferedReader(new InputStreamReader(connection.getInputStream()));
  String temp;
  StringBuilder response=new StringBuilder();
  while ((temp=read.readLine()) != null) {
    response.append(temp);
  }
  Assert.assertEquals(status,HttpStatus.SC_CREATED,""String_Node_Str"" + response);
}","/** 
 * Upload a file to the given URL
 * @param importUrl URL to be file upload
 * @param fileName  Name of the file to be upload
 * @throws IOException throws if connection issues occurred
 */
private void importAPI(String importUrl,File fileName,String user,char[] pass) throws IOException {
  URL url=new URL(importUrl);
  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();
  connection.setHostnameVerifier(new HostnameVerifier(){
    @Override public boolean verify(    String s,    SSLSession sslSession){
      return true;
    }
  }
);
  connection.setDoOutput(true);
  connection.setRequestMethod(""String_Node_Str"");
  FileBody fileBody=new FileBody(fileName);
  MultipartEntity multipartEntity=new MultipartEntity(HttpMultipartMode.STRICT);
  multipartEntity.addPart(""String_Node_Str"",fileBody);
  connection.setRequestProperty(""String_Node_Str"",multipartEntity.getContentType().getValue());
  connection.setRequestProperty(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + encodeCredentials(user,pass));
  OutputStream out=connection.getOutputStream();
  try {
    multipartEntity.writeTo(out);
  }
  finally {
    out.close();
  }
  int status=connection.getResponseCode();
  BufferedReader read=new BufferedReader(new InputStreamReader(connection.getInputStream()));
  String temp;
  StringBuilder response=new StringBuilder();
  while ((temp=read.readLine()) != null) {
    response.append(temp);
  }
  Assert.assertEquals(status,HttpStatus.SC_CREATED,""String_Node_Str"" + response);
}",0.9421088904203996
114805,"/** 
 * Save file from a given URL
 * @param exportRequest URL of the file location
 * @param fileName      expected File to be saved
 * @throws URISyntaxException throws if URL is malformed
 * @throws IOException        throws if connection issues occurred
 */
private void exportAPI(URL exportRequest,File fileName) throws URISyntaxException, IOException {
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + encodeCredentials(user.getUserName(),user.getPassword().toCharArray()));
  HttpResponse response=HTTPSClientUtils.doGet(exportRequest.toString(),requestHeaders);
  String data=response.getData();
  if (data != null) {
    FileOutputStream outStream=new FileOutputStream(fileName);
    try {
      outStream.write(data.getBytes());
    }
  finally {
      outStream.close();
    }
  }
  Assert.assertEquals(response.getResponseCode(),HttpStatus.SC_OK,""String_Node_Str"");
  Assert.assertTrue(fileName.exists(),""String_Node_Str"");
}","/** 
 * Save file from a given URL
 * @param exportRequest URL of the file location
 * @param fileName      expected File to be saved
 * @throws URISyntaxException throws if URL is malformed
 * @throws IOException        throws if connection issues occurred
 */
private void exportAPI(URL exportRequest,File fileName) throws URISyntaxException, IOException {
  CloseableHttpClient client=HTTPSClientUtils.getHttpsClient();
  HttpGet get=new HttpGet(exportRequest.toURI());
  get.addHeader(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + encodeCredentials(user.getUserName(),user.getPassword().toCharArray()));
  CloseableHttpResponse response=client.execute(get);
  HttpEntity entity=response.getEntity();
  if (entity != null) {
    FileOutputStream outStream=new FileOutputStream(fileName);
    try {
      entity.writeTo(outStream);
    }
  finally {
      outStream.close();
    }
  }
  Assert.assertEquals(response.getStatusLine().getStatusCode(),HttpStatus.SC_OK,""String_Node_Str"");
  Assert.assertTrue(fileName.exists(),""String_Node_Str"");
}",0.8162665360117589
114806,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokeGETResourceWithAuthTypeApplicationUser() throws Exception {
  APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(apiEndPointUrl));
  apiCreationRequestBean.setTags(API_TAGS);
  apiCreationRequestBean.setDescription(API_DESCRIPTION);
  apiCreationRequestBean.setVisibility(""String_Node_Str"");
  List<APIResourceBean> apiResourceBeansList=new ArrayList<APIResourceBean>();
  APIResourceBean apiResourceBeanGET=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.RESOURCE_AUTH_TYPE_APPLICATION_USER,APIMIntegrationConstants.RESOURCE_TIER.UNLIMITED,""String_Node_Str"");
  apiResourceBeansList.add(apiResourceBeanGET);
  apiCreationRequestBean.setResourceBeanList(apiResourceBeansList);
  HttpResponse updateAPIHTTPResponse=apiPublisherClientUser1.updateAPI(apiCreationRequestBean);
  assertEquals(updateAPIHTTPResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getValueFromJSON(updateAPIHTTPResponse,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  String requestBody=""String_Node_Str"";
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStoreClientUser1.generateUserAccessKey(applicationKeyBean.getConsumerKey(),applicationKeyBean.getConsumerSecret(),requestBody,tokenEndpointURL).getData());
  requestHeadersGet.put(""String_Node_Str"",""String_Node_Str"" + accessTokenGenerationResponse.getString(""String_Node_Str""));
  HttpResponse httpResponseGet=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_GET_ENDPOINT_METHOD,requestHeadersGet);
  assertEquals(httpResponseGet.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + ""String_Node_Str"");
  assertTrue(httpResponseGet.getData().contains(RESPONSE_GET),""String_Node_Str"" + ""String_Node_Str"" + RESPONSE_GET + ""String_Node_Str""+ httpResponseGet.getData()+ ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokeGETResourceWithAuthTypeApplicationUser() throws Exception {
  APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(apiEndPointUrl));
  apiCreationRequestBean.setTags(API_TAGS);
  apiCreationRequestBean.setDescription(API_DESCRIPTION);
  apiCreationRequestBean.setVisibility(""String_Node_Str"");
  List<APIResourceBean> apiResourceBeansList=new ArrayList<APIResourceBean>();
  APIResourceBean apiResourceBeanGET=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.RESOURCE_AUTH_TYPE_APPLICATION_USER,APIMIntegrationConstants.RESOURCE_TIER.UNLIMITED,""String_Node_Str"");
  apiResourceBeansList.add(apiResourceBeanGET);
  apiCreationRequestBean.setResourceBeanList(apiResourceBeansList);
  HttpResponse updateAPIHTTPResponse=apiPublisherClientUser1.updateAPI(apiCreationRequestBean);
  assertEquals(updateAPIHTTPResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getValueFromJSON(updateAPIHTTPResponse,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  String requestBody=""String_Node_Str"";
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStoreClientUser1.generateUserAccessKey(applicationKeyBean.getConsumerKey(),applicationKeyBean.getConsumerSecret(),requestBody,tokenEndpointURL).getData());
  requestHeadersGet.put(""String_Node_Str"",""String_Node_Str"" + accessTokenGenerationResponse.getString(""String_Node_Str""));
  HttpResponse httpResponseGet=HTTPSClientUtils.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_GET_ENDPOINT_METHOD,requestHeadersGet);
  assertEquals(httpResponseGet.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + ""String_Node_Str"");
  assertTrue(httpResponseGet.getData().contains(RESPONSE_GET),""String_Node_Str"" + ""String_Node_Str"" + RESPONSE_GET + ""String_Node_Str""+ httpResponseGet.getData()+ ""String_Node_Str"");
}",0.9955967555040556
114807,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokeResourceWithAuthTypeApplication() throws Exception {
  APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(apiEndPointUrl));
  apiCreationRequestBean.setTags(API_TAGS);
  apiCreationRequestBean.setDescription(API_DESCRIPTION);
  apiCreationRequestBean.setVisibility(""String_Node_Str"");
  List<APIResourceBean> apiResourceBeansList=new ArrayList<APIResourceBean>();
  APIResourceBean apiResourceBeanGET=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.RESOURCE_AUTH_TYPE_APPLICATION,APIMIntegrationConstants.RESOURCE_TIER.UNLIMITED,""String_Node_Str"");
  apiResourceBeansList.add(apiResourceBeanGET);
  apiCreationRequestBean.setResourceBeanList(apiResourceBeansList);
  HttpResponse updateAPIHTTPResponse=apiPublisherClientUser1.updateAPI(apiCreationRequestBean);
  assertEquals(updateAPIHTTPResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getValueFromJSON(updateAPIHTTPResponse,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  HttpResponse httpResponseGet=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_GET_ENDPOINT_METHOD,requestHeadersGet);
  assertEquals(httpResponseGet.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + ""String_Node_Str"");
  assertTrue(httpResponseGet.getData().contains(RESPONSE_GET),""String_Node_Str"" + ""String_Node_Str"" + RESPONSE_GET + ""String_Node_Str""+ httpResponseGet.getData()+ ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokeResourceWithAuthTypeApplication() throws Exception {
  APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(apiEndPointUrl));
  apiCreationRequestBean.setTags(API_TAGS);
  apiCreationRequestBean.setDescription(API_DESCRIPTION);
  apiCreationRequestBean.setVisibility(""String_Node_Str"");
  List<APIResourceBean> apiResourceBeansList=new ArrayList<APIResourceBean>();
  APIResourceBean apiResourceBeanGET=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.RESOURCE_AUTH_TYPE_APPLICATION,APIMIntegrationConstants.RESOURCE_TIER.UNLIMITED,""String_Node_Str"");
  apiResourceBeansList.add(apiResourceBeanGET);
  apiCreationRequestBean.setResourceBeanList(apiResourceBeansList);
  HttpResponse updateAPIHTTPResponse=apiPublisherClientUser1.updateAPI(apiCreationRequestBean);
  assertEquals(updateAPIHTTPResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getValueFromJSON(updateAPIHTTPResponse,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  HttpResponse httpResponseGet=HTTPSClientUtils.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_GET_ENDPOINT_METHOD,requestHeadersGet);
  assertEquals(httpResponseGet.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + ""String_Node_Str"");
  assertTrue(httpResponseGet.getData().contains(RESPONSE_GET),""String_Node_Str"" + ""String_Node_Str"" + RESPONSE_GET + ""String_Node_Str""+ httpResponseGet.getData()+ ""String_Node_Str"");
}",0.9943368107302534
114808,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokeGETResourceWithAuthTypeNone() throws Exception {
  APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(apiEndPointUrl));
  apiCreationRequestBean.setTags(API_TAGS);
  apiCreationRequestBean.setDescription(API_DESCRIPTION);
  apiCreationRequestBean.setVisibility(""String_Node_Str"");
  List<APIResourceBean> apiResourceBeansList=new ArrayList<APIResourceBean>();
  APIResourceBean apiResourceBeanGET=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.RESOURCE_AUTH_TYPE_NONE,APIMIntegrationConstants.RESOURCE_TIER.UNLIMITED,""String_Node_Str"");
  apiResourceBeansList.add(apiResourceBeanGET);
  apiCreationRequestBean.setResourceBeanList(apiResourceBeansList);
  HttpResponse updateAPIHTTPResponse=apiPublisherClientUser1.updateAPI(apiCreationRequestBean);
  assertEquals(updateAPIHTTPResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getValueFromJSON(updateAPIHTTPResponse,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  HttpResponse httpResponseGet=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_GET_ENDPOINT_METHOD,requestHeadersGet);
  assertEquals(httpResponseGet.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + ""String_Node_Str"");
  assertTrue(httpResponseGet.getData().contains(RESPONSE_GET),""String_Node_Str"" + ""String_Node_Str"" + RESPONSE_GET + ""String_Node_Str""+ httpResponseGet.getData()+ ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokeGETResourceWithAuthTypeNone() throws Exception {
  APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(apiEndPointUrl));
  apiCreationRequestBean.setTags(API_TAGS);
  apiCreationRequestBean.setDescription(API_DESCRIPTION);
  apiCreationRequestBean.setVisibility(""String_Node_Str"");
  List<APIResourceBean> apiResourceBeansList=new ArrayList<APIResourceBean>();
  APIResourceBean apiResourceBeanGET=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.RESOURCE_AUTH_TYPE_NONE,APIMIntegrationConstants.RESOURCE_TIER.UNLIMITED,""String_Node_Str"");
  apiResourceBeansList.add(apiResourceBeanGET);
  apiCreationRequestBean.setResourceBeanList(apiResourceBeansList);
  HttpResponse updateAPIHTTPResponse=apiPublisherClientUser1.updateAPI(apiCreationRequestBean);
  assertEquals(updateAPIHTTPResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getValueFromJSON(updateAPIHTTPResponse,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
  HttpResponse httpResponseGet=HTTPSClientUtils.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_GET_ENDPOINT_METHOD,requestHeadersGet);
  assertEquals(httpResponseGet.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + ""String_Node_Str"");
  assertTrue(httpResponseGet.getData().contains(RESPONSE_GET),""String_Node_Str"" + ""String_Node_Str"" + RESPONSE_GET + ""String_Node_Str""+ httpResponseGet.getData()+ ""String_Node_Str"");
}",0.9942994299429944
114809,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testInvokeResourceWithAuthTypeApplicationAndApplicationUser() throws Exception {
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(apiEndPointUrl));
  apiCreationRequestBean.setTags(API_TAGS);
  apiCreationRequestBean.setDescription(API_DESCRIPTION);
  apiCreationRequestBean.setVisibility(""String_Node_Str"");
  List<APIResourceBean> apiResourceBeansList=new ArrayList<APIResourceBean>();
  APIResourceBean apiResourceBeanGET=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.RESOURCE_AUTH_TYPE_APPLICATION_AND_APPLICATION_USER,APIMIntegrationConstants.RESOURCE_TIER.UNLIMITED,""String_Node_Str"");
  apiResourceBeansList.add(apiResourceBeanGET);
  apiCreationRequestBean.setResourceBeanList(apiResourceBeansList);
  apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  applicationKeyBean=generateApplicationKeys(apiStoreClientUser1,APPLICATION_NAME);
  String accessToken=applicationKeyBean.getAccessToken();
  requestHeadersGet.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse httpResponseGet=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_GET_ENDPOINT_METHOD,requestHeadersGet);
  assertEquals(httpResponseGet.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + ""String_Node_Str"");
  assertTrue(httpResponseGet.getData().contains(RESPONSE_GET),""String_Node_Str"" + ""String_Node_Str"" + RESPONSE_GET + ""String_Node_Str""+ ""String_Node_Str""+ httpResponseGet.getData()+ ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testInvokeResourceWithAuthTypeApplicationAndApplicationUser() throws Exception {
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(apiEndPointUrl));
  apiCreationRequestBean.setTags(API_TAGS);
  apiCreationRequestBean.setDescription(API_DESCRIPTION);
  apiCreationRequestBean.setVisibility(""String_Node_Str"");
  List<APIResourceBean> apiResourceBeansList=new ArrayList<APIResourceBean>();
  APIResourceBean apiResourceBeanGET=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.RESOURCE_AUTH_TYPE_APPLICATION_AND_APPLICATION_USER,APIMIntegrationConstants.RESOURCE_TIER.UNLIMITED,""String_Node_Str"");
  apiResourceBeansList.add(apiResourceBeanGET);
  apiCreationRequestBean.setResourceBeanList(apiResourceBeansList);
  apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  applicationKeyBean=generateApplicationKeys(apiStoreClientUser1,APPLICATION_NAME);
  String accessToken=applicationKeyBean.getAccessToken();
  requestHeadersGet.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse httpResponseGet=HTTPSClientUtils.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_GET_ENDPOINT_METHOD,requestHeadersGet);
  assertEquals(httpResponseGet.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + ""String_Node_Str"");
  assertTrue(httpResponseGet.getData().contains(RESPONSE_GET),""String_Node_Str"" + ""String_Node_Str"" + RESPONSE_GET + ""String_Node_Str""+ ""String_Node_Str""+ httpResponseGet.getData()+ ""String_Node_Str"");
}",0.9954271961492178
114810,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testSubscriptionAfterApplicationNameUpdate() throws Exception {
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",apiStore.getSession());
  HttpResponse response=HttpRequestUtil.doGet(storeURLHttp + ""String_Node_Str"",headers);
  Assert.assertEquals(response.getResponseCode(),HttpStatus.SC_OK,""String_Node_Str"");
  response=apiStore.getAllSubscriptionsOfApplication(APP_NAME_TO_UPDATE);
  verifyResponse(response);
  Assert.assertTrue(response.getData().contains(API_NAME),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testSubscriptionAfterApplicationNameUpdate() throws Exception {
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",apiStore.getSession());
  HttpResponse response=HTTPSClientUtils.doGet(storeURLHttp + ""String_Node_Str"",headers);
  Assert.assertEquals(response.getResponseCode(),HttpStatus.SC_OK,""String_Node_Str"");
  response=apiStore.getAllSubscriptionsOfApplication(APP_NAME_TO_UPDATE);
  verifyResponse(response);
  Assert.assertTrue(response.getData().contains(API_NAME),""String_Node_Str"");
}",0.9853054911059552
114811,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testNewAPIInvoke() throws Exception {
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiStore.login(allowedUser,String.valueOf(ALLOWED_USER_PASS));
  HttpResponse serviceResponse=apiStore.addApplication(APP_NAME,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  String provider=user.getUserName();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(NEW_API_NAME,provider);
  subscriptionRequest.setApplicationName(APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APP_NAME);
  generateAppKeyRequest.setTokenScope(SCOPE_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(NEW_API_CONTEXT,API_VERSION);
  serviceResponse=HttpRequestUtil.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testNewAPIInvoke() throws Exception {
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiStore.login(allowedUser,String.valueOf(ALLOWED_USER_PASS));
  HttpResponse serviceResponse=apiStore.addApplication(APP_NAME,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  String provider=user.getUserName();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(NEW_API_NAME,provider);
  subscriptionRequest.setApplicationName(APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APP_NAME);
  generateAppKeyRequest.setTokenScope(SCOPE_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(NEW_API_CONTEXT,API_VERSION);
  serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
}",0.9941448382126348
114812,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testNewAPIInvokeAfterImport() throws Exception {
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(NEW_API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  HttpResponse serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiStore.login(deniedUser,String.valueOf(DENIED_USER_PASS));
  serviceResponse=apiStore.addApplication(NEW_APP_NAME,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  String provider=user.getUserName();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(NEW_API_NAME,provider);
  subscriptionRequest.setApplicationName(NEW_APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(NEW_APP_NAME);
  generateAppKeyRequest.setTokenScope(SCOPE_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.clear();
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(NEW_API_CONTEXT,API_VERSION);
  serviceResponse=HttpRequestUtil.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(HttpStatus.SC_FORBIDDEN,serviceResponse.getResponseCode(),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testNewAPIInvokeAfterImport() throws Exception {
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(NEW_API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  HttpResponse serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiStore.login(deniedUser,String.valueOf(DENIED_USER_PASS));
  serviceResponse=apiStore.addApplication(NEW_APP_NAME,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  String provider=user.getUserName();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(NEW_API_NAME,provider);
  subscriptionRequest.setApplicationName(NEW_APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(NEW_APP_NAME);
  generateAppKeyRequest.setTokenScope(SCOPE_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.clear();
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(NEW_API_CONTEXT,API_VERSION);
  serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(HttpStatus.SC_FORBIDDEN,serviceResponse.getResponseCode(),""String_Node_Str"");
}",0.9950404594100756
114813,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testApiInvocationAndEventTest() throws Exception {
  thriftTestServer.clearTables();
  HttpResponse serviceResponse=apiStore.addApplication(APP_NAME,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.UNLIMITED);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APP_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  consumerKey=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(API_CONTEXT,API_VERSION);
  serviceResponse=HttpRequestUtil.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  testRequestEvent();
  testResponseEvent();
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testApiInvocationAndEventTest() throws Exception {
  thriftTestServer.clearTables();
  HttpResponse serviceResponse=apiStore.addApplication(APP_NAME,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.UNLIMITED);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APP_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  consumerKey=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(API_CONTEXT,API_VERSION);
  serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  testRequestEvent();
  testResponseEvent();
}",0.9942161339421614
114814,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testApiInvocationAndStatLoadingTest() throws Exception {
  HttpResponse serviceResponse=apiStore.addApplication(APP_NAME,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.UNLIMITED);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APP_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(API_CONTEXT,API_VERSION);
  serviceResponse=HttpRequestUtil.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",apiStore.getSession());
  executeScript();
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  Calendar calender=Calendar.getInstance();
  calender.set(Calendar.DATE,calender.get(Calendar.DATE) - 1);
  String fromDate=dateFormat.format(calender.getTime());
  calender.set(Calendar.DATE,calender.get(Calendar.DATE) + 2);
  String toDate=dateFormat.format(calender.getTime());
  List<NameValuePair> urlParameters=new ArrayList<NameValuePair>();
  urlParameters.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  urlParameters.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  urlParameters.add(new BasicNameValuePair(""String_Node_Str"",fromDate));
  urlParameters.add(new BasicNameValuePair(""String_Node_Str"",toDate));
  String url=backEndServerUrl.getWebAppURLHttp() + API_STORE_STAT_URL;
  HttpResponse res=HTTPSClientUtils.doPost(url,headers,urlParameters);
  verifyResponse(res);
  Assert.assertTrue(res.getData().contains(API_NAME),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testApiInvocationAndStatLoadingTest() throws Exception {
  HttpResponse serviceResponse=apiStore.addApplication(APP_NAME,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.UNLIMITED);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APP_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  String invokeURL=getAPIInvocationURLHttp(API_CONTEXT,API_VERSION);
  serviceResponse=HTTPSClientUtils.doGet(invokeURL + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(HttpStatus.SC_OK,serviceResponse.getResponseCode(),""String_Node_Str"");
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",apiStore.getSession());
  executeScript();
  SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  Calendar calender=Calendar.getInstance();
  calender.set(Calendar.DATE,calender.get(Calendar.DATE) - 1);
  String fromDate=dateFormat.format(calender.getTime());
  calender.set(Calendar.DATE,calender.get(Calendar.DATE) + 2);
  String toDate=dateFormat.format(calender.getTime());
  List<NameValuePair> urlParameters=new ArrayList<NameValuePair>();
  urlParameters.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  urlParameters.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  urlParameters.add(new BasicNameValuePair(""String_Node_Str"",fromDate));
  urlParameters.add(new BasicNameValuePair(""String_Node_Str"",toDate));
  String url=backEndServerUrl.getWebAppURLHttp() + API_STORE_STAT_URL;
  HttpResponse res=HTTPSClientUtils.doPost(url,headers,urlParameters);
  verifyResponse(res);
  Assert.assertTrue(res.getData().contains(API_NAME),""String_Node_Str"");
}",0.9962693893579424
114815,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testCallUserInfoApiWithOpenIdAccessToken() throws Exception {
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  HttpResponse userInfoResponse=HttpRequestUtil.doGet(gatewayUrlsMgt.getWebAppURLNhttp() + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(userInfoResponse.getResponseCode(),200,""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testCallUserInfoApiWithOpenIdAccessToken() throws Exception {
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  HttpResponse userInfoResponse=HTTPSClientUtils.doGet(gatewayUrlsMgt.getWebAppURLNhttp() + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(userInfoResponse.getResponseCode(),200,""String_Node_Str"");
}",0.9818875119161106
114816,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testSetScopeToResourceTestCase() throws Exception {
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  userManagementClient1.addRole(SUBSCRIBER_ROLE,new String[]{},new String[]{""String_Node_Str"",""String_Node_Str""});
  String userJohn;
  String gatewayUrl;
  if (keyManagerContext.getContextTenant().getDomain().equals(""String_Node_Str"")) {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp();
    userJohn=USER_JOHN;
  }
 else {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"" + keyManagerContext.getContextTenant().getDomain()+ ""String_Node_Str"";
    userJohn=USER_JOHN + ""String_Node_Str"" + keyManagerContext.getContextTenant().getDomain();
  }
  userManagementClient1.addUser(USER_JOHN,""String_Node_Str"",new String[]{SUBSCRIBER_ROLE},USER_JOHN);
  String apiContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=getGatewayURLNhttp() + ""String_Node_Str"";
  String description=""String_Node_Str"";
  apiPublisher.login(user.getUserName(),user.getPassword());
  APIRequest apiRequest=new APIRequest(API_NAME,apiContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(API_VERSION);
  apiRequest.setProvider(user.getUserName());
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  String modifiedResource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  apiPublisher.updateResourceOfAPI(user.getUserName(),API_NAME,API_VERSION,modifiedResource);
  apiStore.login(user.getUserName(),user.getPassword());
  apiStore.addApplication(APP_NAME,APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APP_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject jsonResponse=new JSONObject(responseString);
  String consumerKey=jsonResponse.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  String consumerSecret=jsonResponse.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  String accessToken;
  Map<String,String> requestHeaders;
  HttpResponse response;
  URL endPointURL;
  String requestBody;
  JSONObject accessTokenGenerationResponse;
  requestBody=""String_Node_Str"" + user.getUserName() + ""String_Node_Str""+ user.getPassword()+ ""String_Node_Str"";
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  response=apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL);
  accessTokenGenerationResponse=new JSONObject(response.getData());
  accessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  Thread.sleep(5000);
  response=HttpRequestUtil.doGet(gatewayUrl + ""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  endPointURL=new URL(gatewayUrl + ""String_Node_Str"");
  response=HttpRequestUtil.doPost(endPointURL,""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  requestBody=""String_Node_Str"" + userJohn + ""String_Node_Str"";
  accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  accessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  response=HttpRequestUtil.doGet(gatewayUrl + ""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  try {
    endPointURL=new URL(gatewayUrl + ""String_Node_Str"");
    response=HttpRequestUtil.doPost(endPointURL,""String_Node_Str"",requestHeaders);
    assertTrue(response.getResponseCode() != Response.Status.OK.getStatusCode(),""String_Node_Str"");
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
    assertTrue(true,""String_Node_Str"");
  }
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testSetScopeToResourceTestCase() throws Exception {
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  userManagementClient1.addRole(SUBSCRIBER_ROLE,new String[]{},new String[]{""String_Node_Str"",""String_Node_Str""});
  String userJohn;
  String gatewayUrl;
  if (keyManagerContext.getContextTenant().getDomain().equals(""String_Node_Str"")) {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp();
    userJohn=USER_JOHN;
  }
 else {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"" + keyManagerContext.getContextTenant().getDomain()+ ""String_Node_Str"";
    userJohn=USER_JOHN + ""String_Node_Str"" + keyManagerContext.getContextTenant().getDomain();
  }
  userManagementClient1.addUser(USER_JOHN,""String_Node_Str"",new String[]{SUBSCRIBER_ROLE},USER_JOHN);
  String apiContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=getGatewayURLNhttp() + ""String_Node_Str"";
  String description=""String_Node_Str"";
  apiPublisher.login(user.getUserName(),user.getPassword());
  APIRequest apiRequest=new APIRequest(API_NAME,apiContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(API_VERSION);
  apiRequest.setProvider(user.getUserName());
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  String modifiedResource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  apiPublisher.updateResourceOfAPI(user.getUserName(),API_NAME,API_VERSION,modifiedResource);
  apiStore.login(user.getUserName(),user.getPassword());
  apiStore.addApplication(APP_NAME,APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APP_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject jsonResponse=new JSONObject(responseString);
  String consumerKey=jsonResponse.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  String consumerSecret=jsonResponse.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"" + user.getUserDomain());
  String accessToken;
  Map<String,String> requestHeaders;
  HttpResponse response;
  URL endPointURL;
  String requestBody;
  JSONObject accessTokenGenerationResponse;
  requestBody=""String_Node_Str"" + user.getUserName() + ""String_Node_Str""+ user.getPassword()+ ""String_Node_Str"";
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  response=apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL);
  accessTokenGenerationResponse=new JSONObject(response.getData());
  accessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  Thread.sleep(5000);
  response=HttpRequestUtil.doGet(gatewayUrl + ""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  endPointURL=new URL(gatewayUrl + ""String_Node_Str"");
  response=HttpRequestUtil.doPost(endPointURL,""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  requestBody=""String_Node_Str"" + userJohn + ""String_Node_Str"";
  accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  accessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  response=HttpRequestUtil.doGet(gatewayUrl + ""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  try {
    endPointURL=new URL(gatewayUrl + ""String_Node_Str"");
    response=HttpRequestUtil.doPost(endPointURL,""String_Node_Str"",requestHeaders);
    assertTrue(response.getResponseCode() != Response.Status.OK.getStatusCode(),""String_Node_Str"");
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
    assertTrue(true,""String_Node_Str"");
  }
}",0.9977342133779924
114817,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testGenerateAccessTokenWithOpenIdScope() throws Exception {
  String requestBody=""String_Node_Str"" + user.getUserName() + ""String_Node_Str""+ user.getPassword()+ ""String_Node_Str"";
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttps() + ""String_Node_Str"");
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  String scope=accessTokenGenerationResponse.getString(""String_Node_Str"");
  Assert.assertTrue(scope.contains(""String_Node_Str""),""String_Node_Str"" + ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testGenerateAccessTokenWithOpenIdScope() throws Exception {
  String requestBody=""String_Node_Str"" + user.getUserName() + ""String_Node_Str""+ user.getPassword()+ ""String_Node_Str"";
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttps() + ""String_Node_Str"" + user.getUserDomain());
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  String scope=accessTokenGenerationResponse.getString(""String_Node_Str"");
  Assert.assertTrue(scope.contains(""String_Node_Str""),""String_Node_Str"" + ""String_Node_Str"");
}",0.9849180327868852
114818,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testRefreshTokenAPITestCase() throws Exception {
  String apiName=""String_Node_Str"";
  String apiContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String description=""String_Node_Str"";
  String apiVersion=""String_Node_Str"";
  apiPublisher.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword());
  APIRequest apiRequest=new APIRequest(apiName,apiContext,new URL(backEndEndpointUrl));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(apiVersion);
  apiRequest.setSandbox(backEndEndpointUrl);
  apiRequest.setProvider(user.getUserName());
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  apiStore.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStore.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,storeContext.getContextTenant().getContextUser().getUserName());
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  subscriptionRequest.setApplicationName(APPLICATION_NAME);
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APPLICATION_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String consumerKey=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  String consumerSecret=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  URL tokenEndpointURL=new URL(getGatewayURLNhttp() + ""String_Node_Str"");
  String subsAccessTokenPayload=APIMTestCaseUtils.getPayloadForPasswordGrant(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  JSONObject subsAccessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,subsAccessTokenPayload,tokenEndpointURL).getData());
  String subsRefreshToken=subsAccessTokenGenerationResponse.getString(""String_Node_Str"");
  assertFalse(StringUtils.isEmpty(subsRefreshToken),""String_Node_Str"");
  String requestBody=APIMTestCaseUtils.getPayloadForPasswordGrant(user.getUserName(),user.getPassword());
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  String userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  String refreshToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  String apiUrl=getAPIInvocationURLHttp(""String_Node_Str"");
  HttpResponse httpResponse=HttpRequestUtil.doGet(apiUrl,requestHeaders);
  Thread.sleep(5000);
  httpResponse=HttpRequestUtil.doGet(apiUrl,requestHeaders);
  assertEquals(httpResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  String getAccessTokenFromRefreshTokenRequestBody=""String_Node_Str"" + refreshToken + ""String_Node_Str"";
  accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,getAccessTokenFromRefreshTokenRequestBody,tokenEndpointURL).getData());
  userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  httpResponse=HttpRequestUtil.doGet(apiUrl,requestHeaders);
  assertEquals(httpResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testRefreshTokenAPITestCase() throws Exception {
  String apiName=""String_Node_Str"";
  String apiContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String description=""String_Node_Str"";
  String apiVersion=""String_Node_Str"";
  apiPublisher.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword());
  APIRequest apiRequest=new APIRequest(apiName,apiContext,new URL(backEndEndpointUrl));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(apiVersion);
  apiRequest.setSandbox(backEndEndpointUrl);
  apiRequest.setProvider(user.getUserName());
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  apiStore.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStore.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,storeContext.getContextTenant().getContextUser().getUserName());
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  subscriptionRequest.setApplicationName(APPLICATION_NAME);
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APPLICATION_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String consumerKey=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  String consumerSecret=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  URL tokenEndpointURL=new URL(getGatewayURLNhttp() + ""String_Node_Str"" + user.getUserDomain());
  String subsAccessTokenPayload=APIMTestCaseUtils.getPayloadForPasswordGrant(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  JSONObject subsAccessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,subsAccessTokenPayload,tokenEndpointURL).getData());
  String subsRefreshToken=subsAccessTokenGenerationResponse.getString(""String_Node_Str"");
  assertFalse(StringUtils.isEmpty(subsRefreshToken),""String_Node_Str"");
  String requestBody=APIMTestCaseUtils.getPayloadForPasswordGrant(user.getUserName(),user.getPassword());
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  String userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  String refreshToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  String apiUrl=getAPIInvocationURLHttp(""String_Node_Str"");
  HttpResponse httpResponse=HttpRequestUtil.doGet(apiUrl,requestHeaders);
  Thread.sleep(5000);
  httpResponse=HttpRequestUtil.doGet(apiUrl,requestHeaders);
  assertEquals(httpResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  String getAccessTokenFromRefreshTokenRequestBody=""String_Node_Str"" + refreshToken + ""String_Node_Str"";
  accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,getAccessTokenFromRefreshTokenRequestBody,tokenEndpointURL).getData());
  userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  httpResponse=HttpRequestUtil.doGet(apiUrl,requestHeaders);
  assertEquals(httpResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(httpResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
}",0.9976232303399812
114819,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  apiStore.removeApplication(""String_Node_Str"");
  super.cleanUp();
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    serverConfigurationManager.restoreToLastConfiguration();
  }
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  apiStore.removeApplication(""String_Node_Str"");
  super.cleanUp();
}",0.700507614213198
114820,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testTokenAPITestCase() throws Exception {
  String APIName=""String_Node_Str"";
  String APIContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=getGatewayURLHttp() + ""String_Node_Str"";
  String description=""String_Node_Str"";
  String providerName=publisherContext.getContextTenant().getContextUser().getUserName();
  String APIVersion=""String_Node_Str"";
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url),new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setSandbox(url);
  apiRequest.setProvider(user.getUserName());
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  String gatewayUrl=getAPIInvocationURLHttp(""String_Node_Str"");
  apiStore.addApplication(""String_Node_Str"",APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED,""String_Node_Str"",""String_Node_Str"");
  String provider=storeContext.getContextTenant().getContextUser().getUserName();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(APIName,provider);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  subscriptionRequest.setApplicationName(""String_Node_Str"");
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequestSandBox=new APPKeyRequestGenerator(""String_Node_Str"");
  generateAppKeyRequestSandBox.setKeyType(""String_Node_Str"");
  String responseStringSandBox=apiStore.generateApplicationKey(generateAppKeyRequestSandBox).getData();
  JSONObject responseSandBOX=new JSONObject(responseStringSandBox);
  String SANDbOXAccessToken=responseSandBOX.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Map<String,String> requestHeadersSandBox=new HashMap<String,String>();
  requestHeadersSandBox.put(""String_Node_Str"",""String_Node_Str"" + SANDbOXAccessToken);
  HttpResponse youTubeResponseSandBox=HttpRequestUtil.doGet(gatewayUrl,requestHeadersSandBox);
  log.info(""String_Node_Str"" + youTubeResponseSandBox);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(""String_Node_Str"");
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String consumerKey=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  String consumerSecret=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  Thread.sleep(2000);
  String requestBody=""String_Node_Str"";
  URL tokenEndpointURL=new URL(getGatewayURLNhttp() + ""String_Node_Str"");
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  String userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  String refreshToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  log.info(refreshToken);
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  Thread.sleep(2000);
  HttpResponse youTubeResponse=HttpRequestUtil.doGet(gatewayUrl,requestHeaders);
  assertEquals(youTubeResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(youTubeResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(youTubeResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(youTubeResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  requestHeaders.clear();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  HttpResponse youTubeResponseWithApplicationToken=HttpRequestUtil.doGet(gatewayUrl,requestHeaders);
  assertEquals(youTubeResponseWithApplicationToken.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(youTubeResponseWithApplicationToken.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(youTubeResponseWithApplicationToken.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(youTubeResponseWithApplicationToken.getData().contains(""String_Node_Str""),""String_Node_Str"");
  HttpResponse youTubeResponseWithApplicationTokenHttps=HttpRequestUtil.doGet(gatewayUrl,requestHeaders);
  log.info(""String_Node_Str"" + youTubeResponseWithApplicationTokenHttps);
  assertEquals(youTubeResponseWithApplicationTokenHttps.getResponseCode(),200,""String_Node_Str"");
  HttpResponse errorResponse=null;
  errorResponse=HttpRequestUtil.doGet(gatewayUrl,requestHeaders);
  log.info(""String_Node_Str"" + errorResponse);
  apiPublisher.revokeAccessToken(accessToken,consumerKey,providerName);
  requestHeaders.clear();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  errorResponse=HttpRequestUtil.doGet(gatewayUrl,requestHeaders);
  assertEquals(errorResponse.getResponseCode(),401,""String_Node_Str"");
  try {
    errorResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(""String_Node_Str""),requestHeaders);
    log.info(""String_Node_Str"" + errorResponse);
  }
 catch (  Exception e) {
  }
  assertEquals(errorResponse.getResponseCode(),401,""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testTokenAPITestCase() throws Exception {
  String APIName=""String_Node_Str"";
  String APIContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=getGatewayURLHttp() + ""String_Node_Str"";
  String description=""String_Node_Str"";
  String providerName=publisherContext.getContextTenant().getContextUser().getUserName();
  String APIVersion=""String_Node_Str"";
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url),new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setSandbox(url);
  apiRequest.setProvider(user.getUserName());
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  String gatewayUrl=getAPIInvocationURLHttp(""String_Node_Str"");
  apiStore.addApplication(""String_Node_Str"",APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED,""String_Node_Str"",""String_Node_Str"");
  String provider=storeContext.getContextTenant().getContextUser().getUserName();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(APIName,provider);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  subscriptionRequest.setApplicationName(""String_Node_Str"");
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequestSandBox=new APPKeyRequestGenerator(""String_Node_Str"");
  generateAppKeyRequestSandBox.setKeyType(""String_Node_Str"");
  String responseStringSandBox=apiStore.generateApplicationKey(generateAppKeyRequestSandBox).getData();
  JSONObject responseSandBOX=new JSONObject(responseStringSandBox);
  String SANDbOXAccessToken=responseSandBOX.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Map<String,String> requestHeadersSandBox=new HashMap<String,String>();
  requestHeadersSandBox.put(""String_Node_Str"",""String_Node_Str"" + SANDbOXAccessToken);
  HttpResponse youTubeResponseSandBox=HttpRequestUtil.doGet(gatewayUrl,requestHeadersSandBox);
  log.info(""String_Node_Str"" + youTubeResponseSandBox);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(""String_Node_Str"");
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String consumerKey=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  String consumerSecret=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  Thread.sleep(2000);
  String requestBody=""String_Node_Str"" + user.getUserName() + ""String_Node_Str"";
  URL tokenEndpointURL=new URL(getGatewayURLNhttp() + ""String_Node_Str"" + user.getUserDomain());
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  String userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  String refreshToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  log.info(refreshToken);
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  Thread.sleep(2000);
  HttpResponse youTubeResponse=HttpRequestUtil.doGet(gatewayUrl,requestHeaders);
  assertEquals(youTubeResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(youTubeResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(youTubeResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(youTubeResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
  requestHeaders.clear();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  HttpResponse youTubeResponseWithApplicationToken=HttpRequestUtil.doGet(gatewayUrl,requestHeaders);
  assertEquals(youTubeResponseWithApplicationToken.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(youTubeResponseWithApplicationToken.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(youTubeResponseWithApplicationToken.getData().contains(""String_Node_Str""),""String_Node_Str"");
  assertTrue(youTubeResponseWithApplicationToken.getData().contains(""String_Node_Str""),""String_Node_Str"");
  HttpResponse youTubeResponseWithApplicationTokenHttps=HttpRequestUtil.doGet(gatewayUrl,requestHeaders);
  log.info(""String_Node_Str"" + youTubeResponseWithApplicationTokenHttps);
  assertEquals(youTubeResponseWithApplicationTokenHttps.getResponseCode(),200,""String_Node_Str"");
  HttpResponse errorResponse=null;
  errorResponse=HttpRequestUtil.doGet(gatewayUrl,requestHeaders);
  log.info(""String_Node_Str"" + errorResponse);
  apiPublisher.revokeAccessToken(accessToken,consumerKey,providerName);
  requestHeaders.clear();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  errorResponse=HttpRequestUtil.doGet(gatewayUrl,requestHeaders);
  assertEquals(errorResponse.getResponseCode(),401,""String_Node_Str"");
  try {
    errorResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(""String_Node_Str""),requestHeaders);
    log.info(""String_Node_Str"" + errorResponse);
  }
 catch (  Exception e) {
  }
  assertEquals(errorResponse.getResponseCode(),401,""String_Node_Str"");
}",0.9945196095221784
114821,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    serverConfigurationManager=new ServerConfigurationManager(gatewayContextWrk);
    serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    serverConfigurationManager.restartGracefully();
    super.init();
  }
  apiPublisher=new APIPublisherRestClient(getPublisherURLHttp());
  apiStore=new APIStoreRestClient(getStoreURLHttp());
  apiPublisher.login(user.getUserName(),user.getPassword());
  apiStore.login(user.getUserName(),user.getPassword());
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  apiPublisher=new APIPublisherRestClient(getPublisherURLHttp());
  apiStore=new APIStoreRestClient(getStoreURLHttp());
  apiPublisher.login(user.getUserName(),user.getPassword());
  apiStore.login(user.getUserName(),user.getPassword());
}",0.6204379562043796
114822,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIRoleChangeEffectInStore() throws Exception {
  apiPublisher.login(contextUsername,contextUserPassword);
  APIRequest brokenApiRequest=new APIRequest(BROKEN_API,BROKEN_API,new URL(EP_URL));
  brokenApiRequest.setVersion(API_VERSION);
  brokenApiRequest.setProvider(contextUsername);
  brokenApiRequest.setVisibility(""String_Node_Str"");
  brokenApiRequest.setRoles(FIRST_ROLE);
  apiPublisher.addAPI(brokenApiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(BROKEN_API,contextUsername,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  APIRequest healthyApiRequest=new APIRequest(HEALTHY_API,HEALTHY_API,new URL(EP_URL));
  healthyApiRequest.setVersion(API_VERSION);
  healthyApiRequest.setProvider(contextUsername);
  healthyApiRequest.setVisibility(""String_Node_Str"");
  healthyApiRequest.setRoles(FIRST_ROLE);
  apiPublisher.addAPI(healthyApiRequest);
  updateRequest=new APILifeCycleStateRequest(HEALTHY_API,contextUsername,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(contextUsername,HEALTHY_API,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  apiStoreRestClient.login(FIRST_USER,USER_PASSWORD);
  apiStoreRestClient.addApplication(APP_NAME,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(BROKEN_API,contextUsername);
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStoreRestClient.subscribe(subscriptionRequest);
  subscriptionRequest=new SubscriptionRequest(HEALTHY_API,contextUsername);
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStoreRestClient.subscribe(subscriptionRequest);
  brokenApiRequest.setRoles(SECOND_ROLE);
  brokenApiRequest.setTags(""String_Node_Str"");
  Thread.sleep(1000);
  apiPublisher.updateAPI(brokenApiRequest);
  HttpResponse response=new HttpResponse(""String_Node_Str"",HttpStatus.SC_INTERNAL_SERVER_ERROR);
  try {
    response=apiStoreRestClient.getAllSubscriptions();
  }
 catch (  Exception e) {
  }
  LogFactory.getLog(APIMANAGER4373BrokenAPIInStoreTestCase.class).error(response.getData());
  assertTrue(response.getData().contains(HEALTHY_API),""String_Node_Str"" + response.getData());
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIRoleChangeEffectInStore() throws Exception {
  apiPublisher.login(contextUsername,contextUserPassword);
  APIRequest brokenApiRequest=new APIRequest(BROKEN_API,BROKEN_API,new URL(EP_URL));
  brokenApiRequest.setVersion(API_VERSION);
  brokenApiRequest.setProvider(contextUsername);
  brokenApiRequest.setVisibility(RESTRICTED);
  brokenApiRequest.setRoles(FIRST_ROLE);
  apiPublisher.addAPI(brokenApiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(BROKEN_API,contextUsername,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  APIRequest healthyApiRequest=new APIRequest(HEALTHY_API,HEALTHY_API,new URL(EP_URL));
  healthyApiRequest.setVersion(API_VERSION);
  healthyApiRequest.setProvider(contextUsername);
  healthyApiRequest.setVisibility(RESTRICTED);
  healthyApiRequest.setRoles(FIRST_ROLE);
  apiPublisher.addAPI(healthyApiRequest);
  updateRequest=new APILifeCycleStateRequest(HEALTHY_API,contextUsername,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(contextUsername,HEALTHY_API,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  apiStoreRestClient.login(FIRST_USER,USER_PASSWORD);
  apiStoreRestClient.addApplication(APP_NAME,APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(BROKEN_API,contextUsername);
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStoreRestClient.subscribe(subscriptionRequest);
  subscriptionRequest=new SubscriptionRequest(HEALTHY_API,contextUsername);
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStoreRestClient.subscribe(subscriptionRequest);
  brokenApiRequest.setRoles(SECOND_ROLE);
  brokenApiRequest.setTags(TAG_UPDATED);
  Thread.sleep(1000);
  apiPublisher.updateAPI(brokenApiRequest);
  HttpResponse response=new HttpResponse(""String_Node_Str"",HttpStatus.SC_INTERNAL_SERVER_ERROR);
  try {
    response=apiStoreRestClient.getAllSubscriptions();
  }
 catch (  Exception e) {
  }
  LogFactory.getLog(APIMANAGER4373BrokenAPIInStoreTestCase.class).error(response.getData());
  assertTrue(response.getData().contains(HEALTHY_API),""String_Node_Str"" + response.getData());
}",0.9689229459344402
114823,"/** 
 * This test case is a test for the fix fix for APIMANAGER-3912, where jwt claims are attempted to retrieve from an invalidated cache and hence failed. In carbon 4.2 products cache invalidation timeout is not configurable and is hardcoded to 15 mins. So the test case will take approximately 15mins to complete and it will delay the product build unnecessarily, hence the test case is disabled.
 */
@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=false) public void testAPIAccessWhenJWTCachingEnabledTestCase() throws APIManagerIntegrationTestException, XPathExpressionException, IOException, JSONException, InterruptedException {
  String applicationName=""String_Node_Str"";
  String apiName=""String_Node_Str"";
  String apiContext=""String_Node_Str"";
  String apiVersion=""String_Node_Str"";
  String description=""String_Node_Str"";
  String endpointURL=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"";
  String apiTier=APIMIntegrationConstants.API_TIER.GOLD;
  String tags=""String_Node_Str"";
  int waitingSecs=900;
  addAndSubscribeToAPI(apiName,apiVersion,apiContext,description,endpointURL,tags,providerName,user);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,storeContext.getContextTenant().getContextUser().getUserName());
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=gatewayUrlsWrk.getWebAppURLNhttp() + apiContext + ""String_Node_Str""+ apiVersion;
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  org.wso2.carbon.automation.test.utils.http.client.HttpResponse httpResponse=HttpRequestUtil.doGet(url,headers);
  assertEquals(""String_Node_Str"" + url,200,httpResponse.getResponseCode());
  log.info(""String_Node_Str"" + waitingSecs + ""String_Node_Str"");
  Thread.sleep(waitingSecs * 1000);
  httpResponse=HttpRequestUtil.doGet(url,headers);
  assertEquals(""String_Node_Str"" + url + ""String_Node_Str"",200,httpResponse.getResponseCode());
}","/** 
 * This test case is a test for the fix fix for APIMANAGER-3912, where jwt claims are attempted to retrieve from an invalidated cache and hence failed. In carbon 4.2 products cache invalidation timeout is not configurable and is hardcoded to 15 mins. So the test case will take approximately 15mins to complete and it will delay the product build unnecessarily, hence the test case is disabled.
 */
@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=false) public void testAPIAccessWhenJWTCachingEnabledTestCase() throws APIManagerIntegrationTestException, XPathExpressionException, IOException, JSONException, InterruptedException {
  String applicationName=""String_Node_Str"";
  String apiName=""String_Node_Str"";
  String apiContext=""String_Node_Str"";
  String apiVersion=""String_Node_Str"";
  String description=""String_Node_Str"";
  String tags=""String_Node_Str"";
  int waitingSecs=900;
  addAndSubscribeToAPI(apiName,apiVersion,apiContext,description,tags,providerName,user);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,storeContext.getContextTenant().getContextUser().getUserName());
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=gatewayUrlsWrk.getWebAppURLNhttp() + apiContext + ""String_Node_Str""+ apiVersion;
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  org.wso2.carbon.automation.test.utils.http.client.HttpResponse httpResponse=HttpRequestUtil.doGet(url,headers);
  assertEquals(""String_Node_Str"" + url,200,httpResponse.getResponseCode());
  log.info(""String_Node_Str"" + waitingSecs + ""String_Node_Str"");
  Thread.sleep(waitingSecs * 1000);
  httpResponse=HttpRequestUtil.doGet(url,headers);
  assertEquals(""String_Node_Str"" + url + ""String_Node_Str"",200,httpResponse.getResponseCode());
}",0.9732894255397
114824,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true) public void testEnableJWTAndClaims() throws Exception {
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),user.getUserName(),user.getPassword());
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(user.getUserNameWithoutDomain(),""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(user.getUserNameWithoutDomain(),""String_Node_Str"",""String_Node_Str"",profile);
  ServerConfigurationManager serverConfigManagerForTenant=new ServerConfigurationManager(superTenantKeyManagerContext);
  serverConfigManagerForTenant.restartGracefully();
  super.init(userMode);
  addAndSubscribeToAPI(apiName1,apiVersion,apiContext1,description,backendURL,tags,providerName,user);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(user.getUserName(),user.getPassword());
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  String accessToken=new JSONObject(responseString).getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(apiContext1,apiVersion));
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  HttpResponse response=httpclient.execute(get);
  Assert.assertEquals(response.getStatusLine().getStatusCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  Header jwtheader=pickHeader(responseHeaders,JWT_ASSERTION_HEADER);
  Assert.assertNotNull(jwtheader,JWT_ASSERTION_HEADER + ""String_Node_Str"");
  String decodedJWTHeaderString=APIMTestCaseUtils.getDecodedJWTHeader(jwtheader.getValue());
  if (decodedJWTHeaderString != null) {
    log.debug(""String_Node_Str"" + decodedJWTHeaderString);
    JSONObject jsonHeaderObject=new JSONObject(decodedJWTHeaderString);
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
  }
  String decodedJWTString=APIMTestCaseUtils.getDecodedJWT(jwtheader.getValue());
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  checkDefaultUserClaims(jsonObject);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  boolean bExceptionOccured=false;
  try {
    jsonObject.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    bExceptionOccured=true;
  }
  assertTrue(""String_Node_Str"",bExceptionOccured);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true) public void testEnableJWTAndClaims() throws Exception {
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),user.getUserName(),user.getPassword());
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(user.getUserNameWithoutDomain(),""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(user.getUserNameWithoutDomain(),""String_Node_Str"",""String_Node_Str"",profile);
  ServerConfigurationManager serverConfigManagerForTenant=new ServerConfigurationManager(superTenantKeyManagerContext);
  serverConfigManagerForTenant.restartGracefully();
  super.init(userMode);
  addAndSubscribeToAPI(apiName1,apiVersion,apiContext1,description,tags,providerName,user);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(user.getUserName(),user.getPassword());
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  String accessToken=new JSONObject(responseString).getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(apiContext1,apiVersion));
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  HttpResponse response=httpclient.execute(get);
  Assert.assertEquals(response.getStatusLine().getStatusCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  Header jwtheader=pickHeader(responseHeaders,JWT_ASSERTION_HEADER);
  Assert.assertNotNull(jwtheader,JWT_ASSERTION_HEADER + ""String_Node_Str"");
  String decodedJWTHeaderString=APIMTestCaseUtils.getDecodedJWTHeader(jwtheader.getValue());
  if (decodedJWTHeaderString != null) {
    log.debug(""String_Node_Str"" + decodedJWTHeaderString);
    JSONObject jsonHeaderObject=new JSONObject(decodedJWTHeaderString);
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
  }
  String decodedJWTString=APIMTestCaseUtils.getDecodedJWT(jwtheader.getValue());
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  checkDefaultUserClaims(jsonObject);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  boolean bExceptionOccured=false;
  try {
    jsonObject.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    bExceptionOccured=true;
  }
  assertTrue(""String_Node_Str"",bExceptionOccured);
}",0.9982430921578024
114825,"private void addAndSubscribeToAPI(String apiName,String apiVersion,String apiContext,String description,String endpointURL,String tags,String providerName,User subscriber) throws APIManagerIntegrationTestException, MalformedURLException, XPathExpressionException {
  APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  APIRequest apiRequest=new APIRequest(apiName,apiContext,new URL(endpointURL));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(apiVersion);
  apiRequest.setVisibility(""String_Node_Str"");
  apiRequest.setProvider(providerName);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(providerName,apiName,apiVersion,APIMIntegrationConstants.IS_API_EXISTS);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(subscriber.getUserName(),subscriber.getPassword());
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,user.getUserName());
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
}","private void addAndSubscribeToAPI(String apiName,String apiVersion,String apiContext,String description,String tags,String providerName,User subscriber) throws APIManagerIntegrationTestException, MalformedURLException, XPathExpressionException {
  String gatewaySessionCookie=createSession(gatewayContextMgt);
  loadSynapseConfigurationFromClasspath(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"",gatewayContextMgt,gatewaySessionCookie);
  String endpointURL=getSuperTenantAPIInvocationURLHttp(""String_Node_Str"",""String_Node_Str"");
  APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  APIRequest apiRequest=new APIRequest(apiName,apiContext,new URL(endpointURL));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(apiVersion);
  apiRequest.setVisibility(""String_Node_Str"");
  apiRequest.setProvider(providerName);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(providerName,apiName,apiVersion,APIMIntegrationConstants.IS_API_EXISTS);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(subscriber.getUserName(),subscriber.getPassword());
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,user.getUserName());
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
}",0.8763313609467456
114826,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testPrototypeInvocationWithJWTEnabled() throws Exception {
  APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(PROTOTYPE_API_NAME,PROTOTYPE_API_CONTEXT,PROTOTYPE_API_VERSION,providerName,new URL(backendURL));
  apiCreationRequestBean.setTiersCollection(APIMIntegrationConstants.API_TIER.UNLIMITED);
  ArrayList<APIResourceBean> resList=new ArrayList<APIResourceBean>();
  APIResourceBean res=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.ResourceAuthTypes.APPLICATION.getAuthType(),APIMIntegrationConstants.RESOURCE_TIER.UNLIMITED,""String_Node_Str"");
  resList.add(res);
  apiCreationRequestBean.setResourceBeanList(resList);
  org.wso2.carbon.automation.test.utils.http.client.HttpResponse serviceResponse=apiPublisher.addAPI(apiCreationRequestBean);
  verifyResponse(serviceResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(PROTOTYPE_API_NAME,user.getUserName(),APILifeCycleState.PROTOTYPED);
  serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  String invokeURL=getAPIInvocationURLHttp(PROTOTYPE_API_CONTEXT,PROTOTYPE_API_VERSION);
  Map<String,String> requestHeaders=new HashMap<String,String>();
  serviceResponse=HTTPSClientUtils.doGet(invokeURL,requestHeaders);
  Assert.assertEquals(serviceResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testPrototypeInvocationWithJWTEnabled() throws Exception {
  APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  String gatewaySessionCookie=createSession(gatewayContextMgt);
  loadSynapseConfigurationFromClasspath(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"",gatewayContextMgt,gatewaySessionCookie);
  String endpointURL=getSuperTenantAPIInvocationURLHttp(""String_Node_Str"",""String_Node_Str"");
  APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(PROTOTYPE_API_NAME,PROTOTYPE_API_CONTEXT,PROTOTYPE_API_VERSION,providerName,new URL(endpointURL));
  apiCreationRequestBean.setTiersCollection(APIMIntegrationConstants.API_TIER.UNLIMITED);
  ArrayList<APIResourceBean> resList=new ArrayList<APIResourceBean>();
  APIResourceBean res=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.ResourceAuthTypes.APPLICATION.getAuthType(),APIMIntegrationConstants.RESOURCE_TIER.UNLIMITED,""String_Node_Str"");
  resList.add(res);
  apiCreationRequestBean.setResourceBeanList(resList);
  org.wso2.carbon.automation.test.utils.http.client.HttpResponse serviceResponse=apiPublisher.addAPI(apiCreationRequestBean);
  verifyResponse(serviceResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(PROTOTYPE_API_NAME,user.getUserName(),APILifeCycleState.PROTOTYPED);
  serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  String invokeURL=getAPIInvocationURLHttp(PROTOTYPE_API_CONTEXT,PROTOTYPE_API_VERSION);
  Map<String,String> requestHeaders=new HashMap<String,String>();
  serviceResponse=HTTPSClientUtils.doGet(invokeURL,requestHeaders);
  Assert.assertEquals(serviceResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
}",0.890185676392573
114827,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  subscriberUserWithTenantDomain=subscriberUsername + ""String_Node_Str"" + user.getUserDomain();
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    serverConfigurationManager=new ServerConfigurationManager(gatewayContextWrk);
    serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    serverConfigurationManager.applyConfiguration(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    subscriberUserWithTenantDomain=subscriberUsername;
    String gatewaySessionCookie=createSession(gatewayContextMgt);
    loadSynapseConfigurationFromClasspath(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"",gatewayContextMgt,gatewaySessionCookie);
  }
  backendURL=getSuperTenantAPIInvocationURLHttp(""String_Node_Str"",""String_Node_Str"");
  providerName=user.getUserName();
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  subscriberUserWithTenantDomain=subscriberUsername + ""String_Node_Str"" + user.getUserDomain();
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    serverConfigurationManager=new ServerConfigurationManager(gatewayContextWrk);
    serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    serverConfigurationManager.applyConfiguration(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    subscriberUserWithTenantDomain=subscriberUsername;
  }
  providerName=user.getUserName();
}",0.7914584279872785
114828,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true,dependsOnMethods=""String_Node_Str"") public void testSpecificUserJWTClaims() throws Exception {
  String accessToken;
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),user.getUserName(),user.getPassword());
  if (!userManagementClient1.roleNameExists(INTERNAL_ROLE_SUBSCRIBER)) {
    userManagementClient1.addInternalRole(ROLE_SUBSCRIBER,new String[]{},new String[]{""String_Node_Str"",""String_Node_Str""});
  }
  if (!userManagementClient1.userNameExists(INTERNAL_ROLE_SUBSCRIBER,subscriberUsername)) {
    userManagementClient1.addUser(subscriberUsername,subscriberUserPassword,new String[]{INTERNAL_ROLE_SUBSCRIBER},null);
  }
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),user.getUserName(),user.getPassword());
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUsername,""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUsername,""String_Node_Str"",""String_Node_Str"",profile);
  ServerConfigurationManager serverConfigManagerForTenant=new ServerConfigurationManager(superTenantKeyManagerContext);
  serverConfigManagerForTenant.restartGracefully();
  super.init(userMode);
  User subscriberUser=new User();
  subscriberUser.setUserName(subscriberUserWithTenantDomain);
  subscriberUser.setPassword(subscriberUserPassword);
  addAndSubscribeToAPI(apiName2,apiVersion,apiContext2,description,backendURL,tags,providerName,subscriberUser);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(subscriberUserWithTenantDomain,subscriberUserPassword);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  accessToken=new JSONObject(responseString).getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(apiContext2,apiVersion));
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  HttpResponse response=httpclient.execute(get);
  Assert.assertEquals(response.getStatusLine().getStatusCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  Header jwtheader=pickHeader(responseHeaders,JWT_ASSERTION_HEADER);
  Assert.assertNotNull(jwtheader,JWT_ASSERTION_HEADER + ""String_Node_Str"");
  String decodedJWTString=APIMTestCaseUtils.getDecodedJWT(jwtheader.getValue());
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"",claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(subscriberUsername));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(applicationName));
  apiStoreRestClient.removeAPISubscriptionByApplicationName(apiName2,apiVersion,providerName,applicationName);
  apiStoreRestClient.removeApplication(applicationName);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true,dependsOnMethods=""String_Node_Str"") public void testSpecificUserJWTClaims() throws Exception {
  String accessToken;
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),user.getUserName(),user.getPassword());
  if (!userManagementClient1.roleNameExists(INTERNAL_ROLE_SUBSCRIBER)) {
    userManagementClient1.addInternalRole(ROLE_SUBSCRIBER,new String[]{},new String[]{""String_Node_Str"",""String_Node_Str""});
  }
  if (!userManagementClient1.userNameExists(INTERNAL_ROLE_SUBSCRIBER,subscriberUsername)) {
    userManagementClient1.addUser(subscriberUsername,subscriberUserPassword,new String[]{INTERNAL_ROLE_SUBSCRIBER},null);
  }
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),user.getUserName(),user.getPassword());
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUsername,""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUsername,""String_Node_Str"",""String_Node_Str"",profile);
  ServerConfigurationManager serverConfigManagerForTenant=new ServerConfigurationManager(superTenantKeyManagerContext);
  serverConfigManagerForTenant.restartGracefully();
  super.init(userMode);
  User subscriberUser=new User();
  subscriberUser.setUserName(subscriberUserWithTenantDomain);
  subscriberUser.setPassword(subscriberUserPassword);
  addAndSubscribeToAPI(apiName2,apiVersion,apiContext2,description,tags,providerName,subscriberUser);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(subscriberUserWithTenantDomain,subscriberUserPassword);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  accessToken=new JSONObject(responseString).getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(apiContext2,apiVersion));
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  HttpResponse response=httpclient.execute(get);
  Assert.assertEquals(response.getStatusLine().getStatusCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  Header jwtheader=pickHeader(responseHeaders,JWT_ASSERTION_HEADER);
  Assert.assertNotNull(jwtheader,JWT_ASSERTION_HEADER + ""String_Node_Str"");
  String decodedJWTString=APIMTestCaseUtils.getDecodedJWT(jwtheader.getValue());
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"",claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(subscriberUsername));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(applicationName));
  apiStoreRestClient.removeAPISubscriptionByApplicationName(apiName2,apiVersion,providerName,applicationName);
  apiStoreRestClient.removeApplication(applicationName);
}",0.9984224867345476
114829,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIAccessWithInvalidToken() throws XPathExpressionException, APIManagerIntegrationTestException {
  apiPublisher.login(user.getUserName(),user.getPassword());
  String apiContext=""String_Node_Str"";
  String endpointUrl=""String_Node_Str"";
  APIRequest apiRequest=null;
  try {
    apiRequest=new APIRequest(API_NAME,apiContext,new URL(endpointUrl));
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"" + endpointUrl,e);
    assertTrue(false);
  }
  apiRequest.setVersion(API_VERSION);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setTier(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String apiInvocationUrl=getAPIInvocationURLHttp(apiContext,API_VERSION);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  try {
    HttpResponse httpResponse=HttpRequestUtil.doGet(apiInvocationUrl,headers);
    Assert.assertNotNull(httpResponse);
    Assert.assertEquals(401,httpResponse.getResponseCode());
    String responsePayload=httpResponse.getData();
    Assert.assertNotNull(responsePayload);
    String[] responseArray=responsePayload.split(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",responseArray.length > 1);
    Assert.assertTrue(""String_Node_Str"" + ""String_Node_Str"" + responseArray[1] + ""String_Node_Str"",URLDecoder.decode(responseArray[1],""String_Node_Str"").contains(""String_Node_Str""));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + apiInvocationUrl,e);
    Assert.assertTrue(""String_Node_Str"" + apiInvocationUrl + ""String_Node_Str""+ e.getMessage(),false);
  }
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIAccessWithInvalidToken() throws XPathExpressionException, APIManagerIntegrationTestException {
  apiPublisher.login(user.getUserName(),user.getPassword());
  String apiContext=""String_Node_Str"";
  String endpointUrl=""String_Node_Str"";
  APIRequest apiRequest=null;
  try {
    apiRequest=new APIRequest(API_NAME,apiContext,new URL(endpointUrl));
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"" + endpointUrl,e);
    assertTrue(false);
  }
  apiRequest.setVersion(API_VERSION);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setTier(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String apiInvocationUrl=getAPIInvocationURLHttp(apiContext,API_VERSION);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  try {
    HttpResponse httpResponse=HttpRequestUtil.doGet(apiInvocationUrl,headers);
    Assert.assertNotNull(httpResponse);
    Assert.assertEquals(401,httpResponse.getResponseCode());
    String responsePayload=httpResponse.getData();
    Assert.assertNotNull(responsePayload);
    String description=AXIOMUtil.stringToOM(responsePayload).getFirstChildWithName(new QName(""String_Node_Str"",""String_Node_Str"")).getText();
    Assert.assertNotNull(""String_Node_Str"",description);
    Assert.assertTrue(""String_Node_Str"" + ""String_Node_Str"" + description + ""String_Node_Str"",description.contains(""String_Node_Str""));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + apiInvocationUrl,e);
    Assert.assertTrue(""String_Node_Str"" + apiInvocationUrl + ""String_Node_Str""+ e.getMessage(),false);
  }
catch (  XMLStreamException e) {
    log.error(""String_Node_Str"",e);
    Assert.assertTrue(""String_Node_Str"" + e.getMessage(),false);
  }
}",0.8765719608756404
114830,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIAccessWithInvalidToken() throws XPathExpressionException, APIManagerIntegrationTestException {
  apiPublisher.login(user.getUserName(),user.getPassword());
  String apiContext=""String_Node_Str"";
  String endpointUrl=""String_Node_Str"";
  APIRequest apiRequest=null;
  try {
    apiRequest=new APIRequest(API_NAME,apiContext,new URL(endpointUrl));
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"" + endpointUrl,e);
    assertTrue(false);
  }
  apiRequest.setVersion(API_VERSION);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setTier(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String apiInvocationUrl=getAPIInvocationURLHttp(apiContext,API_VERSION);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  try {
    HttpResponse httpResponse=HttpRequestUtil.doGet(apiInvocationUrl,headers);
    Assert.assertNotNull(httpResponse);
    Assert.assertEquals(401,httpResponse.getResponseCode());
    String responsePayload=httpResponse.getData();
    Assert.assertNotNull(responsePayload);
    String description=AXIOMUtil.stringToOM(responsePayload).getFirstChildWithName(new QName(""String_Node_Str"",""String_Node_Str"")).getText();
    Assert.assertNotNull(""String_Node_Str"",description);
    Assert.assertTrue(""String_Node_Str"" + ""String_Node_Str"" + description + ""String_Node_Str"",description.contains(""String_Node_Str""));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + apiInvocationUrl,e);
    Assert.assertTrue(""String_Node_Str"" + apiInvocationUrl + ""String_Node_Str""+ e.getMessage(),false);
  }
catch (  XMLStreamException e) {
    log.error(""String_Node_Str"",e);
    Assert.assertTrue(""String_Node_Str"" + e.getMessage(),false);
  }
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIAccessWithInvalidToken() throws XPathExpressionException, APIManagerIntegrationTestException {
  apiPublisher.login(user.getUserName(),user.getPassword());
  String apiContext=""String_Node_Str"";
  String endpointUrl=""String_Node_Str"";
  APIRequest apiRequest=null;
  try {
    apiRequest=new APIRequest(API_NAME,apiContext,new URL(endpointUrl));
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"" + endpointUrl,e);
    assertTrue(false);
  }
  apiRequest.setVersion(API_VERSION);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setTier(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String apiInvocationUrl=getAPIInvocationURLHttp(apiContext,API_VERSION);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  try {
    HttpResponse httpResponse=HttpRequestUtil.doGet(apiInvocationUrl,headers);
    Assert.assertNotNull(httpResponse);
    Assert.assertEquals(401,httpResponse.getResponseCode());
    String responsePayload=httpResponse.getData();
    Assert.assertNotNull(responsePayload);
    OMElement element=AXIOMUtil.stringToOM(responsePayload);
    AXIOMXPath xpath=new AXIOMXPath(""String_Node_Str"");
    xpath.addNamespace(""String_Node_Str"",""String_Node_Str"");
    xpath.addNamespace(""String_Node_Str"",""String_Node_Str"");
    Object descriptionElement=xpath.selectSingleNode(element);
    Assert.assertNotNull(""String_Node_Str"",descriptionElement);
    String description=((OMElement)descriptionElement).getText();
    Assert.assertTrue(""String_Node_Str"" + ""String_Node_Str"" + description + ""String_Node_Str"",description.contains(""String_Node_Str""));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + apiInvocationUrl,e);
    Assert.assertTrue(""String_Node_Str"" + apiInvocationUrl + ""String_Node_Str""+ e.getMessage(),false);
  }
catch (  XMLStreamException e) {
    log.error(""String_Node_Str"",e);
    Assert.assertTrue(""String_Node_Str"" + e.getMessage(),false);
  }
catch (  JaxenException e) {
    log.error(""String_Node_Str"",e);
    Assert.assertTrue(""String_Node_Str"" + e.getMessage(),false);
  }
}",0.8685358255451714
114831,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIAccessWithInvalidToken() throws XPathExpressionException, APIManagerIntegrationTestException {
  apiPublisher.login(user.getUserName(),user.getPassword());
  String apiContext=""String_Node_Str"";
  String endpointUrl=""String_Node_Str"";
  APIRequest apiRequest=null;
  try {
    apiRequest=new APIRequest(API_NAME,apiContext,new URL(endpointUrl));
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"" + endpointUrl,e);
    assertTrue(false);
  }
  apiRequest.setVersion(API_VERSION);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setTier(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String apiInvocationUrl=getAPIInvocationURLHttp(apiContext,API_VERSION);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  try {
    HttpResponse httpResponse=HttpRequestUtil.doGet(apiInvocationUrl,headers);
    Assert.assertNotNull(httpResponse);
    Assert.assertEquals(401,httpResponse.getResponseCode());
    String responsePayload=httpResponse.getData();
    Assert.assertNotNull(responsePayload);
    String description=AXIOMUtil.stringToOM(responsePayload).getFirstChildWithName(new QName(""String_Node_Str"",""String_Node_Str"")).getText();
    Assert.assertNotNull(""String_Node_Str"",description);
    Assert.assertTrue(""String_Node_Str"" + ""String_Node_Str"" + description + ""String_Node_Str"",description.contains(""String_Node_Str""));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + apiInvocationUrl,e);
    Assert.assertTrue(""String_Node_Str"" + apiInvocationUrl + ""String_Node_Str""+ e.getMessage(),false);
  }
catch (  XMLStreamException e) {
    log.error(""String_Node_Str"",e);
    Assert.assertTrue(""String_Node_Str"" + e.getMessage(),false);
  }
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIAccessWithInvalidToken() throws XPathExpressionException, APIManagerIntegrationTestException {
  apiPublisher.login(user.getUserName(),user.getPassword());
  String apiContext=""String_Node_Str"";
  String endpointUrl=""String_Node_Str"";
  APIRequest apiRequest=null;
  try {
    apiRequest=new APIRequest(API_NAME,apiContext,new URL(endpointUrl));
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"" + endpointUrl,e);
    assertTrue(false);
  }
  apiRequest.setVersion(API_VERSION);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setTier(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String apiInvocationUrl=getAPIInvocationURLHttp(apiContext,API_VERSION);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  try {
    HttpResponse httpResponse=HttpRequestUtil.doGet(apiInvocationUrl,headers);
    Assert.assertNotNull(httpResponse);
    Assert.assertEquals(401,httpResponse.getResponseCode());
    String responsePayload=httpResponse.getData();
    Assert.assertNotNull(responsePayload);
    OMElement element=AXIOMUtil.stringToOM(responsePayload);
    AXIOMXPath xpath=new AXIOMXPath(""String_Node_Str"");
    xpath.addNamespace(""String_Node_Str"",""String_Node_Str"");
    xpath.addNamespace(""String_Node_Str"",""String_Node_Str"");
    Object descriptionElement=xpath.selectSingleNode(element);
    Assert.assertNotNull(""String_Node_Str"",descriptionElement);
    String description=((OMElement)descriptionElement).getText();
    Assert.assertTrue(""String_Node_Str"" + ""String_Node_Str"" + description + ""String_Node_Str"",description.contains(""String_Node_Str""));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + apiInvocationUrl,e);
    Assert.assertTrue(""String_Node_Str"" + apiInvocationUrl + ""String_Node_Str""+ e.getMessage(),false);
  }
catch (  XMLStreamException e) {
    log.error(""String_Node_Str"",e);
    Assert.assertTrue(""String_Node_Str"" + e.getMessage(),false);
  }
catch (  JaxenException e) {
    log.error(""String_Node_Str"",e);
    Assert.assertTrue(""String_Node_Str"" + e.getMessage(),false);
  }
}",0.8685358255451714
114832,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokeAPIAfterChangeAPIEndPointURLWithNewEndPointURL() throws Exception {
  waitForAPIDeployment();
  HttpResponse oldVersionInvokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0),requestHeaders);
  assertEquals(oldVersionInvokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(oldVersionInvokeResponse.getData().contains(API2_RESPONSE_DATA),""String_Node_Str"" + ""String_Node_Str"" + oldVersionInvokeResponse.getData() + ""String_Node_Str""+ API2_RESPONSE_DATA);
  assertFalse(oldVersionInvokeResponse.getData().contains(API1_RESPONSE_DATA),""String_Node_Str"" + ""String_Node_Str"" + oldVersionInvokeResponse.getData() + ""String_Node_Str""+ API2_RESPONSE_DATA);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokeAPIAfterChangeAPIEndPointURLWithNewEndPointURL() throws Exception {
  HttpResponse oldVersionInvokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0),requestHeaders);
  assertEquals(oldVersionInvokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(oldVersionInvokeResponse.getData().contains(API2_RESPONSE_DATA),""String_Node_Str"" + ""String_Node_Str"" + oldVersionInvokeResponse.getData() + ""String_Node_Str""+ API2_RESPONSE_DATA);
  assertFalse(oldVersionInvokeResponse.getData().contains(API1_RESPONSE_DATA),""String_Node_Str"" + ""String_Node_Str"" + oldVersionInvokeResponse.getData() + ""String_Node_Str""+ API2_RESPONSE_DATA);
}",0.9846335697399528
114833,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testEditEndPointURL() throws APIManagerIntegrationTestException, MalformedURLException {
  APICreationRequestBean apiCreationRequestBeanUpdate=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(API2_END_POINT_URL));
  apiCreationRequestBeanUpdate.setTags(API_TAGS);
  apiCreationRequestBeanUpdate.setDescription(API_DESCRIPTION);
  HttpResponse updateAPIHTTPResponse=apiPublisherClientUser1.updateAPI(apiCreationRequestBeanUpdate);
  assertEquals(updateAPIHTTPResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
  assertEquals(getValueFromJSON(updateAPIHTTPResponse,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ updateAPIHTTPResponse.getData());
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testEditEndPointURL() throws APIManagerIntegrationTestException, MalformedURLException {
  api2EndPointUrl=getGatewayURLHttp() + API2_END_POINT_POSTFIX_URL;
  APICreationRequestBean apiCreationRequestBeanUpdate=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(api2EndPointUrl));
  apiCreationRequestBeanUpdate.setTags(API_TAGS);
  apiCreationRequestBeanUpdate.setDescription(API_DESCRIPTION);
  HttpResponse updateAPIHTTPResponse=apiPublisherClientUser1.updateAPI(apiCreationRequestBeanUpdate);
  assertEquals(updateAPIHTTPResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
  assertEquals(getValueFromJSON(updateAPIHTTPResponse,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ updateAPIHTTPResponse.getData());
  waitForAPIDeployment();
}",0.9353336782203828
114834,"@AfterClass(alwaysRun=true) public void cleanUpArtifacts() throws APIManagerIntegrationTestException {
  apiStoreClientUser1.removeApplication(APPLICATION_NAME);
  deleteAPI(apiIdentifier,apiPublisherClientUser1);
}","@AfterClass(alwaysRun=true) public void cleanUpArtifacts() throws Exception {
  apiStoreClientUser1.removeApplication(APPLICATION_NAME);
  deleteAPI(apiIdentifier,apiPublisherClientUser1);
  super.cleanUp();
}",0.8962264150943396
114835,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIAccessWithInvalidToken() throws XPathExpressionException, APIManagerIntegrationTestException {
  apiPublisher.login(user.getUserName(),user.getPassword());
  String apiContext=""String_Node_Str"";
  String endpointUrl=""String_Node_Str"";
  APIRequest apiRequest=null;
  try {
    apiRequest=new APIRequest(API_NAME,apiContext,new URL(endpointUrl));
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"" + endpointUrl,e);
    assertTrue(false);
  }
  apiRequest.setVersion(API_VERSION);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setTier(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String apiInvocationUrl=getAPIInvocationURLHttp(apiContext,API_VERSION);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  try {
    HttpResponse httpResponse=HttpRequestUtil.doGet(apiInvocationUrl,headers);
    Assert.assertNotNull(httpResponse);
    Assert.assertEquals(401,httpResponse.getResponseCode());
    String responsePayload=httpResponse.getData();
    Assert.assertNotNull(responsePayload);
    String[] responseArray=responsePayload.split(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",responseArray.length > 1);
    Assert.assertTrue(""String_Node_Str"" + ""String_Node_Str"" + responseArray[1] + ""String_Node_Str"",URLDecoder.decode(responseArray[1],""String_Node_Str"").contains(""String_Node_Str""));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + apiInvocationUrl,e);
    Assert.assertTrue(""String_Node_Str"" + apiInvocationUrl + ""String_Node_Str""+ e.getMessage(),false);
  }
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testAPIAccessWithInvalidToken() throws XPathExpressionException, APIManagerIntegrationTestException {
  apiPublisher.login(user.getUserName(),user.getPassword());
  String apiContext=""String_Node_Str"";
  String endpointUrl=""String_Node_Str"";
  APIRequest apiRequest=null;
  try {
    apiRequest=new APIRequest(API_NAME,apiContext,new URL(endpointUrl));
  }
 catch (  MalformedURLException e) {
    log.error(""String_Node_Str"" + endpointUrl,e);
    assertTrue(false);
  }
  apiRequest.setVersion(API_VERSION);
  apiRequest.setTiersCollection(""String_Node_Str"");
  apiRequest.setTier(""String_Node_Str"");
  apiRequest.setProvider(provider);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,user.getUserName(),APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String apiInvocationUrl=getAPIInvocationURLHttp(apiContext,API_VERSION);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  try {
    HttpResponse httpResponse=HttpRequestUtil.doGet(apiInvocationUrl,headers);
    Assert.assertNotNull(httpResponse);
    Assert.assertEquals(401,httpResponse.getResponseCode());
    String responsePayload=httpResponse.getData();
    Assert.assertNotNull(responsePayload);
    String description=AXIOMUtil.stringToOM(responsePayload).getFirstChildWithName(new QName(""String_Node_Str"",""String_Node_Str"")).getText();
    Assert.assertNotNull(""String_Node_Str"",description);
    Assert.assertTrue(""String_Node_Str"" + ""String_Node_Str"" + description + ""String_Node_Str"",description.contains(""String_Node_Str""));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + apiInvocationUrl,e);
    Assert.assertTrue(""String_Node_Str"" + apiInvocationUrl + ""String_Node_Str""+ e.getMessage(),false);
  }
catch (  XMLStreamException e) {
    log.error(""String_Node_Str"",e);
    Assert.assertTrue(""String_Node_Str"" + e.getMessage(),false);
  }
}",0.8765719608756404
114836,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokeAPIAfterChangeAPIEndPointURLWithNewEndPointURL() throws Exception {
  waitForAPIDeployment();
  HttpResponse oldVersionInvokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0),requestHeaders);
  assertEquals(oldVersionInvokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(oldVersionInvokeResponse.getData().contains(API2_RESPONSE_DATA),""String_Node_Str"" + ""String_Node_Str"" + oldVersionInvokeResponse.getData() + ""String_Node_Str""+ API2_RESPONSE_DATA);
  assertFalse(oldVersionInvokeResponse.getData().contains(API1_RESPONSE_DATA),""String_Node_Str"" + ""String_Node_Str"" + oldVersionInvokeResponse.getData() + ""String_Node_Str""+ API2_RESPONSE_DATA);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokeAPIAfterChangeAPIEndPointURLWithNewEndPointURL() throws Exception {
  HttpResponse oldVersionInvokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0),requestHeaders);
  assertEquals(oldVersionInvokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(oldVersionInvokeResponse.getData().contains(API2_RESPONSE_DATA),""String_Node_Str"" + ""String_Node_Str"" + oldVersionInvokeResponse.getData() + ""String_Node_Str""+ API2_RESPONSE_DATA);
  assertFalse(oldVersionInvokeResponse.getData().contains(API1_RESPONSE_DATA),""String_Node_Str"" + ""String_Node_Str"" + oldVersionInvokeResponse.getData() + ""String_Node_Str""+ API2_RESPONSE_DATA);
}",0.9846335697399528
114837,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testEditEndPointURL() throws APIManagerIntegrationTestException, MalformedURLException {
  APICreationRequestBean apiCreationRequestBeanUpdate=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(API2_END_POINT_URL));
  apiCreationRequestBeanUpdate.setTags(API_TAGS);
  apiCreationRequestBeanUpdate.setDescription(API_DESCRIPTION);
  HttpResponse updateAPIHTTPResponse=apiPublisherClientUser1.updateAPI(apiCreationRequestBeanUpdate);
  assertEquals(updateAPIHTTPResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
  assertEquals(getValueFromJSON(updateAPIHTTPResponse,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ updateAPIHTTPResponse.getData());
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testEditEndPointURL() throws APIManagerIntegrationTestException, MalformedURLException {
  api2EndPointUrl=getGatewayURLHttp() + API2_END_POINT_POSTFIX_URL;
  APICreationRequestBean apiCreationRequestBeanUpdate=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(api2EndPointUrl));
  apiCreationRequestBeanUpdate.setTags(API_TAGS);
  apiCreationRequestBeanUpdate.setDescription(API_DESCRIPTION);
  HttpResponse updateAPIHTTPResponse=apiPublisherClientUser1.updateAPI(apiCreationRequestBeanUpdate);
  assertEquals(updateAPIHTTPResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
  assertEquals(getValueFromJSON(updateAPIHTTPResponse,""String_Node_Str""),""String_Node_Str"",""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ updateAPIHTTPResponse.getData());
  waitForAPIDeployment();
}",0.9353336782203828
114838,"@AfterClass(alwaysRun=true) public void cleanUpArtifacts() throws APIManagerIntegrationTestException {
  apiStoreClientUser1.removeApplication(APPLICATION_NAME);
  deleteAPI(apiIdentifier,apiPublisherClientUser1);
}","@AfterClass(alwaysRun=true) public void cleanUpArtifacts() throws Exception {
  apiStoreClientUser1.removeApplication(APPLICATION_NAME);
  deleteAPI(apiIdentifier,apiPublisherClientUser1);
  super.cleanUp();
}",0.8962264150943396
114839,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=false) public void testAPIAccessWhenJWTCachingEnabledTestCase() throws APIManagerIntegrationTestException, XPathExpressionException, IOException, JSONException, InterruptedException {
  String applicationName=""String_Node_Str"";
  String apiName=""String_Node_Str"";
  String apiContext=""String_Node_Str"";
  String apiVersion=""String_Node_Str"";
  String description=""String_Node_Str"";
  String endpointURL=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"";
  String apiTier=APIMIntegrationConstants.API_TIER.GOLD;
  String tags=""String_Node_Str"";
  int waitingSecs=900;
  addAPI(apiName,apiVersion,apiContext,description,endpointURL,tags,providerName);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,storeContext.getContextTenant().getContextUser().getUserName());
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=gatewayUrlsWrk.getWebAppURLNhttp() + apiContext + ""String_Node_Str""+ apiVersion;
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  HttpResponse httpResponse=HttpRequestUtil.doGet(url,headers);
  assertEquals(""String_Node_Str"" + url,200,httpResponse.getResponseCode());
  log.info(""String_Node_Str"" + waitingSecs + ""String_Node_Str"");
  Thread.sleep(waitingSecs * 1000);
  httpResponse=HttpRequestUtil.doGet(url,headers);
  assertEquals(""String_Node_Str"" + url + ""String_Node_Str"",200,httpResponse.getResponseCode());
}","/** 
 * This test case is a test for the fix fix for APIMANAGER-3912, where jwt claims are attempted to retrieve from an invalidated cache and hence failed. In carbon 4.2 products cache invalidation timeout is not configurable and is hardcoded to 15 mins. So the test case will take approximately 15mins to complete and it will delay the product build unnecessarily, hence the test case is disabled.
 */
@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=false) public void testAPIAccessWhenJWTCachingEnabledTestCase() throws APIManagerIntegrationTestException, XPathExpressionException, IOException, JSONException, InterruptedException {
  String applicationName=""String_Node_Str"";
  String apiName=""String_Node_Str"";
  String apiContext=""String_Node_Str"";
  String apiVersion=""String_Node_Str"";
  String description=""String_Node_Str"";
  String endpointURL=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"";
  String apiTier=APIMIntegrationConstants.API_TIER.GOLD;
  String tags=""String_Node_Str"";
  int waitingSecs=900;
  addAPI(apiName,apiVersion,apiContext,description,endpointURL,tags,providerName);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,storeContext.getContextTenant().getContextUser().getUserName());
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=gatewayUrlsWrk.getWebAppURLNhttp() + apiContext + ""String_Node_Str""+ apiVersion;
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  HttpResponse httpResponse=HttpRequestUtil.doGet(url,headers);
  assertEquals(""String_Node_Str"" + url,200,httpResponse.getResponseCode());
  log.info(""String_Node_Str"" + waitingSecs + ""String_Node_Str"");
  Thread.sleep(waitingSecs * 1000);
  httpResponse=HttpRequestUtil.doGet(url,headers);
  assertEquals(""String_Node_Str"" + url + ""String_Node_Str"",200,httpResponse.getResponseCode());
}",0.9203155818540434
114840,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void CheckAccessControlAllowCredentialsHeadersWithSpecificOrigin() throws Exception {
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    serverConfigurationManager.restartGracefully();
  }
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION));
  get.addHeader(""String_Node_Str"",ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE_LOCALHOST);
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  org.apache.http.HttpResponse response=httpclient.execute(get);
  assertEquals(response.getStatusLine().getStatusCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  log.info(""String_Node_Str"");
  for (  Header header : responseHeaders) {
    log.info(header.getName() + ""String_Node_Str"" + header.getValue());
  }
  Header header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE_LOCALHOST,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertNotNull(pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER),ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER + ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void CheckAccessControlAllowCredentialsHeadersWithSpecificOrigin() throws Exception {
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    serverConfigurationManager.restartGracefully();
    super.init();
  }
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION));
  get.addHeader(""String_Node_Str"",ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE_LOCALHOST);
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  org.apache.http.HttpResponse response=httpclient.execute(get);
  assertEquals(response.getStatusLine().getStatusCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  log.info(""String_Node_Str"");
  for (  Header header : responseHeaders) {
    log.info(header.getName() + ""String_Node_Str"" + header.getValue());
  }
  Header header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE_LOCALHOST,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertNotNull(pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER),ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER + ""String_Node_Str"");
}",0.9948630136986302
114841,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"") public void CheckAccessControlAllowCredentialsHeadersWithAnyOrigin() throws Exception {
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    serverConfigurationManager.restartGracefully();
  }
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION));
  get.addHeader(""String_Node_Str"",""String_Node_Str"");
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  org.apache.http.HttpResponse response=httpclient.execute(get);
  assertEquals(response.getStatusLine().getStatusCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  log.info(""String_Node_Str"");
  for (  Header header : responseHeaders) {
    log.info(header.getName() + ""String_Node_Str"" + header.getValue());
  }
  Header header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE_ALL,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertNull(pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER),ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER + ""String_Node_Str"" + ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"") public void CheckAccessControlAllowCredentialsHeadersWithAnyOrigin() throws Exception {
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    serverConfigurationManager.restartGracefully();
    super.init();
  }
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION));
  get.addHeader(""String_Node_Str"",""String_Node_Str"");
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  org.apache.http.HttpResponse response=httpclient.execute(get);
  assertEquals(response.getStatusLine().getStatusCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  log.info(""String_Node_Str"");
  for (  Header header : responseHeaders) {
    log.info(header.getName() + ""String_Node_Str"" + header.getValue());
  }
  Header header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE_ALL,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertNull(pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER),ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER + ""String_Node_Str"" + ""String_Node_Str"");
}",0.9947826086956522
114842,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true) public void testEnableJWTAndClaims() throws Exception {
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  String username=keyManagerContext.getContextTenant().getContextUser().getUserName();
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(username,""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(username,""String_Node_Str"",""String_Node_Str"",profile);
  serverConfigurationManager.restartGracefully();
  addAPI(apiName,apiVersion,apiContext,description,wireMonitorURL,tags,providerName);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,storeContext.getContextTenant().getContextUser().getUserName());
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"";
  APIMTestCaseUtils.sendGetRequest(url,accessToken);
  String serverMessage=server.getCapturedMessage();
  String decodedJWTHeaderString=APIMTestCaseUtils.getDecodedJWTHeader(serverMessage);
  if (decodedJWTHeaderString != null) {
    log.debug(""String_Node_Str"" + decodedJWTHeaderString);
    JSONObject jsonHeaderObject=new JSONObject(decodedJWTHeaderString);
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
  }
  String decodedJWTString=APIMTestCaseUtils.getDecodedJWT(serverMessage);
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  checkDefaultUserClaims(jsonObject);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  boolean bExceptionOccured=false;
  try {
    jsonObject.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    bExceptionOccured=true;
  }
  assertTrue(""String_Node_Str"",bExceptionOccured);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true) public void testEnableJWTAndClaims() throws Exception {
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  String username=keyManagerContext.getContextTenant().getContextUser().getUserName();
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(username,""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(username,""String_Node_Str"",""String_Node_Str"",profile);
  serverConfigurationManager.restartGracefully();
  super.init();
  addAPI(apiName,apiVersion,apiContext,description,wireMonitorURL,tags,providerName);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,storeContext.getContextTenant().getContextUser().getUserName());
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"";
  APIMTestCaseUtils.sendGetRequest(url,accessToken);
  String serverMessage=server.getCapturedMessage();
  String decodedJWTHeaderString=APIMTestCaseUtils.getDecodedJWTHeader(serverMessage);
  if (decodedJWTHeaderString != null) {
    log.debug(""String_Node_Str"" + decodedJWTHeaderString);
    JSONObject jsonHeaderObject=new JSONObject(decodedJWTHeaderString);
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
  }
  String decodedJWTString=APIMTestCaseUtils.getDecodedJWT(serverMessage);
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  checkDefaultUserClaims(jsonObject);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  boolean bExceptionOccured=false;
  try {
    jsonObject.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    bExceptionOccured=true;
  }
  assertTrue(""String_Node_Str"",bExceptionOccured);
}",0.9975155279503104
114843,"private void checkDefaultUserClaims(JSONObject jsonObject) throws JSONException {
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"",claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(APIMIntegrationConstants.APPLICATION_TIER.LARGE));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str"" + ""String_Node_Str"" + jsonObject.getString(""String_Node_Str"")));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str"") && claim.contains(""String_Node_Str"") && claim.contains(""String_Node_Str""));
}","private void checkDefaultUserClaims(JSONObject jsonObject) throws JSONException {
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"",claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(user.getUserName()));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(APIMIntegrationConstants.APPLICATION_TIER.LARGE));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str"" + ""String_Node_Str"" + jsonObject.getString(""String_Node_Str"")));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str"") && claim.contains(""String_Node_Str""));
}",0.9360313315926893
114844,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true) public void testEnableJWTAndClaims() throws Exception {
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  String username=keyManagerContext.getContextTenant().getContextUser().getUserName();
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(username,""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(username,""String_Node_Str"",""String_Node_Str"",profile);
  serverConfigurationManager.restartGracefully();
  addAPI(apiName,apiVersion,apiContext,description,wireMonitorURL,tags,providerName);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,storeContext.getContextTenant().getContextUser().getUserName());
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  if (response.getJSONObject(""String_Node_Str"") == null) {
    serverConfigurationManager.restartGracefully();
    Thread.sleep(10000);
    responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
    response=new JSONObject(responseString);
  }
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"";
  APIMTestCaseUtils.sendGetRequest(url,accessToken);
  String serverMessage=server.getCapturedMessage();
  String decodedJWTHeaderString=APIMTestCaseUtils.getDecodedURLSafeJWTHeader(serverMessage);
  if (decodedJWTHeaderString != null) {
    log.debug(""String_Node_Str"" + decodedJWTHeaderString);
    JSONObject jsonHeaderObject=new JSONObject(decodedJWTHeaderString);
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
  }
  String decodedJWTString=APIMTestCaseUtils.getDecodedURLSafeJWT(serverMessage);
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  checkDefaultUserClaims(jsonObject);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  boolean bExceptionOccured=false;
  try {
    jsonObject.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    bExceptionOccured=true;
  }
  assertTrue(""String_Node_Str"",bExceptionOccured);
  Thread.sleep(20000);
  Thread.sleep(20000);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true) public void testEnableJWTAndClaims() throws Exception {
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),user.getUserName(),user.getPassword());
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(user.getUserNameWithoutDomain(),""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(user.getUserNameWithoutDomain(),""String_Node_Str"",""String_Node_Str"",profile);
  ServerConfigurationManager serverConfigManagerForTenant=new ServerConfigurationManager(superTenantKeyManagerContext);
  serverConfigManagerForTenant.restartGracefully();
  super.init(userMode);
  addAPI(apiName,apiVersion,apiContext,description,wireMonitorURL,tags,providerName);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(user.getUserName(),user.getPassword());
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,user.getUserName());
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=getAPIInvocationURLHttp(""String_Node_Str"",""String_Node_Str"");
  APIMTestCaseUtils.sendGetRequest(url,accessToken);
  String serverMessage=server.getCapturedMessage();
  log.info(""String_Node_Str"" + serverMessage);
  String decodedJWTHeaderString=APIMTestCaseUtils.getDecodedURLSafeJWTHeader(serverMessage);
  if (decodedJWTHeaderString != null) {
    log.debug(""String_Node_Str"" + decodedJWTHeaderString);
    JSONObject jsonHeaderObject=new JSONObject(decodedJWTHeaderString);
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
    Assert.assertEquals(jsonHeaderObject.getString(""String_Node_Str""),""String_Node_Str"");
  }
  String decodedJWTString=APIMTestCaseUtils.getDecodedURLSafeJWT(serverMessage);
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  checkDefaultUserClaims(jsonObject);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  boolean bExceptionOccured=false;
  try {
    jsonObject.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    bExceptionOccured=true;
  }
  assertTrue(""String_Node_Str"",bExceptionOccured);
}",0.7268118103191172
114845,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  super.cleanUp();
  serverConfigurationManager.restoreToLastConfiguration();
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  super.cleanUp();
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    serverConfigurationManager.restoreToLastConfiguration();
  }
}",0.8338028169014085
114846,"private void addAPI(String apiName,String apiVersion,String apiContext,String description,String endpointURL,String tags,String providerName) throws APIManagerIntegrationTestException, MalformedURLException, XPathExpressionException {
  APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword());
  APIRequest apiRequest=new APIRequest(apiName,apiContext,new URL(endpointURL));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(apiVersion);
  apiRequest.setVisibility(""String_Node_Str"");
  apiRequest.setProvider(providerName);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
}","private void addAPI(String apiName,String apiVersion,String apiContext,String description,String endpointURL,String tags,String providerName) throws APIManagerIntegrationTestException, MalformedURLException, XPathExpressionException {
  APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  APIRequest apiRequest=new APIRequest(apiName,apiContext,new URL(endpointURL));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(apiVersion);
  apiRequest.setVisibility(""String_Node_Str"");
  apiRequest.setProvider(providerName);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(providerName,apiName,apiVersion,APIMIntegrationConstants.IS_API_EXISTS);
}",0.8871635610766045
114847,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init();
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  serverConfigurationManager=new ServerConfigurationManager(gatewayContextWrk);
  serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ ""String_Node_Str""));
  serverConfigurationManager.applyConfiguration(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ ""String_Node_Str""));
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  URL url=new URL(gatewayUrlsWrk.getWebAppURLHttp());
  wireMonitorURL=""String_Node_Str"" + url.getHost() + ""String_Node_Str""+ hostPort;
  server=new WireMonitorServer(hostPort);
  server.setReadTimeOut(30000);
  server.start();
  String gatewaySessionCookie=createSession(gatewayContextMgt);
  loadSynapseConfigurationFromClasspath(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"",gatewayContextMgt,gatewaySessionCookie);
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  if (TestUserMode.SUPER_TENANT_ADMIN == userMode) {
    serverConfigurationManager=new ServerConfigurationManager(gatewayContextWrk);
    serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    serverConfigurationManager.applyConfiguration(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
    hostPort=9989;
  }
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),user.getUserName(),user.getPassword());
  URL url=new URL(gatewayUrlsWrk.getWebAppURLHttp());
  wireMonitorURL=""String_Node_Str"" + url.getHost() + ""String_Node_Str""+ hostPort;
  server=new WireMonitorServer(hostPort);
  server.setReadTimeOut(30000);
  server.start();
  providerName=user.getUserName();
}",0.6901743264659271
114848,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true) public void testSpecificUserJWTClaims() throws Exception {
  server.setFinished(false);
  server.start();
  String subscriberUser=""String_Node_Str"";
  String password=""String_Node_Str"";
  String accessToken;
  if ((userManagementClient1 != null) && !userManagementClient1.userNameExists(""String_Node_Str"",subscriberUser)) {
    userManagementClient1.addUser(subscriberUser,password,new String[]{""String_Node_Str""},null);
  }
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUser,""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUser,""String_Node_Str"",""String_Node_Str"",profile);
  serverConfigurationManager.restartGracefully();
  super.init();
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(subscriberUser,password);
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,providerName);
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  if (response.getJSONObject(""String_Node_Str"") == null) {
    log.info(""String_Node_Str"");
    serverConfigurationManager.restartGracefully();
    super.init();
    Thread.sleep(10000);
    responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
    response=new JSONObject(responseString);
  }
  accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"";
  APIMTestCaseUtils.sendGetRequest(url,accessToken);
  String serverMessage=server.getCapturedMessage();
  Assert.assertTrue(serverMessage.contains(""String_Node_Str""),""String_Node_Str"" + serverMessage);
  String decodedJWTString=APIMTestCaseUtils.getDecodedURLSafeJWT(serverMessage);
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"",claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  apiStoreRestClient.removeAPISubscriptionByApplicationName(apiName,apiVersion,providerName,applicationName);
  apiStoreRestClient.removeApplication(applicationName);
  Thread.sleep(20000);
  Thread.sleep(20000);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true,dependsOnMethods=""String_Node_Str"") public void testSpecificUserJWTClaims() throws Exception {
  server.setFinished(false);
  server.start();
  String subscriberUser=""String_Node_Str"" + user.getUserDomain();
  String password=""String_Node_Str"";
  String accessToken;
  if ((userManagementClient1 != null) && !userManagementClient1.userNameExists(""String_Node_Str"",subscriberUser)) {
    userManagementClient1.addUser(subscriberUser,password,new String[]{""String_Node_Str""},null);
  }
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUser,""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUser,""String_Node_Str"",""String_Node_Str"",profile);
  ServerConfigurationManager serverConfigManagerForTenant=new ServerConfigurationManager(superTenantKeyManagerContext);
  serverConfigManagerForTenant.restartGracefully();
  super.init(userMode);
  waitForAPIDeploymentSync(providerName,apiName,apiVersion,APIMIntegrationConstants.IS_API_EXISTS);
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(subscriberUser,password);
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,providerName);
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=getAPIInvocationURLHttp(""String_Node_Str"",""String_Node_Str"");
  APIMTestCaseUtils.sendGetRequest(url,accessToken);
  String serverMessage=server.getCapturedMessage();
  log.info(""String_Node_Str"" + serverMessage);
  Assert.assertTrue(serverMessage.contains(""String_Node_Str""),""String_Node_Str"" + serverMessage);
  String decodedJWTString=APIMTestCaseUtils.getDecodedURLSafeJWT(serverMessage);
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"",claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  apiStoreRestClient.removeAPISubscriptionByApplicationName(apiName,apiVersion,providerName,applicationName);
  apiStoreRestClient.removeApplication(applicationName);
}",0.7985633043998803
114849,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws AutomationUtilException, XPathExpressionException, IOException, APIManagerIntegrationTestException, URISyntaxException, ResourceAdminServiceExceptionException {
  super.init();
  ServerConfigurationManager serverConfigurationManager;
  serverConfigurationManager=new ServerConfigurationManager(gatewayContextMgt);
  serverConfigurationManager.copyToComponentLib(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
  serverConfigurationManager.restartGracefully();
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  userName=user.getUserName();
  resourceAdminServiceClient=new ResourceAdminServiceClient(gatewayContextMgt.getContextUrls().getBackEndUrl(),createSession(gatewayContextMgt));
  originalWFExtentionsXML=resourceAdminServiceClient.getTextContent(DEFAULT_WF_EXTENTIONS_XML_REG_CONFIG_LOCATION);
  newWFExtentionsXML=readFile(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws AutomationUtilException, XPathExpressionException, IOException, APIManagerIntegrationTestException, URISyntaxException, ResourceAdminServiceExceptionException {
  super.init();
  ServerConfigurationManager serverConfigurationManager;
  serverConfigurationManager=new ServerConfigurationManager(gatewayContextMgt);
  serverConfigurationManager.copyToComponentLib(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
  serverConfigurationManager.restartGracefully();
  super.init();
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  userName=user.getUserName();
  resourceAdminServiceClient=new ResourceAdminServiceClient(gatewayContextMgt.getContextUrls().getBackEndUrl(),createSession(gatewayContextMgt));
  originalWFExtentionsXML=resourceAdminServiceClient.getTextContent(DEFAULT_WF_EXTENTIONS_XML_REG_CONFIG_LOCATION);
  newWFExtentionsXML=readFile(getAMResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
}",0.9931093884582256
114850,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  if (apiStore != null) {
    apiStore.removeApplication(APP_NAME);
  }
  if (apiPublisher != null) {
    apiPublisher.deleteAPI(API_NAME,API_VERSION,apiProvider);
  }
  if (userManagementClient1 != null) {
    userManagementClient1.deleteUser(USER_SAM);
    userManagementClient1.deleteUser(APP_DEV_USER);
    userManagementClient1.deleteRole(SUBSCRIBER_ROLE);
  }
  serverManager.restoreToLastConfiguration();
  serverManager.restartGracefully();
  log.info(""String_Node_Str"");
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  if (apiStore != null) {
    apiStore.removeApplication(APP_NAME);
  }
  if (apiPublisher != null) {
    apiPublisher.deleteAPI(API_NAME,API_VERSION,apiProvider);
  }
  if (userManagementClient1 != null) {
    userManagementClient1.deleteUser(USER_SAM);
    userManagementClient1.deleteUser(APP_DEV_USER);
    userManagementClient1.deleteRole(SUBSCRIBER_ROLE);
  }
  serverManager.restoreToLastConfiguration();
  log.info(""String_Node_Str"");
}",0.9539040451552212
114851,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init();
  apiProvider=publisherContext.getSuperTenant().getContextUser().getUserName();
  String carbonHome=System.getProperty(ServerConstants.CARBON_HOME);
  String artifactsLocation=TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  String apimConfigArtifactLocation=artifactsLocation + APIM_CONFIG_XML;
  String identityConfigArtifactLocation=artifactsLocation + IDENTITY_CONFIG_XML;
  String apimRepositoryConfigLocation=carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ APIM_CONFIG_XML;
  String identityRepositoryConfigLocation=carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ IDENTITY_CONFIG_XML;
  File apimConfSourceFile=new File(apimConfigArtifactLocation);
  File apimConfTargetFile=new File(apimRepositoryConfigLocation);
  File identityConfSourceFile=new File(identityConfigArtifactLocation);
  File identityConfTargetFile=new File(identityRepositoryConfigLocation);
  serverManager=new ServerConfigurationManager(gatewayContextWrk);
  serverManager.applyConfigurationWithoutRestart(apimConfSourceFile,apimConfTargetFile,true);
  log.info(""String_Node_Str"" + apimConfigArtifactLocation + ""String_Node_Str""+ apimRepositoryConfigLocation);
  serverManager.applyConfigurationWithoutRestart(identityConfSourceFile,identityConfTargetFile,true);
  log.info(""String_Node_Str"" + identityConfigArtifactLocation + ""String_Node_Str""+ identityRepositoryConfigLocation);
  serverManager.restartGracefully();
  String publisherURLHttp=publisherUrls.getWebAppURLHttp();
  String storeURLHttp=storeUrls.getWebAppURLHttp();
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiStore=new APIStoreRestClient(storeURLHttp);
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init();
  apiProvider=publisherContext.getSuperTenant().getContextUser().getUserName();
  String carbonHome=System.getProperty(ServerConstants.CARBON_HOME);
  String artifactsLocation=TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  String apimConfigArtifactLocation=artifactsLocation + APIM_CONFIG_XML;
  String identityConfigArtifactLocation=artifactsLocation + IDENTITY_CONFIG_XML;
  String apimRepositoryConfigLocation=carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ APIM_CONFIG_XML;
  String identityRepositoryConfigLocation=carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ IDENTITY_CONFIG_XML;
  File apimConfSourceFile=new File(apimConfigArtifactLocation);
  File apimConfTargetFile=new File(apimRepositoryConfigLocation);
  File identityConfSourceFile=new File(identityConfigArtifactLocation);
  File identityConfTargetFile=new File(identityRepositoryConfigLocation);
  serverManager=new ServerConfigurationManager(gatewayContextWrk);
  serverManager.applyConfigurationWithoutRestart(apimConfSourceFile,apimConfTargetFile,true);
  log.info(""String_Node_Str"" + apimConfigArtifactLocation + ""String_Node_Str""+ apimRepositoryConfigLocation);
  serverManager.applyConfigurationWithoutRestart(identityConfSourceFile,identityConfTargetFile,true);
  log.info(""String_Node_Str"" + identityConfigArtifactLocation + ""String_Node_Str""+ identityRepositoryConfigLocation);
  serverManager.restartGracefully();
  super.init();
  String publisherURLHttp=publisherUrls.getWebAppURLHttp();
  String storeURLHttp=storeUrls.getWebAppURLHttp();
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiStore=new APIStoreRestClient(storeURLHttp);
}",0.99603567888999
114852,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  if (apiPublisher != null) {
    apiPublisher.deleteAPI(API_NAME,API_VERSION,apiProvider);
  }
  serverManager.restoreToLastConfiguration();
  serverManager.restartGracefully();
  log.info(""String_Node_Str"");
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  if (apiPublisher != null) {
    apiPublisher.deleteAPI(API_NAME,API_VERSION,apiProvider);
  }
  serverManager.restoreToLastConfiguration();
  log.info(""String_Node_Str"");
}",0.9292543021032504
114853,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init();
  apiProvider=publisherContext.getSuperTenant().getContextUser().getUserName();
  String gatewaySessionCookie=createSession(gatewayContextMgt);
  String carbonHome=System.getProperty(ServerConstants.CARBON_HOME);
  String artifactsLocation=TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  String apimConfigArtifactLocation=artifactsLocation + APIM_CONFIG_XML;
  String apimRepositoryConfigLocation=carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ APIM_CONFIG_XML;
  String masterDatasourceLocation=artifactsLocation + DATASOURCE_XML;
  String masterDatasourceConfigLocation=carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ DATASOURCE_XML;
  File apimConfSourceFile=new File(apimConfigArtifactLocation);
  File apimConfTargetFile=new File(apimRepositoryConfigLocation);
  File dsConfSourceFile=new File(masterDatasourceLocation);
  File dsConfTargetFile=new File(masterDatasourceConfigLocation);
  serverManager=new ServerConfigurationManager(gatewayContextMgt);
  loadSynapseConfigurationFromClasspath(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"",gatewayContextMgt,gatewaySessionCookie);
  serverManager.applyConfigurationWithoutRestart(apimConfSourceFile,apimConfTargetFile,true);
  log.info(""String_Node_Str"" + apimConfigArtifactLocation + ""String_Node_Str""+ apimRepositoryConfigLocation);
  serverManager.applyConfigurationWithoutRestart(dsConfSourceFile,dsConfTargetFile,true);
  log.info(""String_Node_Str"" + masterDatasourceLocation + ""String_Node_Str""+ masterDatasourceConfigLocation);
  serverManager.restartGracefully();
  String publisherURLHttp=publisherUrls.getWebAppURLHttp();
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init();
  apiProvider=publisherContext.getSuperTenant().getContextUser().getUserName();
  String gatewaySessionCookie=createSession(gatewayContextMgt);
  String carbonHome=System.getProperty(ServerConstants.CARBON_HOME);
  String artifactsLocation=TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  String apimConfigArtifactLocation=artifactsLocation + APIM_CONFIG_XML;
  String apimRepositoryConfigLocation=carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ APIM_CONFIG_XML;
  String masterDatasourceLocation=artifactsLocation + DATASOURCE_XML;
  String masterDatasourceConfigLocation=carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ DATASOURCE_XML;
  File apimConfSourceFile=new File(apimConfigArtifactLocation);
  File apimConfTargetFile=new File(apimRepositoryConfigLocation);
  File dsConfSourceFile=new File(masterDatasourceLocation);
  File dsConfTargetFile=new File(masterDatasourceConfigLocation);
  serverManager=new ServerConfigurationManager(gatewayContextMgt);
  loadSynapseConfigurationFromClasspath(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"",gatewayContextMgt,gatewaySessionCookie);
  serverManager.applyConfigurationWithoutRestart(apimConfSourceFile,apimConfTargetFile,true);
  log.info(""String_Node_Str"" + apimConfigArtifactLocation + ""String_Node_Str""+ apimRepositoryConfigLocation);
  serverManager.applyConfigurationWithoutRestart(dsConfSourceFile,dsConfTargetFile,true);
  log.info(""String_Node_Str"" + masterDatasourceLocation + ""String_Node_Str""+ masterDatasourceConfigLocation);
  serverManager.restartGracefully();
  super.init();
  String publisherURLHttp=publisherUrls.getWebAppURLHttp();
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
}",0.9963031423290204
114854,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testLCStateChengeVisibility() throws Exception {
  HttpResponse resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.PUBLISHED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.BLOCKED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeployment();
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.DEPRECATED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_NOT_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testLCStateChengeVisibility() throws Exception {
  HttpResponse resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.PUBLISHED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.BLOCKED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeployment();
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.DEPRECATED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeployment();
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
}",0.960014540167212
114855,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"" + ""String_Node_Str"") public void testScriptMediatorWithNullObject() throws Exception {
  String endpoint=getGatewayURLNhttp() + ""String_Node_Str"";
  waitForAPIDeploymentSync(user.getUserName(),APIName,APIVersion,APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse response=HttpRequestUtil.doGet(endpoint,new HashMap<String,String>());
  assertNotNull(response,""String_Node_Str"");
  JSONObject jsonResponse=new JSONObject(response.getData());
  assertEquals(jsonResponse.getString(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  assertEquals(jsonResponse.getString(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"" + jsonResponse.getString(""String_Node_Str""));
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"" + ""String_Node_Str"") public void testScriptMediatorWithNullObject() throws Exception {
  String endpoint=getGatewayURLNhttp() + ""String_Node_Str"";
  waitForAPIDeploymentSync(user.getUserName(),APIName,APIVersion + ""String_Node_Str"",APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse response=HttpRequestUtil.doGet(endpoint,new HashMap<String,String>());
  assertNotNull(response,""String_Node_Str"");
  JSONObject jsonResponse=new JSONObject(response.getData());
  assertEquals(jsonResponse.getString(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  assertEquals(jsonResponse.getString(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"" + jsonResponse.getString(""String_Node_Str""));
}",0.9870466321243524
114856,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  String synapseConfFile;
  super.init(userMode);
  gatewaySessionCookie=createSession(gatewayContextMgt);
  if (gatewayContextWrk.getContextTenant().getDomain().equals(FrameworkConstants.SUPER_TENANT_DOMAIN_NAME)) {
    synapseConfFile=""String_Node_Str"";
  }
 else {
    synapseConfFile=""String_Node_Str"";
  }
  loadSynapseConfigurationFromClasspath(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ synapseConfFile,gatewayContextMgt,gatewaySessionCookie);
  waitForAPIDeploymentSync(gatewayContextWrk.getContextTenant().getContextUser().getUserName(),""String_Node_Str"",""String_Node_Str"",APIMIntegrationConstants.IS_API_EXISTS);
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  String synapseConfFile;
  super.init(userMode);
  gatewaySessionCookie=createSession(gatewayContextMgt);
  if (gatewayContextWrk.getContextTenant().getDomain().equals(FrameworkConstants.SUPER_TENANT_DOMAIN_NAME)) {
    synapseConfFile=""String_Node_Str"";
  }
 else {
    synapseConfFile=""String_Node_Str"";
  }
  loadSynapseConfigurationFromClasspath(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ synapseConfFile,gatewayContextMgt,gatewaySessionCookie);
  waitForAPIDeploymentSync(user.getUserName(),""String_Node_Str"",""String_Node_Str"",APIMIntegrationConstants.IS_API_EXISTS);
}",0.9632495164410058
114857,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testCallUserInfoApiWithOpenIdAccessToken() throws Exception {
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  HttpResponse youTubeResponse=HttpRequestUtil.doGet(gatewayUrlsMgt.getWebAppURLNhttp() + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(youTubeResponse.getResponseCode(),200,""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testCallUserInfoApiWithOpenIdAccessToken() throws Exception {
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  HttpResponse userInfoResponse=HttpRequestUtil.doGet(gatewayUrlsMgt.getWebAppURLNhttp() + ""String_Node_Str"",requestHeaders);
  Assert.assertEquals(userInfoResponse.getResponseCode(),200,""String_Node_Str"");
}",0.97131931166348
114858,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  url=gatewayUrlsMgt.getWebAppURLHttps() + ""String_Node_Str"";
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setSandbox(url);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  waitForAPIDeploymentSync(user.getUserName(),APIName,APIVersion,APIMIntegrationConstants.IS_API_EXISTS);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  apiStore.login(user.getUserName(),user.getPassword());
  apiStore.addApplication(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(APIName,user.getUserName());
  subscriptionRequest.setApplicationName(""String_Node_Str"");
  subscriptionRequest.setTier(""String_Node_Str"");
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(""String_Node_Str"");
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  consumerKey=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  consumerSecret=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiStore.login(user.getUserName(),user.getPassword());
  apiStore.addApplication(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(""String_Node_Str"");
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  consumerKey=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  consumerSecret=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
}",0.5009861932938856
114859,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testAPISearchByTag() throws Exception {
  String searchTerm;
  HttpResponse response;
  JSONObject results;
  JSONArray resultArray;
  searchTerm=""String_Node_Str"" + TAG_API;
  response=apiStore.searchPaginateAPIs(user.getUserDomain(),""String_Node_Str"",""String_Node_Str"",searchTerm);
  verifyResponse(response);
  results=new JSONObject(response.getData());
  resultArray=results.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(resultArray.length(),2,""String_Node_Str"");
  Assert.assertTrue(response.getData().contains(API_NAME_1),""String_Node_Str"");
  Assert.assertTrue(response.getData().contains(API_NAME_2),""String_Node_Str"");
  searchTerm=""String_Node_Str"" + TAG_API_1;
  response=apiStore.searchPaginateAPIs(user.getUserDomain(),""String_Node_Str"",""String_Node_Str"",searchTerm);
  verifyResponse(response);
  results=new JSONObject(response.getData());
  resultArray=results.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(resultArray.length(),1,""String_Node_Str"");
  Assert.assertTrue(response.getData().contains(API_NAME_1),""String_Node_Str"");
  Assert.assertFalse(response.getData().contains(API_NAME_2),""String_Node_Str"");
  searchTerm=""String_Node_Str"" + TAG_NOT_EXIST;
  response=apiStore.searchPaginateAPIs(user.getUserDomain(),""String_Node_Str"",""String_Node_Str"",searchTerm);
  verifyResponse(response);
  results=new JSONObject(response.getData());
  resultArray=results.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(resultArray.length(),0,""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testAPISearchByTag() throws Exception {
  String searchTerm;
  HttpResponse response;
  JSONObject results;
  JSONArray resultArray;
  watForAPIsAvailableOnSearchApi();
  searchTerm=""String_Node_Str"" + TAG_API;
  response=apiStore.searchPaginateAPIs(user.getUserDomain(),""String_Node_Str"",""String_Node_Str"",searchTerm);
  verifyResponse(response);
  results=new JSONObject(response.getData());
  resultArray=results.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(resultArray.length(),2,""String_Node_Str"");
  Assert.assertTrue(response.getData().contains(API_NAME_1),""String_Node_Str"");
  Assert.assertTrue(response.getData().contains(API_NAME_2),""String_Node_Str"");
  searchTerm=""String_Node_Str"" + TAG_API_1;
  response=apiStore.searchPaginateAPIs(user.getUserDomain(),""String_Node_Str"",""String_Node_Str"",searchTerm);
  verifyResponse(response);
  results=new JSONObject(response.getData());
  resultArray=results.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(resultArray.length(),1,""String_Node_Str"");
  Assert.assertTrue(response.getData().contains(API_NAME_1),""String_Node_Str"");
  Assert.assertFalse(response.getData().contains(API_NAME_2),""String_Node_Str"");
  searchTerm=""String_Node_Str"" + TAG_NOT_EXIST;
  response=apiStore.searchPaginateAPIs(user.getUserDomain(),""String_Node_Str"",""String_Node_Str"",searchTerm);
  verifyResponse(response);
  results=new JSONObject(response.getData());
  resultArray=results.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(resultArray.length(),0,""String_Node_Str"");
}",0.9886934673366834
114860,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testAPICreation() throws Exception {
  resList=new ArrayList<APIResourceBean>();
  APIResourceBean addResource=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.ResourceAuthTypes.APPLICATION.getAuthType(),APIMIntegrationConstants.RESOURCE_TIER.BASIC,""String_Node_Str"");
  apiCreationRequestBean=new APICreationRequestBean(API_NAME_1,API_CONTEXT_1,API_VERSION,user.getUserName(),new URL(endpointUrl));
  tags=TAG_API + ""String_Node_Str"" + TAG_API_1;
  apiCreationRequestBean.setTags(tags);
  apiCreationRequestBean.setDescription(DESCRIPTION);
  apiCreationRequestBean.setTiersCollection(tierCollection);
  resList.add(addResource);
  apiCreationRequestBean.setResourceBeanList(resList);
  HttpResponse serviceResponse=apiPublisher.addAPI(apiCreationRequestBean);
  verifyResponse(serviceResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME_1,user.getUserName(),APILifeCycleState.PUBLISHED);
  serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  apiCreationRequestBean=new APICreationRequestBean(API_NAME_2,API_CONTEXT_2,API_VERSION,user.getUserName(),new URL(endpointUrl));
  tags=TAG_API + ""String_Node_Str"" + TAG_API_2;
  apiCreationRequestBean.setTags(tags);
  apiCreationRequestBean.setDescription(DESCRIPTION);
  apiCreationRequestBean.setTiersCollection(tierCollection);
  resList.add(addResource);
  apiCreationRequestBean.setResourceBeanList(resList);
  serviceResponse=apiPublisher.addAPI(apiCreationRequestBean);
  verifyResponse(serviceResponse);
  updateRequest=new APILifeCycleStateRequest(API_NAME_2,user.getUserName(),APILifeCycleState.PUBLISHED);
  serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testAPICreation() throws Exception {
  resList=new ArrayList<APIResourceBean>();
  APIResourceBean addResource=new APIResourceBean(APIMIntegrationConstants.HTTP_VERB_GET,APIMIntegrationConstants.ResourceAuthTypes.APPLICATION.getAuthType(),APIMIntegrationConstants.RESOURCE_TIER.BASIC,""String_Node_Str"");
  apiCreationRequestBean=new APICreationRequestBean(API_NAME_1,API_CONTEXT_1,API_VERSION,user.getUserName(),new URL(endpointUrl));
  tags=TAG_API + ""String_Node_Str"" + TAG_API_1;
  apiCreationRequestBean.setTags(tags);
  apiCreationRequestBean.setDescription(DESCRIPTION);
  apiCreationRequestBean.setTiersCollection(tierCollection);
  resList.add(addResource);
  apiCreationRequestBean.setResourceBeanList(resList);
  HttpResponse serviceResponse=apiPublisher.addAPI(apiCreationRequestBean);
  verifyResponse(serviceResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME_1,user.getUserName(),APILifeCycleState.PUBLISHED);
  serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME_1,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
  apiCreationRequestBean=new APICreationRequestBean(API_NAME_2,API_CONTEXT_2,API_VERSION,user.getUserName(),new URL(endpointUrl));
  tags=TAG_API + ""String_Node_Str"" + TAG_API_2;
  apiCreationRequestBean.setTags(tags);
  apiCreationRequestBean.setDescription(DESCRIPTION);
  apiCreationRequestBean.setTiersCollection(tierCollection);
  resList.add(addResource);
  apiCreationRequestBean.setResourceBeanList(resList);
  serviceResponse=apiPublisher.addAPI(apiCreationRequestBean);
  verifyResponse(serviceResponse);
  updateRequest=new APILifeCycleStateRequest(API_NAME_2,user.getUserName(),APILifeCycleState.PUBLISHED);
  serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME_2,API_VERSION,APIMIntegrationConstants.IS_API_EXISTS);
}",0.9445284921835604
114861,"/** 
 * return the required parameter value from the URL
 * @param url       URL as String
 * @param attribute name of the attribute
 * @return attribute value as String
 */
public static String getURLParameter(String url,String attribute){
  try {
    Pattern p=Pattern.compile(attribute + ""String_Node_Str"");
    Matcher m=p.matcher(url);
    while (m.find()) {
      return m.group(1);
    }
  }
 catch (  PatternSyntaxException ignore) {
  }
  return null;
}","/** 
 * return the required parameter value from the URL
 * @param url       URL as String
 * @param attribute name of the attribute
 * @return attribute value as String
 */
private String getURLParameter(String url,String attribute){
  try {
    Pattern p=Pattern.compile(attribute + ""String_Node_Str"");
    Matcher m=p.matcher(url);
    while (m.find()) {
      return m.group(1);
    }
  }
 catch (  PatternSyntaxException ignore) {
  }
  return null;
}",0.9803921568627452
114862,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testApplicationUpdateAndTestKeyGeneration() throws Exception {
  String keyType=""String_Node_Str"";
  String authorizedDomains=""String_Node_Str"";
  String retryAfterFailure=String.valueOf(false);
  String jsonParams=""String_Node_Str"" + ""String_Node_Str"";
  HttpResponse response=apiStore.updateClientApplication(CALLBACK_URL_UPDATE_APP_NAME_,keyType,authorizedDomains,retryAfterFailure,URLEncoder.encode(jsonParams,""String_Node_Str""),CALLBACK_URL);
  verifyResponse(response);
  testAuthCode();
  testImplicit();
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testApplicationUpdateAndTestKeyGeneration() throws Exception {
  String keyType=""String_Node_Str"";
  String authorizedDomains=""String_Node_Str"";
  String retryAfterFailure=String.valueOf(false);
  String jsonParams=""String_Node_Str"" + ""String_Node_Str"";
  HttpResponse response=apiStore.updateClientApplication(CALLBACK_URL_UPDATE_APP_NAME,keyType,authorizedDomains,retryAfterFailure,URLEncoder.encode(jsonParams,""String_Node_Str""),CALLBACK_URL);
  verifyResponse(response);
  testAuthCode();
  testImplicit();
}",0.9991980753809142
114863,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  apiStore.removeApplication(APP_NAME);
  apiStore.removeApplication(CALLBACK_URL_UPDATE_APP_NAME_);
  apiPublisher.deleteAPI(API_NAME,API_VERSION,user.getUserName());
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  apiStore.removeApplication(APP_NAME);
  apiStore.removeApplication(CALLBACK_URL_UPDATE_APP_NAME);
  apiPublisher.deleteAPI(API_NAME,API_VERSION,user.getUserName());
}",0.9978947368421052
114864,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testApplicationCreationWithoutCallBackURL() throws Exception {
  HttpResponse serviceResponse=apiStore.addApplication(CALLBACK_URL_UPDATE_APP_NAME_,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(CALLBACK_URL_UPDATE_APP_NAME_);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.UNLIMITED);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(CALLBACK_URL_UPDATE_APP_NAME_);
  serviceResponse=apiStore.generateApplicationKey(generateAppKeyRequest);
  verifyResponse(serviceResponse);
  JSONObject response=new JSONObject(serviceResponse.getData());
  consumerKey=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  consumerSecret=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(consumerKey,""String_Node_Str"");
  Assert.assertNotNull(consumerSecret,""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testApplicationCreationWithoutCallBackURL() throws Exception {
  HttpResponse serviceResponse=apiStore.addApplication(CALLBACK_URL_UPDATE_APP_NAME,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(API_NAME,user.getUserName());
  subscriptionRequest.setApplicationName(CALLBACK_URL_UPDATE_APP_NAME);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.UNLIMITED);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(CALLBACK_URL_UPDATE_APP_NAME);
  serviceResponse=apiStore.generateApplicationKey(generateAppKeyRequest);
  verifyResponse(serviceResponse);
  JSONObject response=new JSONObject(serviceResponse.getData());
  consumerKey=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  consumerSecret=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(consumerKey,""String_Node_Str"");
  Assert.assertNotNull(consumerSecret,""String_Node_Str"");
}",0.9988917620982638
114865,"/** 
 * This method generates swagger v2 doc using swagger 1.2 doc
 * @param tenant          Tenant
 * @param swagger12location the location of swagger 1.2 doc
 * @return JSON string of swagger v2 doc
 * @throws java.net.MalformedURLException
 * @throws org.json.simple.parser.ParseException
 * @throws org.wso2.carbon.registry.core.exceptions.RegistryException
 */
private String getSwagger2docUsingSwagger12RegistryResources(Tenant tenant,String swagger12location,API api) throws MalformedURLException, ParseException, RegistryException, UserStoreException {
  log.debug(""String_Node_Str"");
  JSONParser parser=new JSONParser();
  String swagger12BasePath=null;
  try {
    Object rawResource=registryService.getGovernanceRegistryResource(swagger12location + APIConstants.API_DOC_1_2_RESOURCE_NAME);
    String swaggerRes=ResourceUtil.getResourceContent(rawResource);
    JSONObject swagger12doc=(JSONObject)parser.parse(swaggerRes);
    Map<String,JSONArray> apiDefPaths=new HashMap<String,JSONArray>();
    String[] apiDefinitions=(String[])registryService.getGovernanceRegistryResource(swagger12location);
    for (    String apiDefinition : apiDefinitions) {
      String resourceName=apiDefinition.substring(apiDefinition.lastIndexOf('/'));
      if (APIConstants.API_DOC_1_2_RESOURCE_NAME.equals(resourceName)) {
        continue;
      }
      Object resource=registryService.getGovernanceRegistryResource(apiDefinition);
      String swaggerDocContent;
      if (resource instanceof String[]) {
        swaggerDocContent=Arrays.toString((String[])resource);
      }
 else {
        swaggerDocContent=new String((byte[])resource,""String_Node_Str"");
      }
      log.debug(""String_Node_Str"" + swaggerDocContent);
      JSONObject apiDef=(JSONObject)parser.parse(swaggerDocContent);
      swagger12BasePath=(String)apiDef.get(""String_Node_Str"");
      if (apiDef.containsKey(""String_Node_Str"")) {
        JSONArray apiArray=(JSONArray)apiDef.get(""String_Node_Str"");
        for (        Object anApiArray : apiArray) {
          JSONObject apiObject=(JSONObject)anApiArray;
          String path=(String)apiObject.get(""String_Node_Str"");
          JSONArray operations=(JSONArray)apiObject.get(""String_Node_Str"");
          apiDefPaths.put(path,operations);
        }
      }
 else {
        log.error(""String_Node_Str"");
      }
    }
    JSONObject swagger2Doc=generateSwagger2Document(swagger12doc,apiDefPaths,api);
    return swagger2Doc.toJSONString();
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""String_Node_Str"",e);
  }
  return null;
}","/** 
 * This method generates swagger v2 doc using swagger 1.2 doc
 * @param tenant          Tenant
 * @param swagger12location the location of swagger 1.2 doc
 * @return JSON string of swagger v2 doc
 * @throws java.net.MalformedURLException
 * @throws org.json.simple.parser.ParseException
 * @throws org.wso2.carbon.registry.core.exceptions.RegistryException
 */
private String getSwagger2docUsingSwagger12RegistryResources(Tenant tenant,String swagger12location,API api) throws MalformedURLException, ParseException, RegistryException, UserStoreException {
  log.debug(""String_Node_Str"");
  JSONParser parser=new JSONParser();
  String swagger12BasePath=null;
  Object rawResource=registryService.getGovernanceRegistryResource(swagger12location + APIConstants.API_DOC_1_2_RESOURCE_NAME);
  String swaggerRes=ResourceUtil.getResourceContent(rawResource);
  JSONObject swagger12doc=(JSONObject)parser.parse(swaggerRes);
  Map<String,JSONArray> apiDefPaths=new HashMap<String,JSONArray>();
  JSONArray pathConfigs=(JSONArray)swagger12doc.get(APIConstants.API_ARRAY_NAME);
  for (  Object pathConfig : pathConfigs) {
    JSONObject jsonObjPathConfig=(JSONObject)pathConfig;
    String pathName=(String)jsonObjPathConfig.get(APIConstants.DOCUMENTATION_SEARCH_PATH_FIELD);
    pathName=pathName.startsWith(""String_Node_Str"") ? pathName : (""String_Node_Str"" + pathName);
    Object pathResource=registryService.getGovernanceRegistryResource(swagger12location + pathName);
    String swaggerDocContent=ResourceUtil.getResourceContent(pathResource);
    log.debug(""String_Node_Str"" + swaggerDocContent);
    JSONObject apiDef=(JSONObject)parser.parse(swaggerDocContent);
    swagger12BasePath=(String)apiDef.get(""String_Node_Str"");
    if (apiDef.containsKey(""String_Node_Str"")) {
      JSONArray apiArray=(JSONArray)apiDef.get(""String_Node_Str"");
      for (      Object anApiArray : apiArray) {
        JSONObject apiObject=(JSONObject)anApiArray;
        String path=(String)apiObject.get(""String_Node_Str"");
        JSONArray operations=(JSONArray)apiObject.get(""String_Node_Str"");
        apiDefPaths.put(path,operations);
      }
    }
 else {
      log.error(""String_Node_Str"");
    }
  }
  JSONObject swagger2Doc=generateSwagger2Document(swagger12doc,apiDefPaths,api);
  return swagger2Doc.toJSONString();
}",0.7168032786885246
114866,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void CheckCORSHeadersInResponse() throws Exception {
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION));
  get.addHeader(""String_Node_Str"",""String_Node_Str"");
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  HttpResponse response=httpclient.execute(get);
  assertEquals(response.getStatusLine().getStatusCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  log.info(""String_Node_Str"");
  for (  Header header : responseHeaders) {
    log.info(header.getName() + ""String_Node_Str"" + header.getValue());
  }
  Header header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_METHODS_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_METHODS_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_METHODS_HEADER_ALL_VALUES,ACCESS_CONTROL_ALLOW_METHODS_HEADER + ""String_Node_Str"");
  header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_HEADERS_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_HEADERS_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_HEADERS_HEADER_VALUE,ACCESS_CONTROL_ALLOW_HEADERS_HEADER + ""String_Node_Str"");
  assertNull(pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER),ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER + ""String_Node_Str"" + ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void CheckCORSHeadersInResponse() throws Exception {
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION));
  get.addHeader(""String_Node_Str"",""String_Node_Str"");
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  HttpResponse response=httpclient.execute(get);
  assertEquals(response.getStatusLine().getStatusCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  log.info(""String_Node_Str"");
  for (  Header header : responseHeaders) {
    log.info(header.getName() + ""String_Node_Str"" + header.getValue());
  }
  Header header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_METHODS_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_METHODS_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_METHODS_HEADER_VALUE,ACCESS_CONTROL_ALLOW_METHODS_HEADER + ""String_Node_Str"");
  header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_HEADERS_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_HEADERS_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_HEADERS_HEADER_VALUE,ACCESS_CONTROL_ALLOW_HEADERS_HEADER + ""String_Node_Str"");
  assertNull(pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER),ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER + ""String_Node_Str"" + ""String_Node_Str"");
}",0.9986130374479888
114867,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testLCStateChengeVisibility() throws Exception {
  HttpResponse resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.PUBLISHED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.BLOCKED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_BLOCKED);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.DEPRECATED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_NOT_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testLCStateChengeVisibility() throws Exception {
  HttpResponse resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.PUBLISHED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.BLOCKED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_BLOCKED);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.DEPRECATED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_NOT_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
}",0.9938992504793446
114868,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testNumberOfUsersInAPIOverview() throws APIManagerIntegrationTestException {
  String applicationDescription=""String_Node_Str"";
  String applicationCallBackUrl=""String_Node_Str"";
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  apiStoreClientUser2.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  APIIdentifier apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  apiIdentifier.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  HttpResponse publisherOverviewPageResponse1=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse1.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse1.getData()).contains(""String_Node_Str""),""String_Node_Str"");
  subscribeToAPI(this.apiIdentifier,APPLICATION_NAME,apiStoreClientUser2);
  HttpResponse publisherOverviewPageResponse2=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse2.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse2.getData()).contains(""String_Node_Str""),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testNumberOfUsersInAPIOverview() throws APIManagerIntegrationTestException {
  String applicationDescription=""String_Node_Str"";
  String applicationCallBackUrl=""String_Node_Str"";
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  apiStoreClientUser2.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  APIIdentifier apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  apiIdentifier.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  HttpResponse publisherOverviewPageResponse1=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse1.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(getUserStringInOverview(publisherOverviewPageResponse1.getData()).contains(""String_Node_Str""),""String_Node_Str"");
  subscribeToAPI(this.apiIdentifier,APPLICATION_NAME,apiStoreClientUser2);
  HttpResponse publisherOverviewPageResponse2=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse2.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(getUserStringInOverview(publisherOverviewPageResponse2.getData()).contains(""String_Node_Str""),""String_Node_Str"");
}",0.993849938499385
114869,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testNumberOfUsersInAPIOverview() throws APIManagerIntegrationTestException {
  String applicationDescription=""String_Node_Str"";
  String applicationCallBackUrl=""String_Node_Str"";
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  apiStoreClientUser2.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  APIIdentifier apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  apiIdentifier.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  HttpResponse publisherOverviewPageResponse1=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse1.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse1.getData()).contains(""String_Node_Str""),""String_Node_Str"");
  subscribeToAPI(this.apiIdentifier,APPLICATION_NAME,apiStoreClientUser2);
  HttpResponse publisherOverviewPageResponse2=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse2.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse2.getData()).contains(""String_Node_Str""),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testNumberOfUsersInAPIOverview() throws APIManagerIntegrationTestException {
  String applicationDescription=""String_Node_Str"";
  String applicationCallBackUrl=""String_Node_Str"";
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  apiStoreClientUser2.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  APIIdentifier apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  apiIdentifier.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  HttpResponse publisherOverviewPageResponse1=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse1.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(getUserStringInOverview(publisherOverviewPageResponse1.getData()).contains(""String_Node_Str""),""String_Node_Str"");
  subscribeToAPI(this.apiIdentifier,APPLICATION_NAME,apiStoreClientUser2);
  HttpResponse publisherOverviewPageResponse2=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse2.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(getUserStringInOverview(publisherOverviewPageResponse2.getData()).contains(""String_Node_Str""),""String_Node_Str"");
}",0.993849938499385
114870,"@BeforeClass(alwaysRun=true) public void initialize() throws Exception {
  publisherURLHttp=publisherUrls.getWebAppURLHttp();
  storeURLHttp=getStoreURLHttp();
  endpointUrl=backEndServerUrl.getWebAppURLHttp() + ""String_Node_Str"";
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),createSession(keyManagerContext));
  userManagementClient1.addRole(INTERNAL_ROLE_SUBSCRIBER,null,permissions);
  userManagementClient1.addRole(INTERNAL_ROLE_SUBSCRIBER_1,null,permissions);
  userManagementClient1.addUser(CARBON_SUPER_SUBSCRIBER_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER},null);
  userManagementClient1.addUser(CARBON_SUPER_SUBSCRIBER_1_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_1_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER_1},null);
}","@BeforeClass(alwaysRun=true) public void initialize() throws Exception {
  super.init();
  publisherURLHttp=publisherUrls.getWebAppURLHttp();
  storeURLHttp=getStoreURLHttp();
  endpointUrl=backEndServerUrl.getWebAppURLHttp() + ""String_Node_Str"";
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),createSession(keyManagerContext));
  userManagementClient1.addRole(INTERNAL_ROLE_SUBSCRIBER,null,permissions);
  userManagementClient1.addRole(INTERNAL_ROLE_SUBSCRIBER_1,null,permissions);
  userManagementClient1.addUser(CARBON_SUPER_SUBSCRIBER_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER},null);
  userManagementClient1.addUser(CARBON_SUPER_SUBSCRIBER_1_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_1_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER_1},null);
}",0.9922027290448344
114871,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testLCStateChengeVisibility() throws Exception {
  HttpResponse resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.PUBLISHED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.BLOCKED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_BLOCKED);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.DEPRECATED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_NOT_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testLCStateChengeVisibility() throws Exception {
  HttpResponse resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.PUBLISHED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.BLOCKED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_BLOCKED);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  updateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.DEPRECATED);
  updateRequest.setVersion(API_VERSION_2_0_0);
  apiPublisherClientUser1.changeAPILifeCycleStatus(updateRequest);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_2_0_0,APIMIntegrationConstants.IS_API_NOT_EXISTS);
  resp=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_2_0_0);
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
  assertEquals(resp.getData().contains(""String_Node_Str""),true,""String_Node_Str"");
}",0.9938992504793446
114872,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testNumberOfUsersInAPIOverview() throws APIManagerIntegrationTestException {
  String applicationDescription=""String_Node_Str"";
  String applicationCallBackUrl=""String_Node_Str"";
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  apiStoreClientUser2.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  APIIdentifier apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  apiIdentifier.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  HttpResponse publisherOverviewPageResponse1=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse1.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse1.getData()),""String_Node_Str"",""String_Node_Str"");
  subscribeToAPI(this.apiIdentifier,APPLICATION_NAME,apiStoreClientUser2);
  HttpResponse publisherOverviewPageResponse2=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse2.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse2.getData()),""String_Node_Str"",""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testNumberOfUsersInAPIOverview() throws APIManagerIntegrationTestException {
  String applicationDescription=""String_Node_Str"";
  String applicationCallBackUrl=""String_Node_Str"";
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  apiStoreClientUser2.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  APIIdentifier apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  apiIdentifier.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  HttpResponse publisherOverviewPageResponse1=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse1.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse1.getData()).contains(""String_Node_Str""),""String_Node_Str"");
  subscribeToAPI(this.apiIdentifier,APPLICATION_NAME,apiStoreClientUser2);
  HttpResponse publisherOverviewPageResponse2=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse2.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse2.getData()).contains(""String_Node_Str""),""String_Node_Str"");
}",0.9715698393077874
114873,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void CheckCORSHeadersInResponse() throws Exception {
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION));
  get.addHeader(""String_Node_Str"",""String_Node_Str"");
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  HttpResponse response=httpclient.execute(get);
  assertEquals(response.getStatusLine().getStatusCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  log.info(""String_Node_Str"");
  for (  Header header : responseHeaders) {
    log.info(header.getName() + ""String_Node_Str"" + header.getValue());
  }
  Header header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_METHODS_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_METHODS_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_METHODS_HEADER_ALL_VALUES,ACCESS_CONTROL_ALLOW_METHODS_HEADER + ""String_Node_Str"");
  header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_HEADERS_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_HEADERS_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_HEADERS_HEADER_VALUE,ACCESS_CONTROL_ALLOW_HEADERS_HEADER + ""String_Node_Str"");
  assertNull(pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER),ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER + ""String_Node_Str"" + ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void CheckCORSHeadersInResponse() throws Exception {
  HttpClient httpclient=HttpClientBuilder.create().build();
  HttpGet get=new HttpGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION));
  get.addHeader(""String_Node_Str"",""String_Node_Str"");
  get.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken);
  HttpResponse response=httpclient.execute(get);
  assertEquals(response.getStatusLine().getStatusCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  Header[] responseHeaders=response.getAllHeaders();
  log.info(""String_Node_Str"");
  for (  Header header : responseHeaders) {
    log.info(header.getName() + ""String_Node_Str"" + header.getValue());
  }
  Header header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE,ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + ""String_Node_Str"");
  header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_METHODS_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_METHODS_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_METHODS_HEADER_VALUE,ACCESS_CONTROL_ALLOW_METHODS_HEADER + ""String_Node_Str"");
  header=pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_HEADERS_HEADER);
  assertNotNull(header,ACCESS_CONTROL_ALLOW_HEADERS_HEADER + ""String_Node_Str"");
  assertEquals(header.getValue(),ACCESS_CONTROL_ALLOW_HEADERS_HEADER_VALUE,ACCESS_CONTROL_ALLOW_HEADERS_HEADER + ""String_Node_Str"");
  assertNull(pickHeader(responseHeaders,ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER),ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER + ""String_Node_Str"" + ""String_Node_Str"");
}",0.9986130374479888
114874,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testNumberOfUsersInAPIOverview() throws APIManagerIntegrationTestException {
  String applicationDescription=""String_Node_Str"";
  String applicationCallBackUrl=""String_Node_Str"";
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  apiStoreClientUser2.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  APIIdentifier apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  apiIdentifier.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  HttpResponse publisherOverviewPageResponse1=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse1.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse1.getData()),""String_Node_Str"",""String_Node_Str"");
  subscribeToAPI(this.apiIdentifier,APPLICATION_NAME,apiStoreClientUser2);
  HttpResponse publisherOverviewPageResponse2=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse2.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse2.getData()),""String_Node_Str"",""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testNumberOfUsersInAPIOverview() throws APIManagerIntegrationTestException {
  String applicationDescription=""String_Node_Str"";
  String applicationCallBackUrl=""String_Node_Str"";
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  apiStoreClientUser2.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,applicationCallBackUrl,applicationDescription);
  APIIdentifier apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  apiIdentifier.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  HttpResponse publisherOverviewPageResponse1=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse1.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse1.getData()).contains(""String_Node_Str""),""String_Node_Str"");
  subscribeToAPI(this.apiIdentifier,APPLICATION_NAME,apiStoreClientUser2);
  HttpResponse publisherOverviewPageResponse2=apiPublisherClientUser1.getAPIInformationPage(API_NAME,providerName,API_VERSION_1_0_0);
  assertEquals(publisherOverviewPageResponse2.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertEquals(getUserStringInOverview(publisherOverviewPageResponse2.getData()).contains(""String_Node_Str""),""String_Node_Str"");
}",0.9715698393077874
114875,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void APIInvocationFailure() throws Exception {
  String APIName=""String_Node_Str"";
  String APIContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=""String_Node_Str"";
  String description=""String_Node_Str"";
  String providerName=publisherContext.getContextTenant().getContextUser().getUserName();
  String APIVersion=""String_Node_Str"";
  APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword());
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setSandbox(url);
  apiRequest.setResourceMethod(""String_Node_Str"");
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse youTubeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(APIContext,APIVersion) + ""String_Node_Str"",requestHeaders);
  assertEquals(youTubeResponse.getResponseCode(),Response.Status.UNAUTHORIZED.getStatusCode(),""String_Node_Str"");
  assertTrue(youTubeResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void APIInvocationFailure() throws Exception {
  String providerName=user.getUserName();
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setProvider(providerName);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setSandbox(url);
  apiRequest.setResourceMethod(""String_Node_Str"");
  HttpResponse serviceResponse=apiPublisher.addAPI(apiRequest);
  verifyResponse(serviceResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,user.getUserName(),APILifeCycleState.PUBLISHED);
  serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse youTubeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(APIContext,APIVersion) + ""String_Node_Str"",requestHeaders);
  assertEquals(youTubeResponse.getResponseCode(),Response.Status.UNAUTHORIZED.getStatusCode(),""String_Node_Str"");
  assertTrue(youTubeResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
}",0.5906339598598279
114876,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  publisherURLHttp=getPublisherURLHttp();
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  publisherURLHttp=getPublisherURLHttp();
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
}",0.7024390243902439
114877,"@Test(description=""String_Node_Str"") public void generateApplicationKeyWithoutScope() throws Exception {
  apiCreationRequestBean=new APICreationRequestBean(apiName,context,version,apiProvider,new URL(endpointUrl));
  apiCreationRequestBean.setEndpointType(endPointType);
  apiCreationRequestBean.setTiersCollection(tier);
  apiCreationRequestBean.setTags(tags);
  apiCreationRequestBean.setResourceBeanList(resourceBeanList);
  apiCreationRequestBean.setDescription(apiDescription);
  apiCreationRequestBean.setVisibility(visibility);
  log.info(apiCreationRequestBean);
  HttpResponse apiCreateResponse=apiPublisher.addAPI(apiCreationRequestBean);
  assertEquals(apiCreateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject createApiJsonObject=new JSONObject(apiCreateResponse.getData());
  assertEquals(createApiJsonObject.getBoolean(""String_Node_Str""),false,""String_Node_Str"");
  HttpResponse verifyApiResponse=apiPublisher.getApi(apiName,apiProvider,version);
  JSONObject verifyApiJsonObject=new JSONObject(verifyApiResponse.getData());
  assertFalse(verifyApiJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,apiProvider,APILifeCycleState.PUBLISHED);
  HttpResponse statusUpdateResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  assertEquals(statusUpdateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject statusUpdateJsonObject=new JSONObject(statusUpdateResponse.getData());
  assertFalse(statusUpdateJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  apiProvider=storeContext.getContextTenant().getContextUser().getUserName();
  HttpResponse addApplicationResponse=apiStore.addApplication(applicationName,appTier,callbackUrl,applicationDescription);
  assertEquals(addApplicationResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"" + applicationName);
  JSONObject addApplicationJsonObject=new JSONObject(addApplicationResponse.getData());
  assertFalse(addApplicationJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"" + applicationName);
  SubscriptionRequest apiSubscriptionRequest=new SubscriptionRequest(apiName,version,apiProvider,applicationName,tier);
  HttpResponse subscriptionResponse=apiStore.subscribe(apiSubscriptionRequest);
  assertEquals(subscriptionResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject subscriptionResponseJsonObject=new JSONObject(subscriptionResponse.getData());
  assertFalse(subscriptionResponseJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  APPKeyRequestGenerator appKeyRequestGenerator=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStore.generateApplicationKey(appKeyRequestGenerator).getData();
  JSONObject jsonObject=new JSONObject(responseString);
  String accessToken=jsonObject.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  Map<String,String> applicationHeader=new HashMap<String,String>();
  applicationHeader.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  applicationHeader.put(""String_Node_Str"",""String_Node_Str"");
  waitForAPIDeploymentSync(apiCreationRequestBean.getProvider(),apiCreationRequestBean.getName(),""String_Node_Str"",APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse apiInvokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",applicationHeader);
  String apiResponse=""String_Node_Str"";
  assertEquals(apiInvokeResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(apiInvokeResponse.getData().contains(apiResponse),""String_Node_Str"");
}","@Test(description=""String_Node_Str"") public void generateApplicationKeyWithoutScope() throws Exception {
  apiCreationRequestBean=new APICreationRequestBean(apiName,context,version,apiProvider,new URL(endpointUrl));
  apiCreationRequestBean.setEndpointType(endPointType);
  apiCreationRequestBean.setTiersCollection(tier);
  apiCreationRequestBean.setTags(tags);
  apiCreationRequestBean.setResourceBeanList(resourceBeanList);
  apiCreationRequestBean.setDescription(apiDescription);
  apiCreationRequestBean.setVisibility(visibility);
  log.info(apiCreationRequestBean);
  HttpResponse apiCreateResponse=apiPublisher.addAPI(apiCreationRequestBean);
  assertEquals(apiCreateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject createApiJsonObject=new JSONObject(apiCreateResponse.getData());
  assertEquals(createApiJsonObject.getBoolean(""String_Node_Str""),false,""String_Node_Str"");
  HttpResponse verifyApiResponse=apiPublisher.getApi(apiName,apiProvider,version);
  JSONObject verifyApiJsonObject=new JSONObject(verifyApiResponse.getData());
  assertFalse(verifyApiJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,apiProvider,APILifeCycleState.PUBLISHED);
  HttpResponse statusUpdateResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  assertEquals(statusUpdateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject statusUpdateJsonObject=new JSONObject(statusUpdateResponse.getData());
  assertFalse(statusUpdateJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  waitForAPIDeploymentSync(apiCreationRequestBean.getProvider(),apiCreationRequestBean.getName(),""String_Node_Str"",APIMIntegrationConstants.IS_API_EXISTS);
  apiProvider=storeContext.getContextTenant().getContextUser().getUserName();
  HttpResponse addApplicationResponse=apiStore.addApplication(applicationName,appTier,callbackUrl,applicationDescription);
  assertEquals(addApplicationResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"" + applicationName);
  JSONObject addApplicationJsonObject=new JSONObject(addApplicationResponse.getData());
  assertFalse(addApplicationJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"" + applicationName);
  SubscriptionRequest apiSubscriptionRequest=new SubscriptionRequest(apiName,version,apiProvider,applicationName,tier);
  HttpResponse subscriptionResponse=apiStore.subscribe(apiSubscriptionRequest);
  assertEquals(subscriptionResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject subscriptionResponseJsonObject=new JSONObject(subscriptionResponse.getData());
  assertFalse(subscriptionResponseJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  APPKeyRequestGenerator appKeyRequestGenerator=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStore.generateApplicationKey(appKeyRequestGenerator).getData();
  JSONObject jsonObject=new JSONObject(responseString);
  String accessToken=jsonObject.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  Map<String,String> applicationHeader=new HashMap<String,String>();
  applicationHeader.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  applicationHeader.put(""String_Node_Str"",""String_Node_Str"");
  HttpResponse apiInvokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",applicationHeader);
  String apiResponse=""String_Node_Str"";
  assertEquals(apiInvokeResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(apiInvokeResponse.getData().contains(apiResponse),""String_Node_Str"");
}",0.5797788309636651
114878,"private void updateSwaggerResources(GenericArtifact[] artifacts,Tenant tenant) throws APIMigrationException {
  log.debug(""String_Node_Str"");
  APIDefinitionFromSwagger20 definitionFromSwagger20=new APIDefinitionFromSwagger20();
  for (  GenericArtifact artifact : artifacts) {
    API api=registryService.getAPI(artifact);
    if (api != null) {
      APIIdentifier apiIdentifier=api.getId();
      String apiName=apiIdentifier.getApiName();
      String apiVersion=apiIdentifier.getVersion();
      String apiProviderName=apiIdentifier.getProviderName();
      try {
        String swagger2location=ResourceUtil.getSwagger2ResourceLocation(apiName,apiVersion,apiProviderName);
        String swagger12location=ResourceUtil.getSwagger12ResourceLocation(apiName,apiVersion,apiProviderName);
        String swagger2Document;
        if (!registryService.isGovernanceRegistryResourceExists(swagger12location)) {
          log.debug(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName);
          swagger2Document=definitionFromSwagger20.generateAPIDefinition(api);
        }
 else {
          log.debug(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName);
          swagger2Document=getSwagger2docUsingSwagger12RegistryResources(tenant,swagger12location,api);
        }
        registryService.addGovernanceRegistryResource(swagger2location,swagger2Document,""String_Node_Str"");
        registryService.setGovernanceRegistryResourcePermissions(null,null,swagger2location);
      }
 catch (      RegistryException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      ParseException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      UserStoreException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      MalformedURLException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      APIManagementException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
    }
  }
}","private void updateSwaggerResources(GenericArtifact[] artifacts,Tenant tenant) throws APIMigrationException {
  log.debug(""String_Node_Str"");
  APIDefinitionFromSwagger20 definitionFromSwagger20=new APIDefinitionFromSwagger20();
  for (  GenericArtifact artifact : artifacts) {
    API api=registryService.getAPI(artifact);
    if (api != null) {
      APIIdentifier apiIdentifier=api.getId();
      String apiName=apiIdentifier.getApiName();
      String apiVersion=apiIdentifier.getVersion();
      String apiProviderName=apiIdentifier.getProviderName();
      try {
        String swagger2location=ResourceUtil.getSwagger2ResourceLocation(apiName,apiVersion,apiProviderName);
        String swagger12location=ResourceUtil.getSwagger12ResourceLocation(apiName,apiVersion,apiProviderName);
        String swagger2Document;
        if (!registryService.isGovernanceRegistryResourceExists(swagger12location)) {
          log.debug(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName);
          swagger2Document=definitionFromSwagger20.generateAPIDefinition(api);
        }
 else {
          log.debug(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName);
          swagger2Document=getSwagger2docUsingSwagger12RegistryResources(tenant,swagger12location,api);
        }
        registryService.addGovernanceRegistryResource(swagger2location,swagger2Document,""String_Node_Str"");
        registryService.setGovernanceRegistryResourcePermissions(apiProviderName,null,null,swagger2location);
      }
 catch (      RegistryException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      ParseException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      UserStoreException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      MalformedURLException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
catch (      APIManagementException e) {
        log.error(""String_Node_Str"" + apiName + '-'+ apiVersion+ '-'+ apiProviderName+ ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
      }
    }
  }
}",0.9968416896960126
114879,"void setGovernanceRegistryResourcePermissions(String visibility,String[] roles,String resourcePath) throws APIManagementException ;","void setGovernanceRegistryResourcePermissions(String userName,String visibility,String[] roles,String resourcePath) throws APIManagementException ;",0.9424460431654677
114880,"@Override public void setGovernanceRegistryResourcePermissions(String visibility,String[] roles,String resourcePath) throws APIManagementException {
  initAPIProvider();
  APIUtil.setResourcePermissions(tenant.getAdminName(),visibility,roles,resourcePath);
}","@Override public void setGovernanceRegistryResourcePermissions(String userName,String visibility,String[] roles,String resourcePath) throws APIManagementException {
  initAPIProvider();
  APIUtil.setResourcePermissions(userName,visibility,roles,resourcePath);
}",0.928709055876686
114881,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  super.cleanUp();
  deleteAPI(apiIdentifier,apiPublisherClientUser1);
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  super.cleanUp();
}",0.7739130434782608
114882,"/** 
 * Create and publish a API.
 * @param apiIdentifier           - Instance of APIIdentifier object  that include the  API Name,API Version and API Provider
 * @param apiCreationRequestBean  - Instance of APICreationRequestBean with all needed API information
 * @param publisherRestClient     - Instance of APIPublisherRestClient
 * @param isRequireReSubscription - If publish with re-subscription required option true else false.
 * @throws APIManagerIntegrationTestException - Exception throws by API create and publish activities.
 */
public void createAndPublishAPI(APIIdentifier apiIdentifier,APICreationRequestBean apiCreationRequestBean,APIPublisherRestClient publisherRestClient,boolean isRequireReSubscription) throws APIManagerIntegrationTestException {
  HttpResponse createAPIResponse=publisherRestClient.addAPI(apiCreationRequestBean);
  if (createAPIResponse.getResponseCode() == HTTP_RESPONSE_CODE_OK && getValueFromJSON(createAPIResponse,""String_Node_Str"").equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
    HttpResponse publishAPIResponse=publishAPI(apiIdentifier,publisherRestClient,isRequireReSubscription);
    if (!(publishAPIResponse.getResponseCode() == HTTP_RESPONSE_CODE_OK && verifyAPIStatusChange(publishAPIResponse,APILifeCycleState.CREATED,APILifeCycleState.PUBLISHED))) {
      throw new APIManagerIntegrationTestException(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ publishAPIResponse.getResponseCode()+ ""String_Node_Str""+ publishAPIResponse.getData());
    }
    log.info(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
  }
 else {
    throw new APIManagerIntegrationTestException(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ createAPIResponse.getResponseCode()+ ""String_Node_Str""+ createAPIResponse.getData());
  }
}","/** 
 * Create and publish a API.
 * @param apiIdentifier           - Instance of APIIdentifier object  that include the  API Name,API Version and API Provider
 * @param apiCreationRequestBean  - Instance of APICreationRequestBean with all needed API information
 * @param publisherRestClient     - Instance of APIPublisherRestClient
 * @param isRequireReSubscription - If publish with re-subscription required option true else false.
 * @throws APIManagerIntegrationTestException - Exception throws by API create and publish activities.
 */
public void createAndPublishAPI(APIIdentifier apiIdentifier,APICreationRequestBean apiCreationRequestBean,APIPublisherRestClient publisherRestClient,boolean isRequireReSubscription) throws APIManagerIntegrationTestException {
  HttpResponse createAPIResponse=publisherRestClient.addAPI(apiCreationRequestBean);
  if (createAPIResponse.getResponseCode() == HTTP_RESPONSE_CODE_OK && getValueFromJSON(createAPIResponse,""String_Node_Str"").equals(""String_Node_Str"")) {
    log.info(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      throw new APIManagerIntegrationTestException(e.getMessage(),e);
    }
    HttpResponse publishAPIResponse=publishAPI(apiIdentifier,publisherRestClient,isRequireReSubscription);
    if (!(publishAPIResponse.getResponseCode() == HTTP_RESPONSE_CODE_OK && verifyAPIStatusChange(publishAPIResponse,APILifeCycleState.CREATED,APILifeCycleState.PUBLISHED))) {
      throw new APIManagerIntegrationTestException(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ publishAPIResponse.getResponseCode()+ ""String_Node_Str""+ publishAPIResponse.getData());
    }
    log.info(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
  }
 else {
    throw new APIManagerIntegrationTestException(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ createAPIResponse.getResponseCode()+ ""String_Node_Str""+ createAPIResponse.getData());
  }
}",0.960345704117946
114883,"/** 
 * Create publish and subscribe a API.
 * @param apiIdentifier          - Instance of APIIdentifier object  that include the  API Name,API Version and API Provider
 * @param apiCreationRequestBean - Instance of APICreationRequestBean with all needed API information
 * @param publisherRestClient    -  Instance of APIPublisherRestClient
 * @param storeRestClient        - Instance of APIStoreRestClient
 * @param applicationName        - Name of the Application that the API need to subscribe.
 * @throws APIManagerIntegrationTestException - Exception throws by API create publish and subscribe a API activities.
 */
protected void createPublishAndSubscribeToAPI(APIIdentifier apiIdentifier,APICreationRequestBean apiCreationRequestBean,APIPublisherRestClient publisherRestClient,APIStoreRestClient storeRestClient,String applicationName) throws APIManagerIntegrationTestException {
  createAndPublishAPI(apiIdentifier,apiCreationRequestBean,publisherRestClient,false);
  HttpResponse httpResponseSubscribeAPI=subscribeToAPI(apiIdentifier,applicationName,storeRestClient);
  if (!(httpResponseSubscribeAPI.getResponseCode() == HTTP_RESPONSE_CODE_OK && getValueFromJSON(httpResponseSubscribeAPI,""String_Node_Str"").equals(""String_Node_Str""))) {
    throw new APIManagerIntegrationTestException(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ httpResponseSubscribeAPI.getResponseCode()+ ""String_Node_Str""+ httpResponseSubscribeAPI.getData());
  }
  log.info(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
}","/** 
 * Create publish and subscribe a API.
 * @param apiIdentifier          - Instance of APIIdentifier object  that include the  API Name,API Version and API Provider
 * @param apiCreationRequestBean - Instance of APICreationRequestBean with all needed API information
 * @param publisherRestClient    -  Instance of APIPublisherRestClient
 * @param storeRestClient        - Instance of APIStoreRestClient
 * @param applicationName        - Name of the Application that the API need to subscribe.
 * @throws APIManagerIntegrationTestException - Exception throws by API create publish and subscribe a API activities.
 */
protected void createPublishAndSubscribeToAPI(APIIdentifier apiIdentifier,APICreationRequestBean apiCreationRequestBean,APIPublisherRestClient publisherRestClient,APIStoreRestClient storeRestClient,String applicationName) throws APIManagerIntegrationTestException {
  createAndPublishAPI(apiIdentifier,apiCreationRequestBean,publisherRestClient,false);
  try {
    waitForAPIDeploymentSync(user.getUserName(),apiIdentifier.getApiName(),apiIdentifier.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  }
 catch (  XPathExpressionException ex) {
    throw new APIManagerIntegrationTestException(ex.getMessage(),ex);
  }
  HttpResponse httpResponseSubscribeAPI=subscribeToAPI(apiIdentifier,applicationName,storeRestClient);
  if (!(httpResponseSubscribeAPI.getResponseCode() == HTTP_RESPONSE_CODE_OK && getValueFromJSON(httpResponseSubscribeAPI,""String_Node_Str"").equals(""String_Node_Str""))) {
    throw new APIManagerIntegrationTestException(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ httpResponseSubscribeAPI.getResponseCode()+ ""String_Node_Str""+ httpResponseSubscribeAPI.getData());
  }
  log.info(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
}",0.919976289270895
114884,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  apiPublisher.deleteAPI(apiName,APIVersion,user.getUserName());
  String publisher=storeContext.getContextTenant().getContextUser().getUserName();
  apiPublisherClientAdminOtherDomain.deleteAPI(apiNameTenant,APIVersion,publisher);
  userManagementClient1.deleteUser(CARBON_SUPER_SUBSCRIBER_USERNAME);
  userManagementClient1.deleteUser(CARBON_SUPER_SUBSCRIBER_1_USERNAME);
  userManagementClient2.deleteUser(TENANT_SUBSCRIBER_USERNAME);
  userManagementClient2.deleteUser(TENANT_SUBSCRIBER_1_USERNAME);
  super.cleanUp();
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  apiPublisher.deleteAPI(apiName,APIVersion,SUPER_ADMIN_USERNAME);
  String publisher=storeContext.getContextTenant().getContextUser().getUserName();
  apiPublisherClientAdminOtherDomain.deleteAPI(apiNameTenant,APIVersion,publisher);
  userManagementClient1.deleteRole(INTERNAL_ROLE_SUBSCRIBER);
  userManagementClient1.deleteRole(INTERNAL_ROLE_SUBSCRIBER_1);
  userManagementClient1.deleteUser(CARBON_SUPER_SUBSCRIBER_USERNAME);
  userManagementClient1.deleteUser(CARBON_SUPER_SUBSCRIBER_1_USERNAME);
  userManagementClient2.deleteRole(INTERNAL_ROLE_SUBSCRIBER);
  userManagementClient2.deleteRole(INTERNAL_ROLE_SUBSCRIBER_1);
  userManagementClient2.deleteUser(TENANT_SUBSCRIBER_USERNAME);
  userManagementClient2.deleteUser(TENANT_SUBSCRIBER_1_USERNAME);
  super.cleanUp();
}",0.7277777777777777
114885,"@BeforeClass(alwaysRun=true) public void initialize() throws Exception {
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  endpointUrl=backEndServerUrl.getWebAppURLHttp() + ""String_Node_Str"";
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  userManagementClient1=new UserManagementClient(publisherContext.getContextUrls().getBackEndUrl(),createSession(publisherContext));
  userManagementClient1.addRole(INTERNAL_ROLE_SUBSCRIBER,null,permissions);
  userManagementClient1.addRole(INTERNAL_ROLE_SUBSCRIBER_1,null,permissions);
  userManagementClient1.addUser(CARBON_SUPER_SUBSCRIBER_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER},null);
  userManagementClient1.addUser(CARBON_SUPER_SUBSCRIBER_1_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_1_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER_1},null);
}","@BeforeClass(alwaysRun=true) public void initialize() throws Exception {
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  endpointUrl=backEndServerUrl.getWebAppURLHttp() + ""String_Node_Str"";
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),createSession(keyManagerContext));
  userManagementClient1.addRole(INTERNAL_ROLE_SUBSCRIBER,null,permissions);
  userManagementClient1.addRole(INTERNAL_ROLE_SUBSCRIBER_1,null,permissions);
  userManagementClient1.addUser(CARBON_SUPER_SUBSCRIBER_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER},null);
  userManagementClient1.addUser(CARBON_SUPER_SUBSCRIBER_1_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_1_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER_1},null);
}",0.985089463220676
114886,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testChangeAPILifecycleToRetired() throws APIManagerIntegrationTestException {
  APILifeCycleStateRequest blockUpdateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.RETIRED);
  blockUpdateRequest.setVersion(API_VERSION_1_0_0);
  HttpResponse blockAPIActionResponse=apiPublisherRestClient.changeAPILifeCycleStatus(blockUpdateRequest);
  assertEquals(blockAPIActionResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(verifyAPIStatusChange(blockAPIActionResponse,APILifeCycleState.DEPRECATED,APILifeCycleState.RETIRED),""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ blockAPIActionResponse.getData());
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testChangeAPILifecycleToRetired() throws APIManagerIntegrationTestException {
  APILifeCycleStateRequest retireUpdateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.RETIRED);
  retireUpdateRequest.setVersion(API_VERSION_1_0_0);
  HttpResponse blockAPIActionResponse=apiPublisherRestClient.changeAPILifeCycleStatus(retireUpdateRequest);
  assertEquals(blockAPIActionResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(verifyAPIStatusChange(blockAPIActionResponse,APILifeCycleState.DEPRECATED,APILifeCycleState.RETIRED),""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ blockAPIActionResponse.getData());
}",0.9794135995009358
114887,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testInvokeAPIBeforeChangeAPILifecycleToRetired() throws Exception {
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherRestClient,apiStoreRestClient,APPLICATION_NAME);
  String accessToken=generateApplicationKeys(apiStoreRestClient,APPLICATION_NAME).getAccessToken();
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse oldVersionInvokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + API_END_POINT_METHOD,requestHeaders);
  assertEquals(oldVersionInvokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(oldVersionInvokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + ""String_Node_Str"" + oldVersionInvokeResponse.getData());
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testInvokeAPIBeforeChangeAPILifecycleToRetired() throws Exception {
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherRestClient,apiStoreRestClient,APPLICATION_NAME);
  String accessToken=generateApplicationKeys(apiStoreRestClient,APPLICATION_NAME).getAccessToken();
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse oldVersionInvokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + API_END_POINT_METHOD,requestHeaders);
  assertEquals(oldVersionInvokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(oldVersionInvokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + ""String_Node_Str"" + oldVersionInvokeResponse.getData());
  Thread.sleep(1000);
}",0.989908256880734
114888,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testAvailabilityOfRetiredAPIInStore() throws APIManagerIntegrationTestException {
  List<APIIdentifier> apiStoreAPIIdentifierList=APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse(apiStoreRestClient.getAPI());
  assertFalse(APIMTestCaseUtils.isAPIAvailable(apiIdentifier,apiStoreAPIIdentifierList),""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testAvailabilityOfRetiredAPIInStore() throws Exception {
  List<APIIdentifier> apiStoreAPIIdentifierList=APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse(apiStoreRestClient.getAPI());
  assertFalse(APIMTestCaseUtils.isAPIAvailable(apiIdentifier,apiStoreAPIIdentifierList),""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
}",0.972972972972973
114889,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testChangeAPILifecycleToDepricated() throws APIManagerIntegrationTestException {
  APILifeCycleStateRequest blockUpdateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.DEPRECATED);
  blockUpdateRequest.setVersion(API_VERSION_1_0_0);
  HttpResponse blockAPIActionResponse=apiPublisherRestClient.changeAPILifeCycleStatus(blockUpdateRequest);
  assertEquals(blockAPIActionResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(verifyAPIStatusChange(blockAPIActionResponse,APILifeCycleState.PUBLISHED,APILifeCycleState.DEPRECATED),""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ blockAPIActionResponse.getData());
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testChangeAPILifecycleToDepricated() throws Exception {
  APILifeCycleStateRequest deprecateUpdateRequest=new APILifeCycleStateRequest(API_NAME,providerName,APILifeCycleState.DEPRECATED);
  deprecateUpdateRequest.setVersion(API_VERSION_1_0_0);
  HttpResponse blockAPIActionResponse=apiPublisherRestClient.changeAPILifeCycleStatus(deprecateUpdateRequest);
  assertEquals(blockAPIActionResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"");
  assertTrue(verifyAPIStatusChange(blockAPIActionResponse,APILifeCycleState.PUBLISHED,APILifeCycleState.DEPRECATED),""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ blockAPIActionResponse.getData());
  Thread.sleep(1000);
}",0.9452307692307692
114890,"@BeforeMethod public void init(){
  try {
    super.init();
    publisherURLHttp=publisherUrls.getWebAppURLHttp();
    storeURLHttp=storeUrls.getWebAppURLHttp();
    apiPublisher=new APIPublisherRestClient(publisherURLHttp);
    apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
    contextUsername=publisherContext.getContextTenant().getContextUser().getUserName();
    contextUserPassword=publisherContext.getContextTenant().getContextUser().getPassword();
    userManagementClient=new UserManagementClient(publisherContext.getContextUrls().getBackEndUrl(),contextUsername,contextUserPassword);
    userManagementClient.addRole(FIRST_ROLE,new String[]{},new String[]{PERMISSION_LOGIN,PERMISSION_API_SUBSCRIBE});
    userManagementClient.addRole(SECOND_ROLE,new String[]{},new String[]{PERMISSION_LOGIN,PERMISSION_API_SUBSCRIBE});
    userManagementClient.addUser(FIRST_USER,USER_PASSWORD,new String[]{FIRST_ROLE},FIRST_USER);
  }
 catch (  APIManagerIntegrationTestException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  RemoteException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  UserAdminUserAdminException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  XPathExpressionException e) {
    assertTrue(false,""String_Node_Str"");
  }
}","@BeforeMethod public void init(){
  try {
    super.init();
    publisherURLHttp=publisherUrls.getWebAppURLHttp();
    storeURLHttp=storeUrls.getWebAppURLHttp();
    apiPublisher=new APIPublisherRestClient(publisherURLHttp);
    apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
    contextUsername=publisherContext.getContextTenant().getContextUser().getUserName();
    contextUserPassword=publisherContext.getContextTenant().getContextUser().getPassword();
    userManagementClient=new UserManagementClient(publisherContext.getContextUrls().getBackEndUrl(),contextUsername,contextUserPassword);
    userManagementClient.addRole(FIRST_ROLE,new String[]{},new String[]{PERMISSION_LOGIN,PERMISSION_API_SUBSCRIBE});
    userManagementClient.addRole(SECOND_ROLE,new String[]{},new String[]{PERMISSION_LOGIN,PERMISSION_API_SUBSCRIBE});
    userManagementClient.addUser(FIRST_USER,USER_PASSWORD,new String[]{FIRST_ROLE},FIRST_USER);
  }
 catch (  APIManagerIntegrationTestException e) {
    assertTrue(false,""String_Node_Str"" + e.getMessage());
  }
catch (  RemoteException e) {
    assertTrue(false,""String_Node_Str"" + e.getMessage());
  }
catch (  UserAdminUserAdminException e) {
    assertTrue(false,""String_Node_Str"" + e.getMessage());
  }
catch (  XPathExpressionException e) {
    assertTrue(false,""String_Node_Str"" + e.getMessage());
  }
}",0.9741444866920153
114891,"/** 
 * This method can be used to wait for API Un-deployment sync in distributed and clustered environment APIStatusMonitor will be invoked to get API related data and then verify that data matches with expected response provided.
 * @param apiProvider      - Provider of the API
 * @param apiName          - API name
 * @param apiVersion       - API version
 * @param expectedResponse - Expected response
 * @throws XPathExpressionException - Throws if something goes wrong
 */
protected void waitForAPIUnDeploymentSync(String apiProvider,String apiName,String apiVersion,String expectedResponse) throws IOException, XPathExpressionException {
  long currentTime=System.currentTimeMillis();
  long waitTime=currentTime + WAIT_TIME;
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (waitTime > System.currentTimeMillis()) {
      HttpResponse response=HttpRequestUtil.sendGetRequest(getGatewayURLHttp() + ""String_Node_Str"" + apiProvider+ ""String_Node_Str""+ apiName+ ""String_Node_Str""+ apiVersion,null);
      log.info(""String_Node_Str"" + apiName + ""String_Node_Str""+ apiVersion+ ""String_Node_Str""+ apiProvider+ ""String_Node_Str""+ expectedResponse);
      if (!response.getData().contains(expectedResponse)) {
        log.info(""String_Node_Str"" + apiName + ""String_Node_Str""+ apiVersion+ ""String_Node_Str""+ expectedResponse+ ""String_Node_Str"");
        break;
      }
 else {
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
  }
}","/** 
 * This method can be used to wait for API Un-deployment sync in distributed and clustered environment APIStatusMonitor will be invoked to get API related data and then verify that data matches with expected response provided.
 * @param apiProvider      - Provider of the API
 * @param apiName          - API name
 * @param apiVersion       - API version
 * @param expectedResponse - Expected response
 * @throws APIManagerIntegrationTestException - Throws if something goes wrong
 */
protected void waitForAPIUnDeploymentSync(String apiProvider,String apiName,String apiVersion,String expectedResponse) throws APIManagerIntegrationTestException {
  long currentTime=System.currentTimeMillis();
  long waitTime=currentTime + WAIT_TIME;
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    String tenantIdentifier=getTenantIdentifier(apiProvider);
    while (waitTime > System.currentTimeMillis()) {
      HttpResponse response=null;
      try {
        response=HttpRequestUtil.sendGetRequest(getGatewayURLHttp() + ""String_Node_Str"" + tenantIdentifier+ apiName+ ""String_Node_Str""+ apiVersion,null);
      }
 catch (      IOException ignored) {
        log.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + apiName + ""String_Node_Str""+ ""String_Node_Str""+ apiProvider);
      }
      log.info(""String_Node_Str"" + apiName + ""String_Node_Str""+ apiVersion+ ""String_Node_Str""+ apiProvider+ ""String_Node_Str""+ expectedResponse);
      if (response != null) {
        if (!response.getData().contains(expectedResponse)) {
          log.info(""String_Node_Str"" + apiName + ""String_Node_Str""+ apiVersion+ ""String_Node_Str""+ expectedResponse+ ""String_Node_Str"");
          break;
        }
 else {
          try {
            Thread.sleep(500);
          }
 catch (          InterruptedException ignored) {
          }
        }
      }
    }
  }
}",0.66415313225058
114892,"/** 
 * This method can be used to wait for API deployment sync in distributed and clustered environment APIStatusMonitor will be invoked to get API related data and then verify that data matches with expected response provided.
 * @param apiProvider      - Provider of the API
 * @param apiName          - API name
 * @param apiVersion       - API version
 * @param expectedResponse - Expected response
 * @throws XPathExpressionException - Throws if something goes wrong
 */
protected void waitForAPIDeploymentSync(String apiProvider,String apiName,String apiVersion,String expectedResponse) throws XPathExpressionException {
  long currentTime=System.currentTimeMillis();
  long waitTime=currentTime + WAIT_TIME;
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (waitTime > System.currentTimeMillis()) {
      HttpResponse response=null;
      try {
        response=HttpRequestUtil.sendGetRequest(getGatewayURLHttp() + ""String_Node_Str"" + apiProvider+ ""String_Node_Str""+ apiName+ ""String_Node_Str""+ apiVersion,null);
      }
 catch (      IOException ignored) {
        log.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + apiName + ""String_Node_Str""+ ""String_Node_Str""+ apiProvider);
      }
      log.info(""String_Node_Str"" + apiName + ""String_Node_Str""+ apiVersion+ ""String_Node_Str""+ apiProvider+ ""String_Node_Str""+ expectedResponse);
      if (response != null) {
        if (response.getData().contains(expectedResponse)) {
          log.info(""String_Node_Str"" + apiName + ""String_Node_Str""+ apiVersion+ ""String_Node_Str""+ expectedResponse+ ""String_Node_Str"");
          break;
        }
 else {
          try {
            Thread.sleep(500);
          }
 catch (          InterruptedException ignored) {
          }
        }
      }
    }
  }
}","/** 
 * This method can be used to wait for API deployment sync in distributed and clustered environment APIStatusMonitor will be invoked to get API related data and then verify that data matches with expected response provided.
 * @param apiProvider      - Provider of the API
 * @param apiName          - API name
 * @param apiVersion       - API version
 * @param expectedResponse - Expected response
 * @throws APIManagerIntegrationTestException - Throws if something goes wrong
 */
protected void waitForAPIDeploymentSync(String apiProvider,String apiName,String apiVersion,String expectedResponse) throws APIManagerIntegrationTestException {
  long currentTime=System.currentTimeMillis();
  long waitTime=currentTime + WAIT_TIME;
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    String tenantIdentifier=getTenantIdentifier(apiProvider);
    while (waitTime > System.currentTimeMillis()) {
      HttpResponse response=null;
      try {
        response=HttpRequestUtil.sendGetRequest(getGatewayURLHttp() + ""String_Node_Str"" + tenantIdentifier+ apiName+ ""String_Node_Str""+ apiVersion,null);
      }
 catch (      IOException ignored) {
        log.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + apiName + ""String_Node_Str""+ ""String_Node_Str""+ apiProvider);
      }
      log.info(""String_Node_Str"" + apiName + ""String_Node_Str""+ apiVersion+ ""String_Node_Str""+ apiProvider+ ""String_Node_Str""+ expectedResponse);
      if (response != null) {
        if (response.getData().contains(expectedResponse)) {
          log.info(""String_Node_Str"" + apiName + ""String_Node_Str""+ apiVersion+ ""String_Node_Str""+ expectedResponse+ ""String_Node_Str"");
          break;
        }
 else {
          try {
            Thread.sleep(500);
          }
 catch (          InterruptedException ignored) {
          }
        }
      }
    }
  }
}",0.9503775620280476
114893,"/** 
 * Create publish and subscribe a API.
 * @param apiIdentifier          - Instance of APIIdentifier object  that include the  API Name,API Version and API Provider
 * @param apiCreationRequestBean - Instance of APICreationRequestBean with all needed API information
 * @param publisherRestClient    -  Instance of APIPublisherRestClient
 * @param storeRestClient        - Instance of APIStoreRestClient
 * @param applicationName        - Name of the Application that the API need to subscribe.
 * @throws APIManagerIntegrationTestException - Exception throws by API create publish and subscribe a API activities.
 */
protected void createPublishAndSubscribeToAPI(APIIdentifier apiIdentifier,APICreationRequestBean apiCreationRequestBean,APIPublisherRestClient publisherRestClient,APIStoreRestClient storeRestClient,String applicationName) throws APIManagerIntegrationTestException {
  createAndPublishAPI(apiIdentifier,apiCreationRequestBean,publisherRestClient,false);
  try {
    waitForAPIDeploymentSync(user.getUserName(),apiIdentifier.getApiName(),apiIdentifier.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  }
 catch (  XPathExpressionException ex) {
    throw new APIManagerIntegrationTestException(ex.getMessage(),ex);
  }
  HttpResponse httpResponseSubscribeAPI=subscribeToAPI(apiIdentifier,applicationName,storeRestClient);
  if (!(httpResponseSubscribeAPI.getResponseCode() == HTTP_RESPONSE_CODE_OK && getValueFromJSON(httpResponseSubscribeAPI,""String_Node_Str"").equals(""String_Node_Str""))) {
    throw new APIManagerIntegrationTestException(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ httpResponseSubscribeAPI.getResponseCode()+ ""String_Node_Str""+ httpResponseSubscribeAPI.getData());
  }
  log.info(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
}","/** 
 * Create publish and subscribe a API.
 * @param apiIdentifier          - Instance of APIIdentifier object  that include the  API Name,API Version and API Provider
 * @param apiCreationRequestBean - Instance of APICreationRequestBean with all needed API information
 * @param publisherRestClient    -  Instance of APIPublisherRestClient
 * @param storeRestClient        - Instance of APIStoreRestClient
 * @param applicationName        - Name of the Application that the API need to subscribe.
 * @throws APIManagerIntegrationTestException - Exception throws by API create publish and subscribe a API activities.
 */
protected void createPublishAndSubscribeToAPI(APIIdentifier apiIdentifier,APICreationRequestBean apiCreationRequestBean,APIPublisherRestClient publisherRestClient,APIStoreRestClient storeRestClient,String applicationName) throws APIManagerIntegrationTestException {
  createAndPublishAPI(apiIdentifier,apiCreationRequestBean,publisherRestClient,false);
  waitForAPIDeploymentSync(user.getUserName(),apiIdentifier.getApiName(),apiIdentifier.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse httpResponseSubscribeAPI=subscribeToAPI(apiIdentifier,applicationName,storeRestClient);
  if (!(httpResponseSubscribeAPI.getResponseCode() == HTTP_RESPONSE_CODE_OK && getValueFromJSON(httpResponseSubscribeAPI,""String_Node_Str"").equals(""String_Node_Str""))) {
    throw new APIManagerIntegrationTestException(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier) + ""String_Node_Str""+ httpResponseSubscribeAPI.getResponseCode()+ ""String_Node_Str""+ httpResponseSubscribeAPI.getData());
  }
  log.info(""String_Node_Str"" + getAPIIdentifierString(apiIdentifier));
}",0.9633001422475108
114894,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  apiPublisher.deleteAPI(apiNamePublic,APIVersion,user.getUserName());
  apiPublisher.deleteAPI(apiNameRestricted,APIVersion,user.getUserName());
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  apiPublisher.deleteAPI(apiNamePublic,APIVersion,user.getUserName());
  apiPublisher.deleteAPI(apiNameRestricted,APIVersion,user.getUserName());
  userManagementClient1.deleteRole(role);
  userManagementClient1.deleteUser(allowedUser);
}",0.8260038240917782
114895,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  endpointUrl=backEndServerUrl.getWebAppURLHttp() + ""String_Node_Str"";
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  userManagementClient=new UserManagementClient(publisherContext.getContextUrls().getBackEndUrl(),createSession(publisherContext));
  userManagementClient.addRole(role,null,permissions);
  userManagementClient.addUser(allowedUser,String.valueOf(allowedUserPass),new String[]{role},null);
  tagListUrl=new URL(getStoreURLHttp() + ""String_Node_Str"");
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init(userMode);
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  endpointUrl=backEndServerUrl.getWebAppURLHttp() + ""String_Node_Str"";
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(user.getUserName(),user.getPassword());
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),createSession(keyManagerContext));
  userManagementClient1.addRole(role,null,permissions);
  userManagementClient1.addUser(allowedUser,String.valueOf(allowedUserPass),new String[]{role},null);
  tagListUrl=new URL(getStoreURLHttp() + ""String_Node_Str"");
}",0.9786130913804276
114896,"@BeforeClass(alwaysRun=true) public void initialize() throws Exception {
  super.init();
  apiEndPointUrl=getGatewayURLHttp() + API_END_POINT_POSTFIX_URL;
  String publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  apiPublisherClientCarbonSuperAdmin=new APIPublisherRestClient(publisherURLHttp);
  apiStoreClientCarbonSuperAdmin=new APIStoreRestClient(storeURLHttp);
  apiPublisherClientCarbonSuperAdmin.login(user.getUserName(),user.getPassword());
  apiStoreClientCarbonSuperAdmin.login(user.getUserName(),user.getPassword());
  apiPublisherClientCarbonSuperUser1=new APIPublisherRestClient(publisherURLHttp);
  apiStoreClientCarbonSuperUser1=new APIStoreRestClient(storeURLHttp);
  providerName=publisherContext.getContextTenant().getTenantUser(USER_KEY_USER2).getUserName();
  apiPublisherClientCarbonSuperUser1.login(publisherContext.getContextTenant().getTenantUser(USER_KEY_USER2).getUserName(),publisherContext.getContextTenant().getTenantUser(USER_KEY_USER2).getPassword());
  apiStoreClientCarbonSuperUser1.login(storeContext.getContextTenant().getTenantUser(USER_KEY_USER2).getUserName(),storeContext.getContextTenant().getTenantUser(USER_KEY_USER2).getPassword());
  apiCreatorStoreDomain=storeContext.getContextTenant().getDomain();
  apiStoreClientCarbonSuperUser2=new APIStoreRestClient(storeURLHttp);
  apiPublisherClientCarbonSuperUser2=new APIPublisherRestClient(publisherURLHttp);
  apiStoreClientCarbonSuperUser2.login(storeContext.getContextTenant().getTenantUser(CARBON_SUPER_TENANT2_KEY).getUserName(),storeContext.getContextTenant().getTenantUser(CARBON_SUPER_TENANT2_KEY).getPassword());
  apiPublisherClientCarbonSuperUser2.login(publisherContext.getContextTenant().getTenantUser(CARBON_SUPER_TENANT2_KEY).getUserName(),publisherContext.getContextTenant().getTenantUser(CARBON_SUPER_TENANT2_KEY).getPassword());
  userManagementClient1=new UserManagementClient(publisherContext.getContextUrls().getBackEndUrl(),createSession(publisherContext));
  if (userManagementClient1.userNameExists(INTERNAL_ROLE_SUBSCRIBER,CARBON_SUPER_SUBSCRIBER_USERNAME)) {
    userManagementClient1.deleteUser(CARBON_SUPER_SUBSCRIBER_USERNAME);
  }
  userManagementClient1.addUser(CARBON_SUPER_SUBSCRIBER_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER},null);
  apiStoreClientSubscriberUserSameDomain=new APIStoreRestClient(storeURLHttp);
  apiStoreClientSubscriberUserSameDomain.login(CARBON_SUPER_SUBSCRIBER_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_PASSWORD));
  init(TENANT_DOMAIN_KEY,TENANT_DOMAIN_ADMIN_KEY);
  otherDomain=storeContext.getContextTenant().getDomain();
  apiStoreClientAnotherUserOtherDomain=new APIStoreRestClient(storeURLHttp);
  apiPublisherClientAnotherUserOtherDomain=new APIPublisherRestClient(publisherURLHttp);
  apiStoreClientAnotherUserOtherDomain.login(storeContext.getContextTenant().getTenantUser(OTHER_DOMAIN_TENANT_USER_KEY).getUserName(),storeContext.getContextTenant().getTenantUser(OTHER_DOMAIN_TENANT_USER_KEY).getUserName());
  apiPublisherClientAnotherUserOtherDomain.login(publisherContext.getContextTenant().getTenantUser(OTHER_DOMAIN_TENANT_USER_KEY).getUserName(),publisherContext.getContextTenant().getTenantUser(OTHER_DOMAIN_TENANT_USER_KEY).getUserName());
  apiStoreClientAdminOtherDomain=new APIStoreRestClient(storeURLHttp);
  apiPublisherClientAdminOtherDomain=new APIPublisherRestClient(publisherURLHttp);
  apiStoreClientAdminOtherDomain.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiPublisherClientAdminOtherDomain.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword());
  userManagementClient2=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),createSession(keyManagerContext));
  if (userManagementClient2.roleNameExists(INTERNAL_ROLE_SUBSCRIBER)) {
    userManagementClient2.deleteRole(INTERNAL_ROLE_SUBSCRIBER);
  }
  userManagementClient2.addInternalRole(ROLE_SUBSCRIBER,new String[]{},new String[]{""String_Node_Str"",""String_Node_Str""});
  if (userManagementClient2.userNameExists(INTERNAL_ROLE_SUBSCRIBER,TENANT_SUBSCRIBER_USERNAME)) {
    userManagementClient2.deleteUser(TENANT_SUBSCRIBER_USERNAME);
  }
  userManagementClient2.addUser(TENANT_SUBSCRIBER_USERNAME,String.valueOf(TENANT_SUBSCRIBER_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER},null);
  apiStoreClientSubscriberUserOtherDomain=new APIStoreRestClient(storeURLHttp);
  apiStoreClientSubscriberUserOtherDomain.login(TENANT_SUBSCRIBER_USERNAME,String.valueOf(TENANT_SUBSCRIBER_PASSWORD));
}","@BeforeClass(alwaysRun=true) public void initialize() throws Exception {
  super.init();
  apiEndPointUrl=getGatewayURLHttp() + API_END_POINT_POSTFIX_URL;
  String publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  apiPublisherClientCarbonSuperAdmin=new APIPublisherRestClient(publisherURLHttp);
  apiStoreClientCarbonSuperAdmin=new APIStoreRestClient(storeURLHttp);
  apiPublisherClientCarbonSuperAdmin.login(user.getUserName(),user.getPassword());
  apiStoreClientCarbonSuperAdmin.login(user.getUserName(),user.getPassword());
  apiPublisherClientCarbonSuperUser1=new APIPublisherRestClient(publisherURLHttp);
  apiStoreClientCarbonSuperUser1=new APIStoreRestClient(storeURLHttp);
  providerName=publisherContext.getContextTenant().getTenantUser(USER_KEY_USER2).getUserName();
  apiPublisherClientCarbonSuperUser1.login(publisherContext.getContextTenant().getTenantUser(USER_KEY_USER2).getUserName(),publisherContext.getContextTenant().getTenantUser(USER_KEY_USER2).getPassword());
  apiStoreClientCarbonSuperUser1.login(storeContext.getContextTenant().getTenantUser(USER_KEY_USER2).getUserName(),storeContext.getContextTenant().getTenantUser(USER_KEY_USER2).getPassword());
  apiCreatorStoreDomain=storeContext.getContextTenant().getDomain();
  apiStoreClientCarbonSuperUser2=new APIStoreRestClient(storeURLHttp);
  apiPublisherClientCarbonSuperUser2=new APIPublisherRestClient(publisherURLHttp);
  apiStoreClientCarbonSuperUser2.login(storeContext.getContextTenant().getTenantUser(CARBON_SUPER_TENANT2_KEY).getUserName(),storeContext.getContextTenant().getTenantUser(CARBON_SUPER_TENANT2_KEY).getPassword());
  apiPublisherClientCarbonSuperUser2.login(publisherContext.getContextTenant().getTenantUser(CARBON_SUPER_TENANT2_KEY).getUserName(),publisherContext.getContextTenant().getTenantUser(CARBON_SUPER_TENANT2_KEY).getPassword());
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),createSession(keyManagerContext));
  if (userManagementClient1.userNameExists(INTERNAL_ROLE_SUBSCRIBER,CARBON_SUPER_SUBSCRIBER_USERNAME)) {
    userManagementClient1.deleteUser(CARBON_SUPER_SUBSCRIBER_USERNAME);
  }
  userManagementClient1.addUser(CARBON_SUPER_SUBSCRIBER_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER},null);
  apiStoreClientSubscriberUserSameDomain=new APIStoreRestClient(storeURLHttp);
  apiStoreClientSubscriberUserSameDomain.login(CARBON_SUPER_SUBSCRIBER_USERNAME,String.valueOf(CARBON_SUPER_SUBSCRIBER_PASSWORD));
  init(TENANT_DOMAIN_KEY,TENANT_DOMAIN_ADMIN_KEY);
  otherDomain=storeContext.getContextTenant().getDomain();
  apiStoreClientAnotherUserOtherDomain=new APIStoreRestClient(storeURLHttp);
  apiPublisherClientAnotherUserOtherDomain=new APIPublisherRestClient(publisherURLHttp);
  apiStoreClientAnotherUserOtherDomain.login(storeContext.getContextTenant().getTenantUser(OTHER_DOMAIN_TENANT_USER_KEY).getUserName(),storeContext.getContextTenant().getTenantUser(OTHER_DOMAIN_TENANT_USER_KEY).getUserName());
  apiPublisherClientAnotherUserOtherDomain.login(publisherContext.getContextTenant().getTenantUser(OTHER_DOMAIN_TENANT_USER_KEY).getUserName(),publisherContext.getContextTenant().getTenantUser(OTHER_DOMAIN_TENANT_USER_KEY).getUserName());
  apiStoreClientAdminOtherDomain=new APIStoreRestClient(storeURLHttp);
  apiPublisherClientAdminOtherDomain=new APIPublisherRestClient(publisherURLHttp);
  apiStoreClientAdminOtherDomain.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiPublisherClientAdminOtherDomain.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword());
  userManagementClient2=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),createSession(keyManagerContext));
  if (userManagementClient2.roleNameExists(INTERNAL_ROLE_SUBSCRIBER)) {
    userManagementClient2.deleteRole(INTERNAL_ROLE_SUBSCRIBER);
  }
  userManagementClient2.addInternalRole(ROLE_SUBSCRIBER,new String[]{},new String[]{""String_Node_Str"",""String_Node_Str""});
  if (userManagementClient2.userNameExists(INTERNAL_ROLE_SUBSCRIBER,TENANT_SUBSCRIBER_USERNAME)) {
    userManagementClient2.deleteUser(TENANT_SUBSCRIBER_USERNAME);
  }
  userManagementClient2.addUser(TENANT_SUBSCRIBER_USERNAME,String.valueOf(TENANT_SUBSCRIBER_PASSWORD),new String[]{INTERNAL_ROLE_SUBSCRIBER},null);
  apiStoreClientSubscriberUserOtherDomain=new APIStoreRestClient(storeURLHttp);
  apiStoreClientSubscriberUserOtherDomain.login(TENANT_SUBSCRIBER_USERNAME,String.valueOf(TENANT_SUBSCRIBER_PASSWORD));
}",0.9968125796855078
114897,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init();
  gatewaySessionCookie=createSession(gatewayContextMgt);
  TenantManagementServiceClient tenantManagementServiceClient=new TenantManagementServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),gatewaySessionCookie);
  tenantManagementServiceClient.addTenant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String file=""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
  OMElement synapseConfig=APIMTestCaseUtils.loadResource(file);
  AuthenticatorClient login=new AuthenticatorClient(gatewayContextWrk.getContextUrls().getBackEndUrl());
  String session=login.login(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  APIMTestCaseUtils.updateSynapseConfiguration(synapseConfig,gatewayContextWrk.getContextUrls().getBackEndUrl(),session);
  Thread.sleep(5000);
  wireServer=new WireMonitorServer(8991);
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init();
  gatewaySessionCookie=createSession(gatewayContextMgt);
  tenantManagementServiceClient.addTenant(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String file=""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
  OMElement synapseConfig=APIMTestCaseUtils.loadResource(file);
  AuthenticatorClient login=new AuthenticatorClient(gatewayContextWrk.getContextUrls().getBackEndUrl());
  String session=login.login(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  APIMTestCaseUtils.updateSynapseConfiguration(synapseConfig,gatewayContextWrk.getContextUrls().getBackEndUrl(),session);
  Thread.sleep(5000);
  wireServer=new WireMonitorServer(8991);
}",0.9120992761116856
114898,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void UserNameInTenantJWTTokenTestCase() throws Exception {
  String userName=""String_Node_Str"";
  String password=""String_Node_Str"";
  String domainName=""String_Node_Str"";
  String fullUserName=userName + ""String_Node_Str"" + domainName;
  boolean isSuccessful=createTenantWithEmailUserName(userName,password,domainName,keyManagerContext.getContextUrls().getBackEndUrl());
  assertEquals(isSuccessful,true);
  UserManagementClient userManagementClient=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),fullUserName,password);
  userManagementClient.addRemoveRolesOfUser(fullUserName,new String[]{""String_Node_Str""},null);
  String requestBody=""String_Node_Str"" + fullUserName + ""String_Node_Str""+ password;
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  String userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  Thread.sleep(2000);
  WireMonitorServer wireServer=new WireMonitorServer(6789);
  wireServer.start();
  HttpRequestUtil.doGet(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"",requestHeaders);
  String wireLog=wireServer.getCapturedMessage();
  if (wireLog.contains(""String_Node_Str"")) {
    wireLog=wireLog.split(""String_Node_Str"")[1];
    int firstDotSeparatorIndex=wireLog.indexOf('.');
    int secondSeparatorIndex=wireLog.indexOf('.',firstDotSeparatorIndex + 1);
    String JWTToken=wireLog.substring(firstDotSeparatorIndex + 1,secondSeparatorIndex);
    byte[] decodedJwt=Base64.decodeBase64(JWTToken.getBytes());
    JSONObject jsonObject=new JSONObject(new String(decodedJwt));
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
  }
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void UserNameInTenantJWTTokenTestCase() throws Exception {
  String userName=""String_Node_Str"";
  String password=""String_Node_Str"";
  String domainName=""String_Node_Str"";
  String fullUserName=userName + ""String_Node_Str"" + domainName;
  boolean isSuccessful=createTenantWithEmailUserName(userName,password,domainName,keyManagerContext.getContextUrls().getBackEndUrl());
  assertEquals(isSuccessful,true);
  UserManagementClient userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),fullUserName,password);
  userManagementClient1.addRemoveRolesOfUser(fullUserName,new String[]{""String_Node_Str""},null);
  String requestBody=""String_Node_Str"" + fullUserName + ""String_Node_Str""+ password;
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  String userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  Thread.sleep(2000);
  WireMonitorServer wireServer=new WireMonitorServer(6789);
  wireServer.start();
  HttpRequestUtil.doGet(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"",requestHeaders);
  String wireLog=wireServer.getCapturedMessage();
  if (wireLog.contains(""String_Node_Str"")) {
    wireLog=wireLog.split(""String_Node_Str"")[1];
    int firstDotSeparatorIndex=wireLog.indexOf('.');
    int secondSeparatorIndex=wireLog.indexOf('.',firstDotSeparatorIndex + 1);
    String JWTToken=wireLog.substring(firstDotSeparatorIndex + 1,secondSeparatorIndex);
    byte[] decodedJwt=Base64.decodeBase64(JWTToken.getBytes());
    JSONObject jsonObject=new JSONObject(new String(decodedJwt));
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
  }
}",0.9996632996632996
114899,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void emailUserNameInTenantJWTTokenTestCase() throws Exception {
  String userNameWithEmail=""String_Node_Str"";
  String password=""String_Node_Str"";
  String domainName=""String_Node_Str"";
  String fullUserName=userNameWithEmail + ""String_Node_Str"" + domainName;
  UserManagementClient userManagementClient=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),""String_Node_Str"",""String_Node_Str"");
  userManagementClient.addUser(userNameWithEmail,password,new String[]{""String_Node_Str""},""String_Node_Str"");
  String requestBody=""String_Node_Str"" + fullUserName + ""String_Node_Str""+ password;
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  String userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  Thread.sleep(2000);
  WireMonitorServer wireServer=new WireMonitorServer(6789);
  wireServer.start();
  HttpRequestUtil.doGet(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"",requestHeaders);
  String wireLog=wireServer.getCapturedMessage();
  if (wireLog.contains(""String_Node_Str"")) {
    wireLog=wireLog.split(""String_Node_Str"")[1];
    int firstDotSeparatorIndex=wireLog.indexOf('.');
    int secondSeparatorIndex=wireLog.indexOf('.',firstDotSeparatorIndex + 1);
    String JWTToken=wireLog.substring(firstDotSeparatorIndex + 1,secondSeparatorIndex);
    byte[] decodedJwt=Base64.decodeBase64(JWTToken.getBytes());
    JSONObject jsonObject=new JSONObject(new String(decodedJwt));
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
  }
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void emailUserNameInTenantJWTTokenTestCase() throws Exception {
  String userNameWithEmail=""String_Node_Str"";
  String password=""String_Node_Str"";
  String domainName=""String_Node_Str"";
  String fullUserName=userNameWithEmail + ""String_Node_Str"" + domainName;
  UserManagementClient userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),""String_Node_Str"",""String_Node_Str"");
  userManagementClient1.addUser(userNameWithEmail,password,new String[]{""String_Node_Str""},""String_Node_Str"");
  String requestBody=""String_Node_Str"" + fullUserName + ""String_Node_Str""+ password;
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  String userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  Thread.sleep(2000);
  WireMonitorServer wireServer=new WireMonitorServer(6789);
  wireServer.start();
  HttpRequestUtil.doGet(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"",requestHeaders);
  String wireLog=wireServer.getCapturedMessage();
  if (wireLog.contains(""String_Node_Str"")) {
    wireLog=wireLog.split(""String_Node_Str"")[1];
    int firstDotSeparatorIndex=wireLog.indexOf('.');
    int secondSeparatorIndex=wireLog.indexOf('.',firstDotSeparatorIndex + 1);
    String JWTToken=wireLog.substring(firstDotSeparatorIndex + 1,secondSeparatorIndex);
    byte[] decodedJwt=Base64.decodeBase64(JWTToken.getBytes());
    JSONObject jsonObject=new JSONObject(new String(decodedJwt));
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
  }
}",0.9996308600959763
114900,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void emailUserNameInSuperTenantJWTTokenTestCase() throws Exception {
  String userName=""String_Node_Str"";
  String password=""String_Node_Str"";
  UserManagementClient userManagementClient=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),""String_Node_Str"",""String_Node_Str"");
  userManagementClient.addUser(userName,password,new String[]{""String_Node_Str""},""String_Node_Str"");
  String requestBody=""String_Node_Str"" + userName + ""String_Node_Str""+ MultitenantConstants.SUPER_TENANT_DOMAIN_NAME+ ""String_Node_Str""+ password;
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  String userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  Thread.sleep(2000);
  WireMonitorServer wireServer=new WireMonitorServer(6789);
  wireServer.start();
  HttpRequestUtil.doGet(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"",requestHeaders);
  String wireLog=wireServer.getCapturedMessage();
  if (wireLog.contains(""String_Node_Str"")) {
    wireLog=wireLog.split(""String_Node_Str"")[1];
    int firstDotSeparatorIndex=wireLog.indexOf('.');
    int secondSeparatorIndex=wireLog.indexOf('.',firstDotSeparatorIndex + 1);
    String JWTToken=wireLog.substring(firstDotSeparatorIndex + 1,secondSeparatorIndex);
    byte[] decodedJwt=Base64.decodeBase64(JWTToken.getBytes());
    JSONObject jsonObject=new JSONObject(new String(decodedJwt));
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),userName);
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
  }
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void emailUserNameInSuperTenantJWTTokenTestCase() throws Exception {
  String userName=""String_Node_Str"";
  String password=""String_Node_Str"";
  userManagementClient.addUser(userName,password,new String[]{""String_Node_Str""},""String_Node_Str"");
  String requestBody=""String_Node_Str"" + userName + ""String_Node_Str""+ MultitenantConstants.SUPER_TENANT_DOMAIN_NAME+ ""String_Node_Str""+ password;
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  JSONObject accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  String userAccessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + userAccessToken);
  Thread.sleep(2000);
  WireMonitorServer wireServer=new WireMonitorServer(6789);
  wireServer.start();
  HttpRequestUtil.doGet(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"",requestHeaders);
  String wireLog=wireServer.getCapturedMessage();
  if (wireLog.contains(""String_Node_Str"")) {
    wireLog=wireLog.split(""String_Node_Str"")[1];
    int firstDotSeparatorIndex=wireLog.indexOf('.');
    int secondSeparatorIndex=wireLog.indexOf('.',firstDotSeparatorIndex + 1);
    String JWTToken=wireLog.substring(firstDotSeparatorIndex + 1,secondSeparatorIndex);
    byte[] decodedJwt=Base64.decodeBase64(JWTToken.getBytes());
    JSONObject jsonObject=new JSONObject(new String(decodedJwt));
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),userName);
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
    assertEquals(jsonObject.get(""String_Node_Str""),""String_Node_Str"");
  }
}",0.9703230653643876
114901,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init();
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  serverConfigurationManager=new ServerConfigurationManager(gatewayContextWrk);
  serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ ""String_Node_Str""));
  serverConfigurationManager.applyConfiguration(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ ""String_Node_Str""));
  userManagementClient=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  URL url=new URL(gatewayUrlsWrk.getWebAppURLHttp());
  wireMonitorURL=""String_Node_Str"" + url.getHost() + ""String_Node_Str""+ hostPort;
  server=new WireMonitorServer(hostPort);
  server.setReadTimeOut(300);
  server.start();
  String gatewaySessionCookie=createSession(gatewayContextMgt);
  loadSynapseConfigurationFromClasspath(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"",gatewayContextMgt,gatewaySessionCookie);
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  super.init();
  publisherURLHttp=getPublisherURLHttp();
  storeURLHttp=getStoreURLHttp();
  serverConfigurationManager=new ServerConfigurationManager(gatewayContextWrk);
  serverConfigurationManager.applyConfigurationWithoutRestart(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ ""String_Node_Str""));
  serverConfigurationManager.applyConfiguration(new File(getAMResourceLocation() + File.separator + ""String_Node_Str""+ ""String_Node_Str""));
  userManagementClient1=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  URL url=new URL(gatewayUrlsWrk.getWebAppURLHttp());
  wireMonitorURL=""String_Node_Str"" + url.getHost() + ""String_Node_Str""+ hostPort;
  server=new WireMonitorServer(hostPort);
  server.setReadTimeOut(300);
  server.start();
  String gatewaySessionCookie=createSession(gatewayContextMgt);
  loadSynapseConfigurationFromClasspath(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"",gatewayContextMgt,gatewaySessionCookie);
}",0.9996190476190476
114902,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true) public void testSpecificUserJWTClaims() throws Exception {
  server.setFinished(false);
  server.start();
  String subscriberUser=""String_Node_Str"";
  String password=""String_Node_Str"";
  String accessToken;
  if ((userManagementClient != null) && !userManagementClient.userNameExists(""String_Node_Str"",subscriberUser)) {
    userManagementClient.addUser(subscriberUser,password,new String[]{""String_Node_Str""},null);
  }
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUser,""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUser,""String_Node_Str"",""String_Node_Str"",profile);
  serverConfigurationManager.restartGracefully();
  super.init();
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(subscriberUser,password);
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,providerName);
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"";
  APIMTestCaseUtils.sendGetRequest(url,accessToken);
  String serverMessage=server.getCapturedMessage();
  Assert.assertTrue(serverMessage.contains(""String_Node_Str""),""String_Node_Str"");
  String decodedJWTString=APIMTestCaseUtils.getDecodedJWT(serverMessage);
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"",claim.contains(""String_Node_Str""));
  String jwtHeader=APIMTestCaseUtils.getDecodedJWTHeader(serverMessage);
  byte[] jwtSignature=APIMTestCaseUtils.getDecodedJWTSignature(serverMessage);
  String jwtAssertion=APIMTestCaseUtils.getJWTAssertion(serverMessage);
  boolean isSignatureValid=APIMTestCaseUtils.isJwtSignatureValid(jwtAssertion,jwtSignature,jwtHeader);
  assertTrue(""String_Node_Str"",isSignatureValid);
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  apiStoreRestClient.removeAPISubscriptionByApplicationName(apiName,apiVersion,providerName,applicationName);
  apiStoreRestClient.removeApplication(applicationName);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",enabled=true) public void testSpecificUserJWTClaims() throws Exception {
  server.setFinished(false);
  server.start();
  String subscriberUser=""String_Node_Str"";
  String password=""String_Node_Str"";
  String accessToken;
  if ((userManagementClient1 != null) && !userManagementClient1.userNameExists(""String_Node_Str"",subscriberUser)) {
    userManagementClient1.addUser(subscriberUser,password,new String[]{""String_Node_Str""},null);
  }
  RemoteUserStoreManagerServiceClient remoteUserStoreManagerServiceClient=new RemoteUserStoreManagerServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  String profile=""String_Node_Str"";
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUser,""String_Node_Str"",""String_Node_Str"",profile);
  remoteUserStoreManagerServiceClient.setUserClaimValue(subscriberUser,""String_Node_Str"",""String_Node_Str"",profile);
  serverConfigurationManager.restartGracefully();
  super.init();
  APIStoreRestClient apiStoreRestClient=new APIStoreRestClient(storeURLHttp);
  apiStoreRestClient.login(subscriberUser,password);
  apiStoreRestClient.addApplication(applicationName,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,providerName);
  subscriptionRequest.setApplicationName(applicationName);
  apiStoreRestClient.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStoreRestClient.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  String url=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"";
  APIMTestCaseUtils.sendGetRequest(url,accessToken);
  String serverMessage=server.getCapturedMessage();
  Assert.assertTrue(serverMessage.contains(""String_Node_Str""),""String_Node_Str"");
  String decodedJWTString=APIMTestCaseUtils.getDecodedJWT(serverMessage);
  log.debug(""String_Node_Str"" + decodedJWTString);
  JSONObject jsonObject=new JSONObject(decodedJWTString);
  String claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"",claim.contains(""String_Node_Str""));
  String jwtHeader=APIMTestCaseUtils.getDecodedJWTHeader(serverMessage);
  byte[] jwtSignature=APIMTestCaseUtils.getDecodedJWTSignature(serverMessage);
  String jwtAssertion=APIMTestCaseUtils.getJWTAssertion(serverMessage);
  boolean isSignatureValid=APIMTestCaseUtils.isJwtSignatureValid(jwtAssertion,jwtSignature,jwtHeader);
  assertTrue(""String_Node_Str"",isSignatureValid);
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  claim=jsonObject.getString(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + claim,claim.contains(""String_Node_Str""));
  apiStoreRestClient.removeAPISubscriptionByApplicationName(apiName,apiVersion,providerName,applicationName);
  apiStoreRestClient.removeApplication(applicationName);
}",0.9995501574448944
114903,"/** 
 * Verify whether AM_MONITORING_WEB_APP is deployed or not
 * @param webAppURL - Backend URL of the webApp (not need to include webApp name or context)
 */
public static void isMonitoringAppDeployed(String webAppURL){
  long currentTime=System.currentTimeMillis();
  long waitTime=currentTime + (WEB_APP_DEPLOYMENT_DELAY);
  HttpResponse response=null;
  while (waitTime > System.currentTimeMillis()) {
    try {
      response=HttpRequestUtil.sendGetRequest(webAppURL + ""String_Node_Str"" + APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME+ ""String_Node_Str""+ APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME+ ""String_Node_Str"",null);
    }
 catch (    IOException ignore) {
      log.info(""String_Node_Str"" + APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME + ""String_Node_Str""+ APIMIntegrationConstants.IS_WEB_APP_EXISTS);
    }
    if (response != null) {
      if (response.getData().contains(APIMIntegrationConstants.IS_WEB_APP_EXISTS)) {
        log.info(""String_Node_Str"" + APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME + ""String_Node_Str"");
        break;
      }
 else {
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
  }
}","/** 
 * Verify whether AM_MONITORING_WEB_APP is deployed or not
 * @param webAppURL - Backend URL of the webApp (not need to include webApp name or context)
 */
public static void isMonitoringAppDeployed(String webAppURL){
  long currentTime=System.currentTimeMillis();
  long waitTime=currentTime + (WEB_APP_DEPLOYMENT_DELAY);
  HttpResponse response=null;
  while (waitTime > System.currentTimeMillis()) {
    try {
      response=HttpRequestUtil.sendGetRequest(webAppURL + ""String_Node_Str"" + APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME+ ""String_Node_Str""+ MultitenantConstants.SUPER_TENANT_DOMAIN_NAME+ ""String_Node_Str""+ MultitenantConstants.SUPER_TENANT_ID+ ""String_Node_Str""+ APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME+ ""String_Node_Str"",null);
    }
 catch (    IOException ignore) {
      log.info(""String_Node_Str"" + APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME + ""String_Node_Str""+ APIMIntegrationConstants.IS_WEB_APP_EXISTS);
    }
    if (response != null) {
      if (response.getData().contains(APIMIntegrationConstants.IS_WEB_APP_EXISTS)) {
        log.info(""String_Node_Str"" + APIMIntegrationConstants.AM_MONITORING_WEB_APP_NAME + ""String_Node_Str"");
        break;
      }
 else {
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
  }
}",0.9523809523809524
114904,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  AutomationContext storeContext=new AutomationContext(APIMIntegrationConstants.AM_PRODUCT_GROUP_NAME,APIMIntegrationConstants.AM_STORE_INSTANCE,TestUserMode.SUPER_TENANT_ADMIN);
  int deletedUserCount=0;
  int beforeDeleteUserCount=storeUserSignUpCredentialsDataProvider().length;
  for (int i=0; i < storeUserSignUpCredentialsDataProvider().length; i++) {
    userManagementClient.deleteUser(storeUserSignUpCredentialsDataProvider()[i][0].toString());
    deletedUserCount++;
  }
  assertEquals(deletedUserCount,beforeDeleteUserCount,""String_Node_Str"");
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  int deletedUserCount=0;
  int beforeDeleteUserCount=storeUserSignUpCredentialsDataProvider().length;
  for (int i=0; i < storeUserSignUpCredentialsDataProvider().length; i++) {
    userManagementClient.deleteUser(storeUserSignUpCredentialsDataProvider()[i][0].toString());
    deletedUserCount++;
  }
  assertEquals(deletedUserCount,beforeDeleteUserCount,""String_Node_Str"");
}",0.8331780055917987
114905,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testUpdatedHTTPTransport() throws Exception {
  APIRequest apiRequest=new APIRequest(apiName,APIContext,new URL(endpointUrl));
  apiRequest.setHttps_checked(""String_Node_Str"");
  apiRequest.setProvider(user.getUserName());
  System.out.println(apiRequest.getProvider());
  HttpResponse serviceResponse=apiPublisher.updateAPI(apiRequest);
  assertTrue(serviceResponse.getData().contains(""String_Node_Str""),apiName + ""String_Node_Str"");
  HttpResponse apiUpdateResponsePublisher=apiPublisher.getAPI(apiName,apiRequest.getProvider(),apiRequest.getVersion());
  serviceResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(APIContext + ""String_Node_Str"" + APIVersion),requestHeaders);
  assertEquals(serviceResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  try {
    serviceResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttps(APIContext + ""String_Node_Str"" + APIVersion),requestHeaders);
    assertEquals(serviceResponse.getResponseCode(),Response.Status.FORBIDDEN.getStatusCode(),""String_Node_Str"");
  }
 catch (  NoHttpResponseException e) {
    log.info(""String_Node_Str"",e);
  }
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testUpdatedHTTPTransport() throws Exception {
  APIRequest apiRequest=new APIRequest(apiName,APIContext,new URL(endpointUrl));
  apiRequest.setHttps_checked(""String_Node_Str"");
  apiRequest.setProvider(user.getUserName());
  HttpResponse serviceResponse=apiPublisher.updateAPI(apiRequest);
  assertTrue(serviceResponse.getData().contains(""String_Node_Str""),apiName + ""String_Node_Str"");
  HttpResponse apiUpdateResponsePublisher=apiPublisher.getAPI(apiName,apiRequest.getProvider(),apiRequest.getVersion());
  serviceResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(APIContext + ""String_Node_Str"" + APIVersion),requestHeaders);
  assertEquals(serviceResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  try {
    serviceResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttps(APIContext + ""String_Node_Str"" + APIVersion),requestHeaders);
    assertEquals(serviceResponse.getResponseCode(),Response.Status.FORBIDDEN.getStatusCode(),""String_Node_Str"");
  }
 catch (  Exception ignored) {
  }
}",0.9556775010552976
114906,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testUpdatedHTTPSTransport() throws Exception {
  APIRequest apiRequest=new APIRequest(apiName,APIContext,new URL(endpointUrl));
  apiRequest.setProvider(user.getUserName());
  apiRequest.setHttp_checked(""String_Node_Str"");
  apiRequest.setHttps_checked(""String_Node_Str"");
  apiPublisher.updateAPI(apiRequest);
  try {
    HttpResponse serviceResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(APIContext + ""String_Node_Str"" + APIVersion),requestHeaders);
    assertEquals(serviceResponse.getResponseCode(),Response.Status.FORBIDDEN.getStatusCode(),""String_Node_Str"");
  }
 catch (  NoHttpResponseException e) {
    log.info(""String_Node_Str"",e);
  }
  HttpResponse serviceResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttps(APIContext + ""String_Node_Str"" + APIVersion),requestHeaders);
  assertEquals(serviceResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testUpdatedHTTPSTransport() throws Exception {
  APIRequest apiRequest=new APIRequest(apiName,APIContext,new URL(endpointUrl));
  apiRequest.setProvider(user.getUserName());
  apiRequest.setHttp_checked(""String_Node_Str"");
  apiRequest.setHttps_checked(""String_Node_Str"");
  apiPublisher.updateAPI(apiRequest);
  try {
    HttpResponse serviceResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(APIContext + ""String_Node_Str"" + APIVersion),requestHeaders);
    assertEquals(serviceResponse.getResponseCode(),Response.Status.FORBIDDEN.getStatusCode(),""String_Node_Str"");
  }
 catch (  Exception ignored) {
  }
  HttpResponse serviceResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttps(APIContext + ""String_Node_Str"" + APIVersion),requestHeaders);
  assertEquals(serviceResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
}",0.9711975745325924
114907,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testAPICreationTenant() throws Exception {
  apiStoreTenant=new APIStoreRestClient(storeURLHttp);
  apiStoreTenant.login(TENANT_WSO2_ADMIN,TENANT_WSO2_ADMIN_PASS);
  apiPublisherTenant=new APIPublisherRestClient(publisherURLHttp);
  apiPublisherTenant.login(TENANT_WSO2_ADMIN,TENANT_WSO2_ADMIN_PASS);
  apiRequestTenant=new APIRequest(apiName,APIContext,new URL(endpointUrl));
  apiRequestTenant.setTags(tags);
  apiRequestTenant.setDescription(description);
  apiRequestTenant.setVersion(APIVersion);
  apiRequestTenant.setProvider(TENANT_WSO2_ADMIN);
  HttpResponse serviceResponse=apiPublisherTenant.addAPI(apiRequestTenant);
  verifyResponse(serviceResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,TENANT_WSO2_ADMIN,APILifeCycleState.PUBLISHED);
  serviceResponse=apiPublisherTenant.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  serviceResponse=apiStoreTenant.addApplication(appName,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,TENANT_WSO2_ADMIN);
  subscriptionRequest.setApplicationName(appName);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  serviceResponse=apiStoreTenant.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(appName);
  String responseString=apiStoreTenant.generateApplicationKey(generateAppKeyRequest).getData();
  log.info(responseString);
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.clear();
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  ApiHTTPInvocationURLTenant=getAPIInvocationURLHttp(""String_Node_Str"" + TENANT_WSO2 + ""String_Node_Str""+ APIContext+ ""String_Node_Str"") + APIVersion;
  ApiHTTPSInvocationURLTenant=getAPIInvocationURLHttps(""String_Node_Str"" + TENANT_WSO2 + ""String_Node_Str""+ APIContext+ ""String_Node_Str"") + APIVersion;
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testAPICreationTenant() throws Exception {
  apiStoreTenant=new APIStoreRestClient(storeURLHttp);
  apiStoreTenant.login(TENANT_WSO2_ADMIN,TENANT_WSO2_ADMIN_PASS);
  apiPublisherTenant=new APIPublisherRestClient(publisherURLHttp);
  apiPublisherTenant.login(TENANT_WSO2_ADMIN,TENANT_WSO2_ADMIN_PASS);
  apiRequestTenant=new APIRequest(apiName,APIContext,new URL(endpointUrl));
  apiRequestTenant.setTags(tags);
  apiRequestTenant.setDescription(description);
  apiRequestTenant.setVersion(APIVersion);
  apiRequestTenant.setProvider(TENANT_WSO2_ADMIN);
  HttpResponse serviceResponse=apiPublisherTenant.addAPI(apiRequestTenant);
  verifyResponse(serviceResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,TENANT_WSO2_ADMIN,APILifeCycleState.PUBLISHED);
  serviceResponse=apiPublisherTenant.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  serviceResponse=apiStoreTenant.addApplication(appName,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,TENANT_WSO2_ADMIN);
  subscriptionRequest.setApplicationName(appName);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  serviceResponse=apiStoreTenant.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(appName);
  String responseString=apiStoreTenant.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.clear();
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
  ApiHTTPInvocationURLTenant=getAPIInvocationURLHttp(""String_Node_Str"" + TENANT_WSO2 + ""String_Node_Str""+ APIContext+ ""String_Node_Str"") + APIVersion;
  ApiHTTPSInvocationURLTenant=getAPIInvocationURLHttps(""String_Node_Str"" + TENANT_WSO2 + ""String_Node_Str""+ APIContext+ ""String_Node_Str"") + APIVersion;
}",0.994120117597648
114908,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testAPICreation() throws Exception {
  String providerName=user.getUserName();
  apiRequest=new APIRequest(apiName,APIContext,new URL(endpointUrl));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setProvider(providerName);
  HttpResponse serviceResponse=apiPublisher.addAPI(apiRequest);
  verifyResponse(serviceResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,user.getUserName(),APILifeCycleState.PUBLISHED);
  serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  serviceResponse=apiStore.addApplication(appName,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  String provider=user.getUserName();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,provider);
  subscriptionRequest.setApplicationName(appName);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(appName);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  log.info(responseString);
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testAPICreation() throws Exception {
  String providerName=user.getUserName();
  apiRequest=new APIRequest(apiName,APIContext,new URL(endpointUrl));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setProvider(providerName);
  HttpResponse serviceResponse=apiPublisher.addAPI(apiRequest);
  verifyResponse(serviceResponse);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,user.getUserName(),APILifeCycleState.PUBLISHED);
  serviceResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  verifyResponse(serviceResponse);
  serviceResponse=apiStore.addApplication(appName,APIThrottlingTier.UNLIMITED.getState(),""String_Node_Str"",""String_Node_Str"");
  verifyResponse(serviceResponse);
  String provider=user.getUserName();
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(apiName,provider);
  subscriptionRequest.setApplicationName(appName);
  subscriptionRequest.setTier(APIMIntegrationConstants.API_TIER.GOLD);
  serviceResponse=apiStore.subscribe(subscriptionRequest);
  verifyResponse(serviceResponse);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(appName);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  Assert.assertNotNull(""String_Node_Str"" + responseString,accessToken);
  requestHeaders.put(APIMIntegrationConstants.AUTHORIZATION_HEADER,""String_Node_Str"" + accessToken);
}",0.9920136908157444
114909,"/** 
 * This method decompresses API the archive
 * @param sourceFile  The archive containing the API
 * @param destination location of the archive to be extracted
 * @return Name of the extracted directory
 * @throws APIImportException If the decompressing fails
 */
public static String extractArchive(File sourceFile,String destination) throws APIImportException {
  BufferedInputStream inputStream=null;
  InputStream zipInputStream=null;
  FileOutputStream outputStream=null;
  ZipFile zip=null;
  String archiveName=null;
  try {
    zip=new ZipFile(sourceFile);
    Enumeration zipFileEntries=zip.entries();
    int index=0;
    while (zipFileEntries.hasMoreElements()) {
      ZipEntry entry=(ZipEntry)zipFileEntries.nextElement();
      String currentEntry=entry.getName();
      if (index == 0) {
        archiveName=currentEntry.substring(0,currentEntry.indexOf(File.separatorChar));
        --index;
      }
      File destinationFile=new File(destination,currentEntry);
      File destinationParent=destinationFile.getParentFile();
      if (destinationParent.mkdirs()) {
        log.info(""String_Node_Str"" + destinationParent.getName());
      }
      if (!entry.isDirectory()) {
        zipInputStream=zip.getInputStream(entry);
        inputStream=new BufferedInputStream(zipInputStream);
        outputStream=new FileOutputStream(destinationFile);
        IOUtils.copy(inputStream,outputStream);
      }
    }
    return archiveName;
  }
 catch (  IOException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
 finally {
    IOUtils.closeQuietly(zipInputStream);
    IOUtils.closeQuietly(inputStream);
    IOUtils.closeQuietly(outputStream);
  }
}","/** 
 * This method decompresses API the archive
 * @param sourceFile  The archive containing the API
 * @param destination location of the archive to be extracted
 * @return Name of the extracted directory
 * @throws APIImportException If the decompressing fails
 */
public static String extractArchive(File sourceFile,String destination) throws APIImportException {
  BufferedInputStream inputStream=null;
  InputStream zipInputStream=null;
  FileOutputStream outputStream=null;
  ZipFile zip=null;
  String archiveName=null;
  try {
    zip=new ZipFile(sourceFile);
    Enumeration zipFileEntries=zip.entries();
    int index=0;
    while (zipFileEntries.hasMoreElements()) {
      ZipEntry entry=(ZipEntry)zipFileEntries.nextElement();
      String currentEntry=entry.getName();
      if (index == 0) {
        archiveName=currentEntry.substring(0,currentEntry.indexOf(APIImportExportConstants.ZIP_FILE_SEPARATOR));
        --index;
      }
      File destinationFile=new File(destination,currentEntry);
      File destinationParent=destinationFile.getParentFile();
      if (destinationParent.mkdirs()) {
        log.info(""String_Node_Str"" + destinationParent.getName());
      }
      if (!entry.isDirectory()) {
        zipInputStream=zip.getInputStream(entry);
        inputStream=new BufferedInputStream(zipInputStream);
        outputStream=new FileOutputStream(destinationFile);
        IOUtils.copy(inputStream,outputStream);
      }
    }
    return archiveName;
  }
 catch (  IOException e) {
    String errorMessage=""String_Node_Str"";
    log.error(errorMessage,e);
    throw new APIImportException(errorMessage,e);
  }
 finally {
    IOUtils.closeQuietly(zipInputStream);
    IOUtils.closeQuietly(inputStream);
    IOUtils.closeQuietly(outputStream);
  }
}",0.9832338732594488
114910,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testHostObjectTestCase() throws Exception {
  apiPublisher.login(user.getUserName(),user.getPassword());
  apiStore.login(user.getUserName(),user.getPassword());
  String APIName=""String_Node_Str"";
  String APIContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=""String_Node_Str"";
  String description=""String_Node_Str"";
  String providerName=user.getUserName();
  String APIVersion=""String_Node_Str"";
  String filePublisher, fileStore;
  if (publisherContext.getContextTenant().getDomain().equals(""String_Node_Str"")) {
    filePublisher=""String_Node_Str"";
    fileStore=""String_Node_Str"";
  }
 else {
    filePublisher=""String_Node_Str"";
    fileStore=""String_Node_Str"";
  }
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setProvider(providerName);
  apiPublisher.addAPI(apiRequest);
  APIBean apiBean=APIMTestCaseUtils.getAPIBeanFromHttpResponse(apiPublisher.getAPI(APIName,providerName));
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  assertEquals(apiBean.getId().getApiName(),APIName,""String_Node_Str"");
  assertTrue(apiBean.getContext().contains(APIContext),""String_Node_Str"");
  assertEquals(apiBean.getId().getVersion(),APIVersion,""String_Node_Str"");
  assertEquals(apiBean.getId().getProviderName(),providerName,""String_Node_Str"");
  for (  String tag : apiBean.getTags()) {
    assertTrue(tags.contains(tag),""String_Node_Str"");
  }
  assertEquals(apiBean.getDescription(),description,""String_Node_Str"");
  apiStore.addApplication(""String_Node_Str"",APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(APIName,providerName);
  subscriptionRequest.setApplicationName(hostObjectTestApplicationName);
  apiStore.subscribe(subscriptionRequest);
  apiPublisher.addDocument(APIName,APIVersion,providerName,""String_Node_Str"",APIMIntegrationConstants.API_DOCUMENT_TYPE_HOW_TO,APIMIntegrationConstants.API_DOCUMENT_SOURCE_INLINE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(hostObjectTestApplicationName);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  assertNotNull(accessToken,""String_Node_Str"");
  String sourcePath=computeSourcePath(filePublisher);
  String destinationPath=computeDestPath(filePublisher);
  copySampleFile(sourcePath,destinationPath);
  sourcePath=computeSourcePath(fileStore);
  destinationPath=computeDestPath(fileStore);
  copySampleFile(sourcePath,destinationPath);
  String finalOutputPublisher=null;
  int deploymentDelayInMilliseconds=90 * 1000;
  long startTime=System.currentTimeMillis();
  try {
    String[] responseArrayFromPublisher=new String[35];
    boolean isPublisherResponse=false;
    while (((System.currentTimeMillis() - startTime) < deploymentDelayInMilliseconds) && !isPublisherResponse) {
      Thread.sleep(500);
      URL jaggeryURL=new URL(publisherUrls.getWebAppURLHttp() + ""String_Node_Str"" + filePublisher);
      URLConnection jaggeryServerConnection=jaggeryURL.openConnection();
      BufferedReader in=new BufferedReader(new InputStreamReader(jaggeryServerConnection.getInputStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        finalOutputPublisher=inputLine;
      }
      if (null != finalOutputPublisher) {
        responseArrayFromPublisher=finalOutputPublisher.split(""String_Node_Str"");
        isPublisherResponse=responseArrayFromPublisher[30].contains(""String_Node_Str"");
      }
      in.close();
    }
    log.info(finalOutputPublisher);
    validatePublisherResponseArray(responseArrayFromPublisher);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"");
  }
 finally {
    assertNotNull(finalOutputPublisher,""String_Node_Str"");
  }
  String finalOutputStore=null;
  try {
    String[] responseArrayFromStore=new String[27];
    boolean isStoreResponse=false;
    startTime=System.currentTimeMillis();
    while (((System.currentTimeMillis() - startTime) < deploymentDelayInMilliseconds) && !isStoreResponse) {
      Thread.sleep(500);
      URL jaggeryURL=new URL(storeUrls.getWebAppURLHttp() + ""String_Node_Str"" + fileStore);
      URLConnection jaggeryServerConnection=jaggeryURL.openConnection();
      BufferedReader in=new BufferedReader(new InputStreamReader(jaggeryServerConnection.getInputStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        finalOutputStore=inputLine;
      }
      if (null != finalOutputStore) {
        responseArrayFromStore=finalOutputStore.split(""String_Node_Str"");
        isStoreResponse=responseArrayFromStore[9].contains(""String_Node_Str"");
      }
      in.close();
    }
    log.info(finalOutputStore);
    validateStoreResponseArray(responseArrayFromStore);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"");
  }
 finally {
    assertNotNull(finalOutputStore,""String_Node_Str"");
  }
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testHostObjectTestCase() throws Exception {
  apiPublisher.login(user.getUserName(),user.getPassword());
  apiStore.login(user.getUserName(),user.getPassword());
  String APIName=""String_Node_Str"";
  String APIContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=""String_Node_Str"";
  String description=""String_Node_Str"";
  String providerName=user.getUserName();
  String APIVersion=""String_Node_Str"";
  String filePublisher, fileStore;
  if (publisherContext.getContextTenant().getDomain().equals(""String_Node_Str"")) {
    filePublisher=""String_Node_Str"";
    fileStore=""String_Node_Str"";
  }
 else {
    filePublisher=""String_Node_Str"";
    fileStore=""String_Node_Str"";
  }
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setProvider(providerName);
  apiPublisher.addAPI(apiRequest);
  APIBean apiBean=APIMTestCaseUtils.getAPIBeanFromHttpResponse(apiPublisher.getAPI(APIName,providerName));
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  assertEquals(apiBean.getId().getApiName(),APIName,""String_Node_Str"");
  assertTrue(apiBean.getContext().contains(APIContext),""String_Node_Str"");
  assertEquals(apiBean.getId().getVersion(),APIVersion,""String_Node_Str"");
  assertEquals(apiBean.getId().getProviderName(),providerName,""String_Node_Str"");
  for (  String tag : apiBean.getTags()) {
    assertTrue(tags.contains(tag),""String_Node_Str"");
  }
  assertEquals(apiBean.getDescription(),description,""String_Node_Str"");
  apiStore.addApplication(hostObjectTestApplicationName,APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED,""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(APIName,providerName);
  subscriptionRequest.setApplicationName(hostObjectTestApplicationName);
  apiStore.subscribe(subscriptionRequest);
  apiPublisher.addDocument(APIName,APIVersion,providerName,""String_Node_Str"",APIMIntegrationConstants.API_DOCUMENT_TYPE_HOW_TO,APIMIntegrationConstants.API_DOCUMENT_SOURCE_INLINE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(hostObjectTestApplicationName);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject response=new JSONObject(responseString);
  String accessToken=response.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").get(""String_Node_Str"").toString();
  assertNotNull(accessToken,""String_Node_Str"");
  String sourcePath=computeSourcePath(filePublisher);
  String destinationPath=computeDestPath(filePublisher);
  copySampleFile(sourcePath,destinationPath);
  sourcePath=computeSourcePath(fileStore);
  destinationPath=computeDestPath(fileStore);
  copySampleFile(sourcePath,destinationPath);
  String finalOutputPublisher=null;
  int deploymentDelayInMilliseconds=90 * 1000;
  long startTime=System.currentTimeMillis();
  try {
    String[] responseArrayFromPublisher=new String[35];
    boolean isPublisherResponse=false;
    while (((System.currentTimeMillis() - startTime) < deploymentDelayInMilliseconds) && !isPublisherResponse) {
      Thread.sleep(500);
      URL jaggeryURL=new URL(publisherUrls.getWebAppURLHttp() + ""String_Node_Str"" + filePublisher);
      URLConnection jaggeryServerConnection=jaggeryURL.openConnection();
      BufferedReader in=new BufferedReader(new InputStreamReader(jaggeryServerConnection.getInputStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        finalOutputPublisher=inputLine;
      }
      if (null != finalOutputPublisher) {
        responseArrayFromPublisher=finalOutputPublisher.split(""String_Node_Str"");
        isPublisherResponse=responseArrayFromPublisher[30].contains(""String_Node_Str"");
      }
      in.close();
    }
    log.info(finalOutputPublisher);
    validatePublisherResponseArray(responseArrayFromPublisher);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"");
  }
 finally {
    assertNotNull(finalOutputPublisher,""String_Node_Str"");
  }
  String finalOutputStore=null;
  try {
    String[] responseArrayFromStore=new String[27];
    boolean isStoreResponse=false;
    startTime=System.currentTimeMillis();
    while (((System.currentTimeMillis() - startTime) < deploymentDelayInMilliseconds) && !isStoreResponse) {
      Thread.sleep(500);
      URL jaggeryURL=new URL(storeUrls.getWebAppURLHttp() + ""String_Node_Str"" + fileStore);
      URLConnection jaggeryServerConnection=jaggeryURL.openConnection();
      BufferedReader in=new BufferedReader(new InputStreamReader(jaggeryServerConnection.getInputStream()));
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        finalOutputStore=inputLine;
      }
      if (null != finalOutputStore) {
        responseArrayFromStore=finalOutputStore.split(""String_Node_Str"");
        isStoreResponse=responseArrayFromStore[9].contains(""String_Node_Str"");
      }
      in.close();
    }
    log.info(finalOutputStore);
    validateStoreResponseArray(responseArrayFromStore);
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"");
  }
 finally {
    assertNotNull(finalOutputStore,""String_Node_Str"");
  }
}",0.9958423716558208
114911,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testInvokingWithGoldTier() throws Exception {
  applicationNameGold=APPLICATION_NAME + TIER_GOLD;
  apiStoreClientUser1.addApplication(applicationNameGold,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  apiCreationRequestBean=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(apiEndPointUrl));
  apiCreationRequestBean.setTags(API_TAGS);
  apiCreationRequestBean.setDescription(API_DESCRIPTION);
  apiCreationRequestBean.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,applicationNameGold);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  String accessToken=generateApplicationKeys(apiStoreClientUser1,applicationNameGold).getAccessToken();
  requestHeadersGoldTier=new HashMap<String,String>();
  requestHeadersGoldTier.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  requestHeadersGoldTier.put(""String_Node_Str"",""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= GOLD_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeadersGoldTier);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str"");
  }
  currentTime=System.currentTimeMillis();
  HttpResponse invokeResponse;
  invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeadersGoldTier);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeadersGoldTier);
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT),""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testInvokingWithGoldTier() throws Exception {
  applicationNameGold=APPLICATION_NAME + TIER_GOLD;
  apiStoreClientUser1.addApplication(applicationNameGold,APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED,""String_Node_Str"",""String_Node_Str"");
  apiCreationRequestBean=new APICreationRequestBean(API_NAME,API_CONTEXT,API_VERSION_1_0_0,providerName,new URL(apiEndPointUrl));
  apiCreationRequestBean.setTags(API_TAGS);
  apiCreationRequestBean.setDescription(API_DESCRIPTION);
  apiCreationRequestBean.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,applicationNameGold);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  String accessToken=generateApplicationKeys(apiStoreClientUser1,applicationNameGold).getAccessToken();
  requestHeadersGoldTier=new HashMap<String,String>();
  requestHeadersGoldTier.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  requestHeadersGoldTier.put(""String_Node_Str"",""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= GOLD_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeadersGoldTier);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str"");
  }
  currentTime=System.currentTimeMillis();
  HttpResponse invokeResponse;
  invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeadersGoldTier);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeadersGoldTier);
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT),""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str"");
}",0.9978463747307968
114912,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"") public void testInvokingWithAPIGoldTierApplicationGoldResourceUnlimited() throws Exception {
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.LARGE,""String_Node_Str"",""String_Node_Str"");
  APIIdentifier apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  apiIdentifier.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  waitForAPIDeploymentSync(apiIdentifier.getProviderName(),API_NAME,apiIdentifier.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String accessToken=generateApplicationKeys(apiStoreClientUser1,APPLICATION_NAME).getAccessToken();
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= GOLD_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  HttpResponse invokeResponse;
  currentTime=System.currentTimeMillis();
  invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (true) {
      invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
      System.out.println(""String_Node_Str"" + invokeResponse.getResponseCode());
      if (invokeResponse.getResponseCode() == HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS) {
        break;
      }
    }
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT),""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"") public void testInvokingWithAPIGoldTierApplicationGoldResourceUnlimited() throws Exception {
  apiStoreClientUser1.addApplication(APPLICATION_NAME,APIMIntegrationConstants.APPLICATION_TIER.UNLIMITED,""String_Node_Str"",""String_Node_Str"");
  APIIdentifier apiIdentifier=new APIIdentifier(providerName,API_NAME,API_VERSION_1_0_0);
  apiIdentifier.setTier(TIER_GOLD);
  createPublishAndSubscribeToAPI(apiIdentifier,apiCreationRequestBean,apiPublisherClientUser1,apiStoreClientUser1,APPLICATION_NAME);
  waitForAPIDeploymentSync(apiIdentifier.getProviderName(),API_NAME,apiIdentifier.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  String accessToken=generateApplicationKeys(apiStoreClientUser1,APPLICATION_NAME).getAccessToken();
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= GOLD_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  HttpResponse invokeResponse;
  currentTime=System.currentTimeMillis();
  invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (true) {
      invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
      System.out.println(""String_Node_Str"" + invokeResponse.getResponseCode());
      if (invokeResponse.getResponseCode() == HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS) {
        break;
      }
    }
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT),""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9979274611398964
114913,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokingWithAPIGoldTierApplicationGoldResourceSilver() throws Exception {
  Thread.sleep(THROTTLING_UNIT_TIME + THROTTLING_ADDITIONAL_WAIT_TIME);
  String swagger=""String_Node_Str"" + ""String_Node_Str"" + APIMIntegrationConstants.RESOURCE_TIER.PLUS + ""String_Node_Str""+ ""String_Node_Str""+ API_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ API_VERSION_1_0_0+ ""String_Node_Str"";
  apiPublisherClientUser1.updateResourceOfAPI(providerName,API_NAME,API_VERSION_1_0_0,swagger);
  waitForAPIDeploymentSync(providerName,API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  apiStoreClientUser1.waitForSwaggerDocument(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.RESOURCE_TIER.PLUS,executionMode);
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= SILVER_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  currentTime=System.currentTimeMillis();
  HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (true) {
      invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
      System.out.println(""String_Node_Str"" + invokeResponse.getResponseCode());
      if (invokeResponse.getResponseCode() == HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS) {
        break;
      }
    }
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (SILVER_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT),""String_Node_Str"" + (SILVER_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokingWithAPIGoldTierApplicationGoldResourceSilver() throws Exception {
  Thread.sleep(THROTTLING_UNIT_TIME + THROTTLING_ADDITIONAL_WAIT_TIME);
  String swagger=""String_Node_Str"" + ""String_Node_Str"" + APIMIntegrationConstants.RESOURCE_TIER.PLUS + ""String_Node_Str""+ ""String_Node_Str""+ API_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ API_VERSION_1_0_0+ ""String_Node_Str"";
  apiPublisherClientUser1.updateResourceOfAPI(providerName,API_NAME,API_VERSION_1_0_0,swagger);
  waitForAPIDeploymentSync(providerName,API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  apiStoreClientUser1.waitForSwaggerDocument(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.RESOURCE_TIER.PLUS,executionMode);
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= SILVER_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  currentTime=System.currentTimeMillis();
  HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (true) {
      invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
      System.out.println(""String_Node_Str"" + invokeResponse.getResponseCode());
      if (invokeResponse.getResponseCode() == HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS) {
        break;
      }
    }
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (SILVER_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT_RESOURCE),""String_Node_Str"" + (SILVER_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.998378670509818
114914,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokingWithAPIGoldTierApplicationGoldResourceGold() throws Exception {
  Thread.sleep(THROTTLING_UNIT_TIME + THROTTLING_ADDITIONAL_WAIT_TIME);
  String swagger=""String_Node_Str"" + ""String_Node_Str"" + APIMIntegrationConstants.RESOURCE_TIER.ULTIMATE + ""String_Node_Str""+ ""String_Node_Str""+ API_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ API_VERSION_1_0_0+ ""String_Node_Str"";
  apiPublisherClientUser1.updateResourceOfAPI(providerName,API_NAME,API_VERSION_1_0_0,swagger);
  apiStoreClientUser1.waitForSwaggerDocument(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.RESOURCE_TIER.ULTIMATE,executionMode);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= GOLD_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  currentTime=System.currentTimeMillis();
  HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (true) {
      invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
      System.out.println(""String_Node_Str"" + invokeResponse.getResponseCode());
      if (invokeResponse.getResponseCode() == HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS) {
        break;
      }
    }
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT),""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"" + ""String_Node_Str"",dependsOnMethods=""String_Node_Str"") public void testInvokingWithAPIGoldTierApplicationGoldResourceGold() throws Exception {
  Thread.sleep(THROTTLING_UNIT_TIME + THROTTLING_ADDITIONAL_WAIT_TIME);
  String swagger=""String_Node_Str"" + ""String_Node_Str"" + APIMIntegrationConstants.RESOURCE_TIER.ULTIMATE + ""String_Node_Str""+ ""String_Node_Str""+ API_NAME+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ API_VERSION_1_0_0+ ""String_Node_Str"";
  apiPublisherClientUser1.updateResourceOfAPI(providerName,API_NAME,API_VERSION_1_0_0,swagger);
  apiStoreClientUser1.waitForSwaggerDocument(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.RESOURCE_TIER.ULTIMATE,executionMode);
  waitForAPIDeploymentSync(user.getUserName(),API_NAME,API_VERSION_1_0_0,APIMIntegrationConstants.IS_API_EXISTS);
  long startTime=System.currentTimeMillis();
  long currentTime;
  for (int invocationCount=1; invocationCount <= GOLD_INVOCATION_LIMIT_PER_MIN; invocationCount++) {
    currentTime=System.currentTimeMillis();
    HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
    assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_OK,""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
    assertTrue(invokeResponse.getData().contains(API_RESPONSE_DATA),""String_Node_Str"" + invocationCount + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  currentTime=System.currentTimeMillis();
  HttpResponse invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
  if (executionMode.equalsIgnoreCase(String.valueOf(ExecutionEnvironment.PLATFORM))) {
    while (true) {
      invokeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(API_CONTEXT,API_VERSION_1_0_0) + ""String_Node_Str"" + API_END_POINT_METHOD,requestHeaders);
      System.out.println(""String_Node_Str"" + invokeResponse.getResponseCode());
      if (invokeResponse.getResponseCode() == HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS) {
        break;
      }
    }
  }
  assertEquals(invokeResponse.getResponseCode(),HTTP_RESPONSE_CODE_TOO_MANY_REQUESTS,""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
  assertTrue(invokeResponse.getData().contains(MESSAGE_THROTTLED_OUT_RESOURCE),""String_Node_Str"" + (GOLD_INVOCATION_LIMIT_PER_MIN + 1) + ""String_Node_Str""+ (currentTime - startTime)+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9983821678950208
114915,"public static String removeExecutorsFromAPILifeCycle(String apiLifeCycle) throws APIMigrationException {
  Writer stringWriter=new StringWriter();
  Document doc=ResourceUtil.buildDocument(apiLifeCycle,""String_Node_Str"");
  if (doc != null) {
    Element rootElement=doc.getDocumentElement();
    NodeList stateTags=rootElement.getElementsByTagName(Constants.API_LIFE_CYCLE_STATE_TAG);
    for (int i=0; i < stateTags.getLength(); ++i) {
      Element stateTag=(Element)stateTags.item(i);
      NodeList dataModelTags=stateTag.getElementsByTagName(Constants.API_LIFE_CYCLE_DATA_MODEL_TAG);
      if (dataModelTags.getLength() > 0) {
        Element dataModelTag=(Element)dataModelTags.item(0);
        dataModelTag.getParentNode().removeChild(dataModelTag);
      }
    }
    try {
      doc.getDocumentElement().normalize();
      Transformer transformer=TransformerFactory.newInstance().newTransformer();
      transformer.setOutputProperty(OutputKeys.ENCODING,Charset.defaultCharset().toString());
      transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
      transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,""String_Node_Str"");
      transformer.transform(new DOMSource(doc),new StreamResult(stringWriter));
    }
 catch (    TransformerException e) {
      ResourceUtil.handleException(""String_Node_Str"" + ""String_Node_Str"",e);
    }
  }
  return stringWriter.toString();
}","public static String removeExecutorsFromAPILifeCycle(String apiLifeCycle) throws APIMigrationException {
  Writer stringWriter=new StringWriter();
  Document doc=ResourceUtil.buildDocument(apiLifeCycle,""String_Node_Str"");
  if (doc != null) {
    Element rootElement=doc.getDocumentElement();
    NodeList stateTags=rootElement.getElementsByTagName(Constants.API_LIFE_CYCLE_STATE_TAG);
    for (int i=0; i < stateTags.getLength(); ++i) {
      Element stateTag=(Element)stateTags.item(i);
      NodeList dataModelTags=stateTag.getElementsByTagName(Constants.API_LIFE_CYCLE_DATA_MODEL_TAG);
      if (dataModelTags.getLength() > 0) {
        Element dataModelTag=(Element)dataModelTags.item(0);
        if (APIStatus.CREATED.toString().equalsIgnoreCase(stateTag.getAttribute(""String_Node_Str""))) {
          NodeList dataTags=dataModelTag.getElementsByTagName(Constants.API_LIFE_CYCLE_DATA_TAG);
          for (int j=0; j < dataTags.getLength(); j++) {
            Element dataTag=(Element)dataTags.item(j);
            if (Constants.API_LIFE_CYCLE_EXECUTORS_TAG.equals(dataTag.getAttribute(""String_Node_Str""))) {
              dataTag.getParentNode().removeChild(dataTag);
            }
          }
        }
 else {
          dataModelTag.getParentNode().removeChild(dataModelTag);
        }
      }
    }
    try {
      doc.getDocumentElement().normalize();
      Transformer transformer=TransformerFactory.newInstance().newTransformer();
      transformer.setOutputProperty(OutputKeys.ENCODING,Charset.defaultCharset().toString());
      transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
      transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,""String_Node_Str"");
      transformer.transform(new DOMSource(doc),new StreamResult(stringWriter));
    }
 catch (    TransformerException e) {
      ResourceUtil.handleException(""String_Node_Str"" + ""String_Node_Str"",e);
    }
  }
  return stringWriter.toString();
}",0.8460439874321622
114916,"/** 
 * This method is used to workflow-extensions.xml configuration by handling the addition of the executors to handle work flow executors
 * @throws APIMigrationException
 */
private void workflowExtensionsMigration() throws APIMigrationException {
  log.info(""String_Node_Str"");
  for (  Tenant tenant : getTenantsArray()) {
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    try {
      registryService.startTenantFlow(tenant);
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.WORKFLOW_EXECUTOR_LOCATION)) {
        log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
        continue;
      }
      String workFlowExtensions=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.WORKFLOW_EXECUTOR_LOCATION));
      String updatedWorkFlowExtensions=ResourceModifier.modifyWorkFlowExtensions(workFlowExtensions);
      registryService.updateGovernanceRegistryResource(APIConstants.WORKFLOW_EXECUTOR_LOCATION,updatedWorkFlowExtensions);
    }
 catch (    RegistryException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    UserStoreException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
 finally {
      registryService.endTenantFlow();
    }
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}","/** 
 * This method is used to workflow-extensions.xml configuration by handling the addition of the executors to handle work flow executors
 * @throws APIMigrationException
 */
private void workflowExtensionsMigration() throws APIMigrationException {
  log.info(""String_Node_Str"");
  for (  Tenant tenant : getTenantsArray()) {
    log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    try {
      registryService.startTenantFlow(tenant);
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.WORKFLOW_EXECUTOR_LOCATION)) {
        log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
        continue;
      }
      String workFlowExtensions=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.WORKFLOW_EXECUTOR_LOCATION));
      String updatedWorkFlowExtensions=ResourceModifier.modifyWorkFlowExtensions(workFlowExtensions);
      registryService.updateGovernanceRegistryResource(APIConstants.WORKFLOW_EXECUTOR_LOCATION,updatedWorkFlowExtensions);
    }
 catch (    RegistryException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    UserStoreException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
 finally {
      registryService.endTenantFlow();
    }
    log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}",0.9939879759519038
114917,"private void updateApiLifeCycleStatus(Tenant tenant) throws APIMigrationException {
  HashMap<String,String[]> statuses=new HashMap<>();
  statuses.put(APIStatus.PUBLISHED.toString(),new String[]{""String_Node_Str""});
  statuses.put(APIStatus.PROTOTYPED.toString(),new String[]{""String_Node_Str""});
  statuses.put(APIStatus.BLOCKED.toString(),new String[]{""String_Node_Str"",""String_Node_Str""});
  statuses.put(APIStatus.DEPRECATED.toString(),new String[]{""String_Node_Str"",""String_Node_Str""});
  statuses.put(APIStatus.RETIRED.toString(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  try {
    registryService.addDefaultLifecycles();
    GenericArtifact[] artifacts=registryService.getGenericAPIArtifacts();
    for (    GenericArtifact artifact : artifacts) {
      String currentState=artifact.getAttribute(APIConstants.API_OVERVIEW_STATUS);
      artifact.attachLifecycle(APIConstants.API_LIFE_CYCLE);
      String[] actions=statuses.get(currentState);
      if (actions != null) {
        for (        String action : actions) {
          artifact.invokeAction(action,APIConstants.API_LIFE_CYCLE);
        }
      }
    }
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
 catch (  RegistryException e) {
    log.error(""String_Node_Str"" + ""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
  }
catch (  XMLStreamException e) {
    log.error(""String_Node_Str"" + ""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
  }
catch (  FileNotFoundException e) {
    log.error(""String_Node_Str"" + ""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
  }
catch (  UserStoreException e) {
    log.error(""String_Node_Str"" + ""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
  }
}","private void updateApiLifeCycleStatus(Tenant tenant) throws APIMigrationException {
  HashMap<String,String[]> statuses=new HashMap<>();
  statuses.put(APIStatus.PUBLISHED.toString(),new String[]{""String_Node_Str""});
  statuses.put(APIStatus.PROTOTYPED.toString(),new String[]{""String_Node_Str""});
  statuses.put(APIStatus.BLOCKED.toString(),new String[]{""String_Node_Str"",""String_Node_Str""});
  statuses.put(APIStatus.DEPRECATED.toString(),new String[]{""String_Node_Str"",""String_Node_Str""});
  statuses.put(APIStatus.RETIRED.toString(),new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  try {
    registryService.addDefaultLifecycles();
    GenericArtifact[] artifacts=registryService.getGenericAPIArtifacts();
    for (    GenericArtifact artifact : artifacts) {
      String currentState=artifact.getAttribute(APIConstants.API_OVERVIEW_STATUS);
      if (currentState != null && !currentState.equalsIgnoreCase(artifact.getLifecycleState())) {
        artifact.attachLifecycle(APIConstants.API_LIFE_CYCLE);
        String[] actions=statuses.get(currentState);
        if (actions != null) {
          for (          String action : actions) {
            artifact.invokeAction(action,APIConstants.API_LIFE_CYCLE);
            if (log.isDebugEnabled()) {
              log.debug(""String_Node_Str"" + currentState + ""String_Node_Str""+ action);
            }
          }
        }
      }
 else {
        log.info(""String_Node_Str"" + currentState + ""String_Node_Str""+ artifact.getAttribute(APIConstants.API_OVERVIEW_NAME));
      }
    }
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
 catch (  RegistryException e) {
    log.error(""String_Node_Str"" + ""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
  }
catch (  XMLStreamException e) {
    log.error(""String_Node_Str"" + ""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
  }
catch (  FileNotFoundException e) {
    log.error(""String_Node_Str"" + ""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
  }
catch (  UserStoreException e) {
    log.error(""String_Node_Str"" + ""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
  }
}",0.9027777777777778
114918,"private void updateTiers() throws APIMigrationException {
  log.info(""String_Node_Str"");
  for (  Tenant tenant : getTenantsArray()) {
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    try {
      registryService.startTenantFlow(tenant);
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.API_TIER_LOCATION)) {
        continue;
      }
 else {
        String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
        String updatedApiTiers=ResourceModifier.modifyTiers(apiTiers,APIConstants.API_TIER_LOCATION);
        registryService.updateGovernanceRegistryResource(APIConstants.API_TIER_LOCATION,updatedApiTiers);
      }
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.APP_TIER_LOCATION)) {
        String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
        registryService.addGovernanceRegistryResource(APIConstants.APP_TIER_LOCATION,apiTiers,""String_Node_Str"");
      }
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.RES_TIER_LOCATION)) {
        String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
        registryService.addGovernanceRegistryResource(APIConstants.RES_TIER_LOCATION,apiTiers,""String_Node_Str"");
      }
    }
 catch (    UserStoreException e) {
      log.error(""String_Node_Str"" + +tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    RegistryException e) {
      log.error(""String_Node_Str"" + +tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
 finally {
      registryService.endTenantFlow();
    }
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}","private void updateTiers() throws APIMigrationException {
  log.info(""String_Node_Str"");
  for (  Tenant tenant : getTenantsArray()) {
    log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    try {
      registryService.startTenantFlow(tenant);
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.API_TIER_LOCATION)) {
        continue;
      }
 else {
        String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
        String updatedApiTiers=ResourceModifier.modifyTiers(apiTiers,APIConstants.API_TIER_LOCATION);
        registryService.updateGovernanceRegistryResource(APIConstants.API_TIER_LOCATION,updatedApiTiers);
      }
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.APP_TIER_LOCATION)) {
        String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
        registryService.addGovernanceRegistryResource(APIConstants.APP_TIER_LOCATION,apiTiers,""String_Node_Str"");
      }
      if (!registryService.isGovernanceRegistryResourceExists(APIConstants.RES_TIER_LOCATION)) {
        String apiTiers=ResourceUtil.getResourceContent(registryService.getGovernanceRegistryResource(APIConstants.API_TIER_LOCATION));
        registryService.addGovernanceRegistryResource(APIConstants.RES_TIER_LOCATION,apiTiers,""String_Node_Str"");
      }
    }
 catch (    UserStoreException e) {
      log.error(""String_Node_Str"" + +tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    RegistryException e) {
      log.error(""String_Node_Str"" + +tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
 finally {
      registryService.endTenantFlow();
    }
    log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}",0.995268138801262
114919,"private void migrateLifeCycles() throws APIMigrationException {
  log.info(""String_Node_Str"");
  String apiLifeCycleXMLPath=CarbonUtils.getCarbonHome() + File.separator + APIConstants.RESOURCE_FOLDER_LOCATION+ File.separator+ Constants.LIFE_CYCLES_FOLDER+ File.separator+ APIConstants.API_LIFE_CYCLE+ ""String_Node_Str"";
  String executorlessApiLifeCycle=null;
  String apiLifeCycle=null;
  try (FileInputStream fileInputStream=new FileInputStream(new File(apiLifeCycleXMLPath))){
    apiLifeCycle=IOUtils.toString(fileInputStream);
    executorlessApiLifeCycle=ResourceModifier.removeExecutorsFromAPILifeCycle(apiLifeCycle);
  }
 catch (  FileNotFoundException e) {
    ResourceUtil.handleException(""String_Node_Str"" + apiLifeCycleXMLPath + ""String_Node_Str"",e);
  }
catch (  IOException e) {
    ResourceUtil.handleException(""String_Node_Str"" + apiLifeCycleXMLPath,e);
  }
  final String apiLifeCycleRegistryPath=RegistryConstants.LIFECYCLE_CONFIGURATION_PATH + APIConstants.API_LIFE_CYCLE;
  for (  Tenant tenant : getTenantsArray()) {
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    try {
      registryService.startTenantFlow(tenant);
      addExecutorlessLifeCycle(tenant,apiLifeCycleRegistryPath,executorlessApiLifeCycle);
      updateApiLifeCycleStatus(tenant);
      updateWithCompleteLifeCycle(tenant,apiLifeCycleRegistryPath,apiLifeCycle);
    }
  finally {
      registryService.endTenantFlow();
    }
    log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}","private void migrateLifeCycles() throws APIMigrationException {
  log.info(""String_Node_Str"");
  String apiLifeCycleXMLPath=CarbonUtils.getCarbonHome() + File.separator + APIConstants.RESOURCE_FOLDER_LOCATION+ File.separator+ Constants.LIFE_CYCLES_FOLDER+ File.separator+ APIConstants.API_LIFE_CYCLE+ ""String_Node_Str"";
  String executorlessApiLifeCycle=null;
  String apiLifeCycle=null;
  try (FileInputStream fileInputStream=new FileInputStream(new File(apiLifeCycleXMLPath))){
    apiLifeCycle=IOUtils.toString(fileInputStream);
    executorlessApiLifeCycle=ResourceModifier.removeExecutorsFromAPILifeCycle(apiLifeCycle);
  }
 catch (  FileNotFoundException e) {
    ResourceUtil.handleException(""String_Node_Str"" + apiLifeCycleXMLPath + ""String_Node_Str"",e);
  }
catch (  IOException e) {
    ResourceUtil.handleException(""String_Node_Str"" + apiLifeCycleXMLPath,e);
  }
  final String apiLifeCycleRegistryPath=RegistryConstants.LIFECYCLE_CONFIGURATION_PATH + APIConstants.API_LIFE_CYCLE;
  for (  Tenant tenant : getTenantsArray()) {
    log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    try {
      registryService.startTenantFlow(tenant);
      addExecutorlessLifeCycle(tenant,apiLifeCycleRegistryPath,executorlessApiLifeCycle);
      updateApiLifeCycleStatus(tenant);
      updateWithCompleteLifeCycle(tenant,apiLifeCycleRegistryPath,apiLifeCycle);
    }
  finally {
      registryService.endTenantFlow();
    }
    log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
  }
  log.info(""String_Node_Str"");
}",0.9942602040816326
114920,"/** 
 * This method is used to migrate rxt and rxt data This adds three new attributes to the api rxt
 * @throws APIMigrationException
 */
private void rxtMigration() throws APIMigrationException {
  log.info(""String_Node_Str"");
  String rxtName=""String_Node_Str"";
  String rxtDir=CarbonUtils.getCarbonHome() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ rxtName;
  for (  Tenant tenant : getTenantsArray()) {
    try {
      registryService.startTenantFlow(tenant);
      log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      String rxt=FileUtil.readFileToString(rxtDir);
      registryService.updateRXTResource(rxtName,rxt);
      log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      GenericArtifact[] artifacts=registryService.getGenericAPIArtifacts();
      for (      GenericArtifact artifact : artifacts) {
        artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
      registryService.updateGenericAPIArtifacts(artifacts);
      log.debug(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    }
 catch (    GovernanceException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    IOException e) {
      log.error(""String_Node_Str"" + rxtDir + ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
    }
catch (    org.wso2.carbon.registry.core.exceptions.RegistryException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    UserStoreException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
 finally {
      registryService.endTenantFlow();
    }
  }
  log.info(""String_Node_Str"");
}","/** 
 * This method is used to migrate rxt and rxt data This adds three new attributes to the api rxt
 * @throws APIMigrationException
 */
private void rxtMigration() throws APIMigrationException {
  log.info(""String_Node_Str"");
  String rxtName=""String_Node_Str"";
  String rxtDir=CarbonUtils.getCarbonHome() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ rxtName;
  for (  Tenant tenant : getTenantsArray()) {
    try {
      registryService.startTenantFlow(tenant);
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      String rxt=FileUtil.readFileToString(rxtDir);
      registryService.updateRXTResource(rxtName,rxt);
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
      GenericArtifact[] artifacts=registryService.getGenericAPIArtifacts();
      for (      GenericArtifact artifact : artifacts) {
        artifact.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
      registryService.updateGenericAPIArtifacts(artifacts);
      log.info(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')');
    }
 catch (    GovernanceException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    IOException e) {
      log.error(""String_Node_Str"" + rxtDir + ""String_Node_Str""+ tenant.getId()+ '('+ tenant.getDomain()+ ')',e);
    }
catch (    org.wso2.carbon.registry.core.exceptions.RegistryException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
catch (    UserStoreException e) {
      log.error(""String_Node_Str"" + tenant.getId() + '('+ tenant.getDomain()+ ')',e);
    }
 finally {
      registryService.endTenantFlow();
    }
  }
  log.info(""String_Node_Str"");
}",0.9906347554630592
114921,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void APIInvocationFailureForSuperTenant() throws Exception {
  String APIName=""String_Node_Str"";
  String APIContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=""String_Node_Str"";
  String description=""String_Node_Str"";
  String providerName=publisherContext.getContextTenant().getTenantAdmin().getUserName();
  String APIVersion=""String_Node_Str"";
  APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(publisherContext.getContextTenant().getTenantAdmin().getUserName(),publisherContext.getContextTenant().getTenantAdmin().getPassword());
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setSandbox(url);
  apiRequest.setResourceMethod(""String_Node_Str"");
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse youTubeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(APIContext,APIVersion) + ""String_Node_Str"",requestHeaders);
  assertEquals(youTubeResponse.getResponseCode(),Response.Status.UNAUTHORIZED.getStatusCode(),""String_Node_Str"");
  assertTrue(youTubeResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void APIInvocationFailureForSuperTenant() throws Exception {
  String APIName=""String_Node_Str"";
  String APIContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=""String_Node_Str"";
  String description=""String_Node_Str"";
  String providerName=publisherContext.getSuperTenant().getTenantAdmin().getUserName();
  String APIVersion=""String_Node_Str"";
  APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiPublisher.login(publisherContext.getSuperTenant().getTenantAdmin().getUserName(),publisherContext.getSuperTenant().getTenantAdmin().getPassword());
  APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(APIVersion);
  apiRequest.setSandbox(url);
  apiRequest.setResourceMethod(""String_Node_Str"");
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  Map<String,String> requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"");
  waitForAPIDeploymentSync(apiRequest.getProvider(),apiRequest.getName(),apiRequest.getVersion(),APIMIntegrationConstants.IS_API_EXISTS);
  HttpResponse youTubeResponse=HttpRequestUtil.doGet(getAPIInvocationURLHttp(APIContext,APIVersion) + ""String_Node_Str"",requestHeaders);
  assertEquals(youTubeResponse.getResponseCode(),Response.Status.UNAUTHORIZED.getStatusCode(),""String_Node_Str"");
  assertTrue(youTubeResponse.getData().contains(""String_Node_Str""),""String_Node_Str"");
}",0.959521094640821
114922,"@Test(description=""String_Node_Str"") public void generateApplicationKeyWithoutScope() throws Exception {
  apiCreationRequestBean=new APICreationRequestBean(apiName,context,version,apiProvider,new URL(endpointUrl));
  apiCreationRequestBean.setEndpointType(endPointType);
  apiCreationRequestBean.setTier(tier);
  apiCreationRequestBean.setTags(tags);
  apiCreationRequestBean.setResourceBeanList(resourceBeanList);
  apiCreationRequestBean.setDescription(apiDescription);
  apiCreationRequestBean.setVisibility(visibility);
  log.info(apiCreationRequestBean);
  HttpResponse apiCreateResponse=apiPublisher.addAPI(apiCreationRequestBean);
  assertEquals(apiCreateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject createApiJsonObject=new JSONObject(apiCreateResponse.getData());
  assertEquals(createApiJsonObject.getBoolean(""String_Node_Str""),false,""String_Node_Str"");
  HttpResponse verifyApiResponse=apiPublisher.getApi(apiName,apiProvider,version);
  JSONObject verifyApiJsonObject=new JSONObject(verifyApiResponse.getData());
  assertFalse(verifyApiJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,apiProvider,APILifeCycleState.PUBLISHED);
  HttpResponse statusUpdateResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  assertEquals(statusUpdateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject statusUpdateJsonObject=new JSONObject(statusUpdateResponse.getData());
  assertFalse(statusUpdateJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  apiProvider=storeContext.getContextTenant().getContextUser().getUserName();
  HttpResponse addApplicationResponse=apiStore.addApplication(applicationName,tier,callbackUrl,applicationDescription);
  assertEquals(addApplicationResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"" + applicationName);
  JSONObject addApplicationJsonObject=new JSONObject(addApplicationResponse.getData());
  assertFalse(addApplicationJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"" + applicationName);
  SubscriptionRequest apiSubscriptionRequest=new SubscriptionRequest(apiName,version,apiProvider,applicationName,tier);
  HttpResponse subscriptionResponse=apiStore.subscribe(apiSubscriptionRequest);
  assertEquals(subscriptionResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject subscriptionResponseJsonObject=new JSONObject(subscriptionResponse.getData());
  assertFalse(subscriptionResponseJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  String gatewayUrl;
  if (gatewayContextWrk.getContextTenant().getDomain().equals(FrameworkConstants.SUPER_TENANT_DOMAIN_NAME)) {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp();
  }
 else {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"" + gatewayContextWrk.getContextTenant().getDomain()+ ""String_Node_Str"";
  }
  String accessUrl=gatewayUrl + context + ""String_Node_Str""+ version+ ""String_Node_Str"";
  APPKeyRequestGenerator appKeyRequestGenerator=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStore.generateApplicationKey(appKeyRequestGenerator).getData();
  JSONObject jsonObject=new JSONObject(responseString);
  String accessToken=jsonObject.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  Map<String,String> applicationHeader=new HashMap<String,String>();
  applicationHeader.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  applicationHeader.put(""String_Node_Str"",""String_Node_Str"");
  HttpResponse apiInvokeResponse=new HttpRequestUtil().doGet(accessUrl,applicationHeader);
  String apiResponse=""String_Node_Str"";
  assertEquals(apiInvokeResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(apiInvokeResponse.getData().contains(apiResponse),""String_Node_Str"");
}","@Test(description=""String_Node_Str"") public void generateApplicationKeyWithoutScope() throws Exception {
  apiCreationRequestBean=new APICreationRequestBean(apiName,context,version,apiProvider,new URL(endpointUrl));
  apiCreationRequestBean.setEndpointType(endPointType);
  apiCreationRequestBean.setTiersCollection(tier);
  apiCreationRequestBean.setTags(tags);
  apiCreationRequestBean.setResourceBeanList(resourceBeanList);
  apiCreationRequestBean.setDescription(apiDescription);
  apiCreationRequestBean.setVisibility(visibility);
  log.info(apiCreationRequestBean);
  HttpResponse apiCreateResponse=apiPublisher.addAPI(apiCreationRequestBean);
  assertEquals(apiCreateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject createApiJsonObject=new JSONObject(apiCreateResponse.getData());
  assertEquals(createApiJsonObject.getBoolean(""String_Node_Str""),false,""String_Node_Str"");
  HttpResponse verifyApiResponse=apiPublisher.getApi(apiName,apiProvider,version);
  JSONObject verifyApiJsonObject=new JSONObject(verifyApiResponse.getData());
  assertFalse(verifyApiJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,apiProvider,APILifeCycleState.PUBLISHED);
  HttpResponse statusUpdateResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  assertEquals(statusUpdateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject statusUpdateJsonObject=new JSONObject(statusUpdateResponse.getData());
  assertFalse(statusUpdateJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  apiProvider=storeContext.getContextTenant().getContextUser().getUserName();
  HttpResponse addApplicationResponse=apiStore.addApplication(applicationName,tier,callbackUrl,applicationDescription);
  assertEquals(addApplicationResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"" + applicationName);
  JSONObject addApplicationJsonObject=new JSONObject(addApplicationResponse.getData());
  assertFalse(addApplicationJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"" + applicationName);
  SubscriptionRequest apiSubscriptionRequest=new SubscriptionRequest(apiName,version,apiProvider,applicationName,tier);
  HttpResponse subscriptionResponse=apiStore.subscribe(apiSubscriptionRequest);
  assertEquals(subscriptionResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject subscriptionResponseJsonObject=new JSONObject(subscriptionResponse.getData());
  assertFalse(subscriptionResponseJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  String gatewayUrl;
  if (gatewayContextWrk.getContextTenant().getDomain().equals(FrameworkConstants.SUPER_TENANT_DOMAIN_NAME)) {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp();
  }
 else {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"" + gatewayContextWrk.getContextTenant().getDomain()+ ""String_Node_Str"";
  }
  String accessUrl=gatewayUrl + context + ""String_Node_Str""+ version+ ""String_Node_Str"";
  APPKeyRequestGenerator appKeyRequestGenerator=new APPKeyRequestGenerator(applicationName);
  String responseString=apiStore.generateApplicationKey(appKeyRequestGenerator).getData();
  JSONObject jsonObject=new JSONObject(responseString);
  String accessToken=jsonObject.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  Map<String,String> applicationHeader=new HashMap<String,String>();
  applicationHeader.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  applicationHeader.put(""String_Node_Str"",""String_Node_Str"");
  HttpResponse apiInvokeResponse=new HttpRequestUtil().doGet(accessUrl,applicationHeader);
  String apiResponse=""String_Node_Str"";
  assertEquals(apiInvokeResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  assertTrue(apiInvokeResponse.getData().contains(apiResponse),""String_Node_Str"");
}",0.9986237958213436
114923,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",priority=1) public void testCreateApiWithDifferentProductionEndpoints() throws Exception {
  String tags=""String_Node_Str"";
  String description=""String_Node_Str"";
  firstProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp1;
  secondProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp2;
  thirdProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp3;
  ArrayList<String> endpointLB=new ArrayList<String>();
  endpointLB.add(firstProductionEndPoint);
  endpointLB.add(secondProductionEndPoint);
  endpointLB.add(thirdProductionEndPoint);
  providerName=publisherContext.getContextTenant().getContextUser().getUserName();
  APICreationRequestBean apiCreateRequestBean=new APICreationRequestBean(apiName,context,version,providerName,endpointLB);
  apiCreateRequestBean.setTier(tier);
  apiCreateRequestBean.setResourceBeanList(resourceBeanList);
  apiCreateRequestBean.setVisibility(visibility);
  apiCreateRequestBean.setTags(tags);
  apiCreateRequestBean.setDescription(description);
  apiCreateRequestBean.setEndpointType(endPointType);
  HttpResponse apiCreateResponse=apiPublisher.addAPI(apiCreateRequestBean);
  assertEquals(apiCreateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject jsonObject=new JSONObject(apiCreateResponse.getData());
  assertFalse(jsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  HttpResponse verifyApi=apiPublisher.getApi(apiName,providerName,version);
  JSONObject verifyApiJsonObject=new JSONObject(verifyApi.getData());
  assertFalse(verifyApiJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,providerName,APILifeCycleState.PUBLISHED);
  HttpResponse statusUpdateResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  assertEquals(statusUpdateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject statusUpdateJsonObject=new JSONObject(statusUpdateResponse.getData());
  assertFalse(statusUpdateJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",priority=1) public void testCreateApiWithDifferentProductionEndpoints() throws Exception {
  String tags=""String_Node_Str"";
  String description=""String_Node_Str"";
  firstProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp1;
  secondProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp2;
  thirdProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp3;
  ArrayList<String> endpointLB=new ArrayList<String>();
  endpointLB.add(firstProductionEndPoint);
  endpointLB.add(secondProductionEndPoint);
  endpointLB.add(thirdProductionEndPoint);
  providerName=publisherContext.getContextTenant().getContextUser().getUserName();
  APICreationRequestBean apiCreateRequestBean=new APICreationRequestBean(apiName,context,version,providerName,endpointLB);
  apiCreateRequestBean.setTiersCollection(tier);
  apiCreateRequestBean.setResourceBeanList(resourceBeanList);
  apiCreateRequestBean.setVisibility(visibility);
  apiCreateRequestBean.setTags(tags);
  apiCreateRequestBean.setDescription(description);
  apiCreateRequestBean.setEndpointType(endPointType);
  HttpResponse apiCreateResponse=apiPublisher.addAPI(apiCreateRequestBean);
  assertEquals(apiCreateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject jsonObject=new JSONObject(apiCreateResponse.getData());
  assertFalse(jsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  HttpResponse verifyApi=apiPublisher.getApi(apiName,providerName,version);
  JSONObject verifyApiJsonObject=new JSONObject(verifyApi.getData());
  assertFalse(verifyApiJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(apiName,providerName,APILifeCycleState.PUBLISHED);
  HttpResponse statusUpdateResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
  assertEquals(statusUpdateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject statusUpdateJsonObject=new JSONObject(statusUpdateResponse.getData());
  assertFalse(statusUpdateJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
}",0.9974776427424904
114924,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"",priority=2) public void testCreateApiWithBothProdAndSandboxEndpoints() throws Exception {
  String descriptionSandbox=""String_Node_Str"";
  String tagsSandbox=""String_Node_Str"";
  firstProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp1;
  secondProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp2;
  thirdProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp3;
  List<String> endpointProd=new ArrayList<String>();
  endpointProd.add(firstProductionEndPoint);
  endpointProd.add(secondProductionEndPoint);
  endpointProd.add(thirdProductionEndPoint);
  String firstSandboxEndpoint=gatewayUrlsWrk.getWebAppURLHttp() + firstWebAppSB;
  String secondSandboxEndpoint=gatewayUrlsWrk.getWebAppURLHttp() + secondWebAppSB;
  String thirdSandboxEndpoint=gatewayUrlsWrk.getWebAppURLHttp() + thirdWebAppSB;
  List<String> endpointSandbox=new ArrayList<String>();
  endpointSandbox.add(firstSandboxEndpoint);
  endpointSandbox.add(secondSandboxEndpoint);
  endpointSandbox.add(thirdSandboxEndpoint);
  providerName=publisherContext.getContextTenant().getContextUser().getUserName();
  APICreationRequestBean apiSBCreationRequestBean=new APICreationRequestBean(apiNameSandbox,contextSandbox,version,providerName,endpointProd,endpointSandbox);
  apiSBCreationRequestBean.setTier(tier);
  apiSBCreationRequestBean.setResourceBeanList(resourceBeanList);
  apiSBCreationRequestBean.setVisibility(visibility);
  apiSBCreationRequestBean.setTags(tagsSandbox);
  apiSBCreationRequestBean.setDescription(descriptionSandbox);
  apiSBCreationRequestBean.setEndpointType(endPointType);
  HttpResponse apiSBCreateResponse=apiPublisher.addAPI(apiSBCreationRequestBean);
  assertEquals(apiSBCreateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject apiSBCreateJsonObject=new JSONObject(apiSBCreateResponse.getData());
  assertFalse(apiSBCreateJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  HttpResponse verifyAPI=apiPublisher.getAPI(apiNameSandbox,providerName,version);
  assertEquals(verifyAPI.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject verifyApiJSONObject=new JSONObject(verifyAPI.getData());
  assertFalse(verifyApiJSONObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  APILifeCycleStateRequest updateStateRequest=new APILifeCycleStateRequest(apiNameSandbox,providerName,APILifeCycleState.PUBLISHED);
  HttpResponse stateUpdateResponse=apiPublisher.changeAPILifeCycleStatus(updateStateRequest);
  assertEquals(stateUpdateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject apiPublishedJsonObject=new JSONObject(stateUpdateResponse.getData());
  assertFalse(apiPublishedJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"",priority=2) public void testCreateApiWithBothProdAndSandboxEndpoints() throws Exception {
  String descriptionSandbox=""String_Node_Str"";
  String tagsSandbox=""String_Node_Str"";
  firstProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp1;
  secondProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp2;
  thirdProductionEndPoint=gatewayUrlsWrk.getWebAppURLHttp() + webApp3;
  List<String> endpointProd=new ArrayList<String>();
  endpointProd.add(firstProductionEndPoint);
  endpointProd.add(secondProductionEndPoint);
  endpointProd.add(thirdProductionEndPoint);
  String firstSandboxEndpoint=gatewayUrlsWrk.getWebAppURLHttp() + firstWebAppSB;
  String secondSandboxEndpoint=gatewayUrlsWrk.getWebAppURLHttp() + secondWebAppSB;
  String thirdSandboxEndpoint=gatewayUrlsWrk.getWebAppURLHttp() + thirdWebAppSB;
  List<String> endpointSandbox=new ArrayList<String>();
  endpointSandbox.add(firstSandboxEndpoint);
  endpointSandbox.add(secondSandboxEndpoint);
  endpointSandbox.add(thirdSandboxEndpoint);
  providerName=publisherContext.getContextTenant().getContextUser().getUserName();
  APICreationRequestBean apiSBCreationRequestBean=new APICreationRequestBean(apiNameSandbox,contextSandbox,version,providerName,endpointProd,endpointSandbox);
  apiSBCreationRequestBean.setTiersCollection(tier);
  apiSBCreationRequestBean.setResourceBeanList(resourceBeanList);
  apiSBCreationRequestBean.setVisibility(visibility);
  apiSBCreationRequestBean.setTags(tagsSandbox);
  apiSBCreationRequestBean.setDescription(descriptionSandbox);
  apiSBCreationRequestBean.setEndpointType(endPointType);
  HttpResponse apiSBCreateResponse=apiPublisher.addAPI(apiSBCreationRequestBean);
  assertEquals(apiSBCreateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject apiSBCreateJsonObject=new JSONObject(apiSBCreateResponse.getData());
  assertFalse(apiSBCreateJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  HttpResponse verifyAPI=apiPublisher.getAPI(apiNameSandbox,providerName,version);
  assertEquals(verifyAPI.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject verifyApiJSONObject=new JSONObject(verifyAPI.getData());
  assertFalse(verifyApiJSONObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  APILifeCycleStateRequest updateStateRequest=new APILifeCycleStateRequest(apiNameSandbox,providerName,APILifeCycleState.PUBLISHED);
  HttpResponse stateUpdateResponse=apiPublisher.changeAPILifeCycleStatus(updateStateRequest);
  assertEquals(stateUpdateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject apiPublishedJsonObject=new JSONObject(stateUpdateResponse.getData());
  assertFalse(apiPublishedJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
}",0.998075913940878
114925,"@Test(description=""String_Node_Str"") public void testRemoveSubscriptionByAppId() throws Exception {
  defaultAppListIndex=numberOfApis - 2;
  HttpResponse getAllAppResponse=apiStore.getAllApplications();
  assertEquals(getAllAppResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject getAllAppJsonObject=new JSONObject(getAllAppResponse.getData());
  assertFalse(getAllAppJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  JSONArray getAllAppsJsonArray=getAllAppJsonObject.getJSONArray(""String_Node_Str"");
  for (int arrayIndex=0; arrayIndex < getAllAppsJsonArray.length(); arrayIndex++) {
    if (getAllAppsJsonArray.getJSONObject(arrayIndex).getString(""String_Node_Str"").equals(applicationName)) {
      String defaultAppId=getAllAppsJsonArray.getJSONObject(arrayIndex).getString(""String_Node_Str"");
      HttpResponse removeSubscriptionByIdResponse=apiStore.removeAPISubscription(apiNameList.get(defaultAppListIndex),version,providerName,defaultAppId);
      assertEquals(removeSubscriptionByIdResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
      JSONObject removeSubscriptionByIdJsonObject=new JSONObject(removeSubscriptionByIdResponse.getData());
      assertFalse(removeSubscriptionByIdJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
    }
  }
}","@Test(description=""String_Node_Str"") public void testRemoveSubscriptionByAppId() throws Exception {
  defaultAppListIndex=numberOfApis - 2;
  HttpResponse getAllAppResponse=apiStore.getAllApplications();
  assertEquals(getAllAppResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject getAllAppJsonObject=new JSONObject(getAllAppResponse.getData());
  assertFalse(getAllAppJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  JSONArray getAllAppsJsonArray=getAllAppJsonObject.getJSONArray(""String_Node_Str"");
  for (int arrayIndex=0; arrayIndex < getAllAppsJsonArray.length(); arrayIndex++) {
    if (getAllAppsJsonArray.getJSONObject(arrayIndex).getString(""String_Node_Str"").equals(newApplicationName)) {
      String defaultAppId=getAllAppsJsonArray.getJSONObject(arrayIndex).getString(""String_Node_Str"");
      HttpResponse removeSubscriptionByIdResponse=apiStore.removeAPISubscription(apiNameList.get(defaultAppListIndex),version,providerName,defaultAppId);
      assertEquals(removeSubscriptionByIdResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
      JSONObject removeSubscriptionByIdJsonObject=new JSONObject(removeSubscriptionByIdResponse.getData());
      assertFalse(removeSubscriptionByIdJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
    }
  }
}",0.9981502034776176
114926,"@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  String fileFormat=""String_Node_Str"";
  super.init(userMode);
  log.info(""String_Node_Str"" + userMode);
  String path=TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  String sourcePath=path + webApp + fileFormat;
  String sessionId=createSession(gatewayContextWrk);
  WebAppAdminClient webAppAdminClient=new WebAppAdminClient(gatewayContextWrk.getContextUrls().getBackEndUrl(),sessionId);
  webAppAdminClient.uploadWarFile(sourcePath);
  boolean isWebAppDeployed=WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextWrk.getContextUrls().getBackEndUrl(),sessionId,webApp);
  assertTrue(isWebAppDeployed,""String_Node_Str"");
  String publisherURLHttp=publisherUrls.getWebAppURLHttp();
  String storeURLHttp=storeUrls.getWebAppURLHttp();
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword());
  apiStore.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  String uri=""String_Node_Str"";
  List<APIResourceBean> resourceBeanList=new ArrayList<APIResourceBean>();
  resourceBeanList.add(new APIResourceBean(""String_Node_Str"",""String_Node_Str"",tier,uri));
  String endpoint=""String_Node_Str"";
  String endpointUrl=gatewayUrlsWrk.getWebAppURLHttp() + webApp + endpoint;
  providerName=publisherContext.getContextTenant().getContextUser().getUserName();
  int count=1;
  for (int apiCount=0; apiCount < numberOfApis; apiCount++) {
    String tempApiName=apiName + count;
    String tempApiContext=apiContext + count;
    APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(tempApiName,tempApiContext,version,providerName,new URL(endpointUrl));
    apiCreationRequestBean.setEndpointType(endPointType);
    apiCreationRequestBean.setTier(tier);
    apiCreationRequestBean.setTags(tags);
    apiCreationRequestBean.setResourceBeanList(resourceBeanList);
    apiCreationRequestBean.setDescription(description);
    apiCreationRequestBean.setVisibility(visibility);
    HttpResponse apiCreateResponse=apiPublisher.addAPI(apiCreationRequestBean);
    assertEquals(apiCreateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
    JSONObject createApiJsonObject=new JSONObject(apiCreateResponse.getData());
    assertEquals(createApiJsonObject.getBoolean(""String_Node_Str""),false,""String_Node_Str"");
    HttpResponse verifyApiResponse=apiPublisher.getApi(tempApiName,providerName,version);
    JSONObject verifyApiJsonObject=new JSONObject(verifyApiResponse.getData());
    assertFalse(verifyApiJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
    apiNameList.add(tempApiName);
    apiContextList.add(tempApiContext);
    APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(tempApiName,providerName,APILifeCycleState.PUBLISHED);
    HttpResponse statusUpdateResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
    assertEquals(statusUpdateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
    JSONObject statusUpdateJsonObject=new JSONObject(statusUpdateResponse.getData());
    assertFalse(statusUpdateJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
    count++;
  }
  if (gatewayContextWrk.getContextTenant().getDomain().equals(FrameworkConstants.SUPER_TENANT_DOMAIN_NAME)) {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp();
  }
 else {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"" + gatewayContextWrk.getContextTenant().getDomain()+ ""String_Node_Str"";
  }
  providerName=storeContext.getContextTenant().getContextUser().getUserName();
  HttpResponse createAppResponse=apiStore.addApplication(applicationName,tier,""String_Node_Str"",""String_Node_Str"");
  assertEquals(createAppResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject createAppJsonObject=new JSONObject(createAppResponse.getData());
  assertFalse(createAppJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"" + applicationName);
  for (int apiCount=0; apiCount < numberOfApis - 2; apiCount++) {
    accessUrl=gatewayUrl + apiContextList.get(apiCount) + ""String_Node_Str""+ version+ ""String_Node_Str"";
    SubscriptionRequest apiSubscriptionRequest=new SubscriptionRequest(apiNameList.get(apiCount),version,providerName,applicationName,tier);
    HttpResponse subscriptionResponse=apiStore.subscribe(apiSubscriptionRequest);
    assertEquals(subscriptionResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
    JSONObject subscriptionResponseJsonObject=new JSONObject(subscriptionResponse.getData());
    assertFalse(subscriptionResponseJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  }
  HttpResponse createNewAppResponse=apiStore.addApplication(newApplicationName,tier,""String_Node_Str"",""String_Node_Str"");
  assertEquals(createAppResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject createNewAppJsonObject=new JSONObject(createNewAppResponse.getData());
  assertFalse(createAppJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"" + applicationName);
  providerName=storeContext.getContextTenant().getContextUser().getUserName();
  for (int apiCount=numberOfApis - 2; apiCount < numberOfApis; apiCount++) {
    accessUrl=gatewayUrl + apiContextList.get(apiCount) + ""String_Node_Str""+ version+ ""String_Node_Str"";
    SubscriptionRequest apiSubscriptionRequestDefaultApp=new SubscriptionRequest(apiNameList.get(apiCount),version,providerName,newApplicationName,tier);
    HttpResponse subscriptionResponseDefaultApp=apiStore.subscribe(apiSubscriptionRequestDefaultApp);
    assertEquals(subscriptionResponseDefaultApp.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
    JSONObject subscriptionResponseJsonObject=new JSONObject(subscriptionResponseDefaultApp.getData());
    assertFalse(subscriptionResponseJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  }
}","@BeforeClass(alwaysRun=true) public void setEnvironment() throws Exception {
  String fileFormat=""String_Node_Str"";
  super.init(userMode);
  log.info(""String_Node_Str"" + userMode);
  String path=TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator;
  String sourcePath=path + webApp + fileFormat;
  String sessionId=createSession(gatewayContextWrk);
  WebAppAdminClient webAppAdminClient=new WebAppAdminClient(gatewayContextWrk.getContextUrls().getBackEndUrl(),sessionId);
  webAppAdminClient.uploadWarFile(sourcePath);
  boolean isWebAppDeployed=WebAppDeploymentUtil.isWebApplicationDeployed(gatewayContextWrk.getContextUrls().getBackEndUrl(),sessionId,webApp);
  assertTrue(isWebAppDeployed,""String_Node_Str"");
  String publisherURLHttp=publisherUrls.getWebAppURLHttp();
  String storeURLHttp=storeUrls.getWebAppURLHttp();
  apiPublisher=new APIPublisherRestClient(publisherURLHttp);
  apiStore=new APIStoreRestClient(storeURLHttp);
  apiPublisher.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword());
  apiStore.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  String uri=""String_Node_Str"";
  List<APIResourceBean> resourceBeanList=new ArrayList<APIResourceBean>();
  resourceBeanList.add(new APIResourceBean(""String_Node_Str"",""String_Node_Str"",tier,uri));
  String endpoint=""String_Node_Str"";
  String endpointUrl=gatewayUrlsWrk.getWebAppURLHttp() + webApp + endpoint;
  providerName=publisherContext.getContextTenant().getContextUser().getUserName();
  int count=1;
  for (int apiCount=0; apiCount < numberOfApis; apiCount++) {
    String tempApiName=apiName + count;
    String tempApiContext=apiContext + count;
    APICreationRequestBean apiCreationRequestBean=new APICreationRequestBean(tempApiName,tempApiContext,version,providerName,new URL(endpointUrl));
    apiCreationRequestBean.setEndpointType(endPointType);
    apiCreationRequestBean.setTiersCollection(tier);
    apiCreationRequestBean.setTags(tags);
    apiCreationRequestBean.setResourceBeanList(resourceBeanList);
    apiCreationRequestBean.setDescription(description);
    apiCreationRequestBean.setVisibility(visibility);
    HttpResponse apiCreateResponse=apiPublisher.addAPI(apiCreationRequestBean);
    assertEquals(apiCreateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
    JSONObject createApiJsonObject=new JSONObject(apiCreateResponse.getData());
    assertEquals(createApiJsonObject.getBoolean(""String_Node_Str""),false,""String_Node_Str"");
    HttpResponse verifyApiResponse=apiPublisher.getApi(tempApiName,providerName,version);
    JSONObject verifyApiJsonObject=new JSONObject(verifyApiResponse.getData());
    assertFalse(verifyApiJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
    apiNameList.add(tempApiName);
    apiContextList.add(tempApiContext);
    APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(tempApiName,providerName,APILifeCycleState.PUBLISHED);
    HttpResponse statusUpdateResponse=apiPublisher.changeAPILifeCycleStatus(updateRequest);
    assertEquals(statusUpdateResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
    JSONObject statusUpdateJsonObject=new JSONObject(statusUpdateResponse.getData());
    assertFalse(statusUpdateJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
    count++;
  }
  if (gatewayContextWrk.getContextTenant().getDomain().equals(FrameworkConstants.SUPER_TENANT_DOMAIN_NAME)) {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp();
  }
 else {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"" + gatewayContextWrk.getContextTenant().getDomain()+ ""String_Node_Str"";
  }
  providerName=storeContext.getContextTenant().getContextUser().getUserName();
  HttpResponse createAppResponse=apiStore.addApplication(applicationName,tier,""String_Node_Str"",""String_Node_Str"");
  assertEquals(createAppResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject createAppJsonObject=new JSONObject(createAppResponse.getData());
  assertFalse(createAppJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"" + applicationName);
  for (int apiCount=0; apiCount < numberOfApis - 2; apiCount++) {
    accessUrl=gatewayUrl + apiContextList.get(apiCount) + ""String_Node_Str""+ version+ ""String_Node_Str"";
    SubscriptionRequest apiSubscriptionRequest=new SubscriptionRequest(apiNameList.get(apiCount),version,providerName,applicationName,tier);
    HttpResponse subscriptionResponse=apiStore.subscribe(apiSubscriptionRequest);
    assertEquals(subscriptionResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
    JSONObject subscriptionResponseJsonObject=new JSONObject(subscriptionResponse.getData());
    assertFalse(subscriptionResponseJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  }
  HttpResponse createNewAppResponse=apiStore.addApplication(newApplicationName,tier,""String_Node_Str"",""String_Node_Str"");
  assertEquals(createAppResponse.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  JSONObject createNewAppJsonObject=new JSONObject(createNewAppResponse.getData());
  assertFalse(createAppJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"" + applicationName);
  providerName=storeContext.getContextTenant().getContextUser().getUserName();
  for (int apiCount=numberOfApis - 2; apiCount < numberOfApis; apiCount++) {
    accessUrl=gatewayUrl + apiContextList.get(apiCount) + ""String_Node_Str""+ version+ ""String_Node_Str"";
    SubscriptionRequest apiSubscriptionRequestDefaultApp=new SubscriptionRequest(apiNameList.get(apiCount),version,providerName,newApplicationName,tier);
    HttpResponse subscriptionResponseDefaultApp=apiStore.subscribe(apiSubscriptionRequestDefaultApp);
    assertEquals(subscriptionResponseDefaultApp.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
    JSONObject subscriptionResponseJsonObject=new JSONObject(subscriptionResponseDefaultApp.getData());
    assertFalse(subscriptionResponseJsonObject.getBoolean(""String_Node_Str""),""String_Node_Str"");
  }
}",0.9991344716342748
114927,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testSetScopeToResourceTestCase() throws Exception {
  userManagementClient=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  userManagementClient.addRole(SUBSCRIBER_ROLE,new String[]{},new String[]{""String_Node_Str"",""String_Node_Str""});
  String userJohn;
  String gatewayUrl;
  if (keyManagerContext.getContextTenant().getDomain().equals(""String_Node_Str"")) {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp();
    userJohn=USER_JOHN;
  }
 else {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"" + keyManagerContext.getContextTenant().getDomain()+ ""String_Node_Str"";
    userJohn=USER_JOHN + ""String_Node_Str"" + keyManagerContext.getContextTenant().getDomain();
  }
  userManagementClient.addUser(USER_JOHN,""String_Node_Str"",new String[]{SUBSCRIBER_ROLE},USER_JOHN);
  String apiContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=""String_Node_Str"";
  String description=""String_Node_Str"";
  apiPublisher.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword());
  APIRequest apiRequest=new APIRequest(API_NAME,apiContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(API_VERSION);
  apiRequest.setProvider(apiProvider);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,apiProvider,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  String modifiedResource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  apiPublisher.updateResourceOfAPI(apiProvider,API_NAME,API_VERSION,modifiedResource);
  apiStore.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStore.addApplication(APP_NAME,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(API_NAME,apiProvider);
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APP_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject jsonResponse=new JSONObject(responseString);
  String consumerKey=jsonResponse.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  String consumerSecret=jsonResponse.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  String accessToken;
  Map<String,String> requestHeaders;
  HttpResponse response;
  URL endPointURL;
  String requestBody;
  JSONObject accessTokenGenerationResponse;
  requestBody=""String_Node_Str"" + storeContext.getContextTenant().getContextUser().getUserName() + ""String_Node_Str""+ storeContext.getContextTenant().getContextUser().getPassword()+ ""String_Node_Str"";
  response=apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL);
  accessTokenGenerationResponse=new JSONObject(response.getData());
  accessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  response=HttpRequestUtil.doGet(gatewayUrl + ""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  endPointURL=new URL(gatewayUrl + ""String_Node_Str"");
  response=HttpRequestUtil.doPost(endPointURL,""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  requestBody=""String_Node_Str"" + userJohn + ""String_Node_Str"";
  accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  accessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  response=HttpRequestUtil.doGet(gatewayUrl + ""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  try {
    endPointURL=new URL(gatewayUrl + ""String_Node_Str"");
    response=HttpRequestUtil.doPost(endPointURL,""String_Node_Str"",requestHeaders);
    assertTrue(response.getResponseCode() != Response.Status.OK.getStatusCode(),""String_Node_Str"");
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
    assertTrue(true,""String_Node_Str"");
  }
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testSetScopeToResourceTestCase() throws Exception {
  userManagementClient=new UserManagementClient(keyManagerContext.getContextUrls().getBackEndUrl(),keyManagerContext.getContextTenant().getContextUser().getUserName(),keyManagerContext.getContextTenant().getContextUser().getPassword());
  userManagementClient.addRole(SUBSCRIBER_ROLE,new String[]{},new String[]{""String_Node_Str"",""String_Node_Str""});
  String userJohn;
  String gatewayUrl;
  if (keyManagerContext.getContextTenant().getDomain().equals(""String_Node_Str"")) {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp();
    userJohn=USER_JOHN;
  }
 else {
    gatewayUrl=gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"" + keyManagerContext.getContextTenant().getDomain()+ ""String_Node_Str"";
    userJohn=USER_JOHN + ""String_Node_Str"" + keyManagerContext.getContextTenant().getDomain();
  }
  userManagementClient.addUser(USER_JOHN,""String_Node_Str"",new String[]{SUBSCRIBER_ROLE},USER_JOHN);
  String apiContext=""String_Node_Str"";
  String tags=""String_Node_Str"";
  String url=""String_Node_Str"";
  String description=""String_Node_Str"";
  apiPublisher.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword());
  APIRequest apiRequest=new APIRequest(API_NAME,apiContext,new URL(url));
  apiRequest.setTags(tags);
  apiRequest.setDescription(description);
  apiRequest.setVersion(API_VERSION);
  apiRequest.setProvider(apiProvider);
  apiPublisher.addAPI(apiRequest);
  APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(API_NAME,apiProvider,APILifeCycleState.PUBLISHED);
  apiPublisher.changeAPILifeCycleStatus(updateRequest);
  String modifiedResource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  apiPublisher.updateResourceOfAPI(apiProvider,API_NAME,API_VERSION,modifiedResource);
  apiStore.login(storeContext.getContextTenant().getContextUser().getUserName(),storeContext.getContextTenant().getContextUser().getPassword());
  apiStore.addApplication(APP_NAME,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SubscriptionRequest subscriptionRequest=new SubscriptionRequest(API_NAME,apiProvider);
  subscriptionRequest.setApplicationName(APP_NAME);
  apiStore.subscribe(subscriptionRequest);
  APPKeyRequestGenerator generateAppKeyRequest=new APPKeyRequestGenerator(APP_NAME);
  String responseString=apiStore.generateApplicationKey(generateAppKeyRequest).getData();
  JSONObject jsonResponse=new JSONObject(responseString);
  String consumerKey=jsonResponse.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  String consumerSecret=jsonResponse.getJSONObject(""String_Node_Str"").getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  URL tokenEndpointURL=new URL(gatewayUrlsWrk.getWebAppURLNhttp() + ""String_Node_Str"");
  String accessToken;
  Map<String,String> requestHeaders;
  HttpResponse response;
  URL endPointURL;
  String requestBody;
  JSONObject accessTokenGenerationResponse;
  requestBody=""String_Node_Str"" + storeContext.getContextTenant().getContextUser().getUserName() + ""String_Node_Str""+ storeContext.getContextTenant().getContextUser().getPassword()+ ""String_Node_Str"";
  response=apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL);
  accessTokenGenerationResponse=new JSONObject(response.getData());
  accessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  response=HttpRequestUtil.doGet(gatewayUrl + ""String_Node_Str"",requestHeaders);
  Thread.sleep(5000);
  response=HttpRequestUtil.doGet(gatewayUrl + ""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  endPointURL=new URL(gatewayUrl + ""String_Node_Str"");
  response=HttpRequestUtil.doPost(endPointURL,""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  requestBody=""String_Node_Str"" + userJohn + ""String_Node_Str"";
  accessTokenGenerationResponse=new JSONObject(apiStore.generateUserAccessKey(consumerKey,consumerSecret,requestBody,tokenEndpointURL).getData());
  accessToken=accessTokenGenerationResponse.getString(""String_Node_Str"");
  requestHeaders=new HashMap<String,String>();
  requestHeaders.put(""String_Node_Str"",""String_Node_Str"" + accessToken);
  response=HttpRequestUtil.doGet(gatewayUrl + ""String_Node_Str"",requestHeaders);
  assertEquals(response.getResponseCode(),Response.Status.OK.getStatusCode(),""String_Node_Str"");
  try {
    endPointURL=new URL(gatewayUrl + ""String_Node_Str"");
    response=HttpRequestUtil.doPost(endPointURL,""String_Node_Str"",requestHeaders);
    assertTrue(response.getResponseCode() != Response.Status.OK.getStatusCode(),""String_Node_Str"");
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
    assertTrue(true,""String_Node_Str"");
  }
}",0.9900377212496372
114928,"@DataProvider public static Object[][] userModeDataProvider(){
  return new Object[][]{new Object[]{TestUserMode.TENANT_ADMIN}};
}","@DataProvider public static Object[][] userModeDataProvider(){
  return new Object[][]{new Object[]{TestUserMode.SUPER_TENANT_ADMIN},new Object[]{TestUserMode.TENANT_ADMIN}};
}",0.8496732026143791
114929,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  HttpResponse httpResponse;
  if (app1Name != null) {
    httpResponse=apiStore.removeApplication(app1Name);
    checkError(httpResponse.getData(),""String_Node_Str"" + app1Name);
  }
  if (app2Name != null) {
    httpResponse=apiStore.removeApplication(app2Name);
    checkError(httpResponse.getData(),""String_Node_Str"" + app2Name);
  }
  httpResponse=apiPublisher.deleteAPI(apiName,""String_Node_Str"",publisherContext.getSuperTenant().getContextUser().getUserName());
  checkError(httpResponse.getData(),""String_Node_Str"" + apiName);
  httpResponse=apiPublisher.deleteAPI(apiNameFaultyAPI,""String_Node_Str"",publisherContext.getSuperTenant().getContextUser().getUserName());
  checkError(httpResponse.getData(),""String_Node_Str"" + apiNameFaultyAPI);
  super.cleanup();
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  HttpResponse httpResponse;
  if (app1Name != null) {
    httpResponse=apiStore.removeApplication(app1Name);
    checkError(httpResponse.getData(),""String_Node_Str"" + app1Name);
  }
  if (app2Name != null) {
    httpResponse=apiStore.removeApplication(app2Name);
    checkError(httpResponse.getData(),""String_Node_Str"" + app2Name);
  }
  httpResponse=apiPublisher.deleteAPI(apiName,""String_Node_Str"",publisherContext.getSuperTenant().getContextUser().getUserName());
  checkError(httpResponse.getData(),""String_Node_Str"" + apiName);
  httpResponse=apiPublisher.deleteAPI(apiNameFaultyAPI,""String_Node_Str"",publisherContext.getSuperTenant().getContextUser().getUserName());
  checkError(httpResponse.getData(),""String_Node_Str"" + apiNameFaultyAPI);
  super.cleanUp();
}",0.9988066825775656
114930,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  super.cleanup();
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  super.cleanUp();
}",0.9887640449438202
114931,"@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}","@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  super.cleanUp();
  driver.quit();
}",0.5049019607843137
114932,"@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}","@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  super.cleanUp();
  driver.quit();
}",0.5049019607843137
114933,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testLogin() throws Exception {
  driver.get(publisherURL + ""String_Node_Str"");
  WebElement userNameField=driver.findElement(By.id(""String_Node_Str""));
  WebElement passwordField=driver.findElement(By.id(""String_Node_Str""));
  userNameField.sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  passwordField.sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  for (int i=0; i < 13; i++) {
    publishAPI(""String_Node_Str"" + i,""String_Node_Str"" + i);
  }
  driver.get(storeURL + ""String_Node_Str"");
  WebElement searchTxtBox=driver.findElement(By.name(""String_Node_Str""));
  searchTxtBox.sendKeys(""String_Node_Str"");
  driver.findElement(By.className(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  int searchResultCount=driver.findElements(By.cssSelector(""String_Node_Str"")).size();
  Boolean result;
  if (searchResultCount == 10) {
    result=true;
  }
 else {
    result=false;
  }
  Assert.assertTrue(result,""String_Node_Str"");
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testLogin() throws Exception {
  driver.get(publisherURL + ""String_Node_Str"");
  WebElement userNameField=driver.findElement(By.id(""String_Node_Str""));
  WebElement passwordField=driver.findElement(By.id(""String_Node_Str""));
  userNameField.sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getUserName());
  passwordField.sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  for (int i=0; i < 13; i++) {
    publishAPI(""String_Node_Str"" + i,""String_Node_Str"" + i);
  }
  driver.get(storeURL + ""String_Node_Str"");
  WebElement searchTxtBox=driver.findElement(By.name(""String_Node_Str""));
  searchTxtBox.sendKeys(""String_Node_Str"");
  driver.findElement(By.className(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  int searchResultCount=driver.findElements(By.cssSelector(""String_Node_Str"")).size();
  Boolean result;
  if (searchResultCount == 10) {
    result=true;
  }
 else {
    result=false;
  }
  Assert.assertTrue(result,""String_Node_Str"");
}",0.9974916387959866
114934,"@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}","@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContextMgt.getContextTenant().getContextUser().getUserName(),gatewayContextMgt.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}",0.9901315789473684
114935,"@Test(groups=""String_Node_Str"") public void checkCrossTenantSubscription() throws Exception {
  WebDriverWait wait=new WebDriverWait(driver,60);
  driver.get(getLoginURL());
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  generateTenant(""String_Node_Str"");
  generateTenant(""String_Node_Str"");
  driver.get(getPublisherURL() + ""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_ADMIN_USER_NAME + APIMTestConstants.EMAIL_DOMAIN_SEPARATOR + TEST1_TENANT_DOMAIN);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_PASSWORD);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_NAME);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_NAME);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_VERSION);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_END_POINT);
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  new Select(driver.findElement(By.id(""String_Node_Str""))).selectByValue(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.get(getStoreURL() + ""String_Node_Str"" + TEST2_TENANT_DOMAIN);
  driver.navigate().refresh();
  log.info(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  WebElement userNameField=driver.findElement(By.id(""String_Node_Str""));
  WebElement passwordField=driver.findElement(By.id(""String_Node_Str""));
  userNameField.sendKeys(TEST_DATA_ADMIN_USER_NAME + APIMTestConstants.EMAIL_DOMAIN_SEPARATOR + TEST2_TENANT_DOMAIN);
  passwordField.sendKeys(TEST_DATA_PASSWORD);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(TEST_DATA_ADMIN_USER_NAME + APIMTestConstants.EMAIL_DOMAIN_SEPARATOR + TEST2_TENANT_DOMAIN)));
  log.info(""String_Node_Str"");
  driver.get(getStoreURL() + ""String_Node_Str"" + TEST1_TENANT_DOMAIN);
  long loopMaxTime=APIMTestConstants.MAX_LOOP_WAIT_TIME_MILLISECONDS;
  long startTime=System.currentTimeMillis();
  while ((!driver.getPageSource().contains(TEST_DATA_API_NAME)) && (System.currentTimeMillis() - startTime) < loopMaxTime) {
    driver.findElement(By.linkText(""String_Node_Str"")).click();
    Thread.sleep(500);
  }
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  new Select(driver.findElement(By.id(""String_Node_Str""))).selectByVisibleText(DEFAULT_APPLICATION);
  driver.findElement(By.id(""String_Node_Str"")).click();
  ServerConfigurationManager serverConfigurationManager=new ServerConfigurationManager(gatewayContext);
  serverConfigurationManager.restartGracefully();
  driver.get(getStoreURL() + ""String_Node_Str"" + TEST2_TENANT_DOMAIN);
  log.info(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  WebElement userNameField1=driver.findElement(By.id(""String_Node_Str""));
  WebElement passwordField1=driver.findElement(By.id(""String_Node_Str""));
  userNameField1.sendKeys(TEST_DATA_ADMIN_USER_NAME + APIMTestConstants.EMAIL_DOMAIN_SEPARATOR + TEST2_TENANT_DOMAIN);
  passwordField1.sendKeys(TEST_DATA_PASSWORD);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  log.info(""String_Node_Str"");
  driver.get(getStoreURL() + ""String_Node_Str"" + TEST1_TENANT_DOMAIN);
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
}","@Test(groups=""String_Node_Str"") public void checkCrossTenantSubscription() throws Exception {
  WebDriverWait wait=new WebDriverWait(driver,60);
  driver.get(getLoginURL());
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getUserName());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  generateTenant(""String_Node_Str"");
  generateTenant(""String_Node_Str"");
  driver.get(getPublisherURL() + ""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_ADMIN_USER_NAME + APIMTestConstants.EMAIL_DOMAIN_SEPARATOR + TEST1_TENANT_DOMAIN);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_PASSWORD);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_NAME);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_NAME);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_VERSION);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_END_POINT);
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  new Select(driver.findElement(By.id(""String_Node_Str""))).selectByValue(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.get(getStoreURL() + ""String_Node_Str"" + TEST2_TENANT_DOMAIN);
  driver.navigate().refresh();
  log.info(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  WebElement userNameField=driver.findElement(By.id(""String_Node_Str""));
  WebElement passwordField=driver.findElement(By.id(""String_Node_Str""));
  userNameField.sendKeys(TEST_DATA_ADMIN_USER_NAME + APIMTestConstants.EMAIL_DOMAIN_SEPARATOR + TEST2_TENANT_DOMAIN);
  passwordField.sendKeys(TEST_DATA_PASSWORD);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(TEST_DATA_ADMIN_USER_NAME + APIMTestConstants.EMAIL_DOMAIN_SEPARATOR + TEST2_TENANT_DOMAIN)));
  log.info(""String_Node_Str"");
  driver.get(getStoreURL() + ""String_Node_Str"" + TEST1_TENANT_DOMAIN);
  long loopMaxTime=APIMTestConstants.MAX_LOOP_WAIT_TIME_MILLISECONDS;
  long startTime=System.currentTimeMillis();
  while ((!driver.getPageSource().contains(TEST_DATA_API_NAME)) && (System.currentTimeMillis() - startTime) < loopMaxTime) {
    driver.findElement(By.linkText(""String_Node_Str"")).click();
    Thread.sleep(500);
  }
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  new Select(driver.findElement(By.id(""String_Node_Str""))).selectByVisibleText(DEFAULT_APPLICATION);
  driver.findElement(By.id(""String_Node_Str"")).click();
  ServerConfigurationManager serverConfigurationManager=new ServerConfigurationManager(gatewayContextMgt);
  serverConfigurationManager.restartGracefully();
  driver.get(getStoreURL() + ""String_Node_Str"" + TEST2_TENANT_DOMAIN);
  log.info(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  WebElement userNameField1=driver.findElement(By.id(""String_Node_Str""));
  WebElement passwordField1=driver.findElement(By.id(""String_Node_Str""));
  userNameField1.sendKeys(TEST_DATA_ADMIN_USER_NAME + APIMTestConstants.EMAIL_DOMAIN_SEPARATOR + TEST2_TENANT_DOMAIN);
  passwordField1.sendKeys(TEST_DATA_PASSWORD);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  log.info(""String_Node_Str"");
  driver.get(getStoreURL() + ""String_Node_Str"" + TEST1_TENANT_DOMAIN);
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
}",0.999258954302182
114936,"@BeforeClass(alwaysRun=true) protected void setEnvironment() throws Exception {
  super.init();
  if (!editStoreConfig(externalLogoutPage)) {
    throw new TestException(""String_Node_Str"");
  }
  driver=BrowserManager.getWebDriver();
  apiStoreUrl=getStoreURL();
  this.logViewerClient=new LogViewerClient(gatewayContext.getContextUrls().getBackEndUrl(),TEST_DATA_USERNAME,TEST_DATA_PASSWORD);
}","@BeforeClass(alwaysRun=true) protected void setEnvironment() throws Exception {
  super.init();
  if (!editStoreConfig(externalLogoutPage)) {
    throw new TestException(""String_Node_Str"");
  }
  driver=BrowserManager.getWebDriver();
  apiStoreUrl=getStoreURL();
  this.logViewerClient=new LogViewerClient(gatewayContextMgt.getContextUrls().getBackEndUrl(),TEST_DATA_USERNAME,TEST_DATA_PASSWORD);
}",0.996216897856242
114937,"@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}","@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContextMgt.getContextTenant().getContextUser().getUserName(),gatewayContextMgt.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}",0.9901315789473684
114938,"@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}","@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  super.cleanUp();
  driver.quit();
}",0.5049019607843137
114939,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testPublishApiWithScopesDefined() throws Exception {
  driver.get(publisherURL + ""String_Node_Str"");
  WebElement userNameField=driver.findElement(By.id(""String_Node_Str""));
  WebElement passwordField=driver.findElement(By.id(""String_Node_Str""));
  userNameField.sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  passwordField.sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.get(getStoreURL() + ""String_Node_Str"" + SUPER_TENANT_DOMAIN_NAME);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement usernameEle=driver.findElement(By.id(""String_Node_Str""));
  usernameEle.sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement passwordEle=driver.findElement(By.id(""String_Node_Str""));
  passwordEle.sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  long loopMaxTime=APIMTestConstants.MAX_LOOP_WAIT_TIME_MILLISECONDS;
  long startTime=System.currentTimeMillis();
  long nowTime=startTime;
  while ((!driver.getPageSource().contains(""String_Node_Str"")) && (nowTime - startTime) < loopMaxTime) {
    driver.findElement(By.linkText(""String_Node_Str"")).click();
    threadWait(500);
    nowTime=System.currentTimeMillis();
  }
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  new Select(driver.findElement(By.id(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement scope=driver.findElement(By.id(""String_Node_Str""));
  String finalScope=scope.getText();
  if (!(finalScope.equals(""String_Node_Str"") || finalScope.equals(""String_Node_Str""))) {
    throw new Exception(""String_Node_Str"");
  }
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testPublishApiWithScopesDefined() throws Exception {
  driver.get(publisherURL + ""String_Node_Str"");
  WebElement userNameField=driver.findElement(By.id(""String_Node_Str""));
  WebElement passwordField=driver.findElement(By.id(""String_Node_Str""));
  userNameField.sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getUserName());
  passwordField.sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.get(getStoreURL() + ""String_Node_Str"" + SUPER_TENANT_DOMAIN_NAME);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement usernameEle=driver.findElement(By.id(""String_Node_Str""));
  usernameEle.sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getUserName());
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement passwordEle=driver.findElement(By.id(""String_Node_Str""));
  passwordEle.sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  long loopMaxTime=APIMTestConstants.MAX_LOOP_WAIT_TIME_MILLISECONDS;
  long startTime=System.currentTimeMillis();
  long nowTime=startTime;
  while ((!driver.getPageSource().contains(""String_Node_Str"")) && (nowTime - startTime) < loopMaxTime) {
    driver.findElement(By.linkText(""String_Node_Str"")).click();
    threadWait(500);
    nowTime=System.currentTimeMillis();
  }
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  new Select(driver.findElement(By.id(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement scope=driver.findElement(By.id(""String_Node_Str""));
  String finalScope=scope.getText();
  if (!(finalScope.equals(""String_Node_Str"") || finalScope.equals(""String_Node_Str""))) {
    throw new Exception(""String_Node_Str"");
  }
}",0.9993605456676968
114940,"@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}","@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContextMgt.getContextTenant().getContextUser().getUserName(),gatewayContextMgt.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}",0.9901315789473684
114941,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void createTenantAndAPI() throws Exception {
  LoginPage login=new LoginPage(driver);
  login.loginAs(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword());
  TenantHomePage addNewTenantHome=new TenantHomePage(driver);
  String firstName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  String email=""String_Node_Str"";
  addNewTenantHome.addNewTenant(TEST_DATA_TENANT,firstName,lastName,TEST_DATA_TENANT_ADMIN_USER,TEST_DATA_TENANT_ADMIN_PASSWORD,email);
  TenantListpage tenantListpage=new TenantListpage(driver);
  tenantListpage.checkOnUplodedTenant(TEST_DATA_TENANT);
  publisherURL=getPublisherURL();
  HttpContext httpContext=TestUtil.login(TEST_DATA_TENANT_PUBLISHER,TEST_DATA_TENANT_ADMIN_PASSWORD,publisherURL);
  assertTrue(TestUtil.addAPI(TEST_DATA_TENANT_PUBLISHER,TEST_DATA_API_NAME,TEST_DATA_API_VERSION,httpContext,publisherURL));
  assertTrue(TestUtil.publishAPI(TEST_DATA_TENANT_PUBLISHER,TEST_DATA_API_NAME,TEST_DATA_API_VERSION,httpContext,publisherURL));
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void createTenantAndAPI() throws Exception {
  LoginPage login=new LoginPage(driver);
  login.loginAs(gatewayContextMgt.getContextTenant().getContextUser().getUserName(),gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  TenantHomePage addNewTenantHome=new TenantHomePage(driver);
  String firstName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  String email=""String_Node_Str"";
  addNewTenantHome.addNewTenant(TEST_DATA_TENANT,firstName,lastName,TEST_DATA_TENANT_ADMIN_USER,TEST_DATA_TENANT_ADMIN_PASSWORD,email);
  TenantListpage tenantListpage=new TenantListpage(driver);
  tenantListpage.checkOnUplodedTenant(TEST_DATA_TENANT);
  publisherURL=getPublisherURL();
  HttpContext httpContext=TestUtil.login(TEST_DATA_TENANT_PUBLISHER,TEST_DATA_TENANT_ADMIN_PASSWORD,publisherURL);
  assertTrue(TestUtil.addAPI(TEST_DATA_TENANT_PUBLISHER,TEST_DATA_API_NAME,TEST_DATA_API_VERSION,httpContext,publisherURL));
  assertTrue(TestUtil.publishAPI(TEST_DATA_TENANT_PUBLISHER,TEST_DATA_API_NAME,TEST_DATA_API_VERSION,httpContext,publisherURL));
}",0.9973544973544972
114942,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testPublishApiWithDeSelectEnvironment() throws Exception {
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_DESCRIPTION);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  WebElement checkBox=driver.findElement(By.cssSelector(""String_Node_Str""));
  if (checkBox.isSelected()) {
    checkBox.click();
  }
  driver.findElement(By.id(""String_Node_Str"")).click();
  Assert.assertTrue(!isAPIPublished(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testPublishApiWithDeSelectEnvironment() throws Exception {
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getUserName());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_DESCRIPTION);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  WebElement checkBox=driver.findElement(By.cssSelector(""String_Node_Str""));
  if (checkBox.isSelected()) {
    checkBox.click();
  }
  driver.findElement(By.id(""String_Node_Str"")).click();
  Assert.assertTrue(!isAPIPublished(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
}",0.9990036532713384
114943,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=false) public void testPublishApiWithOutEnvironmentTabSelection() throws Exception {
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_DESCRIPTION);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  Assert.assertTrue(isAPIPublished(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=false) public void testPublishApiWithOutEnvironmentTabSelection() throws Exception {
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getUserName());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_DESCRIPTION);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  Assert.assertTrue(isAPIPublished(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
}",0.9989539748953976
114944,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=false) public void testPublishApiWithEnvironmentTabSelection() throws Exception {
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_DESCRIPTION);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  WebElement checkBox=driver.findElement(By.cssSelector(""String_Node_Str""));
  if (!checkBox.isSelected()) {
    checkBox.click();
  }
  driver.findElement(By.id(""String_Node_Str"")).click();
  Assert.assertTrue(isAPIPublished(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=false) public void testPublishApiWithEnvironmentTabSelection() throws Exception {
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getUserName());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_DESCRIPTION);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  WebElement checkBox=driver.findElement(By.cssSelector(""String_Node_Str""));
  if (!checkBox.isSelected()) {
    checkBox.click();
  }
  driver.findElement(By.id(""String_Node_Str"")).click();
  Assert.assertTrue(isAPIPublished(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
}",0.9989771564950564
114945,"@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}","@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContextMgt.getContextTenant().getContextUser().getUserName(),gatewayContextMgt.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}",0.9901315789473684
114946,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testPublishApiWithOutEnvironmentTabSelection() throws Exception {
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_DESCRIPTION);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  Assert.assertEquals(driver.findElement(By.id(""String_Node_Str"")).getAttribute(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(driver.findElement(By.id(""String_Node_Str"")).getAttribute(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(driver.findElement(By.id(""String_Node_Str"")).getAttribute(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(driver.findElement(By.id(""String_Node_Str"")).getAttribute(""String_Node_Str""),""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testPublishApiWithOutEnvironmentTabSelection() throws Exception {
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getUserName());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_DESCRIPTION);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  Assert.assertEquals(driver.findElement(By.id(""String_Node_Str"")).getAttribute(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(driver.findElement(By.id(""String_Node_Str"")).getAttribute(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(driver.findElement(By.id(""String_Node_Str"")).getAttribute(""String_Node_Str""),""String_Node_Str"");
  Assert.assertEquals(driver.findElement(By.id(""String_Node_Str"")).getAttribute(""String_Node_Str""),""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
}",0.9992659652556888
114947,"@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}","@AfterClass(alwaysRun=true) public void tearDown() throws Exception {
  TestUtil.cleanUp(gatewayContextMgt.getContextTenant().getContextUser().getUserName(),gatewayContextMgt.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
  driver.quit();
}",0.9901315789473684
114948,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void createTenantAndAPI() throws Exception {
  WebDriverWait wait=new WebDriverWait(driver,60);
  driver.get(getLoginURL());
  LoginPage login=new LoginPage(driver);
  login.loginAs(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword());
  TenantHomePage addNewTenantHome=new TenantHomePage(driver);
  String firstName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  addNewTenantHome.addNewTenant(TEST_DATA_TENANT,firstName,lastName,TEST_DATA_TENANT_ADMIN_USER,TEST_DATA_TENANT_ADMIN_PASSWORD,TEST_DATA_TENANT_PUBLISHER);
  TenantListpage tenantListpage=new TenantListpage(driver);
  tenantListpage.checkOnUplodedTenant(TEST_DATA_TENANT);
  driver.get(publisherURL + ""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_TENANT_PUBLISHER);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_TENANT_ADMIN_PASSWORD);
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_NAME);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_NAME.toLowerCase());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_VERSION);
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_ICON_PATH);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void createTenantAndAPI() throws Exception {
  WebDriverWait wait=new WebDriverWait(driver,60);
  driver.get(getLoginURL());
  LoginPage login=new LoginPage(driver);
  login.loginAs(gatewayContextMgt.getContextTenant().getContextUser().getUserName(),gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  TenantHomePage addNewTenantHome=new TenantHomePage(driver);
  String firstName=""String_Node_Str"";
  String lastName=""String_Node_Str"";
  addNewTenantHome.addNewTenant(TEST_DATA_TENANT,firstName,lastName,TEST_DATA_TENANT_ADMIN_USER,TEST_DATA_TENANT_ADMIN_PASSWORD,TEST_DATA_TENANT_PUBLISHER);
  TenantListpage tenantListpage=new TenantListpage(driver);
  tenantListpage.checkOnUplodedTenant(TEST_DATA_TENANT);
  driver.get(publisherURL + ""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_TENANT_PUBLISHER);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_TENANT_ADMIN_PASSWORD);
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_NAME);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_NAME.toLowerCase());
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_API_VERSION);
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(TEST_DATA_ICON_PATH);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).click();
}",0.9990524320909664
114949,"protected String getAdminDashboardURL() throws Exception {
  return gatewayUrls.getWebAppURLHttps() + ""String_Node_Str"";
}","protected String getAdminDashboardURL() throws Exception {
  return publisherUrls.getWebAppURLHttps() + ""String_Node_Str"";
}",0.943089430894309
114950,"protected String getLoginURL() throws XPathExpressionException {
  return UrlGenerationUtil.getLoginURL(gatewayContext.getInstance());
}","protected String getLoginURL() throws XPathExpressionException {
  return UrlGenerationUtil.getLoginURL(publisherContext.getInstance());
}",0.948905109489051
114951,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"",dependsOnMethods={""String_Node_Str""}) public void testLogout() throws Exception {
  driver.get(getStoreURL() + ""String_Node_Str"" + SUPER_TENANT_DOMAIN_NAME);
  WebDriverWait wait=new WebDriverWait(driver,60);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement usernameEle=driver.findElement(By.id(""String_Node_Str""));
  usernameEle.sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement passwordEle=driver.findElement(By.id(""String_Node_Str""));
  passwordEle.sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.manage().timeouts().implicitlyWait(2,TimeUnit.SECONDS);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.navigate().to(getStoreURL() + ""String_Node_Str"" + TEST_DATA_API_NAME+ ""String_Node_Str""+ TEST_DATA_API_VERSION+ ""String_Node_Str""+ gatewayContext.getContextTenant().getContextUser().getUserName()+ ""String_Node_Str""+ SUPER_TENANT_DOMAIN_NAME);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(gatewayContext.getContextTenant().getContextUser().getUserName())));
  driver.findElement(By.linkText(gatewayContext.getContextTenant().getContextUser().getUserName())).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  assertFalse(driver.getPageSource().contains(""String_Node_Str""),""String_Node_Str"");
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"",dependsOnMethods={""String_Node_Str""}) public void testLogout() throws Exception {
  driver.get(getStoreURL() + ""String_Node_Str"" + SUPER_TENANT_DOMAIN_NAME);
  WebDriverWait wait=new WebDriverWait(driver,60);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement usernameEle=driver.findElement(By.id(""String_Node_Str""));
  usernameEle.sendKeys(storeContext.getContextTenant().getContextUser().getUserName());
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement passwordEle=driver.findElement(By.id(""String_Node_Str""));
  passwordEle.sendKeys(storeContext.getContextTenant().getContextUser().getPassword());
  driver.manage().timeouts().implicitlyWait(2,TimeUnit.SECONDS);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.navigate().to(getStoreURL() + ""String_Node_Str"" + TEST_DATA_API_NAME+ ""String_Node_Str""+ TEST_DATA_API_VERSION+ ""String_Node_Str""+ storeContext.getContextTenant().getContextUser().getUserName()+ ""String_Node_Str""+ SUPER_TENANT_DOMAIN_NAME);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(storeContext.getContextTenant().getContextUser().getUserName())));
  driver.findElement(By.linkText(storeContext.getContextTenant().getContextUser().getUserName())).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  assertFalse(driver.getPageSource().contains(""String_Node_Str""),""String_Node_Str"");
}",0.9838449111470112
114952,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testCreateAndPublishAPI() throws Exception {
  String loginURL=getPublisherURL();
  HttpContext httpContext=TestUtil.login(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword(),loginURL);
  assertTrue(TestUtil.addAPI(gatewayContext.getContextTenant().getContextUser().getUserName(),TEST_DATA_API_NAME,TEST_DATA_API_VERSION,httpContext,loginURL));
  assertTrue(TestUtil.publishAPI(gatewayContext.getContextTenant().getContextUser().getUserName(),TEST_DATA_API_NAME,TEST_DATA_API_VERSION,httpContext,loginURL));
  System.out.println(""String_Node_Str"");
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testCreateAndPublishAPI() throws Exception {
  String loginURL=getPublisherURL();
  HttpContext httpContext=TestUtil.login(publisherContext.getContextTenant().getContextUser().getUserName(),publisherContext.getContextTenant().getContextUser().getPassword(),loginURL);
  assertTrue(TestUtil.addAPI(publisherContext.getContextTenant().getContextUser().getUserName(),TEST_DATA_API_NAME,TEST_DATA_API_VERSION,httpContext,loginURL));
  assertTrue(TestUtil.publishAPI(publisherContext.getContextTenant().getContextUser().getUserName(),TEST_DATA_API_NAME,TEST_DATA_API_VERSION,httpContext,loginURL));
  System.out.println(""String_Node_Str"");
}",0.9546742209631728
114953,"@SetEnvironment(executionEnvironments={ExecutionEnvironment.PLATFORM}) @Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testVersionStats() throws Exception {
  driver.get(getPublisherURL());
  WebDriverWait wait=new WebDriverWait(driver,30);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement usernameEle=driver.findElement(By.id(""String_Node_Str""));
  usernameEle.sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement passwordEle=driver.findElement(By.id(""String_Node_Str""));
  passwordEle.sendKeys(""String_Node_Str"");
  driver.manage().timeouts().implicitlyWait(2,TimeUnit.SECONDS);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(""String_Node_Str"")));
  driver.navigate().to(getPublisherURL() + ""String_Node_Str"" + TEST_DATA_API_NAME+ ""String_Node_Str""+ TEST_DATA_API_VERSION+ ""String_Node_Str""+ gatewayContext.getContextTenant().getContextUser().getUserName());
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.manage().timeouts().implicitlyWait(6,TimeUnit.SECONDS);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  assertTrue(driver.findElement(By.xpath(""String_Node_Str"")).getText().contains(""String_Node_Str""));
  assertTrue(driver.findElement(By.xpath(""String_Node_Str"")).getText().contains(""String_Node_Str""));
}","@SetEnvironment(executionEnvironments={ExecutionEnvironment.PLATFORM}) @Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testVersionStats() throws Exception {
  driver.get(getPublisherURL());
  WebDriverWait wait=new WebDriverWait(driver,30);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement usernameEle=driver.findElement(By.id(""String_Node_Str""));
  usernameEle.sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement passwordEle=driver.findElement(By.id(""String_Node_Str""));
  passwordEle.sendKeys(""String_Node_Str"");
  driver.manage().timeouts().implicitlyWait(2,TimeUnit.SECONDS);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(""String_Node_Str"")));
  driver.navigate().to(getPublisherURL() + ""String_Node_Str"" + TEST_DATA_API_NAME+ ""String_Node_Str""+ TEST_DATA_API_VERSION+ ""String_Node_Str""+ publisherContext.getContextTenant().getContextUser().getUserName());
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  driver.manage().timeouts().implicitlyWait(6,TimeUnit.SECONDS);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  assertTrue(driver.findElement(By.xpath(""String_Node_Str"")).getText().contains(""String_Node_Str""));
  assertTrue(driver.findElement(By.xpath(""String_Node_Str"")).getText().contains(""String_Node_Str""));
}",0.995475113122172
114954,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=false) public void testAdminDashboardAnalyticsPage() throws Exception {
  AdminDashboardLoginPage adminDashboardLoginPage=new AdminDashboardLoginPage(driver);
  ConfigureAnalyticsPage configureAnalyticsPage=adminDashboardLoginPage.getConfigureAnalyticsPage(gatewayContext.getContextTenant().getContextUser().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword());
  String configSavedMessage=configureAnalyticsPage.addConfigurations(EVENT_RECEIVER_URL,EVENT_RECEIVER_USERNAME,EVENT_RECEIVER_PASSWORD,DATA_ANALYZER_URL,DATA_ANALYZER_USERNAME,DATA_ANALYZER_PASSWORD,STAT_DS_URL,STAT_DS_CLASS_NAME,STAT_DS_USERNAME,STAT_DS_PASSWORD);
  assertEquals(configSavedMessage,""String_Node_Str"");
  configureAnalyticsPage.logOut();
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"",enabled=false) public void testAdminDashboardAnalyticsPage() throws Exception {
  AdminDashboardLoginPage adminDashboardLoginPage=new AdminDashboardLoginPage(driver);
  ConfigureAnalyticsPage configureAnalyticsPage=adminDashboardLoginPage.getConfigureAnalyticsPage(gatewayContextMgt.getContextTenant().getContextUser().getUserName(),gatewayContextMgt.getContextTenant().getContextUser().getPassword());
  String configSavedMessage=configureAnalyticsPage.addConfigurations(EVENT_RECEIVER_URL,EVENT_RECEIVER_USERNAME,EVENT_RECEIVER_PASSWORD,DATA_ANALYZER_URL,DATA_ANALYZER_USERNAME,DATA_ANALYZER_PASSWORD,STAT_DS_URL,STAT_DS_CLASS_NAME,STAT_DS_USERNAME,STAT_DS_PASSWORD);
  assertEquals(configSavedMessage,""String_Node_Str"");
  configureAnalyticsPage.logOut();
}",0.9963325183374084
114955,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  super.cleanUp(gatewayContext.getContextTenant().getTenantAdmin().getUserName(),gatewayContext.getContextTenant().getContextUser().getPassword(),storeUrls.getWebAppURLHttp(),publisherUrls.getWebAppURLHttp());
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  super.cleanUp();
}",0.4823848238482385
114956,"@BeforeClass(alwaysRun=true) public void setEnvironment(){
  try {
    super.init();
    publisherURLHttp=publisherUrls.getWebAppURLHttp();
    TenantManagementServiceClient tenantManagementServiceClient=new TenantManagementServiceClient(gatewayContext.getContextUrls().getBackEndUrl(),createSession(gatewayContext));
    tenantManagementServiceClient.addTenant(tenantDomain,gatewayContext.getContextTenant().getTenantAdmin().getPassword(),gatewayContext.getContextTenant().getTenantAdmin().getUserName(),""String_Node_Str"");
  }
 catch (  XPathExpressionException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  APIManagerIntegrationTestException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  RemoteException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  TenantMgtAdminServiceExceptionException e) {
    assertTrue(false,""String_Node_Str"");
  }
}","@BeforeClass(alwaysRun=true) public void setEnvironment(){
  try {
    super.init();
    publisherURLHttp=publisherUrls.getWebAppURLHttp();
    TenantManagementServiceClient tenantManagementServiceClient=new TenantManagementServiceClient(keyManagerContext.getContextUrls().getBackEndUrl(),createSession(keyManagerContext));
    tenantManagementServiceClient.addTenant(tenantDomain,keyManagerContext.getContextTenant().getTenantAdmin().getPassword(),keyManagerContext.getContextTenant().getTenantAdmin().getUserName(),""String_Node_Str"");
  }
 catch (  XPathExpressionException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  APIManagerIntegrationTestException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  RemoteException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  TenantMgtAdminServiceExceptionException e) {
    assertTrue(false,""String_Node_Str"");
  }
}",0.8233970753655793
114957,"/** 
 * This method is used to get the number of APIs to be displayed in each page
 * @param storeUrl url of the API store
 * @param loginResponseCookie login response
 * @param start starting index of the API list
 * @param offset offset from the starting index of the API list
 * @return number of APIs in each page
 */
private int getPaginationElementsCount(String storeUrl,String loginResponseCookie,int start,int offset){
  String paginationUrl=storeUrl + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tenantDomain+ ""String_Node_Str""+ Integer.toString(start)+ ""String_Node_Str""+ Integer.toString(offset);
  int numberOfAPIsInCurrentPage=0;
  Map<String,String> paginationRequestHeaders=new HashMap<String,String>();
  paginationRequestHeaders.put(""String_Node_Str"",loginResponseCookie);
  HttpResponse paginationFetchResponse=null;
  try {
    paginationFetchResponse=HttpRequestUtil.doGet(paginationUrl,paginationRequestHeaders);
  }
 catch (  IOException e) {
    assertTrue(false,""String_Node_Str"");
  }
  String dataText=""String_Node_Str"";
  if (paginationFetchResponse != null) {
    dataText=paginationFetchResponse.getData();
  }
  JsonElement paginationDataElement=new JsonParser().parse(dataText);
  JsonObject paginationDataObject=paginationDataElement.getAsJsonObject();
  if (""String_Node_Str"".equals(paginationDataObject.get(""String_Node_Str"").toString())) {
    numberOfAPIsInCurrentPage=paginationDataObject.get(""String_Node_Str"").getAsJsonArray().size();
  }
  return numberOfAPIsInCurrentPage;
}","/** 
 * This method is used to get the number of APIs to be displayed in each page
 * @param storeUrl url of the API store
 * @param loginResponseCookie login response
 * @param start starting index of the API list
 * @param offset offset from the starting index of the API list
 * @return number of APIs in each page
 */
private int getPaginationElementsCount(String storeUrl,String loginResponseCookie,int start,int offset) throws JSONException {
  String paginationUrl=storeUrl + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ tenantDomain+ ""String_Node_Str""+ Integer.toString(start)+ ""String_Node_Str""+ Integer.toString(offset);
  int numberOfAPIsInCurrentPage=0;
  Map<String,String> paginationRequestHeaders=new HashMap<String,String>();
  paginationRequestHeaders.put(""String_Node_Str"",loginResponseCookie);
  HttpResponse paginationFetchResponse=null;
  try {
    paginationFetchResponse=HttpRequestUtil.doGet(paginationUrl,paginationRequestHeaders);
  }
 catch (  IOException e) {
    assertTrue(false,""String_Node_Str"");
  }
  String dataText=""String_Node_Str"";
  if (paginationFetchResponse != null) {
    dataText=paginationFetchResponse.getData();
  }
  JSONObject paginationDataObject=new JSONObject(dataText);
  if (""String_Node_Str"".equals(paginationDataObject.get(""String_Node_Str"").toString())) {
    numberOfAPIsInCurrentPage=paginationDataObject.getJSONArray(""String_Node_Str"").length();
  }
  return numberOfAPIsInCurrentPage;
}",0.9340916694546672
114958,"@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testPagination(){
  int numberOfAPIs=24;
  boolean isLoginSuccess=false;
  boolean isPaginationCorrect=false;
  String storeURLHttp=storeUrls.getWebAppURLHttp();
  APIStoreRestClient apiStore=new APIStoreRestClient(storeURLHttp);
  HttpResponse storeLoginResponse=null;
  String successResponse=""String_Node_Str"";
  try {
    for (int i=0; i < numberOfAPIs; i++) {
      String APIName=""String_Node_Str"" + Integer.toString(i);
      String APIContext=""String_Node_Str"" + Integer.toString(i);
      String tags=""String_Node_Str"";
      String url=""String_Node_Str"";
      String description=""String_Node_Str"";
      String providerName=publisherContext.getContextTenant().getTenantAdmin().getUserName() + ""String_Node_Str"" + tenantDomain;
      String APIVersion=""String_Node_Str"";
      APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
      apiPublisher.login(publisherContext.getContextTenant().getTenantAdmin().getUserName() + ""String_Node_Str"" + tenantDomain,publisherContext.getContextTenant().getTenantAdmin().getPassword());
      APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
      apiRequest.setTags(tags);
      apiRequest.setDescription(description);
      apiRequest.setVersion(APIVersion);
      apiRequest.setSandbox(url);
      apiRequest.setResourceMethod(""String_Node_Str"");
      apiRequest.setProvider(providerName);
      apiPublisher.addAPI(apiRequest);
      APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
      apiPublisher.changeAPILifeCycleStatus(updateRequest);
    }
    Thread.sleep(60000);
    storeLoginResponse=apiStore.login(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  XPathExpressionException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  APIManagerIntegrationTestException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  MalformedURLException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  InterruptedException e) {
    assertTrue(false,""String_Node_Str"");
  }
  String loginResponseCookie=null;
  if (storeLoginResponse != null) {
    loginResponseCookie=storeLoginResponse.getHeaders().get(""String_Node_Str"");
    if (successResponse.equals(storeLoginResponse.getData())) {
      isLoginSuccess=true;
    }
  }
  if (isLoginSuccess && loginResponseCookie != null) {
    int offset=10;
    int countInFirstPage=getPaginationElementsCount(storeURLHttp,loginResponseCookie,0,offset);
    int countInSecondPage=getPaginationElementsCount(storeURLHttp,loginResponseCookie,10,offset);
    int countInThirdPage=getPaginationElementsCount(storeURLHttp,loginResponseCookie,20,offset);
    if (countInFirstPage == 10 && countInSecondPage == 10 && countInThirdPage == 4) {
      isPaginationCorrect=true;
    }
  }
  assertTrue(isPaginationCorrect,""String_Node_Str"");
}","@Test(groups={""String_Node_Str""},description=""String_Node_Str"") public void testPagination() throws Exception {
  int numberOfAPIs=24;
  boolean isLoginSuccess=false;
  boolean isPaginationCorrect=false;
  String storeURLHttp=storeUrls.getWebAppURLHttp();
  APIStoreRestClient apiStore=new APIStoreRestClient(storeURLHttp);
  HttpResponse storeLoginResponse=null;
  String successResponse=""String_Node_Str"";
  try {
    for (int i=0; i < numberOfAPIs; i++) {
      String APIName=""String_Node_Str"" + Integer.toString(i);
      String APIContext=""String_Node_Str"" + Integer.toString(i);
      String tags=""String_Node_Str"";
      String url=""String_Node_Str"";
      String description=""String_Node_Str"";
      String providerName=publisherContext.getContextTenant().getTenantAdmin().getUserName() + ""String_Node_Str"" + tenantDomain;
      String APIVersion=""String_Node_Str"";
      APIPublisherRestClient apiPublisher=new APIPublisherRestClient(publisherURLHttp);
      apiPublisher.login(publisherContext.getContextTenant().getTenantAdmin().getUserName() + ""String_Node_Str"" + tenantDomain,publisherContext.getContextTenant().getTenantAdmin().getPassword());
      APIRequest apiRequest=new APIRequest(APIName,APIContext,new URL(url));
      apiRequest.setTags(tags);
      apiRequest.setDescription(description);
      apiRequest.setVersion(APIVersion);
      apiRequest.setSandbox(url);
      apiRequest.setResourceMethod(""String_Node_Str"");
      apiRequest.setProvider(providerName);
      apiPublisher.addAPI(apiRequest);
      APILifeCycleStateRequest updateRequest=new APILifeCycleStateRequest(APIName,providerName,APILifeCycleState.PUBLISHED);
      apiPublisher.changeAPILifeCycleStatus(updateRequest);
    }
    Thread.sleep(60000);
    storeLoginResponse=apiStore.login(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  XPathExpressionException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  APIManagerIntegrationTestException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  MalformedURLException e) {
    assertTrue(false,""String_Node_Str"");
  }
catch (  InterruptedException e) {
    assertTrue(false,""String_Node_Str"");
  }
  String loginResponseCookie=null;
  if (storeLoginResponse != null) {
    loginResponseCookie=storeLoginResponse.getHeaders().get(""String_Node_Str"");
    if (successResponse.equals(storeLoginResponse.getData())) {
      isLoginSuccess=true;
    }
  }
  if (isLoginSuccess && loginResponseCookie != null) {
    int offset=10;
    int countInFirstPage=getPaginationElementsCount(storeURLHttp,loginResponseCookie,0,offset);
    int countInSecondPage=getPaginationElementsCount(storeURLHttp,loginResponseCookie,10,offset);
    int countInThirdPage=getPaginationElementsCount(storeURLHttp,loginResponseCookie,20,offset);
    if (countInFirstPage == 10 && countInSecondPage == 10 && countInThirdPage == 4) {
      isPaginationCorrect=true;
    }
  }
  assertTrue(isPaginationCorrect,""String_Node_Str"");
}",0.9969522519471724
114959,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  super.cleanup();
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  super.cleanUp();
}",0.9887640449438202
114960,"@SetEnvironment(executionEnvironments={ExecutionEnvironment.ALL}) @org.testng.annotations.Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testHeaderSplitting() throws Exception {
  String apiInvocationUrl=gatewayUrls.getWebAppURLNhttp() + ""String_Node_Str"";
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  HttpResponse httpResponse=doGet(apiInvocationUrl,headers);
  if (httpResponse.getHeaders() != null) {
    Assert.assertNull(httpResponse.getHeaders().get(""String_Node_Str""),""String_Node_Str"");
  }
 else {
    Assert.assertFalse(true,""String_Node_Str"");
  }
}","@SetEnvironment(executionEnvironments={ExecutionEnvironment.ALL}) @org.testng.annotations.Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testHeaderSplitting() throws Exception {
  String apiInvocationUrl=getAPIInvocationURLHttp(""String_Node_Str"");
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",""String_Node_Str"");
  HttpResponse httpResponse=doGet(apiInvocationUrl,headers);
  if (httpResponse.getHeaders() != null) {
    Assert.assertNull(httpResponse.getHeaders().get(""String_Node_Str""),""String_Node_Str"");
  }
 else {
    Assert.assertFalse(true,""String_Node_Str"");
  }
}",0.9361046959199384
114961,"@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  if (serverConfigurationManager != null) {
    serverConfigurationManager.restoreToLastConfiguration();
  }
  super.cleanup();
}","@AfterClass(alwaysRun=true) public void destroy() throws Exception {
  if (serverConfigurationManager != null) {
    serverConfigurationManager.restoreToLastConfiguration();
  }
  super.cleanUp();
}",0.9949494949494948
114962,"@BeforeClass(alwaysRun=true) public void testChangeTransportMechanism() throws Exception {
  init();
  serverConfigurationManager=new ServerConfigurationManager(apimContext);
  String carbonHome=System.getProperty(ServerConstants.CARBON_HOME);
  File axis2xmlFile=new File(carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File sourceAxis2xmlFile=new File(TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!axis2xmlFile.exists() || !sourceAxis2xmlFile.exists()) {
    throw new IOException(""String_Node_Str"");
  }
  serverConfigurationManager.applyConfiguration(sourceAxis2xmlFile,axis2xmlFile);
}","@BeforeClass(alwaysRun=true) public void testChangeTransportMechanism() throws Exception {
  init();
  serverConfigurationManager=new ServerConfigurationManager(gatewayContextWrk);
  String carbonHome=System.getProperty(ServerConstants.CARBON_HOME);
  File axis2xmlFile=new File(carbonHome + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File sourceAxis2xmlFile=new File(TestConfigurationProvider.getResourceLocation() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!axis2xmlFile.exists() || !sourceAxis2xmlFile.exists()) {
    throw new IOException(""String_Node_Str"");
  }
  serverConfigurationManager.applyConfiguration(sourceAxis2xmlFile,axis2xmlFile);
}",0.983625730994152
114963,"public static void main(String[] args){
}","public static void main(String[] args){
  System.out.println(""String_Node_Str"");
  CommandHandler.setInputs(args);
  _authenticator=new NegotiateAuthenticator();
  String securityPackage=""String_Node_Str"";
  boolean autoGenerate=CommandHandler.isTokenAutoGenerated();
  String clientToken=""String_Node_Str"";
  if (autoGenerate) {
    IWindowsCredentialsHandle clientCredentials=null;
    WindowsSecurityContextImpl clientContext=null;
    clientCredentials=WindowsCredentialsHandleImpl.getCurrent(securityPackage);
    clientCredentials.initialize();
    clientContext=new WindowsSecurityContextImpl();
    clientContext.setPrincipalName(WindowsAccountImpl.getCurrentUsername());
    System.out.println(""String_Node_Str"" + WindowsAccountImpl.getCurrentUsername());
    clientContext.setCredentialsHandle(clientCredentials.getHandle());
    clientContext.setSecurityPackage(securityPackage);
    clientContext.initialize(null,null,WindowsAccountImpl.getCurrentUsername());
    clientToken=Base64.encode(clientContext.getToken());
    System.out.println(""String_Node_Str"" + clientToken);
  }
 else {
    clientToken=CommandHandler.getNTLMToken();
    System.out.println(""String_Node_Str"" + clientToken);
  }
  try {
    Thread.sleep(4000);
    HttpClient httpclient=new DefaultHttpClient();
    byte[] userKey=(CommandHandler.getConsumerKey() + ""String_Node_Str"" + CommandHandler.getConsumerSecret()).getBytes();
    String encoding=Base64Utils.encode(userKey);
    HttpPost httppost=new HttpPost(CommandHandler.getTokenendpoint());
    httppost.setHeader(""String_Node_Str"",""String_Node_Str"" + encoding);
    List<NameValuePair> paramVals=new ArrayList<NameValuePair>();
    paramVals.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    paramVals.add(new BasicNameValuePair(""String_Node_Str"",clientToken));
    System.out.println(""String_Node_Str"" + httppost.getRequestLine());
    HttpResponse response=null;
    httppost.setEntity(new UrlEncodedFormEntity(paramVals,""String_Node_Str""));
    response=httpclient.execute(httppost);
    HttpEntity entity=response.getEntity();
    String responseString=EntityUtils.toString(entity,""String_Node_Str"");
    System.out.println(responseString);
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
 catch (  IOException e) {
    System.out.print(""String_Node_Str"" + e.getMessage());
  }
catch (  InterruptedException e) {
    System.out.print(""String_Node_Str"" + e.getMessage());
  }
}",0.0327868852459016
114964,"@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testPublishApiWithScopesDefined() throws Exception {
  driver.get(publisherURL + ""String_Node_Str"");
  WebElement userNameField=driver.findElement(By.id(""String_Node_Str""));
  WebElement passwordField=driver.findElement(By.id(""String_Node_Str""));
  userNameField.sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  passwordField.sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(15000);
  driver.get(getStoreURL() + ""String_Node_Str"" + SUPER_TENANT_DOMAIN_NAME);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement usernameEle=driver.findElement(By.id(""String_Node_Str""));
  usernameEle.sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement passwordEle=driver.findElement(By.id(""String_Node_Str""));
  passwordEle.sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(5000);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  long loopMaxTime=APIMTestConstants.MAX_LOOP_WAIT_TIME_MILLISECONDS;
  long startTime=System.currentTimeMillis();
  long nowTime=startTime;
  while ((!driver.getPageSource().contains(""String_Node_Str"")) && (nowTime - startTime) < loopMaxTime) {
    driver.findElement(By.linkText(""String_Node_Str"")).click();
    Thread.sleep(1000);
    nowTime=System.currentTimeMillis();
  }
  driver.findElement(By.xpath(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  Thread.sleep(1000);
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  new Select(driver.findElement(By.id(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  threadWait(5000);
  WebElement scope=driver.findElement(By.id(""String_Node_Str""));
  String finalScope=scope.getText();
  if (!(finalScope.equals(""String_Node_Str"") || finalScope.equals(""String_Node_Str""))) {
    throw new Exception(""String_Node_Str"");
  }
}","@Test(groups=""String_Node_Str"",description=""String_Node_Str"") public void testPublishApiWithScopesDefined() throws Exception {
  driver.get(publisherURL + ""String_Node_Str"");
  WebElement userNameField=driver.findElement(By.id(""String_Node_Str""));
  WebElement passwordField=driver.findElement(By.id(""String_Node_Str""));
  userNameField.sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  passwordField.sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(API_URL);
  driver.findElement(By.id(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(""String_Node_Str"")));
  driver.findElement(By.cssSelector(""String_Node_Str"")).click();
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defineScope(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  new Select(driver.findElement(By.cssSelector(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(15000);
  driver.get(getStoreURL() + ""String_Node_Str"" + SUPER_TENANT_DOMAIN_NAME);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement usernameEle=driver.findElement(By.id(""String_Node_Str""));
  usernameEle.sendKeys(gatewayContext.getContextTenant().getContextUser().getUserName());
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(""String_Node_Str"")));
  WebElement passwordEle=driver.findElement(By.id(""String_Node_Str""));
  passwordEle.sendKeys(gatewayContext.getContextTenant().getContextUser().getPassword());
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).clear();
  driver.findElement(By.id(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(5000);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  long loopMaxTime=APIMTestConstants.MAX_LOOP_WAIT_TIME_MILLISECONDS;
  long startTime=System.currentTimeMillis();
  long nowTime=startTime;
  while ((!driver.getPageSource().contains(""String_Node_Str"")) && (nowTime - startTime) < loopMaxTime) {
    driver.findElement(By.linkText(""String_Node_Str"")).click();
    Thread.sleep(1000);
    nowTime=System.currentTimeMillis();
  }
  driver.findElement(By.xpath(""String_Node_Str"")).sendKeys(""String_Node_Str"");
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  Thread.sleep(1000);
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  new Select(driver.findElement(By.id(""String_Node_Str""))).selectByVisibleText(""String_Node_Str"");
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(""String_Node_Str"")));
  driver.findElement(By.linkText(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.id(""String_Node_Str"")).click();
  threadWait(1000);
  driver.findElement(By.xpath(""String_Node_Str"")).click();
  threadWait(5000);
  WebElement scope=driver.findElement(By.id(""String_Node_Str""));
  String finalScope=scope.getText();
  if (!(finalScope.equals(""String_Node_Str"") || finalScope.equals(""String_Node_Str""))) {
    throw new Exception(""String_Node_Str"");
  }
}",0.99883842490417
114965,"/** 
 * generate request params to send in http request, with given action
 * @param actionName - Request action name
 * @return - request params
 */
public String generateRequestParameters(String actionName){
  parameterMap.clear();
  setAction();
  init();
  String requestParams=ACTION_PARAMETER_VALUE + ""String_Node_Str"" + actionName;
  for (  String key : (Iterable<String>)parameterMap.keySet()) {
    requestParams=requestParams + ""String_Node_Str"" + key+ ""String_Node_Str""+ parameterMap.get(key);
  }
  return requestParams;
}","/** 
 * generate request params to send in http request, with given action
 * @param actionName - Request action name
 * @return - request params
 */
public String generateRequestParameters(String actionName){
  parameterMap.clear();
  setAction();
  init();
  String requestParams=ACTION_PARAMETER_VALUE + ""String_Node_Str"" + actionName;
  StringBuilder bufferAppender=new StringBuilder();
  bufferAppender.append(requestParams);
  for (  Object o : parameterMap.keySet()) {
    String key=(String)o;
    bufferAppender.append(""String_Node_Str"");
    bufferAppender.append(key);
    bufferAppender.append(""String_Node_Str"");
    bufferAppender.append(parameterMap.get(key));
  }
  return bufferAppender.toString();
}",0.6778577138289369
114966,"/** 
 * Generate user access key
 * @param consumeKey       - consumer  key of user
 * @param consumerSecret   - consumer secret key
 * @param messageBody      - message body
 * @param tokenEndpointURL - token endpoint url
 * @return - http response of generate access token api call
 * @throws APIManagerIntegrationTestException - throws if generating APIM access token fails
 */
public HttpResponse generateUserAccessKey(String consumeKey,String consumerSecret,String messageBody,URL tokenEndpointURL) throws APIManagerIntegrationTestException {
  try {
    checkAuthentication();
    Map<String,String> authenticationRequestHeaders=new HashMap<String,String>();
    String basicAuthHeader=consumeKey + ""String_Node_Str"" + consumerSecret;
    byte[] encodedBytes=Base64.encodeBase64(basicAuthHeader.getBytes());
    authenticationRequestHeaders.put(""String_Node_Str"",""String_Node_Str"");
    authenticationRequestHeaders.put(""String_Node_Str"",""String_Node_Str"" + new String(encodedBytes));
    return HttpRequestUtil.doPost(tokenEndpointURL,messageBody,authenticationRequestHeaders);
  }
 catch (  Exception e) {
    throw new APIManagerIntegrationTestException(""String_Node_Str"",e);
  }
}","/** 
 * Generate user access key
 * @param consumeKey       - consumer  key of user
 * @param consumerSecret   - consumer secret key
 * @param messageBody      - message body
 * @param tokenEndpointURL - token endpoint url
 * @return - http response of generate access token api call
 * @throws APIManagerIntegrationTestException - throws if generating APIM access token fails
 */
public HttpResponse generateUserAccessKey(String consumeKey,String consumerSecret,String messageBody,URL tokenEndpointURL) throws APIManagerIntegrationTestException {
  try {
    checkAuthentication();
    Map<String,String> authenticationRequestHeaders=new HashMap<String,String>();
    String basicAuthHeader=consumeKey + ""String_Node_Str"" + consumerSecret;
    byte[] encodedBytes=Base64.encodeBase64(basicAuthHeader.getBytes(""String_Node_Str""));
    authenticationRequestHeaders.put(""String_Node_Str"",""String_Node_Str"");
    authenticationRequestHeaders.put(""String_Node_Str"",""String_Node_Str"" + new String(encodedBytes,""String_Node_Str""));
    return HttpRequestUtil.doPost(tokenEndpointURL,messageBody,authenticationRequestHeaders);
  }
 catch (  Exception e) {
    throw new APIManagerIntegrationTestException(""String_Node_Str"",e);
  }
}",0.9855072463768116
114967,"public static String getDecodedJWT(String serverMessage){
  String[] headerArray=serverMessage.split(""String_Node_Str"");
  String[] jwtEncodedArray=headerArray[1].trim().split(""String_Node_Str"");
  String[] jwtTokenArray=jwtEncodedArray[1].split(Pattern.quote(""String_Node_Str""));
  byte[] jwtByteArray=Base64.decodeBase64(jwtTokenArray[1].getBytes());
  return new String(jwtByteArray);
}","public static String getDecodedJWT(String serverMessage) throws UnsupportedEncodingException {
  String[] headerArray=serverMessage.split(""String_Node_Str"");
  String[] jwtEncodedArray=headerArray[1].trim().split(""String_Node_Str"");
  String[] jwtTokenArray=jwtEncodedArray[1].split(Pattern.quote(""String_Node_Str""));
  byte[] jwtByteArray=Base64.decodeBase64(jwtTokenArray[1].getBytes(""String_Node_Str""));
  return new String(jwtByteArray,""String_Node_Str"");
}",0.9152941176470588
114968,"public static void sendGetRequest(String url,String accessToken) throws XPathExpressionException, IOException {
  HttpResponse httpResponse;
  URL urlAPI=new URL(url);
  HttpURLConnection conn=(HttpURLConnection)urlAPI.openConnection();
  conn.setRequestMethod(""String_Node_Str"");
  conn.setDoOutput(true);
  conn.setReadTimeout(10000);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + accessToken);
  conn.connect();
  StringBuilder sb=new StringBuilder();
  BufferedReader rd=null;
  try {
    rd=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    String line;
    while ((line=rd.readLine()) != null) {
      sb.append(line);
    }
    httpResponse=new HttpResponse(sb.toString(),conn.getResponseCode());
    httpResponse.setResponseMessage(conn.getResponseMessage());
  }
 catch (  IOException ignored) {
  }
 finally {
    if (rd != null) {
      rd.close();
    }
  }
}","public static void sendGetRequest(String url,String accessToken) throws XPathExpressionException, IOException {
  HttpResponse httpResponse;
  URL urlAPI=new URL(url);
  HttpURLConnection conn=(HttpURLConnection)urlAPI.openConnection();
  conn.setRequestMethod(""String_Node_Str"");
  conn.setDoOutput(true);
  conn.setReadTimeout(10000);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + accessToken);
  conn.connect();
  StringBuilder sb=new StringBuilder();
  BufferedReader rd=null;
  try {
    rd=new BufferedReader(new InputStreamReader(conn.getInputStream(),""String_Node_Str""));
    String line;
    while ((line=rd.readLine()) != null) {
      sb.append(line);
    }
    httpResponse=new HttpResponse(sb.toString(),conn.getResponseCode());
    httpResponse.setResponseMessage(conn.getResponseMessage());
  }
 catch (  IOException ignored) {
  }
 finally {
    if (rd != null) {
      rd.close();
    }
  }
}",0.9901960784313726
114969,"/** 
 * update synapse config to server
 * @param synapseConfig     - config to upload
 * @param automationContext - automation context of the server instance
 * @param sessionCookie     -  logged in session cookie
 * @throws APIManagerIntegrationTestException - If synapse config update fails
 */
protected void updateSynapseConfiguration(OMElement synapseConfig,AutomationContext automationContext,String sessionCookie) throws APIManagerIntegrationTestException {
  if (synapseConfiguration == null) {
    synapseConfiguration=synapseConfig;
  }
 else {
    Iterator<OMElement> itr=synapseConfig.cloneOMElement().getChildElements();
    while (itr.hasNext()) {
      synapseConfiguration.addChild(itr.next());
    }
  }
  try {
    apimTestCaseUtils.updateAPIMConfiguration(synapseConfig,automationContext.getContextUrls().getBackEndUrl(),sessionCookie);
    if (automationContext.getProductGroup().isClusterEnabled()) {
      long deploymentDelay=Long.parseLong(automationContext.getConfigurationValue(""String_Node_Str""));
      Thread.sleep(deploymentDelay);
      Iterator<OMElement> proxies=synapseConfig.getChildrenWithLocalName(""String_Node_Str"");
      while (proxies.hasNext()) {
        String proxy=proxies.next().getAttributeValue(new QName(""String_Node_Str""));
        assertTrue(isProxyWSDlExist(getProxyServiceURLHttp(proxy),deploymentDelay),""String_Node_Str"");
        assertTrue(isProxyWSDlExist(getProxyServiceURLHttp(proxy),deploymentDelay),""String_Node_Str"");
        assertTrue(isProxyWSDlExist(getProxyServiceURLHttp(proxy),deploymentDelay),""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new APIManagerIntegrationTestException(""String_Node_Str"",e);
  }
}","/** 
 * update synapse config to server
 * @param synapseConfig     - config to upload
 * @param automationContext - automation context of the server instance
 * @param sessionCookie     -  logged in session cookie
 * @throws APIManagerIntegrationTestException - If synapse config update fails
 */
protected void updateSynapseConfiguration(OMElement synapseConfig,AutomationContext automationContext,String sessionCookie) throws APIManagerIntegrationTestException {
  if (synapseConfiguration == null) {
    synapseConfiguration=synapseConfig;
  }
 else {
    Iterator<OMElement> itr=synapseConfig.cloneOMElement().getChildElements();
    while (itr.hasNext()) {
      synapseConfiguration.addChild(itr.next());
    }
  }
  try {
    apimTestCaseUtils.updateSynapseConfiguration(synapseConfig,automationContext.getContextUrls().getBackEndUrl(),sessionCookie);
    if (automationContext.getProductGroup().isClusterEnabled()) {
      long deploymentDelay=Long.parseLong(automationContext.getConfigurationValue(""String_Node_Str""));
      Thread.sleep(deploymentDelay);
      Iterator<OMElement> proxies=synapseConfig.getChildrenWithLocalName(""String_Node_Str"");
      while (proxies.hasNext()) {
        String proxy=proxies.next().getAttributeValue(new QName(""String_Node_Str""));
        assertTrue(isProxyWSDlExist(getProxyServiceURLHttp(proxy),deploymentDelay),""String_Node_Str"");
        assertTrue(isProxyWSDlExist(getProxyServiceURLHttp(proxy),deploymentDelay),""String_Node_Str"");
        assertTrue(isProxyWSDlExist(getProxyServiceURLHttp(proxy),deploymentDelay),""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw new APIManagerIntegrationTestException(""String_Node_Str"",e);
  }
}",0.4533180120654984
114970,"@Override public LayoutInflater getLayoutInflater(Bundle savedInstanceState){
  return mImpl.getLayoutInflater(savedInstanceState);
}","@Override public LayoutInflater getLayoutInflater(Bundle savedInstanceState){
  return mImpl.getLayoutInflater();
}",0.9274193548387096
114971,"@Override public LayoutInflater getLayoutInflater(Bundle savedInstanceState){
  return mImpl.getLayoutInflater(savedInstanceState);
}","@Override public LayoutInflater getLayoutInflater(Bundle savedInstanceState){
  return mImpl.getLayoutInflater();
}",0.9274193548387096
114972,"void restoreAllState(Parcelable state){
  if (state != null) {
    FragmentMasterState fms=(FragmentMasterState)state;
    mFragments.clear();
    Bundle fragments=fms.mFragments;
    if (fragments != null) {
      Iterable<String> keys=fragments.keySet();
      for (      String key : keys) {
        if (key.startsWith(""String_Node_Str"")) {
          int index=Integer.parseInt(key.substring(1));
          MasterFragment f=(MasterFragment)mFragmentManager.getFragment(fragments,key);
          if (f != null) {
            while (mFragments.size() <= index) {
              mFragments.add(null);
            }
            f.setMenuVisibility(false);
            mFragments.set(index,f);
          }
 else {
            Log.w(TAG,""String_Node_Str"" + key);
          }
        }
      }
    }
    setSlideEnable(fms.mIsSlideEnable);
  }
}","void restoreAllState(Parcelable state){
  if (state != null) {
    FragmentMasterState fms=(FragmentMasterState)state;
    mFragments.clear();
    Bundle fragments=fms.mFragments;
    if (fragments != null) {
      Iterable<String> keys=fragments.keySet();
      for (      String key : keys) {
        if (key.startsWith(""String_Node_Str"")) {
          int index=Integer.parseInt(key.substring(1));
          MasterFragment f=(MasterFragment)mFragmentManager.getFragment(fragments,key);
          if (f != null) {
            while (mFragments.size() <= index) {
              mFragments.add(null);
            }
            f.setMenuVisibility(false);
            mFragments.set(index,f);
          }
 else {
            Log.w(TAG,""String_Node_Str"" + key);
          }
        }
      }
    }
    setSlideEnable(fms.mIsSlideEnable);
    mHomeFragmentApplied=fms.mHomeFragmemtApplied;
  }
}",0.9705372616984402
114973,"Parcelable saveAllState(){
  FragmentMasterState state=new FragmentMasterState();
  Bundle fragments=null;
  for (int i=0; i < mFragments.size(); i++) {
    Fragment f=mFragments.get(i);
    if (f != null) {
      if (fragments == null) {
        fragments=new Bundle();
      }
      String key=""String_Node_Str"" + i;
      mFragmentManager.putFragment(fragments,key,f);
    }
  }
  state.mFragments=fragments;
  state.mIsSlideEnable=mIsSlideEnable;
  return state;
}","Parcelable saveAllState(){
  FragmentMasterState state=new FragmentMasterState();
  Bundle fragments=null;
  for (int i=0; i < mFragments.size(); i++) {
    Fragment f=mFragments.get(i);
    if (f != null) {
      if (fragments == null) {
        fragments=new Bundle();
      }
      String key=""String_Node_Str"" + i;
      mFragmentManager.putFragment(fragments,key,f);
    }
  }
  state.mFragments=fragments;
  state.mIsSlideEnable=mIsSlideEnable;
  state.mHomeFragmemtApplied=mHomeFragmentApplied;
  return state;
}",0.9483282674772036
114974,"public FragmentMasterState(Parcel in){
  mFragments=in.readBundle();
  mIsSlideEnable=in.readInt() == 0;
}","public FragmentMasterState(Parcel in){
  mFragments=in.readBundle();
  mIsSlideEnable=in.readInt() == 0;
  mHomeFragmemtApplied=in.readInt() == 0;
}",0.8346456692913385
114975,"public final void install(int containerResID,Request homeRequest,boolean sticky){
  if (isInstalled()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else {
    mContainerResID=containerResID;
    checkInstallProperties();
    performInstall(mContainer);
    mIsInstalled=true;
    if (homeRequest != null) {
      mSticky=sticky;
      if (getFragments().size() == 0) {
        startFragmentForResult(null,homeRequest,-1);
      }
    }
  }
}","public final void install(int containerResID,Request homeRequest,boolean sticky){
  if (isInstalled()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else {
    mContainerResID=containerResID;
    checkInstallProperties();
    performInstall(mContainer);
    mIsInstalled=true;
    if (homeRequest != null) {
      applyHomeFragment(homeRequest,sticky);
    }
  }
}",0.8261904761904761
114976,"@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeBundle(mFragments);
  dest.writeInt(mIsSlideEnable ? 0 : 1);
}","@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeBundle(mFragments);
  dest.writeInt(mIsSlideEnable ? 0 : 1);
  dest.writeInt(mHomeFragmemtApplied ? 0 : 1);
}",0.8507936507936508
114977,"final boolean dispatchKeyEventToActivity(KeyEvent event){
  final View decor=mActivity.getWindow().getDecorView();
  return KeyEventCompat.dispatch(event,mActivity,decor != null ? KeyEventCompat.getKeyDispatcherState(decor) : null,mActivity);
}","final boolean dispatchKeyEventToActivity(KeyEvent event){
  final View decor=mActivity.getWindow().getDecorView();
  return KeyEventCompat2.dispatch(event,mActivity,decor != null ? KeyEventCompat2.getKeyDispatcherState(decor) : null,mActivity);
}",0.9959183673469388
114978,"public boolean dispatchKeyEvent(KeyEvent event){
  if (getFragmentMaster().dispatchKeyEventToWindow(event)) {
    return true;
  }
  View view=mMasterFragment.getView();
  boolean handled=KeyEventCompat.dispatch(event,mMasterFragment,view != null ? KeyEventCompat.getKeyDispatcherState(view) : null,this);
  if (handled) {
    return true;
  }
  return getFragmentMaster().dispatchKeyEventToActivity(event);
}","public boolean dispatchKeyEvent(KeyEvent event){
  if (getFragmentMaster().dispatchKeyEventToWindow(event)) {
    return true;
  }
  View view=mMasterFragment.getView();
  boolean handled=KeyEventCompat2.dispatch(event,mMasterFragment,view != null ? KeyEventCompat2.getKeyDispatcherState(view) : null,this);
  if (handled) {
    return true;
  }
  return getFragmentMaster().dispatchKeyEventToActivity(event);
}",0.997560975609756
114979,"private void performUserLeave(){
  mIsUserActive=false;
  onUserLeave();
}","private void performUserLeave(){
  mIsUserActive=false;
  mMasterFragment.onUserLeave();
}",0.902439024390244
114980,"private void performUserActive(){
  mIsUserActive=true;
  onUserActive();
}","private void performUserActive(){
  mIsUserActive=true;
  mMasterFragment.onUserActive();
}",0.9036144578313252
114981,"@Override public void destroyItem(ViewGroup container,int position,Object object){
  IMasterFragment f=(IMasterFragment)object;
  if (getFragments().contains(f)) {
    f.finish();
  }
}","@Override public void destroyItem(ViewGroup container,int position,Object object){
}",0.6245353159851301
114982,"public MasterFragmentState(Parcel in){
  mRequest=in.readParcelable(null);
  mSoftInputMode=in.readInt();
  mIsSlideable=in.readInt() != 0;
}","public MasterFragmentState(Parcel in){
  mRequest=in.readParcelable(MasterFragmentState.class.getClassLoader());
  mSoftInputMode=in.readInt();
  mIsSlideable=in.readInt() != 0;
}",0.875
114983,"public void addNodeClinicalData(boolean header,boolean footer,boolean clinical){
  String ODMVersion=this.getODMVersion();
  StringBuffer xml=this.getXmlOutput();
  String indent=this.getIndent();
  String nls=System.getProperty(""String_Node_Str"");
  if (header) {
    xml.append(indent + ""String_Node_Str"" + StringEscapeUtils.escapeXml(clinicalData.getStudyOID())+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(this.clinicalData.getMetaDataVersionOID())+ ""String_Node_Str"");
    xml.append(nls);
  }
  ArrayList<ExportSubjectDataBean> subs=(ArrayList<ExportSubjectDataBean>)this.clinicalData.getExportSubjectData();
  for (  ExportSubjectDataBean sub : subs) {
    xml.append(indent + indent + ""String_Node_Str""+ StringEscapeUtils.escapeXml(sub.getSubjectOID()));
    if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
      xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(sub.getStudySubjectId()));
      String uniqueIdentifier=sub.getUniqueIdentifier();
      if (uniqueIdentifier != null && uniqueIdentifier.length() > 0) {
        xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(uniqueIdentifier));
      }
      String status=sub.getStatus();
      if (status != null && status.length() > 0) {
        xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(status));
      }
      String secondaryId=sub.getSecondaryId();
      if (secondaryId != null && secondaryId.length() > 0) {
        xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(secondaryId));
      }
      Integer year=sub.getYearOfBirth();
      if (year != null) {
        xml.append(""String_Node_Str"" + sub.getYearOfBirth());
      }
 else {
        if (sub.getDateOfBirth() != null) {
          xml.append(""String_Node_Str"" + sub.getDateOfBirth());
        }
      }
      String gender=sub.getSubjectGender();
      if (gender != null && gender.length() > 0) {
        xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(gender));
      }
      String enrollmentDate=sub.getEnrollmentDate();
      if (enrollmentDate != null && enrollmentDate.length() > 0) {
        xml.append(""String_Node_Str"" + enrollmentDate);
      }
    }
    xml.append(""String_Node_Str"");
    xml.append(nls);
    ArrayList<ExportStudyEventDataBean> ses=(ArrayList<ExportStudyEventDataBean>)sub.getExportStudyEventData();
    xml.append(indent + indent + indent+ ""String_Node_Str"");
    xml.append(nls);
    EventDefinitionCRFDAO edcdao=new EventDefinitionCRFDAO(dataSource);
    StudyEventDefinitionDAO<String,ArrayList> seddao=new StudyEventDefinitionDAO(dataSource);
    CRFDAO crfdao=new CRFDAO(dataSource);
    StudyBean parentStudyBean=getParentStudy(clinicalData.getStudyOID());
    List<EventDefinitionCRFBean> edcs=edcdao.findAllByStudy(parentStudyBean);
    for (    EventDefinitionCRFBean edc : edcs) {
      if (!edc.getStatus().equals(Status.AUTO_DELETED) && !edc.getStatus().equals(Status.DELETED) && validateAddNew(sub,edc)) {
        StudyEventDefinitionBean sed=(StudyEventDefinitionBean)seddao.findByPK(edc.getStudyEventDefinitionId());
        CRFBean crf=(CRFBean)crfdao.findByPK(edc.getCrfId());
        xml.append(indent + indent + indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(sed.getOid() + ""String_Node_Str"" + crf.getOid())+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(clinicalData.getStudyOID())+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(sub.getSubjectOID())+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(sed.getOid())+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(crf.getOid())+ ""String_Node_Str"");
        xml.append(""String_Node_Str"");
        xml.append(nls);
      }
    }
    xml.append(indent + indent + indent+ ""String_Node_Str"");
    xml.append(nls);
    for (    ExportStudyEventDataBean se : ses) {
      if (!clinical || (clinical && !se.getStatus().equals(SubjectEventStatus.INVALID.getI18nDescription(getLocale())))) {
        xml.append(indent + indent + indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(se.getStudyEventOID()));
        if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
          xml.append(""String_Node_Str"" + se.getStudyEventRepeatKey());
          String eventName=se.getEventName();
          if (eventName != null && eventName.length() > 0) {
            xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(eventName));
          }
          String location=se.getLocation();
          if (location != null && location.length() > 0) {
            xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(location));
          }
          String startDate=se.getStartDate();
          if (startDate != null && startDate.length() > 0) {
            xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(startDate));
          }
          String endDate=se.getEndDate();
          if (endDate != null && endDate.length() > 0) {
            xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(endDate));
          }
          String status=se.getStatus();
          if (status != null && status.length() > 0) {
            xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(status));
          }
          if (se.getAgeAtEvent() != null) {
            xml.append(""String_Node_Str"" + se.getAgeAtEvent());
          }
        }
        xml.append(""String_Node_Str"");
        xml.append(nls);
        StudySubject studySubject=sub.getStudySubject();
        Study study=studySubject.getStudy();
        StudyEvent studyEvent=se.getStudyEvent();
        StudyBean studyBean=CoreResources.getPublicStudy(study.getOc_oid(),dataSource);
        StudyUserRoleBean userRole=userBean.getRoleByStudy(studyBean.getId());
        if (userRole == null || !userRole.isActive())         userRole=userBean.getRoleByStudy(studyBean.getParentStudyId());
        Role role=userRole.getRole();
        if (se.getExportFormData().size() != 0 && !studyEvent.getStudyEventDefinition().getStatus().equals(Status.DELETED) && !studyEvent.getStudyEventDefinition().getStatus().equals(Status.AUTO_DELETED)) {
          xml.append(indent + indent + indent+ indent+ ""String_Node_Str"");
          xml.append(nls);
          if (studyEvent.getStatusId() != Status.DELETED.getCode() && studyEvent.getStatusId() != Status.AUTO_DELETED.getCode()) {
            if ((role.equals(Role.STUDYDIRECTOR) || role.equals(Role.COORDINATOR)) && studySubject.getStatus().equals(Status.AVAILABLE) && study.getStatus().equals(Status.AVAILABLE)) {
              String removeUrl=""String_Node_Str"" + studyEvent.getStudyEventId() + ""String_Node_Str""+ studySubject.getStudySubjectId();
              xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(removeUrl)+ ""String_Node_Str"");
              xml.append(""String_Node_Str"");
              xml.append(nls);
            }
          }
 else {
            if ((role.equals(Role.STUDYDIRECTOR) || role.equals(Role.COORDINATOR)) && studySubject.getStatus().equals(Status.AVAILABLE) && study.getStatus().equals(Status.AVAILABLE)&& studyEvent.getStudyEventDefinition().getStatus().equals(Status.AVAILABLE)) {
              String restoreUrl=""String_Node_Str"" + studyEvent.getStudyEventId() + ""String_Node_Str""+ studySubject.getStudySubjectId();
              xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(restoreUrl)+ ""String_Node_Str"");
              xml.append(""String_Node_Str"");
              xml.append(nls);
            }
          }
          if (role.equals(Role.INVESTIGATOR) && (studyEvent.getSubjectEventStatusId() == SubjectEventStatus.COMPLETED.getCode() || studyEvent.getSubjectEventStatusId() == SubjectEventStatus.SKIPPED.getCode() || studyEvent.getSubjectEventStatusId() == SubjectEventStatus.STOPPED.getCode()) && studySubject.getStatus().equals(Status.AVAILABLE)&& study.getStatus().equals(Status.AVAILABLE)) {
            String signUrl=""String_Node_Str"" + studyEvent.getStudyEventId() + ""String_Node_Str""+ studySubject.getStudySubjectId()+ ""String_Node_Str"";
            xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(signUrl)+ ""String_Node_Str"");
            xml.append(""String_Node_Str"");
            xml.append(nls);
          }
          if (studyEvent.getStatusId() != Status.DELETED.getCode() && studyEvent.getStatusId() != Status.AUTO_DELETED.getCode() && studySubject.getStatus().equals(Status.AVAILABLE) && study.getStatus().equals(Status.AVAILABLE)) {
            if ((!studyEvent.getStudyEventDefinition().getType().equals(COMMON) && !role.equals(Role.MONITOR)) || (studyEvent.getStudyEventDefinition().getType().equals(COMMON) && (role.equals(Role.STUDY_STUDYDIRECTOR) || role.equals(Role.COORDINATOR)))) {
              String lockUrl=""String_Node_Str"" + studyEvent.getStudyEventId() + ""String_Node_Str""+ studySubject.getStudySubjectId();
              xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(lockUrl)+ ""String_Node_Str"");
              xml.append(""String_Node_Str"");
              xml.append(nls);
              xml.append(indent + indent + indent+ indent+ ""String_Node_Str"");
              xml.append(nls);
            }
          }
        }
        ArrayList<ExportFormDataBean> forms=se.getExportFormData();
        for (        ExportFormDataBean form : forms) {
          if (!clinical || (clinical && !form.getStatus().equals(EventCRFStatus.INVALID.getI18nDescription(getLocale())))) {
            xml.append(indent + indent + indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(form.getFormOID()));
            if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
              String formName=form.getFormName();
              if (!StringUtils.isEmpty(formName)) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(formName));
              }
              String formLayout=form.getFormLayoutName();
              if (!StringUtils.isEmpty(formLayout)) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(formLayout));
              }
              String interviewerName=form.getInterviewerName();
              if (interviewerName != null && interviewerName.length() > 0) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(interviewerName));
              }
              if (form.getInterviewDate() != null && form.getInterviewDate().length() > 0) {
                xml.append(""String_Node_Str"" + form.getInterviewDate());
              }
              Date createdDate=form.getCreatedDate();
              if (createdDate != null) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(new SimpleDateFormat(""String_Node_Str"").format(createdDate)));
              }
              String createdBy=form.getCreatedBy();
              if (createdBy != null && createdBy.length() > 0) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(createdBy));
              }
              Date updatedDate=form.getUpdatedDate();
              if (updatedDate != null) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(new SimpleDateFormat(""String_Node_Str"").format(updatedDate)));
              }
              String updatedBy=form.getUpdatedBy();
              if (updatedBy != null && updatedBy.length() > 0) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(updatedBy));
              }
              String status=form.getStatus();
              if (status != null && status.length() > 0) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(status));
              }
            }
            xml.append(""String_Node_Str"");
            xml.append(nls);
            EventCrf eventCrf=form.getEventCrf();
            FormLayout formLayout=form.getFormLayout();
            EventDefinitionCrf eventDefinitionCrf=form.getEventDefinitionCrf();
            xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str"");
            xml.append(nls);
            String formUrl=""String_Node_Str"" + formLayout.getFormLayoutId() + ""String_Node_Str""+ studyEvent.getStudyEventId()+ ""String_Node_Str""+ eventCrf.getEventCrfId()+ ""String_Node_Str""+ studySubject.getStudySubjectId();
            xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(formUrl + ""String_Node_Str"")+ ""String_Node_Str"");
            xml.append(""String_Node_Str"");
            xml.append(nls);
            if (!(form.getEventDefinitionCrf().getStatusId() == Status.DELETED.getCode()) && !(form.getEventDefinitionCrf().getStatusId() == Status.AUTO_DELETED.getCode())) {
              if (!role.equals(Role.MONITOR) && eventCrf.getStatusId() != Status.DELETED.getCode() && eventCrf.getStatusId() != Status.AUTO_DELETED.getCode() && eventCrf.getStatusId() != Status.LOCKED.getCode() && studyEvent.getSubjectEventStatusId() != SubjectEventStatus.LOCKED.getCode() && studyEvent.getSubjectEventStatusId() != SubjectEventStatus.SKIPPED.getCode() && studyEvent.getSubjectEventStatusId() != SubjectEventStatus.STOPPED.getCode() && studyEvent.getStatusId() != Status.DELETED.getCode() && studyEvent.getStatusId() != Status.AUTO_DELETED.getCode() && study.getStatus().equals(Status.AVAILABLE)) {
                xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(formUrl + ""String_Node_Str"")+ ""String_Node_Str"");
                xml.append(""String_Node_Str"");
                xml.append(nls);
              }
              if (!studyEvent.getStudyEventDefinition().getType().equals(COMMON)) {
                if (eventCrf.getStatusId() != Status.DELETED.getCode() && eventCrf.getStatusId() != Status.AUTO_DELETED.getCode()) {
                  if ((role.equals(Role.STUDYDIRECTOR) || role.equals(Role.COORDINATOR)) && studySubject.getStatus().equals(Status.AVAILABLE) && study.getStatus().equals(Status.AVAILABLE)) {
                    String removeUrl=""String_Node_Str"" + eventCrf.getEventCrfId() + ""String_Node_Str""+ studySubject.getStudySubjectId();
                    xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(removeUrl)+ ""String_Node_Str"");
                    xml.append(""String_Node_Str"");
                    xml.append(nls);
                  }
                }
 else {
                  if ((role.equals(Role.STUDYDIRECTOR) || role.equals(Role.COORDINATOR)) && studyEvent.getStatusId() != Status.AUTO_DELETED.getCode() && eventCrf.getStatusId() != Status.AUTO_DELETED.getCode() && studySubject.getStatus().equals(Status.AVAILABLE) && studyEvent.getStatusId() == Status.AVAILABLE.getCode() && study.getStatus().equals(Status.AVAILABLE)) {
                    String restoreUrl=""String_Node_Str"" + eventCrf.getEventCrfId() + ""String_Node_Str""+ studySubject.getStudySubjectId();
                    xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(restoreUrl)+ ""String_Node_Str"");
                    xml.append(""String_Node_Str"");
                    xml.append(nls);
                  }
                }
              }
              if ((role.equals(Role.STUDYDIRECTOR) || role.equals(Role.COORDINATOR)) && study.getStatus().equals(Status.AVAILABLE) && !(studyEvent.getSubjectEventStatusId() == SubjectEventStatus.LOCKED.getCode() || studyEvent.getSubjectEventStatusId() == SubjectEventStatus.SKIPPED.getCode())) {
                String reassignUrl=""String_Node_Str"" + formLayout.getCrf().getCrfId() + ""String_Node_Str""+ formLayout.getCrf().getName()+ ""String_Node_Str""+ formLayout.getFormLayoutId()+ ""String_Node_Str""+ form.getFormLayoutName()+ ""String_Node_Str""+ studySubject.getLabel()+ ""String_Node_Str""+ studySubject.getStudySubjectId()+ ""String_Node_Str""+ eventCrf.getEventCrfId()+ ""String_Node_Str""+ eventDefinitionCrf.getEventDefinitionCrfId();
                xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(reassignUrl)+ ""String_Node_Str"");
                xml.append(""String_Node_Str"");
                xml.append(nls);
              }
            }
            xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str"");
            xml.append(nls);
            ArrayList<ImportItemGroupDataBean> igs=form.getItemGroupData();
            sortImportItemGroupDataBeanList(igs);
            for (            ImportItemGroupDataBean ig : igs) {
              xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(ig.getItemGroupOID())+ ""String_Node_Str"");
              if (!""String_Node_Str"".equals(ig.getItemGroupRepeatKey())) {
                xml.append(""String_Node_Str"" + ig.getItemGroupRepeatKey() + ""String_Node_Str"");
              }
              String itemGroupName=ig.getItemGroupName();
              if (!StringUtils.isEmpty(itemGroupName)) {
                xml.append(""String_Node_Str"" + itemGroupName + ""String_Node_Str"");
              }
              if (ig.getItemData().get(0).isDeleted()) {
                xml.append(""String_Node_Str"" + (ig.getItemData().get(0).isDeleted() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
              }
              xml.append(""String_Node_Str"");
              xml.append(nls);
              ArrayList<ImportItemDataBean> items=ig.getItemData();
              sortImportItemDataBeanList(items);
              for (              ImportItemDataBean item : items) {
                boolean printValue=true;
                xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getItemOID())+ ""String_Node_Str"");
                String itemName=item.getItemName();
                if (!StringUtils.isEmpty(itemName)) {
                  xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(itemName) + ""String_Node_Str"");
                }
                if (""String_Node_Str"".equals(item.getIsNull())) {
                  xml.append(""String_Node_Str"");
                  if (!item.isHasValueWithNull()) {
                    printValue=false;
                  }
                  if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
                    xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getReasonForNull()) + ""String_Node_Str"");
                    if (!printValue) {
                      xml.append(""String_Node_Str"");
                      xml.append(nls);
                    }
                  }
                }
                if (printValue) {
                  Boolean hasElm=false;
                  xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getValue()) + ""String_Node_Str"");
                  String muRefOid=item.getMeasurementUnitRef().getElementDefOID();
                  if (muRefOid != null && muRefOid.length() > 0) {
                    if (hasElm) {
                    }
 else {
                      xml.append(""String_Node_Str"");
                      xml.append(nls);
                      hasElm=true;
                    }
                    xml.append(indent + indent + indent+ indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(muRefOid)+ ""String_Node_Str"");
                    xml.append(nls);
                  }
                  if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
                    if (item.getAuditLogs() != null && item.getAuditLogs().getAuditLogs().size() > 0) {
                      if (hasElm) {
                      }
 else {
                        xml.append(""String_Node_Str"");
                        xml.append(nls);
                        hasElm=true;
                      }
                      this.addAuditLogs(item.getAuditLogs(),indent + indent + indent+ indent+ indent+ indent+ indent,""String_Node_Str"");
                    }
                    if (item.getDiscrepancyNotes() != null && item.getDiscrepancyNotes().getDiscrepancyNotes().size() > 0) {
                      if (hasElm) {
                      }
 else {
                        xml.append(""String_Node_Str"");
                        xml.append(nls);
                        hasElm=true;
                      }
                      this.addDiscrepancyNotes(item.getDiscrepancyNotes(),indent + indent + indent+ indent+ indent+ indent+ indent);
                    }
                  }
                  if (hasElm) {
                    xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str"");
                    xml.append(nls);
                    hasElm=false;
                  }
 else {
                    xml.append(""String_Node_Str"");
                    xml.append(nls);
                  }
                }
              }
              xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str"");
              xml.append(nls);
            }
            if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
              if (form.getAuditLogs() != null && form.getAuditLogs().getAuditLogs().size() > 0) {
                this.addAuditLogs(form.getAuditLogs(),indent + indent + indent+ indent+ indent,""String_Node_Str"");
              }
              if (form.getDiscrepancyNotes() != null && form.getDiscrepancyNotes().getDiscrepancyNotes().size() > 0) {
                this.addDiscrepancyNotes(form.getDiscrepancyNotes(),indent + indent + indent+ indent+ indent);
              }
            }
            xml.append(indent + indent + indent+ indent+ ""String_Node_Str"");
            xml.append(nls);
          }
        }
        if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
          if (se.getAuditLogs() != null && se.getAuditLogs().getAuditLogs().size() > 0) {
            this.addAuditLogs(se.getAuditLogs(),indent + indent + indent+ indent,""String_Node_Str"");
          }
          if (se.getDiscrepancyNotes() != null && se.getDiscrepancyNotes().getDiscrepancyNotes().size() > 0) {
            this.addDiscrepancyNotes(se.getDiscrepancyNotes(),indent + indent + indent+ indent);
          }
        }
        xml.append(indent + indent + indent+ ""String_Node_Str"");
        xml.append(nls);
      }
    }
    if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
      ArrayList<SubjectGroupDataBean> sgddata=(ArrayList<SubjectGroupDataBean>)sub.getSubjectGroupData();
      if (sgddata.size() > 0) {
        for (        SubjectGroupDataBean sgd : sgddata) {
          String cid=sgd.getStudyGroupClassId() != null ? ""String_Node_Str"" + StringEscapeUtils.escapeXml(sgd.getStudyGroupClassId()) + ""String_Node_Str"" : ""String_Node_Str"";
          if (cid.length() > 0) {
            String cn=sgd.getStudyGroupClassName() != null ? ""String_Node_Str"" + StringEscapeUtils.escapeXml(sgd.getStudyGroupClassName()) + ""String_Node_Str"" : ""String_Node_Str"";
            String gn=sgd.getStudyGroupName() != null ? ""String_Node_Str"" + StringEscapeUtils.escapeXml(sgd.getStudyGroupName()) + ""String_Node_Str"" : ""String_Node_Str"";
            xml.append(indent + indent + indent+ ""String_Node_Str""+ cid+ cn+ gn);
          }
          xml.append(""String_Node_Str"");
          xml.append(nls);
        }
      }
      if (sub.getAuditLogs() != null && sub.getAuditLogs().getAuditLogs().size() > 0) {
        this.addAuditLogs(sub.getAuditLogs(),indent + indent + indent,""String_Node_Str"");
      }
      if (sub.getDiscrepancyNotes() != null && sub.getDiscrepancyNotes().getDiscrepancyNotes().size() > 0) {
        this.addDiscrepancyNotes(sub.getDiscrepancyNotes(),indent + indent + indent);
      }
    }
    xml.append(indent + indent + ""String_Node_Str"");
    xml.append(nls);
  }
  if (footer) {
    xml.append(indent + ""String_Node_Str"");
    xml.append(nls);
  }
}","public void addNodeClinicalData(boolean header,boolean footer,boolean clinical){
  String ODMVersion=this.getODMVersion();
  StringBuffer xml=this.getXmlOutput();
  String indent=this.getIndent();
  String nls=System.getProperty(""String_Node_Str"");
  if (header) {
    xml.append(indent + ""String_Node_Str"" + StringEscapeUtils.escapeXml(clinicalData.getStudyOID())+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(this.clinicalData.getMetaDataVersionOID())+ ""String_Node_Str"");
    xml.append(nls);
  }
  ArrayList<ExportSubjectDataBean> subs=(ArrayList<ExportSubjectDataBean>)this.clinicalData.getExportSubjectData();
  for (  ExportSubjectDataBean sub : subs) {
    xml.append(indent + indent + ""String_Node_Str""+ StringEscapeUtils.escapeXml(sub.getSubjectOID()));
    if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
      xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(sub.getStudySubjectId()));
      String uniqueIdentifier=sub.getUniqueIdentifier();
      if (uniqueIdentifier != null && uniqueIdentifier.length() > 0) {
        xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(uniqueIdentifier));
      }
      String status=sub.getStatus();
      if (status != null && status.length() > 0) {
        xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(status));
      }
      String secondaryId=sub.getSecondaryId();
      if (secondaryId != null && secondaryId.length() > 0) {
        xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(secondaryId));
      }
      Integer year=sub.getYearOfBirth();
      if (year != null) {
        xml.append(""String_Node_Str"" + sub.getYearOfBirth());
      }
 else {
        if (sub.getDateOfBirth() != null) {
          xml.append(""String_Node_Str"" + sub.getDateOfBirth());
        }
      }
      String gender=sub.getSubjectGender();
      if (gender != null && gender.length() > 0) {
        xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(gender));
      }
      String enrollmentDate=sub.getEnrollmentDate();
      if (enrollmentDate != null && enrollmentDate.length() > 0) {
        xml.append(""String_Node_Str"" + enrollmentDate);
      }
    }
    xml.append(""String_Node_Str"");
    xml.append(nls);
    ArrayList<ExportStudyEventDataBean> ses=(ArrayList<ExportStudyEventDataBean>)sub.getExportStudyEventData();
    xml.append(indent + indent + indent+ ""String_Node_Str"");
    xml.append(nls);
    EventDefinitionCRFDAO edcdao=new EventDefinitionCRFDAO(dataSource);
    StudyEventDefinitionDAO<String,ArrayList> seddao=new StudyEventDefinitionDAO(dataSource);
    CRFDAO crfdao=new CRFDAO(dataSource);
    StudyBean parentStudyBean=getParentStudy(clinicalData.getStudyOID());
    StudyBean studyBean=getStudy(clinicalData.getStudyOID());
    List<EventDefinitionCRFBean> edcs=(List<EventDefinitionCRFBean>)edcdao.findAllStudySiteFiltered(studyBean);
    for (    EventDefinitionCRFBean edc : edcs) {
      if (!edc.getStatus().equals(org.akaza.openclinica.bean.core.Status.AUTO_DELETED) && !edc.getStatus().equals(org.akaza.openclinica.bean.core.Status.DELETED) && validateAddNew(sub,edc)&& !edc.isHideCrf()) {
        StudyEventDefinitionBean sed=(StudyEventDefinitionBean)seddao.findByPK(edc.getStudyEventDefinitionId());
        CRFBean crf=(CRFBean)crfdao.findByPK(edc.getCrfId());
        if (!sed.getType().equals(COMMON)) {
          continue;
        }
        xml.append(indent + indent + indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(sed.getOid() + ""String_Node_Str"" + crf.getOid())+ ""String_Node_Str""+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(clinicalData.getStudyOID())+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(sub.getSubjectOID())+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(sed.getOid())+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(crf.getOid())+ ""String_Node_Str"");
        xml.append(""String_Node_Str"");
        xml.append(nls);
      }
    }
    xml.append(indent + indent + indent+ ""String_Node_Str"");
    xml.append(nls);
    for (    ExportStudyEventDataBean se : ses) {
      if (!clinical || (clinical && !se.getStatus().equals(SubjectEventStatus.INVALID.getI18nDescription(getLocale())))) {
        xml.append(indent + indent + indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(se.getStudyEventOID()));
        if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
          xml.append(""String_Node_Str"" + se.getStudyEventRepeatKey());
          String eventName=se.getEventName();
          if (eventName != null && eventName.length() > 0) {
            xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(eventName));
          }
          String location=se.getLocation();
          if (location != null && location.length() > 0) {
            xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(location));
          }
          String startDate=se.getStartDate();
          if (startDate != null && startDate.length() > 0) {
            xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(startDate));
          }
          String endDate=se.getEndDate();
          if (endDate != null && endDate.length() > 0) {
            xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(endDate));
          }
          String status=se.getStatus();
          if (status != null && status.length() > 0) {
            xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(status));
          }
          if (se.getAgeAtEvent() != null) {
            xml.append(""String_Node_Str"" + se.getAgeAtEvent());
          }
        }
        xml.append(""String_Node_Str"");
        xml.append(nls);
        StudySubject studySubject=sub.getStudySubject();
        StudyEvent studyEvent=se.getStudyEvent();
        StudyBean publicBean=CoreResources.getPublicStudy(clinicalData.getStudyOID(),dataSource);
        StudyUserRoleBean userRole=userBean.getRoleByStudy(publicBean.getId());
        if (userRole == null || !userRole.isActive())         userRole=userBean.getRoleByStudy(publicBean.getParentStudyId());
        Role role=userRole.getRole();
        xml.append(indent + indent + indent+ indent+ ""String_Node_Str"");
        xml.append(nls);
        if (se.getExportFormData().size() != 0) {
          if (se.getStudyEventDefinition().getType().equals(COMMON) && se.getExportFormData().get(0).getEventDefinitionCrf().getStatusId() != Status.AUTO_DELETED.getCode() && se.getExportFormData().get(0).getEventDefinitionCrf().getStatusId() != Status.DELETED.getCode()) {
            if (studyEvent.getStatusId() != Status.DELETED.getCode() && studyEvent.getStatusId() != Status.AUTO_DELETED.getCode()) {
              if ((role.equals(Role.STUDYDIRECTOR) || role.equals(Role.COORDINATOR)) && studySubject.getStatus().equals(Status.AVAILABLE) && studyBean.getStatus().equals(org.akaza.openclinica.bean.core.Status.AVAILABLE)) {
                String removeUrl=""String_Node_Str"" + studyEvent.getStudyEventId() + ""String_Node_Str""+ studySubject.getStudySubjectId();
                xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(removeUrl)+ ""String_Node_Str"");
                xml.append(""String_Node_Str"");
                xml.append(nls);
              }
            }
 else {
              if ((role.equals(Role.STUDYDIRECTOR) || role.equals(Role.COORDINATOR)) && studySubject.getStatus().equals(Status.AVAILABLE) && studyBean.getStatus().equals(org.akaza.openclinica.bean.core.Status.AVAILABLE)&& studyEvent.getStudyEventDefinition().getStatus().equals(Status.AVAILABLE)) {
                String restoreUrl=""String_Node_Str"" + studyEvent.getStudyEventId() + ""String_Node_Str""+ studySubject.getStudySubjectId();
                xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(restoreUrl)+ ""String_Node_Str"");
                xml.append(""String_Node_Str"");
                xml.append(nls);
              }
            }
            if (role.equals(Role.INVESTIGATOR) && (studyEvent.getSubjectEventStatusId() == SubjectEventStatus.COMPLETED.getCode() || studyEvent.getSubjectEventStatusId() == SubjectEventStatus.SKIPPED.getCode() || studyEvent.getSubjectEventStatusId() == SubjectEventStatus.STOPPED.getCode()) && studySubject.getStatus().equals(Status.AVAILABLE)&& studyBean.getStatus().equals(org.akaza.openclinica.bean.core.Status.AVAILABLE)) {
              String signUrl=""String_Node_Str"" + studyEvent.getStudyEventId() + ""String_Node_Str""+ studySubject.getStudySubjectId()+ ""String_Node_Str"";
              xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(signUrl)+ ""String_Node_Str"");
              xml.append(""String_Node_Str"");
              xml.append(nls);
            }
            if (studyEvent.getStatusId() != Status.DELETED.getCode() && studyEvent.getStatusId() != Status.AUTO_DELETED.getCode() && studySubject.getStatus().equals(Status.AVAILABLE) && studyBean.getStatus().equals(org.akaza.openclinica.bean.core.Status.AVAILABLE)) {
              if ((!studyEvent.getStudyEventDefinition().getType().equals(COMMON) && !role.equals(Role.MONITOR)) || (studyEvent.getStudyEventDefinition().getType().equals(COMMON) && (role.equals(Role.STUDY_STUDYDIRECTOR) || role.equals(Role.COORDINATOR)))) {
                String lockUrl=""String_Node_Str"" + studyEvent.getStudyEventId() + ""String_Node_Str""+ studySubject.getStudySubjectId();
                xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(lockUrl)+ ""String_Node_Str"");
                xml.append(""String_Node_Str"");
                xml.append(nls);
              }
            }
          }
        }
        xml.append(indent + indent + indent+ indent+ ""String_Node_Str"");
        xml.append(nls);
        ArrayList<ExportFormDataBean> forms=se.getExportFormData();
        for (        ExportFormDataBean form : forms) {
          if (!clinical || (clinical && !form.getStatus().equals(EventCRFStatus.INVALID.getI18nDescription(getLocale())))) {
            xml.append(indent + indent + indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(form.getFormOID()));
            if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
              String formName=form.getFormName();
              if (!StringUtils.isEmpty(formName)) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(formName));
              }
              String formLayout=form.getFormLayoutName();
              if (!StringUtils.isEmpty(formLayout)) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(formLayout));
              }
              String interviewerName=form.getInterviewerName();
              if (interviewerName != null && interviewerName.length() > 0) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(interviewerName));
              }
              if (form.getInterviewDate() != null && form.getInterviewDate().length() > 0) {
                xml.append(""String_Node_Str"" + form.getInterviewDate());
              }
              Date createdDate=form.getCreatedDate();
              if (createdDate != null) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(new SimpleDateFormat(""String_Node_Str"").format(createdDate)));
              }
              String createdBy=form.getCreatedBy();
              if (createdBy != null && createdBy.length() > 0) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(createdBy));
              }
              Date updatedDate=form.getUpdatedDate();
              if (updatedDate != null) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(new SimpleDateFormat(""String_Node_Str"").format(updatedDate)));
              }
              String updatedBy=form.getUpdatedBy();
              if (updatedBy != null && updatedBy.length() > 0) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(updatedBy));
              }
              String status=form.getStatus();
              if (status != null && status.length() > 0) {
                xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(status));
              }
            }
            xml.append(""String_Node_Str"");
            xml.append(nls);
            EventCrf eventCrf=form.getEventCrf();
            FormLayout formLayout=form.getFormLayout();
            EventDefinitionCrf eventDefinitionCrf=form.getEventDefinitionCrf();
            xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str"");
            xml.append(nls);
            String formUrl=""String_Node_Str"" + formLayout.getFormLayoutId() + ""String_Node_Str""+ studyEvent.getStudyEventId()+ ""String_Node_Str""+ eventCrf.getEventCrfId()+ ""String_Node_Str""+ studySubject.getStudySubjectId();
            xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(formUrl + ""String_Node_Str"")+ ""String_Node_Str"");
            xml.append(""String_Node_Str"");
            xml.append(nls);
            if (!(form.getEventDefinitionCrf().getStatusId() == Status.DELETED.getCode()) && !(form.getEventDefinitionCrf().getStatusId() == Status.AUTO_DELETED.getCode())) {
              if (!role.equals(Role.MONITOR) && eventCrf.getStatusId() != Status.DELETED.getCode() && eventCrf.getStatusId() != Status.AUTO_DELETED.getCode() && eventCrf.getStatusId() != Status.LOCKED.getCode() && studyEvent.getSubjectEventStatusId() != SubjectEventStatus.LOCKED.getCode() && studyEvent.getSubjectEventStatusId() != SubjectEventStatus.SKIPPED.getCode() && studyEvent.getSubjectEventStatusId() != SubjectEventStatus.STOPPED.getCode() && studyEvent.getStatusId() != Status.DELETED.getCode() && studyEvent.getStatusId() != Status.AUTO_DELETED.getCode() && studyBean.getStatus().equals(org.akaza.openclinica.bean.core.Status.AVAILABLE)) {
                xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(formUrl + ""String_Node_Str"")+ ""String_Node_Str"");
                xml.append(""String_Node_Str"");
                xml.append(nls);
              }
              if (!studyEvent.getStudyEventDefinition().getType().equals(COMMON)) {
                if (eventCrf.getStatusId() != Status.DELETED.getCode() && eventCrf.getStatusId() != Status.AUTO_DELETED.getCode()) {
                  if ((role.equals(Role.STUDYDIRECTOR) || role.equals(Role.COORDINATOR)) && studySubject.getStatus().equals(Status.AVAILABLE) && studyBean.getStatus().equals(org.akaza.openclinica.bean.core.Status.AVAILABLE)) {
                    String removeUrl=""String_Node_Str"" + eventCrf.getEventCrfId() + ""String_Node_Str""+ studySubject.getStudySubjectId();
                    xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(removeUrl)+ ""String_Node_Str"");
                    xml.append(""String_Node_Str"");
                    xml.append(nls);
                  }
                }
 else {
                  if ((role.equals(Role.STUDYDIRECTOR) || role.equals(Role.COORDINATOR)) && studyEvent.getStatusId() != Status.AUTO_DELETED.getCode() && eventCrf.getStatusId() != Status.AUTO_DELETED.getCode() && studySubject.getStatus().equals(Status.AVAILABLE) && studyEvent.getStatusId() == Status.AVAILABLE.getCode() && studyBean.getStatus().equals(org.akaza.openclinica.bean.core.Status.AVAILABLE)) {
                    String restoreUrl=""String_Node_Str"" + eventCrf.getEventCrfId() + ""String_Node_Str""+ studySubject.getStudySubjectId();
                    xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(restoreUrl)+ ""String_Node_Str"");
                    xml.append(""String_Node_Str"");
                    xml.append(nls);
                  }
                }
              }
              if ((role.equals(Role.STUDYDIRECTOR) || role.equals(Role.COORDINATOR)) && studyBean.getStatus().equals(org.akaza.openclinica.bean.core.Status.AVAILABLE) && !(studyEvent.getSubjectEventStatusId() == SubjectEventStatus.LOCKED.getCode() || studyEvent.getSubjectEventStatusId() == SubjectEventStatus.SKIPPED.getCode())) {
                String reassignUrl=""String_Node_Str"" + formLayout.getCrf().getCrfId() + ""String_Node_Str""+ formLayout.getCrf().getName()+ ""String_Node_Str""+ formLayout.getFormLayoutId()+ ""String_Node_Str""+ form.getFormLayoutName()+ ""String_Node_Str""+ studySubject.getLabel()+ ""String_Node_Str""+ studySubject.getStudySubjectId()+ ""String_Node_Str""+ eventCrf.getEventCrfId()+ ""String_Node_Str""+ eventDefinitionCrf.getEventDefinitionCrfId();
                xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(reassignUrl)+ ""String_Node_Str"");
                xml.append(""String_Node_Str"");
                xml.append(nls);
              }
            }
            xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str"");
            xml.append(nls);
            ArrayList<ImportItemGroupDataBean> igs=form.getItemGroupData();
            sortImportItemGroupDataBeanList(igs);
            for (            ImportItemGroupDataBean ig : igs) {
              xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(ig.getItemGroupOID())+ ""String_Node_Str"");
              if (!""String_Node_Str"".equals(ig.getItemGroupRepeatKey())) {
                xml.append(""String_Node_Str"" + ig.getItemGroupRepeatKey() + ""String_Node_Str"");
              }
              String itemGroupName=ig.getItemGroupName();
              if (!StringUtils.isEmpty(itemGroupName)) {
                xml.append(""String_Node_Str"" + itemGroupName + ""String_Node_Str"");
              }
              if (ig.getItemData().get(0).isDeleted()) {
                xml.append(""String_Node_Str"" + (ig.getItemData().get(0).isDeleted() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
              }
              xml.append(""String_Node_Str"");
              xml.append(nls);
              ArrayList<ImportItemDataBean> items=ig.getItemData();
              sortImportItemDataBeanList(items);
              for (              ImportItemDataBean item : items) {
                boolean printValue=true;
                xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(item.getItemOID())+ ""String_Node_Str"");
                String itemName=item.getItemName();
                if (!StringUtils.isEmpty(itemName)) {
                  xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(itemName) + ""String_Node_Str"");
                }
                if (""String_Node_Str"".equals(item.getIsNull())) {
                  xml.append(""String_Node_Str"");
                  if (!item.isHasValueWithNull()) {
                    printValue=false;
                  }
                  if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
                    xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getReasonForNull()) + ""String_Node_Str"");
                    if (!printValue) {
                      xml.append(""String_Node_Str"");
                      xml.append(nls);
                    }
                  }
                }
                if (printValue) {
                  Boolean hasElm=false;
                  xml.append(""String_Node_Str"" + StringEscapeUtils.escapeXml(item.getValue()) + ""String_Node_Str"");
                  String muRefOid=item.getMeasurementUnitRef().getElementDefOID();
                  if (muRefOid != null && muRefOid.length() > 0) {
                    if (hasElm) {
                    }
 else {
                      xml.append(""String_Node_Str"");
                      xml.append(nls);
                      hasElm=true;
                    }
                    xml.append(indent + indent + indent+ indent+ indent+ indent+ indent+ ""String_Node_Str""+ StringEscapeUtils.escapeXml(muRefOid)+ ""String_Node_Str"");
                    xml.append(nls);
                  }
                  if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
                    if (item.getAuditLogs() != null && item.getAuditLogs().getAuditLogs().size() > 0) {
                      if (hasElm) {
                      }
 else {
                        xml.append(""String_Node_Str"");
                        xml.append(nls);
                        hasElm=true;
                      }
                      this.addAuditLogs(item.getAuditLogs(),indent + indent + indent+ indent+ indent+ indent+ indent,""String_Node_Str"");
                    }
                    if (item.getDiscrepancyNotes() != null && item.getDiscrepancyNotes().getDiscrepancyNotes().size() > 0) {
                      if (hasElm) {
                      }
 else {
                        xml.append(""String_Node_Str"");
                        xml.append(nls);
                        hasElm=true;
                      }
                      this.addDiscrepancyNotes(item.getDiscrepancyNotes(),indent + indent + indent+ indent+ indent+ indent+ indent);
                    }
                  }
                  if (hasElm) {
                    xml.append(indent + indent + indent+ indent+ indent+ indent+ ""String_Node_Str"");
                    xml.append(nls);
                    hasElm=false;
                  }
 else {
                    xml.append(""String_Node_Str"");
                    xml.append(nls);
                  }
                }
              }
              xml.append(indent + indent + indent+ indent+ indent+ ""String_Node_Str"");
              xml.append(nls);
            }
            if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
              if (form.getAuditLogs() != null && form.getAuditLogs().getAuditLogs().size() > 0) {
                this.addAuditLogs(form.getAuditLogs(),indent + indent + indent+ indent+ indent,""String_Node_Str"");
              }
              if (form.getDiscrepancyNotes() != null && form.getDiscrepancyNotes().getDiscrepancyNotes().size() > 0) {
                this.addDiscrepancyNotes(form.getDiscrepancyNotes(),indent + indent + indent+ indent+ indent);
              }
            }
            xml.append(indent + indent + indent+ indent+ ""String_Node_Str"");
            xml.append(nls);
          }
        }
        if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
          if (se.getAuditLogs() != null && se.getAuditLogs().getAuditLogs().size() > 0) {
            this.addAuditLogs(se.getAuditLogs(),indent + indent + indent+ indent,""String_Node_Str"");
          }
          if (se.getDiscrepancyNotes() != null && se.getDiscrepancyNotes().getDiscrepancyNotes().size() > 0) {
            this.addDiscrepancyNotes(se.getDiscrepancyNotes(),indent + indent + indent+ indent);
          }
        }
        xml.append(indent + indent + indent+ ""String_Node_Str"");
        xml.append(nls);
      }
    }
    if (""String_Node_Str"".equalsIgnoreCase(ODMVersion) || ""String_Node_Str"".equalsIgnoreCase(ODMVersion)) {
      ArrayList<SubjectGroupDataBean> sgddata=(ArrayList<SubjectGroupDataBean>)sub.getSubjectGroupData();
      if (sgddata.size() > 0) {
        for (        SubjectGroupDataBean sgd : sgddata) {
          String cid=sgd.getStudyGroupClassId() != null ? ""String_Node_Str"" + StringEscapeUtils.escapeXml(sgd.getStudyGroupClassId()) + ""String_Node_Str"" : ""String_Node_Str"";
          if (cid.length() > 0) {
            String cn=sgd.getStudyGroupClassName() != null ? ""String_Node_Str"" + StringEscapeUtils.escapeXml(sgd.getStudyGroupClassName()) + ""String_Node_Str"" : ""String_Node_Str"";
            String gn=sgd.getStudyGroupName() != null ? ""String_Node_Str"" + StringEscapeUtils.escapeXml(sgd.getStudyGroupName()) + ""String_Node_Str"" : ""String_Node_Str"";
            xml.append(indent + indent + indent+ ""String_Node_Str""+ cid+ cn+ gn);
          }
          xml.append(""String_Node_Str"");
          xml.append(nls);
        }
      }
      if (sub.getAuditLogs() != null && sub.getAuditLogs().getAuditLogs().size() > 0) {
        this.addAuditLogs(sub.getAuditLogs(),indent + indent + indent,""String_Node_Str"");
      }
      if (sub.getDiscrepancyNotes() != null && sub.getDiscrepancyNotes().getDiscrepancyNotes().size() > 0) {
        this.addDiscrepancyNotes(sub.getDiscrepancyNotes(),indent + indent + indent);
      }
    }
    xml.append(indent + indent + ""String_Node_Str"");
    xml.append(nls);
  }
  if (footer) {
    xml.append(indent + ""String_Node_Str"");
    xml.append(nls);
  }
}",0.9700126134190504
114984,"public EventService(SessionManager sessionManager){
  this.dataSource=sessionManager.getDataSource();
}","public EventService(DataSource dataSource){
  super();
  this.dataSource=dataSource;
}",0.6031746031746031
114985,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void removeStudyEventDefn(int defId,int userId){
  StudyEventDefinitionBean sed=(StudyEventDefinitionBean)getStudyEventDefinitionDao().findByPK(defId);
  UserAccountBean ub=(UserAccountBean)getUserAccountDao().findByPK(userId);
  ArrayList<EventDefinitionCRFBean> eventDefinitionCRFs=(ArrayList)getEventDefinitionCRFDao().findAllByDefinition(defId);
  ArrayList<StudyEventBean> events=(ArrayList)getStudyEventDao().findAllByDefinition(sed.getId());
  sed.setStatus(Status.DELETED);
  sed.setUpdater(ub);
  sed.setUpdatedDate(new Date());
  getStudyEventDefinitionDao().update(sed);
  for (int j=0; j < eventDefinitionCRFs.size(); j++) {
    EventDefinitionCRFBean edc=(EventDefinitionCRFBean)eventDefinitionCRFs.get(j);
    if (!edc.getStatus().equals(Status.DELETED) || !edc.getStatus().equals(Status.AUTO_DELETED)) {
      edc.setStatus(Status.AUTO_DELETED);
      edc.setUpdater(ub);
      edc.setUpdatedDate(new Date());
      getEventDefinitionCRFDao().update(edc);
    }
  }
  for (int j=0; j < events.size(); j++) {
    StudyEventBean event=(StudyEventBean)events.get(j);
    if (!event.getStatus().equals(Status.DELETED) || !event.getStatus().equals(Status.AUTO_DELETED)) {
      event.setStatus(Status.AUTO_DELETED);
      event.setUpdater(ub);
      event.setUpdatedDate(new Date());
      getStudyEventDao().update(event);
      ArrayList eventCRFs=getEventCRFDao().findAllByStudyEvent(event);
      for (int k=0; k < eventCRFs.size(); k++) {
        EventCRFBean eventCRF=(EventCRFBean)eventCRFs.get(k);
        if (!eventCRF.getStatus().equals(Status.DELETED) || !eventCRF.getStatus().equals(Status.AUTO_DELETED)) {
          eventCRF.setStatus(Status.AUTO_DELETED);
          eventCRF.setUpdater(ub);
          eventCRF.setUpdatedDate(new Date());
          getEventCRFDao().update(eventCRF);
          ArrayList itemDatas=getItemDataDao().findAllByEventCRFId(eventCRF.getId());
          for (int a=0; a < itemDatas.size(); a++) {
            ItemDataBean item=(ItemDataBean)itemDatas.get(a);
            if (!item.getStatus().equals(Status.DELETED) || !item.getStatus().equals(Status.AUTO_DELETED)) {
              item.setStatus(Status.AUTO_DELETED);
              item.setUpdater(ub);
              item.setUpdatedDate(new Date());
              getItemDataDao().update(item);
            }
          }
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void removeStudyEventDefn(int defId,int userId){
  StudyEventDefinitionBean sed=(StudyEventDefinitionBean)getStudyEventDefinitionDao().findByPK(defId);
  UserAccountBean ub=(UserAccountBean)getUserAccountDao().findByPK(userId);
  ArrayList<EventDefinitionCRFBean> eventDefinitionCRFs=(ArrayList)getEventDefinitionCRFDao().findAllByDefinition(defId);
  ArrayList<StudyEventBean> events=(ArrayList)getStudyEventDao().findAllByDefinition(sed.getId());
  sed.setStatus(Status.DELETED);
  sed.setUpdater(ub);
  sed.setUpdatedDate(new Date());
  getStudyEventDefinitionDao().update(sed);
  for (int j=0; j < eventDefinitionCRFs.size(); j++) {
    EventDefinitionCRFBean edc=(EventDefinitionCRFBean)eventDefinitionCRFs.get(j);
    if (!edc.getStatus().equals(Status.DELETED) || !edc.getStatus().equals(Status.AUTO_DELETED)) {
      edc.setStatus(Status.AUTO_DELETED);
      edc.setUpdater(ub);
      edc.setUpdatedDate(new Date());
      edc=(EventDefinitionCRFBean)getEventDefinitionCRFDao().update(edc);
      odmImportService.removeSiteDefinitions(edc.getId(),userId);
    }
  }
  for (int j=0; j < events.size(); j++) {
    StudyEventBean event=(StudyEventBean)events.get(j);
    if (!event.getStatus().equals(Status.DELETED) || !event.getStatus().equals(Status.AUTO_DELETED)) {
      event.setStatus(Status.AUTO_DELETED);
      event.setUpdater(ub);
      event.setUpdatedDate(new Date());
      getStudyEventDao().update(event);
      ArrayList eventCRFs=getEventCRFDao().findAllByStudyEvent(event);
      for (int k=0; k < eventCRFs.size(); k++) {
        EventCRFBean eventCRF=(EventCRFBean)eventCRFs.get(k);
        if (!eventCRF.getStatus().equals(Status.DELETED) || !eventCRF.getStatus().equals(Status.AUTO_DELETED)) {
          eventCRF.setStatus(Status.AUTO_DELETED);
          eventCRF.setUpdater(ub);
          eventCRF.setUpdatedDate(new Date());
          getEventCRFDao().update(eventCRF);
          ArrayList itemDatas=getItemDataDao().findAllByEventCRFId(eventCRF.getId());
          for (int a=0; a < itemDatas.size(); a++) {
            ItemDataBean item=(ItemDataBean)itemDatas.get(a);
            if (!item.getStatus().equals(Status.DELETED) || !item.getStatus().equals(Status.AUTO_DELETED)) {
              item.setStatus(Status.AUTO_DELETED);
              item.setUpdater(ub);
              item.setUpdatedDate(new Date());
              getItemDataDao().update(item);
            }
          }
        }
      }
    }
  }
}",0.9796830556684276
114986,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void restoreStudyEventDefn(int defId,int userId){
  StudyEventDefinitionBean sed=(StudyEventDefinitionBean)getStudyEventDefinitionDao().findByPK(defId);
  UserAccountBean ub=(UserAccountBean)getUserAccountDao().findByPK(userId);
  ArrayList<EventDefinitionCRFBean> eventDefinitionCRFs=(ArrayList)getEventDefinitionCRFDao().findAllByDefinition(defId);
  ArrayList<StudyEventBean> events=(ArrayList)getStudyEventDao().findAllByDefinition(sed.getId());
  sed.setStatus(Status.AVAILABLE);
  sed.setUpdater(ub);
  sed.setUpdatedDate(new Date());
  getStudyEventDefinitionDao().update(sed);
  for (int j=0; j < eventDefinitionCRFs.size(); j++) {
    EventDefinitionCRFBean edc=(EventDefinitionCRFBean)eventDefinitionCRFs.get(j);
    CRFBean crf=(CRFBean)getCrfDao().findByPK(edc.getCrfId());
    if (edc.getStatus().equals(Status.AUTO_DELETED) || edc.getStatus().equals(Status.DELETED)) {
      edc.setStatus(Status.AVAILABLE);
      edc.setUpdater(ub);
      edc.setUpdatedDate(new Date());
      getEventDefinitionCRFDao().update(edc);
    }
  }
  for (int j=0; j < events.size(); j++) {
    StudyEventBean event=(StudyEventBean)events.get(j);
    if (event.getStatus().equals(Status.AUTO_DELETED) || event.getStatus().equals(Status.DELETED)) {
      event.setStatus(Status.AVAILABLE);
      event.setUpdater(ub);
      event.setUpdatedDate(new Date());
      getStudyEventDao().update(event);
      ArrayList eventCRFs=getEventCRFDao().findAllByStudyEvent(event);
      for (int k=0; k < eventCRFs.size(); k++) {
        EventCRFBean eventCRF=(EventCRFBean)eventCRFs.get(k);
        if (eventCRF.getStatus().equals(Status.AUTO_DELETED) || eventCRF.getStatus().equals(Status.DELETED)) {
          eventCRF.setStatus(Status.AVAILABLE);
          eventCRF.setUpdater(ub);
          eventCRF.setUpdatedDate(new Date());
          getEventCRFDao().update(eventCRF);
          ArrayList itemDatas=getItemDataDao().findAllByEventCRFId(eventCRF.getId());
          for (int a=0; a < itemDatas.size(); a++) {
            ItemDataBean item=(ItemDataBean)itemDatas.get(a);
            if (item.getStatus().equals(Status.AUTO_DELETED) || item.getStatus().equals(Status.DELETED)) {
              item.setStatus(Status.AVAILABLE);
              item.setUpdater(ub);
              item.setUpdatedDate(new Date());
              getItemDataDao().update(item);
            }
          }
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void restoreStudyEventDefn(int defId,int userId){
  StudyEventDefinitionBean sed=(StudyEventDefinitionBean)getStudyEventDefinitionDao().findByPK(defId);
  UserAccountBean ub=(UserAccountBean)getUserAccountDao().findByPK(userId);
  ArrayList<EventDefinitionCRFBean> eventDefinitionCRFs=(ArrayList)getEventDefinitionCRFDao().findAllByDefinition(defId);
  ArrayList<StudyEventBean> events=(ArrayList)getStudyEventDao().findAllByDefinition(sed.getId());
  sed.setStatus(Status.AVAILABLE);
  sed.setUpdater(ub);
  sed.setUpdatedDate(new Date());
  getStudyEventDefinitionDao().update(sed);
  for (int j=0; j < eventDefinitionCRFs.size(); j++) {
    EventDefinitionCRFBean edc=(EventDefinitionCRFBean)eventDefinitionCRFs.get(j);
    CRFBean crf=(CRFBean)getCrfDao().findByPK(edc.getCrfId());
    if (edc.getStatus().equals(Status.AUTO_DELETED) || edc.getStatus().equals(Status.DELETED)) {
      edc.setStatus(Status.AVAILABLE);
      edc.setUpdater(ub);
      edc.setUpdatedDate(new Date());
      edc=(EventDefinitionCRFBean)getEventDefinitionCRFDao().update(edc);
      odmImportService.restoreSiteDefinitions(edc.getId(),userId);
    }
  }
  for (int j=0; j < events.size(); j++) {
    StudyEventBean event=(StudyEventBean)events.get(j);
    if (event.getStatus().equals(Status.AUTO_DELETED) || event.getStatus().equals(Status.DELETED)) {
      event.setStatus(Status.AVAILABLE);
      event.setUpdater(ub);
      event.setUpdatedDate(new Date());
      getStudyEventDao().update(event);
      ArrayList eventCRFs=getEventCRFDao().findAllByStudyEvent(event);
      for (int k=0; k < eventCRFs.size(); k++) {
        EventCRFBean eventCRF=(EventCRFBean)eventCRFs.get(k);
        if (eventCRF.getStatus().equals(Status.AUTO_DELETED) || eventCRF.getStatus().equals(Status.DELETED)) {
          eventCRF.setStatus(Status.AVAILABLE);
          eventCRF.setUpdater(ub);
          eventCRF.setUpdatedDate(new Date());
          getEventCRFDao().update(eventCRF);
          ArrayList itemDatas=getItemDataDao().findAllByEventCRFId(eventCRF.getId());
          for (int a=0; a < itemDatas.size(); a++) {
            ItemDataBean item=(ItemDataBean)itemDatas.get(a);
            if (item.getStatus().equals(Status.AUTO_DELETED) || item.getStatus().equals(Status.DELETED)) {
              item.setStatus(Status.AVAILABLE);
              item.setUpdater(ub);
              item.setUpdatedDate(new Date());
              getItemDataDao().update(item);
            }
          }
        }
      }
    }
  }
}",0.9810568295114656
114987,"private UserAccount getCurrentUser(){
  UserAccount ub=getUserAccountDao().findById(1);
  return ub;
}","private UserAccount getCurrentUser(){
  UserAccount ub=getUserDaoDomain().findById(1);
  return ub;
}",0.9359605911330048
114988,"public void setEventService(EventService eventService){
  this.eventService=eventService;
}","public void setEventService(EventServiceInterface eventService){
  this.eventService=eventService;
}",0.9528795811518324
114989,"@Transactional public Map<String,Object> importOdmToOC(ODM odm,Page page,String boardId,HttpServletRequest request){
  DataBinder dataBinder=new DataBinder(new Study());
  errors=dataBinder.getBindingResult();
  printOdm(odm);
  CoreResources.setRequestSchemaByStudy(odm.getStudy().get(0).getOID(),dataSource);
  UserAccount userAccount=getCurrentUser();
  saveOrUpdatePageLayout(page,userAccount);
  ODMcomplexTypeDefinitionStudy odmStudy=odm.getStudy().get(0);
  Study study=retrieveStudy(odm,userAccount,odmStudy);
  study.setFilePath(study.getFilePath() + 1);
  String studyPath=Utils.getFilePath() + Utils.getStudyPath(study.getOc_oid(),study.getFilePath());
  if (new File(studyPath).exists()) {
    try {
      FileUtils.deleteDirectory(new File(studyPath));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  Form[] fmCrfs=getAllCrfsByProtIdFromFormManager(boardId,request);
  StudyEventDefinition studyEventDefinition=null;
  List<ODMcomplexTypeDefinitionMetaDataVersion> odmMetadataVersions=odmStudy.getMetaDataVersion();
  List<ODMcomplexTypeDefinitionStudyEventDef> odmStudyEventDefs=saveOrUpdateEvent(userAccount,study,odmMetadataVersions,errors);
  CrfBean crf=null;
  FormLayout formLayout=null;
  Set<Long> publishedVersions=saveOrUpdateCrf(userAccount,study,odmMetadataVersions,fmCrfs,errors,request);
  List<ODMcomplexTypeDefinitionStudyEventRef> odmStudyEventRefs=odmMetadataVersions.get(0).getProtocol().getStudyEventRef();
  for (  ODMcomplexTypeDefinitionStudyEventRef odmStudyEventRef : odmStudyEventRefs) {
    for (    ODMcomplexTypeDefinitionStudyEventDef odmStudyEventDef : odmStudyEventDefs) {
      if (odmStudyEventDef.getOID().equals(odmStudyEventRef.getStudyEventOID())) {
        studyEventDefinition=getStudyEventDefDao().findByOcOID(odmStudyEventDef.getOID());
        studyEventDefinition.setOrdinal(odmStudyEventRef.getOrderNumber().intValue());
        studyEventDefinition=getStudyEventDefDao().saveOrUpdate(studyEventDefinition);
        List<EventDefinitionCrf> jsonEventDefCrfList=new ArrayList<>();
        EventDefinitionCrf eventDefinitionCrf=null;
        for (        ODMcomplexTypeDefinitionFormRef odmFormRef : odmStudyEventDef.getFormRef()) {
          crf=getCrfDao().findByOcOID(odmFormRef.getFormOID());
          if (crf != null) {
            eventDefinitionCrf=getEventDefinitionCrfDao().findByStudyEventDefinitionIdAndCRFIdAndStudyId(studyEventDefinition.getStudyEventDefinitionId(),crf.getCrfId(),study.getStudyId());
            if (eventDefinitionCrf != null && !eventDefinitionCrf.getStatusId().equals(Status.AVAILABLE.getCode())) {
              eventDefinitionCrf.setStatusId(Status.AVAILABLE.getCode());
              eventService.restoreCrfFromEventDefinition(eventDefinitionCrf.getEventDefinitionCrfId(),studyEventDefinition.getStudyEventDefinitionId(),userAccount.getUserId());
            }
            String defaultVersionName=null;
            OCodmComplexTypeDefinitionConfigurationParameters conf=odmFormRef.getConfigurationParameters();
            List<OCodmComplexTypeDefinitionFormLayoutRef> formLayoutRefs=odmFormRef.getFormLayoutRef();
            if (formLayoutRefs.size() == 1 && formLayoutRefs.get(0).getIsDefaultVersion() == null) {
              defaultVersionName=formLayoutRefs.get(0).getOID();
            }
 else {
              for (              OCodmComplexTypeDefinitionFormLayoutRef formLayoutRef : formLayoutRefs) {
                if (formLayoutRef.getIsDefaultVersion().equalsIgnoreCase(""String_Node_Str"")) {
                  defaultVersionName=formLayoutRef.getOID();
                }
              }
            }
            if (defaultVersionName == null) {
              String formName=""String_Node_Str"";
              for (              ODMcomplexTypeDefinitionFormDef odmFormDef : odmMetadataVersions.get(0).getFormDef()) {
                if (odmFormDef.getOID().equals(odmFormRef.getFormOID())) {
                  formName=odmFormDef.getName();
                }
              }
              errors.rejectValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + formName + ""String_Node_Str""+ odmStudyEventDef.getName()+ ""String_Node_Str"");
              logger.info(""String_Node_Str"" + formName + ""String_Node_Str""+ odmStudyEventDef.getName()+ ""String_Node_Str"");
              defaultVersionName=formLayoutRefs.get(0).getOID();
            }
            formLayout=getFormLayoutDao().findByNameCrfId(defaultVersionName,crf.getCrfId());
            EventDefinitionCrfDTO edcObj=new EventDefinitionCrfDTO();
            edcObj.setUserAccount(userAccount);
            edcObj.setConf(conf);
            edcObj.setCrf(crf);
            edcObj.setEventDefinitionCrf(eventDefinitionCrf);
            edcObj.setOdmFormRef(odmFormRef);
            edcObj.setStudy(study);
            edcObj.setFormLayout(formLayout);
            edcObj.setStudyEventDefinition(studyEventDefinition);
            edcObj.setOrdinal(odmFormRef.getOrderNumber().intValue());
            EDCTagDTO populateEDCTagParameter=new EDCTagDTO();
            populateEDCTagParameter.setConf(conf);
            populateEDCTagParameter.setConf(conf);
            populateEDCTagParameter.setEventDefinitionCrf(eventDefinitionCrf);
            populateEDCTagParameter.setUserAccount(userAccount);
            eventDefinitionCrf=saveOrUpdateEventDefnCrf(new EventDefinitionCrfDTO(edcObj));
            saveOrUpdateEDCTag(new EDCTagDTO(populateEDCTagParameter),studyEventDefinition,crf);
            jsonEventDefCrfList.add(eventDefinitionCrf);
          }
        }
        List<EventDefinitionCrf> ocEventDefCrfList=getEventDefinitionCrfDao().findAvailableByStudyEventDefStudy(studyEventDefinition.getStudyEventDefinitionId(),study.getStudyId());
        for (        EventDefinitionCrf ocEventDefCrf : ocEventDefCrfList) {
          if (!jsonEventDefCrfList.contains(ocEventDefCrf)) {
            ocEventDefCrf.setStatusId(Status.DELETED.getCode());
            ocEventDefCrf.setUpdateId(userAccount.getUserId());
            ocEventDefCrf.setDateUpdated(new Date());
            getEventDefinitionCrfDao().saveOrUpdate(ocEventDefCrf);
            eventService.removeCrfFromEventDefinition(ocEventDefCrf.getEventDefinitionCrfId(),studyEventDefinition.getStudyEventDefinitionId(),userAccount.getUserId(),study.getStudyId());
          }
        }
      }
    }
  }
  if (errors.hasErrors()) {
    List<ErrorObj> errList=getErrorList(errors.getAllErrors());
    throw new CustomRuntimeException(""String_Node_Str"",errList);
  }
  Map<String,Object> map=new HashMap<>();
  map.put(""String_Node_Str"",study);
  PublishingDTO publishingDTO=new PublishingDTO();
  publishingDTO.setVersionIds(publishedVersions);
  map.put(""String_Node_Str"",publishingDTO);
  return map;
}","@Transactional public Map<String,Object> importOdmToOC(ODM odm,Page page,String boardId,HttpServletRequest request){
  DataBinder dataBinder=new DataBinder(new Study());
  errors=dataBinder.getBindingResult();
  printOdm(odm);
  CoreResources.setRequestSchemaByStudy(odm.getStudy().get(0).getOID(),dataSource);
  UserAccount userAccount=getCurrentUser();
  saveOrUpdatePageLayout(page,userAccount);
  ODMcomplexTypeDefinitionStudy odmStudy=odm.getStudy().get(0);
  Study study=retrieveStudy(odm,userAccount,odmStudy);
  study.setFilePath(study.getFilePath() + 1);
  String studyPath=Utils.getFilePath() + Utils.getStudyPath(study.getOc_oid(),study.getFilePath());
  if (new File(studyPath).exists()) {
    try {
      FileUtils.deleteDirectory(new File(studyPath));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  Form[] fmCrfs=getAllCrfsByProtIdFromFormManager(boardId,request);
  StudyEventDefinition studyEventDefinition=null;
  List<ODMcomplexTypeDefinitionMetaDataVersion> odmMetadataVersions=odmStudy.getMetaDataVersion();
  List<ODMcomplexTypeDefinitionStudyEventDef> odmStudyEventDefs=saveOrUpdateEvent(userAccount,study,odmMetadataVersions,errors);
  CrfBean crf=null;
  FormLayout formLayout=null;
  Set<Long> publishedVersions=saveOrUpdateCrf(userAccount,study,odmMetadataVersions,fmCrfs,errors,request);
  List<ODMcomplexTypeDefinitionStudyEventRef> odmStudyEventRefs=odmMetadataVersions.get(0).getProtocol().getStudyEventRef();
  for (  ODMcomplexTypeDefinitionStudyEventRef odmStudyEventRef : odmStudyEventRefs) {
    for (    ODMcomplexTypeDefinitionStudyEventDef odmStudyEventDef : odmStudyEventDefs) {
      if (odmStudyEventDef.getOID().equals(odmStudyEventRef.getStudyEventOID())) {
        studyEventDefinition=getStudyEventDefDao().findByOcOID(odmStudyEventDef.getOID());
        studyEventDefinition.setOrdinal(odmStudyEventRef.getOrderNumber().intValue());
        studyEventDefinition=getStudyEventDefDao().saveOrUpdate(studyEventDefinition);
        List<EventDefinitionCrf> jsonEventDefCrfList=new ArrayList<>();
        EventDefinitionCrf eventDefinitionCrf=null;
        for (        ODMcomplexTypeDefinitionFormRef odmFormRef : odmStudyEventDef.getFormRef()) {
          crf=getCrfDao().findByOcOID(odmFormRef.getFormOID());
          if (crf != null) {
            eventDefinitionCrf=getEventDefinitionCrfDao().findByStudyEventDefinitionIdAndCRFIdAndStudyId(studyEventDefinition.getStudyEventDefinitionId(),crf.getCrfId(),study.getStudyId());
            if (eventDefinitionCrf != null && !eventDefinitionCrf.getStatusId().equals(Status.AVAILABLE.getCode())) {
              eventDefinitionCrf.setStatusId(Status.AVAILABLE.getCode());
              eventDefinitionCrf.setUpdateId(userAccount.getUserId());
              eventDefinitionCrf.setDateUpdated(new Date());
              eventDefinitionCrf=getEventDefinitionCrfDao().saveOrUpdate(eventDefinitionCrf);
              restoreSiteDefinitions(eventDefinitionCrf.getEventDefinitionCrfId(),userAccount.getUserId());
              eventService.restoreCrfFromEventDefinition(eventDefinitionCrf.getEventDefinitionCrfId(),studyEventDefinition.getStudyEventDefinitionId(),userAccount.getUserId());
            }
            String defaultVersionName=null;
            OCodmComplexTypeDefinitionConfigurationParameters conf=odmFormRef.getConfigurationParameters();
            List<OCodmComplexTypeDefinitionFormLayoutRef> formLayoutRefs=odmFormRef.getFormLayoutRef();
            if (formLayoutRefs.size() == 1 && formLayoutRefs.get(0).getIsDefaultVersion() == null) {
              defaultVersionName=formLayoutRefs.get(0).getOID();
            }
 else {
              for (              OCodmComplexTypeDefinitionFormLayoutRef formLayoutRef : formLayoutRefs) {
                if (formLayoutRef.getIsDefaultVersion().equalsIgnoreCase(""String_Node_Str"")) {
                  defaultVersionName=formLayoutRef.getOID();
                }
              }
            }
            if (defaultVersionName == null) {
              String formName=""String_Node_Str"";
              for (              ODMcomplexTypeDefinitionFormDef odmFormDef : odmMetadataVersions.get(0).getFormDef()) {
                if (odmFormDef.getOID().equals(odmFormRef.getFormOID())) {
                  formName=odmFormDef.getName();
                }
              }
              errors.rejectValue(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + formName + ""String_Node_Str""+ odmStudyEventDef.getName()+ ""String_Node_Str"");
              logger.info(""String_Node_Str"" + formName + ""String_Node_Str""+ odmStudyEventDef.getName()+ ""String_Node_Str"");
              defaultVersionName=formLayoutRefs.get(0).getOID();
            }
            formLayout=getFormLayoutDao().findByNameCrfId(defaultVersionName,crf.getCrfId());
            EventDefinitionCrfDTO edcObj=new EventDefinitionCrfDTO();
            edcObj.setUserAccount(userAccount);
            edcObj.setConf(conf);
            edcObj.setCrf(crf);
            edcObj.setEventDefinitionCrf(eventDefinitionCrf);
            edcObj.setOdmFormRef(odmFormRef);
            edcObj.setStudy(study);
            edcObj.setFormLayout(formLayout);
            edcObj.setStudyEventDefinition(studyEventDefinition);
            edcObj.setOrdinal(odmFormRef.getOrderNumber().intValue());
            EDCTagDTO populateEDCTagParameter=new EDCTagDTO();
            populateEDCTagParameter.setConf(conf);
            populateEDCTagParameter.setEventDefinitionCrf(eventDefinitionCrf);
            populateEDCTagParameter.setUserAccount(userAccount);
            eventDefinitionCrf=saveOrUpdateEventDefnCrf(new EventDefinitionCrfDTO(edcObj));
            saveOrUpdateEDCTag(new EDCTagDTO(populateEDCTagParameter),studyEventDefinition,crf);
            jsonEventDefCrfList.add(eventDefinitionCrf);
          }
        }
        List<EventDefinitionCrf> ocEventDefCrfList=getEventDefinitionCrfDao().findAvailableByStudyEventDefStudy(studyEventDefinition.getStudyEventDefinitionId(),study.getStudyId());
        for (        EventDefinitionCrf ocEventDefCrf : ocEventDefCrfList) {
          if (!jsonEventDefCrfList.contains(ocEventDefCrf)) {
            ocEventDefCrf.setStatusId(Status.DELETED.getCode());
            ocEventDefCrf.setUpdateId(userAccount.getUserId());
            ocEventDefCrf.setDateUpdated(new Date());
            ocEventDefCrf=getEventDefinitionCrfDao().saveOrUpdate(ocEventDefCrf);
            removeSiteDefinitions(ocEventDefCrf.getEventDefinitionCrfId(),userAccount.getUserId());
            eventService.removeCrfFromEventDefinition(ocEventDefCrf.getEventDefinitionCrfId(),studyEventDefinition.getStudyEventDefinitionId(),userAccount.getUserId(),study.getStudyId());
          }
        }
      }
    }
  }
  if (errors.hasErrors()) {
    List<ErrorObj> errList=getErrorList(errors.getAllErrors());
    throw new CustomRuntimeException(""String_Node_Str"",errList);
  }
  Map<String,Object> map=new HashMap<>();
  map.put(""String_Node_Str"",study);
  PublishingDTO publishingDTO=new PublishingDTO();
  publishingDTO.setVersionIds(publishedVersions);
  map.put(""String_Node_Str"",publishingDTO);
  return map;
}",0.9641548739314704
114990,"public OdmImportServiceImpl(DataSource dataSource){
  this.dataSource=dataSource;
}","public OdmImportServiceImpl(UserAccountDao userDaoDomain,StudyUserRoleDao studyUserRoleDao,StudyEventDefinitionDao studyEventDefDao,EventDefinitionCrfDao eventDefinitionCrfDao,CrfDao crfDao,CrfVersionDao crfVersionDao,FormLayoutDao formLayoutDao,StudyDao studyDao,EventDefinitionCrfTagDao eventDefinitionCrfTagDao,StudyParameterValueDao studyParameterValueDao,DataSource dataSource,XformParser xformParser,XformMetaDataService xformService,CoreResources coreResources,EventServiceInterface eventService,PageLayoutDao pageLayoutDao){
  super();
  this.userDaoDomain=userDaoDomain;
  this.studyUserRoleDao=studyUserRoleDao;
  this.studyEventDefDao=studyEventDefDao;
  this.eventDefinitionCrfDao=eventDefinitionCrfDao;
  this.crfDao=crfDao;
  this.crfVersionDao=crfVersionDao;
  this.formLayoutDao=formLayoutDao;
  this.studyDao=studyDao;
  this.eventDefinitionCrfTagDao=eventDefinitionCrfTagDao;
  this.studyParameterValueDao=studyParameterValueDao;
  this.dataSource=dataSource;
  this.xformParser=xformParser;
  this.xformService=xformService;
  this.coreResources=coreResources;
  this.eventService=eventService;
  this.pageLayoutDao=pageLayoutDao;
}",0.0583468395461912
114991,"public UserAccountDao getUserAccountDao(){
  return userAccountDao;
}","public UserAccountDao getUserAccountDao(){
  return userDaoDomain;
}",0.9051094890510948
114992,"public void setUserAccountDao(UserAccountDao userAccountDao){
  this.userAccountDao=userAccountDao;
}","public void setUserAccountDao(UserAccountDao userAccountDao){
  this.userDaoDomain=userAccountDao;
}",0.9353233830845772
114993,"private ArrayList<ExportFormDataBean> getFormDataForClinicalStudy(StudySubject ss,StudyEvent se,String formVersionOID){
  List<ExportFormDataBean> formDataBean=new ArrayList<ExportFormDataBean>();
  boolean formCheck=true;
  if (formVersionOID != null)   formCheck=false;
  boolean hiddenCrfCheckPassed=true;
  List<CrfBean> hiddenCrfs=new ArrayList<CrfBean>();
  for (  EventCrf ecrf : se.getEventCrfs()) {
    EventDefinitionCrf eventDefinitionCrf=null;
    List<EventDefinitionCrf> edcs=se.getStudyEventDefinition().getEventDefinitionCrfs();
    hiddenCrfCheckPassed=true;
    int siteId=0;
    int parentStudyId=0;
    Study study=ss.getStudy();
    if (study.getStudy() != null) {
      if (isActiveRoleAtSite) {
        siteId=study.getStudyId();
        parentStudyId=study.getStudy().getStudyId();
        hiddenCrfs=listOfHiddenCrfs(siteId,parentStudyId,edcs,ecrf);
      }
 else {
        parentStudyId=study.getStudy().getStudyId();
        hiddenCrfs=listOfHiddenCrfs(parentStudyId,parentStudyId,edcs,ecrf);
      }
      if (hiddenCrfs.contains(ecrf.getCrfVersion().getCrf())) {
        hiddenCrfCheckPassed=false;
      }
      eventDefinitionCrf=getEventDefinitionCrfDao().findByStudyEventDefinitionIdAndCRFIdAndStudyId(se.getStudyEventDefinition().getStudyEventDefinitionId(),ecrf.getFormLayout().getCrf().getCrfId(),study.getStudyId());
      if (eventDefinitionCrf == null) {
        eventDefinitionCrf=getEventDefinitionCrfDao().findByStudyEventDefinitionIdAndCRFIdAndStudyId(se.getStudyEventDefinition().getStudyEventDefinitionId(),ecrf.getFormLayout().getCrf().getCrfId(),study.getStudy().getStudyId());
      }
    }
 else {
      eventDefinitionCrf=getEventDefinitionCrfDao().findByStudyEventDefinitionIdAndCRFIdAndStudyId(se.getStudyEventDefinition().getStudyEventDefinitionId(),ecrf.getFormLayout().getCrf().getCrfId(),study.getStudyId());
    }
    if (hiddenCrfCheckPassed) {
      if (!formCheck) {
        if (ecrf.getCrfVersion().getOcOid().equals(formVersionOID))         formCheck=true;
 else         formCheck=false;
      }
      if (formCheck) {
        ExportFormDataBean dataBean=new ExportFormDataBean();
        dataBean.setEventDefinitionCrf(eventDefinitionCrf);
        dataBean.setEventCrf(ecrf);
        dataBean.setFormLayout(ecrf.getFormLayout());
        dataBean.setFormName(ecrf.getCrfVersion().getCrf().getName());
        dataBean.setItemGroupData(fetchItemData(ecrf.getCrfVersion().getItemGroupMetadatas(),ecrf.getEventCrfId(),ecrf.getCrfVersion().getVersioningMaps(),ecrf));
        dataBean.setFormOID(ecrf.getCrfVersion().getCrf().getOcOid());
        if (ecrf.getDateInterviewed() != null)         dataBean.setInterviewDate(ecrf.getDateInterviewed() + ""String_Node_Str"");
        if (ecrf.getInterviewerName() != null)         dataBean.setInterviewerName(ecrf.getInterviewerName());
        dataBean.setStatus(fetchEventCRFStatus(ecrf));
        dataBean.setCreatedDate(ecrf.getDateCreated());
        dataBean.setCreatedBy(ecrf.getUserAccount().getUserName());
        dataBean.setUpdatedDate(ecrf.getDateUpdated());
        UserAccount updatedUserAccount=userAccountDao.findById(ecrf.getUpdateId());
        dataBean.setUpdatedBy(updatedUserAccount.getUserName());
        if (ecrf.getFormLayout().getName() != null)         dataBean.setFormLayoutName(ecrf.getFormLayout().getName());
        if (collectAudits)         dataBean.setAuditLogs(fetchAuditLogs(ecrf.getEventCrfId(),""String_Node_Str"",ecrf.getCrfVersion().getCrf().getOcOid(),null));
        if (collectDns)         dataBean.setDiscrepancyNotes(fetchDiscrepancyNotes(ecrf));
        formDataBean.add(dataBean);
        if (formVersionOID != null)         formCheck=false;
      }
    }
  }
  return (ArrayList<ExportFormDataBean>)formDataBean;
}","private ArrayList<ExportFormDataBean> getFormDataForClinicalStudy(Study study,StudySubject ss,StudyEvent se,String formVersionOID){
  List<ExportFormDataBean> formDataBean=new ArrayList<ExportFormDataBean>();
  boolean formCheck=true;
  if (formVersionOID != null)   formCheck=false;
  boolean hiddenCrfCheckPassed=true;
  List<CrfBean> hiddenCrfs=new ArrayList<CrfBean>();
  for (  EventCrf ecrf : se.getEventCrfs()) {
    EventDefinitionCrf eventDefinitionCrf=null;
    List<EventDefinitionCrf> edcs=se.getStudyEventDefinition().getEventDefinitionCrfs();
    hiddenCrfCheckPassed=true;
    int siteId=0;
    int parentStudyId=0;
    if (study.getStudy() != null) {
      if (isActiveRoleAtSite) {
        siteId=study.getStudyId();
        parentStudyId=study.getStudy().getStudyId();
        hiddenCrfs=listOfHiddenCrfs(siteId,parentStudyId,edcs,ecrf);
      }
 else {
        parentStudyId=study.getStudy().getStudyId();
        hiddenCrfs=listOfHiddenCrfs(parentStudyId,parentStudyId,edcs,ecrf);
      }
      if (hiddenCrfs.contains(ecrf.getCrfVersion().getCrf())) {
        hiddenCrfCheckPassed=false;
      }
      eventDefinitionCrf=getEventDefinitionCrfDao().findByStudyEventDefinitionIdAndCRFIdAndStudyId(se.getStudyEventDefinition().getStudyEventDefinitionId(),ecrf.getFormLayout().getCrf().getCrfId(),study.getStudyId());
      if (eventDefinitionCrf == null) {
        eventDefinitionCrf=getEventDefinitionCrfDao().findByStudyEventDefinitionIdAndCRFIdAndStudyId(se.getStudyEventDefinition().getStudyEventDefinitionId(),ecrf.getFormLayout().getCrf().getCrfId(),study.getStudy().getStudyId());
      }
    }
 else {
      eventDefinitionCrf=getEventDefinitionCrfDao().findByStudyEventDefinitionIdAndCRFIdAndStudyId(se.getStudyEventDefinition().getStudyEventDefinitionId(),ecrf.getFormLayout().getCrf().getCrfId(),study.getStudyId());
    }
    if (hiddenCrfCheckPassed) {
      if (!formCheck) {
        if (ecrf.getCrfVersion().getOcOid().equals(formVersionOID))         formCheck=true;
 else         formCheck=false;
      }
      if (formCheck) {
        ExportFormDataBean dataBean=new ExportFormDataBean();
        dataBean.setEventDefinitionCrf(eventDefinitionCrf);
        dataBean.setEventCrf(ecrf);
        dataBean.setFormLayout(ecrf.getFormLayout());
        dataBean.setFormName(ecrf.getCrfVersion().getCrf().getName());
        dataBean.setItemGroupData(fetchItemData(ecrf.getCrfVersion().getItemGroupMetadatas(),ecrf.getEventCrfId(),ecrf.getCrfVersion().getVersioningMaps(),ecrf));
        dataBean.setFormOID(ecrf.getCrfVersion().getCrf().getOcOid());
        if (ecrf.getDateInterviewed() != null)         dataBean.setInterviewDate(ecrf.getDateInterviewed() + ""String_Node_Str"");
        if (ecrf.getInterviewerName() != null)         dataBean.setInterviewerName(ecrf.getInterviewerName());
        dataBean.setStatus(fetchEventCRFStatus(ecrf));
        dataBean.setCreatedDate(ecrf.getDateCreated());
        dataBean.setCreatedBy(ecrf.getUserAccount().getUserName());
        dataBean.setUpdatedDate(ecrf.getDateUpdated());
        UserAccount updatedUserAccount=userAccountDao.findById(ecrf.getUpdateId());
        dataBean.setUpdatedBy(updatedUserAccount.getUserName());
        if (ecrf.getFormLayout().getName() != null)         dataBean.setFormLayoutName(ecrf.getFormLayout().getName());
        if (collectAudits)         dataBean.setAuditLogs(fetchAuditLogs(ecrf.getEventCrfId(),""String_Node_Str"",ecrf.getCrfVersion().getCrf().getOcOid(),null));
        if (collectDns)         dataBean.setDiscrepancyNotes(fetchDiscrepancyNotes(ecrf));
        formDataBean.add(dataBean);
        if (formVersionOID != null)         formCheck=false;
      }
    }
  }
  return (ArrayList<ExportFormDataBean>)formDataBean;
}",0.9942720127880644
114994,"/** 
 * This is a generic method where the control enters first. Regardless what URL is being used. Depending upon the combination of URL parameters, further course is determined.
 */
@Override public LinkedHashMap<String,OdmClinicalDataBean> getClinicalData(String studyOID,String studySubjectOID,String studyEventOID,String formVersionOID,Boolean collectDNs,Boolean collectAudit,Locale locale,int userId){
  setLocale(locale);
  setCollectDns(collectDNs);
  setCollectAudits(collectAudit);
  LinkedHashMap<String,OdmClinicalDataBean> clinicalDataHash=new LinkedHashMap<String,OdmClinicalDataBean>();
  UserAccount userAccount=getUserAccountDao().findByColumnName(userId,""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + studyOID + ""String_Node_Str""+ studySubjectOID+ ""String_Node_Str""+ studyEventOID+ ""String_Node_Str""+ formVersionOID+ ""String_Node_Str""+ collectDNs+ ""String_Node_Str""+ collectAudit);
  LOGGER.info(""String_Node_Str"");
  int parentStudyId=0;
  Study publicStudy=getStudyDao().findPublicStudy(studyOID);
  if (publicStudy.getStudy() != null) {
    isActiveRoleAtSite=true;
    parentStudyId=publicStudy.getStudy().getStudyId();
  }
 else {
    parentStudyId=publicStudy.getStudyId();
    isActiveRoleAtSite=false;
  }
  ArrayList<StudyUserRole> surlist=getStudyUserRoleDao().findAllUserRolesByUserAccountStudySites(userAccount,publicStudy.getStudyId(),parentStudyId);
  if (surlist == null || surlist.size() == 0) {
    return null;
  }
  if (!studySubjectOID.equals(INDICATE_ALL)) {
    StudySubjectDao ssdao=getStudySubjectDao();
    StudySubject ss=(StudySubject)getStudySubjectDao().findByColumnName(studySubjectOID,""String_Node_Str"");
    studyOID=ss.getStudy().getOc_oid();
  }
  if (studyEventOID.equals(INDICATE_ALL) && formVersionOID.equals(INDICATE_ALL) && !studySubjectOID.equals(INDICATE_ALL)&& !studyOID.equals(INDICATE_ALL)) {
    LOGGER.info(""String_Node_Str"");
    LOGGER.info(""String_Node_Str"");
    clinicalDataHash.put(studyOID,getClinicalData(studyOID,studySubjectOID));
    return clinicalDataHash;
  }
 else   if (studyEventOID.equals(INDICATE_ALL) && formVersionOID.equals(INDICATE_ALL) && studySubjectOID.equals(INDICATE_ALL)&& !studyOID.equals(INDICATE_ALL)) {
    LOGGER.info(""String_Node_Str"");
    return getClinicalData(studyOID);
  }
 else   if (!studyEventOID.equals(INDICATE_ALL) && !studySubjectOID.equals(INDICATE_ALL) && !studyOID.equals(INDICATE_ALL)&& formVersionOID.equals(INDICATE_ALL)) {
    LOGGER.info(""String_Node_Str"");
    clinicalDataHash.put(studyOID,getClinicalDatas(studyOID,studySubjectOID,studyEventOID,null));
    return clinicalDataHash;
  }
 else   if (!studyEventOID.equals(INDICATE_ALL) && !studySubjectOID.equals(INDICATE_ALL) && !studyOID.equals(INDICATE_ALL)&& !formVersionOID.equals(INDICATE_ALL)) {
    clinicalDataHash.put(studyOID,getClinicalDatas(studyOID,studySubjectOID,studyEventOID,formVersionOID));
    return clinicalDataHash;
  }
  return null;
}","/** 
 * This is a generic method where the control enters first. Regardless what URL is being used. Depending upon the combination of URL parameters, further course is determined.
 */
@Override public LinkedHashMap<String,OdmClinicalDataBean> getClinicalData(String studyOID,String studySubjectOID,String studyEventOID,String formVersionOID,Boolean collectDNs,Boolean collectAudit,Locale locale,int userId){
  setLocale(locale);
  setCollectDns(collectDNs);
  setCollectAudits(collectAudit);
  LinkedHashMap<String,OdmClinicalDataBean> clinicalDataHash=new LinkedHashMap<String,OdmClinicalDataBean>();
  UserAccount userAccount=getUserAccountDao().findByColumnName(userId,""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"" + studyOID + ""String_Node_Str""+ studySubjectOID+ ""String_Node_Str""+ studyEventOID+ ""String_Node_Str""+ formVersionOID+ ""String_Node_Str""+ collectDNs+ ""String_Node_Str""+ collectAudit);
  LOGGER.info(""String_Node_Str"");
  int parentStudyId=0;
  Study publicStudy=getStudyDao().findPublicStudy(studyOID);
  if (publicStudy.getStudy() != null) {
    isActiveRoleAtSite=true;
    parentStudyId=publicStudy.getStudy().getStudyId();
  }
 else {
    parentStudyId=publicStudy.getStudyId();
    isActiveRoleAtSite=false;
  }
  ArrayList<StudyUserRole> surlist=getStudyUserRoleDao().findAllUserRolesByUserAccountStudySites(userAccount,publicStudy.getStudyId(),parentStudyId);
  if (surlist == null || surlist.size() == 0) {
    return null;
  }
  if (!studySubjectOID.equals(INDICATE_ALL)) {
  }
  if (studyEventOID.equals(INDICATE_ALL) && formVersionOID.equals(INDICATE_ALL) && !studySubjectOID.equals(INDICATE_ALL)&& !studyOID.equals(INDICATE_ALL)) {
    LOGGER.info(""String_Node_Str"");
    LOGGER.info(""String_Node_Str"");
    clinicalDataHash.put(studyOID,getClinicalData(studyOID,studySubjectOID));
    return clinicalDataHash;
  }
 else   if (studyEventOID.equals(INDICATE_ALL) && formVersionOID.equals(INDICATE_ALL) && studySubjectOID.equals(INDICATE_ALL)&& !studyOID.equals(INDICATE_ALL)) {
    LOGGER.info(""String_Node_Str"");
    return getClinicalData(studyOID);
  }
 else   if (!studyEventOID.equals(INDICATE_ALL) && !studySubjectOID.equals(INDICATE_ALL) && !studyOID.equals(INDICATE_ALL)&& formVersionOID.equals(INDICATE_ALL)) {
    LOGGER.info(""String_Node_Str"");
    clinicalDataHash.put(studyOID,getClinicalDatas(studyOID,studySubjectOID,studyEventOID,null));
    return clinicalDataHash;
  }
 else   if (!studyEventOID.equals(INDICATE_ALL) && !studySubjectOID.equals(INDICATE_ALL) && !studyOID.equals(INDICATE_ALL)&& !formVersionOID.equals(INDICATE_ALL)) {
    clinicalDataHash.put(studyOID,getClinicalDatas(studyOID,studySubjectOID,studyEventOID,formVersionOID));
    return clinicalDataHash;
  }
  return null;
}",0.6011967617036255
114995,"@SuppressWarnings(""String_Node_Str"") private ExportSubjectDataBean setExportSubjectDataBean(StudySubject studySubj,Study study,List<StudyEvent> studyEvents,String formVersionOID){
  ExportSubjectDataBean exportSubjectDataBean=new ExportSubjectDataBean();
  if (subjectBelongsToStudy(study,studySubj)) {
    if (studySubj.getSubject().getDateOfBirth() != null)     exportSubjectDataBean.setDateOfBirth(studySubj.getSubject().getDateOfBirth() + ""String_Node_Str"");
    exportSubjectDataBean.setSubjectGender(studySubj.getSubject().getGender() + ""String_Node_Str"");
    for (    SubjectGroupMap subjGrpMap : studySubj.getSubjectGroupMaps()) {
      SubjectGroupDataBean subjGrpDataBean=new SubjectGroupDataBean();
      subjGrpDataBean.setStudyGroupClassId(""String_Node_Str"" + subjGrpMap.getStudyGroupClass().getStudyGroupClassId());
      subjGrpDataBean.setStudyGroupClassName(subjGrpMap.getStudyGroup().getStudyGroupClass().getName());
      subjGrpDataBean.setStudyGroupName(subjGrpMap.getStudyGroup().getName());
      exportSubjectDataBean.getSubjectGroupData().add(subjGrpDataBean);
    }
    exportSubjectDataBean.setStudySubject(studySubj);
    exportSubjectDataBean.setStudySubjectId(studySubj.getLabel());
    if (studySubj.getSubject().getUniqueIdentifier() != null)     exportSubjectDataBean.setUniqueIdentifier(studySubj.getSubject().getUniqueIdentifier());
    exportSubjectDataBean.setSecondaryId(studySubj.getSecondaryLabel());
    exportSubjectDataBean.setStatus(studySubj.getStatus().toString());
    if (isCollectAudits())     exportSubjectDataBean.setAuditLogs(fetchAuditLogs(studySubj.getStudySubjectId(),""String_Node_Str"",studySubj.getOcOid(),null));
    AuditLogsBean subjectGroupMapLogs=fetchAuditLogs(studySubj.getStudySubjectId(),""String_Node_Str"",studySubj.getOcOid(),null);
    AuditLogsBean subjectLogs=fetchAuditLogs(studySubj.getSubject().getSubjectId(),""String_Node_Str"",studySubj.getOcOid(),null);
    exportSubjectDataBean.getAuditLogs().getAuditLogs().addAll(subjectGroupMapLogs.getAuditLogs());
    exportSubjectDataBean.getAuditLogs().getAuditLogs().addAll(subjectLogs.getAuditLogs());
    Collections.sort(exportSubjectDataBean.getAuditLogs().getAuditLogs());
    if (isCollectDns())     exportSubjectDataBean.setDiscrepancyNotes(fetchDiscrepancyNotes(studySubj));
    exportSubjectDataBean.setExportStudyEventData(setExportStudyEventDataBean(studySubj,studyEvents,formVersionOID));
    exportSubjectDataBean.setSubjectOID(studySubj.getOcOid());
    exportSubjectDataBean.setEnrollmentDate(studySubj.getEnrollmentDate() + ""String_Node_Str"");
  }
  return exportSubjectDataBean;
}","@SuppressWarnings(""String_Node_Str"") private ExportSubjectDataBean setExportSubjectDataBean(StudySubject studySubj,Study study,List<StudyEvent> studyEvents,String formVersionOID){
  ExportSubjectDataBean exportSubjectDataBean=new ExportSubjectDataBean();
  if (subjectBelongsToStudy(study,studySubj)) {
    if (studySubj.getSubject().getDateOfBirth() != null)     exportSubjectDataBean.setDateOfBirth(studySubj.getSubject().getDateOfBirth() + ""String_Node_Str"");
    exportSubjectDataBean.setSubjectGender(studySubj.getSubject().getGender() + ""String_Node_Str"");
    for (    SubjectGroupMap subjGrpMap : studySubj.getSubjectGroupMaps()) {
      SubjectGroupDataBean subjGrpDataBean=new SubjectGroupDataBean();
      subjGrpDataBean.setStudyGroupClassId(""String_Node_Str"" + subjGrpMap.getStudyGroupClass().getStudyGroupClassId());
      subjGrpDataBean.setStudyGroupClassName(subjGrpMap.getStudyGroup().getStudyGroupClass().getName());
      subjGrpDataBean.setStudyGroupName(subjGrpMap.getStudyGroup().getName());
      exportSubjectDataBean.getSubjectGroupData().add(subjGrpDataBean);
    }
    exportSubjectDataBean.setStudySubject(studySubj);
    exportSubjectDataBean.setStudySubjectId(studySubj.getLabel());
    if (studySubj.getSubject().getUniqueIdentifier() != null)     exportSubjectDataBean.setUniqueIdentifier(studySubj.getSubject().getUniqueIdentifier());
    exportSubjectDataBean.setSecondaryId(studySubj.getSecondaryLabel());
    exportSubjectDataBean.setStatus(studySubj.getStatus().toString());
    if (isCollectAudits())     exportSubjectDataBean.setAuditLogs(fetchAuditLogs(studySubj.getStudySubjectId(),""String_Node_Str"",studySubj.getOcOid(),null));
    AuditLogsBean subjectGroupMapLogs=fetchAuditLogs(studySubj.getStudySubjectId(),""String_Node_Str"",studySubj.getOcOid(),null);
    AuditLogsBean subjectLogs=fetchAuditLogs(studySubj.getSubject().getSubjectId(),""String_Node_Str"",studySubj.getOcOid(),null);
    exportSubjectDataBean.getAuditLogs().getAuditLogs().addAll(subjectGroupMapLogs.getAuditLogs());
    exportSubjectDataBean.getAuditLogs().getAuditLogs().addAll(subjectLogs.getAuditLogs());
    Collections.sort(exportSubjectDataBean.getAuditLogs().getAuditLogs());
    if (isCollectDns())     exportSubjectDataBean.setDiscrepancyNotes(fetchDiscrepancyNotes(studySubj));
    exportSubjectDataBean.setExportStudyEventData(setExportStudyEventDataBean(study,studySubj,studyEvents,formVersionOID));
    exportSubjectDataBean.setSubjectOID(studySubj.getOcOid());
    exportSubjectDataBean.setEnrollmentDate(studySubj.getEnrollmentDate() + ""String_Node_Str"");
  }
  return exportSubjectDataBean;
}",0.9988540870893812
114996,"private ArrayList<ExportStudyEventDataBean> setExportStudyEventDataBean(StudySubject ss,List<StudyEvent> sEvents,String formVersionOID){
  ArrayList<ExportStudyEventDataBean> al=new ArrayList<ExportStudyEventDataBean>();
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  for (  StudyEvent se : sEvents) {
    if (se != null) {
      ExportStudyEventDataBean expSEBean=new ExportStudyEventDataBean();
      expSEBean.setStudyEvent(se);
      expSEBean.setLocation(se.getLocation());
      if (se.getDateEnd() != null) {
        if (se.getEndTimeFlag()) {
          expSEBean.setEndDate(se.getDateEnd() + ""String_Node_Str"");
        }
 else {
          String temp=sdf.format(se.getDateEnd());
          expSEBean.setEndDate(temp);
        }
      }
      if (se.getDateStart() != null) {
        if (se.getStartTimeFlag()) {
          expSEBean.setStartDate(se.getDateStart() + ""String_Node_Str"");
        }
 else {
          String temp=sdf.format(se.getDateStart());
          expSEBean.setStartDate(temp);
        }
      }
      expSEBean.setEventName(se.getStudyEventDefinition().getName());
      expSEBean.setStudyEventOID(se.getStudyEventDefinition().getOc_oid());
      expSEBean.setStudyEventRepeatKey(se.getSampleOrdinal().toString());
      if (se.getStudySubject().getSubject().getDateOfBirth() != null && se.getDateStart() != null)       expSEBean.setAgeAtEvent(Utils.getAge(se.getStudySubject().getSubject().getDateOfBirth(),se.getDateStart()));
      expSEBean.setStatus(fetchStudyEventStatus(se.getSubjectEventStatusId()));
      if (collectAudits)       expSEBean.setAuditLogs(fetchAuditLogs(se.getStudyEventId(),""String_Node_Str"",se.getStudyEventDefinition().getOc_oid(),null));
      if (collectDns)       expSEBean.setDiscrepancyNotes(fetchDiscrepancyNotes(se));
      expSEBean.setExportFormData(getFormDataForClinicalStudy(ss,se,formVersionOID));
      expSEBean.setStudyEventDefinition(se.getStudyEventDefinition());
      al.add(expSEBean);
    }
  }
  return al;
}","private ArrayList<ExportStudyEventDataBean> setExportStudyEventDataBean(Study study,StudySubject ss,List<StudyEvent> sEvents,String formVersionOID){
  ArrayList<ExportStudyEventDataBean> al=new ArrayList<ExportStudyEventDataBean>();
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  for (  StudyEvent se : sEvents) {
    if (se != null) {
      ExportStudyEventDataBean expSEBean=new ExportStudyEventDataBean();
      expSEBean.setStudyEvent(se);
      expSEBean.setLocation(se.getLocation());
      if (se.getDateEnd() != null) {
        if (se.getEndTimeFlag()) {
          expSEBean.setEndDate(se.getDateEnd() + ""String_Node_Str"");
        }
 else {
          String temp=sdf.format(se.getDateEnd());
          expSEBean.setEndDate(temp);
        }
      }
      if (se.getDateStart() != null) {
        if (se.getStartTimeFlag()) {
          expSEBean.setStartDate(se.getDateStart() + ""String_Node_Str"");
        }
 else {
          String temp=sdf.format(se.getDateStart());
          expSEBean.setStartDate(temp);
        }
      }
      expSEBean.setEventName(se.getStudyEventDefinition().getName());
      expSEBean.setStudyEventOID(se.getStudyEventDefinition().getOc_oid());
      expSEBean.setStudyEventRepeatKey(se.getSampleOrdinal().toString());
      if (se.getStudySubject().getSubject().getDateOfBirth() != null && se.getDateStart() != null)       expSEBean.setAgeAtEvent(Utils.getAge(se.getStudySubject().getSubject().getDateOfBirth(),se.getDateStart()));
      expSEBean.setStatus(fetchStudyEventStatus(se.getSubjectEventStatusId()));
      if (collectAudits)       expSEBean.setAuditLogs(fetchAuditLogs(se.getStudyEventId(),""String_Node_Str"",se.getStudyEventDefinition().getOc_oid(),null));
      if (collectDns)       expSEBean.setDiscrepancyNotes(fetchDiscrepancyNotes(se));
      expSEBean.setExportFormData(getFormDataForClinicalStudy(study,ss,se,formVersionOID));
      expSEBean.setStudyEventDefinition(se.getStudyEventDefinition());
      al.add(expSEBean);
    }
  }
  return al;
}",0.9955312810327706
114997,"public static UserAccountBean setRootUserAccountBean(HttpServletRequest request,DataSource dataSource){
  UserAccountDAO userAccountDAO=new UserAccountDAO(dataSource);
  UserAccountBean ub=(UserAccountBean)userAccountDAO.findByUserName(""String_Node_Str"");
  ArrayList userRoleBeans=(ArrayList)userAccountDAO.findAllRolesByUserName(ub.getName());
  ub.setRoles(userRoleBeans);
  if (ub.getId() != 0) {
    request.getSession().setAttribute(""String_Node_Str"",ub);
  }
  return ub;
}","public static UserAccountBean setRootUserAccountBean(HttpServletRequest request,DataSource dataSource){
  UserAccountDAO userAccountDAO=new UserAccountDAO(dataSource);
  UserAccountBean ub=(UserAccountBean)userAccountDAO.findByUserName(""String_Node_Str"");
  if (ub.getId() != 0) {
    request.getSession().setAttribute(""String_Node_Str"",ub);
  }
  return ub;
}",0.8571428571428571
114998,"/** 
 * @api {post} /pages/auth/api/v1/studies/ Create a study
 * @apiName createNewStudy
 * @apiPermission Authenticate using api-key. admin
 * @apiVersion 3.8.0
 * @apiParam {String} uniqueProtococlId Study unique study ID.
 * @apiParam {String} briefTitle Brief Title .
 * @apiParam {String} principalInvestigator Principal Investigator Name.
 * @apiParam {Integer} expectedTotalEnrollment Expected Total Enrollment number
 * @apiParam {String} sponsor Sponsor name.
 * @apiParam {String} studyType 'Interventional' or ' Observational'
 * @apiParam {String} status 'Available' or 'Design'
 * @apiParam {String} briefSummary Study Summary
 * @apiParam {Date} startDate Start date
 * @apiParam {Array} assignUserRoles Assign Users to Roles for this Study.
 * @apiGroup Study
 * @apiHeader {String} api_key Users unique access-key.
 * @apiDescription This API is to create a New Study in OC.All the fields are required fields and can't be left blank. You need to provide your Api-key to be connected.
 * @apiParamExample {json} Request-Example:{ ""briefTitle"": ""Study Study ID Name"", ""principalInvestigator"": ""Principal Investigator Name"", ""expectedTotalEnrollment"": ""10"", ""sponsor"": ""Sponsor Name"", ""studyType"": ""Interventional"", ""status"": ""available"", ""assignUserRoles"": [ { ""username"": ""usera"", ""role"": ""Data Manager"" }, { ""username"": ""userb"", ""role"": ""Study Director"" }, { ""username"": ""userc"", ""role"": ""Data Specialist"" }, { ""username"": ""userd"", ""role"": ""Monitor"" }, { ""username"": ""usere"", ""role"": ""Data Entry Person"" } ], ""uniqueStudyID"": ""Study Study ID"", ""briefSummary"": ""Study Summary"", ""startDate"": ""2011-11-11"" }
 * @apiErrorExample {json} Error-Response:HTTP/1.1 400 Bad Request { ""message"": ""VALIDATION FAILED"", ""status"": ""available"", ""principalInvestigator"": ""Principal Investigator Name"", ""expectedTotalEnrollment"": ""10"", ""sponsor"": ""Sponsor Name"", ""studyType"": ""Interventional"", ""errors"": [ {""field"": ""UniqueStudyId"",""resource"": ""Study Object"",""code"": ""Unique Study Id exist in the System""} ], ""startDate"": ""2011-11-11"", ""assignUserRoles"": [ {""username"": ""usera"",""role"": ""Data Manager""}, {""username"": ""userb"",""role"": ""Study Director""}, {""username"": ""userc"",""role"": ""Data Specialist""} ], ""uniqueStudyID"": ""Study Study ID"", ""briefTitle"": ""Study Study ID"", ""briefSummary"": ""Study Summary"", ""studyOid"": null }
 * @apiSuccessExample {json} Success-Response:HTTP/1.1 200 OK { ""message"": ""SUCCESS"", ""uniqueStudyID"": ""Study Study ID"", ""studyOid"": ""S_STUDYPRO"", }
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT) public ResponseEntity<Object> changeStudyStatus(@RequestBody HashMap<String,Object> requestDTO,@PathVariable(""String_Node_Str"") String studyEnvUuid,HttpServletRequest request){
  ResponseEntity response=null;
  ArrayList<ErrorObject> errorObjects=new ArrayList<ErrorObject>();
  StudyDTO studyDTO=new StudyDTO();
  Locale locale=new Locale(""String_Node_Str"");
  request.getSession().setAttribute(LocaleResolver.getLocaleSessionAttributeName(),locale);
  ResourceBundleProvider.updateLocale(locale);
  UserAccountBean ub=(UserAccountBean)request.getSession().getAttribute(""String_Node_Str"");
  if (ub == null) {
    logger.error(""String_Node_Str"");
    return new ResponseEntity<Object>(""String_Node_Str"",HttpStatus.FORBIDDEN);
  }
  StudyDAO studyDAO=new StudyDAO(dataSource);
  StudyBean currentPublicStudy=studyDAO.findByStudyEnvUuid(studyEnvUuid);
  String tenantSchema=currentPublicStudy.getSchemaName();
  CoreResources.setRequestSchema(request,tenantSchema);
  StudyBean currentStudy=studyDAO.findByStudyEnvUuid(studyEnvUuid);
  if (currentPublicStudy == null || currentStudy == null) {
    ErrorObject errorObject=createErrorObject(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    errorObjects.add(errorObject);
    studyDTO.setErrors(errorObjects);
    studyDTO.setMessage(validation_failed_message);
    return new ResponseEntity(studyDTO,org.springframework.http.HttpStatus.BAD_REQUEST);
  }
  if (ub != null) {
    CoreResources.setRequestSchema(request,""String_Node_Str"");
    studyBuildService.updateStudyUserRoles(request,studyBuildService.getUserAccountObject(ub),ub.getActiveStudyId());
    UserAccountDAO userAccountDAO=new UserAccountDAO(dataSource);
    ub=(UserAccountBean)userAccountDAO.findByUserUuid(ub.getUserUuid());
    if (!roleValidForStatusChange(ub,currentPublicStudy,1)) {
      logger.error(""String_Node_Str"");
      return new ResponseEntity<Object>(""String_Node_Str"",HttpStatus.FORBIDDEN);
    }
  }
  CoreResources.setRequestSchema(request,tenantSchema);
  Status status=getStatus((String)requestDTO.get(""String_Node_Str""));
  if (status == null) {
    ErrorObject errorObject=createErrorObject(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    errorObjects.add(errorObject);
    studyDTO.setErrors(errorObjects);
    studyDTO.setMessage(validation_failed_message);
    return new ResponseEntity(studyDTO,org.springframework.http.HttpStatus.BAD_REQUEST);
  }
 else   if (!status.equals(Status.PENDING) && !status.equals(Status.AVAILABLE) && !status.equals(Status.FROZEN)&& !status.equals(Status.LOCKED)) {
    ErrorObject errorObject=createErrorObject(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    errorObjects.add(errorObject);
    studyDTO.setErrors(errorObjects);
    studyDTO.setMessage(validation_failed_message);
    return new ResponseEntity(studyDTO,org.springframework.http.HttpStatus.BAD_REQUEST);
  }
  currentStudy.setOldStatus(currentStudy.getStatus());
  currentStudy.setStatus(status);
  studyDAO.updateStudyStatus(currentStudy);
  ArrayList siteList=(ArrayList)studyDAO.findAllByParent(currentStudy.getId());
  if (siteList.size() > 0) {
    studyDAO.updateSitesStatus(currentStudy);
  }
  CoreResources.setRequestSchema(request,""String_Node_Str"");
  currentPublicStudy.setOldStatus(currentPublicStudy.getStatus());
  currentPublicStudy.setStatus(status);
  studyDAO.updateStudyStatus(currentPublicStudy);
  ArrayList publicSiteList=(ArrayList)studyDAO.findAllByParent(currentPublicStudy.getId());
  if (publicSiteList.size() > 0) {
    studyDAO.updateSitesStatus(currentPublicStudy);
  }
  StudyEnvStatusDTO studyEnvStatusDTO=new StudyEnvStatusDTO();
  studyEnvStatusDTO.setStudyEnvUuid(currentPublicStudy.getStudyEnvUuid());
  studyEnvStatusDTO.setStatus(currentPublicStudy.getStatus().getName());
  ArrayList updatedPublicSiteList=(ArrayList)studyDAO.findAllByParent(currentPublicStudy.getId());
  for (  StudyBean site : (ArrayList<StudyBean>)updatedPublicSiteList) {
    SiteStatusDTO siteStatusDTO=new SiteStatusDTO();
    siteStatusDTO.setSiteUuid(site.getStudyEnvSiteUuid());
    siteStatusDTO.setStatus(site.getStatus().getName());
    studyEnvStatusDTO.getSiteStatuses().add(siteStatusDTO);
  }
  return new ResponseEntity(studyEnvStatusDTO,org.springframework.http.HttpStatus.OK);
}","/** 
 * @api {post} /pages/auth/api/v1/studies/ Create a study
 * @apiName createNewStudy
 * @apiPermission Authenticate using api-key. admin
 * @apiVersion 3.8.0
 * @apiParam {String} uniqueProtococlId Study unique study ID.
 * @apiParam {String} briefTitle Brief Title .
 * @apiParam {String} principalInvestigator Principal Investigator Name.
 * @apiParam {Integer} expectedTotalEnrollment Expected Total Enrollment number
 * @apiParam {String} sponsor Sponsor name.
 * @apiParam {String} studyType 'Interventional' or ' Observational'
 * @apiParam {String} status 'Available' or 'Design'
 * @apiParam {String} briefSummary Study Summary
 * @apiParam {Date} startDate Start date
 * @apiParam {Array} assignUserRoles Assign Users to Roles for this Study.
 * @apiGroup Study
 * @apiHeader {String} api_key Users unique access-key.
 * @apiDescription This API is to create a New Study in OC.All the fields are required fields and can't be left blank. You need to provide your Api-key to be connected.
 * @apiParamExample {json} Request-Example:{ ""briefTitle"": ""Study Study ID Name"", ""principalInvestigator"": ""Principal Investigator Name"", ""expectedTotalEnrollment"": ""10"", ""sponsor"": ""Sponsor Name"", ""studyType"": ""Interventional"", ""status"": ""available"", ""assignUserRoles"": [ { ""username"": ""usera"", ""role"": ""Data Manager"" }, { ""username"": ""userb"", ""role"": ""Study Director"" }, { ""username"": ""userc"", ""role"": ""Data Specialist"" }, { ""username"": ""userd"", ""role"": ""Monitor"" }, { ""username"": ""usere"", ""role"": ""Data Entry Person"" } ], ""uniqueStudyID"": ""Study Study ID"", ""briefSummary"": ""Study Summary"", ""startDate"": ""2011-11-11"" }
 * @apiErrorExample {json} Error-Response:HTTP/1.1 400 Bad Request { ""message"": ""VALIDATION FAILED"", ""status"": ""available"", ""principalInvestigator"": ""Principal Investigator Name"", ""expectedTotalEnrollment"": ""10"", ""sponsor"": ""Sponsor Name"", ""studyType"": ""Interventional"", ""errors"": [ {""field"": ""UniqueStudyId"",""resource"": ""Study Object"",""code"": ""Unique Study Id exist in the System""} ], ""startDate"": ""2011-11-11"", ""assignUserRoles"": [ {""username"": ""usera"",""role"": ""Data Manager""}, {""username"": ""userb"",""role"": ""Study Director""}, {""username"": ""userc"",""role"": ""Data Specialist""} ], ""uniqueStudyID"": ""Study Study ID"", ""briefTitle"": ""Study Study ID"", ""briefSummary"": ""Study Summary"", ""studyOid"": null }
 * @apiSuccessExample {json} Success-Response:HTTP/1.1 200 OK { ""message"": ""SUCCESS"", ""uniqueStudyID"": ""Study Study ID"", ""studyOid"": ""S_STUDYPRO"", }
 */
@RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT) public ResponseEntity<Object> changeStudyStatus(@RequestBody HashMap<String,Object> requestDTO,@PathVariable(""String_Node_Str"") String studyEnvUuid,HttpServletRequest request){
  ResponseEntity response=null;
  ArrayList<ErrorObject> errorObjects=new ArrayList<ErrorObject>();
  StudyDTO studyDTO=new StudyDTO();
  Locale locale=new Locale(""String_Node_Str"");
  request.getSession().setAttribute(LocaleResolver.getLocaleSessionAttributeName(),locale);
  ResourceBundleProvider.updateLocale(locale);
  UserAccountBean ub=(UserAccountBean)request.getSession().getAttribute(""String_Node_Str"");
  if (ub == null) {
    logger.error(""String_Node_Str"");
    return new ResponseEntity<Object>(""String_Node_Str"",HttpStatus.FORBIDDEN);
  }
  StudyDAO studyDAO=new StudyDAO(dataSource);
  StudyBean currentPublicStudy=studyDAO.findByStudyEnvUuid(studyEnvUuid);
  String tenantSchema=currentPublicStudy.getSchemaName();
  CoreResources.setRequestSchema(request,tenantSchema);
  StudyBean currentStudy=studyDAO.findByStudyEnvUuid(studyEnvUuid);
  if (currentPublicStudy == null || currentStudy == null) {
    ErrorObject errorObject=createErrorObject(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    errorObjects.add(errorObject);
    studyDTO.setErrors(errorObjects);
    studyDTO.setMessage(validation_failed_message);
    return new ResponseEntity(studyDTO,org.springframework.http.HttpStatus.BAD_REQUEST);
  }
  if (ub != null) {
    CoreResources.setRequestSchema(request,""String_Node_Str"");
    studyBuildService.updateStudyUserRoles(request,studyBuildService.getUserAccountObject(ub),ub.getActiveStudyId());
    UserAccountDAO userAccountDAO=new UserAccountDAO(dataSource);
    if (StringUtils.isEmpty(ub.getUserUuid()))     ub=(UserAccountBean)userAccountDAO.findByUserName(ub.getName());
 else     ub=(UserAccountBean)userAccountDAO.findByUserUuid(ub.getUserUuid());
    if (!roleValidForStatusChange(ub,currentPublicStudy,1)) {
      logger.error(""String_Node_Str"");
      return new ResponseEntity<Object>(""String_Node_Str"",HttpStatus.FORBIDDEN);
    }
  }
  CoreResources.setRequestSchema(request,tenantSchema);
  Status status=getStatus((String)requestDTO.get(""String_Node_Str""));
  if (status == null) {
    ErrorObject errorObject=createErrorObject(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    errorObjects.add(errorObject);
    studyDTO.setErrors(errorObjects);
    studyDTO.setMessage(validation_failed_message);
    return new ResponseEntity(studyDTO,org.springframework.http.HttpStatus.BAD_REQUEST);
  }
 else   if (!status.equals(Status.PENDING) && !status.equals(Status.AVAILABLE) && !status.equals(Status.FROZEN)&& !status.equals(Status.LOCKED)) {
    ErrorObject errorObject=createErrorObject(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    errorObjects.add(errorObject);
    studyDTO.setErrors(errorObjects);
    studyDTO.setMessage(validation_failed_message);
    return new ResponseEntity(studyDTO,org.springframework.http.HttpStatus.BAD_REQUEST);
  }
  currentStudy.setOldStatus(currentStudy.getStatus());
  currentStudy.setStatus(status);
  studyDAO.updateStudyStatus(currentStudy);
  ArrayList siteList=(ArrayList)studyDAO.findAllByParent(currentStudy.getId());
  if (siteList.size() > 0) {
    studyDAO.updateSitesStatus(currentStudy);
  }
  CoreResources.setRequestSchema(request,""String_Node_Str"");
  currentPublicStudy.setOldStatus(currentPublicStudy.getStatus());
  currentPublicStudy.setStatus(status);
  studyDAO.updateStudyStatus(currentPublicStudy);
  ArrayList publicSiteList=(ArrayList)studyDAO.findAllByParent(currentPublicStudy.getId());
  if (publicSiteList.size() > 0) {
    studyDAO.updateSitesStatus(currentPublicStudy);
  }
  StudyEnvStatusDTO studyEnvStatusDTO=new StudyEnvStatusDTO();
  studyEnvStatusDTO.setStudyEnvUuid(currentPublicStudy.getStudyEnvUuid());
  studyEnvStatusDTO.setStatus(currentPublicStudy.getStatus().getName());
  ArrayList updatedPublicSiteList=(ArrayList)studyDAO.findAllByParent(currentPublicStudy.getId());
  for (  StudyBean site : (ArrayList<StudyBean>)updatedPublicSiteList) {
    SiteStatusDTO siteStatusDTO=new SiteStatusDTO();
    siteStatusDTO.setSiteUuid(site.getStudyEnvSiteUuid());
    siteStatusDTO.setStatus(site.getStatus().getName());
    studyEnvStatusDTO.getSiteStatuses().add(siteStatusDTO);
  }
  return new ResponseEntity(studyEnvStatusDTO,org.springframework.http.HttpStatus.OK);
}",0.9911324320395406
114999,"public ArrayList getEventDefinitionsByCurrentStudy(){
  StudyDAO studyDAO=new StudyDAO(sm.getDataSource());
  StudyEventDefinitionDAO studyEventDefinitionDAO=new StudyEventDefinitionDAO(sm.getDataSource());
  int parentStudyId=currentStudy.getParentStudyId();
  ArrayList allDefs=new ArrayList();
  if (parentStudyId > 0) {
    StudyBean parentStudy=(StudyBean)studyDAO.findByPK(parentStudyId);
    allDefs=studyEventDefinitionDAO.findAllActiveByStudy(parentStudy);
  }
 else {
    parentStudyId=currentStudy.getId();
    allDefs=studyEventDefinitionDAO.findAllActiveByStudy(currentStudy);
  }
  return allDefs;
}","public ArrayList getEventDefinitionsByCurrentStudy(){
  StudyDAO studyDAO=new StudyDAO(sm.getDataSource());
  StudyEventDefinitionDAO studyEventDefinitionDAO=new StudyEventDefinitionDAO(sm.getDataSource());
  ArrayList allDefs=new ArrayList();
  if (currentStudy == null)   return allDefs;
  int parentStudyId=currentStudy.getParentStudyId();
  if (parentStudyId > 0) {
    StudyBean parentStudy=(StudyBean)studyDAO.findByPK(parentStudyId);
    allDefs=studyEventDefinitionDAO.findAllActiveByStudy(parentStudy);
  }
 else {
    parentStudyId=currentStudy.getId();
    allDefs=studyEventDefinitionDAO.findAllActiveByStudy(currentStudy);
  }
  return allDefs;
}",0.9056603773584906
115000,"private void handle(HttpServletRequest req,HttpServletResponse res) throws Exception {
  try {
    String error=req.getParameter(""String_Node_Str"");
    if (error != null && error.equals(""String_Node_Str"")) {
      res.sendRedirect(controller.buildAuthorizeUrl(req,false));
    }
 else {
      Tokens tokens=controller.handle(req);
      DecodedJWT decodedJWT=JWT.decode(tokens.getAccessToken());
      TokenAuthentication tokenAuth=new TokenAuthentication(decodedJWT);
      SecurityContextHolder.getContext().setAuthentication(tokenAuth);
      CoreResources.setRequestSchema(req,""String_Node_Str"");
      req.getSession().setAttribute(""String_Node_Str"",tokens.getAccessToken());
      Auth0User user=new Auth0User(decodedJWT);
      UserAccountHelper userAccountHelper=null;
      try {
        userAccountHelper=callbackService.isCallbackSuccessful(req,user);
      }
 catch (      Exception e) {
        logger.error(e.getMessage());
        throw e;
      }
      UserAccountBean ub=userAccountHelper.getUb();
      if (ub != null) {
        if (userAccountHelper.isUpdated())         ub=callbackService.getUpdatedUser(ub);
        req.getSession().setAttribute(USER_BEAN_NAME,ub);
      }
 else {
        unauthorized(res,""String_Node_Str"");
        return;
      }
      String returnTo=controller.getReturnTo(req);
      if (returnTo == null)       returnTo=this.redirectOnSuccess;
      res.sendRedirect(returnTo);
    }
  }
 catch (  InvalidRequestException e) {
    e.printStackTrace();
    SecurityContextHolder.clearContext();
    res.sendRedirect(redirectOnFail);
  }
catch (  IdentityVerificationException e) {
    e.printStackTrace();
    SecurityContextHolder.clearContext();
    res.sendRedirect(redirectOnFail);
  }
}","private void handle(HttpServletRequest req,HttpServletResponse res) throws Exception {
  try {
    String error=req.getParameter(""String_Node_Str"");
    if (error != null && error.equals(""String_Node_Str"")) {
      res.sendRedirect(controller.buildAuthorizeUrl(req,false));
    }
 else {
      Tokens tokens=controller.handle(req);
      DecodedJWT decodedJWT=JWT.decode(tokens.getAccessToken());
      TokenAuthentication tokenAuth=new TokenAuthentication(decodedJWT);
      SecurityContextHolder.getContext().setAuthentication(tokenAuth);
      CoreResources.setRequestSchema(req,""String_Node_Str"");
      req.getSession().setAttribute(""String_Node_Str"",tokens.getAccessToken());
      Auth0User user=new Auth0User(decodedJWT);
      UserAccountHelper userAccountHelper=null;
      try {
        userAccountHelper=callbackService.isCallbackSuccessful(req,user);
      }
 catch (      Exception e) {
        logger.error(e.getMessage());
        throw e;
      }
      UserAccountBean ub=userAccountHelper.getUb();
      if (ub != null) {
        if (userAccountHelper.isUpdated())         ub=callbackService.getUpdatedUser(ub);
        req.getSession().setAttribute(USER_BEAN_NAME,ub);
      }
 else {
        unauthorized(res,""String_Node_Str"");
        return;
      }
      String returnTo=controller.getReturnTo(req);
      if (returnTo == null)       returnTo=this.redirectOnSuccess;
      res.sendRedirect(returnTo);
    }
  }
 catch (  InvalidRequestException e) {
    e.printStackTrace();
    SecurityContextHolder.clearContext();
    res.sendRedirect(req.getContextPath());
  }
catch (  IdentityVerificationException e) {
    e.printStackTrace();
    SecurityContextHolder.clearContext();
    res.sendRedirect(redirectOnFail);
  }
}",0.9913793103448276
