record_number,buggy_code,fixed_code,code_similarity
70001,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
      }
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  boolean widthOutputFlag=false;
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
    widthOutputFlag=true;
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
        widthOutputFlag=true;
      }
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      if (!widthOutputFlag) {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
    }
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.9552929085303186
70002,"public int doEndTag() throws JspException {
  try {
    if (!ChartWebHelper.checkOutputType(output)) {
      printError(""String_Node_Str"" + output + ""String_Node_Str"");
      return EVAL_PAGE;
    }
    HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
    if (model instanceof String) {
      String path=(String)model;
      final File chartFile=new File(path);
      if (!chartFile.exists()) {
        path=ChartWebHelper.getRealPath(getServletContext(),path);
      }
      chartModel=ChartWebHelper.parseChart(path);
      if (chartModel == null) {
        printError(""String_Node_Str"" + model);
        return EVAL_PAGE;
      }
    }
 else     if (model instanceof Chart) {
      chartModel=(Chart)model;
    }
    if (chartModel != null) {
      Bounds bounds=chartModel.getBlock().getBounds();
      bounds.setWidth(width);
      bounds.setHeight(height);
    }
 else {
      printError(""String_Node_Str"");
      return EVAL_PAGE;
    }
    ChartImageManager imageManager=new ChartImageManager(request.getSession(),chartModel,output,data,runtimeContext,getExternalContext(),styleProcessor);
    File imageFile=imageManager.getImage();
    String imageId=imageFile.getName();
    imageId=imageId.substring(0,imageId.lastIndexOf('.'));
    pageContext.getOut().println(createEmitter(imageId,imageManager.getRelativeImageFolder() + ""String_Node_Str"" + imageFile.getName(),imageManager.getImageMap()).generateHTML());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return EVAL_PAGE;
}","public int doEndTag() throws JspException {
  try {
    if (!ChartWebHelper.checkOutputType(output)) {
      printError(""String_Node_Str"" + output + ""String_Node_Str"");
      return EVAL_PAGE;
    }
    HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
    if (model instanceof String) {
      String path=(String)model;
      final File chartFile=new File(path);
      if (!chartFile.exists()) {
        path=ChartWebHelper.getRealPath(getServletContext(),path);
      }
      chartModel=ChartWebHelper.parseChart(path);
      if (chartModel == null) {
        printError(""String_Node_Str"" + model);
        return EVAL_PAGE;
      }
    }
 else     if (model instanceof Chart) {
      chartModel=(Chart)model;
    }
    if (chartModel != null) {
      Bounds bounds=chartModel.getBlock().getBounds();
      bounds.setWidth(width);
      bounds.setHeight(height);
    }
 else {
      printError(""String_Node_Str"");
      return EVAL_PAGE;
    }
    ChartImageManager imageManager=new ChartImageManager(request,chartModel,output,data,runtimeContext,getExternalContext(),styleProcessor);
    File imageFile=imageManager.getImage();
    String imageId=imageFile.getName();
    imageId=imageId.substring(0,imageId.lastIndexOf('.'));
    pageContext.getOut().println(createEmitter(imageId,imageManager.getRelativeImageFolder() + ""String_Node_Str"" + imageFile.getName(),imageManager.getImageMap()).generateHTML());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return EVAL_PAGE;
}",0.9957194599934146
70003,"/** 
 * When session destroyed
 * @see javax.servlet.http.HttpSessionListener#sessionDestroyed(javax.servlet.http.HttpSessionEvent)
 */
public void sessionDestroyed(HttpSessionEvent event){
  String sessionId=event.getSession().getId();
  ChartImageManager.clearSessionFiles(sessionId);
}","/** 
 * When session destroyed
 * @see javax.servlet.http.HttpSessionListener#sessionDestroyed(javax.servlet.http.HttpSessionEvent)
 */
public void sessionDestroyed(HttpSessionEvent event){
  String sessionId=event.getSession().getId();
  ChartImageManager.clearSessionFiles(sessionId,event.getSession().getServletContext());
}",0.9365853658536586
70004,"public void contextDestroyed(ServletContextEvent event){
  ChartImageManager.dispose();
}","public void contextDestroyed(ServletContextEvent event){
  ChartImageManager.dispose(event.getServletContext());
}",0.8768472906403941
70005,"public String getRelativeImageFolder(){
  return session.getServletContext().getContextPath() + ""String_Node_Str"" + IMAGE_FOLDER+ ""String_Node_Str""+ session.getId();
}","public String getRelativeImageFolder(){
  return request.getContextPath() + ""String_Node_Str"" + IMAGE_FOLDER+ ""String_Node_Str""+ request.getSession().getId();
}",0.8746177370030581
70006,"/** 
 * Clear the temp files when session is expired
 * @param id session id
 */
public static void clearSessionFiles(String id){
  if (id == null) {
    return;
  }
  String tempFolder=imageFolder + File.separator + id;
  File file=new File(tempFolder);
  deleteDir(file);
}","/** 
 * Clear the temporary files when session is expired
 * @param id session id
 * @param context sevlet context
 */
public static void clearSessionFiles(String id,ServletContext context){
  if (id == null) {
    return;
  }
  String tempFolder=imageFolder + File.separator + id;
  File file=new File(tempFolder);
  deleteDir(file,context);
}",0.8885298869143781
70007,"public ChartImageManager(HttpSession session,Chart chartModel,String outputFormat,IDataRowExpressionEvaluator evaluator,RunTimeContext rtc,IExternalContext externalContext,IStyleProcessor styleProc) throws Exception {
  this.session=session;
  this.cm=chartModel;
  this.sExtension=outputFormat;
  this.evaluator=evaluator;
  this.styleProc=styleProc;
  if (externalContext == null) {
    this.externalContext=new IExternalContext(){
      private static final long serialVersionUID=4666361117214885689L;
      public Object getObject(){
        return null;
      }
      public Scriptable getScriptable(){
        return null;
      }
    }
;
  }
 else {
    this.externalContext=externalContext;
  }
  if (rtc == null) {
    this.rtc=new RunTimeContext();
    this.rtc.setULocale(ULocale.getDefault());
  }
 else {
    this.rtc=rtc;
  }
  sessionIds.add(session.getId());
  generateImage();
}","public ChartImageManager(HttpServletRequest request,Chart chartModel,String outputFormat,IDataRowExpressionEvaluator evaluator,RunTimeContext rtc,IExternalContext externalContext,IStyleProcessor styleProc) throws Exception {
  this.request=request;
  this.cm=chartModel;
  this.sExtension=outputFormat;
  this.evaluator=evaluator;
  this.styleProc=styleProc;
  if (externalContext == null) {
    this.externalContext=new IExternalContext(){
      private static final long serialVersionUID=4666361117214885689L;
      public Object getObject(){
        return null;
      }
      public Scriptable getScriptable(){
        return null;
      }
    }
;
  }
 else {
    this.externalContext=externalContext;
  }
  if (rtc == null) {
    this.rtc=new RunTimeContext();
    this.rtc.setULocale(ULocale.getDefault());
  }
 else {
    this.rtc=rtc;
  }
  sessionIds.add(request.getSession().getId());
  generateImage();
}",0.9502762430939228
70008,"/** 
 * Disposes all resources and reset.
 */
public static void dispose(){
  for (int i=0, n=sessionIds.size(); i < n; i++) {
    String sessionId=sessionIds.get(i);
    clearSessionFiles(sessionId);
  }
  sessionIds.clear();
}","/** 
 * Disposes all resources and reset.
 */
public static void dispose(ServletContext context){
  for (int i=0, n=sessionIds.size(); i < n; i++) {
    String sessionId=sessionIds.get(i);
    clearSessionFiles(sessionId,context);
  }
  sessionIds.clear();
}",0.9382716049382716
70009,"/** 
 * Deletes all files and subdirectories under dir. Returns true if all deletions were successful. If a deletion fails, the method stops attempting to delete and returns false.
 */
private static boolean deleteDir(File dir){
  if (dir.isDirectory()) {
    String[] children=dir.list();
    for (int i=0; i < children.length; i++) {
      boolean success=deleteDir(new File(dir,children[i]));
      if (!success) {
        return false;
      }
    }
  }
  System.out.println(""String_Node_Str"" + dir.getPath());
  return dir.delete();
}","/** 
 * Deletes all files and sub-directories under directories. Returns true if all deletions were successful. If a deletion fails, the method stops attempting to delete and returns false.
 */
private static boolean deleteDir(File dir,ServletContext context){
  if (dir.isDirectory()) {
    String[] children=dir.list();
    for (int i=0; i < children.length; i++) {
      boolean success=deleteDir(new File(dir,children[i]),context);
      if (!success) {
        return false;
      }
    }
  }
  context.log(""String_Node_Str"" + dir.getPath());
  return dir.delete();
}",0.9000900090009001
70010,"private void generateImage() throws Exception {
  String imageName=IMAGE_NAME_PREFIX + +imageIndex++ + ""String_Node_Str""+ this.sExtension.toLowerCase();
  imageFile=new File(getAbsoluteImageFolder() + File.separator + imageName);
  if (!imageFile.getParentFile().exists()) {
    imageFile.getParentFile().mkdirs();
  }
  System.out.println(""String_Node_Str"" + imageFile.getPath());
  OutputStream fos=new FileOutputStream(imageFile);
  InputStream fis=generateStream();
  byte[] buffer=new byte[1024];
  int readSize=0;
  while ((readSize=fis.read(buffer)) != -1) {
    fos.write(buffer,0,readSize);
  }
  fis.close();
  fos.close();
}","private void generateImage() throws Exception {
  String imageName=IMAGE_NAME_PREFIX + +imageIndex++ + ""String_Node_Str""+ this.sExtension.toLowerCase();
  imageFile=new File(getAbsoluteImageFolder() + File.separator + imageName);
  if (!imageFile.getParentFile().exists()) {
    imageFile.getParentFile().mkdirs();
  }
  request.getSession().getServletContext().log(""String_Node_Str"" + imageFile.getPath());
  OutputStream fos=new FileOutputStream(imageFile);
  InputStream fis=generateStream();
  byte[] buffer=new byte[1024];
  int readSize=0;
  while ((readSize=fis.read(buffer)) != -1) {
    fos.write(buffer,0,readSize);
  }
  fis.close();
  fos.close();
}",0.9521604938271604
70011,"public String getAbsoluteImageFolder(){
  return imageFolder + File.separator + session.getId();
}","public String getAbsoluteImageFolder(){
  return imageFolder + File.separator + request.getSession().getId();
}",0.937799043062201
70012,"/** 
 * Sets default emitter for an output format.
 * @param format the format.
 * @param emitterId the id of the default emitter.
 */
public void setDefaultEmitter(String format,String emitterId){
  defaultEmitterIdsOfFormats.put(format,emitterId);
}","/** 
 * Sets default emitter for an output format.
 * @param format the format.
 * @param emitterId the id of the default emitter.
 */
public void setDefaultEmitter(String format,String emitterId){
  if (format != null) {
    format=format.toLowerCase();
  }
  defaultEmitterIdsOfFormats.put(format,emitterId);
}",0.7495559502664298
70013,"/** 
 * Gets default emitter id of an output format.
 * @param format the format.
 * @return the id of the default emitter of this output format, ""null"" isreturned if default emitter is not set for this format.
 */
public String getDefaultEmitter(String format){
  return defaultEmitterIdsOfFormats.get(format);
}","/** 
 * Gets default emitter id of an output format.
 * @param format the format.
 * @return the id of the default emitter of this output format, ""null"" isreturned if default emitter is not set for this format.
 */
public String getDefaultEmitter(String format){
  if (format != null) {
    format=format.toLowerCase();
  }
  return defaultEmitterIdsOfFormats.get(format);
}",0.8034934497816594
70014,"/** 
 * intialize the render options used to render the report. the render options are load from: <li> engine level default options</li> <li> engine level format options</li> <li> engine level emitter options</li> <li> task level options </li>
 * @throws EngineException 
 */
protected void setupRenderOption() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (renderOptions != null) {
    format=renderOptions.getOutputFormat();
    emitterID=renderOptions.getEmitterID();
    if (emitterID == null) {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        renderOptions.setOutputFormat(format);
      }
      emitterID=engine.getConfig().getDefaultEmitter(format);
    }
    if (emitterID != null) {
      if (!extManager.isValidEmitterID(emitterID)) {
        log.log(Level.SEVERE,MessageConstants.INVALID_EMITTER_ID,emitterID);
        throw new EngineException(MessageConstants.INVALID_EMITTER_ID,emitterID);
      }
      String formatOfEmitter=extManager.getFormat(emitterID);
      if (null == format) {
        renderOptions.setOutputFormat(formatOfEmitter);
      }
 else       if (!format.equals(formatOfEmitter)) {
        throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
      }
    }
 else {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        renderOptions.setOutputFormat(format);
        emitterID=RenderOption.OUTPUT_EMITTERID_HTML;
      }
 else {
        String innerFormat=extManager.getSupportedFormat(format);
        if (innerFormat == null) {
          log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
          throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
        }
 else {
          renderOptions.setOutputFormat(innerFormat);
          format=innerFormat;
          emitterID=extManager.getEmitterID(format);
        }
      }
    }
  }
  Map appContext=executionContext.getAppContext();
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext instanceof PDFRenderContext) {
      PDFRenderContext pdfContext=(PDFRenderContext)renderContext;
      mergeOption(renderOptions,PDFRenderOption.BASE_URL,pdfContext.getBaseURL());
      mergeOption(renderOptions,PDFRenderOption.FONT_DIRECTORY,pdfContext.getFontDirectory());
      mergeOption(renderOptions,PDFRenderOption.SUPPORTED_IMAGE_FORMATS,pdfContext.getSupportedImageFormats());
      mergeOption(renderOptions,PDFRenderOption.IS_EMBEDDED_FONT,new Boolean(pdfContext.isEmbededFont()));
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      HTMLRenderContext htmlContext=(HTMLRenderContext)renderContext;
      mergeOption(renderOptions,HTMLRenderOption.BASE_IMAGE_URL,htmlContext.getBaseImageURL());
      mergeOption(renderOptions,HTMLRenderOption.BASE_URL,htmlContext.getBaseURL());
      mergeOption(renderOptions,HTMLRenderOption.IMAGE_DIRECTROY,htmlContext.getImageDirectory());
      if (FORMAT_HTML.equals(format)) {
        mergeOption(renderOptions,HTMLRenderOption.SUPPORTED_IMAGE_FORMATS,htmlContext.getSupportedImageFormats());
      }
    }
  }
  HashMap options=new HashMap();
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IRenderOption defaultOptions=(IRenderOption)configs.get(IEngineConfig.DEFAULT_RENDER_OPTION);
  if (defaultOptions == null) {
    defaultOptions=(IRenderOption)configs.get(IRenderOption.OUTPUT_FORMAT_HTML);
  }
  if (defaultOptions != null) {
    options.putAll(defaultOptions.getOptions());
  }
  IRenderOption formatOptions=(IRenderOption)configs.get(format);
  if (formatOptions != null) {
    options.putAll(formatOptions.getOptions());
  }
  if (emitterID != null) {
    IRenderOption emitterOptions=(IRenderOption)configs.get(emitterID);
    if (emitterOptions != null) {
      options.putAll(emitterOptions.getOptions());
    }
  }
  if (renderOptions != null) {
    options.putAll(renderOptions.getOptions());
  }
  IRenderOption allOptions=new RenderOption(options);
  executionContext.setRenderOption(allOptions);
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext == null) {
      PDFRenderOption pdfOptions=new PDFRenderOption(allOptions);
      PDFRenderContext pdfContext=new PDFRenderContext();
      pdfContext.setBaseURL(pdfOptions.getBaseURL());
      pdfContext.setEmbededFont(pdfOptions.isEmbededFont());
      pdfContext.setFontDirectory(pdfOptions.getFontDirectory());
      pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats());
      appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,pdfContext);
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext == null) {
      HTMLRenderContext htmlContext=new HTMLRenderContext();
      HTMLRenderOption htmlOptions=new HTMLRenderOption(allOptions);
      htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL());
      htmlContext.setBaseURL(htmlOptions.getBaseURL());
      htmlContext.setImageDirectory(htmlOptions.getImageDirectory());
      htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats());
      htmlContext.SetRenderOption(allOptions);
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,htmlContext);
    }
  }
}","/** 
 * intialize the render options used to render the report. the render options are load from: <li> engine level default options</li> <li> engine level format options</li> <li> engine level emitter options</li> <li> task level options </li>
 * @throws EngineException 
 */
protected void setupRenderOption() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  if (renderOptions != null) {
    format=renderOptions.getOutputFormat();
    emitterID=renderOptions.getEmitterID();
    if (emitterID == null) {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        renderOptions.setOutputFormat(format);
      }
      emitterID=engine.getConfig().getDefaultEmitter(format);
    }
    if (emitterID != null) {
      if (!extManager.isValidEmitterID(emitterID)) {
        log.log(Level.SEVERE,MessageConstants.INVALID_EMITTER_ID,emitterID);
        throw new EngineException(MessageConstants.INVALID_EMITTER_ID,emitterID);
      }
      String formatOfEmitter=extManager.getFormat(emitterID);
      if (null == format) {
        renderOptions.setOutputFormat(formatOfEmitter);
      }
 else       if (!format.equalsIgnoreCase(formatOfEmitter)) {
        throw new EngineException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
      }
    }
 else {
      if (format == null) {
        format=RenderOption.OUTPUT_FORMAT_HTML;
        renderOptions.setOutputFormat(format);
        emitterID=RenderOption.OUTPUT_EMITTERID_HTML;
      }
 else {
        String innerFormat=extManager.getSupportedFormat(format);
        if (innerFormat == null) {
          log.log(Level.SEVERE,MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
          throw new UnsupportedFormatException(MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION,format);
        }
 else {
          renderOptions.setOutputFormat(innerFormat);
          format=innerFormat;
          emitterID=extManager.getEmitterID(format);
        }
      }
    }
  }
  Map appContext=executionContext.getAppContext();
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext instanceof PDFRenderContext) {
      PDFRenderContext pdfContext=(PDFRenderContext)renderContext;
      mergeOption(renderOptions,PDFRenderOption.BASE_URL,pdfContext.getBaseURL());
      mergeOption(renderOptions,PDFRenderOption.FONT_DIRECTORY,pdfContext.getFontDirectory());
      mergeOption(renderOptions,PDFRenderOption.SUPPORTED_IMAGE_FORMATS,pdfContext.getSupportedImageFormats());
      mergeOption(renderOptions,PDFRenderOption.IS_EMBEDDED_FONT,new Boolean(pdfContext.isEmbededFont()));
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext instanceof HTMLRenderContext) {
      HTMLRenderContext htmlContext=(HTMLRenderContext)renderContext;
      mergeOption(renderOptions,HTMLRenderOption.BASE_IMAGE_URL,htmlContext.getBaseImageURL());
      mergeOption(renderOptions,HTMLRenderOption.BASE_URL,htmlContext.getBaseURL());
      mergeOption(renderOptions,HTMLRenderOption.IMAGE_DIRECTROY,htmlContext.getImageDirectory());
      if (FORMAT_HTML.equals(format)) {
        mergeOption(renderOptions,HTMLRenderOption.SUPPORTED_IMAGE_FORMATS,htmlContext.getSupportedImageFormats());
      }
    }
  }
  HashMap options=new HashMap();
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IRenderOption defaultOptions=(IRenderOption)configs.get(IEngineConfig.DEFAULT_RENDER_OPTION);
  if (defaultOptions == null) {
    defaultOptions=(IRenderOption)configs.get(IRenderOption.OUTPUT_FORMAT_HTML);
  }
  if (defaultOptions != null) {
    options.putAll(defaultOptions.getOptions());
  }
  IRenderOption formatOptions=(IRenderOption)configs.get(format);
  if (formatOptions != null) {
    options.putAll(formatOptions.getOptions());
  }
  if (emitterID != null) {
    IRenderOption emitterOptions=(IRenderOption)configs.get(emitterID);
    if (emitterOptions != null) {
      options.putAll(emitterOptions.getOptions());
    }
  }
  if (renderOptions != null) {
    options.putAll(renderOptions.getOptions());
  }
  IRenderOption allOptions=new RenderOption(options);
  executionContext.setRenderOption(allOptions);
  if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT);
    if (renderContext == null) {
      PDFRenderOption pdfOptions=new PDFRenderOption(allOptions);
      PDFRenderContext pdfContext=new PDFRenderContext();
      pdfContext.setBaseURL(pdfOptions.getBaseURL());
      pdfContext.setEmbededFont(pdfOptions.isEmbededFont());
      pdfContext.setFontDirectory(pdfOptions.getFontDirectory());
      pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats());
      appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT,pdfContext);
    }
  }
 else {
    Object renderContext=appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT);
    if (renderContext == null) {
      HTMLRenderContext htmlContext=new HTMLRenderContext();
      HTMLRenderOption htmlOptions=new HTMLRenderOption(allOptions);
      htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL());
      htmlContext.setBaseURL(htmlOptions.getBaseURL());
      htmlContext.setImageDirectory(htmlOptions.getImageDirectory());
      htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats());
      htmlContext.SetRenderOption(allOptions);
      appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT,htmlContext);
    }
  }
}",0.99911378943637
70015,"void buildAxes() throws IllegalArgumentException, ChartException {
  final Axis[] axa=getModel().getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  if (!axPrimaryBase.isSetOrientation()) {
    axPrimaryBase.setOrientation(Orientation.HORIZONTAL_LITERAL);
  }
  validateAxis(axPrimaryBase);
  final Axis axPrimaryOrthogonal=getModel().getPrimaryOrthogonalAxis(axPrimaryBase);
  if (!axPrimaryOrthogonal.isSetOrientation()) {
    axPrimaryOrthogonal.setOrientation(Orientation.VERTICAL_LITERAL);
  }
  validateAxis(axPrimaryOrthogonal);
  final Axis axAncillaryBase=getModel().getAncillaryBaseAxis(axPrimaryBase);
{
    axAncillaryBase.setOrientation(Orientation.HORIZONTAL_LITERAL);
  }
  validateAxis(axAncillaryBase);
  if (axPrimaryBase.getAssociatedAxes().size() > 1) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  aax=new AllAxes(null);
  insCA=aax.getInsets();
  aax.swapAxes(getModel().isTransposed());
  final OneAxis oaxPrimaryBase=new OneAxis(axPrimaryBase,IConstants.BASE_AXIS);
  oaxPrimaryBase.set(getOrientation(IConstants.BASE),transposeLabelPosition(IConstants.BASE,getLabelPosition(axPrimaryBase.getLabelPosition())),transposeLabelPosition(IConstants.BASE,getLabelPosition(axPrimaryBase.getTitlePosition())),axPrimaryBase.isSetCategoryAxis() && axPrimaryBase.isCategoryAxis(),axPrimaryBase.getScale().isTickBetweenCategories());
  oaxPrimaryBase.setGridProperties(axPrimaryBase.getMajorGrid().getLineAttributes(),axPrimaryBase.getMinorGrid().getLineAttributes(),axPrimaryBase.getMajorGrid().getTickAttributes(),axPrimaryBase.getMinorGrid().getTickAttributes(),transposeTickStyle(IConstants.BASE,getTickStyle(axPrimaryBase,MAJOR)),transposeTickStyle(IConstants.BASE,getTickStyle(axPrimaryBase,MINOR)),axPrimaryBase.getScale().getMinorGridsPerUnit());
  oaxPrimaryBase.set(axPrimaryBase.getLabel(),axPrimaryBase.getTitle());
  oaxPrimaryBase.set(getIntersection(axPrimaryBase));
  oaxPrimaryBase.set(axPrimaryBase.getLineAttributes());
  aax.definePrimary(oaxPrimaryBase);
  final OneAxis oaxPrimaryOrthogonal=new OneAxis(axPrimaryOrthogonal,IConstants.ORTHOGONAL_AXIS);
  oaxPrimaryOrthogonal.set(getOrientation(IConstants.ORTHOGONAL),transposeLabelPosition(IConstants.ORTHOGONAL,getLabelPosition(axPrimaryOrthogonal.getLabelPosition())),transposeLabelPosition(IConstants.ORTHOGONAL,getLabelPosition(axPrimaryOrthogonal.getTitlePosition())),axPrimaryOrthogonal.isSetCategoryAxis() && axPrimaryOrthogonal.isCategoryAxis(),axPrimaryOrthogonal.getScale().isTickBetweenCategories());
  oaxPrimaryOrthogonal.setGridProperties(axPrimaryOrthogonal.getMajorGrid().getLineAttributes(),axPrimaryOrthogonal.getMinorGrid().getLineAttributes(),axPrimaryOrthogonal.getMajorGrid().getTickAttributes(),axPrimaryOrthogonal.getMinorGrid().getTickAttributes(),transposeTickStyle(IConstants.ORTHOGONAL,getTickStyle(axPrimaryOrthogonal,MAJOR)),transposeTickStyle(IConstants.ORTHOGONAL,getTickStyle(axPrimaryOrthogonal,MINOR)),axPrimaryOrthogonal.getScale().getMinorGridsPerUnit());
  oaxPrimaryOrthogonal.set(axPrimaryOrthogonal.getLabel(),axPrimaryOrthogonal.getTitle());
  oaxPrimaryOrthogonal.set(getIntersection(axPrimaryOrthogonal));
  oaxPrimaryOrthogonal.set(axPrimaryOrthogonal.getLineAttributes());
  aax.definePrimary(oaxPrimaryOrthogonal);
  final OneAxis oaxAncillaryBase=new OneAxis(axAncillaryBase,IConstants.ANCILLARY_AXIS);
  oaxAncillaryBase.set(IConstants.HORIZONTAL,getLabelPosition(axAncillaryBase.getLabelPosition()),getLabelPosition(axAncillaryBase.getTitlePosition()),axAncillaryBase.isSetCategoryAxis() && axAncillaryBase.isCategoryAxis(),axAncillaryBase.getScale().isTickBetweenCategories());
  oaxAncillaryBase.setGridProperties(axAncillaryBase.getMajorGrid().getLineAttributes(),axAncillaryBase.getMinorGrid().getLineAttributes(),axAncillaryBase.getMajorGrid().getTickAttributes(),axAncillaryBase.getMinorGrid().getTickAttributes(),getTickStyle(axAncillaryBase,MAJOR),getTickStyle(axAncillaryBase,MINOR),axAncillaryBase.getScale().getMinorGridsPerUnit());
  oaxAncillaryBase.set(axAncillaryBase.getLabel(),axAncillaryBase.getTitle());
  oaxAncillaryBase.set(getIntersection(axAncillaryBase));
  oaxAncillaryBase.set(axAncillaryBase.getLineAttributes());
  aax.defineAncillaryBase(oaxAncillaryBase);
}","void buildAxes() throws IllegalArgumentException, ChartException {
  final Axis[] axa=getModel().getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  validateAxis(axPrimaryBase);
  final Axis axPrimaryOrthogonal=getModel().getPrimaryOrthogonalAxis(axPrimaryBase);
  validateAxis(axPrimaryOrthogonal);
  final Axis axAncillaryBase=getModel().getAncillaryBaseAxis(axPrimaryBase);
  validateAxis(axAncillaryBase);
  if (axPrimaryBase.getAssociatedAxes().size() > 1) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  aax=new AllAxes(null);
  insCA=aax.getInsets();
  aax.swapAxes(getModel().isTransposed());
  final OneAxis oaxPrimaryBase=new OneAxis(axPrimaryBase,IConstants.BASE_AXIS);
  oaxPrimaryBase.set(getOrientation(IConstants.BASE),transposeLabelPosition(IConstants.BASE,getLabelPosition(axPrimaryBase.getLabelPosition())),transposeLabelPosition(IConstants.BASE,getLabelPosition(axPrimaryBase.getTitlePosition())),axPrimaryBase.isCategoryAxis(),axPrimaryBase.getScale().isTickBetweenCategories());
  oaxPrimaryBase.setGridProperties(axPrimaryBase.getMajorGrid().getLineAttributes(),axPrimaryBase.getMinorGrid().getLineAttributes(),axPrimaryBase.getMajorGrid().getTickAttributes(),axPrimaryBase.getMinorGrid().getTickAttributes(),transposeTickStyle(IConstants.BASE,getTickStyle(axPrimaryBase,MAJOR)),transposeTickStyle(IConstants.BASE,getTickStyle(axPrimaryBase,MINOR)),axPrimaryBase.getScale().getMinorGridsPerUnit());
  oaxPrimaryBase.set(axPrimaryBase.getLabel(),axPrimaryBase.getTitle());
  oaxPrimaryBase.set(getIntersection(axPrimaryBase));
  oaxPrimaryBase.set(axPrimaryBase.getLineAttributes());
  aax.definePrimary(oaxPrimaryBase);
  final OneAxis oaxPrimaryOrthogonal=new OneAxis(axPrimaryOrthogonal,IConstants.ORTHOGONAL_AXIS);
  oaxPrimaryOrthogonal.set(getOrientation(IConstants.ORTHOGONAL),transposeLabelPosition(IConstants.ORTHOGONAL,getLabelPosition(axPrimaryOrthogonal.getLabelPosition())),transposeLabelPosition(IConstants.ORTHOGONAL,getLabelPosition(axPrimaryOrthogonal.getTitlePosition())),axPrimaryOrthogonal.isCategoryAxis(),axPrimaryOrthogonal.getScale().isTickBetweenCategories());
  oaxPrimaryOrthogonal.setGridProperties(axPrimaryOrthogonal.getMajorGrid().getLineAttributes(),axPrimaryOrthogonal.getMinorGrid().getLineAttributes(),axPrimaryOrthogonal.getMajorGrid().getTickAttributes(),axPrimaryOrthogonal.getMinorGrid().getTickAttributes(),transposeTickStyle(IConstants.ORTHOGONAL,getTickStyle(axPrimaryOrthogonal,MAJOR)),transposeTickStyle(IConstants.ORTHOGONAL,getTickStyle(axPrimaryOrthogonal,MINOR)),axPrimaryOrthogonal.getScale().getMinorGridsPerUnit());
  oaxPrimaryOrthogonal.set(axPrimaryOrthogonal.getLabel(),axPrimaryOrthogonal.getTitle());
  oaxPrimaryOrthogonal.set(getIntersection(axPrimaryOrthogonal));
  oaxPrimaryOrthogonal.set(axPrimaryOrthogonal.getLineAttributes());
  aax.definePrimary(oaxPrimaryOrthogonal);
  final OneAxis oaxAncillaryBase=new OneAxis(axAncillaryBase,IConstants.ANCILLARY_AXIS);
  oaxAncillaryBase.set(IConstants.HORIZONTAL,getLabelPosition(axAncillaryBase.getLabelPosition()),getLabelPosition(axAncillaryBase.getTitlePosition()),axAncillaryBase.isCategoryAxis(),axAncillaryBase.getScale().isTickBetweenCategories());
  oaxAncillaryBase.setGridProperties(axAncillaryBase.getMajorGrid().getLineAttributes(),axAncillaryBase.getMinorGrid().getLineAttributes(),axAncillaryBase.getMajorGrid().getTickAttributes(),axAncillaryBase.getMinorGrid().getTickAttributes(),getTickStyle(axAncillaryBase,MAJOR),getTickStyle(axAncillaryBase,MINOR),axAncillaryBase.getScale().getMinorGridsPerUnit());
  oaxAncillaryBase.set(axAncillaryBase.getLabel(),axAncillaryBase.getTitle());
  oaxAncillaryBase.set(getIntersection(axAncillaryBase));
  oaxAncillaryBase.set(axAncillaryBase.getLineAttributes());
  aax.defineAncillaryBase(oaxAncillaryBase);
}",0.9063752276867032
70016,"/** 
 * @param ax
 * @param orthogonalAxis
 * @param iType
 * @return
 * @throws ChartException
 * @throws IllegalArgumentException
 */
protected final DataSetIterator getAncillaryDataSet(Axis ax,Axis orthogonalAxis,int iType) throws ChartException, IllegalArgumentException {
  final Series[] sea=ax.getRuntimeSeries();
  final Series[] osea=orthogonalAxis.getRuntimeSeries();
  if (sea.length == 0 || osea.length == 0) {
    if ((iType & NUMERICAL) == NUMERICAL) {
      return new DataSetIterator(new Double[]{new Double(1),new Double(2)});
    }
 else     if ((iType & DATE_TIME) == DATE_TIME) {
      return new DataSetIterator(new Calendar[]{new CDateTime(),new CDateTime()});
    }
 else     if ((iType & TEXT) == TEXT) {
      List<String> data=new ArrayList<String>();
      for (int i=0; i < osea.length; i++) {
        data.add(String.valueOf(osea[i].getSeriesIdentifier()));
      }
      return new DataSetIterator(data.toArray(new String[data.size()]));
    }
  }
  DataSetIterator dsi=getTypedDataSet(sea[0],iType);
  List<Object> data=new ArrayList<Object>();
  for (int i=0; i < osea.length; i++) {
    if (dsi.hasNext()) {
      data.add(dsi.next());
    }
 else     if ((iType & NUMERICAL) == NUMERICAL) {
      data.add(new Double(0));
    }
 else     if ((iType & DATE_TIME) == DATE_TIME) {
      data.add(new CDateTime());
    }
 else     if ((iType & TEXT) == TEXT) {
      data.add(osea[i].getSeriesIdentifier());
    }
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    return new DataSetIterator(NumberDataSetImpl.create(data));
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    return new DataSetIterator(DateTimeDataSetImpl.create(data));
  }
 else   if ((iType & TEXT) == TEXT) {
    return new DataSetIterator(TextDataSetImpl.create(data));
  }
  return null;
}","/** 
 * @param ax
 * @param orthogonalAxis
 * @param iType
 * @return
 * @throws ChartException
 * @throws IllegalArgumentException
 */
protected final DataSetIterator getAncillaryDataSet(Axis ax,Axis orthogonalAxis,int iType) throws ChartException, IllegalArgumentException {
  final Series[] sea=ax.getRuntimeSeries();
  final Series[] osea=orthogonalAxis.getRuntimeSeries();
  if (sea.length == 0 || osea.length == 0) {
    if ((iType & NUMERICAL) == NUMERICAL) {
      return new DataSetIterator(new Double[]{new Double(1),new Double(2)});
    }
 else     if ((iType & DATE_TIME) == DATE_TIME) {
      return new DataSetIterator(new Calendar[]{new CDateTime(),new CDateTime()});
    }
 else     if ((iType & TEXT) == TEXT) {
      List<String> data=new ArrayList<String>();
      if (osea.length > 0) {
        for (int i=0; i < osea.length; i++) {
          data.add(String.valueOf(osea[i].getSeriesIdentifier()));
        }
      }
 else {
        data.add(""String_Node_Str"");
      }
      return new DataSetIterator(data.toArray(new String[data.size()]));
    }
  }
  DataSetIterator dsi=getTypedDataSet(sea[0],iType);
  List<Object> data=new ArrayList<Object>();
  for (int i=0; i < osea.length; i++) {
    if (dsi.hasNext()) {
      data.add(dsi.next());
    }
 else     if ((iType & NUMERICAL) == NUMERICAL) {
      data.add(new Double(0));
    }
 else     if ((iType & DATE_TIME) == DATE_TIME) {
      data.add(new CDateTime());
    }
 else     if ((iType & TEXT) == TEXT) {
      data.add(osea[i].getSeriesIdentifier());
    }
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    return new DataSetIterator(NumberDataSetImpl.create(data));
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    return new DataSetIterator(DateTimeDataSetImpl.create(data));
  }
 else   if ((iType & TEXT) == TEXT) {
    return new DataSetIterator(TextDataSetImpl.create(data));
  }
  return null;
}",0.9739696312364424
70017,"/** 
 * Builds and computes preferred sizes of various chart components offscreen using the provided display server.
 * @param ids A display server using which the chart may be built.
 * @param cmDesignTime The design time chart model (bound to a dataset).
 * @param externalContext An external context object.
 * @param bo The bounds associated with the chart being built.
 * @param rtc Encapsulates the runtime environment for the build process.
 * @param externalProcessor An external style processor. If it's null, an implicit processor will be used.
 * @return An instance of a generated chart state that encapsulates builtchart information that may be subsequently rendered.
 * @throws ChartException
 */
public final GeneratedChartState build(IDisplayServer ids,Chart cmDesignTime,Bounds bo,IExternalContext externalContext,RunTimeContext rtc,IStyleProcessor externalProcessor) throws ChartException {
  if (ids == null || cmDesignTime == null || bo == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  if (rtc == null) {
    rtc=new RunTimeContext();
  }
  rtc.putState(StateKey.CHART_COMPUTATION_KEY,ChartComputationFactory.instance().createChartComputation());
  if (rtc.getULocale() == null) {
    rtc.setULocale(ULocale.getDefault());
  }
  IChartScriptContext icsc=rtc.getScriptContext();
  if (icsc == null) {
    ChartScriptContext csc=new ChartScriptContext();
    Chart cmRunTime=cmDesignTime.copyInstance();
    csc.setChartInstance(cmRunTime);
    csc.setExternalContext(externalContext);
    csc.setULocale(rtc.getULocale());
    csc.setLogger(logger);
    rtc.setScriptContext(csc);
    icsc=csc;
  }
 else   if (icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setLogger(logger);
    Chart cmRuntime=cmDesignTime.copyInstance();
    cmRuntime.getBlock().setBounds(bo);
    ((ChartScriptContext)icsc).setChartInstance(cmRuntime);
  }
  if (externalContext != null && icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setExternalContext(externalContext);
  }
  final Chart cmRunTime=icsc.getChartInstance();
  ScriptHandler sh=rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(icsc);
    final String sScriptContent=cmRunTime.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cmRunTime);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(null,sScriptContent);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.START_GENERATION,cmRunTime);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_GENERATION,cmRunTime,rtc.getScriptContext());
  ChartUtil.pruneInvisibleSeries(cmRunTime);
  prepareStyles(cmRunTime,externalProcessor);
  PlotComputation oComputations=null;
  if (cmRunTime instanceof ChartWithAxes) {
    try {
      if (cmRunTime.getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL) {
        oComputations=new PlotWith3DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
 else {
        oComputations=new PlotWith2DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
    }
 catch (    Exception e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
    }
  }
 else   if (cmRunTime instanceof ChartWithoutAxes) {
    oComputations=new PlotWithoutAxes(ids,(ChartWithoutAxes)cmRunTime,rtc);
  }
  if (oComputations == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{cmRunTime},Messages.getResourceBundle(rtc.getULocale()));
  }
  final LinkedHashMap<Series,LegendItemRenderingHints> lhmRenderers=new LinkedHashMap<Series,LegendItemRenderingHints>();
  BaseRenderer[] brna=null;
  try {
    brna=BaseRenderer.instances(cmRunTime,rtc,oComputations);
    for (int i=0; i < brna.length; i++) {
      lhmRenderers.put(brna[i].getSeries(),new LegendItemRenderingHints(brna[i],goFactory.createBounds(0,0,0,0)));
    }
    rtc.setSeriesRenderers(lhmRenderers);
    rtc.setLegendLayoutHints(null);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  if (oComputations instanceof PlotWith2DAxes) {
    PlotWith2DAxes pwa=(PlotWith2DAxes)oComputations;
    pwa.initDynamicPlotBounds(bo);
  }
  Block bl=cmRunTime.getBlock();
  final LayoutManager lm=new LayoutManager(bl);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_LAYOUT,cmRunTime);
  lm.doLayout(ids,cmRunTime,bo,rtc);
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_LAYOUT,cmRunTime);
  Bounds boPlot=cmRunTime.getPlot().getBounds();
  Insets insPlot=cmRunTime.getPlot().getInsets();
  boPlot=goFactory.adjusteBounds(boPlot,insPlot);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_COMPUTATIONS,cmRunTime,oComputations);
  try {
    oComputations.compute(boPlot);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_COMPUTATIONS,cmRunTime,oComputations);
  final Collection<LegendItemRenderingHints> co=lhmRenderers.values();
  final LegendItemRenderingHints[] lirha=co.toArray(new LegendItemRenderingHints[co.size()]);
  final int iSize=lhmRenderers.size();
  BaseRenderer br;
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    br.set(brna);
    br.set(ids);
    br.set(rtc);
    try {
      br.set(br.getComputations().getSeriesRenderingHints(br.getSeriesDefinition(),br.getSeries()));
      ScriptHandler.callFunction(sh,ScriptHandler.START_COMPUTE_SERIES,br.getSeries());
      br.compute(bo,cmRunTime.getPlot(),br.getSeriesRenderingHints());
      ScriptHandler.callFunction(sh,ScriptHandler.FINISH_COMPUTE_SERIES,br.getSeries());
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  final GeneratedChartState gcs=new GeneratedChartState(ids,cmRunTime,lhmRenderers,rtc,oComputations);
  if (sh != null) {
    sh.setGeneratedChartState(gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.FINISH_GENERATION,gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_GENERATION,gcs,rtc.getScriptContext());
  }
  return gcs;
}","/** 
 * Builds and computes preferred sizes of various chart components offscreen using the provided display server.
 * @param ids A display server using which the chart may be built.
 * @param cmDesignTime The design time chart model (bound to a dataset).
 * @param externalContext An external context object.
 * @param bo The bounds associated with the chart being built.
 * @param rtc Encapsulates the runtime environment for the build process.
 * @param externalProcessor An external style processor. If it's null, an implicit processor will be used.
 * @return An instance of a generated chart state that encapsulates builtchart information that may be subsequently rendered.
 * @throws ChartException
 */
public final GeneratedChartState build(IDisplayServer ids,Chart cmDesignTime,Bounds bo,IExternalContext externalContext,RunTimeContext rtc,IStyleProcessor externalProcessor) throws ChartException {
  if (ids == null || cmDesignTime == null || bo == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  if (rtc == null) {
    rtc=new RunTimeContext();
  }
  rtc.putState(StateKey.CHART_COMPUTATION_KEY,ChartComputationFactory.instance().createChartComputation());
  if (rtc.getULocale() == null) {
    rtc.setULocale(ULocale.getDefault());
  }
  IChartScriptContext icsc=rtc.getScriptContext();
  if (icsc == null) {
    ChartScriptContext csc=new ChartScriptContext();
    Chart cmRunTime=cmDesignTime.copyInstance();
    csc.setChartInstance(cmRunTime);
    csc.setExternalContext(externalContext);
    csc.setULocale(rtc.getULocale());
    csc.setLogger(logger);
    rtc.setScriptContext(csc);
    icsc=csc;
  }
 else   if (icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setLogger(logger);
    Chart cmRuntime=cmDesignTime.copyInstance();
    cmRuntime.getBlock().setBounds(bo);
    ((ChartScriptContext)icsc).setChartInstance(cmRuntime);
  }
  if (externalContext != null && icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setExternalContext(externalContext);
  }
  final Chart cmRunTime=icsc.getChartInstance();
  ScriptHandler sh=rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(icsc);
    final String sScriptContent=cmRunTime.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cmRunTime);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(null,sScriptContent);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.START_GENERATION,cmRunTime);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_GENERATION,cmRunTime,rtc.getScriptContext());
  ChartUtil.pruneInvisibleSeries(cmRunTime);
  checkDataEmpty(cmRunTime,rtc);
  prepareStyles(cmRunTime,externalProcessor);
  PlotComputation oComputations=null;
  if (cmRunTime instanceof ChartWithAxes) {
    try {
      if (cmRunTime.getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL) {
        oComputations=new PlotWith3DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
 else {
        oComputations=new PlotWith2DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
    }
 catch (    Exception e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
    }
  }
 else   if (cmRunTime instanceof ChartWithoutAxes) {
    oComputations=new PlotWithoutAxes(ids,(ChartWithoutAxes)cmRunTime,rtc);
  }
  if (oComputations == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{cmRunTime},Messages.getResourceBundle(rtc.getULocale()));
  }
  final LinkedHashMap<Series,LegendItemRenderingHints> lhmRenderers=new LinkedHashMap<Series,LegendItemRenderingHints>();
  BaseRenderer[] brna=null;
  try {
    brna=BaseRenderer.instances(cmRunTime,rtc,oComputations);
    for (int i=0; i < brna.length; i++) {
      lhmRenderers.put(brna[i].getSeries(),new LegendItemRenderingHints(brna[i],goFactory.createBounds(0,0,0,0)));
    }
    rtc.setSeriesRenderers(lhmRenderers);
    rtc.setLegendLayoutHints(null);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  if (oComputations instanceof PlotWith2DAxes) {
    PlotWith2DAxes pwa=(PlotWith2DAxes)oComputations;
    pwa.initDynamicPlotBounds(bo);
  }
  Block bl=cmRunTime.getBlock();
  final LayoutManager lm=new LayoutManager(bl);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_LAYOUT,cmRunTime);
  lm.doLayout(ids,cmRunTime,bo,rtc);
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_LAYOUT,cmRunTime);
  Bounds boPlot=cmRunTime.getPlot().getBounds();
  Insets insPlot=cmRunTime.getPlot().getInsets();
  boPlot=goFactory.adjusteBounds(boPlot,insPlot);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_COMPUTATIONS,cmRunTime,oComputations);
  try {
    oComputations.compute(boPlot);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_COMPUTATIONS,cmRunTime,oComputations);
  final Collection<LegendItemRenderingHints> co=lhmRenderers.values();
  final LegendItemRenderingHints[] lirha=co.toArray(new LegendItemRenderingHints[co.size()]);
  final int iSize=lhmRenderers.size();
  BaseRenderer br;
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    br.set(brna);
    br.set(ids);
    br.set(rtc);
    try {
      br.set(br.getComputations().getSeriesRenderingHints(br.getSeriesDefinition(),br.getSeries()));
      ScriptHandler.callFunction(sh,ScriptHandler.START_COMPUTE_SERIES,br.getSeries());
      br.compute(bo,cmRunTime.getPlot(),br.getSeriesRenderingHints());
      ScriptHandler.callFunction(sh,ScriptHandler.FINISH_COMPUTE_SERIES,br.getSeries());
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  final GeneratedChartState gcs=new GeneratedChartState(ids,cmRunTime,lhmRenderers,rtc,oComputations);
  if (sh != null) {
    sh.setGeneratedChartState(gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.FINISH_GENERATION,gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_GENERATION,gcs,rtc.getScriptContext());
  }
  return gcs;
}",0.9974691310683336
70018,"/** 
 * Convenient routine to render a marker
 */
protected final void renderMarker(Object oParent,IPrimitiveRenderer ipr,Marker m,Location lo,LineAttributes lia,Fill fPaletteEntry,DataPointHints dph,Integer markerSize,boolean bDeferred,boolean bConsiderTranspostion) throws ChartException {
  if (dph != null && (isNaN(dph.getOrthogonalValue()) || dph.isOutside())) {
    return;
  }
  Fill markerFill=m.getFill();
  m=goFactory.copyMarkerNoFill(m);
  if (dph != null && dph.getOrthogonalValue() instanceof Double) {
    fPaletteEntry=ChartUtil.convertFill(fPaletteEntry,((Double)dph.getOrthogonalValue()).doubleValue(),null);
  }
  if (m.getType().getValue() != MarkerType.ICON && fPaletteEntry != null) {
    m.setFill(fPaletteEntry);
  }
 else {
    m.setFill(goFactory.copyOf(markerFill));
  }
  final ScriptHandler sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_MARKER,m,dph,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_MARKER,m);
  Series se=getSeries();
  Object oSource=(oParent instanceof Legend) ? (StructureSource.createLegend((Legend)oParent)) : (WrappedStructureSource.createSeriesDataPoint(se,dph));
  boolean bTransposed=bConsiderTranspostion && ((ChartWithAxes)getModel()).isTransposed();
  final Location panningOffset=this.getPanningOffset();
  PrimitiveRenderEvent preCopy=null;
  if (m == null || (m != null && !(m.isSetVisible() && m.isVisible()))) {
    int iSize=5;
    if (m != null) {
      iSize=m.getSize();
    }
    if (lo instanceof Location3D) {
      final Oval3DRenderEvent ore=((EventObjectCache)ipr).getEventObject(oSource,Oval3DRenderEvent.class);
      Location3D lo3d=(Location3D)lo;
      ore.setLocation3D(new Location3D[]{goFactory.createLocation3D(lo3d.getX() - iSize,lo3d.getY() + iSize,lo3d.getZ()),goFactory.createLocation3D(lo3d.getX() - iSize,lo3d.getY() - iSize,lo3d.getZ()),goFactory.createLocation3D(lo3d.getX() + iSize,lo3d.getY() - iSize,lo3d.getZ()),goFactory.createLocation3D(lo3d.getX() + iSize,lo3d.getY() + iSize,lo3d.getZ())});
      preCopy=ore.copy();
    }
 else {
      final OvalRenderEvent ore=((EventObjectCache)ipr).getEventObject(oSource,OvalRenderEvent.class);
      ore.setBounds(goFactory.createBounds(lo.getX() - iSize,lo.getY() - iSize,iSize * 2,iSize * 2));
      preCopy=ore.copy();
    }
  }
 else   if (m.isSetVisible() && m.isVisible()) {
    final MarkerRenderer mr=new MarkerRenderer(this.getDevice(),oSource,lo,lia,m.getFill(),m,markerSize,this.getDeferredCache(),bDeferred,bTransposed);
    mr.draw(ipr);
    preCopy=mr.getRenderArea();
  }
  if (this.isInteractivityEnabled() && dph != null) {
    if (!(lo instanceof Location3D) || ((lo instanceof Location3D) && (this.get3DEngine().processEvent(preCopy,panningOffset.getX(),panningOffset.getY()) != null))) {
      final EList<Trigger> elTriggers=se.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=(oParent instanceof Legend) ? (StructureSource.createSeries(se)) : (WrappedStructureSource.createSeriesDataPoint(se,dph));
        final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(iSource,InteractionEvent.class);
        iev.setCursor(se.getCursor());
        Trigger tg;
        for (int t=0; t < elTriggers.size(); t++) {
          tg=goFactory.copyOf(elTriggers.get(t));
          this.processTrigger(tg,iSource);
          iev.addTrigger(tg);
        }
        iev.setHotSpot(preCopy);
        ipr.enableInteraction(iev);
      }
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_MARKER,m,dph,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_MARKER,m);
}","/** 
 * Convenient routine to render a marker
 */
protected final void renderMarker(Object oParent,IPrimitiveRenderer ipr,Marker m,Location lo,LineAttributes lia,Fill fPaletteEntry,DataPointHints dph,Integer markerSize,boolean bDeferred,boolean bConsiderTranspostion) throws ChartException {
  if (dph != null && (isNaN(dph.getOrthogonalValue()) || dph.isOutside())) {
    return;
  }
  Fill markerFill=m.getFill();
  m=goFactory.copyMarkerNoFill(m);
  if (dph != null && dph.getOrthogonalValue() instanceof Double) {
    fPaletteEntry=ChartUtil.convertFill(fPaletteEntry,((Double)dph.getOrthogonalValue()).doubleValue(),null);
  }
  if (m.getType().getValue() != MarkerType.ICON && fPaletteEntry != null) {
    m.setFill(fPaletteEntry);
  }
 else {
    m.setFill(goFactory.copyOf(markerFill));
  }
  final ScriptHandler sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_MARKER,m,dph,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_MARKER,m);
  Series se=getSeries();
  Object oSource=(oParent instanceof Legend) ? (StructureSource.createLegend((Legend)oParent)) : (WrappedStructureSource.createSeriesDataPoint(se,dph));
  boolean bTransposed=bConsiderTranspostion && ((ChartWithAxes)getModel()).isTransposed();
  final Location panningOffset=this.getPanningOffset();
  PrimitiveRenderEvent preCopy=null;
  if (m == null || !m.isVisible()) {
    int iSize=5;
    if (m != null) {
      iSize=m.getSize();
    }
    if (lo instanceof Location3D) {
      final Oval3DRenderEvent ore=((EventObjectCache)ipr).getEventObject(oSource,Oval3DRenderEvent.class);
      Location3D lo3d=(Location3D)lo;
      ore.setLocation3D(new Location3D[]{goFactory.createLocation3D(lo3d.getX() - iSize,lo3d.getY() + iSize,lo3d.getZ()),goFactory.createLocation3D(lo3d.getX() - iSize,lo3d.getY() - iSize,lo3d.getZ()),goFactory.createLocation3D(lo3d.getX() + iSize,lo3d.getY() - iSize,lo3d.getZ()),goFactory.createLocation3D(lo3d.getX() + iSize,lo3d.getY() + iSize,lo3d.getZ())});
      preCopy=ore.copy();
    }
 else {
      final OvalRenderEvent ore=((EventObjectCache)ipr).getEventObject(oSource,OvalRenderEvent.class);
      ore.setBounds(goFactory.createBounds(lo.getX() - iSize,lo.getY() - iSize,iSize * 2,iSize * 2));
      preCopy=ore.copy();
    }
  }
 else   if (m.isVisible()) {
    final MarkerRenderer mr=new MarkerRenderer(this.getDevice(),oSource,lo,lia,m.getFill(),m,markerSize,this.getDeferredCache(),bDeferred,bTransposed);
    mr.draw(ipr);
    preCopy=mr.getRenderArea();
  }
  if (this.isInteractivityEnabled() && dph != null) {
    if (!(lo instanceof Location3D) || ((lo instanceof Location3D) && (this.get3DEngine().processEvent(preCopy,panningOffset.getX(),panningOffset.getY()) != null))) {
      final EList<Trigger> elTriggers=se.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=(oParent instanceof Legend) ? (StructureSource.createSeries(se)) : (WrappedStructureSource.createSeriesDataPoint(se,dph));
        final InteractionEvent iev=((EventObjectCache)ipr).getEventObject(iSource,InteractionEvent.class);
        iev.setCursor(se.getCursor());
        Trigger tg;
        for (int t=0; t < elTriggers.size(); t++) {
          tg=goFactory.copyOf(elTriggers.get(t));
          this.processTrigger(tg,iSource);
          iev.addTrigger(tg);
        }
        iev.setHotSpot(preCopy);
        ipr.enableInteraction(iev);
      }
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_MARKER,m,dph,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_MARKER,m);
}",0.991327551701134
70019,"/** 
 * Renders the FittingCurve if defined for supported series.
 * @param ipr
 * @param points
 * @param curve
 * @param bDeferred
 * @throws ChartException
 */
protected final void renderFittingCurve(IPrimitiveRenderer ipr,Location[] points,CurveFitting curve,boolean bShowAsTape,boolean bDeferred) throws ChartException {
  if (!curve.getLineAttributes().isSetVisible()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  boolean isTransposed=((ChartWithAxes)getModel()).isTransposed();
  if (curve.getLineAttributes().isVisible()) {
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_FITTING_CURVE,curve);
    double[] xArray=new double[points.length];
    double[] yArray=new double[points.length];
    for (int i=0; i < xArray.length; i++) {
      xArray[i]=points[i].getX();
      yArray[i]=points[i].getY();
    }
    sort(xArray,yArray,!isTransposed);
    double[] baseArray=xArray, orthogonalArray=yArray;
    if (isTransposed) {
      baseArray=yArray;
      orthogonalArray=xArray;
    }
    FittingCalculator fc=new FittingCalculator(baseArray,orthogonalArray,0.33);
    double[] fitYarray=fc.getFittedValue();
    orthogonalArray=fitYarray;
    if (isTransposed) {
      baseArray=fitYarray;
      orthogonalArray=yArray;
      sort(baseArray,orthogonalArray,false);
    }
    if (curve.getLineAttributes().getColor() != null) {
      CurveRenderer crdr=new CurveRenderer((ChartWithAxes)getModel(),this,curve.getLineAttributes(),goFactory.createLocations(baseArray,orthogonalArray),bShowAsTape,-1,bDeferred,false,null,false,true);
      crdr.draw(ipr);
    }
    if (curve.getLabel().isSetVisible() && curve.getLabel().isVisible()) {
      Label lb=goFactory.copyOf(curve.getLabel());
      final String sPreviousValue=lb.getCaption().getValue();
      lb.getCaption().setValue(getRunTimeContext().externalizedMessage(sPreviousValue));
      BoundingBox bb=cComp.computeBox(getXServer(),IConstants.LEFT,lb,0,0);
      Anchor lbAnchor=curve.getLabelAnchor();
      if (lbAnchor == null) {
        lbAnchor=Anchor.NORTH_LITERAL;
      }
      int horizontal=IConstants.CENTER;
      int vertical=IConstants.ABOVE;
switch (lbAnchor.getValue()) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
        horizontal=IConstants.LEFT;
      break;
case Anchor.NORTH:
case Anchor.SOUTH:
    horizontal=IConstants.CENTER;
  break;
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
horizontal=IConstants.RIGHT;
break;
}
switch (lbAnchor.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_WEST:
case Anchor.NORTH_EAST:
case Anchor.WEST:
case Anchor.EAST:
vertical=IConstants.ABOVE;
break;
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
vertical=IConstants.BELOW;
break;
}
double xs, ys;
if (isTransposed) {
if (horizontal == IConstants.LEFT) {
ys=orthogonalArray[orthogonalArray.length - 1] - bb.getHeight();
horizontal=IConstants.RIGHT;
}
 else if (horizontal == IConstants.RIGHT) {
ys=orthogonalArray[0];
horizontal=IConstants.LEFT;
}
 else {
ys=orthogonalArray[0] + (orthogonalArray[orthogonalArray.length - 1] - orthogonalArray[0]) / 2d - bb.getHeight() / 2d;
}
xs=getFitYPosition(orthogonalArray,baseArray,horizontal,bb.getHeight(),bb.getWidth(),vertical == IConstants.BELOW);
}
 else {
if (horizontal == IConstants.LEFT) {
xs=xArray[0];
}
 else if (horizontal == IConstants.RIGHT) {
xs=xArray[xArray.length - 1] - bb.getWidth();
}
 else {
xs=xArray[0] + (xArray[xArray.length - 1] - xArray[0]) / 2d - bb.getWidth() / 2d;
}
ys=getFitYPosition(xArray,fitYarray,horizontal,bb.getWidth(),bb.getHeight(),vertical == IConstants.ABOVE);
}
bb.setLeft(xs);
bb.setTop(ys);
renderLabel(StructureSource.createSeries(getSeries()),TextRenderEvent.RENDER_TEXT_IN_BLOCK,lb,Position.RIGHT_LITERAL,goFactory.createLocation(bb.getLeft(),bb.getTop()),goFactory.createBounds(bb.getLeft(),bb.getTop(),bb.getWidth(),bb.getHeight()),fDeferredCacheManager.getLastDeferredCache());
}
ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_FITTING_CURVE,curve);
}
}","/** 
 * Renders the FittingCurve if defined for supported series.
 * @param ipr
 * @param points
 * @param curve
 * @param bDeferred
 * @throws ChartException
 */
protected final void renderFittingCurve(IPrimitiveRenderer ipr,Location[] points,CurveFitting curve,boolean bShowAsTape,boolean bDeferred) throws ChartException {
  boolean isTransposed=((ChartWithAxes)getModel()).isTransposed();
  if (curve.getLineAttributes().isVisible()) {
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_FITTING_CURVE,curve);
    double[] xArray=new double[points.length];
    double[] yArray=new double[points.length];
    for (int i=0; i < xArray.length; i++) {
      xArray[i]=points[i].getX();
      yArray[i]=points[i].getY();
    }
    sort(xArray,yArray,!isTransposed);
    double[] baseArray=xArray, orthogonalArray=yArray;
    if (isTransposed) {
      baseArray=yArray;
      orthogonalArray=xArray;
    }
    FittingCalculator fc=new FittingCalculator(baseArray,orthogonalArray,0.33);
    double[] fitYarray=fc.getFittedValue();
    orthogonalArray=fitYarray;
    if (isTransposed) {
      baseArray=fitYarray;
      orthogonalArray=yArray;
      sort(baseArray,orthogonalArray,false);
    }
    if (curve.getLineAttributes().getColor() != null) {
      CurveRenderer crdr=new CurveRenderer((ChartWithAxes)getModel(),this,curve.getLineAttributes(),goFactory.createLocations(baseArray,orthogonalArray),bShowAsTape,-1,bDeferred,false,null,false,true);
      crdr.draw(ipr);
    }
    if (curve.getLabel().isVisible()) {
      Label lb=goFactory.copyOf(curve.getLabel());
      final String sPreviousValue=lb.getCaption().getValue();
      lb.getCaption().setValue(getRunTimeContext().externalizedMessage(sPreviousValue));
      BoundingBox bb=cComp.computeBox(getXServer(),IConstants.LEFT,lb,0,0);
      Anchor lbAnchor=curve.getLabelAnchor();
      if (lbAnchor == null) {
        lbAnchor=Anchor.NORTH_LITERAL;
      }
      int horizontal=IConstants.CENTER;
      int vertical=IConstants.ABOVE;
switch (lbAnchor.getValue()) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
        horizontal=IConstants.LEFT;
      break;
case Anchor.NORTH:
case Anchor.SOUTH:
    horizontal=IConstants.CENTER;
  break;
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
horizontal=IConstants.RIGHT;
break;
}
switch (lbAnchor.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_WEST:
case Anchor.NORTH_EAST:
case Anchor.WEST:
case Anchor.EAST:
vertical=IConstants.ABOVE;
break;
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
vertical=IConstants.BELOW;
break;
}
double xs, ys;
if (isTransposed) {
if (horizontal == IConstants.LEFT) {
ys=orthogonalArray[orthogonalArray.length - 1] - bb.getHeight();
horizontal=IConstants.RIGHT;
}
 else if (horizontal == IConstants.RIGHT) {
ys=orthogonalArray[0];
horizontal=IConstants.LEFT;
}
 else {
ys=orthogonalArray[0] + (orthogonalArray[orthogonalArray.length - 1] - orthogonalArray[0]) / 2d - bb.getHeight() / 2d;
}
xs=getFitYPosition(orthogonalArray,baseArray,horizontal,bb.getHeight(),bb.getWidth(),vertical == IConstants.BELOW);
}
 else {
if (horizontal == IConstants.LEFT) {
xs=xArray[0];
}
 else if (horizontal == IConstants.RIGHT) {
xs=xArray[xArray.length - 1] - bb.getWidth();
}
 else {
xs=xArray[0] + (xArray[xArray.length - 1] - xArray[0]) / 2d - bb.getWidth() / 2d;
}
ys=getFitYPosition(xArray,fitYarray,horizontal,bb.getWidth(),bb.getHeight(),vertical == IConstants.ABOVE);
}
bb.setLeft(xs);
bb.setTop(ys);
renderLabel(StructureSource.createSeries(getSeries()),TextRenderEvent.RENDER_TEXT_IN_BLOCK,lb,Position.RIGHT_LITERAL,goFactory.createLocation(bb.getLeft(),bb.getTop()),goFactory.createBounds(bb.getLeft(),bb.getTop(),bb.getWidth(),bb.getHeight()),fDeferredCacheManager.getLastDeferredCache());
}
ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_DRAW_FITTING_CURVE,curve,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_FITTING_CURVE,curve);
}
}",0.9718083887233556
70020,"/** 
 * Ths background is the first component rendered within the plot block. This is rendered with Z-order=0
 */
protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  super.renderBackground(ipr,p);
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=pwa.getPlotBounds();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  if (!isDimension3D()) {
    if (ca.getShadowColor() != null) {
      rre.setBounds(goFactory.translateBounds(bo,3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setOutline(ca.getOutline());
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
  }
  double dSeriesThickness=pwa.getSeriesThickness();
  double[] daX={bo.getLeft() - dSeriesThickness,bo.getLeft() + bo.getWidth() - dSeriesThickness};
  double[] daY={bo.getTop() + bo.getHeight() + dSeriesThickness,bo.getTop() + dSeriesThickness};
  final AllAxes aax=pwa.getAxes();
  AutoScale scPrimaryBase=null;
  AutoScale scPrimaryOrthogonal=null;
  AutoScale scAncillaryBase=null;
  double dXStart=0;
  double dYStart=0;
  double dZStart=0;
  double dXEnd=0;
  double dYEnd=0;
  double dZEnd=0;
  int baseTickCount=0;
  int ancillaryTickCount=0;
  int orthogonalTickCount=0;
  double xStep=0;
  double yStep=0;
  double zStep=0;
  if (isDimension3D()) {
    scPrimaryBase=aax.getPrimaryBase().getScale();
    scPrimaryOrthogonal=aax.getPrimaryOrthogonal().getScale();
    scAncillaryBase=aax.getAncillaryBase().getScale();
    dXStart=scPrimaryBase.getStart();
    dYStart=scPrimaryOrthogonal.getStart();
    dZStart=scAncillaryBase.getStart();
    dXEnd=scPrimaryBase.getEnd();
    dYEnd=scPrimaryOrthogonal.getEnd();
    dZEnd=scAncillaryBase.getEnd();
    baseTickCount=scPrimaryBase.getTickCordinates().size();
    ancillaryTickCount=scAncillaryBase.getTickCordinates().size();
    orthogonalTickCount=scPrimaryOrthogonal.getTickCordinates().size();
    xStep=scPrimaryBase.getUnitSize();
    yStep=scPrimaryOrthogonal.getUnitSize();
    zStep=scAncillaryBase.getUnitSize();
  }
  if (pwa.getDimension() == IConstants.TWO_5_D) {
    Location[] loa=null;
    if (cwa.getWallFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[0],daY[1])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      loa=new Location[4];
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[0],daY[1]);
      loa[2]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[1] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getWallFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    if (cwa.getFloorFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[1],daY[0])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      if (loa == null) {
        loa=new Location[4];
      }
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[1],daY[0]);
      loa[2]=goFactory.createLocation(daX[1] + dSeriesThickness,daY[0] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getFloorFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
  }
 else   if (pwa.getDimension() == IConstants.THREE_D) {
    Location3D[] loa=null;
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Polygon3DRenderEvent.class);
    pre.setDoubleSided(true);
    loa=new Location3D[4];
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    loa[2]=goFactory.createLocation3D(dXStart,dYEnd,dZEnd);
    loa[3]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    Object event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dLeftWall=Engine3D.getObjectFromEvent(event_new);
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    loa[2]=goFactory.createLocation3D(dXEnd,dYEnd,dZStart);
    loa[3]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dRightWall=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getWallFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getWallFill()).getTransparency() > 0) || (!(cwa.getWallFill() instanceof ColorDefinition) && cwa.getWallFill() != null)) {
      leftWallFill=true;
      rightWallFill=true;
    }
    if (loa == null) {
      loa=new Location3D[4];
    }
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    loa[2]=goFactory.createLocation3D(dXEnd,dYStart,dZEnd);
    loa[3]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getFloorFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dFloor=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getFloorFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getFloorFill()).getTransparency() > 0) || (!(cwa.getFloorFill() instanceof ColorDefinition) && cwa.getFloorFill() != null)) {
      floorFill=true;
    }
  }
  final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
  oaxa[0]=aax.getPrimaryBase();
  oaxa[1]=aax.getPrimaryOrthogonal();
  for (int i=0; i < aax.getOverlayCount(); i++) {
    oaxa[2 + i]=aax.getOverlay(i);
  }
  if (aax.getAncillaryBase() != null) {
    oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
  }
  renderMarkerRanges(oaxa,bo);
  renderMarkerLines(oaxa,bo);
  double x=0, y=0, vnext=0;
  LineAttributes lia;
  LineRenderEvent lre;
  final Insets insCA=aax.getInsets();
  int iCount;
  Grid g;
  double[] doaMinor=null;
  for (int i=0; i < oaxa.length; i++) {
    g=oaxa[i].getGrid();
    iCount=g.getMinorCountPerMajor();
    lia=oaxa[i].getGrid().getLineAttributes(IConstants.MINOR);
    if (lia == null || !lia.isSetStyle() || !lia.isVisible()) {
      continue;
    }
    if (iCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{Integer.valueOf(iCount)},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    AutoScale sc=oaxa[i].getScale();
    doaMinor=sc.getMinorCoordinates(iCount);
    if (isDimension3D()) {
      Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
      lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
        AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
      if (floorFill) {
        for (int k=0; k < xa.size() - 1; k++) {
          for (int j=0; j < doaMinor.length - 1; j++) {
            if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
              continue;
            }
            lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
            lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
            lre3d.setObject3DParent(o3dFloor);
            getDeferredCache().addLine(lre3d);
          }
        }
      }
    if (rightWallFill) {
      for (int k=0; k < xa.size() - 1; k++) {
        for (int j=0; j < doaMinor.length - 1; j++) {
          if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
            continue;
          }
          lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
          lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
          lre3d.setObject3DParent(o3dRightWall);
          getDeferredCache().addLine(lre3d);
        }
      }
    }
  break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
  for (int j=0; j < doaMinor.length - 1; j++) {
    if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
      continue;
    }
    lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
    lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart + (ancillaryTickCount - 1) * zStep));
    lre3d.setObject3DParent(o3dLeftWall);
    getDeferredCache().addLine(lre3d);
  }
}
}
if (rightWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
  if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
    continue;
  }
  lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setObject3DParent(o3dRightWall);
  getDeferredCache().addLine(lre3d);
}
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
}
if (floorFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],da.getCoordinate(j + 1))) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],da.getCoordinate(j + 1)))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k] + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
vnext+=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k],dY2));
ipr.drawLine(lre);
}
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j) - pwa.getSeriesThickness();
vnext=da.getCoordinate(j + 1) - pwa.getSeriesThickness();
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + iDirection * doaMinor[k] + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
vnext-=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX2,y + iDirection * doaMinor[k]));
ipr.drawLine(lre);
}
}
}
}
for (int i=0; i < oaxa.length; i++) {
final int STEP_NUMBER=oaxa[i].getModelAxis().getScale().getMajorGridsStepNumber();
lia=oaxa[i].getGrid().getLineAttributes(IConstants.MAJOR);
if (lia == null || !lia.isSetStyle() || !lia.isVisible()) {
continue;
}
AutoScale sc=oaxa[i].getScale();
if (isDimension3D()) {
Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
if (floorFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k),dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (floorFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1));
lre.setEnd(goFactory.createLocation(x,dY2));
ipr.drawLine(lre);
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=(da.getCoordinate(j) - pwa.getSeriesThickness());
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX2,y));
ipr.drawLine(lre);
}
}
}
if (!isDimension3D() && p.getClientArea().getOutline().isVisible()) {
rre.setBounds(bo);
ipr.drawRectangle(rre);
}
}","/** 
 * Ths background is the first component rendered within the plot block. This is rendered with Z-order=0
 */
protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  super.renderBackground(ipr,p);
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=pwa.getPlotBounds();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  if (!isDimension3D()) {
    if (ca.getShadowColor() != null) {
      rre.setBounds(goFactory.translateBounds(bo,3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setOutline(ca.getOutline());
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
  }
  double dSeriesThickness=pwa.getSeriesThickness();
  double[] daX={bo.getLeft() - dSeriesThickness,bo.getLeft() + bo.getWidth() - dSeriesThickness};
  double[] daY={bo.getTop() + bo.getHeight() + dSeriesThickness,bo.getTop() + dSeriesThickness};
  final AllAxes aax=pwa.getAxes();
  AutoScale scPrimaryBase=null;
  AutoScale scPrimaryOrthogonal=null;
  AutoScale scAncillaryBase=null;
  double dXStart=0;
  double dYStart=0;
  double dZStart=0;
  double dXEnd=0;
  double dYEnd=0;
  double dZEnd=0;
  int baseTickCount=0;
  int ancillaryTickCount=0;
  int orthogonalTickCount=0;
  double xStep=0;
  double yStep=0;
  double zStep=0;
  if (isDimension3D()) {
    scPrimaryBase=aax.getPrimaryBase().getScale();
    scPrimaryOrthogonal=aax.getPrimaryOrthogonal().getScale();
    scAncillaryBase=aax.getAncillaryBase().getScale();
    dXStart=scPrimaryBase.getStart();
    dYStart=scPrimaryOrthogonal.getStart();
    dZStart=scAncillaryBase.getStart();
    dXEnd=scPrimaryBase.getEnd();
    dYEnd=scPrimaryOrthogonal.getEnd();
    dZEnd=scAncillaryBase.getEnd();
    baseTickCount=scPrimaryBase.getTickCordinates().size();
    ancillaryTickCount=scAncillaryBase.getTickCordinates().size();
    orthogonalTickCount=scPrimaryOrthogonal.getTickCordinates().size();
    xStep=scPrimaryBase.getUnitSize();
    yStep=scPrimaryOrthogonal.getUnitSize();
    zStep=scAncillaryBase.getUnitSize();
  }
  if (pwa.getDimension() == IConstants.TWO_5_D) {
    Location[] loa=null;
    if (cwa.getWallFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[0],daY[1])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      loa=new Location[4];
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[0],daY[1]);
      loa[2]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[1] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getWallFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    if (cwa.getFloorFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[1],daY[0])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      if (loa == null) {
        loa=new Location[4];
      }
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[1],daY[0]);
      loa[2]=goFactory.createLocation(daX[1] + dSeriesThickness,daY[0] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getFloorFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
  }
 else   if (pwa.getDimension() == IConstants.THREE_D) {
    Location3D[] loa=null;
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Polygon3DRenderEvent.class);
    pre.setDoubleSided(true);
    loa=new Location3D[4];
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    loa[2]=goFactory.createLocation3D(dXStart,dYEnd,dZEnd);
    loa[3]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    Object event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dLeftWall=Engine3D.getObjectFromEvent(event_new);
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    loa[2]=goFactory.createLocation3D(dXEnd,dYEnd,dZStart);
    loa[3]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dRightWall=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getWallFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getWallFill()).getTransparency() > 0) || (!(cwa.getWallFill() instanceof ColorDefinition) && cwa.getWallFill() != null)) {
      leftWallFill=true;
      rightWallFill=true;
    }
    if (loa == null) {
      loa=new Location3D[4];
    }
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    loa[2]=goFactory.createLocation3D(dXEnd,dYStart,dZEnd);
    loa[3]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getFloorFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dFloor=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getFloorFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getFloorFill()).getTransparency() > 0) || (!(cwa.getFloorFill() instanceof ColorDefinition) && cwa.getFloorFill() != null)) {
      floorFill=true;
    }
  }
  final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
  oaxa[0]=aax.getPrimaryBase();
  oaxa[1]=aax.getPrimaryOrthogonal();
  for (int i=0; i < aax.getOverlayCount(); i++) {
    oaxa[2 + i]=aax.getOverlay(i);
  }
  if (aax.getAncillaryBase() != null) {
    oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
  }
  renderMarkerRanges(oaxa,bo);
  renderMarkerLines(oaxa,bo);
  double x=0, y=0, vnext=0;
  LineAttributes lia;
  LineRenderEvent lre;
  final Insets insCA=aax.getInsets();
  int iCount;
  Grid g;
  double[] doaMinor=null;
  for (int i=0; i < oaxa.length; i++) {
    g=oaxa[i].getGrid();
    iCount=g.getMinorCountPerMajor();
    lia=oaxa[i].getGrid().getLineAttributes(IConstants.MINOR);
    if (lia == null || !lia.isVisible()) {
      continue;
    }
    if (iCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{Integer.valueOf(iCount)},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    AutoScale sc=oaxa[i].getScale();
    doaMinor=sc.getMinorCoordinates(iCount);
    if (isDimension3D()) {
      Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
      lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
        AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
      if (floorFill) {
        for (int k=0; k < xa.size() - 1; k++) {
          for (int j=0; j < doaMinor.length - 1; j++) {
            if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
              continue;
            }
            lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
            lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
            lre3d.setObject3DParent(o3dFloor);
            getDeferredCache().addLine(lre3d);
          }
        }
      }
    if (rightWallFill) {
      for (int k=0; k < xa.size() - 1; k++) {
        for (int j=0; j < doaMinor.length - 1; j++) {
          if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
            continue;
          }
          lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
          lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
          lre3d.setObject3DParent(o3dRightWall);
          getDeferredCache().addLine(lre3d);
        }
      }
    }
  break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
  for (int j=0; j < doaMinor.length - 1; j++) {
    if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
      continue;
    }
    lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
    lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart + (ancillaryTickCount - 1) * zStep));
    lre3d.setObject3DParent(o3dLeftWall);
    getDeferredCache().addLine(lre3d);
  }
}
}
if (rightWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
  if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
    continue;
  }
  lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setObject3DParent(o3dRightWall);
  getDeferredCache().addLine(lre3d);
}
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
}
if (floorFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],da.getCoordinate(j + 1))) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],da.getCoordinate(j + 1)))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k] + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
vnext+=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k],dY2));
ipr.drawLine(lre);
}
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j) - pwa.getSeriesThickness();
vnext=da.getCoordinate(j + 1) - pwa.getSeriesThickness();
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + iDirection * doaMinor[k] + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
vnext-=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX2,y + iDirection * doaMinor[k]));
ipr.drawLine(lre);
}
}
}
}
for (int i=0; i < oaxa.length; i++) {
final int STEP_NUMBER=oaxa[i].getModelAxis().getScale().getMajorGridsStepNumber();
lia=oaxa[i].getGrid().getLineAttributes(IConstants.MAJOR);
if (lia == null || !lia.isVisible()) {
continue;
}
AutoScale sc=oaxa[i].getScale();
if (isDimension3D()) {
Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
if (floorFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k),dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (floorFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1));
lre.setEnd(goFactory.createLocation(x,dY2));
ipr.drawLine(lre);
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=(da.getCoordinate(j) - pwa.getSeriesThickness());
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX2,y));
ipr.drawLine(lre);
}
}
}
if (!isDimension3D() && p.getClientArea().getOutline().isVisible()) {
rre.setBounds(bo);
ipr.drawRectangle(rre);
}
}",0.9989967034542068
70021,"/** 
 * This method renders the bar graphic elements superimposed over the plot background and any previously rendered series' graphic elements.
 */
public void renderPlot(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  if (!p.isVisible()) {
    return;
  }
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  if (bFirstInSequence) {
    renderBackground(ipr,p);
    renderAxesStructure(ipr,p);
  }
  if (getSeries() != null) {
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_DRAW_SERIES,getSeries(),this,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_SERIES,getSeries());
    if (p.getClientArea().isVisible()) {
      renderSeries(ipr,p,srh);
    }
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_DRAW_SERIES,getSeries(),this,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_SERIES,getSeries());
    renderAxesDecoration(ipr,srh);
  }
  if (bLastInSequence) {
    final Location panningOffset=getPanningOffset();
    try {
      if (isDimension3D()) {
        fDeferredCacheManager.process3DEvent(null,get3DEngine(),panningOffset.getX(),panningOffset.getY());
      }
      fDeferredCacheManager.flushAll();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    final AllAxes aax=pwa.getAxes();
    final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
    oaxa[0]=aax.getPrimaryBase();
    oaxa[1]=aax.getPrimaryOrthogonal();
    for (int i=0; i < aax.getOverlayCount(); i++) {
      oaxa[2 + i]=aax.getOverlay(i);
    }
    if (aax.getAncillaryBase() != null) {
      oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
    }
    renderAxesLabels(ipr,p,oaxa);
    try {
      if (isDimension3D()) {
        getDeferredCache().process3DEvent(get3DEngine(),panningOffset.getX(),panningOffset.getY());
      }
      getDeferredCache().flush();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
  }
}","/** 
 * This method renders the bar graphic elements superimposed over the plot background and any previously rendered series' graphic elements.
 */
public void renderPlot(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  if (!p.isVisible()) {
    return;
  }
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  if (bFirstInSequence) {
    renderBackground(ipr,p);
    renderAxesStructure(ipr,p);
  }
  if (getSeries() != null || ChartUtil.isDataEmpty(rtc)) {
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_DRAW_SERIES,getSeries(),this,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_SERIES,getSeries());
    if (p.getClientArea().isVisible()) {
      renderSeries(ipr,p,srh);
    }
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_DRAW_SERIES,getSeries(),this,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_SERIES,getSeries());
    renderAxesDecoration(ipr,srh);
  }
  if (bLastInSequence) {
    final Location panningOffset=getPanningOffset();
    try {
      if (isDimension3D()) {
        fDeferredCacheManager.process3DEvent(null,get3DEngine(),panningOffset.getX(),panningOffset.getY());
      }
      fDeferredCacheManager.flushAll();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    final AllAxes aax=pwa.getAxes();
    final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
    oaxa[0]=aax.getPrimaryBase();
    oaxa[1]=aax.getPrimaryOrthogonal();
    for (int i=0; i < aax.getOverlayCount(); i++) {
      oaxa[2 + i]=aax.getOverlay(i);
    }
    if (aax.getAncillaryBase() != null) {
      oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
    }
    renderAxesLabels(ipr,p,oaxa);
    try {
      if (isDimension3D()) {
        getDeferredCache().process3DEvent(get3DEngine(),panningOffset.getX(),panningOffset.getY());
      }
      getDeferredCache().flush();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
  }
}",0.9937655860349128
70022,"/** 
 * Renders the legend block based on the legend rendering rules.
 * @param ipr
 * @param lg
 * @param htRenderers
 * @throws ChartException
 */
public void renderLegend(IPrimitiveRenderer ipr,Legend lg,Map<Series,LegendItemRenderingHints> htRenderers) throws ChartException {
  if (!lg.isVisible()) {
    return;
  }
  renderBlock(ipr,lg,StructureSource.createLegend(lg));
  final IDisplayServer xs=getDevice().getDisplayServer();
  final double dScale=getDeviceScale();
  Bounds bo=goFactory.scaleBounds(lg.getBounds(),dScale);
  Size sz=null;
  double dX, dY;
  if (lg.getPosition() != Position.INSIDE_LITERAL) {
    try {
      sz=lg.getPreferredSize(xs,cm,rtc);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    sz.scale(dScale);
    dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
    dY=0;
    if (lg.isSetAnchor()) {
      int iAnchor=lg.getAnchor().getValue();
      if (isRightToLeft()) {
        if (iAnchor == Anchor.EAST) {
          iAnchor=Anchor.WEST;
        }
 else         if (iAnchor == Anchor.NORTH_EAST) {
          iAnchor=Anchor.NORTH_WEST;
        }
 else         if (iAnchor == Anchor.SOUTH_EAST) {
          iAnchor=Anchor.SOUTH_WEST;
        }
 else         if (iAnchor == Anchor.WEST) {
          iAnchor=Anchor.EAST;
        }
 else         if (iAnchor == Anchor.NORTH_WEST) {
          iAnchor=Anchor.NORTH_EAST;
        }
 else         if (iAnchor == Anchor.SOUTH_WEST) {
          iAnchor=Anchor.SOUTH_EAST;
        }
      }
switch (iAnchor) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
        dY=bo.getTop();
      break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
    dY=bo.getTop() + bo.getHeight() - sz.getHeight();
  break;
default :
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
break;
}
switch (iAnchor) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
dX=bo.getLeft();
break;
case Anchor.EAST:
case Anchor.SOUTH_EAST:
case Anchor.NORTH_EAST:
dX=bo.getLeft() + bo.getWidth() - sz.getWidth();
break;
default :
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
break;
}
}
 else {
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
}
}
 else {
dX=bo.getLeft();
dY=bo.getTop();
sz=SizeImpl.create(bo.getWidth(),bo.getHeight());
}
final LegendLayoutHints lilh=rtc.getLegendLayoutHints();
if (lilh == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
Label lgTitle=lg.getTitle();
double lgTitleWidth=0, lgTitleHeight=0;
double yOffset=0, xOffset=0, wOffset=0, hOffset=0;
final boolean bRenderLegendTitle=lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible() && !lilh.getLaTitle().getCaption().getValue().equals(""String_Node_Str"");
int iTitlePos=Position.ABOVE;
if (bRenderLegendTitle) {
lgTitle=lilh.getLaTitle();
Size titleSize=lilh.getTitleSize();
lgTitleWidth=titleSize.getWidth();
lgTitleHeight=titleSize.getHeight();
iTitlePos=lg.getTitlePosition().getValue();
if (isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
switch (iTitlePos) {
case Position.ABOVE:
yOffset=lgTitleHeight;
hOffset=-yOffset;
break;
case Position.BELOW:
hOffset=-lgTitleHeight;
break;
case Position.LEFT:
xOffset=lgTitleWidth;
wOffset=-xOffset;
break;
case Position.RIGHT:
wOffset=-lgTitleWidth;
break;
}
}
final ClientArea ca=lg.getClientArea();
final Insets lgIns=goFactory.scaleInsets(lg.getInsets(),dScale);
LineAttributes lia=ca.getOutline();
bo=goFactory.createBounds(dX,dY,sz.getWidth(),sz.getHeight());
bo=goFactory.adjusteBounds(bo,lgIns);
dX=bo.getLeft();
dY=bo.getTop();
bo.delta(xOffset,yOffset,wOffset,hOffset);
dX=bo.getLeft();
dY=bo.getTop();
final double dBaseX=dX;
final double dBaseY=dY;
final RectangleRenderEvent rre=((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),RectangleRenderEvent.class);
if (ca.getShadowColor() != null) {
rre.setBounds(goFactory.translateBounds(bo,3,3));
rre.setBackground(ca.getShadowColor());
ipr.fillRectangle(rre);
}
rre.setBounds(bo);
rre.setOutline(lia);
rre.setBackground(ca.getBackground());
ipr.fillRectangle(rre);
ipr.drawRectangle(rre);
lia=goFactory.copyOf(lia);
lia.setVisible(true);
final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
if (bPaletteByCategory) {
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
}
}
renderAllLegendItems(ipr,lg,lilh,htRenderers,bo,dBaseX,dBaseY);
if (bRenderLegendTitle) {
double lX=bo.getLeft();
double lY=bo.getTop();
switch (iTitlePos) {
case Position.ABOVE:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() - lgTitleHeight;
break;
case Position.BELOW:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() + bo.getHeight();
break;
case Position.LEFT:
lX=bo.getLeft() - lgTitleWidth;
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
case Position.RIGHT:
lX=bo.getLeft() + bo.getWidth();
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
}
final TextRenderEvent tre=((EventObjectCache)ir).getEventObject(WrappedStructureSource.createLegendTitle(lg,lgTitle),TextRenderEvent.class);
tre.setBlockBounds(goFactory.createBounds(lX,lY,lgTitleWidth,lgTitleHeight));
TextAlignment ta=TextAlignmentImpl.create();
ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
tre.setBlockAlignment(ta);
tre.setLabel(lgTitle);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
if (rtc.isRightToLeftText()) {
tre.setRtlCaption();
}
ipr.drawText(tre);
}
}","/** 
 * Renders the legend block based on the legend rendering rules.
 * @param ipr
 * @param lg
 * @param htRenderers
 * @throws ChartException
 */
public void renderLegend(IPrimitiveRenderer ipr,Legend lg,Map<Series,LegendItemRenderingHints> htRenderers) throws ChartException {
  if (!lg.isVisible()) {
    return;
  }
  renderBlock(ipr,lg,StructureSource.createLegend(lg));
  final IDisplayServer xs=getDevice().getDisplayServer();
  final double dScale=getDeviceScale();
  Bounds bo=goFactory.scaleBounds(lg.getBounds(),dScale);
  Size sz=null;
  double dX, dY;
  if (lg.getPosition() != Position.INSIDE_LITERAL) {
    try {
      sz=lg.getPreferredSize(xs,cm,rtc);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    sz.scale(dScale);
    dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
    dY=0;
    if (lg.isSetAnchor()) {
      int iAnchor=lg.getAnchor().getValue();
      if (isRightToLeft()) {
        if (iAnchor == Anchor.EAST) {
          iAnchor=Anchor.WEST;
        }
 else         if (iAnchor == Anchor.NORTH_EAST) {
          iAnchor=Anchor.NORTH_WEST;
        }
 else         if (iAnchor == Anchor.SOUTH_EAST) {
          iAnchor=Anchor.SOUTH_WEST;
        }
 else         if (iAnchor == Anchor.WEST) {
          iAnchor=Anchor.EAST;
        }
 else         if (iAnchor == Anchor.NORTH_WEST) {
          iAnchor=Anchor.NORTH_EAST;
        }
 else         if (iAnchor == Anchor.SOUTH_WEST) {
          iAnchor=Anchor.SOUTH_EAST;
        }
      }
switch (iAnchor) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
        dY=bo.getTop();
      break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
    dY=bo.getTop() + bo.getHeight() - sz.getHeight();
  break;
default :
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
break;
}
switch (iAnchor) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
dX=bo.getLeft();
break;
case Anchor.EAST:
case Anchor.SOUTH_EAST:
case Anchor.NORTH_EAST:
dX=bo.getLeft() + bo.getWidth() - sz.getWidth();
break;
default :
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
break;
}
}
 else {
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
}
}
 else {
dX=bo.getLeft();
dY=bo.getTop();
sz=SizeImpl.create(bo.getWidth(),bo.getHeight());
}
final LegendLayoutHints lilh=rtc.getLegendLayoutHints();
if (lilh == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
Label lgTitle=lg.getTitle();
double lgTitleWidth=0, lgTitleHeight=0;
double yOffset=0, xOffset=0, wOffset=0, hOffset=0;
final boolean bRenderLegendTitle=lgTitle != null && lgTitle.isVisible() && !lilh.getLaTitle().getCaption().getValue().equals(""String_Node_Str"");
int iTitlePos=Position.ABOVE;
if (bRenderLegendTitle) {
lgTitle=lilh.getLaTitle();
Size titleSize=lilh.getTitleSize();
lgTitleWidth=titleSize.getWidth();
lgTitleHeight=titleSize.getHeight();
iTitlePos=lg.getTitlePosition().getValue();
if (isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
switch (iTitlePos) {
case Position.ABOVE:
yOffset=lgTitleHeight;
hOffset=-yOffset;
break;
case Position.BELOW:
hOffset=-lgTitleHeight;
break;
case Position.LEFT:
xOffset=lgTitleWidth;
wOffset=-xOffset;
break;
case Position.RIGHT:
wOffset=-lgTitleWidth;
break;
}
}
final ClientArea ca=lg.getClientArea();
final Insets lgIns=goFactory.scaleInsets(lg.getInsets(),dScale);
LineAttributes lia=ca.getOutline();
bo=goFactory.createBounds(dX,dY,sz.getWidth(),sz.getHeight());
bo=goFactory.adjusteBounds(bo,lgIns);
dX=bo.getLeft();
dY=bo.getTop();
bo.delta(xOffset,yOffset,wOffset,hOffset);
dX=bo.getLeft();
dY=bo.getTop();
final double dBaseX=dX;
final double dBaseY=dY;
final RectangleRenderEvent rre=((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),RectangleRenderEvent.class);
if (ca.getShadowColor() != null) {
rre.setBounds(goFactory.translateBounds(bo,3,3));
rre.setBackground(ca.getShadowColor());
ipr.fillRectangle(rre);
}
rre.setBounds(bo);
rre.setOutline(lia);
rre.setBackground(ca.getBackground());
ipr.fillRectangle(rre);
ipr.drawRectangle(rre);
lia=goFactory.copyOf(lia);
lia.setVisible(true);
final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
if (bPaletteByCategory) {
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
}
}
renderAllLegendItems(ipr,lg,lilh,htRenderers,bo,dBaseX,dBaseY);
if (bRenderLegendTitle) {
double lX=bo.getLeft();
double lY=bo.getTop();
switch (iTitlePos) {
case Position.ABOVE:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() - lgTitleHeight;
break;
case Position.BELOW:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() + bo.getHeight();
break;
case Position.LEFT:
lX=bo.getLeft() - lgTitleWidth;
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
case Position.RIGHT:
lX=bo.getLeft() + bo.getWidth();
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
}
final TextRenderEvent tre=((EventObjectCache)ir).getEventObject(WrappedStructureSource.createLegendTitle(lg,lgTitle),TextRenderEvent.class);
tre.setBlockBounds(goFactory.createBounds(lX,lY,lgTitleWidth,lgTitleHeight));
TextAlignment ta=TextAlignmentImpl.create();
ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
tre.setBlockAlignment(ta);
tre.setLabel(lgTitle);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
if (rtc.isRightToLeftText()) {
tre.setRtlCaption();
}
ipr.drawText(tre);
}
}",0.997835137385512
70023,"/** 
 * Renders the background.
 * @param ipr
 * @param p
 * @throws ChartException
 */
protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  final double dScale=getDeviceScale();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  rre.updateFrom(p,dScale);
  ipr.fillRectangle(rre);
  ipr.drawRectangle(rre);
  PlotComputation oComputations=getComputations();
  if (oComputations instanceof PlotWithoutAxes) {
    final PlotWithoutAxes pwoa=(PlotWithoutAxes)oComputations;
    final ClientArea ca=p.getClientArea();
    Bounds bo=pwoa.getPlotBounds();
    if (ca.getShadowColor() != null) {
      rre.setBounds(goFactory.translateBounds(bo,3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
    if (!ca.getOutline().isSetVisible()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
    if (ca.getOutline().isVisible()) {
      Size sz=pwoa.getCellSize();
      final LineRenderEvent lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
      lre.setLineAttributes(ca.getOutline());
      int colCount=pwoa.getColumnCount();
      int rowCount=pwoa.getRowCount();
      ChartWithoutAxes cwoa=pwoa.getModel();
      if (cwoa instanceof DialChart && ((DialChart)cwoa).isDialSuperimposition()) {
        colCount=1;
        rowCount=1;
      }
      for (int i=0; i < colCount + 1; i++) {
        lre.setStart(goFactory.createLocation(bo.getLeft() + i * sz.getWidth(),bo.getTop()));
        lre.setEnd(goFactory.createLocation(bo.getLeft() + i * sz.getWidth(),bo.getTop() + bo.getHeight()));
        ipr.drawLine(lre);
      }
      for (int j=0; j < rowCount + 1; j++) {
        lre.setStart(goFactory.createLocation(bo.getLeft(),bo.getTop() + j * sz.getHeight()));
        lre.setEnd(goFactory.createLocation(bo.getLeft() + bo.getWidth(),bo.getTop() + j * sz.getHeight()));
        ipr.drawLine(lre);
      }
    }
  }
}","/** 
 * Renders the background.
 * @param ipr
 * @param p
 * @throws ChartException
 */
protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  final double dScale=getDeviceScale();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  rre.updateFrom(p,dScale);
  ipr.fillRectangle(rre);
  ipr.drawRectangle(rre);
  PlotComputation oComputations=getComputations();
  if (oComputations instanceof PlotWithoutAxes) {
    final PlotWithoutAxes pwoa=(PlotWithoutAxes)oComputations;
    final ClientArea ca=p.getClientArea();
    Bounds bo=pwoa.getPlotBounds();
    if (ca.getShadowColor() != null) {
      rre.setBounds(goFactory.translateBounds(bo,3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
    if (ca.getOutline().isVisible()) {
      Size sz=pwoa.getCellSize();
      final LineRenderEvent lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
      lre.setLineAttributes(ca.getOutline());
      int colCount=pwoa.getColumnCount();
      int rowCount=pwoa.getRowCount();
      ChartWithoutAxes cwoa=pwoa.getModel();
      if (cwoa instanceof DialChart && ((DialChart)cwoa).isDialSuperimposition()) {
        colCount=1;
        rowCount=1;
      }
      for (int i=0; i < colCount + 1; i++) {
        lre.setStart(goFactory.createLocation(bo.getLeft() + i * sz.getWidth(),bo.getTop()));
        lre.setEnd(goFactory.createLocation(bo.getLeft() + i * sz.getWidth(),bo.getTop() + bo.getHeight()));
        ipr.drawLine(lre);
      }
      for (int j=0; j < rowCount + 1; j++) {
        lre.setStart(goFactory.createLocation(bo.getLeft(),bo.getTop() + j * sz.getHeight()));
        lre.setEnd(goFactory.createLocation(bo.getLeft() + bo.getWidth(),bo.getTop() + j * sz.getHeight()));
        ipr.drawLine(lre);
      }
    }
  }
}",0.9548570077995746
70024,"/** 
 * This method returns appropriate renders for the given chart model. It uses extension points to identify a renderer corresponding to a custom series.
 * @param cm
 * @param rtc
 * @param oComputations
 * @return renderers
 * @throws ChartException
 */
public static final BaseRenderer[] instances(Chart cm,RunTimeContext rtc,PlotComputation oComputations) throws ChartException {
  final PluginSettings ps=PluginSettings.instance();
  BaseRenderer[] brna=null;
  final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  if (cm instanceof ChartWithAxes) {
    final ChartWithAxes cwa=(ChartWithAxes)cm;
    final Axis[] axa=cwa.getPrimaryBaseAxes();
    Axis axPrimaryBase=axa[0];
    Series se;
    AxesRenderer ar=null;
    List<AxesRenderer> al=new ArrayList<AxesRenderer>();
    List<Series> alRunTimeSeries;
    EList<SeriesDefinition> elBase, elOrthogonal;
    SeriesDefinition sd=null;
    elBase=axPrimaryBase.getSeriesDefinitions();
    if (elBase.isEmpty()) {
      return createEmptyInstance(cm,rtc,oComputations);
    }
 else {
      final SeriesDefinition sdBase=elBase.get(0);
      alRunTimeSeries=sdBase.getRunTimeSeries();
      if (alRunTimeSeries.isEmpty()) {
        return createEmptyInstance(cm,rtc,oComputations);
      }
      se=alRunTimeSeries.get(0);
      ar=(se.getClass() == SeriesImpl.class) ? new EmptyWithAxes() : (AxesRenderer)ps.getRenderer(se.getClass());
      ar.set(cm,oComputations,se,axPrimaryBase,sdBase);
      ar.set(rtc);
      al.add(ar);
      final Axis[] axaOrthogonal=cwa.getOrthogonalAxes(axPrimaryBase,true);
      for (int i=0; i < axaOrthogonal.length; i++) {
        elOrthogonal=axaOrthogonal[i].getSeriesDefinitions();
        for (int j=0; j < elOrthogonal.size(); j++) {
          sd=elOrthogonal.get(j);
          alRunTimeSeries=sd.getRunTimeSeries();
          for (int k=0; k < alRunTimeSeries.size(); k++) {
            se=alRunTimeSeries.get(k);
            ar=(se.getClass() == SeriesImpl.class) ? new EmptyWithAxes() : (AxesRenderer)ps.getRenderer(se.getClass());
            ar.set(cm,oComputations,se,axaOrthogonal[i],bPaletteByCategory ? sdBase : sd);
            al.add(ar);
          }
        }
      }
      Collections.sort(al,zOrderComparator);
      brna=new BaseRenderer[al.size()];
      for (int i=0; i < brna.length; i++) {
        ar=al.get(i);
        ar.iSeriesIndex=i;
        ar.iSeriesCount=brna.length;
        brna[i]=ar;
      }
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    final ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    EList<SeriesDefinition> elBase=cwoa.getSeriesDefinitions();
    EList<SeriesDefinition> elOrthogonal;
    SeriesDefinition sd, sdBase;
    List<Series> alRuntimeSeries;
    final Series[] sea=cwoa.getRunTimeSeries();
    Series se;
    final int iSeriesCount=sea.length;
    brna=new BaseRenderer[iSeriesCount];
    int iSI=0;
    for (int i=0; i < elBase.size(); i++) {
      sdBase=elBase.get(i);
      alRuntimeSeries=sdBase.getRunTimeSeries();
      if (isDataEmpty(rtc)) {
        brna=new BaseRenderer[1];
        brna[0]=new EmptyWithoutAxes();
        brna[0].set(cm,oComputations,sdBase.getSeries().get(0),sdBase);
        brna[0].set(rtc);
        brna[0].iSeriesIndex=0;
        brna[0].iSeriesCount=1;
        return brna;
      }
      if (alRuntimeSeries.size() != 1) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.PLUGIN,""String_Node_Str"",new Object[]{Integer.valueOf(alRuntimeSeries.size())},Messages.getResourceBundle(rtc.getULocale()));
      }
      se=alRuntimeSeries.get(0);
      brna[iSI]=(se.getClass() == SeriesImpl.class) ? new EmptyWithoutAxes() : ps.getRenderer(se.getClass());
      brna[iSI].set(cm,oComputations,se,sdBase);
      brna[iSI].set(rtc);
      brna[iSI].iSeriesIndex=iSI++;
      elOrthogonal=elBase.get(i).getSeriesDefinitions();
      for (int j=0; j < elOrthogonal.size(); j++) {
        sd=elOrthogonal.get(j);
        alRuntimeSeries=sd.getRunTimeSeries();
        for (int k=0; k < alRuntimeSeries.size(); k++) {
          se=alRuntimeSeries.get(k);
          brna[iSI]=(se.getClass() == SeriesImpl.class) ? new EmptyWithoutAxes() : ps.getRenderer(se.getClass());
          brna[iSI].set(cm,oComputations,se,bPaletteByCategory ? sdBase : sd);
          brna[iSI].iSeriesIndex=iSI++;
        }
      }
    }
    for (int k=0; k < iSI; k++) {
      brna[k].iSeriesCount=iSI;
    }
  }
  return brna;
}","/** 
 * This method returns appropriate renders for the given chart model. It uses extension points to identify a renderer corresponding to a custom series.
 * @param cm
 * @param rtc
 * @param oComputations
 * @return renderers
 * @throws ChartException
 */
public static final BaseRenderer[] instances(Chart cm,RunTimeContext rtc,PlotComputation oComputations) throws ChartException {
  final PluginSettings ps=PluginSettings.instance();
  BaseRenderer[] brna=null;
  final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  if (cm instanceof ChartWithAxes) {
    final ChartWithAxes cwa=(ChartWithAxes)cm;
    final Axis[] axa=cwa.getPrimaryBaseAxes();
    Axis axPrimaryBase=axa[0];
    Series se;
    AxesRenderer ar=null;
    List<AxesRenderer> al=new ArrayList<AxesRenderer>();
    List<Series> alRunTimeSeries;
    EList<SeriesDefinition> elBase, elOrthogonal;
    SeriesDefinition sd=null;
    elBase=axPrimaryBase.getSeriesDefinitions();
    if (elBase.isEmpty()) {
      return createEmptyInstance(cm,rtc,oComputations);
    }
 else {
      final SeriesDefinition sdBase=elBase.get(0);
      alRunTimeSeries=sdBase.getRunTimeSeries();
      if (alRunTimeSeries.isEmpty()) {
        return createEmptyInstance(cm,rtc,oComputations);
      }
      se=alRunTimeSeries.get(0);
      ar=(se.getClass() == SeriesImpl.class) ? new EmptyWithAxes() : (AxesRenderer)ps.getRenderer(se.getClass());
      ar.set(cm,oComputations,se,axPrimaryBase,sdBase);
      ar.set(rtc);
      al.add(ar);
      final Axis[] axaOrthogonal=cwa.getOrthogonalAxes(axPrimaryBase,true);
      for (int i=0; i < axaOrthogonal.length; i++) {
        elOrthogonal=axaOrthogonal[i].getSeriesDefinitions();
        for (int j=0; j < elOrthogonal.size(); j++) {
          sd=elOrthogonal.get(j);
          alRunTimeSeries=sd.getRunTimeSeries();
          for (int k=0; k < alRunTimeSeries.size(); k++) {
            se=alRunTimeSeries.get(k);
            ar=(se.getClass() == SeriesImpl.class) ? new EmptyWithAxes() : (AxesRenderer)ps.getRenderer(se.getClass());
            ar.set(cm,oComputations,se,axaOrthogonal[i],bPaletteByCategory ? sdBase : sd);
            al.add(ar);
          }
        }
      }
      Collections.sort(al,zOrderComparator);
      brna=new BaseRenderer[al.size()];
      for (int i=0; i < brna.length; i++) {
        ar=al.get(i);
        ar.iSeriesIndex=i;
        ar.iSeriesCount=brna.length;
        brna[i]=ar;
      }
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    final ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    EList<SeriesDefinition> elBase=cwoa.getSeriesDefinitions();
    EList<SeriesDefinition> elOrthogonal;
    SeriesDefinition sd, sdBase;
    List<Series> alRuntimeSeries;
    final Series[] sea=cwoa.getRunTimeSeries();
    Series se;
    final int iSeriesCount=sea.length;
    brna=new BaseRenderer[iSeriesCount];
    int iSI=0;
    for (int i=0; i < elBase.size(); i++) {
      sdBase=elBase.get(i);
      alRuntimeSeries=sdBase.getRunTimeSeries();
      if (ChartUtil.isDataEmpty(rtc)) {
        brna=new BaseRenderer[1];
        brna[0]=new EmptyWithoutAxes();
        brna[0].set(cm,oComputations,sdBase.getSeries().get(0),sdBase);
        brna[0].set(rtc);
        brna[0].iSeriesIndex=0;
        brna[0].iSeriesCount=1;
        return brna;
      }
      if (alRuntimeSeries.size() != 1) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.PLUGIN,""String_Node_Str"",new Object[]{Integer.valueOf(alRuntimeSeries.size())},Messages.getResourceBundle(rtc.getULocale()));
      }
      se=alRuntimeSeries.get(0);
      brna[iSI]=(se.getClass() == SeriesImpl.class) ? new EmptyWithoutAxes() : ps.getRenderer(se.getClass());
      brna[iSI].set(cm,oComputations,se,sdBase);
      brna[iSI].set(rtc);
      brna[iSI].iSeriesIndex=iSI++;
      elOrthogonal=elBase.get(i).getSeriesDefinitions();
      for (int j=0; j < elOrthogonal.size(); j++) {
        sd=elOrthogonal.get(j);
        alRuntimeSeries=sd.getRunTimeSeries();
        for (int k=0; k < alRuntimeSeries.size(); k++) {
          se=alRuntimeSeries.get(k);
          brna[iSI]=(se.getClass() == SeriesImpl.class) ? new EmptyWithoutAxes() : ps.getRenderer(se.getClass());
          brna[iSI].set(cm,oComputations,se,bPaletteByCategory ? sdBase : sd);
          brna[iSI].iSeriesIndex=iSI++;
        }
      }
    }
    for (int k=0; k < iSI; k++) {
      brna[k].iSeriesCount=iSI;
    }
  }
  return brna;
}",0.9988804299149128
70025,"protected void renderEmptyPlot(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  if (!p.isVisible()) {
    return;
  }
  StructureSource oSource=StructureSource.createPlot(p);
  EventObjectCache eoc=(EventObjectCache)ipr;
  double dScale=getDeviceScale();
  RectangleRenderEvent rre=eoc.getEventObject(oSource,RectangleRenderEvent.class);
  rre.updateFrom(p,dScale);
  ipr.fillRectangle(rre);
  ipr.drawRectangle(rre);
  ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=rre.getBounds();
  Insets insPlot=p.getInsets();
  bo=goFactory.adjusteBounds(bo,insPlot);
  if (ca.getShadowColor() != null) {
    rre.setBounds(goFactory.translateBounds(bo,3,3));
    rre.setBackground(ca.getShadowColor());
    ipr.fillRectangle(rre);
  }
  rre.setBounds(bo);
  rre.setOutline(ca.getOutline());
  rre.setBackground(ca.getBackground());
  ipr.fillRectangle(rre);
  if (getModel().getEmptyMessage().isVisible()) {
    Label la=getExternalizedCopy(getModel().getEmptyMessage());
    rendLabelInBounds(ipr,la,oSource,bo);
  }
}","protected void renderEmptyPlot(IPrimitiveRenderer ipr,Plot p,Bounds bo) throws ChartException {
  StructureSource oSource=StructureSource.createPlot(p);
  if (getModel().getEmptyMessage().isVisible()) {
    Label la=getExternalizedCopy(getModel().getEmptyMessage());
    rendLabelInBounds(ipr,la,oSource,bo);
  }
}",0.3868613138686131
70026,"public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
}","public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  Boolean bDataEmpty=rtc.getState(RunTimeContext.StateKey.DATA_EMPTY_KEY);
  if (bDataEmpty == null) {
    bDataEmpty=false;
  }
  Label laAltText=getModel().getEmptyMessage();
  if (bDataEmpty && laAltText.isVisible()) {
    final PlotWithAxes pwa=(PlotWithAxes)getComputations();
    renderEmptyPlot(ipr,p,pwa.getPlotBounds());
  }
 else {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  }
}",0.6427104722792608
70027,"private void initGroups(){
  String[] groups=getGroups();
  if (groups.length > 0) {
    cmbGroup.setItems(groups);
    if (binding != null && binding.getAggregateOn() != null) {
      btnGroup.setSelection(true);
      btnTable.setSelection(false);
      if (!isRef)       cmbGroup.setEnabled(true);
      for (int i=0; i < groups.length; i++) {
        if (groups[i].equals(binding.getAggregateOn())) {
          cmbGroup.select(i);
          return;
        }
      }
    }
 else {
      if (this.container instanceof DesignElementHandle && ((DesignElementHandle)this.container).getContainer().getContainer() instanceof TableGroupHandle) {
        TableGroupHandle groupHandle=(TableGroupHandle)((DesignElementHandle)this.container).getContainer().getContainer();
        for (int i=0; i < groups.length; i++) {
          if (groups[i].equals(groupHandle.getName())) {
            cmbGroup.select(i);
          }
        }
        btnTable.setSelection(false);
        btnGroup.setSelection(true);
      }
 else {
        btnTable.setSelection(true);
        btnGroup.setSelection(false);
        cmbGroup.select(0);
        cmbGroup.setEnabled(false);
      }
    }
  }
 else {
    btnGroup.setEnabled(false);
    cmbGroup.setEnabled(false);
    btnTable.setSelection(true);
  }
}","private void initGroups(){
  String[] groups=getGroups();
  if (groups.length > 0) {
    cmbGroup.setItems(groups);
    if (binding != null && binding.getAggregateOn() != null) {
      btnGroup.setSelection(true);
      btnTable.setSelection(false);
      if (!isRef)       cmbGroup.setEnabled(true);
      for (int i=0; i < groups.length; i++) {
        if (groups[i].equals(binding.getAggregateOn())) {
          cmbGroup.select(i);
          return;
        }
      }
    }
 else {
      if (this.container instanceof DesignElementHandle && ((DesignElementHandle)this.container).getContainer().getContainer() instanceof TableGroupHandle) {
        TableGroupHandle groupHandle=(TableGroupHandle)((DesignElementHandle)this.container).getContainer().getContainer();
        for (int i=0; i < groups.length; i++) {
          if (groups[i].equals(groupHandle.getName())) {
            cmbGroup.select(i);
          }
        }
        btnTable.setSelection(false);
        btnGroup.setSelection(true);
      }
 else       if (this.container instanceof ListGroupHandle) {
        ListGroupHandle groupHandle=(ListGroupHandle)this.container;
        for (int i=0; i < groups.length; i++) {
          if (groups[i].equals(groupHandle.getName())) {
            cmbGroup.select(i);
          }
        }
        btnTable.setSelection(false);
        btnGroup.setSelection(true);
      }
 else {
        btnTable.setSelection(true);
        btnGroup.setSelection(false);
        cmbGroup.select(0);
        cmbGroup.setEnabled(false);
      }
    }
  }
 else {
    btnGroup.setEnabled(false);
    cmbGroup.setEnabled(false);
    btnTable.setSelection(true);
  }
}",0.8714285714285714
70028,"protected boolean needRepeat(){
  IListContent list=(IListContent)content;
  if (list != null && list.isHeaderRepeat()) {
    IContent header=(IContent)list.getHeader();
    if (header != null && header.getChildren().size() > 0) {
      return true;
    }
  }
  return false;
}","protected boolean needRepeat(){
  IListContent list=(IListContent)content;
  if (list != null && list.isHeaderRepeat()) {
    return true;
  }
  return false;
}",0.7322654462242563
70029,"protected boolean needRepeat(){
  IGroupContent group=(IGroupContent)content;
  if (group != null && group.isHeaderRepeat()) {
    IContent header=(IContent)group.getHeader();
    if (header != null && header.getChildren().size() > 0) {
      return true;
    }
  }
  return false;
}","protected boolean needRepeat(){
  IGroupContent group=(IGroupContent)content;
  if (group != null && group.isHeaderRepeat()) {
    return true;
  }
  return false;
}",0.7366071428571429
70030,"protected boolean needRepeat(){
  ITableContent table=(ITableContent)content;
  if (table != null && table.isHeaderRepeat()) {
    IContent header=(IContent)table.getHeader();
    if (header != null) {
      return true;
    }
  }
  return false;
}","protected boolean needRepeat(){
  ITableContent table=(ITableContent)content;
  if (table != null && table.isHeaderRepeat()) {
    return true;
  }
  return false;
}",0.7990314769975787
70031,"protected boolean needRepeat(){
  IGroupContent group=(IGroupContent)content;
  if (group != null && group.isHeaderRepeat()) {
    IContent header=(IContent)group.getHeader();
    if (header != null && header.getChildren().size() > 0) {
      return true;
    }
  }
  return false;
}","protected boolean needRepeat(){
  IGroupContent group=(IGroupContent)content;
  if (group != null && group.isHeaderRepeat()) {
    return true;
  }
  return false;
}",0.7366071428571429
70032,"private void init(){
  if (debugScript) {
    server=new ReportVMServer();
    server.addVMListener(this);
    Context cx=Context.enter();
    try {
      server.start(getListenPort(),cx);
    }
 catch (    VMException e1) {
      throw new Error(Messages.getString(""String_Node_Str""));
    }
  }
  engineConfig=new LauncherEngineConfig();
  engineConfig.setEngineHome(getEngineHome());
  try {
    Platform.startup(engineConfig);
  }
 catch (  BirtException e) {
    throw new Error(Messages.getString(""String_Node_Str""));
  }
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  configEngine();
  this.engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  initParameters();
}","private void init(){
  if (debugScript) {
    server=new ReportVMServer();
    server.addVMListener(this);
    Context cx=Context.enter();
    try {
      server.start(getListenPort(),cx);
    }
 catch (    VMException e1) {
      throw new Error(Messages.getString(""String_Node_Str""));
    }
  }
  engineConfig=new LauncherEngineConfig();
  engineConfig.setEngineHome(getEngineHome());
  if (getResourceFolder() != null) {
    engineConfig.setResourcePath(getResourceFolder());
  }
  try {
    Platform.startup(engineConfig);
  }
 catch (  BirtException e) {
    throw new Error(Messages.getString(""String_Node_Str""));
  }
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  configEngine();
  this.engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  initParameters();
}",0.9433962264150944
70033,"boolean finalLaunchCheck(final ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {
  paramValues=new HashMap();
  LauncherEngineConfig engineConfig=new LauncherEngineConfig();
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  final IReportEngine engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  final String fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
  final int taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
  Display display=DebugUI.getStandardDisplay();
  if (display.getThread().equals(Thread.currentThread())) {
    return getParameterValues(getInputParameters(fileName,taskType,engine),paramValues);
  }
  final Object[] result=new Object[]{Boolean.FALSE};
  Runnable r=new Runnable(){
    public void run(){
      result[0]=Boolean.valueOf(getParameterValues(getInputParameters(fileName,taskType,engine),paramValues));
    }
  }
;
  DebugUI.getStandardDisplay().syncExec(r);
  return ((Boolean)result[0]).booleanValue();
}","boolean finalLaunchCheck(final ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {
  paramValues=new HashMap();
  LauncherEngineConfig engineConfig=new LauncherEngineConfig();
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  final IReportEngine engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  final String fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
  if (getResourceFolder(fileName) != null) {
    engineConfig.setResourcePath(getResourceFolder(fileName));
  }
  final int taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
  Display display=DebugUI.getStandardDisplay();
  if (display.getThread().equals(Thread.currentThread())) {
    return getParameterValues(getInputParameters(fileName,taskType,engine),paramValues);
  }
  final Object[] result=new Object[]{Boolean.FALSE};
  Runnable r=new Runnable(){
    public void run(){
      result[0]=Boolean.valueOf(getParameterValues(getInputParameters(fileName,taskType,engine),paramValues));
    }
  }
;
  DebugUI.getStandardDisplay().syncExec(r);
  return ((Boolean)result[0]).booleanValue();
}",0.9547291835084882
70034,"public String[] getVMArguments(ILaunchConfiguration configuration) throws CoreException {
  String[] args=super.getVMArguments(configuration);
  List arguments=new ArrayList();
  for (int i=0; i < args.length; i++) {
    arguments.add(args[i]);
  }
  helper.addPortArgs(arguments);
  helper.addUserClassPath(arguments,configuration);
  helper.addFileNameArgs(arguments);
  helper.addEngineHomeArgs(arguments);
  helper.addTempFolder(arguments);
  helper.addTypeArgs(arguments);
  helper.addParameterArgs(arguments);
  return (String[])arguments.toArray(new String[arguments.size()]);
}","public String[] getVMArguments(ILaunchConfiguration configuration) throws CoreException {
  String[] args=super.getVMArguments(configuration);
  List arguments=new ArrayList();
  for (int i=0; i < args.length; i++) {
    arguments.add(args[i]);
  }
  helper.addPortArgs(arguments);
  helper.addUserClassPath(arguments,configuration);
  helper.addFileNameArgs(arguments);
  helper.addEngineHomeArgs(arguments);
  helper.addResourceFolder(arguments);
  helper.addTempFolder(arguments);
  helper.addTypeArgs(arguments);
  helper.addParameterArgs(arguments);
  return (String[])arguments.toArray(new String[arguments.size()]);
}",0.967741935483871
70035,"private void init(){
  if (isInitialized)   return;
  isInitialized=true;
  try {
    osWinClass=Class.forName(""String_Node_Str"");
    if (osWinClass != null) {
      GET_WINDOW_LONG=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Integer.TYPE});
      SET_WINDOW_LONG=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Integer.TYPE,Integer.TYPE});
      INVALIDATE_RECT=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Class.forName(""String_Node_Str""),Boolean.TYPE});
      Field field=osWinClass.getField(""String_Node_Str"");
      OS_STYLE_INDEX=field.getInt(null);
      field=osWinClass.getField(""String_Node_Str"");
      WS_EX_LAYOUTRTL=field.getInt(null);
      field=osWinClass.getField(""String_Node_Str"");
      WS_EX_NOINHERITLAYOUT=field.getInt(null);
      STYLE_FIELD=Widget.class.getDeclaredField(""String_Node_Str"");
      STYLE_FIELD.setAccessible(true);
      HANDLE=Control.class.getDeclaredField(""String_Node_Str"");
      HANDLE.setAccessible(true);
    }
  }
 catch (  ClassNotFoundException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  NoSuchMethodException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  SecurityException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  NoSuchFieldException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalArgumentException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalAccessException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
}","private void init(){
  if (isInitialized)   return;
  isInitialized=true;
  try {
    osWinClass=Class.forName(""String_Node_Str"");
    if (osWinClass != null) {
      GET_WINDOW_LONG=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Integer.TYPE});
      SET_WINDOW_LONG=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Integer.TYPE,Integer.TYPE});
      INVALIDATE_RECT=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Class.forName(""String_Node_Str""),Boolean.TYPE});
      Field field=osWinClass.getField(""String_Node_Str"");
      OS_STYLE_INDEX=field.getInt(null);
      field=osWinClass.getField(""String_Node_Str"");
      WS_EX_LAYOUTRTL=field.getInt(null);
      field=osWinClass.getField(""String_Node_Str"");
      WS_EX_NOINHERITLAYOUT=field.getInt(null);
      STYLE_FIELD=Widget.class.getDeclaredField(""String_Node_Str"");
      STYLE_FIELD.setAccessible(true);
      HANDLE=Control.class.getDeclaredField(""String_Node_Str"");
      HANDLE.setAccessible(true);
    }
  }
 catch (  ClassNotFoundException e) {
    osWinClass=null;
  }
catch (  NoSuchMethodException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  SecurityException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  NoSuchFieldException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalArgumentException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalAccessException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
}",0.9243328100470958
70036,"protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt)) {
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag);
    }
 else {
      FontSplitter fontSplitter=getFontSplitter(content);
      while (fontSplitter.hasMore()) {
        Chunk ch=fontSplitter.getNext();
        fontFamily=getFontFamily(computedStyle,ch);
        wordWriter.writeContent(type,ch.getText(),computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag);
        textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE);
  }
}","protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt)) {
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag);
    }
 else {
      FontSplitter fontSplitter=getFontSplitter(content);
      while (fontSplitter.hasMore()) {
        Chunk ch=fontSplitter.getNext();
        int offset=ch.getOffset();
        int length=ch.getLength();
        fontFamily=getFontFamily(computedStyle,ch);
        wordWriter.writeContent(type,txt.substring(offset,offset + length),computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag);
        textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE);
  }
}",0.9418259023354564
70037,"private String getFontFamily(IStyle c_style,Chunk ch){
  String fontFamily;
  FontInfo info=ch.getFontInfo();
  BaseFont basefont=null;
  if (info != null) {
    basefont=info.getBaseFont();
    String[][] fontName=basefont.getFamilyFontName();
    int x=fontName.length - 1;
    int y=fontName[0].length - 1;
    fontFamily=fontName[x][y];
  }
 else {
    fontFamily=c_style.getFontFamily();
  }
  return fontFamily;
}","private String getFontFamily(IStyle c_style,Chunk ch){
  FontInfo info=ch.getFontInfo();
  return info.getFontName();
}",0.4275092936802974
70038,"protected void writeRunProperties(IStyle style,String fontFamily,boolean ishyperlink){
  writeHyperlinkStyle(ishyperlink,style);
  writeFont(fontFamily);
  writeFontSize(style);
  writeLetterSpacing(style);
  writeTextLineThrough(style);
  writeFontStyle(style);
  writeFontWeight(style);
}","protected void writeRunProperties(IStyle style,String fontFamily,boolean ishyperlink){
  writeHyperlinkStyle(ishyperlink,style);
  writeFont(fontFamily);
  writeFontSize(style);
  writeLetterSpacing(style);
  writeTextLineThrough(style);
  writeFontStyle(style);
  writeFontWeight(style);
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.8854961832061069
70039,"public void preWindowOpen(){
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(true);
  configurer.setTitle(DesignerWorkbenchMessages.Workbench_title);
}","public void preWindowOpen(){
  IWorkbenchWindowConfigurer configurer=getWindowConfigurer();
  configurer.setShowCoolBar(true);
  configurer.setShowStatusLine(true);
  String title=null;
  IProduct product=Platform.getProduct();
  if (product != null) {
    title=product.getName();
  }
  if (title == null) {
    title=DesignerWorkbenchMessages.Workbench_title;
  }
  configurer.setTitle(title);
}",0.6645468998410174
70040,"/** 
 * Draws background image in a rectangle area with specified repeat pattern. <br> <br> The repeat mode can be: <table border=""solid""> <tr> <td align=""center""><B>Name</td> <td align=""center""><B>What for</td> </tr> <tr> <td>no-repeat</td> <td>Don't repeat.</td> </tr> <tr> <td>repeat-x</td> <td>Only repeat on x orientation.</td> </tr> <tr> <td>repeat-y</td> <td>Only repeat on y orientation.</td> </tr> <tr> <td>repeat</td> <td>Repeat on x and y orientation.</td> </tr> </table>
 * @param imageURI the uri of the background image.
 * @param x the x coordinate of the rectangle area.
 * @param y the y coordinate of the rectangle area.
 * @param width the width of the rectangle area.
 * @param height the height of the rectangle area.
 * @param positionX the initial x position of the background image.
 * @param positionY the initial y position of the background image.
 * @param repeat the repeat mode.
 * @throws Exception 
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float imageWidth,float imageHeight,float positionX,float positionY,int repeat) throws IOException {
  URL url=new URL(imageURI);
  InputStream imageStream=null;
  try {
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    Position imageSize=null;
    ImageIcon imageIcon=new ImageIcon(image);
    if (imageHeight == 0 || imageWidth == 0) {
      imageSize=new Position(imageIcon.getIconWidth(),imageIcon.getIconHeight());
    }
 else {
      imageSize=new Position(imageWidth,imageHeight);
    }
    Position areaPosition=new Position(x,y);
    Position areaSize=new Position(width,height);
    Position imagePosition=new Position(x + positionX,y + positionY);
    BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
    Collection positions=layout.getImagePositions(repeat);
    gSave();
    setColor(Color.WHITE);
    out.println(""String_Node_Str"");
    drawRawRect(x,y,width,height);
    out.println(""String_Node_Str"");
    Iterator iterator=positions.iterator();
    while (iterator.hasNext()) {
      Position position=(Position)iterator.next();
      drawImage(imageURI,image,position.getX(),position.getY(),imageSize.getX(),imageSize.getY());
    }
    gRestore();
  }
  finally {
    if (imageStream != null) {
      imageStream.close();
      imageStream=null;
    }
  }
}","/** 
 * Draws background image in a rectangle area with specified repeat pattern. <br> <br> The repeat mode can be: <table border=""solid""> <tr> <td align=""center""><B>Name</td> <td align=""center""><B>What for</td> </tr> <tr> <td>no-repeat</td> <td>Don't repeat.</td> </tr> <tr> <td>repeat-x</td> <td>Only repeat on x orientation.</td> </tr> <tr> <td>repeat-y</td> <td>Only repeat on y orientation.</td> </tr> <tr> <td>repeat</td> <td>Repeat on x and y orientation.</td> </tr> </table>
 * @param imageURI the uri of the background image.
 * @param x the x coordinate of the rectangle area.
 * @param y the y coordinate of the rectangle area.
 * @param width the width of the rectangle area.
 * @param height the height of the rectangle area.
 * @param positionX the initial x position of the background image.
 * @param positionY the initial y position of the background image.
 * @param repeat the repeat mode.
 * @throws Exception 
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float imageWidth,float imageHeight,float positionX,float positionY,int repeat) throws IOException {
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  org.eclipse.birt.report.engine.layout.emitter.Image image=EmitterUtil.parseImage(null,IImageContent.IMAGE_URL,imageURI,null,null);
  byte[] imageData=image.getData();
  if (imageWidth == 0 || imageHeight == 0) {
    imageWidth=image.getWidth();
    imageHeight=image.getHeight();
  }
  Position imageSize=new Position(imageWidth,imageHeight);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  gSave();
  setColor(Color.WHITE);
  out.println(""String_Node_Str"");
  drawRawRect(x,y,width,height);
  out.println(""String_Node_Str"");
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    try {
      drawImage(imageURI,new ByteArrayInputStream(imageData),position.getX(),position.getY(),imageSize.getX(),imageSize.getY());
    }
 catch (    Exception e) {
      log.log(Level.WARNING,e.getLocalizedMessage());
    }
  }
  gRestore();
}",0.6687710437710438
70041,"/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float iWidth,float iHeight,float positionX,float positionY,int repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=iWidth;
  float imageHeight=iHeight;
  byte[] imageData=null;
  InputStream imageStream=null;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=getImageData(imageStream);
    imageStream.close();
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    ImageIcon imageIcon=new ImageIcon(image);
    if (imageWidth == 0 || imageHeight == 0) {
      imageWidth=imageIcon.getIconWidth();
      imageHeight=imageIcon.getIconHeight();
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
 finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  String extension=getImageExtension(imageURI);
  ImageInfo imageInfo=getImageInfo(imageURI,imageData,extension);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  Position imageSize=new Position(imageWidth,imageHeight);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    exportImageDefn(imageInfo.imageName,imageInfo.imageId,imageWidth,imageHeight,position.getX(),position.getY(),null);
  }
}","/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float iWidth,float iHeight,float positionX,float positionY,int repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=iWidth;
  float imageHeight=iHeight;
  String extension=getImageExtension(imageURI);
  Image image=EmitterUtil.parseImage(null,IImageContent.IMAGE_URL,imageURI,null,extension);
  byte[] imageData=image.getData();
  if (imageWidth == 0 || imageHeight == 0) {
    imageWidth=image.getWidth();
    imageHeight=image.getHeight();
  }
  ImageInfo imageInfo=getImageInfo(imageURI,imageData,extension);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  Position imageSize=new Position(imageWidth,imageHeight);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    exportImageDefn(imageInfo.imageName,imageInfo.imageId,imageWidth,imageHeight,position.getX(),position.getY(),null);
  }
}",0.7583108715184187
70042,"public static boolean canPreviewWithErrors(ModuleHandle model){
  model.checkReport();
  List list=model.getErrorList();
  if (list.size() > 0) {
    return MessageDialog.openConfirm(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return true;
}","public static boolean canPreviewWithErrors(ModuleHandle model){
  if (model == null) {
    return false;
  }
  model.checkReport();
  List list=model.getErrorList();
  if (list.size() > 0) {
    return MessageDialog.openConfirm(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  return true;
}",0.9341142020497804
70043,"protected void drawCellDiagonal(CellArea cell){
  DiagonalInfo diagonalInfo=cell.getDiagonalInfo();
  if (diagonalInfo != null) {
    int startX=currentX + getX(cell);
    int startY=currentY + getY(cell);
    int width=getWidth(cell);
    int height=getHeight(cell);
    int dw=diagonalInfo.getDiagonalWidth();
switch (diagonalInfo.getDiagonalNumber()) {
case 2:
      pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height / 2 - dw / 2,getScaledValue(diagonalInfo.getDiagonalWidth()),diagonalInfo.getColor(),diagonalInfo.getDiagonalStyle());
    pageGraphic.drawLine(startX,startY + dw / 2,startX + width / 2,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),diagonalInfo.getDiagonalStyle());
  break;
case 3:
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),diagonalInfo.getDiagonalStyle());
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height / 2 - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),diagonalInfo.getDiagonalStyle());
pageGraphic.drawLine(startX,startY + dw / 2,startX + width / 2,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),diagonalInfo.getDiagonalStyle());
break;
default :
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),diagonalInfo.getDiagonalStyle());
break;
}
dw=diagonalInfo.getAntidiagonalWidth();
switch (diagonalInfo.getAntidiagonalNumber()) {
case 2:
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width / 2,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),diagonalInfo.getAntidiagonalStyle());
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + height / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),diagonalInfo.getAntidiagonalStyle());
break;
case 3:
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width / 2,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),diagonalInfo.getAntidiagonalStyle());
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + height / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),diagonalInfo.getAntidiagonalStyle());
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),diagonalInfo.getAntidiagonalStyle());
break;
default :
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),diagonalInfo.getAntidiagonalStyle());
break;
}
}
}","protected void drawCellDiagonal(CellArea cell){
  DiagonalInfo diagonalInfo=cell.getDiagonalInfo();
  if (diagonalInfo != null) {
    int startX=currentX + getX(cell);
    int startY=currentY + getY(cell);
    int width=getWidth(cell);
    int height=getHeight(cell);
    int dw=diagonalInfo.getDiagonalWidth();
    int ds=diagonalInfo.getDiagonalStyle();
    if (ds == DiagonalInfo.BORDER_STYLE_DOUBLE) {
      ds=DiagonalInfo.BORDER_STYLE_SOLID;
    }
switch (diagonalInfo.getDiagonalNumber()) {
case 2:
      pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height / 2 - dw / 2,getScaledValue(diagonalInfo.getDiagonalWidth()),diagonalInfo.getColor(),ds);
    pageGraphic.drawLine(startX,startY + dw / 2,startX + width / 2,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
  break;
case 3:
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height / 2 - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + dw / 2,startX + width / 2,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
break;
default :
pageGraphic.drawLine(startX,startY + dw / 2,startX + width,startY + height - dw / 2,getScaledValue(dw),diagonalInfo.getColor(),ds);
break;
}
dw=diagonalInfo.getAntidiagonalWidth();
ds=diagonalInfo.getAntidiagonalStyle();
if (ds == DiagonalInfo.BORDER_STYLE_DOUBLE) {
ds=DiagonalInfo.BORDER_STYLE_SOLID;
}
switch (diagonalInfo.getAntidiagonalNumber()) {
case 2:
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width / 2,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + height / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
break;
case 3:
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width / 2,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + height / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
break;
default :
pageGraphic.drawLine(startX,startY + height - dw / 2,startX + width,startY + dw / 2,getScaledValue(diagonalInfo.getAntidiagonalWidth()),diagonalInfo.getColor(),ds);
break;
}
}
}",0.5163663111438028
70044,"public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible) throws BirtException {
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    nestCount++;
  if (buffers == null) {
    ITableContent table=(ITableContent)content;
    boolean hasPageBreak=hasPageBreak(table);
    if (hasPageBreak) {
      if (currentTableIndex < 0) {
        INode[] nodeList=currentBuffer.getNodeStack();
        pageBreakIndexs=getPageBreakIndex(table);
        repeatEnd=getRepeatEnd(table);
        currentBuffer.startContainer(createTable(table,pageBreakIndexs,0),isFirst,emitter,visible);
        currentTableIndex=nestCount;
        buffers=new IPageBuffer[pageBreakIndexs.length];
        buffers[0]=currentBuffer;
        String tableId=table.getInstanceID().toUniqueString();
        currentBuffer.addTableColumnHint(new TableColumnHint(tableId,0,pageBreakIndexs[0] + 1));
        for (int i=1; i < pageBreakIndexs.length; i++) {
          buffers[i]=new TableBreakBuffer(null,context);
          INode[] list=new INode[nodeList.length + 1];
          ITableContent newTable=createTable(table,pageBreakIndexs,i);
          list[0]=new ContainerBufferNode(newTable,emitter,null,true);
          for (int j=0; j < nodeList.length; j++) {
            list[j + 1]=nodeList[j];
          }
          buffers[i].openPage(list);
          if (hasRepeatedColumn && repeatEnd > repeatStart) {
            buffers[i].addTableColumnHint(new TableColumnHint(tableId,repeatStart,repeatEnd - repeatStart));
          }
          buffers[i].addTableColumnHint(new TableColumnHint(tableId,pageBreakIndexs[i - 1] + 1,pageBreakIndexs[i] - pageBreakIndexs[i - 1]));
        }
      }
    }
 else {
      currentBuffer.startContainer(content,isFirst,emitter,visible);
    }
  }
 else {
    currentBuffer.startContainer(content,isFirst,emitter,visible);
  }
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
currentIndex=0;
currentBuffer=buffers[0];
startContainerInPages(content,isFirst,emitter,visible);
if (hasRepeatedColumn) {
  repeatEvent.clear();
}
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
if (hasRepeatedColumn && isRepeatedCell((ICellContent)content)) {
isRepeatStatus=true;
}
int index=getStartPageIndex((ICellContent)content);
if (index != currentIndex) {
currentIndex=index;
repeatCells(emitter);
}
currentBuffer=buffers[currentIndex];
if (isRepeatCellContent) {
repeatCellContent(emitter);
repeatCellContentEvent.clear();
isRepeatCellContent=false;
}
if (((ICellContent)content).repeatContent()) {
int colSpan=((ICellContent)content).getColSpan();
if (colSpan > 1) {
int col=((ICellContent)content).getColumn();
if (col + colSpan > pageBreakIndexs[currentIndex] + 1) {
  isRepeatCellContent=true;
}
}
}
}
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
default :
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.START_CONTAINER_EVENT));
}
if (isRepeatCellContent) {
repeatCellContentEvent.add(new ContentEvent(content,visible,ContentEvent.START_CONTAINER_EVENT));
}
}","public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter,boolean visible) throws BirtException {
switch (content.getContentType()) {
case IContent.TABLE_CONTENT:
    nestCount++;
  if (buffers == null) {
    ITableContent table=(ITableContent)content;
    boolean hasPageBreak=hasPageBreak(table);
    if (hasPageBreak) {
      if (currentTableIndex < 0) {
        INode[] nodeList=currentBuffer.getNodeStack();
        pageBreakIndexs=getPageBreakIndex(table);
        repeatEnd=getRepeatEnd(table);
        currentBuffer.startContainer(createTable(table,pageBreakIndexs,0),isFirst,emitter,visible);
        currentTableIndex=nestCount;
        buffers=new IPageBuffer[pageBreakIndexs.length];
        buffers[0]=currentBuffer;
        String tableId=table.getInstanceID().toUniqueString();
        currentBuffer.addTableColumnHint(new TableColumnHint(tableId,0,pageBreakIndexs[0] + 1));
        for (int i=1; i < pageBreakIndexs.length; i++) {
          buffers[i]=new TableBreakBuffer(null,context);
          INode[] list=new INode[nodeList.length + 1];
          ITableContent newTable=createTable(table,pageBreakIndexs,i);
          list[0]=new ContainerBufferNode(newTable,emitter,null,true);
          for (int j=0; j < nodeList.length; j++) {
            list[j + 1]=nodeList[j];
          }
          buffers[i].openPage(list);
          if (hasRepeatedColumn && repeatEnd > repeatStart) {
            buffers[i].addTableColumnHint(new TableColumnHint(tableId,repeatStart,repeatEnd - repeatStart));
          }
          buffers[i].addTableColumnHint(new TableColumnHint(tableId,pageBreakIndexs[i - 1] + 1,pageBreakIndexs[i] - pageBreakIndexs[i - 1]));
        }
      }
    }
 else {
      currentBuffer.startContainer(content,isFirst,emitter,visible);
    }
  }
 else {
    currentBuffer.startContainer(content,isFirst,emitter,visible);
  }
break;
case IContent.TABLE_GROUP_CONTENT:
case IContent.TABLE_BAND_CONTENT:
case IContent.ROW_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
currentIndex=0;
currentBuffer=buffers[0];
startContainerInPages(content,isFirst,emitter,visible);
if (hasRepeatedColumn) {
  repeatEvent.clear();
}
}
 else {
currentBuffer.startContainer(content,isFirst,emitter,visible);
}
break;
case IContent.CELL_CONTENT:
if (currentTableIndex == nestCount && currentTableIndex > 0) {
if (hasRepeatedColumn && isRepeatedCell((ICellContent)content)) {
isRepeatStatus=true;
}
int index=getStartPageIndex((ICellContent)content);
if (index != currentIndex) {
currentIndex=index;
repeatCells(emitter);
}
currentBuffer=buffers[currentIndex];
if (isRepeatCellContent) {
if (currentIndex >= 1) {
ICellContent cc=(ICellContent)content;
int start=cc.getColumn();
if (start > pageBreakIndexs[currentIndex - 1] + 1) repeatCellContent(emitter);
repeatCellContentEvent.clear();
isRepeatCellContent=false;
}
}
if (((ICellContent)content).repeatContent()) {
int colSpan=((ICellContent)content).getColSpan();
if (colSpan > 1) {
int col=((ICellContent)content).getColumn();
if (col + colSpan > pageBreakIndexs[currentIndex] + 1) {
  isRepeatCellContent=true;
}
}
}
}
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
default :
currentBuffer.startContainer(content,isFirst,emitter,visible);
break;
}
if (isRepeatStatus) {
repeatEvent.add(new ContentEvent(content,visible,ContentEvent.START_CONTAINER_EVENT));
}
if (isRepeatCellContent) {
repeatCellContentEvent.add(new ContentEvent(content,visible,ContentEvent.START_CONTAINER_EVENT));
}
}",0.979278365454282
70045,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,String link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    link=codeLink(link);
    println(""String_Node_Str"" + link + ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,String link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str""+ shapeCount+ ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    link=codeLink(link);
    println(""String_Node_Str"" + link + ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9915508312891796
70046,"public List getQueryList(String expression,ExtendedItemHandle extendedItem){
  CrosstabReportItemHandle crosstab=null;
  CubeHandle cube=null;
  try {
    Object obj=((ExtendedItemHandle)extendedItem).getReportItem();
    DesignElementHandle tmp=extendedItem;
    while (true) {
      if (obj == null || obj instanceof ReportDesignHandle) {
        break;
      }
 else       if (obj instanceof CrosstabReportItemHandle) {
        crosstab=(CrosstabReportItemHandle)obj;
        cube=crosstab.getCube();
        break;
      }
 else       if (tmp instanceof ExtendedItemHandle) {
        tmp=tmp.getContainer();
        if (tmp instanceof ExtendedItemHandle) {
          obj=((ExtendedItemHandle)tmp).getReportItem();
        }
      }
    }
  }
 catch (  ExtendedElementException e) {
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expression.length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,expression,cubeQueryDefn);
  }
 catch (  Exception e) {
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  return valueList;
}","public List getQueryList(String expression,ExtendedItemHandle extendedItem){
  CrosstabReportItemHandle crosstab=null;
  CubeHandle cube=null;
  try {
    Object obj=((ExtendedItemHandle)extendedItem).getReportItem();
    DesignElementHandle tmp=extendedItem;
    while (true) {
      if (obj == null || obj instanceof ReportDesignHandle) {
        break;
      }
 else       if (obj instanceof CrosstabReportItemHandle) {
        crosstab=(CrosstabReportItemHandle)obj;
        cube=crosstab.getCube();
        break;
      }
 else       if (tmp instanceof ExtendedItemHandle) {
        tmp=tmp.getContainer();
        if (tmp instanceof ExtendedItemHandle) {
          obj=((ExtendedItemHandle)tmp).getReportItem();
        }
      }
    }
  }
 catch (  ExtendedElementException e) {
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expression.length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,expression,cubeQueryDefn);
  }
 catch (  Exception e) {
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  if (session != null) {
    session.shutdown();
  }
  return valueList;
}",0.966321930522408
70047,"private List getSelectMemberValueList(){
  TabularCubeHandle tabularCube=getCubeHandle();
  List valueList=new ArrayList();
  List extValueList=getExistValueList();
  for (int i=0; i < extValueList.size(); i++) {
    MemberValueHandle tmpMemberValue=(MemberValueHandle)extValueList.get(i);
    String value=tmpMemberValue.getValue();
    if (value == null || value.length() == 0) {
      return new ArrayList();
    }
    valueList.add(value);
  }
  Object[] values=valueList.toArray(new Object[valueList.size()]);
  if (values.length == 0) {
    values=null;
  }
  DimensionLevel levelDens[]=null;
  if (values != null) {
    levelDens=new DimensionLevel[values.length];
    for (int i=0; i < values.length; i++) {
      Object obj=referencedLevelList.get(i);
      if (obj == null || (!(obj instanceof DimensionLevel))) {
        return new ArrayList();
      }
      levelDens[i]=(DimensionLevel)obj;
    }
  }
 else {
    levelDens=null;
  }
  String targetLevel=null;
  int index=0;
  if (values != null && values.length > 0 && values.length + 1 <= referencedLevelList.size()) {
    index=values.length;
  }
  DimensionLevel levelDefn=(DimensionLevel)referencedLevelList.get(index);
  String levelName=levelDefn.getLevelName();
  String dimensionName=levelDefn.getDimensionName();
  targetLevel=ExpressionUtil.createJSDimensionExpression(dimensionName,levelName);
  if (tabularCube == null || (targetLevel == null || targetLevel.length() == 0)) {
    return new ArrayList();
  }
  Iterator iter=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    iter=session.getCubeQueryUtil().getMemberValueIterator(tabularCube,targetLevel,levelDens,values);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
  List retList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (retList.indexOf(obj) < 0) {
        retList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  return retList;
}","private List getSelectMemberValueList(){
  TabularCubeHandle tabularCube=getCubeHandle();
  List valueList=new ArrayList();
  List extValueList=getExistValueList();
  for (int i=0; i < extValueList.size(); i++) {
    MemberValueHandle tmpMemberValue=(MemberValueHandle)extValueList.get(i);
    String value=tmpMemberValue.getValue();
    if (value == null || value.length() == 0) {
      return new ArrayList();
    }
    valueList.add(value);
  }
  Object[] values=valueList.toArray(new Object[valueList.size()]);
  if (values.length == 0) {
    values=null;
  }
  DimensionLevel levelDens[]=null;
  if (values != null) {
    levelDens=new DimensionLevel[values.length];
    for (int i=0; i < values.length; i++) {
      Object obj=referencedLevelList.get(i);
      if (obj == null || (!(obj instanceof DimensionLevel))) {
        return new ArrayList();
      }
      levelDens[i]=(DimensionLevel)obj;
    }
  }
 else {
    levelDens=null;
  }
  String targetLevel=null;
  int index=0;
  if (values != null && values.length > 0 && values.length + 1 <= referencedLevelList.size()) {
    index=values.length;
  }
  DimensionLevel levelDefn=(DimensionLevel)referencedLevelList.get(index);
  String levelName=levelDefn.getLevelName();
  String dimensionName=levelDefn.getDimensionName();
  targetLevel=ExpressionUtil.createJSDimensionExpression(dimensionName,levelName);
  if (tabularCube == null || (targetLevel == null || targetLevel.length() == 0)) {
    return new ArrayList();
  }
  Iterator iter=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    iter=session.getCubeQueryUtil().getMemberValueIterator(tabularCube,targetLevel,levelDens,values);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  List retList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (retList.indexOf(obj) < 0) {
        retList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  if (session != null) {
    session.shutdown();
  }
  return retList;
}",0.9665755728400252
70048,"private List getSelectedValueList(){
  if (needRefreshList == false) {
    return selValueList;
  }
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      if (obj instanceof CrosstabReportItemHandle) {
        crosstab=(CrosstabReportItemHandle)obj;
      }
      crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)designHandle).getReportItem();
      cube=crosstab.getCube();
    }
 catch (    ExtendedElementException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expressionCombo.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,expressionCombo.getText(),cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
  selValueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (selValueList.indexOf(obj) < 0) {
        selValueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  needRefreshList=false;
  return selValueList;
}","private List getSelectedValueList(){
  if (needRefreshList == false) {
    return selValueList;
  }
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      if (obj instanceof CrosstabReportItemHandle) {
        crosstab=(CrosstabReportItemHandle)obj;
      }
      crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)designHandle).getReportItem();
      cube=crosstab.getCube();
    }
 catch (    ExtendedElementException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expressionCombo.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,expressionCombo.getText(),cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  selValueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (selValueList.indexOf(obj) < 0) {
        selValueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  needRefreshList=false;
  if (session != null) {
    session.shutdown();
  }
  return selValueList;
}",0.9655172413793104
70049,"private List getSelectedValueList(){
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      DesignElementHandle tmp=designHandle;
      while (true) {
        if (obj == null || obj instanceof ReportDesignHandle) {
          break;
        }
 else         if (obj instanceof CrosstabReportItemHandle) {
          crosstab=(CrosstabReportItemHandle)obj;
          cube=crosstab.getCube();
          break;
        }
 else         if (tmp instanceof ExtendedItemHandle) {
          tmp=tmp.getContainer();
          if (tmp instanceof ExtendedItemHandle) {
            obj=((ExtendedItemHandle)tmp).getReportItem();
          }
        }
      }
    }
 catch (    ExtendedElementException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || getExpression().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,getExpression(),cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  return valueList;
}","private List getSelectedValueList(){
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      DesignElementHandle tmp=designHandle;
      while (true) {
        if (obj == null || obj instanceof ReportDesignHandle) {
          break;
        }
 else         if (obj instanceof CrosstabReportItemHandle) {
          crosstab=(CrosstabReportItemHandle)obj;
          cube=crosstab.getCube();
          break;
        }
 else         if (tmp instanceof ExtendedItemHandle) {
          tmp=tmp.getContainer();
          if (tmp instanceof ExtendedItemHandle) {
            obj=((ExtendedItemHandle)tmp).getReportItem();
          }
        }
      }
    }
 catch (    ExtendedElementException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || getExpression().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,getExpression(),cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  if (session != null) {
    session.shutdown();
  }
  return valueList;
}",0.9690470387521326
70050,"private List getSelectedValueList(){
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      DesignElementHandle tmp=designHandle;
      while (true) {
        if (obj == null || obj instanceof ReportDesignHandle) {
          break;
        }
 else         if (obj instanceof CrosstabReportItemHandle) {
          crosstab=(CrosstabReportItemHandle)obj;
          cube=crosstab.getCube();
          break;
        }
 else         if (tmp instanceof ExtendedItemHandle) {
          tmp=tmp.getContainer();
          if (tmp instanceof ExtendedItemHandle) {
            obj=((ExtendedItemHandle)tmp).getReportItem();
          }
        }
      }
    }
 catch (    ExtendedElementException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expression.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,expression.getText(),cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  return valueList;
}","private List getSelectedValueList(){
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      DesignElementHandle tmp=designHandle;
      while (true) {
        if (obj == null || obj instanceof ReportDesignHandle) {
          break;
        }
 else         if (obj instanceof CrosstabReportItemHandle) {
          crosstab=(CrosstabReportItemHandle)obj;
          cube=crosstab.getCube();
          break;
        }
 else         if (tmp instanceof ExtendedItemHandle) {
          tmp=tmp.getContainer();
          if (tmp instanceof ExtendedItemHandle) {
            obj=((ExtendedItemHandle)tmp).getReportItem();
          }
        }
      }
    }
 catch (    ExtendedElementException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (cube == null || (!(cube instanceof TabularCubeHandle)) || expression.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    iter=session.getCubeQueryUtil().getMemberValueIterator((TabularCubeHandle)cube,expression.getText(),cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  List valueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (valueList.indexOf(obj) < 0) {
        valueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  if (session != null) {
    session.shutdown();
  }
  return valueList;
}",0.9691971865146738
70051,"public CompatibilityStatus checkCompatibility(){
  compStatus=checkVersion(handle.getExtensionVersion());
  if (compStatus < 0) {
    CompatibilityStatus status=new CompatibilityStatus();
    List errorList=new ArrayList(2);
    status.setStatusType(CompatibilityStatus.CONVERT_COMPATIBILITY_TYPE);
    try {
      handle.setExtensionVersion(CROSSTAB_CURRENT_VERSION);
    }
 catch (    SemanticException e) {
      errorList.add(e);
    }
    if (getHeader() == null) {
      PropertyHandle headerHandle=handle.getPropertyHandle(HEADER_PROP);
      if (headerHandle != null) {
        try {
          headerHandle.setValue(CrosstabExtendedItemFactory.createCrosstabCell(getModuleHandle()));
        }
 catch (        SemanticException e) {
          errorList.add(e);
        }
      }
    }
    if (errorList.size() > 0) {
      status.setErrors(errorList);
    }
    return status;
  }
 else   if (compStatus > 0) {
    return new CompatibilityStatus(null,CompatibilityStatus.NOT_SUPPORTED_TYPE);
  }
  return COMP_OK_STATUS;
}","public CompatibilityStatus checkCompatibility(){
  compStatus=checkVersion(handle.getExtensionVersion());
  if (compStatus < 0) {
    CompatibilityStatus status=new CompatibilityStatus();
    List errorList=new ArrayList(2);
    status.setStatusType(CompatibilityStatus.CONVERT_COMPATIBILITY_TYPE);
    try {
      handle.setExtensionVersion(CROSSTAB_CURRENT_VERSION);
    }
 catch (    SemanticException e) {
      errorList.add(e);
    }
    if (getHeader() == null) {
      PropertyHandle headerHandle=handle.getPropertyHandle(HEADER_PROP);
      if (headerHandle != null) {
        try {
          headerHandle.setValue(CrosstabExtendedItemFactory.createCrosstabCell(getModuleHandle()));
        }
 catch (        SemanticException e) {
          errorList.add(e);
        }
      }
    }
    if (errorList.size() > 0) {
      status.setErrors(errorList);
    }
    return status;
  }
 else   if (compStatus > 0) {
    return new CompatibilityStatus(Collections.EMPTY_LIST,CompatibilityStatus.NOT_SUPPORTED_TYPE);
  }
  return COMP_OK_STATUS;
}",0.987487969201155
70052,"/** 
 * The container may be a TableArea, RowArea, etc. Or just the border of textArea/imageArea. This method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container.needClip()) {
    startClip(container);
  }
  if (container instanceof RowArea) {
    rowStyleStack.push(container.getBoxStyle());
  }
 else   if (container instanceof CellArea) {
    drawCell(container);
  }
 else {
    drawContainer(container);
  }
  currentX+=getX(container);
  currentY+=getY(container);
}","/** 
 * The container may be a TableArea, RowArea, etc. Or just the border of textArea/imageArea. This method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container.needClip()) {
    startClip(container);
  }
  if (container instanceof RowArea) {
    rowStyleStack.push(container.getBoxStyle());
  }
 else   if (container instanceof CellArea) {
    drawCell((CellArea)container);
  }
 else {
    drawContainer(container);
  }
  currentX+=getX(container);
  currentY+=getY(container);
}",0.9919093851132686
70053,"protected void drawCell(IContainerArea container){
  Color rowbc=null;
  BackgroundImageInfo rowbi=null;
  BoxStyle rowStyle=null;
  if (rowStyleStack.size() > 0) {
    rowStyle=(BoxStyle)rowStyleStack.peek();
    if (rowStyle != null) {
      rowbc=rowStyle.getBackgroundColor();
      rowbi=rowStyle.getBackgroundImage();
    }
  }
  BoxStyle style=container.getBoxStyle();
  Color bc=style.getBackgroundColor();
  BackgroundImageInfo bi=style.getBackgroundImage();
  if (rowbc != null || rowbi != null || bc != null || bi != null) {
    int startX=currentX + getX(container);
    int startY=currentY + getY(container);
    int width=getWidth(container);
    int height=getHeight(container);
    if (rowbc != null) {
      pageGraphic.drawBackgroundColor(rowbc,startX,startY,width,height);
    }
    if (rowbi != null) {
      drawBackgroundImage(rowbi,startX,startY,width,height);
    }
    if (bc != null) {
      pageGraphic.drawBackgroundColor(bc,startX,startY,width,height);
    }
    if (bi != null) {
      drawBackgroundImage(bi,startX,startY,width,height);
    }
  }
}","protected void drawCell(CellArea container){
  drawCellDiagonal(container);
  Color rowbc=null;
  BackgroundImageInfo rowbi=null;
  BoxStyle rowStyle=null;
  if (rowStyleStack.size() > 0) {
    rowStyle=(BoxStyle)rowStyleStack.peek();
    if (rowStyle != null) {
      rowbc=rowStyle.getBackgroundColor();
      rowbi=rowStyle.getBackgroundImage();
    }
  }
  BoxStyle style=container.getBoxStyle();
  Color bc=style.getBackgroundColor();
  BackgroundImageInfo bi=style.getBackgroundImage();
  if (rowbc != null || rowbi != null || bc != null || bi != null) {
    int startX=currentX + getX(container);
    int startY=currentY + getY(container);
    int width=getWidth(container);
    int height=getHeight(container);
    if (rowbc != null) {
      pageGraphic.drawBackgroundColor(rowbc,startX,startY,width,height);
    }
    if (rowbi != null) {
      drawBackgroundImage(rowbi,startX,startY,width,height);
    }
    if (bc != null) {
      pageGraphic.drawBackgroundColor(bc,startX,startY,width,height);
    }
    if (bi != null) {
      drawBackgroundImage(bi,startX,startY,width,height);
    }
  }
}",0.9803023362345396
70054,"public CellArea(CellArea cell){
  super(cell);
  rowSpan=cell.rowSpan;
  colSpan=cell.colSpan;
  columnID=cell.columnID;
  rowID=cell.rowID;
}","public CellArea(CellArea cell){
  super(cell);
  rowSpan=cell.rowSpan;
  colSpan=cell.colSpan;
  columnID=cell.columnID;
  rowID=cell.rowID;
  diagonalInfo=cell.diagonalInfo;
}",0.8930817610062893
70055,"public void initialize() throws BirtException {
  ICellContent cellContent=(ICellContent)content;
  rowSpan=cellContent.getRowSpan();
  columnID=cellContent.getColumn();
  colSpan=cellContent.getColSpan();
  TableArea table=getTable();
  hasStyle=true;
  width=table.getCellWidth(columnID,columnID + colSpan);
  this.buildProperties(cellContent,context);
  table.resolveBorderConflict(this,true);
  maxAvaWidth=getContentWidth();
  boolean isLastColumn=(columnID + colSpan == table.getColumnCount());
  if (!table.isInInlineStacking && isLastColumn) {
    isInInlineStacking=false;
  }
 else {
    isInInlineStacking=true;
  }
  this.bookmark=content.getBookmark();
  this.action=content.getHyperlinkAction();
  parent.add(this);
}","public void initialize() throws BirtException {
  ICellContent cellContent=(ICellContent)content;
  rowSpan=cellContent.getRowSpan();
  columnID=cellContent.getColumn();
  colSpan=cellContent.getColSpan();
  TableArea table=getTable();
  hasStyle=true;
  width=table.getCellWidth(columnID,columnID + colSpan);
  buildProperties(cellContent,context);
  buildDiagonalInfo();
  table.resolveBorderConflict(this,true);
  maxAvaWidth=getContentWidth();
  boolean isLastColumn=(columnID + colSpan == table.getColumnCount());
  if (!table.isInInlineStacking && isLastColumn) {
    isInInlineStacking=false;
  }
 else {
    isInInlineStacking=true;
  }
  this.bookmark=content.getBookmark();
  this.action=content.getHyperlinkAction();
  parent.add(this);
}",0.981081081081081
70056,"public void layout() throws BirtException {
  init();
  if (PropertyUtil.isInlineElement(image)) {
    assert(parent instanceof InlineStackingArea);
    InlineStackingArea lineParent=(InlineStackingArea)parent;
    if (root.getAllocatedWidth() > parent.getCurrentMaxContentWidth()) {
      if (!lineParent.isEmptyLine()) {
        lineParent.endLine();
        layout();
      }
 else {
        parent.add(root);
        root.finished=true;
        parent.update(root);
        return;
      }
    }
 else {
      parent.add(root);
      root.finished=true;
      parent.update(root);
      return;
    }
  }
 else {
    parent.add(root);
    if (!parent.isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=root.getAllocatedHeight();
      if (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
        parent.autoPageBreak();
      }
    }
    root.finished=true;
    parent.update(root);
  }
}","public void layout() throws BirtException {
  init();
  if (PropertyUtil.isInlineElement(image)) {
    assert(parent instanceof InlineStackingArea);
    InlineStackingArea lineParent=(InlineStackingArea)parent;
    if (root.getAllocatedWidth() > parent.getCurrentMaxContentWidth()) {
      if (!lineParent.isEmptyLine()) {
        lineParent.endLine(false);
        layout();
      }
 else {
        parent.add(root);
        root.finished=true;
        parent.update(root);
        return;
      }
    }
 else {
      parent.add(root);
      root.finished=true;
      parent.update(root);
      return;
    }
  }
 else {
    parent.add(root);
    if (!parent.isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=root.getAllocatedHeight();
      if (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
        parent.autoPageBreak();
      }
    }
    root.finished=true;
    parent.update(root);
  }
}",0.9972840847365562
70057,"public void endLine() throws BirtException {
  lineCount++;
  if (getChildrenCount() > 0) {
    close(false);
  }
  if (lineParent != null) {
    lineParent.removeChild(this);
    lineParent.endLine();
    initialize();
  }
}","public void endLine(boolean endParagraph) throws BirtException {
  lineCount++;
  if (getChildrenCount() > 0) {
    close(false);
  }
  if (lineParent != null) {
    lineParent.removeChild(this);
    lineParent.endLine(endParagraph);
    initialize();
  }
}",0.933609958506224
70058,public abstract void endLine() throws BirtException ;,public abstract void endLine(boolean endParagraph) throws BirtException ;,0.8412698412698413
70059,"public void layout() throws BirtException {
  initialize();
  TextAreaLayout inlineText=new TextAreaLayout(this,context,content);
  inlineText.initialize();
  inlineText.layout();
  inlineText.close();
  close();
}","public void layout() throws BirtException {
  initialize();
  if (content instanceof ITextContent && lineParent.getChildrenCount() == 1) {
    lineParent.setTextIndent((ITextContent)content);
  }
  TextAreaLayout inlineText=new TextAreaLayout(this,context,content);
  inlineText.initialize();
  inlineText.layout();
  inlineText.close();
  close();
}",0.7588652482269503
70060,"public void endLine() throws BirtException {
  close(false);
  currentIP=0;
}","public void endLine(boolean endParagraph) throws BirtException {
  close(false,endParagraph);
  currentIP=0;
}",0.8235294117647058
70061,"public void update(AbstractArea area) throws BirtException {
  int aWidth=area.getAllocatedWidth();
  if (aWidth + currentIP > maxAvaWidth) {
    removeChild(area);
    endLine();
    children.add(area);
  }
  area.setAllocatedPosition(currentIP,currentBP);
  currentIP+=aWidth;
  int height=area.getAllocatedHeight();
  if (height > getHeight()) {
    this.height=height;
  }
}","public void update(AbstractArea area) throws BirtException {
  int aWidth=area.getAllocatedWidth();
  if (aWidth + currentIP > maxAvaWidth) {
    removeChild(area);
    endLine(false);
    children.add(area);
  }
  area.setAllocatedPosition(currentIP,currentBP);
  currentIP+=aWidth;
  int height=area.getAllocatedHeight();
  if (height > getHeight()) {
    this.height=height;
  }
}",0.9934296977660972
70062,"public void align(boolean lastLine,LayoutContext context){
  assert(parent instanceof BlockContainerArea);
  CSSValue align=((BlockContainerArea)parent).getTextAlign();
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(parent.content,align,lastLine);
  if ((isRightAligned || IStyle.CENTER_VALUE.equals(align))) {
    int spacing=width - currentIP;
    Iterator iter=getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (isRightAligned) {
        if (parent.content.isDirectionRTL()) {
          area.setPosition(spacing + area.getX(),area.getY());
        }
 else {
          area.setPosition(spacing + area.getX() + ignoreRightMostWhiteSpace(),area.getY());
        }
      }
 else       if (IStyle.CENTER_VALUE.equals(align)) {
        area.setPosition(spacing / 2 + area.getX(),area.getY());
      }
    }
  }
 else   if (IStyle.JUSTIFY_VALUE.equals(align) && !lastLine) {
    justify();
  }
  if (context.getBidiProcessing())   reorderVisually();
  verticalAlign();
}","public void align(boolean endParagraph,LayoutContext context){
  assert(parent instanceof BlockContainerArea);
  CSSValue align=((BlockContainerArea)parent).getTextAlign();
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(parent.content,align,endParagraph);
  if ((isRightAligned || IStyle.CENTER_VALUE.equals(align))) {
    int spacing=width - currentIP;
    Iterator iter=getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (isRightAligned) {
        if (parent.content.isDirectionRTL()) {
          area.setPosition(spacing + area.getX(),area.getY());
        }
 else {
          area.setPosition(spacing + area.getX() + ignoreRightMostWhiteSpace(),area.getY());
        }
      }
 else       if (IStyle.CENTER_VALUE.equals(align)) {
        area.setPosition(spacing / 2 + area.getX(),area.getY());
      }
    }
  }
 else   if (IStyle.JUSTIFY_VALUE.equals(align) && !endParagraph) {
    justify();
  }
  if (context.getBidiProcessing())   reorderVisually();
  verticalAlign();
}",0.9711815561959656
70063,"public void close() throws BirtException {
  close(true);
  finished=true;
}","public void close() throws BirtException {
  close(true,true);
  finished=true;
}",0.9681528662420382
70064,"/** 
 * true if succeed to new a line.
 */
public void newLine() throws BirtException {
  parentLM.endLine();
}","/** 
 * true if succeed to new a line.
 */
public void newLine() throws BirtException {
  parentLM.endLine(true);
}",0.9823008849557522
70065,"public TextAreaLayout(ContainerArea parent,LayoutContext context,IContent content){
  parentLM=(InlineStackingArea)parent;
  ITextContent textContent=(ITextContent)content;
  String text=textContent.getText();
  if (text != null && text.length() != 0)   transform(textContent);
 else   textContent.setText(""String_Node_Str"");
  this.textContent=textContent;
  comp=new TextCompositor(textContent,context.getFontManager(),context);
  ContainerArea ancestor=parentLM;
  do {
    if (null == ancestor) {
      comp.setNewLineStatus(true);
      return;
    }
    if (!ancestor.isEmpty()) {
      comp.setNewLineStatus(false);
      return;
    }
    if (ancestor instanceof LineArea) {
      comp.setNewLineStatus(ancestor.isEmpty());
      return;
    }
    ancestor=ancestor.getParent();
  }
 while (true);
}","public TextAreaLayout(ContainerArea parent,LayoutContext context,IContent content){
  parentLM=(InlineStackingArea)parent;
  ITextContent textContent=(ITextContent)content;
  parentLM.setTextIndent(textContent);
  String text=textContent.getText();
  if (text != null && text.length() != 0)   transform(textContent);
 else   textContent.setText(""String_Node_Str"");
  this.textContent=textContent;
  comp=new TextCompositor(textContent,context.getFontManager(),context);
  ContainerArea ancestor=parentLM;
  do {
    if (null == ancestor) {
      comp.setNewLineStatus(true);
      return;
    }
    if (!ancestor.isEmpty()) {
      comp.setNewLineStatus(false);
      return;
    }
    if (ancestor instanceof LineArea) {
      comp.setNewLineStatus(ancestor.isEmpty());
      return;
    }
    ancestor=ancestor.getParent();
  }
 while (true);
}",0.9764065335753176
70066,"public TableContentLayout(ITableContent tableContent,String format,HTMLLayoutContext context,String keyString){
  this.format=format;
  this.context=context;
  this.tableContent=tableContent;
  this.keyString=keyString;
  this.colCount=tableContent.getColumnCount();
  int start=0;
  int end=this.colCount;
  String tableId=tableContent.getInstanceID().toUniqueString();
  List hints=context.getTableColumnHint(tableId);
  this.adjustedColumnIds=new int[colCount];
  for (int i=0; i < colCount; i++) {
    adjustedColumnIds[i]=-1;
  }
  if (hints.size() > 0) {
    int current=-1;
    Iterator iter=hints.iterator();
    while (iter.hasNext()) {
      int[] hint=(int[])iter.next();
      for (int i=hint[0]; i < hint[1]; i++) {
        IColumn column=tableContent.getColumn(i);
        if (!isColumnHidden(column)) {
          visibleColumns.add(column);
          current++;
        }
        adjustedColumnIds[i]=(current >= 0 ? current : 0);
      }
    }
    int maxColId=Math.max(0,current);
    current=0;
    for (int i=0; i < colCount; i++) {
      if (adjustedColumnIds[i] < current) {
        adjustedColumnIds[i]=Math.min(maxColId,current + 1);
      }
 else {
        current=adjustedColumnIds[i];
      }
      if (!hasHiddenColumns) {
        if (i != adjustedColumnIds[i]) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
    }
  }
 else {
    int current=-1;
    for (int i=0; i < colCount; i++) {
      IColumn column=tableContent.getColumn(i);
      if (!isColumnHidden(column)) {
        visibleColumns.add(column);
        current++;
      }
 else {
        if (!hasHiddenColumns) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
      adjustedColumnIds[i]=(current >= 0 ? current : 0);
    }
  }
  if (hasHiddenColumns) {
    this.wrappedTable=new TableContentWrapper(tableContent,visibleColumns);
  }
  this.realColCount=visibleColumns.size();
}","public TableContentLayout(ITableContent tableContent,String format,HTMLLayoutContext context,String keyString){
  this.format=format;
  this.context=context;
  this.tableContent=tableContent;
  this.keyString=keyString;
  this.colCount=tableContent.getColumnCount();
  int start=0;
  int end=this.colCount;
  String tableId=tableContent.getInstanceID().toUniqueString();
  List hints=context.getTableColumnHint(tableId);
  this.adjustedColumnIds=new int[colCount];
  for (int i=0; i < colCount; i++) {
    adjustedColumnIds[i]=-1;
  }
  if (hints.size() > 0) {
    int current=-1;
    Iterator iter=hints.iterator();
    while (iter.hasNext()) {
      int[] hint=(int[])iter.next();
      for (int i=hint[0]; i < hint[1]; i++) {
        IColumn column=tableContent.getColumn(i);
        if (!isColumnHidden(column)) {
          visibleColumns.add(column);
          current++;
        }
        adjustedColumnIds[i]=(current >= 0 ? current : 0);
      }
    }
    int maxColId=Math.max(0,current);
    current=-1;
    for (int i=0; i < colCount; i++) {
      if (adjustedColumnIds[i] == -1) {
        adjustedColumnIds[i]=Math.min(maxColId,current + 1);
      }
 else {
        current=adjustedColumnIds[i];
      }
      if (!hasHiddenColumns) {
        if (i != adjustedColumnIds[i]) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
    }
  }
 else {
    int current=-1;
    for (int i=0; i < colCount; i++) {
      IColumn column=tableContent.getColumn(i);
      if (!isColumnHidden(column)) {
        visibleColumns.add(column);
        current++;
      }
 else {
        if (!hasHiddenColumns) {
          hasHiddenColumns=true;
          leastColumnIdToBeAjusted=i;
        }
      }
      adjustedColumnIds[i]=(current >= 0 ? current : 0);
    }
  }
  if (hasHiddenColumns) {
    this.wrappedTable=new TableContentWrapper(tableContent,visibleColumns);
  }
  this.realColCount=visibleColumns.size();
}",0.995642143040246
70067,"protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setNeedClip(true);
      root.setAllocatedHeight(cHeight);
      root.setAllocatedWidth(cWidth);
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=false;
}","protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getMaxAvaWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setNeedClip(true);
      root.setAllocatedHeight(Math.min(maxHeight,cHeight));
      root.setAllocatedWidth(Math.min(maxWidth,cWidth));
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=false;
}",0.9604978354978356
70068,"/** 
 * This implementation of <code>javaToNative</code> converts plain text represented by a java <code>String</code> to a platform specific representation.
 * @param object a java <code>String</code> containing text
 * @param transferData an empty <code>TransferData</code> object; this object will be filled in on return with the platform specific format of the data
 * @see Transfer#javaToNative
 */
public void javaToNative(Object object,TransferData transferData){
  if (checkText(object) && isSupportedType(transferData)) {
    super.javaToNative(((String)object).getBytes(),transferData);
  }
}","/** 
 * This implementation of <code>javaToNative</code> converts plain text represented by a java <code>String</code> to a platform specific representation.
 * @param object a java <code>String</code> containing text
 * @param transferData an empty <code>TransferData</code> object; this object will be filled in on return with the platform specific format of the data
 * @see Transfer#javaToNative
 */
public void javaToNative(Object object,TransferData transferData){
  if (checkText(object) && isSupportedType(transferData)) {
    try {
      super.javaToNative(((String)object).getBytes(""String_Node_Str""),transferData);
    }
 catch (    UnsupportedEncodingException e) {
      super.javaToNative(((String)object).getBytes(),transferData);
    }
  }
}",0.8859455481972038
70069,"/** 
 * This implementation of <code>nativeToJava</code> converts a platform specific representation of plain text to a java <code>String</code>.
 * @param transferData the platform specific representation of the data to be converted
 * @return a java <code>String</code> containing text if the conversionwas successful; otherwise null
 * @see Transfer#nativeToJava
 */
public Object nativeToJava(TransferData transferData){
  if (!isSupportedType(transferData)) {
    return null;
  }
  byte[] bytes=(byte[])super.nativeToJava(transferData);
  return new String(bytes);
}","/** 
 * This implementation of <code>nativeToJava</code> converts a platform specific representation of plain text to a java <code>String</code>.
 * @param transferData the platform specific representation of the data to be converted
 * @return a java <code>String</code> containing text if the conversionwas successful; otherwise null
 * @see Transfer#nativeToJava
 */
public Object nativeToJava(TransferData transferData){
  if (!isSupportedType(transferData)) {
    return null;
  }
  byte[] bytes=(byte[])super.nativeToJava(transferData);
  try {
    return new String(bytes,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  return new String(bytes);
}",0.9137380191693292
70070,"public boolean isValidExpression(String expression){
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    int index=cmbDefinition.indexOf(expression);
    if (index < 0) {
      return false;
    }
    return true;
  }
  return true;
}","public boolean isValidExpression(String expression){
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (cmbDefinition == null)     return false;
    int index=cmbDefinition.indexOf(expression);
    if (index < 0) {
      return false;
    }
    return true;
  }
  return true;
}",0.8873949579831932
70071,"/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  bundleContext=null;
  if (syncService != null) {
    syncService.unregister();
    syncService=null;
  }
  ignore.clear();
  if (cellLeftCursor != null) {
    cellLeftCursor.dispose();
  }
  if (cellRightCursor != null) {
    cellRightCursor.dispose();
  }
  Platform.getExtensionRegistry().removeRegistryChangeListener(DNDService.getInstance());
  BaseBorder.cleanWidthCache();
  FormWidgetFactory.getInstance().dispose();
  super.stop(context);
}","/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  bundleContext=null;
  if (syncService != null) {
    syncService.unregister();
    syncService=null;
  }
  ignore.clear();
  if (cellLeftCursor != null) {
    cellLeftCursor.dispose();
  }
  if (cellRightCursor != null) {
    cellRightCursor.dispose();
  }
  Platform.getExtensionRegistry().removeRegistryChangeListener(DNDService.getInstance());
  BaseBorder.cleanWidthCache();
  FormWidgetFactory.close();
  super.stop(context);
}",0.9822380106571936
70072,"protected void prepareQuery() throws DataException {
  try {
    IBinding[] bindings=null;
    if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
      this.queryResults=engine.getQueryResults(getParentQueryResultsID((SubqueryLocator)(queryDefn.getSourceQuery())));
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      if (queryDefn.getSourceQuery() instanceof SubqueryLocator) {
        ArrayList<IBinding> bindingList=new ArrayList<IBinding>();
        getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName(),bindingList);
        addQueryBindings(bindingList,queryDefinition.getBindings().values());
        bindings=bindingList.toArray(new IBinding[0]);
      }
 else {
        bindings=(IBinding[])(queryDefinition.getBindings().values().toArray(new IBinding[0]));
      }
    }
 else {
      this.queryResults=PreparedQueryUtil.newInstance(dataEngine,(IQueryDefinition)queryDefn.getSourceQuery(),null).execute(null);
      if (queryResults != null && queryResults.getPreparedQuery() != null) {
        IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
        bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
      }
 else {
        bindings=new IBinding[0];
      }
    }
    if (!hasBinding) {
      for (int i=0; i < bindings.length; i++) {
        IBinding binding=bindings[i];
        if (!this.queryDefn.getBindings().containsKey(binding.getBindingName()))         this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","protected void prepareQuery() throws DataException {
  try {
    IBinding[] bindings=null;
    if (this.queryDefn.getSourceQuery() instanceof SubqueryLocator) {
      this.queryResults=engine.getQueryResults(getParentQueryResultsID((SubqueryLocator)(queryDefn.getSourceQuery())));
      IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
      if (queryDefn.getSourceQuery() instanceof SubqueryLocator) {
        ArrayList<IBinding> bindingList=new ArrayList<IBinding>();
        getSubQueryBindings(queryDefinition,((SubqueryLocator)queryDefn.getSourceQuery()).getName(),bindingList);
        addQueryBindings(bindingList,queryDefinition.getBindings());
        bindings=bindingList.toArray(new IBinding[0]);
      }
 else {
        bindings=(IBinding[])(queryDefinition.getBindings().values().toArray(new IBinding[0]));
      }
    }
 else {
      this.queryResults=PreparedQueryUtil.newInstance(dataEngine,(IQueryDefinition)queryDefn.getSourceQuery(),null).execute(null);
      if (queryResults != null && queryResults.getPreparedQuery() != null) {
        IQueryDefinition queryDefinition=queryResults.getPreparedQuery().getReportQueryDefn();
        bindings=(IBinding[])queryDefinition.getBindings().values().toArray(new IBinding[0]);
      }
 else {
        bindings=new IBinding[0];
      }
    }
    if (!hasBinding) {
      for (int i=0; i < bindings.length; i++) {
        IBinding binding=bindings[i];
        if (!this.queryDefn.getBindings().containsKey(binding.getBindingName()))         this.queryDefn.addBinding(new Binding(binding.getBindingName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(binding.getBindingName()),binding.getDataType())));
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.997511750069118
70073,"/** 
 * @param subqueryDefinitions
 * @param subQueryName
 * @return
 * @throws DataException 
 */
private static void getSubQueryBindings(SubqueryDefinition[] subqueryDefinitions,String subQueryName,List<IBinding> resultBindingList) throws DataException {
  for (int j=0; j < subqueryDefinitions.length; j++) {
    if (subqueryDefinitions[j].getName() != null && subqueryDefinitions[j].getName().equals(subQueryName)) {
      addQueryBindings(resultBindingList,subqueryDefinitions[j].getBindings().values());
      return;
    }
    getSubQueryBindings(subqueryDefinitions[j],subQueryName,resultBindingList);
    if (resultBindingList.size() > 0) {
      addQueryBindings(resultBindingList,subqueryDefinitions[j].getBindings().values());
      return;
    }
  }
  return;
}","/** 
 * @param subqueryDefinitions
 * @param subQueryName
 * @return
 * @throws DataException 
 */
private static void getSubQueryBindings(SubqueryDefinition[] subqueryDefinitions,String subQueryName,List<IBinding> resultBindingList) throws DataException {
  for (int j=0; j < subqueryDefinitions.length; j++) {
    if (subqueryDefinitions[j].getName() != null && subqueryDefinitions[j].getName().equals(subQueryName)) {
      addQueryBindings(resultBindingList,subqueryDefinitions[j].getBindings());
      return;
    }
    getSubQueryBindings(subqueryDefinitions[j],subQueryName,resultBindingList);
    if (resultBindingList.size() > 0) {
      addQueryBindings(resultBindingList,subqueryDefinitions[j].getBindings());
      return;
    }
  }
  return;
}",0.9882352941176472
70074,"/** 
 * @param resultBindingList
 * @param bindingCollection
 * @throws DataException 
 */
protected static void addQueryBindings(List<IBinding> resultBindingList,Collection bindingCollection) throws DataException {
  Iterator bindingIterator=bindingCollection.iterator();
  while (bindingIterator.hasNext()) {
    IBinding binding=(IBinding)(bindingIterator.next());
    if (binding.getAggrFunction() != null)     continue;
    IBaseExpression expr=binding.getExpression();
    if (expr instanceof IScriptExpression && !ExpressionUtil.hasAggregation(((IScriptExpression)expr).getText()) && binding.getAggrFunction() == null) {
      boolean exist=false;
      for (int i=0; i < resultBindingList.size(); i++) {
        if (resultBindingList.get(i) != null && resultBindingList.get(i).getBindingName().equals(binding.getBindingName())) {
          exist=true;
        }
      }
      if (!exist)       resultBindingList.add(binding);
    }
  }
}","/** 
 * @param resultBindingList
 * @param bindingCollection
 * @throws DataException 
 */
protected static void addQueryBindings(List<IBinding> resultBindingList,Map bindings) throws DataException {
  Map<String,Boolean> aggrInfo=PreparedQueryUtil.parseAggregations(bindings);
  Iterator it=bindings.keySet().iterator();
  while (it.hasNext()) {
    String name=(String)it.next();
    if (!aggrInfo.get(name)) {
{
        IBinding binding=(IBinding)(bindings.get(name));
        boolean exist=false;
        for (int i=0; i < resultBindingList.size(); i++) {
          if (resultBindingList.get(i) != null && resultBindingList.get(i).getBindingName().equals(binding.getBindingName())) {
            exist=true;
          }
        }
        if (!exist)         resultBindingList.add(binding);
      }
    }
  }
}",0.6621160409556314
70075,"/** 
 * Each binding is parsed to see if it's an aggregation. The parsed result saved in a Map<String, Boolean> map
 * @param input
 * @return 
 * @throws DataException
 */
private static Map<String,Boolean> parseAggregations(Map<String,IBinding> input) throws DataException {
  Map<String,Boolean> result=new HashMap<String,Boolean>();
  for (  Entry<String,IBinding> entry : input.entrySet()) {
    IBinding binding=entry.getValue();
    Set<String> transitions=new HashSet<String>();
    transitions.add(binding.getBindingName());
    parseAggregation(binding,input,result,transitions);
  }
  return result;
}","/** 
 * Each binding is parsed to see if it's an aggregation. The parsed result saved in a Map<String, Boolean> map
 * @param input
 * @return 
 * @throws DataException
 */
static Map<String,Boolean> parseAggregations(Map<String,IBinding> input) throws DataException {
  Map<String,Boolean> result=new HashMap<String,Boolean>();
  for (  Entry<String,IBinding> entry : input.entrySet()) {
    IBinding binding=entry.getValue();
    Set<String> transitions=new HashSet<String>();
    transitions.add(binding.getBindingName());
    parseAggregation(binding,input,result,transitions);
  }
  return result;
}",0.993421052631579
70076,"static Loader createLoader(URL url){
  try {
    String file=url.getFile();
    if (file != null && file.endsWith(""String_Node_Str"")) {
      if (""String_Node_Str"".equals(url.getProtocol())) {
        return new FileLoader(url);
      }
      return new UrlLoader(url);
    }
    return new JarLoader(url);
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + url,ex);
    return null;
  }
}","static Loader createLoader(URL url){
  try {
    String file=url.getFile();
    if (file != null && file.endsWith(""String_Node_Str"")) {
      if (""String_Node_Str"".equals(url.getProtocol())) {
        return new FileLoader(url);
      }
      return new UrlLoader(url);
    }
    return new JarLoader(url);
  }
 catch (  IOException ex) {
    logger.log(Level.WARNING,""String_Node_Str"" + url,ex);
    return null;
  }
}",0.986857825567503
70077,"protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setNeedClip(true);
      root.setAllocatedHeight(Math.min(maxHeight,cHeight));
      root.setAllocatedWidth(Math.min(maxWidth,cWidth));
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=false;
}","protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setNeedClip(true);
      root.setAllocatedHeight(cHeight);
      root.setAllocatedWidth(cWidth);
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=false;
}",0.9652009711356891
70078,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
      }
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  String value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.8619763694951665
70079,"/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}","/** 
 * Build the style of table content
 */
public void buildTableStyle(ITableContent table,StringBuffer styleBuffer){
  addDefaultTableStyles(styleBuffer);
  IStyle style=table.getStyle();
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
 else   if (IStyle.INLINE_VALUE == display || IStyle.INLINE_BLOCK_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  DimensionType height=table.getHeight();
  if (null != height) {
    buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,height);
  }
  DimensionType width=table.getWidth();
  if (null != width) {
    buildSize(styleBuffer,HTMLTags.ATTR_WIDTH,width);
  }
 else {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      boolean absoluteWidth=true;
      for (int i=0; i < table.getColumnCount(); i++) {
        IColumn column=table.getColumn(i);
        DimensionType columnWidth=column.getWidth();
        if (columnWidth == null) {
          absoluteWidth=false;
          break;
        }
 else {
          if (""String_Node_Str"".endsWith(columnWidth.getUnits())) {
            absoluteWidth=false;
            break;
          }
        }
      }
      if (!absoluteWidth) {
        styleBuffer.append(""String_Node_Str"");
      }
    }
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    if (!""String_Node_Str"".equalsIgnoreCase(style.getCanShrink())) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  style=getElementStyle(table);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.8538840937114673
70080,"private Set<CacheConnection> getOdaConnections(boolean populateToCache){
  if (DataSource.dataEngineLevelConnectionPool.get(this.session) == null) {
    if (populateToCache) {
      DataSource.dataEngineLevelConnectionPool.put(this.session,new HashMap<ConnectionProp,Set<CacheConnection>>());
    }
 else {
      return new HashSet<CacheConnection>();
    }
  }
  Map<ConnectionProp,Set<CacheConnection>> odaConnectionsMap=DataSource.dataEngineLevelConnectionPool.get(this.session);
  ConnectionProp connProp=new ConnectionProp(this.driverName,this.connectionProps,this.appContext);
  if (odaConnectionsMap.get(connProp) == null) {
    odaConnectionsMap.put(connProp,new HashSet<CacheConnection>());
  }
  return odaConnectionsMap.get(connProp);
}","private Set<CacheConnection> getOdaConnections(boolean populateToCache){
synchronized (DataSource.dataEngineLevelConnectionPool) {
    if (DataSource.dataEngineLevelConnectionPool.get(this.session) == null) {
      if (populateToCache) {
        DataSource.dataEngineLevelConnectionPool.put(this.session,new HashMap<ConnectionProp,Set<CacheConnection>>());
      }
 else {
        return new HashSet<CacheConnection>();
      }
    }
    Map<ConnectionProp,Set<CacheConnection>> odaConnectionsMap=DataSource.dataEngineLevelConnectionPool.get(this.session);
    ConnectionProp connProp=new ConnectionProp(this.driverName,this.connectionProps,this.appContext);
    if (odaConnectionsMap.get(connProp) == null) {
      odaConnectionsMap.put(connProp,new HashSet<CacheConnection>());
    }
    return odaConnectionsMap.get(connProp);
  }
}",0.9443742098609356
70081,"public void startData(IDataContent data){
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  if (((StyledElementDesign)data.getGenerateBy()).getMap() != null && ((StyledElementDesign)data.getGenerateBy()).getMap().getRuleCount() > 0 && data.getLabelText() != null) {
    engine.addData(data.getLabelText().trim(),data.getComputedStyle(),url,bookmark);
  }
 else   if (ExcelUtil.getType(data.getValue()) == SheetData.STRING) {
    engine.addData(data.getText(),data.getComputedStyle(),url,bookmark);
  }
 else   if (ExcelUtil.getType(data.getValue()) != Data.NUMBER) {
    engine.addDateTime(data,data.getComputedStyle(),url,bookmark);
  }
 else {
    engine.addData(data.getValue(),data.getComputedStyle(),url,bookmark);
  }
}","public void startData(IDataContent data){
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  MapDesign map=((StyledElementDesign)data.getGenerateBy()).getMap();
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    engine.addData(data.getLabelText().trim(),style,url,bookmark);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      engine.addData(data.getText(),style,url,bookmark,locale);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getNumberLocale();
      }
      engine.addData(data.getValue(),style,url,bookmark,locale);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getDateTimeLocale();
      }
      engine.addDateTime(data,style,url,bookmark,locale);
    }
  }
}",0.503013698630137
70082,"public void addDateTime(Object txt,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  ContainerSizeInfo rule=getCurrentContainer().getSizeInfo();
  StyleEntry entry=engine.getStyle(style,rule);
  Data data=null;
  IDataContent dataContent=(IDataContent)txt;
  Object value=dataContent.getValue();
  Date date=ExcelUtil.getDate(value);
  if (date != null && ((date instanceof Time) || date.getYear() >= 0)) {
    data=createDateData(value,entry,style.getDateTimeFormat());
    data.setHyperlinkDef(link);
    data.setBookmark(bookmark);
    data.setSizeInfo(rule);
    addData(data);
  }
 else {
    addData(dataContent.getText(),style,link,bookmark);
  }
}","public void addDateTime(Object txt,IStyle style,HyperlinkDef link,BookmarkDef bookmark,String dateTimeLocale){
  ContainerSizeInfo rule=getCurrentContainer().getSizeInfo();
  StyleEntry entry=engine.getStyle(style,rule);
  Data data=null;
  IDataContent dataContent=(IDataContent)txt;
  Object value=dataContent.getValue();
  Date date=ExcelUtil.getDate(value);
  if (date != null && ((date instanceof Time) || date.getYear() >= 0)) {
    data=createDateData(value,entry,style.getDateTimeFormat(),dateTimeLocale);
    data.setHyperlinkDef(link);
    data.setBookmark(bookmark);
    data.setSizeInfo(rule);
    addData(data);
  }
 else {
    addData(dataContent.getText(),style,link,bookmark,dateTimeLocale);
  }
}",0.9621542940320232
70083,"private Data createDateData(Object txt,StyleEntry entry,String timeFormat){
  timeFormat=ExcelUtil.parse(txt,timeFormat,locale);
  timeFormat=DateTimeUtil.formatDateTime(timeFormat,locale);
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(SheetData.DATE));
  return new Data(txt,entry,SheetData.DATE,getCurrentContainer());
}","private Data createDateData(Object txt,StyleEntry entry,String timeFormat,String dlocale){
  ULocale dateLocale=getLocale(dlocale);
  timeFormat=ExcelUtil.parse(txt,timeFormat,dateLocale);
  timeFormat=DateTimeUtil.formatDateTime(timeFormat,dateLocale);
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(SheetData.DATE));
  return new Data(txt,entry,SheetData.DATE,getCurrentContainer());
}",0.8995433789954338
70084,"public Data createData(Object txt,StyleEntry entry){
  int type=SheetData.STRING;
  if (SheetData.NUMBER == ExcelUtil.getType(txt)) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
    format=ExcelUtil.formatNumberPattern(format,locale);
    entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
    type=SheetData.NUMBER;
  }
 else   if (SheetData.DATE == ExcelUtil.getType(txt)) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
    entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
    type=Data.DATE;
  }
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  return new Data(txt,entry,type,getCurrentContainer());
}","private Data createData(Object txt,StyleEntry entry,ULocale dataLocale){
  int type=SheetData.STRING;
  if (SheetData.NUMBER == ExcelUtil.getType(txt)) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.NUMBER_FORMAT_PROP));
    format=ExcelUtil.formatNumberPattern(format,dataLocale);
    entry.setProperty(StyleConstant.NUMBER_FORMAT_PROP,format);
    type=SheetData.NUMBER;
  }
 else   if (SheetData.DATE == ExcelUtil.getType(txt)) {
    String format=ExcelUtil.getPattern(txt,entry.getProperty(StyleConstant.DATE_FORMAT_PROP));
    entry.setProperty(StyleConstant.DATE_FORMAT_PROP,format);
    type=Data.DATE;
  }
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  return new Data(txt,entry,type,getCurrentContainer());
}",0.9764397905759162
70085,"/** 
 * @param option
 * @return
 * @throws BirtException
 */
private CSVDataExtractionImpl createExtraction(OutputStream out,IDataExtractionOption option) throws BirtException {
  CSVDataExtractionImpl extract=new CSVDataExtractionImpl();
  Map allOptions=new HashMap();
  allOptions.putAll(option.getOptions());
  DataExtractionOption deOptions=new DataExtractionOption(allOptions);
  deOptions.setOutputStream(out);
  extract.initilize(null,deOptions);
  return extract;
}","/** 
 * @param option
 * @return
 * @throws BirtException
 */
private CSVDataExtractionImpl createExtraction(OutputStream out,IDataExtractionOption option) throws BirtException {
  CSVDataExtractionImpl extract=new CSVDataExtractionImpl();
  Map allOptions=new HashMap();
  allOptions.putAll(option.getOptions());
  DataExtractionOption deOptions=new DataExtractionOption(allOptions);
  deOptions.setOutputStream(out);
  extract.initialize(null,deOptions);
  return extract;
}",0.9989484752891692
70086,"public void testGetImageByEmbeddedImage() throws Exception {
  EmbeddedImage embeddedImage=new EmbeddedImage(""String_Node_Str"");
  FileInputStream is=new FileInputStream(iconPath + TEST_FILE);
  byte[] data=new byte[is.available()];
  is.read(data);
  embeddedImage.setData(data);
  getReportDesign().handle().addImage(embeddedImage);
  Image image=ImageManager.getInstance().getEmbeddedImage(getReportDesignHandle(),embeddedImage.getName());
  assertNotNull(image);
  if (PlatformUtil.isWindows()) {
    assertTrue(Arrays.equals(image.getImageData().data,localData.data));
  }
  assertEquals(image,ImageManager.getInstance().getEmbeddedImage(getReportDesignHandle(),embeddedImage.getName()));
}","public void testGetImageByEmbeddedImage() throws Exception {
  EmbeddedImage embeddedImage=new EmbeddedImage(""String_Node_Str"");
  FileInputStream is=new FileInputStream(iconPath + TEST_FILE);
  byte[] data=new byte[is.available()];
  is.read(data);
  embeddedImage.setData(data);
  getReportDesign().handle().addImage(embeddedImage);
  Image image=ImageManager.getInstance().getEmbeddedImage(getReportDesignHandle(),embeddedImage.getName());
  assertNotNull(image);
  if (PlatformUtil.isWindows()) {
    assertTrue(Arrays.equals(image.getImageData().data,localImage.getImageData().data));
  }
  assertEquals(image,ImageManager.getInstance().getEmbeddedImage(getReportDesignHandle(),embeddedImage.getName()));
}",0.9886201991465148
70087,"public void testGetImageByURL() throws Exception {
  Image image=ImageManager.getInstance().getImage(TEST_URL);
  assertNotNull(image);
  assertTrue(Arrays.equals(image.getImageData().data,localData.data));
  assertEquals(image,ImageManager.getInstance().getImage(TEST_URL));
}","public void testGetImageByURL() throws Exception {
  Image image=ImageManager.getInstance().getImage(TEST_URL);
  assertNotNull(image);
  assertTrue(Arrays.equals(image.getImageData().data,localImage.getImageData().data));
  assertEquals(image,ImageManager.getInstance().getImage(TEST_URL));
}",0.9719298245614036
70088,"public void testGetImageByPath() throws Exception {
  Image image=ImageManager.getInstance().getImage(iconPath + TEST_FILE);
  assertNotNull(image);
  if (PlatformUtil.isWindows()) {
    assertTrue(Arrays.equals(image.getImageData().data,localData.data));
  }
}","public void testGetImageByPath() throws Exception {
  Image image=ImageManager.getInstance().getImage(iconPath + TEST_FILE);
  assertNotNull(image);
  if (PlatformUtil.isWindows()) {
    assertTrue(Arrays.equals(image.getImageData().data,localImage.getImageData().data));
  }
}",0.9702602230483272
70089,"protected Dimension getChildSize(IFigure child,int wHint,int hHint){
  updateChild(child,wHint);
  ReportItemConstraint constraint=(ReportItemConstraint)getConstraint(child);
  Dimension preferredDimension;
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
    preferredDimension=((IFixLayoutHelper)child).getFixPreferredSize(wHint,hHint);
    if (constraint != null) {
      Dimension dimension=constraint.getSize();
      if (dimension.width <= 0) {
        if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
          preferredDimension.width=(int)constraint.getMeasure() * wHint / 100;
        }
      }
    }
    constraint=null;
  }
 else {
    preferredDimension=child.getPreferredSize(wHint,hHint);
  }
  if (constraint != null && !constraint.isFitContiner()) {
    if (constraint.isNone()) {
      return new Dimension(0,0);
    }
    Dimension dimension=constraint.getSize();
    if (dimension.height <= 0) {
      dimension.height=preferredDimension.height;
    }
    if (dimension.width <= 0) {
      if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
        dimension.width=(int)constraint.getMeasure() * wHint / 100;
      }
 else {
        dimension.width=preferredDimension.width;
      }
    }
    return dimension;
  }
 else {
    return preferredDimension;
  }
}","protected Dimension getChildSize(IFigure child,int wHint,int hHint){
  updateChild(child,wHint);
  ReportItemConstraint constraint=(ReportItemConstraint)getConstraint(child);
  Dimension preferredDimension;
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
    preferredDimension=((IFixLayoutHelper)child).getFixPreferredSize(wHint,hHint);
    if (constraint != null) {
      Dimension dimension=constraint.getSize();
      if (dimension.width <= 0) {
        if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
          int trueWidth=wHint;
{
            trueWidth=getParentClientArea(child);
          }
          preferredDimension.width=(int)constraint.getMeasure() * trueWidth / 100;
        }
      }
    }
    constraint=null;
  }
 else {
    preferredDimension=child.getPreferredSize(wHint,hHint);
  }
  if (constraint != null && !constraint.isFitContiner()) {
    if (constraint.isNone()) {
      return new Dimension(0,0);
    }
    Dimension dimension=constraint.getSize();
    if (dimension.height <= 0) {
      dimension.height=preferredDimension.height;
    }
    if (dimension.width <= 0) {
      if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
        dimension.width=(int)constraint.getMeasure() * wHint / 100;
      }
 else {
        dimension.width=preferredDimension.width;
      }
    }
    return dimension;
  }
 else {
    return preferredDimension;
  }
}",0.9308876514903374
70090,"private void updateChild(IFigure child,int wHint){
  ReportItemConstraint constraint=(ReportItemConstraint)getConstraint(child);
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
    if (constraint != null) {
      Dimension dimension=constraint.getSize();
      if (dimension.width <= 0) {
        if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
          int width=(int)constraint.getMeasure() * wHint / 100;
          if (child instanceof LabelFigure) {
            LabelFigure label=(LabelFigure)child;
            Dimension dim=label.getRecommendSize();
            label.setRecommendSize(new Dimension(width,dim.height));
          }
        }
      }
    }
  }
}","private void updateChild(IFigure child,int wHint){
  ReportItemConstraint constraint=(ReportItemConstraint)getConstraint(child);
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
    if (constraint != null) {
      Dimension dimension=constraint.getSize();
      if (dimension.width <= 0) {
        if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
          int trueWidth=wHint;
{
            trueWidth=getParentClientArea(child);
          }
          int width=(int)constraint.getMeasure() * trueWidth / 100;
          if (child instanceof LabelFigure) {
            LabelFigure label=(LabelFigure)child;
            Dimension dim=label.getRecommendSize();
            label.setRecommendSize(new Dimension(width,dim.height));
          }
        }
      }
    }
  }
}",0.9051774287376382
70091,"protected Dimension calculateMinimumSize(IFigure container,int wHint,int hHint){
  if (wHint > -1)   wHint=Math.max(0,wHint - container.getInsets().getWidth());
  if (hHint > -1)   hHint=Math.max(0,hHint - container.getInsets().getHeight());
  int maxWidth;
  maxWidth=wHint;
  hHint=-1;
  if (maxWidth < 0) {
    maxWidth=Integer.MAX_VALUE;
  }
  Dimension prefSize=new Dimension();
  List children=container.getChildren();
  int width=0;
  int height=0;
  IFigure child;
  IFigure lastChild=null;
  Dimension childSize;
  for (int i=0; i < children.size(); i++) {
    child=(IFigure)children.get(i);
    Insets fmargin=getFigureMargin(child);
    if (wHint != -1) {
      wHint=Math.max(0,wHint - fmargin.getWidth());
    }
    if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
      updateChild(child,wHint);
      int display=ReportItemConstraint.BLOCK;
      display=getDisplay(child);
      if (display == ReportItemConstraint.INLINE && child instanceof LabelFigure && (lastChild != null && getDisplay(lastChild) == ReportItemConstraint.INLINE)) {
        childSize=((IFixLayoutHelper)child).getFixMinimumSize(wHint - width - getMinorSpacing() <= 0 ? -1 : wHint - width - getMinorSpacing(),hHint);
      }
 else {
        childSize=((IFixLayoutHelper)child).getFixMinimumSize(wHint,hHint);
      }
    }
 else {
      childSize=child.getMinimumSize(wHint,hHint);
    }
    if (i == 0) {
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
 else     if ((getDisplay(child) == ReportItemConstraint.NONE)) {
    }
 else     if ((width + childSize.width + fmargin.getWidth()+ getMinorSpacing() <= maxWidth) && ((getDisplay(child) == ReportItemConstraint.INLINE) && (getDisplay(lastChild) == ReportItemConstraint.INLINE))) {
      width+=childSize.width + fmargin.getWidth() + getMinorSpacing();
      height=Math.max(height,childSize.height + fmargin.getHeight());
    }
 else {
      prefSize.height+=height + getMajorSpacing();
      prefSize.width=Math.max(prefSize.width,width);
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
    lastChild=child;
  }
  prefSize.height+=height;
  prefSize.width=Math.max(prefSize.width,width);
  prefSize.width+=container.getInsets().getWidth();
  prefSize.height+=container.getInsets().getHeight();
  prefSize.union(getBorderPreferredSize(container));
  return prefSize;
}","protected Dimension calculateMinimumSize(IFigure container,int wHint,int hHint){
  if (wHint > -1)   wHint=Math.max(0,wHint - container.getInsets().getWidth());
  if (hHint > -1)   hHint=Math.max(0,hHint - container.getInsets().getHeight());
  int maxWidth;
  maxWidth=wHint;
  hHint=-1;
  if (maxWidth < 0) {
    maxWidth=Integer.MAX_VALUE;
  }
  Dimension prefSize=new Dimension();
  List children=container.getChildren();
  int width=0;
  int height=0;
  IFigure child;
  IFigure lastChild=null;
  Dimension childSize;
  for (int i=0; i < children.size(); i++) {
    child=(IFigure)children.get(i);
    Insets fmargin=getFigureMargin(child);
    if (wHint != -1) {
      wHint=Math.max(0,wHint - fmargin.getWidth());
    }
    if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
      updateChild(child,wHint);
      int display=ReportItemConstraint.BLOCK;
      display=getDisplay(child);
      if (display == ReportItemConstraint.INLINE && child instanceof LabelFigure && (lastChild != null && getDisplay(lastChild) == ReportItemConstraint.INLINE)) {
        childSize=((IFixLayoutHelper)child).getFixMinimumSize(wHint - width - getMinorSpacing() <= 0 ? -1 : wHint - width - getMinorSpacing(),hHint);
        if (childSize.width == wHint - width - getMinorSpacing()) {
          childSize=((IFixLayoutHelper)child).getFixMinimumSize(-1,hHint);
        }
      }
 else {
        if (display == ReportItemConstraint.INLINE) {
          childSize=((IFixLayoutHelper)child).getFixMinimumSize(-1,hHint);
        }
 else {
          childSize=((IFixLayoutHelper)child).getFixMinimumSize(wHint,hHint);
        }
      }
    }
 else {
      childSize=child.getMinimumSize(wHint,hHint);
    }
    if (i == 0) {
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
 else     if ((getDisplay(child) == ReportItemConstraint.NONE)) {
    }
 else     if ((width + childSize.width + fmargin.getWidth()+ getMinorSpacing() <= maxWidth) && ((getDisplay(child) == ReportItemConstraint.INLINE) && (getDisplay(lastChild) == ReportItemConstraint.INLINE))) {
      width+=childSize.width + fmargin.getWidth() + getMinorSpacing();
      height=Math.max(height,childSize.height + fmargin.getHeight());
    }
 else {
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
        int display=ReportItemConstraint.BLOCK;
        display=getDisplay(child);
        if (display == ReportItemConstraint.INLINE) {
          childSize=((IFixLayoutHelper)child).getFixMinimumSize(-1,hHint);
        }
 else {
          childSize=((IFixLayoutHelper)child).getFixMinimumSize(wHint,hHint);
        }
      }
      prefSize.height+=height + getMajorSpacing();
      prefSize.width=Math.max(prefSize.width,width);
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
    lastChild=child;
  }
  prefSize.height+=height;
  prefSize.width=Math.max(prefSize.width,width);
  prefSize.width+=container.getInsets().getWidth();
  prefSize.height+=container.getInsets().getHeight();
  prefSize.union(getBorderPreferredSize(container));
  return prefSize;
}",0.8624201622648023
70092,"private String[] getMetadataString(String type){
  if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    return new String[]{table1,table2};
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new String[]{list1,list2};
  }
 else   if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    return new String[]{imageMetadata1,imageMetadata2};
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new String[]{template1,template2};
  }
 else   if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)|| ""String_Node_Str"".equals(type)|| ""String_Node_Str"".equals(type)|| ""String_Node_Str"".equals(type)) {
    return new String[]{metadata1,metadata2};
  }
  fail();
  return null;
}","private String[] getMetadataString(String type){
  if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    return new String[]{table1,table2};
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new String[]{list1,list2};
  }
 else   if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)) {
    return new String[]{imageMetadata1,imageMetadata2};
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new String[]{chartMetadata1,chartMetadata2};
  }
 else   if (""String_Node_Str"".equals(type)) {
    return new String[]{template1,template2};
  }
 else   if (""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type) || ""String_Node_Str"".equals(type)|| ""String_Node_Str"".equals(type)|| ""String_Node_Str"".equals(type)|| ""String_Node_Str"".equals(type)) {
    return new String[]{metadata1,metadata2};
  }
  fail();
  return null;
}",0.9176470588235294
70093,"public void run(){
  transStar(NAME);
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  AddComputedSummaryDialog computedSummaryDialog=new AddComputedSummaryDialog(UIUtil.getDefaultShell(),reportHandle);
  if (computedSummaryDialog.open() == Dialog.OK) {
    String measureName=computedSummaryDialog.getName();
    String expression=computedSummaryDialog.getExpression();
    String dataType=computedSummaryDialog.getDataType();
    int index=reportHandle.getAllMeasures().indexOf(measureViewHandle) + 1;
    try {
      ComputedMeasureViewHandle computedMeasure=reportHandle.insertComputedMeasure(measureName,index);
      computedMeasure.addHeader();
      LabelHandle labelHandle=DesignElementFactory.getInstance().newLabel(null);
      labelHandle.setText(measureName);
      computedMeasure.getHeader().addContent(labelHandle);
      ExtendedItemHandle crosstabModelHandle=(ExtendedItemHandle)reportHandle.getModelHandle();
      ComputedColumn bindingColumn=StructureFactory.newComputedColumn(crosstabModelHandle,measureName);
      ComputedColumnHandle bindingHandle=crosstabModelHandle.addColumnBinding(bindingColumn,false);
      bindingHandle.setExpression(expression);
      bindingHandle.setDataType(dataType);
      DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(measureName);
      dataHandle.setResultSetColumn(bindingHandle.getName());
      AggregationCellHandle cell=computedMeasure.getCell();
      cell.addContent(dataHandle);
    }
 catch (    SemanticException e) {
      e.printStackTrace();
      rollBack();
    }
  }
  transEnd();
}","public void run(){
  transStar(NAME);
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  AddComputedSummaryDialog computedSummaryDialog=new AddComputedSummaryDialog(UIUtil.getDefaultShell(),reportHandle);
  if (computedSummaryDialog.open() == Dialog.OK) {
    String measureName=computedSummaryDialog.getName();
    String expression=computedSummaryDialog.getExpression();
    String dataType=computedSummaryDialog.getDataType();
    int index=reportHandle.getAllMeasures().indexOf(measureViewHandle) + 1;
    try {
      ComputedMeasureViewHandle computedMeasure=reportHandle.insertComputedMeasure(measureName,index);
      computedMeasure.addHeader();
      ExtendedItemHandle crosstabModelHandle=(ExtendedItemHandle)reportHandle.getModelHandle();
      ComputedColumn bindingColumn=StructureFactory.newComputedColumn(crosstabModelHandle,measureName);
      ComputedColumnHandle bindingHandle=crosstabModelHandle.addColumnBinding(bindingColumn,false);
      bindingHandle.setExpression(expression);
      bindingHandle.setDataType(dataType);
      DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(measureName);
      dataHandle.setResultSetColumn(bindingHandle.getName());
      AggregationCellHandle cell=computedMeasure.getCell();
      cell.addContent(dataHandle);
    }
 catch (    SemanticException e) {
      e.printStackTrace();
      rollBack();
    }
  }
  transEnd();
}",0.5536537195523371
70094,"private boolean processor(List list,List result,boolean doChange) throws SemanticException {
  initializeProviders();
  boolean isRemove=false;
  List temp=new ArrayList(result);
  for (int i=0; i < result.size(); i++) {
    MeasureInfo resultOne=(MeasureInfo)result.get(i);
    MeasureInfo originalOne=getOriMeasureInfo(resultOne,list);
    if (resultOne.isShow() == originalOne.isShow()) {
      MeasureInfo info=(MeasureInfo)result.get(i);
      if (info.isShow() == true && info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(false);
        providerWrapper.addSwitchInfo(swtichCellInfo);
        needUpdateView=true;
      }
      temp.remove(resultOne);
    }
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  for (int i=0; i < temp.size(); i++) {
    MeasureInfo info=(MeasureInfo)temp.get(i);
    if (info.isShow()) {
      if (!doChange) {
        continue;
      }
      MeasureHandle measure=reportHandle.getCube().getMeasure(info.getMeasureName());
      MeasureViewHandle measureViewHandle=reportHandle.insertMeasure(measure,reportHandle.getMeasureCount());
      measureViewHandle.addHeader();
      LabelHandle labelHandle=DesignElementFactory.getInstance().newLabel(null);
      labelHandle.setText(info.getMeasureDisplayName());
      needUpdateView=true;
      measureViewHandle.getHeader().addContent(labelHandle);
      if (info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        info.setMeasureName(measureViewHandle.getCubeMeasure().getQualifiedName());
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(true);
        providerWrapper.addSwitchInfo(swtichCellInfo);
      }
    }
 else {
      if (doChange) {
        reportHandle.removeMeasure(info.getMeasureName());
      }
      isRemove=true;
      needUpdateView=true;
    }
  }
  return isRemove;
}","private boolean processor(List list,List result,boolean doChange) throws SemanticException {
  initializeProviders();
  boolean isRemove=false;
  List temp=new ArrayList(result);
  for (int i=0; i < result.size(); i++) {
    MeasureInfo resultOne=(MeasureInfo)result.get(i);
    MeasureInfo originalOne=getOriMeasureInfo(resultOne,list);
    if (resultOne.isShow() == originalOne.isShow()) {
      MeasureInfo info=(MeasureInfo)result.get(i);
      if (info.isShow() == true && info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(false);
        providerWrapper.addSwitchInfo(swtichCellInfo);
        needUpdateView=true;
      }
      temp.remove(resultOne);
    }
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  for (int i=0; i < temp.size(); i++) {
    MeasureInfo info=(MeasureInfo)temp.get(i);
    if (info.isShow()) {
      if (!doChange) {
        continue;
      }
      MeasureHandle measure=reportHandle.getCube().getMeasure(info.getMeasureName());
      MeasureViewHandle measureViewHandle=reportHandle.insertMeasure(measure,reportHandle.getMeasureCount());
      measureViewHandle.addHeader();
      needUpdateView=true;
      if (info.getExpectedView() != null && info.getExpectedView().length() != 0) {
        SwitchCellInfo swtichCellInfo=new SwitchCellInfo(measureViewHandle.getCrosstab(),SwitchCellInfo.MEASURE);
        info.setMeasureName(measureViewHandle.getCubeMeasure().getQualifiedName());
        swtichCellInfo.setMeasureInfo(info);
        swtichCellInfo.setIsNew(true);
        providerWrapper.addSwitchInfo(swtichCellInfo);
      }
    }
 else {
      if (doChange) {
        reportHandle.removeMeasure(info.getMeasureName());
      }
      isRemove=true;
      needUpdateView=true;
    }
  }
  return isRemove;
}",0.9523124850227654
70095,"public void start(boolean rtl,String creator,String title,String description){
  this.rtl=rtl;
  writer.startWriter();
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeCoreProperties(creator,title,description);
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.closeTag(""String_Node_Str"");
  writeBidi(rtl);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
}","public void start(boolean rtl,String creator,String title,String description){
  this.rtl=rtl;
  writer.startWriter();
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeCoreProperties(creator,title,description);
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.closeTag(""String_Node_Str"");
  writeBidi(rtl);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",108);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",108);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
}",0.7405171282320514
70096,"@Override public void addAction(IAction action){
}","public void addAction(IAction action){
}",0.8888888888888888
70097,"@Override public void addAction(IAction action){
}","public void addAction(IAction action){
}",0.8888888888888888
70098,"public DataGenerationEngine(ExecutionContext context,IDocArchiveWriter writer) throws Exception {
  super(context,writer);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_GENERATION,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_META_STREAM));
  DteMetaInfoIOUtil.startMetaInfo(dos);
}","public DataGenerationEngine(ExecutionContext context,IDocArchiveWriter writer) throws Exception {
  super(context,writer);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_GENERATION,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setTimeZone(context.getTimeZone());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_META_STREAM));
  DteMetaInfoIOUtil.startMetaInfo(dos);
}",0.9660284126003706
70099,"public DataInteractiveEngine(ExecutionContext context,IDocArchiveReader reader,IDocArchiveWriter writer) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_UPDATE,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  if (writer != null && dos == null) {
    dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_SNAP_META_STREAM));
    DteMetaInfoIOUtil.startMetaInfo(dos);
  }
}","public DataInteractiveEngine(ExecutionContext context,IDocArchiveReader reader,IDocArchiveWriter writer) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_UPDATE,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setDocumentWriter(writer);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setTimeZone(context.getTimeZone());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  if (writer != null && dos == null) {
    dos=new DataOutputStream(writer.createRandomAccessStream(ReportDocumentConstants.DATA_SNAP_META_STREAM));
    DteMetaInfoIOUtil.startMetaInfo(dos);
  }
}",0.9710678590215676
70100,"public DataPresentationEngine(ExecutionContext context,IDocArchiveReader reader) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
}","public DataPresentationEngine(ExecutionContext context,IDocArchiveReader reader) throws Exception {
  super(context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setTimeZone(context.getTimeZone());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
}",0.9601737871107892
70101,"public IContent execute(){
  ICellContent content=context.getReportContent().createCellContent();
  initializeContent(content,cellHandle);
  content.setRowSpan(rowSpan);
  content.setColSpan(colSpan);
  content.setColumn(colIndex);
  try {
    EdgeCursor columnEdgeCursor=getColumnEdgeCursor();
    if (columnEdgeCursor != null) {
      columnEdgeCursor.setPosition(position);
    }
  }
 catch (  OLAPException e) {
    logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
  }
  processStyle(cellHandle);
  processVisibility(cellHandle);
  processBookmark(cellHandle);
  processScopeAndHeaders(cellHandle);
  processAction(cellHandle);
  currentChild=0;
  ICubeResultSet cubeRset=getCubeResultSet();
  DataID di=cubeRset == null ? null : new DataID(cubeRset.getID(),cubeRset.getCellIndex());
  InstanceID iid=new InstanceID(null,cellHandle == null ? -1 : cellHandle.getModelHandle().getID(),di);
  content.setInstanceID(iid);
  return content;
}","public IContent execute(){
  ICellContent content=context.getReportContent().createCellContent();
  initializeContent(content,cellHandle);
  content.setRowSpan(rowSpan);
  content.setColSpan(colSpan);
  content.setColumn(colIndex);
  if (cellHandle != null && cellHandle.getContainer() instanceof LevelViewHandle) {
    content.setRepeatContent(true);
  }
  try {
    EdgeCursor columnEdgeCursor=getColumnEdgeCursor();
    if (columnEdgeCursor != null) {
      columnEdgeCursor.setPosition(position);
    }
  }
 catch (  OLAPException e) {
    logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
  }
  processStyle(cellHandle);
  processVisibility(cellHandle);
  processBookmark(cellHandle);
  processScopeAndHeaders(cellHandle);
  processAction(cellHandle);
  currentChild=0;
  ICubeResultSet cubeRset=getCubeResultSet();
  DataID di=cubeRset == null ? null : new DataID(cubeRset.getID(),cubeRset.getCellIndex());
  InstanceID iid=new InstanceID(null,cellHandle == null ? -1 : cellHandle.getModelHandle().getID(),di);
  content.setInstanceID(iid);
  return content;
}",0.9392156862745098
70102,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray,new StopSign());
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  closeResultSets(resultSet);
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray,new StopSign());
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  closeResultSets(resultSet);
}",0.9996603952998708
70103,"private void testNestAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  int[] sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel11,dimLevel12};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),6);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  assertEquals(resultSet[0].getLevelIndex(dimLevel12),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(1));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(5));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(9));
  resultSet[0].seek(3);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(13));
  resultSet[0].seek(4);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(17));
  resultSet[0].seek(5);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  IAggregationResultSet sourceAggrResultSet=resultSet[0];
  aggregations=new AggregationDefinition[1];
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  Context context=Context.enter();
  ScriptableObject scope=context.initStandardObjects();
  ScriptContext cx=new ScriptContext(scope);
  IAggregationResultSet ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  aggregations=new AggregationDefinition[1];
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel11};
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),3);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(38));
  closeResultSets(resultSet);
  Context.exit();
  cx.exit();
}","private void testNestAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  int[] sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel11,dimLevel12};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),6);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  assertEquals(resultSet[0].getLevelIndex(dimLevel12),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(1));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(5));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(9));
  resultSet[0].seek(3);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(13));
  resultSet[0].seek(4);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(17));
  resultSet[0].seek(5);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  IAggregationResultSet sourceAggrResultSet=resultSet[0];
  aggregations=new AggregationDefinition[1];
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  Context context=Context.enter();
  ScriptableObject scope=context.initStandardObjects();
  ScriptContext cx=new ScriptContext(scope);
  IAggregationResultSet ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  aggregations=new AggregationDefinition[1];
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel11};
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),3);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(38));
  closeResultSets(resultSet);
  Context.exit();
  cx.exit();
}",0.9996809393146576
70104,"private void testMaxAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),11);
  closeResultSets(resultSet);
}","private void testMaxAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),11);
  closeResultSets(resultSet);
}",0.999433684448975
70105,"/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  int count=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      count++;
    }
  }
  IDimension[] dimensions=cube.getDimesions();
  String[] validDimensionName=new String[count];
  IDiskArray[] validDimPosition=new IDiskArray[count];
  int pos=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      validDimPosition[pos]=dimPosition[i];
      validDimensionName[pos]=dimensions[i].getName();
      pos++;
    }
  }
  FactTableRowIterator factTableRowIterator=new FactTableRowIterator(cube.getFactTable(),validDimensionName,validDimPosition,populateDimensionResultIterator(stopSign),null,stopSign);
  if (cubePosFilters != null && !cubePosFilters.isEmpty()) {
    for (Iterator itr=cubePosFilters.iterator(); itr.hasNext(); ) {
      ICubePosFilter cubePosFilter=(ICubePosFilter)itr.next();
      factTableRowIterator.addCubePosFilter(cubePosFilter);
    }
  }
  for (int i=0; i < measureFilters.size(); i++) {
    factTableRowIterator.addMeasureFilter((IJSFacttableFilterEvalHelper)measureFilters.get(i));
  }
  DimensionResultIterator[] dimensionResultIterators=populateDimensionResultIterator(dimPosition,stopSign);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(factTableRowIterator,dimensionResultIterators,computedMeasureHelper);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dataSet4Aggregation,aggregations);
  return aggregationCalculatorExecutor.execute(stopSign);
}","/** 
 * This method is responsible for computing the aggregation result according to the specified aggregation definitions.
 * @param aggregations
 * @param stopSign
 * @return
 * @throws DataException
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] onePassExecute(AggregationDefinition[] aggregations,StopSign stopSign) throws DataException, IOException, BirtException {
  IDiskArray[] dimPosition=getFilterResult();
  int count=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      count++;
    }
  }
  IDimension[] dimensions=cube.getDimesions();
  String[] validDimensionName=new String[count];
  IDiskArray[] validDimPosition=new IDiskArray[count];
  int pos=0;
  for (int i=0; i < dimPosition.length; i++) {
    if (dimPosition[i] != null) {
      validDimPosition[pos]=dimPosition[i];
      validDimensionName[pos]=dimensions[i].getName();
      pos++;
    }
  }
  FactTableRowIterator factTableRowIterator=new FactTableRowIterator(cube.getFactTable(),validDimensionName,validDimPosition,populateDimensionResultIterator(stopSign),null,stopSign);
  if (cubePosFilters != null && !cubePosFilters.isEmpty()) {
    for (Iterator itr=cubePosFilters.iterator(); itr.hasNext(); ) {
      ICubePosFilter cubePosFilter=(ICubePosFilter)itr.next();
      factTableRowIterator.addCubePosFilter(cubePosFilter);
    }
  }
  for (int i=0; i < measureFilters.size(); i++) {
    factTableRowIterator.addMeasureFilter((IJSFacttableFilterEvalHelper)measureFilters.get(i));
  }
  DimensionResultIterator[] dimensionResultIterators=populateDimensionResultIterator(dimPosition,stopSign);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(factTableRowIterator,dimensionResultIterators,computedMeasureHelper);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(new CubeDimensionReader(cube),dataSet4Aggregation,aggregations);
  return aggregationCalculatorExecutor.execute(stopSign);
}",0.9923896499238964
70106,"/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo) throws IOException, DataException {
  Object[] params={aggregationDef,parameterColNames,metaInfo};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndexes=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggrFunction aggregation=AggregationManager.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation == null) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + aggregationFunction[i].getFunctionName());
      }
      if (AggregationUtil.needDataField(aggregation)) {
        this.parameterColIndex[i]=find(parameterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      final String measureName=aggregationFunction[i].getMeasureName();
      this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
      if (this.measureIndexes[i] == -1 && measureName != null) {
        throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
      }
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}","/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader) throws IOException, DataException {
  Object[] params={aggregationDef,parameterColNames,metaInfo};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndexes=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggrFunction aggregation=AggregationManager.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation == null) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + aggregationFunction[i].getFunctionName());
      }
      if (AggregationUtil.needDataField(aggregation)) {
        this.parameterColIndex[i]=find(parameterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      final String measureName=aggregationFunction[i].getMeasureName();
      this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
      if (this.measureIndexes[i] == -1 && measureName != null) {
        throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
      }
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}",0.9839596700274976
70107,"/** 
 * @param row
 * @param functionNo
 * @return
 * @throws DataException 
 */
private boolean getFilterResult(Row4Aggregation row,int functionNo) throws DataException {
  facttableRow.setMeasure(row.getMeasures());
  IJSFacttableFilterEvalHelper filterEvalHelper=(aggregation.getAggregationFunctions()[functionNo]).getFilterEvalHelper();
  if (filterEvalHelper == null) {
    return true;
  }
 else {
    return filterEvalHelper.evaluateFilter(facttableRow);
  }
}","/** 
 * @param row
 * @param functionNo
 * @return
 * @throws DataException 
 */
private boolean getFilterResult(Row4Aggregation row,int functionNo) throws DataException {
  facttableRow.setDimPos(row.getDimPos());
  facttableRow.setMeasure(row.getMeasures());
  IJSFacttableFilterEvalHelper filterEvalHelper=(aggregation.getAggregationFunctions()[functionNo]).getFilterEvalHelper();
  if (filterEvalHelper == null) {
    return true;
  }
 else {
    return filterEvalHelper.evaluateFilter(facttableRow);
  }
}",0.9559877175025588
70108,"/** 
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private void populateSortedFactRows(StopSign stopSign) throws IOException, DataException {
  prepareSortedStacks();
  int measureCount=dataSet4Aggregation.getMetaInfo().getMeasureInfos().length;
  try {
    while (dataSet4Aggregation.next() && !stopSign.isStopped()) {
      for (int i=0; i < allSortedFactRows.size(); i++) {
        DiskSortedStackWrapper diskSortedStackWrapper=((DiskSortedStackWrapper)allSortedFactRows.get(i));
        int[] levelIndex=diskSortedStackWrapper.levelIndex;
        Row4Aggregation aggregationRow=new Row4Aggregation();
        aggregationRow.setLevelMembers(getLevelMembers(levelIndex));
        if (aggregationRow.getLevelMembers() == null) {
          continue;
        }
        aggregationRow.setMeasures(new Object[measureCount]);
        for (int j=0; j < measureCount; j++) {
          aggregationRow.getMeasures()[j]=dataSet4Aggregation.getMeasureValue(j);
        }
        aggregationRow.setParameterValues(getParameterValues());
        diskSortedStackWrapper.diskSortedStack.push(aggregationRow);
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private void populateSortedFactRows(StopSign stopSign) throws IOException, DataException {
  prepareSortedStacks();
  int measureCount=dataSet4Aggregation.getMetaInfo().getMeasureInfos().length;
  try {
    while (dataSet4Aggregation.next() && !stopSign.isStopped()) {
      for (int i=0; i < allSortedFactRows.size(); i++) {
        DiskSortedStackWrapper diskSortedStackWrapper=((DiskSortedStackWrapper)allSortedFactRows.get(i));
        int[] levelIndex=diskSortedStackWrapper.levelIndex;
        Row4Aggregation aggregationRow=new Row4Aggregation();
        aggregationRow.setDimPos(dataSet4Aggregation.getDimensionPosition());
        aggregationRow.setLevelMembers(getLevelMembers(levelIndex));
        if (aggregationRow.getLevelMembers() == null) {
          continue;
        }
        aggregationRow.setMeasures(new Object[measureCount]);
        for (int j=0; j < measureCount; j++) {
          aggregationRow.getMeasures()[j]=dataSet4Aggregation.getMeasureValue(j);
        }
        aggregationRow.setParameterValues(getParameterValues());
        diskSortedStackWrapper.diskSortedStack.push(aggregationRow);
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9686495176848876
70109,"/** 
 * @param dimensionResultIterators
 * @param factTableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(IDataSet4Aggregation dataSet4Aggregation,AggregationDefinition[] aggregations) throws IOException, DataException {
  Object[] params={dataSet4Aggregation,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dataSet4Aggregation=dataSet4Aggregation;
  getParameterColIndex(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo());
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}","/** 
 * @param dimensionResultIterators
 * @param factTableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(ICubeDimensionReader cubeDimensionReader,IDataSet4Aggregation dataSet4Aggregation,AggregationDefinition[] aggregations) throws IOException, DataException {
  Object[] params={dataSet4Aggregation,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dataSet4Aggregation=dataSet4Aggregation;
  getParameterColIndex(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader);
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}",0.968278731149246
70110,"public boolean hasNextChild(){
  if (children == null) {
    return false;
  }
  if (currentChild < children.size()) {
    return true;
  }
  if (needRowGroups) {
    if (endOfGroups) {
      return false;
    }
    try {
      while (!endOfGroups) {
        int endingGroupIndex=GroupUtil.getEndingGroupLevel(rowCursor,groupCursors);
        if (endingGroupIndex <= 0) {
          currentChild=0;
          children=new ArrayList();
          if (crosstabItem.getGrandTotal(ROW_AXIS_TYPE) != null && (measureCount > 0 || !IColumnWalker.IGNORE_TOTAL_COLUMN_WITHOUT_MEASURE)) {
            CrosstabFooterExecutor totalExecutor=new CrosstabFooterExecutor(this);
            children.add(totalExecutor);
          }
          endOfGroups=true;
          return currentChild < children.size();
        }
        if (rowCursor.next()) {
          collectExecutable();
          return currentChild < children.size();
        }
      }
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
  return false;
}","public boolean hasNextChild(){
  if (children == null) {
    return false;
  }
  if (currentChild < children.size()) {
    return true;
  }
  if (needRowGroups) {
    if (endOfGroups) {
      return false;
    }
    try {
      while (!endOfGroups) {
        int endingGroupIndex=GroupUtil.getEndingGroupLevel(rowCursor,groupCursors);
        if (endingGroupIndex <= 0) {
          currentChild=0;
          children=new ArrayList();
          if (needRowGrandTotal(GRAND_TOTAL_LOCATION_AFTER)) {
            CrosstabFooterExecutor totalExecutor=new CrosstabFooterExecutor(this);
            children.add(totalExecutor);
          }
          endOfGroups=true;
          return currentChild < children.size();
        }
        if (rowCursor.next()) {
          collectExecutable();
          return currentChild < children.size();
        }
      }
    }
 catch (    OLAPException e) {
      logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
    }
  }
  return false;
}",0.9434697855750488
70111,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,IQueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap) throws IOException, BirtException, DataException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    ILevelDefn[] levelInHier=null;
    if (hierhandle.getLevelCount() == 1)     levelInHier=new ILevelDefn[1];
 else     levelInHier=new ILevelDefn[hierhandle.getLevelCount() + 1];
    String[] leafLevelKeyColumn=new String[levels.size()];
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelKeys.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn[k]=level.getName();
      levelInHier[k]=CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys));
    }
    createLeafLevel(levels,levelInHier,leafLevelKeyColumn);
    Object rowLimit=appContext.get(DataEngine.MEMORY_DATA_SET_CACHE);
    if (rowLimit != null && !cubeHandle.getDataSet().getName().equals(hierhandle.getDataSet().getName())) {
      appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier,dataEngine.getSession().getStopSign()));
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,rowLimit);
    }
 else {
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier,dataEngine.getSession().getStopSign()));
    }
  }
  return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,IQueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap) throws IOException, BirtException, DataException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    ILevelDefn[] levelInHier=null;
    if (hierhandle.getLevelCount() == 1)     levelInHier=new ILevelDefn[1];
 else     levelInHier=new ILevelDefn[hierhandle.getLevelCount() + 1];
    String[] leafLevelKeyColumn=new String[levels.size()];
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelKeys.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn[k]=level.getName();
      levelInHier[k]=CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys));
    }
    createLeafLevel(levels,levelInHier,leafLevelKeyColumn);
    Object rowLimit=appContext.get(DataEngine.MEMORY_DATA_SET_CACHE);
    if (rowLimit != null && !(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
      appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier,dataEngine.getSession().getStopSign()));
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,rowLimit);
    }
 else {
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier,dataEngine.getSession().getStopSign()));
    }
  }
  return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
}",0.9895699908508692
70112,"public CellArea deepClone(){
  CellArea cell=(CellArea)super.deepClone();
  cell.setBoxStyle(new BoxStyle(cell.getBoxStyle()));
  return cell;
}","public CellArea deepClone(){
  CellArea cell=(CellArea)super.deepClone();
  cell.setBoxStyle(new BoxStyle(cell.getBoxStyle()));
  if (getRowSpan() > 1) {
    cell.setHeight(currentBP + getOffsetY() + localProperties.getPaddingBottom());
  }
  return cell;
}",0.6533665835411472
70113,"public void replace(CellArea origin,CellArea dest){
  children.remove(origin);
  children.add(dest);
  dest.setParent(this);
}","public void replace(CellArea origin,CellArea dest){
  int index=children.indexOf(origin);
  if (index >= 0) {
    children.remove(origin);
    children.add(index,dest);
    dest.setParent(this);
  }
}",0.6503067484662577
70114,"protected void _splitSpanCell(int height,boolean force) throws BirtException {
  if (cells.length != children.size()) {
    for (int i=0; i < cells.length; i++) {
      if (cells[i] instanceof DummyCell) {
        SplitResult splitCell=cells[i].split(0,force);
        CellArea cell=(CellArea)splitCell.getResult();
        if (cell != null) {
          cell.setHeight(((DummyCell)cells[i]).getDelta());
          CellArea org=((DummyCell)cells[i]).getCell();
          RowArea row=(RowArea)org.getParent();
          row.replace(org,cell);
          cell.setParent(row);
        }
        i=i + cells[i].getColSpan() - 1;
      }
    }
  }
}","protected void _splitSpanCell(int height,boolean force) throws BirtException {
  if (cells.length != children.size()) {
    for (int i=0; i < cells.length; i++) {
      if (cells[i] instanceof DummyCell) {
        int oh=((DummyCell)cells[i]).getCell().getHeight();
        int ch=((DummyCell)cells[i]).getDelta();
        int rowSpan=((DummyCell)cells[i]).getRowSpan();
        if (ch >= oh) {
          CellArea cell=cells[i].cloneArea();
          cell.setHeight(0);
          cell.setRowSpan(rowSpan);
          cell.setParent(this);
          addChildByColumnId(cell);
        }
 else {
          CellArea cell=cells[i].cloneArea();
          cell.setHeight(0);
          cell.setRowSpan(rowSpan);
          cell.setParent(this);
          addChildByColumnId(cell);
        }
        i=i + cells[i].getColSpan() - 1;
      }
    }
  }
}",0.4881995954146999
70115,"/** 
 * Transfer background for current page to Doc format. Now, the exported file will apply the first background properties, and followed background will ignore. In addition, Since the Word only support fill-in background, the background attach, pos, posX, posY and repeat are not mapped to Word easyly. At present, ignore those properties.
 * @throws IOException
 * @TODO support background properties. attach, pos, posx, posy and repeat.
 */
protected void drawDocumentBackground() throws IOException {
  IStyle style=previousPage.getComputedStyle();
  String backgroundColor=style.getBackgroundColor();
  String backgroundImageUrl=EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign());
  wordWriter.drawDocumentBackground(backgroundColor,backgroundImageUrl);
}","/** 
 * Transfer background for current page to Doc format. Now, the exported file will apply the first background properties, and followed background will ignore. In addition, Since the Word only support fill-in background, the background attach, pos, posX, posY and repeat are not mapped to Word easyly. At present, ignore those properties.
 * @throws IOException
 * @TODO support background properties. attach, pos, posx, posy and repeat.
 */
protected void drawDocumentBackground() throws IOException {
  IStyle style=previousPage.getComputedStyle();
  String backgroundColor=style.getBackgroundColor();
  String backgroundImageUrl=EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign());
  String height=style.getBackgroundHeight();
  String width=style.getBackgroundWidth();
  wordWriter.drawDocumentBackground(backgroundColor,backgroundImageUrl,height,width);
}",0.9403425871234496
70116,"private void writeHeaderFooter() throws IOException, BirtException {
  if (previousPage.getPageHeader() != null) {
    SimpleMasterPageDesign master=(SimpleMasterPageDesign)previousPage.getGenerateBy();
    wordWriter.startHeader(!master.isShowHeaderOnFirst(),headerHeight,contentWidth);
    contentVisitor.visitChildren(previousPage.getPageHeader(),null);
    wordWriter.endHeader();
  }
  if (previousPage.getPageFooter() != null) {
    wordWriter.startFooter(footerHeight,contentWidth);
    contentVisitor.visitChildren(previousPage.getPageFooter(),null);
    wordWriter.endFooter();
  }
}","private void writeHeaderFooter() throws IOException, BirtException {
  IStyle style=previousPage.getComputedStyle();
  String backgroundHeight=style.getBackgroundHeight();
  String backgroundWidth=style.getBackgroundWidth();
  if (previousPage.getPageHeader() != null || backgroundHeight != null || backgroundWidth != null) {
    SimpleMasterPageDesign master=(SimpleMasterPageDesign)previousPage.getGenerateBy();
    wordWriter.startHeader(!master.isShowHeaderOnFirst(),headerHeight,contentWidth);
    if (backgroundHeight != null || backgroundWidth != null) {
      String backgroundImageUrl=EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign());
      wordWriter.drawDocumentBackgroundImage(backgroundImageUrl,backgroundHeight,backgroundWidth,WordUtil.twipToPt(topMargin),WordUtil.twipToPt(leftMargin),WordUtil.twipToPt(pageHeight),WordUtil.twipToPt(pageWidth));
    }
    contentVisitor.visitChildren(previousPage.getPageHeader(),null);
    wordWriter.endHeader();
  }
  if (previousPage.getPageFooter() != null) {
    wordWriter.startFooter(footerHeight,contentWidth);
    contentVisitor.visitChildren(previousPage.getPageFooter(),null);
    wordWriter.endFooter();
  }
}",0.5113952195664258
70117,"void drawDocumentBackground(String backgroundColor,String backgroundImageUrl) throws IOException ;","void drawDocumentBackground(String backgroundColor,String backgroundImageUrl,String backgrounHeight,String backgroundWidth) throws IOException ;",0.8099173553719008
70118,"private void writeHiddenProperty(){
  writer.openTag(""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","public void writeHiddenProperty(){
  writer.openTag(""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.972644376899696
70119,"public void drawDocumentBackground(String bgcolor,String backgroundImageUrl){
  writer.openTag(""String_Node_Str"");
  if (backgroundImageUrl != null) {
    byte[] backgroundImageData=EmitterUtil.getImageData(backgroundImageUrl);
    drawDocumentBackgroundImage(backgroundImageData);
  }
 else   drawDocumentBackgroundColor(bgcolor);
  writer.closeTag(""String_Node_Str"");
}","public void drawDocumentBackground(String bgcolor,String backgroundImageUrl,String backgroundHeight,String backgroundWidth){
  writer.openTag(""String_Node_Str"");
  if (backgroundImageUrl != null && backgroundHeight == null && backgroundWidth == null) {
    byte[] backgroundImageData=EmitterUtil.getImageData(backgroundImageUrl);
    drawDocumentBackgroundImage(backgroundImageData);
  }
 else   drawDocumentBackgroundColor(bgcolor);
  writer.closeTag(""String_Node_Str"");
}",0.8791469194312796
70120,"/** 
 * Get the padding of the current element.
 * @param retValue The padding value of the current element.
 * @return The padding's new value of the current element.
 */
public Insets getPadding(Insets retValue){
  if (retValue == null) {
    retValue=new Insets();
  }
 else {
    retValue=new Insets(retValue);
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  DimensionValue dimensionValue=(DimensionValue)getHandle().getProperty(StyleHandle.PADDING_TOP_PROP);
  double px=DEUtil.convertToPixel(dimensionValue,fontSize);
  dimensionValue=(DimensionValue)getHandle().getProperty(StyleHandle.PADDING_BOTTOM_PROP);
  double py=DEUtil.convertToPixel(dimensionValue,fontSize);
  retValue.top=(int)px;
  retValue.bottom=(int)py;
  dimensionValue=(DimensionValue)getHandle().getProperty(StyleHandle.PADDING_LEFT_PROP);
  px=DEUtil.convertToPixel(dimensionValue,fontSize);
  dimensionValue=(DimensionValue)getHandle().getProperty(StyleHandle.PADDING_RIGHT_PROP);
  py=DEUtil.convertToPixel(dimensionValue,fontSize);
  retValue.left=(int)px;
  retValue.right=(int)py;
  return retValue;
}","/** 
 * Get the padding of the current element.
 * @param retValue The padding value of the current element.
 * @return The padding's new value of the current element.
 */
public Insets getPadding(Insets retValue){
  return DEUtil.getPadding(getHandle(),retValue);
}",0.3568281938325991
70121,"protected IFigure createFigure(){
  ReportRootFigure figure=new ReportRootFigure();
  figure.setOpaque(true);
  figure.setShowMargin(showMargin);
  ReportDesignLayout layout=new ReportDesignLayout(this);
  Dimension size=DEFAULTSIZE;
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  layout.setInitSize(bounds);
  figure.setLayoutManager(layout);
  figure.setBorder(new ReportDesignMarginBorder(INSETS));
  figure.setBounds(bounds.getCopy());
  return figure;
}","protected IFigure createFigure(){
  ReportRootFigure figure=new ReportRootFigure();
  figure.setOpaque(true);
  figure.setShowMargin(showMargin);
  ReportDesignLayout layout=new ReportDesignLayout(this);
  Dimension size=DEFAULTSIZE;
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  layout.setInitSize(bounds);
  figure.setLayoutManager(layout);
  ReportDesignMarginBorder border=new ReportDesignMarginBorder(INSETS);
  border.reInitStyle();
  figure.setBorder(border);
  figure.setBounds(bounds.getCopy());
  return figure;
}",0.9069767441860463
70122,"/** 
 * Constructor
 * @param insets
 */
public ReportDesignMarginBorder(Insets insets){
  super(insets);
}","/** 
 * Constructor
 * @param insets
 */
public ReportDesignMarginBorder(Insets insets){
  setMarginInsets(insets);
}",0.9375
70123,"public void refreshFigure(){
  int color=getBackgroundColor((MasterPageHandle)getModel());
  getFigure().setBackgroundColor(getBackGroundColor(color));
  Dimension size=getMasterPageSize((MasterPageHandle)getModel());
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ReportDesignMarginBorder reportDesignMarginBorder=new ReportDesignMarginBorder(getMasterPageInsets((MasterPageHandle)getModel()));
  reportDesignMarginBorder.setBackgroundColor(((MasterPageHandle)getModel()).getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue());
  getFigure().setBorder(reportDesignMarginBorder);
  refreshBackground((MasterPageHandle)getModel());
}","public void refreshFigure(){
  int color=getBackgroundColor((MasterPageHandle)getModel());
  getFigure().setBackgroundColor(getBackGroundColor(color));
  Dimension size=getMasterPageSize((MasterPageHandle)getModel());
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
  ReportDesignMarginBorder reportDesignMarginBorder=new ReportDesignMarginBorder(getMasterPageInsets((MasterPageHandle)getModel()));
  reportDesignMarginBorder.setBackgroundColor(((MasterPageHandle)getModel()).getPropertyHandle(StyleHandle.BACKGROUND_COLOR_PROP).getIntValue());
  refreshMarginBorder(reportDesignMarginBorder);
  refreshBackground((MasterPageHandle)getModel());
}",0.9813084112149532
70124,"protected void paintFigure(Graphics graphics){
  super.paintFigure(graphics);
  graphics.setForegroundColor(ReportColorConstants.MarginBorderColor);
  graphics.drawRectangle(getBounds().getCopy().crop(getBorder().getInsets(this)).crop(DEFAULT_CROP));
  graphics.setForegroundColor(ReportColorConstants.ReportForeground);
  graphics.drawRectangle(getBounds().getCopy().crop(new Insets(0,0,1,1)));
}","protected void paintFigure(Graphics graphics){
  graphics.fillRectangle(getBounds());
  super.paintFigure(graphics);
  graphics.setForegroundColor(ReportColorConstants.ReportForeground);
  graphics.drawRectangle(getBounds().getCopy().crop(new Insets(0,0,1,1)));
}",0.6060606060606061
70125,"protected IFigure createFigure(){
  Figure figure=new ReportElementFigure(){
    protected void paintBorder(    Graphics graphics){
    }
    protected void paintFigure(    Graphics graphics){
      super.paintFigure(graphics);
      graphics.setForegroundColor(ReportColorConstants.MarginBorderColor);
      graphics.drawRectangle(getBounds().getCopy().crop(getBorder().getInsets(this)).crop(DEFAULT_CROP));
      graphics.setForegroundColor(ReportColorConstants.ReportForeground);
      graphics.drawRectangle(getBounds().getCopy().crop(new Insets(0,0,1,1)));
    }
    protected void paintChildren(    Graphics graphics){
      IFigure child;
      for (int i=0; i < this.getChildren().size(); i++) {
        child=(IFigure)this.getChildren().get(i);
        if (child.isVisible()) {
          graphics.setClip(getBounds().getCopy().intersect(child.getBounds()));
          child.paint(graphics);
          graphics.restoreState();
        }
      }
    }
    protected IFigure findDescendantAtExcluding(    int x,    int y,    TreeSearch search){
      PRIVATE_POINT.setLocation(x,y);
      translateFromParent(PRIVATE_POINT);
      if (!getBounds().contains(PRIVATE_POINT))       return null;
      IFigure fig;
      for (int i=getChildren().size(); i > 0; ) {
        i--;
        fig=(IFigure)getChildren().get(i);
        if (fig.isVisible()) {
          fig=fig.findFigureAt(PRIVATE_POINT.x,PRIVATE_POINT.y,search);
          if (fig != null)           return fig;
        }
      }
      return null;
    }
  }
;
  figure.setOpaque(true);
  MasterPageLayout layout=new MasterPageLayout(this);
  MasterPageHandle masterPageHandle=(MasterPageHandle)getModel();
  Dimension size=getMasterPageSize(masterPageHandle);
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  layout.setInitSize(bounds);
  figure.setLayoutManager(layout);
  figure.setBorder(new ReportDesignMarginBorder(getMasterPageInsets((MasterPageHandle)getModel())));
  figure.setBounds(bounds.getCopy());
  return figure;
}","protected IFigure createFigure(){
  Figure figure=new ReportElementFigure(){
    protected void paintFigure(    Graphics graphics){
      graphics.fillRectangle(getBounds());
      super.paintFigure(graphics);
      graphics.setForegroundColor(ReportColorConstants.ReportForeground);
      graphics.drawRectangle(getBounds().getCopy().crop(new Insets(0,0,1,1)));
    }
    protected void paintChildren(    Graphics graphics){
      IFigure child;
      for (int i=0; i < this.getChildren().size(); i++) {
        child=(IFigure)this.getChildren().get(i);
        if (child.isVisible()) {
          graphics.setClip(getBounds().getCopy().intersect(child.getBounds()));
          child.paint(graphics);
          graphics.restoreState();
        }
      }
    }
    protected IFigure findDescendantAtExcluding(    int x,    int y,    TreeSearch search){
      PRIVATE_POINT.setLocation(x,y);
      translateFromParent(PRIVATE_POINT);
      if (!getBounds().contains(PRIVATE_POINT))       return null;
      IFigure fig;
      for (int i=getChildren().size(); i > 0; ) {
        i--;
        fig=(IFigure)getChildren().get(i);
        if (fig.isVisible()) {
          fig=fig.findFigureAt(PRIVATE_POINT.x,PRIVATE_POINT.y,search);
          if (fig != null)           return fig;
        }
      }
      return null;
    }
  }
;
  figure.setOpaque(true);
  MasterPageLayout layout=new MasterPageLayout(this);
  MasterPageHandle masterPageHandle=(MasterPageHandle)getModel();
  Dimension size=getMasterPageSize(masterPageHandle);
  Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
  layout.setInitSize(bounds);
  figure.setLayoutManager(layout);
  figure.setBorder(new ReportDesignMarginBorder(getMasterPageInsets((MasterPageHandle)getModel())));
  figure.setBounds(bounds.getCopy());
  return figure;
}",0.9000782676754501
70126,"/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ExtendedItemHandle handle=getExtendedItemHandle();
  ReportItemConstraint constraint=new ReportItemConstraint();
  String type=handle.getPrivateStyle().getDisplay();
  if (type == null || DesignChoiceConstants.DISPLAY_NONE.equals(type)) {
    type=DesignChoiceConstants.DISPLAY_BLOCK;
  }
  constraint.setDisplay(type);
  constraint.setMargin(getModelAdapter().getMargin(null));
  return constraint;
}","/** 
 * @return The constraint
 */
protected Object getConstraint(){
  ExtendedItemHandle handle=getExtendedItemHandle();
  ReportItemConstraint constraint=new ReportItemConstraint();
  String type=handle.getPrivateStyle().getDisplay();
  if (type == null || DesignChoiceConstants.DISPLAY_NONE.equals(type)) {
    type=DesignChoiceConstants.DISPLAY_BLOCK;
  }
  constraint.setDisplay(type);
  constraint.setMargin(getModelAdapter().getMargin(null));
  DimensionHandle value=handle.getWidth();
  constraint.setMeasure(value.getMeasure());
  constraint.setUnits(value.getUnits());
  return constraint;
}",0.8797763280521901
70127,"public void testMultipleAggregation1() throws IOException, DataException {
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortTypes=new int[]{0,0};
  AggregationFunctionDefinition[] aggregationFunctions=new AggregationFunctionDefinition[1];
  aggregationFunctions[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_RANK_FUNC);
  aggregationFunctions[0].setParaValue(""String_Node_Str"");
  DimLevel[] dimLevels=new DimLevel[]{this.dimLevels[0],this.dimLevels[2]};
  aggregations[0]=new AggregationDefinition(dimLevels,sortTypes,aggregationFunctions);
  dimLevels=new DimLevel[]{this.dimLevels[0],this.dimLevels[1]};
  aggregations[1]=new AggregationDefinition(dimLevels,sortTypes,aggregationFunctions);
  IAggregationResultSet[] resultSets=AggregationHelper.getInstance().execute(aggregationResultSet,aggregations,new StopSign());
  assertEquals(resultSets[0].length(),16);
  assertEquals(resultSets[0].getAggregationCount(),1);
  assertEquals(resultSets[0].getAggregationDataType(0),DataType.INTEGER_TYPE);
  assertEquals(resultSets[0].getAllLevels().length,4);
  assertEquals(resultSets[0].getLevel(0),this.dimLevels[0]);
  assertEquals(resultSets[0].getLevel(1),this.dimLevels[1]);
  assertEquals(resultSets[0].getLevel(2),this.dimLevels[2]);
  assertEquals(resultSets[0].getLevel(3),this.dimLevels[3]);
  assertEquals(resultSets[0].getLevelKeyColCount(0),1);
  assertEquals(resultSets[0].getLevelKeyColCount(1),1);
  Object[][] fieldValues=new Object[][]{{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(110),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(120),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(60),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(3),new Double(300),new Integer(5)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(4),new Double(150),new Integer(4)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(5),new Double(120),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(6),new Double(120),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(100),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(150),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(3),new Double(110),new Integer(3)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(60),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(300),new Integer(5)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(100),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(210),new Integer(4)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(45),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(243),new Integer(2)}};
  for (int i=0; i < fieldValues.length; i++) {
    resultSets[0].seek(i);
    for (int j=0; j < 4; j++) {
      assertEquals(resultSets[0].getLevelKeyValue(j)[0],fieldValues[i][j]);
    }
    assertEquals(resultSets[0].getAggregationValue(0),fieldValues[i][5]);
  }
  assertEquals(resultSets[1].length(),16);
  assertEquals(resultSets[0].getAggregationCount(),1);
  assertEquals(resultSets[0].getAggregationDataType(0),DataType.INTEGER_TYPE);
  assertEquals(resultSets[0].getAllLevels().length,4);
  assertEquals(resultSets[1].getLevel(0),this.dimLevels[0]);
  assertEquals(resultSets[1].getLevel(1),this.dimLevels[1]);
  assertEquals(resultSets[1].getLevelKeyColCount(0),1);
  assertEquals(resultSets[1].getLevelKeyColCount(1),1);
  fieldValues=new Object[][]{{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(110),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(120),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(60),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(3),new Double(300),new Integer(5)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(4),new Double(150),new Integer(4)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(5),new Double(120),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(6),new Double(120),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(100),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(150),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(3),new Double(110),new Integer(3)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(60),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(300),new Integer(5)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(100),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(210),new Integer(4)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(45),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(243),new Integer(2)}};
  for (int i=0; i < fieldValues.length; i++) {
    resultSets[0].seek(i);
    for (int j=0; j < 4; j++) {
      assertEquals(resultSets[0].getLevelKeyValue(j)[0],fieldValues[i][j]);
    }
    assertEquals(resultSets[0].getAggregationValue(0),fieldValues[i][5]);
  }
}","public void testMultipleAggregation1() throws IOException, DataException {
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortTypes=new int[]{0,0};
  AggregationFunctionDefinition[] aggregationFunctions=new AggregationFunctionDefinition[1];
  aggregationFunctions[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_RANK_FUNC);
  DimLevel[] dimLevels=new DimLevel[]{this.dimLevels[0],this.dimLevels[2]};
  aggregations[0]=new AggregationDefinition(dimLevels,sortTypes,aggregationFunctions);
  dimLevels=new DimLevel[]{this.dimLevels[0],this.dimLevels[1]};
  aggregations[1]=new AggregationDefinition(dimLevels,sortTypes,aggregationFunctions);
  IAggregationResultSet[] resultSets=AggregationHelper.getInstance().execute(aggregationResultSet,aggregations,new StopSign());
  assertEquals(resultSets[0].length(),16);
  assertEquals(resultSets[0].getAggregationCount(),1);
  assertEquals(resultSets[0].getAggregationDataType(0),DataType.INTEGER_TYPE);
  assertEquals(resultSets[0].getAllLevels().length,4);
  assertEquals(resultSets[0].getLevel(0),this.dimLevels[0]);
  assertEquals(resultSets[0].getLevel(1),this.dimLevels[1]);
  assertEquals(resultSets[0].getLevel(2),this.dimLevels[2]);
  assertEquals(resultSets[0].getLevel(3),this.dimLevels[3]);
  assertEquals(resultSets[0].getLevelKeyColCount(0),1);
  assertEquals(resultSets[0].getLevelKeyColCount(1),1);
  Object[][] fieldValues=new Object[][]{{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(110),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(120),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(60),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(3),new Double(300),new Integer(5)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(4),new Double(150),new Integer(4)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(5),new Double(120),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(6),new Double(120),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(100),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(150),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(3),new Double(110),new Integer(3)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(60),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(300),new Integer(5)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(100),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(210),new Integer(4)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(45),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(243),new Integer(2)}};
  for (int i=0; i < fieldValues.length; i++) {
    resultSets[0].seek(i);
    for (int j=0; j < 4; j++) {
      assertEquals(resultSets[0].getLevelKeyValue(j)[0],fieldValues[i][j]);
    }
    assertEquals(resultSets[0].getAggregationValue(0),fieldValues[i][5]);
  }
  assertEquals(resultSets[1].length(),16);
  assertEquals(resultSets[0].getAggregationCount(),1);
  assertEquals(resultSets[0].getAggregationDataType(0),DataType.INTEGER_TYPE);
  assertEquals(resultSets[0].getAllLevels().length,4);
  assertEquals(resultSets[1].getLevel(0),this.dimLevels[0]);
  assertEquals(resultSets[1].getLevel(1),this.dimLevels[1]);
  assertEquals(resultSets[1].getLevelKeyColCount(0),1);
  assertEquals(resultSets[1].getLevelKeyColCount(1),1);
  fieldValues=new Object[][]{{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(110),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(120),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(60),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(3),new Double(300),new Integer(5)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(4),new Double(150),new Integer(4)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(5),new Double(120),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(6),new Double(120),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(100),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(150),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(3),new Double(110),new Integer(3)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(60),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(300),new Integer(5)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(100),new Integer(2)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(210),new Integer(4)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(1),new Double(45),new Integer(1)},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Integer(2),new Double(243),new Integer(2)}};
  for (int i=0; i < fieldValues.length; i++) {
    resultSets[0].seek(i);
    for (int j=0; j < 4; j++) {
      assertEquals(resultSets[0].getLevelKeyValue(j)[0],fieldValues[i][j]);
    }
    assertEquals(resultSets[0].getAggregationValue(0),fieldValues[i][5]);
  }
}",0.994909843844362
70128,"/** 
 * @param function
 * @param row
 * @param funcIndex
 * @return
 */
protected Object[] getAccumulatorParameter(AggregationFunctionDefinition function,IAggregationResultRow row,int funcIndex){
  Object[] parameters=null;
  if (paraInfo[funcIndex] == null || paraInfo[funcIndex].getLevelIndex() == -1) {
    if (function.getParaValue() == null) {
      parameters=new Object[1];
      if (measureIndexes[funcIndex] < 0) {
        return null;
      }
 else {
        parameters[0]=row.getAggregationValues()[measureIndexes[funcIndex]];
      }
    }
 else {
      parameters=new Object[2];
      parameters[1]=function.getParaValue();
      if (measureIndexes[funcIndex] >= 0) {
        parameters[0]=row.getAggregationValues()[measureIndexes[funcIndex]];
      }
    }
  }
 else {
    parameters=new Object[2];
    if (measureIndexes[funcIndex] < 0) {
      parameters[0]=null;
    }
 else {
      parameters[0]=row.getAggregationValues()[measureIndexes[funcIndex]];
    }
    Member member=row.getLevelMembers()[paraInfo[funcIndex].getLevelIndex()];
    if (paraInfo[funcIndex].isKey()) {
      parameters[1]=member.getKeyValues()[paraInfo[funcIndex].getColumnIndex()];
    }
 else {
      parameters[1]=member.getAttributes()[paraInfo[funcIndex].getColumnIndex()];
    }
  }
  return parameters;
}","/** 
 * @param function
 * @param row
 * @param funcIndex
 * @return
 * @throws DataException 
 */
protected Object[] getAccumulatorParameter(AggregationFunctionDefinition function,IAggregationResultRow row,int funcIndex) throws DataException {
  Object[] parameters=null;
  if (paraInfo[funcIndex] == null || paraInfo[funcIndex].getLevelIndex() == -1) {
    if (getParaNum(funcIndex) <= 1) {
      parameters=new Object[1];
      if (measureIndexes[funcIndex] < 0) {
        return null;
      }
 else {
        parameters[0]=row.getAggregationValues()[measureIndexes[funcIndex]];
      }
    }
 else {
      parameters=new Object[2];
      parameters[1]=function.getParaValue();
      if (measureIndexes[funcIndex] >= 0) {
        parameters[0]=row.getAggregationValues()[measureIndexes[funcIndex]];
      }
    }
  }
 else {
    parameters=new Object[2];
    if (measureIndexes[funcIndex] < 0) {
      parameters[0]=null;
    }
 else {
      parameters[0]=row.getAggregationValues()[measureIndexes[funcIndex]];
    }
    Member member=row.getLevelMembers()[paraInfo[funcIndex].getLevelIndex()];
    if (paraInfo[funcIndex].isKey()) {
      parameters[1]=member.getKeyValues()[paraInfo[funcIndex].getColumnIndex()];
    }
 else {
      parameters[1]=member.getAttributes()[paraInfo[funcIndex].getColumnIndex()];
    }
  }
  return parameters;
}",0.9656474141185352
70129,"protected Dimension getChildSize(IFigure child,int wHint,int hHint){
  ReportItemConstraint constraint=(ReportItemConstraint)getConstraint(child);
  Dimension preferredDimension;
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
    preferredDimension=((IFixLayoutHelper)child).getFixPreferredSize(wHint,hHint);
    if (constraint != null) {
      Dimension dimension=constraint.getSize();
      if (dimension.width <= 0) {
        if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
          preferredDimension.width=(int)constraint.getMeasure() * wHint / 100;
        }
      }
    }
    constraint=null;
  }
 else {
    preferredDimension=child.getPreferredSize(wHint,hHint);
  }
  if (constraint != null && !constraint.isFitContiner()) {
    if (constraint.isNone()) {
      return new Dimension(0,0);
    }
    Dimension dimension=constraint.getSize();
    if (dimension.height <= 0) {
      dimension.height=preferredDimension.height;
    }
    if (dimension.width <= 0) {
      if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
        dimension.width=(int)constraint.getMeasure() * wHint / 100;
      }
 else {
        dimension.width=preferredDimension.width;
      }
    }
    return dimension;
  }
 else {
    return preferredDimension;
  }
}","protected Dimension getChildSize(IFigure child,int wHint,int hHint){
  updateChild(child,wHint);
  ReportItemConstraint constraint=(ReportItemConstraint)getConstraint(child);
  Dimension preferredDimension;
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
    preferredDimension=((IFixLayoutHelper)child).getFixPreferredSize(wHint,hHint);
    if (constraint != null) {
      Dimension dimension=constraint.getSize();
      if (dimension.width <= 0) {
        if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
          preferredDimension.width=(int)constraint.getMeasure() * wHint / 100;
        }
      }
    }
    constraint=null;
  }
 else {
    preferredDimension=child.getPreferredSize(wHint,hHint);
  }
  if (constraint != null && !constraint.isFitContiner()) {
    if (constraint.isNone()) {
      return new Dimension(0,0);
    }
    Dimension dimension=constraint.getSize();
    if (dimension.height <= 0) {
      dimension.height=preferredDimension.height;
    }
    if (dimension.width <= 0) {
      if (constraint.getMeasure() != 0 && DesignChoiceConstants.UNITS_PERCENTAGE.equals(constraint.getUnits())) {
        dimension.width=(int)constraint.getMeasure() * wHint / 100;
      }
 else {
        dimension.width=preferredDimension.width;
      }
    }
    return dimension;
  }
 else {
    return preferredDimension;
  }
}",0.9904306220095692
70130,"protected Dimension calculateMinimumSize(IFigure container,int wHint,int hHint){
  if (wHint > -1)   wHint=Math.max(0,wHint - container.getInsets().getWidth());
  if (hHint > -1)   hHint=Math.max(0,hHint - container.getInsets().getHeight());
  int maxWidth;
  maxWidth=wHint;
  hHint=-1;
  if (maxWidth < 0) {
    maxWidth=Integer.MAX_VALUE;
  }
  Dimension prefSize=new Dimension();
  List children=container.getChildren();
  int width=0;
  int height=0;
  IFigure child;
  IFigure lastChild=null;
  Dimension childSize;
  for (int i=0; i < children.size(); i++) {
    child=(IFigure)children.get(i);
    Insets fmargin=getFigureMargin(child);
    if (wHint != -1) {
      wHint=Math.max(0,wHint - fmargin.getWidth());
    }
    if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
      int display=ReportItemConstraint.BLOCK;
      display=getDisplay(child);
      if (display == ReportItemConstraint.INLINE && child instanceof LabelFigure && (lastChild != null && getDisplay(lastChild) == ReportItemConstraint.INLINE)) {
        childSize=((IFixLayoutHelper)child).getFixMinimumSize(wHint - width - getMinorSpacing() <= 0 ? -1 : wHint - width - getMinorSpacing(),hHint);
      }
 else {
        childSize=((IFixLayoutHelper)child).getFixMinimumSize(wHint,hHint);
      }
    }
 else {
      childSize=child.getMinimumSize(wHint,hHint);
    }
    if (i == 0) {
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
 else     if ((getDisplay(child) == ReportItemConstraint.NONE)) {
    }
 else     if ((width + childSize.width + fmargin.getWidth()+ getMinorSpacing() <= maxWidth) && ((getDisplay(child) == ReportItemConstraint.INLINE) && (getDisplay(lastChild) == ReportItemConstraint.INLINE))) {
      width+=childSize.width + fmargin.getWidth() + getMinorSpacing();
      height=Math.max(height,childSize.height + fmargin.getHeight());
    }
 else {
      prefSize.height+=height + getMajorSpacing();
      prefSize.width=Math.max(prefSize.width,width);
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
    lastChild=child;
  }
  prefSize.height+=height;
  prefSize.width=Math.max(prefSize.width,width);
  prefSize.width+=container.getInsets().getWidth();
  prefSize.height+=container.getInsets().getHeight();
  prefSize.union(getBorderPreferredSize(container));
  return prefSize;
}","protected Dimension calculateMinimumSize(IFigure container,int wHint,int hHint){
  if (wHint > -1)   wHint=Math.max(0,wHint - container.getInsets().getWidth());
  if (hHint > -1)   hHint=Math.max(0,hHint - container.getInsets().getHeight());
  int maxWidth;
  maxWidth=wHint;
  hHint=-1;
  if (maxWidth < 0) {
    maxWidth=Integer.MAX_VALUE;
  }
  Dimension prefSize=new Dimension();
  List children=container.getChildren();
  int width=0;
  int height=0;
  IFigure child;
  IFigure lastChild=null;
  Dimension childSize;
  for (int i=0; i < children.size(); i++) {
    child=(IFigure)children.get(i);
    Insets fmargin=getFigureMargin(child);
    if (wHint != -1) {
      wHint=Math.max(0,wHint - fmargin.getWidth());
    }
    if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(layoutPreference) && child instanceof IFixLayoutHelper) {
      updateChild(child,wHint);
      int display=ReportItemConstraint.BLOCK;
      display=getDisplay(child);
      if (display == ReportItemConstraint.INLINE && child instanceof LabelFigure && (lastChild != null && getDisplay(lastChild) == ReportItemConstraint.INLINE)) {
        childSize=((IFixLayoutHelper)child).getFixMinimumSize(wHint - width - getMinorSpacing() <= 0 ? -1 : wHint - width - getMinorSpacing(),hHint);
      }
 else {
        childSize=((IFixLayoutHelper)child).getFixMinimumSize(wHint,hHint);
      }
    }
 else {
      childSize=child.getMinimumSize(wHint,hHint);
    }
    if (i == 0) {
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
 else     if ((getDisplay(child) == ReportItemConstraint.NONE)) {
    }
 else     if ((width + childSize.width + fmargin.getWidth()+ getMinorSpacing() <= maxWidth) && ((getDisplay(child) == ReportItemConstraint.INLINE) && (getDisplay(lastChild) == ReportItemConstraint.INLINE))) {
      width+=childSize.width + fmargin.getWidth() + getMinorSpacing();
      height=Math.max(height,childSize.height + fmargin.getHeight());
    }
 else {
      prefSize.height+=height + getMajorSpacing();
      prefSize.width=Math.max(prefSize.width,width);
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
    lastChild=child;
  }
  prefSize.height+=height;
  prefSize.width=Math.max(prefSize.width,width);
  prefSize.width+=container.getInsets().getWidth();
  prefSize.height+=container.getInsets().getHeight();
  prefSize.union(getBorderPreferredSize(container));
  return prefSize;
}",0.9935846030473136
70131,"protected void configGraphicalViewer(){
  viewer=new DeferredGraphicalViewer(){
    protected void fireSelectionChanged(){
    }
  }
;
  DeferredGraphicalViewer reportViewer=(DeferredGraphicalViewer)viewer;
  hostShell=new Shell();
  reportViewer.createControl(hostShell);
  reportViewer.setEditDomain(new DefaultEditDomain(null));
  reportViewer.setRootEditPart(new ReportRootEditPart());
  reportViewer.setEditPartFactory(new GraphicalPartFactory());
  reportViewer.setContents(model);
  reportViewer.flush();
}","protected void configGraphicalViewer(){
  viewer=new DeferredGraphicalViewer(){
    protected void fireSelectionChanged(){
    }
  }
;
  DeferredGraphicalViewer reportViewer=(DeferredGraphicalViewer)viewer;
  if (model instanceof ReportDesignHandle) {
    String orientation=((ReportDesignHandle)model).getBidiOrientation();
    if (DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(orientation)) {
      hostShell=new Shell(SWT.RIGHT_TO_LEFT);
    }
 else {
      hostShell=new Shell(SWT.LEFT_TO_RIGHT);
    }
  }
 else {
    hostShell=new Shell();
  }
  reportViewer.createControl(hostShell);
  reportViewer.setEditDomain(new DefaultEditDomain(null));
  reportViewer.setRootEditPart(new ReportRootEditPart());
  reportViewer.setEditPartFactory(new GraphicalPartFactory());
  reportViewer.setContents(model);
  reportViewer.flush();
}",0.6433878157503715
70132,"public void paint(Drawable drawable,Device device,Rectangle region){
  ReportPrintGraphicalViewerOperation op=new ReportPrintGraphicalViewerOperation(viewer,drawable,device,new org.eclipse.draw2d.geometry.Rectangle(region));
  op.run(""String_Node_Str"");
}","public void paint(Drawable drawable,Device device,Rectangle region){
  ReportPrintGraphicalViewerOperation op=new ReportPrintGraphicalViewerOperation(viewer,drawable,device,new org.eclipse.draw2d.geometry.Rectangle(region));
  if (model instanceof ReportDesignHandle) {
    op.setOrientation(((ReportDesignHandle)model).getBidiOrientation());
  }
  op.run(""String_Node_Str"");
}",0.8069620253164557
70133,"/** 
 * @param jobName
 */
public void run(String jobName){
  preparePrintSource();
  printerGC=new GC(getDrawable(),SWT.LEFT_TO_RIGHT);
  printPages();
  restorePrintSource();
  cleanup();
}","/** 
 * @param jobName
 */
public void run(String jobName){
  preparePrintSource();
  if (DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(getOrientation())) {
    printerGC=new GC(getDrawable(),SWT.RIGHT_TO_LEFT);
  }
 else {
    printerGC=new GC(getDrawable(),SWT.LEFT_TO_RIGHT);
  }
  printPages();
  restorePrintSource();
  cleanup();
}",0.720754716981132
70134,"private void paintSpecial(Graphics g,String text,int x,int y,boolean firstBox,boolean rtl,boolean isMirrored){
  Image image=null;
  GC gc=null;
  if (rtl || isMirrored) {
    TextLayout textLayout=BidiUIUtils.INSTANCE.getTextLayout(SWT.LEFT_TO_RIGHT);
    textLayout.setFont(g.getFont());
    if (firstBox && specialPREFIX.length() != 0 && text.indexOf(specialPREFIX) == 0)     textLayout.setText(text.substring(specialPREFIX.length()));
 else     textLayout.setText(text);
    textLayout.setStyle(new TextStyle(g.getFont(),g.getForegroundColor(),TRANSPARENT_COLOR),0,text.length());
    PaletteData paletteData=new PaletteData(new RGB[]{TRANSPARENT_COLOR.getRGB(),g.getForegroundColor().getRGB()});
    ImageData imageData=new ImageData(textLayout.getBounds().width + 1,textLayout.getBounds().height,4,paletteData);
    imageData.transparentPixel=paletteData.getPixel(TRANSPARENT_COLOR.getRGB());
    image=new Image(Display.getCurrent(),imageData);
    gc=new GC(image,rtl ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT);
    textLayout.draw(gc,0,0);
  }
  if (firstBox && specialPREFIX.length() != 0 && text.indexOf(specialPREFIX) == 0) {
    int with=FigureUtilities.getTextWidth(specialPREFIX,g.getFont());
    Color c=g.getForegroundColor();
    g.setForegroundColor(ReportColorConstants.greyFillColor);
    g.drawString(specialPREFIX,x,y);
    g.setForegroundColor(c);
    if (image != null)     g.drawImage(image,x + with,y);
 else     g.drawString(text.substring(specialPREFIX.length()),x + with,y);
  }
 else {
    if (image != null)     g.drawImage(image,x,y);
 else     g.drawString(text,x,y);
  }
  if (gc != null)   gc.dispose();
  if (image != null)   image.dispose();
}","private void paintSpecial(Graphics g,String text,int x,int y,boolean firstBox,boolean rtl,boolean isMirrored){
  Image image=null;
  GC gc=null;
  if (rtl || isMirrored) {
    TextLayout textLayout=BidiUIUtils.INSTANCE.getTextLayout(SWT.LEFT_TO_RIGHT);
    textLayout.setFont(g.getFont());
    if (firstBox && specialPREFIX.length() != 0 && text.indexOf(specialPREFIX) == 0)     textLayout.setText(text.substring(specialPREFIX.length()));
 else     textLayout.setText(text);
    textLayout.setStyle(new TextStyle(g.getFont(),g.getForegroundColor(),TRANSPARENT_COLOR),0,text.length());
    RGB rgbData=g.getForegroundColor().getRGB();
    if (ColorConstants.black.getRGB().equals(rgbData)) {
      rgbData=ColorConstants.buttonDarker.getRGB();
    }
    PaletteData paletteData=new PaletteData(new RGB[]{TRANSPARENT_COLOR.getRGB(),rgbData});
    ImageData imageData=new ImageData(textLayout.getBounds().width + 1,textLayout.getBounds().height,4,paletteData);
    imageData.transparentPixel=paletteData.getPixel(TRANSPARENT_COLOR.getRGB());
    image=new Image(Display.getCurrent(),imageData);
    gc=new GC(image,rtl ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT);
    textLayout.draw(gc,0,0);
  }
  if (firstBox && specialPREFIX.length() != 0 && text.indexOf(specialPREFIX) == 0) {
    int with=FigureUtilities.getTextWidth(specialPREFIX,g.getFont());
    Color c=g.getForegroundColor();
    g.setForegroundColor(ReportColorConstants.greyFillColor);
    g.drawString(specialPREFIX,x,y);
    g.setForegroundColor(c);
    if (image != null)     g.drawImage(image,x + with,y);
 else     g.drawString(text.substring(specialPREFIX.length()),x + with,y);
  }
 else {
    if (image != null)     g.drawImage(image,x,y);
 else     g.drawString(text,x,y);
  }
  if (gc != null)   gc.dispose();
  if (image != null)   image.dispose();
}",0.9422527158376216
70135,"/** 
 * Layouts one row of components. This is done based on the layout's orientation, minor alignment and major alignment.
 * @param parent the parent figure
 * @since 2.0
 */
protected void layoutRow(IFigure parent){
  int majorAdjustment=0;
  int minorAdjustment=0;
  int correctMajorAlignment=majorAlignment;
  int correctMinorAlignment=minorAlignment;
  majorAdjustment=data.area.width - data.rowWidth + getMinorSpacing();
  if (majorAdjustment < 0) {
    if (!parent.isMirrored()) {
      majorAdjustment=0;
    }
  }
 else {
switch (correctMajorAlignment) {
case ALIGN_LEFTTOP:
      majorAdjustment=0;
    break;
case ALIGN_CENTER:
  majorAdjustment/=2;
break;
case ALIGN_RIGHTBOTTOM:
break;
}
}
boolean needVerticalAlign=minorAlignment == ALIGN_CENTER || minorAlignment == ALIGN_RIGHTBOTTOM;
for (int j=data.rowPos; j < data.rowCount; j++) {
if (fill) {
data.bounds[j].height=data.rowHeight;
}
 else {
minorAdjustment=data.rowHeight - data.bounds[j].height;
switch (correctMinorAlignment) {
case ALIGN_LEFTTOP:
minorAdjustment=0;
break;
case ALIGN_CENTER:
minorAdjustment/=2;
break;
case ALIGN_RIGHTBOTTOM:
break;
}
if (minorAdjustment < 0) {
minorAdjustment=0;
}
data.bounds[j].y+=minorAdjustment;
}
data.bounds[j].x+=majorAdjustment;
Rectangle parentArea=parent.getClientArea().getCopy();
if (data.rowY < parentArea.y + parentArea.height && data.rowY + data.rowHeight > parentArea.y + parentArea.height) {
Rectangle rect=data.bounds[j].getCopy();
rect.translate(parentArea.x,parentArea.y);
int distanceHeight=rect.y + rect.height - parentArea.y - parentArea.height;
if (distanceHeight > 0) {
int topDistnceHeight=rect.y - data.rowY - parentArea.y;
if (topDistnceHeight > 0) {
if (distanceHeight > topDistnceHeight) {
data.bounds[j].y=data.bounds[j].y - topDistnceHeight;
}
 else {
if (correctMinorAlignment == ALIGN_CENTER) {
data.bounds[j].y=data.bounds[j].y - minorAdjustment + (topDistnceHeight - distanceHeight) / 2;
}
 else {
data.bounds[j].y=(data.bounds[j].y - minorAdjustment + topDistnceHeight - distanceHeight);
}
}
}
}
 else {
if (correctMinorAlignment == ALIGN_CENTER) {
data.bounds[j].y=data.bounds[j].y - minorAdjustment + (parentArea.height - data.rowY - data.bounds[j].height) / 2;
}
}
}
if (!needVerticalAlign) {
setBoundsOfChild(parent,data.row[j],data.bounds[j].getCopy().crop(data.margin[j]));
}
}
data.rowPos=data.rowCount;
data.rowY+=getMajorSpacing() + data.rowHeight;
postLayoutRow(data);
initRow();
}","/** 
 * Layouts one row of components. This is done based on the layout's orientation, minor alignment and major alignment.
 * @param parent the parent figure
 * @since 2.0
 */
protected void layoutRow(IFigure parent){
  int majorAdjustment=0;
  int minorAdjustment=0;
  int correctMajorAlignment=majorAlignment;
  int correctMinorAlignment=minorAlignment;
  majorAdjustment=data.area.width - data.rowWidth + getMinorSpacing();
  if (majorAdjustment < 0) {
    if (parent instanceof ReportRootFigure || !parent.isMirrored()) {
      majorAdjustment=0;
    }
  }
 else {
switch (correctMajorAlignment) {
case ALIGN_LEFTTOP:
      majorAdjustment=0;
    break;
case ALIGN_CENTER:
  majorAdjustment/=2;
break;
case ALIGN_RIGHTBOTTOM:
break;
}
}
boolean needVerticalAlign=minorAlignment == ALIGN_CENTER || minorAlignment == ALIGN_RIGHTBOTTOM;
for (int j=data.rowPos; j < data.rowCount; j++) {
if (fill) {
data.bounds[j].height=data.rowHeight;
}
 else {
minorAdjustment=data.rowHeight - data.bounds[j].height;
switch (correctMinorAlignment) {
case ALIGN_LEFTTOP:
minorAdjustment=0;
break;
case ALIGN_CENTER:
minorAdjustment/=2;
break;
case ALIGN_RIGHTBOTTOM:
break;
}
if (minorAdjustment < 0) {
minorAdjustment=0;
}
data.bounds[j].y+=minorAdjustment;
}
data.bounds[j].x+=majorAdjustment;
Rectangle parentArea=parent.getClientArea().getCopy();
if (data.rowY < parentArea.y + parentArea.height && data.rowY + data.rowHeight > parentArea.y + parentArea.height) {
Rectangle rect=data.bounds[j].getCopy();
rect.translate(parentArea.x,parentArea.y);
int distanceHeight=rect.y + rect.height - parentArea.y - parentArea.height;
if (distanceHeight > 0) {
int topDistnceHeight=rect.y - data.rowY - parentArea.y;
if (topDistnceHeight > 0) {
if (distanceHeight > topDistnceHeight) {
data.bounds[j].y=data.bounds[j].y - topDistnceHeight;
}
 else {
if (correctMinorAlignment == ALIGN_CENTER) {
data.bounds[j].y=data.bounds[j].y - minorAdjustment + (topDistnceHeight - distanceHeight) / 2;
}
 else {
data.bounds[j].y=(data.bounds[j].y - minorAdjustment + topDistnceHeight - distanceHeight);
}
}
}
}
 else {
if (correctMinorAlignment == ALIGN_CENTER) {
data.bounds[j].y=data.bounds[j].y - minorAdjustment + (parentArea.height - data.rowY - data.bounds[j].height) / 2;
}
}
}
if (!needVerticalAlign) {
setBoundsOfChild(parent,data.row[j],data.bounds[j].getCopy().crop(data.margin[j]));
}
}
data.rowPos=data.rowCount;
data.rowY+=getMajorSpacing() + data.rowHeight;
postLayoutRow(data);
initRow();
}",0.9922606924643584
70136,"public void refreshFigure(){
  StyleHandle style=((DesignElementHandle)getModel()).getPrivateStyle();
  ((LabelFigure)getFigure()).setDirection(getTextDirection());
  ((LabelFigure)getFigure()).setText(getText());
  ((LabelFigure)getFigure()).setFont(getFont());
  ((LabelFigure)getFigure()).setTextUnderline(style.getTextUnderline());
  ((LabelFigure)getFigure()).setTextLineThrough(style.getTextLineThrough());
  ((LabelFigure)getFigure()).setTextOverline(style.getTextOverline());
  ((LabelFigure)getFigure()).setTextAlign(style.getTextAlign());
  ((LabelFigure)getFigure()).setVerticalAlign(style.getVerticalAlign());
  ((LabelFigure)getFigure()).setDisplay(style.getDisplay());
  ((LabelFigure)getFigure()).setRecommendSize(getLabelAdapter().getSize());
  ((AbstractGraphicalEditPart)getParent()).setLayoutConstraint(this,getFigure(),getConstraint());
  ((LabelFigure)getFigure()).setForegroundColor(ColorManager.getColor(getForegroundColor((ReportItemHandle)getModel())));
  refreshBorder((DesignElementHandle)getModel(),new LineBorder());
  Insets pist=getLabelAdapter().getPadding(getFigure().getInsets());
  ((LineBorder)(getFigure().getBorder())).setPaddingInsets(pist);
  if (!hasText())   ((LabelFigure)getFigure()).setForegroundColor(ReportColorConstants.ShadowLineColor);
 else   ((LabelFigure)getFigure()).setForegroundColor(ColorManager.getColor(getForegroundColor((ReportItemHandle)getModel())));
  refreshBackground((DesignElementHandle)getModel());
  refreshMargin();
}","public void refreshFigure(){
  StyleHandle style=((DesignElementHandle)getModel()).getPrivateStyle();
  ((LabelFigure)getFigure()).setDirection(getTextDirection());
  ((LabelFigure)getFigure()).setText(getText());
  ((LabelFigure)getFigure()).setFont(getFont());
  ((LabelFigure)getFigure()).setTextUnderline(style.getTextUnderline());
  ((LabelFigure)getFigure()).setTextLineThrough(style.getTextLineThrough());
  ((LabelFigure)getFigure()).setTextOverline(style.getTextOverline());
  ((LabelFigure)getFigure()).setTextAlign(style.getTextAlign());
  ((LabelFigure)getFigure()).setVerticalAlign(style.getVerticalAlign());
  ((LabelFigure)getFigure()).setDisplay(style.getDisplay());
  ((LabelFigure)getFigure()).setRecommendSize(getLabelAdapter().getSize());
  ((LabelFigure)getFigure()).setFixLayout(isFixLayout());
  ((AbstractGraphicalEditPart)getParent()).setLayoutConstraint(this,getFigure(),getConstraint());
  ((LabelFigure)getFigure()).setForegroundColor(ColorManager.getColor(getForegroundColor((ReportItemHandle)getModel())));
  refreshBorder((DesignElementHandle)getModel(),new LineBorder());
  Insets pist=getLabelAdapter().getPadding(getFigure().getInsets());
  ((LineBorder)(getFigure().getBorder())).setPaddingInsets(pist);
  if (!hasText())   ((LabelFigure)getFigure()).setForegroundColor(ReportColorConstants.ShadowLineColor);
 else   ((LabelFigure)getFigure()).setForegroundColor(ColorManager.getColor(getForegroundColor((ReportItemHandle)getModel())));
  refreshBackground((DesignElementHandle)getModel());
  refreshMargin();
}",0.980883322346737
70137,"public void postValidate(){
  if (DesignChoiceConstants.DISPLAY_BLOCK.equals(display) || DesignChoiceConstants.DISPLAY_INLINE.equals(display)) {
    List list=getFragments();
    FlowBox box;
    int left=Integer.MAX_VALUE, top=left;
    int bottom=Integer.MIN_VALUE;
    for (int i=0; i < list.size(); i++) {
      box=(FlowBox)list.get(i);
      left=Math.min(left,box.getX());
      top=Math.min(top,box.getBaseline() - box.getAscent());
      bottom=Math.max(bottom,box.getBaseline() + box.getDescent());
    }
    setBounds(new Rectangle(left,top,LabelFigure.this.getClientArea().width,Math.max(LabelFigure.this.getClientArea().height,bottom - top)));
    list=getChildren();
    for (int i=0; i < list.size(); i++) {
      ((FlowFigure)list.get(i)).postValidate();
    }
  }
 else {
    super.postValidate();
  }
}","public void postValidate(){
  if (DesignChoiceConstants.DISPLAY_BLOCK.equals(display) || DesignChoiceConstants.DISPLAY_INLINE.equals(display)) {
    List list=getFragments();
    FlowBox box;
    int left=Integer.MAX_VALUE, top=left;
    int bottom=Integer.MIN_VALUE;
    for (int i=0; i < list.size(); i++) {
      box=(FlowBox)list.get(i);
      left=Math.min(left,box.getX());
      top=Math.min(top,box.getBaseline() - box.getAscent());
      bottom=Math.max(bottom,box.getBaseline() + box.getDescent());
    }
    int width=LabelFigure.this.getClientArea().width;
    if (isFixLayout) {
      int maxWidth=calcMaxSegment() - getInsets().getWidth();
      width=Math.max(width,maxWidth);
    }
    setBounds(new Rectangle(left,top,width,Math.max(LabelFigure.this.getClientArea().height,bottom - top)));
    if (isFixLayout()) {
      Figure child=(Figure)getParent();
      Rectangle rect=child.getBounds();
      child.setBounds(new Rectangle(rect.x,rect.y,width,rect.height));
    }
    list=getChildren();
    for (int i=0; i < list.size(); i++) {
      ((FlowFigure)list.get(i)).postValidate();
    }
  }
 else {
    super.postValidate();
  }
}",0.7981744421906694
70138,"/** 
 * Creates a new LabelFigure with a MarginBorder that is the given size and a FlowPage containing a TextFlow with the style WORD_WRAP_HARD.
 * @param borderSize the size of the MarginBorder
 */
public LabelFigure(int borderSize){
  setBorder(new MarginBorder(borderSize));
  label=new TextFlow(){
    public void postValidate(){
      if (DesignChoiceConstants.DISPLAY_BLOCK.equals(display) || DesignChoiceConstants.DISPLAY_INLINE.equals(display)) {
        List list=getFragments();
        FlowBox box;
        int left=Integer.MAX_VALUE, top=left;
        int bottom=Integer.MIN_VALUE;
        for (int i=0; i < list.size(); i++) {
          box=(FlowBox)list.get(i);
          left=Math.min(left,box.getX());
          top=Math.min(top,box.getBaseline() - box.getAscent());
          bottom=Math.max(bottom,box.getBaseline() + box.getDescent());
        }
        setBounds(new Rectangle(left,top,LabelFigure.this.getClientArea().width,Math.max(LabelFigure.this.getClientArea().height,bottom - top)));
        list=getChildren();
        for (int i=0; i < list.size(); i++) {
          ((FlowFigure)list.get(i)).postValidate();
        }
      }
 else {
        super.postValidate();
      }
    }
  }
;
  label.setLayoutManager(new ParagraphTextLayout(label,ParagraphTextLayout.WORD_WRAP_SOFT));
  flowPage=new FlowPage();
  flowPage.add(label);
  setLayoutManager(new StackLayout());
  add(flowPage);
}","/** 
 * Creates a new LabelFigure with a MarginBorder that is the given size and a FlowPage containing a TextFlow with the style WORD_WRAP_HARD.
 * @param borderSize the size of the MarginBorder
 */
public LabelFigure(int borderSize){
  setBorder(new MarginBorder(borderSize));
  label=new TextFlow(){
    public void postValidate(){
      if (DesignChoiceConstants.DISPLAY_BLOCK.equals(display) || DesignChoiceConstants.DISPLAY_INLINE.equals(display)) {
        List list=getFragments();
        FlowBox box;
        int left=Integer.MAX_VALUE, top=left;
        int bottom=Integer.MIN_VALUE;
        for (int i=0; i < list.size(); i++) {
          box=(FlowBox)list.get(i);
          left=Math.min(left,box.getX());
          top=Math.min(top,box.getBaseline() - box.getAscent());
          bottom=Math.max(bottom,box.getBaseline() + box.getDescent());
        }
        int width=LabelFigure.this.getClientArea().width;
        if (isFixLayout) {
          int maxWidth=calcMaxSegment() - getInsets().getWidth();
          width=Math.max(width,maxWidth);
        }
        setBounds(new Rectangle(left,top,width,Math.max(LabelFigure.this.getClientArea().height,bottom - top)));
        if (isFixLayout()) {
          Figure child=(Figure)getParent();
          Rectangle rect=child.getBounds();
          child.setBounds(new Rectangle(rect.x,rect.y,width,rect.height));
        }
        list=getChildren();
        for (int i=0; i < list.size(); i++) {
          ((FlowFigure)list.get(i)).postValidate();
        }
      }
 else {
        super.postValidate();
      }
    }
  }
;
  label.setLayoutManager(new ParagraphTextLayout(label,ParagraphTextLayout.WORD_WRAP_SOFT));
  flowPage=new FlowPage();
  flowPage.add(label);
  setLayoutManager(new StackLayout());
  add(flowPage);
}",0.8630393996247655
70139,"@Override public Dimension getFixMinimumSize(int w,int h){
  int width=0;
  int height=0;
  if (recommendSize.width > 0) {
    width=recommendSize.width;
  }
 else {
    if (recommendSize.height > 0) {
      width=getMinimumSize(w,recommendSize.height,true,false,true).width;
    }
 else {
      width=getMinimumSize(w,h,true,false,false).width;
    }
  }
  if (recommendSize.height > 0) {
    height=recommendSize.height;
  }
 else {
    if (recommendSize.width > 0) {
      height=getMinimumSize(width,h,true,true,false).height;
    }
 else {
      height=getMinimumSize(w,h,true,false,false).height;
    }
  }
  return new Dimension(width,height);
}","@Override public Dimension getFixMinimumSize(int w,int h){
  int width=0;
  int height=0;
  if (recommendSize.width > 0) {
    width=recommendSize.width;
  }
 else {
    if (recommendSize.height > 0) {
      width=getMinimumSize(w,recommendSize.height,true,false,true).width;
    }
 else {
      width=getMinimumSize(w,h,true,false,false).width;
    }
  }
  if (recommendSize.height > 0) {
    height=recommendSize.height;
  }
 else {
    if (recommendSize.width > 0) {
      int maxWidth=calcMaxSegment();
      height=getMinimumSize(Math.max(maxWidth,recommendSize.width),h,true,true,false).height;
    }
 else {
      height=getMinimumSize(w,h,true,false,false).height;
    }
  }
  return new Dimension(width,height);
}",0.851528384279476
70140,"public URL findResource(ModuleHandle moduleHandle,String filename,int type){
  if (path == null || path.equals(""String_Node_Str""))   return null;
  try {
    URL url=new URL(path + filename);
    return url;
  }
 catch (  MalformedURLException mue) {
    mue.printStackTrace();
  }
  return null;
}","public URL findResource(ModuleHandle moduleHandle,String fileName,int type,Map appContext){
  return null;
}",0.4532019704433497
70141,"@Override public Dimension getFixPreferredSize(int w,int h){
  int width=0;
  int height=0;
  if (recommendSize.width > 0) {
    width=recommendSize.width;
  }
 else {
    if (recommendSize.height > 0) {
      width=getPreferredSize(w,recommendSize.height,true,false,true).width;
    }
 else {
      width=getPreferredSize(w,h,true,false,false).width;
    }
  }
  if (recommendSize.height > 0) {
    height=recommendSize.height;
  }
 else {
    if (recommendSize.width > 0) {
      height=getPreferredSize(width,h,true,true,false).height;
    }
 else {
      height=getPreferredSize(w,h,true,false,false).height;
    }
  }
  return new Dimension(width,height);
}","@Override public Dimension getFixPreferredSize(int w,int h){
  int width=0;
  int height=0;
  if (recommendSize.width > 0) {
    width=recommendSize.width;
  }
 else {
    if (recommendSize.height > 0) {
      width=getPreferredSize(w,recommendSize.height,true,false,true).width;
    }
 else {
      width=getPreferredSize(w,h,true,false,false).width;
    }
  }
  if (recommendSize.height > 0) {
    height=recommendSize.height;
  }
 else {
    if (recommendSize.width > 0) {
      int maxWidth=calcMaxSegment();
      height=getPreferredSize(Math.max(maxWidth,recommendSize.width),h,true,true,false).height;
    }
 else {
      height=getPreferredSize(w,h,true,false,false).height;
    }
  }
  return new Dimension(width,height);
}",0.9426111908177904
70142,"protected IContentEmitter createContentEmitter() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  pagination=extManager.getPagination(emitterID);
  IRenderOption executionRenderOptions=executionContext.getRenderOption();
  if (!executionRenderOptions.hasOption(IRenderOption.OUTPUT_DISPLAY_NONE)) {
    Boolean outputDisplayNone=extManager.getOutputDisplayNone(emitterID);
    executionRenderOptions.setOption(IRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
  }
  if (!executionRenderOptions.hasOption(IRenderOption.SUPPORTED_IMAGE_FORMATS)) {
    String supportedImageFormats=extManager.getSupportedImageFormats(emitterID);
    executionRenderOptions.setOption(IRenderOption.SUPPORTED_IMAGE_FORMATS,supportedImageFormats);
  }
  IContentEmitter emitter=null;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format);
  }
  return emitter;
}","protected IContentEmitter createContentEmitter() throws EngineException {
  ExtensionManager extManager=ExtensionManager.getInstance();
  pagination=extManager.getPagination(emitterID);
  IRenderOption executionRenderOptions=executionContext.getRenderOption();
  if (!renderOptions.hasOption(IRenderOption.OUTPUT_DISPLAY_NONE)) {
    Boolean outputDisplayNone=extManager.getOutputDisplayNone(emitterID);
    renderOptions.setOption(IRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
    executionRenderOptions.setOption(IRenderOption.OUTPUT_DISPLAY_NONE,outputDisplayNone);
  }
  if (!renderOptions.hasOption(IRenderOption.SUPPORTED_IMAGE_FORMATS)) {
    String supportedImageFormats=extManager.getSupportedImageFormats(emitterID);
    renderOptions.setOption(IRenderOption.SUPPORTED_IMAGE_FORMATS,supportedImageFormats);
    executionRenderOptions.setOption(IRenderOption.SUPPORTED_IMAGE_FORMATS,supportedImageFormats);
  }
  IContentEmitter emitter=null;
  try {
    emitter=extManager.createEmitter(format,emitterID);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format,t);
  }
  if (emitter == null) {
    log.log(Level.SEVERE,""String_Node_Str"",format);
    throw new EngineException(MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION,format);
  }
  return emitter;
}",0.9183206106870228
70143,"protected boolean isNullValue(CSSValue value){
  if (value == null) {
    return true;
  }
  String cssText=value.getCssText();
  return ""String_Node_Str"".equalsIgnoreCase(cssText) || ""String_Node_Str"".equalsIgnoreCase(cssText);
}","protected boolean isNullValue(CSSValue value){
  if (value == null) {
    return true;
  }
  if (value instanceof DataFormatValue) {
    return true;
  }
  String cssText=value.getCssText();
  return ""String_Node_Str"".equalsIgnoreCase(cssText) || ""String_Node_Str"".equalsIgnoreCase(cssText);
}",0.8795411089866156
70144,"public void setPosition(String pos){
  try {
    levelView.setAggregationHeaderLocation(pos);
  }
 catch (  SemanticException e) {
    e.printStackTrace();
  }
}","public void setPosition(String position){
  try {
    viewHandle.setGrandTotalLocation(position);
  }
 catch (  SemanticException e) {
  }
}",0.7840531561461794
70145,"public GrandTotalInfo copy(){
  GrandTotalInfo retValue=new GrandTotalInfo();
  retValue.setAggregationOn(isAggregationOn());
  retValue.setFunction(getFunction());
  retValue.setMeasureQualifiedName(getMeasureQualifiedName());
  retValue.setMeasureDisplayName(getMeasureDisplayName());
  retValue.setAssociation(isAssociation());
  retValue.setExpectedView(expectedView);
  return retValue;
}","public GrandTotalInfo copy(){
  GrandTotalInfo retValue=new GrandTotalInfo();
  retValue.setAggregationOn(isAggregationOn());
  retValue.setFunction(getFunction());
  retValue.setMeasureQualifiedName(getMeasureQualifiedName());
  retValue.setMeasureDisplayName(getMeasureDisplayName());
  retValue.setAssociation(isAssociation());
  retValue.setExpectedView(expectedView);
  retValue.setViewHandle(getViewHandle());
  retValue.setPosition(getPosition());
  return retValue;
}",0.9055299539170508
70146,"public String getPosition(){
  return levelView.getAggregationHeaderLocation();
}","public String getPosition(){
  return viewHandle.getGrandTotalLocation();
}",0.8076923076923077
70147,"public CellEditor[] getCellEditors(){
  if (cellEditor != null) {
    return cellEditor;
  }
  ComboBoxCellEditor comboCell=new ComboBoxCellEditor(viewer.getTable(),new String[0],SWT.READ_ONLY);
  cellEditor=new CellEditor[]{null,null,comboCell};
  return cellEditor;
}","public CellEditor[] getCellEditors(){
  if (cellEditor != null) {
    return cellEditor;
  }
  ComboBoxCellEditor comboCell=new ComboBoxCellEditor(viewer.getTable(),new String[0],SWT.READ_ONLY);
  ComboBoxCellEditor positionCell=new ComboBoxCellEditor(viewer.getTable(),positionItems,SWT.READ_ONLY);
  cellEditor=new CellEditor[]{null,null,comboCell,positionCell};
  return cellEditor;
}",0.8201219512195121
70148,"public boolean canModify(Object element,String property){
  if (Arrays.asList(columnNames).indexOf(property) == 2) {
    if (viewer instanceof CheckboxTableViewer) {
      return ((CheckboxTableViewer)viewer).getChecked(element);
    }
 else {
      return true;
    }
  }
 else {
    return false;
  }
}","public boolean canModify(Object element,String property){
  if (Arrays.asList(columnNames).indexOf(property) == 2 || Arrays.asList(columnNames).indexOf(property) == 3) {
    if (viewer instanceof CheckboxTableViewer) {
      return ((CheckboxTableViewer)viewer).getChecked(element);
    }
 else {
      return true;
    }
  }
 else {
    return false;
  }
}",0.9198184568835098
70149,"public Object getValue(Object element,String property){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  Object value=null;
  int index=Arrays.asList(columnNames).indexOf(property);
switch (index) {
case 1:
    break;
case 2:
  initializeItems((GrandTotalInfo)element);
((ComboBoxCellEditor)cellEditor[2]).setItems(comboItems);
String expectedView=((GrandTotalInfo)(element)).getExpectedView();
if (expectedView == null || expectedView.length() == 0) {
return Integer.valueOf(0);
}
int sel=Arrays.asList(viewNames).indexOf(expectedView);
value=sel <= 0 ? Integer.valueOf(0) : Integer.valueOf(sel);
break;
default :
}
return value;
}","public Object getValue(Object element,String property){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  Object value=null;
  int index=Arrays.asList(columnNames).indexOf(property);
switch (index) {
case 1:
    break;
case 2:
  initializeItems((GrandTotalInfo)element);
((ComboBoxCellEditor)cellEditor[2]).setItems(comboItems);
String expectedView=((GrandTotalInfo)(element)).getExpectedView();
if (expectedView == null || expectedView.length() == 0) {
return Integer.valueOf(0);
}
int sel=Arrays.asList(viewNames).indexOf(expectedView);
value=sel <= 0 ? Integer.valueOf(0) : Integer.valueOf(sel);
break;
case 3:
String pos=((GrandTotalInfo)(element)).getPosition();
if (pos == null || pos.length() == 0) {
return Integer.valueOf(0);
}
int posIndex=Arrays.asList(positionValues).indexOf(pos);
value=posIndex <= 0 ? Integer.valueOf(0) : Integer.valueOf(posIndex);
break;
default :
}
return value;
}",0.8065532451165721
70150,"public void modify(Object element,String property,Object value){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  int index=Arrays.asList(columnNames).indexOf(property);
switch (index) {
case 0:
    break;
case 1:
  break;
case 2:
int sel=((Integer)value).intValue();
if (sel == 0) {
((GrandTotalInfo)(element)).setExpectedView(""String_Node_Str"");
}
 else {
((GrandTotalInfo)element).setExpectedView(viewNames[sel]);
}
break;
default :
}
viewer.refresh();
}","public void modify(Object element,String property,Object value){
  if (element instanceof Item) {
    element=((Item)element).getData();
  }
  int index=Arrays.asList(columnNames).indexOf(property);
switch (index) {
case 0:
    break;
case 1:
  break;
case 2:
int sel=((Integer)value).intValue();
if (sel == 0) {
((GrandTotalInfo)(element)).setExpectedView(""String_Node_Str"");
}
 else {
((GrandTotalInfo)element).setExpectedView(viewNames[sel]);
}
break;
case 3:
int posIndex=((Integer)value).intValue();
((GrandTotalInfo)element).setPosition(positionValues[posIndex]);
break;
default :
}
viewer.refresh();
}",0.8738574040219378
70151,"public String getColumnText(Object element,int columnIndex){
  GrandTotalInfo info=(GrandTotalInfo)element;
switch (columnIndex) {
case 0:
    return ""String_Node_Str"";
case 1:
  return info.getMeasureDisplayName() == null ? ""String_Node_Str"" : info.getMeasureDisplayName();
case 2:
initializeItems(info);
((ComboBoxCellEditor)cellEditor[2]).setItems(comboItems);
String expectedView=info.getExpectedView();
if (expectedView == null) {
expectedView=""String_Node_Str"";
}
int index=Arrays.asList(viewNames).indexOf(expectedView);
if (index <= 0) {
index=0;
info.setExpectedView(viewNames[index]);
}
return comboItems[index];
default :
break;
}
return ""String_Node_Str"";
}","public String getColumnText(Object element,int columnIndex){
  GrandTotalInfo info=(GrandTotalInfo)element;
switch (columnIndex) {
case 0:
    return ""String_Node_Str"";
case 1:
  return info.getMeasureDisplayName() == null ? ""String_Node_Str"" : info.getMeasureDisplayName();
case 2:
initializeItems(info);
((ComboBoxCellEditor)cellEditor[2]).setItems(comboItems);
String expectedView=info.getExpectedView();
if (expectedView == null) {
expectedView=""String_Node_Str"";
}
int index=Arrays.asList(viewNames).indexOf(expectedView);
if (index <= 0) {
index=0;
info.setExpectedView(viewNames[index]);
}
return comboItems[index];
case 3:
String position=info.getPosition();
if (position == null) {
position=""String_Node_Str"";
}
int posIndex=Arrays.asList(positionValues).indexOf(position);
if (posIndex < 0) {
info.setPosition(positionValues[0]);
}
return positionItems[posIndex];
default :
break;
}
return ""String_Node_Str"";
}",0.8118313404657017
70152,"public int[] columnWidths(){
  return new int[]{20,210,120};
}","public int[] columnWidths(){
  return new int[]{20,210,120,120};
}",0.96875
70153,"private void replaceInfo(AggregationDialog.GrandTotalInfo info,List list){
  for (int i=0; i < list.size(); i++) {
    if (info.isSameInfo(list.get(i))) {
      AggregationDialog.GrandTotalInfo tempInfo=(AggregationDialog.GrandTotalInfo)list.get(i);
      tempInfo.setAggregationOn(true);
      tempInfo.setFunction(info.getFunction());
      tempInfo.setExpectedView(info.getExpectedView());
    }
  }
}","private void replaceInfo(AggregationDialog.GrandTotalInfo info,List list){
  for (int i=0; i < list.size(); i++) {
    if (info.isSameInfo(list.get(i))) {
      AggregationDialog.GrandTotalInfo tempInfo=(AggregationDialog.GrandTotalInfo)list.get(i);
      tempInfo.setAggregationOn(true);
      tempInfo.setFunction(info.getFunction());
      tempInfo.setExpectedView(info.getExpectedView());
      tempInfo.setViewHandle(info.getViewHandle());
      tempInfo.setPosition(info.getPosition());
    }
  }
}",0.8898678414096917
70154,"private List<AggregationDialog.GrandTotalInfo> getGrandTotalInfo(int axis){
  List<AggregationDialog.GrandTotalInfo> retValue=new ArrayList<AggregationDialog.GrandTotalInfo>();
  CrosstabReportItemHandle reportHandle=levelHandle.getCrosstab();
  CrosstabViewHandle crosstabView=reportHandle.getCrosstabView(axis);
  if (crosstabView == null || crosstabView.getDimensionCount() == 0) {
    return retValue;
  }
  int measureCount=reportHandle.getMeasureCount();
  for (int i=0; i < measureCount; i++) {
    MeasureViewHandle measureView=reportHandle.getMeasure(i);
    if (measureView instanceof ComputedMeasureViewHandle) {
      continue;
    }
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    info.setMeasureQualifiedName(reportHandle.getMeasure(i).getCubeMeasure().getQualifiedName());
    info.setMeasureDisplayName(reportHandle.getMeasure(i).getCubeMeasure().getName());
    info.setFunction(CrosstabUtil.getDefaultMeasureAggregationFunction(reportHandle.getMeasure(i)));
    info.setExpectedView(""String_Node_Str"");
    retValue.add(info);
    info.setAssociation(getAssociation(axis));
  }
  List measures=reportHandle.getAggregationMeasures(axis);
  for (int i=0; i < measures.size(); i++) {
    MeasureViewHandle measureView=(MeasureViewHandle)measures.get(i);
    if (measureView instanceof ComputedMeasureViewHandle) {
      continue;
    }
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    MeasureViewHandle measureViewHandle=(MeasureViewHandle)measures.get(i);
    info.setMeasureQualifiedName(measureViewHandle.getCubeMeasure().getQualifiedName());
    info.setMeasureDisplayName(measureViewHandle.getCubeMeasure().getName());
    info.setFunction(CrosstabUtil.getDefaultMeasureAggregationFunction(measureViewHandle));
    AggregationCellHandle cell=getGrandAggregationCell(measureView,levelHandle,axis);
    String view=getExpectedView(cell);
    info.setExpectedView(view);
    replaceInfo(info,retValue);
  }
  return retValue;
}","private List<AggregationDialog.GrandTotalInfo> getGrandTotalInfo(int axis){
  List<AggregationDialog.GrandTotalInfo> retValue=new ArrayList<AggregationDialog.GrandTotalInfo>();
  CrosstabReportItemHandle reportHandle=levelHandle.getCrosstab();
  CrosstabViewHandle crosstabView=reportHandle.getCrosstabView(axis);
  if (crosstabView == null || crosstabView.getDimensionCount() == 0) {
    return retValue;
  }
  int measureCount=reportHandle.getMeasureCount();
  for (int i=0; i < measureCount; i++) {
    MeasureViewHandle measureView=reportHandle.getMeasure(i);
    if (measureView instanceof ComputedMeasureViewHandle) {
      continue;
    }
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    info.setViewHandle(reportHandle.getCrosstabView(axis));
    info.setMeasureQualifiedName(reportHandle.getMeasure(i).getCubeMeasure().getQualifiedName());
    info.setMeasureDisplayName(reportHandle.getMeasure(i).getCubeMeasure().getName());
    info.setFunction(CrosstabUtil.getDefaultMeasureAggregationFunction(reportHandle.getMeasure(i)));
    info.setExpectedView(""String_Node_Str"");
    info.setPosition(reportHandle.getCrosstabView(axis).getGrandTotalLocation());
    retValue.add(info);
    info.setAssociation(getAssociation(axis));
  }
  List measures=reportHandle.getAggregationMeasures(axis);
  for (int i=0; i < measures.size(); i++) {
    MeasureViewHandle measureView=(MeasureViewHandle)measures.get(i);
    if (measureView instanceof ComputedMeasureViewHandle) {
      continue;
    }
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    MeasureViewHandle measureViewHandle=(MeasureViewHandle)measures.get(i);
    info.setViewHandle(reportHandle.getCrosstabView(axis));
    info.setMeasureQualifiedName(measureViewHandle.getCubeMeasure().getQualifiedName());
    info.setMeasureDisplayName(measureViewHandle.getCubeMeasure().getName());
    info.setFunction(CrosstabUtil.getDefaultMeasureAggregationFunction(measureViewHandle));
    AggregationCellHandle cell=getGrandAggregationCell(measureView,levelHandle,axis);
    String view=getExpectedView(cell);
    info.setExpectedView(view);
    info.setPosition(reportHandle.getCrosstabView(axis).getGrandTotalLocation());
    replaceInfo(info,retValue);
  }
  return retValue;
}",0.933364183248496
70155,"protected ImageArea createImageArea(IImageContent content){
  ImageArea area=new ImageArea();
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
    area.setUrl(content.getURI());
  area.setExtension(content.getExtension());
area.setMIMEType(content.getMIMEType());
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
area.setData(content.getData());
area.setExtension(content.getExtension());
area.setMIMEType(content.getMIMEType());
break;
}
return area;
}","protected ImageArea createImageArea(IImageContent content){
  ImageArea area=new ImageArea();
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
    area.setUrl(content.getURI());
  area.setExtension(content.getExtension());
area.setMIMEType(content.getMIMEType());
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
area.setData(content.getData());
area.setExtension(content.getExtension());
area.setMIMEType(content.getMIMEType());
break;
}
if (content instanceof ObjectContent) {
ObjectContent object=(ObjectContent)content;
area.setParameters(object.getParamters());
}
return area;
}",0.8902027027027027
70156,"private void caleColumnWidth(){
  int size=data.columnWidths.length;
  int containerWidth=getLayoutWidth();
  containerWidth=Math.max(0,containerWidth);
  int totalColumn=0;
  int forceCount=size;
  for (int i=0; i < size; i++) {
    ColumnData cData=data.columnWidths[i];
    if (cData.isPercentage) {
      cData.trueMinColumnWidth=(int)(containerWidth * cData.percentageWidth / 100);
      totalColumn=totalColumn + cData.trueMinColumnWidth;
      cData.width=cData.trueMinColumnWidth;
      forceCount--;
    }
 else     if (cData.isForce) {
      totalColumn=totalColumn + cData.trueMinColumnWidth;
      cData.width=cData.trueMinColumnWidth;
      forceCount--;
    }
  }
  if ((!getOwner().isForceWidth()) && forceCount == 0) {
    return;
  }
  if (totalColumn >= containerWidth) {
    for (int i=0; i < size; i++) {
      ColumnData cData=data.columnWidths[i];
      if (!cData.isForce) {
        cData.width=ALLOW_COLOUMN_WIDTH;
        cData.trueMinColumnWidth=ALLOW_COLOUMN_WIDTH;
      }
    }
  }
 else {
    int moreWith=containerWidth - totalColumn;
    int argaWith;
    int others;
    if (forceCount == 0) {
      argaWith=moreWith / size;
      others=moreWith % size;
      for (int i=0; i < size; i++) {
        ColumnData cData=data.columnWidths[i];
        if (i <= others - 1) {
          cData.width=cData.width + argaWith + 1;
        }
 else {
          cData.width=cData.width + argaWith;
        }
      }
    }
 else {
      if (moreWith < forceCount * ALLOW_COLOUMN_WIDTH) {
        for (int i=0; i < size; i++) {
          ColumnData cData=data.columnWidths[i];
          if (!cData.isForce) {
            cData.width=ALLOW_COLOUMN_WIDTH;
          }
        }
      }
 else {
        argaWith=moreWith / forceCount;
        others=moreWith % forceCount;
        List<ColumnData> adjustList=new ArrayList<ColumnData>();
        for (int i=0; i < size; i++) {
          ColumnData cData=data.columnWidths[i];
          if (!cData.isForce) {
            adjustList.add(cData);
          }
        }
        for (int i=0; i < adjustList.size(); i++) {
          ColumnData adjust=adjustList.get(i);
          if (i <= others - 1) {
            adjust.width=argaWith + 1;
          }
 else {
            adjust.width=argaWith;
          }
        }
      }
    }
  }
}","private void caleColumnWidth(){
  int size=data.columnWidths.length;
  int containerWidth=getLayoutWidth();
  containerWidth=Math.max(0,containerWidth);
  int totalColumn=0;
  int forceCount=size;
  int percentageTotal=0;
  int forceTotal=0;
  double percentageValueTotal=0.0;
  for (int i=0; i < size; i++) {
    ColumnData cData=data.columnWidths[i];
    if (cData.isPercentage) {
      cData.trueMinColumnWidth=(int)(containerWidth * cData.percentageWidth / 100);
      totalColumn=totalColumn + cData.trueMinColumnWidth;
      percentageTotal=percentageTotal + cData.trueMinColumnWidth;
      percentageValueTotal=percentageValueTotal + cData.percentageWidth;
      cData.width=cData.trueMinColumnWidth;
      forceCount--;
    }
 else     if (cData.isForce) {
      totalColumn=totalColumn + cData.trueMinColumnWidth;
      forceTotal=forceTotal + cData.trueMinColumnWidth;
      cData.width=cData.trueMinColumnWidth;
      forceCount--;
    }
  }
  if (percentageTotal > 0 && containerWidth - forceTotal < percentageTotal) {
    percentageTotal=0;
    int widthMore=containerWidth - forceTotal;
    for (int i=0; i < size; i++) {
      ColumnData cData=data.columnWidths[i];
      if (cData.isPercentage) {
        if (widthMore < 0) {
          cData.trueMinColumnWidth=ALLOW_COLOUMN_WIDTH;
        }
 else {
          cData.trueMinColumnWidth=(int)(widthMore * cData.percentageWidth / percentageValueTotal);
        }
        percentageTotal=percentageTotal + cData.trueMinColumnWidth;
        cData.width=cData.trueMinColumnWidth;
      }
    }
    totalColumn=percentageTotal + forceTotal;
  }
  if ((!getOwner().isForceWidth()) && forceCount == 0) {
    return;
  }
  if (totalColumn >= containerWidth) {
    for (int i=0; i < size; i++) {
      ColumnData cData=data.columnWidths[i];
      if (!cData.isForce) {
        cData.width=ALLOW_COLOUMN_WIDTH;
        cData.trueMinColumnWidth=ALLOW_COLOUMN_WIDTH;
      }
    }
  }
 else {
    int moreWith=containerWidth - totalColumn;
    int argaWith;
    int others;
    if (forceCount == 0) {
      argaWith=moreWith / size;
      others=moreWith % size;
      for (int i=0; i < size; i++) {
        ColumnData cData=data.columnWidths[i];
        if (i <= others - 1) {
          cData.width=cData.width + argaWith + 1;
        }
 else {
          cData.width=cData.width + argaWith;
        }
      }
    }
 else {
      if (moreWith < forceCount * ALLOW_COLOUMN_WIDTH) {
        for (int i=0; i < size; i++) {
          ColumnData cData=data.columnWidths[i];
          if (!cData.isForce) {
            cData.width=ALLOW_COLOUMN_WIDTH;
          }
        }
      }
 else {
        argaWith=moreWith / forceCount;
        others=moreWith % forceCount;
        List<ColumnData> adjustList=new ArrayList<ColumnData>();
        for (int i=0; i < size; i++) {
          ColumnData cData=data.columnWidths[i];
          if (!cData.isForce) {
            adjustList.add(cData);
          }
        }
        for (int i=0; i < adjustList.size(); i++) {
          ColumnData adjust=adjustList.get(i);
          if (i <= others - 1) {
            adjust.width=argaWith + 1;
          }
 else {
            adjust.width=argaWith;
          }
        }
      }
    }
  }
}",0.605072463768116
70157,"public CubeQueryUtil(DataRequestSessionImpl session){
  this.session=session;
}","public CubeQueryUtil(DataRequestSessionImpl session){
  this.sessionImpl=session;
}",0.9753086419753086
70158,"/** 
 * @param hierHandle
 * @throws BirtException
 */
private void defineDataSourceAndDataSet(DataSetHandle dataSet) throws BirtException {
  IModelAdapter modelAdaptor=session.getModelAdaptor();
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null) {
    session.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          session.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet);
      }
    }
  }
  session.defineDataSet(modelAdaptor.adaptDataSet(dataSet));
}","/** 
 * @param hierHandle
 * @throws BirtException
 */
private void defineDataSourceAndDataSet(DataSetHandle dataSet) throws BirtException {
  IModelAdapter modelAdaptor=sessionImpl.getModelAdaptor();
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null) {
    sessionImpl.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          sessionImpl.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet);
      }
    }
  }
  sessionImpl.defineDataSet(modelAdaptor.adaptDataSet(dataSet));
}",0.991869918699187
70159,"/** 
 * @param appContext
 * @param hierHandle
 * @return
 * @throws AdapterException
 * @throws BirtException
 */
private DataSetIterator createDataSetIterator(Map appContext,TabularHierarchyHandle hierHandle) throws AdapterException, BirtException {
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  IQueryDefinition defn=DataRequestSessionImpl.createQuery(session,hierHandle,metaList);
  return new DataSetIterator(this.session,defn,metaList,appContext);
}","/** 
 * @param appContext
 * @param hierHandle
 * @return
 * @throws AdapterException
 * @throws BirtException
 */
private DataSetIterator createDataSetIterator(Map appContext,TabularHierarchyHandle hierHandle) throws AdapterException, BirtException {
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  IQueryDefinition defn=sessionImpl.createQuery(sessionImpl,hierHandle,metaList);
  return new DataSetIterator(this.sessionImpl,defn,metaList,appContext);
}",0.977491961414791
70160,"/** 
 * @param cubeHandle
 * @throws AdapterException
 * @throws DataException
 */
private void prepareForCubeGeneration(TabularCubeHandle cubeHandle,Map<ReportElementHandle,IQueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap) throws AdapterException, DataException {
  List<IQueryDefinition> queryDefns=new ArrayList<IQueryDefinition>();
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  IQueryDefinition query=DataRequestSessionImpl.createQuery(this,cubeHandle,metaList);
  queryDefns.add(query);
  queryMap.put(cubeHandle,query);
  metaMap.put(cubeHandle,metaList);
  List<DimensionHandle> dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (  DimensionHandle dim : dimHandles) {
    List<TabularHierarchyHandle> hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
    for (    TabularHierarchyHandle hier : hiers) {
      metaList=new ArrayList<ColumnMeta>();
      query=DataRequestSessionImpl.createQuery(this,hier,metaList);
      queryDefns.add(query);
      queryMap.put(hier,query);
      metaMap.put(hier,metaList);
    }
  }
  this.dataEngine.registerQueries(queryDefns.toArray(new IDataQueryDefinition[0]));
}","/** 
 * @param cubeHandle
 * @throws BirtException 
 */
private void prepareForCubeGeneration(TabularCubeHandle cubeHandle,Map<ReportElementHandle,IQueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap) throws BirtException {
  List<IQueryDefinition> queryDefns=new ArrayList<IQueryDefinition>();
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  IQueryDefinition query=createQuery(this,cubeHandle,metaList);
  queryDefns.add(query);
  queryMap.put(cubeHandle,query);
  metaMap.put(cubeHandle,metaList);
  List<DimensionHandle> dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (  DimensionHandle dim : dimHandles) {
    List<TabularHierarchyHandle> hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
    for (    TabularHierarchyHandle hier : hiers) {
      metaList=new ArrayList<ColumnMeta>();
      query=createQuery(this,hier,metaList);
      queryDefns.add(query);
      queryMap.put(hier,query);
      metaMap.put(hier,metaList);
    }
  }
  this.dataEngine.registerQueries(queryDefns.toArray(new IDataQueryDefinition[0]));
}",0.9519188354653728
70161,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private static void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      DataSetIterator.ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())),DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=DataSetIterator.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          if (level.getDefaultValue() != null) {
            exprString+=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(level.getDefaultValue()) + ""String_Node_Str"";
          }
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),processor,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DataSetIterator.DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DataSetIterator.DateTimeAttributeProcessor(level.getDateTimeLevelType());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=DataSetIterator.createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws BirtException 
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws BirtException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      DataSetIterator.ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale())),DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=DataSetIterator.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          if (level.getDefaultValue() != null) {
            exprString+=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(level.getDefaultValue()) + ""String_Node_Str"";
          }
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),processor,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DataSetIterator.DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DataSetIterator.DateTimeAttributeProcessor(level.getDateTimeLevelType());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=DataSetIterator.createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9889002732240436
70162,"/** 
 * Create a query definition for an Hierarchy.
 * @param session
 * @param hierHandle
 * @param metaList
 * @return
 * @throws AdapterException
 */
static QueryDefinition createQuery(DataRequestSessionImpl session,TabularHierarchyHandle hierHandle,List metaList) throws AdapterException {
}","/** 
 * Create a query definition for an Hierarchy.
 * @param session
 * @param hierHandle
 * @param metaList
 * @return
 * @throws BirtException 
 */
QueryDefinition createQuery(DataRequestSessionImpl session,TabularHierarchyHandle hierHandle,List metaList) throws BirtException {
}",0.9480968858131488
70163,"public IBaseQueryResults execute(IBasePreparedQuery query,IBaseQueryResults outerResults,Scriptable scope) throws AdapterException {
  try {
    if (query instanceof IPreparedQuery) {
      return ((IPreparedQuery)query).execute(outerResults,scope);
    }
 else     if (query instanceof IPreparedCubeQuery) {
      return ((IPreparedCubeQuery)query).execute(outerResults,scope);
    }
    return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}","public IBaseQueryResults execute(IBasePreparedQuery query,IBaseQueryResults outerResults,Scriptable scope) throws AdapterException {
  try {
    if (query instanceof IPreparedQuery) {
      return ((IPreparedQuery)query).execute(outerResults,scope);
    }
 else     if (query instanceof IPreparedCubeQuery) {
      String queryName=((IPreparedCubeQuery)query).getCubeQueryDefinition().getName();
      if (this.cubeHandleMap.get(queryName) != null) {
        this.materializeCube((CubeHandle)this.cubeHandleMap.get(queryName),this.sessionContext.getAppContext());
        this.cubeHandleMap.remove(queryName);
      }
      return ((IPreparedCubeQuery)query).execute(outerResults,scope);
    }
    return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}",0.7671439336850038
70164,"/** 
 * Get the default width.
 * @param colNumber The column number.
 * @return The default width.
 */
public int getDefaultWidth(int colNumber){
  Dimension size=getPreferredSize().shrink(getFigure().getInsets().getWidth(),getFigure().getInsets().getHeight());
  ;
  if (getRowCount() == 0) {
    return size.width;
  }
  int allNumbers=getColumnCount();
  if (allNumbers <= 0) {
    return size.width;
  }
  if (colNumber <= 0) {
    return size.width;
  }
  int width=size.width;
  int columnNumber=allNumbers;
  for (int i=1; i < columnNumber + 1; i++) {
    DimensionHandle dimHandle=getCrosstabHandleAdapter().getColumnWidth(colNumber);
    if (dimHandle != null && dimHandle.getMeasure() > 0) {
      allNumbers=allNumbers - 1;
      width=width - getColumnWidthValue(colNumber);
    }
 else     if (dimHandle == null) {
      ITableLayoutOwner.DimensionInfomation info=getColumnWidth(colNumber);
      if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(info.getUnits())) {
        Dimension dim=getFigure().getParent().getClientArea().getSize();
        int containerWidth=dim.width;
        width=width - ((int)(info.getMeasure() * containerWidth / 100));
      }
    }
  }
  if (colNumber == allNumbers) {
    return width / allNumbers + width % allNumbers;
  }
  return (width / allNumbers);
}","/** 
 * Get the default width.
 * @param colNumber The column number.
 * @return The default width.
 */
public int getDefaultWidth(int colNumber){
  Dimension size=getPreferredSize().shrink(getFigure().getInsets().getWidth(),getFigure().getInsets().getHeight());
  ;
  if (getRowCount() == 0) {
    return size.width;
  }
  int allNumbers=getColumnCount();
  if (allNumbers <= 0) {
    return size.width;
  }
  if (colNumber <= 0) {
    return size.width;
  }
  int width=size.width;
  int columnNumber=allNumbers;
  for (int i=1; i < columnNumber + 1; i++) {
    DimensionHandle dimHandle=getCrosstabHandleAdapter().getColumnWidth(colNumber);
    boolean bool=isFixLayout() && dimHandle != null && DesignChoiceConstants.UNITS_PERCENTAGE.equals(dimHandle.getUnits());
    if (dimHandle != null && dimHandle.getMeasure() > 0 && !bool) {
      allNumbers=allNumbers - 1;
      width=width - getColumnWidthValue(colNumber);
    }
 else     if (dimHandle == null) {
      ITableLayoutOwner.DimensionInfomation info=getColumnWidth(colNumber);
      if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(info.getUnits())) {
        Dimension dim=getFigure().getParent().getClientArea().getSize();
        int containerWidth=dim.width;
        width=width - ((int)(info.getMeasure() * containerWidth / 100));
      }
    }
  }
  if (colNumber == allNumbers) {
    return width / allNumbers + width % allNumbers;
  }
  return (width / allNumbers);
}",0.7661437431594309
70165,"protected void propertyChange(Map info){
  Set set=info.keySet();
  Iterator itor=set.iterator();
  while (itor.hasNext()) {
    Object obj=itor.next();
    if (ICrosstabReportItemConstants.MEASURE_DIRECTION_PROP.equals(obj) || ICrosstabReportItemConstants.PAGE_LAYOUT_PROP.equals(obj) || ILevelViewConstants.AGGREGATION_HEADER_LOCATION_PROP.equals(obj)|| ICrosstabReportItemConstants.HIDE_MEASURE_HEADER_PROP.equals(obj)) {
      refresh();
      return;
    }
  }
  super.propertyChange(info);
}","protected void propertyChange(Map info){
  Set set=info.keySet();
  Iterator itor=set.iterator();
  while (itor.hasNext()) {
    Object obj=itor.next();
    if (ICrosstabReportItemConstants.MEASURE_DIRECTION_PROP.equals(obj) || ICrosstabReportItemConstants.PAGE_LAYOUT_PROP.equals(obj) || ILevelViewConstants.AGGREGATION_HEADER_LOCATION_PROP.equals(obj)|| ICrosstabReportItemConstants.HIDE_MEASURE_HEADER_PROP.equals(obj)|| ICrosstabViewConstants.GRAND_TOTAL_LOCATIION_PROP.equals(obj)) {
      refresh();
      return;
    }
  }
  super.propertyChange(info);
}",0.9395085066162572
70166,"private void addTotalMeasureHeader(int axisType,LevelViewHandle levelView,MeasureViewHandle mv) throws SemanticException {
  if (mv == null) {
    return;
  }
  int targetAxis=MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection()) ? ROW_AXIS_TYPE : COLUMN_AXIS_TYPE;
  if (targetAxis != axisType) {
    return;
  }
  if (levelView == null) {
    ExtendedItemHandle newHeader=CrosstabExtendedItemFactory.createCrosstabCell(mv.getModuleHandle());
    mv.getHeaderProperty().add(newHeader);
  }
 else {
    List<LevelViewHandle> levels=CrosstabModelUtil.getAllAggregationLevels(crosstab,targetAxis);
    Collections.reverse(levels);
    for (int i=0; i < levels.size(); i++) {
      if (levelView == levels.get(i)) {
        ExtendedItemHandle newHeader=CrosstabExtendedItemFactory.createCrosstabCell(mv.getModuleHandle());
        mv.getHeaderProperty().add(newHeader,i);
        break;
      }
    }
  }
}","private void addTotalMeasureHeader(int axisType,LevelViewHandle levelView,MeasureViewHandle mv) throws SemanticException {
  if (mv == null) {
    return;
  }
  int targetAxis=MEASURE_DIRECTION_VERTICAL.equals(crosstab.getMeasureDirection()) ? ROW_AXIS_TYPE : COLUMN_AXIS_TYPE;
  if (targetAxis != axisType) {
    return;
  }
  if (levelView == null) {
    ExtendedItemHandle newHeader=CrosstabExtendedItemFactory.createCrosstabCell(mv.getModuleHandle());
    mv.getHeaderProperty().add(newHeader);
    CrosstabModelUtil.notifyCreation(ICrosstabModelListener.MEASURE_HEADER,CrosstabUtil.getReportItem(newHeader));
  }
 else {
    List<LevelViewHandle> levels=CrosstabModelUtil.getAllAggregationLevels(crosstab,targetAxis);
    Collections.reverse(levels);
    for (int i=0; i < levels.size(); i++) {
      if (levelView == levels.get(i)) {
        ExtendedItemHandle newHeader=CrosstabExtendedItemFactory.createCrosstabCell(mv.getModuleHandle());
        mv.getHeaderProperty().add(newHeader,i);
        CrosstabModelUtil.notifyCreation(ICrosstabModelListener.MEASURE_HEADER,CrosstabUtil.getReportItem(newHeader));
        break;
      }
    }
  }
}",0.8866279069767442
70167,"private void validateSingleMeasureHeader(MeasureViewHandle measureView) throws SemanticException {
  if (measureView == null) {
    return;
  }
  int expectHeaders=CrosstabModelUtil.computeAllMeasureHeaderCount(crosstab,measureView);
  int availableHeaders=measureView.getHeaderCount();
  if (availableHeaders < expectHeaders) {
    PropertyHandle propHandle=measureView.getHeaderProperty();
    for (int i=0; i < expectHeaders - availableHeaders; i++) {
      ExtendedItemHandle headerCell=CrosstabExtendedItemFactory.createCrosstabCell(measureView.getModuleHandle());
      propHandle.add(headerCell);
    }
  }
 else   if (availableHeaders > expectHeaders) {
    PropertyHandle propHandle=measureView.getHeaderProperty();
    List contents=propHandle.getContents();
    for (int i=0; i < availableHeaders - expectHeaders; i++) {
      ((DesignElementHandle)contents.get(contents.size() - i - 1)).drop();
    }
  }
}","private void validateSingleMeasureHeader(MeasureViewHandle measureView) throws SemanticException {
  if (measureView == null) {
    return;
  }
  int expectHeaders=CrosstabModelUtil.computeAllMeasureHeaderCount(crosstab,measureView);
  int availableHeaders=measureView.getHeaderCount();
  if (availableHeaders < expectHeaders) {
    PropertyHandle propHandle=measureView.getHeaderProperty();
    for (int i=0; i < expectHeaders - availableHeaders; i++) {
      ExtendedItemHandle headerCell=CrosstabExtendedItemFactory.createCrosstabCell(measureView.getModuleHandle());
      propHandle.add(headerCell);
      CrosstabModelUtil.notifyCreation(ICrosstabModelListener.MEASURE_HEADER,CrosstabUtil.getReportItem(headerCell));
    }
  }
 else   if (availableHeaders > expectHeaders) {
    PropertyHandle propHandle=measureView.getHeaderProperty();
    List contents=propHandle.getContents();
    for (int i=0; i < availableHeaders - expectHeaders; i++) {
      ((DesignElementHandle)contents.get(contents.size() - i - 1)).drop();
    }
  }
}",0.9396110542476972
70168,"/** 
 * Adds header cell for current measure. If header cell already exists, this method just does nothing.
 * @throws SemanticException
 */
public void addHeader() throws SemanticException {
  PropertyHandle propHandle=focus.getHeaderProperty();
  int expectHeaders=CrosstabModelUtil.computeAllMeasureHeaderCount(crosstab,focus);
  int availableHeaders=propHandle.getContentCount();
  if (availableHeaders >= expectHeaders) {
    focus.getLogger().log(Level.INFO,""String_Node_Str"");
    return;
  }
  CommandStack stack=focus.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    for (int i=0; i < expectHeaders - availableHeaders; i++) {
      ExtendedItemHandle headerCell=CrosstabExtendedItemFactory.createCrosstabCell(focus.getModuleHandle());
      propHandle.add(headerCell);
    }
  }
 catch (  SemanticException e) {
    focus.getLogger().log(Level.WARNING,e.getMessage(),e);
    stack.rollback();
    throw e;
  }
  stack.commit();
}","/** 
 * Adds header cell for current measure. If header cell already exists, this method just does nothing.
 * @throws SemanticException
 */
public void addHeader() throws SemanticException {
  PropertyHandle propHandle=focus.getHeaderProperty();
  int expectHeaders=CrosstabModelUtil.computeAllMeasureHeaderCount(crosstab,focus);
  int availableHeaders=propHandle.getContentCount();
  if (availableHeaders >= expectHeaders) {
    focus.getLogger().log(Level.INFO,""String_Node_Str"");
    return;
  }
  CommandStack stack=focus.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  try {
    for (int i=0; i < expectHeaders - availableHeaders; i++) {
      ExtendedItemHandle headerCell=CrosstabExtendedItemFactory.createCrosstabCell(focus.getModuleHandle());
      propHandle.add(headerCell);
      CrosstabModelUtil.notifyCreation(ICrosstabModelListener.MEASURE_HEADER,CrosstabUtil.getReportItem(headerCell));
    }
  }
 catch (  SemanticException e) {
    focus.getLogger().log(Level.WARNING,e.getMessage(),e);
    stack.rollback();
    throw e;
  }
  stack.commit();
}",0.9431599229287092
70169,"public boolean next() throws DataException {
  if (this.streamsWrapper != null && currResultObj != null) {
    try {
      if (dataSetStream != null) {
        int colCount=this.currResultObj.getResultClass().getFieldCount();
        Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(handler.getAllColumnBindings());
        IOUtil.writeLong(dataSetLenStream,offset);
        offset+=ResultSetUtil.writeResultObject(new DataOutputStream(dataSetStream),currResultObj,colCount,resultSetNameSet);
      }
    }
 catch (    IOException e) {
    }
  }
  this.currResultObj=this.rowResultSet.next(stopSign);
  if (this.currResultObj != null)   rowCount++;
  return this.currResultObj != null;
}","public boolean next() throws DataException {
  if (this.streamsWrapper != null && currResultObj != null) {
    try {
      if (dataSetStream != null) {
        int colCount=this.currResultObj.getResultClass().getFieldCount();
        IOUtil.writeLong(dataSetLenStream,offset);
        offset+=ResultSetUtil.writeResultObject(new DataOutputStream(dataSetStream),currResultObj,colCount,resultSetNameSet);
      }
    }
 catch (    IOException e) {
    }
  }
  this.currResultObj=this.rowResultSet.next(stopSign);
  if (this.currResultObj != null)   rowCount++;
  return this.currResultObj != null;
}",0.9241486068111456
70170,"/** 
 * @param dataSourceQuery
 * @param resultSet
 * @param resultClass
 * @param stopSign
 * @throws DataException
 */
public SimpleResultSet(DataSourceQuery dataSourceQuery,ResultSet resultSet,IResultClass resultClass,IEventHandler handler,StopSign stopSign) throws DataException {
  this.rowResultSet=new RowResultSet(new SmartCacheRequest(dataSourceQuery.getMaxRows(),dataSourceQuery.getFetchEvents(),new OdiAdapter(resultSet),resultClass,false));
  this.currResultObj=this.rowResultSet.next(stopSign);
  this.initialRowCount=(this.currResultObj != null) ? -1 : 0;
  this.rowCount=(this.currResultObj != null) ? 1 : 0;
  this.resultSet=resultSet;
  this.stopSign=stopSign;
  this.handler=handler;
}","/** 
 * @param dataSourceQuery
 * @param resultSet
 * @param resultClass
 * @param stopSign
 * @throws DataException
 */
public SimpleResultSet(DataSourceQuery dataSourceQuery,ResultSet resultSet,IResultClass resultClass,IEventHandler handler,StopSign stopSign) throws DataException {
  this.rowResultSet=new RowResultSet(new SmartCacheRequest(dataSourceQuery.getMaxRows(),dataSourceQuery.getFetchEvents(),new OdiAdapter(resultSet),resultClass,false));
  this.currResultObj=this.rowResultSet.next(stopSign);
  this.initialRowCount=(this.currResultObj != null) ? -1 : 0;
  this.rowCount=(this.currResultObj != null) ? 1 : 0;
  this.resultSet=resultSet;
  this.stopSign=stopSign;
  this.handler=handler;
  this.resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(handler.getAllColumnBindings());
}",0.9379586390927284
70171,"private String calculateText(){
  if (blankLine) {
    return ""String_Node_Str"";
  }
 else {
    return text.substring(offset,offset + textLength);
  }
}","private String calculateText(){
  if (blankLine || text == null) {
    return ""String_Node_Str"";
  }
 else {
    return text.substring(offset,offset + textLength);
  }
}",0.9503105590062112
70172,"/** 
 * @return
 */
protected String[][] getAttributeNames(){
  String[][] result=new String[keyLevelIndex.length][];
  for (int i=0; i < keyLevelIndex.length; i++) {
    String[][] attributeNames=aggrResultSet.getAttributeNames();
    if (attributeNames != null && attributeNames.length > keyLevelIndex[i])     result[i]=attributeNames[keyLevelIndex[i]];
  }
  return result;
}","/** 
 * @return
 */
protected String[][] getAttributeNames(){
  if (keyLevelIndex == null)   return null;
  String[][] result=new String[keyLevelIndex.length][];
  for (int i=0; i < keyLevelIndex.length; i++) {
    String[][] attributeNames=aggrResultSet.getAttributeNames();
    if (attributeNames != null && attributeNames.length > keyLevelIndex[i])     result[i]=attributeNames[keyLevelIndex[i]];
  }
  return result;
}",0.945
70173,"/** 
 * @return
 */
protected String[][] getKeyNames(){
  String[][] result=new String[keyLevelIndex.length][];
  for (int i=0; i < keyLevelIndex.length; i++) {
    String[][] keyNames=aggrResultSet.getKeyNames();
    if (keyNames != null && keyNames.length > keyLevelIndex[i])     result[i]=keyNames[keyLevelIndex[i]];
  }
  return result;
}","/** 
 * @return
 */
protected String[][] getKeyNames(){
  if (keyLevelIndex == null)   return null;
  String[][] result=new String[keyLevelIndex.length][];
  for (int i=0; i < keyLevelIndex.length; i++) {
    String[][] keyNames=aggrResultSet.getKeyNames();
    if (keyNames != null && keyNames.length > keyLevelIndex[i])     result[i]=keyNames[keyLevelIndex[i]];
  }
  return result;
}",0.9395604395604396
70174,"/** 
 * @param resultBindingList
 * @param bindingCollection
 * @throws DataException 
 */
protected static void addQueryBindings(List<IBinding> resultBindingList,Collection bindingCollection) throws DataException {
  Iterator bindingIterator=bindingCollection.iterator();
  while (bindingIterator.hasNext()) {
    IBinding binding=(IBinding)(bindingIterator.next());
    IBaseExpression expr=binding.getExpression();
    if (expr instanceof IScriptExpression && !ExpressionUtil.hasAggregation(((IScriptExpression)expr).getText())) {
      boolean exist=false;
      for (int i=0; i < resultBindingList.size(); i++) {
        if (resultBindingList.get(i) != null && resultBindingList.get(i).getBindingName().equals(binding.getBindingName())) {
          exist=true;
        }
      }
      if (!exist)       resultBindingList.add(binding);
    }
  }
}","/** 
 * @param resultBindingList
 * @param bindingCollection
 * @throws DataException 
 */
protected static void addQueryBindings(List<IBinding> resultBindingList,Collection bindingCollection) throws DataException {
  Iterator bindingIterator=bindingCollection.iterator();
  while (bindingIterator.hasNext()) {
    IBinding binding=(IBinding)(bindingIterator.next());
    if (binding.getAggrFunction() != null)     continue;
    IBaseExpression expr=binding.getExpression();
    if (expr instanceof IScriptExpression && !ExpressionUtil.hasAggregation(((IScriptExpression)expr).getText())) {
      boolean exist=false;
      for (int i=0; i < resultBindingList.size(); i++) {
        if (resultBindingList.get(i) != null && resultBindingList.get(i).getBindingName().equals(binding.getBindingName())) {
          exist=true;
        }
      }
      if (!exist)       resultBindingList.add(binding);
    }
  }
}",0.9675952245594088
70175,"/** 
 * Get the computed column instance according to the group type.If group has interval, return GroupComputedColumn, otherwise return normal computed column.
 * @param cx
 * @param groupSpecs
 * @param i
 * @param src
 * @param expr
 * @param groupName
 * @param dest
 * @return
 * @throws DataException
 */
private IComputedColumn getComputedColumnInstance(Context cx,int interval,IGroupDefinition src,String expr,String groupName,IQuery.GroupSpec dest,int dataType) throws DataException {
  if (dest.getInterval() != IGroupDefinition.NO_INTERVAL) {
    return new GroupComputedColumn(groupName,expr,QueryExecutorUtil.getTempComputedColumnType(interval),GroupCalculatorFactory.getGroupCalculator(src.getInterval(),src.getIntervalStart(),src.getIntervalRange(),dataType));
  }
 else {
    return new ComputedColumn(groupName,expr,dataType);
  }
}","/** 
 * Get the computed column instance according to the group type.If group has interval, return GroupComputedColumn, otherwise return normal computed column.
 * @param cx
 * @param groupSpecs
 * @param i
 * @param src
 * @param expr
 * @param groupName
 * @param dest
 * @return
 * @throws DataException
 */
private IComputedColumn getComputedColumnInstance(Context cx,int interval,IGroupDefinition src,String expr,String groupName,IQuery.GroupSpec dest,int dataType) throws DataException {
  if (dest.getInterval() != IGroupDefinition.NO_INTERVAL) {
    return new GroupComputedColumn(groupName,expr,QueryExecutorUtil.getTempComputedColumnType(interval),GroupCalculatorFactory.getGroupCalculator(src.getInterval(),src.getIntervalStart(),src.getIntervalRange(),dataType,session.getEngineContext().getLocale()));
  }
 else {
    return new ComputedColumn(groupName,expr,dataType);
  }
}",0.9775474956822108
70176,"RunningFunctionCalculator(AggregationDefinition aggregation,IAggregationResultSet aggrResultSet) throws DataException, IOException {
  super(aggregation,aggrResultSet);
  keyLevelIndex=getKeyLevelIndexs(aggrResultSet.getAllLevels());
  facttableRow=new FacttableRow(getMeasureInfo());
  needMultiplePass=needMultiplePass(aggregation);
}","RunningFunctionCalculator(AggregationDefinition aggregation,IAggregationResultSet aggrResultSet) throws DataException, IOException {
  super(aggregation,aggrResultSet);
  if (aggrResultSet.getAllLevels() != null) {
    keyLevelIndex=getKeyLevelIndexs(aggrResultSet.getAllLevels());
  }
 else {
    keyLevelIndex=null;
  }
  facttableRow=new FacttableRow(getMeasureInfo());
  needMultiplePass=needMultiplePass(aggregation);
}",0.8842105263157894
70177,"public IAggregationResultSet execute(StopSign stopSign) throws IOException, DataException {
  AggregationResultRowComparator comparator=new AggregationResultRowComparator(getKeyLevelIndexs(aggregation.getLevels()));
  SortedAggregationRowArray sortedRows=new SortedAggregationRowArray(aggrResultSet,aggregation.getLevels());
  IDiskArray result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  if (aggrResultSet.length() <= 0) {
    return getAggregationResultSet(result);
  }
  IAggregationResultRow lastRow=sortedRows.get(0);
  IAggregationResultRow currentRow=null;
  int lastIndex=0;
  onRow(lastRow);
  if (!needMultiplePass) {
    addOneResultRow(result,lastRow);
  }
  for (int i=1; !stopSign.isStopped() && i < sortedRows.size(); i++) {
    currentRow=sortedRows.get(i);
    if (comparator.compare(currentRow,lastRow) != 0) {
      if (needMultiplePass) {
        secondPass(sortedRows,result,lastIndex,i);
        lastIndex=i;
      }
      createAccumulators();
    }
    onRow(currentRow);
    if (!needMultiplePass) {
      addOneResultRow(result,currentRow);
    }
    lastRow=currentRow;
  }
  if (needMultiplePass) {
    secondPass(sortedRows,result,lastIndex,sortedRows.size());
  }
  return getAggregationResultSet(result);
}","public IAggregationResultSet execute(StopSign stopSign) throws IOException, DataException {
  AggregationResultRowComparator comparator=null;
  if (aggregation.getLevels() != null) {
    comparator=new AggregationResultRowComparator(getKeyLevelIndexs(aggregation.getLevels()));
  }
  SortedAggregationRowArray sortedRows=new SortedAggregationRowArray(aggrResultSet,aggregation.getLevels());
  IDiskArray result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  if (aggrResultSet.length() <= 0) {
    return getAggregationResultSet(result);
  }
  IAggregationResultRow lastRow=sortedRows.get(0);
  IAggregationResultRow currentRow=null;
  int lastIndex=0;
  onRow(lastRow);
  if (!needMultiplePass) {
    addOneResultRow(result,lastRow);
  }
  for (int i=1; !stopSign.isStopped() && i < sortedRows.size(); i++) {
    currentRow=sortedRows.get(i);
    if (comparator != null && comparator.compare(currentRow,lastRow) != 0) {
      if (needMultiplePass) {
        secondPass(sortedRows,result,lastIndex,i);
        lastIndex=i;
      }
      createAccumulators();
    }
    onRow(currentRow);
    if (!needMultiplePass) {
      addOneResultRow(result,currentRow);
    }
    lastRow=currentRow;
  }
  if (needMultiplePass) {
    secondPass(sortedRows,result,lastIndex,sortedRows.size());
  }
  return getAggregationResultSet(result);
}",0.9668924003009782
70178,"SimpleFunctionCalculator(AggregationDefinition aggregation,IAggregationResultSet aggrResultSet) throws DataException, IOException {
  super(aggregation,aggrResultSet);
  keyLevelIndex=getKeyLevelIndexs(aggregation.getLevels());
  facttableRow=new FacttableRow(getMeasureInfo());
}","SimpleFunctionCalculator(AggregationDefinition aggregation,IAggregationResultSet aggrResultSet) throws DataException, IOException {
  super(aggregation,aggrResultSet);
  if (aggregation.getLevels() != null) {
    keyLevelIndex=getKeyLevelIndexs(aggregation.getLevels());
  }
 else {
    keyLevelIndex=null;
  }
  facttableRow=new FacttableRow(getMeasureInfo());
}",0.8709175738724728
70179,"public IAggregationResultSet execute(StopSign stopSign) throws IOException, DataException {
  AggregationResultRowComparator comparator=new AggregationResultRowComparator(keyLevelIndex);
  SortedAggregationRowArray sortedRows=new SortedAggregationRowArray(aggrResultSet,aggregation.getLevels());
  IDiskArray result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  if (aggrResultSet.length() <= 0) {
    return getAggregationResultSet(result);
  }
  IAggregationResultRow lastRow=sortedRows.get(0);
  IAggregationResultRow currentRow=null;
  AggregationResultRow resultRow=newAggregationResultRow(lastRow);
  if (accumulators != null) {
    for (int i=0; i < accumulators.length; i++) {
      accumulators[i].start();
    }
  }
  onRow(lastRow);
  for (int i=1; !stopSign.isStopped() && i < sortedRows.size(); i++) {
    currentRow=sortedRows.get(i);
    if (comparator.compare(currentRow,lastRow) != 0) {
      if (accumulators != null) {
        for (int j=0; j < accumulators.length; j++) {
          accumulators[j].finish();
          resultRow.getAggregationValues()[j]=accumulators[j].getValue();
          accumulators[j].start();
        }
      }
      result.add(resultRow);
      resultRow=newAggregationResultRow(currentRow);
    }
    onRow(currentRow);
    lastRow=currentRow;
  }
  if (accumulators != null) {
    for (int j=0; j < accumulators.length; j++) {
      accumulators[j].finish();
      resultRow.getAggregationValues()[j]=accumulators[j].getValue();
    }
  }
  result.add(resultRow);
  return getAggregationResultSet(result);
}","public IAggregationResultSet execute(StopSign stopSign) throws IOException, DataException {
  AggregationResultRowComparator comparator=null;
  if (keyLevelIndex != null) {
    comparator=new AggregationResultRowComparator(keyLevelIndex);
  }
  SortedAggregationRowArray sortedRows=new SortedAggregationRowArray(aggrResultSet,aggregation.getLevels());
  IDiskArray result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  if (aggrResultSet.length() <= 0) {
    return getAggregationResultSet(result);
  }
  IAggregationResultRow lastRow=sortedRows.get(0);
  IAggregationResultRow currentRow=null;
  AggregationResultRow resultRow=newAggregationResultRow(lastRow);
  if (accumulators != null) {
    for (int i=0; i < accumulators.length; i++) {
      accumulators[i].start();
    }
  }
  onRow(lastRow);
  for (int i=1; !stopSign.isStopped() && i < sortedRows.size(); i++) {
    currentRow=sortedRows.get(i);
    if (comparator != null && comparator.compare(currentRow,lastRow) != 0) {
      if (accumulators != null) {
        for (int j=0; j < accumulators.length; j++) {
          accumulators[j].finish();
          resultRow.getAggregationValues()[j]=accumulators[j].getValue();
          accumulators[j].start();
        }
      }
      result.add(resultRow);
      resultRow=newAggregationResultRow(currentRow);
    }
    onRow(currentRow);
    lastRow=currentRow;
  }
  if (accumulators != null) {
    for (int j=0; j < accumulators.length; j++) {
      accumulators[j].finish();
      resultRow.getAggregationValues()[j]=accumulators[j].getValue();
    }
  }
  result.add(resultRow);
  return getAggregationResultSet(result);
}",0.9548229548229548
70180,"public SortedAggregationRowArray(IAggregationResultSet aggregationResultSet,DimLevel[] keyLevels) throws IOException {
  this.aggregationResultSet=aggregationResultSet;
  if (needReSort(keyLevels)) {
    sort(keyLevels);
  }
}","public SortedAggregationRowArray(IAggregationResultSet aggregationResultSet,DimLevel[] keyLevels) throws IOException {
  this.aggregationResultSet=aggregationResultSet;
  if (keyLevels != null && needReSort(keyLevels)) {
    sort(keyLevels);
  }
}",0.955602536997886
70181,"/** 
 * Adds the measreview handle to the CrosstabReportItemHandle.
 * @param reportHandle
 * @param measureHandle
 * @param position
 * @throws SemanticException
 */
public static void addMeasureHandle(CrosstabReportItemHandle reportHandle,MeasureHandle measureHandle,int position) throws SemanticException {
  MeasureViewHandle measureViewHandle=reportHandle.insertMeasure(measureHandle,position);
  measureViewHandle.addHeader();
  LabelHandle labelHandle=DesignElementFactory.getInstance().newLabel(null);
  labelHandle.setText(measureHandle.getName());
  measureViewHandle.getHeader().addContent(labelHandle);
}","/** 
 * Adds the measreview handle to the CrosstabReportItemHandle.
 * @param reportHandle
 * @param measureHandle
 * @param position
 * @throws SemanticException
 */
public static void addMeasureHandle(CrosstabReportItemHandle reportHandle,MeasureHandle measureHandle,int position) throws SemanticException {
  MeasureViewHandle measureViewHandle=reportHandle.insertMeasure(measureHandle,position);
  measureViewHandle.addHeader();
}",0.8266666666666667
70182,"private int addMesureHeader(List list,int baseColumn,int area,List measures){
  if (isVertical() && area == ICrosstabConstants.COLUMN_AXIS_TYPE) {
    return 0;
  }
 else   if (!isVertical() && area == ICrosstabConstants.ROW_AXIS_TYPE) {
    return 0;
  }
  int measureCount=measures.size();
  if (isHideHeader()) {
    return measureCount;
  }
  for (int k=0; k < measureCount; k++) {
    MeasureViewHandle preMmeasureHandle=(MeasureViewHandle)measures.get(k);
    CrosstabCellHandle preMeasureCellHandle=preMmeasureHandle.getHeader();
    CrosstabCellAdapter measureCellAdapt=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER,preMeasureCellHandle,1,-1,baseColumn + k + 1,-1,isVertical());
    list.add(measureCellAdapt);
  }
  return measureCount;
}","private int addMesureHeader(List list,int baseColumn,int area,List measures,LevelViewHandle levelHandle){
  if (isVertical() && area == ICrosstabConstants.COLUMN_AXIS_TYPE) {
    return 0;
  }
 else   if (!isVertical() && area == ICrosstabConstants.ROW_AXIS_TYPE) {
    return 0;
  }
  int measureCount=measures.size();
  if (isHideHeader()) {
    return measureCount;
  }
  for (int k=0; k < measureCount; k++) {
    MeasureViewHandle preMmeasureHandle=(MeasureViewHandle)measures.get(k);
    CrosstabCellHandle preMeasureCellHandle=preMmeasureHandle.getHeader(levelHandle);
    CrosstabCellAdapter measureCellAdapt=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER,preMeasureCellHandle,1,-1,baseColumn + k + 1,-1,isVertical());
    list.add(measureCellAdapt);
  }
  return measureCount;
}",0.9757009345794392
70183,"private List buildRowArea(){
  List retValue=new ArrayList();
  CrosstabReportItemHandle handle=getCrosstabReportItemHandle();
  int count=handle.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE);
  int measureCount=handle.getMeasureCount();
  int columnNumber=measureCount == 0 ? 1 : 2;
  if (!isVertical() || isHideHeader()) {
    columnNumber=1;
  }
  List measureHandleList=getMeasreViewHandleList();
  int rowNumber=0;
  if (count != 0) {
    rowNumber=addMesureHeader(retValue,0,ICrosstabConstants.ROW_AXIS_TYPE,measureHandleList);
  }
  if (rowNumber == 0) {
    rowNumber=1;
  }
  for (int i=count - 1; i >= 0; i--) {
    DimensionViewHandle dimensionHandle=handle.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i);
    int levelCount=dimensionHandle.getLevelCount();
    for (int j=levelCount - 1; j >= 0; j--) {
      LevelViewHandle levelHandle=dimensionHandle.getLevel(j);
      CrosstabCellHandle cellHandle=levelHandle.getCell();
      String type=j == 0 ? ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE : ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE;
      CrosstabCellAdapter cellAdapter=factory.createCrosstabCellAdapter(type,cellHandle,1,rowNumber,columnNumber,-1,false);
      retValue.add(cellAdapter);
      map.put(levelHandle,Integer.valueOf(rowNumber));
      LevelViewHandle preLevelHandle=getPreviousLevelViewHandle(dimensionHandle,levelHandle);
      if (preLevelHandle != null && preLevelHandle.getAggregationHeader() != null) {
        List list=preLevelHandle.getAggregationMeasures();
        if (list.size() != 0) {
          int preMeasureCount=list.size();
          CrosstabCellHandle preCellHandle=preLevelHandle.getAggregationHeader();
          CrosstabCellAdapter preCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_SUB_TOTAL,preCellHandle,rowNumber + 1,isVertical() ? preMeasureCount : 1,columnNumber,columnNumber - (isVertical() && !isHideHeader() ? 1 : 0),false);
          retValue.add(preCellAdapter);
          int addCount=addMesureHeader(retValue,rowNumber,ICrosstabConstants.ROW_AXIS_TYPE,list);
          rowNumber=rowNumber + (addCount == 0 ? 1 : addCount);
        }
      }
      if (j != 0 || i != 0) {
        columnNumber=columnNumber + 1;
      }
    }
  }
  CrosstabCellHandle grandCell=handle.getGrandTotal(ICrosstabConstants.ROW_AXIS_TYPE);
  if (grandCell != null && !retValue.isEmpty()) {
    List list=handle.getAggregationMeasures(ICrosstabConstants.ROW_AXIS_TYPE);
    int size=list.size();
    if (size > 0) {
      CrosstabCellAdapter grandCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_GRAND_TOTAL,grandCell,rowNumber + 1,isVertical() ? size : 1,columnNumber,columnNumber - (isVertical() && !isHideHeader() ? 1 : 0),false);
      retValue.add(grandCellAdapter);
      int beforeRowNumber=rowNumber;
      int addCount=addMesureHeader(retValue,rowNumber,ICrosstabConstants.ROW_AXIS_TYPE,list);
      rowNumber=rowNumber + (addCount == 0 ? 1 : addCount);
      if (isGrandBefore(ICrosstabConstants.ROW_AXIS_TYPE)) {
        adjustGrandRow=rowNumber - beforeRowNumber;
      }
    }
  }
  if (retValue.isEmpty()) {
    CrosstabCellAdapter columnVirtual=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_ROW_VIRTUAL,null,1,-1,1,-1,false);
    retValue.add(columnVirtual);
    columnNumber=1;
    rowNumber=1;
  }
  map.put(ROWAREA_COLUMN,Integer.valueOf(columnNumber));
  map.put(ROWAREA_ROW,Integer.valueOf(rowNumber));
  covertColumnNumber(columnNumber,retValue);
  return retValue;
}","private List buildRowArea(){
  List retValue=new ArrayList();
  CrosstabReportItemHandle handle=getCrosstabReportItemHandle();
  int count=handle.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE);
  int measureCount=handle.getMeasureCount();
  int columnNumber=measureCount == 0 ? 1 : 2;
  if (!isVertical() || isHideHeader()) {
    columnNumber=1;
  }
  List measureHandleList=getMeasreViewHandleList();
  int rowNumber=0;
  if (count != 0) {
    LevelViewHandle lastHandle=findLastLevelViewHandle(ICrosstabConstants.ROW_AXIS_TYPE);
    if (lastHandle == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    rowNumber=addMesureHeader(retValue,0,ICrosstabConstants.ROW_AXIS_TYPE,measureHandleList,lastHandle);
  }
  if (rowNumber == 0) {
    rowNumber=1;
  }
  for (int i=count - 1; i >= 0; i--) {
    DimensionViewHandle dimensionHandle=handle.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i);
    int levelCount=dimensionHandle.getLevelCount();
    for (int j=levelCount - 1; j >= 0; j--) {
      LevelViewHandle levelHandle=dimensionHandle.getLevel(j);
      CrosstabCellHandle cellHandle=levelHandle.getCell();
      String type=j == 0 ? ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE : ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE;
      CrosstabCellAdapter cellAdapter=factory.createCrosstabCellAdapter(type,cellHandle,1,rowNumber,columnNumber,-1,false);
      retValue.add(cellAdapter);
      map.put(levelHandle,Integer.valueOf(rowNumber));
      LevelViewHandle preLevelHandle=getPreviousLevelViewHandle(dimensionHandle,levelHandle);
      if (preLevelHandle != null && preLevelHandle.getAggregationHeader() != null) {
        List list=preLevelHandle.getAggregationMeasures();
        if (list.size() != 0) {
          int preMeasureCount=list.size();
          CrosstabCellHandle preCellHandle=preLevelHandle.getAggregationHeader();
          CrosstabCellAdapter preCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_SUB_TOTAL,preCellHandle,rowNumber + 1,isVertical() ? preMeasureCount : 1,columnNumber,columnNumber - (isVertical() && !isHideHeader() ? 1 : 0),false);
          retValue.add(preCellAdapter);
          int addCount=addMesureHeader(retValue,rowNumber,ICrosstabConstants.ROW_AXIS_TYPE,list,preLevelHandle);
          rowNumber=rowNumber + (addCount == 0 ? 1 : addCount);
        }
      }
      if (j != 0 || i != 0) {
        columnNumber=columnNumber + 1;
      }
    }
  }
  CrosstabCellHandle grandCell=handle.getGrandTotal(ICrosstabConstants.ROW_AXIS_TYPE);
  if (grandCell != null && !retValue.isEmpty()) {
    List list=handle.getAggregationMeasures(ICrosstabConstants.ROW_AXIS_TYPE);
    int size=list.size();
    if (size > 0) {
      CrosstabCellAdapter grandCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_GRAND_TOTAL,grandCell,rowNumber + 1,isVertical() ? size : 1,columnNumber,columnNumber - (isVertical() && !isHideHeader() ? 1 : 0),false);
      retValue.add(grandCellAdapter);
      int beforeRowNumber=rowNumber;
      int addCount=addMesureHeader(retValue,rowNumber,ICrosstabConstants.ROW_AXIS_TYPE,list,null);
      rowNumber=rowNumber + (addCount == 0 ? 1 : addCount);
      if (isGrandBefore(ICrosstabConstants.ROW_AXIS_TYPE)) {
        adjustGrandRow=rowNumber - beforeRowNumber;
      }
    }
  }
  if (retValue.isEmpty()) {
    CrosstabCellAdapter columnVirtual=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_ROW_VIRTUAL,null,1,-1,1,-1,false);
    retValue.add(columnVirtual);
    columnNumber=1;
    rowNumber=1;
  }
  map.put(ROWAREA_COLUMN,Integer.valueOf(columnNumber));
  map.put(ROWAREA_ROW,Integer.valueOf(rowNumber));
  covertColumnNumber(columnNumber,retValue);
  return retValue;
}",0.9195054945054943
70184,"private List buildColumnArea(){
  List retValue=new ArrayList();
  CrosstabReportItemHandle handle=getCrosstabReportItemHandle();
  int count=handle.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE);
  int measureCount=handle.getMeasureCount();
  int rowNumber=measureCount == 0 ? 1 : 2;
  if (isVertical() || isHideHeader()) {
    rowNumber=1;
  }
  List measureHandleList=getMeasreViewHandleList();
  int columnNumber=0;
  if (count != 0) {
    columnNumber=addMesureHeader(retValue,0,ICrosstabConstants.COLUMN_AXIS_TYPE,measureHandleList);
  }
  if (columnNumber == 0) {
    columnNumber=1;
  }
  for (int i=count - 1; i >= 0; i--) {
    DimensionViewHandle dimensionHandle=handle.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i);
    int levelCount=dimensionHandle.getLevelCount();
    for (int j=levelCount - 1; j >= 0; j--) {
      LevelViewHandle levelHandle=dimensionHandle.getLevel(j);
      CrosstabCellHandle cellHandle=levelHandle.getCell();
      String type=j == 0 ? ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE : ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE;
      CrosstabCellAdapter cellAdapter=factory.createCrosstabCellAdapter(type,cellHandle,rowNumber,1,1,columnNumber,false);
      retValue.add(cellAdapter);
      map.put(levelHandle,Integer.valueOf(columnNumber));
      LevelViewHandle preLevelHandle=getPreviousLevelViewHandle(dimensionHandle,levelHandle);
      if (preLevelHandle != null && preLevelHandle.getAggregationHeader() != null) {
        List list=preLevelHandle.getAggregationMeasures();
        if (list.size() != 0) {
          int preMeasureCount=list.size();
          CrosstabCellHandle preCellHandle=preLevelHandle.getAggregationHeader();
          CrosstabCellAdapter preCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_SUB_TOTAL,preCellHandle,rowNumber,rowNumber - (isVertical() || isHideHeader() ? 0 : 1),columnNumber + 1,isVertical() ? 1 : preMeasureCount,false);
          retValue.add(preCellAdapter);
          int addCount=addMesureHeader(retValue,columnNumber,ICrosstabConstants.COLUMN_AXIS_TYPE,list);
          columnNumber=columnNumber + (addCount == 0 ? 1 : addCount);
        }
      }
      if (j != 0 || i != 0) {
        rowNumber=rowNumber + 1;
      }
    }
  }
  CrosstabCellHandle grandCell=handle.getGrandTotal(ICrosstabConstants.COLUMN_AXIS_TYPE);
  if (grandCell != null && !retValue.isEmpty()) {
    List list=handle.getAggregationMeasures(ICrosstabConstants.COLUMN_AXIS_TYPE);
    int size=list.size();
    if (size > 0) {
      CrosstabCellAdapter grandCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_GRAND_TOTAL,grandCell,rowNumber,rowNumber - (isVertical() || isHideHeader() ? 0 : 1),columnNumber + 1,isVertical() ? 1 : size,false);
      retValue.add(grandCellAdapter);
      int addCount=addMesureHeader(retValue,columnNumber,ICrosstabConstants.COLUMN_AXIS_TYPE,list);
      int beforeColumnNumber=columnNumber;
      columnNumber=columnNumber + (addCount == 0 ? 1 : addCount);
      if (isGrandBefore(ICrosstabConstants.COLUMN_AXIS_TYPE)) {
        adjustGrandColumn=columnNumber - beforeColumnNumber;
      }
    }
  }
  if (retValue.isEmpty()) {
    CrosstabCellAdapter columnVirtual=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_COLUMN_VIRTUAL,null,1,-1,1,-1,false);
    retValue.add(columnVirtual);
    columnNumber=1;
    rowNumber=1;
  }
  map.put(COLUMNAREA_COLUMN,Integer.valueOf(columnNumber));
  map.put(COLUMNAREA_ROW,Integer.valueOf(rowNumber));
  covertRowNumber(rowNumber,retValue);
  return retValue;
}","private List buildColumnArea(){
  List retValue=new ArrayList();
  CrosstabReportItemHandle handle=getCrosstabReportItemHandle();
  int count=handle.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE);
  int measureCount=handle.getMeasureCount();
  int rowNumber=measureCount == 0 ? 1 : 2;
  if (isVertical() || isHideHeader()) {
    rowNumber=1;
  }
  List measureHandleList=getMeasreViewHandleList();
  int columnNumber=0;
  if (count != 0) {
    LevelViewHandle lastHandle=findLastLevelViewHandle(ICrosstabConstants.COLUMN_AXIS_TYPE);
    if (lastHandle == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    columnNumber=addMesureHeader(retValue,0,ICrosstabConstants.COLUMN_AXIS_TYPE,measureHandleList,lastHandle);
  }
  if (columnNumber == 0) {
    columnNumber=1;
  }
  for (int i=count - 1; i >= 0; i--) {
    DimensionViewHandle dimensionHandle=handle.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i);
    int levelCount=dimensionHandle.getLevelCount();
    for (int j=levelCount - 1; j >= 0; j--) {
      LevelViewHandle levelHandle=dimensionHandle.getLevel(j);
      CrosstabCellHandle cellHandle=levelHandle.getCell();
      String type=j == 0 ? ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE : ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE;
      CrosstabCellAdapter cellAdapter=factory.createCrosstabCellAdapter(type,cellHandle,rowNumber,1,1,columnNumber,false);
      retValue.add(cellAdapter);
      map.put(levelHandle,Integer.valueOf(columnNumber));
      LevelViewHandle preLevelHandle=getPreviousLevelViewHandle(dimensionHandle,levelHandle);
      if (preLevelHandle != null && preLevelHandle.getAggregationHeader() != null) {
        List list=preLevelHandle.getAggregationMeasures();
        if (list.size() != 0) {
          int preMeasureCount=list.size();
          CrosstabCellHandle preCellHandle=preLevelHandle.getAggregationHeader();
          CrosstabCellAdapter preCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_SUB_TOTAL,preCellHandle,rowNumber,rowNumber - (isVertical() || isHideHeader() ? 0 : 1),columnNumber + 1,isVertical() ? 1 : preMeasureCount,false);
          retValue.add(preCellAdapter);
          int addCount=addMesureHeader(retValue,columnNumber,ICrosstabConstants.COLUMN_AXIS_TYPE,list,preLevelHandle);
          columnNumber=columnNumber + (addCount == 0 ? 1 : addCount);
        }
      }
      if (j != 0 || i != 0) {
        rowNumber=rowNumber + 1;
      }
    }
  }
  CrosstabCellHandle grandCell=handle.getGrandTotal(ICrosstabConstants.COLUMN_AXIS_TYPE);
  if (grandCell != null && !retValue.isEmpty()) {
    List list=handle.getAggregationMeasures(ICrosstabConstants.COLUMN_AXIS_TYPE);
    int size=list.size();
    if (size > 0) {
      CrosstabCellAdapter grandCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_GRAND_TOTAL,grandCell,rowNumber,rowNumber - (isVertical() || isHideHeader() ? 0 : 1),columnNumber + 1,isVertical() ? 1 : size,false);
      retValue.add(grandCellAdapter);
      int addCount=addMesureHeader(retValue,columnNumber,ICrosstabConstants.COLUMN_AXIS_TYPE,list,null);
      int beforeColumnNumber=columnNumber;
      columnNumber=columnNumber + (addCount == 0 ? 1 : addCount);
      if (isGrandBefore(ICrosstabConstants.COLUMN_AXIS_TYPE)) {
        adjustGrandColumn=columnNumber - beforeColumnNumber;
      }
    }
  }
  if (retValue.isEmpty()) {
    CrosstabCellAdapter columnVirtual=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_COLUMN_VIRTUAL,null,1,-1,1,-1,false);
    retValue.add(columnVirtual);
    columnNumber=1;
    rowNumber=1;
  }
  map.put(COLUMNAREA_COLUMN,Integer.valueOf(columnNumber));
  map.put(COLUMNAREA_ROW,Integer.valueOf(rowNumber));
  covertRowNumber(rowNumber,retValue);
  return retValue;
}",0.915212981744422
70185,"/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  plugin=null;
}","/** 
 * This method is called when the plug-in is stopped
 */
public void stop(BundleContext context) throws Exception {
  super.stop(context);
  plugin=null;
  CrosstabModelUtil.setCrosstabModelListener(null);
}",0.8602150537634409
70186,"/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(PREFERENCE_FILTER_LIMIT,FILTER_LIMIT_DEFAULT);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(PREFERENCE_AUTO_DEL_BINDINGS,AUTO_DEL_BINDING_DEFAULT);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(CUBE_BUILDER_WARNING_PREFERENCE,MessageDialogWithToggle.PROMPT);
}","/** 
 * This method is called upon plug-in activation
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(PREFERENCE_FILTER_LIMIT,FILTER_LIMIT_DEFAULT);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(PREFERENCE_AUTO_DEL_BINDINGS,AUTO_DEL_BINDING_DEFAULT);
  PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault()).setDefault(CUBE_BUILDER_WARNING_PREFERENCE,MessageDialogWithToggle.PROMPT);
  CrosstabModelUtil.setCrosstabModelListener(new ICrosstabModelListener(){
    public void onCreated(    int type,    Object model){
      if (type == ICrosstabModelListener.MEASURE_HEADER && model instanceof CrosstabCellHandle) {
        CrosstabCellHandle cellHandle=((CrosstabCellHandle)model);
        if (cellHandle.getContents().size() > 0) {
          return;
        }
        LabelHandle labelHandle=DesignElementFactory.getInstance().newLabel(null);
        try {
          labelHandle.setText(((MeasureViewHandle)cellHandle.getContainer()).getCubeMeasureName());
          cellHandle.addContent(labelHandle);
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
      }
    }
  }
);
}",0.6103484688489969
70187,"/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public DateGroupCalculator(Object intervalStart,double intervalRange) throws BirtException {
  super(intervalStart,intervalRange);
  range=(int)Math.round(intervalRange);
  range=(range == 0 ? 1 : range);
  if (intervalStart != null)   this.intervalStart=DataTypeUtil.toDate(intervalStart);
}","/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public DateGroupCalculator(Object intervalStart,double intervalRange,ULocale locale) throws BirtException {
  super(intervalStart,intervalRange);
  range=(int)Math.round(intervalRange);
  range=(range == 0 ? 1 : range);
  if (intervalStart != null)   this.intervalStart=DataTypeUtil.toDate(intervalStart);
  this.locale=locale == null ? ULocale.getDefault() : locale;
  Calendar c=Calendar.getInstance(this.locale);
  c.clear();
  c.set(1970,0,1);
  defaultStart=c.getTime();
  this.dateTimeUtil=new DateTimeUtil(this.locale);
}",0.7601626016260162
70188,"/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public DayGroupCalculator(Object intervalStart,double intervalRange) throws BirtException {
  super(intervalStart,intervalRange);
}","/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public DayGroupCalculator(Object intervalStart,double intervalRange,ULocale locale) throws BirtException {
  super(intervalStart,intervalRange,locale);
}",0.9508928571428572
70189,"public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffDay(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffDay((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffDay((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(this.dateTimeUtil.diffDay(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (this.dateTimeUtil.diffDay((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(this.dateTimeUtil.diffDay((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.9801324503311258
70190,"/** 
 * @param interval
 * @param intervalStart
 * @param intervalRange
 * @return
 * @throws DataException
 */
public static ICalculator getGroupCalculator(int interval,Object intervalStart,double intervalRange,int dataType) throws DataException {
  validateInterval(interval,dataType);
  validateIntervalRange(intervalRange);
  try {
switch (interval) {
case IGroupDefinition.YEAR_INTERVAL:
      return new YearGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.MONTH_INTERVAL:
    return new MonthGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.QUARTER_INTERVAL:
  return new QuarterGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.WEEK_INTERVAL:
return new WeekGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.DAY_INTERVAL:
return new DayGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.HOUR_INTERVAL:
return new HourGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.MINUTE_INTERVAL:
return new MinuteGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.SECOND_INTERVAL:
return new SecondGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.NUMERIC_INTERVAL:
return new NumericGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.STRING_PREFIX_INTERVAL:
return new StringGroupCalculator(intervalStart,intervalRange);
default :
throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_INVALID);
}
}
 catch (BirtException be) {
throw DataException.wrap(be);
}
}","/** 
 * @param interval
 * @param intervalStart
 * @param intervalRange
 * @return
 * @throws DataException
 */
public static ICalculator getGroupCalculator(int interval,Object intervalStart,double intervalRange,int dataType,ULocale locale) throws DataException {
  validateInterval(interval,dataType);
  validateIntervalRange(intervalRange);
  try {
switch (interval) {
case IGroupDefinition.YEAR_INTERVAL:
      return new YearGroupCalculator(intervalStart,intervalRange,locale);
case IGroupDefinition.MONTH_INTERVAL:
    return new MonthGroupCalculator(intervalStart,intervalRange,locale);
case IGroupDefinition.QUARTER_INTERVAL:
  return new QuarterGroupCalculator(intervalStart,intervalRange,locale);
case IGroupDefinition.WEEK_INTERVAL:
return new WeekGroupCalculator(intervalStart,intervalRange,locale);
case IGroupDefinition.DAY_INTERVAL:
return new DayGroupCalculator(intervalStart,intervalRange,locale);
case IGroupDefinition.HOUR_INTERVAL:
return new HourGroupCalculator(intervalStart,intervalRange,locale);
case IGroupDefinition.MINUTE_INTERVAL:
return new MinuteGroupCalculator(intervalStart,intervalRange,locale);
case IGroupDefinition.SECOND_INTERVAL:
return new SecondGroupCalculator(intervalStart,intervalRange,locale);
case IGroupDefinition.NUMERIC_INTERVAL:
return new NumericGroupCalculator(intervalStart,intervalRange);
case IGroupDefinition.STRING_PREFIX_INTERVAL:
return new StringGroupCalculator(intervalStart,intervalRange);
default :
throw new DataException(ResourceConstants.BAD_GROUP_INTERVAL_INVALID);
}
}
 catch (BirtException be) {
throw DataException.wrap(be);
}
}",0.9772508811278436
70191,"/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public HourGroupCalculator(Object intervalStart,double intervalRange) throws BirtException {
  super(intervalStart,intervalRange);
}","/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public HourGroupCalculator(Object intervalStart,double intervalRange,ULocale locale) throws BirtException {
  super(intervalStart,intervalRange,locale);
}",0.9511111111111112
70192,"public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffHour(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffHour((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffHour((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(this.dateTimeUtil.diffHour(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (this.dateTimeUtil.diffHour((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(this.dateTimeUtil.diffHour((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.980244590780809
70193,"/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public MinuteGroupCalculator(Object intervalStart,double intervalRange) throws BirtException {
  super(intervalStart,intervalRange);
}","/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public MinuteGroupCalculator(Object intervalStart,double intervalRange,ULocale locale) throws BirtException {
  super(intervalStart,intervalRange,locale);
}",0.9515418502202644
70194,"public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffMinute(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffMinute((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffMinute((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(this.dateTimeUtil.diffMinute(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (this.dateTimeUtil.diffMinute((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(this.dateTimeUtil.diffMinute((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.9804651162790696
70195,"/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public MonthGroupCalculator(Object intervalStart,double intervalRange) throws BirtException {
  super(intervalStart,intervalRange);
}","/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public MonthGroupCalculator(Object intervalStart,double intervalRange,ULocale locale) throws BirtException {
  super(intervalStart,intervalRange,locale);
}",0.9513274336283186
70196,"public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffMonth(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffMonth((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffMonth((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(this.dateTimeUtil.diffMonth(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (this.dateTimeUtil.diffMonth((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(this.dateTimeUtil.diffMonth((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.980355472404116
70197,"/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public QuarterGroupCalculator(Object intervalStart,double intervalRange) throws BirtException {
  super(intervalStart,intervalRange);
}","/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public QuarterGroupCalculator(Object intervalStart,double intervalRange,ULocale locale) throws BirtException {
  super(intervalStart,intervalRange,locale);
}",0.9517543859649122
70198,"public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffQuarter(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffQuarter((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffQuarter((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(this.dateTimeUtil.diffQuarter(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (this.dateTimeUtil.diffQuarter((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(this.dateTimeUtil.diffQuarter((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.9805735430157262
70199,"public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(DateTimeUtil.diffSecond(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (DateTimeUtil.diffSecond((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(DateTimeUtil.diffSecond((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}","public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  Date target=getDate(value);
  if (intervalStart == null) {
    return new Double(Math.floor(this.dateTimeUtil.diffSecond(defaultStart,target) / getDateIntervalRange()));
  }
 else {
    if (this.dateTimeUtil.diffSecond((Date)intervalStart,target) < 0) {
      return new Double(-1);
    }
 else {
      return new Double(Math.floor(this.dateTimeUtil.diffSecond((Date)intervalStart,target) / getDateIntervalRange()));
    }
  }
}",0.9804651162790696
70200,"/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public SecondGroupCalculator(Object intervalStart,double intervalRange) throws BirtException {
  super(intervalStart,intervalRange);
}","/** 
 * @param intervalStart
 * @param intervalRange
 * @throws BirtException
 */
public SecondGroupCalculator(Object intervalStart,double intervalRange,ULocale locale) throws BirtException {
  super(intervalStart,intervalRange,locale);
}",0.9515418502202644
70201,"/** 
 * @param keyLevels
 * @return
 */
protected int[] getKeyLevelIndexs(DimLevel[] keyLevels){
  int[] keyLevelIndexes=new int[keyLevels.length];
  DimLevel[] allLevels=aggrResultSet.getAllLevels();
  for (int i=0; i < keyLevels.length; i++) {
    for (int j=0; j < allLevels.length; j++) {
      if (keyLevels[i].equals(allLevels[j]))       keyLevelIndexes[i]=j;
    }
  }
  return keyLevelIndexes;
}","/** 
 * @param keyLevels
 * @return
 * @throws DataException 
 */
protected int[] getKeyLevelIndexs(DimLevel[] keyLevels) throws DataException {
  int[] keyLevelIndexes=new int[keyLevels.length];
  DimLevel[] allLevels=aggrResultSet.getAllLevels();
  for (int i=0; i < keyLevels.length; i++) {
    keyLevelIndexes[i]=-1;
    for (int j=0; j < allLevels.length; j++) {
      if (keyLevels[i].equals(allLevels[j]))       keyLevelIndexes[i]=j;
    }
    if (keyLevelIndexes[i] == -1) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_LEVEL) + keyLevels[i].getLevelName());
    }
  }
  return keyLevelIndexes;
}",0.7560975609756098
70202,"/** 
 * Initializes the CSV options based on the data extraction option. If the passed option doesn't contain common options, use default values.
 * @param option options
 */
private void initCsvOptions(IDataExtractionOption options){
  this.outputStream=options.getOutputStream();
  ICSVDataExtractionOption csvOptions;
  if (options instanceof ICSVDataExtractionOption) {
    csvOptions=(ICSVDataExtractionOption)options;
  }
 else {
    csvOptions=new CSVDataExtractionOption(options.getOptions());
  }
  encoding=csvOptions.getEncoding();
  if (encoding == null || ""String_Node_Str"".equals(encoding.trim())) {
    encoding=null;
  }
 else {
    encoding=encoding.trim();
  }
  if (encoding == null) {
    encoding=DEFAULT_ENCODING;
  }
  sep=csvOptions.getSeparator();
  if (sep == null || ""String_Node_Str"".equals(sep)) {
    sep=ICSVDataExtractionOption.SEPARATOR_COMMA;
  }
  isExportDataType=csvOptions.isExportDataType();
  selectedColumnNames=(String[])csvOptions.getSelectedColumns();
}","/** 
 * Initializes the CSV options based on the data extraction option. If the passed option doesn't contain common options, use default values.
 * @param option options
 */
private void initCsvOptions(IDataExtractionOption options){
  this.outputStream=options.getOutputStream();
  ICSVDataExtractionOption csvOptions;
  if (options instanceof ICSVDataExtractionOption) {
    csvOptions=(ICSVDataExtractionOption)options;
  }
 else {
    csvOptions=new CSVDataExtractionOption(options.getOptions());
  }
  encoding=csvOptions.getEncoding();
  if (encoding == null || ""String_Node_Str"".equals(encoding.trim())) {
    encoding=null;
  }
 else {
    encoding=encoding.trim();
  }
  if (encoding == null) {
    encoding=DEFAULT_ENCODING;
  }
  sep=csvOptions.getSeparator();
  if (sep == null || ""String_Node_Str"".equals(sep)) {
    sep=ICSVDataExtractionOption.SEPARATOR_COMMA;
  }
  isExportDataType=csvOptions.isExportDataType();
  selectedColumnNames=csvOptions.getSelectedColumns();
}",0.9949596774193548
70203,"protected void readImageField(DataInputStream in,ImageItemDesign image,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_IMAGE_SOURCE:
    int imageSource=IOUtil.readInt(in);
switch (imageSource) {
case ImageItemDesign.IMAGE_NAME:
    String imageName=IOUtil.readString(in);
  image.setImageName(imageName);
break;
case ImageItemDesign.IMAGE_FILE:
String imageFile=IOUtil.readString(in);
image.setImageFile(imageFile);
break;
case ImageItemDesign.IMAGE_URI:
String imageUri=IOUtil.readString(in);
image.setImageUri(imageUri);
break;
case ImageItemDesign.IMAGE_EXPRESSION:
String imageExpr=IOUtil.readString(in);
String imageFormat=IOUtil.readString(in);
image.setImageExpression(imageExpr,imageFormat);
break;
default :
throw new IOException(""String_Node_Str"" + imageSource);
}
break;
case FIELD_ALT_TEXT:
Expression<String> altTextKey=readStringConstant(in);
Expression<String> altText=readStringConstant(in);
image.setAltText(altTextKey,altText);
break;
case FIELD_HELP_TEXT:
Expression<String> helpTextKey=readStringConstant(in);
Expression<String> helpText=readStringConstant(in);
image.setHelpText(helpTextKey,helpText);
break;
default :
readReportItemField(in,image,fieldType);
}
}","protected void readImageField(DataInputStream in,ImageItemDesign image,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_IMAGE_SOURCE:
    int imageSource=IOUtil.readInt(in);
switch (imageSource) {
case ImageItemDesign.IMAGE_NAME:
    String imageName=IOUtil.readString(in);
  image.setImageName(imageName);
break;
case ImageItemDesign.IMAGE_FILE:
String imageFile=IOUtil.readString(in);
image.setImageFile(imageFile);
break;
case ImageItemDesign.IMAGE_URI:
String imageUri=IOUtil.readString(in);
image.setImageUri(imageUri);
break;
case ImageItemDesign.IMAGE_EXPRESSION:
String imageExpr=IOUtil.readString(in);
String imageFormat=IOUtil.readString(in);
image.setImageExpression(imageExpr,imageFormat);
break;
default :
throw new IOException(""String_Node_Str"" + imageSource);
}
break;
case FIELD_ALT_TEXT:
Expression<String> altTextKey=readStringConstant(in);
Expression<String> altText=readStringConstant(in);
image.setAltText(altTextKey,altText);
break;
case FIELD_HELP_TEXT:
Expression<String> helpTextKey=readStringConstant(in);
Expression<String> helpText=readStringConstant(in);
image.setHelpText(helpTextKey,helpText);
break;
case FIELD_FIT_TO_CONTAINER:
Boolean isFitToContainer=IOUtil.readBool(in);
image.setFitToContainer(isFitToContainer);
break;
default :
readReportItemField(in,image,fieldType);
}
}",0.9507680189050808
70204,"protected void writeImage(DataOutputStream out,ImageItemDesign image) throws IOException {
  writeReportItem(out,image);
  IOUtil.writeShort(out,FIELD_IMAGE_SOURCE);
  int imageSource=image.getImageSource();
  IOUtil.writeInt(out,imageSource);
switch (imageSource) {
case ImageItemDesign.IMAGE_NAME:
{
      String imageName=image.getImageName();
      DesignElementHandle handle=image.getHandle();
      if (handle instanceof ImageHandle) {
        String designImageName=image.getImageName();
        if (imageName != null && imageName.equals(designImageName)) {
          imageName=null;
        }
      }
      IOUtil.writeString(out,imageName);
    }
  break;
case ImageItemDesign.IMAGE_FILE:
IOUtil.writeString(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_URI:
IOUtil.writeString(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_EXPRESSION:
IOUtil.writeString(out,image.getImageExpression());
IOUtil.writeString(out,image.getImageFormat());
break;
}
Expression<String> altText=image.getAltText();
Expression<String> altTextKey=image.getAltTextKey();
Expression<String> helpText=image.getHelpText();
Expression<String> helpTextKey=image.getHelpTextKey();
if (altText != null || altTextKey != null) {
IOUtil.writeShort(out,FIELD_ALT_TEXT);
write(out,altTextKey);
write(out,altText);
}
if (helpText != null || helpText != null) {
IOUtil.writeShort(out,FIELD_HELP_TEXT);
write(out,helpTextKey);
write(out,helpText);
}
}","protected void writeImage(DataOutputStream out,ImageItemDesign image) throws IOException {
  writeReportItem(out,image);
  IOUtil.writeShort(out,FIELD_IMAGE_SOURCE);
  int imageSource=image.getImageSource();
  IOUtil.writeInt(out,imageSource);
switch (imageSource) {
case ImageItemDesign.IMAGE_NAME:
{
      String imageName=image.getImageName();
      DesignElementHandle handle=image.getHandle();
      if (handle instanceof ImageHandle) {
        String designImageName=image.getImageName();
        if (imageName != null && imageName.equals(designImageName)) {
          imageName=null;
        }
      }
      IOUtil.writeString(out,imageName);
    }
  break;
case ImageItemDesign.IMAGE_FILE:
IOUtil.writeString(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_URI:
IOUtil.writeString(out,image.getImageUri());
break;
case ImageItemDesign.IMAGE_EXPRESSION:
IOUtil.writeString(out,image.getImageExpression());
IOUtil.writeString(out,image.getImageFormat());
break;
}
boolean isFitToContainer=image.isFitToContainer();
if (isFitToContainer) {
IOUtil.writeShort(out,FIELD_FIT_TO_CONTAINER);
IOUtil.writeBool(out,true);
}
Expression<String> altText=image.getAltText();
Expression<String> altTextKey=image.getAltTextKey();
Expression<String> helpText=image.getHelpText();
Expression<String> helpTextKey=image.getHelpTextKey();
if (altText != null || altTextKey != null) {
IOUtil.writeShort(out,FIELD_ALT_TEXT);
write(out,altTextKey);
write(out,altText);
}
if (helpText != null || helpText != null) {
IOUtil.writeShort(out,FIELD_HELP_TEXT);
write(out,helpTextKey);
write(out,helpText);
}
}",0.9500984898227184
70205,"public boolean needOutputInMasterPage(IContent headerFooter){
  if (headerFooter != null) {
    Collection list=headerFooter.getChildren();
    Iterator iter=list.iterator();
    while (iter.hasNext()) {
      Object child=iter.next();
      if (child instanceof ITableContent) {
        int columncount=((ITableContent)child).getColumnCount();
        int rowcount=((ITableContent)child).getChildren().size();
        if (columncount > 3 || rowcount > 1) {
          logger.log(Level.WARNING,""String_Node_Str"");
          return false;
        }
        if (isEmbededTable((ITableContent)child)) {
          logger.log(Level.WARNING,""String_Node_Str"");
          return false;
        }
      }
    }
  }
  return true;
}","public boolean needOutputInMasterPage(IContent headerFooter){
  if (headerFooter != null) {
    Collection list=headerFooter.getChildren();
    Iterator iter=list.iterator();
    while (iter.hasNext()) {
      Object child=iter.next();
      if (child instanceof ITableContent) {
        int columncount=((ITableContent)child).getColumnCount();
        int rowcount=((ITableContent)child).getChildren().size();
        if (columncount > 3 || rowcount > 1) {
          logger.log(Level.WARNING,""String_Node_Str"");
          return false;
        }
        if (isEmbededTable((ITableContent)child)) {
          logger.log(Level.WARNING,""String_Node_Str"");
          return false;
        }
      }
      if (isHtmlText(child)) {
        logger.log(Level.WARNING,""String_Node_Str"");
        return false;
      }
    }
  }
  return true;
}",0.9101412066752248
70206,"public SplitResult split(int height,boolean force) throws BirtException {
  SplitResult result=super.split(height,force);
  if (result.getResult() != null) {
    TableArea tableResult=(TableArea)result.getResult();
    int h=tableResult.layout.resolveAll();
    if (h > 0) {
      tableResult.setHeight(tableResult.getHeight() + h);
    }
    tableResult.resolveBottomBorder();
    relayoutChildren();
  }
  return result;
}","public SplitResult split(int height,boolean force) throws BirtException {
  SplitResult result=super.split(height,force);
  if (result.getResult() != null) {
    TableArea tableResult=(TableArea)result.getResult();
    int h=tableResult.layout.resolveAll(tableResult.getLastRow());
    if (h > 0) {
      tableResult.setHeight(tableResult.getHeight() + h);
    }
    tableResult.resolveBottomBorder();
    relayoutChildren();
  }
  return result;
}",0.9724770642201837
70207,"public void close() throws BirtException {
  int borderHeight=0;
  if (layout != null) {
    int height=layout.resolveAll();
    if (0 != height) {
      currentBP=currentBP + height;
    }
    borderHeight=layout.resolveBottomBorder();
    layout.remove(this);
  }
  setHeight(currentBP + getOffsetY() + borderHeight);
  updateBackgroundImage();
  if (parent != null) {
    boolean pb=checkPageBreak();
    if (pb) {
      int height=layout.resolveAll();
      if (0 != height) {
        currentBP=currentBP + height;
      }
      borderHeight=layout.resolveBottomBorder();
      layout.remove(this);
    }
    parent.update(this);
  }
  finished=true;
}","public void close() throws BirtException {
  int borderHeight=0;
  if (layout != null) {
    int height=layout.resolveAll(getLastRow());
    if (0 != height) {
      currentBP=currentBP + height;
    }
    borderHeight=layout.resolveBottomBorder();
    layout.remove(this);
  }
  setHeight(currentBP + getOffsetY() + borderHeight);
  updateBackgroundImage();
  if (parent != null) {
    boolean pb=checkPageBreak();
    if (pb) {
      int height=layout.resolveAll(getLastRow());
      if (0 != height) {
        currentBP=currentBP + height;
      }
      borderHeight=layout.resolveBottomBorder();
      layout.remove(this);
    }
    parent.update(this);
  }
  finished=true;
}",0.9820359281437124
70208,"/** 
 * When pagination happens, if drop cells should be finished by force, we need to end these cells and vertical align for them.
 */
public int resolveAll(){
  if (rows.size() == 0) {
    return 0;
  }
  RowArea row=(RowArea)rows.getCurrent();
  int originalRowHeight=row.getHeight();
  int height=originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (null == cell) {
      continue;
    }
    if (cell instanceof DummyCell) {
      DummyCell dummyCell=(DummyCell)cell;
      int delta=dummyCell.getDelta();
      height=Math.max(height,dummyCell.getCell().getHeight() - delta);
    }
 else {
      height=Math.max(height,cell.getHeight());
    }
    i=i + cell.getColSpan() - 1;
  }
  int dValue=height - originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell == null) {
      continue;
    }
    if (cell instanceof DummyCell) {
      int delta=((DummyCell)cell).getDelta();
      if (cell.getRowSpan() == 1) {
        CellArea refCell=((DummyCell)cell).getCell();
        refCell.setHeight(delta + height);
        verticalAlign(refCell);
      }
 else {
        CellArea refCell=((DummyCell)cell).getCell();
        refCell.setHeight(delta + height);
        verticalAlign(refCell);
      }
    }
 else {
      if (dValue != 0) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    i=i + cell.getColSpan() - 1;
  }
  row.setHeight(height);
  return dValue;
}","/** 
 * When pagination happens, if drop cells should be finished by force, we need to end these cells and vertical align for them.
 */
public int resolveAll(RowArea row){
  if (rows.size() == 0) {
    return 0;
  }
  int originalRowHeight=row.getHeight();
  int height=originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (null == cell) {
      continue;
    }
    if (cell instanceof DummyCell) {
      DummyCell dummyCell=(DummyCell)cell;
      int delta=dummyCell.getDelta();
      height=Math.max(height,dummyCell.getCell().getHeight() - delta);
    }
 else {
      height=Math.max(height,cell.getHeight());
    }
    i=i + cell.getColSpan() - 1;
  }
  int dValue=height - originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell == null) {
      continue;
    }
    if (cell instanceof DummyCell) {
      int delta=((DummyCell)cell).getDelta();
      if (cell.getRowSpan() == 1) {
        CellArea refCell=((DummyCell)cell).getCell();
        refCell.setHeight(delta + height);
        verticalAlign(refCell);
      }
 else {
        CellArea refCell=((DummyCell)cell).getCell();
        refCell.setHeight(delta + height);
        verticalAlign(refCell);
      }
    }
 else {
      if (dValue != 0) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    i=i + cell.getColSpan() - 1;
  }
  row.setHeight(height);
  return dValue;
}",0.9598108747044918
70209,"public void initialize() throws BirtException {
  createRoot();
  Color backgroundColor=PropertyUtil.getColor(pageContent.getStyle().getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
  ReportDesignHandle designHandle=pageContent.getReportContent().getDesign().getReportDesign();
  IStyle style=pageContent.getStyle();
  String imageUrl=EmitterUtil.getBackgroundImageUrl(style,designHandle);
  if (backgroundColor != null || imageUrl != null) {
    boxStyle=new BoxStyle();
    boxStyle.setBackgroundColor(backgroundColor);
    if (imageUrl != null) {
      boxStyle.setBackgroundImage(createBackgroundImage(imageUrl,pageContent));
    }
  }
  context.setMaxHeight(root.getHeight());
  context.setMaxWidth(root.getWidth());
  context.setMaxBP(root.getHeight());
  layoutHeader();
  layoutFooter();
  updateBodySize();
  context.setMaxHeight(body.getHeight());
  context.setMaxWidth(body.getWidth());
  context.setMaxBP(body.getHeight());
  maxAvaWidth=context.getMaxWidth();
}","public void initialize() throws BirtException {
  createRoot();
  Color backgroundColor=PropertyUtil.getColor(pageContent.getComputedStyle().getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
  ReportDesignHandle designHandle=pageContent.getReportContent().getDesign().getReportDesign();
  IStyle style=pageContent.getStyle();
  String imageUrl=EmitterUtil.getBackgroundImageUrl(style,designHandle);
  if (backgroundColor != null || imageUrl != null) {
    boxStyle=new BoxStyle();
    boxStyle.setBackgroundColor(backgroundColor);
    if (imageUrl != null) {
      boxStyle.setBackgroundImage(createBackgroundImage(imageUrl,pageContent));
    }
  }
  context.setMaxHeight(root.getHeight());
  context.setMaxWidth(root.getWidth());
  context.setMaxBP(root.getHeight());
  layoutHeader();
  layoutFooter();
  updateBodySize();
  context.setMaxHeight(body.getHeight());
  context.setMaxWidth(body.getWidth());
  context.setMaxBP(body.getHeight());
  maxAvaWidth=context.getMaxWidth();
}",0.9959266802443992
70210,"public TextArea getNextArea(int maxLineWidth){
  if (!hasNextArea()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TextArea textArea=getNextTextArea(maxLineWidth);
  offset+=textArea.getTextLength();
  if (lineBreakCollapse == LINE_BREAK_COLLAPSE_OCCUPY) {
    lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    return null;
  }
  return textArea;
}","public TextArea getNextArea(int maxLineWidth){
  if (!hasNextArea()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TextArea textArea=getNextTextArea(maxLineWidth);
  offset+=textArea.getTextLength();
  if (lineBreakCollapse == LINE_BREAK_COLLAPSE_OCCUPIED) {
    lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    return null;
  }
  return textArea;
}",0.9944444444444444
70211,"private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,wordVestige);
    return textArea;
  }
  if (null != remainWord) {
    TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(chunk.getLength());
      hasLineBreak=true;
      if (lineBreakCollapse == LINE_BREAK_COLLAPSE_STANDING_BY) {
        lineBreakCollapse=LINE_BREAK_COLLAPSE_OCCUPY;
      }
      return textArea;
    }
    if (lineBreakCollapse == LINE_BREAK_COLLAPSE_STANDING_BY) {
      lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    }
    fontInfo=chunk.getFontInfo();
    runLevel=chunk.getRunLevel();
    remainWords=new WordRecognizerWrapper(chunk.getText(),context.getLocale());
  }
  TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}","private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,wordVestige);
    return textArea;
  }
  if (null != remainWord) {
    lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(chunk.getLength());
      hasLineBreak=true;
      if (lineBreakCollapse == LINE_BREAK_COLLAPSE_STANDING_BY) {
        lineBreakCollapse=LINE_BREAK_COLLAPSE_OCCUPIED;
      }
      return textArea;
    }
    lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    fontInfo=chunk.getFontInfo();
    runLevel=chunk.getRunLevel();
    remainWords=new WordRecognizerWrapper(chunk.getText(),context.getLocale());
  }
  TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}",0.9444444444444444
70212,"protected void checkObjectType(){
  IImageContent image=(IImageContent)content;
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    objectType=TYPE_FLASH_OBJECT;
    ObjectContent flash=(ObjectContent)image;
  }
 else {
    objectType=TYPE_IMAGE_OBJECT;
  }
}","protected void checkObjectType(){
  IImageContent image=(IImageContent)content;
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    objectType=TYPE_FLASH_OBJECT;
  }
 else {
    objectType=TYPE_IMAGE_OBJECT;
  }
}",0.9339080459770116
70213,"protected void initialize() throws BirtException {
  checkObjectType();
  IImageContent imageContent=(IImageContent)content;
  Image imageObject=null;
  boolean isFlash=FlashFile.isFlash(imageContent.getMIMEType(),imageContent.getURI(),imageContent.getExtension());
  if (!isFlash) {
    imageObject=EmitterUtil.getImage(imageContent);
  }
  if (isOutputSupported(objectType) && (isFlash || imageObject != null)) {
    layout=new ConcreteImageLayout(context,parent,content,imageObject);
  }
 else {
    ITextContent altTextContent=createAltText((IImageContent)content);
    if (null == altTextContent) {
      return;
    }
    layout=new BlockTextArea(parent,context,altTextContent);
    ((BlockTextArea)layout).initialize();
  }
}","protected void initialize() throws BirtException {
  checkObjectType();
  IImageContent imageContent=(IImageContent)content;
  Image imageObject=null;
  if (objectType == TYPE_IMAGE_OBJECT) {
    imageObject=EmitterUtil.getImage(imageContent);
  }
  if (isOutputSupported(objectType) && (objectType == TYPE_FLASH_OBJECT || imageObject != null)) {
    layout=new ConcreteImageLayout(context,parent,content,imageObject);
  }
 else {
    ITextContent altTextContent=createAltText((IImageContent)content);
    if (null == altTextContent) {
      return;
    }
    layout=new BlockTextArea(parent,context,altTextContent);
  }
}",0.827178729689808
70214,"public void handleEvent(Event event){
  if (event.widget.equals(fdcFont)) {
    getLegend().getText().setFont((FontDefinition)((Object[])event.data)[0]);
    getLegend().getText().setColor((ColorDefinition)((Object[])event.data)[1]);
  }
 else   if (event.widget == spnEllipsis) {
    getLegend().setEllipsis(spnEllipsis.getSelection());
  }
 else   if (event.widget.equals(fccShadow)) {
    getLegend().getClientArea().setShadowColor((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(fccBackground)) {
    getLegend().getClientArea().setBackground((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(icText)) {
    getLegend().getClientArea().setInsets((Insets)event.data);
  }
 else   if (event.widget.equals(outlineText)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
      getLegend().getClientArea().getOutline().setStyle((LineStyle)event.data);
    break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
  getLegend().getClientArea().getOutline().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(lineSeparator)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
getLegend().getSeparator().setStyle((LineStyle)event.data);
break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
getLegend().getSeparator().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getSeparator().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getSeparator().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(btnFormatSpecifier)) {
FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),getChart().getLegend().getFormatSpecifier(),Messages.getString(""String_Node_Str""));
if (editor.open() == Window.OK) {
getChart().getLegend().setFormatSpecifier(editor.getFormatSpecifier());
fsp.updatePreview(editor.getFormatSpecifier());
}
}
}","public void handleEvent(Event event){
  if (event.widget.equals(fdcFont)) {
    getLegend().getText().setFont((FontDefinition)((Object[])event.data)[0]);
    getLegend().getText().setColor((ColorDefinition)((Object[])event.data)[1]);
  }
 else   if (event.widget == spnEllipsis) {
    getLegend().setEllipsis(spnEllipsis.getSelection());
  }
 else   if (event.widget.equals(fccShadow)) {
    getLegend().getClientArea().setShadowColor((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(fccBackground)) {
    getLegend().getClientArea().setBackground((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(icText)) {
    getLegend().getClientArea().setInsets((Insets)event.data);
  }
 else   if (event.widget.equals(outlineText)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
      getLegend().getClientArea().getOutline().setStyle((LineStyle)event.data);
    break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
  getLegend().getClientArea().getOutline().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(lineSeparator)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
getLegend().getSeparator().setStyle((LineStyle)event.data);
break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
getLegend().getSeparator().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getSeparator().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getSeparator().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(btnFormatSpecifier)) {
FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),getChart().getLegend().getFormatSpecifier(),getEntryType(),Messages.getString(""String_Node_Str""));
if (editor.open() == Window.OK) {
getChart().getLegend().setFormatSpecifier(editor.getFormatSpecifier());
fsp.updatePreview(editor.getFormatSpecifier());
}
}
}",0.9967776584317938
70215,"public LegendTextSheet(String title,ChartWizardContext context){
  super(title,context,true);
}","public LegendTextSheet(String title,ChartWizardContext context){
  super(title,context,true);
  isByCategory=getChart().getLegend().getItemType() != LegendItemType.SERIES_LITERAL;
  containsYOG=ChartUtil.containsYOptionalGrouping(getChart());
}",0.56047197640118
70216,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  boolean isByCategory=getChart().getLegend().getItemType() != LegendItemType.SERIES_LITERAL;
  boolean containsYOG=ChartUtil.containsYOptionalGrouping(getChart());
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
    lblFormat.setEnabled(isByCategory || containsYOG);
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    cmpFormat.setEnabled(isByCategory || containsYOG);
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
    fsp.setEnabled(isByCategory || containsYOG);
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.widthHint=20;
    gd.heightHint=20;
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setImage(UIHelper.getImage(""String_Node_Str""));
    btnFormatSpecifier.getImage().setBackground(btnFormatSpecifier.getBackground());
    btnFormatSpecifier.addListener(SWT.Selection,this);
    btnFormatSpecifier.setEnabled(isByCategory || containsYOG);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
    lblFormat.setEnabled(isByCategory || containsYOG);
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
    cmpFormat.setEnabled(isByCategory || containsYOG);
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
    fsp.setEnabled(isByCategory || containsYOG);
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.widthHint=20;
    gd.heightHint=20;
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setImage(UIHelper.getImage(""String_Node_Str""));
    btnFormatSpecifier.getImage().setBackground(btnFormatSpecifier.getBackground());
    btnFormatSpecifier.addListener(SWT.Selection,this);
    btnFormatSpecifier.setEnabled(isByCategory || containsYOG);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}",0.9846354409162864
70217,"/** 
 * setup the master page object from the base master page handle.
 * @param page page object
 * @param handle page handle
 */
private void setupMasterPage(MasterPageDesign page,MasterPageHandle handle){
  setupStyledElement(page,handle);
  page.setPageType(handle.getPageType());
  DimensionValue effectWidth=handle.getPageWidth();
  DimensionValue effectHeight=handle.getPageHeight();
  DimensionType width=null;
  DimensionType height=null;
  if (effectWidth != null) {
    width=new DimensionType(effectWidth.getMeasure(),effectWidth.getUnits());
  }
  if (effectHeight != null) {
    height=new DimensionType(effectHeight.getMeasure(),effectHeight.getUnits());
  }
  page.setPageSize(width,height);
  page.setOrientation(handle.getOrientation());
  DimensionType top=createDimension(handle.getTopMargin(),true);
  DimensionType left=createDimension(handle.getLeftMargin(),true);
  DimensionType bottom=createDimension(handle.getBottomMargin(),true);
  DimensionType right=createDimension(handle.getRightMargin(),true);
  page.setMargin(top,left,bottom,right);
}","/** 
 * setup the master page object from the base master page handle.
 * @param page page object
 * @param handle page handle
 */
private void setupMasterPage(MasterPageDesign page,MasterPageHandle handle){
  setupStyledElement(page,handle);
  page.setPageType(handle.getPageType());
  DimensionValue effectWidth=handle.getPageWidth();
  DimensionValue effectHeight=handle.getPageHeight();
  DimensionType width=null;
  DimensionType height=null;
  if (effectWidth != null) {
    width=new DimensionType(effectWidth.getMeasure(),effectWidth.getUnits());
  }
 else {
    width=new DimensionType(DEFAULT_MASTERPAGE_WIDTH,DimensionType.UNITS_IN);
  }
  if (effectHeight != null) {
    height=new DimensionType(effectHeight.getMeasure(),effectHeight.getUnits());
  }
 else {
    height=new DimensionType(DEFAULT_MASTERPAGE_HEIGHT,DimensionType.UNITS_IN);
  }
  page.setPageSize(width,height);
  page.setOrientation(handle.getOrientation());
  DimensionType top=createDimension(handle.getTopMargin(),true);
  DimensionType left=createDimension(handle.getLeftMargin(),true);
  DimensionType bottom=createDimension(handle.getBottomMargin(),true);
  DimensionType right=createDimension(handle.getRightMargin(),true);
  page.setMargin(top,left,bottom,right);
}",0.9018087855297158
70218,"protected void verticalAlign(){
  Iterator iter=getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    CSSValue vAlign=child.getVerticalAlign();
    if (IStyle.TOP_VALUE.equals(vAlign)) {
      continue;
    }
    int spacing=getContentHeight() - child.getAllocatedHeight();
    if (spacing < 0) {
      spacing=0;
    }
    if (vAlign == null || IStyle.BASELINE_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + getBaseLine() - child.getBaseLine());
    }
 else     if (IStyle.BOTTOM_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing);
    }
 else     if (IStyle.MIDDLE_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing / 2);
    }
  }
}","protected void verticalAlign(){
  Iterator iter=getChildren();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    CSSValue vAlign=child.getVerticalAlign();
    if (IStyle.TOP_VALUE.equals(vAlign)) {
      continue;
    }
    int spacing=getContentHeight() - child.getAllocatedHeight();
    if (spacing < 0) {
      spacing=0;
    }
    if (vAlign == null || IStyle.BASELINE_VALUE.equals(vAlign)) {
      int lineHeight=parent.getLineHeight();
      if (lineHeight > 0) {
        child.setPosition(child.getX(),child.getY() + getBaseLine() - child.getBaseLine() + spacing / 2);
      }
 else {
        child.setPosition(child.getX(),child.getY() + getBaseLine() - child.getBaseLine());
      }
    }
 else     if (IStyle.BOTTOM_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing);
    }
 else     if (IStyle.MIDDLE_VALUE.equals(vAlign)) {
      child.setPosition(child.getX(),child.getY() + spacing / 2);
    }
  }
}",0.8806396344945745
70219,"void renderVerticalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
  int yLast=Integer.MIN_VALUE;
  Location loMinorStart=LocationImpl.create(0,0);
  Location loMinorEnd=LocationImpl.create(0,0);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int y=(int)da.getCoordinate(i);
    boolean bSkipTickLine=(yLast == y);
    if (!bSkipTickLine) {
      yLast=y;
    }
    if (bRendering3D) {
      context.y3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dXMinorTick1=((iMinorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (context.dX - pwa.getTickSize()) : context.dX;
      double dXMinorTick2=((iMinorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + pwa.getTickSize() : context.dX;
      if (dXMinorTick1 != dXMinorTick2) {
        if (i != da.size() - 1) {
          if (bRenderOrthogonal3DAxis) {
          }
 else {
            if (!bSkipTickLine) {
              LineRenderEvent lreMinor=null;
              int minorStep=(int)(1d / da.getStep());
              if (minorStep < 1) {
                minorStep=1;
              }
              for (int k=0; k < daMinor.length - 1; k+=minorStep) {
                if (computation instanceof LinearAxisTypeComputation) {
                  if ((iDirection == -1 && y - daMinor[k] <= da.getCoordinate(i + 1)) || (iDirection == 1 && y + daMinor[k] >= da.getCoordinate(i + 1))) {
                    continue;
                  }
                }
                lreMinor=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
                lreMinor.setLineAttributes(liaMinorTick);
                loMinorStart.set(dXMinorTick1,y + iDirection * daMinor[k]);
                lreMinor.setStart(loMinorStart);
                loMinorEnd.set(dXMinorTick2,y + iDirection * daMinor[k]);
                lreMinor.setEnd(loMinorEnd);
                ipr.drawLine(lreMinor);
              }
            }
          }
        }
      }
      if (computation instanceof TextAxisTypeComputation && !bTickBetweenCategories && i == 0) {
        continue;
      }
      if (!bSkipTickLine && context.dTick1 != context.dTick2) {
        if (bRenderOrthogonal3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(context.dTick1,y);
          lre.getEnd().set(context.dTick2,y);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IConstants.VALUE) {
          lre.setStart(LocationImpl.create(context.dX,y));
          lre.setEnd(LocationImpl.create(context.dX + dSeriesThickness,y - dSeriesThickness));
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      double sx=x;
      double sx2=dXEnd;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.LEFT) {
          sx-=dStaggeredLabelOffset;
          sx2+=dStaggeredLabelOffset;
        }
 else {
          sx+=dStaggeredLabelOffset;
          sx2-=dStaggeredLabelOffset;
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          lo3d.set(sx - pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZEnd + pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.LEFT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
          lo3d.set(sx2 + pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZ - pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.RIGHT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (this.renderer.rtc.isRightToLeftText()) {
            t3dre.setRtlCaption();
          }
          dc.addLabel(t3dre);
        }
 else {
          lo.set(sx,y + dOffset);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (bLabelWithinAxes) {
            if (i == 0) {
              tre.setTextPosition(iLabelLocation | IConstants.POSITION_MOVE_ABOVE);
            }
 else {
              tre.setTextPosition(iLabelLocation);
            }
          }
          if (this.renderer.rtc.isRightToLeftText()) {
            tre.setRtlCaption();
          }
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}","void renderVerticalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
  int yLast=Integer.MIN_VALUE;
  Location loMinorStart=LocationImpl.create(0,0);
  Location loMinorEnd=LocationImpl.create(0,0);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int y=(int)da.getCoordinate(i);
    boolean bSkipTickLine=(yLast == y);
    if (!bSkipTickLine) {
      yLast=y;
    }
    if (bRendering3D) {
      context.y3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dXMinorTick1=((iMinorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (context.dX - pwa.getTickSize()) : context.dX;
      double dXMinorTick2=((iMinorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + pwa.getTickSize() : context.dX;
      if (dXMinorTick1 != dXMinorTick2) {
        if (i != da.size() - 1) {
          if (bRenderOrthogonal3DAxis) {
          }
 else {
            if (!bSkipTickLine && ((i > 0 && i < length - 1) || !axModel.isCategoryAxis() || bTickBetweenCategories)) {
              LineRenderEvent lreMinor=null;
              int minorStep=(int)(1d / da.getStep());
              if (minorStep < 1) {
                minorStep=1;
              }
              for (int k=0; k < daMinor.length - 1; k+=minorStep) {
                if (computation instanceof LinearAxisTypeComputation) {
                  if ((iDirection == -1 && y - daMinor[k] <= da.getCoordinate(i + 1)) || (iDirection == 1 && y + daMinor[k] >= da.getCoordinate(i + 1))) {
                    continue;
                  }
                }
                lreMinor=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
                lreMinor.setLineAttributes(liaMinorTick);
                loMinorStart.set(dXMinorTick1,y + iDirection * daMinor[k]);
                lreMinor.setStart(loMinorStart);
                loMinorEnd.set(dXMinorTick2,y + iDirection * daMinor[k]);
                lreMinor.setEnd(loMinorEnd);
                ipr.drawLine(lreMinor);
              }
            }
          }
        }
      }
      if (computation instanceof TextAxisTypeComputation && !bTickBetweenCategories && i == 0) {
        continue;
      }
      if (!bSkipTickLine && context.dTick1 != context.dTick2) {
        if (bRenderOrthogonal3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(context.dTick1,y);
          lre.getEnd().set(context.dTick2,y);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IConstants.VALUE) {
          lre.setStart(LocationImpl.create(context.dX,y));
          lre.setEnd(LocationImpl.create(context.dX + dSeriesThickness,y - dSeriesThickness));
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      double sx=x;
      double sx2=dXEnd;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.LEFT) {
          sx-=dStaggeredLabelOffset;
          sx2+=dStaggeredLabelOffset;
        }
 else {
          sx+=dStaggeredLabelOffset;
          sx2-=dStaggeredLabelOffset;
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          lo3d.set(sx - pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZEnd + pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.LEFT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
          lo3d.set(sx2 + pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZ - pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.RIGHT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (this.renderer.rtc.isRightToLeftText()) {
            t3dre.setRtlCaption();
          }
          dc.addLabel(t3dre);
        }
 else {
          lo.set(sx,y + dOffset);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (bLabelWithinAxes) {
            if (i == 0) {
              tre.setTextPosition(iLabelLocation | IConstants.POSITION_MOVE_ABOVE);
            }
 else {
              tre.setTextPosition(iLabelLocation);
            }
          }
          if (this.renderer.rtc.isRightToLeftText()) {
            tre.setRtlCaption();
          }
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}",0.9924028268551236
70220,"void renderHorizontalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  double y=(iLabelLocation == IConstants.ABOVE) ? (bRendering3D ? context.dTick1 + 1 : context.dTick1 - 1) : (bRendering3D ? context.dTick2 - 1 : context.dTick2 + 1);
  int xLast=Integer.MIN_VALUE;
  Location loMinorStart=LocationImpl.create(0,0);
  Location loMinorEnd=LocationImpl.create(0,0);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int x=(int)da.getCoordinate(i);
    boolean bSkipTickLine=(x == xLast);
    if (!bSkipTickLine) {
      xLast=x;
    }
    if (bRendering3D) {
      context.x3d=(int)da3D.getCoordinate(i);
      context.z3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dYMinorTick1=((iMinorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + pwa.getTickSize() : context.dY - pwa.getTickSize()) : context.dY;
      double dYMinorTick2=((iMinorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - pwa.getTickSize() : context.dY + pwa.getTickSize()) : context.dY;
      if (dYMinorTick1 != -dYMinorTick2) {
        if (i != da.size() - 1) {
          if (bRenderBase3DAxis) {
          }
 else           if (bRenderAncillary3DAxis) {
          }
 else {
            if (!bSkipTickLine) {
              LineRenderEvent lreMinor=null;
              int minorStep=(int)(1d / da.getStep());
              if (minorStep < 1) {
                minorStep=1;
              }
              for (int k=0; k < daMinor.length - 1; k+=minorStep) {
                if (computation instanceof LinearAxisTypeComputation) {
                  if ((iDirection == 1 && x + daMinor[k] >= da.getCoordinate(i + 1)) || (iDirection == -1 && x - daMinor[k] <= da.getCoordinate(i + 1))) {
                    continue;
                  }
                }
                lreMinor=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
                lreMinor.setLineAttributes(liaMinorTick);
                loMinorStart.set(x + iDirection * daMinor[k],dYMinorTick1);
                lreMinor.setStart(loMinorStart);
                loMinorEnd.set(x + iDirection * daMinor[k],dYMinorTick2);
                lreMinor.setEnd(loMinorEnd);
                ipr.drawLine(lreMinor);
              }
            }
          }
        }
      }
      if (computation instanceof TextAxisTypeComputation && !bTickBetweenCategories && i == 0) {
        continue;
      }
      if (!bSkipTickLine && context.dTick1 != context.dTick2) {
        if (bRenderBase3DAxis) {
        }
 else         if (bRenderAncillary3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(x,context.dTick1);
          lre.getEnd().set(x,context.dTick2);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IConstants.VALUE) {
          lre.getStart().set(x,context.dY);
          lre.getEnd().set(x + dSeriesThickness,context.dY - dSeriesThickness);
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      double sy=y;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.ABOVE) {
          sy-=dStaggeredLabelOffset;
        }
 else {
          sy+=dStaggeredLabelOffset;
        }
      }
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          if (axisType == IConstants.BASE_AXIS) {
            lo3d.set(context.x3d + dOffset,sy - pwa.getVerticalSpacingInPixels(),dZEnd + pwa.getVerticalSpacingInPixels());
          }
 else {
            lo3d.set(dXEnd + pwa.getVerticalSpacingInPixels(),sy - pwa.getVerticalSpacingInPixels(),context.z3d + dOffset);
          }
          t3dre.setLocation3D(lo3d);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (this.renderer.rtc.isRightToLeftText()) {
            t3dre.setRtlCaption();
          }
          dc.addLabel(t3dre);
        }
 else {
          lo.set(x + dOffset,sy);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (bLabelWithinAxes) {
            if (i == 0) {
              tre.setTextPosition(iLabelLocation | IConstants.POSITION_MOVE_RIGHT);
            }
 else {
              tre.setTextPosition(iLabelLocation);
            }
          }
          if (this.renderer.rtc.isRightToLeftText()) {
            tre.setRtlCaption();
          }
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}","void renderHorizontalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  double y=(iLabelLocation == IConstants.ABOVE) ? (bRendering3D ? context.dTick1 + 1 : context.dTick1 - 1) : (bRendering3D ? context.dTick2 - 1 : context.dTick2 + 1);
  int xLast=Integer.MIN_VALUE;
  Location loMinorStart=LocationImpl.create(0,0);
  Location loMinorEnd=LocationImpl.create(0,0);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int x=(int)da.getCoordinate(i);
    boolean bSkipTickLine=(x == xLast);
    if (!bSkipTickLine) {
      xLast=x;
    }
    if (bRendering3D) {
      context.x3d=(int)da3D.getCoordinate(i);
      context.z3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dYMinorTick1=((iMinorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + pwa.getTickSize() : context.dY - pwa.getTickSize()) : context.dY;
      double dYMinorTick2=((iMinorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - pwa.getTickSize() : context.dY + pwa.getTickSize()) : context.dY;
      if (dYMinorTick1 != -dYMinorTick2) {
        if (i != da.size() - 1) {
          if (bRenderBase3DAxis) {
          }
 else           if (bRenderAncillary3DAxis) {
          }
 else {
            if (!bSkipTickLine && ((i > 0 && i < length - 1) || !axModel.isCategoryAxis() || bTickBetweenCategories)) {
              LineRenderEvent lreMinor=null;
              int minorStep=(int)(1d / da.getStep());
              if (minorStep < 1) {
                minorStep=1;
              }
              for (int k=0; k < daMinor.length - 1; k+=minorStep) {
                if (computation instanceof LinearAxisTypeComputation) {
                  if ((iDirection == 1 && x + daMinor[k] >= da.getCoordinate(i + 1)) || (iDirection == -1 && x - daMinor[k] <= da.getCoordinate(i + 1))) {
                    continue;
                  }
                }
                lreMinor=((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
                lreMinor.setLineAttributes(liaMinorTick);
                loMinorStart.set(x + iDirection * daMinor[k],dYMinorTick1);
                lreMinor.setStart(loMinorStart);
                loMinorEnd.set(x + iDirection * daMinor[k],dYMinorTick2);
                lreMinor.setEnd(loMinorEnd);
                ipr.drawLine(lreMinor);
              }
            }
          }
        }
      }
      if (computation instanceof TextAxisTypeComputation && !bTickBetweenCategories && i == 0) {
        continue;
      }
      if (!bSkipTickLine && context.dTick1 != context.dTick2) {
        if (bRenderBase3DAxis) {
        }
 else         if (bRenderAncillary3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(x,context.dTick1);
          lre.getEnd().set(x,context.dTick2);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IConstants.VALUE) {
          lre.getStart().set(x,context.dY);
          lre.getEnd().set(x + dSeriesThickness,context.dY - dSeriesThickness);
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      double sy=y;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.ABOVE) {
          sy-=dStaggeredLabelOffset;
        }
 else {
          sy+=dStaggeredLabelOffset;
        }
      }
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          if (axisType == IConstants.BASE_AXIS) {
            lo3d.set(context.x3d + dOffset,sy - pwa.getVerticalSpacingInPixels(),dZEnd + pwa.getVerticalSpacingInPixels());
          }
 else {
            lo3d.set(dXEnd + pwa.getVerticalSpacingInPixels(),sy - pwa.getVerticalSpacingInPixels(),context.z3d + dOffset);
          }
          t3dre.setLocation3D(lo3d);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (this.renderer.rtc.isRightToLeftText()) {
            t3dre.setRtlCaption();
          }
          dc.addLabel(t3dre);
        }
 else {
          lo.set(x + dOffset,sy);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          if (bLabelWithinAxes) {
            if (i == 0) {
              tre.setTextPosition(iLabelLocation | IConstants.POSITION_MOVE_RIGHT);
            }
 else {
              tre.setTextPosition(iLabelLocation);
            }
          }
          if (this.renderer.rtc.isRightToLeftText()) {
            tre.setRtlCaption();
          }
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}",0.9924375659514596
70221,"/** 
 * Ths background is the first component rendered within the plot block. This is rendered with Z-order=0
 */
protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  super.renderBackground(ipr,p);
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=pwa.getPlotBounds();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  if (!isDimension3D()) {
    if (ca.getShadowColor() != null) {
      rre.setBounds(bo.translateInstance(3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setOutline(ca.getOutline());
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
  }
  double dSeriesThickness=pwa.getSeriesThickness();
  double[] daX={bo.getLeft() - dSeriesThickness,bo.getLeft() + bo.getWidth() - dSeriesThickness};
  double[] daY={bo.getTop() + bo.getHeight() + dSeriesThickness,bo.getTop() + dSeriesThickness};
  final AllAxes aax=pwa.getAxes();
  AutoScale scPrimaryBase=null;
  AutoScale scPrimaryOrthogonal=null;
  AutoScale scAncillaryBase=null;
  double dXStart=0;
  double dYStart=0;
  double dZStart=0;
  double dXEnd=0;
  double dYEnd=0;
  double dZEnd=0;
  int baseTickCount=0;
  int ancillaryTickCount=0;
  int orthogonalTickCount=0;
  double xStep=0;
  double yStep=0;
  double zStep=0;
  if (isDimension3D()) {
    scPrimaryBase=aax.getPrimaryBase().getScale();
    scPrimaryOrthogonal=aax.getPrimaryOrthogonal().getScale();
    scAncillaryBase=aax.getAncillaryBase().getScale();
    dXStart=scPrimaryBase.getStart();
    dYStart=scPrimaryOrthogonal.getStart();
    dZStart=scAncillaryBase.getStart();
    dXEnd=scPrimaryBase.getEnd();
    dYEnd=scPrimaryOrthogonal.getEnd();
    dZEnd=scAncillaryBase.getEnd();
    baseTickCount=scPrimaryBase.getTickCordinates().size();
    ancillaryTickCount=scAncillaryBase.getTickCordinates().size();
    orthogonalTickCount=scPrimaryOrthogonal.getTickCordinates().size();
    xStep=scPrimaryBase.getUnitSize();
    yStep=scPrimaryOrthogonal.getUnitSize();
    zStep=scAncillaryBase.getUnitSize();
  }
  if (pwa.getDimension() == IConstants.TWO_5_D) {
    Location[] loa=null;
    if (cwa.getWallFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{LocationImpl.create(daX[0],daY[0]),LocationImpl.create(daX[0],daY[1])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      loa=new Location[4];
      loa[0]=LocationImpl.create(daX[0],daY[0]);
      loa[1]=LocationImpl.create(daX[0],daY[1]);
      loa[2]=LocationImpl.create(daX[0] + dSeriesThickness,daY[1] - dSeriesThickness);
      loa[3]=LocationImpl.create(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getWallFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    if (cwa.getFloorFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{LocationImpl.create(daX[0],daY[0]),LocationImpl.create(daX[1],daY[0])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      if (loa == null) {
        loa=new Location[4];
      }
      loa[0]=LocationImpl.create(daX[0],daY[0]);
      loa[1]=LocationImpl.create(daX[1],daY[0]);
      loa[2]=LocationImpl.create(daX[1] + dSeriesThickness,daY[0] - dSeriesThickness);
      loa[3]=LocationImpl.create(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getFloorFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
  }
 else   if (pwa.getDimension() == IConstants.THREE_D) {
    Location3D[] loa=null;
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Polygon3DRenderEvent.class);
    pre.setDoubleSided(true);
    loa=new Location3D[4];
    loa[0]=Location3DImpl.create(dXStart,dYStart,dZStart);
    loa[1]=Location3DImpl.create(dXStart,dYEnd,dZStart);
    loa[2]=Location3DImpl.create(dXStart,dYEnd,dZEnd);
    loa[3]=Location3DImpl.create(dXStart,dYStart,dZEnd);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    Object event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dLeftWall=Engine3D.getObjectFromEvent(event_new);
    loa[0]=Location3DImpl.create(dXStart,dYStart,dZStart);
    loa[1]=Location3DImpl.create(dXEnd,dYStart,dZStart);
    loa[2]=Location3DImpl.create(dXEnd,dYEnd,dZStart);
    loa[3]=Location3DImpl.create(dXStart,dYEnd,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dRightWall=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getWallFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getWallFill()).getTransparency() > 0) || (!(cwa.getWallFill() instanceof ColorDefinition) && cwa.getWallFill() != null)) {
      leftWallFill=true;
      rightWallFill=true;
    }
    if (loa == null) {
      loa=new Location3D[4];
    }
    loa[0]=Location3DImpl.create(dXStart,dYStart,dZStart);
    loa[1]=Location3DImpl.create(dXStart,dYStart,dZEnd);
    loa[2]=Location3DImpl.create(dXEnd,dYStart,dZEnd);
    loa[3]=Location3DImpl.create(dXEnd,dYStart,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getFloorFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dFloor=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getFloorFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getFloorFill()).getTransparency() > 0) || (!(cwa.getFloorFill() instanceof ColorDefinition) && cwa.getFloorFill() != null)) {
      floorFill=true;
    }
  }
  final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
  oaxa[0]=aax.getPrimaryBase();
  oaxa[1]=aax.getPrimaryOrthogonal();
  for (int i=0; i < aax.getOverlayCount(); i++) {
    oaxa[2 + i]=aax.getOverlay(i);
  }
  if (aax.getAncillaryBase() != null) {
    oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
  }
  renderMarkerRanges(oaxa,bo);
  renderMarkerLines(oaxa,bo);
  double x=0, y=0, vnext=0;
  LineAttributes lia;
  LineRenderEvent lre;
  final Insets insCA=aax.getInsets();
  int iCount;
  Grid g;
  double[] doaMinor=null;
  for (int i=0; i < oaxa.length; i++) {
    g=oaxa[i].getGrid();
    iCount=g.getMinorCountPerMajor();
    lia=oaxa[i].getGrid().getLineAttributes(IConstants.MINOR);
    if (lia == null || !lia.isSetStyle() || !lia.isVisible()) {
      continue;
    }
    if (iCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{Integer.valueOf(iCount)},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    AutoScale sc=oaxa[i].getScale();
    doaMinor=sc.getMinorCoordinates(iCount);
    if (isDimension3D()) {
      Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
      lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
        AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
      if (floorFill) {
        for (int k=0; k < xa.size() - 1; k++) {
          for (int j=0; j < doaMinor.length - 1; j++) {
            if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
              continue;
            }
            lre3d.setStart3D(Location3DImpl.create(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
            lre3d.setEnd3D(Location3DImpl.create(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
            lre3d.setObject3DParent(o3dFloor);
            getDeferredCache().addLine(lre3d);
          }
        }
      }
    if (rightWallFill) {
      for (int k=0; k < xa.size() - 1; k++) {
        for (int j=0; j < doaMinor.length - 1; j++) {
          if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
            continue;
          }
          lre3d.setStart3D(Location3DImpl.create(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
          lre3d.setEnd3D(Location3DImpl.create(xa.getCoordinate(k) + doaMinor[j],dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
          lre3d.setObject3DParent(o3dRightWall);
          getDeferredCache().addLine(lre3d);
        }
      }
    }
  break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
  for (int j=0; j < doaMinor.length - 1; j++) {
    if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
      continue;
    }
    lre3d.setStart3D(Location3DImpl.create(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
    lre3d.setEnd3D(Location3DImpl.create(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart + (ancillaryTickCount - 1) * zStep));
    lre3d.setObject3DParent(o3dLeftWall);
    getDeferredCache().addLine(lre3d);
  }
}
}
if (rightWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
  if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
    continue;
  }
  lre3d.setStart3D(Location3DImpl.create(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setEnd3D(Location3DImpl.create(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setObject3DParent(o3dRightWall);
  getDeferredCache().addLine(lre3d);
}
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(Location3DImpl.create(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(Location3DImpl.create(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
}
if (floorFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(Location3DImpl.create(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(Location3DImpl.create(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
x=da.getCoordinate(j);
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],da.getCoordinate(j + 1))) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],da.getCoordinate(j + 1)))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(x + iDirection * doaMinor[k],dY1 + pwa.getSeriesThickness()));
lre.setEnd(LocationImpl.create(x + iDirection * doaMinor[k] + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
x=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
vnext+=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(x + iDirection * doaMinor[k],dY1));
lre.setEnd(LocationImpl.create(x + iDirection * doaMinor[k],dY2));
ipr.drawLine(lre);
}
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
y=da.getCoordinate(j) - pwa.getSeriesThickness();
vnext=da.getCoordinate(j + 1) - pwa.getSeriesThickness();
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(LocationImpl.create(dX1 - pwa.getSeriesThickness(),y + iDirection * doaMinor[k] + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
y=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
vnext-=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(LocationImpl.create(dX2,y + iDirection * doaMinor[k]));
ipr.drawLine(lre);
}
}
}
}
for (int i=0; i < oaxa.length; i++) {
final int STEP_NUMBER=oaxa[i].getModelAxis().getScale().getMajorGridsStepNumber();
lia=oaxa[i].getGrid().getLineAttributes(IConstants.MAJOR);
if (lia == null || !lia.isSetStyle() || !lia.isVisible()) {
continue;
}
AutoScale sc=oaxa[i].getScale();
if (isDimension3D()) {
Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
if (floorFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(Location3DImpl.create(xa.getCoordinate(k),dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(Location3DImpl.create(xa.getCoordinate(k),dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(Location3DImpl.create(dXStart,ya.getCoordinate(k),dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(Location3DImpl.create(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k),dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(Location3DImpl.create(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (floorFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(Location3DImpl.create(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
x=da.getCoordinate(j);
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(x,dY1 + pwa.getSeriesThickness()));
lre.setEnd(LocationImpl.create(x + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
x=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(x,dY1));
lre.setEnd(LocationImpl.create(x,dY2));
ipr.drawLine(lre);
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
y=(da.getCoordinate(j) - pwa.getSeriesThickness());
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(dX1,y));
lre.setEnd(LocationImpl.create(dX1 - pwa.getSeriesThickness(),y + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
y=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(dX1,y));
lre.setEnd(LocationImpl.create(dX2,y));
ipr.drawLine(lre);
}
}
}
if (!isDimension3D() && p.getClientArea().getOutline().isVisible()) {
rre.setBounds(bo);
ipr.drawRectangle(rre);
}
}","/** 
 * Ths background is the first component rendered within the plot block. This is rendered with Z-order=0
 */
protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  super.renderBackground(ipr,p);
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=pwa.getPlotBounds();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  if (!isDimension3D()) {
    if (ca.getShadowColor() != null) {
      rre.setBounds(bo.translateInstance(3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setOutline(ca.getOutline());
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
  }
  double dSeriesThickness=pwa.getSeriesThickness();
  double[] daX={bo.getLeft() - dSeriesThickness,bo.getLeft() + bo.getWidth() - dSeriesThickness};
  double[] daY={bo.getTop() + bo.getHeight() + dSeriesThickness,bo.getTop() + dSeriesThickness};
  final AllAxes aax=pwa.getAxes();
  AutoScale scPrimaryBase=null;
  AutoScale scPrimaryOrthogonal=null;
  AutoScale scAncillaryBase=null;
  double dXStart=0;
  double dYStart=0;
  double dZStart=0;
  double dXEnd=0;
  double dYEnd=0;
  double dZEnd=0;
  int baseTickCount=0;
  int ancillaryTickCount=0;
  int orthogonalTickCount=0;
  double xStep=0;
  double yStep=0;
  double zStep=0;
  if (isDimension3D()) {
    scPrimaryBase=aax.getPrimaryBase().getScale();
    scPrimaryOrthogonal=aax.getPrimaryOrthogonal().getScale();
    scAncillaryBase=aax.getAncillaryBase().getScale();
    dXStart=scPrimaryBase.getStart();
    dYStart=scPrimaryOrthogonal.getStart();
    dZStart=scAncillaryBase.getStart();
    dXEnd=scPrimaryBase.getEnd();
    dYEnd=scPrimaryOrthogonal.getEnd();
    dZEnd=scAncillaryBase.getEnd();
    baseTickCount=scPrimaryBase.getTickCordinates().size();
    ancillaryTickCount=scAncillaryBase.getTickCordinates().size();
    orthogonalTickCount=scPrimaryOrthogonal.getTickCordinates().size();
    xStep=scPrimaryBase.getUnitSize();
    yStep=scPrimaryOrthogonal.getUnitSize();
    zStep=scAncillaryBase.getUnitSize();
  }
  if (pwa.getDimension() == IConstants.TWO_5_D) {
    Location[] loa=null;
    if (cwa.getWallFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{LocationImpl.create(daX[0],daY[0]),LocationImpl.create(daX[0],daY[1])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      loa=new Location[4];
      loa[0]=LocationImpl.create(daX[0],daY[0]);
      loa[1]=LocationImpl.create(daX[0],daY[1]);
      loa[2]=LocationImpl.create(daX[0] + dSeriesThickness,daY[1] - dSeriesThickness);
      loa[3]=LocationImpl.create(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getWallFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    if (cwa.getFloorFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{LocationImpl.create(daX[0],daY[0]),LocationImpl.create(daX[1],daY[0])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      if (loa == null) {
        loa=new Location[4];
      }
      loa[0]=LocationImpl.create(daX[0],daY[0]);
      loa[1]=LocationImpl.create(daX[1],daY[0]);
      loa[2]=LocationImpl.create(daX[1] + dSeriesThickness,daY[0] - dSeriesThickness);
      loa[3]=LocationImpl.create(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getFloorFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
  }
 else   if (pwa.getDimension() == IConstants.THREE_D) {
    Location3D[] loa=null;
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Polygon3DRenderEvent.class);
    pre.setDoubleSided(true);
    loa=new Location3D[4];
    loa[0]=Location3DImpl.create(dXStart,dYStart,dZStart);
    loa[1]=Location3DImpl.create(dXStart,dYEnd,dZStart);
    loa[2]=Location3DImpl.create(dXStart,dYEnd,dZEnd);
    loa[3]=Location3DImpl.create(dXStart,dYStart,dZEnd);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    Object event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dLeftWall=Engine3D.getObjectFromEvent(event_new);
    loa[0]=Location3DImpl.create(dXStart,dYStart,dZStart);
    loa[1]=Location3DImpl.create(dXEnd,dYStart,dZStart);
    loa[2]=Location3DImpl.create(dXEnd,dYEnd,dZStart);
    loa[3]=Location3DImpl.create(dXStart,dYEnd,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dRightWall=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getWallFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getWallFill()).getTransparency() > 0) || (!(cwa.getWallFill() instanceof ColorDefinition) && cwa.getWallFill() != null)) {
      leftWallFill=true;
      rightWallFill=true;
    }
    if (loa == null) {
      loa=new Location3D[4];
    }
    loa[0]=Location3DImpl.create(dXStart,dYStart,dZStart);
    loa[1]=Location3DImpl.create(dXStart,dYStart,dZEnd);
    loa[2]=Location3DImpl.create(dXEnd,dYStart,dZEnd);
    loa[3]=Location3DImpl.create(dXEnd,dYStart,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getFloorFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dFloor=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getFloorFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getFloorFill()).getTransparency() > 0) || (!(cwa.getFloorFill() instanceof ColorDefinition) && cwa.getFloorFill() != null)) {
      floorFill=true;
    }
  }
  final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
  oaxa[0]=aax.getPrimaryBase();
  oaxa[1]=aax.getPrimaryOrthogonal();
  for (int i=0; i < aax.getOverlayCount(); i++) {
    oaxa[2 + i]=aax.getOverlay(i);
  }
  if (aax.getAncillaryBase() != null) {
    oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
  }
  renderMarkerRanges(oaxa,bo);
  renderMarkerLines(oaxa,bo);
  double x=0, y=0, vnext=0;
  LineAttributes lia;
  LineRenderEvent lre;
  final Insets insCA=aax.getInsets();
  int iCount;
  Grid g;
  double[] doaMinor=null;
  for (int i=0; i < oaxa.length; i++) {
    g=oaxa[i].getGrid();
    iCount=g.getMinorCountPerMajor();
    lia=oaxa[i].getGrid().getLineAttributes(IConstants.MINOR);
    if (lia == null || !lia.isSetStyle() || !lia.isVisible()) {
      continue;
    }
    if (iCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{Integer.valueOf(iCount)},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    AutoScale sc=oaxa[i].getScale();
    doaMinor=sc.getMinorCoordinates(iCount);
    if (isDimension3D()) {
      Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
      lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
        AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
      if (floorFill) {
        for (int k=0; k < xa.size() - 1; k++) {
          for (int j=0; j < doaMinor.length - 1; j++) {
            if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
              continue;
            }
            lre3d.setStart3D(Location3DImpl.create(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
            lre3d.setEnd3D(Location3DImpl.create(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
            lre3d.setObject3DParent(o3dFloor);
            getDeferredCache().addLine(lre3d);
          }
        }
      }
    if (rightWallFill) {
      for (int k=0; k < xa.size() - 1; k++) {
        for (int j=0; j < doaMinor.length - 1; j++) {
          if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
            continue;
          }
          lre3d.setStart3D(Location3DImpl.create(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
          lre3d.setEnd3D(Location3DImpl.create(xa.getCoordinate(k) + doaMinor[j],dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
          lre3d.setObject3DParent(o3dRightWall);
          getDeferredCache().addLine(lre3d);
        }
      }
    }
  break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
  for (int j=0; j < doaMinor.length - 1; j++) {
    if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
      continue;
    }
    lre3d.setStart3D(Location3DImpl.create(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
    lre3d.setEnd3D(Location3DImpl.create(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart + (ancillaryTickCount - 1) * zStep));
    lre3d.setObject3DParent(o3dLeftWall);
    getDeferredCache().addLine(lre3d);
  }
}
}
if (rightWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
  if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
    continue;
  }
  lre3d.setStart3D(Location3DImpl.create(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setEnd3D(Location3DImpl.create(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setObject3DParent(o3dRightWall);
  getDeferredCache().addLine(lre3d);
}
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(Location3DImpl.create(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(Location3DImpl.create(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
}
if (floorFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(Location3DImpl.create(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(Location3DImpl.create(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],da.getCoordinate(j + 1))) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],da.getCoordinate(j + 1)))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(x + iDirection * doaMinor[k],dY1 + pwa.getSeriesThickness()));
lre.setEnd(LocationImpl.create(x + iDirection * doaMinor[k] + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
vnext+=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(x + iDirection * doaMinor[k],dY1));
lre.setEnd(LocationImpl.create(x + iDirection * doaMinor[k],dY2));
ipr.drawLine(lre);
}
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j) - pwa.getSeriesThickness();
vnext=da.getCoordinate(j + 1) - pwa.getSeriesThickness();
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(LocationImpl.create(dX1 - pwa.getSeriesThickness(),y + iDirection * doaMinor[k] + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
vnext-=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(LocationImpl.create(dX2,y + iDirection * doaMinor[k]));
ipr.drawLine(lre);
}
}
}
}
for (int i=0; i < oaxa.length; i++) {
final int STEP_NUMBER=oaxa[i].getModelAxis().getScale().getMajorGridsStepNumber();
lia=oaxa[i].getGrid().getLineAttributes(IConstants.MAJOR);
if (lia == null || !lia.isSetStyle() || !lia.isVisible()) {
continue;
}
AutoScale sc=oaxa[i].getScale();
if (isDimension3D()) {
Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
if (floorFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(Location3DImpl.create(xa.getCoordinate(k),dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(Location3DImpl.create(xa.getCoordinate(k),dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(Location3DImpl.create(dXStart,ya.getCoordinate(k),dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(Location3DImpl.create(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k),dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(Location3DImpl.create(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (floorFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(Location3DImpl.create(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(Location3DImpl.create(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(x,dY1 + pwa.getSeriesThickness()));
lre.setEnd(LocationImpl.create(x + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(x,dY1));
lre.setEnd(LocationImpl.create(x,dY2));
ipr.drawLine(lre);
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=(da.getCoordinate(j) - pwa.getSeriesThickness());
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(dX1,y));
lre.setEnd(LocationImpl.create(dX1 - pwa.getSeriesThickness(),y + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(LocationImpl.create(dX1,y));
lre.setEnd(LocationImpl.create(dX2,y));
ipr.drawLine(lre);
}
}
}
if (!isDimension3D() && p.getClientArea().getOutline().isVisible()) {
rre.setBounds(bo);
ipr.drawRectangle(rre);
}
}",0.9804231757959264
70222,"private IEditorInput createEditorInput(IFileStore fileStore){
  IFile workspaceFile=getWorkspaceFile(fileStore);
  if (workspaceFile != null)   return new FileEditorInput(workspaceFile);
  return new FileStoreEditorInput(fileStore);
}","private IEditorInput createEditorInput(final IFileStore fileStore){
  IFile workspaceFile=getWorkspaceFile(fileStore);
  if (workspaceFile != null)   return new FileEditorInput(workspaceFile);
  IEditorInput iei=null;
  try {
    Class.forName(""String_Node_Str"");
    iei=new FileStoreEditorInput(fileStore);
  }
 catch (  ClassNotFoundException e) {
    return new IEPInput(){
      public boolean exists(){
        return fileStore.fetchInfo().exists();
      }
      public ImageDescriptor getImageDescriptor(){
        return null;
      }
      public String getName(){
        return fileStore.getName();
      }
      public IPersistableElement getPersistable(){
        return null;
      }
      public String getToolTipText(){
        return fileStore.toString();
      }
      public Object getAdapter(      Class adapter){
        if (IWorkbenchAdapter.class.equals(adapter))         return new IWorkbenchAdapter(){
          public Object[] getChildren(          Object o){
            return null;
          }
          public ImageDescriptor getImageDescriptor(          Object object){
            return null;
          }
          public String getLabel(          Object o){
            return ((FileStoreEditorInput)o).getName();
          }
          public Object getParent(          Object o){
            return null;
          }
        }
;
        return Platform.getAdapterManager().getAdapter(this,adapter);
      }
      public IPath getPath(){
        return new Path(fileStore.toURI().getPath());
      }
    }
;
  }
  return iei;
}",0.2527839643652561
70223,"private String getPath(String fileName){
  Bundle bundle=Platform.getBundle(ChartExamplesPlugin.ID);
  Path relativePath=new Path(""String_Node_Str"" + fileName + JAVA_EXTENSION);
  URL relativeURL=FileLocator.find(bundle,relativePath,null);
  String absolutePath=null;
  try {
    URL absoluteURL=FileLocator.toFileURL(relativeURL);
    String tmp=absoluteURL.getPath();
    absolutePath=tmp.substring(0,tmp.lastIndexOf(""String_Node_Str""));
  }
 catch (  IOException io) {
    io.printStackTrace();
  }
  return absolutePath;
}","public IPath getPath(){
  return new Path(fileStore.toURI().getPath());
}",0.2103505843071786
70224,"public String getHeaders(){
  return headers;
}","public String getHeaders(){
  if (headers != null) {
    return headers;
  }
 else   if (cellDesign != null && cellDesign.getHeaders() != null) {
    return getConstantValue(cellDesign.getHeaders());
  }
  return null;
}",0.299625468164794
70225,"protected void writeFields(DataOutputStream out) throws IOException {
  super.writeFields(out);
  if (rowSpan != -1) {
    IOUtil.writeShort(out,FIELD_ROW_SPAN);
    IOUtil.writeInt(out,rowSpan);
  }
  if (colSpan != -1) {
    IOUtil.writeShort(out,FIELD_COL_SPAN);
    IOUtil.writeInt(out,colSpan);
  }
  if (column != -1) {
    IOUtil.writeShort(out,FIELD_COLUMN);
    IOUtil.writeInt(out,column);
  }
  if (displayGroupIcon != null) {
    IOUtil.writeShort(out,FIELD_DISPLAY_GROUP_ICON);
    IOUtil.writeBool(out,displayGroupIcon.booleanValue());
  }
  if (drop != null) {
    IOUtil.writeShort(out,FIELD_DROP);
    IOUtil.writeString(out,drop);
  }
}","protected void writeFields(DataOutputStream out) throws IOException {
  super.writeFields(out);
  if (rowSpan != -1) {
    IOUtil.writeShort(out,FIELD_ROW_SPAN);
    IOUtil.writeInt(out,rowSpan);
  }
  if (colSpan != -1) {
    IOUtil.writeShort(out,FIELD_COL_SPAN);
    IOUtil.writeInt(out,colSpan);
  }
  if (column != -1) {
    IOUtil.writeShort(out,FIELD_COLUMN);
    IOUtil.writeInt(out,column);
  }
  if (displayGroupIcon != null) {
    IOUtil.writeShort(out,FIELD_DISPLAY_GROUP_ICON);
    IOUtil.writeBool(out,displayGroupIcon.booleanValue());
  }
  if (drop != null) {
    IOUtil.writeShort(out,FIELD_DROP);
    IOUtil.writeString(out,drop);
  }
  if (headers != null) {
    IOUtil.writeShort(out,FIELD_HEADERS);
    IOUtil.writeString(out,headers);
  }
}",0.923728813559322
70226,"public boolean needSave(){
  if (rowSpan != -1 || colSpan != -1 || column != -1) {
    return true;
  }
  if (displayGroupIcon != null) {
    return true;
  }
  return super.needSave();
}","public boolean needSave(){
  if (rowSpan != -1 || colSpan != -1 || column != -1) {
    return true;
  }
  if (displayGroupIcon != null || headers != null) {
    return true;
  }
  return super.needSave();
}",0.9516539440203562
70227,"protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_ROW_SPAN:
    rowSpan=IOUtil.readInt(in);
  break;
case FIELD_COL_SPAN:
colSpan=IOUtil.readInt(in);
break;
case FIELD_COLUMN:
column=IOUtil.readInt(in);
break;
case FIELD_START_OF_GROUP:
IOUtil.readBool(in);
break;
case FIELD_DISPLAY_GROUP_ICON:
displayGroupIcon=Boolean.valueOf(IOUtil.readBool(in));
break;
case FIELD_DROP:
drop=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in,loader);
break;
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_ROW_SPAN:
    rowSpan=IOUtil.readInt(in);
  break;
case FIELD_COL_SPAN:
colSpan=IOUtil.readInt(in);
break;
case FIELD_COLUMN:
column=IOUtil.readInt(in);
break;
case FIELD_START_OF_GROUP:
IOUtil.readBool(in);
break;
case FIELD_DISPLAY_GROUP_ICON:
displayGroupIcon=Boolean.valueOf(IOUtil.readBool(in));
break;
case FIELD_DROP:
drop=IOUtil.readString(in);
break;
case FIELD_HEADERS:
headers=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in,loader);
break;
}
}",0.9510135135135136
70228,"public String getScope(){
  return scope;
}","public String getScope(){
  if (cellDesign != null) {
    return cellDesign.getScope();
  }
  return null;
}",0.5695364238410596
70229,"private void processHeaders(CellDesign cellDesign,ICellContent cellContent){
  String headersExpression=cellDesign.getHeaders();
  if (headersExpression != null) {
    try {
      Object tmp=evaluate(headersExpression);
      if (tmp != null && !tmp.equals(""String_Node_Str"")) {
        String headers=tmp.toString();
        cellContent.setHeaders(headers);
      }
    }
 catch (    BirtException ex) {
      context.addException(ex);
    }
  }
}","private void processHeaders(CellDesign cellDesign,ICellContent cellContent){
  String headers=evaluate(cellDesign.getHeaders());
  if (headers != null && !headers.equals(""String_Node_Str"")) {
    cellContent.setHeaders(headers);
  }
}",0.5513196480938416
70230,"public IContent execute(){
  CellDesign cellDesign=(CellDesign)getDesign();
  ICellContent cellContent=report.createCellContent();
  setContent(cellContent);
  executeQuery();
  initializeContent(cellDesign,cellContent);
  processAction(cellDesign,cellContent);
  processBookmark(cellDesign,cellContent);
  processScope(cellDesign,cellContent);
  processHeaders(cellDesign,cellContent);
  processStyle(cellDesign,cellContent);
  processVisibility(cellDesign,cellContent);
  if (context.isInFactory()) {
    handleOnCreate(cellContent);
  }
  startTOCEntry(cellContent);
  currentItem=0;
  return content;
}","public IContent execute(){
  CellDesign cellDesign=(CellDesign)getDesign();
  ICellContent cellContent=report.createCellContent();
  setContent(cellContent);
  executeQuery();
  initializeContent(cellDesign,cellContent);
  processAction(cellDesign,cellContent);
  processBookmark(cellDesign,cellContent);
  processHeaders(cellDesign,cellContent);
  processStyle(cellDesign,cellContent);
  processVisibility(cellDesign,cellContent);
  if (context.isInFactory()) {
    handleOnCreate(cellContent);
  }
  startTOCEntry(cellContent);
  currentItem=0;
  return content;
}",0.9658703071672357
70231,"public void setHeaders(String headers){
  this.headers=headers;
}","public void setHeaders(Expression<String> headers){
  this.headers=headers;
}",0.9154929577464788
70232,"public String getHeaders(){
  return this.headers;
}","public Expression<String> getHeaders(){
  return this.headers;
}",0.896551724137931
70233,"protected void readCellField(DataInputStream in,CellDesign cell,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_COLUMN:
    int column=IOUtil.readInt(in);
  cell.setColumn(column);
break;
case FIELD_COL_SPAN:
int colSpan=IOUtil.readInt(in);
cell.setColSpan(colSpan);
break;
case FIELD_ROW_SPAN:
int rowSpan=IOUtil.readInt(in);
cell.setRowSpan(rowSpan);
break;
case FIELD_DROP:
String drop=IOUtil.readString(in);
cell.setDrop(drop);
break;
case FIELD_DISPLAY_GROUP_ICON:
boolean displayGroupIcon=IOUtil.readBool(in);
cell.setDisplayGroupIcon(displayGroupIcon);
break;
case FIELD_DIAGONAL_NUMBER:
int diagonalNumber=IOUtil.readInt(in);
cell.setDiagonalNumber(diagonalNumber);
break;
case FIELD_DIAGONAL_STYLE:
String diagonalStyle=IOUtil.readString(in);
cell.setDiagonalStyle(diagonalStyle);
break;
case FIELD_DIAGONAL_WIDTH:
DimensionType diagonalWidth=readDimension(in);
cell.setDiagonalWidth(diagonalWidth);
break;
case FIELD_ANTIDIAGONAL_NUMBER:
int antidiagonalNumber=IOUtil.readInt(in);
cell.setAntidiagonalNumber(antidiagonalNumber);
break;
case FIELD_ANTIDIAGONAL_STYLE:
String antidiagonalStyle=IOUtil.readString(in);
cell.setAntidiagonalStyle(antidiagonalStyle);
break;
case FIELD_ANTIDIAGONAL_WIDTH:
DimensionType antidiagonalWidth=readDimension(in);
cell.setAntidiagonalWidth(antidiagonalWidth);
break;
default :
readReportItemField(in,cell,fieldType);
}
}","protected void readCellField(DataInputStream in,CellDesign cell,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_COLUMN:
    int column=IOUtil.readInt(in);
  cell.setColumn(column);
break;
case FIELD_COL_SPAN:
int colSpan=IOUtil.readInt(in);
cell.setColSpan(colSpan);
break;
case FIELD_ROW_SPAN:
int rowSpan=IOUtil.readInt(in);
cell.setRowSpan(rowSpan);
break;
case FIELD_DROP:
String drop=IOUtil.readString(in);
cell.setDrop(drop);
break;
case FIELD_DISPLAY_GROUP_ICON:
boolean displayGroupIcon=IOUtil.readBool(in);
cell.setDisplayGroupIcon(displayGroupIcon);
break;
case FIELD_DIAGONAL_NUMBER:
int diagonalNumber=IOUtil.readInt(in);
cell.setDiagonalNumber(diagonalNumber);
break;
case FIELD_DIAGONAL_STYLE:
String diagonalStyle=IOUtil.readString(in);
cell.setDiagonalStyle(diagonalStyle);
break;
case FIELD_DIAGONAL_WIDTH:
DimensionType diagonalWidth=readDimension(in);
cell.setDiagonalWidth(diagonalWidth);
break;
case FIELD_ANTIDIAGONAL_NUMBER:
int antidiagonalNumber=IOUtil.readInt(in);
cell.setAntidiagonalNumber(antidiagonalNumber);
break;
case FIELD_ANTIDIAGONAL_STYLE:
String antidiagonalStyle=IOUtil.readString(in);
cell.setAntidiagonalStyle(antidiagonalStyle);
break;
case FIELD_ANTIDIAGONAL_WIDTH:
DimensionType antidiagonalWidth=readDimension(in);
cell.setAntidiagonalWidth(antidiagonalWidth);
break;
case FIELD_HEADERS:
Expression<String> headers=readStringExpression(in);
cell.setHeaders(headers);
break;
case FIELD_SCOPE:
String scope=IOUtil.readString(in);
cell.setScope(scope);
break;
default :
readReportItemField(in,cell,fieldType);
}
}",0.9362563237774032
70234,"protected void writeCell(DataOutputStream out,CellDesign cell) throws IOException {
  writeReportItem(out,cell);
  int column=cell.getColumn();
  if (column != -1) {
    IOUtil.writeShort(out,FIELD_COLUMN);
    IOUtil.writeInt(out,column);
  }
  int colSpan=cell.getColSpan();
  if (colSpan != 1) {
    IOUtil.writeShort(out,FIELD_COL_SPAN);
    IOUtil.writeInt(out,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan != 1) {
    IOUtil.writeShort(out,FIELD_ROW_SPAN);
    IOUtil.writeInt(out,rowSpan);
  }
  String drop=cell.getDrop();
  if (drop != null) {
    IOUtil.writeShort(out,FIELD_DROP);
    IOUtil.writeString(out,drop);
  }
  boolean displayGroupIcon=cell.getDisplayGroupIcon();
  if (displayGroupIcon) {
    IOUtil.writeShort(out,FIELD_DISPLAY_GROUP_ICON);
    IOUtil.writeBool(out,displayGroupIcon);
  }
  if (cell.hasDiagonalLine()) {
    int diagonalNumber=cell.getDiagonalNumber();
    if (diagonalNumber > 0) {
      IOUtil.writeShort(out,FIELD_DIAGONAL_NUMBER);
      IOUtil.writeInt(out,diagonalNumber);
      String diagonalStyle=cell.getDiagonalStyle();
      if (diagonalStyle != null) {
        IOUtil.writeShort(out,FIELD_DIAGONAL_STYLE);
        IOUtil.writeString(out,diagonalStyle);
      }
      DimensionType diagonalWidth=cell.getDiagonalWidth();
      if (diagonalWidth != null) {
        IOUtil.writeShort(out,FIELD_DIAGONAL_WIDTH);
        writeDimension(out,diagonalWidth);
      }
    }
    int antidiagonalNumber=cell.getAntidiagonalNumber();
    if (antidiagonalNumber > 0) {
      IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_NUMBER);
      IOUtil.writeInt(out,antidiagonalNumber);
      String antidiagonalStyle=cell.getAntidiagonalStyle();
      if (antidiagonalStyle != null) {
        IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_STYLE);
        IOUtil.writeString(out,antidiagonalStyle);
      }
      DimensionType antidiagonalWidth=cell.getAntidiagonalWidth();
      if (antidiagonalWidth != null) {
        IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_WIDTH);
        writeDimension(out,antidiagonalWidth);
      }
    }
  }
}","protected void writeCell(DataOutputStream out,CellDesign cell) throws IOException {
  writeReportItem(out,cell);
  int column=cell.getColumn();
  if (column != -1) {
    IOUtil.writeShort(out,FIELD_COLUMN);
    IOUtil.writeInt(out,column);
  }
  int colSpan=cell.getColSpan();
  if (colSpan != 1) {
    IOUtil.writeShort(out,FIELD_COL_SPAN);
    IOUtil.writeInt(out,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan != 1) {
    IOUtil.writeShort(out,FIELD_ROW_SPAN);
    IOUtil.writeInt(out,rowSpan);
  }
  String drop=cell.getDrop();
  if (drop != null) {
    IOUtil.writeShort(out,FIELD_DROP);
    IOUtil.writeString(out,drop);
  }
  Expression<String> headers=cell.getHeaders();
  if (headers != null) {
    IOUtil.writeShort(out,FIELD_HEADERS);
    write(out,headers);
  }
  String scope=cell.getScope();
  if (scope != null) {
    IOUtil.writeShort(out,FIELD_SCOPE);
    IOUtil.writeString(out,scope);
  }
  boolean displayGroupIcon=cell.getDisplayGroupIcon();
  if (displayGroupIcon) {
    IOUtil.writeShort(out,FIELD_DISPLAY_GROUP_ICON);
    IOUtil.writeBool(out,displayGroupIcon);
  }
  if (cell.hasDiagonalLine()) {
    int diagonalNumber=cell.getDiagonalNumber();
    if (diagonalNumber > 0) {
      IOUtil.writeShort(out,FIELD_DIAGONAL_NUMBER);
      IOUtil.writeInt(out,diagonalNumber);
      String diagonalStyle=cell.getDiagonalStyle();
      if (diagonalStyle != null) {
        IOUtil.writeShort(out,FIELD_DIAGONAL_STYLE);
        IOUtil.writeString(out,diagonalStyle);
      }
      DimensionType diagonalWidth=cell.getDiagonalWidth();
      if (diagonalWidth != null) {
        IOUtil.writeShort(out,FIELD_DIAGONAL_WIDTH);
        writeDimension(out,diagonalWidth);
      }
    }
    int antidiagonalNumber=cell.getAntidiagonalNumber();
    if (antidiagonalNumber > 0) {
      IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_NUMBER);
      IOUtil.writeInt(out,antidiagonalNumber);
      String antidiagonalStyle=cell.getAntidiagonalStyle();
      if (antidiagonalStyle != null) {
        IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_STYLE);
        IOUtil.writeString(out,antidiagonalStyle);
      }
      DimensionType antidiagonalWidth=cell.getAntidiagonalWidth();
      if (antidiagonalWidth != null) {
        IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_WIDTH);
        writeDimension(out,antidiagonalWidth);
      }
    }
  }
}",0.9372877518677836
70235,"private void setupAuralInfomation(CellDesign cell,CellHandle handle){
  String bookmark=validateExpression(handle.getBookmark());
  cell.setBookmark(createExpression(bookmark));
  String headers=handle.getHeaders();
  cell.setHeaders(validateExpression(headers));
  String scope=handle.getScope();
  if (scope != null) {
    cell.setScope(scope);
  }
}","private void setupAuralInfomation(CellDesign cell,CellHandle handle){
  String bookmark=validateExpression(handle.getBookmark());
  cell.setBookmark(createExpression(bookmark));
  String headers=handle.getHeaders();
  cell.setHeaders(createExpression(validateExpression(headers)));
  String scope=handle.getScope();
  if (scope != null) {
    cell.setScope(scope);
  }
}",0.9418282548476454
70236,"protected void updateBackgroundImage(){
  BackgroundImageInfo bgi=boxStyle.getBackgroundImage();
  Image img=null;
  if (bgi != null) {
    if ((bgi.getXOffset() != 0 || bgi.getYOffset() != 0)) {
      String imageUrl=bgi.getUrl();
      try {
        img=Image.getInstance(new URL(bgi.getUrl()));
      }
 catch (      Exception e) {
        if (SvgFile.isSvg(imageUrl)) {
          try {
            img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,ex.getMessage(),ex);
          }
        }
 else {
          logger.log(Level.WARNING,e.getMessage(),e);
        }
      }
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      float imageWidth=img.plainWidth() / resolutionX * 72;
      float imageHeight=img.plainHeight() / resolutionY * 72;
      bgi.setXOffset(bgi.getXOffset() * (width - (int)(imageWidth * PDFConstants.LAYOUT_TO_PDF_RATIO)) / 100);
      bgi.setYOffset(bgi.getYOffset() * (height - (int)(imageHeight * PDFConstants.LAYOUT_TO_PDF_RATIO)) / 100);
    }
  }
}","protected void updateBackgroundImage(){
  BackgroundImageInfo bgi=boxStyle.getBackgroundImage();
  Image img=null;
  if (bgi != null) {
    if ((bgi.getXOffset() != 0 || bgi.getYOffset() != 0)) {
      String imageUrl=bgi.getUrl();
      try {
        img=Image.getInstance(new URL(bgi.getUrl()));
      }
 catch (      Exception e) {
        if (SvgFile.isSvg(imageUrl)) {
          try {
            img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
          }
 catch (          Exception ex) {
            logger.log(Level.WARNING,ex.getMessage(),ex);
          }
        }
 else {
          logger.log(Level.WARNING,e.getMessage(),e);
        }
      }
      if (img != null) {
        int resolutionX=img.getDpiX();
        int resolutionY=img.getDpiY();
        if (0 == resolutionX || 0 == resolutionY) {
          resolutionX=96;
          resolutionY=96;
        }
        float imageWidth=img.plainWidth() / resolutionX * 72;
        float imageHeight=img.plainHeight() / resolutionY * 72;
        bgi.setXOffset(bgi.getXOffset() * (width - (int)(imageWidth * PDFConstants.LAYOUT_TO_PDF_RATIO)) / 100);
        bgi.setYOffset(bgi.getYOffset() * (height - (int)(imageHeight * PDFConstants.LAYOUT_TO_PDF_RATIO)) / 100);
      }
    }
  }
}",0.97844652297682
70237,"protected void checkPageBreak() throws BirtException {
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
    }
  }
}","protected boolean checkPageBreak() throws BirtException {
  boolean ret=false;
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
      ret=true;
    }
  }
  return ret;
}",0.9040247678018576
70238,"public void close() throws BirtException {
  getTableArea().addRow(this);
  updateBackgroundImage();
  checkPageBreak();
  parent.update(this);
  finished=true;
}","public void close() throws BirtException {
  TableArea table=getTableArea();
  table.addRow(this);
  updateBackgroundImage();
  boolean pb=checkPageBreak();
  if (pb) {
    table.addRow(this);
  }
  parent.update(this);
  finished=true;
}",0.755
70239,"public void close() throws BirtException {
  int borderHeight=0;
  if (layout != null) {
    int height=layout.resolveAll();
    if (0 != height) {
      currentBP=currentBP + height;
    }
    borderHeight=layout.resolveBottomBorder();
    layout.remove(this);
  }
  setHeight(currentBP + getOffsetY() + borderHeight);
  updateBackgroundImage();
  if (parent != null) {
    checkPageBreak();
    parent.update(this);
  }
  finished=true;
}","public void close() throws BirtException {
  int borderHeight=0;
  if (layout != null) {
    int height=layout.resolveAll();
    if (0 != height) {
      currentBP=currentBP + height;
    }
    borderHeight=layout.resolveBottomBorder();
    layout.remove(this);
  }
  setHeight(currentBP + getOffsetY() + borderHeight);
  updateBackgroundImage();
  if (parent != null) {
    boolean pb=checkPageBreak();
    if (pb) {
      int height=layout.resolveAll();
      if (0 != height) {
        currentBP=currentBP + height;
      }
      borderHeight=layout.resolveBottomBorder();
      layout.remove(this);
    }
    parent.update(this);
  }
  finished=true;
}",0.7408759124087592
70240,"public ILayout createLayout(ContainerArea parent,LayoutContext context,IContent content){
switch (content.getContentType()) {
case IContent.DATA_CONTENT:
case IContent.LABEL_CONTENT:
case IContent.TEXT_CONTENT:
    if (PropertyUtil.isInlineElement(content)) {
      return new InlineTextArea(parent,context,content);
    }
 else {
      return new BlockTextArea(parent,context,content);
    }
case IContent.IMAGE_CONTENT:
  return new ImageAreaLayout(parent,context,(IImageContent)content);
case IContent.AUTOTEXT_CONTENT:
int type=((IAutoTextContent)content).getType();
if (type == IAutoTextContent.TOTAL_PAGE || type == IAutoTextContent.UNFILTERED_TOTAL_PAGE) {
context.addUnresolvedContent(content);
return new TemplateAreaLayout(parent,context,content);
}
 else {
if (PropertyUtil.isInlineElement(content)) {
  return new InlineTextArea(parent,context,content);
}
 else {
  return new BlockTextArea(parent,context,content);
}
}
default :
return null;
}
}","public ILayout createLayout(ContainerArea parent,LayoutContext context,IContent content){
switch (content.getContentType()) {
case IContent.DATA_CONTENT:
case IContent.LABEL_CONTENT:
case IContent.TEXT_CONTENT:
    if (PropertyUtil.isInlineElement(content)) {
      DimensionType width=content.getWidth();
      if (width != null) {
        return new BlockTextArea(parent,context,content);
      }
 else {
        return new InlineTextArea(parent,context,content);
      }
    }
 else {
      return new BlockTextArea(parent,context,content);
    }
case IContent.IMAGE_CONTENT:
  return new ImageAreaLayout(parent,context,(IImageContent)content);
case IContent.AUTOTEXT_CONTENT:
int type=((IAutoTextContent)content).getType();
if (type == IAutoTextContent.TOTAL_PAGE || type == IAutoTextContent.UNFILTERED_TOTAL_PAGE) {
context.addUnresolvedContent(content);
return new TemplateAreaLayout(parent,context,content);
}
 else {
if (PropertyUtil.isInlineElement(content)) {
  return new InlineTextArea(parent,context,content);
}
 else {
  return new BlockTextArea(parent,context,content);
}
}
default :
return null;
}
}",0.8789194404245055
70241,"/** 
 * 1) Creates row wrapper. 2) For the null cell in the row wrapper, fills the relevant position with dummy cell or empty cell. 3) Updates the height of the row and the cells in the row.
 * @param rowArea current rowArea.
 */
private void updateRow(RowArea rowArea,boolean isFixedLayout){
  RowArea lastRow=(RowArea)rows.getCurrent();
  int height=rowArea.getSpecifiedHeight();
  if (!isFixedLayout || height == 0) {
    for (int i=startCol; i <= endCol; i++) {
      CellArea upperCell=null;
      if (lastRow != null) {
        upperCell=lastRow.getCell(i);
      }
      if (upperCell != null && (upperCell.getRowSpan() > 1)) {
        DummyCell dummyCell=createDummyCell(upperCell);
        rowArea.setCell(dummyCell);
        int delta=dummyCell.getDelta();
        if (dummyCell.getRowSpan() == 1) {
          height=Math.max(height,dummyCell.getCell().getHeight() - delta);
        }
        i=i + upperCell.getColSpan() - 1;
      }
 else {
        CellArea cell=rowArea.getCell(i);
        if (cell != null && cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
          i=i + cell.getColSpan() - 1;
        }
      }
    }
  }
  updateRowHeight(rowArea,height,isFixedLayout);
}","/** 
 * 1) Creates row wrapper. 2) For the null cell in the row wrapper, fills the relevant position with dummy cell or empty cell. 3) Updates the height of the row and the cells in the row.
 * @param rowArea current rowArea.
 */
private void updateRow(RowArea rowArea,boolean isFixedLayout){
  RowArea lastRow=(RowArea)rows.getCurrent();
  int height=rowArea.getSpecifiedHeight();
  if (!isFixedLayout || height == 0) {
    for (int i=startCol; i <= endCol; i++) {
      CellArea upperCell=null;
      if (lastRow != null) {
        upperCell=lastRow.getCell(i);
      }
      if (upperCell != null && (upperCell.getRowSpan() > 1)) {
        DummyCell dummyCell=createDummyCell(upperCell);
        rowArea.setCell(dummyCell);
        int delta=dummyCell.getDelta();
        if (dummyCell.getRowSpan() == 1) {
          height=Math.max(height,dummyCell.getCell().getHeight() - delta);
        }
        i=i + upperCell.getColSpan() - 1;
      }
 else {
        CellArea cell=rowArea.getCell(i);
        if (cell != null && cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
          i=i + cell.getColSpan() - 1;
        }
      }
    }
  }
 else {
    for (int i=startCol; i <= endCol; i++) {
      CellArea upperCell=null;
      if (lastRow != null) {
        upperCell=lastRow.getCell(i);
      }
      if (upperCell != null && (upperCell.getRowSpan() > 1)) {
        DummyCell dummyCell=createDummyCell(upperCell);
        rowArea.setCell(dummyCell);
        i=i + upperCell.getColSpan() - 1;
      }
    }
  }
  updateRowHeight(rowArea,height,isFixedLayout);
}",0.8619217081850534
70242,"protected String format(Object oText) throws ChartException {
  DecimalFormat df=null;
  if (fs == null && oText instanceof Number) {
    String sPattern=ValueFormatter.getNumericPattern(((Number)oText).doubleValue());
    df=dfCache.get(sPattern);
  }
  if (oText instanceof Calendar) {
    oText=new CDateTime((Calendar)oText);
  }
 else   if (oText instanceof Date) {
    oText=new CDateTime((Date)oText);
  }
  try {
    return ValueFormatter.format(oText,fs,lgData.rtc.getULocale(),df);
  }
 catch (  ChartException e) {
    return oText.toString();
  }
}","protected String format(Object oText) throws ChartException {
  DecimalFormat df=null;
  if (fs == null && oText instanceof Number) {
    String sPattern=ValueFormatter.getNumericPattern(((Number)oText).doubleValue());
    df=dfCache.get(sPattern);
  }
  try {
    return ValueFormatter.format(oText,fs,lgData.rtc.getULocale(),df);
  }
 catch (  ChartException e) {
    return oText.toString();
  }
}",0.8333333333333334
70243,"@Override public String format(Object obj){
  if (obj instanceof Calendar) {
    CDateTime cd=new CDateTime((Calendar)obj);
    return formatCDateTime(cd);
  }
 else   if (obj instanceof Date) {
    CDateTime cd=new CDateTime((Date)obj);
    return formatCDateTime(cd);
  }
 else {
    return super.format(obj);
  }
}","@Override public String format(Object obj){
  if (obj instanceof CDateTime) {
    return formatCDateTime((CDateTime)obj);
  }
 else {
    return super.format(obj);
  }
}",0.6872427983539094
70244,"/** 
 * Format base series data. Now it is only used to format datetime data, format date for different grouping unit.
 * @param cm
 * @param lhmLookup
 * @param rowSet
 */
public void formatBaseSeriesData(Chart cm,GroupingLookupHelper lhmLookup,List rowSet) throws ChartException {
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    Axis[] axaBase=cwa.getBaseAxes();
    for (int j=0; j < axaBase.length; j++) {
      sdBase=axaBase[j].getSeriesDefinitions().get(0);
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    sdBase=cwoa.getSeriesDefinitions().get(0);
  }
  final SeriesGrouping sg=sdBase.getGrouping();
  if (sg == null || !sg.isEnabled()) {
    return;
  }
  final Series seBaseDesignTime=sdBase.getDesignTimeSeries();
  final Query q=seBaseDesignTime.getDataDefinition().get(0);
  final int iBaseColumnIndex=lhmLookup.findIndexOfBaseSeries(q.getDefinition());
  final DataType dtGrouping=sg.getGroupType();
  String aggr=sdBase.getGrouping().getAggregateExpression();
  IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggr);
  boolean bIsSumAggr=aFunc != null && aFunc.getType() == IAggregateFunction.SUMMARY_AGGR;
  if (dtGrouping == DataType.DATE_TIME_LITERAL && bIsSumAggr) {
    int cunit=GroupingUtil.groupingUnit2CDateUnit(sg.getGroupingUnit());
    CDateTime baseReference=null;
    for (Iterator iter=rowSet.iterator(); iter.hasNext(); ) {
      Object[] oaTuple=(Object[])iter.next();
      Object obj=oaTuple[iBaseColumnIndex];
      if (obj instanceof CDateTime) {
        baseReference=(CDateTime)obj;
      }
 else       if (obj instanceof Calendar) {
        baseReference=new CDateTime((Calendar)obj);
      }
 else       if (obj instanceof Date) {
        baseReference=new CDateTime((Date)obj);
      }
 else {
        baseReference=new CDateTime(0);
      }
      baseReference.clearBelow(cunit);
      oaTuple[iBaseColumnIndex]=baseReference;
    }
  }
}","/** 
 * Format base series data. Now it is only used to format datetime data, format date for different grouping unit.
 * @param cm
 * @param lhmLookup
 * @param rowSet
 */
public void formatBaseSeriesData(Chart cm,GroupingLookupHelper lhmLookup,List rowSet) throws ChartException {
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    Axis[] axaBase=cwa.getBaseAxes();
    for (int j=0; j < axaBase.length; j++) {
      sdBase=axaBase[j].getSeriesDefinitions().get(0);
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    sdBase=cwoa.getSeriesDefinitions().get(0);
  }
  final SeriesGrouping sg=sdBase.getGrouping();
  if (sg == null || !sg.isEnabled()) {
    return;
  }
  final Series seBaseDesignTime=sdBase.getDesignTimeSeries();
  final Query q=seBaseDesignTime.getDataDefinition().get(0);
  final int iBaseColumnIndex=lhmLookup.findIndexOfBaseSeries(q.getDefinition());
  final DataType dtGrouping=sg.getGroupType();
  String aggr=sdBase.getGrouping().getAggregateExpression();
  IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggr);
  boolean bIsSumAggr=aFunc != null && aFunc.getType() == IAggregateFunction.SUMMARY_AGGR;
  if (dtGrouping == DataType.DATE_TIME_LITERAL && bIsSumAggr) {
    int cunit=GroupingUtil.groupingUnit2CDateUnit(sg.getGroupingUnit());
    CDateTime baseReference=null;
    for (Iterator iter=rowSet.iterator(); iter.hasNext(); ) {
      Object[] oaTuple=(Object[])iter.next();
      Object obj=oaTuple[iBaseColumnIndex];
      if (obj instanceof CDateTime) {
        baseReference=(CDateTime)obj;
      }
 else {
        baseReference=new CDateTime(0);
      }
      baseReference.clearBelow(cunit);
      oaTuple[iBaseColumnIndex]=baseReference;
    }
  }
}",0.9487312273433454
70245,"/** 
 * Evaluate data for all expressions, include base series, optional Y series grouping and value series.
 * @param idre
 * @param columns
 * @param areValueSeries
 * @return
 * @since 2.3
 */
public List<Object[]> evaluateRowSet(IDataRowExpressionEvaluator idre,final Object[] columns){
  List<Object[]> liResultSet=new ArrayList<Object[]>();
  final int iColumnCount=columns.length;
  Object[] oaTuple;
  final int MAX_ROW_COUNT=ChartUtil.getSupportedMaxRowCount(rtc);
  if (idre.first()) {
    int count=0;
    do {
      if (MAX_ROW_COUNT > 0 && count++ >= MAX_ROW_COUNT) {
        break;
      }
      oaTuple=new Object[iColumnCount];
      for (int i=0; i < columns.length; i++) {
        oaTuple[i]=idre.evaluate((String)columns[i]);
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  return liResultSet;
}","/** 
 * Evaluate data for all expressions, include base series, optional Y series grouping and value series.
 * @param idre
 * @param columns
 * @param areValueSeries
 * @return
 * @since 2.3
 */
public List<Object[]> evaluateRowSet(IDataRowExpressionEvaluator idre,final Object[] columns){
  List<Object[]> liResultSet=new ArrayList<Object[]>();
  final int iColumnCount=columns.length;
  Object[] oaTuple;
  final int MAX_ROW_COUNT=ChartUtil.getSupportedMaxRowCount(rtc);
  if (idre.first()) {
    int count=0;
    do {
      if (MAX_ROW_COUNT > 0 && count++ >= MAX_ROW_COUNT) {
        break;
      }
      oaTuple=new Object[iColumnCount];
      for (int i=0; i < columns.length; i++) {
        Object value=idre.evaluate((String)columns[i]);
        if (value instanceof Date) {
          value=new CDateTime((Date)value);
        }
 else         if (value instanceof Calendar) {
          value=new CDateTime((Calendar)value);
        }
        oaTuple[i]=value;
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  return liResultSet;
}",0.8476890756302521
70246,"/** 
 * Format object into specified data format. 
 * @param obj object will be formated as date time.
 * @param groupingUnitType the grouping unit type. 
 * @return instance of <code>CDateTime</code>.
 * @since 2.3
 */
static CDateTime formatGroupedDateTime(Object obj,GroupingUnitType groupingUnitType){
  int cunit=groupingUnit2CDateUnit(groupingUnitType);
  CDateTime date=null;
  if (obj instanceof CDateTime) {
    date=(CDateTime)obj;
  }
 else   if (obj instanceof Calendar) {
    date=new CDateTime((Calendar)obj);
  }
 else   if (obj instanceof Date) {
    date=new CDateTime((Date)obj);
  }
 else {
    date=new CDateTime(0);
  }
  date.clearBelow(cunit);
  return date;
}","/** 
 * Format object into specified data format. 
 * @param obj object will be formated as date time.
 * @param groupingUnitType the grouping unit type. 
 * @return instance of <code>CDateTime</code>.
 * @since 2.3
 */
static CDateTime formatGroupedDateTime(Object obj,GroupingUnitType groupingUnitType){
  int cunit=groupingUnit2CDateUnit(groupingUnitType);
  CDateTime date=null;
  if (obj instanceof CDateTime) {
    date=(CDateTime)obj;
  }
 else {
    date=new CDateTime(0);
  }
  date.clearBelow(cunit);
  return date;
}",0.8710743801652893
70247,"private void groupDateTime(List resultSet,int iBaseColumnIndex,int[] iaColumnIndexes,int[] iaBreaks,CDateTime ndeBaseReference,long iGroupingInterval,GroupingUnitType groupingUnit,IAggregateFunction[] iafa) throws ChartException {
  final int iOrthogonalSeriesCount=iaColumnIndexes.length;
  int cunit=GroupingUtil.groupingUnit2CDateUnit(groupingUnit);
  int iStartIndex=0, iEndIndex;
  int totalGroupCount=iaBreaks == null ? 1 : (iaBreaks.length + 1);
  int totalRowCount=resultSet.size();
  for (int k=0; k < totalGroupCount; k++) {
    if (k == totalGroupCount - 1) {
      iEndIndex=totalRowCount;
    }
 else {
      iEndIndex=iaBreaks[k];
    }
    CDateTime baseReference=ndeBaseReference;
    if (baseReference == null) {
      Object obj=((Object[])resultSet.get(iStartIndex))[iBaseColumnIndex];
      if (obj instanceof CDateTime) {
        baseReference=(CDateTime)obj;
      }
 else       if (obj instanceof Calendar) {
        baseReference=new CDateTime((Calendar)obj);
      }
 else       if (obj instanceof Date) {
        baseReference=new CDateTime((Date)obj);
      }
 else {
        baseReference=new CDateTime(0);
      }
    }
    baseReference.clearBelow(cunit);
    Object[] oaTuple, oaSummarizedTuple=null;
    int iGroupIndex=0, iLastGroupIndex=0;
    boolean bFirst=true, bGroupBreak=false;
    List trashList=new ArrayList();
    for (int j=iStartIndex; j < iEndIndex; j++) {
      oaTuple=(Object[])resultSet.get(j);
      CDateTime dCurrentValue=null;
      if (oaTuple[iBaseColumnIndex] != null) {
        Object obj=oaTuple[iBaseColumnIndex];
        if (obj instanceof CDateTime) {
          dCurrentValue=(CDateTime)obj;
        }
 else         if (obj instanceof Calendar) {
          dCurrentValue=new CDateTime((Calendar)obj);
        }
 else         if (obj instanceof Date) {
          dCurrentValue=new CDateTime((Date)obj);
        }
 else {
          dCurrentValue=new CDateTime(0);
        }
        dCurrentValue.clearBelow(cunit);
      }
 else {
        dCurrentValue=new CDateTime(0);
      }
      oaTuple[iBaseColumnIndex]=dCurrentValue;
      double diff=CDateTime.computeDifference(dCurrentValue,baseReference,cunit,true);
      if (diff != 0) {
        iGroupIndex=iGroupingInterval == 0 ? iGroupIndex + 1 : (int)Math.floor(Math.abs(diff / iGroupingInterval));
      }
      if (!bFirst) {
        bGroupBreak=(iLastGroupIndex != iGroupIndex);
      }
      if (bGroupBreak || bFirst) {
        if (oaSummarizedTuple != null) {
          for (int i=0; i < iOrthogonalSeriesCount; i++) {
            oaSummarizedTuple[iaColumnIndexes[i]]=iafa[i].getAggregatedValue();
            iafa[i].initialize();
          }
          Object obj=oaTuple[iBaseColumnIndex];
          if (obj instanceof CDateTime) {
            baseReference=(CDateTime)obj;
          }
 else           if (obj instanceof Calendar) {
            baseReference=new CDateTime((Calendar)obj);
          }
 else           if (obj instanceof Date) {
            baseReference=new CDateTime((Date)obj);
          }
 else {
            baseReference=new CDateTime(0);
          }
          baseReference.clearBelow(cunit);
          iGroupIndex=0;
        }
 else {
          bFirst=false;
        }
        oaSummarizedTuple=oaTuple;
      }
 else {
        trashList.add(Integer.valueOf(j));
      }
      for (int i=0; i < iOrthogonalSeriesCount; i++) {
        try {
          iafa[i].accumulate(oaTuple[iaColumnIndexes[i]]);
        }
 catch (        IllegalArgumentException uiex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
        }
      }
      iLastGroupIndex=iGroupIndex;
    }
    if (oaSummarizedTuple != null) {
      for (int i=0; i < iOrthogonalSeriesCount; i++) {
        oaSummarizedTuple[iaColumnIndexes[i]]=iafa[i].getAggregatedValue();
        iafa[i].initialize();
      }
    }
    for (int i=0; i < trashList.size(); i++) {
      resultSet.remove(((Integer)trashList.get(i)).intValue() - i);
    }
    int groupChange=trashList.size();
    trashList.clear();
    if (iaBreaks != null && iaBreaks.length > 0 && groupChange > 0) {
      for (int j=k; j < iaBreaks.length; j++) {
        iaBreaks[j]-=groupChange;
      }
    }
    iStartIndex=iEndIndex - groupChange;
    totalRowCount-=groupChange;
  }
}","private void groupDateTime(List resultSet,int iBaseColumnIndex,int[] iaColumnIndexes,int[] iaBreaks,CDateTime ndeBaseReference,long iGroupingInterval,GroupingUnitType groupingUnit,IAggregateFunction[] iafa) throws ChartException {
  final int iOrthogonalSeriesCount=iaColumnIndexes.length;
  int cunit=GroupingUtil.groupingUnit2CDateUnit(groupingUnit);
  int iStartIndex=0, iEndIndex;
  int totalGroupCount=iaBreaks == null ? 1 : (iaBreaks.length + 1);
  int totalRowCount=resultSet.size();
  for (int k=0; k < totalGroupCount; k++) {
    if (k == totalGroupCount - 1) {
      iEndIndex=totalRowCount;
    }
 else {
      iEndIndex=iaBreaks[k];
    }
    CDateTime baseReference=ndeBaseReference;
    if (baseReference == null) {
      Object obj=((Object[])resultSet.get(iStartIndex))[iBaseColumnIndex];
      if (obj instanceof CDateTime) {
        baseReference=(CDateTime)obj;
      }
 else {
        baseReference=new CDateTime(0);
      }
    }
    baseReference.clearBelow(cunit);
    Object[] oaTuple, oaSummarizedTuple=null;
    int iGroupIndex=0, iLastGroupIndex=0;
    boolean bFirst=true, bGroupBreak=false;
    List trashList=new ArrayList();
    for (int j=iStartIndex; j < iEndIndex; j++) {
      oaTuple=(Object[])resultSet.get(j);
      CDateTime dCurrentValue=null;
      if (oaTuple[iBaseColumnIndex] != null) {
        Object obj=oaTuple[iBaseColumnIndex];
        if (obj instanceof CDateTime) {
          dCurrentValue=(CDateTime)obj;
        }
 else {
          dCurrentValue=new CDateTime(0);
        }
        dCurrentValue.clearBelow(cunit);
      }
 else {
        dCurrentValue=new CDateTime(0);
      }
      oaTuple[iBaseColumnIndex]=dCurrentValue;
      double diff=CDateTime.computeDifference(dCurrentValue,baseReference,cunit,true);
      if (diff != 0) {
        iGroupIndex=iGroupingInterval == 0 ? iGroupIndex + 1 : (int)Math.floor(Math.abs(diff / iGroupingInterval));
      }
      if (!bFirst) {
        bGroupBreak=(iLastGroupIndex != iGroupIndex);
      }
      if (bGroupBreak || bFirst) {
        if (oaSummarizedTuple != null) {
          for (int i=0; i < iOrthogonalSeriesCount; i++) {
            oaSummarizedTuple[iaColumnIndexes[i]]=iafa[i].getAggregatedValue();
            iafa[i].initialize();
          }
          Object obj=oaTuple[iBaseColumnIndex];
          if (obj instanceof CDateTime) {
            baseReference=(CDateTime)obj;
          }
 else {
            baseReference=new CDateTime(0);
          }
          baseReference.clearBelow(cunit);
          iGroupIndex=0;
        }
 else {
          bFirst=false;
        }
        oaSummarizedTuple=oaTuple;
      }
 else {
        trashList.add(Integer.valueOf(j));
      }
      for (int i=0; i < iOrthogonalSeriesCount; i++) {
        try {
          iafa[i].accumulate(oaTuple[iaColumnIndexes[i]]);
        }
 catch (        IllegalArgumentException uiex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,uiex);
        }
      }
      iLastGroupIndex=iGroupIndex;
    }
    if (oaSummarizedTuple != null) {
      for (int i=0; i < iOrthogonalSeriesCount; i++) {
        oaSummarizedTuple[iaColumnIndexes[i]]=iafa[i].getAggregatedValue();
        iafa[i].initialize();
      }
    }
    for (int i=0; i < trashList.size(); i++) {
      resultSet.remove(((Integer)trashList.get(i)).intValue() - i);
    }
    int groupChange=trashList.size();
    trashList.clear();
    if (iaBreaks != null && iaBreaks.length > 0 && groupChange > 0) {
      for (int j=k; j < iaBreaks.length; j++) {
        iaBreaks[j]-=groupChange;
      }
    }
    iStartIndex=iEndIndex - groupChange;
    totalRowCount-=groupChange;
  }
}",0.920754716981132
70248,"/** 
 * Reset value of grouped column by grouping setting.
 * @param resultSet row data list.
 * @param columnIndex grouped column index.
 * @param seriesGrouping series grouping setting.
 */
private void resetGroupedData(List resultSet,int columnIndex,SeriesGrouping seriesGrouping){
  if (seriesGrouping.getGroupType() == DataType.DATE_TIME_LITERAL) {
    CDateTime baseReference=null;
    for (Iterator iter=resultSet.iterator(); iter.hasNext(); ) {
      Object[] oaTuple=(Object[])iter.next();
      Object obj=oaTuple[columnIndex];
      if (obj instanceof CDateTime) {
        baseReference=(CDateTime)obj;
      }
 else       if (obj instanceof Calendar) {
        baseReference=new CDateTime((Calendar)obj);
      }
 else       if (obj instanceof Date) {
        baseReference=new CDateTime((Date)obj);
      }
 else {
        baseReference=new CDateTime(0);
      }
      oaTuple[columnIndex]=baseReference;
    }
  }
}","/** 
 * Reset value of grouped column by grouping setting.
 * @param resultSet row data list.
 * @param columnIndex grouped column index.
 * @param seriesGrouping series grouping setting.
 */
private void resetGroupedData(List resultSet,int columnIndex,SeriesGrouping seriesGrouping){
  if (seriesGrouping.getGroupType() == DataType.DATE_TIME_LITERAL) {
    CDateTime baseReference=null;
    for (Iterator iter=resultSet.iterator(); iter.hasNext(); ) {
      Object[] oaTuple=(Object[])iter.next();
      Object obj=oaTuple[columnIndex];
      if (obj instanceof CDateTime) {
        baseReference=(CDateTime)obj;
      }
 else {
        baseReference=new CDateTime(0);
      }
      oaTuple[columnIndex]=baseReference;
    }
  }
}",0.880722891566265
70249,"/** 
 * The page layout is controlled by three render options: <ul> <li>OUTPUT-MASTER-PAGE</li> <li>OUTPUT-MARGIN</li> <li>FLOATING-FOOTER</li> </ul> The layout effect matrix are demostrate in following table: <table border=""all""> <tr> <th>PAGE</th> <th>MARGIN</th> <th>FOOTER</th> <th>effect</th> </tr> <tr valign=""top""> <td rowspan=""4"">TRUE</td> <td rowspan=""2"">TRUE</td> <td >FALSE</td> <td> <table border=""all"" style=""width:2in;height:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td>LM</td> <td valign=""top"">header</td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr> <td>LM</td> <td><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> <table> </td> </table> <tr valign=""top""> <td>TRUE</td> <td> <table border=""all"" style=""width:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td >LM</td> <td valign=""top""><div>header</div></td> <td >RM</td> </tr> <tr> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td valign=""top""><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> </table> </td> </tr> <tr valign=""top""> <td rowspan=""2"">FALSE</td> <td>TRUE</td> <td> <table border=""all"" style=""width:1.6in;height:1in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr style=""height:100%""> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td> <table border=""all"" style=""width:1.6in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td>ANY</td> <td>ANY</td> <td> <table border=""all"" style=""width:1.6in;""> <tr> <td>BODY</td> </tr> </table> </td> </tr> </table>
 */
public void startPage(IPageContent page) throws BirtException {
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.writeCode(""String_Node_Str"");
  }
  boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  DimensionType width=getPageWidth(page);
  DimensionType height=getPageHeight(page);
  if (page != null && outputMasterPageContent && width != null && height != null && fixedReport && !pageFooterFloatFlag) {
    startBackgroundContainer(page.getStyle(),width,height);
  }
  StringBuffer styleBuffer=new StringBuffer();
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  styleBuffer.append(""String_Node_Str"");
  if (page != null && outputMasterPageContent) {
    htmlEmitter.buildPageStyle(page,styleBuffer,needOutputBackgroundSize);
    if (fixedReport && width != null) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(width.toString());
      styleBuffer.append(""String_Node_Str"");
    }
 else     if (!fixedReport) {
      styleBuffer.append(""String_Node_Str"");
    }
    if (!pageFooterFloatFlag && height != null) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(height.toString());
      styleBuffer.append(""String_Node_Str"");
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(""String_Node_Str"");
    }
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  if (page != null && outputMasterPageContent) {
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
    }
    writer.openTag(HTMLTags.TAG_COL);
    writer.closeTag(HTMLTags.TAG_COL);
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
      outputVMargin(page.getMarginTop());
    }
    if (showPageHeader(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageHeader());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
  }
  writer.openTag(HTMLTags.TAG_TR);
  if (!pageFooterFloatFlag) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginLeft());
  }
  writer.openTag(HTMLTags.TAG_TD);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeBidiFlag();
}","/** 
 * The page layout is controlled by three render options: <ul> <li>OUTPUT-MASTER-PAGE</li> <li>OUTPUT-MARGIN</li> <li>FLOATING-FOOTER</li> </ul> The layout effect matrix are demostrate in following table: <table border=""all""> <tr> <th>PAGE</th> <th>MARGIN</th> <th>FOOTER</th> <th>effect</th> </tr> <tr valign=""top""> <td rowspan=""4"">TRUE</td> <td rowspan=""2"">TRUE</td> <td >FALSE</td> <td> <table border=""all"" style=""width:2in;height:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td>LM</td> <td valign=""top"">header</td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr> <td>LM</td> <td><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> <table> </td> </table> <tr valign=""top""> <td>TRUE</td> <td> <table border=""all"" style=""width:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td >LM</td> <td valign=""top""><div>header</div></td> <td >RM</td> </tr> <tr> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td valign=""top""><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> </table> </td> </tr> <tr valign=""top""> <td rowspan=""2"">FALSE</td> <td>TRUE</td> <td> <table border=""all"" style=""width:1.6in;height:1in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr style=""height:100%""> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td> <table border=""all"" style=""width:1.6in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td>ANY</td> <td>ANY</td> <td> <table border=""all"" style=""width:1.6in;""> <tr> <td>BODY</td> </tr> </table> </td> </tr> </table>
 */
public void startPage(IPageContent page) throws BirtException {
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.writeCode(""String_Node_Str"");
  }
  boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  DimensionType width=null;
  DimensionType height=null;
  if (page != null && outputMasterPageContent) {
    width=getPageWidth(page);
    height=getPageHeight(page);
    if (width != null && height != null && fixedReport && !pageFooterFloatFlag)     startBackgroundContainer(page.getStyle(),width,height);
  }
  StringBuffer styleBuffer=new StringBuffer();
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  styleBuffer.append(""String_Node_Str"");
  if (page != null && outputMasterPageContent) {
    htmlEmitter.buildPageStyle(page,styleBuffer,needOutputBackgroundSize);
    if (fixedReport && width != null) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(width.toString());
      styleBuffer.append(""String_Node_Str"");
    }
 else     if (!fixedReport) {
      styleBuffer.append(""String_Node_Str"");
    }
    if (!pageFooterFloatFlag && height != null) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(height.toString());
      styleBuffer.append(""String_Node_Str"");
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(""String_Node_Str"");
    }
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  if (page != null && outputMasterPageContent) {
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
    }
    writer.openTag(HTMLTags.TAG_COL);
    writer.closeTag(HTMLTags.TAG_COL);
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
      outputVMargin(page.getMarginTop());
    }
    if (showPageHeader(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageHeader());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
  }
  writer.openTag(HTMLTags.TAG_TR);
  if (!pageFooterFloatFlag) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginLeft());
  }
  writer.openTag(HTMLTags.TAG_TD);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeBidiFlag();
}",0.9806869193026412
70250,"/** 
 * support body auto resize, remove invalid header and footer
 * @param page
 */
protected void updateBodySize(){
  if (header != null && header.getHeight() >= root.getHeight()) {
    removeHeader();
    header=null;
  }
  if (footer != null && footer.getHeight() >= root.getHeight()) {
    removeHeader();
    footer=null;
  }
  if (header != null && footer != null && footer.getHeight() + header.getHeight() >= root.getHeight()) {
    removeHeader();
  }
  body.setHeight(root.getContentHeight() - (header == null ? 0 : header.getHeight()) - (footer == null ? 0 : footer.getHeight()));
  body.setPosition(body.getX(),(header == null ? 0 : header.getHeight()) + root.getBoxStyle().getTopBorderWidth());
  if (footer != null) {
    footer.setPosition(footer.getX(),(header == null ? 0 : header.getHeight()) + root.getBoxStyle().getTopBorderWidth() + (body == null ? 0 : body.getHeight()));
  }
}","/** 
 * support body auto resize, remove invalid header and footer
 * @param page
 */
protected void updateBodySize(){
  if (header != null && header.getHeight() >= root.getHeight()) {
    removeHeader();
    header=null;
  }
  if (footer != null && footer.getHeight() >= root.getHeight()) {
    removeFooter();
    footer=null;
  }
  if (header != null && footer != null && footer.getHeight() + header.getHeight() >= root.getHeight()) {
    removeHeader();
  }
  body.setHeight(root.getContentHeight() - (header == null ? 0 : header.getHeight()) - (footer == null ? 0 : footer.getHeight()));
  body.setPosition(body.getX(),(header == null ? 0 : header.getHeight()) + root.getBoxStyle().getTopBorderWidth());
  if (footer != null) {
    footer.setPosition(footer.getX(),(header == null ? 0 : header.getHeight()) + root.getBoxStyle().getTopBorderWidth() + (body == null ? 0 : body.getHeight()));
  }
}",0.9955555555555556
70251,"protected void writeFields(DataOutputStream out) throws IOException {
  super.writeFields(out);
  if (rowSpan != -1) {
    IOUtil.writeShort(out,FIELD_ROW_SPAN);
    IOUtil.writeInt(out,rowSpan);
  }
  if (colSpan != -1) {
    IOUtil.writeShort(out,FIELD_COL_SPAN);
    IOUtil.writeInt(out,colSpan);
  }
  if (column != -1) {
    IOUtil.writeShort(out,FIELD_COLUMN);
    IOUtil.writeInt(out,column);
  }
  if (displayGroupIcon != null) {
    IOUtil.writeShort(out,FIELD_DISPLAY_GROUP_ICON);
    IOUtil.writeBool(out,displayGroupIcon.booleanValue());
  }
  if (drop != null) {
    IOUtil.writeShort(out,FIELD_DROP);
    IOUtil.writeString(out,drop);
  }
  if (headers != null) {
    IOUtil.writeShort(out,FIELD_HEADERS);
    IOUtil.writeString(out,headers);
  }
}","protected void writeFields(DataOutputStream out) throws IOException {
  super.writeFields(out);
  if (rowSpan != -1) {
    IOUtil.writeShort(out,FIELD_ROW_SPAN);
    IOUtil.writeInt(out,rowSpan);
  }
  if (colSpan != -1) {
    IOUtil.writeShort(out,FIELD_COL_SPAN);
    IOUtil.writeInt(out,colSpan);
  }
  if (column != -1) {
    IOUtil.writeShort(out,FIELD_COLUMN);
    IOUtil.writeInt(out,column);
  }
  if (displayGroupIcon != null) {
    IOUtil.writeShort(out,FIELD_DISPLAY_GROUP_ICON);
    IOUtil.writeBool(out,displayGroupIcon.booleanValue());
  }
  if (drop != null) {
    IOUtil.writeShort(out,FIELD_DROP);
    IOUtil.writeString(out,drop);
  }
  if (headers != null) {
    IOUtil.writeShort(out,FIELD_HEADERS);
    IOUtil.writeString(out,headers);
  }
  if (scope != null) {
    IOUtil.writeShort(out,FIELD_SCOPE);
    IOUtil.writeString(out,scope);
  }
}",0.9372693726937268
70252,"public boolean needSave(){
  if (rowSpan != -1 || colSpan != -1 || column != -1) {
    return true;
  }
  if (displayGroupIcon != null || headers != null) {
    return true;
  }
  return super.needSave();
}","public boolean needSave(){
  if (rowSpan != -1 || colSpan != -1 || column != -1) {
    return true;
  }
  if (displayGroupIcon != null || headers != null || scope != null) {
    return true;
  }
  return super.needSave();
}",0.9603729603729604
70253,"protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_ROW_SPAN:
    rowSpan=IOUtil.readInt(in);
  break;
case FIELD_COL_SPAN:
colSpan=IOUtil.readInt(in);
break;
case FIELD_COLUMN:
column=IOUtil.readInt(in);
break;
case FIELD_START_OF_GROUP:
IOUtil.readBool(in);
break;
case FIELD_DISPLAY_GROUP_ICON:
displayGroupIcon=Boolean.valueOf(IOUtil.readBool(in));
break;
case FIELD_DROP:
drop=IOUtil.readString(in);
break;
case FIELD_HEADERS:
headers=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in,loader);
break;
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_ROW_SPAN:
    rowSpan=IOUtil.readInt(in);
  break;
case FIELD_COL_SPAN:
colSpan=IOUtil.readInt(in);
break;
case FIELD_COLUMN:
column=IOUtil.readInt(in);
break;
case FIELD_START_OF_GROUP:
IOUtil.readBool(in);
break;
case FIELD_DISPLAY_GROUP_ICON:
displayGroupIcon=Boolean.valueOf(IOUtil.readBool(in));
break;
case FIELD_DROP:
drop=IOUtil.readString(in);
break;
case FIELD_HEADERS:
headers=IOUtil.readString(in);
break;
case FIELD_SCOPE:
scope=IOUtil.readString(in);
break;
default :
super.readField(version,filedId,in,loader);
break;
}
}",0.9583333333333334
70254,"public String getScope(){
  if (cellDesign != null) {
    return cellDesign.getScope();
  }
  return null;
}","public String getScope(){
  if (scope != null) {
    return scope;
  }
 else   if (cellDesign != null) {
    return cellDesign.getScope();
  }
  return null;
}",0.8089887640449438
70255,"public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
  byte[] data=imageInfo.getData();
  if (data == null || data.length == 0) {
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  double height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight());
  double width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth());
  writeBookmark(image);
  writeToc(image);
  HyperlinkInfo hyper=getHyperlink(image);
  wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
}","public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  context.addContainer(false);
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
  byte[] data=imageInfo.getData();
  if (data == null || data.length == 0) {
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  double height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight());
  double width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth());
  writeBookmark(image);
  writeToc(image);
  HyperlinkInfo hyper=getHyperlink(image);
  wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
}",0.9859791949344188
70256,"private void switchDataTable(){
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        dataList=getPreviewData();
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        final String msg=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            WizardBase.showException(msg);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}","private void switchDataTable(){
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        dataList=getPreviewData();
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            if (errorMsg != null && errorMsg.equals(WizardBase.getErrors())) {
              WizardBase.removeException();
            }
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        errorMsg=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateTablePreview(headerInfo,data);
            WizardBase.showException(errorMsg);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}",0.9217557251908396
70257,"/** 
 */
private void refreshColumnsListView(){
  if (dataProvider.getDataSetFromHandle() == null) {
    return;
  }
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        if (dataProvider.isLivePreviewEnabled()) {
          dataList=getPreviewData();
        }
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        final String msg=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            WizardBase.showException(msg);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}","/** 
 */
private void refreshColumnsListView(){
  if (dataProvider.getDataSetFromHandle() == null) {
    return;
  }
  if (isCubeMode()) {
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      ColumnBindingInfo[] headers=null;
      List<?> dataList=null;
      try {
        headers=getDataServiceProvider().getPreviewHeadersInfo();
        if (dataProvider.isLivePreviewEnabled()) {
          dataList=getPreviewData();
        }
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            if (errorMsg != null && errorMsg.equals(WizardBase.getErrors())) {
              WizardBase.removeException();
            }
          }
        }
);
      }
 catch (      Exception e) {
        final ColumnBindingInfo[] headerInfo=headers;
        final List<?> data=dataList;
        errorMsg=e.getMessage();
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            updateColumnsTableViewer(headerInfo,data);
            WizardBase.showException(errorMsg);
          }
        }
);
      }
    }
  }
;
  new Thread(runnable).start();
}",0.9014900662251656
70258,"/** 
 * Sets initial width to new object
 * @param object new object
 */
public static void setInitWidth(Object object){
  int percentAll=100;
  try {
    if (object instanceof TableHandle) {
      TableHandle table=(TableHandle)object;
      table.setWidth(percentAll + DesignChoiceConstants.UNITS_PERCENTAGE);
    }
 else     if (object instanceof GridHandle) {
      GridHandle grid=(GridHandle)object;
      grid.setWidth(percentAll + DesignChoiceConstants.UNITS_PERCENTAGE);
    }
 else     return;
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * Sets initial width to new object
 * @param object new object
 */
public static void setInitWidth(Object object){
}",0.3485714285714286
70259,"private void caleColumnWidth(){
  int size=data.columnWidths.length;
  int containerWidth=getLayoutWidth();
  containerWidth=Math.max(0,containerWidth);
  int totalColumn=0;
  int forceCount=size;
  for (int i=0; i < size; i++) {
    ColumnData cData=data.columnWidths[i];
    if (cData.isPercentage) {
      cData.trueMinColumnWidth=(int)(containerWidth * cData.percentageWidth / 100);
      totalColumn=totalColumn + cData.trueMinColumnWidth;
      cData.width=cData.trueMinColumnWidth;
      forceCount--;
    }
 else     if (cData.isForce) {
      totalColumn=totalColumn + cData.trueMinColumnWidth;
      cData.width=cData.trueMinColumnWidth;
      forceCount--;
    }
  }
  if (totalColumn >= containerWidth) {
    for (int i=0; i < size; i++) {
      ColumnData cData=data.columnWidths[i];
      if (!cData.isForce) {
        cData.width=ALLOW_COLOUMN_WIDTH;
        cData.trueMinColumnWidth=ALLOW_COLOUMN_WIDTH;
      }
    }
  }
 else {
    int moreWith=containerWidth - totalColumn;
    int argaWith;
    int others;
    if (forceCount == 0) {
      argaWith=moreWith / size;
      others=moreWith % size;
      for (int i=0; i < size; i++) {
        ColumnData cData=data.columnWidths[i];
        if (i <= others - 1) {
          cData.width=cData.width + argaWith + 1;
        }
 else {
          cData.width=cData.width + argaWith;
        }
      }
    }
 else {
      if (moreWith < forceCount * ALLOW_COLOUMN_WIDTH) {
        for (int i=0; i < size; i++) {
          ColumnData cData=data.columnWidths[i];
          if (!cData.isForce) {
            cData.width=ALLOW_COLOUMN_WIDTH;
          }
        }
      }
 else {
        argaWith=moreWith / forceCount;
        others=moreWith % forceCount;
        List<ColumnData> adjustList=new ArrayList<ColumnData>();
        for (int i=0; i < size; i++) {
          ColumnData cData=data.columnWidths[i];
          if (!cData.isForce) {
            adjustList.add(cData);
          }
        }
        for (int i=0; i < adjustList.size(); i++) {
          ColumnData adjust=adjustList.get(i);
          if (i <= others - 1) {
            adjust.width=argaWith + 1;
          }
 else {
            adjust.width=argaWith;
          }
        }
      }
    }
  }
}","private void caleColumnWidth(){
  int size=data.columnWidths.length;
  int containerWidth=getLayoutWidth();
  containerWidth=Math.max(0,containerWidth);
  int totalColumn=0;
  int forceCount=size;
  for (int i=0; i < size; i++) {
    ColumnData cData=data.columnWidths[i];
    if (cData.isPercentage) {
      cData.trueMinColumnWidth=(int)(containerWidth * cData.percentageWidth / 100);
      totalColumn=totalColumn + cData.trueMinColumnWidth;
      cData.width=cData.trueMinColumnWidth;
      forceCount--;
    }
 else     if (cData.isForce) {
      totalColumn=totalColumn + cData.trueMinColumnWidth;
      cData.width=cData.trueMinColumnWidth;
      forceCount--;
    }
  }
  if ((!getOwner().isForceWidth()) && forceCount == 0) {
    return;
  }
  if (totalColumn >= containerWidth) {
    for (int i=0; i < size; i++) {
      ColumnData cData=data.columnWidths[i];
      if (!cData.isForce) {
        cData.width=ALLOW_COLOUMN_WIDTH;
        cData.trueMinColumnWidth=ALLOW_COLOUMN_WIDTH;
      }
    }
  }
 else {
    int moreWith=containerWidth - totalColumn;
    int argaWith;
    int others;
    if (forceCount == 0) {
      argaWith=moreWith / size;
      others=moreWith % size;
      for (int i=0; i < size; i++) {
        ColumnData cData=data.columnWidths[i];
        if (i <= others - 1) {
          cData.width=cData.width + argaWith + 1;
        }
 else {
          cData.width=cData.width + argaWith;
        }
      }
    }
 else {
      if (moreWith < forceCount * ALLOW_COLOUMN_WIDTH) {
        for (int i=0; i < size; i++) {
          ColumnData cData=data.columnWidths[i];
          if (!cData.isForce) {
            cData.width=ALLOW_COLOUMN_WIDTH;
          }
        }
      }
 else {
        argaWith=moreWith / forceCount;
        others=moreWith % forceCount;
        List<ColumnData> adjustList=new ArrayList<ColumnData>();
        for (int i=0; i < size; i++) {
          ColumnData cData=data.columnWidths[i];
          if (!cData.isForce) {
            adjustList.add(cData);
          }
        }
        for (int i=0; i < adjustList.size(); i++) {
          ColumnData adjust=adjustList.get(i);
          if (i <= others - 1) {
            adjust.width=argaWith + 1;
          }
 else {
            adjust.width=argaWith;
          }
        }
      }
    }
  }
}",0.9838531298385312
70260,"/** 
 * Returns the defined width in model in Pixel.
 * @return
 */
public String getDefinedWidth(){
  DimensionHandle handle=((ExtendedItemHandle)getAdapter(DesignElementHandle.class)).getWidth();
  if (handle.getUnits() == null || handle.getUnits().length() == 0) {
    return DEFAULT_WIDTH;
  }
 else   if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    return handle.getMeasure() + DesignChoiceConstants.UNITS_PERCENTAGE;
  }
 else {
    int px=(int)DEUtil.convertoToPixel(handle);
    if (px <= 0) {
      return null;
    }
    return String.valueOf(px);
  }
}","/** 
 * Returns the defined width in model in Pixel.
 * @return
 */
public String getDefinedWidth(){
  return DEFAULT_WIDTH;
}",0.3514644351464435
70261,"protected void verticalAlign(CellArea cell){
  IContent content=cell.getContent();
  if (content == null) {
    return;
  }
  CSSValue verticalAlign=content.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
    int totalHeight=0;
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      totalHeight+=getAllocatedHeight(child);
    }
    int offset=cell.getContentHeight() - totalHeight;
    if (offset > 0) {
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setPosition(child.getX(),child.getY() + offset);
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setPosition(child.getX(),child.getY() + offset / 2);
        }
      }
    }
  }
  CSSValue align=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(content,align,false);
  if (isRightAligned || IStyle.CENTER_VALUE.equals(align)) {
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      int spacing=cell.getContentWidth() - getAllocatedWidth(area);
      if (spacing > 0) {
        if (isRightAligned) {
          area.setPosition(spacing + area.getX(),area.getY());
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setPosition(spacing / 2 + area.getX(),area.getY());
        }
      }
    }
  }
}","protected void verticalAlign(CellArea cell){
  IContent content=cell.getContent();
  if (content == null) {
    return;
  }
  CSSValue verticalAlign=content.getComputedStyle().getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  if (IStyle.BOTTOM_VALUE.equals(verticalAlign) || IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
    int totalHeight=0;
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea child=(AbstractArea)iter.next();
      totalHeight+=getAllocatedHeight(child);
    }
    int offset=cell.getContentHeight() - totalHeight;
    if (offset > 0) {
      if (IStyle.BOTTOM_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        int y=cell.getOffsetY() + offset;
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedY(y);
          y+=child.getAllocatedHeight();
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(verticalAlign)) {
        iter=cell.getChildren();
        int y=cell.getOffsetY() + offset / 2;
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setAllocatedY(y);
          y+=child.getAllocatedHeight();
        }
      }
    }
  }
  CSSValue align=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(content,align,false);
  if (isRightAligned || IStyle.CENTER_VALUE.equals(align)) {
    Iterator iter=cell.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      int spacing=cell.getContentWidth() - getAllocatedWidth(area);
      if (spacing > 0) {
        if (isRightAligned) {
          area.setAllocatedX(spacing + cell.getOffsetX());
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setAllocatedX(spacing / 2 + cell.getOffsetX());
        }
      }
    }
  }
}",0.9012875536480688
70262,"public void testRerenderTask() throws Exception {
  IReportRunnable report=engine.openReportDesign(REPORT_DESIGN);
  IRunTask runTask=engine.createRunTask(report);
  runTask.run(REPORT_DOCUMENT);
  runTask.close();
  IReportDocument reportDoc=engine.openReportDocument(REPORT_DOCUMENT);
  IReportRunnable pRunnable=reportDoc.getPreparedRunnable();
  IRenderTask task=engine.createRenderTask(reportDoc,pRunnable);
  IRenderOption option=new HTMLRenderOption();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  option.setOutputStream(out);
  task.setRenderOption(option);
  task.render();
  String outputString=out.toString();
  assertTrue(outputString.indexOf(""String_Node_Str"") > 0);
  task.close();
  IReportRunnable bRunnable=reportDoc.getReportRunnable();
  task=engine.createRenderTask(reportDoc,bRunnable);
  out=new ByteArrayOutputStream();
  option.setOutputStream(out);
  task.setRenderOption(option);
  task.render();
  outputString=out.toString();
  assertTrue(outputString.indexOf(""String_Node_Str"") > 0);
  task.close();
  reportDoc.close();
}","public void testRerenderTask() throws Exception {
  IReportRunnable report=engine.openReportDesign(REPORT_DESIGN);
  IRunTask runTask=engine.createRunTask(report);
  runTask.run(REPORT_DOCUMENT);
  runTask.close();
  IReportDocument reportDoc=engine.openReportDocument(REPORT_DOCUMENT);
  IReportRunnable pRunnable=reportDoc.getPreparedRunnable();
  IRenderTask task=engine.createRenderTask(reportDoc,pRunnable);
  IRenderOption option=new HTMLRenderOption();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  option.setOutputStream(out);
  task.setRenderOption(option);
  task.render();
  String outputString=out.toString();
  assertTrue(outputString.indexOf(""String_Node_Str"") > 0);
  task.close();
  reportDoc.close();
}",0.8146911519198664
70263,"protected void drawBackgroundImage(float x,float y,float width,float height,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  Image img=null;
  try {
    try {
      img=Image.getInstance(new URL(imageUrl));
    }
 catch (    IOException e) {
      if (SvgFile.isSvg(imageUrl)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
        }
 catch (        IOException ex) {
          throw ex;
        }
      }
 else {
        throw e;
      }
    }
    int resolutionX=img.getDpiX();
    int resolutionY=img.getDpiY();
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=96;
      resolutionY=96;
    }
    float imageWidth=img.plainWidth() / resolutionX * 72;
    float imageHeight=img.plainHeight() / resolutionY * 72;
    if (BackgroundImageInfo.NO_REPEAT == repeat) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,imageWidth);
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,imageHeight);
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,imageWidth,0,0,imageHeight,translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (BackgroundImageInfo.REPEAT_X == repeat) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > imageWidth) {
        if (height - absPosY > imageHeight) {
          template=contentByte.createTemplate(imageWidth,imageHeight);
          template.addImage(img,imageWidth,0,0,imageHeight,0,0);
        }
 else {
          template=contentByte.createTemplate(imageWidth,height);
          template.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height);
        }
      }
      while (remainX > 0) {
        if (remainX < imageWidth) {
          if (height - absPosY > imageHeight) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - imageHeight);
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > imageHeight)           contentByte.addTemplate(template,x + width - remainX,y - absPosY - imageHeight);
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=imageWidth;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT_Y == repeat) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > imageHeight) {
        template=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        if (remainY < imageHeight) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,remainY);
          templateY.addImage(img,width > imageWidth ? imageWidth : width - absPosX,0,0,imageHeight,0,-(imageHeight - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - imageHeight);
          remainY-=imageHeight;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT == repeat) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > imageWidth && height > imageHeight) {
        template=contentByte.createTemplate(imageWidth,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < imageHeight) {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(imageWidth,remainY);
              templateY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=imageWidth;
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
              templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - imageHeight);
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - imageHeight);
              remainX-=imageWidth;
            }
          }
          remainY-=imageHeight;
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}","protected void drawBackgroundImage(float x,float y,float width,float height,float iWidth,float iHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  try {
    Image img=null;
    try {
      img=Image.getInstance(new URL(imageUrl));
    }
 catch (    IOException e) {
      if (SvgFile.isSvg(imageUrl)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
        }
 catch (        IOException ex) {
          throw ex;
        }
      }
 else {
        throw e;
      }
    }
    float imageWidth=iWidth;
    float imageHeight=iHeight;
    if (imageHeight == 0 || imageWidth == 0) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      imageWidth=img.plainWidth() / resolutionX * 72;
      imageHeight=img.plainHeight() / resolutionY * 72;
    }
    if (BackgroundImageInfo.NO_REPEAT == repeat) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,imageWidth);
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,imageHeight);
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,imageWidth,0,0,imageHeight,translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (BackgroundImageInfo.REPEAT_X == repeat) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > imageWidth) {
        if (height - absPosY > imageHeight) {
          template=contentByte.createTemplate(imageWidth,imageHeight);
          template.addImage(img,imageWidth,0,0,imageHeight,0,0);
        }
 else {
          template=contentByte.createTemplate(imageWidth,height);
          template.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height);
        }
      }
      while (remainX > 0) {
        if (remainX < imageWidth) {
          if (height - absPosY > imageHeight) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - imageHeight);
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > imageHeight)           contentByte.addTemplate(template,x + width - remainX,y - absPosY - imageHeight);
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=imageWidth;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT_Y == repeat) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > imageHeight) {
        template=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        if (remainY < imageHeight) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,remainY);
          templateY.addImage(img,width > imageWidth ? imageWidth : width - absPosX,0,0,imageHeight,0,-(imageHeight - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - imageHeight);
          remainY-=imageHeight;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT == repeat) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > imageWidth && height > imageHeight) {
        template=contentByte.createTemplate(imageWidth,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < imageHeight) {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(imageWidth,remainY);
              templateY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=imageWidth;
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
              templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - imageHeight);
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - imageHeight);
              remainX-=imageWidth;
            }
          }
          remainY-=imageHeight;
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}",0.9706356889319137
70264,"/** 
 * Draws background image in a rectangle area with specified repeat pattern. <br> <br> The repeat mode can be: <table border=""solid""> <tr> <td align=""center""><B>Name</td> <td align=""center""><B>What for</td> </tr> <tr> <td>no-repeat</td> <td>Don't repeat.</td> </tr> <tr> <td>repeat-x</td> <td>Only repeat on x orientation.</td> </tr> <tr> <td>repeat-y</td> <td>Only repeat on y orientation.</td> </tr> <tr> <td>repeat</td> <td>Repeat on x and y orientation.</td> </tr> </table>
 * @param imageURI the uri of the background image.
 * @param x the x coordinate of the rectangle area.
 * @param y the y coordinate of the rectangle area.
 * @param width the width of the rectangle area.
 * @param height the height of the rectangle area.
 * @param positionX the initial x position of the background image.
 * @param positionY the initial y position of the background image.
 * @param repeat the repeat mode.
 * @throws Exception 
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float positionX,float positionY,int repeat) throws IOException {
  URL url=new URL(imageURI);
  InputStream imageStream=null;
  try {
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    ImageIcon imageIcon=new ImageIcon(image);
    Position imageSize=new Position(imageIcon.getIconWidth(),imageIcon.getIconHeight());
    Position areaPosition=new Position(x,y);
    Position areaSize=new Position(width,height);
    Position imagePosition=new Position(x + positionX,y + positionY);
    BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
    Collection positions=layout.getImagePositions(repeat);
    gSave();
    setColor(Color.WHITE);
    out.println(""String_Node_Str"");
    drawRawRect(x,y,width,height);
    out.println(""String_Node_Str"");
    Iterator iterator=positions.iterator();
    while (iterator.hasNext()) {
      Position position=(Position)iterator.next();
      drawImage(imageURI,image,position.getX(),position.getY(),imageSize.getX(),imageSize.getY());
    }
    gRestore();
  }
  finally {
    if (imageStream != null) {
      imageStream.close();
      imageStream=null;
    }
  }
}","/** 
 * Draws background image in a rectangle area with specified repeat pattern. <br> <br> The repeat mode can be: <table border=""solid""> <tr> <td align=""center""><B>Name</td> <td align=""center""><B>What for</td> </tr> <tr> <td>no-repeat</td> <td>Don't repeat.</td> </tr> <tr> <td>repeat-x</td> <td>Only repeat on x orientation.</td> </tr> <tr> <td>repeat-y</td> <td>Only repeat on y orientation.</td> </tr> <tr> <td>repeat</td> <td>Repeat on x and y orientation.</td> </tr> </table>
 * @param imageURI the uri of the background image.
 * @param x the x coordinate of the rectangle area.
 * @param y the y coordinate of the rectangle area.
 * @param width the width of the rectangle area.
 * @param height the height of the rectangle area.
 * @param positionX the initial x position of the background image.
 * @param positionY the initial y position of the background image.
 * @param repeat the repeat mode.
 * @throws Exception 
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float imageWidth,float imageHeight,float positionX,float positionY,int repeat) throws IOException {
  URL url=new URL(imageURI);
  InputStream imageStream=null;
  try {
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    Position imageSize=null;
    ImageIcon imageIcon=new ImageIcon(image);
    if (imageHeight == 0 || imageWidth == 0) {
      imageSize=new Position(imageIcon.getIconWidth(),imageIcon.getIconHeight());
    }
 else {
      imageSize=new Position(imageWidth,imageHeight);
    }
    Position areaPosition=new Position(x,y);
    Position areaSize=new Position(width,height);
    Position imagePosition=new Position(x + positionX,y + positionY);
    BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
    Collection positions=layout.getImagePositions(repeat);
    gSave();
    setColor(Color.WHITE);
    out.println(""String_Node_Str"");
    drawRawRect(x,y,width,height);
    out.println(""String_Node_Str"");
    Iterator iterator=positions.iterator();
    while (iterator.hasNext()) {
      Position position=(Position)iterator.next();
      drawImage(imageURI,image,position.getX(),position.getY(),imageSize.getX(),imageSize.getY());
    }
    gRestore();
  }
  finally {
    if (imageStream != null) {
      imageStream.close();
      imageStream=null;
    }
  }
}",0.9381263616557736
70265,"protected void drawBackgroundImage(float x,float y,float width,float height,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  writer.drawBackgroundImage(imageUrl,x,y,width,height,absPosX,absPosY,repeat);
}","protected void drawBackgroundImage(float x,float y,float width,float height,float imageWidth,float imageHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  writer.drawBackgroundImage(imageUrl,x,y,width,height,imageWidth,imageHeight,absPosX,absPosY,repeat);
}",0.8897338403041825
70266,"/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float positionX,float positionY,int repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=0;
  float imageHeight=0;
  byte[] imageData=null;
  InputStream imageStream=null;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=getImageData(imageStream);
    imageStream.close();
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    ImageIcon imageIcon=new ImageIcon(image);
    imageWidth=imageIcon.getIconWidth();
    imageHeight=imageIcon.getIconHeight();
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
 finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  String extension=getImageExtension(imageURI);
  ImageInfo imageInfo=getImageInfo(imageURI,imageData,extension);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  Position imageSize=new Position(imageWidth,imageHeight);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    exportImageDefn(imageInfo.imageName,imageInfo.imageId,imageWidth,imageHeight,position.getX(),position.getY(),null);
  }
}","/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float iWidth,float iHeight,float positionX,float positionY,int repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=iWidth;
  float imageHeight=iHeight;
  byte[] imageData=null;
  InputStream imageStream=null;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=getImageData(imageStream);
    imageStream.close();
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    ImageIcon imageIcon=new ImageIcon(image);
    if (imageWidth == 0 || imageHeight == 0) {
      imageWidth=imageIcon.getIconWidth();
      imageHeight=imageIcon.getIconHeight();
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
 finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  String extension=getImageExtension(imageURI);
  ImageInfo imageInfo=getImageInfo(imageURI,imageData,extension);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  Position imageSize=new Position(imageWidth,imageHeight);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    exportImageDefn(imageInfo.imageName,imageInfo.imageId,imageWidth,imageHeight,position.getX(),position.getY(),null);
  }
}",0.9793792959800042
70267,"protected void drawBackgroundImage(float x,float y,float width,float height,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  writer.drawBackgroundImage(imageUrl,x,y,width,height,absPosX,absPosY,repeat);
}","protected void drawBackgroundImage(float x,float y,float width,float height,float imageWidth,float imageHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  writer.drawBackgroundImage(imageUrl,x,y,width,height,imageWidth,imageHeight,absPosX,absPosY,repeat);
}",0.8897338403041825
70268,"public static DimensionType parserUnit(String value,String defaultUnits){
  if (value != null) {
    try {
      DimensionValue val=DimensionValue.parse(value);
      String units=val.getUnits();
      if (null == units || ""String_Node_Str"".equals(units)) {
        units=defaultUnits;
      }
      return new DimensionType(val.getMeasure(),units);
    }
 catch (    PropertyValueException e) {
      log.log(Level.SEVERE,e.getMessage());
    }
  }
  return new DimensionType(0,DimensionType.UNITS_CM);
}","public static DimensionType parserUnit(String value,String defaultUnits){
  if (value != null) {
    try {
      DimensionValue val=DimensionValue.parse(value);
      String units=val.getUnits();
      if (null == units || ""String_Node_Str"".equals(units)) {
        units=defaultUnits;
      }
      return new DimensionType(val.getMeasure(),units);
    }
 catch (    PropertyValueException e) {
      log.log(Level.SEVERE,e.getMessage());
    }
  }
  return null;
}",0.9536560247167868
70269,"protected abstract void drawBackgroundImage(float x,float y,float width,float height,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException ;","protected abstract void drawBackgroundImage(float x,float y,float width,float height,float imageWidth,float imageHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException ;",0.9019607843137256
70270,"void drawBackgroundImage(int x,int y,int width,int height,int repeat,String imageUrl,int absPosX,int absPosY) throws IOException ;","void drawBackgroundImage(int x,int y,int width,int height,int imageWidth,int imageHeight,int repeat,String imageUrl,int absPosX,int absPosY) throws IOException ;",0.8934707903780069
70271,"/** 
 * draw background image for the container
 * @param containerStyle the style of the container we draw background image for
 * @param imageUrl the url of background image 
 * @param startX the absolute horizontal position of the container
 * @param startY the absolute vertical position of the container
 * @param width container width
 * @param height container height
 */
private void drawBackgroundImage(BackgroundImageInfo bi,int startX,int startY,int width,int height){
  try {
    pageGraphic.drawBackgroundImage(startX,startY,width,height,bi.getRepeatedMode(),bi.getUrl(),getScaledValue(bi.getXOffset()),getScaledValue(bi.getYOffset()));
  }
 catch (  IOException e) {
    log(e,Level.WARNING);
  }
}","/** 
 * draw background image for the container
 * @param containerStyle the style of the container we draw background image for
 * @param imageUrl the url of background image 
 * @param startX the absolute horizontal position of the container
 * @param startY the absolute vertical position of the container
 * @param width container width
 * @param height container height
 */
private void drawBackgroundImage(BackgroundImageInfo bi,int startX,int startY,int width,int height){
  try {
    pageGraphic.drawBackgroundImage(startX,startY,width,height,bi.getWidth(),bi.getHeight(),bi.getRepeatedMode(),bi.getUrl(),getScaledValue(bi.getXOffset()),getScaledValue(bi.getYOffset()));
  }
 catch (  IOException e) {
    log(e,Level.WARNING);
  }
}",0.980041293874742
70272,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),width));
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100),0,0));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),width));
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
}",0.9989626556016598
70273,"protected void buildLogicContainerProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100)));
    }
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}","protected void buildLogicContainerProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100),0,0));
    }
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}",0.9982935153583616
70274,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
  localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
  localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
  localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
  localProperties.setPaddingBottom(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maw));
  localProperties.setPaddingLeft(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maw));
  localProperties.setPaddingTop(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maw));
  localProperties.setPaddingRight(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maw));
  if (!isInInlineStacking) {
    pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
    pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  }
  this.boxStyle=new BoxStyle();
  int borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setLeftBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_LEFT_COLOR),style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setRightBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_RIGHT_COLOR),style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setTopBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_TOP_COLOR),style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setBottomBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR),style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),borderWidth));
  }
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  CSSValue url=style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE);
  if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE))) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url.getCssText()),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100)));
  }
  action=content.getHyperlinkAction();
  bookmark=content.getBookmark();
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
  localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
  localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
  localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
  localProperties.setPaddingBottom(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maw));
  localProperties.setPaddingLeft(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maw));
  localProperties.setPaddingTop(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maw));
  localProperties.setPaddingRight(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maw));
  if (!isInInlineStacking) {
    pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
    pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  }
  this.boxStyle=new BoxStyle();
  int borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setLeftBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_LEFT_COLOR),style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setRightBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_RIGHT_COLOR),style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setTopBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_TOP_COLOR),style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setBottomBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR),style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),borderWidth));
  }
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  CSSValue url=style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE);
  if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE))) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url.getCssText()),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100),0,0));
  }
  action=content.getHyperlinkAction();
  bookmark=content.getBookmark();
}",0.9993498049414824
70275,"protected BackgroundImageInfo createBackgroundImage(String url,IContent content){
  IStyle style=content.getStyle();
  String widthStr=style.getBackgroundWidth();
  String heightStr=style.getBackgroundHeight();
  Image img=null;
  try {
    img=Image.getInstance(new URL(url));
  }
 catch (  Exception e) {
    if (SvgFile.isSvg(url)) {
      try {
        img=Image.getInstance(SvgFile.transSvgToArray(url));
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,ex.getMessage(),ex);
      }
    }
 else {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
  int resolutionX=img.getDpiX();
  int resolutionY=img.getDpiY();
  if (0 == resolutionX || 0 == resolutionY) {
    resolutionX=96;
    resolutionY=96;
  }
  float imageWidth=img.plainWidth() / resolutionX * 72;
  float imageHeight=img.plainHeight() / resolutionY * 72;
  int actualWidth=(int)imageWidth;
  int actualHeight=(int)imageHeight;
  if (widthStr != null && widthStr.length() > 0 || heightStr != null && heightStr.length() > 0) {
    if (""String_Node_Str"".equals(widthStr) || ""String_Node_Str"".equals(heightStr)) {
      float rh=imageHeight / height;
      float rw=imageWidth / width;
      if (rh > rw) {
        actualHeight=height;
        actualWidth=(int)(imageWidth * height / imageHeight);
      }
 else {
        actualWidth=width;
        actualHeight=(int)(imageHeight * width / imageWidth);
      }
    }
 else     if (""String_Node_Str"".equals(widthStr) || ""String_Node_Str"".equals(heightStr)) {
      float rh=imageHeight / height;
      float rw=imageWidth / width;
      if (rh > rw) {
        actualWidth=width;
        actualHeight=(int)(imageHeight * width / imageWidth);
      }
 else {
        actualHeight=height;
        actualWidth=(int)(imageWidth * height / imageHeight);
      }
    }
 else {
      DimensionType widthDim=DimensionType.parserUnit(widthStr);
      DimensionType heightDim=DimensionType.parserUnit(heightStr);
      if (widthDim != null) {
        actualWidth=PropertyUtil.getDimensionValue(content,widthDim);
        if (heightDim == null) {
          actualHeight=(int)(imageHeight * actualWidth / imageWidth);
        }
 else {
          actualHeight=PropertyUtil.getDimensionValue(content,heightDim);
        }
      }
 else       if (heightDim != null) {
        actualHeight=PropertyUtil.getDimensionValue(content,heightDim);
        if (widthDim == null) {
          actualWidth=(int)(imageWidth * actualHeight / imageHeight);
        }
 else {
          actualWidth=PropertyUtil.getDimensionValue(content,widthDim);
        }
      }
 else {
        actualHeight=(int)imageHeight;
        actualWidth=(int)imageWidth;
      }
    }
  }
  IStyle cs=pageContent.getComputedStyle();
  return new BackgroundImageInfo(url,cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width - actualWidth),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),height - actualHeight),actualHeight,actualWidth);
}","protected BackgroundImageInfo createBackgroundImage(String url,IContent content){
  IStyle style=content.getStyle();
  String widthStr=style.getBackgroundWidth();
  String heightStr=style.getBackgroundHeight();
  Image img=null;
  try {
    img=Image.getInstance(new URL(url));
  }
 catch (  Exception e) {
    if (SvgFile.isSvg(url)) {
      try {
        img=Image.getInstance(SvgFile.transSvgToArray(url));
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,ex.getMessage(),ex);
      }
    }
 else {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
  int resolutionX=img.getDpiX();
  int resolutionY=img.getDpiY();
  if (0 == resolutionX || 0 == resolutionY) {
    resolutionX=96;
    resolutionY=96;
  }
  float imageWidth=img.plainWidth() / resolutionX * 72 * PDFConstants.LAYOUT_TO_PDF_RATIO;
  float imageHeight=img.plainHeight() / resolutionY * 72 * PDFConstants.LAYOUT_TO_PDF_RATIO;
  int actualWidth=(int)imageWidth;
  int actualHeight=(int)imageHeight;
  if (widthStr != null && widthStr.length() > 0 || heightStr != null && heightStr.length() > 0) {
    if (""String_Node_Str"".equals(widthStr) || ""String_Node_Str"".equals(heightStr)) {
      float rh=imageHeight / height;
      float rw=imageWidth / width;
      if (rh > rw) {
        actualHeight=height;
        actualWidth=(int)(imageWidth * height / imageHeight);
      }
 else {
        actualWidth=width;
        actualHeight=(int)(imageHeight * width / imageWidth);
      }
    }
 else     if (""String_Node_Str"".equals(widthStr) || ""String_Node_Str"".equals(heightStr)) {
      float rh=imageHeight / height;
      float rw=imageWidth / width;
      if (rh > rw) {
        actualWidth=width;
        actualHeight=(int)(imageHeight * width / imageWidth);
      }
 else {
        actualHeight=height;
        actualWidth=(int)(imageWidth * height / imageHeight);
      }
    }
 else {
      DimensionType widthDim=DimensionType.parserUnit(widthStr);
      DimensionType heightDim=DimensionType.parserUnit(heightStr);
      if (widthDim != null) {
        actualWidth=PropertyUtil.getDimensionValue(content,widthDim);
        if (heightDim == null) {
          actualHeight=(int)(imageHeight * actualWidth / imageWidth);
        }
 else {
          actualHeight=PropertyUtil.getDimensionValue(content,heightDim);
        }
      }
 else       if (heightDim != null) {
        actualHeight=PropertyUtil.getDimensionValue(content,heightDim);
        if (widthDim == null) {
          actualWidth=(int)(imageWidth * actualHeight / imageHeight);
        }
 else {
          actualWidth=PropertyUtil.getDimensionValue(content,widthDim);
        }
      }
 else {
        actualHeight=(int)imageHeight;
        actualWidth=(int)imageWidth;
      }
    }
  }
  IStyle cs=pageContent.getComputedStyle();
  return new BackgroundImageInfo(url,cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width - actualWidth),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),height - actualHeight),actualHeight,actualWidth);
}",0.9885358663609564
70276,"/** 
 * return the extra value text, if it exists and is visible
 * @param cm
 * @param se
 * @return Value Text
 * @throws ChartException
 */
private static String getValueText(Chart cm,Series se) throws ChartException {
  String strValueText=null;
  if (cm.getLegend().isShowValue()) {
    DataSetIterator dsiBase=createDataSetIterator(se,cm);
    if (dsiBase.hasNext()) {
      Object obj=dsiBase.next();
      while (!isValidValue(obj) && dsiBase.hasNext()) {
        obj=dsiBase.next();
      }
      strValueText=String.valueOf(obj);
    }
  }
  return strValueText;
}","/** 
 * return the extra value text, if it exists and is visible
 * @param cm
 * @param se
 * @return Value Text
 * @throws ChartException
 */
private static String getValueText(Chart cm,Series se) throws ChartException {
  String strValueText=null;
  if (cm.getLegend().isShowValue()) {
    DataSetIterator dsiBase=createDataSetIterator(se,cm);
    if (dsiBase.hasNext()) {
      Object obj=dsiBase.next();
      while (!isValidValue(obj) && dsiBase.hasNext()) {
        obj=dsiBase.next();
      }
      try {
        strValueText=ValueFormatter.format(obj,null,ULocale.getDefault(),null);
      }
 catch (      ChartException ex) {
        strValueText=String.valueOf(obj);
      }
    }
  }
  return strValueText;
}",0.8878576952822892
70277,"public void visitReportDesign(ReportDesignHandle handle){
  setupNamedExpressions(handle,report.getNamedExpressions());
  StyleHandle defaultStyle=handle.findStyle(""String_Node_Str"");
  createReportDefaultStyles(defaultStyle);
  PageSetupDesign pageSetup=new PageSetupDesign();
  SlotHandle pageSlot=handle.getMasterPages();
  for (int i=0; i < pageSlot.getCount(); i++) {
    apply(pageSlot.get(i));
    if (currentElement != null) {
      pageSetup.addMasterPage((MasterPageDesign)currentElement);
    }
  }
  if (pageSlot.getCount() < 1) {
    MasterPageDesign masterPage=new SimpleMasterPageDesign();
    masterPage.setID(generateUniqueID());
    masterPage.setName(DEFAULT_MASTERPAGE_NAME);
    masterPage.setPageType(DesignChoiceConstants.PAGE_SIZE_US_LETTER);
    masterPage.setOrientation(DesignChoiceConstants.PAGE_ORIENTATION_AUTO);
    DimensionType top=new DimensionType(DEFAULT_MASTERPAGE_TOP_MARGIN,DimensionType.UNITS_IN);
    DimensionType left=new DimensionType(DEFAULT_MASTERPAGE_LEFT_MARGIN,DimensionType.UNITS_IN);
    DimensionType bottom=new DimensionType(DEFAULT_MASTERPAGE_BOTTOM_MARGIN,DimensionType.UNITS_IN);
    DimensionType right=new DimensionType(DEFAULT_MASTERPAGE_RIGHT_MARGIN,DimensionType.UNITS_IN);
    masterPage.setMargin(top,left,bottom,right);
    pageSetup.addMasterPage(masterPage);
  }
  report.setPageSetup(pageSetup);
  SlotHandle bodySlot=handle.getBody();
  for (int i=0; i < bodySlot.getCount(); i++) {
    apply(bodySlot.get(i));
    if (currentElement != null) {
      report.addContent((ReportItemDesign)currentElement);
    }
  }
}","public void visitReportDesign(ReportDesignHandle handle){
  setupNamedExpressions(handle,report.getNamedExpressions());
  StyleHandle defaultStyle=handle.findStyle(""String_Node_Str"");
  createReportDefaultStyles(defaultStyle);
  PageSetupDesign pageSetup=new PageSetupDesign();
  SlotHandle pageSlot=handle.getMasterPages();
  for (int i=0; i < pageSlot.getCount(); i++) {
    apply(pageSlot.get(i));
    if (currentElement != null) {
      pageSetup.addMasterPage((MasterPageDesign)currentElement);
    }
  }
  if (pageSlot.getCount() < 1) {
    MasterPageDesign masterPage=new SimpleMasterPageDesign();
    masterPage.setID(generateUniqueID());
    masterPage.setName(DEFAULT_MASTERPAGE_NAME);
    masterPage.setPageType(DesignChoiceConstants.PAGE_SIZE_US_LETTER);
    masterPage.setOrientation(DesignChoiceConstants.PAGE_ORIENTATION_AUTO);
    DimensionType width=new DimensionType(DEFAULT_MASTERPAGE_WIDTH,DimensionType.UNITS_IN);
    DimensionType height=new DimensionType(DEFAULT_MASTERPAGE_HEIGHT,DimensionType.UNITS_IN);
    masterPage.setPageSize(width,height);
    DimensionType top=new DimensionType(DEFAULT_MASTERPAGE_TOP_MARGIN,DimensionType.UNITS_IN);
    DimensionType left=new DimensionType(DEFAULT_MASTERPAGE_LEFT_MARGIN,DimensionType.UNITS_IN);
    DimensionType bottom=new DimensionType(DEFAULT_MASTERPAGE_BOTTOM_MARGIN,DimensionType.UNITS_IN);
    DimensionType right=new DimensionType(DEFAULT_MASTERPAGE_RIGHT_MARGIN,DimensionType.UNITS_IN);
    masterPage.setMargin(top,left,bottom,right);
    pageSetup.addMasterPage(masterPage);
  }
  report.setPageSetup(pageSetup);
  SlotHandle bodySlot=handle.getBody();
  for (int i=0; i < bodySlot.getCount(); i++) {
    apply(bodySlot.get(i));
    if (currentElement != null) {
      report.addContent((ReportItemDesign)currentElement);
    }
  }
}",0.9310548025928108
70278,"/** 
 * return the extra value text, if it exists and is visible
 * @param cm
 * @param se
 * @return Value Text
 * @throws ChartException
 */
private static String getValueText(Chart cm,Series se,RunTimeContext rtc) throws ChartException {
  String strValueText=null;
  if (cm.getLegend().isShowValue()) {
    DataSetIterator dsiBase=createDataSetIterator(se,cm);
    if (dsiBase.hasNext()) {
      Object obj=dsiBase.next();
      while (!isValidValue(obj) && dsiBase.hasNext()) {
        obj=dsiBase.next();
      }
      try {
        strValueText=ValueFormatter.format(obj,null,rtc.getULocale(),null);
      }
 catch (      ChartException ex) {
        strValueText=String.valueOf(obj);
      }
    }
  }
  return strValueText;
}","/** 
 * return the extra value text, if it exists and is visible
 * @param cm
 * @param se
 * @return Value Text
 * @throws ChartException
 */
private String getValueText(Series se) throws ChartException {
  String strValueText=null;
  if (lgData.cm.getLegend().isShowValue()) {
    DataSetIterator dsiBase=createDataSetIterator(se,lgData.cm);
    if (dsiBase.hasNext()) {
      Object obj=dsiBase.next();
      while (!isValidValue(obj) && dsiBase.hasNext()) {
        obj=dsiBase.next();
      }
      try {
        strValueText=ValueFormatter.format(obj,null,lgData.rtc.getULocale(),null);
      }
 catch (      ChartException ex) {
        strValueText=String.valueOf(obj);
      }
    }
  }
  return strValueText;
}",0.7661623108665749
70279,"protected ContentProvider(LegendData lgData){
  this.lgData=lgData;
  this.bNeedInvert=needInvert(lgData.bPaletteByCategory,lgData.cm,lgData.seda);
}","protected ContentProvider(LegendData lgData){
  this.lgData=lgData;
  this.bNeedInvert=needInvert(lgData.bPaletteByCategory,lgData.cm,lgData.seda);
  this.dfCache=new ChartUtil.CacheDecimalFormat(lgData.rtc.getULocale());
}",0.8010752688172043
70280,"private LegendItemHints visitSeries() throws ChartException {
  if (itSeries.hasNext()) {
    Series se=itSeries.next();
    String sItem=formatItemText(se.getSeriesIdentifier());
    String sValue=bShowValue ? getValueText(lgData.cm,se,lgData.rtc) : null;
    return LegendItemHints.newEntry(sItem,sValue,sed,se,itSeries.getIndex());
  }
 else {
    this.status=Status.WAIT_SD;
    if (bSeparator && alSeries.size() > 0 && itSed.hasNext()) {
      return LegendItemHints.createSeperator();
    }
 else {
      return visitSed();
    }
  }
}","private LegendItemHints visitSeries() throws ChartException {
  if (itSeries.hasNext()) {
    Series se=itSeries.next();
    String sItem=formatItemText(se.getSeriesIdentifier());
    String sValue=bShowValue ? getValueText(se) : null;
    return LegendItemHints.newEntry(sItem,sValue,sed,se,itSeries.getIndex());
  }
 else {
    this.status=Status.WAIT_SD;
    if (bSeparator && alSeries.size() > 0 && itSed.hasNext()) {
      return LegendItemHints.createSeperator();
    }
 else {
      return visitSed();
    }
  }
}",0.9764373232799246
70281,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.bStepFixed=true;
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isAligned();
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.setFactor(factor);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(10));
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.setStep(Integer.valueOf(1));
    sc.oStepNumber=oStepNumber;
    sc.oUnit=Integer.valueOf(iUnit);
    sc.iMinUnit=oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
        sc.oMinimumFixed=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
        sc.oMaximumFixed=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  sc.bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0),rtc);
    sc.setStep(new Double(dStep));
    sc.bStepFixed=true;
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isAligned();
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.setFactor(factor);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType,rtc);
    sc.fs=fs;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0),rtc);
    sc.setStep(new Double(dStep));
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0),rtc);
    sc.setStep(new Double(10));
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis,rtc);
    sc.setStep(Integer.valueOf(1));
    sc.oStepNumber=oStepNumber;
    sc.oUnit=Integer.valueOf(iUnit);
    sc.iMinUnit=oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
        sc.oMinimumFixed=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
        sc.oMaximumFixed=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  sc.bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}",0.9961656441717792
70282,"public final Object clone(){
  final AutoScale sc=new AutoScale(iType,oMinimum,oMaximum);
  sc.oStep=oStep;
  sc.oStepNumber=this.oStepNumber;
  sc.dStart=dStart;
  sc.dEnd=dEnd;
  sc.oMaximumWithMargin=oMaximumWithMargin;
  sc.oMinimumWithMargin=oMinimumWithMargin;
  sc.iMarginPercent=iMarginPercent;
  sc.atcTickCoordinates=atcTickCoordinates;
  sc.dStartShift=dStartShift;
  sc.dEndShift=dEndShift;
  sc.dsiData=dsiData;
  sc.oUnit=oUnit;
  sc.bMaximumFixed=bMaximumFixed;
  sc.bMinimumFixed=bMinimumFixed;
  sc.bStepFixed=bStepFixed;
  sc.fs=fs;
  sc.rtc=rtc;
  sc.bIntegralZoom=bIntegralZoom;
  sc.bCategoryScale=bCategoryScale;
  sc.labelVisHelper=labelVisHelper;
  sc.iScaleDirection=iScaleDirection;
  sc.staggeredHelper=staggeredHelper;
  sc.bAxisLabelStaggered=bAxisLabelStaggered;
  sc.iLabelShowingInterval=iLabelShowingInterval;
  sc.bTickBetweenCategories=bTickBetweenCategories;
  sc.bLabelWithinAxes=bLabelWithinAxes;
  sc.iMinUnit=iMinUnit;
  sc.hmComputedLabelText=sc.hmComputedLabelText;
  sc.tmpSC=tmpSC;
  sc.bExpandMinMax=bExpandMinMax;
  sc.bAlignZero=bAlignZero;
  return sc;
}","public final Object clone(){
  final AutoScale sc=new AutoScale(iType,oMinimum,oMaximum,rtc);
  sc.oStep=oStep;
  sc.oStepNumber=this.oStepNumber;
  sc.dStart=dStart;
  sc.dEnd=dEnd;
  sc.oMaximumWithMargin=oMaximumWithMargin;
  sc.oMinimumWithMargin=oMinimumWithMargin;
  sc.iMarginPercent=iMarginPercent;
  sc.atcTickCoordinates=atcTickCoordinates;
  sc.dStartShift=dStartShift;
  sc.dEndShift=dEndShift;
  sc.dsiData=dsiData;
  sc.oUnit=oUnit;
  sc.bMaximumFixed=bMaximumFixed;
  sc.bMinimumFixed=bMinimumFixed;
  sc.bStepFixed=bStepFixed;
  sc.fs=fs;
  sc.bIntegralZoom=bIntegralZoom;
  sc.bCategoryScale=bCategoryScale;
  sc.labelVisHelper=labelVisHelper;
  sc.iScaleDirection=iScaleDirection;
  sc.staggeredHelper=staggeredHelper;
  sc.bAxisLabelStaggered=bAxisLabelStaggered;
  sc.iLabelShowingInterval=iLabelShowingInterval;
  sc.bTickBetweenCategories=bTickBetweenCategories;
  sc.bLabelWithinAxes=bLabelWithinAxes;
  sc.iMinUnit=iMinUnit;
  sc.hmComputedLabelText=sc.hmComputedLabelText;
  sc.tmpSC=tmpSC;
  sc.bExpandMinMax=bExpandMinMax;
  sc.bAlignZero=bAlignZero;
  return sc;
}",0.99179580674567
70283,"/** 
 * The constructor.
 * @param _iType
 * @param _oMinimum
 * @param _oMaximum
 * @param _oStep
 */
public AutoScale(int _iType,Object _oMinimum,Object _oMaximum){
  iType=_iType;
  oMinimum=_oMinimum;
  oMaximum=_oMaximum;
}","/** 
 * The constructor.
 * @param _iType
 * @param _oMinimum
 * @param _oMaximum
 * @param _oStep
 */
public AutoScale(int _iType,Object _oMinimum,Object _oMaximum,RunTimeContext _rtc){
  iType=_iType;
  oMinimum=_oMinimum;
  oMaximum=_oMaximum;
  rtc=_rtc;
  cacheNumFormat=new ChartUtil.CacheDecimalFormat(rtc.getULocale());
  cacheDateFormat=new ChartUtil.CacheDateFormat(rtc.getULocale());
}",0.7307692307692307
70284,"@Override protected DecimalFormat newValue(String pattern){
  return new DecimalFormat(pattern);
}","@Override protected IDateFormatWrapper newValue(Integer iDateTimeUnit){
  return DateFormatWrapperFactory.getPreferredDateFormat(iDateTimeUnit,locale);
}",0.5896414342629482
70285,"private String parseBackgroundSize(String backgroundHeight,DimensionType pageHeight){
  int index=backgroundHeight.indexOf(""String_Node_Str"");
  if (index != -1) {
    String percent=backgroundHeight.substring(0,index);
    int percentValue=Integer.valueOf(percent).intValue();
    return pageHeight.getMeasure() * percentValue / 100 + pageHeight.getUnits();
  }
  return backgroundHeight;
}","private String parseBackgroundSize(String backgroundHeight,DimensionType pageHeight){
  if (backgroundHeight == null)   return null;
  backgroundHeight=backgroundHeight.trim();
  if (backgroundHeight.endsWith(""String_Node_Str"")) {
    try {
      String percent=backgroundHeight.substring(0,backgroundHeight.length() - 1);
      int percentValue=Integer.valueOf(percent).intValue();
      return pageHeight.getMeasure() * percentValue / 100 + pageHeight.getUnits();
    }
 catch (    NumberFormatException e) {
      return null;
    }
  }
  return backgroundHeight;
}",0.3899895724713243
70286,"private void startBackgroundContainer(IStyle style,DimensionType pageWidth,DimensionType pageHeight){
  String backgroundHeight=parseBackgroundSize(style.getBackgroundHeight(),pageHeight);
  String backgroundWidth=parseBackgroundSize(style.getBackgroundWidth(),pageWidth);
  if (backgroundHeight == null && backgroundWidth == null) {
    return;
  }
  String image=style.getBackgroundImage();
  if (image == null || ""String_Node_Str"".equalsIgnoreCase(image)) {
    return;
  }
  needOutputBackgroundSize=true;
  String backgroundPositionX=style.getBackgroundPositionX();
  if (backgroundPositionX == null) {
    backgroundPositionX=""String_Node_Str"";
  }
  String backgroundPositionY=style.getBackgroundPositionY();
  if (backgroundPositionY == null) {
    backgroundPositionY=""String_Node_Str"";
  }
  writer.openTag(HTMLTags.TAG_DIV);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"" + pageWidth + ""String_Node_Str""+ pageHeight+ ""String_Node_Str"");
  writer.openTag(HTMLTags.TAG_IMAGE);
  writer.attributeAllowEmpty(HTMLTags.ATTR_ALT,""String_Node_Str"");
  image=handleStyleImage(image,true);
  if (image != null && image.length() > 0) {
    writer.attribute(HTMLTags.ATTR_SRC,image);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"" + backgroundWidth + ""String_Node_Str""+ backgroundHeight+ ""String_Node_Str""+ backgroundPositionX+ ""String_Node_Str""+ backgroundPositionY+ ""String_Node_Str"");
  }
  writer.closeTag(HTMLTags.TAG_IMAGE);
}","private void startBackgroundContainer(IStyle style,DimensionType pageWidth,DimensionType pageHeight){
  String backgroundHeight=parseBackgroundSize(style.getBackgroundHeight(),pageHeight);
  String backgroundWidth=parseBackgroundSize(style.getBackgroundWidth(),pageWidth);
  if (backgroundHeight == null && backgroundWidth == null) {
    return;
  }
 else {
    if (backgroundHeight == null) {
      backgroundHeight=""String_Node_Str"";
    }
    if (backgroundWidth == null) {
      backgroundWidth=""String_Node_Str"";
    }
  }
  String image=style.getBackgroundImage();
  if (image == null || ""String_Node_Str"".equalsIgnoreCase(image)) {
    return;
  }
  needOutputBackgroundSize=true;
  String backgroundPositionX=style.getBackgroundPositionX();
  if (backgroundPositionX == null) {
    backgroundPositionX=""String_Node_Str"";
  }
  String backgroundPositionY=style.getBackgroundPositionY();
  if (backgroundPositionY == null) {
    backgroundPositionY=""String_Node_Str"";
  }
  writer.openTag(HTMLTags.TAG_DIV);
  writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"" + pageWidth + ""String_Node_Str""+ pageHeight+ ""String_Node_Str"");
  writer.openTag(HTMLTags.TAG_IMAGE);
  writer.attributeAllowEmpty(HTMLTags.ATTR_ALT,""String_Node_Str"");
  image=handleStyleImage(image,true);
  if (image != null && image.length() > 0) {
    writer.attribute(HTMLTags.ATTR_SRC,image);
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"" + backgroundWidth + ""String_Node_Str""+ backgroundHeight+ ""String_Node_Str""+ backgroundPositionX+ ""String_Node_Str""+ backgroundPositionY+ ""String_Node_Str"");
  }
  writer.closeTag(HTMLTags.TAG_IMAGE);
}",0.9422827496757458
70287,"private void refreshImage(){
  String str=DEUtil.removeQuote(uriEditor.getText());
  try {
    if (selectedType == URI_TYPE) {
      ImageManager.getInstance().reloadURIImage(inputImage.getModuleHandle(),str);
    }
 else {
      ImageManager.getInstance().rloadImage(inputImage.getModuleHandle(),str);
    }
  }
 catch (  IOException e) {
  }
  clearPreview();
  preview(str);
  IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
  if (synchronizer != null) {
    synchronizer.notifyResourceChanged(new ReportResourceChangeEvent(this,str,IReportResourceChangeEvent.ImageResourceChange));
  }
}","private void refreshImage(){
  String str=DEUtil.removeQuote(uriEditor.getText().trim());
  if (str == null || str.length() == 0) {
    return;
  }
  try {
    if (selectedType == URI_TYPE) {
      ImageManager.getInstance().reloadURIImage(inputImage.getModuleHandle(),str);
    }
 else {
      ImageManager.getInstance().rloadImage(inputImage.getModuleHandle(),str);
    }
  }
 catch (  IOException e) {
  }
  clearPreview();
  preview(str);
  IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
  if (synchronizer != null) {
    synchronizer.notifyResourceChanged(new ReportResourceChangeEvent(this,str,IReportResourceChangeEvent.ImageResourceChange));
  }
}",0.9519586104951958
70288,"public void focusLost(FocusEvent e){
  preview(DEUtil.removeQuote(uriEditor.getText()));
}","public void focusLost(FocusEvent e){
  preview(DEUtil.removeQuote(uriEditor.getText().trim()));
}",0.962566844919786
70289,"private void buildURIEditor(int type){
  Label uriEditorLabel=new Label(inputArea,SWT.NONE);
  GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
  labelGd.horizontalSpan=4;
  uriEditorLabel.setLayoutData(labelGd);
  uriEditorLabel.setText(uriEditorLabelMap.get(Integer.valueOf(type)));
  uriEditor=new Text(inputArea,SWT.SINGLE | SWT.BORDER);
  GridData textGd=new GridData(GridData.GRAB_HORIZONTAL | GridData.FILL_HORIZONTAL);
  uriEditor.setLayoutData(textGd);
  uriEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  uriEditor.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      preview(DEUtil.removeQuote(uriEditor.getText()));
    }
  }
);
  initURIEditor();
}","private void buildURIEditor(int type){
  Label uriEditorLabel=new Label(inputArea,SWT.NONE);
  GridData labelGd=new GridData(GridData.FILL_HORIZONTAL);
  labelGd.horizontalSpan=4;
  uriEditorLabel.setLayoutData(labelGd);
  uriEditorLabel.setText(uriEditorLabelMap.get(Integer.valueOf(type)));
  uriEditor=new Text(inputArea,SWT.SINGLE | SWT.BORDER);
  GridData textGd=new GridData(GridData.GRAB_HORIZONTAL | GridData.FILL_HORIZONTAL);
  uriEditor.setLayoutData(textGd);
  uriEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  uriEditor.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      preview(DEUtil.removeQuote(uriEditor.getText().trim()));
    }
  }
);
  initURIEditor();
}",0.9958604376108812
70290,"protected ImageArea createImageArea(IImageContent content){
  ImageArea area=new ImageArea();
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
    area.setUrl(content.getURI());
  break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
area.setData(content.getData());
break;
}
return area;
}","protected ImageArea createImageArea(IImageContent content){
  ImageArea area=new ImageArea();
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
    area.setUrl(content.getURI());
  area.setExtension(content.getExtension());
area.setMIMEType(content.getMIMEType());
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
area.setData(content.getData());
area.setExtension(content.getExtension());
area.setMIMEType(content.getMIMEType());
break;
}
return area;
}",0.8103837471783296
70291,"/** 
 * Build the style of the page
 */
public void buildPageStyle(IPageContent page,StringBuffer styleBuffer){
  IStyle style=page.getStyle();
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildBorders(styleBuffer,style);
}","/** 
 * Build the style of the page
 */
public void buildPageStyle(IPageContent page,StringBuffer styleBuffer,boolean needOutputBackgroundSize){
  IStyle style=page.getStyle();
  if (!needOutputBackgroundSize) {
    AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  }
 else   AttributeBuilder.buildBackgroundColor(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildBorders(styleBuffer,style);
}",0.5335276967930029
70292,"/** 
 * The page layout is controlled by three render options: <ul> <li>OUTPUT-MASTER-PAGE</li> <li>OUTPUT-MARGIN</li> <li>FLOATING-FOOTER</li> </ul> The layout effect matrix are demostrate in following table: <table border=""all""> <tr> <th>PAGE</th> <th>MARGIN</th> <th>FOOTER</th> <th>effect</th> </tr> <tr valign=""top""> <td rowspan=""4"">TRUE</td> <td rowspan=""2"">TRUE</td> <td >FALSE</td> <td> <table border=""all"" style=""width:2in;height:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td>LM</td> <td valign=""top"">header</td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr> <td>LM</td> <td><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> <table> </td> </table> <tr valign=""top""> <td>TRUE</td> <td> <table border=""all"" style=""width:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td >LM</td> <td valign=""top""><div>header</div></td> <td >RM</td> </tr> <tr> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td valign=""top""><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> </table> </td> </tr> <tr valign=""top""> <td rowspan=""2"">FALSE</td> <td>TRUE</td> <td> <table border=""all"" style=""width:1.6in;height:1in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr style=""height:100%""> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td> <table border=""all"" style=""width:1.6in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td>ANY</td> <td>ANY</td> <td> <table border=""all"" style=""width:1.6in;""> <tr> <td>BODY</td> </tr> </table> </td> </tr> </table>
 */
public void startPage(IPageContent page) throws BirtException {
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.writeCode(""String_Node_Str"");
  }
  boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  StringBuffer styleBuffer=new StringBuffer();
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  styleBuffer.append(""String_Node_Str"");
  if (page != null && outputMasterPageContent) {
    htmlEmitter.buildPageStyle(page,styleBuffer);
    if (fixedReport) {
      DimensionType width=getPageWidth(page);
      if (width != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(width.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
 else {
      styleBuffer.append(""String_Node_Str"");
    }
    if (!pageFooterFloatFlag) {
      DimensionType height=getPageHeight(page);
      if (height != null) {
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(height.toString());
        styleBuffer.append(""String_Node_Str"");
      }
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(""String_Node_Str"");
    }
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  if (page != null && outputMasterPageContent) {
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
    }
    writer.openTag(HTMLTags.TAG_COL);
    writer.closeTag(HTMLTags.TAG_COL);
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
      outputVMargin(page.getMarginTop());
    }
    if (showPageHeader(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageHeader());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
  }
  writer.openTag(HTMLTags.TAG_TR);
  if (!pageFooterFloatFlag) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginLeft());
  }
  writer.openTag(HTMLTags.TAG_TD);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeBidiFlag();
}","/** 
 * The page layout is controlled by three render options: <ul> <li>OUTPUT-MASTER-PAGE</li> <li>OUTPUT-MARGIN</li> <li>FLOATING-FOOTER</li> </ul> The layout effect matrix are demostrate in following table: <table border=""all""> <tr> <th>PAGE</th> <th>MARGIN</th> <th>FOOTER</th> <th>effect</th> </tr> <tr valign=""top""> <td rowspan=""4"">TRUE</td> <td rowspan=""2"">TRUE</td> <td >FALSE</td> <td> <table border=""all"" style=""width:2in;height:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td>LM</td> <td valign=""top"">header</td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr> <td>LM</td> <td><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> <table> </td> </table> <tr valign=""top""> <td>TRUE</td> <td> <table border=""all"" style=""width:2in;""> <col width=""0.3in""/> <col width=""100%""/> <col width=""0.3in""/> <tr style=""height:0.2in;""> <td colspan=""3"">top-margin</td> </tr> <tr> <td >LM</td> <td valign=""top""><div>header</div></td> <td >RM</td> </tr> <tr> <td>LM</td> <td><div>body</div></td> <td>RM</td> </tr> <tr style=""height:100%""> <td>LM</td> <td valign=""top""><div>footer</div></td> <td>RM</td> </tr> <tr style=""height:0.2in"" > <td colspan=""3""><div>bottom-margin</div></td> </tr> </table> </td> </tr> <tr valign=""top""> <td rowspan=""2"">FALSE</td> <td>TRUE</td> <td> <table border=""all"" style=""width:1.6in;height:1in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr style=""height:100%""> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td> <table border=""all"" style=""width:1.6in;""> <col/> <tr> <td valign=""top""><div>header</div></td> </tr> <tr> <td><div>body</div></td> </tr> <tr> <td><div>footer</div></td> </tr> </table> </td> </tr> <tr> <td>FALSE</td> <td>ANY</td> <td>ANY</td> <td> <table border=""all"" style=""width:1.6in;""> <tr> <td>BODY</td> </tr> </table> </td> </tr> </table>
 */
public void startPage(IPageContent page) throws BirtException {
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  if (pageNo > 1) {
    writer.writeCode(""String_Node_Str"");
  }
  boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  DimensionType width=getPageWidth(page);
  DimensionType height=getPageHeight(page);
  if (page != null && outputMasterPageContent && width != null && height != null && fixedReport && !pageFooterFloatFlag) {
    startBackgroundContainer(page.getStyle(),width,height);
  }
  StringBuffer styleBuffer=new StringBuffer();
  writer.openTag(HTMLTags.TAG_TABLE);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  styleBuffer.append(""String_Node_Str"");
  if (page != null && outputMasterPageContent) {
    htmlEmitter.buildPageStyle(page,styleBuffer,needOutputBackgroundSize);
    if (fixedReport && width != null) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(width.toString());
      styleBuffer.append(""String_Node_Str"");
    }
 else     if (!fixedReport) {
      styleBuffer.append(""String_Node_Str"");
    }
    if (!pageFooterFloatFlag && height != null) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(height.toString());
      styleBuffer.append(""String_Node_Str"");
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(""String_Node_Str"");
    }
  }
 else {
    styleBuffer.append(""String_Node_Str"");
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  if (page != null && outputMasterPageContent) {
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
    }
    writer.openTag(HTMLTags.TAG_COL);
    writer.closeTag(HTMLTags.TAG_COL);
    if (outputMasterPageMargins) {
      outputColumn(page.getMarginLeft());
      outputVMargin(page.getMarginTop());
    }
    if (showPageHeader(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageHeader());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
  }
  writer.openTag(HTMLTags.TAG_TR);
  if (!pageFooterFloatFlag) {
    writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
  }
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginLeft());
  }
  writer.openTag(HTMLTags.TAG_TD);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeBidiFlag();
}",0.9423200170903652
70293,"public void endPage(IPageContent page) throws BirtException {
  logger.log(Level.FINE,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_TD);
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginRight());
  }
  writer.closeTag(HTMLTags.TAG_TR);
  if (page != null && outputMasterPageContent) {
    if (showPageFooter(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageFooter());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
    if (outputMasterPageMargins) {
      outputVMargin(page.getMarginBottom());
    }
  }
  writer.closeTag(HTMLTags.TAG_TABLE);
}","public void endPage(IPageContent page) throws BirtException {
  logger.log(Level.FINE,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_TD);
  if (page != null && outputMasterPageContent && outputMasterPageMargins) {
    outputHMargin(page.getMarginRight());
  }
  writer.closeTag(HTMLTags.TAG_TR);
  if (page != null && outputMasterPageContent) {
    if (showPageFooter(page)) {
      writer.openTag(HTMLTags.TAG_TR);
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginLeft());
      }
      outputPageBand(page,page.getPageFooter());
      if (outputMasterPageMargins) {
        outputHMargin(page.getMarginRight());
      }
      writer.closeTag(HTMLTags.TAG_TR);
    }
    if (outputMasterPageMargins) {
      outputVMargin(page.getMarginBottom());
    }
  }
  writer.closeTag(HTMLTags.TAG_TABLE);
  if (needOutputBackgroundSize) {
    endBackgroundContainer();
    needOutputBackgroundSize=false;
  }
}",0.940774487471526
70294,"public BIRTPropertyManagerFactory(){
  vms=new ValueManager[PerfectHash.TOTAL_KEYWORDS];
  vms[StyleConstants.STYLE_TEXT_ALIGN]=new TextAlignManager(CSSConstants.CSS_TEXT_ALIGN_PROPERTY,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_TEXT_INDENT]=new LengthManager(CSSConstants.CSS_TEXT_INDENT_PROPERTY,true,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_NUMBER_ALIGN]=new TextAlignManager(BIRTConstants.BIRT_NUMBER_ALIGN_PROPERTY,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_NUMBER_FORMAT]=new StringManager(BIRTConstants.BIRT_NUMBER_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_STRING_FORMAT]=new StringManager(BIRTConstants.BIRT_STRING_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_DATE_FORMAT]=new StringManager(BIRTConstants.BIRT_DATE_TIME_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_SQL_DATE_FORMAT]=new StringManager(BIRTConstants.BIRT_DATE_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_SQL_TIME_FORMAT]=new StringManager(BIRTConstants.BIRT_TIME_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_VERTICAL_ALIGN]=new VerticalAlignManager();
  vms[StyleConstants.STYLE_LINE_HEIGHT]=new LineHeightManager();
  vms[StyleConstants.STYLE_BACKGROUND_REPEAT]=new BackgroundRepeatManager();
  vms[StyleConstants.STYLE_BACKGROUND_ATTACHMENT]=new BackgroundAttachmentManager();
  vms[StyleConstants.STYLE_CAN_SHRINK]=new BooleanManager(BIRTConstants.BIRT_CAN_SHRINK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_TEXT_OVERLINE]=new TextOverlineManager();
  vms[StyleConstants.STYLE_TEXT_UNDERLINE]=new TextUnderlineManager();
  vms[StyleConstants.STYLE_TEXT_LINETHROUGH]=new TextLineThroughManager();
  vms[StyleConstants.STYLE_BACKGROUND_IMAGE]=new URIManager(CSSConstants.CSS_BACKGROUND_IMAGE_PROPERTY,false,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_TOP_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_LEFT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_RIGHT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_BOTTOM_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_COLOR]=new ColorManager(CSSConstants.CSS_COLOR_PROPERTY,true,CSSValueConstants.BLACK_RGB_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_TOP_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_LEFT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_RIGHT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_BOTTOM_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_COLOR]=new ColorManager(CSSConstants.CSS_BACKGROUND_COLOR_PROPERTY,false,CSSValueConstants.TRANSPARENT_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_TOP_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_LEFT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_RIGHT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_BOTTOM_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_LETTER_SPACING]=new SpacingManager(CSSConstants.CSS_LETTER_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_FONT_WEIGHT]=new FontWeightManager();
  vms[StyleConstants.STYLE_FONT_VARIANT]=new FontVariantManager();
  vms[StyleConstants.STYLE_MARGIN_LEFT]=new MarginManager(CSSConstants.CSS_MARGIN_LEFT_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_RIGHT]=new MarginManager(CSSConstants.CSS_MARGIN_RIGHT_PROPERTY);
  vms[StyleConstants.STYLE_DISPLAY]=new DisplayManager();
  vms[StyleConstants.STYLE_TEXT_TRANSFORM]=new TextTransformManager();
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_Y]=new BackgroundPositionYManager();
  vms[StyleConstants.STYLE_PADDING_LEFT]=new LengthManager(CSSConstants.CSS_PADDING_LEFT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_RIGHT]=new LengthManager(CSSConstants.CSS_PADDING_RIGHT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_FONT_SIZE]=new FontSizeManager();
  vms[StyleConstants.STYLE_FONT_STYLE]=new FontStyleManager();
  vms[StyleConstants.STYLE_WHITE_SPACE]=new WhiteSpaceManager();
  vms[StyleConstants.STYLE_ORPHANS]=new IntegerManager(CSSConstants.CSS_ORPHANS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_MASTER_PAGE]=new StringManager(BIRTConstants.BIRT_MASTER_PAGE_PROPERTY,false,null);
  vms[StyleConstants.STYLE_WORD_SPACING]=new SpacingManager(CSSConstants.CSS_WORD_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_X]=new BackgroundPositionXManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_BEFORE]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_BEFORE_PROPERTY);
  vms[StyleConstants.STYLE_PAGE_BREAK_INSIDE]=new PageBreakInsideManager();
  vms[StyleConstants.STYLE_SHOW_IF_BLANK]=new BooleanManager(BIRTConstants.BIRT_SHOW_IF_BLANK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_FONT_FAMILY]=new FontFamilyManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_AFTER]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_AFTER_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_BOTTOM]=new MarginManager(CSSConstants.CSS_MARGIN_BOTTOM_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_TOP]=new MarginManager(CSSConstants.CSS_MARGIN_TOP_PROPERTY);
  vms[StyleConstants.STYLE_WIDOWS]=new IntegerManager(CSSConstants.CSS_WIDOWS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_PADDING_BOTTOM]=new LengthManager(CSSConstants.CSS_PADDING_BOTTOM_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_TOP]=new LengthManager(CSSConstants.CSS_PADDING_TOP_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_VISIBLE_FORMAT]=new VisibleFormatManager();
  vms[StyleConstants.STYLE_DIRECTION]=new StringManager(BIRTConstants.CSS_DIRECTION_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
}","public BIRTPropertyManagerFactory(){
  vms=new ValueManager[PerfectHash.TOTAL_KEYWORDS];
  vms[StyleConstants.STYLE_TEXT_ALIGN]=new TextAlignManager(CSSConstants.CSS_TEXT_ALIGN_PROPERTY,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_TEXT_INDENT]=new LengthManager(CSSConstants.CSS_TEXT_INDENT_PROPERTY,true,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_NUMBER_ALIGN]=new TextAlignManager(BIRTConstants.BIRT_NUMBER_ALIGN_PROPERTY,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_NUMBER_FORMAT]=new StringManager(BIRTConstants.BIRT_NUMBER_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_STRING_FORMAT]=new StringManager(BIRTConstants.BIRT_STRING_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_DATE_FORMAT]=new StringManager(BIRTConstants.BIRT_DATE_TIME_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_SQL_DATE_FORMAT]=new StringManager(BIRTConstants.BIRT_DATE_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_SQL_TIME_FORMAT]=new StringManager(BIRTConstants.BIRT_TIME_FORMAT_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_VERTICAL_ALIGN]=new VerticalAlignManager();
  vms[StyleConstants.STYLE_LINE_HEIGHT]=new LineHeightManager();
  vms[StyleConstants.STYLE_BACKGROUND_REPEAT]=new BackgroundRepeatManager();
  vms[StyleConstants.STYLE_BACKGROUND_ATTACHMENT]=new BackgroundAttachmentManager();
  vms[StyleConstants.STYLE_CAN_SHRINK]=new BooleanManager(BIRTConstants.BIRT_CAN_SHRINK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_TEXT_OVERLINE]=new TextOverlineManager();
  vms[StyleConstants.STYLE_TEXT_UNDERLINE]=new TextUnderlineManager();
  vms[StyleConstants.STYLE_TEXT_LINETHROUGH]=new TextLineThroughManager();
  vms[StyleConstants.STYLE_BACKGROUND_IMAGE]=new URIManager(CSSConstants.CSS_BACKGROUND_IMAGE_PROPERTY,false,CSSValueConstants.NONE_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_TOP_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_LEFT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_RIGHT_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_STYLE]=new BorderStyleManager(CSSConstants.CSS_BORDER_BOTTOM_STYLE_PROPERTY);
  vms[StyleConstants.STYLE_COLOR]=new ColorManager(CSSConstants.CSS_COLOR_PROPERTY,true,CSSValueConstants.BLACK_RGB_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_TOP_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_LEFT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_RIGHT_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_WIDTH]=new BorderWidthManager(CSSConstants.CSS_BORDER_BOTTOM_WIDTH_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_COLOR]=new ColorManager(CSSConstants.CSS_BACKGROUND_COLOR_PROPERTY,false,CSSValueConstants.TRANSPARENT_VALUE);
  vms[StyleConstants.STYLE_BORDER_TOP_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_TOP_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_LEFT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_LEFT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_RIGHT_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_RIGHT_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_BORDER_BOTTOM_COLOR]=new BorderColorManager(CSSConstants.CSS_BORDER_BOTTOM_COLOR_PROPERTY);
  vms[StyleConstants.STYLE_LETTER_SPACING]=new SpacingManager(CSSConstants.CSS_LETTER_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_FONT_WEIGHT]=new FontWeightManager();
  vms[StyleConstants.STYLE_FONT_VARIANT]=new FontVariantManager();
  vms[StyleConstants.STYLE_MARGIN_LEFT]=new MarginManager(CSSConstants.CSS_MARGIN_LEFT_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_RIGHT]=new MarginManager(CSSConstants.CSS_MARGIN_RIGHT_PROPERTY);
  vms[StyleConstants.STYLE_DISPLAY]=new DisplayManager();
  vms[StyleConstants.STYLE_TEXT_TRANSFORM]=new TextTransformManager();
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_Y]=new BackgroundPositionYManager();
  vms[StyleConstants.STYLE_PADDING_LEFT]=new LengthManager(CSSConstants.CSS_PADDING_LEFT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_RIGHT]=new LengthManager(CSSConstants.CSS_PADDING_RIGHT_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_FONT_SIZE]=new FontSizeManager();
  vms[StyleConstants.STYLE_FONT_STYLE]=new FontStyleManager();
  vms[StyleConstants.STYLE_WHITE_SPACE]=new WhiteSpaceManager();
  vms[StyleConstants.STYLE_ORPHANS]=new IntegerManager(CSSConstants.CSS_ORPHANS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_MASTER_PAGE]=new StringManager(BIRTConstants.BIRT_MASTER_PAGE_PROPERTY,false,null);
  vms[StyleConstants.STYLE_WORD_SPACING]=new SpacingManager(CSSConstants.CSS_WORD_SPACING_PROPERTY);
  vms[StyleConstants.STYLE_BACKGROUND_POSITION_X]=new BackgroundPositionXManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_BEFORE]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_BEFORE_PROPERTY);
  vms[StyleConstants.STYLE_PAGE_BREAK_INSIDE]=new PageBreakInsideManager();
  vms[StyleConstants.STYLE_SHOW_IF_BLANK]=new BooleanManager(BIRTConstants.BIRT_SHOW_IF_BLANK_PROPERTY,true,false);
  vms[StyleConstants.STYLE_FONT_FAMILY]=new FontFamilyManager();
  vms[StyleConstants.STYLE_PAGE_BREAK_AFTER]=new PageBreakBeforeAfterManager(CSSConstants.CSS_PAGE_BREAK_AFTER_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_BOTTOM]=new MarginManager(CSSConstants.CSS_MARGIN_BOTTOM_PROPERTY);
  vms[StyleConstants.STYLE_MARGIN_TOP]=new MarginManager(CSSConstants.CSS_MARGIN_TOP_PROPERTY);
  vms[StyleConstants.STYLE_WIDOWS]=new IntegerManager(CSSConstants.CSS_WIDOWS_PROPERTY,true,2);
  vms[StyleConstants.STYLE_PADDING_BOTTOM]=new LengthManager(CSSConstants.CSS_PADDING_BOTTOM_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_PADDING_TOP]=new LengthManager(CSSConstants.CSS_PADDING_TOP_PROPERTY,false,CSSValueConstants.NUMBER_0);
  vms[StyleConstants.STYLE_VISIBLE_FORMAT]=new VisibleFormatManager();
  vms[StyleConstants.STYLE_DIRECTION]=new StringManager(BIRTConstants.CSS_DIRECTION_PROPERTY,true,CSSValueConstants.NULL_STRING_VALUE);
  vms[StyleConstants.STYLE_BACKGROUND_HEIGHT]=new StringManager(CSSConstants.CSS_BACKGROUND_HEIGHT_PROPERTY,false,null);
  vms[StyleConstants.STYLE_BACKGROUND_WIDTH]=new StringManager(CSSConstants.CSS_BACKGROUND_WIDTH_PROPERTY,false,null);
}",0.9816345270890724
70295,"public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
 else {
    buildProperties(content,context);
  }
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  currentBP=getContentY();
  currentIP=getContentX();
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
  vAlign=style.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  parent.add(this);
}","public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
 else {
    buildProperties(content,context);
  }
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
  vAlign=style.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  parent.add(this);
}",0.9499072356215214
70296,"/** 
 * Test all get/set accessors set values of the cell then get the values one by one to test if they work correctly
 */
public void testAccessor(){
  CellDesign cell=new CellDesign();
  cell.setColSpan(1);
  cell.setColumn(2);
  cell.setRowSpan(3);
  Expression<String> drop=newConstant(""String_Node_Str"");
  cell.setDrop(drop);
  assertEquals(cell.getColSpan(),1);
  assertEquals(cell.getColumn(),2);
  assertEquals(cell.getRowSpan(),3);
  assertEquals(cell.getDrop(),drop);
}","/** 
 * Test all get/set accessors set values of the cell then get the values one by one to test if they work correctly
 */
public void testAccessor(){
  CellDesign cell=new CellDesign();
  cell.setColSpan(1);
  cell.setColumn(2);
  cell.setRowSpan(3);
  String drop=""String_Node_Str"";
  cell.setDrop(drop);
  assertEquals(cell.getColSpan(),1);
  assertEquals(cell.getColumn(),2);
  assertEquals(cell.getRowSpan(),3);
  assertEquals(cell.getDrop(),drop);
}",0.96051227321238
70297,"/** 
 * test case to test the parser,especially the capability to parse the Table. To get the content about Table from an external file and then compare the expected result with the real result of some basic properties of DataSet. If they are the same,that means the IR is correct, otherwise, there exists errors in the parser
 */
public void testTable(){
  TableItemDesign table=(TableItemDesign)report.getContent(0);
  assertEquals(""String_Node_Str"",table.getCaption().getDesignValue());
  assertEquals(6,table.getColumnCount());
  ColumnDesign column=table.getColumn(0);
  assertEquals(""String_Node_Str"",column.getWidth().toString());
  TableBandDesign header=(TableBandDesign)table.getHeader();
  assertEquals(1,header.getRowCount());
  RowDesign row=header.getRow(0);
  assertEquals(row.getBookmark().getDesignValue(),""String_Node_Str"");
  assertEquals(1,row.getCellCount());
  CellDesign cell=row.getCell(0);
  assertEquals(6,cell.getColSpan());
  assertEquals(1,cell.getContentCount());
  assertEquals(2,table.getGroupCount());
  GroupDesign group=(GroupDesign)table.getGroup(0);
  header=(TableBandDesign)group.getHeader();
  assertEquals(1,header.getRowCount());
  row=header.getRow(0);
  assertEquals(6,row.getCellCount());
  cell=row.getCell(0);
  assertEquals(""String_Node_Str"",cell.getDrop().getDesignValue());
  cell=row.getCell(1);
  assertEquals(""String_Node_Str"",cell.getDrop().getDesignValue());
  TableBandDesign footer=(TableBandDesign)group.getFooter();
  assertEquals(1,footer.getRowCount());
  TableBandDesign detail=(TableBandDesign)table.getDetail();
  assertEquals(1,detail.getRowCount());
  assertEquals(1,detail.getRowCount());
}","/** 
 * test case to test the parser,especially the capability to parse the Table. To get the content about Table from an external file and then compare the expected result with the real result of some basic properties of DataSet. If they are the same,that means the IR is correct, otherwise, there exists errors in the parser
 */
public void testTable(){
  TableItemDesign table=(TableItemDesign)report.getContent(0);
  assertEquals(""String_Node_Str"",table.getCaption().getDesignValue());
  assertEquals(6,table.getColumnCount());
  ColumnDesign column=table.getColumn(0);
  assertEquals(""String_Node_Str"",column.getWidth().toString());
  TableBandDesign header=(TableBandDesign)table.getHeader();
  assertEquals(1,header.getRowCount());
  RowDesign row=header.getRow(0);
  assertEquals(row.getBookmark().getDesignValue(),""String_Node_Str"");
  assertEquals(1,row.getCellCount());
  CellDesign cell=row.getCell(0);
  assertEquals(6,cell.getColSpan());
  assertEquals(1,cell.getContentCount());
  assertEquals(2,table.getGroupCount());
  GroupDesign group=(GroupDesign)table.getGroup(0);
  header=(TableBandDesign)group.getHeader();
  assertEquals(1,header.getRowCount());
  row=header.getRow(0);
  assertEquals(6,row.getCellCount());
  cell=row.getCell(0);
  assertEquals(""String_Node_Str"",cell.getDrop());
  cell=row.getCell(1);
  assertEquals(""String_Node_Str"",cell.getDrop());
  TableBandDesign footer=(TableBandDesign)group.getFooter();
  assertEquals(1,footer.getRowCount());
  TableBandDesign detail=(TableBandDesign)table.getDetail();
  assertEquals(1,detail.getRowCount());
  assertEquals(1,detail.getRowCount());
}",0.9896341463414634
70298,"public Object visitCell(CellDesign cell,Object value){
  PolicyNode parent=parentNode;
  visitReportItem(cell,value);
  parentNode=currentNode;
  Expression<String> drop=cell.getDrop();
  if (cell.getRowSpan() != 1 || cell.getColSpan() != 1 || needProcessDrop(drop)) {
    currentNode.execute=true;
  }
  int count=cell.getContentCount();
  for (int i=0; i < count; i++) {
    ReportItemDesign item=cell.getContent(i);
    item.accept(this,null);
  }
  parentNode=parent;
  return value;
}","public Object visitCell(CellDesign cell,Object value){
  PolicyNode parent=parentNode;
  visitReportItem(cell,value);
  parentNode=currentNode;
  if (cell.getRowSpan() != 1 || cell.getColSpan() != 1 || needProcessDrop(cell.getDrop())) {
    currentNode.execute=true;
  }
  int count=cell.getContentCount();
  for (int i=0; i < count; i++) {
    ReportItemDesign item=cell.getContent(i);
    item.accept(this,null);
  }
  parentNode=parent;
  return value;
}",0.9365750528541226
70299,"private boolean needProcessDrop(Expression<String> drop){
  return drop != null && (drop.isExpression() || !""String_Node_Str"".equals(drop.getDesignValue()));
}","private boolean needProcessDrop(String drop){
  return drop != null && !""String_Node_Str"".equals(drop);
}",0.7954545454545454
70300,"/** 
 * @return Returns the drop.
 */
public Expression<String> getDrop(){
  return drop;
}","/** 
 * @return Returns the drop.
 */
public String getDrop(){
  return drop;
}",0.9294117647058824
70301,"/** 
 * @param drop The drop to set.
 */
public void setDrop(Expression<String> drop){
  this.drop=drop;
}","/** 
 * @param drop The drop to set.
 */
public void setDrop(String drop){
  this.drop=drop;
}",0.94
70302,"protected void readCellField(DataInputStream in,CellDesign cell,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_COLUMN:
    int column=IOUtil.readInt(in);
  cell.setColumn(column);
break;
case FIELD_COL_SPAN:
int colSpan=IOUtil.readInt(in);
cell.setColSpan(colSpan);
break;
case FIELD_ROW_SPAN:
int rowSpan=IOUtil.readInt(in);
cell.setRowSpan(rowSpan);
break;
case FIELD_DROP:
Expression<String> drop=readStringConstant(in);
cell.setDrop(drop);
break;
case FIELD_DISPLAY_GROUP_ICON:
boolean displayGroupIcon=IOUtil.readBool(in);
cell.setDisplayGroupIcon(displayGroupIcon);
break;
case FIELD_DIAGONAL_NUMBER:
int diagonalNumber=IOUtil.readInt(in);
cell.setDiagonalNumber(diagonalNumber);
break;
case FIELD_DIAGONAL_STYLE:
String diagonalStyle=IOUtil.readString(in);
cell.setDiagonalStyle(diagonalStyle);
break;
case FIELD_DIAGONAL_WIDTH:
DimensionType diagonalWidth=readDimension(in);
cell.setDiagonalWidth(diagonalWidth);
break;
case FIELD_ANTIDIAGONAL_NUMBER:
int antidiagonalNumber=IOUtil.readInt(in);
cell.setAntidiagonalNumber(antidiagonalNumber);
break;
case FIELD_ANTIDIAGONAL_STYLE:
String antidiagonalStyle=IOUtil.readString(in);
cell.setAntidiagonalStyle(antidiagonalStyle);
break;
case FIELD_ANTIDIAGONAL_WIDTH:
DimensionType antidiagonalWidth=readDimension(in);
cell.setAntidiagonalWidth(antidiagonalWidth);
break;
default :
readReportItemField(in,cell,fieldType);
}
}","protected void readCellField(DataInputStream in,CellDesign cell,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_COLUMN:
    int column=IOUtil.readInt(in);
  cell.setColumn(column);
break;
case FIELD_COL_SPAN:
int colSpan=IOUtil.readInt(in);
cell.setColSpan(colSpan);
break;
case FIELD_ROW_SPAN:
int rowSpan=IOUtil.readInt(in);
cell.setRowSpan(rowSpan);
break;
case FIELD_DROP:
String drop=IOUtil.readString(in);
cell.setDrop(drop);
break;
case FIELD_DISPLAY_GROUP_ICON:
boolean displayGroupIcon=IOUtil.readBool(in);
cell.setDisplayGroupIcon(displayGroupIcon);
break;
case FIELD_DIAGONAL_NUMBER:
int diagonalNumber=IOUtil.readInt(in);
cell.setDiagonalNumber(diagonalNumber);
break;
case FIELD_DIAGONAL_STYLE:
String diagonalStyle=IOUtil.readString(in);
cell.setDiagonalStyle(diagonalStyle);
break;
case FIELD_DIAGONAL_WIDTH:
DimensionType diagonalWidth=readDimension(in);
cell.setDiagonalWidth(diagonalWidth);
break;
case FIELD_ANTIDIAGONAL_NUMBER:
int antidiagonalNumber=IOUtil.readInt(in);
cell.setAntidiagonalNumber(antidiagonalNumber);
break;
case FIELD_ANTIDIAGONAL_STYLE:
String antidiagonalStyle=IOUtil.readString(in);
cell.setAntidiagonalStyle(antidiagonalStyle);
break;
case FIELD_ANTIDIAGONAL_WIDTH:
DimensionType antidiagonalWidth=readDimension(in);
cell.setAntidiagonalWidth(antidiagonalWidth);
break;
default :
readReportItemField(in,cell,fieldType);
}
}",0.9788454643241306
70303,"protected void writeCell(DataOutputStream out,CellDesign cell) throws IOException {
  writeReportItem(out,cell);
  int column=cell.getColumn();
  if (column != -1) {
    IOUtil.writeShort(out,FIELD_COLUMN);
    IOUtil.writeInt(out,column);
  }
  int colSpan=cell.getColSpan();
  if (colSpan != 1) {
    IOUtil.writeShort(out,FIELD_COL_SPAN);
    IOUtil.writeInt(out,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan != 1) {
    IOUtil.writeShort(out,FIELD_ROW_SPAN);
    IOUtil.writeInt(out,rowSpan);
  }
  Expression<String> drop=cell.getDrop();
  if (drop != null) {
    IOUtil.writeShort(out,FIELD_DROP);
    write(out,drop);
  }
  boolean displayGroupIcon=cell.getDisplayGroupIcon();
  if (displayGroupIcon) {
    IOUtil.writeShort(out,FIELD_DISPLAY_GROUP_ICON);
    IOUtil.writeBool(out,displayGroupIcon);
  }
  if (cell.hasDiagonalLine()) {
    int diagonalNumber=cell.getDiagonalNumber();
    if (diagonalNumber > 0) {
      IOUtil.writeShort(out,FIELD_DIAGONAL_NUMBER);
      IOUtil.writeInt(out,diagonalNumber);
      String diagonalStyle=cell.getDiagonalStyle();
      if (diagonalStyle != null) {
        IOUtil.writeShort(out,FIELD_DIAGONAL_STYLE);
        IOUtil.writeString(out,diagonalStyle);
      }
      DimensionType diagonalWidth=cell.getDiagonalWidth();
      if (diagonalWidth != null) {
        IOUtil.writeShort(out,FIELD_DIAGONAL_WIDTH);
        writeDimension(out,diagonalWidth);
      }
    }
    int antidiagonalNumber=cell.getAntidiagonalNumber();
    if (antidiagonalNumber > 0) {
      IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_NUMBER);
      IOUtil.writeInt(out,antidiagonalNumber);
      String antidiagonalStyle=cell.getAntidiagonalStyle();
      if (antidiagonalStyle != null) {
        IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_STYLE);
        IOUtil.writeString(out,antidiagonalStyle);
      }
      DimensionType antidiagonalWidth=cell.getAntidiagonalWidth();
      if (antidiagonalWidth != null) {
        IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_WIDTH);
        writeDimension(out,antidiagonalWidth);
      }
    }
  }
}","protected void writeCell(DataOutputStream out,CellDesign cell) throws IOException {
  writeReportItem(out,cell);
  int column=cell.getColumn();
  if (column != -1) {
    IOUtil.writeShort(out,FIELD_COLUMN);
    IOUtil.writeInt(out,column);
  }
  int colSpan=cell.getColSpan();
  if (colSpan != 1) {
    IOUtil.writeShort(out,FIELD_COL_SPAN);
    IOUtil.writeInt(out,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan != 1) {
    IOUtil.writeShort(out,FIELD_ROW_SPAN);
    IOUtil.writeInt(out,rowSpan);
  }
  String drop=cell.getDrop();
  if (drop != null) {
    IOUtil.writeShort(out,FIELD_DROP);
    IOUtil.writeString(out,drop);
  }
  boolean displayGroupIcon=cell.getDisplayGroupIcon();
  if (displayGroupIcon) {
    IOUtil.writeShort(out,FIELD_DISPLAY_GROUP_ICON);
    IOUtil.writeBool(out,displayGroupIcon);
  }
  if (cell.hasDiagonalLine()) {
    int diagonalNumber=cell.getDiagonalNumber();
    if (diagonalNumber > 0) {
      IOUtil.writeShort(out,FIELD_DIAGONAL_NUMBER);
      IOUtil.writeInt(out,diagonalNumber);
      String diagonalStyle=cell.getDiagonalStyle();
      if (diagonalStyle != null) {
        IOUtil.writeShort(out,FIELD_DIAGONAL_STYLE);
        IOUtil.writeString(out,diagonalStyle);
      }
      DimensionType diagonalWidth=cell.getDiagonalWidth();
      if (diagonalWidth != null) {
        IOUtil.writeShort(out,FIELD_DIAGONAL_WIDTH);
        writeDimension(out,diagonalWidth);
      }
    }
    int antidiagonalNumber=cell.getAntidiagonalNumber();
    if (antidiagonalNumber > 0) {
      IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_NUMBER);
      IOUtil.writeInt(out,antidiagonalNumber);
      String antidiagonalStyle=cell.getAntidiagonalStyle();
      if (antidiagonalStyle != null) {
        IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_STYLE);
        IOUtil.writeString(out,antidiagonalStyle);
      }
      DimensionType antidiagonalWidth=cell.getAntidiagonalWidth();
      if (antidiagonalWidth != null) {
        IOUtil.writeShort(out,FIELD_ANTIDIAGONAL_WIDTH);
        writeDimension(out,antidiagonalWidth);
      }
    }
  }
}",0.9886446001449626
70304,"public void startCell(ICellContent cell) throws BirtException {
  if (cellEmitter != null) {
    cellEmitter.startCell(cell);
  }
 else {
    if (!isNestTable()) {
      BufferedReportEmitter buffer=null;
      int colId=cell.getColumn();
      int colSpan=cell.getColSpan();
      int rowSpan=cell.getRowSpan();
      if (cell.getGenerateBy() instanceof CellDesign) {
        CellDesign cellDesign=(CellDesign)cell.getGenerateBy();
        if (cellDesign != null) {
          String dropType=cell.getDrop();
          if (dropType != null && !""String_Node_Str"".equals(dropType)) {
            rowSpan=createDropID(getGroupLevel(),dropType);
          }
        }
      }
      if (!hasDropCell() && (rowSpan < 0 || rowSpan > 1)) {
        layoutEvents.push(new LayoutEvent(LayoutEvent.ON_FIRST_DROP_CELL,new StartInfo(layout.getRowCount() - 1,colId)));
      }
      if (hasDropCell() || rowSpan < 0 || rowSpan > 1) {
        buffer=new BufferedReportEmitter(emitter);
        cellEmitter=buffer;
      }
      createCell(colId,rowSpan,colSpan,new CellContent(cell,buffer));
      if (hasDropCell()) {
        return;
      }
      emitter.startCell(layout.getWrappedCellContent(cell));
    }
 else {
      emitter.startCell(cell);
    }
  }
}","public void startCell(ICellContent cell) throws BirtException {
  if (cellEmitter != null) {
    cellEmitter.startCell(cell);
  }
 else {
    if (!isNestTable()) {
      BufferedReportEmitter buffer=null;
      int colId=cell.getColumn();
      int colSpan=cell.getColSpan();
      int rowSpan=cell.getRowSpan();
      if (cell.getGenerateBy() instanceof CellDesign) {
        CellDesign cellDesign=(CellDesign)cell.getGenerateBy();
        if (cellDesign != null) {
          String dropType=cellDesign.getDrop();
          if (dropType != null && !""String_Node_Str"".equals(dropType)) {
            rowSpan=createDropID(getGroupLevel(),dropType);
          }
        }
      }
      if (!hasDropCell() && (rowSpan < 0 || rowSpan > 1)) {
        layoutEvents.push(new LayoutEvent(LayoutEvent.ON_FIRST_DROP_CELL,new StartInfo(layout.getRowCount() - 1,colId)));
      }
      if (hasDropCell() || rowSpan < 0 || rowSpan > 1) {
        buffer=new BufferedReportEmitter(emitter);
        cellEmitter=buffer;
      }
      createCell(colId,rowSpan,colSpan,new CellContent(cell,buffer));
      if (hasDropCell()) {
        return;
      }
      emitter.startCell(layout.getWrappedCellContent(cell));
    }
 else {
      emitter.startCell(cell);
    }
  }
}",0.9975942261427426
70305,"/** 
 * start cell update content cache
 * @param cell
 */
public int getRowSpan(ICellContent cell){
  int groupLevel=getGroupLevel();
  int rowSpan=cell.getRowSpan();
  if (groupLevel >= 0) {
    String dropType=cell.getDrop();
    if (dropType != null && !""String_Node_Str"".equals(dropType)) {
      return createDropID(groupLevel,dropType);
    }
  }
  return rowSpan;
}","/** 
 * start cell update content cache
 * @param cell
 */
public int getRowSpan(ICellContent cell){
  int groupLevel=getGroupLevel();
  int rowSpan=cell.getRowSpan();
  if (groupLevel >= 0) {
    Object generateBy=cell.getGenerateBy();
    if (generateBy instanceof CellDesign) {
      CellDesign cellDesign=(CellDesign)generateBy;
      if (cellDesign != null) {
        String dropType=cellDesign.getDrop();
        if (dropType != null && !""String_Node_Str"".equals(dropType)) {
          return createDropID(groupLevel,dropType);
        }
      }
    }
  }
  return rowSpan;
}",0.7819706498951782
70306,"public void visitCell(CellHandle handle){
  CellDesign cell=new CellDesign();
  setupStyledElement(cell,handle);
  setupAuralInfomation(cell,handle);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      cell.addContent((ReportItemDesign)currentElement);
    }
  }
  cell.setColSpan(handle.getColumnSpan());
  int columnId=handle.getColumn() - 1;
  if (columnId < 0) {
    columnId=-1;
  }
  cell.setColumn(columnId);
  cell.setRowSpan(handle.getRowSpan());
  if (isCellInGroupHeader(handle)) {
    cell.setDrop(createConstant(handle.getDrop()));
  }
  String onCreate=handle.getOnCreate();
  String onCreateScriptText=validateExpression(onCreate);
  if (null != onCreateScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(onCreateScriptText,id);
    cell.setOnCreate(scriptExpr);
  }
  String OnRenderScriptText=handle.getOnRender();
  if (null != OnRenderScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnRenderScriptText,id);
    cell.setOnRender(scriptExpr);
  }
  setupHighlight(cell,null);
  int diagonalNumber=handle.getDiagonalNumber();
  if (diagonalNumber > 0) {
    cell.setDiagonalNumber(diagonalNumber);
    cell.setDiagonalStyle(handle.getDiagonalStyle());
    cell.setDiagonalWidth(createDimension(handle.getDiagonalThickness(),false));
  }
  int antidiagonalNumber=handle.getAntidiagonalNumber();
  if (antidiagonalNumber > 0) {
    cell.setAntidiagonalNumber(antidiagonalNumber);
    cell.setAntidiagonalStyle(handle.getAntidiagonalStyle());
    cell.setAntidiagonalWidth(createDimension(handle.getAntidiagonalThickness(),false));
  }
  setCurrentElement(cell);
}","public void visitCell(CellHandle handle){
  CellDesign cell=new CellDesign();
  setupStyledElement(cell,handle);
  setupAuralInfomation(cell,handle);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      cell.addContent((ReportItemDesign)currentElement);
    }
  }
  cell.setColSpan(handle.getColumnSpan());
  int columnId=handle.getColumn() - 1;
  if (columnId < 0) {
    columnId=-1;
  }
  cell.setColumn(columnId);
  cell.setRowSpan(handle.getRowSpan());
  if (isCellInGroupHeader(handle)) {
    cell.setDrop(handle.getDrop());
  }
  String onCreate=handle.getOnCreate();
  String onCreateScriptText=validateExpression(onCreate);
  if (null != onCreateScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(onCreateScriptText,id);
    cell.setOnCreate(scriptExpr);
  }
  String OnRenderScriptText=handle.getOnRender();
  if (null != OnRenderScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnRenderScriptText,id);
    cell.setOnRender(scriptExpr);
  }
  setupHighlight(cell,null);
  int diagonalNumber=handle.getDiagonalNumber();
  if (diagonalNumber > 0) {
    cell.setDiagonalNumber(diagonalNumber);
    cell.setDiagonalStyle(handle.getDiagonalStyle());
    cell.setDiagonalWidth(createDimension(handle.getDiagonalThickness(),false));
  }
  int antidiagonalNumber=handle.getAntidiagonalNumber();
  if (antidiagonalNumber > 0) {
    cell.setAntidiagonalNumber(antidiagonalNumber);
    cell.setAntidiagonalStyle(handle.getAntidiagonalStyle());
    cell.setAntidiagonalWidth(createDimension(handle.getAntidiagonalThickness(),false));
  }
  setCurrentElement(cell);
}",0.9958071278825996
70307,"public void handleEvent(Event event){
  Object source=event.widget;
  if (source == fComboStyle) {
    updateProperties(fCurrentStyleKeyType);
    switchProperties(MenuStylesKeyType.get(fComboStyle.getSelectionIndex()));
  }
 else   if (source == fBtnAdd) {
    doAdd();
  }
 else   if (source == fBtnRemove) {
    doRemove();
  }
 else   if (source == fTable) {
    if (event.type == SWT.Resize) {
      int totalWidth=0;
      int valuewidth=0;
      int i=0;
      for (      TableColumn tc : fTable.getColumns()) {
        totalWidth+=tc.getWidth();
        if (i == 1) {
          valuewidth=tc.getWidth();
        }
        i++;
      }
      valuewidth+=(fTable.getClientArea().width - totalWidth);
      fTable.getColumn(1).setWidth(valuewidth);
    }
 else     if (event.type == SWT.Selection) {
      updateButtonStatus();
    }
  }
}","public void handleEvent(Event event){
  Object source=event.widget;
  if (source == fComboStyle) {
    updateProperties(fCurrentStyleKeyType);
    switchProperties(MenuStylesKeyType.get(fComboStyle.getSelectionIndex()));
  }
 else   if (source == fBtnAdd) {
    doAdd();
  }
 else   if (source == fBtnRemove) {
    doRemove();
  }
 else   if (source == fTable) {
    if (event.type == SWT.Resize) {
      int totalWidth=0;
      int valuewidth=0;
      int i=0;
      for (      TableColumn tc : fTable.getColumns()) {
        totalWidth+=tc.getWidth();
        if (i == 1) {
          valuewidth=tc.getWidth();
        }
        i++;
      }
      valuewidth+=(fTable.getClientArea().width - totalWidth);
      fTable.getColumn(1).setWidth(valuewidth);
    }
 else     if (event.type == SWT.Selection) {
      updateButtonStatus();
    }
 else     if (event.type == SWT.KeyDown) {
      if (event.character == ' ') {
        fTableViewer.editElement(fTableViewer.getElementAt(fTable.getSelectionIndex()),0);
      }
    }
  }
}",0.9017094017094016
70308,"private CellEditor[] getCellEditors(Table table){
  CellEditor[] editors=new CellEditor[COLUMNS.length];
  editors[0]=new TextCellEditor(table);
  editors[1]=new TextCellEditor(table);
  return editors;
}","private CellEditor[] getCellEditors(Table table){
  CellEditor[] editors=new CellEditor[COLUMNS.length];
  editors[0]=new TextCellEditor(table){
    @Override protected void keyReleaseOccured(    KeyEvent keyEvent){
      super.keyReleaseOccured(keyEvent);
      if (keyEvent.character == '\r') {
        fTableViewer.editElement(fTableViewer.getElementAt(fTable.getSelectionIndex()),1);
      }
    }
  }
;
  editors[1]=new TextCellEditor(table);
  return editors;
}",0.6080476900149031
70309,"/** 
 * @param c
 */
private void placeComponents(Composite c){
  GridLayout gl=(GridLayout)c.getLayout();
  gl.numColumns=4;
  Label labelStyle=new Label(c,SWT.NONE);
  labelStyle.setText(Messages.getString(""String_Node_Str""));
  fComboStyle=new Combo(c,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  fComboStyle.setLayoutData(gd);
  Label label=new Label(c,SWT.NONE);
  fTable=new Table(c,SWT.SINGLE | SWT.BORDER | SWT.V_SCROLL);
  fTable.setLinesVisible(true);
  fTable.setHeaderVisible(true);
  gd=new GridData(GridData.FILL_BOTH);
  gd.horizontalSpan=3;
  gd.verticalSpan=16;
  fTable.setLayoutData(gd);
  fTableViewer=new TableViewer(fTable);
  fTableViewer.setUseHashlookup(true);
  fBtnAdd=new Button(c,SWT.NONE);
  fBtnAdd.setText(Messages.getString(""String_Node_Str""));
  fBtnRemove=new Button(c,SWT.NONE);
  fBtnRemove.setText(Messages.getString(""String_Node_Str""));
}","/** 
 * @param c
 */
private void placeComponents(Composite c){
  GridLayout gl=(GridLayout)c.getLayout();
  gl.numColumns=4;
  Label labelStyle=new Label(c,SWT.NONE);
  labelStyle.setText(Messages.getString(""String_Node_Str""));
  fComboStyle=new Combo(c,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  fComboStyle.setLayoutData(gd);
  Label label=new Label(c,SWT.NONE);
  fTable=new Table(c,SWT.BORDER | SWT.V_SCROLL | SWT.FULL_SELECTION);
  fTable.setLinesVisible(true);
  fTable.setHeaderVisible(true);
  gd=new GridData(GridData.FILL_BOTH);
  gd.horizontalSpan=3;
  gd.verticalSpan=16;
  fTable.setLayoutData(gd);
  fTableViewer=new TableViewer(fTable);
  fTableViewer.setUseHashlookup(true);
  fBtnAdd=new Button(c,SWT.NONE);
  fBtnAdd.setText(Messages.getString(""String_Node_Str""));
  fBtnRemove=new Button(c,SWT.NONE);
  fBtnRemove.setText(Messages.getString(""String_Node_Str""));
}",0.9816414686825052
70310,"private void initListeners(Composite c){
  c.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      updateProperties(MenuStylesKeyType.get(fComboStyle.getSelectionIndex()));
    }
  }
);
  fComboStyle.addListener(SWT.Selection,this);
  fBtnAdd.addListener(SWT.Selection,this);
  fBtnRemove.addListener(SWT.Selection,this);
  fTable.addListener(SWT.Resize,this);
  fTable.addListener(SWT.Selection,this);
}","private void initListeners(Composite c){
  c.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      updateProperties(MenuStylesKeyType.get(fComboStyle.getSelectionIndex()));
    }
  }
);
  fComboStyle.addListener(SWT.Selection,this);
  fBtnAdd.addListener(SWT.Selection,this);
  fBtnRemove.addListener(SWT.Selection,this);
  fTable.addListener(SWT.Resize,this);
  fTable.addListener(SWT.Selection,this);
  fTable.addListener(SWT.KeyDown,this);
}",0.9574468085106383
70311,"public void close() throws BirtException {
  if (hasStyle) {
    int height=currentBP + localProperties.getPaddingTop() + boxStyle.getTopBorderWidth()+ localProperties.getPaddingBottom()+ boxStyle.getBottomBorderWidth();
    if (specifiedHeight > height) {
      if (IStyle.BOTTOM_VALUE.equals(vAlign)) {
        int offset=specifiedHeight - height;
        Iterator<IArea> iter=getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setY(offset + child.getY());
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(vAlign)) {
        int offset=(specifiedHeight - height) / 2;
        Iterator iter=getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setY(child.getY() + offset);
        }
      }
      height=specifiedHeight;
    }
    this.height=height;
  }
 else {
    if (specifiedHeight > currentBP) {
      height=specifiedHeight;
    }
 else {
      height=currentBP;
    }
  }
  update();
  finished=true;
}","public void close() throws BirtException {
  if (hasStyle) {
    int height=currentBP + localProperties.getPaddingTop() + boxStyle.getTopBorderWidth()+ localProperties.getPaddingBottom()+ boxStyle.getBottomBorderWidth();
    if (specifiedHeight > height) {
      if (IStyle.BOTTOM_VALUE.equals(vAlign)) {
        int offset=specifiedHeight - height;
        Iterator<IArea> iter=getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setY(offset + child.getY());
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(vAlign)) {
        int offset=(specifiedHeight - height) / 2;
        Iterator iter=getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setY(child.getY() + offset);
        }
      }
      height=specifiedHeight;
    }
    this.height=height;
    updateBackgroundImage();
  }
 else {
    if (specifiedHeight > currentBP) {
      height=specifiedHeight;
    }
 else {
      height=currentBP;
    }
  }
  update();
  finished=true;
}",0.9864927806241268
70312,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),width));
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),100),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),100)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),width));
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
}",0.995850622406639
70313,"public void close() throws BirtException {
  height=currentBP + getOffsetY() + localProperties.getPaddingBottom();
  checkPageBreak();
  parent.update(this);
  finished=true;
}","public void close() throws BirtException {
  height=currentBP + getOffsetY() + localProperties.getPaddingBottom();
  updateBackgroundImage();
  checkPageBreak();
  parent.update(this);
  finished=true;
}",0.8707124010554089
70314,"public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
 else {
    buildProperties(content,context);
  }
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
  vAlign=style.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  parent.add(this);
}","public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
 else {
    buildProperties(content,context);
  }
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
  vAlign=style.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  currentIP=0;
  currentBP=0;
  parent.add(this);
}",0.9715370018975332
70315,"@Override public Dimension getFixPreferredSize(int w,int h){
  int width=0;
  int height=0;
  if (recommendSize.width > 0) {
    width=recommendSize.width;
  }
 else {
    width=getPreferredSize(w,h,true).width;
  }
  if (recommendSize.height > 0) {
    height=recommendSize.height;
  }
 else {
    height=getPreferredSize(w,h,true).height;
  }
  return new Dimension(width,height);
}","@Override public Dimension getFixPreferredSize(int w,int h){
  int width=0;
  int height=0;
  if (recommendSize.width > 0) {
    width=recommendSize.width;
  }
 else {
    if (recommendSize.height > 0) {
      width=getPreferredSize(w,recommendSize.height,true,false,true).width;
    }
 else {
      width=getPreferredSize(w,h,true,false,false).width;
    }
  }
  if (recommendSize.height > 0) {
    height=recommendSize.height;
  }
 else {
    if (recommendSize.width > 0) {
      height=getPreferredSize(width,h,true,true,false).height;
    }
 else {
      height=getPreferredSize(w,h,true,false,false).height;
    }
  }
  return new Dimension(width,height);
}",0.6768642447418738
70316,"private Dimension getMinimumSize(int wHint,int hHint,boolean isFix){
  if (DesignChoiceConstants.DISPLAY_NONE.equals(display)) {
    return ZERO_DIMENSION;
  }
  int rx=recommendSize != null ? recommendSize.width : 0;
  int ry=recommendSize != null ? recommendSize.height : 0;
  rx=getRealRecommendSizeX(rx,wHint);
  if (wHint == -1 && hHint == -1) {
    int maxWidth=calcMaxSegment();
    Dimension dim=super.getMinimumSize(rx == 0 ? maxWidth : rx,-1);
    dim.height=Math.max(dim.height,Math.max(getInsets().getHeight(),ry));
    return dim;
  }
  Dimension dim;
  if (isFix) {
    int tempHint=wHint;
    int maxWidth=calcMaxSegment();
    if (wHint < maxWidth) {
      tempHint=maxWidth;
    }
    dim=super.getMinimumSize(tempHint <= 0 ? -1 : tempHint,hHint);
    return new Dimension(Math.max(dim.width,rx),Math.max(dim.height,ry));
  }
 else {
    dim=super.getMinimumSize(rx == 0 ? -1 : rx,hHint);
  }
  if (dim.width < wHint) {
    return new Dimension(Math.max(dim.width,rx),Math.max(dim.height,ry));
  }
  dim=super.getMinimumSize(wHint,hHint);
  return new Dimension(Math.max(dim.width,rx),Math.max(dim.height,ry));
}","private Dimension getMinimumSize(int wHint,int hHint,boolean isFix,boolean forceWidth,boolean forceHeight){
  if (DesignChoiceConstants.DISPLAY_NONE.equals(display)) {
    return ZERO_DIMENSION;
  }
  int rx=recommendSize != null ? recommendSize.width : 0;
  int ry=recommendSize != null ? recommendSize.height : 0;
  rx=getRealRecommendSizeX(rx,wHint);
  if (wHint == -1 && hHint == -1) {
    int maxWidth=calcMaxSegment();
    Dimension dim=super.getMinimumSize(rx == 0 ? maxWidth : rx,-1);
    dim.height=Math.max(dim.height,Math.max(getInsets().getHeight(),ry));
    return dim;
  }
  Dimension dim;
  if (isFix) {
    int tempHint=wHint;
    int maxWidth=calcMaxSegment();
    if (wHint < maxWidth && !forceWidth) {
      tempHint=maxWidth;
    }
    dim=super.getMinimumSize(tempHint <= 0 ? -1 : tempHint,hHint);
    return new Dimension(Math.max(dim.width,rx),Math.max(dim.height,ry));
  }
 else {
    dim=super.getMinimumSize(rx == 0 ? -1 : rx,hHint);
  }
  if (dim.width < wHint) {
    return new Dimension(Math.max(dim.width,rx),Math.max(dim.height,ry));
  }
  dim=super.getMinimumSize(wHint,hHint);
  return new Dimension(Math.max(dim.width,rx),Math.max(dim.height,ry));
}",0.976643598615917
70317,"@Override public Dimension getFixMinimumSize(int w,int h){
  int width=0;
  int height=0;
  if (recommendSize.width > 0) {
    width=recommendSize.width;
  }
 else {
    if (recommendSize.height > 0) {
      width=getMinimumSize(w,recommendSize.height,true).width;
    }
 else {
      width=getMinimumSize(w,h,true).width;
    }
  }
  if (recommendSize.height > 0) {
    height=recommendSize.height;
  }
 else {
    if (recommendSize.width > 0) {
      height=getMinimumSize(width,h,true).height;
    }
 else {
      height=getMinimumSize(w,h,true).height;
    }
  }
  return new Dimension(width,height);
}","@Override public Dimension getFixMinimumSize(int w,int h){
  int width=0;
  int height=0;
  if (recommendSize.width > 0) {
    width=recommendSize.width;
  }
 else {
    if (recommendSize.height > 0) {
      width=getMinimumSize(w,recommendSize.height,true,false,true).width;
    }
 else {
      width=getMinimumSize(w,h,true,false,false).width;
    }
  }
  if (recommendSize.height > 0) {
    height=recommendSize.height;
  }
 else {
    if (recommendSize.width > 0) {
      height=getMinimumSize(width,h,true,true,false).height;
    }
 else {
      height=getMinimumSize(w,h,true,false,false).height;
    }
  }
  return new Dimension(width,height);
}",0.9634340222575516
70318,"public Dimension getPreferredSize(int wHint,int hHint){
  return getPreferredSize(wHint,hHint,false);
}","public Dimension getPreferredSize(int wHint,int hHint){
  return getPreferredSize(wHint,hHint,false,false,false);
}",0.944954128440367
70319,"/** 
 * Format base series data. Now it is only used to format datetime data, format date for different grouping unit.
 * @param cm
 * @param lhmLookup
 * @param rowSet
 */
public void formatBaseSeriesData(Chart cm,GroupingLookupHelper lhmLookup,List rowSet){
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    Axis[] axaBase=cwa.getBaseAxes();
    for (int j=0; j < axaBase.length; j++) {
      sdBase=axaBase[j].getSeriesDefinitions().get(0);
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    sdBase=cwoa.getSeriesDefinitions().get(0);
  }
  final SeriesGrouping sg=sdBase.getGrouping();
  if (sg == null || !sg.isEnabled()) {
    return;
  }
  final Series seBaseDesignTime=sdBase.getDesignTimeSeries();
  final Query q=seBaseDesignTime.getDataDefinition().get(0);
  final int iBaseColumnIndex=lhmLookup.findIndexOfBaseSeries(q.getDefinition());
  final DataType dtGrouping=sg.getGroupType();
  if (dtGrouping == DataType.DATE_TIME_LITERAL) {
    int cunit=GroupingUtil.groupingUnit2CDateUnit(sg.getGroupingUnit());
    CDateTime baseReference=null;
    for (Iterator iter=rowSet.iterator(); iter.hasNext(); ) {
      Object[] oaTuple=(Object[])iter.next();
      Object obj=oaTuple[iBaseColumnIndex];
      if (obj instanceof CDateTime) {
        baseReference=(CDateTime)obj;
      }
 else       if (obj instanceof Calendar) {
        baseReference=new CDateTime((Calendar)obj);
      }
 else       if (obj instanceof Date) {
        baseReference=new CDateTime((Date)obj);
      }
 else {
        baseReference=new CDateTime(0);
      }
      baseReference.clearBelow(cunit);
      oaTuple[iBaseColumnIndex]=baseReference;
    }
  }
}","/** 
 * Format base series data. Now it is only used to format datetime data, format date for different grouping unit.
 * @param cm
 * @param lhmLookup
 * @param rowSet
 */
public void formatBaseSeriesData(Chart cm,GroupingLookupHelper lhmLookup,List rowSet) throws ChartException {
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    Axis[] axaBase=cwa.getBaseAxes();
    for (int j=0; j < axaBase.length; j++) {
      sdBase=axaBase[j].getSeriesDefinitions().get(0);
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    sdBase=cwoa.getSeriesDefinitions().get(0);
  }
  final SeriesGrouping sg=sdBase.getGrouping();
  if (sg == null || !sg.isEnabled()) {
    return;
  }
  final Series seBaseDesignTime=sdBase.getDesignTimeSeries();
  final Query q=seBaseDesignTime.getDataDefinition().get(0);
  final int iBaseColumnIndex=lhmLookup.findIndexOfBaseSeries(q.getDefinition());
  final DataType dtGrouping=sg.getGroupType();
  String aggr=sdBase.getGrouping().getAggregateExpression();
  IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(aggr);
  boolean bIsSumAggr=aFunc != null && aFunc.getType() == IAggregateFunction.SUMMARY_AGGR;
  if (dtGrouping == DataType.DATE_TIME_LITERAL && bIsSumAggr) {
    int cunit=GroupingUtil.groupingUnit2CDateUnit(sg.getGroupingUnit());
    CDateTime baseReference=null;
    for (Iterator iter=rowSet.iterator(); iter.hasNext(); ) {
      Object[] oaTuple=(Object[])iter.next();
      Object obj=oaTuple[iBaseColumnIndex];
      if (obj instanceof CDateTime) {
        baseReference=(CDateTime)obj;
      }
 else       if (obj instanceof Calendar) {
        baseReference=new CDateTime((Calendar)obj);
      }
 else       if (obj instanceof Date) {
        baseReference=new CDateTime((Date)obj);
      }
 else {
        baseReference=new CDateTime(0);
      }
      baseReference.clearBelow(cunit);
      oaTuple[iBaseColumnIndex]=baseReference;
    }
  }
}",0.9290424690055394
70320,"public static String formatDateTime(String format,ULocale locale){
  String language=locale.getLanguage();
  String code=locale2Code.get(locale);
  if (code == null) {
    code=locale2Code.get(new Locale(language));
  }
  return code + format;
}","public static String formatDateTime(String format,ULocale locale){
  String language=locale.getLanguage();
  String code=locale2Code.get(locale);
  if (code == null) {
    code=locale2Code.get(new Locale(language));
  }
  if (code == null) {
    return format;
  }
  return code + format;
}",0.9158878504672896
70321,"public boolean isHeaderRepeat(){
  if (headerRepeat != null) {
    return headerRepeat.booleanValue();
  }
  if (generateBy instanceof ListItemDesign) {
    return getConstantValue(((ListItemDesign)generateBy).isRepeatHeader());
  }
  return false;
}","public boolean isHeaderRepeat(){
  if (headerRepeat != null) {
    return headerRepeat.booleanValue();
  }
  if (generateBy instanceof ListItemDesign) {
    return getBooleanValue(((ListItemDesign)generateBy).isRepeatHeader(),false);
  }
  return false;
}",0.9584158415841584
70322,"public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
 else {
    buildProperties(content,context);
  }
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  currentBP=getContentY();
  currentIP=getContentX();
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
  parent.add(this);
}","public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
 else {
    buildProperties(content,context);
  }
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  currentBP=getContentY();
  currentIP=getContentX();
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
  vAlign=style.getProperty(IStyle.STYLE_VERTICAL_ALIGN);
  parent.add(this);
}",0.9469767441860464
70323,"public void close() throws BirtException {
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.FIT_TO_PAGE_SIZE) {
    float scale=calculatePageScale(this);
    if (1f == scale) {
      pageContent.setExtension(IContent.LAYOUT_EXTENSION,this);
      outputPage(pageContent);
      return;
    }
    this.setScale(scale);
    updatePageDimension(scale,this);
  }
 else   if (overFlowType == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
    updatePageDimension(this);
  }
  pageContent.setExtension(IContent.LAYOUT_EXTENSION,this);
  outputPage(pageContent);
  finished=true;
}","public void close() throws BirtException {
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.FIT_TO_PAGE_SIZE) {
    float scale=calculatePageScale(this);
    if (1f == scale) {
      pageContent.setExtension(IContent.LAYOUT_EXTENSION,this);
      outputPage(pageContent);
      return;
    }
    this.setScale(scale);
    getBody().setNeedClip(false);
    updatePageDimension(scale,this);
  }
 else   if (overFlowType == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
    getBody().setNeedClip(false);
    updatePageDimension(this);
  }
  pageContent.setExtension(IContent.LAYOUT_EXTENSION,this);
  outputPage(pageContent);
  finished=true;
}",0.946456692913386
70324,"protected boolean needRepeat(){
  ITableContent table=(ITableContent)content;
  if (table != null && table.isHeaderRepeat()) {
    IContent header=(IContent)table.getHeader();
    if (header != null && header.getChildren().size() > 0) {
      return true;
    }
  }
  return false;
}","protected boolean needRepeat(){
  ITableContent table=(ITableContent)content;
  if (table != null && table.isHeaderRepeat()) {
    IContent header=(IContent)table.getHeader();
    if (header != null) {
      return true;
    }
  }
  return false;
}",0.7532956685499058
70325,"protected void addCaption(String caption) throws BirtException {
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  ReportContent report=(ReportContent)content.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  StyleDeclaration style=new StyleDeclaration(report.getCSSEngine());
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  captionLabel.setInlineStyle(style);
  RowArea captionRow=new RowArea(getColumnCount());
  captionRow.setParent(this);
  captionRow.setWidth(width);
  CellArea captionCell=new CellArea();
  captionCell.setColSpan(getColumnCount());
  captionCell.setWidth(width);
  captionCell.setMaxAvaWidth(width);
  captionRow.children.add(captionCell);
  ILayout layout=new BlockTextArea(captionCell,context,captionLabel);
  layout.layout();
  int h=((BlockContainerArea)layout).getAllocatedHeight();
  captionCell.setContentHeight(h);
  captionRow.setHeight(captionCell.getAllocatedHeight());
  add(captionRow);
  repeatList.add(captionRow);
  update(captionRow);
}","protected void addCaption(String caption) throws BirtException {
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  ReportContent report=(ReportContent)content.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  StyleDeclaration style=new StyleDeclaration(report.getCSSEngine());
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  captionLabel.setInlineStyle(style);
  RowArea captionRow=new RowArea(getColumnCount());
  captionRow.setParent(this);
  captionRow.setWidth(width);
  CellArea captionCell=new CellArea();
  captionCell.setColSpan(getColumnCount());
  captionCell.setWidth(width);
  captionCell.setMaxAvaWidth(width);
  captionRow.children.add(captionCell);
  ILayout layout=new BlockTextArea(captionCell,context,captionLabel);
  layout.layout();
  int h=((BlockContainerArea)layout).getAllocatedHeight();
  captionCell.setContentHeight(h);
  captionRow.setHeight(captionCell.getAllocatedHeight());
  add(captionRow);
  if (repeatList == null) {
    repeatList=new ArrayList();
  }
  repeatList.add(captionRow);
  update(captionRow);
}",0.926916221033868
70326,"/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(TRANS_LABEL_SET_CONSTRAINT);
  try {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(model) + ""String_Node_Str""+ newSize.width+ ""String_Node_Str""+ newSize.height);
    }
    if (model instanceof TableHandle || model instanceof GridHandle) {
      HandleAdapterFactory.getInstance().getTableHandleAdapter(model).ajustSize(newSize);
    }
 else     if (model instanceof ImageHandle) {
      int width=newSize.width;
      int height=newSize.height;
      DimensionValue dimensionValue;
      if (width >= 0) {
        dimensionValue=new DimensionValue(width <= 0 ? 1 : width,DesignChoiceConstants.UNITS_PX);
        model.getWidth().setValue(dimensionValue);
      }
      if (height >= 0) {
        dimensionValue=new DimensionValue(height <= 0 ? 1 : height,DesignChoiceConstants.UNITS_PX);
        model.getHeight().setValue(dimensionValue);
      }
    }
 else {
      double width=MetricUtility.pixelToPixelInch(newSize.width);
      double height=MetricUtility.pixelToPixelInch(newSize.height);
      DimensionValue dimensionValue;
      if (width >= 0) {
        dimensionValue=new DimensionValue(width <= 0 ? 0.1 : width,DesignChoiceConstants.UNITS_IN);
        model.getWidth().setValue(dimensionValue);
      }
      if (height >= 0) {
        dimensionValue=new DimensionValue(height <= 0 ? 0.1 : height,DesignChoiceConstants.UNITS_IN);
        model.getHeight().setValue(dimensionValue);
      }
    }
    stack.commit();
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
    stack.rollback();
  }
}","/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(TRANS_LABEL_SET_CONSTRAINT);
  try {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(model) + ""String_Node_Str""+ newSize.width+ ""String_Node_Str""+ newSize.height);
    }
    if (model instanceof TableHandle || model instanceof GridHandle) {
      HandleAdapterFactory.getInstance().getTableHandleAdapter(model).ajustSize(newSize);
    }
 else     if (isFixLayout()) {
      double width=MetricUtility.pixelToPixelInch(newSize.width);
      double height=MetricUtility.pixelToPixelInch(newSize.height);
      if (width >= 0) {
        DimensionValue value=DimensionUtil.convertTo(width,DesignChoiceConstants.UNITS_IN,getDefaultUnits());
        model.getWidth().setValue(value);
      }
      if (height >= 0) {
        DimensionValue value=DimensionUtil.convertTo(height,DesignChoiceConstants.UNITS_IN,getDefaultUnits());
        model.getHeight().setValue(value);
      }
    }
 else     if (model instanceof ImageHandle) {
      int width=newSize.width;
      int height=newSize.height;
      DimensionValue dimensionValue;
      if (width >= 0) {
        dimensionValue=new DimensionValue(width,DesignChoiceConstants.UNITS_PX);
        model.getWidth().setValue(dimensionValue);
      }
      if (height >= 0) {
        dimensionValue=new DimensionValue(height,DesignChoiceConstants.UNITS_PX);
        model.getHeight().setValue(dimensionValue);
      }
    }
 else {
      double width=MetricUtility.pixelToPixelInch(newSize.width);
      double height=MetricUtility.pixelToPixelInch(newSize.height);
      DimensionValue dimensionValue;
      if (width >= 0) {
        dimensionValue=new DimensionValue(width,DesignChoiceConstants.UNITS_IN);
        model.getWidth().setValue(dimensionValue);
      }
      if (height >= 0) {
        dimensionValue=new DimensionValue(height,DesignChoiceConstants.UNITS_IN);
        model.getHeight().setValue(dimensionValue);
      }
    }
    stack.commit();
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
    stack.rollback();
  }
}",0.7440106477373558
70327,"/** 
 * Set width
 * @param columnWidth Column width
 * @throws SemanticException
 */
public void setWidth(int columnWidth) throws SemanticException {
  double value=MetricUtility.pixelToPixelInch(columnWidth);
  DimensionValue dimensionValue=new DimensionValue(value,DesignChoiceConstants.UNITS_IN);
  getColumnHandle().getWidth().setValue(dimensionValue);
}","public void setWidth(int columnWidth) throws SemanticException {
  setWidth(columnWidth,DesignChoiceConstants.UNITS_IN);
}",0.4948024948024948
70328,"/** 
 * Gets size of image item. If the image size is 0, return null.
 * @return the size of image item.
 */
public Dimension getSize(){
  DimensionHandle handle=getImageHandle().getWidth();
  int px=(int)DEUtil.convertoToPixel(handle);
  handle=getImageHandle().getHeight();
  int py=(int)DEUtil.convertoToPixel(handle);
  if (px != 0 && py != 0) {
    return new Dimension(px,py);
  }
  return null;
}","/** 
 * Gets size of image item. If the image size is 0, return null.
 * @return the size of image item.
 */
public Dimension getSize(){
  DimensionHandle widthHandle=getImageHandle().getWidth();
  int px=(int)DEUtil.convertoToPixel(widthHandle);
  DimensionHandle heightHandle=getImageHandle().getHeight();
  int py=(int)DEUtil.convertoToPixel(heightHandle);
  if (DEUtil.isFixLayout(getHandle())) {
    if (px == 0 && widthHandle.isSet()) {
      px=1;
    }
    if (py == 0 && heightHandle.isSet()) {
      py=1;
    }
  }
  if (px != 0 && py != 0) {
    return new Dimension(px,py);
  }
  return null;
}",0.7643564356435644
70329,"/** 
 * Gets size of image item. Always returns a non-null value.
 * @return
 */
public Dimension getRawSize(){
  DimensionHandle handle=getImageHandle().getWidth();
  int px=(int)DEUtil.convertoToPixel(handle);
  handle=getImageHandle().getHeight();
  int py=(int)DEUtil.convertoToPixel(handle);
  return new Dimension(Math.max(px,0),Math.max(py,0));
}","/** 
 * Gets size of image item. Always returns a non-null value.
 * @return
 */
public Dimension getRawSize(){
  DimensionHandle widthHandle=getImageHandle().getWidth();
  int px=(int)DEUtil.convertoToPixel(widthHandle);
  DimensionHandle heightHandle=getImageHandle().getHeight();
  int py=(int)DEUtil.convertoToPixel(heightHandle);
  if (DEUtil.isFixLayout(getHandle())) {
    if (px == 0 && widthHandle.isSet()) {
      px=1;
    }
    if (py == 0 && heightHandle.isSet()) {
      py=1;
    }
  }
  return new Dimension(Math.max(px,0),Math.max(py,0));
}",0.7318681318681318
70330,"/** 
 * Gets size of label item.
 * @return the size of label item.
 */
public Dimension getSize(){
  DimensionHandle handle=((ReportItemHandle)getHandle()).getWidth();
  int px=0;
  int py=0;
  if (!DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    px=(int)DEUtil.convertoToPixel(handle);
  }
  handle=((ReportItemHandle)getHandle()).getHeight();
  if (!DesignChoiceConstants.UNITS_PERCENTAGE.equals(handle.getUnits())) {
    py=(int)DEUtil.convertoToPixel(handle);
  }
  px=Math.max(0,px);
  py=Math.max(0,py);
  return new Dimension(px,py);
}","/** 
 * Gets size of label item.
 * @return the size of label item.
 */
public Dimension getSize(){
  DimensionHandle widthHandle=((ReportItemHandle)getHandle()).getWidth();
  int px=0;
  int py=0;
  if (!DesignChoiceConstants.UNITS_PERCENTAGE.equals(widthHandle.getUnits())) {
    px=(int)DEUtil.convertoToPixel(widthHandle);
  }
  DimensionHandle heightHandle=((ReportItemHandle)getHandle()).getHeight();
  if (!DesignChoiceConstants.UNITS_PERCENTAGE.equals(heightHandle.getUnits())) {
    py=(int)DEUtil.convertoToPixel(heightHandle);
  }
  px=Math.max(0,px);
  py=Math.max(0,py);
  if (DEUtil.isFixLayout(getHandle())) {
    if (px == 0 && widthHandle.isSet()) {
      px=1;
    }
    if (py == 0 && heightHandle.isSet()) {
      py=1;
    }
  }
  return new Dimension(px,py);
}",0.8346923647146034
70331,"/** 
 * Set row height
 * @param rowHeight
 * @throws SemanticException
 */
public void setHeight(int rowHeight) throws SemanticException {
  double value=MetricUtility.pixelToPixelInch(rowHeight);
  DimensionValue dimensionValue=new DimensionValue(value,DesignChoiceConstants.UNITS_IN);
  getRowHandle().getHeight().setValue(dimensionValue);
}","public void setHeight(int rowHeight) throws SemanticException {
  setHeight(rowHeight,DesignChoiceConstants.UNITS_IN);
}",0.4956896551724138
70332,"public DummyEngineTask(ReportEngine engine,IReportRunnable runnable,ModuleHandle moduleHandle){
  super(engine,runnable);
  setEngineTaskParameters(this,moduleHandle);
}","public DummyEngineTask(ReportEngine engine,IReportRunnable runnable,ModuleHandle moduleHandle){
  super(engine,runnable);
  setEngineTaskParameters(this,moduleHandle);
  this.taskType=IEngineTask.TASK_UNKNOWN;
}",0.8894736842105263
70333,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(padding,width));
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),width));
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
}",0.9444743935309972
70334,"/** 
 * Test get/setExpression methods set an expression then get the expression and check the text type to test if they work correctly
 */
public void testExpression(){
  DynamicTextItemDesign multi=new DynamicTextItemDesign();
  Expression<String> exp=Expression.newConstant(""String_Node_Str"");
  Expression<String> type=Expression.newConstant(""String_Node_Str"");
  multi.setContent(exp);
  multi.setContentType(type);
  assertEquals(multi.getContent(),exp);
  assertEquals(multi.getContentType(),type);
}","/** 
 * Test get/setExpression methods set an expression then get the expression and check the text type to test if they work correctly
 */
public void testExpression(){
  DynamicTextItemDesign multi=new DynamicTextItemDesign();
  Expression<Object> exp=new Expression<Object>(""String_Node_Str"",Object.class);
  Expression<String> type=Expression.newConstant(""String_Node_Str"");
  multi.setContent(exp);
  multi.setContentType(type);
  assertEquals(multi.getContent(),exp);
  assertEquals(multi.getContentType(),type);
}",0.6835443037974683
70335,"public Object visitDynamicTextItem(DynamicTextItemDesign dynamicText,Object value){
  IDataQueryDefinition query;
  if (dynamicText.useCachedResult()) {
    query=getRefenceQuery(dynamicText);
    if (query == null) {
      registerUnresolvedQueryReference(dynamicText);
      return null;
    }
  }
 else {
    query=createQuery(dynamicText,(IDataQueryDefinition)value);
  }
  if (query != value && query instanceof BaseQueryDefinition) {
    setUsesDetails((BaseQueryDefinition)query);
  }
  try {
    Expression<String> newContent=transformExpression(dynamicText.getContent(),query);
    dynamicText.setContent(newContent);
    transformExpressions(dynamicText,query);
    return getResultQuery(query,value);
  }
 catch (  BirtException ex) {
    context.addException(dynamicText.getHandle(),ex);
    return null;
  }
}","public Object visitDynamicTextItem(DynamicTextItemDesign dynamicText,Object value){
  IDataQueryDefinition query;
  if (dynamicText.useCachedResult()) {
    query=getRefenceQuery(dynamicText);
    if (query == null) {
      registerUnresolvedQueryReference(dynamicText);
      return null;
    }
  }
 else {
    query=createQuery(dynamicText,(IDataQueryDefinition)value);
  }
  if (query != value && query instanceof BaseQueryDefinition) {
    setUsesDetails((BaseQueryDefinition)query);
  }
  try {
    Expression<Object> newContent=transformExpression(dynamicText.getContent(),query);
    dynamicText.setContent(newContent);
    transformExpressions(dynamicText,query);
    return getResultQuery(query,value);
  }
 catch (  BirtException ex) {
    context.addException(dynamicText.getHandle(),ex);
    return null;
  }
}",0.9927007299270072
70336,"/** 
 * @param content The content to set.
 */
public void setContent(Expression<String> content){
  this.content=content;
}","/** 
 * @param content The content to set.
 */
public void setContent(Expression<Object> content){
  this.content=content;
}",0.9596774193548387
70337,"/** 
 * @return Returns the content.
 */
public Expression<String> getContent(){
  return content;
}","/** 
 * @return Returns the content.
 */
public Expression<Object> getContent(){
  return content;
}",0.95
70338,"protected void readDynamicTextField(DataInputStream in,DynamicTextItemDesign design,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_CONTENT_TYPE:
    Expression<String> contentType=readStringExpression(in);
  design.setContentType(contentType);
break;
case FIELD_CONTENT:
Expression<String> content=readStringExpression(in);
design.setContent(content);
break;
default :
readReportItemField(in,design,fieldType);
}
}","protected void readDynamicTextField(DataInputStream in,DynamicTextItemDesign design,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_CONTENT_TYPE:
    Expression<String> contentType=readStringExpression(in);
  design.setContentType(contentType);
break;
case FIELD_CONTENT:
Expression<Object> content=readObjectExpression(in);
design.setContent(content);
break;
default :
readReportItemField(in,design,fieldType);
}
}",0.9725400457665904
70339,"protected void writeDynamicText(DataOutputStream out,DynamicTextItemDesign design) throws IOException {
  writeReportItem(out,design);
  Expression<String> contentType=design.getContentType();
  Expression<String> content=design.getContent();
  if (contentType != null) {
    IOUtil.writeShort(out,FIELD_CONTENT_TYPE);
    write(out,contentType);
  }
  if (content != null) {
    IOUtil.writeShort(out,FIELD_CONTENT);
    write(out,content);
  }
}","protected void writeDynamicText(DataOutputStream out,DynamicTextItemDesign design) throws IOException {
  writeReportItem(out,design);
  Expression<String> contentType=design.getContentType();
  Expression<Object> content=design.getContent();
  if (contentType != null) {
    IOUtil.writeShort(out,FIELD_CONTENT_TYPE);
    write(out,contentType);
  }
  if (content != null) {
    IOUtil.writeShort(out,FIELD_CONTENT);
    write(out,content);
  }
}",0.9865771812080536
70340,"public void visitTextDataItem(TextDataHandle handle){
  DynamicTextItemDesign dynamicTextItem=new DynamicTextItemDesign();
  setupReportItem(dynamicTextItem,handle);
  String valueExpr=handle.getValueExpr();
  String contentType=handle.getContentType();
  dynamicTextItem.setContent(createExpression(validateExpression(valueExpr)));
  dynamicTextItem.setContentType(createConstant(contentType));
  setupHighlight(dynamicTextItem,valueExpr);
  setMap(dynamicTextItem,valueExpr);
  setCurrentElement(dynamicTextItem);
}","public void visitTextDataItem(TextDataHandle handle){
  DynamicTextItemDesign dynamicTextItem=new DynamicTextItemDesign();
  setupReportItem(dynamicTextItem,handle);
  String valueExpr=handle.getValueExpr();
  String contentType=handle.getContentType();
  dynamicTextItem.setContent(createObjectExpression(validateExpression(valueExpr)));
  dynamicTextItem.setContentType(createConstant(contentType));
  setupHighlight(dynamicTextItem,valueExpr);
  setMap(dynamicTextItem,valueExpr);
  setCurrentElement(dynamicTextItem);
}",0.9942307692307693
70341,"public SplitResult splitLines(int lineCount) throws BirtException {
  if (isPageBreakInsideAvoid()) {
    if (isPageBreakBeforeAvoid()) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  int contentHeight=getContentHeight();
  LinkedList result=new LinkedList();
  int size=children.size();
  SplitResult childSplit=null;
  int status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
  for (int i=size - 1; i >= 0; i--) {
    ContainerArea child=(ContainerArea)children.get(i);
    int ah=child.getAllocatedHeight();
    childSplit=child.splitLines(lineCount);
    if (childSplit.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
      result.addFirst(child);
      contentHeight-=ah;
    }
 else     if (childSplit.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
      result.addFirst(child);
      contentHeight-=ah;
      if (i > 0) {
        ContainerArea preChild=(ContainerArea)children.get(i - 1);
        if (preChild.isPageBreakAfterAvoid()) {
          continue;
        }
 else {
          status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          contentHeight=contentHeight - ah + child.getAllocatedHeight();
          BlockContainerArea newContainer=cloneArea();
          newContainer.setContentHeight(contentHeight);
          Iterator iter=children.iterator();
          while (iter.hasNext()) {
            ContainerArea childArea=(ContainerArea)iter.next();
            if (!result.contains(childArea)) {
              iter.remove();
              newContainer.addChild(childArea);
              newContainer.setParent(newContainer);
            }
          }
          addRepeatedItem();
          updateChildrenPosition();
          return new SplitResult(newContainer,SplitResult.SPLIT_SUCCEED_WITH_PART);
        }
      }
 else {
        if (isPageBreakBeforeAvoid()) {
          return SplitResult.BEFORE_AVOID_WITH_NULL;
        }
 else {
          return SplitResult.SUCCEED_WITH_NULL;
        }
      }
    }
 else     if (childSplit.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
      result.addFirst(child);
      ContainerArea splitChildArea=childSplit.getResult();
      contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
      BlockContainerArea newContainer=cloneArea();
      newContainer.setContentHeight(contentHeight);
      Iterator iter=children.iterator();
      while (iter.hasNext()) {
        ContainerArea childArea=(ContainerArea)iter.next();
        if (!result.contains(childArea)) {
          iter.remove();
          newContainer.addChild(childArea);
          newContainer.setParent(newContainer);
        }
      }
      newContainer.addChild(splitChildArea);
      addRepeatedItem();
      updateChildrenPosition();
      return new SplitResult(newContainer,SplitResult.SPLIT_SUCCEED_WITH_PART);
    }
  }
  return SplitResult.BEFORE_AVOID_WITH_NULL;
}","public SplitResult splitLines(int lineCount) throws BirtException {
  if (isPageBreakInsideAvoid()) {
    if (isPageBreakBeforeAvoid()) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  int contentHeight=getContentHeight();
  LinkedList result=new LinkedList();
  int size=children.size();
  SplitResult childSplit=null;
  int status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
  for (int i=size - 1; i >= 0; i--) {
    ContainerArea child=(ContainerArea)children.get(i);
    int ah=child.getAllocatedHeight();
    childSplit=child.splitLines(lineCount);
    if (childSplit.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
      result.addFirst(child);
      contentHeight-=ah;
    }
 else     if (childSplit.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
      result.addFirst(child);
      contentHeight-=ah;
      if (i > 0) {
        ContainerArea preChild=(ContainerArea)children.get(i - 1);
        if (preChild.isPageBreakAfterAvoid()) {
          continue;
        }
 else {
          status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          contentHeight=contentHeight - ah + child.getAllocatedHeight();
          BlockContainerArea newContainer=cloneArea();
          newContainer.setContentHeight(contentHeight);
          Iterator iter=children.iterator();
          while (iter.hasNext()) {
            ContainerArea childArea=(ContainerArea)iter.next();
            if (!result.contains(childArea)) {
              iter.remove();
              newContainer.addChild(childArea);
              newContainer.setParent(newContainer);
            }
          }
          updateChildrenPosition();
          return new SplitResult(newContainer,SplitResult.SPLIT_SUCCEED_WITH_PART);
        }
      }
 else {
        if (isPageBreakBeforeAvoid()) {
          return SplitResult.BEFORE_AVOID_WITH_NULL;
        }
 else {
          return SplitResult.SUCCEED_WITH_NULL;
        }
      }
    }
 else     if (childSplit.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
      result.addFirst(child);
      ContainerArea splitChildArea=childSplit.getResult();
      contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
      BlockContainerArea newContainer=cloneArea();
      newContainer.setContentHeight(contentHeight);
      Iterator iter=children.iterator();
      while (iter.hasNext()) {
        ContainerArea childArea=(ContainerArea)iter.next();
        if (!result.contains(childArea)) {
          iter.remove();
          newContainer.addChild(childArea);
          newContainer.setParent(newContainer);
        }
      }
      newContainer.addChild(splitChildArea);
      addRepeatedItem();
      updateChildrenPosition();
      return new SplitResult(newContainer,SplitResult.SPLIT_SUCCEED_WITH_PART);
    }
  }
  return SplitResult.BEFORE_AVOID_WITH_NULL;
}",0.9949661517097728
70342,"private void createDropDownComponent(){
  Point pLoc=UIHelper.getScreenLocation(btnDropDown.getParent());
  int iXLoc=pLoc.x;
  int iYLoc=pLoc.y + btnDropDown.getParent().getSize().y;
  int iShellWidth=MARKER_BLOCK_HEIGHT * MARKER_ROW_MAX_NUMBER + 15;
  int iShellHeight=175;
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  if (iXLoc + iShellWidth > this.getDisplay().getClientArea().width) {
    iXLoc=this.getDisplay().getClientArea().width - iShellWidth;
  }
  Shell shell=new Shell(this.getShell(),SWT.NONE);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  shell.setLocation(iXLoc,iYLoc);
  cmpDropDown=new MarkerDropDownEditorComposite(shell,SWT.NONE);
  shell.layout();
  shell.open();
}","private void createDropDownComponent(){
  Point pLoc=UIHelper.getScreenLocation(btnDropDown.getParent());
  int iXLoc=pLoc.x;
  int iYLoc=pLoc.y + btnDropDown.getParent().getSize().y;
  int iShellWidth=MARKER_BLOCK_HEIGHT * MARKER_ROW_MAX_NUMBER + 15;
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  if (iXLoc + iShellWidth > this.getDisplay().getClientArea().width) {
    iXLoc=this.getDisplay().getClientArea().width - iShellWidth;
  }
  Shell shell=new Shell(this.getShell(),SWT.NONE);
  shell.setLayout(new FillLayout());
  shell.setLocation(iXLoc,iYLoc);
  cmpDropDown=new MarkerDropDownEditorComposite(shell,SWT.NONE);
  shell.layout();
  shell.pack();
  shell.open();
}",0.9431895961670088
70343,"private boolean isOwnColumnBinding(int pos){
  List<ComputedColumnHandle> bindings=getBindingList(inputElement);
  return bindings.get(pos).getElementHandle() == inputElement;
}","private boolean isOwnColumnBinding(int pos){
  List<ComputedColumnHandle> bindings=getBindingList(inputElement);
  return pos < 0 ? false : bindings.get(pos).getElementHandle() == inputElement;
}",0.9516129032258064
70344,"public ScriptException(String message){
  super(message);
}","public ScriptException(String message){
  super(message);
  this.message=message;
}",0.8309859154929577
70345,"public void onCreate(IAutoTextInstance autoTextInstance,IReportContext reportContext){
}","public void onCreate(IAutoTextInstance autoTextInstance,IReportContext reportContext) throws ScriptException {
}",0.88
70346,"public void onPrepare(IAutoText autoText,IReportContext reportContext){
}","public void onPrepare(IAutoText autoText,IReportContext reportContext) throws ScriptException {
}",0.8588235294117647
70347,"public void onRender(IAutoTextInstance autoTextInstance,IReportContext reportContext){
}","public void onRender(IAutoTextInstance autoTextInstance,IReportContext reportContext) throws ScriptException {
}",0.88
70348,"public void onPageBreak(IAutoTextInstance autoTextInstance,IReportContext reportContext){
}","public void onPageBreak(IAutoTextInstance autoTextInstance,IReportContext reportContext) throws ScriptException {
}",0.883495145631068
70349,"public void onCreate(ICellInstance cellInstance,IReportContext reportContext){
}","public void onCreate(ICellInstance cellInstance,IReportContext reportContext) throws ScriptException {
}",0.8695652173913043
70350,"public void onPrepare(ICell cell,IReportContext reportContext){
}","public void onPrepare(ICell cell,IReportContext reportContext) throws ScriptException {
}",0.8441558441558441
70351,"public void onRender(ICellInstance cellInstance,IReportContext reportContext){
}","public void onRender(ICellInstance cellInstance,IReportContext reportContext) throws ScriptException {
}",0.8695652173913043
70352,"public void onPageBreak(ICellInstance cellInstance,IReportContext reportContext){
}","public void onPageBreak(ICellInstance cellInstance,IReportContext reportContext) throws ScriptException {
}",0.8736842105263158
70353,"public void onCreate(IDataItemInstance data,IReportContext reportContext){
}","public void onCreate(IDataItemInstance data,IReportContext reportContext) throws ScriptException {
}",0.8636363636363636
70354,"public void onPrepare(IDataItem dataItemHandle,IReportContext reportContext){
}","public void onPrepare(IDataItem dataItemHandle,IReportContext reportContext) throws ScriptException {
}",0.8681318681318682
70355,"public void onRender(IDataItemInstance data,IReportContext reportContext){
}","public void onRender(IDataItemInstance data,IReportContext reportContext) throws ScriptException {
}",0.8636363636363636
70356,"public void onPageBreak(IDataItemInstance data,IReportContext reportContext){
}","public void onPageBreak(IDataItemInstance data,IReportContext reportContext) throws ScriptException {
}",0.8681318681318682
70357,"public void beforeClose(IDataSetInstance dataSet,IReportContext reportContext){
}","public void beforeClose(IDataSetInstance dataSet,IReportContext reportContext) throws ScriptException {
}",0.8709677419354839
70358,"public void afterOpen(IDataSetInstance dataSet,IReportContext reportContext){
}","public void afterOpen(IDataSetInstance dataSet,IReportContext reportContext) throws ScriptException {
}",0.8681318681318682
70359,"public void onFetch(IDataSetInstance dataSet,IDataSetRow row,IReportContext reportContext){
}","public void onFetch(IDataSetInstance dataSet,IDataSetRow row,IReportContext reportContext) throws ScriptException {
}",0.8857142857142857
70360,"public void afterClose(IReportContext reportContext){
}","public void afterClose(IReportContext reportContext) throws ScriptException {
}",0.8208955223880597
70361,"public void beforeOpen(IDataSetInstance dataSet,IReportContext reportContext){
}","public void beforeOpen(IDataSetInstance dataSet,IReportContext reportContext) throws ScriptException {
}",0.8695652173913043
70362,"public void beforeClose(IDataSourceInstance dataSource,IReportContext reportContext){
}","public void beforeClose(IDataSourceInstance dataSource,IReportContext reportContext) throws ScriptException {
}",0.8787878787878788
70363,"public void afterOpen(IDataSourceInstance dataSource,IReportContext reportContext){
}","public void afterOpen(IDataSourceInstance dataSource,IReportContext reportContext) throws ScriptException {
}",0.8762886597938144
70364,"public void afterClose(IReportContext reportContext){
}","public void afterClose(IReportContext reportContext) throws ScriptException {
}",0.8208955223880597
70365,"public void beforeOpen(IDataSourceInstance dataSource,IReportContext reportContext){
}","public void beforeOpen(IDataSourceInstance dataSource,IReportContext reportContext) throws ScriptException {
}",0.8775510204081632
70366,"public void onCreate(IDynamicTextInstance text,IReportContext reportContext){
}","public void onCreate(IDynamicTextInstance text,IReportContext reportContext) throws ScriptException {
}",0.8681318681318682
70367,"public void onPrepare(IDynamicText textData,IReportContext reportContext){
}","public void onPrepare(IDynamicText textData,IReportContext reportContext) throws ScriptException {
}",0.8636363636363636
70368,"public void onRender(IDynamicTextInstance text,IReportContext reportContext){
}","public void onRender(IDynamicTextInstance text,IReportContext reportContext) throws ScriptException {
}",0.8681318681318682
70369,"public void onPageBreak(IDynamicTextInstance text,IReportContext reportContext){
}","public void onPageBreak(IDynamicTextInstance text,IReportContext reportContext) throws ScriptException {
}",0.8723404255319149
70370,"public void onCreate(IGridInstance grid,IReportContext reportContext){
}","public void onCreate(IGridInstance grid,IReportContext reportContext) throws ScriptException {
}",0.8571428571428571
70371,"public void onPrepare(IGrid grid,IReportContext reportContext){
}","public void onPrepare(IGrid grid,IReportContext reportContext) throws ScriptException {
}",0.8441558441558441
70372,"public void onRender(IGridInstance grid,IReportContext reportContext){
}","public void onRender(IGridInstance grid,IReportContext reportContext) throws ScriptException {
}",0.8571428571428571
70373,"public void onPageBreak(IGridInstance grid,IReportContext reportContext){
}","public void onPageBreak(IGridInstance grid,IReportContext reportContext) throws ScriptException {
}",0.8620689655172413
70374,"public void onCreate(IImageInstance image,IReportContext reportContext){
}","public void onCreate(IImageInstance image,IReportContext reportContext) throws ScriptException {
}",0.8604651162790697
70375,"public void onPrepare(IImage imageHandle,IReportContext reportContext){
}","public void onPrepare(IImage imageHandle,IReportContext reportContext) throws ScriptException {
}",0.8588235294117647
70376,"public void onRender(IImageInstance image,IReportContext reportContext){
}","public void onRender(IImageInstance image,IReportContext reportContext) throws ScriptException {
}",0.8604651162790697
70377,"public void onPageBreak(IImageInstance image,IReportContext reportContext){
}","public void onPageBreak(IImageInstance image,IReportContext reportContext) throws ScriptException {
}",0.8651685393258427
70378,"public void onCreate(ILabelInstance label,IReportContext reportContext){
}","public void onCreate(ILabelInstance label,IReportContext reportContext) throws ScriptException {
}",0.8604651162790697
70379,"public void onPrepare(ILabel labelHandle,IReportContext reportContext){
}","public void onPrepare(ILabel labelHandle,IReportContext reportContext) throws ScriptException {
}",0.8588235294117647
70380,"public void onRender(ILabelInstance label,IReportContext reportContext){
}","public void onRender(ILabelInstance label,IReportContext reportContext) throws ScriptException {
}",0.8604651162790697
70381,"public void onPageBreak(ILabelInstance label,IReportContext reportContext){
}","public void onPageBreak(ILabelInstance label,IReportContext reportContext) throws ScriptException {
}",0.8651685393258427
70382,"public void testFitToPageTrue() throws EngineException {
  List pages=getPages(true,true);
  float[] scales=new float[]{0.75f,0.75f,0.75f,0.23f};
  assertTrue(pages.size() == scales.length);
  for (int i=0; i < pages.size(); i++) {
    PageArea page=(PageArea)pages.get(i);
    float delta=scales[i] - page.getScale();
    assertTrue(delta > -0.01 && delta < 0.01);
  }
}","public void testFitToPageTrue() throws EngineException {
  List pages=getPages(true,true);
  float[] scales=new float[]{0.75f,0.75f,0.75f,0.24f};
  assertTrue(pages.size() == scales.length);
  for (int i=0; i < pages.size(); i++) {
    PageArea page=(PageArea)pages.get(i);
    float delta=scales[i] - page.getScale();
    assertTrue(delta > -0.01 && delta < 0.01);
  }
}",0.9973045822102424
70383,"/** 
 * Check if the arguments are valid. If yes, continue to execuate the report. If no, simply return.
 */
public int execute(){
  try {
    if (parseHelpOptions() > 0)     return 0;
    parseNormalOptions();
    if (engine == null) {
      EngineConfig config=createEngineConfig();
      Platform.startup(config);
      IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
      engine=factory.createReportEngine(config);
      engine.changeLogLevel(Level.WARNING);
    }
    if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      return runReport();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      return renderReport();
    }
 else {
      return runAndRenderReport();
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return -1;
  }
 finally {
    Platform.shutdown();
  }
}","/** 
 * Check if the arguments are valid. If yes, continue to execuate the report. If no, simply return.
 */
public int execute(){
  if (parseHelpOptions() > 0)   return 0;
  try {
    parseNormalOptions();
    if (engine == null) {
      EngineConfig config=createEngineConfig();
      Platform.startup(config);
      IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
      engine=factory.createReportEngine(config);
      engine.changeLogLevel(Level.WARNING);
    }
    if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      return runReport();
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(mode)) {
      return renderReport();
    }
 else {
      return runAndRenderReport();
    }
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return -1;
  }
 finally {
    Platform.shutdown();
  }
}",0.9522776572668112
70384,"/** 
 * Returns format code according to format type and current locale
 */
public String getLocalizedFormatCode(){
  if (UNFORMATTED.equals(formatPattern) || DATETIME_UNFORMATTED.equals(formatPattern) || DATE_UNFORMATTED.equals(formatPattern)|| TIME_UNFORMATTED.equals(formatPattern)) {
    return ""String_Node_Str"";
  }
  SimpleDateFormat dateFormat=getFormatter();
  return dateFormat.toLocalizedPattern();
}","/** 
 * Returns format code according to format type and current locale
 */
public String getLocalizedFormatCode(){
  if (UNFORMATTED.equals(formatPattern) || DATETIME_UNFORMATTED.equals(formatPattern) || DATE_UNFORMATTED.equals(formatPattern)|| TIME_UNFORMATTED.equals(formatPattern)) {
    return ((SimpleDateFormat)dateFormat).toLocalizedPattern();
  }
  SimpleDateFormat dateFormat=getFormatter();
  return dateFormat.toLocalizedPattern();
}",0.9228971962616822
70385,"/** 
 * Returns format code according to format type and current locale
 */
public String getFormatCode(){
  if (UNFORMATTED.equals(formatPattern) || DATETIME_UNFORMATTED.equals(formatPattern) || DATE_UNFORMATTED.equals(formatPattern)|| TIME_UNFORMATTED.equals(formatPattern)) {
    return ""String_Node_Str"";
  }
  SimpleDateFormat dateFormat=getFormatter();
  return dateFormat.toPattern();
}","/** 
 * Returns format code according to format type and current locale
 */
public String getFormatCode(){
  if (UNFORMATTED.equals(formatPattern) || DATETIME_UNFORMATTED.equals(formatPattern) || DATE_UNFORMATTED.equals(formatPattern)|| TIME_UNFORMATTED.equals(formatPattern)) {
    return ((SimpleDateFormat)dateFormat).toPattern();
  }
  SimpleDateFormat dateFormat=getFormatter();
  return dateFormat.toPattern();
}",0.9297163995067818
70386,"public static String parse(String dateTime,ULocale locale){
  if (dateTime == null) {
    return ""String_Node_Str"";
  }
  if (dateTime.indexOf(""String_Node_Str"") != -1 || dateTime.indexOf(""String_Node_Str"") != -1) {
    DateFormatter dateFormatter=new DateFormatter(dateTime,locale);
    dateTime=dateFormatter.getLocalizedFormatCode();
  }
  StringBuffer buffer=new StringBuffer();
  boolean inQuto=false;
  for (int count=0; count < dateTime.length(); count++) {
    char tempChar=dateTime.charAt(count);
    if (inQuto) {
      if (tempChar == '\'' && nextIsQuto(dateTime,count)) {
        buffer.append(tempChar);
        count++;
      }
 else {
        if (tempChar == '\'') {
          inQuto=false;
        }
 else {
          if (specialStr.indexOf(tempChar) != -1) {
            buffer.append(""String_Node_Str"" + tempChar);
          }
 else {
            buffer.append(tempChar);
          }
        }
      }
    }
 else {
      if (tempChar == '\'') {
        if (nextIsQuto(dateTime,count)) {
          buffer.append(tempChar);
          count++;
        }
 else {
          inQuto=true;
        }
      }
 else {
        if (tempChar == 'a') {
          buffer.append(""String_Node_Str"");
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          buffer.append(""String_Node_Str"");
          continue;
        }
        buffer.append(tempChar);
      }
    }
  }
  return buffer.toString();
}","public static String parse(Object txt,String dateTime,ULocale locale){
  if (dateTime == null) {
    DateFormatter format=new DateFormatter(locale);
    if (txt instanceof java.sql.Date) {
      format.applyPattern(DateFormatter.DATE_UNFORMATTED);
    }
 else     if (txt instanceof java.sql.Time) {
      format.applyPattern(DateFormatter.TIME_UNFORMATTED);
    }
 else {
      format.applyPattern(DateFormatter.DATETIME_UNFORMATTED);
    }
    dateTime=format.getLocalizedFormatCode();
  }
  if (dateTime.indexOf(""String_Node_Str"") != -1 || dateTime.indexOf(""String_Node_Str"") != -1) {
    DateFormatter dateFormatter=new DateFormatter(dateTime,locale);
    dateTime=dateFormatter.getLocalizedFormatCode();
  }
  StringBuffer buffer=new StringBuffer();
  boolean inQuto=false;
  for (int count=0; count < dateTime.length(); count++) {
    char tempChar=dateTime.charAt(count);
    if (inQuto) {
      if (tempChar == '\'' && nextIsQuto(dateTime,count)) {
        buffer.append(tempChar);
        count++;
      }
 else {
        if (tempChar == '\'') {
          inQuto=false;
        }
 else {
          if (specialStr.indexOf(tempChar) != -1) {
            buffer.append(""String_Node_Str"" + tempChar);
          }
 else {
            buffer.append(tempChar);
          }
        }
      }
    }
 else {
      if (tempChar == '\'') {
        if (nextIsQuto(dateTime,count)) {
          buffer.append(tempChar);
          count++;
        }
 else {
          inQuto=true;
        }
      }
 else {
        if (tempChar == 'a') {
          buffer.append(""String_Node_Str"");
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          continue;
        }
        if (""String_Node_Str"".indexOf(tempChar) != -1) {
          buffer.append(""String_Node_Str"");
          continue;
        }
        buffer.append(tempChar);
      }
    }
  }
  return buffer.toString();
}",0.8782760629004077
70387,"private Data createDateData(Object txt,StyleEntry entry,String timeFormat){
  timeFormat=ExcelUtil.parse(timeFormat,locale);
  if (timeFormat.equals(""String_Node_Str"")) {
    if (txt instanceof java.sql.Date) {
      timeFormat=DateTimeUtil.formatDateTime(""String_Node_Str"",locale);
    }
 else     if (txt instanceof java.sql.Time) {
      timeFormat=DateTimeUtil.formatDateTime(""String_Node_Str"",locale);
    }
 else {
      timeFormat=DateTimeUtil.formatDateTime(""String_Node_Str"",locale);
    }
  }
 else {
    timeFormat=DateTimeUtil.formatDateTime(timeFormat,locale);
  }
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(SheetData.DATE));
  return new Data(txt,entry,SheetData.DATE,getCurrentContainer());
}","private Data createDateData(Object txt,StyleEntry entry,String timeFormat){
  timeFormat=ExcelUtil.parse(txt,timeFormat,locale);
  timeFormat=DateTimeUtil.formatDateTime(timeFormat,locale);
  entry.setProperty(StyleConstant.DATE_FORMAT_PROP,timeFormat);
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(SheetData.DATE));
  return new Data(txt,entry,SheetData.DATE,getCurrentContainer());
}",0.585
70388,"/** 
 * support body auto resize, remove invalid header and footer
 * @param page
 */
protected void updateBodySize(){
  if (header != null && header.getHeight() >= root.getHeight()) {
    removeHeader();
    header=null;
  }
  if (footer != null && footer.getHeight() >= root.getHeight()) {
    removeHeader();
    footer=null;
  }
  if (header != null && footer != null && footer.getHeight() + header.getHeight() >= root.getHeight()) {
    removeFooter();
    removeHeader();
  }
  body.setHeight(root.getContentHeight() - (header == null ? 0 : header.getHeight()) - (footer == null ? 0 : footer.getHeight()));
  body.setPosition(body.getX(),(header == null ? 0 : header.getHeight()) + root.getBoxStyle().getTopBorderWidth());
  if (footer != null) {
    footer.setPosition(footer.getX(),(header == null ? 0 : header.getHeight()) + root.getBoxStyle().getTopBorderWidth() + (body == null ? 0 : body.getHeight()));
  }
}","/** 
 * support body auto resize, remove invalid header and footer
 * @param page
 */
protected void updateBodySize(){
  if (header != null && header.getHeight() >= root.getHeight()) {
    removeHeader();
    header=null;
  }
  if (footer != null && footer.getHeight() >= root.getHeight()) {
    removeHeader();
    footer=null;
  }
  if (header != null && footer != null && footer.getHeight() + header.getHeight() >= root.getHeight()) {
    removeHeader();
  }
  body.setHeight(root.getContentHeight() - (header == null ? 0 : header.getHeight()) - (footer == null ? 0 : footer.getHeight()));
  body.setPosition(body.getX(),(header == null ? 0 : header.getHeight()) + root.getBoxStyle().getTopBorderWidth());
  if (footer != null) {
    footer.setPosition(footer.getX(),(header == null ? 0 : header.getHeight()) + root.getBoxStyle().getTopBorderWidth() + (body == null ? 0 : body.getHeight()));
  }
}",0.989010989010989
70389,"public static void initFileHandler(String sLogFolder,final Level level) throws SecurityException, IOException {
  if (sLogFolder.length() > 0 && sLogFolder.lastIndexOf(File.separator) == sLogFolder.length() - 1) {
    sLogFolder=sLogFolder.substring(0,sLogFolder.length() - 1);
  }
  final String sName=ChartEnginePlugin.ID + new SimpleDateFormat(""String_Node_Str"").format(new Date());
  final String sDir=sLogFolder;
  try {
    fileHandler=AccessController.doPrivileged(new PrivilegedExceptionAction<FileHandler>(){
      public FileHandler run() throws Exception {
        Level logLevel=level != null ? level : Level.FINEST;
        FileHandler fileHandler=new FileHandler(sDir + File.separator + sName+ ""String_Node_Str"",true);
        fileHandler.setFormatter(new SimpleFormatter());
        fileHandler.setLevel(logLevel);
        return fileHandler;
      }
    }
);
  }
 catch (  PrivilegedActionException e) {
    Exception typedException=e.getException();
    if (typedException instanceof SecurityException) {
      throw (SecurityException)typedException;
    }
 else     if (typedException instanceof IOException) {
      throw (IOException)typedException;
    }
  }
}","public static void initFileHandler(String sLogFolder,final Level level) throws SecurityException, IOException {
  if (sLogFolder == null) {
    if (stateDir == null) {
      return;
    }
 else {
      sLogFolder=stateDir;
    }
  }
  if (sLogFolder.length() > 0 && sLogFolder.lastIndexOf(File.separator) == sLogFolder.length() - 1) {
    sLogFolder=sLogFolder.substring(0,sLogFolder.length() - 1);
  }
  final String sName=ChartEnginePlugin.ID + new SimpleDateFormat(""String_Node_Str"").format(new Date());
  final String sDir=sLogFolder;
  try {
    fileHandler=AccessController.doPrivileged(new PrivilegedExceptionAction<FileHandler>(){
      public FileHandler run() throws Exception {
        Level logLevel=level != null ? level : Level.FINEST;
        FileHandler fileHandler=new FileHandler(sDir + File.separator + sName+ ""String_Node_Str"",true);
        fileHandler.setFormatter(new SimpleFormatter());
        fileHandler.setLevel(logLevel);
        return fileHandler;
      }
    }
);
  }
 catch (  PrivilegedActionException e) {
    Exception typedException=e.getException();
    if (typedException instanceof SecurityException) {
      throw (SecurityException)typedException;
    }
 else     if (typedException instanceof IOException) {
      throw (IOException)typedException;
    }
  }
}",0.9513078470824948
70390,"@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}","@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  JavaUtilLoggerImpl.setStateDir(getStateLocation().toOSString());
}",0.7665505226480837
70391,"private void initFileLogger(String loggingDir,Level loggingLevel){
  if (loggingLevel != null && loggingLevel == Level.OFF) {
    return;
  }
  try {
    String dir=null;
    if (loggingDir != null) {
      dir=loggingDir;
    }
 else     if (inEclipseEnv()) {
      dir=ChartEnginePlugin.getInstance().getStateLocation().toOSString();
    }
    if (dir != null) {
      JavaUtilLoggerImpl.initFileHandler(dir,loggingLevel);
    }
  }
 catch (  SecurityException e) {
    logger.log(e);
  }
catch (  IOException e) {
    logger.log(e);
  }
}","private void initFileLogger(String loggingDir,Level loggingLevel){
  if (loggingLevel != null && loggingLevel == Level.OFF) {
    return;
  }
  try {
    String dir=null;
    if (loggingDir != null) {
      dir=loggingDir;
    }
    JavaUtilLoggerImpl.initFileHandler(dir,loggingLevel);
  }
 catch (  SecurityException e) {
    logger.log(e);
  }
catch (  IOException e) {
    logger.log(e);
  }
}",0.8464818763326226
70392,"/** 
 * Removes the guide handle.
 */
protected void removeGuideFeedBack(){
  if (guideHandle != null && guideHandle.getParent() == getHandleLayer()) {
    getHandleLayer().remove(guideHandle);
  }
  guideHandle=null;
}","/** 
 * Removes the guide handle.
 */
protected void removeGuideFeedBack(){
  if (guideHandle != null && guideHandle.getParent() == getHandleLayer()) {
    getHandleLayer().remove(guideHandle);
  }
 else   if (getParent() instanceof ReportElementEditPart) {
    ((ReportElementEditPart)getParent()).removeGuideFeedBack();
  }
  guideHandle=null;
}",0.773851590106007
70393,"public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
}","public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
}",0.9746376811594204
70394,"private void createColumnsViewerArea(Composite parent){
  cmpColumnsList=ChartUIUtil.createCompositeWrapper(parent);
  Label label=new Label(cmpColumnsList,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpColumnsList,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewB=new Button(cmpColumnsList,SWT.CHECK);
  btnShowDataPreviewB.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.addListener(SWT.Selection,this);
  final Table table=new Table(cmpColumnsList,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  tableViewerColumns=new TableViewer(table);
  tableViewerColumns.setUseHashlookup(true);
  new TableColumn(table,SWT.CENTER);
  table.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      String tooltip=null;
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item != null) {
        List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
        StringBuilder sb=new StringBuilder();
        int index=((Table)e.widget).indexOf(item);
        int i=0;
        for (; i < data.size(); i++) {
          if (sb.length() > 45) {
            break;
          }
          if (data.get(i)[index] != null) {
            if (i != 0)             sb.append(""String_Node_Str"");
            sb.append(String.valueOf(data.get(i)[index]));
          }
        }
        if (i < data.size()) {
          sb.append(""String_Node_Str"");
        }
        tooltip=sb.toString();
      }
      table.setToolTipText(tooltip);
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
        if (item == null) {
          tableViewerColumns.getTable().select(-1);
        }
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (item != null && !isSharingChart) {
          if (table.getMenu() != null) {
            table.getMenu().dispose();
          }
          table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
        }
 else {
          table.setMenu(null);
        }
        if (table.getMenu() != null && !isSharingChart) {
          table.getMenu().setVisible(true);
        }
      }
    }
  }
);
  table.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      Table table=(Table)event.widget;
      int totalWidth=table.getClientArea().width;
      table.getColumn(0).setWidth(totalWidth);
    }
  }
);
  DragSource ds=new DragSource(table,DND.DROP_COPY | DND.DROP_MOVE);
  ds.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  ColumnNamesTableDragListener dragSourceAdapter=new ColumnNamesTableDragListener(table);
  ds.addDragListener(dragSourceAdapter);
  tableViewerColumns.setContentProvider(new IStructuredContentProvider(){
    /** 
 * Gets the food items for the list
 * @param arg0 the data model
 * @return Object[]
 */
    public Object[] getElements(    Object arg0){
      if (arg0 == null)       return null;
      return (ColumnBindingInfo[])arg0;
    }
    /** 
 * Disposes any created resources
 */
    public void dispose(){
    }
    /** 
 * Called when the input changes
 * @param arg0 the viewer
 * @param arg1 the old input
 * @param arg2 the new input
 */
    public void inputChanged(    Viewer arg0,    Object arg1,    Object arg2){
    }
  }
);
  tableViewerColumns.setLabelProvider(new ILabelProvider(){
    /** 
 * images
 * @param arg0 the element
 * @return Image
 */
    public Image getImage(    Object arg0){
      String imageName=((ColumnBindingInfo)arg0).getImageName();
      if (imageName == null)       return null;
      return UIHelper.getImage(imageName);
    }
    /** 
 * Gets the text for an element
 * @param arg0 the element
 * @return String
 */
    public String getText(    Object arg0){
      return ((ColumnBindingInfo)arg0).getName();
    }
    /** 
 * Adds a listener
 * @param arg0 the listener
 */
    public void addListener(    ILabelProviderListener arg0){
    }
    /** 
 * Disposes any resources
 */
    public void dispose(){
    }
    /** 
 * Returns whether changing the specified property for the specified element affect the label
 * @param arg0 the element
 * @param arg1 the property
 * @return boolean
 */
    public boolean isLabelProperty(    Object arg0,    String arg1){
      return false;
    }
    /** 
 * Removes a listener
 * @param arg0 the listener
 */
    public void removeListener(    ILabelProviderListener arg0){
    }
  }
);
}","private void createColumnsViewerArea(Composite parent){
  cmpColumnsList=ChartUIUtil.createCompositeWrapper(parent);
  Label label=new Label(cmpColumnsList,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell() && !dataProvider.isInMultiView()) {
    Label description=new Label(cmpColumnsList,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      description.setLayoutData(gd);
      description.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewB=new Button(cmpColumnsList,SWT.CHECK);
  btnShowDataPreviewB.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.addListener(SWT.Selection,this);
  final Table table=new Table(cmpColumnsList,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  tableViewerColumns=new TableViewer(table);
  tableViewerColumns.setUseHashlookup(true);
  new TableColumn(table,SWT.CENTER);
  table.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      String tooltip=null;
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item != null) {
        List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
        if (data != null) {
          StringBuilder sb=new StringBuilder();
          int index=((Table)e.widget).indexOf(item);
          int i=0;
          for (; i < data.size(); i++) {
            if (sb.length() > 45) {
              break;
            }
            if (data.get(i)[index] != null) {
              if (i != 0)               sb.append(""String_Node_Str"");
              sb.append(String.valueOf(data.get(i)[index]));
            }
          }
          if (i < data.size()) {
            sb.append(""String_Node_Str"");
          }
          tooltip=sb.toString();
        }
      }
      table.setToolTipText(tooltip);
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
        if (item == null) {
          tableViewerColumns.getTable().select(-1);
        }
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (item != null && !isSharingChart) {
          if (table.getMenu() != null) {
            table.getMenu().dispose();
          }
          table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
        }
 else {
          table.setMenu(null);
        }
        if (table.getMenu() != null && !isSharingChart) {
          table.getMenu().setVisible(true);
        }
      }
    }
  }
);
  table.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      Table table=(Table)event.widget;
      int totalWidth=table.getClientArea().width;
      table.getColumn(0).setWidth(totalWidth);
    }
  }
);
  DragSource ds=new DragSource(table,DND.DROP_COPY | DND.DROP_MOVE);
  ds.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  ColumnNamesTableDragListener dragSourceAdapter=new ColumnNamesTableDragListener(table);
  ds.addDragListener(dragSourceAdapter);
  tableViewerColumns.setContentProvider(new IStructuredContentProvider(){
    /** 
 * Gets the food items for the list
 * @param arg0 the data model
 * @return Object[]
 */
    public Object[] getElements(    Object arg0){
      if (arg0 == null)       return null;
      return (ColumnBindingInfo[])arg0;
    }
    /** 
 * Disposes any created resources
 */
    public void dispose(){
    }
    /** 
 * Called when the input changes
 * @param arg0 the viewer
 * @param arg1 the old input
 * @param arg2 the new input
 */
    public void inputChanged(    Viewer arg0,    Object arg1,    Object arg2){
    }
  }
);
  tableViewerColumns.setLabelProvider(new ILabelProvider(){
    /** 
 * images
 * @param arg0 the element
 * @return Image
 */
    public Image getImage(    Object arg0){
      String imageName=((ColumnBindingInfo)arg0).getImageName();
      if (imageName == null)       return null;
      return UIHelper.getImage(imageName);
    }
    /** 
 * Gets the text for an element
 * @param arg0 the element
 * @return String
 */
    public String getText(    Object arg0){
      return ((ColumnBindingInfo)arg0).getName();
    }
    /** 
 * Adds a listener
 * @param arg0 the listener
 */
    public void addListener(    ILabelProviderListener arg0){
    }
    /** 
 * Disposes any resources
 */
    public void dispose(){
    }
    /** 
 * Returns whether changing the specified property for the specified element affect the label
 * @param arg0 the element
 * @param arg1 the property
 * @return boolean
 */
    public boolean isLabelProperty(    Object arg0,    String arg1){
      return false;
    }
    /** 
 * Removes a listener
 * @param arg0 the listener
 */
    public void removeListener(    ILabelProviderListener arg0){
    }
  }
);
}",0.9929522317932654
70395,"public void mouseMove(MouseEvent e){
  String tooltip=null;
  TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
  if (item != null) {
    List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
    StringBuilder sb=new StringBuilder();
    int index=((Table)e.widget).indexOf(item);
    int i=0;
    for (; i < data.size(); i++) {
      if (sb.length() > 45) {
        break;
      }
      if (data.get(i)[index] != null) {
        if (i != 0)         sb.append(""String_Node_Str"");
        sb.append(String.valueOf(data.get(i)[index]));
      }
    }
    if (i < data.size()) {
      sb.append(""String_Node_Str"");
    }
    tooltip=sb.toString();
  }
  table.setToolTipText(tooltip);
}","public void mouseMove(MouseEvent e){
  String tooltip=null;
  TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
  if (item != null) {
    List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
    if (data != null) {
      StringBuilder sb=new StringBuilder();
      int index=((Table)e.widget).indexOf(item);
      int i=0;
      for (; i < data.size(); i++) {
        if (sb.length() > 45) {
          break;
        }
        if (data.get(i)[index] != null) {
          if (i != 0)           sb.append(""String_Node_Str"");
          sb.append(String.valueOf(data.get(i)[index]));
        }
      }
      if (i < data.size()) {
        sb.append(""String_Node_Str"");
      }
      tooltip=sb.toString();
    }
  }
  table.setToolTipText(tooltip);
}",0.9271523178807948
70396,"/** 
 * Generates a draw2d constraint object derived from the specified child EditPart using the provided Request. The returned constraint will be translated to the application's model later using  {@link #translateToModelConstraint(Object)}.
 * @param request the ChangeBoundsRequest
 * @param child the child EditPart for which the constraint should be generated
 * @return the draw2d constraint
 */
protected Object getConstraintFor(ChangeBoundsRequest request,GraphicalEditPart child){
  Rectangle rect=child.getFigure().getBounds();
  rect=request.getTransformedRectangle(rect);
  rect.translate(getLayoutOrigin().getNegated());
  return getConstraintFor(rect);
}","/** 
 * Generates a draw2d constraint object derived from the specified child EditPart using the provided Request. The returned constraint will be translated to the application's model later using  {@link #translateToModelConstraint(Object)}.
 * @param request the ChangeBoundsRequest
 * @param child the child EditPart for which the constraint should be generated
 * @return the draw2d constraint
 */
protected Object getConstraintFor(ChangeBoundsRequest request,GraphicalEditPart child){
  IFigure figure=child.getFigure();
  Rectangle rect=new PrecisionRectangle(figure.getBounds());
  figure.translateToAbsolute(rect);
  rect=request.getTransformedRectangle(rect);
  figure.translateToRelative(rect);
  rect.translate(getLayoutOrigin().getNegated());
  if (figure instanceof IOutsideBorder) {
    Border border=((IOutsideBorder)figure).getOutsideBorder();
    if (border != null) {
      Insets insets=border.getInsets(figure);
      rect.shrink(insets.right,insets.bottom);
    }
  }
  return getConstraintFor(rect);
}",0.6067415730337079
70397,"/** 
 * Update column headers and data to table.
 * @param headers
 * @param dataList
 */
private void updateTablePreview(final ColumnBindingInfo[] headers,final List<?> dataList){
  fireEvent(tablePreview,EVENT_QUERY);
  if (tablePreview.isDisposed()) {
    return;
  }
  if (headers == null) {
    tablePreview.setEnabled(false);
    tablePreview.createDummyTable();
  }
 else {
    tablePreview.setEnabled(true);
    tablePreview.setColumns(headers);
    refreshTableColor();
    if (dataList != null) {
      for (Iterator<?> iterator=dataList.iterator(); iterator.hasNext(); ) {
        String[] dataRow=(String[])iterator.next();
        for (int i=0; i < dataRow.length; i++) {
          tablePreview.addEntry(dataRow[i],i);
        }
      }
    }
  }
  tablePreview.layout();
  int index=tableViewerColumns.getTable().getSelectionIndex();
  if (index >= 0) {
    tablePreview.moveTo(index);
  }
}","/** 
 * Update column headers and data to table.
 * @param headers
 * @param dataList
 */
private void updateTablePreview(final ColumnBindingInfo[] headers,final List<?> dataList){
  fireEvent(tablePreview,EVENT_QUERY);
  if (tablePreview.isDisposed()) {
    return;
  }
  if (headers == null || headers.length == 0) {
    tablePreview.setEnabled(false);
    tablePreview.createDummyTable();
  }
 else {
    tablePreview.setEnabled(true);
    tablePreview.setColumns(headers);
    refreshTableColor();
    if (dataList != null) {
      for (Iterator<?> iterator=dataList.iterator(); iterator.hasNext(); ) {
        String[] dataRow=(String[])iterator.next();
        for (int i=0; i < dataRow.length; i++) {
          tablePreview.addEntry(dataRow[i],i);
        }
      }
    }
  }
  tablePreview.layout();
  int index=tableViewerColumns.getTable().getSelectionIndex();
  if (index >= 0) {
    tablePreview.moveTo(index);
  }
}",0.9874522640480088
70398,"public SplitResult splitLines(int lineCount) throws BirtException {
  if (isPageBreakInsideAvoid()) {
    if (isPageBreakBeforeAvoid()) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  int contentHeight=getContentHeight();
  LinkedList result=new LinkedList();
  int size=children.size();
  SplitResult childSplit=null;
  int status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
  for (int i=size - 1; i >= 0; i--) {
    ContainerArea child=(ContainerArea)children.get(i);
    int ah=child.getAllocatedHeight();
    childSplit=child.splitLines(lineCount);
    if (childSplit.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
      result.addFirst(child);
      contentHeight-=ah;
    }
 else     if (childSplit.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
      result.addFirst(child);
      contentHeight-=ah;
      if (i > 0) {
        ContainerArea preChild=(ContainerArea)children.get(i - 1);
        if (preChild.isPageBreakAfterAvoid()) {
          continue;
        }
 else {
          status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          contentHeight=contentHeight - ah + child.getAllocatedHeight();
          BlockContainerArea newContainer=cloneArea();
          newContainer.setContentHeight(contentHeight);
          Iterator iter=children.iterator();
          while (iter.hasNext()) {
            ContainerArea childArea=(ContainerArea)iter.next();
            if (!result.contains(childArea)) {
              iter.remove();
              newContainer.addChild(childArea);
              newContainer.setParent(newContainer);
            }
          }
          updateChildrenPosition();
          return new SplitResult(newContainer,SplitResult.SPLIT_SUCCEED_WITH_PART);
        }
      }
 else {
        if (isPageBreakBeforeAvoid()) {
          return SplitResult.BEFORE_AVOID_WITH_NULL;
        }
 else {
          return SplitResult.SUCCEED_WITH_NULL;
        }
      }
    }
 else     if (childSplit.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
      result.addFirst(child);
      ContainerArea splitChildArea=childSplit.getResult();
      contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
      BlockContainerArea newContainer=cloneArea();
      newContainer.setContentHeight(contentHeight);
      Iterator iter=children.iterator();
      while (iter.hasNext()) {
        ContainerArea childArea=(ContainerArea)iter.next();
        if (!result.contains(childArea)) {
          iter.remove();
          newContainer.addChild(childArea);
          newContainer.setParent(newContainer);
        }
      }
      newContainer.addChild(splitChildArea);
      updateChildrenPosition();
      return new SplitResult(newContainer,SplitResult.SPLIT_SUCCEED_WITH_PART);
    }
  }
  return SplitResult.BEFORE_AVOID_WITH_NULL;
}","public SplitResult splitLines(int lineCount) throws BirtException {
  if (isPageBreakInsideAvoid()) {
    if (isPageBreakBeforeAvoid()) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  int contentHeight=getContentHeight();
  LinkedList result=new LinkedList();
  int size=children.size();
  SplitResult childSplit=null;
  int status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
  for (int i=size - 1; i >= 0; i--) {
    ContainerArea child=(ContainerArea)children.get(i);
    int ah=child.getAllocatedHeight();
    childSplit=child.splitLines(lineCount);
    if (childSplit.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
      result.addFirst(child);
      contentHeight-=ah;
    }
 else     if (childSplit.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
      result.addFirst(child);
      contentHeight-=ah;
      if (i > 0) {
        ContainerArea preChild=(ContainerArea)children.get(i - 1);
        if (preChild.isPageBreakAfterAvoid()) {
          continue;
        }
 else {
          status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          contentHeight=contentHeight - ah + child.getAllocatedHeight();
          BlockContainerArea newContainer=cloneArea();
          newContainer.setContentHeight(contentHeight);
          Iterator iter=children.iterator();
          while (iter.hasNext()) {
            ContainerArea childArea=(ContainerArea)iter.next();
            if (!result.contains(childArea)) {
              iter.remove();
              newContainer.addChild(childArea);
              newContainer.setParent(newContainer);
            }
          }
          addRepeatedItem();
          updateChildrenPosition();
          return new SplitResult(newContainer,SplitResult.SPLIT_SUCCEED_WITH_PART);
        }
      }
 else {
        if (isPageBreakBeforeAvoid()) {
          return SplitResult.BEFORE_AVOID_WITH_NULL;
        }
 else {
          return SplitResult.SUCCEED_WITH_NULL;
        }
      }
    }
 else     if (childSplit.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
      result.addFirst(child);
      ContainerArea splitChildArea=childSplit.getResult();
      contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
      BlockContainerArea newContainer=cloneArea();
      newContainer.setContentHeight(contentHeight);
      Iterator iter=children.iterator();
      while (iter.hasNext()) {
        ContainerArea childArea=(ContainerArea)iter.next();
        if (!result.contains(childArea)) {
          iter.remove();
          newContainer.addChild(childArea);
          newContainer.setParent(newContainer);
        }
      }
      newContainer.addChild(splitChildArea);
      addRepeatedItem();
      updateChildrenPosition();
      return new SplitResult(newContainer,SplitResult.SPLIT_SUCCEED_WITH_PART);
    }
  }
  return SplitResult.BEFORE_AVOID_WITH_NULL;
}",0.9905857740585774
70399,"protected void updateChildrenPosition() throws BirtException {
  currentBP=0;
  if (children.size() > 0) {
    Iterator iter=children.iterator();
    int y=getOffsetY();
    int h=0;
    while (iter.hasNext()) {
      ContainerArea area=(ContainerArea)iter.next();
{
        area.setAllocatedPosition(getOffsetX(),y);
        int ah=area.getAllocatedHeight();
        y+=ah;
        h+=ah;
        if (area.finished) {
          currentBP+=ah;
        }
      }
    }
    setContentHeight(h);
  }
 else {
    setContentHeight(0);
  }
}","public void updateChildrenPosition() throws BirtException {
  currentBP=0;
  if (children.size() > 0) {
    Iterator iter=children.iterator();
    int y=getOffsetY();
    int h=0;
    while (iter.hasNext()) {
      ContainerArea area=(ContainerArea)iter.next();
{
        area.setAllocatedPosition(getOffsetX(),y);
        int ah=area.getAllocatedHeight();
        y+=ah;
        h+=ah;
        if (area.finished) {
          currentBP+=ah;
        }
      }
    }
    setContentHeight(h);
  }
 else {
    setContentHeight(0);
  }
}",0.9878163074039362
70400,"protected SplitResult _split(int height,boolean force) throws BirtException {
  if (children.size() == 0) {
    if (isPageBreakBeforeAvoid() && !force) {
      updateChildrenPosition();
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      updateChildrenPosition();
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  BlockContainerArea newContainer=null;
  int status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
  int cheight=getContentHeight(height);
  ListIterator iter=children.listIterator();
  int contentHeight=0;
  ArrayList result=new ArrayList();
  ContainerArea current=null;
  ContainerArea previous=null;
  while (iter.hasNext()) {
    previous=current;
    current=(ContainerArea)iter.next();
    int ah=current.getAllocatedHeight();
    contentHeight+=ah;
    if (contentHeight <= cheight && current.finished) {
      result.add(current);
      continue;
    }
 else {
      contentHeight-=ah;
      int childSplitHeight=cheight - contentHeight;
      SplitResult splitResult=current.split(childSplitHeight,force && !isValidResult(result));
      if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        ContainerArea splitChildArea=splitResult.getResult();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        contentHeight+=splitChildArea.getAllocatedHeight();
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
        if (force) {
          if (result.size() > 0) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          }
        }
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        if (isValidResult(result)) {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (previous.isPageBreakAfterAvoid()) {
              status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
              break;
            }
 else {
              status=SplitResult.SPLIT_SUCCEED_WITH_PART;
              break;
            }
          }
        }
 else {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (isPageBreakBeforeAvoid()) {
              return SplitResult.BEFORE_AVOID_WITH_NULL;
            }
 else {
              return SplitResult.SUCCEED_WITH_NULL;
            }
          }
        }
      }
    }
  }
  if (result.size() == children.size()) {
    status=SplitResult.SPLIT_SUCCEED_WITH_PART;
  }
  if (!force && status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
    iter.previous();
    while (iter.hasPrevious()) {
      current=(ContainerArea)iter.previous();
      int ah=current.getAllocatedHeight();
      SplitResult splitResult=current.splitLines(1);
      if (splitResult.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
        result.remove(current);
        contentHeight-=ah;
        continue;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        result.remove(current);
        ContainerArea splitChildArea=splitResult.getResult();
        contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        result.remove(current);
        int preIndex=iter.previousIndex();
        if (preIndex >= 0) {
          ContainerArea prev=(ContainerArea)children.get(preIndex);
          if (prev.isPageBreakAfterAvoid()) {
            continue;
          }
 else {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
        }
 else {
          if (isPageBreakBeforeAvoid()) {
            return SplitResult.BEFORE_AVOID_WITH_NULL;
          }
 else {
            return SplitResult.SUCCEED_WITH_NULL;
          }
        }
      }
    }
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
  }
  if (status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
    newContainer=cloneArea();
    for (int i=0; i < result.size(); i++) {
      ContainerArea child=(ContainerArea)result.get(i);
      child.setParent(newContainer);
      newContainer.addChild(child);
      children.remove(child);
    }
    newContainer.setContentHeight(contentHeight);
  }
  if (newContainer != null) {
    updateChildrenPosition();
  }
  return new SplitResult(newContainer,status);
}","protected SplitResult _split(int height,boolean force) throws BirtException {
  if (children.size() == 0) {
    if (isPageBreakBeforeAvoid() && !force) {
      updateChildrenPosition();
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      updateChildrenPosition();
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  BlockContainerArea newContainer=null;
  int status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
  int cheight=getContentHeight(height);
  ListIterator iter=children.listIterator();
  int contentHeight=0;
  ArrayList result=new ArrayList();
  ContainerArea current=null;
  ContainerArea previous=null;
  while (iter.hasNext()) {
    previous=current;
    current=(ContainerArea)iter.next();
    int ah=current.getAllocatedHeight();
    contentHeight+=ah;
    if (contentHeight <= cheight && current.finished) {
      result.add(current);
      continue;
    }
 else {
      contentHeight-=ah;
      int childSplitHeight=cheight - contentHeight;
      SplitResult splitResult=current.split(childSplitHeight,force && !isValidResult(result));
      if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        ContainerArea splitChildArea=splitResult.getResult();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        contentHeight+=splitChildArea.getAllocatedHeight();
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
        if (force) {
          if (result.size() > 0) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          }
        }
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        if (isValidResult(result)) {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (previous.isPageBreakAfterAvoid()) {
              status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
              break;
            }
 else {
              status=SplitResult.SPLIT_SUCCEED_WITH_PART;
              break;
            }
          }
        }
 else {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (isPageBreakBeforeAvoid()) {
              return SplitResult.BEFORE_AVOID_WITH_NULL;
            }
 else {
              return SplitResult.SUCCEED_WITH_NULL;
            }
          }
        }
      }
    }
  }
  if (result.size() == children.size()) {
    status=SplitResult.SPLIT_SUCCEED_WITH_PART;
  }
  if (!force && status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
    iter.previous();
    while (iter.hasPrevious()) {
      current=(ContainerArea)iter.previous();
      int ah=current.getAllocatedHeight();
      SplitResult splitResult=current.splitLines(1);
      if (splitResult.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
        result.remove(current);
        contentHeight-=ah;
        continue;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        result.remove(current);
        ContainerArea splitChildArea=splitResult.getResult();
        contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        result.remove(current);
        int preIndex=iter.previousIndex();
        if (preIndex >= 0) {
          ContainerArea prev=(ContainerArea)children.get(preIndex);
          if (prev.isPageBreakAfterAvoid()) {
            continue;
          }
 else {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
        }
 else {
          if (isPageBreakBeforeAvoid()) {
            return SplitResult.BEFORE_AVOID_WITH_NULL;
          }
 else {
            return SplitResult.SUCCEED_WITH_NULL;
          }
        }
      }
    }
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
  }
  if (status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
    newContainer=cloneArea();
    for (int i=0; i < result.size(); i++) {
      ContainerArea child=(ContainerArea)result.get(i);
      child.setParent(newContainer);
      newContainer.addChild(child);
      children.remove(child);
    }
    newContainer.setContentHeight(contentHeight);
  }
  if (newContainer != null) {
    addRepeatedItem();
    updateChildrenPosition();
  }
  return new SplitResult(newContainer,status);
}",0.997529272746804
70401,"public CellArea cloneArea(){
  return new CellArea(this);
}","public CellArea cloneArea(){
  CellArea cell=new CellArea(this);
  cell.setBoxStyle(new BoxStyle(cell.getBoxStyle()));
  return cell;
}",0.5670103092783505
70402,"public SplitResult split(int height,boolean force) throws BirtException {
  if (force) {
    return _split(height,force);
  }
 else   if (isPageBreakInsideAvoid()) {
    if (isPageBreakBeforeAvoid()) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      _splitSpanCell(height,force);
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
 else {
    return _split(height,force);
  }
}","public SplitResult split(int height,boolean force) throws BirtException {
  if (force) {
    return _split(height,force);
  }
 else   if (isPageBreakInsideAvoid()) {
    if (isPageBreakBeforeAvoid()) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      _splitSpanCell(height,force);
      needResolveBorder=true;
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
 else {
    return _split(height,force);
  }
}",0.9639423076923076
70403,"protected SplitResult _split(int height,boolean force) throws BirtException {
  RowArea result=null;
  for (int i=0; i < cells.length; i++) {
    if (cells[i] != null) {
      SplitResult splitCell=cells[i].split(height,force);
      CellArea cell=(CellArea)splitCell.getResult();
      if (cell != null) {
        if (result == null) {
          result=cloneArea();
        }
        result.addChild(cell);
        result.setCell(cell);
      }
      i=cells[i].getColSpan() + i - 1;
    }
  }
  if (result != null) {
    result.updateRow(this);
    updateRow();
    return new SplitResult(result,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    updateRow();
    return SplitResult.SUCCEED_WITH_NULL;
  }
}","protected SplitResult _split(int height,boolean force) throws BirtException {
  RowArea result=null;
  for (int i=0; i < cells.length; i++) {
    if (cells[i] != null) {
      SplitResult splitCell=cells[i].split(height,force);
      CellArea cell=(CellArea)splitCell.getResult();
      if (cell != null) {
        if (result == null) {
          result=cloneArea();
        }
        result.addChild(cell);
        result.setCell(cell);
      }
      i=cells[i].getColSpan() + i - 1;
    }
  }
  if (result != null) {
    result.updateRow(this);
    result.needResolveBorder=true;
    updateRow();
    needResolveBorder=true;
    return new SplitResult(result,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    updateRow();
    needResolveBorder=true;
    return SplitResult.SUCCEED_WITH_NULL;
  }
}",0.93993399339934
70404,"public SplitResult split(int height,boolean force) throws BirtException {
  SplitResult result=super.split(height,force);
  if (result.getResult() != null) {
    TableArea tableResult=(TableArea)result.getResult();
    int h=tableResult.layout.resolveAll();
    if (h > 0) {
      tableResult.setHeight(tableResult.getHeight() + h);
    }
    tableResult.resolveBottomBorder();
    resolveTopBorder();
  }
  return result;
}","public SplitResult split(int height,boolean force) throws BirtException {
  SplitResult result=super.split(height,force);
  if (result.getResult() != null) {
    TableArea tableResult=(TableArea)result.getResult();
    int h=tableResult.layout.resolveAll();
    if (h > 0) {
      tableResult.setHeight(tableResult.getHeight() + h);
    }
    tableResult.resolveBottomBorder();
    relayoutChildren();
  }
  return result;
}",0.9693396226415094
70405,"protected void addRows(ContainerArea container,TableLayout layout){
  if (container instanceof RowArea) {
    layout.addRow((RowArea)container,context.isFixedLayout());
  }
 else {
    java.util.Iterator<IArea> iter=container.getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      addRows(child,layout);
    }
  }
}","protected void addRows(ContainerArea container,TableLayout layout) throws BirtException {
  if (container instanceof RowArea) {
    RowArea row=(RowArea)container;
    if (row.needResolveBorder) {
      int size=row.getChildrenCount();
      for (int i=0; i < size; i++) {
        CellArea cell=(CellArea)row.getChild(i);
        int ch=cell.getContentHeight();
        cell.boxStyle.clearBorder();
        layout.resolveBorderConflict(cell,true);
        cell.setContentHeight(ch);
      }
      row.needResolveBorder=false;
    }
    if (row.finished) {
      layout.addRow((RowArea)container,context.isFixedLayout());
    }
  }
 else {
    int size=container.getChildrenCount();
    for (int i=0; i < size; i++) {
      ContainerArea child=(ContainerArea)container.getChild(i);
      addRows(child,layout);
      child.updateChildrenPosition();
    }
  }
}",0.392477514309076
70406,"/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  ChartWithAxes cwa=getModel();
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  bo.adjust(insCA);
  double dX=bo.getLeft();
  double dY=bo.getTop();
  double dW=bo.getWidth();
  double dH=bo.getHeight();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  boPlot=bo;
  if (bo.getWidth() <= 0 || bo.getHeight() <= 0) {
    return;
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getSharedScale() != null) {
      dsi=rtc.getSharedScale().createDataSetIterator(iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,BoundsImpl.create(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=boPlotBackground.copyInstance();
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}","/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  ChartWithAxes cwa=getModel();
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  bo.adjust(insCA);
  double dX=bo.getLeft();
  double dY=bo.getTop();
  double dW=bo.getWidth();
  double dH=bo.getHeight();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  boPlot=bo;
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getSharedScale() != null) {
      dsi=rtc.getSharedScale().createDataSetIterator(iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,BoundsImpl.create(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=boPlotBackground.copyInstance();
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}",0.9952579800410504
70407,"private void doLayout_tmp(IDisplayServer xs,Chart cm,Bounds boFull,RunTimeContext rtc) throws ChartException {
  rtc.putState(RunTimeContext.StateKey.LABEL_LIMITER_LOOKUP_KEY,new HashMap<Label,LabelLimiter>());
  Legend lg=cm.getLegend();
  Position lgPos=lg.getPosition();
  new ChartLayout(xs,cm,boFull,rtc).compute(lgPos);
  Block bl=cm.getBlock();
  bl.setBounds(boFull);
  Plot pl=cm.getPlot();
  TitleBlock tb=cm.getTitle();
  for (Iterator itr=bl.getChildren().iterator(); itr.hasNext(); ) {
    Block cbl=(Block)itr.next();
    if (cbl != lg && cbl != pl && cbl != tb) {
      layoutBlock(xs,cm,bl.getBounds(),bl.getInsets(),cbl,rtc);
    }
  }
  for (Iterator itr=lg.getChildren().iterator(); itr.hasNext(); ) {
    Block cbl=(Block)itr.next();
    layoutBlock(xs,cm,lg.getBounds(),lg.getInsets(),cbl,rtc);
  }
  for (Iterator itr=tb.getChildren().iterator(); itr.hasNext(); ) {
    Block cbl=(Block)itr.next();
    layoutBlock(xs,cm,tb.getBounds(),tb.getInsets(),cbl,rtc);
  }
  for (Iterator itr=pl.getChildren().iterator(); itr.hasNext(); ) {
    Block cbl=(Block)itr.next();
    layoutBlock(xs,cm,pl.getBounds(),pl.getInsets(),cbl,rtc);
  }
}","private void doLayout_tmp(IDisplayServer xs,Chart cm,Bounds boFull,RunTimeContext rtc) throws ChartException {
  rtc.putState(RunTimeContext.StateKey.LABEL_LIMITER_LOOKUP_KEY,new HashMap<Label,LabelLimiter>());
  Legend lg=cm.getLegend();
  Position lgPos=lg.getPosition();
  new ChartLayout(xs,cm,boFull,rtc).compute(lgPos);
  Block bl=cm.getBlock();
  bl.setBounds(boFull);
  Plot pl=cm.getPlot();
  TitleBlock tb=cm.getTitle();
  for (Iterator<Block> itr=bl.getChildren().iterator(); itr.hasNext(); ) {
    Block cbl=itr.next();
    if (cbl != lg && cbl != pl && cbl != tb) {
      layoutBlock(xs,cm,bl.getBounds(),bl.getInsets(),cbl,rtc);
    }
  }
  for (Iterator<Block> itr=lg.getChildren().iterator(); itr.hasNext(); ) {
    Block cbl=itr.next();
    layoutBlock(xs,cm,lg.getBounds(),lg.getInsets(),cbl,rtc);
  }
  for (Iterator<Block> itr=tb.getChildren().iterator(); itr.hasNext(); ) {
    Block cbl=itr.next();
    layoutBlock(xs,cm,tb.getBounds(),tb.getInsets(),cbl,rtc);
  }
  for (Iterator<Block> itr=pl.getChildren().iterator(); itr.hasNext(); ) {
    Block cbl=itr.next();
    layoutBlock(xs,cm,pl.getBounds(),pl.getInsets(),cbl,rtc);
  }
}",0.9757575757575756
70408,"private void initTitleSizeLimit(IDisplayServer xs,Chart cm,RunTimeContext rtc,Bounds bo){
  final double dPercent=0.5;
  bo=bo.scaledInstance(xs.getDpiResolution() / 72d);
  bo.adjust(cm.getTitle().getInsets());
  LabelLimiter lbLimiter=new LabelLimiter(bo.getWidth(),bo.getHeight() * dPercent,0);
  Map<Label,LabelLimiter> mapLimiter=rtc.getState(RunTimeContext.StateKey.LABEL_LIMITER_LOOKUP_KEY);
  mapLimiter.put(cm.getTitle().getLabel(),lbLimiter);
}","private void initTitleSizeLimit(IDisplayServer xs,Chart cm,RunTimeContext rtc,Bounds bo){
  final double dPercent=0.5;
  bo=bo.scaledInstance(xs.getDpiResolution() / 72d);
  bo.adjust(cm.getTitle().getInsets());
  int iTitleAnchor=cm.getTitle().getAnchor().getValue();
  LabelLimiter lbLimiter=null;
  if (iTitleAnchor == Anchor.EAST || iTitleAnchor == Anchor.WEST) {
    lbLimiter=new LabelLimiter(bo.getWidth() * dPercent,bo.getHeight(),0);
  }
 else {
    lbLimiter=new LabelLimiter(bo.getWidth(),bo.getHeight() * dPercent,0);
  }
  Map<Label,LabelLimiter> mapLimiter=rtc.getState(RunTimeContext.StateKey.LABEL_LIMITER_LOOKUP_KEY);
  mapLimiter.put(cm.getTitle().getLabel(),lbLimiter);
}",0.7727272727272727
70409,"protected BoundingBox computeBox(IDisplayServer xs,RunTimeContext rtc) throws ChartException {
  Label la=getLabel().copyInstance();
  final String sPreviousValue=la.getCaption().getValue();
  la.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
  la.setEllipsis(1);
  Map<Label,LabelLimiter> mapLimiter=rtc.getState(RunTimeContext.StateKey.LABEL_LIMITER_LOOKUP_KEY);
  LabelLimiter lbLimiter=mapLimiter.get(getLabel());
  lbLimiter.computeWrapping(xs,la);
  LabelLimiter lbLimiterNew=lbLimiter.limitLabelSize(xs,la,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
  mapLimiter.put(getLabel(),lbLimiterNew);
  return lbLimiterNew.getBounding(null);
}","protected BoundingBox computeBox(IDisplayServer xs,RunTimeContext rtc) throws ChartException {
  Label la=getLabel().copyInstance();
  final String sPreviousValue=la.getCaption().getValue();
  la.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
  la.setEllipsis(1);
  Map<Label,LabelLimiter> mapLimiter=rtc.getState(RunTimeContext.StateKey.LABEL_LIMITER_LOOKUP_KEY);
  LabelLimiter lbLimiter=mapLimiter.get(getLabel());
  lbLimiter.computeWrapping(xs,la);
  int iTitileAnchor=getAnchor().getValue();
  EnumSet<LabelLimiter.Option> option=iTitileAnchor == Anchor.EAST || iTitileAnchor == Anchor.WEST ? EnumSet.of(LabelLimiter.Option.FIX_HEIGHT) : EnumSet.of(LabelLimiter.Option.FIX_WIDTH);
  LabelLimiter lbLimiterNew=lbLimiter.limitLabelSize(xs,la,option);
  mapLimiter.put(getLabel(),lbLimiterNew);
  return lbLimiterNew.getBounding(null);
}",0.7546174142480211
70410,"public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (oSource.equals(cmbAnchor)) {
    getBlockForProcessing().setAnchor(Anchor.getByName(LiteralHelper.anchorSet.getNameByDisplayName(cmbAnchor.getText())));
  }
 else   if (oSource.equals(cmbStretch)) {
    getBlockForProcessing().setStretch(Stretch.getByName(LiteralHelper.stretchSet.getNameByDisplayName(cmbStretch.getText())));
  }
}","public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (oSource.equals(cmbAnchor)) {
    boolean bAnchorVerticalOld=isAnchorVertical(getBlockForProcessing().getAnchor());
    getBlockForProcessing().setAnchor(Anchor.getByName(LiteralHelper.anchorSet.getNameByDisplayName(cmbAnchor.getText())));
    boolean bAnchorVerticalNew=isAnchorVertical(getBlockForProcessing().getAnchor());
    if (bAnchorVerticalOld != bAnchorVerticalNew) {
      double rotationOld=getBlockForProcessing().getLabel().getCaption().getFont().getRotation();
      double rotationNew=rotationOld >= 0 ? 90 - rotationOld : -90 - rotationOld;
      getBlockForProcessing().getLabel().getCaption().getFont().setRotation(rotationNew);
    }
  }
 else   if (oSource.equals(cmbStretch)) {
    getBlockForProcessing().setStretch(Stretch.getByName(LiteralHelper.stretchSet.getNameByDisplayName(cmbStretch.getText())));
  }
}",0.6246246246246246
70411,"private void switchDataSet(String datasetName) throws ChartException {
  if (isCubeMode()) {
    return;
  }
  try {
    tablePreview.clearContents();
    if (datasetName == null) {
      datasetName=getDataServiceProvider().getReportDataSet();
    }
    if (datasetName != null) {
      switchDataTable();
    }
 else {
      tablePreview.createDummyTable();
    }
    tablePreview.layout();
  }
 catch (  Throwable t) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,t);
  }
  DataDefinitionTextManager.getInstance().refreshAll();
  fireEvent(tablePreview,EVENT_PREVIEW);
}","private void switchDataSet(String datasetName) throws ChartException {
  if (isCubeMode()) {
    return;
  }
  try {
    tablePreview.clearContents();
    tableViewerColumns.setInput(null);
    if (datasetName == null) {
      datasetName=getDataServiceProvider().getReportDataSet();
    }
    if (datasetName != null) {
      switchDataTable();
    }
 else {
      tablePreview.createDummyTable();
    }
    tablePreview.layout();
  }
 catch (  Throwable t) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_BINDING,t);
  }
  DataDefinitionTextManager.getInstance().refreshAll();
  fireEvent(tablePreview,EVENT_PREVIEW);
}",0.9688249400479616
70412,"private void createDropDownComponent(){
  Point pLoc=UIHelper.getScreenLocation(btnDropDown.getParent());
  int iXLoc=pLoc.x;
  int iYLoc=pLoc.y + btnDropDown.getParent().getSize().y;
  int iShellWidth=MARKER_BLOCK_HEIGHT * MARKER_ROW_MAX_NUMBER + 15;
  int iShellHeight=150;
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  if (iXLoc + iShellWidth > this.getDisplay().getClientArea().width) {
    iXLoc=this.getDisplay().getClientArea().width - iShellWidth;
  }
  Shell shell=new Shell(this.getShell(),SWT.NONE);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  shell.setLocation(iXLoc,iYLoc);
  cmpDropDown=new MarkerDropDownEditorComposite(shell,SWT.NONE);
  shell.layout();
  shell.open();
}","private void createDropDownComponent(){
  Point pLoc=UIHelper.getScreenLocation(btnDropDown.getParent());
  int iXLoc=pLoc.x;
  int iYLoc=pLoc.y + btnDropDown.getParent().getSize().y;
  int iShellWidth=MARKER_BLOCK_HEIGHT * MARKER_ROW_MAX_NUMBER + 15;
  int iShellHeight=175;
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  if (iXLoc + iShellWidth > this.getDisplay().getClientArea().width) {
    iXLoc=this.getDisplay().getClientArea().width - iShellWidth;
  }
  Shell shell=new Shell(this.getShell(),SWT.NONE);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  shell.setLocation(iXLoc,iYLoc);
  cmpDropDown=new MarkerDropDownEditorComposite(shell,SWT.NONE);
  shell.layout();
  shell.open();
}",0.9986772486772488
70413,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  GridLayout glGapWidth=new GridLayout();
  glGapWidth.numColumns=8;
  glGapWidth.horizontalSpacing=5;
  glGapWidth.marginHeight=2;
  glGapWidth.marginWidth=2;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(2,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible((angleType == AngleType.X) && axis.isCategoryAxis());
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblOrientation=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLOrientation=new GridData(GridData.FILL);
  gdLBLOrientation.grabExcessVerticalSpace=false;
  lblOrientation.setLayoutData(gdLBLOrientation);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Label(cmpGeneral,SWT.SINGLE);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBOrientation.horizontalSpan=9;
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.setText(LiteralHelper.orientationSet.getDisplayNameByName(getAxisForProcessing().getOrientation().getName()));
  Label lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  lblGridStepNum=new Label(cmpGeneral,SWT.NONE);
  GridData gdLblGridStepNum=new GridData(GridData.FILL);
  lblGridStepNum.setLayoutData(gdLblGridStepNum);
  lblGridStepNum.setText(Messages.getString(""String_Node_Str""));
  majGridStNum=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    majGridStNum.setLayoutData(gd);
    majGridStNum.setMinimum(1);
    majGridStNum.setSelection(getAxisForProcessing().getScale().getMajorGridsStepNumber());
    majGridStNum.addSelectionListener(this);
  }
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMajorGrid();
  setStateOfMinorGrid();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(2,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible((angleType == AngleType.X) && axis.isCategoryAxis());
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  Label lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  lblGridStepNum=new Label(cmpGeneral,SWT.NONE);
  GridData gdLblGridStepNum=new GridData(GridData.FILL);
  lblGridStepNum.setLayoutData(gdLblGridStepNum);
  lblGridStepNum.setText(Messages.getString(""String_Node_Str""));
  majGridStNum=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    majGridStNum.setLayoutData(gd);
    majGridStNum.setMinimum(1);
    majGridStNum.setSelection(getAxisForProcessing().getScale().getMajorGridsStepNumber());
    majGridStNum.addSelectionListener(this);
  }
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMajorGrid();
  setStateOfMinorGrid();
  return cmpContent;
}",0.6011560693641619
70414,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,IQueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap) throws IOException, BirtException, DataException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    ILevelDefn[] levelInHier=null;
    if (hierhandle.getLevelCount() == 1)     levelInHier=new ILevelDefn[1];
 else     levelInHier=new ILevelDefn[hierhandle.getLevelCount() + 1];
    String[] leafLevelKeyColumn=new String[levels.size()];
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelKeys.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn[k]=level.getName();
      levelInHier[k]=CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys));
    }
    createLeafLevel(levels,levelInHier,leafLevelKeyColumn);
    iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier,stopSign));
  }
  return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,IQueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap) throws IOException, BirtException, DataException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    ILevelDefn[] levelInHier=null;
    if (hierhandle.getLevelCount() == 1)     levelInHier=new ILevelDefn[1];
 else     levelInHier=new ILevelDefn[hierhandle.getLevelCount() + 1];
    String[] leafLevelKeyColumn=new String[levels.size()];
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelKeys.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn[k]=level.getName();
      levelInHier[k]=CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys));
    }
    createLeafLevel(levels,levelInHier,leafLevelKeyColumn);
    Object rowLimit=appContext.get(DataEngine.MEMORY_DATA_SET_CACHE);
    if (rowLimit != null && !cubeHandle.getDataSet().getName().equals(hierhandle.getDataSet().getName())) {
      appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier,stopSign));
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,rowLimit);
    }
 else {
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext),levelInHier,stopSign));
    }
  }
  return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
}",0.8888427176397258
70415,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(padding,width));
  }
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(padding,width));
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
}",0.977892621303474
70416,"/** 
 * Drop embedded image.
 * @throws Exception
 */
public void testDrop() throws Exception {
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.ENGLISH);
  ReportDesignHandle designHandle=sessionHandle.openDesign(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ filename);
  SimpleValueHandle propHandle=(SimpleValueHandle)designHandle.getPropertyHandle(ReportDesign.IMAGES_PROP);
  EmbeddedImageHandle image1handle=(EmbeddedImageHandle)designHandle.findImage(""String_Node_Str"").getHandle(propHandle);
  EmbeddedImageHandle image2handle=(EmbeddedImageHandle)designHandle.findImage(""String_Node_Str"").getHandle(propHandle);
  image1handle.drop();
  List value=propHandle.getListValue();
  assertEquals(1,value.size());
  assertEquals(image2handle.getStructure(),value.get(0));
  assertNull(image1handle.getStructure());
  image2handle.drop();
  assertEquals(0,value.size());
  assertNull(image2handle.getStructure());
}","/** 
 * Drop embedded image.
 * @throws Exception
 */
public void testDrop() throws Exception {
  SessionHandle sessionHandle=DesignEngine.newSession(ULocale.ENGLISH);
  ReportDesignHandle designHandle=sessionHandle.openDesign(getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ filename);
  SimpleValueHandle propHandle=(SimpleValueHandle)designHandle.getPropertyHandle(ReportDesign.IMAGES_PROP);
  EmbeddedImageHandle image1handle=(EmbeddedImageHandle)designHandle.findImage(""String_Node_Str"").getHandle(propHandle);
  EmbeddedImageHandle image2handle=(EmbeddedImageHandle)designHandle.findImage(""String_Node_Str"").getHandle(propHandle);
  image1handle.drop();
  List value=propHandle.getListValue();
  assertEquals(1,value.size());
  assertEquals(image2handle.getStructure(),value.get(0));
  assertNull(image1handle.getStructure());
  image2handle.drop();
  List value1=propHandle.getListValue();
  assertEquals(0,value1.size());
  assertNull(image2handle.getStructure());
}",0.9784615384615384
70417,"/** 
 * Test parameters in joindataset
 * @throws Exception
 */
public void testParameter() throws Exception {
  openDesign(filename2);
  JointDataSetHandle jointds=designHandle.findJointDataSet(""String_Node_Str"");
  DataSetHandle ds1=designHandle.findDataSet(""String_Node_Str"");
  DataSetHandle ds2=designHandle.findDataSet(""String_Node_Str"");
  DataSetParameterHandle param1=(DataSetParameterHandle)ds1.parametersIterator().next();
  DataSetParameterHandle param2=(DataSetParameterHandle)ds2.parametersIterator().next();
  jointds.addDataSet(""String_Node_Str"");
  jointds.addDataSet(""String_Node_Str"");
  assertFalse(jointds.paramBindingsIterator().hasNext());
  List list=jointds.getListProperty(JointDataSet.DATA_SETS_PROP);
  assertSame(design.findDataSet(""String_Node_Str""),((ElementRefValue)list.get(0)).getElement());
  assertSame(design.findDataSet(""String_Node_Str""),((ElementRefValue)list.get(1)).getElement());
  assertEquals(""String_Node_Str"",param1.getName());
  assertEquals(""String_Node_Str"",param2.getName());
}","/** 
 * Test parameters in joindataset
 * @throws Exception
 */
public void testParameter() throws Exception {
  openDesign(filename2);
  JointDataSetHandle jointds=designHandle.findJointDataSet(""String_Node_Str"");
  DataSetHandle ds1=designHandle.findDataSet(""String_Node_Str"");
  DataSetHandle ds2=designHandle.findDataSet(""String_Node_Str"");
  DataSetParameterHandle param1=(DataSetParameterHandle)ds1.parametersIterator().next();
  DataSetParameterHandle param2=(DataSetParameterHandle)ds2.parametersIterator().next();
  jointds.addDataSet(""String_Node_Str"");
  jointds.addDataSet(""String_Node_Str"");
  assertFalse(jointds.paramBindingsIterator().hasNext());
  List list=jointds.getElement().getListProperty(design,JointDataSet.DATA_SETS_PROP);
  assertSame(design.findDataSet(""String_Node_Str""),((ElementRefValue)list.get(0)).getElement());
  assertSame(design.findDataSet(""String_Node_Str""),((ElementRefValue)list.get(1)).getElement());
  assertEquals(""String_Node_Str"",param1.getName());
  assertEquals(""String_Node_Str"",param2.getName());
}",0.9903660886319846
70418,"/** 
 * Returns a singleton instance of the plugin settings framework with specific configuration. Initializes the OSGi Platform framework to load chart extension bundles unless the STANDALONE flag was set in PlatformConfig property.
 * @return A singleton instance of the plugin settings framework
 */
public static synchronized PluginSettings instance(PlatformConfig config){
  if (ps == null) {
    ps=new PluginSettings();
    if (config != null) {
      ps.bStandalone=config.getProperty(PROP_STANDALONE) != null;
      String loggingDir=(String)config.getProperty(PROP_LOGGING_DIR);
      Level loggingLevel=(Level)config.getProperty(PROP_LOGGING_LEVEL);
      initFileLogger(loggingDir,loggingLevel);
    }
    if (!ps.bStandalone) {
      try {
        Platform.startup(config);
      }
 catch (      BirtException e) {
        logger.log(e);
      }
    }
  }
  return ps;
}","/** 
 * Returns a singleton instance of the plugin settings framework with specific configuration. Initializes the OSGi Platform framework to load chart extension bundles unless the STANDALONE flag was set in PlatformConfig property.
 * @return A singleton instance of the plugin settings framework
 */
public static synchronized PluginSettings instance(PlatformConfig config){
  if (ps == null) {
    ps=new PluginSettings();
    String loggingDir=null;
    Level loggingLevel=null;
    if (config != null) {
      ps.bStandalone=config.getProperty(PROP_STANDALONE) != null;
      loggingDir=(String)config.getProperty(PROP_LOGGING_DIR);
      loggingLevel=(Level)config.getProperty(PROP_LOGGING_LEVEL);
    }
    if (!ps.bStandalone) {
      try {
        Platform.startup(config);
      }
 catch (      BirtException e) {
        logger.log(e);
      }
    }
    ps.initFileLogger(loggingDir,loggingLevel);
  }
  return ps;
}",0.9088901159580344
70419,"private static void initFileLogger(String loggingDir,Level loggingLevel){
  if (loggingLevel != null && loggingLevel == Level.OFF) {
    return;
  }
  try {
    String dir=loggingDir != null ? loggingDir : ChartEnginePlugin.getInstance().getStateLocation().toOSString();
    JavaUtilLoggerImpl.initFileHandler(dir,loggingLevel);
  }
 catch (  SecurityException e) {
    logger.log(e);
  }
catch (  IOException e) {
    logger.log(e);
  }
}","private void initFileLogger(String loggingDir,Level loggingLevel){
  if (loggingLevel != null && loggingLevel == Level.OFF) {
    return;
  }
  try {
    String dir=null;
    if (loggingDir != null) {
      dir=loggingDir;
    }
 else     if (inEclipseEnv()) {
      dir=ChartEnginePlugin.getInstance().getStateLocation().toOSString();
    }
    if (dir != null) {
      JavaUtilLoggerImpl.initFileHandler(dir,loggingLevel);
    }
  }
 catch (  SecurityException e) {
    logger.log(e);
  }
catch (  IOException e) {
    logger.log(e);
  }
}",0.8693877551020408
70420,"protected void addCaption(String caption) throws BirtException {
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  ReportContent report=(ReportContent)content.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  StyleDeclaration style=new StyleDeclaration(report.getCSSEngine());
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  captionLabel.setInlineStyle(style);
  RowArea captionRow=new RowArea(getColumnCount());
  captionRow.setParent(this);
  captionRow.setWidth(width);
  CellArea captionCell=new CellArea();
  captionCell.setColSpan(getColumnCount());
  captionCell.setWidth(width);
  captionCell.setMaxAvaWidth(width);
  captionRow.children.add(captionCell);
  ILayout layout=new BlockTextArea(captionCell,context,captionLabel);
  layout.layout();
  int h=((BlockContainerArea)layout).getAllocatedHeight();
  captionCell.setHeight(h);
  captionRow.setHeight(h);
  add(captionRow);
  repeatList.add(captionRow);
  update(captionRow);
}","protected void addCaption(String caption) throws BirtException {
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  ReportContent report=(ReportContent)content.getReportContent();
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setText(caption);
  StyleDeclaration style=new StyleDeclaration(report.getCSSEngine());
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  captionLabel.setInlineStyle(style);
  RowArea captionRow=new RowArea(getColumnCount());
  captionRow.setParent(this);
  captionRow.setWidth(width);
  CellArea captionCell=new CellArea();
  captionCell.setColSpan(getColumnCount());
  captionCell.setWidth(width);
  captionCell.setMaxAvaWidth(width);
  captionRow.children.add(captionCell);
  ILayout layout=new BlockTextArea(captionCell,context,captionLabel);
  layout.layout();
  int h=((BlockContainerArea)layout).getAllocatedHeight();
  captionCell.setContentHeight(h);
  captionRow.setHeight(captionCell.getAllocatedHeight());
  add(captionRow);
  repeatList.add(captionRow);
  update(captionRow);
}",0.9813258636788048
70421,"private String[] getPreviewHeader(boolean isExpression) throws ChartException {
  String[] exps=getPreviewHeader();
  if (isExpression) {
    for (int i=0; i < exps.length; i++) {
      exps[i]=ExpressionUtil.createJSRowExpression(exps[i]);
    }
  }
  return exps;
}","private String[] getPreviewHeader(boolean isExpression) throws ChartException {
  ColumnBindingInfo[] cbis=getPreviewHeadersInfo();
  String[] exps=new String[cbis.length];
  int i=0;
  for (  ColumnBindingInfo cbi : cbis) {
    if (isExpression) {
      exps[i]=ExpressionUtil.createJSRowExpression(cbi.getName());
    }
 else {
      exps[i]=cbi.getName();
    }
    i++;
  }
  return exps;
}",0.5718608169440242
70422,"private void updateDragDataSource(){
  if (isCubeMode()) {
    stackLayout.topControl=cmpCubeTree;
    cubeTreeViewer.setInput(getCube());
  }
 else   if (getContext().isShowingDataPreview()) {
    boolean showDataPreview=true;
    try {
      if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
        showDataPreview=false;
      }
    }
 catch (    NullPointerException e) {
    }
catch (    ChartException e) {
      WizardBase.showException(e.getMessage());
    }
    if (showDataPreview) {
      stackLayout.topControl=cmpDataPreview;
      refreshTablePreview();
    }
 else {
      stackLayout.topControl=cmpColumnsList;
      refreshColumnsListView();
      getContext().setShowingDataPreview(false);
    }
  }
 else {
    stackLayout.topControl=cmpColumnsList;
    refreshColumnsListView();
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  cmpStack.layout();
}","private void updateDragDataSource(){
  if (isCubeMode()) {
    stackLayout.topControl=cmpCubeTree;
    cubeTreeViewer.setInput(getCube());
    cmpStack.layout();
    return;
  }
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(false);
    }
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    WizardBase.showException(e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}",0.5660377358490566
70423,"public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshTablePreview();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshTablePreview();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
ChartAdapter.beginIgnoreNotifications();
if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle((ExtendedItemHandle)itemHandle.getDataBindingReference()),getChartModel());
}
ChartAdapter.endIgnoreNotifications();
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(w.getSelection());
updateDragDataSource();
}
}
 catch (ChartException e1) {
WizardBase.showException(e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.data instanceof ISelectDataComponent) {
    if (event.type == IChartDataSheet.EVENT_QUERY && event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getBoundDataSet() != null || getDataServiceProvider().getReportDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(getDataServiceProvider().getReportDataSet() != null);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getBoundDataSet() != null && getDataServiceProvider().getBoundDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
ChartAdapter.beginIgnoreNotifications();
if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle((ExtendedItemHandle)itemHandle.getDataBindingReference()),getChartModel());
}
ChartAdapter.endIgnoreNotifications();
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
cmbDataItems.setVisibleItemCount(cmbDataItems.getItemCount());
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(w.getSelection());
updateDragDataSource();
}
}
 catch (ChartException e1) {
WizardBase.showException(e1.getLocalizedMessage());
}
}
}",0.9958743256109172
70424,"public void layout(IContent content) throws BirtException {
  visitChildren(content,this);
  int height=current.getHeight();
  int bp=current.getCurrentBP();
  if (height < bp) {
    current.setHeight(bp);
  }
}","public void layout(IContent content) throws BirtException {
  current.initialize();
  visitChildren(content,this);
  current.close();
}",0.6184971098265896
70425,"/** 
 * layout page header area
 */
protected void layoutHeader(){
  IContent headerContent=pageContent.getPageHeader();
  boolean autoPageBreak=context.isAutoPageBreak();
  context.setAutoPageBreak(false);
  RegionLayoutEngine rle=new RegionLayoutEngine(header,context);
  try {
    rle.layout(headerContent);
  }
 catch (  BirtException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  context.setAutoPageBreak(autoPageBreak);
}","/** 
 * layout page header area
 */
protected void layoutHeader(){
  IContent headerContent=pageContent.getPageHeader();
  DimensionType h=pageContent.getHeaderHeight();
  if (h == null) {
    h=new DimensionType(0.5f,DimensionType.UNITS_IN);
  }
  headerContent.setHeight(h);
  header.content=headerContent;
  boolean autoPageBreak=context.isAutoPageBreak();
  context.setAutoPageBreak(false);
  RegionLayoutEngine rle=new RegionLayoutEngine(header,context);
  try {
    rle.layout(headerContent);
  }
 catch (  BirtException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  context.setAutoPageBreak(autoPageBreak);
}",0.8239700374531835
70426,"public void setHeader(ContainerArea header){
  this.header=header;
}","public void setHeader(RegionArea header){
  this.header=header;
}",0.9172932330827068
70427,"protected void createRoot(){
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
  }
  pageContentWidth=getDimensionValue(pageContent,pageContent.getPageWidth());
  pageContentHeight=getDimensionValue(pageContent,pageContent.getPageHeight());
  if (pageContentWidth <= 0) {
    pageContentWidth=DEFAULT_PAGE_WIDTH;
  }
  if (pageContentHeight <= 0) {
    pageContentHeight=DEFAULT_PAGE_HEIGHT;
  }
  setWidth(pageContentWidth);
  setHeight(pageContentHeight);
  ContainerArea pageRoot=new BlockContainerArea();
  rootLeft=getDimensionValue(pageContent,pageContent.getMarginLeft(),pageContentWidth);
  rootTop=getDimensionValue(pageContent,pageContent.getMarginTop(),pageContentWidth);
  rootLeft=Math.max(0,rootLeft);
  rootLeft=Math.min(pageContentWidth,rootLeft);
  rootTop=Math.max(0,rootTop);
  rootTop=Math.min(pageContentHeight,rootTop);
  pageRoot.setPosition(rootLeft,rootTop);
  int rootRight=getDimensionValue(pageContent,pageContent.getMarginRight(),pageContentWidth);
  int rootBottom=getDimensionValue(pageContent,pageContent.getMarginBottom(),pageContentWidth);
  rootRight=Math.max(0,rootRight);
  rootBottom=Math.max(0,rootBottom);
  if (rootLeft + rootRight > pageContentWidth) {
    rootRight=0;
  }
  if (rootTop + rootBottom > pageContentHeight) {
    rootBottom=0;
  }
  rootWidth=pageContentWidth - rootLeft - rootRight;
  rootHeight=pageContentHeight - rootTop - rootBottom;
  pageRoot.setWidth(rootWidth);
  pageRoot.setHeight(rootHeight);
  setRoot(pageRoot);
  pageRoot.setParent(this);
  int headerHeight=getDimensionValue(pageContent,pageContent.getHeaderHeight(),pageRoot.getHeight());
  int headerWidth=pageRoot.getWidth();
  headerHeight=Math.max(0,headerHeight);
  headerHeight=Math.min(pageRoot.getHeight(),headerHeight);
  ContainerArea header=new BlockContainerArea();
  header.setHeight(headerHeight);
  header.setWidth(headerWidth);
  header.context=context;
  header.needClip=true;
  header.setPosition(0,0);
  pageRoot.addChild(header);
  setHeader(header);
  header.setParent(pageRoot);
  int footerHeight=getDimensionValue(pageContent,pageContent.getFooterHeight(),pageRoot.getHeight());
  int footerWidth=pageRoot.getWidth();
  footerHeight=Math.max(0,footerHeight);
  footerHeight=Math.min(pageRoot.getHeight() - headerHeight,footerHeight);
  ContainerArea footer=new BlockContainerArea();
  footer.setHeight(footerHeight);
  footer.setWidth(footerWidth);
  footer.context=context;
  footer.needClip=true;
  footer.setPosition(0,pageRoot.getHeight() - footerHeight);
  pageRoot.addChild(footer);
  setFooter(footer);
  footer.setParent(pageRoot);
  ContainerArea body=new BlockContainerArea();
  int bodyLeft=getDimensionValue(pageContent,pageContent.getLeftWidth(),pageRoot.getWidth());
  bodyLeft=Math.max(0,bodyLeft);
  bodyLeft=Math.min(pageRoot.getWidth(),bodyLeft);
  body.setPosition(bodyLeft,headerHeight);
  int bodyRight=getDimensionValue(pageContent,pageContent.getRightWidth(),pageRoot.getWidth());
  bodyRight=Math.max(0,bodyRight);
  bodyRight=Math.min(pageRoot.getWidth() - bodyLeft,bodyRight);
  body.setWidth(pageRoot.getWidth() - bodyLeft - bodyRight);
  body.setHeight(pageRoot.getHeight() - headerHeight - footerHeight);
  setBody(body);
  if (overFlowType == IPDFRenderOption.CLIP_CONTENT || overFlowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
    pageRoot.setNeedClip(true);
    body.setNeedClip(true);
  }
 else {
    pageRoot.setNeedClip(false);
  }
}","protected void createRoot(){
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
  }
  pageContentWidth=getDimensionValue(pageContent,pageContent.getPageWidth());
  pageContentHeight=getDimensionValue(pageContent,pageContent.getPageHeight());
  if (pageContentWidth <= 0) {
    pageContentWidth=DEFAULT_PAGE_WIDTH;
  }
  if (pageContentHeight <= 0) {
    pageContentHeight=DEFAULT_PAGE_HEIGHT;
  }
  setWidth(pageContentWidth);
  setHeight(pageContentHeight);
  ContainerArea pageRoot=new BlockContainerArea();
  rootLeft=getDimensionValue(pageContent,pageContent.getMarginLeft(),pageContentWidth);
  rootTop=getDimensionValue(pageContent,pageContent.getMarginTop(),pageContentWidth);
  rootLeft=Math.max(0,rootLeft);
  rootLeft=Math.min(pageContentWidth,rootLeft);
  rootTop=Math.max(0,rootTop);
  rootTop=Math.min(pageContentHeight,rootTop);
  pageRoot.setPosition(rootLeft,rootTop);
  int rootRight=getDimensionValue(pageContent,pageContent.getMarginRight(),pageContentWidth);
  int rootBottom=getDimensionValue(pageContent,pageContent.getMarginBottom(),pageContentWidth);
  rootRight=Math.max(0,rootRight);
  rootBottom=Math.max(0,rootBottom);
  if (rootLeft + rootRight > pageContentWidth) {
    rootRight=0;
  }
  if (rootTop + rootBottom > pageContentHeight) {
    rootBottom=0;
  }
  rootWidth=pageContentWidth - rootLeft - rootRight;
  rootHeight=pageContentHeight - rootTop - rootBottom;
  pageRoot.setWidth(rootWidth);
  pageRoot.setHeight(rootHeight);
  setRoot(pageRoot);
  pageRoot.setParent(this);
  int headerHeight=getDimensionValue(pageContent,pageContent.getHeaderHeight(),pageRoot.getHeight());
  int headerWidth=pageRoot.getWidth();
  headerHeight=Math.max(0,headerHeight);
  headerHeight=Math.min(pageRoot.getHeight(),headerHeight);
  RegionArea header=new RegionArea();
  header.setHeight(headerHeight);
  header.setWidth(headerWidth);
  header.context=context;
  header.needClip=true;
  header.setPosition(0,0);
  pageRoot.addChild(header);
  setHeader(header);
  header.setParent(pageRoot);
  int footerHeight=getDimensionValue(pageContent,pageContent.getFooterHeight(),pageRoot.getHeight());
  int footerWidth=pageRoot.getWidth();
  footerHeight=Math.max(0,footerHeight);
  footerHeight=Math.min(pageRoot.getHeight() - headerHeight,footerHeight);
  RegionArea footer=new RegionArea();
  footer.setHeight(footerHeight);
  footer.setWidth(footerWidth);
  footer.context=context;
  footer.needClip=true;
  footer.setPosition(0,pageRoot.getHeight() - footerHeight);
  pageRoot.addChild(footer);
  setFooter(footer);
  footer.setParent(pageRoot);
  ContainerArea body=new BlockContainerArea();
  int bodyLeft=getDimensionValue(pageContent,pageContent.getLeftWidth(),pageRoot.getWidth());
  bodyLeft=Math.max(0,bodyLeft);
  bodyLeft=Math.min(pageRoot.getWidth(),bodyLeft);
  body.setPosition(bodyLeft,headerHeight);
  int bodyRight=getDimensionValue(pageContent,pageContent.getRightWidth(),pageRoot.getWidth());
  bodyRight=Math.max(0,bodyRight);
  bodyRight=Math.min(pageRoot.getWidth() - bodyLeft,bodyRight);
  body.setWidth(pageRoot.getWidth() - bodyLeft - bodyRight);
  body.setHeight(pageRoot.getHeight() - headerHeight - footerHeight);
  setBody(body);
  if (overFlowType == IPDFRenderOption.CLIP_CONTENT || overFlowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
    pageRoot.setNeedClip(true);
    body.setNeedClip(true);
  }
 else {
    pageRoot.setNeedClip(false);
  }
}",0.9899338510209952
70428,"public void setFooter(ContainerArea footer){
  this.footer=footer;
}","public void setFooter(RegionArea footer){
  this.footer=footer;
}",0.9172932330827068
70429,"protected void update() throws BirtException {
  if (parent != null) {
    checkPageBreak();
    parent.update(this);
  }
}","protected void update() throws BirtException {
  if (context.isFixedLayout() && height > specifiedHeight && specifiedHeight > 0) {
    setHeight(specifiedHeight);
    setNeedClip(true);
  }
  if (parent != null) {
    checkPageBreak();
    parent.update(this);
  }
}",0.6323907455012854
70430,"public void close() throws DataException {
  if (this.resultSet != null) {
    this.resultSet.close();
    this.resultSet=null;
  }
  if (this.dataSetStream != null) {
    try {
      if (dataSetStream instanceof RAOutputStream) {
        ((RAOutputStream)dataSetStream).seek(rowCountOffset);
        IOUtil.writeInt(dataSetStream,rowCount);
      }
      OutputStream exprValueStream=this.streamsWrapper.getStreamManager().getOutStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      if (exprValueStream instanceof RAOutputStream) {
        ((RAOutputStream)exprValueStream).seek(0);
        IOUtil.writeInt(exprValueStream,rowCount);
      }
      dataSetStream.close();
    }
 catch (    Exception e) {
    }
    dataSetStream=null;
  }
  if (this.dataSetLenStream != null) {
    try {
      dataSetLenStream.close();
    }
 catch (    Exception e) {
    }
    dataSetLenStream=null;
  }
}","public void close() throws DataException {
  if (this.resultSet != null) {
    this.resultSet.close();
    this.resultSet=null;
  }
  if (this.dataSetStream != null) {
    try {
      if (dataSetStream instanceof RAOutputStream) {
        ((RAOutputStream)dataSetStream).seek(rowCountOffset);
        IOUtil.writeInt(dataSetStream,rowCount);
      }
      OutputStream exprValueStream=this.streamsWrapper.getStreamManager().getOutStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      if (exprValueStream instanceof RAOutputStream) {
        ((RAOutputStream)exprValueStream).seek(0);
        IOUtil.writeInt(exprValueStream,rowCount);
      }
      exprValueStream.close();
      dataSetStream.close();
    }
 catch (    Exception e) {
    }
    dataSetStream=null;
  }
  if (this.dataSetLenStream != null) {
    try {
      dataSetLenStream.close();
    }
 catch (    Exception e) {
    }
    dataSetLenStream=null;
  }
}",0.9837611314824516
70431,"public TextArea(String text,TextStyle style){
  this.text=text;
  this.style=style;
  this.height=(int)(style.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO);
}","public TextArea(TextStyle style){
  this.style=style;
  this.height=(int)(style.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO);
}",0.9079754601226994
70432,"private String calculateText(){
  if (textLength == 0) {
    return ""String_Node_Str"";
  }
 else {
    return text.substring(offset,offset + textLength);
  }
}","private String calculateText(){
  if (blankLine) {
    return ""String_Node_Str"";
  }
 else {
    return text.substring(offset,offset + textLength);
  }
}",0.9294871794871796
70433,"public DesignElementHandle createView(DesignElementHandle host) throws BirtException {
  ChartWithAxes cm=ChartWithAxesImpl.create();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getTitle().getLabel().getCaption().setValue(Messages.getString(""String_Node_Str""));
  SeriesDefinition sdBase=SeriesDefinitionImpl.create();
  sdBase.getSeriesPalette().shift(0);
  Series series=SeriesImpl.create();
  sdBase.getSeries().add(series);
  cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase);
  cm.getBaseAxes()[0].setCategoryAxis(true);
  SeriesDefinition sdOrth=SeriesDefinitionImpl.create();
  sdOrth.getSeriesPalette().shift(0);
  series=BarSeriesImpl.create();
  sdOrth.getSeries().add(series);
  cm.getOrthogonalAxes(cm.getBaseAxes()[0],true)[0].getSeriesDefinitions().add(sdOrth);
  ChartUIUtil.setSeriesName(cm);
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(""String_Node_Str"");
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(""String_Node_Str"");
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  String name=ReportPlugin.getDefault().getCustomName(ChartReportItemConstants.CHART_EXTENSION_NAME);
  ExtendedItemHandle itemHandle=host.getElementFactory().newExtendedItem(name,getViewName());
  itemHandle.getReportItem().setProperty(ChartReportItemUtil.PROPERTY_CHART,cm);
  return itemHandle;
}","public DesignElementHandle createView(DesignElementHandle host) throws BirtException {
  ChartWithAxes cm=ChartWithAxesImpl.create();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getTitle().getLabel().getCaption().setValue(Messages.getString(""String_Node_Str""));
  SeriesDefinition sdBase=SeriesDefinitionImpl.create();
  sdBase.getSeriesPalette().shift(0);
  Series series=SeriesImpl.create();
  sdBase.getSeries().add(series);
  cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase);
  cm.getBaseAxes()[0].setCategoryAxis(true);
  SeriesDefinition sdOrth=SeriesDefinitionImpl.create();
  sdOrth.getSeriesPalette().shift(0);
  series=BarSeriesImpl.create();
  sdOrth.getSeries().add(series);
  cm.getOrthogonalAxes(cm.getBaseAxes()[0],true)[0].getSeriesDefinitions().add(sdOrth);
  ChartUIUtil.setSeriesName(cm);
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(""String_Node_Str"");
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(""String_Node_Str"");
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  String name=ReportPlugin.getDefault().getCustomName(ChartReportItemConstants.CHART_EXTENSION_NAME);
  ExtendedItemHandle itemHandle=host.getElementFactory().newExtendedItem(name,ChartReportItemConstants.CHART_EXTENSION_NAME);
  itemHandle.getReportItem().setProperty(ChartReportItemUtil.PROPERTY_CHART,cm);
  return itemHandle;
}",0.9843918191603876
70434,"/** 
 * saveEditorContentsDE - saves the current editor contents to ROM using DE API
 * @param desHdl
 * @return true if updated else false.
 */
private boolean saveEditorContentsDE(DesignElementHandle desHdl){
  if (desHdl != null && getEditorText() != null) {
    try {
      if (cmbItemLastSelected != null) {
        String name=cmbItemLastSelected.getName();
        desHdl.setStringProperty(name,getEditorText());
        setEditorText(desHdl.getStringProperty(name));
      }
      selectionMap.put(getModel(),cmbExprListViewer.getSelection());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return false;
    }
  }
  return true;
}","/** 
 * saveEditorContentsDE - saves the current editor contents to ROM using DE API
 * @param desHdl
 * @return true if updated else false.
 */
private boolean saveEditorContentsDE(DesignElementHandle desHdl,boolean isSaveScript){
  if (desHdl != null && getEditorText() != null) {
    try {
      if (cmbItemLastSelected != null) {
        String name=cmbItemLastSelected.getName();
        desHdl.setStringProperty(name,getEditorText());
        if (!isSaveScript) {
          setEditorText(desHdl.getStringProperty(name));
        }
      }
      selectionMap.put(getModel(),cmbExprListViewer.getSelection());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return false;
    }
  }
  return true;
}",0.9559659090909092
70435,"/** 
 * Saves input code to model
 */
private void saveModel(){
  if (isCodeModified() && editObject instanceof DesignElementHandle && !isSaveScript) {
    saveEditorContentsDE((DesignElementHandle)editObject);
  }
  setIsModified(false);
  ((IFormPage)getParentEditor()).getEditor().editorDirtyStateChanged();
  firePropertyChange(PROP_DIRTY);
  SourceViewer viewer=getViewer();
  IUndoManager undoManager=viewer == null ? null : viewer.getUndoManager();
  if (undoManager != null) {
    undoManager.endCompoundChange();
  }
  cleanPoint=getUndoLevel();
}","/** 
 * Saves input code to model
 */
private void saveModel(){
  if (isCodeModified() && editObject instanceof DesignElementHandle) {
    saveEditorContentsDE((DesignElementHandle)editObject,isSaveScript);
  }
  setIsModified(false);
  ((IFormPage)getParentEditor()).getEditor().editorDirtyStateChanged();
  firePropertyChange(PROP_DIRTY);
  SourceViewer viewer=getViewer();
  IUndoManager undoManager=viewer == null ? null : viewer.getUndoManager();
  if (undoManager != null) {
    undoManager.endCompoundChange();
  }
  cleanPoint=getUndoLevel();
}",0.9729241877256316
70436,"public void dispose(){
  outlineBackup.dispose();
  dataBackup.dispose();
  List list=new ArrayList(pages);
  int size=list.size();
  for (int i=0; i < size; i++) {
    Object obj=list.get(i);
    if (obj instanceof IReportEditorPage) {
      ((IReportEditorPage)obj).dispose();
      pages.remove(obj);
    }
  }
  if (fPalettePage != null) {
    fPalettePage.dispose();
  }
  if (outlinePage != null) {
    outlinePage.dispose();
  }
  if (dataPage != null) {
    dataPage.dispose();
  }
  getSite().setSelectionProvider(null);
  ReportMediator.removeGlobalColleague(this);
  if (getModel() != null) {
    getModel().close();
  }
  IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
  if (synchronizer != null) {
    synchronizer.removeListener(IReportResourceChangeEvent.LibraySaveChange,this);
  }
  PlatformUI.getWorkbench().removeWindowListener(windowListener);
  if (prefs != null) {
    prefs.removePreferenceChangeListener(preferenceChangeListener);
  }
  super.dispose();
}","public void dispose(){
  outlineBackup.dispose();
  dataBackup.dispose();
  List list=new ArrayList(pages);
  int size=list.size();
  for (int i=0; i < size; i++) {
    Object obj=list.get(i);
    if (obj instanceof IReportEditorPage) {
      ((IReportEditorPage)obj).dispose();
      pages.remove(obj);
    }
  }
  if (fPalettePage != null) {
    fPalettePage.dispose();
  }
  if (outlinePage != null) {
    outlinePage.dispose();
  }
  if (dataPage != null) {
    dataPage.dispose();
  }
  getSite().setSelectionProvider(null);
  ReportMediator.removeGlobalColleague(this);
  if (getModel() != null) {
    getModel().close();
  }
  IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
  if (synchronizer != null) {
    synchronizer.removeListener(IReportResourceChangeEvent.LibraySaveChange | IReportResourceChangeEvent.ImageResourceChange,this);
  }
  PlatformUI.getWorkbench().removeWindowListener(windowListener);
  if (prefs != null) {
    prefs.removePreferenceChangeListener(preferenceChangeListener);
  }
  super.dispose();
}",0.9768321513002364
70437,"public TextAreaLayout(ContainerArea parent,LayoutContext context,IContent content){
  parentLM=(InlineStackingArea)parent;
  ITextContent textContent=(ITextContent)content;
  String text=textContent.getText();
  if (text != null) {
    if (text.length() == 0)     textContent.setText(""String_Node_Str"");
 else     transform(textContent);
  }
  this.textContent=textContent;
  comp=new TextCompositor(textContent,context.getFontManager(),context);
  ContainerArea ancestor=parentLM;
  do {
    if (null == ancestor) {
      comp.setNewLineStatus(true);
      return;
    }
    if (!ancestor.isEmpty()) {
      comp.setNewLineStatus(false);
      return;
    }
    if (ancestor instanceof LineArea) {
      comp.setNewLineStatus(ancestor.isEmpty());
      return;
    }
    ancestor=ancestor.getParent();
  }
 while (true);
}","public TextAreaLayout(ContainerArea parent,LayoutContext context,IContent content){
  parentLM=(InlineStackingArea)parent;
  ITextContent textContent=(ITextContent)content;
  String text=textContent.getText();
  if (text != null && text.length() != 0)   transform(textContent);
 else   textContent.setText(""String_Node_Str"");
  this.textContent=textContent;
  comp=new TextCompositor(textContent,context.getFontManager(),context);
  ContainerArea ancestor=parentLM;
  do {
    if (null == ancestor) {
      comp.setNewLineStatus(true);
      return;
    }
    if (!ancestor.isEmpty()) {
      comp.setNewLineStatus(false);
      return;
    }
    if (ancestor instanceof LineArea) {
      comp.setNewLineStatus(ancestor.isEmpty());
      return;
    }
    ancestor=ancestor.getParent();
  }
 while (true);
}",0.9239263803680982
70438,"/** 
 * return all emitter info through BIRT engine emitter extension
 * @return all emitter info through BIRT engine emitter extension
 */
public EmitterInfo[] getEmitterInfo(){
  return extensionMgr.getEmitterInfo();
}","/** 
 * return all emitter info through BIRT engine emitter extension. If there are several emitters for a same format, then the default emitter specified by EngineConfig is used, if no default emitter is specified in EngineConfig, then the first emitter is used.
 * @return all emitter info through BIRT engine emitter extension
 */
public EmitterInfo[] getEmitterInfo(){
  if (emitterInfos == null) {
    EngineConfig config=engine.getConfig();
    Map<String,EmitterInfo> emitters=new HashMap<String,EmitterInfo>();
    EmitterInfo[] tempEmitterInfo=extensionMgr.getEmitterInfo();
    for (    EmitterInfo emitterInfo : tempEmitterInfo) {
      String format=emitterInfo.getFormat();
      String id=emitterInfo.getID();
      if (!emitters.containsKey(format) || id.equals(config.getDefaultEmitter(format))) {
        emitters.put(format,emitterInfo);
      }
    }
    emitterInfos=new EmitterInfo[emitters.size()];
    emitters.values().toArray(emitterInfos);
    for (    EmitterInfo emitterInfo : emitterInfos) {
      String format=emitterInfo.getFormat();
      String id=emitterInfo.getID();
      String defaultEmitter=config.getDefaultEmitter(format);
      if (defaultEmitter != null && !defaultEmitter.equals(id)) {
        logger.log(Level.WARNING,""String_Node_Str"" + defaultEmitter + ""String_Node_Str""+ id+ ""String_Node_Str""+ format+ ""String_Node_Str"");
      }
    }
  }
  return emitterInfos;
}",0.2608695652173913
70439,"/** 
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @param dStart
 * @param dEnd
 * @param bConsiderStartEndLabels
 * @param aax
 */
public final int computeTicks(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation,double dStart,double dEnd,boolean bConsiderStartLabel,boolean bConsiderEndLabel,AllAxes aax) throws ChartException {
  boolean bMaxIsNotIntegralMultipleOfStep=false;
  int nTicks=0;
  double dLength=0;
  double dTickGap=0;
  int iDirection=(iScaleDirection == AUTO) ? ((iOrientation == HORIZONTAL) ? FORWARD : BACKWARD) : iScaleDirection;
  if (bConsiderStartLabel || bConsiderEndLabel) {
    computeAxisStartEndShifts(xs,la,iOrientation,iLabelLocation,aax);
    if (!bLabelWithinAxes && bConsiderStartLabel) {
      double dNewStart=dStart + dStartShift * iDirection;
      if (dEnd > dStart && dNewStart > dEnd - 1) {
        dNewStart=dEnd - 1;
      }
 else       if (dEnd < dStart && dNewStart < dEnd + 1) {
        dNewStart=dEnd + 1;
      }
      dStartShift=(dNewStart - dStart) / iDirection;
      dStart=dNewStart;
    }
    if (bConsiderEndLabel) {
      double dNewEnd=dEnd + dEndShift * -iDirection;
      if (dEnd > dStart && dNewEnd < dStart + 1) {
        dNewEnd=dStart + 1;
      }
 else       if (dEnd < dStart && dNewEnd > dStart - 1) {
        dNewEnd=dStart - 1;
      }
      dEndShift=(dNewEnd - dEnd) / -iDirection;
      dEnd=dNewEnd;
    }
  }
  this.dStart=dStart;
  this.dEnd=dEnd;
  if (isSetFactor()) {
    double step=Methods.asDouble(getStep()).doubleValue();
    dTickGap=step / getFactor();
    int stepNum=(int)(Math.abs(dStart - dEnd) / dTickGap);
    AxisTickCoordinates atc=new AxisTickCoordinates(stepNum + 1,dStart,dStart < dEnd ? dStart + dTickGap * stepNum : dStart - dTickGap * stepNum,dTickGap * iDirection,true);
    setTickCordinates(atc);
    checkTickLabelsVisibility(xs,la,iLabelLocation);
    return stepNum + 1;
  }
  nTicks=getTickCount();
  dLength=Math.abs(dStart - dEnd);
  if (!bCategoryScale && (iType & NUMERICAL) == NUMERICAL && (iType & LINEAR) == LINEAR) {
    double dMax=asDouble(oMaximum).doubleValue();
    double dMin=asDouble(oMinimum).doubleValue();
    double dStep=asDouble(oStep).doubleValue();
    bMaxIsNotIntegralMultipleOfStep=!ChartUtil.mathEqual(dMax / dStep,(int)(dMax / dStep));
    if (bStepFixed && oStepNumber != null) {
      dTickGap=dLength / (oStepNumber.intValue()) * iDirection;
    }
 else {
      double dStepSize=asDouble(oStep).doubleValue();
      dTickGap=Math.min(Math.abs(dStepSize / (dMax - dMin) * dLength),dLength) * iDirection;
    }
  }
 else {
    if (isTickBetweenCategories()) {
      dTickGap=dLength / (nTicks - 1) * iDirection;
    }
 else {
      dTickGap=dLength / (nTicks - 2) * iDirection;
    }
  }
  if (nTicks > TICKS_MAX && bStepFixed && !bCategoryScale) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  AxisTickCoordinates atc=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!bCategoryScale || isTickBetweenCategories());
  setTickCordinates(null);
  setEndPoints(dStart,dEnd);
  setTickCordinates(atc);
  if (bStepFixed && oStepNumber == null && (nTicks > 2) && bMaxIsNotIntegralMultipleOfStep) {
    if (!checkFit(xs,la,iLabelLocation)) {
      nTicks--;
      AxisTickCoordinates atc1=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!bCategoryScale || isTickBetweenCategories());
      setTickCordinates(null);
      setTickCordinates(atc1);
    }
  }
  checkTickLabelsVisibility(xs,la,iLabelLocation);
  return nTicks;
}","/** 
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @param dStart
 * @param dEnd
 * @param bConsiderStartEndLabels
 * @param aax
 */
public final int computeTicks(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation,double dStart,double dEnd,boolean bConsiderStartLabel,boolean bConsiderEndLabel,AllAxes aax) throws ChartException {
  boolean bMaxIsNotIntegralMultipleOfStep=false;
  int nTicks=0;
  double dLength=0;
  double dTickGap=0;
  int iDirection=(iScaleDirection == AUTO) ? ((iOrientation == HORIZONTAL) ? FORWARD : BACKWARD) : iScaleDirection;
  if (bConsiderStartLabel || bConsiderEndLabel) {
    computeAxisStartEndShifts(xs,la,iOrientation,iLabelLocation,aax);
    if (!bLabelWithinAxes && bConsiderStartLabel) {
      double dNewStart=dStart + dStartShift * iDirection;
      if (dEnd > dStart && dNewStart > dEnd - 1) {
        dNewStart=dEnd - 1;
      }
 else       if (dEnd < dStart && dNewStart < dEnd + 1) {
        dNewStart=dEnd + 1;
      }
      dStartShift=(dNewStart - dStart) / iDirection;
      dStart=dNewStart;
    }
    if (bConsiderEndLabel) {
      double dNewEnd=dEnd + dEndShift * -iDirection;
      if (dEnd > dStart && dNewEnd < dStart + 1) {
        dNewEnd=dStart + 1;
      }
 else       if (dEnd < dStart && dNewEnd > dStart - 1) {
        dNewEnd=dStart - 1;
      }
      dEndShift=(dNewEnd - dEnd) / -iDirection;
      dEnd=dNewEnd;
    }
  }
  this.dStart=dStart;
  this.dEnd=dEnd;
  if (isSetFactor()) {
    double step=Methods.asDouble(getStep()).doubleValue();
    dTickGap=step / getFactor();
    int stepNum=(int)(Math.abs(dStart - dEnd) / dTickGap);
    AxisTickCoordinates atc=new AxisTickCoordinates(stepNum + 1,dStart,dStart < dEnd ? dStart + dTickGap * stepNum : dStart - dTickGap * stepNum,dTickGap * iDirection,true);
    setTickCordinates(atc);
    checkTickLabelsVisibility(xs,la,iLabelLocation,iOrientation);
    return stepNum + 1;
  }
  nTicks=getTickCount();
  dLength=Math.abs(dStart - dEnd);
  if (!bCategoryScale && (iType & NUMERICAL) == NUMERICAL && (iType & LINEAR) == LINEAR) {
    double dMax=asDouble(oMaximum).doubleValue();
    double dMin=asDouble(oMinimum).doubleValue();
    double dStep=asDouble(oStep).doubleValue();
    bMaxIsNotIntegralMultipleOfStep=!ChartUtil.mathEqual(dMax / dStep,(int)(dMax / dStep));
    if (bStepFixed && oStepNumber != null) {
      dTickGap=dLength / (oStepNumber.intValue()) * iDirection;
    }
 else {
      double dStepSize=asDouble(oStep).doubleValue();
      dTickGap=Math.min(Math.abs(dStepSize / (dMax - dMin) * dLength),dLength) * iDirection;
    }
  }
 else {
    if (isTickBetweenCategories()) {
      dTickGap=dLength / (nTicks - 1) * iDirection;
    }
 else {
      dTickGap=dLength / (nTicks - 2) * iDirection;
    }
  }
  if (nTicks > TICKS_MAX && bStepFixed && !bCategoryScale) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  AxisTickCoordinates atc=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!bCategoryScale || isTickBetweenCategories());
  setTickCordinates(null);
  setEndPoints(dStart,dEnd);
  setTickCordinates(atc);
  if (bStepFixed && oStepNumber == null && (nTicks > 2) && bMaxIsNotIntegralMultipleOfStep) {
    if (!checkFit(xs,la,iLabelLocation)) {
      nTicks--;
      AxisTickCoordinates atc1=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!bCategoryScale || isTickBetweenCategories());
      setTickCordinates(null);
      setTickCordinates(atc1);
    }
  }
  checkTickLabelsVisibility(xs,la,iLabelLocation,iOrientation);
  return nTicks;
}",0.9963948973932336
70440,"/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @return
 * @throws ChartException
 */
final protected void checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  hmComputedLabelText=new HashMap<Integer,String>();
  boolean vis=la.isSetVisible() && la.isVisible();
  if (!vis && rtc.getSharedScale() != null) {
    vis=true;
  }
  boolean staggerEnabled=isAxisLabelStaggered();
  this.staggeredHelper=StaggeredHelper.createInstance(staggerEnabled,atcTickCoordinates.size(),iLabelShowingInterval);
  this.labelVisHelper=LabelVisibleHelper.createInstance(vis,isCategoryScale(),atcTickCoordinates.size(),iLabelShowingInterval);
  if (!vis || !isCategoryScale()) {
    return;
  }
  DataSetIterator dsi=getData();
  dsi.reset();
  final int iDateTimeUnit=(iType == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
  dsi.reset();
  CateLabVisTester tester=this.createCateLabVisTester(xs,la,iLabelLocation);
  EllipsisHelper eHelper=new EllipsisHelper(tester,la.getEllipsis());
  int start_id=isTickBetweenCategories() ? 0 : 1;
  RotatedRectangle rrPrev[]=new RotatedRectangle[2];
  double dStep=Math.abs(atcTickCoordinates.getStep() * dZoomFactor);
  int indexStep=dStep > 1 ? 1 : (int)(1d / dStep);
  for (int i=start_id; i < atcTickCoordinates.size() - 1; i+=indexStep) {
    Object oValue=null;
    if (dsi.hasNext()) {
      oValue=dsi.next();
    }
    if (labelVisHelper.shouldTickLabelVisible(i)) {
      double x=0, y=0;
      String sText=formatCategoryValue(iType,oValue,iDateTimeUnit);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      RotatedRectangle rrCurr=null;
      int arrayIndex=isAxisLabelStaggered() && isTickLabelStaggered(i) ? 1 : 0;
      boolean bVis;
      if (rrPrev[arrayIndex] == null) {
        rrCurr=computePolygon(xs,iLabelLocation,la,x,y);
        bVis=true;
      }
 else {
        tester.setFPara(rrPrev[arrayIndex],x,y);
        bVis=eHelper.checkLabelEllipsis(sText,null);
        rrCurr=tester.getCurrentRR();
      }
      if (bVis) {
        labelVisHelper.addVisible(i);
        rrPrev[arrayIndex]=rrCurr;
        hmComputedLabelText.put(i,la.getCaption().getValue());
      }
    }
  }
}","/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @return
 * @throws ChartException
 */
final protected void checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation) throws ChartException {
  hmComputedLabelText=new HashMap<Integer,String>();
  boolean vis=la.isSetVisible() && la.isVisible();
  if (!vis && rtc.getSharedScale() != null) {
    vis=true;
  }
  boolean staggerEnabled=isAxisLabelStaggered();
  this.staggeredHelper=StaggeredHelper.createInstance(staggerEnabled,atcTickCoordinates.size(),iLabelShowingInterval);
  this.labelVisHelper=LabelVisibleHelper.createInstance(vis,isCategoryScale(),atcTickCoordinates.size(),iLabelShowingInterval);
  if (!vis || !isCategoryScale()) {
    return;
  }
  DataSetIterator dsi=getData();
  dsi.reset();
  final int iDateTimeUnit=(iType == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
  dsi.reset();
  CateLabVisTester tester=this.createCateLabVisTester(xs,la,iLabelLocation);
  EllipsisHelper eHelper=new EllipsisHelper(tester,la.getEllipsis());
  int start_id=isTickBetweenCategories() ? 0 : 1;
  RotatedRectangle rrPrev[]=new RotatedRectangle[2];
  double dStep=Math.abs(atcTickCoordinates.getStep() * dZoomFactor);
  int indexStep=dStep > 1 ? 1 : (int)(1d / dStep);
  double dUnitSize=getUnitSize();
  int iCount=atcTickCoordinates.size();
  for (int i=start_id; i < iCount; i+=indexStep) {
    Object oValue=null;
    double blankSize=dUnitSize * (iCount - i);
    if (dsi.hasNext()) {
      oValue=dsi.next();
    }
    if (labelVisHelper.shouldTickLabelVisible(i)) {
      double x=0, y=0;
      String sText=formatCategoryValue(iType,oValue,iDateTimeUnit);
      if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
        x=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
 else       if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
        y=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
      }
      la.getCaption().setValue(sText);
      RotatedRectangle rrCurr=null;
      int arrayIndex=isAxisLabelStaggered() && isTickLabelStaggered(i) ? 1 : 0;
      boolean bVis;
      if (rrPrev[arrayIndex] == null) {
        rrCurr=computePolygon(xs,iLabelLocation,la,x,y);
        bVis=true;
      }
 else {
        tester.setFPara(rrPrev[arrayIndex],x,y);
        bVis=eHelper.checkLabelEllipsis(sText,null);
        rrCurr=tester.getCurrentRR();
      }
      if (bVis) {
        if (iOrientation == HORIZONTAL) {
          bVis=rrCurr.getBounds().getWidth() / 2 < blankSize;
        }
 else {
          bVis=rrCurr.getBounds().getHeight() / 2 < blankSize;
        }
      }
      if (bVis) {
        labelVisHelper.addVisible(i);
        rrPrev[arrayIndex]=rrCurr;
        hmComputedLabelText.put(i,la.getCaption().getValue());
      }
    }
  }
}",0.9267930137495356
70441,"/** 
 * @see AbstractTextEditor#doSave(IProgressMonitor)
 */
public void doSave(IProgressMonitor monitor){
  saveModel();
}","public void doSave(IProgressMonitor monitor,boolean chnageText){
  isSaveScript=!chnageText;
  saveModel();
  isSaveScript=false;
}",0.4881889763779528
70442,"/** 
 * Saves input code to model
 */
private void saveModel(){
  if (isCodeModified() && editObject instanceof DesignElementHandle) {
    saveEditorContentsDE((DesignElementHandle)editObject);
  }
  setIsModified(false);
  ((IFormPage)getParentEditor()).getEditor().editorDirtyStateChanged();
  firePropertyChange(PROP_DIRTY);
  SourceViewer viewer=getViewer();
  IUndoManager undoManager=viewer == null ? null : viewer.getUndoManager();
  if (undoManager != null) {
    undoManager.endCompoundChange();
  }
  cleanPoint=getUndoLevel();
}","/** 
 * Saves input code to model
 */
private void saveModel(){
  if (isCodeModified() && editObject instanceof DesignElementHandle && !isSaveScript) {
    saveEditorContentsDE((DesignElementHandle)editObject);
  }
  setIsModified(false);
  ((IFormPage)getParentEditor()).getEditor().editorDirtyStateChanged();
  firePropertyChange(PROP_DIRTY);
  SourceViewer viewer=getViewer();
  IUndoManager undoManager=viewer == null ? null : viewer.getUndoManager();
  if (undoManager != null) {
    undoManager.endCompoundChange();
  }
  cleanPoint=getUndoLevel();
}",0.9844748858447488
70443,"public void doSave(IProgressMonitor monitor){
  jsEditor.doSave(monitor);
  IReportProvider provider=getProvider();
  if (provider != null) {
    provider.saveReport(getReportModel(),getEditorInput(),monitor);
    firePropertyChange(PROP_DIRTY);
  }
  markPageStale(IPageStaleType.NONE);
  getEditor().editorDirtyStateChanged();
  UIUtil.doFinishSava(getReportModel());
}","public void doSave(IProgressMonitor monitor){
  if (jsEditor instanceof JSEditor) {
    ((JSEditor)jsEditor).doSave(monitor,false);
  }
 else {
    jsEditor.doSave(monitor);
  }
  IReportProvider provider=getProvider();
  if (provider != null) {
    provider.saveReport(getReportModel(),getEditorInput(),monitor);
    firePropertyChange(PROP_DIRTY);
  }
  markPageStale(IPageStaleType.NONE);
  getEditor().editorDirtyStateChanged();
  UIUtil.doFinishSava(getReportModel());
}",0.8723404255319149
70444,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
  previouPage=prePage;
  IMediatorState state=SessionHandleAdapter.getInstance().getMediator().getCurrentState();
  ReportRequest request=new ReportRequest(state.getSource());
  List list=state.getSelectionObject();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
  jsEditor.setFocus();
  previouPage=prePage;
  IMediatorState state=SessionHandleAdapter.getInstance().getMediator().getCurrentState();
  ReportRequest request=new ReportRequest(state.getSource());
  List list=state.getSelectionObject();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}",0.9824828636709824
70445,"/** 
 * @param glURL
 * @param glParameter
 */
private void createURLComposite(Composite parent){
  GridLayout gl=(GridLayout)parent.getLayout();
  gl.numColumns=2;
  Label lblTarget=new Label(parent,SWT.NONE);
  GridData gdLBLTarget=new GridData();
  gdLBLTarget.horizontalIndent=2;
  lblTarget.setLayoutData(gdLBLTarget);
  lblTarget.setText(Messages.getString(""String_Node_Str""));
  fTxtHyperlinkLabel=new Text(parent,SWT.BORDER);
  GridData gdTXTTarget=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTTarget.widthHint=80;
  fTxtHyperlinkLabel.setLayoutData(gdTXTTarget);
  AssistField af=new TextAssistField(fTxtHyperlinkLabel,null){
    private boolean fIsDuplicate=false;
    public boolean isValid(){
      fIsDuplicate=false;
      String text=fTxtHyperlinkLabel.getText();
      if (text == null || ""String_Node_Str"".equals(text.trim())) {
        return false;
      }
      if (fExistingLabels != null && fExistingLabels.contains(fTxtHyperlinkLabel.getText())) {
        fIsDuplicate=true;
        return false;
      }
      return true;
    }
    public boolean isRequiredField(){
      return true;
    }
    public String getErrorMessage(){
      if (fIsDuplicate) {
        return Messages.getString(""String_Node_Str"");
      }
      return Messages.getString(""String_Node_Str"");
    }
  }
;
  FieldAssistHelper.getInstance().addRequiredFieldIndicator(af,lblTarget);
  Label lblBaseURL=new Label(parent,SWT.NONE);
  GridData gdLBLBaseURL=new GridData();
  gdLBLBaseURL.horizontalIndent=2;
  lblBaseURL.setLayoutData(gdLBLBaseURL);
  lblBaseURL.setText(Messages.getString(""String_Node_Str""));
  fBtnBaseURL=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    fBtnBaseURL.setLayoutData(gd);
    fBtnBaseURL.setText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.addSelectionListener(this);
    fBtnBaseURL.setEnabled(fContext.getUIServiceProvider().isInvokingSupported());
  }
  Label lblDefine=new Label(parent,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    lblDefine.setLayoutData(gd);
    lblDefine.setText(Messages.getString(""String_Node_Str""));
  }
  fBtnAdvanced=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    fBtnAdvanced.setLayoutData(gd);
    fBtnAdvanced.setText(getAdvancedButtonText(bAdvanced));
    fBtnAdvanced.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnAdvanced.addSelectionListener(this);
    fBtnAdvanced.setEnabled(fbEnableURLParameters);
  }
  fGrpParameters=new Group(parent,SWT.NONE);
  GridData gdGRPParameters=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPParameters.horizontalSpan=3;
  fGrpParameters.setLayoutData(gdGRPParameters);
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  fGrpParameters.setLayout(glParameter);
  fGrpParameters.setText(Messages.getString(""String_Node_Str""));
  fGrpParameters.setVisible(bAdvanced);
  StyledText stParameters=new StyledText(fGrpParameters,SWT.WRAP | SWT.READ_ONLY);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    stParameters.setLayoutData(gd);
    stParameters.setText(Messages.getString(""String_Node_Str""));
    StyleRange[] sr={new StyleRange(0,4,parent.getForeground(),parent.getBackground(),SWT.ITALIC),new StyleRange(4,stParameters.getText().length() - 4,parent.getForeground(),parent.getBackground(),SWT.NORMAL)};
    stParameters.setStyleRanges(sr);
    stParameters.setBackground(parent.getBackground());
  }
  Label lblBaseParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLBaseParm=new GridData();
    gdLBLBaseParm.horizontalIndent=2;
    lblBaseParm.setLayoutData(gdLBLBaseParm);
    lblBaseParm.setText(Messages.getString(""String_Node_Str""));
    lblBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtBaseParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTBaseParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTBaseParm.horizontalSpan=2;
  fTxtBaseParm.setLayoutData(gdTXTBaseParm);
  fTxtBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtBaseParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_CATEGORY_SERIES) != TriggerDataComposite.DISABLE_CATEGORY_SERIES));
  Label lblValueParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLValueParm=new GridData();
    gdLBLValueParm.horizontalIndent=2;
    lblValueParm.setLayoutData(gdLBLValueParm);
    lblValueParm.setText(Messages.getString(""String_Node_Str""));
    lblValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtValueParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTValueParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTValueParm.horizontalSpan=2;
  fTxtValueParm.setLayoutData(gdTXTValueParm);
  fTxtValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtValueParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES) != TriggerDataComposite.DISABLE_VALUE_SERIES));
  Label lblSeriesParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLSeriesParm=new GridData();
    gdLBLSeriesParm.horizontalIndent=2;
    lblSeriesParm.setLayoutData(gdLBLSeriesParm);
    lblSeriesParm.setText(Messages.getString(""String_Node_Str""));
    lblSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtSeriesParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTSeriesParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSeriesParm.horizontalSpan=2;
  fTxtSeriesParm.setLayoutData(gdTXTSeriesParm);
  fTxtSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtSeriesParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES_NAME) != TriggerDataComposite.DISABLE_VALUE_SERIES_NAME));
}","/** 
 * @param glURL
 * @param glParameter
 */
private void createURLComposite(Composite parent){
  GridLayout gl=(GridLayout)parent.getLayout();
  gl.numColumns=2;
  Label lblTarget=new Label(parent,SWT.NONE);
  GridData gdLBLTarget=new GridData();
  gdLBLTarget.horizontalIndent=2;
  lblTarget.setLayoutData(gdLBLTarget);
  lblTarget.setText(Messages.getString(""String_Node_Str""));
  fTxtHyperlinkLabel=new Text(parent,SWT.BORDER);
  GridData gdTXTTarget=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTTarget.widthHint=80;
  fTxtHyperlinkLabel.setLayoutData(gdTXTTarget);
  AssistField af=new TextAssistField(fTxtHyperlinkLabel,null){
    private boolean fIsDuplicate=false;
    public boolean isValid(){
      fIsDuplicate=false;
      String text=fTxtHyperlinkLabel.getText();
      if (text == null || ""String_Node_Str"".equals(text.trim())) {
        return false;
      }
      if (fExistingLabels != null && fExistingLabels.contains(fTxtHyperlinkLabel.getText())) {
        fIsDuplicate=true;
        return false;
      }
      return true;
    }
    public boolean isRequiredField(){
      return true;
    }
    public String getErrorMessage(){
      if (fIsDuplicate) {
        return Messages.getString(""String_Node_Str"");
      }
      return Messages.getString(""String_Node_Str"");
    }
  }
;
  FieldAssistHelper.getInstance().addRequiredFieldIndicator(af,lblTarget);
  Label lblBaseURL=new Label(parent,SWT.NONE);
  GridData gdLBLBaseURL=new GridData();
  gdLBLBaseURL.horizontalIndent=2;
  lblBaseURL.setLayoutData(gdLBLBaseURL);
  lblBaseURL.setText(Messages.getString(""String_Node_Str""));
  fBtnBaseURL=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    fBtnBaseURL.setLayoutData(gd);
    fBtnBaseURL.setText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.addSelectionListener(this);
    fBtnBaseURL.setEnabled(fContext.getUIServiceProvider().isInvokingSupported());
  }
  Label lblDefine=new Label(parent,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    lblDefine.setLayoutData(gd);
    lblDefine.setText(Messages.getString(""String_Node_Str""));
  }
  fBtnAdvanced=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    fBtnAdvanced.setLayoutData(gd);
    fBtnAdvanced.setText(getAdvancedButtonText(bAdvanced));
    fBtnAdvanced.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnAdvanced.addSelectionListener(this);
    fBtnAdvanced.setEnabled(fbEnableURLParameters);
  }
  fGrpParameters=new Group(parent,SWT.NONE);
  GridData gdGRPParameters=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPParameters.horizontalSpan=3;
  fGrpParameters.setLayoutData(gdGRPParameters);
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  fGrpParameters.setLayout(glParameter);
  fGrpParameters.setText(Messages.getString(""String_Node_Str""));
  fGrpParameters.setVisible(bAdvanced);
  StyledText stParameters=new StyledText(fGrpParameters,SWT.WRAP | SWT.READ_ONLY);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    stParameters.setLayoutData(gd);
    stParameters.setText(Messages.getString(""String_Node_Str""));
    stParameters.setBackground(parent.getBackground());
  }
  Label lblBaseParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLBaseParm=new GridData();
    gdLBLBaseParm.horizontalIndent=2;
    lblBaseParm.setLayoutData(gdLBLBaseParm);
    lblBaseParm.setText(Messages.getString(""String_Node_Str""));
    lblBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtBaseParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTBaseParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTBaseParm.horizontalSpan=2;
  fTxtBaseParm.setLayoutData(gdTXTBaseParm);
  fTxtBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtBaseParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_CATEGORY_SERIES) != TriggerDataComposite.DISABLE_CATEGORY_SERIES));
  Label lblValueParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLValueParm=new GridData();
    gdLBLValueParm.horizontalIndent=2;
    lblValueParm.setLayoutData(gdLBLValueParm);
    lblValueParm.setText(Messages.getString(""String_Node_Str""));
    lblValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtValueParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTValueParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTValueParm.horizontalSpan=2;
  fTxtValueParm.setLayoutData(gdTXTValueParm);
  fTxtValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtValueParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES) != TriggerDataComposite.DISABLE_VALUE_SERIES));
  Label lblSeriesParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLSeriesParm=new GridData();
    gdLBLSeriesParm.horizontalIndent=2;
    lblSeriesParm.setLayoutData(gdLBLSeriesParm);
    lblSeriesParm.setText(Messages.getString(""String_Node_Str""));
    lblSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtSeriesParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTSeriesParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSeriesParm.horizontalSpan=2;
  fTxtSeriesParm.setLayoutData(gdTXTSeriesParm);
  fTxtSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtSeriesParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES_NAME) != TriggerDataComposite.DISABLE_VALUE_SERIES_NAME));
}",0.979004402302743
70446,"/** 
 * Zooms OUT 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomOut(){
  if (bStepFixed || this.getTickCordinates().size() < 3) {
    return false;
  }
  if (((Number)oStep).doubleValue() >= Double.MAX_VALUE) {
    return false;
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) >= 1) {
        setStep(new Double(dStep * 10));
      }
 else {
        final int n=iaLogarithmicDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            setStep(new Double(iaLogarithmicDeltas[i + 1]));
            return true;
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      double dStep=asDouble(oStep).doubleValue();
      if (bIntegralZoom) {
        double dPower=Math.log10(dStep);
        if (dPower < 0) {
          dPower=Math.floor(dPower);
          dPower=Math.pow(10,dPower);
        }
 else {
          dPower=dStep;
        }
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        int i=0;
        for (; i < n; i++) {
          if (dStep < iaLinearDeltas[i]) {
            dStep=iaLinearDeltas[i] * dPower;
            break;
          }
        }
        if (i == n) {
          dPower*=20;
          dStep=iaLinearDeltas[0] * dPower;
        }
        if (((Number)oStep).doubleValue() == dStep) {
          return false;
        }
      }
 else {
        dStep*=2;
      }
      dStep=ChartUtil.alignWithInt(dStep,false);
      setStep(new Double(dStep));
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep++;
          setStep(Integer.valueOf(iStep));
        }
 else {
          int i=0, n=ia.length;
          for (; i < n; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == n - 1) {
            ia=iaCalendarDeltas[icu + 1];
            oUnit=Integer.valueOf(iaCalendarUnits[icu + 1]);
            if (ia == null) {
              setStep(Integer.valueOf(1));
              return true;
            }
            i=-1;
          }
          setStep(Integer.valueOf(ia[i + 1]));
          break;
        }
      }
    }
  }
  return true;
}","/** 
 * Zooms OUT 'once' into a scale of type numerical or datetime Typically, this is called in a loop until label overlaps occur
 */
public final boolean zoomOut(){
  if (bStepFixed || this.getTickCordinates().size() < 3) {
    return false;
  }
  if (((Number)oStep).doubleValue() >= Double.MAX_VALUE) {
    return false;
  }
  if ((iType & NUMERICAL) == NUMERICAL) {
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      final double dStep=asDouble(oStep).doubleValue();
      if ((Math.log(dStep) / LOG_10) >= 1) {
        setStep(new Double(dStep * 10));
      }
 else {
        final int n=iaLogarithmicDeltas.length;
        for (int i=0; i < n; i++) {
          if ((int)dStep == iaLogarithmicDeltas[i]) {
            setStep(new Double(iaLogarithmicDeltas[i + 1]));
            return true;
          }
        }
        return false;
      }
    }
 else     if ((iType & LINEAR) == LINEAR) {
      if (asDouble(oMinimum).doubleValue() * asDouble(oMaximum).doubleValue() < 0 && this.getTickCordinates().size() <= 3) {
        return false;
      }
      double dStep=asDouble(oStep).doubleValue();
      if (bIntegralZoom) {
        double dPower=Math.log10(dStep);
        if (dPower < 0) {
          dPower=Math.floor(dPower);
          dPower=Math.pow(10,dPower);
        }
 else {
          dPower=dStep;
        }
        dStep/=dPower;
        dStep=Math.round(dStep);
        int n=iaLinearDeltas.length;
        int i=0;
        for (; i < n; i++) {
          if (dStep < iaLinearDeltas[i]) {
            dStep=iaLinearDeltas[i] * dPower;
            break;
          }
        }
        if (i == n) {
          dPower*=20;
          dStep=iaLinearDeltas[0] * dPower;
        }
        if (((Number)oStep).doubleValue() == dStep) {
          return false;
        }
      }
 else {
        dStep*=2;
      }
      dStep=ChartUtil.alignWithInt(dStep,false);
      setStep(new Double(dStep));
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int[] ia=null;
    int iStep=asInteger(oStep);
    int iUnit=asInteger(oUnit);
    for (int icu=0; icu < iaCalendarUnits.length; icu++) {
      if (iUnit == iaCalendarUnits[icu]) {
        ia=iaCalendarDeltas[icu];
        if (ia == null) {
          iStep++;
          setStep(Integer.valueOf(iStep));
        }
 else {
          int i=0, n=ia.length;
          for (; i < n; i++) {
            if (ia[i] == iStep) {
              break;
            }
          }
          if (i == n - 1) {
            ia=iaCalendarDeltas[icu + 1];
            oUnit=Integer.valueOf(iaCalendarUnits[icu + 1]);
            if (ia == null) {
              setStep(Integer.valueOf(1));
              return true;
            }
            i=-1;
          }
          setStep(Integer.valueOf(ia[i + 1]));
          break;
        }
      }
    }
  }
  return true;
}",0.971730804304213
70447,"/** 
 * @param dataEngine
 * @param queryDefns
 * @throws DataException
 */
void populateCachedDataSets(DataEngineImpl dataEngine,IDataQueryDefinition[] queryDefns) throws DataException {
  this.cachedDataSetNames.clear();
  if (queryDefns != null) {
    List temp=new ArrayList();
    for (int i=0; i < queryDefns.length; i++) {
      if (queryDefns[i] instanceof IQueryDefinition) {
        IQueryDefinition qd=(IQueryDefinition)queryDefns[i];
        String dataSetName=qd.getDataSetName();
        if (dataSetName != null) {
          this.populateDataSetNames(dataEngine.getDataSetDesign(dataSetName),dataEngine,temp);
        }
      }
    }
    Set tempSet=new HashSet();
    for (int i=0; i < temp.size(); i++) {
      if (tempSet.contains(temp.get(i)))       this.cachedDataSetNames.add(temp.get(i));
 else       tempSet.add(temp.get(i));
    }
  }
}","/** 
 * @param dataEngine
 * @param queryDefns
 * @throws DataException
 */
void populateCachedDataSets(DataEngineImpl dataEngine,IDataQueryDefinition[] queryDefns) throws DataException {
  if (queryDefns != null) {
    List temp=new ArrayList();
    for (int i=0; i < queryDefns.length; i++) {
      if (queryDefns[i] instanceof IQueryDefinition) {
        IQueryDefinition qd=(IQueryDefinition)queryDefns[i];
        String dataSetName=qd.getDataSetName();
        if (dataSetName != null) {
          this.populateDataSetNames(dataEngine.getDataSetDesign(dataSetName),dataEngine,temp);
        }
      }
    }
    Set tempSet=new HashSet();
    for (int i=0; i < temp.size(); i++) {
      if (tempSet.contains(temp.get(i)))       this.cachedDataSetNames.add(temp.get(i));
 else       tempSet.add(temp.get(i));
    }
  }
}",0.2685680332739156
70448,"public static void initFileHandler(String sLogFolder) throws SecurityException, IOException {
  if (sLogFolder.length() > 0 && sLogFolder.lastIndexOf(File.separator) == sLogFolder.length() - 1) {
    sLogFolder=sLogFolder.substring(0,sLogFolder.length() - 1);
  }
  final String sName=ChartEnginePlugin.ID + new SimpleDateFormat(""String_Node_Str"").format(new Date());
  final String sDir=sLogFolder;
  try {
    fileHandler=AccessController.doPrivileged(new PrivilegedExceptionAction<FileHandler>(){
      public FileHandler run() throws Exception {
        FileHandler fileHandler=new FileHandler(sDir + File.separator + sName+ ""String_Node_Str"",true);
        fileHandler.setFormatter(new SimpleFormatter());
        fileHandler.setLevel(Level.FINEST);
        return fileHandler;
      }
    }
);
  }
 catch (  PrivilegedActionException e) {
    Exception typedException=e.getException();
    if (typedException instanceof SecurityException) {
      throw (SecurityException)typedException;
    }
 else     if (typedException instanceof IOException) {
      throw (IOException)typedException;
    }
  }
}","public static void initFileHandler(String sLogFolder,final Level level) throws SecurityException, IOException {
  if (sLogFolder.length() > 0 && sLogFolder.lastIndexOf(File.separator) == sLogFolder.length() - 1) {
    sLogFolder=sLogFolder.substring(0,sLogFolder.length() - 1);
  }
  final String sName=ChartEnginePlugin.ID + new SimpleDateFormat(""String_Node_Str"").format(new Date());
  final String sDir=sLogFolder;
  try {
    fileHandler=AccessController.doPrivileged(new PrivilegedExceptionAction<FileHandler>(){
      public FileHandler run() throws Exception {
        Level logLevel=level != null ? level : Level.FINEST;
        FileHandler fileHandler=new FileHandler(sDir + File.separator + sName+ ""String_Node_Str"",true);
        fileHandler.setFormatter(new SimpleFormatter());
        fileHandler.setLevel(logLevel);
        return fileHandler;
      }
    }
);
  }
 catch (  PrivilegedActionException e) {
    Exception typedException=e.getException();
    if (typedException instanceof SecurityException) {
      throw (SecurityException)typedException;
    }
 else     if (typedException instanceof IOException) {
      throw (IOException)typedException;
    }
  }
}",0.9567496723460026
70449,"public FileHandler run() throws Exception {
  FileHandler fileHandler=new FileHandler(sDir + File.separator + sName+ ""String_Node_Str"",true);
  fileHandler.setFormatter(new SimpleFormatter());
  fileHandler.setLevel(Level.FINEST);
  return fileHandler;
}","public FileHandler run() throws Exception {
  Level logLevel=level != null ? level : Level.FINEST;
  FileHandler fileHandler=new FileHandler(sDir + File.separator + sName+ ""String_Node_Str"",true);
  fileHandler.setFormatter(new SimpleFormatter());
  fileHandler.setLevel(logLevel);
  return fileHandler;
}",0.2647584973166368
70450,"@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  try {
    JavaUtilLoggerImpl.initFileHandler(this.getStateLocation().toOSString());
  }
 catch (  SecurityException e) {
    logger.log(e);
  }
catch (  IOException e) {
    logger.log(e);
  }
}","@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}",0.535
70451,"/** 
 * Returns a singleton instance of the plugin settings framework with specific configuration. Initializes the OSGi Platform framework to load chart extension bundles unless the STANDALONE flag was set in PlatformConfig property.
 * @return A singleton instance of the plugin settings framework
 */
public static synchronized PluginSettings instance(PlatformConfig config){
  if (ps == null) {
    ps=new PluginSettings();
    ps.bStandalone=config != null && config.getProperty(""String_Node_Str"") != null;
    if (!ps.bStandalone) {
      try {
        Platform.startup(config);
      }
 catch (      BirtException e) {
        logger.log(e);
      }
    }
  }
  return ps;
}","/** 
 * Returns a singleton instance of the plugin settings framework with specific configuration. Initializes the OSGi Platform framework to load chart extension bundles unless the STANDALONE flag was set in PlatformConfig property.
 * @return A singleton instance of the plugin settings framework
 */
public static synchronized PluginSettings instance(PlatformConfig config){
  if (ps == null) {
    ps=new PluginSettings();
    if (config != null) {
      ps.bStandalone=config.getProperty(PROP_STANDALONE) != null;
      String loggingDir=(String)config.getProperty(PROP_LOGGING_DIR);
      Level loggingLevel=(Level)config.getProperty(PROP_LOGGING_LEVEL);
      initFileLogger(loggingDir,loggingLevel);
    }
    if (!ps.bStandalone) {
      try {
        Platform.startup(config);
      }
 catch (      BirtException e) {
        logger.log(e);
      }
    }
  }
  return ps;
}",0.836852207293666
70452,"protected void set(Series src){
  if (src.getLabel() != null) {
    setLabel(src.getLabel().copyInstance());
  }
  if (src.getDataDefinition() != null) {
    EList<Query> list=getDataDefinition();
    for (    Query element : src.getDataDefinition()) {
      list.add(element.copyInstance());
    }
  }
  if (src.getDataPoint() != null) {
    setDataPoint(src.getDataPoint().copyInstance());
  }
  if (src.getDataSets() != null) {
    EMap<String,DataSet> map=getDataSets();
    for (    Map.Entry<String,DataSet> entry : src.getDataSets().entrySet()) {
      map.put(entry.getKey(),entry.getValue().copyInstance());
    }
  }
  if (src.getTriggers() != null) {
    EList<Trigger> list=getTriggers();
    for (    Trigger element : src.getTriggers()) {
      list.add(element.copyInstance());
    }
  }
  if (src.getCurveFitting() != null) {
    setCurveFitting(src.getCurveFitting().copyInstance());
  }
  if (src.getCursor() != null) {
    setCursor(src.getCursor().copyInstance());
  }
  visible=src.isVisible();
  visibleESet=src.isSetVisible();
  seriesIdentifier=src.getSeriesIdentifier();
  labelPosition=src.getLabelPosition();
  labelPositionESet=src.isSetLabelPosition();
  stacked=src.isStacked();
  stackedESet=src.isSetStacked();
  translucent=src.isTranslucent();
  translucentESet=src.isSetTranslucent();
}","protected void set(Series src){
  if (src.getLabel() != null) {
    setLabel(src.getLabel().copyInstance());
  }
  if (src.getDataDefinition() != null) {
    EList<Query> list=getDataDefinition();
    for (    Query element : src.getDataDefinition()) {
      list.add(element.copyInstance());
    }
  }
  if (src.getDataPoint() != null) {
    setDataPoint(src.getDataPoint().copyInstance());
  }
  if (src.getDataSets() != null) {
    EMap<String,DataSet> map=getDataSets();
    for (    Map.Entry<String,DataSet> entry : src.getDataSets().entrySet()) {
      DataSet entryValue=entry.getValue() != null ? entry.getValue().copyInstance() : null;
      map.put(entry.getKey(),entryValue);
    }
  }
  if (src.getTriggers() != null) {
    EList<Trigger> list=getTriggers();
    for (    Trigger element : src.getTriggers()) {
      list.add(element.copyInstance());
    }
  }
  if (src.getCurveFitting() != null) {
    setCurveFitting(src.getCurveFitting().copyInstance());
  }
  if (src.getCursor() != null) {
    setCursor(src.getCursor().copyInstance());
  }
  visible=src.isVisible();
  visibleESet=src.isSetVisible();
  seriesIdentifier=src.getSeriesIdentifier();
  labelPosition=src.getLabelPosition();
  labelPositionESet=src.isSetLabelPosition();
  stacked=src.isStacked();
  stackedESet=src.isSetStacked();
  translucent=src.isTranslucent();
  translucentESet=src.isSetTranslucent();
}",0.9583486914854404
70453,"public DataSet getDataSet(String userkey){
  return (DataSet)getDataSets().get(userkey);
}","public DataSet getDataSet(String userkey){
  return getDataSets().get(userkey);
}",0.9473684210526316
70454,"/** 
 * Tests the method to get relative path. Test cases: <ul> <li>1. absolute base path <li>2. relative base path </ul>
 */
public void testResolveAbsolutePath(){
  if (isWindowsPlatform())   resolveAbsolutePathOnWindows();
 else   resolveAbsolutePathOnUnix();
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
}","/** 
 * Tests the method to get relative path. Test cases: <ul> <li>1. absolute base path <li>2. relative base path </ul>
 */
public void testResolveAbsolutePath(){
  if (isWindowsPlatform())   resolveAbsolutePathOnWindows();
 else   resolveAbsolutePathOnUnix();
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
  assertEquals(""String_Node_Str"",URIUtil.resolveAbsolutePath(""String_Node_Str"",""String_Node_Str""));
}",0.9060150375939848
70455,"/** 
 * Gets the absolute path for the given <code>base</code> and <code> relativePath</code> . <p> The <code>base</code> value should be directory ONLY and does NOT contain file name and the format can be: <ul> <li>./../hello/ <li>C:\\hello\..\ <li>/C:/../hello/ </ul> The spearator in the return path is platform-depedent.
 * @param base the base directory
 * @param relativePath the relative path
 * @return the absolute path
 */
private static String resolveAbsolutePathFromString(String base,String relativePath){
  if (base == null || relativePath == null)   return relativePath;
  try {
    URI uri=new URI(relativePath);
    if (uri.isAbsolute())     return relativePath;
  }
 catch (  URISyntaxException e) {
  }
  boolean appendDirectorySeparator=false;
  if (base.length() > 0 && relativePath.length() > 0) {
    char lastBaseChar=base.charAt(base.length() - 1);
    char firstRelativeChar=relativePath.charAt(0);
    if (lastBaseChar != '/' && lastBaseChar != File.separatorChar && firstRelativeChar != '/' && firstRelativeChar != File.separatorChar)     appendDirectorySeparator=true;
  }
  if (appendDirectorySeparator)   return base + '/' + relativePath;
  return base + relativePath;
}","/** 
 * Gets the absolute path for the given <code>base</code> and <code> relativePath</code> . <p> The <code>base</code> value should be directory ONLY and does NOT contain file name and the format can be: <ul> <li>./../hello/ <li>C:\\hello\..\ <li>/C:/../hello/ </ul> The spearator in the return path is platform-depedent.
 * @param base the base directory
 * @param relativePath the relative path
 * @return the absolute path
 */
private static String resolveAbsolutePathFromString(String base,String relativePath){
  if (base == null || relativePath == null)   return relativePath;
  URI uri=URIUtilImpl.resolveAbsolutePath(relativePath);
  if (uri != null && uri.isAbsolute()) {
    return relativePath;
  }
  boolean appendDirectorySeparator=false;
  if (base.length() > 0 && relativePath.length() > 0) {
    char lastBaseChar=base.charAt(base.length() - 1);
    char firstRelativeChar=relativePath.charAt(0);
    if (lastBaseChar != '/' && lastBaseChar != File.separatorChar && firstRelativeChar != '/' && firstRelativeChar != File.separatorChar)     appendDirectorySeparator=true;
  }
  String path=null;
  if (appendDirectorySeparator) {
    path=base + '/' + relativePath;
  }
 else {
    path=base + relativePath;
  }
  uri=URIUtilImpl.resolveAbsolutePath(path);
  if (uri != null) {
    return uri.normalize().toString();
  }
  return path;
}",0.5283757338551859
70456,"public TextAreaLayout(ContainerArea parent,LayoutContext context,IContent content){
  parentLM=(InlineStackingArea)parent;
  ITextContent textContent=(ITextContent)content;
  String text=textContent.getText();
  if (text != null && text.length() != 0) {
    transform(textContent);
    this.textContent=textContent;
    comp=new TextCompositor(textContent,context.getFontManager(),context);
    ContainerArea ancestor=parentLM;
    do {
      if (null == ancestor) {
        comp.setNewLineStatus(true);
        return;
      }
      if (!ancestor.isEmpty()) {
        comp.setNewLineStatus(false);
        return;
      }
      if (ancestor instanceof LineArea) {
        comp.setNewLineStatus(ancestor.isEmpty());
        return;
      }
      ancestor=ancestor.getParent();
    }
 while (true);
  }
}","public TextAreaLayout(ContainerArea parent,LayoutContext context,IContent content){
  parentLM=(InlineStackingArea)parent;
  ITextContent textContent=(ITextContent)content;
  String text=textContent.getText();
  if (text != null) {
    if (text.length() == 0)     textContent.setText(""String_Node_Str"");
 else     transform(textContent);
  }
  this.textContent=textContent;
  comp=new TextCompositor(textContent,context.getFontManager(),context);
  ContainerArea ancestor=parentLM;
  do {
    if (null == ancestor) {
      comp.setNewLineStatus(true);
      return;
    }
    if (!ancestor.isEmpty()) {
      comp.setNewLineStatus(false);
      return;
    }
    if (ancestor instanceof LineArea) {
      comp.setNewLineStatus(ancestor.isEmpty());
      return;
    }
    ancestor=ancestor.getParent();
  }
 while (true);
}",0.9028290282902828
70457,"private List<String> checkDataType(Query query,Series series){
  List<String> errorMsgs=new ArrayList<String>(2);
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (getChartModel() instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        boolean hasException=false;
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
        }
 catch (        ChartException e) {
          hasException=true;
          WizardBase.showException(e.getLocalizedMessage());
          errorMsgs.add(e.getLocalizedMessage());
        }
        if (!hasException) {
          WizardBase.removeException();
        }
        if (baseSD != orthSD && baseSD.eContainer() != axis && ChartUtil.isMagicAggregate(aggFunc)) {
          dataType=DataType.NUMERIC_LITERAL;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        int[] validationIndex=provider.validationIndex(series);
        boolean needValidate=false;
        for (int i=0; i < validationIndex.length; i++) {
          if (query == series.getDataDefinition().get(i)) {
            needValidate=true;
            break;
          }
        }
        SeriesDefinition sd=(SeriesDefinition)series.eContainer();
        if (((Axis)sd.eContainer()).getSeriesDefinitions().indexOf(sd) > 0) {
          needValidate=false;
        }
        if (needValidate) {
          for (int i=0; i < axisTypes.length; i++) {
            if (isValidatedAxis(dataType,axisTypes[i])) {
              axisNotification(axis,axisTypes[i]);
              axis.setType(axisTypes[i]);
              break;
            }
          }
        }
      }
      boolean bException=false;
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
      }
 catch (      ChartException ce) {
        bException=true;
        String errMsg=Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()});
        WizardBase.showException(errMsg);
        errorMsgs.add(errMsg);
      }
      if (!bException) {
        WizardBase.removeException();
      }
      break;
    }
  }
  return errorMsgs;
}","private List<String> checkDataType(Query query,Series series){
  List<String> errorMsgs=new ArrayList<String>(2);
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (getChartModel() instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        boolean hasException=false;
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
        }
 catch (        ChartException e) {
          hasException=true;
          WizardBase.showException(e.getLocalizedMessage());
          errorMsgs.add(e.getLocalizedMessage());
        }
        if (!hasException) {
          WizardBase.removeException();
        }
        if (baseSD != orthSD && baseSD.eContainer() != axis && ChartUtil.isMagicAggregate(aggFunc)) {
          dataType=DataType.NUMERIC_LITERAL;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        int[] validationIndex=provider.validationIndex(series);
        boolean needValidate=false;
        for (int i=0; i < validationIndex.length; i++) {
          if (query == series.getDataDefinition().get(i)) {
            needValidate=true;
            break;
          }
        }
        SeriesDefinition sd=(SeriesDefinition)series.eContainer();
        if (((Axis)sd.eContainer()).getSeriesDefinitions().indexOf(sd) > 0) {
          needValidate=false;
        }
        if (needValidate) {
          if (dataType == null) {
            dataType=ChartUIUtil.convertAxisTypeToDataType(axis.getType());
          }
          for (int i=0; i < axisTypes.length; i++) {
            if (isValidatedAxis(dataType,axisTypes[i])) {
              axisNotification(axis,axisTypes[i]);
              axis.setType(axisTypes[i]);
              break;
            }
          }
        }
      }
      boolean bException=false;
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
      }
 catch (      ChartException ce) {
        bException=true;
        String errMsg=Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()});
        WizardBase.showException(errMsg);
        errorMsgs.add(errMsg);
      }
      if (!bException) {
        WizardBase.removeException();
      }
      break;
    }
  }
  return errorMsgs;
}",0.98
70458,"private void checkDataTypeImpl(Query query,Series series,boolean isBaseSeries){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (chartModel instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(chartModel).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
        }
 catch (        ChartException e) {
          WizardBase.showException(e.getLocalizedMessage());
        }
        if (baseSD != null) {
          if (!isBaseSeries && baseSD != orthSD && ChartUtil.isMagicAggregate(aggFunc)) {
            dataType=DataType.NUMERIC_LITERAL;
          }
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        for (int i=0; i < axisTypes.length; i++) {
          if (isValidatedAxis(dataType,axisTypes[i])) {
            axisNotification(axis,axisTypes[i]);
            ChartAdapter.beginIgnoreNotifications();
            axis.setType(axisTypes[i]);
            ChartAdapter.endIgnoreNotifications();
            break;
          }
        }
      }
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
      }
 catch (      ChartException ce) {
        WizardBase.showException(Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
      }
      break;
    }
  }
}","private void checkDataTypeImpl(Query query,Series series,boolean isBaseSeries){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (chartModel instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(chartModel).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
        }
 catch (        ChartException e) {
          WizardBase.showException(e.getLocalizedMessage());
        }
        if (baseSD != null) {
          if (!isBaseSeries && baseSD != orthSD && ChartUtil.isMagicAggregate(aggFunc)) {
            dataType=DataType.NUMERIC_LITERAL;
          }
        }
        if (dataType == null) {
          dataType=ChartUIUtil.convertAxisTypeToDataType(axis.getType());
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        for (int i=0; i < axisTypes.length; i++) {
          if (isValidatedAxis(dataType,axisTypes[i])) {
            axisNotification(axis,axisTypes[i]);
            ChartAdapter.beginIgnoreNotifications();
            axis.setType(axisTypes[i]);
            ChartAdapter.endIgnoreNotifications();
            break;
          }
        }
      }
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
      }
 catch (      ChartException ce) {
        WizardBase.showException(Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
      }
      break;
    }
  }
}",0.9737556561085972
70459,"public void update(AbstractArea area) throws BirtException {
  area.setAllocatedPosition(currentIP,currentBP);
  currentIP+=area.getAllocatedWidth();
  if (currentIP > width) {
    setWidth(currentIP);
  }
  int height=area.getAllocatedHeight();
  if (height > getHeight()) {
    this.height=height;
  }
}","public void update(AbstractArea area) throws BirtException {
  int aWidth=area.getAllocatedWidth();
  if (aWidth + currentIP > maxAvaWidth) {
    removeChild(area);
    endLine();
    children.add(area);
  }
  area.setAllocatedPosition(currentIP,currentBP);
  currentIP+=aWidth;
  if (currentIP > maxAvaWidth) {
    setWidth(currentIP);
  }
  int height=area.getAllocatedHeight();
  if (height > getHeight()) {
    this.height=height;
  }
}",0.4536912751677852
70460,"private List<String> checkDataType(Query query,Series series){
  List<String> errorMsgs=new ArrayList<String>(2);
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (getChartModel() instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        boolean hasException=false;
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
        }
 catch (        ChartException e) {
          hasException=true;
          WizardBase.showException(e.getLocalizedMessage());
          errorMsgs.add(e.getLocalizedMessage());
        }
        if (!hasException) {
          WizardBase.removeException();
        }
        if (baseSD != orthSD && baseSD.eContainer() != axis && ChartUtil.isMagicAggregate(aggFunc)) {
          dataType=DataType.NUMERIC_LITERAL;
        }
        if (isValidatedAxis(dataType,axis.getType())) {
          break;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        int[] validationIndex=provider.validationIndex(series);
        boolean needValidate=false;
        for (int i=0; i < validationIndex.length; i++) {
          if (query == series.getDataDefinition().get(i)) {
            needValidate=true;
            break;
          }
        }
        SeriesDefinition sd=(SeriesDefinition)series.eContainer();
        if (((Axis)sd.eContainer()).getSeriesDefinitions().indexOf(sd) > 0) {
          needValidate=false;
        }
        if (needValidate) {
          for (int i=0; i < axisTypes.length; i++) {
            if (isValidatedAxis(dataType,axisTypes[i])) {
              axisNotification(axis,axisTypes[i]);
              axis.setType(axisTypes[i]);
              break;
            }
          }
        }
      }
      boolean bException=false;
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
      }
 catch (      ChartException ce) {
        bException=true;
        String errMsg=Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()});
        WizardBase.showException(errMsg);
        errorMsgs.add(errMsg);
      }
      if (!bException) {
        WizardBase.removeException();
      }
      break;
    }
  }
  return errorMsgs;
}","private List<String> checkDataType(Query query,Series series){
  List<String> errorMsgs=new ArrayList<String>(2);
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (getChartModel() instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        boolean hasException=false;
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
        }
 catch (        ChartException e) {
          hasException=true;
          WizardBase.showException(e.getLocalizedMessage());
          errorMsgs.add(e.getLocalizedMessage());
        }
        if (!hasException) {
          WizardBase.removeException();
        }
        if (baseSD != orthSD && baseSD.eContainer() != axis && ChartUtil.isMagicAggregate(aggFunc)) {
          dataType=DataType.NUMERIC_LITERAL;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        int[] validationIndex=provider.validationIndex(series);
        boolean needValidate=false;
        for (int i=0; i < validationIndex.length; i++) {
          if (query == series.getDataDefinition().get(i)) {
            needValidate=true;
            break;
          }
        }
        SeriesDefinition sd=(SeriesDefinition)series.eContainer();
        if (((Axis)sd.eContainer()).getSeriesDefinitions().indexOf(sd) > 0) {
          needValidate=false;
        }
        if (needValidate) {
          for (int i=0; i < axisTypes.length; i++) {
            if (isValidatedAxis(dataType,axisTypes[i])) {
              axisNotification(axis,axisTypes[i]);
              axis.setType(axisTypes[i]);
              break;
            }
          }
        }
      }
      boolean bException=false;
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
      }
 catch (      ChartException ce) {
        bException=true;
        String errMsg=Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()});
        WizardBase.showException(errMsg);
        errorMsgs.add(errMsg);
      }
      if (!bException) {
        WizardBase.removeException();
      }
      break;
    }
  }
  return errorMsgs;
}",0.9863058901171424
70461,"public void changeTask(Notification notification){
  if (previewPainter != null) {
    if (notification == null) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      return;
    }
    List<String> errorMsgs=new ArrayList<String>(2);
    if ((notification.getNotifier() instanceof Query && ((Query)notification.getNotifier()).eContainer() instanceof Series)) {
      Query query=(Query)notification.getNotifier();
      errorMsgs.addAll(checkDataType(query,(Series)query.eContainer()));
      if (!(((ChartWizardContext)getContext()).getChartType() instanceof GanttChart) && !getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
        if (getChartModel() instanceof ChartWithAxes) {
          Axis axisWithCurrentQuery=(Axis)((Query)notification.getNotifier()).eContainer().eContainer().eContainer();
          if (ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChartModel()).isCategoryAxis() && axisWithCurrentQuery.eContainer() instanceof Axis) {
            SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
            if (!base.getGrouping().isEnabled()) {
              base.getGrouping().setEnabled(true);
            }
            if (axisWithCurrentQuery.getType() == AxisType.DATE_TIME_LITERAL || getDataServiceProvider().getDataType(query.getDefinition()) == DataType.DATE_TIME_LITERAL) {
              if (query.getGrouping() == null) {
                query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
              }
              SeriesGrouping group=query.getGrouping();
              group.setEnabled(true);
              group.setAggregateExpression(""String_Node_Str"");
            }
          }
        }
 else {
          if (((Query)notification.getNotifier()).eContainer().eContainer().eContainer() instanceof SeriesDefinition) {
            SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
            if (!base.getGrouping().isEnabled()) {
              base.getGrouping().setEnabled(true);
            }
          }
        }
      }
    }
    if (notification.getNotifier() instanceof SeriesDefinition && getChartModel() instanceof ChartWithAxes) {
      errorMsgs.addAll(checkDataTypeForChartWithAxes());
    }
    if (notification.getNotifier() instanceof Query || notification.getNotifier() instanceof Axis || notification.getNotifier() instanceof SeriesDefinition|| notification.getNotifier() instanceof SeriesGrouping) {
      doPreview(errorMsgs);
    }
 else     if (ChartPreviewPainter.isLivePreviewActive()) {
      ChartAdapter.beginIgnoreNotifications();
      ChartUIUtil.syncRuntimeSeries(getChartModel());
      ChartAdapter.endIgnoreNotifications();
      doPreview(errorMsgs);
    }
 else {
      doPreview(errorMsgs);
    }
  }
}","public void changeTask(Notification notification){
  if (previewPainter != null) {
    if (notification == null) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      return;
    }
    List<String> errorMsgs=new ArrayList<String>(2);
    if ((notification.getNotifier() instanceof Query && ((Query)notification.getNotifier()).eContainer() instanceof Series)) {
      Query query=(Query)notification.getNotifier();
      errorMsgs.addAll(checkDataType(query,(Series)query.eContainer()));
      if (!(((ChartWizardContext)getContext()).getChartType() instanceof GanttChart) && !getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
        if (getChartModel() instanceof ChartWithAxes) {
          Axis axisWithCurrentQuery=(Axis)((Query)notification.getNotifier()).eContainer().eContainer().eContainer();
          if (ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChartModel()).isCategoryAxis() && axisWithCurrentQuery.eContainer() instanceof Axis) {
            SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
            if (!base.getGrouping().isEnabled()) {
              base.getGrouping().setEnabled(true);
            }
            if (axisWithCurrentQuery.getType() == AxisType.DATE_TIME_LITERAL || getDataServiceProvider().getDataType(query.getDefinition()) == DataType.DATE_TIME_LITERAL) {
              if (query.getGrouping() == null) {
                query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
              }
              SeriesGrouping group=query.getGrouping();
              group.setEnabled(true);
              group.setAggregateExpression(""String_Node_Str"");
            }
          }
        }
 else {
          if (((Query)notification.getNotifier()).eContainer().eContainer().eContainer() instanceof SeriesDefinition) {
            SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
            if (!base.getGrouping().isEnabled()) {
              base.getGrouping().setEnabled(true);
            }
          }
        }
      }
    }
    if (notification.getNotifier() instanceof SeriesDefinition && getChartModel() instanceof ChartWithAxes) {
      errorMsgs.addAll(checkDataTypeForChartWithAxes());
    }
    if (notification.getNotifier() instanceof Query || notification.getNotifier() instanceof Axis || notification.getNotifier() instanceof SeriesDefinition|| notification.getNotifier() instanceof SeriesGrouping) {
      doPreview(errorMsgs);
    }
 else     if (ChartPreviewPainterBase.isLivePreviewActive()) {
      ChartAdapter.beginIgnoreNotifications();
      ChartUIUtil.syncRuntimeSeries(getChartModel());
      ChartAdapter.endIgnoreNotifications();
      doPreview(errorMsgs);
    }
 else {
      doPreview(errorMsgs);
    }
  }
}",0.9993143640726774
70462,"private void checkDataTypeImpl(Query query,Series series,boolean isBaseSeries){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (chartModel instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(chartModel).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
        }
 catch (        ChartException e) {
          WizardBase.showException(e.getLocalizedMessage());
        }
        if (baseSD != null) {
          if (!isBaseSeries && baseSD != orthSD && ChartUtil.isMagicAggregate(aggFunc)) {
            dataType=DataType.NUMERIC_LITERAL;
          }
        }
        if (isValidatedAxis(dataType,axis.getType())) {
          break;
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        for (int i=0; i < axisTypes.length; i++) {
          if (isValidatedAxis(dataType,axisTypes[i])) {
            axisNotification(axis,axisTypes[i]);
            ChartAdapter.beginIgnoreNotifications();
            axis.setType(axisTypes[i]);
            ChartAdapter.endIgnoreNotifications();
            break;
          }
        }
      }
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
      }
 catch (      ChartException ce) {
        WizardBase.showException(Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
      }
      break;
    }
  }
}","private void checkDataTypeImpl(Query query,Series series,boolean isBaseSeries){
  String expression=query.getDefinition();
  Axis axis=null;
  for (EObject o=query; o != null; ) {
    o=o.eContainer();
    if (o instanceof Axis) {
      axis=(Axis)o;
      break;
    }
  }
  Collection<ISeriesUIProvider> cRegisteredEntries=ChartUIExtensionsImpl.instance().getSeriesUIComponents(getContext().getClass().getSimpleName());
  Iterator<ISeriesUIProvider> iterEntries=cRegisteredEntries.iterator();
  String sSeries=null;
  while (iterEntries.hasNext()) {
    ISeriesUIProvider provider=iterEntries.next();
    sSeries=provider.getSeriesClass();
    if (sSeries.equals(series.getClass().getName())) {
      if (chartModel instanceof ChartWithAxes) {
        DataType dataType=getDataServiceProvider().getDataType(expression);
        SeriesDefinition baseSD=(ChartUIUtil.getBaseSeriesDefinitions(chartModel).get(0));
        SeriesDefinition orthSD=null;
        orthSD=(SeriesDefinition)series.eContainer();
        String aggFunc=null;
        try {
          aggFunc=ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query);
        }
 catch (        ChartException e) {
          WizardBase.showException(e.getLocalizedMessage());
        }
        if (baseSD != null) {
          if (!isBaseSeries && baseSD != orthSD && ChartUtil.isMagicAggregate(aggFunc)) {
            dataType=DataType.NUMERIC_LITERAL;
          }
        }
        AxisType[] axisTypes=provider.getCompatibleAxisType(series);
        for (int i=0; i < axisTypes.length; i++) {
          if (isValidatedAxis(dataType,axisTypes[i])) {
            axisNotification(axis,axisTypes[i]);
            ChartAdapter.beginIgnoreNotifications();
            axis.setType(axisTypes[i]);
            ChartAdapter.endIgnoreNotifications();
            break;
          }
        }
      }
      try {
        provider.validateSeriesBindingType(series,getDataServiceProvider());
      }
 catch (      ChartException ce) {
        WizardBase.showException(Messages.getFormattedString(""String_Node_Str"",new String[]{ce.getLocalizedMessage(),series.getDisplayName()}));
      }
      break;
    }
  }
}",0.9810804650102576
70463,"/** 
 * Reusable 'strokes' for rendering lines may be obtained from here
 * @param ls
 * @return
 */
public final Stroke getCachedStroke(LineAttributes lia){
  if (lia == null)   return null;
  Stroke s=_htLineStyles.get(lia);
  if (s == null) {
    BasicStroke bs=null;
    if (lia.getStyle().getValue() == LineStyle.DASHED) {
      float[] faStyle=new float[]{6.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DOTTED) {
      float[] faStyle=new float[]{1.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DASH_DOTTED) {
      float[] faStyle=new float[]{6.0f,4.0f,1.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.SOLID) {
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_SQUARE,BasicStroke.JOIN_MITER);
    }
    if (bs != null) {
      _htLineStyles.put(lia,bs);
    }
    return bs;
  }
  return s;
}","/** 
 * Reusable 'strokes' for rendering lines may be obtained from here
 * @param ls
 * @return
 */
public final Stroke getCachedStroke(LineAttributes lia){
  if (lia == null)   return null;
  Stroke s=_htLineStyles.get(lia);
  if (s == null) {
    BasicStroke bs=null;
    if (lia.getStyle().getValue() == LineStyle.DASHED) {
      float[] faStyle=new float[]{6.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DOTTED) {
      float[] faStyle=new float[]{1.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.DASH_DOTTED) {
      float[] faStyle=new float[]{6.0f,4.0f,1.0f,4.0f};
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND,0,faStyle,0);
    }
 else     if (lia.getStyle().getValue() == LineStyle.SOLID) {
      bs=new BasicStroke(lia.getThickness(),BasicStroke.CAP_SQUARE,BasicStroke.JOIN_ROUND);
    }
    if (bs != null) {
      _htLineStyles.put(lia,bs);
    }
    return bs;
  }
  return s;
}",0.9966301600673968
70464,"public boolean handleDescribe(IDataSetInstanceHandle dataSet,IScriptDataSetMetaDataDefinition metaData) throws BirtException {
  try {
    if (!this.useDescribeEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),DESCRIBE,((ScriptDataSetHandle)dataSetHandle).getDescribe());
      if (status.didRun()) {
        Object result=status.result();
        if (result instanceof Boolean)         return ((Boolean)result).booleanValue();
 else         throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,""String_Node_Str"");
      }
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.describe(new DataSetInstance(dataSet),new ScriptedDataSetMetaData(metaData));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}","public boolean handleDescribe(IDataSetInstanceHandle dataSet,IScriptDataSetMetaDataDefinition metaData) throws BirtException {
  try {
    if (!this.useDescribeEventHandler) {
      JSScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),DESCRIBE,((ScriptDataSetHandle)dataSetHandle).getDescribe());
      if (status.didRun()) {
        Object result=status.result();
        if (result instanceof Boolean)         return ((Boolean)result).booleanValue();
 else         throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,""String_Node_Str"");
      }
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.describe(new DataSetInstance(dataSet),new ScriptedDataSetMetaData(metaData));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}",0.9908256880733946
70465,"public void handleOpen(IDataSetInstanceHandle dataSet) throws BirtException {
  try {
    if (!this.useOpenEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),OPEN,((ScriptDataSetHandle)dataSetHandle).getOpen());
      if (status.didRun())       return;
    }
    if (scriptedEventHandler != null)     scriptedEventHandler.open(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleOpen(IDataSetInstanceHandle dataSet) throws BirtException {
  try {
    if (!this.useOpenEventHandler) {
      JSScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),OPEN,((ScriptDataSetHandle)dataSetHandle).getOpen());
      if (status.didRun())       return;
    }
    if (scriptedEventHandler != null)     scriptedEventHandler.open(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9838882921589688
70466,"public void handleClose(IDataSetInstanceHandle dataSet){
  try {
    if (!this.useCloseEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),CLOSE,((ScriptDataSetHandle)dataSetHandle).getClose());
      if (status.didRun())       return;
    }
    if (scriptedEventHandler != null)     scriptedEventHandler.close(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleClose(IDataSetInstanceHandle dataSet){
  try {
    if (!this.useCloseEventHandler) {
      JSScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),CLOSE,((ScriptDataSetHandle)dataSetHandle).getClose());
      if (status.didRun())       return;
    }
    if (scriptedEventHandler != null)     scriptedEventHandler.close(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9832775919732442
70467,"public boolean handleFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  try {
    if (!useFetchEventHandler) {
      JSScriptStatus status=handleJS(dataSet.getScriptScope(),dataSet.getName(),FETCH,((ScriptDataSetHandle)dataSetHandle).getFetch());
      if (status.didRun()) {
        Object result=status.result();
        if (result instanceof Boolean)         return ((Boolean)result).booleanValue();
 else         throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,""String_Node_Str"");
      }
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.fetch(new DataSetInstance(dataSet),new UpdatableDataSetRow(row));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}","public boolean handleFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  try {
    if (!useFetchEventHandler) {
      JSScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),FETCH,((ScriptDataSetHandle)dataSetHandle).getFetch());
      if (status.didRun()) {
        Object result=status.result();
        if (result instanceof Boolean)         return ((Boolean)result).booleanValue();
 else         throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,""String_Node_Str"");
      }
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.fetch(new DataSetInstance(dataSet),new UpdatableDataSetRow(row));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}",0.9898305084745764
70468,"public SheetData[] next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  SheetData[] rowDatas=new SheetData[columnIndexes.length];
  for (int i=0; i < columnIndexes.length; i++) {
    ArrayList<SheetData> columnData=columns.get(i);
    int cursor=columnIndexes[i];
    int size=columnData.size();
    for (int j=cursor; j < size; j++) {
      SheetData data=columnData.get(j);
      int dataRowIndex=data.getRowIndex();
      if (dataRowIndex == rowIndex) {
        rowDatas[i]=data;
        columnIndexes[i]=j + 1;
        break;
      }
 else       if (dataRowIndex > rowIndex) {
        columnIndexes[i]=j;
        break;
      }
    }
  }
  rowIndex++;
  return rowDatas;
}","public SheetData[] next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  SheetData[] rowDatas=new SheetData[columnIndexes.length];
  for (int i=0; i < columnIndexes.length; i++) {
    ArrayList<SheetData> columnData=columns.get(i);
    int cursor=columnIndexes[i];
    int size=columnData.size();
    for (int j=cursor; j < size; j++) {
      SheetData data=columnData.get(j);
      int dataRowIndex=data.getRowIndex();
      if (dataRowIndex == rowIndex) {
        rowDatas[i]=data;
        if (!rowIndex2Height.isEmpty() && rowIndex2Height.containsKey(rowIndex))         rowDatas[i].setRowHeight(rowIndex2Height.get(rowIndex));
        columnIndexes[i]=j + 1;
        break;
      }
 else       if (dataRowIndex > rowIndex) {
        columnIndexes[i]=j;
        break;
      }
    }
  }
  rowIndex++;
  return rowDatas;
}",0.9051948051948052
70469,"public void endRow(IRowContent row){
  engine.endRow();
}","public void endRow(IRowContent row){
  engine.endRow(row.getHeight());
}",0.8837209302325582
70470,"public void startRow(double rowHeight){
  writer.openTag(""String_Node_Str"");
}","public void startRow(double rowHeight){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",rowHeight);
}",0.6341463414634146
70471,"private void synchronize(){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  }
  if (maxRowIndex == rowContainer.getRowIndex()) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    if (rowspan > 0) {
      SheetData upstair=cache.getColumnLastData(currentColumnIndex);
      if (upstair != null && canSpan(upstair,rowContainer)) {
        SheetData predata=upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        SheetData realData=getRealData(predata);
        BlankData blankData=new BlankData(realData);
        if (!isInContainer(predata,rowContainer)) {
          blankData.decreasRowSpanInDesign();
        }
        int rowIndex=predata.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(predata);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
  }
}","private void synchronize(DimensionType height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex == startRowIndex) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  double rowHeight=height != null ? ExcelUtil.covertDimensionType(height,0) : 0;
  double resize=rowHeight / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex + 1; i <= maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    if (rowspan > 0) {
      SheetData upstair=cache.getColumnLastData(currentColumnIndex);
      if (upstair != null && canSpan(upstair,rowContainer)) {
        SheetData predata=upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        SheetData realData=getRealData(predata);
        BlankData blankData=new BlankData(realData);
        if (!isInContainer(predata,rowContainer)) {
          blankData.decreasRowSpanInDesign();
        }
        int rowIndex=predata.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(predata);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
  }
}",0.8710499490316004
70472,"public RowData next(){
  SheetData[] row=rowIterator.next();
  List<SheetData> data=new ArrayList<SheetData>();
  int width=Math.min(row.length,maxCol - 1);
  double rowHeight=DEFAULT_ROW_HEIGHT;
  for (int i=0; i < width; i++) {
    SheetData d=row[i];
    if (d == null || d.isBlank()) {
      continue;
    }
    if (d.isProcessed()) {
      continue;
    }
    d.setProcessed(true);
    data.add(row[i]);
    if (d instanceof ImageData) {
      ImageData imagedata=(ImageData)d;
      double height=imagedata.getHeight();
      if (height > rowHeight)       rowHeight=height;
    }
  }
  SheetData[] rowdata=new SheetData[data.size()];
  data.toArray(rowdata);
  return new RowData(rowdata,rowHeight);
}","public RowData next(){
  SheetData[] row=rowIterator.next();
  List<SheetData> data=new ArrayList<SheetData>();
  int width=Math.min(row.length,maxCol - 1);
  double rowHeight=DEFAULT_ROW_HEIGHT;
  for (int i=0; i < width; i++) {
    SheetData d=row[i];
    if (d == null || d.isBlank()) {
      continue;
    }
    if (d.isProcessed()) {
      continue;
    }
    d.setProcessed(true);
    data.add(row[i]);
    if (d instanceof ImageData) {
      ImageData imagedata=(ImageData)d;
      double height=imagedata.getHeight();
      if (height > rowHeight)       rowHeight=height;
    }
 else {
      double height=d.getRowHeight();
      rowHeight=height > rowHeight ? height : rowHeight;
    }
  }
  SheetData[] rowdata=new SheetData[data.size()];
  data.toArray(rowdata);
  return new RowData(rowdata,rowHeight);
}",0.928430728824688
70473,"public void endRow(){
  synchronize();
  endContainer();
}","public void endRow(DimensionType rowHeight){
  synchronize(rowHeight);
  endContainer();
}",0.7837837837837838
70474,"/** 
 * Limits the Data point Label inside area including axes
 * @param cm
 * @param xs
 * @param laDataPoint
 * @param dScale
 * @param lo
 * @throws ChartException
 * @since 2.3
 */
public static void limitDataPointLabelLocation(Chart cm,IDisplayServer xs,Label laDataPoint,double dScale,Location lo) throws ChartException {
  if (lo == null || cm instanceof ChartWithoutAxes) {
    return;
  }
  ChartWithAxes cwa=(ChartWithAxes)cm;
  Plot p=cwa.getPlot();
  BoundingBox bb=Methods.computeBox(xs,IConstants.ABOVE,laDataPoint,0,0);
  Bounds boCa=p.getBounds().scaledInstance(dScale);
  if (!cwa.isTransposed()) {
    double dYmin=boCa.getTop() + bb.getHeight();
    double dY=lo.getY();
    if (dY < dYmin) {
      lo.setY(dYmin);
    }
  }
 else {
    double dCaRight=boCa.getLeft() + boCa.getWidth();
    double dXmax=dCaRight - bb.getWidth();
    double dX=lo.getX();
    if (dX > dXmax) {
      lo.setX(dXmax);
    }
  }
}","/** 
 * Limits the Data point Label inside area including axes
 * @param cm
 * @param xs
 * @param laDataPoint
 * @param dScale
 * @param lo
 * @throws ChartException
 * @since 2.3
 */
public static void limitDataPointLabelLocation(Chart cm,IDisplayServer xs,Label laDataPoint,double dScale,Location lo,Position lp) throws ChartException {
  if (lo == null || cm instanceof ChartWithoutAxes) {
    return;
  }
  ChartWithAxes cwa=(ChartWithAxes)cm;
  Plot p=cwa.getPlot();
  BoundingBox bb=Methods.computeBox(xs,IConstants.ABOVE,laDataPoint,0,0);
  Bounds boCa=p.getBounds().scaledInstance(dScale);
  double rotation=laDataPoint.getCaption().getFont().getRotation();
  int state=0;
switch (lp.getValue()) {
case Position.ABOVE:
    if (rotation > 0 && rotation < 90) {
      state=8;
    }
 else     if (rotation < 0 && rotation > -90) {
      state=2;
    }
 else {
      state=1;
    }
  break;
case Position.RIGHT:
if (rotation > 0 && rotation < 90) {
  state=8;
}
 else if (rotation < 0 && rotation > -90) {
  state=6;
}
 else {
  state=7;
}
break;
case Position.BELOW:
if (rotation > 0 && rotation < 90) {
state=4;
}
 else if (rotation < 0 && rotation > -90) {
state=6;
}
 else {
state=5;
}
break;
case Position.LEFT:
if (rotation > 0 && rotation < 90) {
state=4;
}
 else if (rotation < 0 && rotation > -90) {
state=2;
}
 else {
state=3;
}
break;
}
double dYmin, dYmax, dXmin, dXmax;
switch (state) {
case 1:
dYmin=boCa.getTop() + bb.getHeight();
dYmax=boCa.getTop() + boCa.getHeight();
dXmin=boCa.getLeft() + bb.getWidth() / 2;
dXmax=boCa.getLeft() + boCa.getWidth() - bb.getWidth() / 2;
break;
case 2:
dYmin=boCa.getTop() + bb.getHeight();
dYmax=boCa.getTop() + boCa.getHeight();
dXmin=boCa.getLeft() + bb.getWidth();
dXmax=boCa.getLeft() + boCa.getWidth();
break;
case 3:
dYmin=boCa.getTop() + bb.getHeight() / 2;
dYmax=boCa.getTop() + boCa.getHeight() - bb.getHeight() / 2;
dXmin=boCa.getLeft() + bb.getWidth();
dXmax=boCa.getLeft() + boCa.getWidth();
break;
case 4:
dYmin=boCa.getTop();
dYmax=boCa.getTop() + boCa.getHeight() - bb.getHeight();
dXmin=boCa.getLeft() + bb.getWidth();
dXmax=boCa.getLeft() + boCa.getWidth();
break;
case 5:
dYmin=boCa.getTop();
dYmax=boCa.getTop() + boCa.getHeight() - bb.getHeight();
dXmin=boCa.getLeft() + bb.getWidth() / 2;
dXmax=boCa.getLeft() + boCa.getWidth() - bb.getWidth() / 2;
break;
case 6:
dYmin=boCa.getTop();
dYmax=boCa.getTop() + boCa.getHeight() - bb.getHeight();
dXmin=boCa.getLeft();
dXmax=boCa.getLeft() + boCa.getWidth() - bb.getWidth();
break;
case 7:
dYmin=boCa.getTop() + bb.getHeight() / 2;
dYmax=boCa.getTop() + boCa.getHeight() - bb.getHeight() / 2;
dXmin=boCa.getLeft();
dXmax=boCa.getLeft() + boCa.getWidth() - bb.getWidth();
break;
case 8:
dYmin=boCa.getTop() + bb.getHeight();
dYmax=boCa.getTop() + boCa.getHeight();
dXmin=boCa.getLeft();
dXmax=boCa.getLeft() + boCa.getWidth() - bb.getWidth();
break;
default :
dYmin=lo.getY();
dYmax=lo.getY();
dXmin=lo.getX();
dXmax=lo.getX();
break;
}
if (lo.getY() < dYmin) {
lo.setY(dYmin);
}
if (lo.getY() > dYmax) {
lo.setY(dYmax);
}
if (lo.getX() < dXmin) {
lo.setX(dXmin);
}
if (lo.getX() > dXmax) {
lo.setX(dXmax);
}
}",0.3112533858655503
70475,"public void align(boolean lastLine,LayoutContext context){
  assert(parent instanceof BlockContainerArea);
  CSSValue align=((BlockContainerArea)parent).getTextAlign();
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(parent.content,align,lastLine);
  if ((isRightAligned || IStyle.CENTER_VALUE.equals(align))) {
    int spacing=width - currentIP;
    Iterator iter=getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (isRightAligned) {
          if (parent.content.isDirectionRTL()) {
            area.setPosition(spacing + area.getX(),area.getY());
          }
 else {
            area.setPosition(spacing + area.getX() + ignoreRightMostWhiteSpace(),area.getY());
          }
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setPosition(spacing / 2 + area.getX(),area.getY());
        }
      }
    }
  }
 else   if (IStyle.JUSTIFY_VALUE.equals(align) && !lastLine) {
    justify();
  }
  if (context.getBidiProcessing())   reorderVisually();
  verticalAlign();
}","public void align(boolean lastLine,LayoutContext context){
  assert(parent instanceof BlockContainerArea);
  CSSValue align=((BlockContainerArea)parent).getTextAlign();
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(parent.content,align,lastLine);
  if ((isRightAligned || IStyle.CENTER_VALUE.equals(align))) {
    int spacing=width - currentIP;
    Iterator iter=getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (isRightAligned) {
        if (parent.content.isDirectionRTL()) {
          area.setPosition(spacing + area.getX(),area.getY());
        }
 else {
          area.setPosition(spacing + area.getX() + ignoreRightMostWhiteSpace(),area.getY());
        }
      }
 else       if (IStyle.CENTER_VALUE.equals(align)) {
        area.setPosition(spacing / 2 + area.getX(),area.getY());
      }
    }
  }
 else   if (IStyle.JUSTIFY_VALUE.equals(align) && !lastLine) {
    justify();
  }
  if (context.getBidiProcessing())   reorderVisually();
  verticalAlign();
}",0.9618464437117288
70476,"public void run(){
  try {
    this.statement.execute();
    if (this.closeStatementAfterExecution)     this.statement.close();
  }
 catch (  Exception e) {
    this.exception=new DataException(e.getLocalizedMessage());
  }
}","public void run(){
  try {
    while (!threadQuiter.isStopped()) {
      if (stopSign.isStopped()) {
        this.statement.cancel();
        threadQuiter.stop();
      }
    }
  }
 catch (  Exception e) {
    this.exception=new DataException(e.getLocalizedMessage());
  }
}",0.3887775551102204
70477,"protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int actualHeight=contentDimension.getHeight();
  int actualWidth=contentDimension.getWidth();
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)(rw * maxHeight);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)(rh * maxWidth);
      }
    }
 else {
      root.setNeedClip(true);
      root.setAllocatedHeight(Math.min(maxHeight,cHeight));
      root.setAllocatedWidth(Math.min(maxWidth,cWidth));
    }
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=false;
}","protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setNeedClip(true);
      root.setAllocatedHeight(Math.min(maxHeight,cHeight));
      root.setAllocatedWidth(Math.min(maxWidth,cWidth));
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=false;
}",0.7752808988764045
70478,"protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int actualHeight=contentDimension.getHeight();
  int actualWidth=contentDimension.getWidth();
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)(rw * maxHeight);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)(rh * maxWidth);
      }
    }
 else {
      root.setNeedClip(true);
      root.setAllocatedHeight(Math.min(maxHeight,cHeight));
      root.setAllocatedWidth(Math.min(maxWidth,cWidth));
    }
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=true;
}","protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int actualHeight=contentDimension.getHeight();
  int actualWidth=contentDimension.getWidth();
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)(rw * maxHeight);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)(rh * maxWidth);
      }
    }
 else {
      root.setNeedClip(true);
      root.setAllocatedHeight(Math.min(maxHeight,cHeight));
      root.setAllocatedWidth(Math.min(maxWidth,cWidth));
    }
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.finished=false;
}",0.997924696116217
70479,"public void layout() throws BirtException {
  init();
  if (PropertyUtil.isInlineElement(image)) {
    assert(parent instanceof InlineStackingArea);
    InlineStackingArea lineParent=(InlineStackingArea)parent;
    if (root.getAllocatedWidth() > parent.getCurrentMaxContentWidth()) {
      if (!lineParent.isEmptyLine()) {
        lineParent.endLine();
        layout();
      }
 else {
        parent.add(root);
        parent.update(root);
        return;
      }
    }
 else {
      parent.add(root);
      parent.update(root);
      return;
    }
  }
 else {
    parent.add(root);
    if (!parent.isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=root.getAllocatedHeight();
      if (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
        parent.autoPageBreak();
      }
    }
    parent.update(root);
  }
}","public void layout() throws BirtException {
  init();
  if (PropertyUtil.isInlineElement(image)) {
    assert(parent instanceof InlineStackingArea);
    InlineStackingArea lineParent=(InlineStackingArea)parent;
    if (root.getAllocatedWidth() > parent.getCurrentMaxContentWidth()) {
      if (!lineParent.isEmptyLine()) {
        lineParent.endLine();
        layout();
      }
 else {
        parent.add(root);
        root.finished=true;
        parent.update(root);
        return;
      }
    }
 else {
      parent.add(root);
      root.finished=true;
      parent.update(root);
      return;
    }
  }
 else {
    parent.add(root);
    if (!parent.isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=root.getAllocatedHeight();
      if (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
        parent.autoPageBreak();
      }
    }
    root.finished=true;
    parent.update(root);
  }
}",0.955631399317406
70480,"/** 
 * Convert IGroupDefn to IQuery.GroupSpec
 * @param cx
 * @param src
 * @return
 * @throws DataException
 */
static IQuery.GroupSpec groupDefnToSpec(Context cx,IGroupDefinition src,String expr,String columnName,int index,boolean doSortBeforeGrouping) throws DataException {
  ColumnInfo groupKeyInfo=new ColumnInfo(index,columnName);
  int groupIndex=groupKeyInfo.getColumnIndex();
  String groupKey=groupKeyInfo.getColumnName();
  boolean isComplexExpression=true;
  IQuery.GroupSpec dest=new IQuery.GroupSpec(groupIndex,groupKey);
  dest.setName(src.getName());
  dest.setInterval(src.getInterval());
  dest.setIntervalRange(src.getIntervalRange());
  dest.setIntervalStart(src.getIntervalStart());
  dest.setSortDirection(doSortBeforeGrouping ? src.getSortDirection() : IQuery.NO_SORT_BEFORE_GROUPING);
  dest.setFilters(src.getFilters());
  if (src.getSorts().size() != 0) {
    dest.setSorts(src.getSorts());
  }
  dest.setIsComplexExpression(isComplexExpression);
  return dest;
}","/** 
 * Convert IGroupDefn to IQuery.GroupSpec
 * @param cx
 * @param src
 * @return
 * @throws DataException
 */
static IQuery.GroupSpec groupDefnToSpec(Context cx,IGroupDefinition src,String expr,String columnName,int index,int dataType,boolean doSortBeforeGrouping) throws DataException {
  ColumnInfo groupKeyInfo=new ColumnInfo(index,columnName);
  int groupIndex=groupKeyInfo.getColumnIndex();
  String groupKey=groupKeyInfo.getColumnName();
  boolean isComplexExpression=true;
  IQuery.GroupSpec dest=new IQuery.GroupSpec(groupIndex,groupKey);
  dest.setName(src.getName());
  dest.setInterval(src.getInterval());
  dest.setIntervalRange(src.getIntervalRange());
  dest.setIntervalStart(src.getIntervalStart());
  dest.setSortDirection(doSortBeforeGrouping ? src.getSortDirection() : IQuery.NO_SORT_BEFORE_GROUPING);
  dest.setDataType(dataType);
  dest.setFilters(src.getFilters());
  if (src.getSorts().size() != 0) {
    dest.setSorts(src.getSorts());
  }
  dest.setIsComplexExpression(isComplexExpression);
  return dest;
}",0.9787654320987654
70481,"/** 
 * 1) Creates row wrapper. 2) For the null cell in the row wrapper, fills the relevant position with dummy cell or empty cell. 3) Updates the height of the row and the cells in the row.
 * @param rowArea current rowArea.
 */
private void updateRow(RowArea rowArea,boolean isFixedLayout){
  RowArea lastRow=(RowArea)rows.getCurrent();
  int height=rowArea.getSpecifiedHeight();
  if (!isFixedLayout) {
    for (int i=startCol; i <= endCol; i++) {
      CellArea upperCell=null;
      if (lastRow != null) {
        upperCell=lastRow.getCell(i);
      }
      if (upperCell != null && (upperCell.getRowSpan() > 1)) {
        DummyCell dummyCell=createDummyCell(upperCell);
        rowArea.setCell(dummyCell);
        int delta=dummyCell.getDelta();
        if (dummyCell.getRowSpan() == 1) {
          height=Math.max(height,dummyCell.getCell().getHeight() - delta);
        }
        i=i + upperCell.getColSpan() - 1;
      }
 else {
        CellArea cell=rowArea.getCell(i);
        if (cell != null && cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
          i=i + cell.getColSpan() - 1;
        }
      }
    }
  }
  updateRowHeight(rowArea,height,isFixedLayout);
}","/** 
 * 1) Creates row wrapper. 2) For the null cell in the row wrapper, fills the relevant position with dummy cell or empty cell. 3) Updates the height of the row and the cells in the row.
 * @param rowArea current rowArea.
 */
private void updateRow(RowArea rowArea,boolean isFixedLayout){
  RowArea lastRow=(RowArea)rows.getCurrent();
  int height=rowArea.getSpecifiedHeight();
  if (!isFixedLayout || height == 0) {
    for (int i=startCol; i <= endCol; i++) {
      CellArea upperCell=null;
      if (lastRow != null) {
        upperCell=lastRow.getCell(i);
      }
      if (upperCell != null && (upperCell.getRowSpan() > 1)) {
        DummyCell dummyCell=createDummyCell(upperCell);
        rowArea.setCell(dummyCell);
        int delta=dummyCell.getDelta();
        if (dummyCell.getRowSpan() == 1) {
          height=Math.max(height,dummyCell.getCell().getHeight() - delta);
        }
        i=i + upperCell.getColSpan() - 1;
      }
 else {
        CellArea cell=rowArea.getCell(i);
        if (cell != null && cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
          i=i + cell.getColSpan() - 1;
        }
      }
    }
  }
  updateRowHeight(rowArea,height,isFixedLayout);
}",0.9938042131350682
70482,"/** 
 * Creates reusable actions for all BIRT graphical editors. (non-Javadoc)
 * @see org.eclipse.gef.ui.parts.GraphicalEditor#createActions()
 */
protected void createActions(){
  super.createActions();
  IAction action=new MergeAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new SplitAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CreateChartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteRowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteColumnAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteTableGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertRowAboveAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertRowBelowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertTableGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertColumnRightAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertColumnLeftAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CutPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CopyPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new PastePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertListGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteListGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new AddStyleAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ImportCSSStylePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new AddGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertGroupMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ChangeDataColumnPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CreatePlaceHolderPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new RevertToReportItemPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new RevertToTemplatePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ExportElementToLibraryPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ApplyStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ApplyThemeMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditGroupMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditBindingAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_TEXT_ID,ReportDesignConstants.TEXT_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_LABEL_ID,ReportDesignConstants.LABEL_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_DATA_ID,ReportDesignConstants.DATA_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_GRID_ID,ReportDesignConstants.GRID_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_LIST_ID,ReportDesignConstants.LIST_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_TABLE_ID,ReportDesignConstants.TABLE_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_IMAGE_ID,ReportDesignConstants.IMAGE_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_ID,ReportDesignConstants.TEXT_DATA_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new InsertAggregationAction(this);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new NewParameterAction(NewParameterAction.INSERT_SCALAR_PARAMETER,ReportDesignConstants.SCALAR_PARAMETER_ELEMENT);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new NewParameterAction(NewParameterAction.INSERT_PARAMETER_GROUP,ReportDesignConstants.PARAMETER_GROUP_ELEMENT);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new NewParameterAction(NewParameterAction.INSERT_CASCADING_PARAMETER_GROUP,ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertExpressionMenuAction(this);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new NewDataSourceAction();
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new NewDataSetAction();
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new NewJointDataSetAction();
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DirectEditAction((IWorkbenchPart)this);
  ((DirectEditAction)action).setDirectEditRequest(new Request(RequestConstants.REQ_OPEN));
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeHeaderAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeDetailAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeFooterAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new UseLibraryPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new SelectRowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new SelectColumnAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CopyCellContentsContextAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CopyFormatAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new PasteFormatAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ResetImageSizeAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  registerInsertExtElementActions();
}","/** 
 * Creates reusable actions for all BIRT graphical editors. (non-Javadoc)
 * @see org.eclipse.gef.ui.parts.GraphicalEditor#createActions()
 */
protected void createActions(){
  super.createActions();
  IAction action=new MergeAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new SplitAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CreateChartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteRowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteColumnAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteTableGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertRowAboveAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertRowBelowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertTableGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertColumnRightAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertColumnLeftAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CutPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CopyPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new PastePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertListGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteListGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new AddStyleAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ImportCSSStylePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new AddGroupAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new InsertGroupMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ChangeDataColumnPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CreatePlaceHolderPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new RevertToReportItemPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new RevertToTemplatePartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ExportElementToLibraryPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ApplyStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ApplyThemeMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new DeleteStyleMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditGroupMenuAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new EditBindingAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_TEXT_ID,ReportDesignConstants.TEXT_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_LABEL_ID,ReportDesignConstants.LABEL_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_DATA_ID,ReportDesignConstants.DATA_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_GRID_ID,ReportDesignConstants.GRID_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_LIST_ID,ReportDesignConstants.LIST_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_TABLE_ID,ReportDesignConstants.TABLE_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_IMAGE_ID,ReportDesignConstants.IMAGE_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new GeneralInsertMenuAction(this,GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_ID,ReportDesignConstants.TEXT_DATA_ITEM);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new InsertAggregationAction(this);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new InsertExpressionMenuAction(this);
  getSelectionActions().add(action.getId());
  addEditPartAction((SelectionAction)action);
  action=new DirectEditAction((IWorkbenchPart)this);
  ((DirectEditAction)action).setDirectEditRequest(new Request(RequestConstants.REQ_OPEN));
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeHeaderAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeDetailAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new IncludeFooterAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new UseLibraryPartAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new SelectRowAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new SelectColumnAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CopyCellContentsContextAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new CopyFormatAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new PasteFormatAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  action=new ResetImageSizeAction(this);
  getActionRegistry().registerAction(action);
  getSelectionActions().add(action.getId());
  registerInsertExtElementActions();
}",0.9376161083478156
70483,"/** 
 * Handles all global actions
 */
private void handleGlobalAction(){
  for (int i=0; i < GlobalActionFactory.GLOBAL_SELECTION_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_SELECTION_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  for (int i=0; i < GlobalActionFactory.GLOBAL_DATA_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_DATA_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  for (int i=0; i < GlobalActionFactory.GLOBAL_PARAMETER_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_PARAMETER_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  for (int i=0; i < GlobalActionFactory.GLOBAL_STACK_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_STACK_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createStackAction(id,getRoot().getCommandStack()));
  }
  getSite().getActionBars().updateActionBars();
}","/** 
 * Handles all global actions
 */
private void handleGlobalAction(){
  for (int i=0; i < GlobalActionFactory.GLOBAL_SELECTION_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_SELECTION_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  for (int i=0; i < GlobalActionFactory.GLOBAL_STACK_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_STACK_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createStackAction(id,getRoot().getCommandStack()));
  }
  getSite().getActionBars().updateActionBars();
}",0.7146042363433668
70484,"/** 
 * Handles all global actions
 */
private void handleGlobalAction(){
  for (int i=0; i < GlobalActionFactory.GLOBAL_SELECTION_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_SELECTION_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  for (int i=0; i < GlobalActionFactory.GLOBAL_INSERT_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_INSERT_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  for (int i=0; i < GlobalActionFactory.GLOBAL_ELEMENT_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_ELEMENT_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  List list=ExtensionPointManager.getInstance().getExtendedElementPoints();
  for (Iterator iter=list.iterator(); iter.hasNext(); ) {
    ExtendedElementUIPoint point=(ExtendedElementUIPoint)iter.next();
    String id=point.getExtensionName();
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
  for (int i=0; i < entries.length; i++) {
    getSite().getActionBars().setGlobalActionHandler(entries[i].getItemName(),GlobalActionFactory.createSelectionAction(entries[i].getItemName(),this));
  }
  getSite().getActionBars().setGlobalActionHandler(ImportLibraryAction.ID,new RetargetAction(ImportLibraryAction.ID,ImportLibraryAction.ACTION_TEXT));
  for (int i=0; i < GlobalActionFactory.GLOBAL_STACK_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_STACK_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createStackAction(id,getRoot().getCommandStack()));
  }
  for (int i=0; i < GlobalActionFactory.GLOBAL_DATA_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_DATA_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  for (int i=0; i < GlobalActionFactory.GLOBAL_PARAMETER_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_PARAMETER_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  getSite().getActionBars().updateActionBars();
}","/** 
 * Handles all global actions
 */
private void handleGlobalAction(){
  for (int i=0; i < GlobalActionFactory.GLOBAL_SELECTION_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_SELECTION_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  for (int i=0; i < GlobalActionFactory.GLOBAL_INSERT_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_INSERT_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  for (int i=0; i < GlobalActionFactory.GLOBAL_ELEMENT_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_ELEMENT_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  List list=ExtensionPointManager.getInstance().getExtendedElementPoints();
  for (Iterator iter=list.iterator(); iter.hasNext(); ) {
    ExtendedElementUIPoint point=(ExtendedElementUIPoint)iter.next();
    String id=point.getExtensionName();
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createSelectionAction(id,this));
  }
  PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
  for (int i=0; i < entries.length; i++) {
    getSite().getActionBars().setGlobalActionHandler(entries[i].getItemName(),GlobalActionFactory.createSelectionAction(entries[i].getItemName(),this));
  }
  getSite().getActionBars().setGlobalActionHandler(ImportLibraryAction.ID,new RetargetAction(ImportLibraryAction.ID,ImportLibraryAction.ACTION_TEXT));
  for (int i=0; i < GlobalActionFactory.GLOBAL_STACK_ACTIONS.length; i++) {
    String id=GlobalActionFactory.GLOBAL_STACK_ACTIONS[i];
    getSite().getActionBars().setGlobalActionHandler(id,GlobalActionFactory.createStackAction(id,getRoot().getCommandStack()));
  }
  getSite().getActionBars().updateActionBars();
}",0.8852309099222679
70485,"private Label addDescriptionLabel(Composite parent,int horizontalSpan,String description){
  Label label=new Label(parent,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.widthHint=200;
    gd.horizontalSpan=horizontalSpan;
    label.setLayoutData(gd);
    label.setText(description);
  }
  return label;
}","private Label addDescriptionLabel(Composite parent,int horizontalSpan,String description){
  Label label=new Label(parent,SWT.WRAP);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=200;
    gd.horizontalSpan=horizontalSpan;
    label.setLayoutData(gd);
    label.setText(description);
  }
  return label;
}",0.9626168224299064
70486,"private void placeComponents(){
  GridLayout glCMPTrigger=new GridLayout();
  glCMPTrigger.numColumns=3;
  glCMPTrigger.horizontalSpacing=16;
  glCMPTrigger.verticalSpacing=5;
  slValues=new StackLayout();
  GridLayout glURL=new GridLayout();
  glURL.marginWidth=2;
  glURL.marginHeight=6;
  glURL.horizontalSpacing=6;
  glURL.numColumns=3;
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  this.setLayout(glCMPTrigger);
  Label lblTriggerEvent=new Label(this,SWT.NONE);
  GridData gdLBLTriggerEvent=new GridData();
  gdLBLTriggerEvent.horizontalIndent=4;
  lblTriggerEvent.setLayoutData(gdLBLTriggerEvent);
  lblTriggerEvent.setText(Messages.getString(""String_Node_Str""));
  cmbTriggerType=new TextCombo(this,SWT.NONE);
  GridData gdCMBTriggerType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBTriggerType.horizontalSpan=2;
  cmbTriggerType.setLayoutData(gdCMBTriggerType);
  cmbTriggerType.addListener(TextCombo.SELECTION_EVENT,new Listener(){
    public void handleEvent(    Event event){
      updateTrigger(lastTriggerType);
      updateActionTypeItems();
      Trigger trigger=(Trigger)triggersMap.get(cmbTriggerType.getText());
      if (trigger != null && triggerMatrix.check(trigger)) {
        cmbActionType.setText(getActionText(trigger));
      }
 else {
        cmbActionType.select(0);
      }
      updateUI(trigger);
      switchUI();
      lastTriggerType=cmbTriggerType.getText();
    }
  }
);
  Label lblActionType=new Label(this,SWT.NONE);
  GridData gdLBLActionType=new GridData();
  gdLBLActionType.horizontalIndent=4;
  lblActionType.setLayoutData(gdLBLActionType);
  lblActionType.setText(Messages.getString(""String_Node_Str""));
  cmbActionType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBActionType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBActionType.horizontalSpan=2;
  cmbActionType.setLayoutData(gdCMBActionType);
  cmbActionType.addSelectionListener(this);
  cmbActionType.setVisibleItemCount(10);
  Label lblCursorType=new Label(this,SWT.NONE);
  GridData gdLBLCursorType=new GridData();
  gdLBLCursorType.horizontalIndent=4;
  lblCursorType.setLayoutData(gdLBLCursorType);
  lblCursorType.setText(Messages.getString(""String_Node_Str""));
  cmbCursorType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBCursorType=new GridData(GridData.FILL_HORIZONTAL);
  cmbCursorType.setLayoutData(gdCMBCursorType);
  cmbCursorType.addSelectionListener(this);
  btnCursorImage=new Button(this,SWT.NONE);
  btnCursorImage.setText(Messages.getString(""String_Node_Str""));
  GridData gdBTNCursorImage=new GridData();
  btnCursorImage.setLayoutData(gdBTNCursorImage);
  btnCursorImage.addSelectionListener(this);
  btnCursorImage.setEnabled(false);
  grpValue=new Group(this,SWT.NONE);
  GridData gdGRPValue=new GridData(GridData.FILL_BOTH);
  gdGRPValue.horizontalSpan=3;
  grpValue.setLayoutData(gdGRPValue);
  grpValue.setText(Messages.getString(""String_Node_Str""));
  grpValue.setLayout(slValues);
  cmpDefault=new Composite(grpValue,SWT.NONE);
  cmpCallback=new Composite(grpValue,SWT.NONE);
  cmpCallback.setLayout(new GridLayout());
  addDescriptionLabel(cmpCallback,1,Messages.getString(""String_Node_Str""));
  cmpHighlight=new Composite(grpValue,SWT.NONE);
  cmpHighlight.setLayout(new GridLayout());
  addDescriptionLabel(cmpHighlight,1,Messages.getString(""String_Node_Str""));
  cmpVisiblity=new Composite(grpValue,SWT.NONE);
  cmpVisiblity.setLayout(new GridLayout());
  addDescriptionLabel(cmpVisiblity,1,Messages.getString(""String_Node_Str""));
  cmpDPVisibility=new Composite(grpValue,SWT.NONE);
  cmpDPVisibility.setLayout(new GridLayout());
  addDescriptionLabel(cmpDPVisibility,1,Messages.getString(""String_Node_Str""));
  cmpScript=new Composite(grpValue,SWT.NONE);
  cmpScript.setLayout(new GridLayout(2,false));
  Label lblScript=new Label(cmpScript,SWT.NONE);
{
    GridData gdLBLScript=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
    lblScript.setLayoutData(gdLBLScript);
    lblScript.setText(Messages.getString(""String_Node_Str""));
  }
  txtScript=new Text(cmpScript,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalSpan=2;
    txtScript.setLayoutData(gd);
    txtScript.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  btnScriptExpBuilder=new Button(cmpScript,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.heightHint=20;
    gd.widthHint=20;
    gd.verticalAlignment=GridData.BEGINNING;
    gd.horizontalAlignment=GridData.END;
    btnScriptExpBuilder.setLayoutData(gd);
    btnScriptExpBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnScriptExpBuilder.addSelectionListener(this);
    btnScriptExpBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnScriptExpBuilder.getImage().setBackground(btnScriptExpBuilder.getBackground());
  }
  cmpTooltip=new Composite(grpValue,SWT.NONE);
  cmpTooltip.setLayout(new GridLayout(3,false));
  Label lblText=new Label(cmpTooltip,SWT.NONE);
  lblText.setText(Messages.getString(""String_Node_Str""));
  if (bEnableShowTooltipValue) {
    GridData lblGd=new GridData();
    lblGd.horizontalSpan=3;
    lblText.setLayoutData(lblGd);
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    GridData gdTXTTooltipText=new GridData(GridData.FILL_BOTH);
    gdTXTTooltipText.horizontalSpan=3;
    txtTooltipText.setLayoutData(gdTXTTooltipText);
  }
 else {
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.SINGLE);
    txtTooltipText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    btnTooltipExpBuilder=new Button(cmpTooltip,SWT.PUSH);
    GridData gdBTNBuilder=new GridData();
    gdBTNBuilder.heightHint=20;
    gdBTNBuilder.widthHint=20;
    btnTooltipExpBuilder.setLayoutData(gdBTNBuilder);
    btnTooltipExpBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnTooltipExpBuilder.addSelectionListener(this);
    btnTooltipExpBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnTooltipExpBuilder.getImage().setBackground(btnTooltipExpBuilder.getBackground());
    addDescriptionLabel(cmpTooltip,3,Messages.getString(""String_Node_Str""));
  }
  createURLComposite(glURL,glParameter);
  multiHyperlinksComposite=new MultipleHyperlinksComposite(grpValue,SWT.NONE,wizardContext,triggerMatrix,optionalStyle);
  populateLists();
}","private void placeComponents(){
  GridLayout glCMPTrigger=new GridLayout();
  glCMPTrigger.numColumns=3;
  glCMPTrigger.horizontalSpacing=16;
  glCMPTrigger.verticalSpacing=5;
  slValues=new StackLayout();
  GridLayout glURL=new GridLayout();
  glURL.marginWidth=2;
  glURL.marginHeight=6;
  glURL.horizontalSpacing=6;
  glURL.numColumns=3;
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  this.setLayout(glCMPTrigger);
  Label lblTriggerEvent=new Label(this,SWT.NONE);
  GridData gdLBLTriggerEvent=new GridData();
  gdLBLTriggerEvent.horizontalIndent=4;
  lblTriggerEvent.setLayoutData(gdLBLTriggerEvent);
  lblTriggerEvent.setText(Messages.getString(""String_Node_Str""));
  cmbTriggerType=new TextCombo(this,SWT.NONE);
  GridData gdCMBTriggerType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBTriggerType.horizontalSpan=2;
  cmbTriggerType.setLayoutData(gdCMBTriggerType);
  cmbTriggerType.addListener(TextCombo.SELECTION_EVENT,new Listener(){
    public void handleEvent(    Event event){
      updateTrigger(lastTriggerType);
      updateActionTypeItems();
      Trigger trigger=(Trigger)triggersMap.get(cmbTriggerType.getText());
      if (trigger != null && triggerMatrix.check(trigger)) {
        cmbActionType.setText(getActionText(trigger));
      }
 else {
        cmbActionType.select(0);
      }
      updateUI(trigger);
      switchUI();
      lastTriggerType=cmbTriggerType.getText();
    }
  }
);
  Label lblActionType=new Label(this,SWT.NONE);
  GridData gdLBLActionType=new GridData();
  gdLBLActionType.horizontalIndent=4;
  lblActionType.setLayoutData(gdLBLActionType);
  lblActionType.setText(Messages.getString(""String_Node_Str""));
  cmbActionType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBActionType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBActionType.horizontalSpan=2;
  cmbActionType.setLayoutData(gdCMBActionType);
  cmbActionType.addSelectionListener(this);
  cmbActionType.setVisibleItemCount(10);
  Label lblCursorType=new Label(this,SWT.NONE);
  GridData gdLBLCursorType=new GridData();
  gdLBLCursorType.horizontalIndent=4;
  lblCursorType.setLayoutData(gdLBLCursorType);
  lblCursorType.setText(Messages.getString(""String_Node_Str""));
  cmbCursorType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBCursorType=new GridData(GridData.FILL_HORIZONTAL);
  cmbCursorType.setLayoutData(gdCMBCursorType);
  cmbCursorType.addSelectionListener(this);
  btnCursorImage=new Button(this,SWT.NONE);
  btnCursorImage.setText(Messages.getString(""String_Node_Str""));
  GridData gdBTNCursorImage=new GridData();
  btnCursorImage.setLayoutData(gdBTNCursorImage);
  btnCursorImage.addSelectionListener(this);
  btnCursorImage.setEnabled(false);
  grpValue=new Group(this,SWT.NONE);
  GridData gdGRPValue=new GridData(GridData.FILL_BOTH);
  gdGRPValue.horizontalSpan=3;
  grpValue.setLayoutData(gdGRPValue);
  grpValue.setText(Messages.getString(""String_Node_Str""));
  grpValue.setLayout(slValues);
  cmpDefault=new Composite(grpValue,SWT.NONE);
  cmpCallback=new Composite(grpValue,SWT.NONE);
  cmpCallback.setLayout(new GridLayout());
  addDescriptionLabel(cmpCallback,1,Messages.getString(""String_Node_Str""));
  cmpHighlight=new Composite(grpValue,SWT.NONE);
  cmpHighlight.setLayout(new GridLayout());
  addDescriptionLabel(cmpHighlight,1,Messages.getString(""String_Node_Str""));
  cmpVisiblity=new Composite(grpValue,SWT.NONE);
  cmpVisiblity.setLayout(new GridLayout());
  addDescriptionLabel(cmpVisiblity,1,Messages.getString(""String_Node_Str""));
  cmpDPVisibility=new Composite(grpValue,SWT.NONE);
  cmpDPVisibility.setLayout(new GridLayout());
  addDescriptionLabel(cmpDPVisibility,1,Messages.getString(""String_Node_Str""));
  cmpScript=new Composite(grpValue,SWT.NONE);
  cmpScript.setLayout(new GridLayout(2,false));
  Label lblScript=new Label(cmpScript,SWT.NONE);
{
    GridData gdLBLScript=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
    lblScript.setLayoutData(gdLBLScript);
    lblScript.setText(Messages.getString(""String_Node_Str""));
  }
  txtScript=new Text(cmpScript,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL| SWT.H_SCROLL);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalSpan=2;
    txtScript.setLayoutData(gd);
    txtScript.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  btnScriptExpBuilder=new Button(cmpScript,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.heightHint=20;
    gd.widthHint=20;
    gd.verticalAlignment=GridData.BEGINNING;
    gd.horizontalAlignment=GridData.END;
    btnScriptExpBuilder.setLayoutData(gd);
    btnScriptExpBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnScriptExpBuilder.addSelectionListener(this);
    btnScriptExpBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnScriptExpBuilder.getImage().setBackground(btnScriptExpBuilder.getBackground());
  }
  cmpTooltip=new Composite(grpValue,SWT.NONE);
  cmpTooltip.setLayout(new GridLayout(3,false));
  Label lblText=new Label(cmpTooltip,SWT.NONE);
  lblText.setText(Messages.getString(""String_Node_Str""));
  if (bEnableShowTooltipValue) {
    GridData lblGd=new GridData();
    lblGd.horizontalSpan=3;
    lblText.setLayoutData(lblGd);
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    GridData gdTXTTooltipText=new GridData(GridData.FILL_BOTH);
    gdTXTTooltipText.horizontalSpan=3;
    txtTooltipText.setLayoutData(gdTXTTooltipText);
  }
 else {
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.SINGLE);
    txtTooltipText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    btnTooltipExpBuilder=new Button(cmpTooltip,SWT.PUSH);
    GridData gdBTNBuilder=new GridData();
    gdBTNBuilder.heightHint=20;
    gdBTNBuilder.widthHint=20;
    btnTooltipExpBuilder.setLayoutData(gdBTNBuilder);
    btnTooltipExpBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnTooltipExpBuilder.addSelectionListener(this);
    btnTooltipExpBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnTooltipExpBuilder.getImage().setBackground(btnTooltipExpBuilder.getBackground());
    addDescriptionLabel(cmpTooltip,3,Messages.getString(""String_Node_Str""));
  }
  createURLComposite(glURL,glParameter);
  multiHyperlinksComposite=new MultipleHyperlinksComposite(grpValue,SWT.NONE,wizardContext,triggerMatrix,optionalStyle);
  populateLists();
}",0.998912198912199
70487,"public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new Button(cmpBasic,SWT.CHECK);
{
      btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
      btnCategoryAxis.addSelectionListener(this);
      btnCategoryAxis.setSelection(getAxisForProcessing().isCategoryAxis());
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    }
    btnReverse=new Button(cmpBasic,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnCategoryAxis.setLayoutData(gd);
      btnReverse.setText(Messages.getString(""String_Node_Str""));
      btnReverse.addSelectionListener(this);
      btnReverse.setSelection(((ChartWithAxes)getChart()).isReverseCategory());
      btnReverse.setEnabled(btnCategoryAxis.getSelection());
    }
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getAxisForProcessing().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=250;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.setSelection(getChart().getTitle().isVisible());
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getAxisForProcessing().getTitle().isVisible());
  }
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNFormatSpecifier);
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setImage(UIHelper.getImage(""String_Node_Str""));
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.getImage().setBackground(btnFormatSpecifier.getBackground());
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=new TextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=2;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new Button(cmpLabel,SWT.CHECK);
{
    btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    btnLabelVisible.setLayoutData(gd);
    btnLabelVisible.addSelectionListener(this);
    btnLabelVisible.setSelection(getAxisForProcessing().getLabel().isVisible());
  }
  cbStaggered=new Button(cmpLabel,SWT.CHECK);
{
    Axis ax=getAxisForProcessing();
    boolean bStaggered=ax.isSetStaggered() && ax.isStaggered();
    boolean bNot3D=!isChart3D(ax);
    cbStaggered.setSelection(bNot3D && bStaggered);
    cbStaggered.setText(Messages.getString(""String_Node_Str""));
    cbStaggered.addSelectionListener(this);
    cbStaggered.setEnabled(bNot3D);
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginTop=0;
      layout.marginBottom=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    Composite cmpEditor=new Composite(cmpEditorWithUnit,SWT.NONE);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      cmpEditor.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      FieldAssistHelper.getInstance().initDecorationMargin(layout);
      layout.marginTop=0;
      layout.marginBottom=0;
      cmpEditor.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditor,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}","public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new Button(cmpBasic,SWT.CHECK);
{
      btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
      btnCategoryAxis.addSelectionListener(this);
      btnCategoryAxis.setSelection(getAxisForProcessing().isCategoryAxis());
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    }
    btnReverse=new Button(cmpBasic,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnCategoryAxis.setLayoutData(gd);
      btnReverse.setText(Messages.getString(""String_Node_Str""));
      btnReverse.addSelectionListener(this);
      btnReverse.setSelection(((ChartWithAxes)getChart()).isReverseCategory());
      btnReverse.setEnabled(btnCategoryAxis.getSelection());
    }
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getAxisForProcessing().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=250;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.setSelection(getChart().getTitle().isVisible());
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getAxisForProcessing().getTitle().isVisible());
  }
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNFormatSpecifier);
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setImage(UIHelper.getImage(""String_Node_Str""));
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.getImage().setBackground(btnFormatSpecifier.getBackground());
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=new TextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=2;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new Button(cmpLabel,SWT.CHECK);
{
    btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    btnLabelVisible.setLayoutData(gd);
    btnLabelVisible.addSelectionListener(this);
    btnLabelVisible.setSelection(getAxisForProcessing().getLabel().isVisible());
  }
  cbStaggered=new Button(cmpLabel,SWT.CHECK);
{
    Axis ax=getAxisForProcessing();
    boolean bStaggered=ax.isSetStaggered() && ax.isStaggered();
    boolean bNot3D=!isChart3D(ax);
    cbStaggered.setSelection(bNot3D && bStaggered);
    cbStaggered.setText(Messages.getString(""String_Node_Str""));
    cbStaggered.addSelectionListener(this);
    cbStaggered.setEnabled(bNot3D);
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginWidth=0;
      layout.marginHeight=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditorWithUnit,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}",0.9421048955932676
70488,"public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
 else {
    buildProperties(content,context);
  }
}","public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
    action=content.getHyperlinkAction();
    bookmark=content.getBookmark();
  }
 else {
    buildProperties(content,context);
  }
}",0.8775834658187599
70489,"public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
 else {
    buildProperties(content,context);
  }
}","public void initialize() throws BirtException {
  IStyle style=content.getStyle();
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
    action=content.getHyperlinkAction();
    bookmark=content.getBookmark();
  }
 else {
    buildProperties(content,context);
  }
}",0.8775834658187599
70490,"protected void updatePageDimension(PageArea page){
  if (page != null && page.getRoot().getChildrenCount() > 0) {
    int maxWidth=context.getMaxWidth();
    int maxHeight=context.getMaxHeight();
    int prefWidth=context.getPreferenceWidth();
    int prefHeight=currentBP;
    Iterator iter=page.getBody().getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      prefWidth=Math.max(prefWidth,area.getAllocatedX() + area.getAllocatedWidth());
    }
    if (prefHeight > maxHeight) {
      ((ContainerArea)page.getBody()).setHeight(prefHeight);
      floatingFooter(page);
      int deltaHeight=prefHeight - maxHeight;
      ContainerArea pageRoot=(ContainerArea)page.getRoot();
      pageRoot.setHeight(pageRoot.getHeight() + deltaHeight);
      page.setHeight(pageContentHeight + deltaHeight);
    }
    if (prefWidth > maxWidth) {
      ((ContainerArea)page.getBody()).setWidth(prefWidth);
      int deltaWidth=prefWidth - maxWidth;
      ContainerArea pageRoot=(ContainerArea)page.getRoot();
      pageRoot.setWidth(pageRoot.getWidth() + deltaWidth);
      page.setWidth(pageContentWidth + deltaWidth);
    }
  }
}","protected void updatePageDimension(PageArea page){
  if (page != null && page.getRoot().getChildrenCount() > 0) {
    int maxWidth=context.getMaxWidth();
    int maxHeight=context.getMaxHeight();
    int prefWidth=context.getPreferenceWidth();
    int prefHeight=page.getBody().getHeight();
    Iterator iter=page.getBody().getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      prefWidth=Math.max(prefWidth,area.getAllocatedX() + area.getAllocatedWidth());
    }
    if (prefHeight > maxHeight) {
      ((ContainerArea)page.getBody()).setHeight(prefHeight);
      floatingFooter(page);
      int deltaHeight=prefHeight - maxHeight;
      ContainerArea pageRoot=(ContainerArea)page.getRoot();
      pageRoot.setHeight(pageRoot.getHeight() + deltaHeight);
      page.setHeight(pageContentHeight + deltaHeight);
    }
    if (prefWidth > maxWidth) {
      ((ContainerArea)page.getBody()).setWidth(prefWidth);
      int deltaWidth=prefWidth - maxWidth;
      ContainerArea pageRoot=(ContainerArea)page.getRoot();
      pageRoot.setWidth(pageRoot.getWidth() + deltaWidth);
      page.setWidth(pageContentWidth + deltaWidth);
    }
  }
}",0.986746472851646
70491,"/** 
 * execute the html text.
 * @param design
 * @param emitter
 */
protected IContent executeHtmlText(){
  TextItemDesign textDesign=(TextItemDesign)getDesign();
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  executeQuery();
  initializeContent(textDesign,textContent);
  processAction(textDesign,textContent);
  processBookmark(textDesign,textContent);
  processStyle(textDesign,textContent);
  processVisibility(textDesign,textContent);
  String text=evaluate(textDesign.getText());
  String textType=evaluate(textDesign.getTextType());
  HashMap<String,String> exprs=null;
  if (textDesign.hasExpression()) {
    exprs=TextItemDesign.extractExpression(text,textType);
  }
  if (exprs != null && !exprs.isEmpty()) {
    HashMap<String,Object> results=new HashMap<String,Object>();
    Iterator<Entry<String,String>> iter=exprs.entrySet().iterator();
    while (iter.hasNext()) {
      Entry<String,String> entry=(Entry<String,String>)iter.next();
      String expr=(String)entry.getValue();
      try {
        Object value=evaluate(expr);
        results.put(entry.getKey(),value);
      }
 catch (      BirtException ex) {
        context.addException(ex);
      }
    }
    Object[] value=new Object[2];
    value[0]=null;
    value[1]=results;
    textContent.setRawValue(value);
  }
 else {
    textContent.setRawValue(new Object[]{null,null});
  }
  textContent.setRawType(IForeignContent.TEMPLATE_TYPE);
  if (context.isInFactory()) {
    handleOnCreate(textContent);
  }
  startTOCEntry(content);
  return textContent;
}","/** 
 * execute the html text.
 * @param design
 * @param emitter
 */
protected IContent executeHtmlText(){
  TextItemDesign textDesign=(TextItemDesign)getDesign();
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  executeQuery();
  initializeContent(textDesign,textContent);
  processAction(textDesign,textContent);
  processBookmark(textDesign,textContent);
  processStyle(textDesign,textContent);
  processVisibility(textDesign,textContent);
  Expression<String> textExpression=textDesign.getText();
  String text=evaluate(textExpression);
  String textType=evaluate(textDesign.getTextType());
  HashMap<String,String> exprs=null;
  if (textDesign.hasExpression()) {
    if (textExpression.isExpression()) {
      exprs=TextItemDesign.extractExpression(text,textType);
    }
 else {
      exprs=textDesign.getExpressions();
    }
  }
  if (exprs != null && !exprs.isEmpty()) {
    HashMap<String,Object> results=new HashMap<String,Object>();
    Iterator<Entry<String,String>> iter=exprs.entrySet().iterator();
    while (iter.hasNext()) {
      Entry<String,String> entry=(Entry<String,String>)iter.next();
      String expr=(String)entry.getValue();
      try {
        Object value=evaluate(expr);
        results.put(entry.getKey(),value);
      }
 catch (      BirtException ex) {
        context.addException(ex);
      }
    }
    Object[] value=new Object[2];
    value[0]=null;
    value[1]=results;
    textContent.setRawValue(value);
  }
 else {
    textContent.setRawValue(new Object[]{null,null});
  }
  textContent.setRawType(IForeignContent.TEMPLATE_TYPE);
  if (context.isInFactory()) {
    handleOnCreate(textContent);
  }
  startTOCEntry(content);
  return textContent;
}",0.9401451027811366
70492,"protected void update() throws BirtException {
  if (parent != null) {
    if (context.isFixedLayout() && height > specifiedHeight) {
      setHeight(specifiedHeight);
      setNeedClip(true);
    }
    if (!isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=getAllocatedHeight();
      int size=children.size();
      if ((aHeight + parent.getAbsoluteBP() > context.getMaxBP()) && (size > 1)) {
        IStyle style=content.getComputedStyle();
        int widow=Math.min(size,PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_WIDOWS)));
        int orphan=Math.min(size,PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_ORPHANS)));
        for (int i=0; i < size; i++) {
          TextLineArea line=(TextLineArea)children.get(i);
          if (i > 0 && i < orphan) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
 else           if (i > size - widow) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
        }
      }
      while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
        parent.autoPageBreak();
        aHeight=getAllocatedHeight();
      }
    }
    parent.update(this);
  }
}","protected void update() throws BirtException {
  if (parent != null) {
    if (context.isFixedLayout() && height > specifiedHeight && specifiedHeight > 0) {
      setHeight(specifiedHeight);
      setNeedClip(true);
    }
    if (!isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=getAllocatedHeight();
      int size=children.size();
      if ((aHeight + parent.getAbsoluteBP() > context.getMaxBP()) && (size > 1)) {
        IStyle style=content.getComputedStyle();
        int widow=Math.min(size,PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_WIDOWS)));
        int orphan=Math.min(size,PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_ORPHANS)));
        for (int i=0; i < size; i++) {
          TextLineArea line=(TextLineArea)children.get(i);
          if (i > 0 && i < orphan) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
 else           if (i > size - widow) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
        }
      }
      while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
        parent.autoPageBreak();
        aHeight=getAllocatedHeight();
      }
    }
    parent.update(this);
  }
}",0.990340193196136
70493,"public void initialize() throws BirtException {
  createRoot();
  Color backgroundColor=PropertyUtil.getColor(pageContent.getStyle().getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
  ReportDesignHandle designHandle=pageContent.getReportContent().getDesign().getReportDesign();
  String imageUrl=EmitterUtil.getBackgroundImageUrl(pageContent.getStyle(),designHandle);
  if (backgroundColor != null || imageUrl != null) {
    boxStyle=new BoxStyle();
    boxStyle.setBackgroundColor(backgroundColor);
    if (imageUrl != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(imageUrl));
    }
  }
  context.setMaxHeight(root.getHeight());
  context.setMaxWidth(root.getWidth());
  layoutHeader();
  layoutFooter();
  updateBodySize();
  context.setMaxHeight(body.getHeight());
  context.setMaxWidth(body.getWidth());
  context.setMaxBP(body.getHeight());
  maxAvaWidth=context.getMaxWidth();
}","public void initialize() throws BirtException {
  createRoot();
  Color backgroundColor=PropertyUtil.getColor(pageContent.getStyle().getProperty(StyleConstants.STYLE_BACKGROUND_COLOR));
  ReportDesignHandle designHandle=pageContent.getReportContent().getDesign().getReportDesign();
  String imageUrl=EmitterUtil.getBackgroundImageUrl(pageContent.getStyle(),designHandle);
  if (backgroundColor != null || imageUrl != null) {
    boxStyle=new BoxStyle();
    boxStyle.setBackgroundColor(backgroundColor);
    if (imageUrl != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(imageUrl));
    }
  }
  context.setMaxHeight(root.getHeight());
  context.setMaxWidth(root.getWidth());
  context.setMaxBP(root.getHeight());
  layoutHeader();
  layoutFooter();
  updateBodySize();
  context.setMaxHeight(body.getHeight());
  context.setMaxWidth(body.getWidth());
  context.setMaxBP(body.getHeight());
  maxAvaWidth=context.getMaxWidth();
}",0.8306364617044228
70494,"protected void layoutChildren() throws BirtException {
  if (null == textContent)   return;
  while (comp.hasNextArea()) {
    TextArea area=comp.getNextArea(getFreeSpace());
    addTextArea(area);
    comp.setNewLineStatus(false);
    if (area.isLineBreak()) {
      newLine();
      comp.setNewLineStatus(true);
    }
  }
}","protected void layoutChildren() throws BirtException {
  if (null == textContent)   return;
  while (comp.hasNextArea()) {
    TextArea area=comp.getNextArea(getFreeSpace());
    if (area != null) {
      addTextArea(area);
      comp.setNewLineStatus(false);
      if (area.isLineBreak()) {
        newLine();
        comp.setNewLineStatus(true);
      }
    }
  }
}",0.9393063583815028
70495,"/** 
 * layout a word, add the word to the line buffer.
 * @param word the word
 */
private void addWordIntoTextArea(TextArea textArea,Word word){
  int textLength=word.getLength();
  int wordWidth=getWordWidth(fontInfo,word);
  wordWidth+=textStyle.getLetterSpacing() * textLength;
  if (textArea.hasSpace(wordWidth)) {
    addWord(textArea,textLength,wordWidth);
    wordVestige=null;
    if (remainWords.hasWord()) {
      if (textArea.hasSpace(textStyle.getWordSpacing())) {
        textArea.addWordSpacing(textStyle.getWordSpacing());
      }
 else {
        textArea.setLineBreak(true);
        hasLineBreak=true;
      }
    }
  }
 else {
    if (isNewLine && textArea.isEmpty()) {
      if (context.isEnableHyphenation()) {
        doHyphenation(word.getValue(),textArea);
      }
 else {
        addWord(textArea,textLength,wordWidth);
      }
    }
 else {
      wordVestige=null;
      remainWord=word;
    }
    textArea.setLineBreak(true);
    hasLineBreak=true;
  }
}","/** 
 * layout a word, add the word to the line buffer.
 * @param word the word
 */
private void addWordIntoTextArea(TextArea textArea,Word word){
  int textLength=word.getLength();
  int wordWidth=getWordWidth(fontInfo,word);
  wordWidth+=textStyle.getLetterSpacing() * textLength;
  if (textArea.hasSpace(wordWidth)) {
    addWord(textArea,textLength,wordWidth);
    wordVestige=null;
    if (remainWords.hasWord()) {
      if (textArea.hasSpace(textStyle.getWordSpacing())) {
        textArea.addWordSpacing(textStyle.getWordSpacing());
      }
 else {
        textArea.setLineBreak(true);
        hasLineBreak=true;
        lineBreakCollapse=LINE_BREAK_COLLAPSE_STANDING_BY;
      }
    }
  }
 else {
    if (isNewLine && textArea.isEmpty()) {
      if (context.isEnableHyphenation()) {
        doHyphenation(word.getValue(),textArea);
      }
 else {
        addWord(textArea,textLength,wordWidth);
      }
    }
 else {
      wordVestige=null;
      remainWord=word;
    }
    textArea.setLineBreak(true);
    hasLineBreak=true;
    lineBreakCollapse=LINE_BREAK_COLLAPSE_STANDING_BY;
  }
}",0.9450867052023122
70496,"public TextArea getNextArea(int maxLineWidth){
  if (!hasNextArea()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TextArea textArea=getNextTextArea(maxLineWidth);
  offset+=textArea.getTextLength();
  return textArea;
}","public TextArea getNextArea(int maxLineWidth){
  if (!hasNextArea()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  TextArea textArea=getNextTextArea(maxLineWidth);
  offset+=textArea.getTextLength();
  if (lineBreakCollapse == LINE_BREAK_COLLAPSE_OCCUPY) {
    lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    return null;
  }
  return textArea;
}",0.7297297297297297
70497,"private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,wordVestige);
    return textArea;
  }
  if (null != remainWord) {
    TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(chunk.getLength());
      hasLineBreak=true;
      return textArea;
    }
    fontInfo=chunk.getFontInfo();
    runLevel=chunk.getRunLevel();
    remainWords=new WordRecognizerWrapper(chunk.getText(),context.getLocale());
  }
  TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}","private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,wordVestige);
    return textArea;
  }
  if (null != remainWord) {
    TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(chunk.getLength());
      hasLineBreak=true;
      if (lineBreakCollapse == LINE_BREAK_COLLAPSE_STANDING_BY) {
        lineBreakCollapse=LINE_BREAK_COLLAPSE_OCCUPY;
      }
      return textArea;
    }
    if (lineBreakCollapse == LINE_BREAK_COLLAPSE_STANDING_BY) {
      lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    }
    fontInfo=chunk.getFontInfo();
    runLevel=chunk.getRunLevel();
    remainWords=new WordRecognizerWrapper(chunk.getText(),context.getLocale());
  }
  TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}",0.9027291812456264
70498,"public void layout() throws BirtException {
  initialize();
  LineArea line=new TextLineArea(this,context);
  line.initialize();
  TextAreaLayout text=new TextAreaLayout(line,context,content);
  text.initialize();
  text.layout();
  text.close();
  line.close();
  close();
}","public void layout() throws BirtException {
  initialize();
  TextLineArea line=new TextLineArea(this,context);
  line.initialize();
  line.setTextIndent((ITextContent)content);
  TextAreaLayout text=new TextAreaLayout(line,context,content);
  text.initialize();
  text.layout();
  text.close();
  line.close();
  close();
}",0.9181969949916527
70499,"private int adjustWordSpacing(int wordSpacing,ContainerArea area){
  Iterator iter=area.getChildren();
  int delta=0;
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    if (child instanceof TextArea) {
      TextArea textArea=(TextArea)child;
      String text=textArea.getText();
      int blankNumber=text.split(""String_Node_Str"").length - 1;
      if (blankNumber > 0) {
        TextStyle style=textArea.getStyle();
        int original=style.getWordSpacing();
        style.setWordSpacing(original + wordSpacing);
        int spacing=wordSpacing * blankNumber;
        child.setWidth(child.getWidth() + spacing);
        child.setPosition(child.getX() + delta,child.getY());
        delta+=spacing;
      }
    }
 else     if (child instanceof ContainerArea) {
      child.setPosition(child.getX() + delta,child.getY());
      int spacing=adjustWordSpacing(wordSpacing,(ContainerArea)child);
      child.setWidth(child.getWidth() + spacing);
      delta+=spacing;
    }
 else {
      child.setPosition(child.getX() + delta,child.getY());
    }
  }
  return delta;
}","private int adjustWordSpacing(int wordSpacing,ContainerArea area){
  if (wordSpacing == 0)   return 0;
  Iterator iter=area.getChildren();
  int delta=0;
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    if (child instanceof TextArea) {
      TextArea textArea=(TextArea)child;
      String text=textArea.getText();
      int blankNumber=text.split(""String_Node_Str"").length - 1;
      if (blankNumber > 0) {
        TextStyle style=new TextStyle(textArea.getStyle());
        int original=style.getWordSpacing();
        style.setWordSpacing(original + wordSpacing);
        textArea.setStyle(style);
        int spacing=wordSpacing * blankNumber;
        child.setWidth(child.getWidth() + spacing);
        child.setPosition(child.getX() + delta,child.getY());
        delta+=spacing;
      }
    }
 else     if (child instanceof ContainerArea) {
      child.setPosition(child.getX() + delta,child.getY());
      int spacing=adjustWordSpacing(wordSpacing,(ContainerArea)child);
      child.setWidth(child.getWidth() + spacing);
      delta+=spacing;
    }
 else {
      child.setPosition(child.getX() + delta,child.getY());
    }
  }
  return delta;
}",0.9312308366184844
70500,"protected void update() throws BirtException {
  if (parent != null) {
    if (context.isFixedLayout() && height > specifiedHeight) {
      setHeight(specifiedHeight);
      setNeedClip(true);
    }
    if (!isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=getAllocatedHeight();
      int size=children.size();
      if ((aHeight + parent.getAbsoluteBP() > context.getMaxBP()) && (size > 1)) {
        IStyle style=content.getComputedStyle();
        int widow=PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_WIDOWS));
        int orphan=PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_ORPHANS));
        for (int i=0; i < size; i++) {
          TextLineArea line=(TextLineArea)children.get(i);
          if (i > 0 && i < orphan) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
 else           if (i > size - widow) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
        }
      }
      while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
        parent.autoPageBreak();
        aHeight=getAllocatedHeight();
      }
    }
    parent.update(this);
  }
}","protected void update() throws BirtException {
  if (parent != null) {
    if (context.isFixedLayout() && height > specifiedHeight) {
      setHeight(specifiedHeight);
      setNeedClip(true);
    }
    if (!isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=getAllocatedHeight();
      int size=children.size();
      if ((aHeight + parent.getAbsoluteBP() > context.getMaxBP()) && (size > 1)) {
        IStyle style=content.getComputedStyle();
        int widow=Math.min(size,PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_WIDOWS)));
        int orphan=Math.min(size,PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_ORPHANS)));
        for (int i=0; i < size; i++) {
          TextLineArea line=(TextLineArea)children.get(i);
          if (i > 0 && i < orphan) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
 else           if (i > size - widow) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
        }
      }
      while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
        parent.autoPageBreak();
        aHeight=getAllocatedHeight();
      }
    }
    parent.update(this);
  }
}",0.9871134020618556
70501,"public void endListBand(IListBandContent listBand) throws BirtException {
}","public void endListBand(IListBandContent listBand) throws BirtException {
  int bandType=listBand.getBandType();
  if (bandType == IBandContent.BAND_HEADER || bandType == IBandContent.BAND_GROUP_HEADER) {
    if (current instanceof RepeatableArea) {
      ((RepeatableArea)current).setInHeaderBand(false);
    }
  }
}",0.3826530612244898
70502,"public void endTableBand(ITableBandContent band) throws BirtException {
}","public void endTableBand(ITableBandContent band) throws BirtException {
  int bandType=band.getBandType();
  if (bandType == IBandContent.BAND_HEADER || bandType == IBandContent.BAND_GROUP_HEADER) {
    if (current instanceof RepeatableArea) {
      ((RepeatableArea)current).setInHeaderBand(false);
    }
  }
}",0.3802083333333333
70503,"public void startTableBand(ITableBandContent band) throws BirtException {
}","public void startTableBand(ITableBandContent band) throws BirtException {
  int bandType=band.getBandType();
  if (bandType == IBandContent.BAND_HEADER || bandType == IBandContent.BAND_GROUP_HEADER) {
    if (current instanceof RepeatableArea) {
      ((RepeatableArea)current).setInHeaderBand(true);
    }
  }
}",0.3875968992248062
70504,"public void startListBand(IListBandContent listBand) throws BirtException {
}","public void startListBand(IListBandContent listBand) throws BirtException {
  int bandType=listBand.getBandType();
  if (bandType == IBandContent.BAND_HEADER || bandType == IBandContent.BAND_GROUP_HEADER) {
    if (current instanceof RepeatableArea) {
      ((RepeatableArea)current).setInHeaderBand(true);
    }
  }
}",0.389873417721519
70505,"protected boolean isValidResult(List result){
  if (repeatList != null && !isFirst) {
    return result.size() > repeatList.size();
  }
  return super.isValidResult(result);
}","protected boolean isValidResult(List result){
  if (repeatList != null && !inHeaderBand) {
    return result.size() > repeatList.size();
  }
  return super.isValidResult(result);
}",0.9577464788732394
70506,"protected void updateChildrenPosition() throws BirtException {
  if (repeatList != null && repeatList.size() > 0) {
    if (!isInHeaderBand()) {
      if (getRepeatedHeight() < getMaxAvaHeight()) {
        for (int i=0; i < repeatList.size(); i++) {
          ContainerArea row=(ContainerArea)repeatList.get(i);
          ContainerArea cloneRow=row.deepClone();
          children.add(i,cloneRow);
          cloneRow.setParent(this);
          update(cloneRow);
          cloneRow.setAllocatedY(currentBP);
        }
      }
 else {
        repeatList=null;
      }
    }
    isFirst=false;
  }
  super.updateChildrenPosition();
}","protected void updateChildrenPosition() throws BirtException {
  if (repeatList != null && repeatList.size() > 0) {
    if (!inHeaderBand) {
      if (getRepeatedHeight() < getMaxAvaHeight()) {
        for (int i=0; i < repeatList.size(); i++) {
          ContainerArea row=(ContainerArea)repeatList.get(i);
          ContainerArea cloneRow=row.deepClone();
          children.add(i,cloneRow);
          cloneRow.setParent(this);
          update(cloneRow);
          cloneRow.setAllocatedY(currentBP);
        }
      }
 else {
        repeatList=null;
      }
    }
  }
  super.updateChildrenPosition();
}",0.9814066289409864
70507,"protected int getRepeatedHeight(){
  if (repeatList != null && repeatHeight == 0) {
    for (int i=0; i < repeatList.size(); i++) {
      AbstractArea area=(AbstractArea)repeatList.get(i);
      repeatHeight+=area.getAllocatedHeight();
    }
  }
  return repeatHeight;
}","protected int getRepeatedHeight(){
  if (inHeaderBand) {
    return 0;
  }
  if (repeatHeight != 0) {
    return repeatHeight;
  }
 else {
    if (repeatList != null) {
      for (int i=0; i < repeatList.size(); i++) {
        AbstractArea area=(AbstractArea)repeatList.get(i);
        repeatHeight+=area.getAllocatedHeight();
      }
      return repeatHeight;
    }
  }
  return 0;
}",0.6564885496183206
70508,"public void align(boolean lastLine,LayoutContext context){
  assert(parent instanceof BlockContainerArea);
  CSSValue align=((BlockContainerArea)parent).getTextAlign();
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(parent.content,align,lastLine);
  if ((isRightAligned || IStyle.CENTER_VALUE.equals(align))) {
    int spacing=width - currentIP;
    Iterator iter=getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (isRightAligned) {
          area.setPosition(spacing + area.getX(),area.getY());
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setPosition(spacing / 2 + area.getX(),area.getY());
        }
      }
    }
  }
 else   if (IStyle.JUSTIFY_VALUE.equals(align) && !lastLine) {
    justify();
  }
  if (context.getBidiProcessing())   reorderVisually();
  verticalAlign();
}","public void align(boolean lastLine,LayoutContext context){
  assert(parent instanceof BlockContainerArea);
  CSSValue align=((BlockContainerArea)parent).getTextAlign();
  boolean isRightAligned=BidiAlignmentResolver.isRightAligned(parent.content,align,lastLine);
  if ((isRightAligned || IStyle.CENTER_VALUE.equals(align))) {
    int spacing=width - currentIP;
    Iterator iter=getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (isRightAligned) {
          if (parent.content.isDirectionRTL()) {
            area.setPosition(spacing + area.getX(),area.getY());
          }
 else {
            area.setPosition(spacing + area.getX() + ignoreRightMostWhiteSpace(),area.getY());
          }
        }
 else         if (IStyle.CENTER_VALUE.equals(align)) {
          area.setPosition(spacing / 2 + area.getX(),area.getY());
        }
      }
    }
  }
 else   if (IStyle.JUSTIFY_VALUE.equals(align) && !lastLine) {
    justify();
  }
  if (context.getBidiProcessing())   reorderVisually();
  verticalAlign();
}",0.9109109109109108
70509,"private void testMethod(StyleInstance styleInstance,String methodName) throws Throwable {
  try {
    Method method=StyleInstance.class.getMethod(methodName,String.class);
    method.invoke(styleInstance,""String_Node_Str"");
    fail();
  }
 catch (  InvocationTargetException expected) {
    Throwable targetException=expected.getTargetException();
    if (targetException instanceof IllegalStateException) {
      assertTrue(true);
      return;
    }
    throw targetException;
  }
}","private void testMethod(StyleInstance styleInstance,String methodName) throws Throwable {
  try {
    Method method=StyleInstance.class.getMethod(methodName,String.class);
    method.invoke(styleInstance,""String_Node_Str"");
    fail();
  }
 catch (  InvocationTargetException expected) {
    Throwable targetException=expected.getTargetException();
    if (targetException instanceof UnsupportedOperationException) {
      assertTrue(true);
      return;
    }
    throw targetException;
  }
}",0.967280163599182
70510,"private void checkRunningState(){
  if (runningState == RunningState.RENDER) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (runningState == RunningState.PAGEBREAK) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private void checkRunningState(){
  if (runningState == RunningState.RENDER) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  if (runningState == RunningState.PAGEBREAK) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}",0.875
70511,"/** 
 * API test on IReportEngine.openReportDesign( ) method
 */
public void testOpenReportDesign(){
  try {
    String rootPath=new File(""String_Node_Str"").toURL().toString();
    String goldenReportName=rootPath + ""String_Node_Str"" + REPORT_DESIGN;
    ReportEngine engine=new ReportEngine(new EngineConfig());
    IReportRunnable runnable=engine.openReportDesign(REPORT_DESIGN);
    assertTrue(runnable.getReportName().equals(goldenReportName));
    engine.shutdown();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}","/** 
 * API test on IReportEngine.openReportDesign( ) method
 */
public void testOpenReportDesign(){
  try {
    String rootPath=new File(""String_Node_Str"").toURL().toString();
    String goldenReportName=rootPath + ""String_Node_Str"" + REPORT_DESIGN;
    ReportEngine engine=new ReportEngine(new EngineConfig());
    IReportRunnable runnable=engine.openReportDesign(REPORT_DESIGN);
    assertEquals(goldenReportName,URLDecoder.decode(runnable.getReportName(),""String_Node_Str""));
    engine.shutdown();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    fail();
  }
}",0.9170383586083852
70512,"/** 
 * Tests legend defined on chart are generated by the image layout engine.
 * @throws EngineException
 */
public void testPdfChartLegend() throws EngineException {
  String designFile=""String_Node_Str"";
  IReportRunnable report=openReportDesign(designFile);
  List pageAreas=getPageAreas(report);
  assertEquals(1,pageAreas.size());
  PageArea pageArea=(PageArea)pageAreas.get(0);
  Iterator logicContainers=pageArea.getBody().getChildren();
  ContainerArea blockContainer=(ContainerArea)logicContainers.next();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    checkChart(162590,40173,39800,11251,""String_Node_Str"",null,""String_Node_Str"",blockContainer);
    logicContainers.next();
    checkChart(162590,40173,39800,11251,""String_Node_Str"",null,""String_Node_Str"",(ContainerArea)logicContainers.next());
    checkChart(162590,40173,39800,11251,""String_Node_Str"",null,""String_Node_Str"",(ContainerArea)logicContainers.next());
  }
}","/** 
 * Tests legend defined on chart are generated by the image layout engine.
 * @throws EngineException
 */
public void testPdfChartLegend() throws EngineException {
  String designFile=""String_Node_Str"";
  IReportRunnable report=openReportDesign(designFile);
  List pageAreas=getPageAreas(report);
  assertEquals(1,pageAreas.size());
  PageArea pageArea=(PageArea)pageAreas.get(0);
  Iterator logicContainers=pageArea.getBody().getChildren();
  ContainerArea blockContainer=(ContainerArea)logicContainers.next();
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    checkChart(162302,40057,39729,11219,""String_Node_Str"",null,null,blockContainer);
    logicContainers.next();
    checkChart(162302,40057,39729,11219,""String_Node_Str"",null,""String_Node_Str"",(ContainerArea)logicContainers.next());
    checkChart(162302,40057,39729,11219,""String_Node_Str"",null,""String_Node_Str"",(ContainerArea)logicContainers.next());
  }
}",0.8027069234773555
70513,"private void checkChartLengend(ContainerArea map,int x,int y,int width,int height,String hyperlink,String bookmark,String targetWindow){
  IContent mapContent=(IContent)map.getContent();
  IHyperlinkAction link=mapContent.getHyperlinkAction();
  assertEquals(x,map.getX());
  assertEquals(y,map.getY());
  assertEquals(width,map.getWidth());
  assertEquals(height,map.getHeight());
  assertTrue(link.getHyperlink().matches(hyperlink));
  assertEquals(bookmark,link.getBookmark());
  assertEquals(targetWindow,link.getTargetWindow());
}","private void checkChartLengend(ContainerArea map,int x,int y,int width,int height,String hyperlink,String bookmark,String targetWindow){
  IHyperlinkAction link=map.getAction();
  assertEquals(x,map.getX());
  assertEquals(y,map.getY());
  assertEquals(width,map.getWidth());
  assertEquals(height,map.getHeight());
  assertTrue(link.getHyperlink().matches(hyperlink));
  assertEquals(bookmark,link.getBookmark());
  assertEquals(targetWindow,link.getTargetWindow());
}",0.9262948207171314
70514,"/** 
 * Test case for bugzilla bug <a href=""https://bugs.eclipse.org/bugs/show_bug.cgi?id=157189"">157189</a> : HTML BR tags cease to work for text element after page break in PDF
 * @throws EngineException
 */
public void estForeignContent() throws EngineException {
  String designFile=""String_Node_Str"";
  IReportRunnable report=openReportDesign(designFile);
  List pageAreas=getPageAreas(report);
  assertEquals(2,pageAreas.size());
  PageArea pageArea=(PageArea)pageAreas.get(1);
  Iterator logicContainers=pageArea.getBody().getChildren();
  IContainerArea blockContains=(IContainerArea)logicContainers.next();
  Iterator lineAreas=blockContains.getChildren();
  lineAreas.next();
  LineArea emptyLine=(LineArea)lineAreas.next();
  assertTrue(""String_Node_Str"",isEmpty(emptyLine));
  LineArea lineArea=(LineArea)lineAreas.next();
  assertEquals(""String_Node_Str"",getText(lineArea,2));
  assertEquals(""String_Node_Str"",getText(lineArea,5));
}","/** 
 * Test case for bugzilla bug <a href=""https://bugs.eclipse.org/bugs/show_bug.cgi?id=157189"">157189</a> : HTML BR tags cease to work for text element after page break in PDF
 * @throws EngineException
 */
public void estForeignContent() throws EngineException {
  String designFile=""String_Node_Str"";
  IReportRunnable report=openReportDesign(designFile);
  List pageAreas=getPageAreas(report);
  assertEquals(2,pageAreas.size());
  PageArea pageArea=(PageArea)pageAreas.get(1);
  Iterator logicContainers=pageArea.getBody().getChildren();
  IContainerArea blockContains=(IContainerArea)logicContainers.next();
  logicContainers=blockContains.getChildren();
  IContainerArea blockContains1=(IContainerArea)logicContainers.next();
  Iterator lineAreas=blockContains1.getChildren();
  lineAreas.next();
  LineArea emptyLine=(LineArea)lineAreas.next();
  assertTrue(""String_Node_Str"",isEmpty(emptyLine));
  LineArea lineArea=(LineArea)lineAreas.next();
  assertEquals(""String_Node_Str"",getText(lineArea,2));
  assertEquals(""String_Node_Str"",getText(lineArea,5));
}",0.9224652087475148
70515,"protected void update() throws BirtException {
  if (parent != null) {
    if (!isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=getAllocatedHeight();
      int size=children.size();
      if ((aHeight + parent.getAbsoluteBP() > context.getMaxBP()) && (size > 1)) {
        IStyle style=content.getComputedStyle();
        int widow=PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_WIDOWS));
        int orphan=PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_ORPHANS));
        for (int i=0; i < size; i++) {
          TextLineArea line=(TextLineArea)children.get(i);
          if (i > 0 && i < orphan) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
 else           if (i > size - widow) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
        }
      }
      while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
        parent.autoPageBreak();
        aHeight=getAllocatedHeight();
      }
    }
    parent.update(this);
  }
}","protected void update() throws BirtException {
  if (parent != null) {
    if (context.isFixedLayout() && height > specifiedHeight) {
      setHeight(specifiedHeight);
      setNeedClip(true);
    }
    if (!isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=getAllocatedHeight();
      int size=children.size();
      if ((aHeight + parent.getAbsoluteBP() > context.getMaxBP()) && (size > 1)) {
        IStyle style=content.getComputedStyle();
        int widow=PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_WIDOWS));
        int orphan=PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_ORPHANS));
        for (int i=0; i < size; i++) {
          TextLineArea line=(TextLineArea)children.get(i);
          if (i > 0 && i < orphan) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
 else           if (i > size - widow) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
        }
      }
      while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
        parent.autoPageBreak();
        aHeight=getAllocatedHeight();
      }
    }
    parent.update(this);
  }
}",0.9410138248847926
70516,"public static void handleOnCreate(IAutoTextContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign autoTextItemDesign=(ReportItemDesign)generateBy;
  try {
    if (!needOnCreate(autoTextItemDesign)) {
      return;
    }
    IAutoTextInstance autoText=new AutoTextInstance(content,context);
    if (handleJS(autoText,autoTextItemDesign.getOnCreate(),context).didRun())     return;
    IAutoTextEventHandler eh=getEventHandler(autoTextItemDesign,context);
    if (eh != null)     eh.onCreate(autoText,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,autoTextItemDesign.getHandle());
  }
}","public static void handleOnCreate(IAutoTextContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign autoTextItemDesign=(ReportItemDesign)generateBy;
  try {
    if (!needOnCreate(autoTextItemDesign)) {
      return;
    }
    IAutoTextInstance autoText=new AutoTextInstance(content,context,RunningState.CREATE);
    if (handleJS(autoText,autoTextItemDesign.getOnCreate(),context).didRun())     return;
    IAutoTextEventHandler eh=getEventHandler(autoTextItemDesign,context);
    if (eh != null)     eh.onCreate(autoText,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,autoTextItemDesign.getHandle());
  }
}",0.9862637362637364
70517,"public static void handleOnRender(IAutoTextContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign autoTextDesign=(ReportItemDesign)generateBy;
  if (!needOnRender(autoTextDesign)) {
    return;
  }
  try {
    IAutoTextInstance autoText=new AutoTextInstance(content,context);
    if (handleJS(autoText,autoTextDesign.getOnRender(),context).didRun())     return;
    IAutoTextEventHandler eh=getEventHandler(autoTextDesign,context);
    if (eh != null)     eh.onRender(autoText,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,autoTextDesign.getHandle());
  }
}","public static void handleOnRender(IAutoTextContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign autoTextDesign=(ReportItemDesign)generateBy;
  if (!needOnRender(autoTextDesign)) {
    return;
  }
  try {
    IAutoTextInstance autoText=new AutoTextInstance(content,context,RunningState.RENDER);
    if (handleJS(autoText,autoTextDesign.getOnRender(),context).didRun())     return;
    IAutoTextEventHandler eh=getEventHandler(autoTextDesign,context);
    if (eh != null)     eh.onRender(autoText,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,autoTextDesign.getHandle());
  }
}",0.9857549857549858
70518,"public static void handleOnPageBreak(IAutoTextContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign autoTextDesign=(ReportItemDesign)generateBy;
  try {
    if (!needOnPageBreak(autoTextDesign)) {
      return;
    }
    IAutoTextInstance autoText=new AutoTextInstance(content,context);
    if (handleJS(autoText,autoTextDesign.getOnPageBreak(),context).didRun())     return;
    IAutoTextEventHandler eh=getEventHandler(autoTextDesign,context);
    if (eh != null)     eh.onPageBreak(autoText,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,autoTextDesign.getHandle());
  }
}","public static void handleOnPageBreak(IAutoTextContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign autoTextDesign=(ReportItemDesign)generateBy;
  try {
    if (!needOnPageBreak(autoTextDesign)) {
      return;
    }
    IAutoTextInstance autoText=new AutoTextInstance(content,context,RunningState.PAGEBREAK);
    if (handleJS(autoText,autoTextDesign.getOnPageBreak(),context).didRun())     return;
    IAutoTextEventHandler eh=getEventHandler(autoTextDesign,context);
    if (eh != null)     eh.onPageBreak(autoText,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,autoTextDesign.getHandle());
  }
}",0.984060984060984
70519,"public static void handleOnCreate(ICellContent content,ExecutionContext context,boolean fromGrid){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign cellDesign=(ReportItemDesign)generateBy;
  try {
    if (!needOnCreate(cellDesign)) {
      return;
    }
    ICellInstance cell=new CellInstance(content,context,fromGrid);
    if (handleJS(cell,cellDesign.getOnCreate(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onCreate(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,cellDesign.getHandle());
  }
}","public static void handleOnCreate(ICellContent content,ExecutionContext context,boolean fromGrid){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign cellDesign=(ReportItemDesign)generateBy;
  try {
    if (!needOnCreate(cellDesign)) {
      return;
    }
    ICellInstance cell=new CellInstance(content,context,RunningState.CREATE,fromGrid);
    if (handleJS(cell,cellDesign.getOnCreate(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onCreate(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,cellDesign.getHandle());
  }
}",0.9854227405247812
70520,"public static void handleOnRender(ICellContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign cellDesign=(ReportItemDesign)generateBy;
  if (!needOnRender(cellDesign)) {
    return;
  }
  try {
    ICellInstance cell=new CellInstance(content,context,false);
    if (handleJS(cell,cellDesign.getOnRender(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onRender(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,cellDesign.getHandle());
  }
}","public static void handleOnRender(ICellContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign cellDesign=(ReportItemDesign)generateBy;
  if (!needOnRender(cellDesign)) {
    return;
  }
  try {
    ICellInstance cell=new CellInstance(content,context,RunningState.RENDER,false);
    if (handleJS(cell,cellDesign.getOnRender(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onRender(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,cellDesign.getHandle());
  }
}",0.9848484848484848
70521,"public static void handleOnPageBreak(ICellContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign cellDesign=(ReportItemDesign)generateBy;
  if (!needOnPageBreak(cellDesign)) {
    return;
  }
  try {
    ICellInstance cell=new CellInstance(content,context,false);
    if (handleJS(cell,cellDesign.getOnPageBreak(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onPageBreak(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,cellDesign.getHandle());
  }
}","public static void handleOnPageBreak(ICellContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign cellDesign=(ReportItemDesign)generateBy;
  if (!needOnPageBreak(cellDesign)) {
    return;
  }
  try {
    ICellInstance cell=new CellInstance(content,context,RunningState.RENDER,false);
    if (handleJS(cell,cellDesign.getOnPageBreak(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onPageBreak(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,cellDesign.getHandle());
  }
}",0.9851190476190476
70522,"public static void handleOnCreate(IDataContent content,ExecutionContext context){
  ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnCreate(dataItemDesign)) {
    return;
  }
  try {
    IDataItemInstance dataItem=new DataItemInstance(content,context);
    if (handleJS(dataItem,dataItemDesign.getOnCreate(),context).didRun())     return;
    IDataItemEventHandler eh=getEventHandler(dataItemDesign,context);
    if (eh != null)     eh.onCreate(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,dataItemDesign.getHandle());
  }
}","public static void handleOnCreate(IDataContent content,ExecutionContext context){
  ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnCreate(dataItemDesign)) {
    return;
  }
  try {
    IDataItemInstance dataItem=new DataItemInstance(content,context,RunningState.CREATE);
    if (handleJS(dataItem,dataItemDesign.getOnCreate(),context).didRun())     return;
    IDataItemEventHandler eh=getEventHandler(dataItemDesign,context);
    if (eh != null)     eh.onCreate(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,dataItemDesign.getHandle());
  }
}",0.9839228295819936
70523,"public static void handleOnRender(IDataContent content,ExecutionContext context){
  ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnRender(dataItemDesign)) {
    return;
  }
  try {
    IDataItemInstance dataItem=new DataItemInstance(content,context);
    if (handleJS(dataItem,dataItemDesign.getOnRender(),context).didRun())     return;
    IDataItemEventHandler eh=getEventHandler(dataItemDesign,context);
    if (eh != null)     eh.onRender(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,dataItemDesign.getHandle());
  }
}","public static void handleOnRender(IDataContent content,ExecutionContext context){
  ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnRender(dataItemDesign)) {
    return;
  }
  try {
    IDataItemInstance dataItem=new DataItemInstance(content,context,RunningState.RENDER);
    if (handleJS(dataItem,dataItemDesign.getOnRender(),context).didRun())     return;
    IDataItemEventHandler eh=getEventHandler(dataItemDesign,context);
    if (eh != null)     eh.onRender(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,dataItemDesign.getHandle());
  }
}",0.9839228295819936
70524,"public static void handleOnPageBreak(IDataContent content,ExecutionContext context){
  ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(dataItemDesign)) {
    return;
  }
  try {
    IDataItemInstance dataItem=new DataItemInstance(content,context);
    if (handleJS(dataItem,dataItemDesign.getOnPageBreak(),context).didRun())     return;
    IDataItemEventHandler eh=getEventHandler(dataItemDesign,context);
    if (eh != null)     eh.onPageBreak(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,dataItemDesign.getHandle());
  }
}","public static void handleOnPageBreak(IDataContent content,ExecutionContext context){
  ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(dataItemDesign)) {
    return;
  }
  try {
    IDataItemInstance dataItem=new DataItemInstance(content,context,RunningState.PAGEBREAK);
    if (handleJS(dataItem,dataItemDesign.getOnPageBreak(),context).didRun())     return;
    IDataItemEventHandler eh=getEventHandler(dataItemDesign,context);
    if (eh != null)     eh.onPageBreak(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,dataItemDesign.getHandle());
  }
}",0.981904012588513
70525,"private static IDynamicTextInstance createDynamicTextInstance(IContent content,ExecutionContext context){
  return new DynamicTextInstance(content,context);
}","private static IDynamicTextInstance createDynamicTextInstance(IContent content,ExecutionContext context,RunningState runningState){
  return new DynamicTextInstance(content,context,runningState);
}",0.8901408450704226
70526,"public static void handleOnCreate(IContent content,ExecutionContext context){
  ReportItemDesign textItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnCreate(textItemDesign)) {
    return;
  }
  try {
    IDynamicTextInstance text=createDynamicTextInstance(content,context);
    if (handleJS(text,textItemDesign.getOnCreate(),context).didRun())     return;
    IDynamicTextEventHandler eh=getEventHandler(textItemDesign,context);
    if (eh != null)     eh.onCreate(text,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,textItemDesign.getHandle());
  }
}","public static void handleOnCreate(IContent content,ExecutionContext context){
  ReportItemDesign textItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnCreate(textItemDesign)) {
    return;
  }
  try {
    IDynamicTextInstance text=createDynamicTextInstance(content,context,RunningState.CREATE);
    if (handleJS(text,textItemDesign.getOnCreate(),context).didRun())     return;
    IDynamicTextEventHandler eh=getEventHandler(textItemDesign,context);
    if (eh != null)     eh.onCreate(text,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,textItemDesign.getHandle());
  }
}",0.9837925445705024
70527,"public static void handleOnRender(IContent content,ExecutionContext context){
  ReportItemDesign textItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnRender(textItemDesign)) {
    return;
  }
  try {
    IDynamicTextInstance text=createDynamicTextInstance(content,context);
    if (handleJS(text,textItemDesign.getOnRender(),context).didRun())     return;
    IDynamicTextEventHandler eh=getEventHandler(textItemDesign,context);
    if (eh != null)     eh.onRender(text,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,textItemDesign.getHandle());
  }
}","public static void handleOnRender(IContent content,ExecutionContext context){
  ReportItemDesign textItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnRender(textItemDesign)) {
    return;
  }
  try {
    IDynamicTextInstance text=createDynamicTextInstance(content,context,RunningState.RENDER);
    if (handleJS(text,textItemDesign.getOnRender(),context).didRun())     return;
    IDynamicTextEventHandler eh=getEventHandler(textItemDesign,context);
    if (eh != null)     eh.onRender(text,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,textItemDesign.getHandle());
  }
}",0.9837925445705024
70528,"public static void handleOnPageBreak(IContent content,ExecutionContext context){
  ReportItemDesign textItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(textItemDesign)) {
    return;
  }
  try {
    IDynamicTextInstance text=createDynamicTextInstance(content,context);
    if (handleJS(text,textItemDesign.getOnPageBreak(),context).didRun())     return;
    IDynamicTextEventHandler eh=getEventHandler(textItemDesign,context);
    if (eh != null)     eh.onPageBreak(text,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,textItemDesign.getHandle());
  }
}","public static void handleOnPageBreak(IContent content,ExecutionContext context){
  ReportItemDesign textItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(textItemDesign)) {
    return;
  }
  try {
    IDynamicTextInstance text=createDynamicTextInstance(content,context,RunningState.PAGEBREAK);
    if (handleJS(text,textItemDesign.getOnPageBreak(),context).didRun())     return;
    IDynamicTextEventHandler eh=getEventHandler(textItemDesign,context);
    if (eh != null)     eh.onPageBreak(text,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,textItemDesign.getHandle());
  }
}",0.9817605075337034
70529,"public Object visitTable(ITableContent table,Object value){
  ExecutionContext context=(ExecutionContext)value;
  Object genBy=table.getGenerateBy();
  if (genBy instanceof TableItemDesign)   return new TableInstance(table,context);
 else   if (genBy instanceof GridItemDesign)   return new GridInstance(table,context);
  return null;
}","public Object visitTable(ITableContent table,Object value){
  ExecutionContext context=(ExecutionContext)value;
  Object genBy=table.getGenerateBy();
  if (genBy instanceof TableItemDesign)   return new TableInstance(table,context,runningState);
 else   if (genBy instanceof GridItemDesign)   return new GridInstance(table,context,runningState);
  return null;
}",0.9627507163323782
70530,"public Object visitLabel(ILabelContent label,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new LabelInstance(label,context);
}","public Object visitLabel(ILabelContent label,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new LabelInstance(label,context,runningState);
}",0.96
70531,"public Object visitCell(ICellContent cell,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new CellInstance(cell,context,false);
}","public Object visitCell(ICellContent cell,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new CellInstance(cell,context,runningState,false);
}",0.9602446483180428
70532,"public Object visitList(IListContent list,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new ListInstance(list,context);
}","public Object visitList(IListContent list,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new ListInstance(list,context,runningState);
}",0.9587301587301588
70533,"public Object visitForeign(IForeignContent foreign,Object value){
  ExecutionContext context=(ExecutionContext)value;
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType()) || IForeignContent.TEXT_TYPE.equals(foreign.getRawType()) || IForeignContent.TEMPLATE_TYPE.equals(foreign.getRawType()))   return new TextItemInstance(foreign,context);
  return null;
}","public Object visitForeign(IForeignContent foreign,Object value){
  ExecutionContext context=(ExecutionContext)value;
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType()) || IForeignContent.TEXT_TYPE.equals(foreign.getRawType()) || IForeignContent.TEMPLATE_TYPE.equals(foreign.getRawType()))   return new TextItemInstance(foreign,context,runningState);
  return null;
}",0.9824561403508772
70534,"public Object visitText(ITextContent text,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new TextItemInstance(text,context);
}","public Object visitText(ITextContent text,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new TextItemInstance(text,context,runningState);
}",0.959752321981424
70535,"public Object visitData(IDataContent data,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new DataItemInstance(data,context);
}","public Object visitData(IDataContent data,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new DataItemInstance(data,context,runningState);
}",0.959752321981424
70536,"public Object visitContent(IContent content,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new ReportElementInstance(content,context);
}","public Object visitContent(IContent content,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new ReportElementInstance(content,context,runningState);
}",0.9620991253644317
70537,"public Object visitImage(IImageContent image,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new ImageInstance(image,context);
}","public Object visitImage(IImageContent image,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new ImageInstance(image,context,runningState);
}",0.96
70538,"public static IReportElementInstance getInstance(IElement element,ExecutionContext context) throws BirtException {
  if (element == null)   return null;
  if (element instanceof IContent) {
    return (IReportElementInstance)instanceBuilder.visit((IContent)element,context);
  }
  return null;
}","public static IReportElementInstance getInstance(IElement element,ExecutionContext context,RunningState runningState) throws BirtException {
  if (element == null)   return null;
  if (element instanceof IContent) {
    instanceBuilder.setRunningState(runningState);
    return (IReportElementInstance)instanceBuilder.visit((IContent)element,context);
  }
  return null;
}",0.8845577211394303
70539,"public Object visitRow(IRowContent row,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new RowInstance(row,context);
}","public Object visitRow(IRowContent row,Object value){
  ExecutionContext context=(ExecutionContext)value;
  return new RowInstance(row,context,runningState);
}",0.9573770491803278
70540,"public static void handleOnCreate(ITableContent content,ExecutionContext context){
  ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnCreate(gridDesign)) {
    return;
  }
  try {
    IGridInstance grid=new GridInstance(content,context);
    if (handleJS(grid,gridDesign.getOnCreate(),context).didRun())     return;
    IGridEventHandler eh=getEventHandler(gridDesign,context);
    if (eh != null)     eh.onCreate(grid,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,gridDesign.getHandle());
  }
}","public static void handleOnCreate(ITableContent content,ExecutionContext context){
  ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnCreate(gridDesign)) {
    return;
  }
  try {
    IGridInstance grid=new GridInstance(content,context,RunningState.CREATE);
    if (handleJS(grid,gridDesign.getOnCreate(),context).didRun())     return;
    IGridEventHandler eh=getEventHandler(gridDesign,context);
    if (eh != null)     eh.onCreate(grid,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,gridDesign.getHandle());
  }
}",0.9827288428324698
70541,"public static void handleOnRender(ITableContent content,ExecutionContext context){
  ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnRender(gridDesign)) {
    return;
  }
  try {
    IGridInstance grid=new GridInstance(content,context);
    if (handleJS(grid,gridDesign.getOnRender(),context).didRun())     return;
    IGridEventHandler eh=getEventHandler(gridDesign,context);
    if (eh != null)     eh.onRender(grid,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,gridDesign.getHandle());
  }
}","public static void handleOnRender(ITableContent content,ExecutionContext context){
  ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnRender(gridDesign)) {
    return;
  }
  try {
    IGridInstance grid=new GridInstance(content,context,RunningState.RENDER);
    if (handleJS(grid,gridDesign.getOnRender(),context).didRun())     return;
    IGridEventHandler eh=getEventHandler(gridDesign,context);
    if (eh != null)     eh.onRender(grid,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,gridDesign.getHandle());
  }
}",0.9827288428324698
70542,"public static void handleOnPageBreak(ITableContent content,ExecutionContext context){
  ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(gridDesign)) {
    return;
  }
  try {
    IGridInstance grid=new GridInstance(content,context);
    if (handleJS(grid,gridDesign.getOnPageBreak(),context).didRun())     return;
    IGridEventHandler eh=getEventHandler(gridDesign,context);
    if (eh != null)     eh.onPageBreak(grid,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,gridDesign.getHandle());
  }
}","public static void handleOnPageBreak(ITableContent content,ExecutionContext context){
  ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(gridDesign)) {
    return;
  }
  try {
    IGridInstance grid=new GridInstance(content,context,RunningState.PAGEBREAK);
    if (handleJS(grid,gridDesign.getOnPageBreak(),context).didRun())     return;
    IGridEventHandler eh=getEventHandler(gridDesign,context);
    if (eh != null)     eh.onPageBreak(grid,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,gridDesign.getHandle());
  }
}",0.980590717299578
70543,"public void initialize() throws BirtException {
  if (content == null) {
    this.maxAvaWidth=width;
    return;
  }
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  calculateSpecifiedHeight(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
    if (specifiedWidth > 0) {
      this.width=specifiedWidth;
    }
 else {
      if (parent != null) {
        this.width=parent.getMaxAvaWidth();
      }
    }
    this.maxAvaWidth=width;
  }
 else {
    buildProperties(content,context);
    if (specifiedWidth > 0) {
      this.width=specifiedWidth;
    }
 else {
      if (parent != null) {
        setAllocatedWidth(parent.getMaxAvaWidth());
      }
    }
    maxAvaWidth=getContentWidth();
  }
  this.bookmark=content.getBookmark();
  this.action=content.getHyperlinkAction();
  parent.add(this);
}","public void initialize() throws BirtException {
  if (content == null) {
    this.maxAvaWidth=width;
    return;
  }
  IStyle style=content.getStyle();
  calculateSpecifiedWidth(content);
  calculateSpecifiedHeight(content);
  if (style == null || style.isEmpty()) {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
    if (specifiedWidth > 0) {
      this.width=specifiedWidth;
    }
 else {
      if (parent != null) {
        this.width=parent.getMaxAvaWidth();
      }
    }
    this.maxAvaWidth=width;
  }
 else {
    buildProperties(content,context);
    if (specifiedWidth > 0) {
      this.width=specifiedWidth;
    }
 else {
      if (parent != null) {
        setAllocatedWidth(parent.getMaxAvaWidth());
      }
    }
    maxAvaWidth=getContentWidth();
  }
  textAlign=content.getComputedStyle().getProperty(IStyle.STYLE_TEXT_ALIGN);
  this.bookmark=content.getBookmark();
  this.action=content.getHyperlinkAction();
  parent.add(this);
}",0.959749085206482
70544,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
  localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
  localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
  localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
  localProperties.setPaddingBottom(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maw));
  localProperties.setPaddingLeft(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maw));
  localProperties.setPaddingTop(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maw));
  localProperties.setPaddingRight(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maw));
  if (!isInInlineStacking) {
    pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
    pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  }
  this.boxStyle=new BoxStyle();
  int borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setLeftBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_LEFT_COLOR),style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setRightBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_RIGHT_COLOR),style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setTopBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_TOP_COLOR),style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setBottomBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR),style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),borderWidth));
  }
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  CSSValue url=style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE);
  if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE))) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url.getCssText()),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),maw),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),maw)));
  }
  textAlign=style.getProperty(IStyle.STYLE_TEXT_ALIGN);
  action=content.getHyperlinkAction();
  bookmark=content.getBookmark();
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
  localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
  localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
  localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
  localProperties.setPaddingBottom(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maw));
  localProperties.setPaddingLeft(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maw));
  localProperties.setPaddingTop(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maw));
  localProperties.setPaddingRight(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maw));
  if (!isInInlineStacking) {
    pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
    pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  }
  this.boxStyle=new BoxStyle();
  int borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setLeftBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_LEFT_COLOR),style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setRightBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_RIGHT_COLOR),style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setTopBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_TOP_COLOR),style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setBottomBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR),style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),borderWidth));
  }
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  CSSValue url=style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE);
  if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE))) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url.getCssText()),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),maw),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),maw)));
  }
  action=content.getHyperlinkAction();
  bookmark=content.getBookmark();
}",0.9909735654416504
70545,"protected IContent cloneContent(IContent content,long pageNumber,long totalPageNumber){
  IContent newContent=content.cloneContent(false);
  if (newContent.getContentType() == IContent.AUTOTEXT_CONTENT) {
    IAutoTextContent autoText=(IAutoTextContent)newContent;
    int type=autoText.getType();
    if (type == IAutoTextContent.PAGE_NUMBER || type == IAutoTextContent.UNFILTERED_PAGE_NUMBER) {
      String pattern=autoText.getComputedStyle().getNumberFormat();
      NumberFormatter nf=new NumberFormatter(pattern);
      autoText.setText(nf.format(pageNumber));
    }
  }
  Iterator iter=content.getChildren().iterator();
  while (iter.hasNext()) {
    IContent child=(IContent)iter.next();
    IContent newChild=cloneContent(child,pageNumber,totalPageNumber);
    newChild.setParent(newContent);
    newContent.getChildren().add(newChild);
  }
  return newContent;
}","protected IContent cloneContent(IContent parent,IContent content,long pageNumber,long totalPageNumber){
  IContent newContent=content.cloneContent(false);
  newContent.setParent(parent);
  if (newContent.getContentType() == IContent.AUTOTEXT_CONTENT) {
    IAutoTextContent autoText=(IAutoTextContent)newContent;
    int type=autoText.getType();
    if (type == IAutoTextContent.PAGE_NUMBER || type == IAutoTextContent.UNFILTERED_PAGE_NUMBER) {
      String pattern=autoText.getComputedStyle().getNumberFormat();
      NumberFormatter nf=new NumberFormatter(pattern);
      autoText.setText(nf.format(pageNumber));
    }
  }
  Iterator iter=content.getChildren().iterator();
  while (iter.hasNext()) {
    IContent child=(IContent)iter.next();
    IContent newChild=cloneContent(newContent,child,pageNumber,totalPageNumber);
    newChild.setParent(newContent);
    newContent.getChildren().add(newChild);
  }
  return newContent;
}",0.9672767609539656
70546,"protected IPageContent createPageContent(IPageContent pageContent,long pageNumber,long totalPageNumber){
  return (IPageContent)cloneContent(pageContent,pageNumber,totalPageNumber);
}","protected IPageContent createPageContent(IPageContent pageContent,long pageNumber,long totalPageNumber){
  return (IPageContent)cloneContent((IContent)pageContent.getParent(),pageContent,pageNumber,totalPageNumber);
}",0.915
70547,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=style.getBackgroundImage();
  if (url != null && !""String_Node_Str"".equals(url)) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(url,style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(padding,width));
  }
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=content.getStyle().getBackgroundImage();
  if (url != null) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(padding,width));
  }
}",0.9777387229056824
70548,"protected void buildLogicContainerProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=cs.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(url,cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
    }
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}","protected void buildLogicContainerProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
    }
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}",0.9888507718696398
70549,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
  localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
  localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
  localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
  localProperties.setPaddingBottom(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maw));
  localProperties.setPaddingLeft(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maw));
  localProperties.setPaddingTop(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maw));
  localProperties.setPaddingRight(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maw));
  if (!isInInlineStacking) {
    pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
    pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  }
  this.boxStyle=new BoxStyle();
  int borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setLeftBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_LEFT_COLOR),style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setRightBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_RIGHT_COLOR),style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setTopBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_TOP_COLOR),style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setBottomBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR),style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),borderWidth));
  }
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  CSSValue url=style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE);
  if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE))) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(url.getCssText(),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),maw),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),maw)));
  }
  textAlign=style.getProperty(IStyle.STYLE_TEXT_ALIGN);
  action=content.getHyperlinkAction();
  bookmark=content.getBookmark();
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
  localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
  localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
  localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
  localProperties.setPaddingBottom(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_BOTTOM),maw));
  localProperties.setPaddingLeft(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_LEFT),maw));
  localProperties.setPaddingTop(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_TOP),maw));
  localProperties.setPaddingRight(getDimensionValue(style.getProperty(IStyle.STYLE_PADDING_RIGHT),maw));
  if (!isInInlineStacking) {
    pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
    pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
  }
  this.boxStyle=new BoxStyle();
  int borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_LEFT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setLeftBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_LEFT_COLOR),style.getProperty(IStyle.STYLE_BORDER_LEFT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setRightBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_RIGHT_COLOR),style.getProperty(IStyle.STYLE_BORDER_RIGHT_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_TOP_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setTopBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_TOP_COLOR),style.getProperty(IStyle.STYLE_BORDER_TOP_STYLE),borderWidth));
  }
  borderWidth=getDimensionValue(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH),maw);
  if (borderWidth > 0) {
    boxStyle.setBottomBorder(new BorderInfo(style.getProperty(IStyle.STYLE_BORDER_BOTTOM_COLOR),style.getProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE),borderWidth));
  }
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  CSSValue url=style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE);
  if (!IStyle.NONE_VALUE.equals(style.getProperty(IStyle.STYLE_BACKGROUND_IMAGE))) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url.getCssText()),style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),maw),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),maw)));
  }
  textAlign=style.getProperty(IStyle.STYLE_TEXT_ALIGN);
  action=content.getHyperlinkAction();
  bookmark=content.getBookmark();
}",0.997919001120538
70550,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(url,style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
    }
    localProperties=new LocalProperties();
    int maw=parent.getMaxAvaWidth();
    localProperties.setMarginBottom(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
    localProperties.setMarginLeft(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
    localProperties.setMarginTop(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
    localProperties.setMarginRight(getDimensionValue(style.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
    if (!isInInlineStacking) {
      pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(getImageUrl(url),cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
    }
    localProperties=new LocalProperties();
    int maw=parent.getMaxAvaWidth();
    localProperties.setMarginBottom(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_BOTTOM),maw));
    localProperties.setMarginLeft(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_LEFT),maw));
    localProperties.setMarginTop(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_TOP),maw));
    localProperties.setMarginRight(getDimensionValue(cs.getProperty(IStyle.STYLE_MARGIN_RIGHT),maw));
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}",0.9577464788732394
70551,"public static <T>T convertType(Object tempValue,Class<T> type) throws BirtException {
  T value=null;
  if (type.isAssignableFrom(tempValue.getClass())) {
    value=(T)tempValue;
  }
 else   if (type == DimensionType.class) {
  }
 else {
    value=(T)DataTypeUtil.convert(tempValue,type);
  }
  return value;
}","public static <T>T convertType(Object tempValue,Class<T> type) throws BirtException {
  T value=null;
  if (tempValue == null || type.isAssignableFrom(tempValue.getClass())) {
    value=(T)tempValue;
  }
 else   if (type == DimensionType.class) {
  }
 else {
    value=(T)DataTypeUtil.convert(tempValue,type);
  }
  return value;
}",0.967238689547582
70552,"/** 
 * @param shell
 */
public HyperlinkEditorDialog(Shell shell,URLValue urlValue,ChartWizardContext context,TriggerSupportMatrix triggerMatrix,int optionalStyle){
  super(shell);
  fURLValue=urlValue;
  fContext=context;
  fTriggerMatrix=triggerMatrix;
  fOptionalStyle=optionalStyle;
  fbEnableURLParameters=((optionalStyle & TriggerDataComposite.ENABLE_URL_PARAMETERS) == TriggerDataComposite.ENABLE_URL_PARAMETERS);
  if (fURLValue == null) {
    fURLValue=AttributeFactoryImpl.eINSTANCE.createURLValue();
  }
}","/** 
 * @param shell
 */
public HyperlinkEditorDialog(Shell shell,URLValue urlValue,ChartWizardContext context,TriggerSupportMatrix triggerMatrix,int optionalStyle){
  super(shell);
  this.setShellStyle(SWT.DIALOG_TRIM | SWT.RESIZE);
  fURLValue=urlValue;
  fContext=context;
  fTriggerMatrix=triggerMatrix;
  fOptionalStyle=optionalStyle;
  fbEnableURLParameters=((optionalStyle & TriggerDataComposite.ENABLE_URL_PARAMETERS) == TriggerDataComposite.ENABLE_URL_PARAMETERS);
  if (fURLValue == null) {
    fURLValue=AttributeFactoryImpl.eINSTANCE.createURLValue();
  }
}",0.9521178637200736
70553,"public boolean isValid(){
  String text=fTxtHyperlinkLabel.getText();
  if (text == null || ""String_Node_Str"".equals(text)) {
    return false;
  }
  return true;
}","public boolean isValid(){
  String text=fTxtHyperlinkLabel.getText();
  if (text == null || ""String_Node_Str"".equals(text.trim())) {
    return false;
  }
  return true;
}",0.9791044776119404
70554,"/** 
 * @param glURL
 * @param glParameter
 */
private void createURLComposite(Composite parent){
  GridLayout gl=(GridLayout)parent.getLayout();
  gl.numColumns=2;
  Label lblTarget=new Label(parent,SWT.NONE);
  GridData gdLBLTarget=new GridData();
  gdLBLTarget.horizontalIndent=2;
  lblTarget.setLayoutData(gdLBLTarget);
  lblTarget.setText(Messages.getString(""String_Node_Str""));
  fTxtHyperlinkLabel=new Text(parent,SWT.BORDER);
  GridData gdTXTTarget=new GridData(GridData.FILL_HORIZONTAL);
  fTxtHyperlinkLabel.setLayoutData(gdTXTTarget);
  AssistField af=new TextAssistField(fTxtHyperlinkLabel,null){
    public boolean isValid(){
      String text=fTxtHyperlinkLabel.getText();
      if (text == null || ""String_Node_Str"".equals(text)) {
        return false;
      }
      return true;
    }
    public boolean isRequiredField(){
      return true;
    }
    public String getErrorMessage(){
      return Messages.getString(""String_Node_Str"");
    }
  }
;
  FieldAssistHelper.getInstance().addRequiredFieldIndicator(af,lblTarget);
  Label lblBaseURL=new Label(parent,SWT.NONE);
  GridData gdLBLBaseURL=new GridData();
  gdLBLBaseURL.horizontalIndent=2;
  lblBaseURL.setLayoutData(gdLBLBaseURL);
  lblBaseURL.setText(Messages.getString(""String_Node_Str""));
  fBtnBaseURL=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    fBtnBaseURL.setLayoutData(gd);
    fBtnBaseURL.setText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.addSelectionListener(this);
    fBtnBaseURL.setEnabled(fContext.getUIServiceProvider().isInvokingSupported());
  }
  Label lblDefine=new Label(parent,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    lblDefine.setLayoutData(gd);
    lblDefine.setText(Messages.getString(""String_Node_Str""));
  }
  fBtnAdvanced=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    fBtnAdvanced.setLayoutData(gd);
    fBtnAdvanced.setText(getAdvancedButtonText(bAdvanced));
    fBtnAdvanced.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnAdvanced.addSelectionListener(this);
    fBtnAdvanced.setEnabled(fbEnableURLParameters);
  }
  fGrpParameters=new Group(parent,SWT.NONE);
  GridData gdGRPParameters=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPParameters.horizontalSpan=3;
  fGrpParameters.setLayoutData(gdGRPParameters);
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  fGrpParameters.setLayout(glParameter);
  fGrpParameters.setText(Messages.getString(""String_Node_Str""));
  fGrpParameters.setVisible(bAdvanced);
  StyledText stParameters=new StyledText(fGrpParameters,SWT.WRAP | SWT.READ_ONLY);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    stParameters.setLayoutData(gd);
    stParameters.setText(Messages.getString(""String_Node_Str""));
    StyleRange[] sr={new StyleRange(0,4,parent.getForeground(),parent.getBackground(),SWT.ITALIC),new StyleRange(4,stParameters.getText().length() - 4,parent.getForeground(),parent.getBackground(),SWT.NORMAL)};
    stParameters.setStyleRanges(sr);
    stParameters.setBackground(parent.getBackground());
  }
  Label lblBaseParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLBaseParm=new GridData();
    gdLBLBaseParm.horizontalIndent=2;
    lblBaseParm.setLayoutData(gdLBLBaseParm);
    lblBaseParm.setText(Messages.getString(""String_Node_Str""));
    lblBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtBaseParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTBaseParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTBaseParm.horizontalSpan=2;
  fTxtBaseParm.setLayoutData(gdTXTBaseParm);
  fTxtBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtBaseParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_CATEGORY_SERIES) != TriggerDataComposite.DISABLE_CATEGORY_SERIES));
  Label lblValueParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLValueParm=new GridData();
    gdLBLValueParm.horizontalIndent=2;
    lblValueParm.setLayoutData(gdLBLValueParm);
    lblValueParm.setText(Messages.getString(""String_Node_Str""));
    lblValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtValueParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTValueParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTValueParm.horizontalSpan=2;
  fTxtValueParm.setLayoutData(gdTXTValueParm);
  fTxtValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtValueParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES) != TriggerDataComposite.DISABLE_VALUE_SERIES));
  Label lblSeriesParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLSeriesParm=new GridData();
    gdLBLSeriesParm.horizontalIndent=2;
    lblSeriesParm.setLayoutData(gdLBLSeriesParm);
    lblSeriesParm.setText(Messages.getString(""String_Node_Str""));
    lblSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtSeriesParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTSeriesParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSeriesParm.horizontalSpan=2;
  fTxtSeriesParm.setLayoutData(gdTXTSeriesParm);
  fTxtSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtSeriesParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES_NAME) != TriggerDataComposite.DISABLE_VALUE_SERIES_NAME));
}","/** 
 * @param glURL
 * @param glParameter
 */
private void createURLComposite(Composite parent){
  GridLayout gl=(GridLayout)parent.getLayout();
  gl.numColumns=2;
  Label lblTarget=new Label(parent,SWT.NONE);
  GridData gdLBLTarget=new GridData();
  gdLBLTarget.horizontalIndent=2;
  lblTarget.setLayoutData(gdLBLTarget);
  lblTarget.setText(Messages.getString(""String_Node_Str""));
  fTxtHyperlinkLabel=new Text(parent,SWT.BORDER);
  GridData gdTXTTarget=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTTarget.widthHint=80;
  fTxtHyperlinkLabel.setLayoutData(gdTXTTarget);
  AssistField af=new TextAssistField(fTxtHyperlinkLabel,null){
    public boolean isValid(){
      String text=fTxtHyperlinkLabel.getText();
      if (text == null || ""String_Node_Str"".equals(text.trim())) {
        return false;
      }
      return true;
    }
    public boolean isRequiredField(){
      return true;
    }
    public String getErrorMessage(){
      return Messages.getString(""String_Node_Str"");
    }
  }
;
  FieldAssistHelper.getInstance().addRequiredFieldIndicator(af,lblTarget);
  Label lblBaseURL=new Label(parent,SWT.NONE);
  GridData gdLBLBaseURL=new GridData();
  gdLBLBaseURL.horizontalIndent=2;
  lblBaseURL.setLayoutData(gdLBLBaseURL);
  lblBaseURL.setText(Messages.getString(""String_Node_Str""));
  fBtnBaseURL=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    fBtnBaseURL.setLayoutData(gd);
    fBtnBaseURL.setText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnBaseURL.addSelectionListener(this);
    fBtnBaseURL.setEnabled(fContext.getUIServiceProvider().isInvokingSupported());
  }
  Label lblDefine=new Label(parent,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    lblDefine.setLayoutData(gd);
    lblDefine.setText(Messages.getString(""String_Node_Str""));
  }
  fBtnAdvanced=new Button(parent,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    fBtnAdvanced.setLayoutData(gd);
    fBtnAdvanced.setText(getAdvancedButtonText(bAdvanced));
    fBtnAdvanced.setToolTipText(Messages.getString(""String_Node_Str""));
    fBtnAdvanced.addSelectionListener(this);
    fBtnAdvanced.setEnabled(fbEnableURLParameters);
  }
  fGrpParameters=new Group(parent,SWT.NONE);
  GridData gdGRPParameters=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPParameters.horizontalSpan=3;
  fGrpParameters.setLayoutData(gdGRPParameters);
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  fGrpParameters.setLayout(glParameter);
  fGrpParameters.setText(Messages.getString(""String_Node_Str""));
  fGrpParameters.setVisible(bAdvanced);
  StyledText stParameters=new StyledText(fGrpParameters,SWT.WRAP | SWT.READ_ONLY);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    stParameters.setLayoutData(gd);
    stParameters.setText(Messages.getString(""String_Node_Str""));
    StyleRange[] sr={new StyleRange(0,4,parent.getForeground(),parent.getBackground(),SWT.ITALIC),new StyleRange(4,stParameters.getText().length() - 4,parent.getForeground(),parent.getBackground(),SWT.NORMAL)};
    stParameters.setStyleRanges(sr);
    stParameters.setBackground(parent.getBackground());
  }
  Label lblBaseParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLBaseParm=new GridData();
    gdLBLBaseParm.horizontalIndent=2;
    lblBaseParm.setLayoutData(gdLBLBaseParm);
    lblBaseParm.setText(Messages.getString(""String_Node_Str""));
    lblBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtBaseParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTBaseParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTBaseParm.horizontalSpan=2;
  fTxtBaseParm.setLayoutData(gdTXTBaseParm);
  fTxtBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtBaseParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_CATEGORY_SERIES) != TriggerDataComposite.DISABLE_CATEGORY_SERIES));
  Label lblValueParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLValueParm=new GridData();
    gdLBLValueParm.horizontalIndent=2;
    lblValueParm.setLayoutData(gdLBLValueParm);
    lblValueParm.setText(Messages.getString(""String_Node_Str""));
    lblValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtValueParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTValueParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTValueParm.horizontalSpan=2;
  fTxtValueParm.setLayoutData(gdTXTValueParm);
  fTxtValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtValueParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES) != TriggerDataComposite.DISABLE_VALUE_SERIES));
  Label lblSeriesParm=new Label(fGrpParameters,SWT.NONE);
{
    GridData gdLBLSeriesParm=new GridData();
    gdLBLSeriesParm.horizontalIndent=2;
    lblSeriesParm.setLayoutData(gdLBLSeriesParm);
    lblSeriesParm.setText(Messages.getString(""String_Node_Str""));
    lblSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  fTxtSeriesParm=new Text(fGrpParameters,SWT.BORDER);
  GridData gdTXTSeriesParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSeriesParm.horizontalSpan=2;
  fTxtSeriesParm.setLayoutData(gdTXTSeriesParm);
  fTxtSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  fTxtSeriesParm.setEnabled(fbEnableURLParameters && ((fOptionalStyle & TriggerDataComposite.DISABLE_VALUE_SERIES_NAME) != TriggerDataComposite.DISABLE_VALUE_SERIES_NAME));
}",0.9969333216507492
70555,"private void updateButtonStatus(){
  int index=fListHyperlinks.getSelectionIndex();
  boolean enabled=(index >= 0);
  fBtnEdit.setEnabled(enabled);
  fBtnDelete.setEnabled(enabled);
  fBtnUp.setEnabled(enabled && index > 0);
  fBtnDown.setEnabled(enabled && index < (fListHyperlinks.getItemCount() - 1));
  fBtnProperties.setEnabled(fMultiURLValues.getURLValues().size() > 1);
}","private void updateButtonStatus(){
  int index=fListHyperlinks.getSelectionIndex();
  boolean enabled=(index >= 0);
  fBtnEdit.setEnabled(enabled);
  fBtnDelete.setEnabled(enabled);
  fBtnUp.setEnabled(enabled && index > 0);
  fBtnDown.setEnabled(enabled && index < (fListHyperlinks.getItemCount() - 1));
  fBtnProperties.setEnabled(fMultiURLValues != null && fMultiURLValues.getURLValues().size() > 1);
}",0.9553001277139208
70556,"private void placeComponents(){
  GridLayout gl=new GridLayout();
  gl.numColumns=2;
  this.setLayout(gl);
  Group group=new Group(this,SWT.NONE);
  group.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.horizontalSpan=2;
  group.setLayoutData(gd);
  gl=new GridLayout();
  gl.numColumns=3;
  group.setLayout(gl);
  fListHyperlinks=new List(group,SWT.V_SCROLL | SWT.SINGLE | SWT.BORDER);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=80;
  gd.horizontalSpan=3;
  fListHyperlinks.setLayoutData(gd);
  fBtnAdd=new Button(group,SWT.NONE);
  fBtnAdd.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fBtnAdd.setLayoutData(gd);
  fBtnEdit=new Button(group,SWT.NONE);
  fBtnEdit.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fBtnEdit.setLayoutData(gd);
  fBtnDelete=new Button(group,SWT.NONE);
  fBtnDelete.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fBtnDelete.setLayoutData(gd);
  fBtnUp=new Button(group,SWT.NONE);
  fBtnUp.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fBtnUp.setLayoutData(gd);
  fBtnDown=new Button(group,SWT.NONE);
  fBtnDown.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fBtnDown.setLayoutData(gd);
  new Label(group,SWT.NONE);
  fBtnProperties=new Button(this,SWT.NONE);
  fBtnProperties.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  gd.horizontalSpan=2;
  fBtnProperties.setLayoutData(gd);
  Label label=new Label(this,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  fTxtTooltip=new Text(this,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fTxtTooltip.setLayoutData(gd);
}","private void placeComponents(){
  GridLayout gl=new GridLayout();
  gl.numColumns=2;
  this.setLayout(gl);
  Group group=new Group(this,SWT.NONE);
  group.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.horizontalSpan=2;
  group.setLayoutData(gd);
  gl=new GridLayout();
  gl.numColumns=3;
  group.setLayout(gl);
  fListHyperlinks=new List(group,SWT.V_SCROLL | SWT.H_SCROLL | SWT.SINGLE| SWT.BORDER);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=80;
  gd.widthHint=100;
  gd.horizontalSpan=3;
  fListHyperlinks.setLayoutData(gd);
  fBtnAdd=new Button(group,SWT.NONE);
  fBtnAdd.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fBtnAdd.setLayoutData(gd);
  fBtnEdit=new Button(group,SWT.NONE);
  fBtnEdit.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fBtnEdit.setLayoutData(gd);
  fBtnDelete=new Button(group,SWT.NONE);
  fBtnDelete.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fBtnDelete.setLayoutData(gd);
  fBtnUp=new Button(group,SWT.NONE);
  fBtnUp.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fBtnUp.setLayoutData(gd);
  fBtnDown=new Button(group,SWT.NONE);
  fBtnDown.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fBtnDown.setLayoutData(gd);
  new Label(group,SWT.NONE);
  fBtnProperties=new Button(this,SWT.NONE);
  fBtnProperties.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  gd.horizontalSpan=2;
  fBtnProperties.setLayoutData(gd);
  Label label=new Label(this,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  fTxtTooltip=new Text(this,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  fTxtTooltip.setLayoutData(gd);
}",0.9903846153846154
70557,"/** 
 * @param parent
 * @param style
 */
public MultipleHyperlinksComposite(Composite parent,int style,ChartWizardContext context,TriggerSupportMatrix triggerMatrix,int optionalStyles){
  super(parent,style);
  fContext=context;
  fTriggerMatrix=triggerMatrix;
  fOptionalStyles=optionalStyles;
  placeComponents();
  initListeners();
}","/** 
 * @param parent
 * @param style
 */
public MultipleHyperlinksComposite(Composite parent,int style,ChartWizardContext context,TriggerSupportMatrix triggerMatrix,int optionalStyles){
  super(parent,style);
  fContext=context;
  fTriggerMatrix=triggerMatrix;
  fOptionalStyles=optionalStyles;
  placeComponents();
  initListeners();
  updateButtonStatus();
}",0.9656160458452722
70558,"private void updateUI(Trigger trigger){
  if (trigger == null) {
    initUI();
    return;
  }
switch (getTriggerIndex()) {
case INDEX_1_URL_REDIRECT:
    ActionValue value=trigger.getAction().getValue();
  if (value instanceof MultiURLValues) {
    this.slValues.topControl=multiHyperlinksComposite;
    MultiURLValues urlValues=(MultiURLValues)trigger.getAction().getValue();
    multiHyperlinksComposite.populateUIValues(urlValues);
  }
 else   if (value instanceof URLValue) {
    ChartAdapter.beginIgnoreNotifications();
    MultiURLValues muv=MultiURLValuesImpl.create();
    URLValue uv=(URLValue)value;
    org.eclipse.birt.chart.model.component.Label l=LabelImpl.create();
    l.setCaption(TextImpl.create(uv.getBaseUrl()));
    uv.setLabel(l);
    muv.getURLValues().add(uv);
    muv.setTooltip(uv.getTooltip());
    muv.eAdapters().addAll(value.eAdapters());
    trigger.getAction().setValue(muv);
    multiHyperlinksComposite.populateUIValues(muv);
    ChartAdapter.endIgnoreNotifications();
  }
 else {
    this.slValues.topControl=cmpURL;
    URLValue urlValue=(URLValue)trigger.getAction().getValue();
    sBaseURL=urlValue.getBaseUrl();
    txtBaseParm.setText((urlValue.getBaseParameterName().length() > 0) ? urlValue.getBaseParameterName() : ""String_Node_Str"");
    txtValueParm.setText((urlValue.getValueParameterName().length() > 0) ? urlValue.getValueParameterName() : ""String_Node_Str"");
    txtSeriesParm.setText((urlValue.getSeriesParameterName().length() > 0) ? urlValue.getSeriesParameterName() : ""String_Node_Str"");
  }
break;
case INDEX_2_TOOLTIP:
this.slValues.topControl=cmpTooltip;
TooltipValue tooltipValue=(TooltipValue)trigger.getAction().getValue();
txtTooltipText.setText((tooltipValue.getText() != null) ? tooltipValue.getText() : ""String_Node_Str"");
break;
case INDEX_3_TOOGLE_VISABILITY:
this.slValues.topControl=cmpVisiblity;
break;
case INDEX_4_SCRIPT:
this.slValues.topControl=cmpScript;
ScriptValue scriptValue=(ScriptValue)trigger.getAction().getValue();
txtScript.setText((scriptValue.getScript().length() > 0) ? scriptValue.getScript() : ""String_Node_Str"");
break;
case INDEX_5_HIGHLIGHT:
this.slValues.topControl=cmpHighlight;
break;
case INDEX_6_CALLBACK:
this.slValues.topControl=cmpCallback;
break;
case INDEX_7_TOOGLE_DATAPOINT:
this.slValues.topControl=cmpDPVisibility;
break;
default :
this.slValues.topControl=cmpDefault;
break;
}
grpValue.layout();
}","private void updateUI(Trigger trigger){
  if (trigger == null) {
    initUI();
    return;
  }
switch (getTriggerIndex()) {
case INDEX_1_URL_REDIRECT:
    this.slValues.topControl=multiHyperlinksComposite;
  ActionValue value=trigger.getAction().getValue();
if (value instanceof MultiURLValues) {
  MultiURLValues urlValues=(MultiURLValues)trigger.getAction().getValue();
  multiHyperlinksComposite.populateUIValues(urlValues);
}
 else if (value instanceof URLValue) {
  ChartAdapter.beginIgnoreNotifications();
  MultiURLValues muv=MultiURLValuesImpl.create();
  URLValue uv=(URLValue)value;
  org.eclipse.birt.chart.model.component.Label l=LabelImpl.create();
  l.setCaption(TextImpl.create(uv.getBaseUrl()));
  uv.setLabel(l);
  muv.getURLValues().add(uv);
  muv.setTooltip(uv.getTooltip());
  muv.eAdapters().addAll(value.eAdapters());
  trigger.getAction().setValue(muv);
  multiHyperlinksComposite.populateUIValues(muv);
  ChartAdapter.endIgnoreNotifications();
}
 else {
  this.slValues.topControl=cmpURL;
  URLValue urlValue=(URLValue)trigger.getAction().getValue();
  sBaseURL=urlValue.getBaseUrl();
  txtBaseParm.setText((urlValue.getBaseParameterName().length() > 0) ? urlValue.getBaseParameterName() : ""String_Node_Str"");
  txtValueParm.setText((urlValue.getValueParameterName().length() > 0) ? urlValue.getValueParameterName() : ""String_Node_Str"");
  txtSeriesParm.setText((urlValue.getSeriesParameterName().length() > 0) ? urlValue.getSeriesParameterName() : ""String_Node_Str"");
}
break;
case INDEX_2_TOOLTIP:
this.slValues.topControl=cmpTooltip;
TooltipValue tooltipValue=(TooltipValue)trigger.getAction().getValue();
txtTooltipText.setText((tooltipValue.getText() != null) ? tooltipValue.getText() : ""String_Node_Str"");
break;
case INDEX_3_TOOGLE_VISABILITY:
this.slValues.topControl=cmpVisiblity;
break;
case INDEX_4_SCRIPT:
this.slValues.topControl=cmpScript;
ScriptValue scriptValue=(ScriptValue)trigger.getAction().getValue();
txtScript.setText((scriptValue.getScript().length() > 0) ? scriptValue.getScript() : ""String_Node_Str"");
break;
case INDEX_5_HIGHLIGHT:
this.slValues.topControl=cmpHighlight;
break;
case INDEX_6_CALLBACK:
this.slValues.topControl=cmpCallback;
break;
case INDEX_7_TOOGLE_DATAPOINT:
this.slValues.topControl=cmpDPVisibility;
break;
default :
this.slValues.topControl=cmpDefault;
break;
}
grpValue.layout();
}",0.9667927700714586
70559,"private void switchUI(){
switch (getTriggerIndex()) {
case INDEX_1_URL_REDIRECT:
    Trigger trigger=(Trigger)triggersMap.get(cmbTriggerType.getText());
  if (trigger == null || trigger.getAction() == null) {
    multiHyperlinksComposite.populateUIValues(MultiURLValuesImpl.create());
    this.slValues.topControl=multiHyperlinksComposite;
  }
 else {
    this.slValues.topControl=cmpURL;
  }
break;
case INDEX_2_TOOLTIP:
this.slValues.topControl=cmpTooltip;
break;
case INDEX_3_TOOGLE_VISABILITY:
this.slValues.topControl=cmpVisiblity;
break;
case INDEX_4_SCRIPT:
this.slValues.topControl=cmpScript;
break;
case INDEX_5_HIGHLIGHT:
this.slValues.topControl=cmpHighlight;
break;
case INDEX_6_CALLBACK:
this.slValues.topControl=cmpCallback;
break;
case INDEX_7_TOOGLE_DATAPOINT:
this.slValues.topControl=cmpDPVisibility;
break;
default :
this.slValues.topControl=cmpDefault;
break;
}
grpValue.layout();
}","private void switchUI(){
switch (getTriggerIndex()) {
case INDEX_1_URL_REDIRECT:
    Trigger trigger=(Trigger)triggersMap.get(cmbTriggerType.getText());
  if (trigger == null || !(trigger.getAction().getValue() instanceof MultiURLValues)) {
    multiHyperlinksComposite.populateUIValues(MultiURLValuesImpl.create());
  }
 else {
    multiHyperlinksComposite.populateUIValues((MultiURLValues)trigger.getAction().getValue());
  }
this.slValues.topControl=multiHyperlinksComposite;
break;
case INDEX_2_TOOLTIP:
this.slValues.topControl=cmpTooltip;
break;
case INDEX_3_TOOGLE_VISABILITY:
this.slValues.topControl=cmpVisiblity;
break;
case INDEX_4_SCRIPT:
this.slValues.topControl=cmpScript;
break;
case INDEX_5_HIGHLIGHT:
this.slValues.topControl=cmpHighlight;
break;
case INDEX_6_CALLBACK:
this.slValues.topControl=cmpCallback;
break;
case INDEX_7_TOOGLE_DATAPOINT:
this.slValues.topControl=cmpDPVisibility;
break;
default :
this.slValues.topControl=cmpDefault;
break;
}
grpValue.layout();
}",0.8687830687830688
70560,"public void testLabelInstance() throws ScriptException {
  LabelContent labelContent=(LabelContent)reportContent.createLabelContent();
  ILabelInstance labelInstance=new LabelInstance(labelContent,null);
  labelInstance.setText(LABEL_TEXT);
  assertEquals(LABEL_TEXT,labelInstance.getText());
}","public void testLabelInstance() throws ScriptException {
  LabelContent labelContent=(LabelContent)reportContent.createLabelContent();
  ILabelInstance labelInstance=new LabelInstance(labelContent,null,null);
  labelInstance.setText(LABEL_TEXT);
  assertEquals(LABEL_TEXT,labelInstance.getText());
}",0.9915682967959528
70561,"public void testListInstance() throws ScriptException {
  ListContent listContent=(ListContent)reportContent.createListContent();
  new ListInstance(listContent,null);
}","public void testListInstance() throws ScriptException {
  ListContent listContent=(ListContent)reportContent.createListContent();
  new ListInstance(listContent,null,null);
}",0.9854227405247812
70562,"public void testImageInstance() throws ScriptException {
  ImageContent imageContent=(ImageContent)reportContent.createImageContent();
  IImageInstance imageInstance=new ImageInstance(imageContent,null);
  imageInstance.setAltText(ALT_TEXT);
  assertEquals(ALT_TEXT,imageInstance.getAltText());
  imageInstance.setAltTextKey(ALT_TEXT_KEY);
  assertEquals(ALT_TEXT_KEY,imageInstance.getAltTextKey());
  imageInstance.setData(DATA);
  assertEquals(DATA,imageInstance.getData());
  imageInstance.setImageName(IMAGE_NAME);
  assertEquals(IMAGE_NAME,imageInstance.getImageName());
  assertEquals(ImageItemDesign.IMAGE_NAME,imageInstance.getImageSource());
  imageInstance.setMimeType(MIME_TYPE);
  assertEquals(MIME_TYPE,imageInstance.getMimeType());
  imageInstance.setURL(IMAGE_URL);
  assertEquals(IImageContent.IMAGE_URL,imageInstance.getImageSource());
  assertEquals(IMAGE_URL,imageInstance.getURL());
  imageInstance.setFile(IMAGE_FILE);
  assertEquals(IImageContent.IMAGE_FILE,imageInstance.getImageSource());
  assertEquals(IMAGE_FILE,imageInstance.getFile());
}","public void testImageInstance() throws ScriptException {
  ImageContent imageContent=(ImageContent)reportContent.createImageContent();
  IImageInstance imageInstance=new ImageInstance(imageContent,null,null);
  imageInstance.setAltText(ALT_TEXT);
  assertEquals(ALT_TEXT,imageInstance.getAltText());
  imageInstance.setAltTextKey(ALT_TEXT_KEY);
  assertEquals(ALT_TEXT_KEY,imageInstance.getAltTextKey());
  imageInstance.setData(DATA);
  assertEquals(DATA,imageInstance.getData());
  imageInstance.setImageName(IMAGE_NAME);
  assertEquals(IMAGE_NAME,imageInstance.getImageName());
  assertEquals(ImageItemDesign.IMAGE_NAME,imageInstance.getImageSource());
  imageInstance.setMimeType(MIME_TYPE);
  assertEquals(MIME_TYPE,imageInstance.getMimeType());
  imageInstance.setURL(IMAGE_URL);
  assertEquals(IImageContent.IMAGE_URL,imageInstance.getImageSource());
  assertEquals(IMAGE_URL,imageInstance.getURL());
  imageInstance.setFile(IMAGE_FILE);
  assertEquals(IImageContent.IMAGE_FILE,imageInstance.getImageSource());
  assertEquals(IMAGE_FILE,imageInstance.getFile());
}",0.9976602714085168
70563,"public void testCellInstance() throws ScriptException {
  CellContent cellContent=(CellContent)reportContent.createCellContent();
  cellContent.setColumn(1);
  Map expressionMap=new HashMap();
  expressionMap.put(EXPRESSION,EXPRESSION_VALUE);
  ICellInstance cell=new CellInstance(cellContent,null,false);
  cell.setColSpan(COL_SPAN);
  assertEquals(COL_SPAN,cell.getColSpan());
}","public void testCellInstance() throws ScriptException {
  CellContent cellContent=(CellContent)reportContent.createCellContent();
  cellContent.setColumn(1);
  Map expressionMap=new HashMap();
  expressionMap.put(EXPRESSION,EXPRESSION_VALUE);
  ICellInstance cell=new CellInstance(cellContent,null,null,false);
  cell.setColSpan(COL_SPAN);
  assertEquals(COL_SPAN,cell.getColSpan());
}",0.9934640522875816
70564,"public void testDataItemInstance() throws ScriptException {
  DataContent dataItemContent=(DataContent)reportContent.createDataContent();
  DataItemDesign dataItemDesign=new DataItemDesign();
  DataItemHandle dataHandle=factory.newDataItem(""String_Node_Str"");
  dataItemDesign.setHandle(dataHandle);
  dataItemContent.setGenerateBy(dataItemDesign);
  IDataItemInstance dataItem=new DataItemInstance(dataItemContent,null);
  doTestReportElementInstance(dataItem);
}","public void testDataItemInstance() throws ScriptException {
  DataContent dataItemContent=(DataContent)reportContent.createDataContent();
  DataItemDesign dataItemDesign=new DataItemDesign();
  DataItemHandle dataHandle=factory.newDataItem(""String_Node_Str"");
  dataItemDesign.setHandle(dataHandle);
  dataItemContent.setGenerateBy(dataItemDesign);
  IDataItemInstance dataItem=new DataItemInstance(dataItemContent,null,null);
  doTestReportElementInstance(dataItem);
}",0.994640943193998
70565,"public void testScriptStyle() throws ScriptException {
  IStyle style=reportContent.createStyle();
  IScriptStyle styleInstance=new StyleInstance(style);
  styleInstance.setBackgroundAttachment(DesignChoiceConstants.BACKGROUND_ATTACHMENT_SCROLL);
  assertEquals(DesignChoiceConstants.BACKGROUND_ATTACHMENT_SCROLL,styleInstance.getBackgroundAttachment());
  styleInstance.setBackgroundColor(RED);
  assertEquals(RED,styleInstance.getBackgroundColor());
  styleInstance.setBackgroundImage(URI);
  assertEquals(URI,styleInstance.getBackgroundImage());
  styleInstance.setBackgroundPositionX(BACKGROUND_POS_X);
  assertEquals(BACKGROUND_POS_X,styleInstance.getBackgroundPositionX());
  styleInstance.setBackgroundPositionY(BACKGROUND_POS_Y);
  assertEquals(BACKGROUND_POS_Y,styleInstance.getBackgroundPositionY());
  styleInstance.setBackgroundRepeat(DesignChoiceConstants.BACKGROUND_REPEAT_REPEAT_X);
  assertEquals(DesignChoiceConstants.BACKGROUND_REPEAT_REPEAT_X,styleInstance.getBackgroundRepeat());
  styleInstance.setBorderBottomColor(BLUE);
  assertEquals(BLUE,styleInstance.getBorderBottomColor());
  styleInstance.setBorderBottomStyle(DesignChoiceConstants.LINE_STYLE_SOLID);
  assertEquals(DesignChoiceConstants.LINE_STYLE_SOLID,styleInstance.getBorderBottomStyle());
  styleInstance.setBorderBottomWidth(BORDER_BOTTOM_WIDTH);
  assertEquals(BORDER_BOTTOM_WIDTH,styleInstance.getBorderBottomWidth());
  styleInstance.setBorderLeftColor(GREEN);
  assertEquals(GREEN,styleInstance.getBorderLeftColor());
  styleInstance.setBorderLeftStyle(DesignChoiceConstants.LINE_STYLE_DOTTED);
  assertEquals(DesignChoiceConstants.LINE_STYLE_DOTTED,styleInstance.getBorderLeftStyle());
  styleInstance.setBorderLeftWidth(BORDER_LEFT_WIDTH);
  assertEquals(BORDER_LEFT_WIDTH,styleInstance.getBorderLeftWidth());
  styleInstance.setBorderRightColor(YELLOW);
  assertEquals(YELLOW,styleInstance.getBorderRightColor());
  styleInstance.setBorderRightStyle(DesignChoiceConstants.LINE_STYLE_DASHED);
  assertEquals(DesignChoiceConstants.LINE_STYLE_DASHED,styleInstance.getBorderRightStyle());
  styleInstance.setBorderRightWidth(BORDER_RIGHT_WIDTH);
  assertEquals(BORDER_RIGHT_WIDTH,styleInstance.getBorderRightWidth());
  styleInstance.setBorderTopColor(GRAY);
  assertEquals(GRAY,styleInstance.getBorderTopColor());
  styleInstance.setBorderTopStyle(DesignChoiceConstants.LINE_STYLE_DOUBLE);
  assertEquals(DesignChoiceConstants.LINE_STYLE_DOUBLE,styleInstance.getBorderTopStyle());
  styleInstance.setBorderTopWidth(BORDER_TOP_WIDTH);
  assertEquals(BORDER_TOP_WIDTH,styleInstance.getBorderTopWidth());
  styleInstance.setCanShrink(CAN_SHRINK);
  assertEquals(CAN_SHRINK,styleInstance.getCanShrink());
  styleInstance.setColor(WHITE);
  assertEquals(WHITE,styleInstance.getColor());
  styleInstance.setDateFormat(YY_MM_DD);
  assertEquals(YY_MM_DD,styleInstance.getDateFormat());
  styleInstance.setDisplay(DesignChoiceConstants.DISPLAY_INLINE);
  assertEquals(DesignChoiceConstants.DISPLAY_INLINE,styleInstance.getDisplay());
  styleInstance.setFontFamily(DesignChoiceConstants.FONT_FAMILY_SANS_SERIF);
  assertEquals(DesignChoiceConstants.FONT_FAMILY_SANS_SERIF,styleInstance.getFontFamily());
  styleInstance.setFontSize(DesignChoiceConstants.FONT_SIZE_LARGE);
  assertEquals(DesignChoiceConstants.FONT_SIZE_LARGE,styleInstance.getFontSize());
  styleInstance.setFontStyle(DesignChoiceConstants.FONT_STYLE_ITALIC);
  assertEquals(DesignChoiceConstants.FONT_STYLE_ITALIC,styleInstance.getFontStyle());
  styleInstance.setFontVariant(DesignChoiceConstants.FONT_VARIANT_SMALL_CAPS);
  assertEquals(DesignChoiceConstants.FONT_VARIANT_SMALL_CAPS,styleInstance.getFontVariant());
  styleInstance.setFontWeight(DesignChoiceConstants.FONT_WEIGHT_BOLD);
  assertEquals(DesignChoiceConstants.FONT_WEIGHT_BOLD,styleInstance.getFontWeight());
  styleInstance.setLetterSpacing(LETTER_SPACING);
  assertEquals(LETTER_SPACING,styleInstance.getLetterSpacing());
  styleInstance.setLineHeight(HEIGHT);
  assertEquals(HEIGHT,styleInstance.getLineHeight());
  styleInstance.setMarginBottom(MARGIN_BOTTOM);
  assertEquals(MARGIN_BOTTOM,styleInstance.getMarginBottom());
  styleInstance.setMarginLeft(MARGIN_LEFT);
  assertEquals(MARGIN_LEFT,styleInstance.getMarginLeft());
  styleInstance.setMarginRight(MARGIN_RIGHT);
  assertEquals(MARGIN_RIGHT,styleInstance.getMarginRight());
  styleInstance.setMarginTop(MARGIN_TOP);
  assertEquals(MARGIN_TOP,styleInstance.getMarginTop());
  styleInstance.setMasterPage(MASTER_PAGE);
  assertEquals(MASTER_PAGE,styleInstance.getMasterPage());
  styleInstance.setNumberFormat(DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY);
  assertEquals(DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY,styleInstance.getNumberFormat());
  styleInstance.setPaddingBottom(PADDING_BOTTOM);
  assertEquals(PADDING_BOTTOM,styleInstance.getPaddingBottom());
  styleInstance.setPaddingLeft(PADDING_LEFT);
  assertEquals(PADDING_LEFT,styleInstance.getPaddingLeft());
  styleInstance.setPaddingRight(PADDING_RIGHT);
  assertEquals(PADDING_RIGHT,styleInstance.getPaddingRight());
  styleInstance.setPaddingTop(PADDING_TOP);
  assertEquals(PADDING_TOP,styleInstance.getPaddingTop());
  styleInstance.setPageBreakAfter(DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS,styleInstance.getPageBreakAfter());
  styleInstance.setPageBreakBefore(DesignChoiceConstants.PAGE_BREAK_BEFORE_AVOID);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_BEFORE_AVOID,styleInstance.getPageBreakBefore());
  styleInstance.setShowIfBlank(SHOW_IF_BLANK);
  assertEquals(SHOW_IF_BLANK,styleInstance.getShowIfBlank());
  styleInstance.setStringFormat(DesignChoiceConstants.STRING_FORMAT_TYPE_ZIP_CODE);
  assertEquals(DesignChoiceConstants.STRING_FORMAT_TYPE_ZIP_CODE,styleInstance.getStringFormat());
  styleInstance.setTextAlign(DesignChoiceConstants.TEXT_ALIGN_RIGHT);
  assertEquals(DesignChoiceConstants.TEXT_ALIGN_RIGHT,styleInstance.getTextAlign());
  styleInstance.setTextIndent(TEXT_INDENT);
  assertEquals(TEXT_INDENT,styleInstance.getTextIndent());
  styleInstance.setTextLineThrough(DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH);
  assertEquals(DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH,styleInstance.getTextLineThrough());
  styleInstance.setTextOverline(DesignChoiceConstants.TEXT_OVERLINE_OVERLINE);
  assertEquals(DesignChoiceConstants.TEXT_OVERLINE_OVERLINE,styleInstance.getTextOverline());
  styleInstance.setTextTransform(DesignChoiceConstants.TRANSFORM_UPPERCASE);
  assertEquals(DesignChoiceConstants.TRANSFORM_UPPERCASE,styleInstance.getTextTransform());
  styleInstance.setTextUnderline(DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE);
  assertEquals(DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE,styleInstance.getTextUnderline());
  styleInstance.setVerticalAlign(DesignChoiceConstants.VERTICAL_ALIGN_TOP);
  assertEquals(DesignChoiceConstants.VERTICAL_ALIGN_TOP,styleInstance.getVerticalAlign());
  styleInstance.setVisibleFormat(DesignChoiceConstants.FORMAT_TYPE_ALL);
  assertEquals(DesignChoiceConstants.FORMAT_TYPE_ALL,styleInstance.getVisibleFormat());
  styleInstance.setWhiteSpace(DesignChoiceConstants.WHITE_SPACE_NOWRAP);
  assertEquals(DesignChoiceConstants.WHITE_SPACE_NOWRAP,styleInstance.getWhiteSpace());
  styleInstance.setWordSpacing(WORD_SPACING);
  assertEquals(WORD_SPACING,styleInstance.getWordSpacing());
}","public void testScriptStyle() throws ScriptException {
  IStyle style=reportContent.createStyle();
  IScriptStyle styleInstance=new StyleInstance(style,null);
  styleInstance.setBackgroundAttachment(DesignChoiceConstants.BACKGROUND_ATTACHMENT_SCROLL);
  assertEquals(DesignChoiceConstants.BACKGROUND_ATTACHMENT_SCROLL,styleInstance.getBackgroundAttachment());
  styleInstance.setBackgroundColor(RED);
  assertEquals(RED,styleInstance.getBackgroundColor());
  styleInstance.setBackgroundImage(URI);
  assertEquals(URI,styleInstance.getBackgroundImage());
  styleInstance.setBackgroundPositionX(BACKGROUND_POS_X);
  assertEquals(BACKGROUND_POS_X,styleInstance.getBackgroundPositionX());
  styleInstance.setBackgroundPositionY(BACKGROUND_POS_Y);
  assertEquals(BACKGROUND_POS_Y,styleInstance.getBackgroundPositionY());
  styleInstance.setBackgroundRepeat(DesignChoiceConstants.BACKGROUND_REPEAT_REPEAT_X);
  assertEquals(DesignChoiceConstants.BACKGROUND_REPEAT_REPEAT_X,styleInstance.getBackgroundRepeat());
  styleInstance.setBorderBottomColor(BLUE);
  assertEquals(BLUE,styleInstance.getBorderBottomColor());
  styleInstance.setBorderBottomStyle(DesignChoiceConstants.LINE_STYLE_SOLID);
  assertEquals(DesignChoiceConstants.LINE_STYLE_SOLID,styleInstance.getBorderBottomStyle());
  styleInstance.setBorderBottomWidth(BORDER_BOTTOM_WIDTH);
  assertEquals(BORDER_BOTTOM_WIDTH,styleInstance.getBorderBottomWidth());
  styleInstance.setBorderLeftColor(GREEN);
  assertEquals(GREEN,styleInstance.getBorderLeftColor());
  styleInstance.setBorderLeftStyle(DesignChoiceConstants.LINE_STYLE_DOTTED);
  assertEquals(DesignChoiceConstants.LINE_STYLE_DOTTED,styleInstance.getBorderLeftStyle());
  styleInstance.setBorderLeftWidth(BORDER_LEFT_WIDTH);
  assertEquals(BORDER_LEFT_WIDTH,styleInstance.getBorderLeftWidth());
  styleInstance.setBorderRightColor(YELLOW);
  assertEquals(YELLOW,styleInstance.getBorderRightColor());
  styleInstance.setBorderRightStyle(DesignChoiceConstants.LINE_STYLE_DASHED);
  assertEquals(DesignChoiceConstants.LINE_STYLE_DASHED,styleInstance.getBorderRightStyle());
  styleInstance.setBorderRightWidth(BORDER_RIGHT_WIDTH);
  assertEquals(BORDER_RIGHT_WIDTH,styleInstance.getBorderRightWidth());
  styleInstance.setBorderTopColor(GRAY);
  assertEquals(GRAY,styleInstance.getBorderTopColor());
  styleInstance.setBorderTopStyle(DesignChoiceConstants.LINE_STYLE_DOUBLE);
  assertEquals(DesignChoiceConstants.LINE_STYLE_DOUBLE,styleInstance.getBorderTopStyle());
  styleInstance.setBorderTopWidth(BORDER_TOP_WIDTH);
  assertEquals(BORDER_TOP_WIDTH,styleInstance.getBorderTopWidth());
  styleInstance.setCanShrink(CAN_SHRINK);
  assertEquals(CAN_SHRINK,styleInstance.getCanShrink());
  styleInstance.setColor(WHITE);
  assertEquals(WHITE,styleInstance.getColor());
  styleInstance.setDateFormat(YY_MM_DD);
  assertEquals(YY_MM_DD,styleInstance.getDateFormat());
  styleInstance.setDisplay(DesignChoiceConstants.DISPLAY_INLINE);
  assertEquals(DesignChoiceConstants.DISPLAY_INLINE,styleInstance.getDisplay());
  styleInstance.setFontFamily(DesignChoiceConstants.FONT_FAMILY_SANS_SERIF);
  assertEquals(DesignChoiceConstants.FONT_FAMILY_SANS_SERIF,styleInstance.getFontFamily());
  styleInstance.setFontSize(DesignChoiceConstants.FONT_SIZE_LARGE);
  assertEquals(DesignChoiceConstants.FONT_SIZE_LARGE,styleInstance.getFontSize());
  styleInstance.setFontStyle(DesignChoiceConstants.FONT_STYLE_ITALIC);
  assertEquals(DesignChoiceConstants.FONT_STYLE_ITALIC,styleInstance.getFontStyle());
  styleInstance.setFontVariant(DesignChoiceConstants.FONT_VARIANT_SMALL_CAPS);
  assertEquals(DesignChoiceConstants.FONT_VARIANT_SMALL_CAPS,styleInstance.getFontVariant());
  styleInstance.setFontWeight(DesignChoiceConstants.FONT_WEIGHT_BOLD);
  assertEquals(DesignChoiceConstants.FONT_WEIGHT_BOLD,styleInstance.getFontWeight());
  styleInstance.setLetterSpacing(LETTER_SPACING);
  assertEquals(LETTER_SPACING,styleInstance.getLetterSpacing());
  styleInstance.setLineHeight(HEIGHT);
  assertEquals(HEIGHT,styleInstance.getLineHeight());
  styleInstance.setMarginBottom(MARGIN_BOTTOM);
  assertEquals(MARGIN_BOTTOM,styleInstance.getMarginBottom());
  styleInstance.setMarginLeft(MARGIN_LEFT);
  assertEquals(MARGIN_LEFT,styleInstance.getMarginLeft());
  styleInstance.setMarginRight(MARGIN_RIGHT);
  assertEquals(MARGIN_RIGHT,styleInstance.getMarginRight());
  styleInstance.setMarginTop(MARGIN_TOP);
  assertEquals(MARGIN_TOP,styleInstance.getMarginTop());
  styleInstance.setMasterPage(MASTER_PAGE);
  assertEquals(MASTER_PAGE,styleInstance.getMasterPage());
  styleInstance.setNumberFormat(DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY);
  assertEquals(DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY,styleInstance.getNumberFormat());
  styleInstance.setPaddingBottom(PADDING_BOTTOM);
  assertEquals(PADDING_BOTTOM,styleInstance.getPaddingBottom());
  styleInstance.setPaddingLeft(PADDING_LEFT);
  assertEquals(PADDING_LEFT,styleInstance.getPaddingLeft());
  styleInstance.setPaddingRight(PADDING_RIGHT);
  assertEquals(PADDING_RIGHT,styleInstance.getPaddingRight());
  styleInstance.setPaddingTop(PADDING_TOP);
  assertEquals(PADDING_TOP,styleInstance.getPaddingTop());
  styleInstance.setPageBreakAfter(DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_AFTER_ALWAYS,styleInstance.getPageBreakAfter());
  styleInstance.setPageBreakBefore(DesignChoiceConstants.PAGE_BREAK_BEFORE_AVOID);
  assertEquals(DesignChoiceConstants.PAGE_BREAK_BEFORE_AVOID,styleInstance.getPageBreakBefore());
  styleInstance.setShowIfBlank(SHOW_IF_BLANK);
  assertEquals(SHOW_IF_BLANK,styleInstance.getShowIfBlank());
  styleInstance.setStringFormat(DesignChoiceConstants.STRING_FORMAT_TYPE_ZIP_CODE);
  assertEquals(DesignChoiceConstants.STRING_FORMAT_TYPE_ZIP_CODE,styleInstance.getStringFormat());
  styleInstance.setTextAlign(DesignChoiceConstants.TEXT_ALIGN_RIGHT);
  assertEquals(DesignChoiceConstants.TEXT_ALIGN_RIGHT,styleInstance.getTextAlign());
  styleInstance.setTextIndent(TEXT_INDENT);
  assertEquals(TEXT_INDENT,styleInstance.getTextIndent());
  styleInstance.setTextLineThrough(DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH);
  assertEquals(DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH,styleInstance.getTextLineThrough());
  styleInstance.setTextOverline(DesignChoiceConstants.TEXT_OVERLINE_OVERLINE);
  assertEquals(DesignChoiceConstants.TEXT_OVERLINE_OVERLINE,styleInstance.getTextOverline());
  styleInstance.setTextTransform(DesignChoiceConstants.TRANSFORM_UPPERCASE);
  assertEquals(DesignChoiceConstants.TRANSFORM_UPPERCASE,styleInstance.getTextTransform());
  styleInstance.setTextUnderline(DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE);
  assertEquals(DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE,styleInstance.getTextUnderline());
  styleInstance.setVerticalAlign(DesignChoiceConstants.VERTICAL_ALIGN_TOP);
  assertEquals(DesignChoiceConstants.VERTICAL_ALIGN_TOP,styleInstance.getVerticalAlign());
  styleInstance.setVisibleFormat(DesignChoiceConstants.FORMAT_TYPE_ALL);
  assertEquals(DesignChoiceConstants.FORMAT_TYPE_ALL,styleInstance.getVisibleFormat());
  styleInstance.setWhiteSpace(DesignChoiceConstants.WHITE_SPACE_NOWRAP);
  assertEquals(DesignChoiceConstants.WHITE_SPACE_NOWRAP,styleInstance.getWhiteSpace());
  styleInstance.setWordSpacing(WORD_SPACING);
  assertEquals(WORD_SPACING,styleInstance.getWordSpacing());
}",0.9996620936676354
70566,"public void testDynamicTextInstance() throws ScriptException {
  ForeignContent foreignContent=(ForeignContent)reportContent.createForeignContent();
  foreignContent.setRawType(IForeignContent.TEXT_TYPE);
  IDynamicTextInstance textInstance=new DynamicTextInstance(foreignContent,null);
  textInstance.setText(DYNAMIC_TEXT);
  assertEquals(DYNAMIC_TEXT,textInstance.getText());
}","public void testDynamicTextInstance() throws ScriptException {
  ForeignContent foreignContent=(ForeignContent)reportContent.createForeignContent();
  foreignContent.setRawType(IForeignContent.TEXT_TYPE);
  IDynamicTextInstance textInstance=new DynamicTextInstance(foreignContent,null,null);
  textInstance.setText(DYNAMIC_TEXT);
  assertEquals(DYNAMIC_TEXT,textInstance.getText());
}",0.9934469200524246
70567,"public void testRowInstance() throws ScriptException {
  RowContent rowContent=(RowContent)reportContent.createRowContent();
  Map expressionMap=new HashMap();
  expressionMap.put(EXPRESSION,EXPRESSION_VALUE);
  IRowInstance rowInstance=new RowInstance(rowContent,null);
  rowInstance.setBookmark(BOOKMARK);
  assertEquals(BOOKMARK,rowInstance.getBookmarkValue());
  rowInstance.setHeight(HEIGHT);
  assertEquals(HEIGHT,rowInstance.getHeight());
}","public void testRowInstance() throws ScriptException {
  RowContent rowContent=(RowContent)reportContent.createRowContent();
  Map expressionMap=new HashMap();
  expressionMap.put(EXPRESSION,EXPRESSION_VALUE);
  IRowInstance rowInstance=new RowInstance(rowContent,null,null);
  rowInstance.setBookmark(BOOKMARK);
  assertEquals(BOOKMARK,rowInstance.getBookmarkValue());
  rowInstance.setHeight(HEIGHT);
  assertEquals(HEIGHT,rowInstance.getHeight());
}",0.9944382647385984
70568,"public void testGridInstance() throws ScriptException {
  TableContent content=(TableContent)reportContent.createTableContent();
  new GridInstance(content,null);
}","public void testGridInstance() throws ScriptException {
  TableContent content=(TableContent)reportContent.createTableContent();
  new GridInstance(content,null,null);
}",0.984984984984985
70569,"/** 
 * This constructor supports shape definition via an elliptical arc
 * @param oSource
 * @param boEllipse
 * @param dStart
 * @param dExtent
 * @param iArcType
 * @param ac
 */
RegionAction(StructureSource oSource,Bounds boEllipse,double dStart,double dExtent,boolean bSector,Action ac,double dTranslateX,double dTranslateY,double dScale,Region clipping){
  _oSource=oSource;
  boEllipse=BoundsImpl.copyInstance(boEllipse);
  boEllipse.translate(dTranslateX,dTranslateY);
  boEllipse.scale(dScale);
  double x=boEllipse.getLeft();
  double y=boEllipse.getTop();
  double width=boEllipse.getWidth();
  double height=boEllipse.getHeight();
  Path ph=new Path(Display.getDefault());
  ph.addArc((float)x,(float)y,(float)width,(float)height,(float)dStart,(float)dExtent);
  if (bSector) {
    ph.lineTo((float)(x + width / 2),(float)(y + height / 2));
  }
  ph.close();
  if (clipping != null) {
  }
  _ac=ac;
  float[] b=new float[4];
  ph.getBounds(b);
  _bb=new Rectangle((int)b[0],(int)b[1],(int)b[2],(int)b[3]);
  ph.dispose();
}","/** 
 * This constructor supports shape definition via an elliptical arc
 * @param oSource
 * @param boEllipse
 * @param dStart
 * @param dExtent
 * @param iArcType
 * @param ac
 */
RegionAction(StructureSource oSource,Bounds boEllipse,double dStart,double dExtent,boolean bSector,Action ac,double dTranslateX,double dTranslateY,double dScale,Region clipping){
  _oSource=oSource;
  boEllipse=boEllipse.copyInstance();
  boEllipse.translate(dTranslateX,dTranslateY);
  boEllipse.scale(dScale);
  double x=boEllipse.getLeft();
  double y=boEllipse.getTop();
  double width=boEllipse.getWidth();
  double height=boEllipse.getHeight();
  Path ph=new Path(Display.getDefault());
  ph.addArc((float)x,(float)y,(float)width,(float)height,(float)dStart,(float)dExtent);
  if (bSector) {
    ph.lineTo((float)(x + width / 2),(float)(y + height / 2));
  }
  ph.close();
  if (clipping != null) {
  }
  _ac=ac;
  float[] b=new float[4];
  ph.getBounds(b);
  _bb=new Rectangle((int)b[0],(int)b[1],(int)b[2],(int)b[3]);
  ph.dispose();
}",0.9864077669902912
70570,"public void drawText(TextRenderEvent tre) throws ChartException {
  String fontName=convertFont(tre.getLabel().getCaption().getFont().getName());
  if (fontName != null) {
    tre.getLabel().getCaption().getFont().setName(fontName);
  }
  iv.modifyEvent(tre);
  if (!tre.getLabel().isVisible())   return;
switch (tre.getAction()) {
case TextRenderEvent.UNDEFINED:
    throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
case TextRenderEvent.RENDER_SHADOW_AT_LOCATION:
  Location lo=LocationImpl.copyInstance(tre.getLocation());
lo.translate(dTranslateX,dTranslateY);
lo.scale(dScale);
_tr.renderShadowAtLocation(this,tre.getTextPosition(),lo,tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_AT_LOCATION:
lo=LocationImpl.copyInstance(tre.getLocation());
lo.translate(dTranslateX,dTranslateY);
lo.scale(dScale);
_tr.renderTextAtLocation(this,tre.getTextPosition(),lo,tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_IN_BLOCK:
final Bounds bo=BoundsImpl.copyInstance(tre.getBlockBounds());
bo.translate(dTranslateX,dTranslateY);
bo.scale(dScale);
_tr.renderTextInBlock(this,bo,tre.getBlockAlignment(),tre.getLabel());
break;
}
}","public void drawText(TextRenderEvent tre) throws ChartException {
  String fontName=convertFont(tre.getLabel().getCaption().getFont().getName());
  if (fontName != null) {
    tre.getLabel().getCaption().getFont().setName(fontName);
  }
  iv.modifyEvent(tre);
  if (!tre.getLabel().isVisible())   return;
switch (tre.getAction()) {
case TextRenderEvent.UNDEFINED:
    throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
case TextRenderEvent.RENDER_SHADOW_AT_LOCATION:
  Location lo=tre.getLocation().copyInstance();
lo.translate(dTranslateX,dTranslateY);
lo.scale(dScale);
_tr.renderShadowAtLocation(this,tre.getTextPosition(),lo,tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_AT_LOCATION:
lo=tre.getLocation().copyInstance();
lo.translate(dTranslateX,dTranslateY);
lo.scale(dScale);
_tr.renderTextAtLocation(this,tre.getTextPosition(),lo,tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_IN_BLOCK:
final Bounds bo=tre.getBlockBounds().copyInstance();
bo.translate(dTranslateX,dTranslateY);
bo.scale(dScale);
_tr.renderTextInBlock(this,bo,tre.getBlockAlignment(),tre.getLabel());
break;
}
}",0.9462809917355371
70571,"/** 
 * @param rotation
 * @param lightDirection
 * @param viewerWidth
 * @param viewerHeight
 */
public Engine3D(Rotation3D rotation,Vector lightDirection,double viewerWidth,double viewerHeight){
  dViewerWidth=viewerWidth;
  dViewerHeight=viewerHeight;
  ROT=Rotation3DImpl.copyInstance(rotation);
  LDR=new Vector(lightDirection);
  reset();
}","/** 
 * @param rotation
 * @param lightDirection
 * @param viewerWidth
 * @param viewerHeight
 */
public Engine3D(Rotation3D rotation,Vector lightDirection,double viewerWidth,double viewerHeight){
  dViewerWidth=viewerWidth;
  dViewerHeight=viewerHeight;
  ROT=rotation.copyInstance();
  LDR=new Vector(lightDirection);
  reset();
}",0.9557522123893806
70572,"private static Size getTitleSize(LegendData lgData) throws ChartException {
  Size size=null;
  LabelLimiter lbLimit=null;
  Label laTitle=lgData.lg.getTitle();
  if (laTitle != null && laTitle.isSetVisible() && laTitle.isVisible()) {
    laTitle=LabelImpl.copyInstance(laTitle);
    String sTitle=laTitle.getCaption().getValue();
    laTitle.getCaption().setValue(lgData.rtc.externalizedMessage(sTitle));
    int iTitlePos=lgData.lg.getTitlePosition().getValue();
    double shadow=lgData.dShadowness;
    double space=2 * shadow;
    double percent=lgData.lg.getTitlePercent();
    double dMaxTWidth, dMaxTHeight;
    if (iTitlePos == Position.ABOVE || iTitlePos == Position.BELOW) {
      dMaxTWidth=lgData.dAvailableWidth - shadow;
      dMaxTHeight=lgData.dAvailableHeight * percent - space;
    }
 else {
      dMaxTWidth=lgData.dAvailableWidth * percent - space;
      dMaxTHeight=lgData.dAvailableHeight - shadow;
    }
    lbLimit=new LabelLimiter(dMaxTWidth,dMaxTHeight,0);
    lbLimit.computeWrapping(lgData.xs,laTitle);
    lbLimit=lbLimit.limitLabelSize(lgData.xs,laTitle);
    size=SizeImpl.create(lbLimit.getMaxWidth() + space,lbLimit.getMaxHeight() + space);
    if (iTitlePos == Position.ABOVE || iTitlePos == Position.BELOW) {
      lgData.dAvailableHeight-=size.getHeight();
    }
 else {
      lgData.dAvailableWidth-=size.getWidth();
    }
  }
  lgData.laTitle=laTitle;
  return size;
}","private static Size getTitleSize(LegendData lgData) throws ChartException {
  Size size=null;
  LabelLimiter lbLimit=null;
  Label laTitle=lgData.lg.getTitle();
  if (laTitle != null && laTitle.isSetVisible() && laTitle.isVisible()) {
    laTitle=laTitle.copyInstance();
    String sTitle=laTitle.getCaption().getValue();
    laTitle.getCaption().setValue(lgData.rtc.externalizedMessage(sTitle));
    int iTitlePos=lgData.lg.getTitlePosition().getValue();
    double shadow=lgData.dShadowness;
    double space=2 * shadow;
    double percent=lgData.lg.getTitlePercent();
    double dMaxTWidth, dMaxTHeight;
    if (iTitlePos == Position.ABOVE || iTitlePos == Position.BELOW) {
      dMaxTWidth=lgData.dAvailableWidth - shadow;
      dMaxTHeight=lgData.dAvailableHeight * percent - space;
    }
 else {
      dMaxTWidth=lgData.dAvailableWidth * percent - space;
      dMaxTHeight=lgData.dAvailableHeight - shadow;
    }
    lbLimit=new LabelLimiter(dMaxTWidth,dMaxTHeight,0);
    lbLimit.computeWrapping(lgData.xs,laTitle);
    lbLimit=lbLimit.limitLabelSize(lgData.xs,laTitle);
    size=SizeImpl.create(lbLimit.getMaxWidth() + space,lbLimit.getMaxHeight() + space);
    if (iTitlePos == Position.ABOVE || iTitlePos == Position.BELOW) {
      lgData.dAvailableHeight-=size.getHeight();
    }
 else {
      lgData.dAvailableWidth-=size.getWidth();
    }
  }
  lgData.laTitle=laTitle;
  return size;
}",0.9918003565062388
70573,"private void checkValueLabel(LegendItemHints lih){
  if (sed != lih.getSeriesDefinition()) {
    if (laiValue != null) {
      laiValue.dispose();
    }
    Series series=lih.getSeriesDefinition().getSeries().get(0);
    Label laValue=LabelImpl.copyInstance(series.getLabel());
    laValue.setEllipsis(1);
    this.laiValue=new LabelItem(lgData.xs,lgData.rtc,laValue,lgData.maxWrappingSize);
  }
}","private void checkValueLabel(LegendItemHints lih){
  if (sed != lih.getSeriesDefinition()) {
    if (laiValue != null) {
      laiValue.dispose();
    }
    Series series=lih.getSeriesDefinition().getSeries().get(0);
    Label laValue=series.getLabel().copyInstance();
    laValue.setEllipsis(1);
    this.laiValue=new LabelItem(lgData.xs,lgData.rtc,laValue,lgData.maxWrappingSize);
  }
}",0.9579617834394905
70574,"public LegendData(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc){
  this.xs=xs;
  this.cm=cm;
  this.lg=cm.getLegend();
  this.seda=seda;
  this.rtc=rtc;
  this.bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
  this.la=LabelImpl.create();
  la.setEllipsis(lg.isSetEllipsis() ? lg.getEllipsis() : 1);
  la.setCaption(TextImpl.copyInstance(lg.getText()));
  la.getCaption().setValue(""String_Node_Str"");
  ITextMetrics itm=xs.getTextMetrics(la);
  this.dItemHeight=itm.getFullHeight();
  itm.dispose();
  ClientArea ca=lg.getClientArea();
  dSeparatorThickness=lg.getSeparator() != null ? lg.getSeparator().getThickness() : ca.getOutline().getThickness();
  dScale=xs.getDpiResolution() / 72d;
  insCa=ca.getInsets().scaledInstance(dScale);
  maxWrappingSize=lg.getWrappingSize() * dScale;
  dHorizontalSpacing=3 * dScale;
  dVerticalSpacing=3 * dScale;
  dSafeSpacing=3 * dScale;
  this.dShadowness=3 * dScale;
  dHorizonalReservedSpace=insCa.getLeft() + insCa.getRight() + 1.5 * dItemHeight + dHorizontalSpacing;
}","public LegendData(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc){
  this.xs=xs;
  this.cm=cm;
  this.lg=cm.getLegend();
  this.seda=seda;
  this.rtc=rtc;
  this.bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
  this.la=LabelImpl.create();
  la.setEllipsis(lg.isSetEllipsis() ? lg.getEllipsis() : 1);
  la.setCaption(lg.getText().copyInstance());
  la.getCaption().setValue(""String_Node_Str"");
  ITextMetrics itm=xs.getTextMetrics(la);
  this.dItemHeight=itm.getFullHeight();
  itm.dispose();
  ClientArea ca=lg.getClientArea();
  dSeparatorThickness=lg.getSeparator() != null ? lg.getSeparator().getThickness() : ca.getOutline().getThickness();
  dScale=xs.getDpiResolution() / 72d;
  insCa=ca.getInsets().scaledInstance(dScale);
  maxWrappingSize=lg.getWrappingSize() * dScale;
  dHorizontalSpacing=3 * dScale;
  dVerticalSpacing=3 * dScale;
  dSafeSpacing=3 * dScale;
  this.dShadowness=3 * dScale;
  dHorizonalReservedSpace=insCa.getLeft() + insCa.getRight() + 1.5 * dItemHeight + dHorizontalSpacing;
}",0.9887218045112782
70575,"/** 
 * copy constructor
 * @param original
 */
public static LabelItem copyOf(LabelItem original){
  return new LabelItem(original.xs,original.rtc,LabelImpl.copyInstance(original.la),original.maxWrappingSize);
}","/** 
 * copy constructor
 * @param original
 */
public static LabelItem copyOf(LabelItem original){
  return new LabelItem(original.xs,original.rtc,original.la.copyInstance(),original.maxWrappingSize);
}",0.9253012048192772
70576,"/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  bo.adjust(insCA);
  double dX=bo.getLeft();
  double dY=bo.getTop();
  double dW=bo.getWidth();
  double dH=bo.getHeight();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  boPlot=bo;
  if (bo.getWidth() <= 0 || bo.getHeight() <= 0) {
    return;
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getSharedScale() != null) {
      dsi=rtc.getSharedScale().createDataSetIterator(iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,BoundsImpl.create(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}","/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  bo.adjust(insCA);
  double dX=bo.getLeft();
  double dY=bo.getTop();
  double dW=bo.getWidth();
  double dH=bo.getHeight();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  boPlot=bo;
  if (bo.getWidth() <= 0 || bo.getHeight() <= 0) {
    return;
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getSharedScale() != null) {
      dsi=rtc.getSharedScale().createDataSetIterator(iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,BoundsImpl.create(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=boPlotBackground.copyInstance();
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}",0.9953330504879084
70577,"/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)cwa).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)cwa).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Scale scModel;
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<?,?> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    scModel=axaOrthogonal[j].getScale();
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,scModel,axaOrthogonal[j].getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=(LegendItemRenderingHints)seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight();
        double maxWidth=boPlot.getWidth() * AXIS_TITLE_PERCENT;
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
        dAxisTitleThickness=lbLimit.getMaxWidth();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan() * dPointToPixel;
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight() * AXIS_TITLE_PERCENT;
        double maxWidth=boPlot.getWidth();
        Label laAxisTitleV=aax.getPrimaryOrthogonal().getTitle();
        if (laAxisTitleV.isVisible()) {
          laAxisTitleV=LabelImpl.copyInstance(laAxisTitleV);
          laAxisTitleV.getCaption().setValue(rtc.externalizedMessage(laAxisTitleV.getCaption().getValue()));
          LabelLimiter lbLimitV=new LabelLimiter(boPlot.getWidth() * AXIS_TITLE_PERCENT,boPlot.getWidth(),0);
          lbLimitV.computeWrapping(ids,laAxisTitleV);
          lbLimitV.limitLabelSize(ids,laAxisTitleV);
          maxWidth-=lbLimitV.getMaxWidth();
        }
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
        dAxisTitleThickness=lbLimit.getMaxHeight();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan() * dPointToPixel;
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}","/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)cwa).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)cwa).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Scale scModel;
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<?,?> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    scModel=axaOrthogonal[j].getScale();
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,scModel,axaOrthogonal[j].getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=(LegendItemRenderingHints)seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight();
        double maxWidth=boPlot.getWidth() * AXIS_TITLE_PERCENT;
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
        dAxisTitleThickness=lbLimit.getMaxWidth();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan() * dPointToPixel;
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight() * AXIS_TITLE_PERCENT;
        double maxWidth=boPlot.getWidth();
        Label laAxisTitleV=aax.getPrimaryOrthogonal().getTitle();
        if (laAxisTitleV.isVisible()) {
          laAxisTitleV=laAxisTitleV.copyInstance();
          laAxisTitleV.getCaption().setValue(rtc.externalizedMessage(laAxisTitleV.getCaption().getValue()));
          LabelLimiter lbLimitV=new LabelLimiter(boPlot.getWidth() * AXIS_TITLE_PERCENT,boPlot.getWidth(),0);
          lbLimitV.computeWrapping(ids,laAxisTitleV);
          lbLimitV.limitLabelSize(ids,laAxisTitleV);
          maxWidth-=lbLimitV.getMaxWidth();
        }
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
        dAxisTitleThickness=lbLimit.getMaxHeight();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan() * dPointToPixel;
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}",0.9985969984269376
70578,"public Rectangle getAxisLabelBoundingRectXZ(OneAxis oax) throws ChartException {
  AxisLabelCanvasLocationProvider lProvider=new HAxisLabelCanvasLocationProvider(getPWA3D(),oax);
  AutoScale sc=oax.getScale();
  boolean bTextAxis=(sc.getType() & IConstants.TEXT) == IConstants.TEXT || sc.isCategoryScale();
  AxisTickCoordinates da=oax.getScale().getTickCordinates();
  final int length=bTextAxis ? da.size() - 1 : da.size();
  int iLabelLocation=oax.getLabelPosition();
  Label la=LabelImpl.copyInstance(oax.getLabel());
  AxisLabelTextProvider textProvider=AxisLabelTextProvider.create(oax);
  Rectangle rect=null;
  for (int i=0; i < length; i++) {
    if (sc.isTickLabelVisible(i)) {
      Location[] lo=lProvider.getLocation(i);
      String str=textProvider.getLabelText(i);
      la.getCaption().setValue(str);
      BoundingBox bb=Methods.computeBox(ids,iLabelLocation,la,lo[0].getX(),lo[0].getY());
      if (rect == null) {
        rect=new Rectangle(bb);
      }
 else {
        rect.union(new Rectangle(bb));
      }
    }
  }
  return rect;
}","public Rectangle getAxisLabelBoundingRectXZ(OneAxis oax) throws ChartException {
  AxisLabelCanvasLocationProvider lProvider=new HAxisLabelCanvasLocationProvider(getPWA3D(),oax);
  AutoScale sc=oax.getScale();
  boolean bTextAxis=(sc.getType() & IConstants.TEXT) == IConstants.TEXT || sc.isCategoryScale();
  AxisTickCoordinates da=oax.getScale().getTickCordinates();
  final int length=bTextAxis ? da.size() - 1 : da.size();
  int iLabelLocation=oax.getLabelPosition();
  Label la=oax.getLabel().copyInstance();
  AxisLabelTextProvider textProvider=AxisLabelTextProvider.create(oax);
  Rectangle rect=null;
  for (int i=0; i < length; i++) {
    if (sc.isTickLabelVisible(i)) {
      Location[] lo=lProvider.getLocation(i);
      String str=textProvider.getLabelText(i);
      la.getCaption().setValue(str);
      BoundingBox bb=Methods.computeBox(ids,iLabelLocation,la,lo[0].getX(),lo[0].getY());
      if (rect == null) {
        rect=new Rectangle(bb);
      }
 else {
        rect.union(new Rectangle(bb));
      }
    }
  }
  return rect;
}",0.9823893384102808
70579,"public Rectangle[] getAxisLabelBoundingRectY(OneAxis oax) throws ChartException {
  AxisLabelCanvasLocationProvider lProvider=new VAxisLabelCanvasLocationProvider(getPWA3D(),oax);
  AutoScale sc=oax.getScale();
  boolean bTextAxis=(sc.getType() & IConstants.TEXT) == IConstants.TEXT || sc.isCategoryScale();
  AxisTickCoordinates da=oax.getScale().getTickCordinates();
  final int length=bTextAxis ? da.size() - 1 : da.size();
  Label la=LabelImpl.copyInstance(oax.getLabel());
  AxisLabelTextProvider textProvider=AxisLabelTextProvider.create(oax);
  Rectangle[] rect={null,null};
  for (int i=0; i < length; i++) {
    if (sc.isTickLabelVisible(i)) {
      Location[] lo=lProvider.getLocation(i);
      String str=textProvider.getLabelText(i);
      la.getCaption().setValue(str);
      BoundingBox bb0=Methods.computeBox(ids,TextRenderEvent.LEFT,la,lo[0].getX(),lo[0].getY());
      BoundingBox bb1=Methods.computeBox(ids,TextRenderEvent.RIGHT,la,lo[1].getX(),lo[1].getY());
      if (rect[0] == null) {
        rect[0]=new Rectangle(bb0);
        rect[1]=new Rectangle(bb1);
      }
 else {
        rect[0].union(new Rectangle(bb0));
        rect[1].union(new Rectangle(bb1));
      }
    }
  }
  return rect;
}","public Rectangle[] getAxisLabelBoundingRectY(OneAxis oax) throws ChartException {
  AxisLabelCanvasLocationProvider lProvider=new VAxisLabelCanvasLocationProvider(getPWA3D(),oax);
  AutoScale sc=oax.getScale();
  boolean bTextAxis=(sc.getType() & IConstants.TEXT) == IConstants.TEXT || sc.isCategoryScale();
  AxisTickCoordinates da=oax.getScale().getTickCordinates();
  final int length=bTextAxis ? da.size() - 1 : da.size();
  Label la=oax.getLabel().copyInstance();
  AxisLabelTextProvider textProvider=AxisLabelTextProvider.create(oax);
  Rectangle[] rect={null,null};
  for (int i=0; i < length; i++) {
    if (sc.isTickLabelVisible(i)) {
      Location[] lo=lProvider.getLocation(i);
      String str=textProvider.getLabelText(i);
      la.getCaption().setValue(str);
      BoundingBox bb0=Methods.computeBox(ids,TextRenderEvent.LEFT,la,lo[0].getX(),lo[0].getY());
      BoundingBox bb1=Methods.computeBox(ids,TextRenderEvent.RIGHT,la,lo[1].getX(),lo[1].getY());
      if (rect[0] == null) {
        rect[0]=new Rectangle(bb0);
        rect[1]=new Rectangle(bb1);
      }
 else {
        rect[0].union(new Rectangle(bb0));
        rect[1].union(new Rectangle(bb1));
      }
    }
  }
  return rect;
}",0.9847170590665014
70580,"public Bounds getAdjustedPlotBounds(boolean refresh){
  if (!refresh && cachedAdjustedBounds != null) {
    return cachedAdjustedBounds;
  }
  final Bounds bo=getPlotBounds().adjustedInstance(getPlotInsets());
  double h, w;
  Label la;
  la=LabelImpl.copyInstance(aax.getPrimaryBase().getLabel());
  la.getCaption().setValue(""String_Node_Str"");
  h=computeHeight(ids,la);
  la=LabelImpl.copyInstance(aax.getAncillaryBase().getLabel());
  la.getCaption().setValue(""String_Node_Str"");
  h=Math.max(h,computeHeight(ids,la));
  la=LabelImpl.copyInstance(aax.getPrimaryOrthogonal().getLabel());
  la.getCaption().setValue(""String_Node_Str"");
  w=computeWidth(ids,la);
  bo.adjust(InsetsImpl.create(0,0,h,w));
  cachedAdjustedBounds=bo;
  return bo;
}","public Bounds getAdjustedPlotBounds(boolean refresh){
  if (!refresh && cachedAdjustedBounds != null) {
    return cachedAdjustedBounds;
  }
  final Bounds bo=getPlotBounds().adjustedInstance(getPlotInsets());
  double h, w;
  Label la;
  la=aax.getPrimaryBase().getLabel().copyInstance();
  la.getCaption().setValue(""String_Node_Str"");
  h=computeHeight(ids,la);
  la=aax.getAncillaryBase().getLabel().copyInstance();
  la.getCaption().setValue(""String_Node_Str"");
  h=Math.max(h,computeHeight(ids,la));
  la=aax.getPrimaryOrthogonal().getLabel().copyInstance();
  la.getCaption().setValue(""String_Node_Str"");
  w=computeWidth(ids,la);
  bo.adjust(InsetsImpl.create(0,0,h,w));
  cachedAdjustedBounds=bo;
  return bo;
}",0.8641638225255973
70581,"/** 
 * @param se
 * @return
 * @throws IllegalArgumentException
 */
public final Label getLabelAttributes(Series se) throws IllegalArgumentException {
  return LabelImpl.copyInstance(se.getLabel());
}","/** 
 * @param se
 * @return
 * @throws IllegalArgumentException
 */
public final Label getLabelAttributes(Series se) throws IllegalArgumentException {
  return se.getLabel().copyInstance();
}",0.9363867684478372
70582,"/** 
 * @param bReduceByInsets
 * @return
 */
public final Bounds getClientAreaBounds(boolean bReduceByInsets){
  final Bounds boClientArea=BoundsImpl.copyInstance(pwa.getPlotBounds());
  if (bReduceByInsets) {
    boClientArea.adjust(pwa.getPlotInsets());
  }
  return boClientArea;
}","/** 
 * @param bReduceByInsets
 * @return
 */
public final Bounds getClientAreaBounds(boolean bReduceByInsets){
  final Bounds boClientArea=pwa.getPlotBounds().copyInstance();
  if (bReduceByInsets) {
    boClientArea.adjust(pwa.getPlotInsets());
  }
  return boClientArea;
}",0.9321428571428572
70583,"/** 
 * @param se
 * @return
 * @throws IllegalArgumentException
 */
public final Label getLabelAttributes(Series se) throws IllegalArgumentException {
  return LabelImpl.copyInstance(se.getLabel());
}","/** 
 * @param se
 * @return
 * @throws IllegalArgumentException
 */
public final Label getLabelAttributes(Series se) throws IllegalArgumentException {
  return se.getLabel().copyInstance();
}",0.9363867684478372
70584,"/** 
 * @param bReduceByInsets
 * @return
 */
public final Bounds getClientAreaBounds(boolean bReduceByInsets){
  final Bounds boClientArea=BoundsImpl.copyInstance(pwa.getPlotBounds());
  if (bReduceByInsets) {
    boClientArea.adjust(pwa.getPlotInsets());
  }
  return boClientArea;
}","/** 
 * @param bReduceByInsets
 * @return
 */
public final Bounds getClientAreaBounds(boolean bReduceByInsets){
  final Bounds boClientArea=pwa.getPlotBounds().copyInstance();
  if (bReduceByInsets) {
    boClientArea.adjust(pwa.getPlotInsets());
  }
  return boClientArea;
}",0.9321428571428572
70585,"public Bounds getClientAreaBounds(boolean bReduceByInsets){
  final Bounds boClientArea=BoundsImpl.copyInstance(pwoa.getBounds());
  if (bReduceByInsets) {
    boClientArea.adjust(pwoa.getCellInsets());
  }
  return boClientArea;
}","public Bounds getClientAreaBounds(boolean bReduceByInsets){
  final Bounds boClientArea=pwoa.getBounds().copyInstance();
  if (bReduceByInsets) {
    boClientArea.adjust(pwoa.getCellInsets());
  }
  return boClientArea;
}",0.5353982300884956
70586,"/** 
 * Adjusts the text by one half of width or height, according to the direction in position state. Returns new location if position changed, or returns the original location instance without position change.
 * @param iLabelPosition position state
 * @param lo location
 * @param itm
 * @param dAngleInDegrees the rotated degree of font
 * @return new location if position changed, or the original locationinstance.
 */
final protected Location adjustTextPosition(int iLabelPosition,final Location lo,final ITextMetrics itm,double dAngleInDegrees){
  if (iLabelPosition > POSITION_MASK) {
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    final double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    final double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    Location newLo=LocationImpl.copyInstance(lo);
    if ((iLabelPosition & POSITION_MOVE_ABOVE) == POSITION_MOVE_ABOVE) {
      newLo.setY(lo.getY() - (itm.getFullHeight() * dCosTheta + itm.getFullWidth() * dSineTheta) / 2);
    }
 else     if ((iLabelPosition & POSITION_MOVE_BELOW) == POSITION_MOVE_BELOW) {
      newLo.setY(lo.getY() + (itm.getFullHeight() * dCosTheta + itm.getFullWidth() * dSineTheta) / 2);
    }
 else     if ((iLabelPosition & POSITION_MOVE_LEFT) == POSITION_MOVE_LEFT) {
      newLo.setX(lo.getX() - (itm.getFullWidth() * dCosTheta + itm.getFullHeight() * dSineTheta) / 2);
    }
 else     if ((iLabelPosition & POSITION_MOVE_RIGHT) == POSITION_MOVE_RIGHT) {
      newLo.setX(lo.getX() + (itm.getFullWidth() * dCosTheta + itm.getFullHeight() * dSineTheta) / 2);
    }
    return newLo;
  }
  return lo;
}","/** 
 * Adjusts the text by one half of width or height, according to the direction in position state. Returns new location if position changed, or returns the original location instance without position change.
 * @param iLabelPosition position state
 * @param lo location
 * @param itm
 * @param dAngleInDegrees the rotated degree of font
 * @return new location if position changed, or the original locationinstance.
 */
final protected Location adjustTextPosition(int iLabelPosition,final Location lo,final ITextMetrics itm,double dAngleInDegrees){
  if (iLabelPosition > POSITION_MASK) {
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    final double dSineTheta=Math.abs(Math.sin(dAngleInRadians));
    final double dCosTheta=Math.abs(Math.cos(dAngleInRadians));
    Location newLo=lo.copyInstance();
    if ((iLabelPosition & POSITION_MOVE_ABOVE) == POSITION_MOVE_ABOVE) {
      newLo.setY(lo.getY() - (itm.getFullHeight() * dCosTheta + itm.getFullWidth() * dSineTheta) / 2);
    }
 else     if ((iLabelPosition & POSITION_MOVE_BELOW) == POSITION_MOVE_BELOW) {
      newLo.setY(lo.getY() + (itm.getFullHeight() * dCosTheta + itm.getFullWidth() * dSineTheta) / 2);
    }
 else     if ((iLabelPosition & POSITION_MOVE_LEFT) == POSITION_MOVE_LEFT) {
      newLo.setX(lo.getX() - (itm.getFullWidth() * dCosTheta + itm.getFullHeight() * dSineTheta) / 2);
    }
 else     if ((iLabelPosition & POSITION_MOVE_RIGHT) == POSITION_MOVE_RIGHT) {
      newLo.setX(lo.getX() + (itm.getFullWidth() * dCosTheta + itm.getFullHeight() * dSineTheta) / 2);
    }
    return newLo;
  }
  return lo;
}",0.9950586781964176
70587,"public PrimitiveRenderEvent copy(){
  Arc3DRenderEvent are=new Arc3DRenderEvent(source);
  if (object3D != null) {
    are.object3D=new Object3D(object3D);
  }
  if (outline != null) {
    are.setOutline(LineAttributesImpl.copyInstance(outline));
  }
  if (ifBackground != null) {
    are.setBackground(FillUtil.copyOf(ifBackground));
  }
  are.setStyle(iStyle);
  are.setWidth(dWidth);
  are.setHeight(dHeight);
  are.setStartAngle(dStartInDegrees);
  are.setAngleExtent(dExtentInDegrees);
  are.setInnerRadius(dInnerRadius);
  are.setOuterRadius(dOuterRadius);
  return are;
}","public PrimitiveRenderEvent copy(){
  Arc3DRenderEvent are=new Arc3DRenderEvent(source);
  if (object3D != null) {
    are.object3D=new Object3D(object3D);
  }
  if (outline != null) {
    are.setOutline(outline.copyInstance());
  }
  if (ifBackground != null) {
    are.setBackground(ifBackground.copyInstance());
  }
  are.setStyle(iStyle);
  are.setWidth(dWidth);
  are.setHeight(dHeight);
  are.setStartAngle(dStartInDegrees);
  are.setAngleExtent(dExtentInDegrees);
  are.setInnerRadius(dInnerRadius);
  are.setOuterRadius(dOuterRadius);
  return are;
}",0.9330985915492958
70588,"public PrimitiveRenderEvent copy() throws ChartException {
  ArcRenderEvent are=new ArcRenderEvent(source);
  if (outline != null) {
    are.setOutline(LineAttributesImpl.copyInstance(outline));
  }
  if (ifBackground != null) {
    are.setBackground(FillUtil.copyOf(ifBackground));
  }
  if (loTopLeft != null) {
    are.setTopLeft(LocationImpl.copyInstance(loTopLeft));
  }
  are.setStyle(iStyle);
  are.setWidth(dWidth);
  are.setHeight(dHeight);
  are.setStartAngle(dStartInDegrees);
  are.setEndAngle(dExtentInDegrees);
  are.setInnerRadius(dInnerRadius);
  are.setOuterRadius(dOuterRadius);
  return are;
}","public PrimitiveRenderEvent copy() throws ChartException {
  ArcRenderEvent are=new ArcRenderEvent(source);
  if (outline != null) {
    are.setOutline(outline.copyInstance());
  }
  if (ifBackground != null) {
    are.setBackground(FillUtil.copyOf(ifBackground));
  }
  if (loTopLeft != null) {
    are.setTopLeft(loTopLeft.copyInstance());
  }
  are.setStyle(iStyle);
  are.setWidth(dWidth);
  are.setHeight(dHeight);
  are.setStartAngle(dStartInDegrees);
  are.setEndAngle(dExtentInDegrees);
  are.setInnerRadius(dInnerRadius);
  are.setOuterRadius(dOuterRadius);
  return are;
}",0.949748743718593
70589,"protected void buildLogicContainerProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=style.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(url,style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
    }
    if (!isInInlineStacking) {
      pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=style.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}","protected void buildLogicContainerProperties(IContent content,LayoutContext context){
  IStyle style=content.getStyle();
  if (style != null && !style.isEmpty()) {
    boxStyle=new BoxStyle();
    IStyle cs=content.getComputedStyle();
    Color color=PropertyUtil.getColor(cs.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
    if (color != null) {
      boxStyle.setBackgroundColor(color);
    }
    String url=cs.getBackgroundImage();
    if (url != null) {
      boxStyle.setBackgroundImage(new BackgroundImageInfo(url,cs.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(cs.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
    }
    if (!isInInlineStacking) {
      pageBreakAfter=cs.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
      pageBreakInside=cs.getProperty(IStyle.STYLE_PAGE_BREAK_INSIDE);
      pageBreakBefore=cs.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    }
  }
 else {
    hasStyle=false;
    boxStyle=BoxStyle.DEFAULT;
    localProperties=LocalProperties.DEFAULT;
  }
  bookmark=content.getBookmark();
  action=content.getHyperlinkAction();
}",0.9573542210617928
70590,"void doRenderReportletWithBookmark() throws Exception {
  IReportDocument document=engine.openReportDocument(REPORT_DOCUMENT);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  IRenderOption option=new HTMLRenderOption();
  option.setOutputFormat(HTMLRenderOption.OUTPUT_FORMAT_HTML);
  option.setOutputStream(out);
  String[] bookmarks=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < bookmarks.length; i++) {
    IRenderTask renderTask=engine.createRenderTask(document);
    renderTask.setRenderOption(option);
    renderTask.setReportlet(bookmarks[i]);
    renderTask.render();
    assertTrue(renderTask.getErrors().isEmpty());
    renderTask.close();
    String pageContent=out.toString(""String_Node_Str"");
    if (bookmarks[i].indexOf(""String_Node_Str"") == -1) {
      assertTrue(pageContent.indexOf(""String_Node_Str"") != -1);
      int indexOf=pageContent.indexOf(""String_Node_Str"");
      int lastIndexOf=pageContent.lastIndexOf(""String_Node_Str"");
      assertTrue(indexOf != -1 && lastIndexOf != -1 && indexOf != lastIndexOf);
    }
 else {
      assertTrue(pageContent.indexOf(""String_Node_Str"") != -1);
      int indexOf=pageContent.indexOf(""String_Node_Str"");
      int lastIndexOf=pageContent.lastIndexOf(""String_Node_Str"");
      assertTrue(indexOf != -1 && lastIndexOf != -1 && indexOf == lastIndexOf);
    }
    out.reset();
  }
  document.close();
}","void doRenderReportletWithBookmark() throws Exception {
  IReportDocument document=engine.openReportDocument(REPORT_DOCUMENT);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  IRenderOption option=new HTMLRenderOption();
  option.setOutputFormat(HTMLRenderOption.OUTPUT_FORMAT_HTML);
  option.setOutputStream(out);
  String[] bookmarks=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < bookmarks.length; i++) {
    IRenderTask renderTask=engine.createRenderTask(document);
    renderTask.setRenderOption(option);
    renderTask.setReportlet(bookmarks[i]);
    renderTask.render();
    assertTrue(renderTask.getErrors().isEmpty());
    renderTask.close();
    String pageContent=out.toString(""String_Node_Str"");
    if (bookmarks[i].indexOf(""String_Node_Str"") == -1) {
      assertTrue(pageContent.indexOf(""String_Node_Str"") != -1);
      int indexOf=pageContent.indexOf(""String_Node_Str"");
      int lastIndexOf=pageContent.lastIndexOf(""String_Node_Str"");
      assertTrue(indexOf != -1 && lastIndexOf != -1 && indexOf != lastIndexOf);
    }
 else {
      int indexOf=pageContent.indexOf(""String_Node_Str"");
      int lastIndexOf=pageContent.lastIndexOf(""String_Node_Str"");
      assertTrue(indexOf != -1 && lastIndexOf != -1 && indexOf == lastIndexOf);
    }
    out.reset();
  }
  document.close();
}",0.900785153461813
70591,"public void close() throws BirtException {
  height=currentBP + getOffsetY() + localProperties.getPaddingBottom();
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
    }
  }
  if (height > parent.getSpecifiedHeight()) {
    height=parent.getSpecifiedHeight();
    setNeedClip(true);
  }
  parent.update(this);
  finished=true;
}","public void close() throws BirtException {
  height=currentBP + getOffsetY() + localProperties.getPaddingBottom();
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
    }
  }
  parent.update(this);
  finished=true;
}",0.7938257993384785
70592,"/** 
 * Updates the row height and the height of the cells in the row.
 * @param rowArea
 * @param height
 */
private void updateRowHeight(RowArea row,int height){
  if (height < 0)   return;
  row.setHeight(height);
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell != null) {
      if (cell.getRowSpan() == 1) {
        if (cell instanceof DummyCell) {
          CellArea refCell=((DummyCell)cell).getCell();
          int delta=((DummyCell)cell).getDelta();
          refCell.setHeight(delta + height);
          verticalAlign(refCell);
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
      i=i + cell.getColSpan() - 1;
    }
  }
}","/** 
 * Updates the row height and the height of the cells in the row.
 * @param rowArea
 * @param height
 */
private void updateRowHeight(RowArea row,int height){
  if (height < 0)   return;
  row.setHeight(height);
  boolean isFixedLayout=row.context.isFixedLayout();
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell != null) {
      if (cell.getRowSpan() == 1) {
        if (cell instanceof DummyCell) {
          CellArea refCell=((DummyCell)cell).getCell();
          int delta=((DummyCell)cell).getDelta();
          refCell.setHeight(delta + height);
          verticalAlign(refCell);
        }
 else {
          int cellHeight=cell.getHeight();
          cell.setHeight(height);
          verticalAlign(cell);
          if (isFixedLayout && cellHeight > height) {
            cell.setNeedClip(true);
          }
        }
      }
      i=i + cell.getColSpan() - 1;
    }
  }
}",0.8704600484261501
70593,"protected SplitResult _split(int height,boolean force) throws BirtException {
  RowArea result=null;
  for (int i=0; i < cells.length; i++) {
    if (cells[i] != null) {
      SplitResult splitCell=cells[i].split(height,force);
      CellArea cell=(CellArea)splitCell.getResult();
      if (cell != null) {
        if (result == null) {
          result=cloneArea();
        }
        result.addChild(cell);
        result.setCell(cell);
      }
      i=cells[i].getColSpan() + i - 1;
    }
  }
  if (result != null) {
    result.updateRow(this);
    updateRow();
    return new SplitResult(result,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    return SplitResult.SUCCEED_WITH_NULL;
  }
}","protected SplitResult _split(int height,boolean force) throws BirtException {
  RowArea result=null;
  for (int i=0; i < cells.length; i++) {
    if (cells[i] != null) {
      SplitResult splitCell=cells[i].split(height,force);
      CellArea cell=(CellArea)splitCell.getResult();
      if (cell != null) {
        if (result == null) {
          result=cloneArea();
        }
        result.addChild(cell);
        result.setCell(cell);
      }
      i=cells[i].getColSpan() + i - 1;
    }
  }
  if (result != null) {
    result.updateRow(this);
    updateRow();
    return new SplitResult(result,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    updateRow();
    return SplitResult.SUCCEED_WITH_NULL;
  }
}",0.9879175550817342
70594,"public void visitTextDataItem(TextDataHandle handle){
  DynamicTextItemDesign dynamicTextItem=new DynamicTextItemDesign();
  setupReportItem(dynamicTextItem,handle);
  String valueExpr=handle.getValueExpr();
  String contentType=handle.getContentType();
  dynamicTextItem.setContent(createExpression(validateExpression(valueExpr)));
  dynamicTextItem.setContentType(createExpression(contentType));
  setupHighlight(dynamicTextItem,valueExpr);
  setMap(dynamicTextItem,valueExpr);
  setCurrentElement(dynamicTextItem);
}","public void visitTextDataItem(TextDataHandle handle){
  DynamicTextItemDesign dynamicTextItem=new DynamicTextItemDesign();
  setupReportItem(dynamicTextItem,handle);
  String valueExpr=handle.getValueExpr();
  String contentType=handle.getContentType();
  dynamicTextItem.setContent(createExpression(validateExpression(valueExpr)));
  dynamicTextItem.setContentType(createConstant(contentType));
  setupHighlight(dynamicTextItem,valueExpr);
  setMap(dynamicTextItem,valueExpr);
  setCurrentElement(dynamicTextItem);
}",0.9826254826254828
70595,"public boolean hasExpression(){
  if (handle instanceof TextItemHandle) {
    TextItemHandle textItem=(TextItemHandle)handle;
    textItem.hasExpression();
  }
  return false;
}","public boolean hasExpression(){
  if (handle instanceof TextItemHandle) {
    TextItemHandle textItem=(TextItemHandle)handle;
    return textItem.hasExpression();
  }
  return true;
}",0.9611111111111112
70596,"public void initialize(IEmitterServices service) throws BirtException {
  emitter.initialize(service);
}","public void initialize(IEmitterServices service) throws BirtException {
  emitter.initialize(service);
  ReportDesignHandle designHandle=(ReportDesignHandle)service.getReportRunnable().getDesignHandle();
  if (designHandle != null) {
    String reportLayoutPreference=designHandle.getLayoutPreference();
    context.setFixedLayout(DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference));
  }
}",0.3902439024390244
70597,"public void close() throws BirtException {
  height=currentBP + getOffsetY() + localProperties.getPaddingBottom();
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
    }
  }
  parent.update(this);
  finished=true;
}","public void close() throws BirtException {
  height=currentBP + getOffsetY() + localProperties.getPaddingBottom();
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
    }
  }
  if (height > parent.getSpecifiedHeight()) {
    height=parent.getSpecifiedHeight();
    setNeedClip(true);
  }
  parent.update(this);
  finished=true;
}",0.7938257993384785
70598,"/** 
 * 1) Creates row wrapper. 2) For the null cell in the row wrapper, fills the relevant position with dummy cell or empty cell. 3) Updates the height of the row and the cells in the row.
 * @param rowArea current rowArea.
 */
private void updateRow(RowArea rowArea){
  RowArea lastRow=(RowArea)rows.getCurrent();
  int height=rowArea.getSpecifiedHeight();
  for (int i=startCol; i <= endCol; i++) {
    CellArea upperCell=null;
    if (lastRow != null) {
      upperCell=lastRow.getCell(i);
    }
    if (upperCell != null && (upperCell.getRowSpan() > 1)) {
      DummyCell dummyCell=createDummyCell(upperCell);
      rowArea.setCell(dummyCell);
      int delta=dummyCell.getDelta();
      if (dummyCell.getRowSpan() == 1) {
        height=Math.max(height,dummyCell.getCell().getHeight() - delta);
      }
      i=i + upperCell.getColSpan() - 1;
    }
 else {
      CellArea cell=rowArea.getCell(i);
      if (cell != null && cell.getRowSpan() == 1) {
        height=Math.max(height,cell.getHeight());
        i=i + cell.getColSpan() - 1;
      }
    }
  }
  updateRowHeight(rowArea,height);
}","/** 
 * 1) Creates row wrapper. 2) For the null cell in the row wrapper, fills the relevant position with dummy cell or empty cell. 3) Updates the height of the row and the cells in the row.
 * @param rowArea current rowArea.
 */
private void updateRow(RowArea rowArea){
  RowArea lastRow=(RowArea)rows.getCurrent();
  int height=rowArea.getSpecifiedHeight();
  if (!rowArea.context.isFixedLayout()) {
    for (int i=startCol; i <= endCol; i++) {
      CellArea upperCell=null;
      if (lastRow != null) {
        upperCell=lastRow.getCell(i);
      }
      if (upperCell != null && (upperCell.getRowSpan() > 1)) {
        DummyCell dummyCell=createDummyCell(upperCell);
        rowArea.setCell(dummyCell);
        int delta=dummyCell.getDelta();
        if (dummyCell.getRowSpan() == 1) {
          height=Math.max(height,dummyCell.getCell().getHeight() - delta);
        }
        i=i + upperCell.getColSpan() - 1;
      }
 else {
        CellArea cell=rowArea.getCell(i);
        if (cell != null && cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
          i=i + cell.getColSpan() - 1;
        }
      }
    }
  }
  updateRowHeight(rowArea,height);
}",0.9097283085013146
70599,"public void testMultiBasic(){
  assertEquals(1,dynamicText.getX().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(2,dynamicText.getY().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(3,dynamicText.getWidth().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(4,dynamicText.getHeight().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(""String_Node_Str"",dynamicText.getName());
  assertEquals(Expression.newExpression(""String_Node_Str""),dynamicText.getContent());
  assertEquals(Expression.newExpression(""String_Node_Str""),dynamicText.getContentType());
}","public void testMultiBasic(){
  assertEquals(1,dynamicText.getX().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(2,dynamicText.getY().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(3,dynamicText.getWidth().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(4,dynamicText.getHeight().getValue().getMeasure(),Double.MIN_VALUE);
  assertEquals(""String_Node_Str"",dynamicText.getName());
  assertEquals(Expression.newExpression(""String_Node_Str""),dynamicText.getContent());
  assertEquals(Expression.newConstant(""String_Node_Str""),dynamicText.getContentType());
}",0.9846938775510204
70600,"/** 
 * create the class loader used by the design. the method should be synchronized as the class loader of a document may be used by multiple tasks.
 */
protected synchronized void createDesignClassLoader(){
  if (designClassLoader != null) {
    return;
  }
  ArrayList<URL> urls=new ArrayList<URL>();
  if (runnable != null) {
    ModuleHandle module=(ModuleHandle)runnable.getDesignHandle();
    Iterator iter=module.scriptLibsIterator();
    while (iter.hasNext()) {
      ScriptLibHandle lib=(ScriptLibHandle)iter.next();
      String libPath=lib.getName();
      URL url=module.findResource(libPath,IResourceLocator.LIBRARY);
      if (url != null) {
        urls.add(url);
      }
 else {
        if (executionContext != null) {
          executionContext.addException(new EngineException(MessageConstants.JAR_NOT_FOUND_ERROR,libPath));
        }
        logger.log(Level.SEVERE,""String_Node_Str"" + libPath);
      }
    }
  }
  URL[] jarUrls=(URL[])urls.toArray(new URL[]{});
  designClassLoader=new URLClassLoader(jarUrls,engine.getEngineClassLoader());
}","/** 
 * create the class loader used by the design. the method should be synchronized as the class loader of a document may be used by multiple tasks.
 */
protected synchronized void createDesignClassLoader(){
  if (designClassLoader != null) {
    return;
  }
  ArrayList<URL> urls=new ArrayList<URL>();
  if (runnable != null) {
    ModuleHandle module=(ModuleHandle)runnable.getDesignHandle();
    Iterator iter=module.scriptLibsIterator();
    while (iter.hasNext()) {
      ScriptLibHandle lib=(ScriptLibHandle)iter.next();
      String libPath=lib.getName();
      URL url=module.findResource(libPath,IResourceLocator.LIBRARY);
      if (url != null) {
        urls.add(url);
      }
 else {
        if (executionContext != null) {
          executionContext.addException(new EngineException(MessageConstants.JAR_NOT_FOUND_ERROR,libPath));
        }
        logger.log(Level.SEVERE,""String_Node_Str"" + libPath);
      }
    }
  }
  URL[] jarUrls=(URL[])urls.toArray(new URL[]{});
  if (engine != null) {
    designClassLoader=new URLClassLoader(jarUrls,engine.getEngineClassLoader());
  }
 else {
    designClassLoader=new URLClassLoader(jarUrls);
  }
}",0.9582022471910112
70601,"protected void readReportItemField(DataInputStream in,ReportItemDesign design,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_X:
    design.setX(readDimensionExpression(in));
  break;
case FIELD_Y:
design.setY(readDimensionExpression(in));
break;
case FIELD_HEIGHT:
design.setHeight(readDimensionExpression(in));
break;
case FIELD_WIDTH:
design.setWidth(readDimensionExpression(in));
break;
case FIELD_BOOKMARK:
Expression<String> bookmark=readStringConstant(in);
design.setBookmark(bookmark);
break;
case FIELD_TOC:
Expression<Object> toc=readObjectConstant(in);
design.setTOC(toc);
break;
case FIELD_ON_CREATE:
String onCreatScriptText=IOUtil.readString(in);
ScriptExpression onCreatScriptExpr=new ScriptExpression(onCreatScriptText);
design.setOnCreate(onCreatScriptExpr);
break;
case FIELD_ON_RENDER:
String OnRenderScriptText=IOUtil.readString(in);
ScriptExpression OnRenderScriptExpr=new ScriptExpression(OnRenderScriptText);
design.setOnRender(OnRenderScriptExpr);
break;
case FIELD_ON_PAGE_BREAK:
String OnPageBreakScriptText=IOUtil.readString(in);
ScriptExpression OnPageBreakScriptExpr=new ScriptExpression(OnPageBreakScriptText);
design.setOnPageBreak(OnPageBreakScriptExpr);
break;
case FIELD_VISIBILITY:
VisibilityDesign visibility=readVisibility(in);
design.setVisibility(visibility);
break;
case FIELD_ACTION:
ActionDesign action=readAction(in);
design.setAction(action);
break;
case FIELD_ACTION_V1:
ActionDesign action1=readActionV1(in);
design.setAction(action1);
break;
case FIELD_USE_CACHED_RESULT:
boolean useCachedResult=IOUtil.readBool(in);
design.setUseCachedResult(useCachedResult);
break;
default :
readStyledElementField(in,design,fieldType);
}
}","protected void readReportItemField(DataInputStream in,ReportItemDesign design,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_X:
    design.setX(readDimensionExpression(in));
  break;
case FIELD_Y:
design.setY(readDimensionExpression(in));
break;
case FIELD_HEIGHT:
design.setHeight(readDimensionExpression(in));
break;
case FIELD_WIDTH:
design.setWidth(readDimensionExpression(in));
break;
case FIELD_BOOKMARK:
Expression<String> bookmark=readStringExpression(in);
design.setBookmark(bookmark);
break;
case FIELD_TOC:
Expression<Object> toc=readObjectExpression(in);
design.setTOC(toc);
break;
case FIELD_ON_CREATE:
String onCreatScriptText=IOUtil.readString(in);
ScriptExpression onCreatScriptExpr=new ScriptExpression(onCreatScriptText);
design.setOnCreate(onCreatScriptExpr);
break;
case FIELD_ON_RENDER:
String OnRenderScriptText=IOUtil.readString(in);
ScriptExpression OnRenderScriptExpr=new ScriptExpression(OnRenderScriptText);
design.setOnRender(OnRenderScriptExpr);
break;
case FIELD_ON_PAGE_BREAK:
String OnPageBreakScriptText=IOUtil.readString(in);
ScriptExpression OnPageBreakScriptExpr=new ScriptExpression(OnPageBreakScriptText);
design.setOnPageBreak(OnPageBreakScriptExpr);
break;
case FIELD_VISIBILITY:
VisibilityDesign visibility=readVisibility(in);
design.setVisibility(visibility);
break;
case FIELD_ACTION:
ActionDesign action=readAction(in);
design.setAction(action);
break;
case FIELD_ACTION_V1:
ActionDesign action1=readActionV1(in);
design.setAction(action1);
break;
case FIELD_USE_CACHED_RESULT:
boolean useCachedResult=IOUtil.readBool(in);
design.setUseCachedResult(useCachedResult);
break;
default :
readStyledElementField(in,design,fieldType);
}
}",0.98939304655274
70602,"protected ActionDesign readAction(DataInputStream in) throws IOException {
  ActionDesign action=new ActionDesign();
  int actionType=IOUtil.readInt(in);
switch (actionType) {
case ActionDesign.ACTION_BOOKMARK:
    Expression<String> bookmark=readStringExpression(in);
  action.setBookmark(bookmark);
break;
case ActionDesign.ACTION_DRILLTHROUGH:
DrillThroughActionDesign drillThrough=readDrillThrough(in);
action.setDrillThrough(drillThrough);
break;
case ActionDesign.ACTION_HYPERLINK:
Expression<String> hyperlink=readStringExpression(in);
action.setHyperlink(hyperlink);
break;
default :
throw new IOException(""String_Node_Str"" + actionType);
}
if (version == ENGINE_IR_VERSION_0) {
IOUtil.readBool(in);
}
Expression<String> targetWindow=readStringExpression(in);
action.setTargetWindow(targetWindow);
return action;
}","protected ActionDesign readAction(DataInputStream in) throws IOException {
  ActionDesign action=new ActionDesign();
  int actionType=IOUtil.readInt(in);
switch (actionType) {
case ActionDesign.ACTION_BOOKMARK:
    Expression<String> bookmark=readStringExpression(in);
  action.setBookmark(bookmark);
break;
case ActionDesign.ACTION_DRILLTHROUGH:
DrillThroughActionDesign drillThrough=readDrillThrough(in);
action.setDrillThrough(drillThrough);
break;
case ActionDesign.ACTION_HYPERLINK:
Expression<String> hyperlink=readStringExpression(in);
action.setHyperlink(hyperlink);
break;
default :
throw new IOException(""String_Node_Str"" + actionType);
}
if (version == ENGINE_IR_VERSION_0) {
IOUtil.readBool(in);
}
Expression<String> targetWindow=readStringConstant(in);
action.setTargetWindow(targetWindow);
return action;
}",0.9890377588306942
70603,"/** 
 * create a Action.
 * @param handle action in DE
 * @return action in Engine.
 */
protected ActionDesign createAction(ActionHandle handle){
  ActionDesign action=new ActionDesign();
  String linkType=handle.getLinkType();
  action.setTooltip(createConstant(handle.getToolTip()));
  if (EngineIRConstants.ACTION_LINK_TYPE_HYPERLINK.equals(linkType)) {
    action.setHyperlink(createExpression(validateExpression(handle.getURI())));
    action.setTargetWindow(createExpression(handle.getTargetWindow()));
  }
 else   if (EngineIRConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(linkType)) {
    action.setBookmark(createExpression(validateExpression(handle.getTargetBookmark())));
  }
 else   if (EngineIRConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(linkType)) {
    action.setTargetWindow(createExpression(handle.getTargetWindow()));
    action.setTargetFileType(createExpression(handle.getTargetFileType()));
    DrillThroughActionDesign drillThrough=new DrillThroughActionDesign();
    action.setDrillThrough(drillThrough);
    drillThrough.setReportName(createConstant(handle.getReportName()));
    drillThrough.setFormat(createConstant(handle.getFormatType()));
    drillThrough.setBookmark(createExpression(validateExpression(handle.getTargetBookmark())));
    drillThrough.setBookmarkType(createExpression(handle.getTargetBookmarkType()));
    Map params=new HashMap();
    Iterator paramIte=handle.paramBindingsIterator();
    while (paramIte.hasNext()) {
      ParamBindingHandle member=(ParamBindingHandle)paramIte.next();
      params.put(member.getParamName(),createExpression(validateExpression(member.getExpression())));
    }
    drillThrough.setParameters(params);
  }
 else {
    assert(false);
  }
  return action;
}","/** 
 * create a Action.
 * @param handle action in DE
 * @return action in Engine.
 */
protected ActionDesign createAction(ActionHandle handle){
  ActionDesign action=new ActionDesign();
  String linkType=handle.getLinkType();
  action.setTooltip(createConstant(handle.getToolTip()));
  if (EngineIRConstants.ACTION_LINK_TYPE_HYPERLINK.equals(linkType)) {
    action.setHyperlink(createExpression(validateExpression(handle.getURI())));
    action.setTargetWindow(createConstant(handle.getTargetWindow()));
  }
 else   if (EngineIRConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(linkType)) {
    action.setBookmark(createExpression(validateExpression(handle.getTargetBookmark())));
  }
 else   if (EngineIRConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(linkType)) {
    action.setTargetWindow(createConstant(handle.getTargetWindow()));
    action.setTargetFileType(createConstant(handle.getTargetFileType()));
    DrillThroughActionDesign drillThrough=new DrillThroughActionDesign();
    action.setDrillThrough(drillThrough);
    drillThrough.setReportName(createConstant(handle.getReportName()));
    drillThrough.setFormat(createConstant(handle.getFormatType()));
    drillThrough.setBookmark(createExpression(validateExpression(handle.getTargetBookmark())));
    drillThrough.setBookmarkType(createConstant(handle.getTargetBookmarkType()));
    Map params=new HashMap();
    Iterator paramIte=handle.paramBindingsIterator();
    while (paramIte.hasNext()) {
      ParamBindingHandle member=(ParamBindingHandle)paramIte.next();
      params.put(member.getParamName(),createExpression(validateExpression(member.getExpression())));
    }
    drillThrough.setParameters(params);
  }
 else {
    assert(false);
  }
  return action;
}",0.5184331797235023
70604,"public SplitResult splitLines(int lineCount) throws BirtException {
  return SplitResult.SUCCEED_WITH_NULL;
}","public SplitResult splitLines(int lineCount) throws BirtException {
  if (isPageBreakBeforeAvoid()) {
    return SplitResult.BEFORE_AVOID_WITH_NULL;
  }
  return SplitResult.SUCCEED_WITH_NULL;
}",0.7194719471947195
70605,"/** 
 * @throws IOException
 * @throws DesignFileException
 * @throws SemanticException 
 */
public void test_regression_117978() throws IOException, DesignFileException, SemanticException {
  DesignEngine engine=new DesignEngine(new DesignConfig());
  SessionHandle session=engine.newSessionHandle(ULocale.ENGLISH);
  ReportDesignHandle designHandle=session.createDesign();
  ElementFactory factory=designHandle.getElementFactory();
  LabelHandle label=factory.newLabel(""String_Node_Str"");
  designHandle.getBody().add(label);
  UserPropertyDefn expr2=new UserPropertyDefn();
  expr2.setName(""String_Node_Str"");
  expr2.setType(new ExpressionPropertyType());
  expr2.setDefault(""String_Node_Str"");
  label.addUserPropertyDefn(expr2);
  label.setStringProperty(""String_Node_Str"",""String_Node_Str"");
  String TempFile=this.genOutputFile(OUTPUT);
  designHandle.saveAs(TempFile);
  designHandle=session.openDesign(TempFile);
  LabelHandle labelHandle=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(labelHandle);
  List userProperties=labelHandle.getUserProperties();
  assertEquals(1,userProperties.size());
  UserPropertyDefn prop=(UserPropertyDefn)userProperties.get(0);
  assertEquals(""String_Node_Str"",prop.getName());
  assertEquals(""String_Node_Str"",prop.getDefault());
  assertEquals(""String_Node_Str"",labelHandle.getStringProperty(""String_Node_Str""));
}","/** 
 * @throws IOException
 * @throws DesignFileException
 * @throws SemanticException 
 */
public void test_regression_117978() throws IOException, DesignFileException, SemanticException {
  DesignEngine engine=new DesignEngine(new DesignConfig());
  SessionHandle session=engine.newSessionHandle(ULocale.ENGLISH);
  ReportDesignHandle designHandle=session.createDesign();
  ElementFactory factory=designHandle.getElementFactory();
  LabelHandle label=factory.newLabel(""String_Node_Str"");
  designHandle.getBody().add(label);
  UserPropertyDefn expr2=new UserPropertyDefn();
  expr2.setName(""String_Node_Str"");
  expr2.setType(new ExpressionPropertyType());
  expr2.setDefault(""String_Node_Str"");
  label.addUserPropertyDefn(expr2);
  label.setStringProperty(""String_Node_Str"",""String_Node_Str"");
  String TempFile=this.genOutputFile(OUTPUT);
  designHandle.saveAs(TempFile);
  designHandle=session.openDesign(TempFile);
  LabelHandle labelHandle=(LabelHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(labelHandle);
  List userProperties=labelHandle.getUserProperties();
  assertEquals(1,userProperties.size());
  UserPropertyDefn prop=(UserPropertyDefn)userProperties.get(0);
  assertEquals(""String_Node_Str"",prop.getName());
  assertEquals(""String_Node_Str"",prop.getDefault().toString());
  assertEquals(""String_Node_Str"",labelHandle.getStringProperty(""String_Node_Str""));
}",0.9960474308300395
70606,"/** 
 */
protected void setUp() throws Exception {
  super.setUp();
  removeResource();
  copyInputToFile(INPUT_FOLDER + ""String_Node_Str"" + filename);
}","/** 
 */
protected void setUp() throws Exception {
  super.setUp();
  removeResource();
  copyInputToFile(INPUT_FOLDER + ""String_Node_Str"" + filename);
  copyInputToFile(INPUT_FOLDER + ""String_Node_Str"" + filename_lib);
}",0.8181818181818182
70607,"public void visitList(ListHandle handle){
  ListItemDesign listItem=new ListItemDesign();
  setupListingItem(listItem,handle);
  SlotHandle headerSlot=handle.getHeader();
  if (headerSlot.getCount() > 0) {
    ListBandDesign header=createListBand(headerSlot);
    header.setBandType(ListBandDesign.BAND_HEADER);
    listItem.setHeader(header);
    Expression<Boolean> headerValue=createConstant(handle.repeatHeader());
    listItem.setRepeatHeader(headerValue);
  }
  SlotHandle groupsSlot=handle.getGroups();
  for (int i=0; i < groupsSlot.getCount(); i++) {
    apply(groupsSlot.get(i));
    if (currentElement != null) {
      GroupDesign group=(GroupDesign)currentElement;
      group.setGroupLevel(i);
      listItem.addGroup(group);
    }
  }
  SlotHandle detailSlot=handle.getDetail();
  if (detailSlot.getCount() > 0) {
    ListBandDesign detail=createListBand(detailSlot);
    detail.setBandType(ListBandDesign.BAND_DETAIL);
    listItem.setDetail(detail);
  }
  SlotHandle footerSlot=handle.getFooter();
  if (footerSlot.getCount() > 0) {
    ListBandDesign footer=createListBand(footerSlot);
    footer.setBandType(ListBandDesign.BAND_FOOTER);
    listItem.setFooter(footer);
  }
  setCurrentElement(listItem);
}","public void visitList(ListHandle handle){
  ListItemDesign listItem=new ListItemDesign();
  setupListingItem(listItem,handle);
  SlotHandle headerSlot=handle.getHeader();
  if (headerSlot.getCount() > 0) {
    ListBandDesign header=createListBand(headerSlot);
    header.setBandType(ListBandDesign.BAND_HEADER);
    listItem.setHeader(header);
  }
  Expression<Boolean> headerValue=createConstant(handle.repeatHeader());
  listItem.setRepeatHeader(headerValue);
  SlotHandle groupsSlot=handle.getGroups();
  for (int i=0; i < groupsSlot.getCount(); i++) {
    apply(groupsSlot.get(i));
    if (currentElement != null) {
      GroupDesign group=(GroupDesign)currentElement;
      group.setGroupLevel(i);
      listItem.addGroup(group);
    }
  }
  SlotHandle detailSlot=handle.getDetail();
  if (detailSlot.getCount() > 0) {
    ListBandDesign detail=createListBand(detailSlot);
    detail.setBandType(ListBandDesign.BAND_DETAIL);
    listItem.setDetail(detail);
  }
  SlotHandle footerSlot=handle.getFooter();
  if (footerSlot.getCount() > 0) {
    ListBandDesign footer=createListBand(footerSlot);
    footer.setBandType(ListBandDesign.BAND_FOOTER);
    listItem.setFooter(footer);
  }
  setCurrentElement(listItem);
}",0.9967239967239968
70608,"public void startCell(ICellContent cell){
  rowFilledFlag=true;
  context.startCell();
  int columnId=cell.getColumn();
  List<SpanInfo> spans=context.getSpans(columnId);
  if (spans != null) {
    for (int i=0; i < spans.size(); i++) {
      wordWriter.writeSpanCell(spans.get(i));
    }
  }
  int columnSpan=cell.getColSpan();
  int rowSpan=cell.getRowSpan();
  int cellWidth=context.getCellWidth(columnId,columnSpan);
  IStyle style=computeStyle(cell.getComputedStyle());
  if (rowSpan > 1) {
    context.addSpan(columnId,columnSpan,cellWidth,rowSpan,style);
  }
  SpanInfo info=null;
  if (columnSpan > 1 || rowSpan > 1) {
    info=new SpanInfo(columnId,columnSpan,cellWidth,true,style);
  }
  wordWriter.startTableCell(cellWidth,style,info);
  context.addWidth(getCellWidth(cellWidth,style));
  writeTableToc();
}","public void startCell(ICellContent cell){
  rowFilledFlag=true;
  context.startCell();
  int columnId=cell.getColumn();
  List<SpanInfo> spans=context.getSpans(columnId);
  if (spans != null) {
    for (int i=0; i < spans.size(); i++) {
      wordWriter.writeSpanCell(spans.get(i));
    }
  }
  int columnSpan=cell.getColSpan();
  int rowSpan=cell.getRowSpan();
  int cellWidth=context.getCellWidth(columnId,columnSpan);
  IStyle style=computeStyle(cell.getComputedStyle());
  if (rowSpan > 1) {
    context.addSpan(columnId,columnSpan,cellWidth,rowSpan,style);
  }
  SpanInfo info=null;
  if (columnSpan > 1 || rowSpan > 1) {
    info=new SpanInfo(columnId,columnSpan,cellWidth,true,style);
  }
  wordWriter.startTableCell(cellWidth,style,info);
  context.addWidth(getCellWidth(cellWidth,style));
  writeTableToc();
  if (cell.getDiagonalNumber() != 0 || cell.getAntidiagonalNumber() != 0) {
    drawDiagonalLine(cell,WordUtil.twipToPt(cellWidth));
  }
}",0.9227298364354202
70609,"public static String parseImageBorderStyle(String style){
  if (CSSConstants.CSS_DOTTED_VALUE.equalsIgnoreCase(style)) {
    return ""String_Node_Str"";
  }
  if (CSSConstants.CSS_DASHED_VALUE.equalsIgnoreCase(style)) {
    return ""String_Node_Str"";
  }
  if (CSSConstants.CSS_SOLID_VALUE.equalsIgnoreCase(style)) {
    return ""String_Node_Str"";
  }
  return style;
}","public static String parseImageBorderStyle(String style){
  if (CSSConstants.CSS_DOTTED_VALUE.equalsIgnoreCase(style)) {
    return LINESTYLE_DOT;
  }
  if (CSSConstants.CSS_DASHED_VALUE.equalsIgnoreCase(style)) {
    return LINESTYLE_DASH;
  }
  if (CSSConstants.CSS_SOLID_VALUE.equalsIgnoreCase(style)) {
    return LINESTYLE_SINGLE;
  }
  return style;
}",0.8781163434903048
70610,"public static String parseBorderStyle(String style){
  if (CSSConstants.CSS_SOLID_VALUE.equalsIgnoreCase(style)) {
    return ""String_Node_Str"";
  }
  return style;
}","public static String parseBorderStyle(String style){
  if (CSSConstants.CSS_SOLID_VALUE.equalsIgnoreCase(style)) {
    return LINESTYLE_SINGLE;
  }
  return style;
}",0.918429003021148
70611,"public void update(AbstractArea area) throws BirtException {
  int aHeight=area.getAllocatedHeight();
  currentBP+=aHeight;
  height+=aHeight;
}","protected void update() throws BirtException {
  if (parent != null) {
    if (!isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=getAllocatedHeight();
      while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
        parent.autoPageBreak();
        aHeight=getAllocatedHeight();
      }
    }
    parent.update(this);
  }
}",0.176
70612,"public void close() throws BirtException {
  if (hasStyle) {
    int height=currentBP + localProperties.getPaddingTop() + boxStyle.getTopBorderWidth()+ localProperties.getPaddingBottom()+ boxStyle.getBottomBorderWidth();
    if (specifiedHeight > height) {
      if (IStyle.BOTTOM_VALUE.equals(vAlign)) {
        int offset=specifiedHeight - height;
        Iterator<IArea> iter=getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setY(offset + child.getY());
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(vAlign)) {
        int offset=(specifiedHeight - height) / 2;
        Iterator iter=getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setY(child.getY() + offset);
        }
      }
      height=specifiedHeight;
    }
    this.height=height;
  }
 else {
    if (specifiedHeight > currentBP) {
      height=specifiedHeight;
    }
 else {
      height=currentBP;
    }
  }
  if (parent != null) {
    if (!isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=getAllocatedHeight();
      while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
        parent.autoPageBreak();
        aHeight=getAllocatedHeight();
      }
    }
    parent.update(this);
  }
  finished=true;
}","public void close() throws BirtException {
  if (hasStyle) {
    int height=currentBP + localProperties.getPaddingTop() + boxStyle.getTopBorderWidth()+ localProperties.getPaddingBottom()+ boxStyle.getBottomBorderWidth();
    if (specifiedHeight > height) {
      if (IStyle.BOTTOM_VALUE.equals(vAlign)) {
        int offset=specifiedHeight - height;
        Iterator<IArea> iter=getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setY(offset + child.getY());
        }
      }
 else       if (IStyle.MIDDLE_VALUE.equals(vAlign)) {
        int offset=(specifiedHeight - height) / 2;
        Iterator iter=getChildren();
        while (iter.hasNext()) {
          AbstractArea child=(AbstractArea)iter.next();
          child.setY(child.getY() + offset);
        }
      }
      height=specifiedHeight;
    }
    this.height=height;
  }
 else {
    if (specifiedHeight > currentBP) {
      height=specifiedHeight;
    }
 else {
      height=currentBP;
    }
  }
  update();
  finished=true;
}",0.8566694283347142
70613,"protected SplitResult _split(int height,boolean force) throws BirtException {
  if (children.size() == 0) {
    if (isPageBreakBeforeAvoid() && !force) {
      updateChildrenPosition();
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      updateChildrenPosition();
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  BlockContainerArea newContainer=null;
  int status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
  int cheight=getContentHeight(height);
  ListIterator iter=children.listIterator();
  int contentHeight=0;
  ArrayList result=new ArrayList();
  ContainerArea current=null;
  ContainerArea previous=null;
  while (iter.hasNext()) {
    previous=current;
    current=(ContainerArea)iter.next();
    int ah=current.getAllocatedHeight();
    contentHeight+=ah;
    if (contentHeight <= cheight && current.finished) {
      result.add(current);
      continue;
    }
 else {
      contentHeight-=ah;
      int childSplitHeight=cheight - contentHeight;
      SplitResult splitResult=current.split(childSplitHeight,force && result.isEmpty());
      if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        ContainerArea splitChildArea=splitResult.getResult();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        contentHeight+=splitChildArea.getAllocatedHeight();
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
        if (force) {
          if (result.size() > 0) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          }
        }
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        if (previous != null) {
          if (force && result.isEmpty()) {
            return SplitResult.SUCCEED_WITH_NULL;
          }
 else {
            if (previous.isPageBreakAfterAvoid()) {
              status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
              break;
            }
 else {
              status=SplitResult.SPLIT_SUCCEED_WITH_PART;
              break;
            }
          }
        }
 else {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (isPageBreakBeforeAvoid()) {
              return SplitResult.BEFORE_AVOID_WITH_NULL;
            }
 else {
              return SplitResult.SUCCEED_WITH_NULL;
            }
          }
        }
      }
    }
  }
  if (result.size() == children.size()) {
    status=SplitResult.SPLIT_SUCCEED_WITH_PART;
  }
  if (!force && status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
    iter.previous();
    while (iter.hasPrevious()) {
      current=(ContainerArea)iter.previous();
      int ah=current.getAllocatedHeight();
      SplitResult splitResult=current.splitLines(1);
      if (splitResult.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
        result.remove(current);
        contentHeight-=ah;
        continue;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        result.remove(current);
        ContainerArea splitChildArea=splitResult.getResult();
        contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        result.remove(current);
        int preIndex=iter.previousIndex();
        if (preIndex >= 0) {
          ContainerArea prev=(ContainerArea)children.get(preIndex);
          if (prev.isPageBreakAfterAvoid()) {
            continue;
          }
 else {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
        }
 else {
          if (isPageBreakBeforeAvoid()) {
            return SplitResult.BEFORE_AVOID_WITH_NULL;
          }
 else {
            return SplitResult.SUCCEED_WITH_NULL;
          }
        }
      }
    }
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
  }
  if (status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
    newContainer=cloneArea();
    for (int i=0; i < result.size(); i++) {
      ContainerArea child=(ContainerArea)result.get(i);
      child.setParent(newContainer);
      newContainer.addChild(child);
      children.remove(child);
    }
    newContainer.setContentHeight(contentHeight);
  }
  if (newContainer != null) {
    updateChildrenPosition();
  }
  return new SplitResult(newContainer,status);
}","protected SplitResult _split(int height,boolean force) throws BirtException {
  if (children.size() == 0) {
    if (isPageBreakBeforeAvoid() && !force) {
      updateChildrenPosition();
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
 else {
      updateChildrenPosition();
      return SplitResult.SUCCEED_WITH_NULL;
    }
  }
  BlockContainerArea newContainer=null;
  int status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
  int cheight=getContentHeight(height);
  ListIterator iter=children.listIterator();
  int contentHeight=0;
  ArrayList result=new ArrayList();
  ContainerArea current=null;
  ContainerArea previous=null;
  while (iter.hasNext()) {
    previous=current;
    current=(ContainerArea)iter.next();
    int ah=current.getAllocatedHeight();
    contentHeight+=ah;
    if (contentHeight <= cheight && current.finished) {
      result.add(current);
      continue;
    }
 else {
      contentHeight-=ah;
      int childSplitHeight=cheight - contentHeight;
      SplitResult splitResult=current.split(childSplitHeight,force && !isValidResult(result));
      if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        ContainerArea splitChildArea=splitResult.getResult();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        contentHeight+=splitChildArea.getAllocatedHeight();
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
        if (force) {
          if (result.size() > 0) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
          }
        }
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        if (isValidResult(result)) {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (previous.isPageBreakAfterAvoid()) {
              status=SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL;
              break;
            }
 else {
              status=SplitResult.SPLIT_SUCCEED_WITH_PART;
              break;
            }
          }
        }
 else {
          if (force) {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
 else {
            if (isPageBreakBeforeAvoid()) {
              return SplitResult.BEFORE_AVOID_WITH_NULL;
            }
 else {
              return SplitResult.SUCCEED_WITH_NULL;
            }
          }
        }
      }
    }
  }
  if (result.size() == children.size()) {
    status=SplitResult.SPLIT_SUCCEED_WITH_PART;
  }
  if (!force && status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
    iter.previous();
    while (iter.hasPrevious()) {
      current=(ContainerArea)iter.previous();
      int ah=current.getAllocatedHeight();
      SplitResult splitResult=current.splitLines(1);
      if (splitResult.status == SplitResult.SPLIT_BREFORE_AVOID_WITH_NULL) {
        result.remove(current);
        contentHeight-=ah;
        continue;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
        result.remove(current);
        ContainerArea splitChildArea=splitResult.getResult();
        contentHeight=contentHeight - ah + splitChildArea.getAllocatedHeight();
        result.add(splitChildArea);
        status=SplitResult.SPLIT_SUCCEED_WITH_PART;
        break;
      }
 else       if (splitResult.status == SplitResult.SPLIT_SUCCEED_WITH_NULL) {
        result.remove(current);
        int preIndex=iter.previousIndex();
        if (preIndex >= 0) {
          ContainerArea prev=(ContainerArea)children.get(preIndex);
          if (prev.isPageBreakAfterAvoid()) {
            continue;
          }
 else {
            status=SplitResult.SPLIT_SUCCEED_WITH_PART;
            break;
          }
        }
 else {
          if (isPageBreakBeforeAvoid()) {
            return SplitResult.BEFORE_AVOID_WITH_NULL;
          }
 else {
            return SplitResult.SUCCEED_WITH_NULL;
          }
        }
      }
    }
    if (result.size() == 0) {
      return SplitResult.BEFORE_AVOID_WITH_NULL;
    }
  }
  if (status == SplitResult.SPLIT_SUCCEED_WITH_PART) {
    newContainer=cloneArea();
    for (int i=0; i < result.size(); i++) {
      ContainerArea child=(ContainerArea)result.get(i);
      child.setParent(newContainer);
      newContainer.addChild(child);
      children.remove(child);
    }
    newContainer.setContentHeight(contentHeight);
  }
  if (newContainer != null) {
    updateChildrenPosition();
  }
  return new SplitResult(newContainer,status);
}",0.5600862998921251
70614,"public SplitResult split(int height,boolean force) throws BirtException {
  if (force) {
    TextLineArea newArea=cloneArea();
    newArea.children.addAll(children);
    children.clear();
    this.height=0;
    return new SplitResult(newArea,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
  return SplitResult.SUCCEED_WITH_NULL;
}","public SplitResult split(int height,boolean force) throws BirtException {
  if (force) {
    TextLineArea newArea=cloneArea();
    newArea.children.addAll(children);
    children.clear();
    this.height=0;
    return new SplitResult(newArea,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
  if (pageBreakBefore == IStyle.AVOID_VALUE) {
    return SplitResult.BEFORE_AVOID_WITH_NULL;
  }
  return SplitResult.SUCCEED_WITH_NULL;
}",0.8689839572192514
70615,"/** 
 * execute the html text.
 * @param design
 * @param emitter
 */
protected IContent executeHtmlText(){
  TextItemDesign textDesign=(TextItemDesign)getDesign();
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  executeQuery();
  initializeContent(textDesign,textContent);
  processAction(textDesign,textContent);
  processBookmark(textDesign,textContent);
  processStyle(textDesign,textContent);
  processVisibility(textDesign,textContent);
  String text=evaluate(textDesign.getText());
  String textType=evaluate(textDesign.getTextType());
  HashMap exprs=TextItemDesign.extractExpression(text,textType);
  if (exprs != null && !exprs.isEmpty()) {
    HashMap results=new HashMap();
    Iterator iter=exprs.entrySet().iterator();
    while (iter.hasNext()) {
      Map.Entry entry=(Map.Entry)iter.next();
      String expr=(String)entry.getValue();
      try {
        Object value=evaluate(expr);
        results.put(entry.getKey(),value);
      }
 catch (      BirtException ex) {
        context.addException(ex);
      }
    }
    Object[] value=new Object[2];
    value[0]=null;
    value[1]=results;
    textContent.setRawValue(value);
  }
 else {
    textContent.setRawValue(new Object[]{null,null});
  }
  textContent.setRawType(IForeignContent.TEMPLATE_TYPE);
  if (context.isInFactory()) {
    handleOnCreate(textContent);
  }
  startTOCEntry(content);
  return textContent;
}","/** 
 * execute the html text.
 * @param design
 * @param emitter
 */
protected IContent executeHtmlText(){
  TextItemDesign textDesign=(TextItemDesign)getDesign();
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  executeQuery();
  initializeContent(textDesign,textContent);
  processAction(textDesign,textContent);
  processBookmark(textDesign,textContent);
  processStyle(textDesign,textContent);
  processVisibility(textDesign,textContent);
  String text=evaluate(textDesign.getText());
  String textType=evaluate(textDesign.getTextType());
  HashMap<String,String> exprs=null;
  if (textDesign.hasExpression()) {
    exprs=TextItemDesign.extractExpression(text,textType);
  }
  if (exprs != null && !exprs.isEmpty()) {
    HashMap<String,Object> results=new HashMap<String,Object>();
    Iterator<Entry<String,String>> iter=exprs.entrySet().iterator();
    while (iter.hasNext()) {
      Entry<String,String> entry=(Entry<String,String>)iter.next();
      String expr=(String)entry.getValue();
      try {
        Object value=evaluate(expr);
        results.put(entry.getKey(),value);
      }
 catch (      BirtException ex) {
        context.addException(ex);
      }
    }
    Object[] value=new Object[2];
    value[0]=null;
    value[1]=results;
    textContent.setRawValue(value);
  }
 else {
    textContent.setRawValue(new Object[]{null,null});
  }
  textContent.setRawType(IForeignContent.TEMPLATE_TYPE);
  if (context.isInFactory()) {
    handleOnCreate(textContent);
  }
  startTOCEntry(content);
  return textContent;
}",0.9464582640505488
70616,"public HashMap<String,String> getExpressions(){
  if (text == null) {
    return null;
  }
  if (exprs != null) {
    return exprs;
  }
  if (text.isExpression() || textType.isExpression()) {
    return null;
  }
  exprs=extractExpression(text.getValue(),textType.getValue());
  return exprs;
}","public HashMap<String,String> getExpressions(){
  if (text == null) {
    return null;
  }
  if (exprs != null) {
    return exprs;
  }
  if (text.isExpression() || textType.isExpression()) {
    return null;
  }
  if (!hasExpression()) {
    return null;
  }
  exprs=extractExpression(text.getValue(),textType.getValue());
  return exprs;
}",0.925984251968504
70617,"public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new Button(cmpBasic,SWT.CHECK);
{
      btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
      btnCategoryAxis.addSelectionListener(this);
      btnCategoryAxis.setSelection(getAxisForProcessing().isCategoryAxis());
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    }
    btnReverse=new Button(cmpBasic,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnCategoryAxis.setLayoutData(gd);
      btnReverse.setText(Messages.getString(""String_Node_Str""));
      btnReverse.addSelectionListener(this);
      btnReverse.setSelection(((ChartWithAxes)getChart()).isReverseCategory());
      btnReverse.setEnabled(btnCategoryAxis.getSelection());
    }
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getAxisForProcessing().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=250;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.setSelection(getChart().getTitle().isVisible());
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getAxisForProcessing().getTitle().isVisible());
  }
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNFormatSpecifier);
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setImage(UIHelper.getImage(""String_Node_Str""));
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.getImage().setBackground(btnFormatSpecifier.getBackground());
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=new TextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=2;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.heightHint=fdcFont.getPreferredSize().y;
    gdFDCFont.widthHint=250;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new Button(cmpLabel,SWT.CHECK);
{
    btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    btnLabelVisible.setLayoutData(gd);
    btnLabelVisible.addSelectionListener(this);
    btnLabelVisible.setSelection(getAxisForProcessing().getLabel().isVisible());
  }
  cbStaggered=new Button(cmpLabel,SWT.CHECK);
{
    Axis ax=getAxisForProcessing();
    boolean bStaggered=ax.isSetStaggered() && ax.isStaggered();
    boolean bNot3D=!isChart3D(ax);
    cbStaggered.setSelection(bNot3D && bStaggered);
    cbStaggered.setText(Messages.getString(""String_Node_Str""));
    cbStaggered.addSelectionListener(this);
    cbStaggered.setEnabled(bNot3D);
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpEditor=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditor.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginHeight=0;
      layout.marginWidth=0;
      cmpEditor.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditor,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditor,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}","public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new Button(cmpBasic,SWT.CHECK);
{
      btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
      btnCategoryAxis.addSelectionListener(this);
      btnCategoryAxis.setSelection(getAxisForProcessing().isCategoryAxis());
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    }
    btnReverse=new Button(cmpBasic,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnCategoryAxis.setLayoutData(gd);
      btnReverse.setText(Messages.getString(""String_Node_Str""));
      btnReverse.addSelectionListener(this);
      btnReverse.setSelection(((ChartWithAxes)getChart()).isReverseCategory());
      btnReverse.setEnabled(btnCategoryAxis.getSelection());
    }
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getAxisForProcessing().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=250;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.setSelection(getChart().getTitle().isVisible());
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getAxisForProcessing().getTitle().isVisible());
  }
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNFormatSpecifier);
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setImage(UIHelper.getImage(""String_Node_Str""));
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.getImage().setBackground(btnFormatSpecifier.getBackground());
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=new TextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=2;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new Button(cmpLabel,SWT.CHECK);
{
    btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    btnLabelVisible.setLayoutData(gd);
    btnLabelVisible.addSelectionListener(this);
    btnLabelVisible.setSelection(getAxisForProcessing().getLabel().isVisible());
  }
  cbStaggered=new Button(cmpLabel,SWT.CHECK);
{
    Axis ax=getAxisForProcessing();
    boolean bStaggered=ax.isSetStaggered() && ax.isStaggered();
    boolean bNot3D=!isChart3D(ax);
    cbStaggered.setSelection(bNot3D && bStaggered);
    cbStaggered.setText(Messages.getString(""String_Node_Str""));
    cbStaggered.addSelectionListener(this);
    cbStaggered.setEnabled(bNot3D);
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginTop=0;
      layout.marginBottom=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    Composite cmpEditor=new Composite(cmpEditorWithUnit,SWT.NONE);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      cmpEditor.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      FieldAssistHelper.getInstance().initDecorationMargin(layout);
      layout.marginTop=0;
      layout.marginBottom=0;
      cmpEditor.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditor,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}",0.9273057067113156
70618,"/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)cwa).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)cwa).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Scale scModel;
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<?,?> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    scModel=axaOrthogonal[j].getScale();
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,scModel,axaOrthogonal[j].getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=(LegendItemRenderingHints)seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight();
        double maxWidth=boPlot.getWidth() * AXIS_TITLE_PERCENT;
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
        dAxisTitleThickness=lbLimit.getMaxWidth();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan();
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight() * AXIS_TITLE_PERCENT;
        double maxWidth=boPlot.getWidth();
        Label laAxisTitleV=aax.getPrimaryOrthogonal().getTitle();
        if (laAxisTitleV.isVisible()) {
          laAxisTitleV=LabelImpl.copyInstance(laAxisTitleV);
          laAxisTitleV.getCaption().setValue(rtc.externalizedMessage(laAxisTitleV.getCaption().getValue()));
          LabelLimiter lbLimitV=new LabelLimiter(boPlot.getWidth() * AXIS_TITLE_PERCENT,boPlot.getWidth(),0);
          lbLimitV.computeWrapping(ids,laAxisTitleV);
          lbLimitV.limitLabelSize(ids,laAxisTitleV);
          maxWidth-=lbLimitV.getMaxWidth();
        }
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
        dAxisTitleThickness=lbLimit.getMaxHeight();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan();
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}","/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)cwa).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)cwa).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Scale scModel;
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<?,?> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    scModel=axaOrthogonal[j].getScale();
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,scModel,axaOrthogonal[j].getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=(LegendItemRenderingHints)seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight();
        double maxWidth=boPlot.getWidth() * AXIS_TITLE_PERCENT;
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
        dAxisTitleThickness=lbLimit.getMaxWidth();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan() * dPointToPixel;
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight() * AXIS_TITLE_PERCENT;
        double maxWidth=boPlot.getWidth();
        Label laAxisTitleV=aax.getPrimaryOrthogonal().getTitle();
        if (laAxisTitleV.isVisible()) {
          laAxisTitleV=LabelImpl.copyInstance(laAxisTitleV);
          laAxisTitleV.getCaption().setValue(rtc.externalizedMessage(laAxisTitleV.getCaption().getValue()));
          LabelLimiter lbLimitV=new LabelLimiter(boPlot.getWidth() * AXIS_TITLE_PERCENT,boPlot.getWidth(),0);
          lbLimitV.computeWrapping(ids,laAxisTitleV);
          lbLimitV.limitLabelSize(ids,laAxisTitleV);
          maxWidth-=lbLimitV.getMaxWidth();
        }
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
        dAxisTitleThickness=lbLimit.getMaxHeight();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan() * dPointToPixel;
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}",0.998638181972934
70619,"/** 
 * Goals: 1. Adjust the two ends of the vertical axis to fit start/end labels 2. Compute the horizontal co-ordinate for the axis
 * @param dBlockX
 * @param dBlockWidth
 * @param aax
 * @return
 */
protected final double adjustHorizontal(double dBlockX,double dBlockWidth,AllAxes aax) throws ChartException, IllegalArgumentException {
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  final AutoScale scX=axPH.getScale();
  final AutoScale scY=axPV.getScale();
  final int iXLabelLocation=axPH.getLabelPosition();
  final int iYLabelLocation=axPV.getLabelPosition();
  final int iYTitleLocation=axPV.getTitlePosition();
  final Label laXAxisLabels=axPH.getLabel();
  final Label laYAxisLabels=axPV.getLabel();
  final Label laYAxisTitle=axPV.getTitle();
  final int iYTickStyle=axPV.getCombinedTickStyle();
  final IntersectionValue iv=axPV.getIntersectionValue();
  final boolean bTicksLeft=(iYTickStyle & TICK_LEFT) == TICK_LEFT;
  final boolean bTicksRight=(iYTickStyle & TICK_RIGHT) == TICK_RIGHT;
  final double dAppliedYAxisPlotSpacing=(iv.iType == IConstants.MAX || iv.iType == IConstants.MIN) && !aax.getPrimaryOrthogonal().getModelAxis().isLabelWithinAxes() ? dYAxisPlotSpacing : 0;
  double dStart=scY.getStart(), dEnd=scY.getEnd();
  scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
  if (!scY.isStepFixed()) {
    final Object[] oaMinMax=scY.getMinMax();
    while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
      if (!scY.zoomOut()) {
        break;
      }
      scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
      int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
      if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
        break;
      }
    }
  }
  double dYAxisLabelsThickness=scY.computeAxisLabelThickness(ids,axPV.getLabel(),VERTICAL);
  double[] dDecorationThickness={0,0};
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<Series,LegendItemRenderingHints> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < sea.length; i++) {
    LegendItemRenderingHints lirh=seriesRenderingHints.get(sea[i]);
    if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
      IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(axPV);
      if (iad != null) {
        double[] thickness=iad.computeDecorationThickness(ids,axPV);
        if (thickness[0] > dDecorationThickness[0]) {
          dDecorationThickness[0]=thickness[0];
        }
        if (thickness[1] > dDecorationThickness[1]) {
          dDecorationThickness[1]=thickness[1];
        }
      }
    }
  }
  double dYAxisTitleThickness=0;
  if (laYAxisTitle.isVisible()) {
    final String sPreviousValue=laYAxisTitle.getCaption().getValue();
    laYAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
    double maxWidth=AXIS_TITLE_PERCENT * boPlot.getWidth();
    double maxHeight=boPlot.getHeight();
    LabelLimiter lblLimit=new LabelLimiter(maxWidth,maxHeight,0);
    lblLimit.computeWrapping(ids,laYAxisTitle);
    lblLimit=lblLimit.limitLabelSize(ids,laYAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
    putLabelLimiter(axPV.getModelAxis().getTitle(),lblLimit);
    dYAxisTitleThickness=lblLimit.getMaxWidth();
    laYAxisTitle.getCaption().setValue(sPreviousValue);
  }
  double dX=getLocation(scX,iv), dX1=dX, dX2=dX;
  double dWTotal=Math.abs(scX.getStart() - scX.getEnd());
  if (axPV.getModelAxis().isSetLabelSpan()) {
    double dFixedLabelThickness=axPV.getModelAxis().getLabelSpan();
    if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
      if (dYAxisLabelsThickness + dYAxisTitleThickness > dFixedLabelThickness) {
        axPV.setShowLabels(false);
      }
      if (dYAxisTitleThickness > dFixedLabelThickness) {
        laYAxisTitle.setVisible(false);
        dYAxisTitleThickness=0;
      }
      dYAxisLabelsThickness=dFixedLabelThickness;
    }
  }
  if (iv.iType == IConstants.MIN) {
    if (scX.getDirection() == BACKWARD) {
      dX=getLocation(scX,IntersectionValue.MAX_VALUE);
    }
    dX-=dAppliedYAxisPlotSpacing;
    dX1=dX;
    dX2=dX;
    double dTickSize=getTickSize();
    if (bTicksLeft && dTickSize <= dWTotal) {
      dX1-=getTickSize();
      dWTotal-=dTickSize;
    }
 else {
      dTickSize=0;
    }
    double dW1=0, dW2=0;
    if (iYLabelLocation == LEFT) {
      dW1=Math.max(dYAxisLabelsThickness,dDecorationThickness[0]);
      dW2=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
    }
 else     if (iYLabelLocation == RIGHT) {
      dW1=dDecorationThickness[0];
      dW2=Math.max((bTicksRight ? getTickSize() : 0) + dYAxisLabelsThickness,dAppliedYAxisPlotSpacing);
    }
    if (dW1 + dW2 <= dWTotal) {
      dX1-=dW1;
      dX2+=dW2;
      dWTotal-=(dW1 + dW2);
    }
 else {
      axPV.setShowLabels(false);
    }
    if (iYTitleLocation == LEFT) {
      dX1-=dYAxisTitleThickness;
    }
 else     if (iYTitleLocation == RIGHT) {
      dX2+=dYAxisTitleThickness;
    }
    if (dX1 < dBlockX) {
      final double dDelta=(dBlockX - dX1);
      dX1=dBlockX;
      dX+=dDelta;
      dX2+=dDelta;
    }
    final double dDeltaX1=dX - dX1;
    final double dDeltaX2=dX2 - dX;
    if (iYLabelLocation == RIGHT) {
      dX2=(dX + dAppliedYAxisPlotSpacing);
    }
    dYAxisLabelsThickness=dX2 - dX1;
    scX.computeAxisStartEndShifts(ids,laXAxisLabels,HORIZONTAL,iXLabelLocation,aax);
    boolean startEndChanged=false;
    if (scX.getDirection() == BACKWARD) {
      if (dYAxisLabelsThickness > scX.getEndShift()) {
        dEnd=dX2;
        startEndChanged=true;
      }
 else {
        dEnd=scX.getEnd();
      }
      dStart=scX.getStart();
    }
 else {
      if (dYAxisLabelsThickness > scX.getStartShift()) {
        dStart=dX2;
        startEndChanged=true;
      }
 else {
        dStart=scX.getStart();
      }
      dEnd=scX.getEnd();
    }
    scX.resetShifts();
    scX.setEndPoints(dStart,dEnd);
    if (scX.getDirection() == BACKWARD) {
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
    }
 else {
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
    }
    if (!scX.isStepFixed()) {
      final Object[] oaMinMax=scX.getMinMax();
      while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
        if (!scX.zoomOut()) {
          break;
        }
        scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        int tickCount;
        if (scX.getDirection() == BACKWARD) {
          tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
        }
 else {
          tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
        }
        if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
          break;
        }
      }
    }
    if (scX.getDirection() == BACKWARD) {
      if (dYAxisLabelsThickness < scX.getEndShift()) {
        dX=scX.getEnd() - (dX2 - dX);
      }
    }
 else {
      if (dYAxisLabelsThickness < scX.getStartShift()) {
        dX=scX.getStart() - (dX2 - dX);
      }
    }
    dX-=insCA.getLeft();
    dX2=dX + dDeltaX2;
    dX1=dX - dDeltaX1;
    axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  }
 else   if (iv.iType == IConstants.MAX) {
    if (scX.getDirection() == BACKWARD) {
      dX=getLocation(scX,IntersectionValue.MIN_VALUE);
    }
    dX+=dAppliedYAxisPlotSpacing;
    dWTotal-=dAppliedYAxisPlotSpacing;
    dX1=dX;
    dX2=dX;
    if (bTicksRight && getTickSize() <= dWTotal) {
      dX2+=getTickSize();
      dWTotal-=getTickSize();
    }
 else {
    }
    double dW1=0, dW2=0;
    if (iYLabelLocation == RIGHT) {
      dW1=Math.max((bTicksLeft ? getTickSize() : 0) + dDecorationThickness[0],dAppliedYAxisPlotSpacing);
      dW2=Math.max(dYAxisLabelsThickness,dDecorationThickness[1]);
    }
 else     if (iYLabelLocation == LEFT) {
      dW1=Math.max((bTicksLeft ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[0]),dAppliedYAxisPlotSpacing);
      dW2=dDecorationThickness[1];
    }
    if (dW1 + dW2 <= dWTotal) {
      dX1-=dW1;
      dX2+=dW2;
      dWTotal-=(dW1 + dW2);
    }
 else {
      axPV.setShowLabels(false);
    }
    if (iYTitleLocation == RIGHT) {
      dX2+=dYAxisTitleThickness;
    }
 else     if (iYTitleLocation == LEFT) {
      dX1-=dYAxisTitleThickness;
    }
    if (dX2 > dBlockX + dBlockWidth) {
      final double dDelta=dX2 - (dBlockX + dBlockWidth);
      dX2=dBlockX + dBlockWidth;
      dX-=dDelta;
      dX1-=dDelta;
    }
    final double dDeltaX1=dX - dX1;
    final double dDeltaX2=dX2 - dX;
    if (iYLabelLocation == LEFT) {
      dX1=(dX - dAppliedYAxisPlotSpacing);
    }
    dYAxisLabelsThickness=dX2 - dX1;
    scX.computeAxisStartEndShifts(ids,laXAxisLabels,HORIZONTAL,iXLabelLocation,aax);
    boolean startEndChanged=false;
    if (scX.getDirection() == BACKWARD) {
      if (dYAxisLabelsThickness > scX.getStartShift()) {
        dStart=dX1;
        startEndChanged=true;
      }
 else {
        dStart=scX.getStart();
      }
      dEnd=scX.getEnd();
    }
 else {
      if (dYAxisLabelsThickness > scX.getEndShift()) {
        dEnd=dX1;
        startEndChanged=true;
      }
 else {
        dEnd=scX.getEnd();
      }
      dStart=scX.getStart();
    }
    scX.resetShifts();
    scX.setEndPoints(dStart,dEnd);
    if (scX.getDirection() == BACKWARD) {
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
    }
 else {
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
    }
    if (!scX.isStepFixed()) {
      final Object[] oaMinMax=scX.getMinMax();
      while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
        if (!scX.zoomOut()) {
          break;
        }
        scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        int tickCount;
        if (scX.getDirection() == BACKWARD) {
          tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
        }
 else {
          tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
        }
        if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
          break;
        }
      }
    }
    if (scX.getDirection() == BACKWARD) {
      if (dYAxisLabelsThickness < scX.getStartShift()) {
        dX=scX.getStart() - (dX1 - dX);
      }
    }
 else {
      if (dYAxisLabelsThickness < scX.getEndShift()) {
        dX=scX.getEnd() - (dX1 - dX);
      }
    }
    dX+=insCA.getRight();
    dX2=dX + dDeltaX2;
    dX1=dX - dDeltaX1;
    axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  }
 else {
    double dDeltaX1=0, dDeltaX2=0;
    if (iYTitleLocation == RIGHT) {
      dX2+=dYAxisTitleThickness;
    }
 else     if (iYTitleLocation == LEFT) {
      dX1-=dYAxisTitleThickness;
    }
    double dW1=0, dW2=0;
    if (iYLabelLocation == LEFT) {
      dW1=(bTicksLeft ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[0]);
      dW2=(bTicksRight ? getTickSize() : 0);
      if (dW1 + dW2 <= dWTotal) {
        dX1-=dW1;
        dX2+=dW2;
        dWTotal-=(dW1 + dW2);
      }
 else {
        axPV.setShowLabels(false);
      }
      dDeltaX1=dX - dX1;
      dDeltaX2=dX2 - dX;
      if (dX1 < dBlockX) {
        final Object[] oaMinMax=scX.getMinMax();
        boolean bForceBreak=false;
        do {
          scX.setEndPoints(scX.getStart() - scX.getStartShift(),scX.getEnd() + scX.getEndShift());
          scX.resetShifts();
          double[] da=scX.getEndPoints();
          double dT_RI=dBlockX - dX1;
          if (scX.getDirection() == BACKWARD) {
            double dAMin_AMax=da[0] - da[1];
            double dAMax_RI=Math.abs(da[0] - dX);
            double dDelta=(dT_RI / dAMax_RI) * dAMin_AMax;
            dEnd=da[1] + dDelta;
            dStart=da[0];
            if (dEnd < dBlockX) {
              dEnd=dBlockX;
              bForceBreak=true;
            }
          }
 else {
            double dAMin_AMax=da[1] - da[0];
            double dAMax_RI=Math.abs(da[1] - dX);
            double dDelta=(dT_RI / dAMax_RI) * dAMin_AMax;
            dStart=da[0] + dDelta;
            dEnd=da[1];
            if (dStart < dBlockX) {
              dStart=dBlockX;
              bForceBreak=true;
            }
          }
          scX.setEndPoints(dStart,dEnd);
          scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
          while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
            if (!scX.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
            if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
          dX=getLocation(scX,iv);
          dX1=dX - dDeltaX1;
        }
 while (Math.abs(dX1 - dBlockX) > 1 && !bForceBreak);
      }
 else {
        dStart=scX.getStart();
        dEnd=scX.getEnd();
        scX.setEndPoints(dStart,dEnd);
        scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
        if (!scX.isStepFixed()) {
          final Object[] oaMinMax=scX.getMinMax();
          while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
            if (!scX.zoomOut()) {
              break;
            }
            scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
            if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              break;
            }
          }
        }
        dX=getLocation(scX,iv);
      }
      dX1=dX - dDeltaX1;
      dX2=dX + dDeltaX2;
    }
 else     if (iYLabelLocation == RIGHT) {
      dW1=(bTicksLeft ? getTickSize() : 0);
      dW2=(bTicksRight ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[1]);
      if (dW1 + dW2 <= dWTotal) {
        dX1-=dW1;
        dX2+=dW2;
        dWTotal-=(dW1 + dW2);
      }
      dDeltaX1=dX - dX1;
      dDeltaX2=dX2 - dX;
      if (dX2 > dBlockX + dBlockWidth) {
        final Object[] oaMinMax=scX.getMinMax();
        boolean bForceBreak=false;
        do {
          scX.setEndPoints(scX.getStart() - scX.getStartShift(),scX.getEnd() + scX.getEndShift());
          scX.resetShifts();
          double[] da=scX.getEndPoints();
          double dT_RI=dX2 - (dBlockX + dBlockWidth);
          if (scX.getDirection() == BACKWARD) {
            double dAMin_AMax=da[0] - da[1];
            double dAMin_RI=Math.abs(dX - da[1]);
            double dDelta=Math.abs(dT_RI / dAMin_RI) * dAMin_AMax;
            dStart=da[0] - dDelta;
            dEnd=da[1];
            if (dStart > dBlockX + dBlockWidth) {
              dStart=dBlockX + dBlockWidth;
              bForceBreak=true;
            }
          }
 else {
            double dAMin_AMax=da[1] - da[0];
            double dAMin_RI=Math.abs(dX - da[0]);
            double dDelta=(dT_RI / dAMin_RI) * dAMin_AMax;
            dEnd=da[1] - dDelta;
            dStart=da[0];
            if (dEnd > dBlockX + dBlockWidth) {
              dEnd=dBlockX + dBlockWidth;
              bForceBreak=true;
            }
          }
          scX.setEndPoints(dStart,dEnd);
          scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
          if (!scX.isStepFixed()) {
            while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
              if (!scX.zoomOut()) {
                bForceBreak=true;
                break;
              }
              scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
              int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
              if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
                bForceBreak=true;
                break;
              }
            }
          }
          dX=getLocation(scX,iv);
          dX2=dX + dDeltaX2;
        }
 while (Math.abs(dX2 - (dBlockX + dBlockWidth)) > 1 && !bForceBreak);
      }
 else {
        dStart=scX.getStart();
        dEnd=scX.getEnd();
        scX.setEndPoints(dStart,dEnd);
        scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
        if (!scX.isStepFixed()) {
          final Object[] oaMinMax=scX.getMinMax();
          while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
            if (!scX.zoomOut()) {
              break;
            }
            scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
            if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              break;
            }
          }
        }
        dX=getLocation(scX,iv);
      }
      dX2=dX + dDeltaX2;
      dX1=dX - dDeltaX1;
    }
    axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  }
  return dX;
}","/** 
 * Goals: 1. Adjust the two ends of the vertical axis to fit start/end labels 2. Compute the horizontal co-ordinate for the axis
 * @param dBlockX
 * @param dBlockWidth
 * @param aax
 * @return
 */
protected final double adjustHorizontal(double dBlockX,double dBlockWidth,AllAxes aax) throws ChartException, IllegalArgumentException {
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  final AutoScale scX=axPH.getScale();
  final AutoScale scY=axPV.getScale();
  final int iXLabelLocation=axPH.getLabelPosition();
  final int iYLabelLocation=axPV.getLabelPosition();
  final int iYTitleLocation=axPV.getTitlePosition();
  final Label laXAxisLabels=axPH.getLabel();
  final Label laYAxisLabels=axPV.getLabel();
  final Label laYAxisTitle=axPV.getTitle();
  final int iYTickStyle=axPV.getCombinedTickStyle();
  final IntersectionValue iv=axPV.getIntersectionValue();
  final boolean bTicksLeft=(iYTickStyle & TICK_LEFT) == TICK_LEFT;
  final boolean bTicksRight=(iYTickStyle & TICK_RIGHT) == TICK_RIGHT;
  final double dAppliedYAxisPlotSpacing=(iv.iType == IConstants.MAX || iv.iType == IConstants.MIN) && !aax.getPrimaryOrthogonal().getModelAxis().isLabelWithinAxes() ? dYAxisPlotSpacing : 0;
  double dStart=scY.getStart(), dEnd=scY.getEnd();
  scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
  if (!scY.isStepFixed()) {
    final Object[] oaMinMax=scY.getMinMax();
    while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
      if (!scY.zoomOut()) {
        break;
      }
      scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
      int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
      if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
        break;
      }
    }
  }
  double dYAxisLabelsThickness=scY.computeAxisLabelThickness(ids,axPV.getLabel(),VERTICAL);
  double[] dDecorationThickness={0,0};
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<Series,LegendItemRenderingHints> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < sea.length; i++) {
    LegendItemRenderingHints lirh=seriesRenderingHints.get(sea[i]);
    if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
      IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(axPV);
      if (iad != null) {
        double[] thickness=iad.computeDecorationThickness(ids,axPV);
        if (thickness[0] > dDecorationThickness[0]) {
          dDecorationThickness[0]=thickness[0];
        }
        if (thickness[1] > dDecorationThickness[1]) {
          dDecorationThickness[1]=thickness[1];
        }
      }
    }
  }
  double dYAxisTitleThickness=0;
  if (laYAxisTitle.isVisible()) {
    final String sPreviousValue=laYAxisTitle.getCaption().getValue();
    laYAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
    double maxWidth=AXIS_TITLE_PERCENT * boPlot.getWidth();
    double maxHeight=boPlot.getHeight();
    LabelLimiter lblLimit=new LabelLimiter(maxWidth,maxHeight,0);
    lblLimit.computeWrapping(ids,laYAxisTitle);
    lblLimit=lblLimit.limitLabelSize(ids,laYAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
    putLabelLimiter(axPV.getModelAxis().getTitle(),lblLimit);
    dYAxisTitleThickness=lblLimit.getMaxWidth();
    laYAxisTitle.getCaption().setValue(sPreviousValue);
  }
  double dX=getLocation(scX,iv), dX1=dX, dX2=dX;
  double dWTotal=Math.abs(scX.getStart() - scX.getEnd());
  if (axPV.getModelAxis().isSetLabelSpan()) {
    double dFixedLabelThickness=axPV.getModelAxis().getLabelSpan() * dPointToPixel;
    if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
      if (dYAxisLabelsThickness + dYAxisTitleThickness > dFixedLabelThickness) {
        axPV.setShowLabels(false);
      }
      if (dYAxisTitleThickness > dFixedLabelThickness) {
        laYAxisTitle.setVisible(false);
        dYAxisTitleThickness=0;
      }
      dYAxisLabelsThickness=dFixedLabelThickness;
    }
  }
  if (iv.iType == IConstants.MIN) {
    if (scX.getDirection() == BACKWARD) {
      dX=getLocation(scX,IntersectionValue.MAX_VALUE);
    }
    dX-=dAppliedYAxisPlotSpacing;
    dX1=dX;
    dX2=dX;
    double dTickSize=getTickSize();
    if (bTicksLeft && dTickSize <= dWTotal) {
      dX1-=getTickSize();
      dWTotal-=dTickSize;
    }
 else {
      dTickSize=0;
    }
    double dW1=0, dW2=0;
    if (iYLabelLocation == LEFT) {
      dW1=Math.max(dYAxisLabelsThickness,dDecorationThickness[0]);
      dW2=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
    }
 else     if (iYLabelLocation == RIGHT) {
      dW1=dDecorationThickness[0];
      dW2=Math.max((bTicksRight ? getTickSize() : 0) + dYAxisLabelsThickness,dAppliedYAxisPlotSpacing);
    }
    if (dW1 + dW2 <= dWTotal) {
      dX1-=dW1;
      dX2+=dW2;
      dWTotal-=(dW1 + dW2);
    }
 else {
      axPV.setShowLabels(false);
    }
    if (iYTitleLocation == LEFT) {
      dX1-=dYAxisTitleThickness;
    }
 else     if (iYTitleLocation == RIGHT) {
      dX2+=dYAxisTitleThickness;
    }
    if (dX1 < dBlockX) {
      final double dDelta=(dBlockX - dX1);
      dX1=dBlockX;
      dX+=dDelta;
      dX2+=dDelta;
    }
    final double dDeltaX1=dX - dX1;
    final double dDeltaX2=dX2 - dX;
    if (iYLabelLocation == RIGHT) {
      dX2=(dX + dAppliedYAxisPlotSpacing);
    }
    dYAxisLabelsThickness=dX2 - dX1;
    scX.computeAxisStartEndShifts(ids,laXAxisLabels,HORIZONTAL,iXLabelLocation,aax);
    boolean startEndChanged=false;
    if (scX.getDirection() == BACKWARD) {
      if (dYAxisLabelsThickness > scX.getEndShift()) {
        dEnd=dX2;
        startEndChanged=true;
      }
 else {
        dEnd=scX.getEnd();
      }
      dStart=scX.getStart();
    }
 else {
      if (dYAxisLabelsThickness > scX.getStartShift()) {
        dStart=dX2;
        startEndChanged=true;
      }
 else {
        dStart=scX.getStart();
      }
      dEnd=scX.getEnd();
    }
    scX.resetShifts();
    scX.setEndPoints(dStart,dEnd);
    if (scX.getDirection() == BACKWARD) {
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
    }
 else {
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
    }
    if (!scX.isStepFixed()) {
      final Object[] oaMinMax=scX.getMinMax();
      while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
        if (!scX.zoomOut()) {
          break;
        }
        scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        int tickCount;
        if (scX.getDirection() == BACKWARD) {
          tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
        }
 else {
          tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
        }
        if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
          break;
        }
      }
    }
    if (scX.getDirection() == BACKWARD) {
      if (dYAxisLabelsThickness < scX.getEndShift()) {
        dX=scX.getEnd() - (dX2 - dX);
      }
    }
 else {
      if (dYAxisLabelsThickness < scX.getStartShift()) {
        dX=scX.getStart() - (dX2 - dX);
      }
    }
    dX-=insCA.getLeft();
    dX2=dX + dDeltaX2;
    dX1=dX - dDeltaX1;
    axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  }
 else   if (iv.iType == IConstants.MAX) {
    if (scX.getDirection() == BACKWARD) {
      dX=getLocation(scX,IntersectionValue.MIN_VALUE);
    }
    dX+=dAppliedYAxisPlotSpacing;
    dWTotal-=dAppliedYAxisPlotSpacing;
    dX1=dX;
    dX2=dX;
    if (bTicksRight && getTickSize() <= dWTotal) {
      dX2+=getTickSize();
      dWTotal-=getTickSize();
    }
 else {
    }
    double dW1=0, dW2=0;
    if (iYLabelLocation == RIGHT) {
      dW1=Math.max((bTicksLeft ? getTickSize() : 0) + dDecorationThickness[0],dAppliedYAxisPlotSpacing);
      dW2=Math.max(dYAxisLabelsThickness,dDecorationThickness[1]);
    }
 else     if (iYLabelLocation == LEFT) {
      dW1=Math.max((bTicksLeft ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[0]),dAppliedYAxisPlotSpacing);
      dW2=dDecorationThickness[1];
    }
    if (dW1 + dW2 <= dWTotal) {
      dX1-=dW1;
      dX2+=dW2;
      dWTotal-=(dW1 + dW2);
    }
 else {
      axPV.setShowLabels(false);
    }
    if (iYTitleLocation == RIGHT) {
      dX2+=dYAxisTitleThickness;
    }
 else     if (iYTitleLocation == LEFT) {
      dX1-=dYAxisTitleThickness;
    }
    if (dX2 > dBlockX + dBlockWidth) {
      final double dDelta=dX2 - (dBlockX + dBlockWidth);
      dX2=dBlockX + dBlockWidth;
      dX-=dDelta;
      dX1-=dDelta;
    }
    final double dDeltaX1=dX - dX1;
    final double dDeltaX2=dX2 - dX;
    if (iYLabelLocation == LEFT) {
      dX1=(dX - dAppliedYAxisPlotSpacing);
    }
    dYAxisLabelsThickness=dX2 - dX1;
    scX.computeAxisStartEndShifts(ids,laXAxisLabels,HORIZONTAL,iXLabelLocation,aax);
    boolean startEndChanged=false;
    if (scX.getDirection() == BACKWARD) {
      if (dYAxisLabelsThickness > scX.getStartShift()) {
        dStart=dX1;
        startEndChanged=true;
      }
 else {
        dStart=scX.getStart();
      }
      dEnd=scX.getEnd();
    }
 else {
      if (dYAxisLabelsThickness > scX.getEndShift()) {
        dEnd=dX1;
        startEndChanged=true;
      }
 else {
        dEnd=scX.getEnd();
      }
      dStart=scX.getStart();
    }
    scX.resetShifts();
    scX.setEndPoints(dStart,dEnd);
    if (scX.getDirection() == BACKWARD) {
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
    }
 else {
      scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
    }
    if (!scX.isStepFixed()) {
      final Object[] oaMinMax=scX.getMinMax();
      while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
        if (!scX.zoomOut()) {
          break;
        }
        scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        int tickCount;
        if (scX.getDirection() == BACKWARD) {
          tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,!startEndChanged,true,aax);
        }
 else {
          tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,!startEndChanged,aax);
        }
        if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
          break;
        }
      }
    }
    if (scX.getDirection() == BACKWARD) {
      if (dYAxisLabelsThickness < scX.getStartShift()) {
        dX=scX.getStart() - (dX1 - dX);
      }
    }
 else {
      if (dYAxisLabelsThickness < scX.getEndShift()) {
        dX=scX.getEnd() - (dX1 - dX);
      }
    }
    dX+=insCA.getRight();
    dX2=dX + dDeltaX2;
    dX1=dX - dDeltaX1;
    axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  }
 else {
    double dDeltaX1=0, dDeltaX2=0;
    if (iYTitleLocation == RIGHT) {
      dX2+=dYAxisTitleThickness;
    }
 else     if (iYTitleLocation == LEFT) {
      dX1-=dYAxisTitleThickness;
    }
    double dW1=0, dW2=0;
    if (iYLabelLocation == LEFT) {
      dW1=(bTicksLeft ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[0]);
      dW2=(bTicksRight ? getTickSize() : 0);
      if (dW1 + dW2 <= dWTotal) {
        dX1-=dW1;
        dX2+=dW2;
        dWTotal-=(dW1 + dW2);
      }
 else {
        axPV.setShowLabels(false);
      }
      dDeltaX1=dX - dX1;
      dDeltaX2=dX2 - dX;
      if (dX1 < dBlockX) {
        final Object[] oaMinMax=scX.getMinMax();
        boolean bForceBreak=false;
        do {
          scX.setEndPoints(scX.getStart() - scX.getStartShift(),scX.getEnd() + scX.getEndShift());
          scX.resetShifts();
          double[] da=scX.getEndPoints();
          double dT_RI=dBlockX - dX1;
          if (scX.getDirection() == BACKWARD) {
            double dAMin_AMax=da[0] - da[1];
            double dAMax_RI=Math.abs(da[0] - dX);
            double dDelta=(dT_RI / dAMax_RI) * dAMin_AMax;
            dEnd=da[1] + dDelta;
            dStart=da[0];
            if (dEnd < dBlockX) {
              dEnd=dBlockX;
              bForceBreak=true;
            }
          }
 else {
            double dAMin_AMax=da[1] - da[0];
            double dAMax_RI=Math.abs(da[1] - dX);
            double dDelta=(dT_RI / dAMax_RI) * dAMin_AMax;
            dStart=da[0] + dDelta;
            dEnd=da[1];
            if (dStart < dBlockX) {
              dStart=dBlockX;
              bForceBreak=true;
            }
          }
          scX.setEndPoints(dStart,dEnd);
          scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
          while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
            if (!scX.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
            if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
          dX=getLocation(scX,iv);
          dX1=dX - dDeltaX1;
        }
 while (Math.abs(dX1 - dBlockX) > 1 && !bForceBreak);
      }
 else {
        dStart=scX.getStart();
        dEnd=scX.getEnd();
        scX.setEndPoints(dStart,dEnd);
        scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
        if (!scX.isStepFixed()) {
          final Object[] oaMinMax=scX.getMinMax();
          while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
            if (!scX.zoomOut()) {
              break;
            }
            scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
            if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              break;
            }
          }
        }
        dX=getLocation(scX,iv);
      }
      dX1=dX - dDeltaX1;
      dX2=dX + dDeltaX2;
    }
 else     if (iYLabelLocation == RIGHT) {
      dW1=(bTicksLeft ? getTickSize() : 0);
      dW2=(bTicksRight ? getTickSize() : 0) + Math.max(dYAxisLabelsThickness,dDecorationThickness[1]);
      if (dW1 + dW2 <= dWTotal) {
        dX1-=dW1;
        dX2+=dW2;
        dWTotal-=(dW1 + dW2);
      }
      dDeltaX1=dX - dX1;
      dDeltaX2=dX2 - dX;
      if (dX2 > dBlockX + dBlockWidth) {
        final Object[] oaMinMax=scX.getMinMax();
        boolean bForceBreak=false;
        do {
          scX.setEndPoints(scX.getStart() - scX.getStartShift(),scX.getEnd() + scX.getEndShift());
          scX.resetShifts();
          double[] da=scX.getEndPoints();
          double dT_RI=dX2 - (dBlockX + dBlockWidth);
          if (scX.getDirection() == BACKWARD) {
            double dAMin_AMax=da[0] - da[1];
            double dAMin_RI=Math.abs(dX - da[1]);
            double dDelta=Math.abs(dT_RI / dAMin_RI) * dAMin_AMax;
            dStart=da[0] - dDelta;
            dEnd=da[1];
            if (dStart > dBlockX + dBlockWidth) {
              dStart=dBlockX + dBlockWidth;
              bForceBreak=true;
            }
          }
 else {
            double dAMin_AMax=da[1] - da[0];
            double dAMin_RI=Math.abs(dX - da[0]);
            double dDelta=(dT_RI / dAMin_RI) * dAMin_AMax;
            dEnd=da[1] - dDelta;
            dStart=da[0];
            if (dEnd > dBlockX + dBlockWidth) {
              dEnd=dBlockX + dBlockWidth;
              bForceBreak=true;
            }
          }
          scX.setEndPoints(dStart,dEnd);
          scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
          if (!scX.isStepFixed()) {
            while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
              if (!scX.zoomOut()) {
                bForceBreak=true;
                break;
              }
              scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
              int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
              if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
                bForceBreak=true;
                break;
              }
            }
          }
          dX=getLocation(scX,iv);
          dX2=dX + dDeltaX2;
        }
 while (Math.abs(dX2 - (dBlockX + dBlockWidth)) > 1 && !bForceBreak);
      }
 else {
        dStart=scX.getStart();
        dEnd=scX.getEnd();
        scX.setEndPoints(dStart,dEnd);
        scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
        if (!scX.isStepFixed()) {
          final Object[] oaMinMax=scX.getMinMax();
          while (!scX.checkFit(ids,laXAxisLabels,iXLabelLocation)) {
            if (!scX.zoomOut()) {
              break;
            }
            scX.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scX.computeTicks(ids,laXAxisLabels,iXLabelLocation,HORIZONTAL,dStart,dEnd,true,aax);
            if (scX.getUnit() != null && asInteger(scX.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              break;
            }
          }
        }
        dX=getLocation(scX,iv);
      }
      dX2=dX + dDeltaX2;
      dX1=dX - dDeltaX1;
    }
    axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  }
  return dX;
}",0.9995540939746947
70620,"/** 
 * @param dBlockY
 * @param dBlockHeight
 * @param aax
 * @return
 */
protected final double adjustVerticalDueToHorizontal(double dBlockY,double dBlockHeight,AllAxes aax) throws ChartException, IllegalArgumentException {
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  final AutoScale scX=axPH.getScale();
  final AutoScale scY=axPV.getScale();
  final int iXLabelLocation=axPH.getLabelPosition();
  final int iYLabelLocation=axPV.getLabelPosition();
  final int iXTitleLocation=axPH.getTitlePosition();
  final Label laXAxisTitle=axPH.getTitle();
  final Label laYAxisLabels=axPV.getLabel();
  final int iXTickStyle=axPH.getCombinedTickStyle();
  final IntersectionValue iv=axPH.getIntersectionValue();
  double dXAxisLabelsThickness=scX.computeAxisLabelThickness(ids,axPH.getLabel(),HORIZONTAL);
  double[] dDecorationThickness={0,0};
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<Series,LegendItemRenderingHints> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < sea.length; i++) {
    LegendItemRenderingHints lirh=seriesRenderingHints.get(sea[i]);
    if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
      IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(axPH);
      if (iad != null) {
        double[] thickness=iad.computeDecorationThickness(ids,axPH);
        if (thickness[0] > dDecorationThickness[0]) {
          dDecorationThickness[0]=thickness[0];
        }
        if (thickness[1] > dDecorationThickness[1]) {
          dDecorationThickness[1]=thickness[1];
        }
      }
    }
  }
  double dXAxisTitleThickness=0;
  if (laXAxisTitle.isVisible()) {
    final String sPreviousValue=laXAxisTitle.getCaption().getValue();
    laXAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
    double maxWidth=Math.abs(scX.getEnd() - scX.getStart());
    double maxHeight=AXIS_TITLE_PERCENT * boPlot.getHeight();
    LabelLimiter lblLimit=new LabelLimiter(maxWidth,maxHeight,0);
    lblLimit.computeWrapping(ids,laXAxisTitle);
    lblLimit=lblLimit.limitLabelSize(ids,laXAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
    putLabelLimiter(axPH.getModelAxis().getTitle(),lblLimit);
    dXAxisTitleThickness=lblLimit.getMaxHeight();
    laXAxisTitle.getCaption().setValue(sPreviousValue);
  }
  double dHTotal=Math.abs(scY.getStart() - scY.getEnd());
  if (axPH.getModelAxis().isSetLabelSpan()) {
    double dFixedLabelThickness=axPH.getModelAxis().getLabelSpan();
    if (dFixedLabelThickness < dHTotal - 2 * getTickSize()) {
      if (dXAxisTitleThickness + dXAxisLabelsThickness > dFixedLabelThickness) {
        axPH.setShowLabels(false);
      }
      if (dXAxisTitleThickness > dFixedLabelThickness) {
        laXAxisTitle.setVisible(false);
        dXAxisLabelsThickness=0;
      }
      dXAxisLabelsThickness=dFixedLabelThickness;
    }
  }
  double dY=getLocation(scY,iv), dY1=dY, dY2=dY;
  final boolean bTicksAbove=(iXTickStyle & TICK_ABOVE) == TICK_ABOVE;
  final boolean bTicksBelow=(iXTickStyle & TICK_BELOW) == TICK_BELOW;
  final double dAppliedXAxisPlotSpacing=(iv.iType == IConstants.MAX || iv.iType == IConstants.MIN) ? dXAxisPlotSpacing : 0;
  final boolean bForwardScale=scY.getDirection() == FORWARD;
  if ((bForwardScale && iv.iType == IConstants.MIN) || (!bForwardScale && iv.iType == IConstants.MAX)) {
    dY-=dAppliedXAxisPlotSpacing;
    dHTotal-=dAppliedXAxisPlotSpacing;
    dY1=dY;
    dY2=dY;
    double dTickSize=getTickSize();
    if (bTicksAbove && dTickSize <= dHTotal) {
      dY1-=dTickSize;
      dHTotal-=dTickSize;
    }
 else {
      dTickSize=0;
    }
    double dH1=0;
    double dH2=0;
    if (iXLabelLocation == ABOVE) {
      dH1=Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
      dH2=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
    }
 else     if (iXLabelLocation == BELOW) {
      dH1=dDecorationThickness[0];
      dH2+=Math.max((bTicksBelow ? getTickSize() : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
    }
    if (dH1 + dH2 <= dHTotal) {
      dY1-=dH1;
      dY2+=dH2;
      dHTotal-=(dH1 + dH2);
    }
 else {
      axPH.setShowLabels(false);
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    if (dY1 < dBlockY) {
      final double dDelta=(dBlockY - dY1);
      dY1=dBlockY;
      dY+=dDelta;
      dY2+=dDelta;
    }
    double dDeltaY1=dY - dY1;
    double dDeltaY2=dY2 - dY;
    dXAxisLabelsThickness=0;
    if (iXLabelLocation == ABOVE) {
      dXAxisLabelsThickness=dY2 - dY1;
    }
 else     if (iXLabelLocation == BELOW) {
      dY2=(dY + dAppliedXAxisPlotSpacing);
      dXAxisLabelsThickness=dY2 - dY1;
    }
    if ((bForwardScale && dXAxisLabelsThickness > scY.getStartShift()) || (!bForwardScale && dXAxisLabelsThickness > scY.getEndShift())) {
      double dStart=scY.getStart(), dEnd=dY2 - scY.getEndShift();
      if (bForwardScale) {
        dStart=dY2 - scY.getStartShift();
        dEnd=scY.getEnd();
      }
      scY.resetShifts();
      scY.setEndPoints(dStart,dEnd);
      scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
      if (!scY.isStepFixed()) {
        final Object[] oaMinMax=scY.getMinMax();
        while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
          if (!scY.zoomOut()) {
            break;
          }
          scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
          int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
          if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
            break;
          }
        }
      }
    }
    dY-=insCA.getTop();
    dY1=dY - dDeltaY1;
    dY2=dY + dDeltaY2;
    axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  }
 else   if ((bForwardScale && iv.iType == IConstants.MAX) || (!bForwardScale && iv.iType == IConstants.MIN)) {
    dY+=dAppliedXAxisPlotSpacing;
    dHTotal-=dAppliedXAxisPlotSpacing;
    dY1=dY;
    dY2=dY;
    double dTickSize=getTickSize();
    if (bTicksBelow && dTickSize < dHTotal) {
      dY2+=dTickSize;
      dHTotal-=dTickSize;
    }
 else {
      dTickSize=0;
    }
    if (iXLabelLocation == ABOVE) {
      double dXLabelHeight=Math.max((bTicksAbove ? dTickSize : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
      if (dXLabelHeight + dDecorationThickness[1] < dHTotal) {
        dY1-=dXLabelHeight;
        dY2+=dDecorationThickness[1];
        dHTotal-=(dXLabelHeight + dDecorationThickness[1]);
      }
 else {
        dXLabelHeight=0;
        axPH.setShowLabels(false);
      }
    }
 else     if (iXLabelLocation == BELOW) {
      double dXLabelHeight=Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
      double dHt1=Math.max(bTicksAbove ? dTickSize : 0,dAppliedXAxisPlotSpacing);
      if (dXLabelHeight + dHt1 <= dHTotal) {
        dY2+=dXLabelHeight;
        dY1-=dHt1;
        dHTotal-=(dXLabelHeight + dHt1);
      }
 else {
        dXLabelHeight=0;
        axPH.setShowLabels(false);
      }
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    if (dY2 > dBlockY + dBlockHeight) {
      final double dDelta=(dY2 - (dBlockY + dBlockHeight));
      dY2=dBlockY + dBlockHeight;
      dY-=dDelta;
      dY1-=dDelta;
    }
    double dDeltaY1=dY - dY1;
    double dDeltaY2=dY2 - dY;
    dXAxisLabelsThickness=0;
    if (iXLabelLocation == ABOVE) {
      dY1=(dY - dAppliedXAxisPlotSpacing);
      dXAxisLabelsThickness=dY2 - dY1;
    }
 else     if (iXLabelLocation == BELOW) {
      dXAxisLabelsThickness=dY2 - dY1;
    }
    if ((bForwardScale && dXAxisLabelsThickness > scY.getEndShift()) || (!bForwardScale && dXAxisLabelsThickness > scY.getStartShift())) {
      double dStart=dY1 + scY.getStartShift(), dEnd=scY.getEnd();
      if (bForwardScale) {
        dStart=scY.getStart();
        dEnd=dY1 + scY.getEndShift();
      }
      scY.resetShifts();
      if (dStart < dEnd + 1) {
        dStart=dEnd + 1;
      }
      scY.setEndPoints(dStart,dEnd);
      scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
      if (!scY.isStepFixed()) {
        final Object[] oaMinMax=scY.getMinMax();
        while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
          if (!scY.zoomOut()) {
            break;
          }
          double dOldStep=((Number)scY.getStep()).doubleValue();
          scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
          int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
          double dNewStep=((Number)scY.getStep()).doubleValue();
          if (dNewStep < dOldStep) {
            break;
          }
          if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
            break;
          }
        }
      }
    }
    dY+=insCA.getBottom();
    dY1=dY - dDeltaY1;
    dY2=dY + dDeltaY2;
    axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  }
 else {
    double dDeltaY1=0, dDeltaY2=0;
    if (iXLabelLocation == ABOVE) {
      double dH1=(bTicksAbove ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
      double dH2=(bTicksBelow ? getTickSize() : 0);
      if (dH1 + dH2 <= dHTotal) {
        dY1-=dH1;
        dY2+=dH2;
        dHTotal-=(dH1 + dH2);
      }
 else {
        axPH.setShowLabels(false);
      }
      if (iXTitleLocation == ABOVE) {
        dY1-=dXAxisTitleThickness;
      }
 else       if (iXTitleLocation == BELOW) {
        dY2+=dXAxisTitleThickness;
      }
      dDeltaY1=dY - dY1;
      dDeltaY2=dY2 - dY;
      if (dY1 < dBlockY) {
        final Object[] oaMinMax=scY.getMinMax();
        boolean bForceBreak=false;
        do {
          scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
          scY.resetShifts();
          double[] da=scY.getEndPoints();
          double dT_RI=dBlockY - dY1;
          double dStart, dEnd;
          if (bForwardScale) {
            double dAMin_AMax=da[1] - da[0];
            double dAMin_RI=da[1] - dY;
            dEnd=da[1];
            dStart=(dT_RI / dAMin_RI) * dAMin_AMax + da[0];
            if (dStart < dBlockY) {
              dStart=dBlockY;
              bForceBreak=true;
            }
          }
 else {
            double dAMin_AMax=da[0] - da[1];
            double dAMin_RI=da[0] - dY;
            dStart=da[0];
            dEnd=(dT_RI / dAMin_RI) * dAMin_AMax + da[1];
            if (dEnd < dBlockY) {
              dEnd=dBlockY;
              bForceBreak=true;
            }
          }
          scY.setEndPoints(dStart,dEnd);
          scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
          if (!scY.isStepFixed()) {
            while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
              if (!scY.zoomOut()) {
                bForceBreak=true;
                break;
              }
              scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
              int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
              if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
                bForceBreak=true;
                break;
              }
            }
          }
          dY=getLocation(scY,iv);
          dY1=dY - dDeltaY1;
          dY2=dY + dDeltaY2;
        }
 while (Math.abs(dY1 - dBlockY) > 1 && !bForceBreak);
      }
    }
 else     if (iXLabelLocation == BELOW) {
      double dH1=(bTicksAbove ? getTickSize() : 0);
      double dH2=(bTicksBelow ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
      if (dH1 + dH2 <= dHTotal) {
        dY1-=dH1;
        dY2+=dH2;
        dHTotal-=(dH1 + dH2);
      }
      if (iXTitleLocation == ABOVE) {
        dY1-=dXAxisTitleThickness;
      }
 else       if (iXTitleLocation == BELOW) {
        dY2+=dXAxisTitleThickness;
      }
      dDeltaY1=dY - dY1;
      dDeltaY2=dY2 - dY;
      if (dY2 > dBlockY + dBlockHeight) {
        final Object[] oaMinMax=scY.getMinMax();
        boolean bForceBreak=false;
        do {
          scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
          scY.resetShifts();
          double[] da=scY.getEndPoints();
          double dX2_X1=dY2 - (dBlockY + dBlockHeight);
          double dStart, dEnd;
          if (bForwardScale) {
            double dAMin_AMax=da[1] - da[0];
            double dX2_AMax=dY - da[0];
            dEnd=da[1] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
            dStart=da[0];
            if (dEnd > dBlockY + dBlockHeight) {
              dEnd=dBlockY + dBlockHeight;
              bForceBreak=true;
            }
          }
 else {
            double dAMin_AMax=da[0] - da[1];
            double dX2_AMax=dY - da[1];
            dStart=da[0] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
            dEnd=da[1];
            if (dStart > dBlockY + dBlockHeight) {
              dStart=dBlockY + dBlockHeight;
              bForceBreak=true;
            }
          }
          if (ChartUtil.mathEqual(Math.abs(dEnd - dStart),0)) {
            bForceBreak=true;
          }
          scY.setEndPoints(dStart,dEnd);
          scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
          if (!scY.isStepFixed()) {
            while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
              if (!scY.zoomOut()) {
                bForceBreak=true;
                break;
              }
              scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
              int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
              if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
                bForceBreak=true;
                break;
              }
            }
          }
          dY=getLocation(scY,iv);
          dY2=dY + dDeltaY2;
          dY1=dY - dDeltaY1;
        }
 while (Math.abs(dY2 - (dBlockY + dBlockHeight)) > 1 && !bForceBreak);
      }
    }
    axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  }
  return dY;
}","/** 
 * @param dBlockY
 * @param dBlockHeight
 * @param aax
 * @return
 */
protected final double adjustVerticalDueToHorizontal(double dBlockY,double dBlockHeight,AllAxes aax) throws ChartException, IllegalArgumentException {
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  final AutoScale scX=axPH.getScale();
  final AutoScale scY=axPV.getScale();
  final int iXLabelLocation=axPH.getLabelPosition();
  final int iYLabelLocation=axPV.getLabelPosition();
  final int iXTitleLocation=axPH.getTitlePosition();
  final Label laXAxisTitle=axPH.getTitle();
  final Label laYAxisLabels=axPV.getLabel();
  final int iXTickStyle=axPH.getCombinedTickStyle();
  final IntersectionValue iv=axPH.getIntersectionValue();
  double dXAxisLabelsThickness=scX.computeAxisLabelThickness(ids,axPH.getLabel(),HORIZONTAL);
  double[] dDecorationThickness={0,0};
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<Series,LegendItemRenderingHints> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < sea.length; i++) {
    LegendItemRenderingHints lirh=seriesRenderingHints.get(sea[i]);
    if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
      IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(axPH);
      if (iad != null) {
        double[] thickness=iad.computeDecorationThickness(ids,axPH);
        if (thickness[0] > dDecorationThickness[0]) {
          dDecorationThickness[0]=thickness[0];
        }
        if (thickness[1] > dDecorationThickness[1]) {
          dDecorationThickness[1]=thickness[1];
        }
      }
    }
  }
  double dXAxisTitleThickness=0;
  if (laXAxisTitle.isVisible()) {
    final String sPreviousValue=laXAxisTitle.getCaption().getValue();
    laXAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
    double maxWidth=Math.abs(scX.getEnd() - scX.getStart());
    double maxHeight=AXIS_TITLE_PERCENT * boPlot.getHeight();
    LabelLimiter lblLimit=new LabelLimiter(maxWidth,maxHeight,0);
    lblLimit.computeWrapping(ids,laXAxisTitle);
    lblLimit=lblLimit.limitLabelSize(ids,laXAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
    putLabelLimiter(axPH.getModelAxis().getTitle(),lblLimit);
    dXAxisTitleThickness=lblLimit.getMaxHeight();
    laXAxisTitle.getCaption().setValue(sPreviousValue);
  }
  double dHTotal=Math.abs(scY.getStart() - scY.getEnd());
  if (axPH.getModelAxis().isSetLabelSpan()) {
    double dFixedLabelThickness=axPH.getModelAxis().getLabelSpan() * dPointToPixel;
    if (dFixedLabelThickness < dHTotal - 2 * getTickSize()) {
      if (dXAxisTitleThickness + dXAxisLabelsThickness > dFixedLabelThickness) {
        axPH.setShowLabels(false);
      }
      if (dXAxisTitleThickness > dFixedLabelThickness) {
        laXAxisTitle.setVisible(false);
        dXAxisLabelsThickness=0;
      }
      dXAxisLabelsThickness=dFixedLabelThickness;
    }
  }
  double dY=getLocation(scY,iv), dY1=dY, dY2=dY;
  final boolean bTicksAbove=(iXTickStyle & TICK_ABOVE) == TICK_ABOVE;
  final boolean bTicksBelow=(iXTickStyle & TICK_BELOW) == TICK_BELOW;
  final double dAppliedXAxisPlotSpacing=(iv.iType == IConstants.MAX || iv.iType == IConstants.MIN) ? dXAxisPlotSpacing : 0;
  final boolean bForwardScale=scY.getDirection() == FORWARD;
  if ((bForwardScale && iv.iType == IConstants.MIN) || (!bForwardScale && iv.iType == IConstants.MAX)) {
    dY-=dAppliedXAxisPlotSpacing;
    dHTotal-=dAppliedXAxisPlotSpacing;
    dY1=dY;
    dY2=dY;
    double dTickSize=getTickSize();
    if (bTicksAbove && dTickSize <= dHTotal) {
      dY1-=dTickSize;
      dHTotal-=dTickSize;
    }
 else {
      dTickSize=0;
    }
    double dH1=0;
    double dH2=0;
    if (iXLabelLocation == ABOVE) {
      dH1=Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
      dH2=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
    }
 else     if (iXLabelLocation == BELOW) {
      dH1=dDecorationThickness[0];
      dH2+=Math.max((bTicksBelow ? getTickSize() : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
    }
    if (dH1 + dH2 <= dHTotal) {
      dY1-=dH1;
      dY2+=dH2;
      dHTotal-=(dH1 + dH2);
    }
 else {
      axPH.setShowLabels(false);
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    if (dY1 < dBlockY) {
      final double dDelta=(dBlockY - dY1);
      dY1=dBlockY;
      dY+=dDelta;
      dY2+=dDelta;
    }
    double dDeltaY1=dY - dY1;
    double dDeltaY2=dY2 - dY;
    dXAxisLabelsThickness=0;
    if (iXLabelLocation == ABOVE) {
      dXAxisLabelsThickness=dY2 - dY1;
    }
 else     if (iXLabelLocation == BELOW) {
      dY2=(dY + dAppliedXAxisPlotSpacing);
      dXAxisLabelsThickness=dY2 - dY1;
    }
    if ((bForwardScale && dXAxisLabelsThickness > scY.getStartShift()) || (!bForwardScale && dXAxisLabelsThickness > scY.getEndShift())) {
      double dStart=scY.getStart(), dEnd=dY2 - scY.getEndShift();
      if (bForwardScale) {
        dStart=dY2 - scY.getStartShift();
        dEnd=scY.getEnd();
      }
      scY.resetShifts();
      scY.setEndPoints(dStart,dEnd);
      scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
      if (!scY.isStepFixed()) {
        final Object[] oaMinMax=scY.getMinMax();
        while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
          if (!scY.zoomOut()) {
            break;
          }
          scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
          int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
          if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
            break;
          }
        }
      }
    }
    dY-=insCA.getTop();
    dY1=dY - dDeltaY1;
    dY2=dY + dDeltaY2;
    axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  }
 else   if ((bForwardScale && iv.iType == IConstants.MAX) || (!bForwardScale && iv.iType == IConstants.MIN)) {
    dY+=dAppliedXAxisPlotSpacing;
    dHTotal-=dAppliedXAxisPlotSpacing;
    dY1=dY;
    dY2=dY;
    double dTickSize=getTickSize();
    if (bTicksBelow && dTickSize < dHTotal) {
      dY2+=dTickSize;
      dHTotal-=dTickSize;
    }
 else {
      dTickSize=0;
    }
    if (iXLabelLocation == ABOVE) {
      double dXLabelHeight=Math.max((bTicksAbove ? dTickSize : 0) + dXAxisLabelsThickness,dAppliedXAxisPlotSpacing);
      if (dXLabelHeight + dDecorationThickness[1] < dHTotal) {
        dY1-=dXLabelHeight;
        dY2+=dDecorationThickness[1];
        dHTotal-=(dXLabelHeight + dDecorationThickness[1]);
      }
 else {
        dXLabelHeight=0;
        axPH.setShowLabels(false);
      }
    }
 else     if (iXLabelLocation == BELOW) {
      double dXLabelHeight=Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
      double dHt1=Math.max(bTicksAbove ? dTickSize : 0,dAppliedXAxisPlotSpacing);
      if (dXLabelHeight + dHt1 <= dHTotal) {
        dY2+=dXLabelHeight;
        dY1-=dHt1;
        dHTotal-=(dXLabelHeight + dHt1);
      }
 else {
        dXLabelHeight=0;
        axPH.setShowLabels(false);
      }
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    if (dY2 > dBlockY + dBlockHeight) {
      final double dDelta=(dY2 - (dBlockY + dBlockHeight));
      dY2=dBlockY + dBlockHeight;
      dY-=dDelta;
      dY1-=dDelta;
    }
    double dDeltaY1=dY - dY1;
    double dDeltaY2=dY2 - dY;
    dXAxisLabelsThickness=0;
    if (iXLabelLocation == ABOVE) {
      dY1=(dY - dAppliedXAxisPlotSpacing);
      dXAxisLabelsThickness=dY2 - dY1;
    }
 else     if (iXLabelLocation == BELOW) {
      dXAxisLabelsThickness=dY2 - dY1;
    }
    if ((bForwardScale && dXAxisLabelsThickness > scY.getEndShift()) || (!bForwardScale && dXAxisLabelsThickness > scY.getStartShift())) {
      double dStart=dY1 + scY.getStartShift(), dEnd=scY.getEnd();
      if (bForwardScale) {
        dStart=scY.getStart();
        dEnd=dY1 + scY.getEndShift();
      }
      scY.resetShifts();
      if (dStart < dEnd + 1) {
        dStart=dEnd + 1;
      }
      scY.setEndPoints(dStart,dEnd);
      scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
      if (!scY.isStepFixed()) {
        final Object[] oaMinMax=scY.getMinMax();
        while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
          if (!scY.zoomOut()) {
            break;
          }
          double dOldStep=((Number)scY.getStep()).doubleValue();
          scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
          int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
          double dNewStep=((Number)scY.getStep()).doubleValue();
          if (dNewStep < dOldStep) {
            break;
          }
          if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
            break;
          }
        }
      }
    }
    dY+=insCA.getBottom();
    dY1=dY - dDeltaY1;
    dY2=dY + dDeltaY2;
    axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  }
 else {
    double dDeltaY1=0, dDeltaY2=0;
    if (iXLabelLocation == ABOVE) {
      double dH1=(bTicksAbove ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
      double dH2=(bTicksBelow ? getTickSize() : 0);
      if (dH1 + dH2 <= dHTotal) {
        dY1-=dH1;
        dY2+=dH2;
        dHTotal-=(dH1 + dH2);
      }
 else {
        axPH.setShowLabels(false);
      }
      if (iXTitleLocation == ABOVE) {
        dY1-=dXAxisTitleThickness;
      }
 else       if (iXTitleLocation == BELOW) {
        dY2+=dXAxisTitleThickness;
      }
      dDeltaY1=dY - dY1;
      dDeltaY2=dY2 - dY;
      if (dY1 < dBlockY) {
        final Object[] oaMinMax=scY.getMinMax();
        boolean bForceBreak=false;
        do {
          scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
          scY.resetShifts();
          double[] da=scY.getEndPoints();
          double dT_RI=dBlockY - dY1;
          double dStart, dEnd;
          if (bForwardScale) {
            double dAMin_AMax=da[1] - da[0];
            double dAMin_RI=da[1] - dY;
            dEnd=da[1];
            dStart=(dT_RI / dAMin_RI) * dAMin_AMax + da[0];
            if (dStart < dBlockY) {
              dStart=dBlockY;
              bForceBreak=true;
            }
          }
 else {
            double dAMin_AMax=da[0] - da[1];
            double dAMin_RI=da[0] - dY;
            dStart=da[0];
            dEnd=(dT_RI / dAMin_RI) * dAMin_AMax + da[1];
            if (dEnd < dBlockY) {
              dEnd=dBlockY;
              bForceBreak=true;
            }
          }
          scY.setEndPoints(dStart,dEnd);
          scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
          if (!scY.isStepFixed()) {
            while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
              if (!scY.zoomOut()) {
                bForceBreak=true;
                break;
              }
              scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
              int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
              if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
                bForceBreak=true;
                break;
              }
            }
          }
          dY=getLocation(scY,iv);
          dY1=dY - dDeltaY1;
          dY2=dY + dDeltaY2;
        }
 while (Math.abs(dY1 - dBlockY) > 1 && !bForceBreak);
      }
    }
 else     if (iXLabelLocation == BELOW) {
      double dH1=(bTicksAbove ? getTickSize() : 0);
      double dH2=(bTicksBelow ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
      if (dH1 + dH2 <= dHTotal) {
        dY1-=dH1;
        dY2+=dH2;
        dHTotal-=(dH1 + dH2);
      }
      if (iXTitleLocation == ABOVE) {
        dY1-=dXAxisTitleThickness;
      }
 else       if (iXTitleLocation == BELOW) {
        dY2+=dXAxisTitleThickness;
      }
      dDeltaY1=dY - dY1;
      dDeltaY2=dY2 - dY;
      if (dY2 > dBlockY + dBlockHeight) {
        final Object[] oaMinMax=scY.getMinMax();
        boolean bForceBreak=false;
        do {
          scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
          scY.resetShifts();
          double[] da=scY.getEndPoints();
          double dX2_X1=dY2 - (dBlockY + dBlockHeight);
          double dStart, dEnd;
          if (bForwardScale) {
            double dAMin_AMax=da[1] - da[0];
            double dX2_AMax=dY - da[0];
            dEnd=da[1] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
            dStart=da[0];
            if (dEnd > dBlockY + dBlockHeight) {
              dEnd=dBlockY + dBlockHeight;
              bForceBreak=true;
            }
          }
 else {
            double dAMin_AMax=da[0] - da[1];
            double dX2_AMax=dY - da[1];
            dStart=da[0] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
            dEnd=da[1];
            if (dStart > dBlockY + dBlockHeight) {
              dStart=dBlockY + dBlockHeight;
              bForceBreak=true;
            }
          }
          if (ChartUtil.mathEqual(Math.abs(dEnd - dStart),0)) {
            bForceBreak=true;
          }
          scY.setEndPoints(dStart,dEnd);
          scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
          if (!scY.isStepFixed()) {
            while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
              if (!scY.zoomOut()) {
                bForceBreak=true;
                break;
              }
              scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
              int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
              if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
                bForceBreak=true;
                break;
              }
            }
          }
          dY=getLocation(scY,iv);
          dY2=dY + dDeltaY2;
          dY1=dY - dDeltaY1;
        }
 while (Math.abs(dY2 - (dBlockY + dBlockHeight)) > 1 && !bForceBreak);
      }
    }
    axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  }
  return dY;
}",0.9994554489143012
70621,"public boolean isHeaderRepeat(){
  if (headerRepeat != null) {
    return headerRepeat.booleanValue();
  }
  if (generateBy instanceof TableItemDesign) {
    return getConstantValue(((TableItemDesign)generateBy).isRepeatHeader());
  }
  return false;
}","public boolean isHeaderRepeat(){
  if (headerRepeat != null) {
    return headerRepeat.booleanValue();
  }
  if (generateBy instanceof TableItemDesign) {
    Boolean constantValue=getConstantValue(((TableItemDesign)generateBy).isRepeatHeader());
    return constantValue == null ? false : constantValue;
  }
  return false;
}",0.8492201039861352
70622,"/** 
 * Gets the style from the original design object, calculates the highlight style, merges the teo styles and then sets them on the corresponding content object.
 * @param content the target content object.
 * @param design the original design object.
 */
protected void processStyle(ReportItemDesign design,IContent content){
  HighlightDesign highlight=design.getHighlight();
  if (highlight != null) {
    StyleDeclaration inlineStyle=createHighlightStyle(design.getHighlight());
    if (inlineStyle != null) {
      content.setInlineStyle(inlineStyle);
    }
  }
}","/** 
 * Gets the style from the original design object, calculates the highlight style, merges the teo styles and then sets them on the corresponding content object.
 * @param content the target content object.
 * @param design the original design object.
 */
protected void processStyle(ReportItemDesign design,IContent content){
  HighlightDesign highlight=design.getHighlight();
  StyleDeclaration inlineStyle=null;
  if (highlight != null) {
    inlineStyle=createHighlightStyle(design.getHighlight());
  }
  Map<Integer,Expression<String>> expressionStyles=design.getExpressionStyles();
  if (expressionStyles != null) {
    if (inlineStyle == null) {
      inlineStyle=(StyleDeclaration)report.createStyle();
    }
    populateExpressionStyles(inlineStyle,expressionStyles);
  }
  if (inlineStyle != null) {
    content.setInlineStyle(inlineStyle);
  }
}",0.7122905027932961
70623,"public void update(AbstractArea area) throws BirtException {
  super.update(area);
  if (currentIP + area.getAllocatedWidth() > getContentWidth()) {
    setNeedClip(true);
  }
 else   if (currentBP > maxAvaHeight) {
    setNeedClip(true);
  }
}","public void update(AbstractArea area) throws BirtException {
  super.update(area);
  if (currentIP + area.getAllocatedWidth() > getContentWidth()) {
    setNeedClip(true);
  }
}",0.8408551068883611
70624,"public int getMaxAvaHeight(){
  return maxAvaHeight;
}","public int getMaxAvaHeight(){
  if (parent != null) {
    return getContentHeight(parent.getMaxAvaHeight());
  }
 else {
    return context.getMaxBP();
  }
}",0.5023696682464455
70625,"protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  root.setContentWidth(imageArea.getWidth());
  root.setContentHeight(imageArea.getHeight());
  processChartLegend(image,imageArea);
}","protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getCurrentMaxContentWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  int actualHeight=contentDimension.getHeight();
  int actualWidth=contentDimension.getWidth();
  if (fitToContainer) {
    int maxHeight=root.getMaxAvaHeight();
    int maxWidth=root.getMaxAvaWidth();
    int cHeight=contentDimension.getHeight();
    int cWidth=contentDimension.getWidth();
    if (cHeight > maxHeight || cWidth > maxWidth) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)(rw * maxHeight);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)(rh * maxWidth);
      }
    }
  }
  imageArea.setWidth(actualWidth);
  imageArea.setHeight(actualHeight);
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  root.setContentWidth(imageArea.getWidth());
  root.setContentHeight(imageArea.getHeight());
  processChartLegend(image,imageArea);
  root.finished=true;
}",0.6394187102633969
70626,"protected void updateChildrenPosition() throws BirtException {
  if (repeatList != null && repeatList.size() > 0) {
    if (!isInHeaderBand()) {
      for (int i=0; i < repeatList.size(); i++) {
        ContainerArea row=(ContainerArea)repeatList.get(i);
        ContainerArea cloneRow=row.deepClone();
        children.add(i,cloneRow);
        update(cloneRow);
      }
    }
  }
  super.updateChildrenPosition();
}","protected void updateChildrenPosition() throws BirtException {
  if (repeatList != null && repeatList.size() > 0) {
    if (!isInHeaderBand()) {
      if (getRepeatedHeight() < getMaxAvaHeight()) {
        for (int i=0; i < repeatList.size(); i++) {
          ContainerArea row=(ContainerArea)repeatList.get(i);
          ContainerArea cloneRow=row.deepClone();
          children.add(i,cloneRow);
          cloneRow.setParent(this);
          update(cloneRow);
        }
      }
    }
  }
  super.updateChildrenPosition();
}",0.8841657810839533
70627,"public void add(AbstractArea area){
  addChild(area);
  CellArea cArea=(CellArea)area;
  int columnID=cArea.getColumnID();
  int colSpan=cArea.getColSpan();
  if (colSpan > 1 && content.isRTL()) {
    columnID+=colSpan - 1;
  }
  cArea.setPosition(table.getXPos(columnID),0);
}","public void add(AbstractArea area){
  addChild(area);
  CellArea cArea=(CellArea)area;
  int columnID=cArea.getColumnID();
  int colSpan=cArea.getColSpan();
  if (colSpan > 1 && content.isRTL()) {
    columnID+=colSpan - 1;
  }
  cArea.setPosition(getTableArea().getXPos(columnID),0);
}",0.9804618117229128
70628,"public boolean isPageBreakInsideAvoid(){
  if (table.isGridDesign()) {
    return super.isPageBreakInsideAvoid();
  }
 else {
    return true;
  }
}","public boolean isPageBreakInsideAvoid(){
  if (getTableArea().isGridDesign()) {
    return super.isPageBreakInsideAvoid();
  }
 else {
    return true;
  }
}",0.9704918032786886
70629,"public void update(AbstractArea area) throws BirtException {
  CellArea cArea=(CellArea)area;
  int columnID=cArea.getColumnID();
  int colSpan=cArea.getColSpan();
  if (colSpan > 1 && content.isRTL()) {
    columnID+=colSpan - 1;
  }
  cArea.setPosition(table.getXPos(columnID),0);
}","public void update(AbstractArea area) throws BirtException {
  CellArea cArea=(CellArea)area;
  int columnID=cArea.getColumnID();
  int colSpan=cArea.getColSpan();
  if (colSpan > 1 && content.isRTL()) {
    columnID+=colSpan - 1;
  }
  cArea.setPosition(getTableArea().getXPos(columnID),0);
}",0.9809358752166378
70630,"public int getColumnCount(){
  if (table != null) {
    return table.getColumnCount();
  }
  if (cells != null) {
    return cells.length;
  }
  return 0;
}","public int getColumnCount(){
  TableArea table=getTableArea();
  if (table != null) {
    return table.getColumnCount();
  }
  if (cells != null) {
    return cells.length;
  }
  return 0;
}",0.9017341040462428
70631,"public void close() throws BirtException {
  table.addRow(this);
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
    }
  }
  parent.update(this);
  finished=true;
}","public void close() throws BirtException {
  getTableArea().addRow(this);
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
    }
  }
  parent.update(this);
  finished=true;
}",0.984352773826458
70632,"/** 
 * Tests the local style property values.
 */
public void testStyleLocalPropertyValues() throws Exception {
  openDesign(""String_Node_Str"");
  DesignElementHandle label1=designHandle.findElement(""String_Node_Str"");
  assertTrue(label1.hasLocalProperties());
  DesignElementHandle label2=designHandle.findElement(""String_Node_Str"");
  assertFalse(label2.hasLocalProperties());
}","/** 
 * Tests the local style property values.
 */
public void testStyleLocalPropertyValues() throws Exception {
  openDesign(""String_Node_Str"");
  DesignElementHandle label1=designHandle.findElement(""String_Node_Str"");
  assertTrue(label1.hasLocalProperties());
  DesignElementHandle label2=designHandle.findElement(""String_Node_Str"");
  assertFalse(label2.hasLocalProperties());
  DesignElementHandle extendedItem=designHandle.findElement(""String_Node_Str"");
  assertTrue(extendedItem.hasLocalProperties());
  extendedItem=designHandle.findElement(""String_Node_Str"");
  assertFalse(extendedItem.hasLocalProperties());
}",0.7617148554336989
70633,"protected boolean isValidResult(List result){
  if (repeatList != null) {
    return result.size() > repeatList.size();
  }
  return super.isValidResult(result);
}","protected boolean isValidResult(List result){
  if (repeatList != null && !isFirst) {
    return result.size() > repeatList.size();
  }
  return super.isValidResult(result);
}",0.9644970414201184
70634,"protected void updateChildrenPosition() throws BirtException {
  if (repeatList != null && repeatList.size() > 0) {
    if (!isInHeaderBand()) {
      if (getRepeatedHeight() < getMaxAvaHeight()) {
        for (int i=0; i < repeatList.size(); i++) {
          ContainerArea row=(ContainerArea)repeatList.get(i);
          ContainerArea cloneRow=row.deepClone();
          children.add(i,cloneRow);
          cloneRow.setParent(this);
          update(cloneRow);
        }
      }
    }
  }
  super.updateChildrenPosition();
}","protected void updateChildrenPosition() throws BirtException {
  if (repeatList != null && repeatList.size() > 0) {
    if (!isInHeaderBand()) {
      if (getRepeatedHeight() < getMaxAvaHeight()) {
        for (int i=0; i < repeatList.size(); i++) {
          ContainerArea row=(ContainerArea)repeatList.get(i);
          ContainerArea cloneRow=row.deepClone();
          children.add(i,cloneRow);
          cloneRow.setParent(this);
          update(cloneRow);
          cloneRow.setAllocatedY(currentBP);
        }
      }
 else {
        repeatList=null;
      }
    }
    isFirst=false;
  }
  super.updateChildrenPosition();
}",0.9090909090909092
70635,"protected int getRepeatedHeight(){
  if (repeatList != null) {
    AbstractArea area=(AbstractArea)repeatList.get(repeatList.size() - 1);
    return area.getY() + area.getAllocatedHeight();
  }
  return 0;
}","protected int getRepeatedHeight(){
  if (repeatList != null && repeatHeight == 0) {
    for (int i=0; i < repeatList.size(); i++) {
      AbstractArea area=(AbstractArea)repeatList.get(i);
      repeatHeight+=area.getAllocatedHeight();
    }
  }
  return repeatHeight;
}",0.5241090146750524
70636,"protected Object getValue(Object[] args) throws BirtException {
  Duration duration1, duration2;
  try {
    duration1=DatatypeFactory.newInstance().newDuration(args[0].toString());
    duration2=DatatypeFactory.newInstance().newDuration(args[1].toString());
  }
 catch (  DatatypeConfigurationException e) {
    throw new IllegalArgumentException(Messages.getFormattedString(""String_Node_Str"",new Object[]{args[0].toString()}));
  }
  return Boolean.valueOf(duration1.isShorterThan(duration2));
}","protected Object getValue(Object[] args) throws BirtException {
  Duration duration1, duration2;
  try {
    duration1=DatatypeFactory.newInstance().newDuration(args[0].toString());
    duration2=DatatypeFactory.newInstance().newDuration(args[1].toString());
  }
 catch (  DatatypeConfigurationException e) {
    throw new IllegalArgumentException(Messages.getFormattedString(""String_Node_Str"",args));
  }
  return Boolean.valueOf(duration1.isShorterThan(duration2));
}",0.9627329192546584
70637,"public static boolean isHeritable(int id){
  for (int i=0; i < UNHERITABLE.length; i++) {
    if (id == UNHERITABLE[i]) {
      return false;
    }
  }
  return true;
}","public static boolean isHeritable(int id){
  if (id >= StyleConstant.BORDER_BOTTOM_COLOR_PROP && id <= StyleConstant.BORDER_RIGHT_WIDTH_PROP)   return false;
  return true;
}",0.5380116959064327
70638,"private void declareStyles(Map<StyleEntry,Integer> style2id){
  writer.openTag(""String_Node_Str"");
  Set<Entry<StyleEntry,Integer>> entrySet=style2id.entrySet();
  for (  Map.Entry<StyleEntry,Integer> entry : entrySet) {
    declareStyle(entry.getKey(),entry.getValue());
  }
  writer.closeTag(""String_Node_Str"");
}","private void declareStyles(Map<StyleEntry,Integer> style2id){
  writer.openTag(""String_Node_Str"");
  declareHyperlinkStyle();
  Set<Entry<StyleEntry,Integer>> entrySet=style2id.entrySet();
  for (  Map.Entry<StyleEntry,Integer> entry : entrySet) {
    declareStyle(entry.getKey(),entry.getValue());
  }
  writer.closeTag(""String_Node_Str"");
}",0.958904109589041
70639,"private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  writer.attribute(""String_Node_Str"",style.getName());
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}","private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (style.getName() == StyleEntry.ENTRYNAME_HYPERLINK) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}",0.9825612119076976
70640,"protected org.eclipse.birt.data.engine.odi.IResultIterator executeOdiQuery(IEventHandler eventHandler,StopSign stopSign) throws DataException {
  if (doesLoadFromCache() == true) {
    DataSourceQuery dsQuery=new DataSourceQuery(dataEngine.getSession());
    JointDataSetQuery jointQuery=(JointDataSetQuery)odiQuery;
    this.prepareCacheQuery(dsQuery);
    dsQuery.setExprProcessor(jointQuery.getExprProcessor());
    List fetchEvents=jointQuery.getFetchEvents();
    if (fetchEvents != null)     for (int i=0; i < fetchEvents.size(); i++)     dsQuery.addOnFetchEvent((IResultObjectEvent)fetchEvents.get(i));
    dsQuery.setMaxRows(jointQuery.getMaxRows());
    dsQuery.setOrdering(toList(jointQuery.getOrdering()));
    dsQuery.setGrouping(toList(jointQuery.getGrouping()));
    return dsQuery.execute(eventHandler,stopSign);
  }
  ResultIterator left=null;
  ResultIterator right=null;
  try {
    DataSetCacheManager dscm=dataEngine.getSession().getDataSetCacheManager();
    dscm.setDataSourceAndDataSet(leftDataSourceDesign,leftDataSetDesgin,leftParameterHints,leftAppContext);
    left=(ResultIterator)leftQueryResults.getResultIterator();
    dscm.setDataSourceAndDataSet(rightDataSourceDesign,rightDataSetDesgin,rightParameterHints,rightAppContext);
    right=(ResultIterator)rightQueryResults.getResultIterator();
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  initialize(dataEngine,appContext,left,right);
  JointResultMetadata jrm=getJointResultMetadata(left.getResultMetaData(),right.getResultMetaData());
  resultClass=jrm.getResultClass();
  populator=JointDataSetPopulatorFactory.getBinaryTreeDataSetPopulator(left.getOdiResult(),right.getOdiResult(),jrm,matcher,joinType,dataEngine.getSession(),dataSetDesign.getRowFetchLimit());
  if (doesSaveToCache() == false)   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,populator,eventHandler,dataEngine.getSession(),stopSign);
 else   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,new DataSetResultCache(populator,resultClass,dataEngine.getSession()),eventHandler,dataEngine.getSession(),stopSign);
}","protected org.eclipse.birt.data.engine.odi.IResultIterator executeOdiQuery(IEventHandler eventHandler,StopSign stopSign) throws DataException {
  if (doesLoadFromCache() == true) {
    DataSourceQuery dsQuery=new DataSourceQuery(dataEngine.getSession());
    JointDataSetQuery jointQuery=(JointDataSetQuery)odiQuery;
    this.prepareCacheQuery(dsQuery);
    dsQuery.setExprProcessor(jointQuery.getExprProcessor());
    List fetchEvents=jointQuery.getFetchEvents();
    if (fetchEvents != null)     for (int i=0; i < fetchEvents.size(); i++)     dsQuery.addOnFetchEvent((IResultObjectEvent)fetchEvents.get(i));
    dsQuery.setMaxRows(jointQuery.getMaxRows());
    dsQuery.setOrdering(toList(jointQuery.getOrdering()));
    dsQuery.setGrouping(toList(jointQuery.getGrouping()));
    return dsQuery.execute(eventHandler,stopSign);
  }
  ResultIterator left=null;
  ResultIterator right=null;
  try {
    DataSetCacheManager dscm=dataEngine.getSession().getDataSetCacheManager();
    dscm.setDataSourceAndDataSet(leftDataSourceDesign,leftDataSetDesgin,leftParameterHints,leftAppContext);
    left=(ResultIterator)leftQueryResults.getResultIterator();
    dscm.setDataSourceAndDataSet(rightDataSourceDesign,rightDataSetDesgin,rightParameterHints,rightAppContext);
    right=(ResultIterator)rightQueryResults.getResultIterator();
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  initialize(dataEngine,appContext,left,right);
  JointResultMetadata jrm=getJointResultMetadata(left.getResultMetaData(),right.getResultMetaData());
  resultClass=jrm.getResultClass();
  populator=JointDataSetPopulatorFactory.getBinaryTreeDataSetPopulator(left.getOdiResult(),right.getOdiResult(),jrm,matcher,joinType,dataEngine.getSession(),dataSetDesign.getRowFetchLimit());
  DataSetCacheManager dscm=dataEngine.getSession().getDataSetCacheManager();
  dscm.setDataSourceAndDataSet(null,dataSetDesign,null,dscm.getCurrentAppContext());
  if (doesSaveToCache() == false)   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,populator,eventHandler,dataEngine.getSession(),stopSign);
 else   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,new DataSetResultCache(populator,resultClass,dataEngine.getSession()),eventHandler,dataEngine.getSession(),stopSign);
}",0.9632152588555858
70641,"protected void writeObject(Object object) throws IOException {
}","protected void writeObject(Object object) throws IOException {
  if (object == null) {
    randomAccessFile.writeShort(NULL_VALUE);
    return;
  }
  IStructure cachedObject=(IStructure)object;
  Object[] objects=cachedObject.getFieldValues();
  randomAccessFile.writeShort((short)objects.length);
  if (fieldWriters == null) {
    createReadersAndWriters(objects.length);
  }
  for (int i=0; i < objects.length; i++) {
    fieldWriters[i].write(randomAccessFile,objects[i]);
  }
}",0.2348623853211009
70642,"public void startContent(IContent content) throws BirtException {
  boolean isInline=PropertyUtil.isInlineElement(content);
  if (isInline) {
    if (current.isInlineStacking()) {
    }
 else {
      setContainer(af.createLineArea(current,context));
    }
  }
 else {
    if (current.isInlineStacking()) {
      while (current.isInlineStacking()) {
        closeContainer();
      }
    }
  }
  ILayout layout=af.createLayout(current,context,content);
  layout.layout();
}","public void startContent(IContent content) throws BirtException {
  boolean isInline=PropertyUtil.isInlineElement(content);
  if (isInline) {
    if (current.isInlineStacking()) {
    }
 else {
      setContainer(af.createLineArea(current,context));
    }
  }
 else {
    if (current.isInlineStacking()) {
      while (current.isInlineStacking()) {
        closeContainer();
      }
    }
  }
  ILayout layout=af.createLayout(current,context,content);
  if (layout != null) {
    layout.layout();
  }
}",0.9671457905544149
70643,"public void endCell(ICellContent cell) throws BirtException {
  endContainer(cell);
}","public void endCell(ICellContent cell) throws BirtException {
  _endCell(cell);
}",0.9397590361445785
70644,"protected AbstractArea createNewArea(ContainerArea parent,LayoutContext context,IContent content){
switch (content.getContentType()) {
case IContent.CELL_CONTENT:
    return new CellArea(parent,context,content);
case IContent.CONTAINER_CONTENT:
case IContent.LIST_CONTENT:
  if (PropertyUtil.isInlineElement(content)) {
    return new InlineContainerArea(parent,context,content);
  }
 else {
    return new BlockContainerArea(parent,context,content);
  }
case IContent.DATA_CONTENT:
case IContent.LABEL_CONTENT:
case IContent.TEXT_CONTENT:
break;
case IContent.FOREIGN_CONTENT:
if (PropertyUtil.isInlineElement(content)) {
return new BlockContainerArea(parent,context,content);
}
 else {
return new BlockContainerArea(parent,context,content);
}
case IContent.IMAGE_CONTENT:
break;
case IContent.PAGE_CONTENT:
return new RootArea(context,content,emitter);
case IContent.ROW_CONTENT:
return new RowArea(parent,context,content);
case IContent.TABLE_BAND_CONTENT:
break;
case IContent.TABLE_CONTENT:
return new TableArea(parent,context,content);
case IContent.AUTOTEXT_CONTENT:
break;
case IContent.LIST_BAND_CONTENT:
break;
case IContent.LIST_GROUP_CONTENT:
return new ListGroupArea(parent,context,content);
case IContent.TABLE_GROUP_CONTENT:
return new TableGroupArea(parent,context,content);
default :
break;
}
return null;
}","protected AbstractArea createNewArea(ContainerArea parent,LayoutContext context,IContent content){
switch (content.getContentType()) {
case IContent.CELL_CONTENT:
    return new CellArea(parent,context,content);
case IContent.CONTAINER_CONTENT:
  if (PropertyUtil.isInlineElement(content)) {
    return new InlineContainerArea(parent,context,content);
  }
 else {
    return new BlockContainerArea(parent,context,content);
  }
case IContent.LIST_CONTENT:
if (PropertyUtil.isInlineElement(content)) {
  return new ListArea(parent,context,content);
}
 else {
  return new ListArea(parent,context,content);
}
case IContent.DATA_CONTENT:
case IContent.LABEL_CONTENT:
case IContent.TEXT_CONTENT:
break;
case IContent.FOREIGN_CONTENT:
if (PropertyUtil.isInlineElement(content)) {
return new InlineContainerArea(parent,context,content);
}
 else {
return new BlockContainerArea(parent,context,content);
}
case IContent.IMAGE_CONTENT:
break;
case IContent.PAGE_CONTENT:
return new RootArea(context,content,emitter);
case IContent.ROW_CONTENT:
return new RowArea(parent,context,content);
case IContent.TABLE_BAND_CONTENT:
break;
case IContent.TABLE_CONTENT:
return new TableArea(parent,context,content);
case IContent.AUTOTEXT_CONTENT:
break;
case IContent.LIST_BAND_CONTENT:
break;
case IContent.LIST_GROUP_CONTENT:
return new ListGroupArea(parent,context,content);
case IContent.TABLE_GROUP_CONTENT:
return new TableGroupArea(parent,context,content);
default :
break;
}
return null;
}",0.8535714285714285
70645,"protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=style.getBackgroundImage();
  if (url != null && !""String_Node_Str"".equals(url)) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(url,style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  CSSValue padding=style.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(padding,width));
  }
  IStyle cs=content.getStyle();
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(padding,width));
  }
}","protected void buildProperties(IContent content,LayoutContext context){
  IStyle style=content.getComputedStyle();
  boxStyle=new BoxStyle();
  Color color=PropertyUtil.getColor(style.getProperty(IStyle.STYLE_BACKGROUND_COLOR));
  if (color != null) {
    boxStyle.setBackgroundColor(color);
  }
  String url=style.getBackgroundImage();
  if (url != null && !""String_Node_Str"".equals(url)) {
    boxStyle.setBackgroundImage(new BackgroundImageInfo(url,style.getProperty(IStyle.STYLE_BACKGROUND_REPEAT),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),width),getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),width)));
  }
  localProperties=new LocalProperties();
  int maw=parent.getMaxAvaWidth();
  IStyle cs=content.getStyle();
  CSSValue padding=cs.getProperty(IStyle.STYLE_PADDING_TOP);
  if (padding == null) {
    localProperties.setPaddingTop(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingTop(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_BOTTOM);
  if (padding == null) {
    localProperties.setPaddingBottom(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingBottom(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_LEFT);
  if (padding == null) {
    localProperties.setPaddingLeft(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingLeft(PropertyUtil.getDimensionValue(padding,width));
  }
  padding=cs.getProperty(IStyle.STYLE_PADDING_RIGHT);
  if (padding == null) {
    localProperties.setPaddingRight(DEFAULT_PADDING);
  }
 else {
    localProperties.setPaddingRight(PropertyUtil.getDimensionValue(padding,width));
  }
}",0.9792700729927007
70646,"public SplitResult split(int height,boolean force) throws BirtException {
  assert(height < this.height);
  LineArea result=null;
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    ContainerArea child=(ContainerArea)iter.next();
    if (iter.hasNext()) {
      if (child.getX() < height) {
        continue;
      }
 else {
        if (child.getMinYPosition() <= height) {
          iter.remove();
          if (result == null) {
            result=cloneArea();
          }
          result.addChild(child);
          child.setParent(result);
        }
 else {
          SplitResult splitChild=child.split(height - child.getY(),force);
          ContainerArea splitChildArea=splitChild.getResult();
          if (splitChildArea != null) {
            if (result == null) {
              result=cloneArea();
            }
            result.addChild(splitChildArea);
            splitChildArea.setParent(result);
          }
        }
      }
    }
 else {
      break;
    }
  }
  if (result != null) {
    int h=0;
    iter=result.getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    result.setHeight(h);
  }
  if (children.size() > 0) {
    int h=0;
    iter=getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    result.setHeight(h);
  }
  if (result != null) {
    return new SplitResult(result,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    return SplitResult.SUCCEED_WITH_NULL;
  }
}","public SplitResult split(int height,boolean force) throws BirtException {
  assert(height < this.height);
  LineArea result=null;
  Iterator iter=children.iterator();
  while (iter.hasNext()) {
    ContainerArea child=(ContainerArea)iter.next();
    if (iter.hasNext()) {
      if (child.getX() < height) {
        continue;
      }
 else {
        if (child.getMinYPosition() <= height) {
          iter.remove();
          if (result == null) {
            result=cloneArea();
          }
          result.addChild(child);
          child.setParent(result);
        }
 else {
          SplitResult splitChild=child.split(height - child.getY(),force);
          ContainerArea splitChildArea=splitChild.getResult();
          if (splitChildArea != null) {
            if (result == null) {
              result=cloneArea();
            }
            result.addChild(splitChildArea);
            splitChildArea.setParent(result);
          }
        }
      }
    }
 else {
      break;
    }
  }
  if (result != null) {
    int h=0;
    iter=result.getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    result.setHeight(h);
  }
  if (children.size() > 0) {
    int h=0;
    iter=getChildren();
    while (iter.hasNext()) {
      ContainerArea child=(ContainerArea)iter.next();
      h=Math.max(h,child.getAllocatedHeight());
    }
    setHeight(h);
  }
  if (result != null) {
    return new SplitResult(result,SplitResult.SPLIT_SUCCEED_WITH_PART);
  }
 else {
    return SplitResult.SUCCEED_WITH_NULL;
  }
}",0.9978308026030368
70647,"public void initialize() throws BirtException {
  IPageContent pageContent=(IPageContent)content;
  if (context.isAutoPageBreak()) {
    pageContent=createPageContent(pageContent);
    context.setPageNumber(context.getPageNumber() + 1);
  }
  createNewPage(pageContent);
  maxAvaWidth=page.getBody().getWidth();
  width=maxAvaWidth;
}","public void initialize() throws BirtException {
  IPageContent pageContent=(IPageContent)content;
  if (context.isAutoPageBreak()) {
    context.setPageNumber(context.getPageNumber() + 1);
    pageContent=createPageContent(pageContent);
  }
  createNewPage(pageContent);
  maxAvaWidth=page.getBody().getWidth();
  width=maxAvaWidth;
}",0.8562874251497006
70648,"public Control createDialogArea(Composite parent){
  setParentShell(parent.getShell());
  Control dialogArea=super.createDialogArea(parent);
  getSQLBuilder().addContentChangeListener(this);
  SQLQueryUtility.setSystemHelp(dialogArea,IHelpConstants.CONEXT_ID_DATASET_DIALOG_SQLBUILDER);
  return dialogArea;
}","public Control createDialogArea(Composite parent){
  setParentShell(parent.getShell());
  Control dialogArea=super.createDialogArea(parent);
  getSQLBuilder().addContentChangeListener(this);
  return dialogArea;
}",0.8160919540229885
70649,"/** 
 * clear the property binding in dataset to disable it when run the query
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void clearPropertyBindingMap(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        clearPropertyBindingMap(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else   if (dsHandle instanceof OdaDataSetHandle) {
    List dataSetBindingList=dsHandle.getPropertyBindings();
    List dataSourceBindingList=dsHandle.getDataSource().getPropertyBindings();
    if (!dataSetBindingList.isEmpty())     dataSetMap.put(dsHandle.getName(),dataSetBindingList);
    if (!dataSourceBindingList.isEmpty())     dataSourceMap.put(dsHandle.getDataSource().getName(),dataSourceBindingList);
    for (int i=0; i < dataSetBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSetBindingList.get(i);
      dsHandle.setPropertyBinding(binding.getName(),null);
    }
    for (int i=0; i < dataSourceBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSourceBindingList.get(i);
      dsHandle.getDataSource().setPropertyBinding(binding.getName(),null);
    }
  }
}","/** 
 * clear the property binding in dataset to disable it when run the query
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void clearPropertyBindingMap(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        clearPropertyBindingMap(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else   if (dsHandle instanceof OdaDataSetHandle) {
    List dataSetBindingList=dsHandle.getPropertyBindings();
    List dataSourceBindingList=dsHandle.getDataSource().getPropertyBindings();
    if (!dataSetBindingList.isEmpty())     dataSetMap.put(dsHandle.getName(),dataSetBindingList);
    if (!dataSourceBindingList.isEmpty())     dataSourceMap.put(dsHandle.getDataSource().getName(),dataSourceBindingList);
    for (int i=0; i < dataSetBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSetBindingList.get(i);
      dsHandle.setPropertyBinding(binding.getName(),null);
    }
    for (int i=0; i < dataSourceBindingList.size(); i++) {
      PropertyBinding binding=(PropertyBinding)dataSourceBindingList.get(i);
      dsHandle.getDataSource().setPropertyBinding(binding.getName(),null);
    }
  }
}",0.9812478690760312
70650,"/** 
 * reset the property binding in dataset.
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void resetPropertyBinding(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        resetPropertyBinding(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else {
    if (dsHandle instanceof OdaDataSetHandle) {
      if (dataSetMap.get(dsHandle.getName()) != null) {
        List pList=(List)dataSetMap.get(dsHandle.getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.setPropertyBinding(binding.getName(),binding.getValue());
        }
      }
      if (dataSourceMap.get(dsHandle.getDataSource().getName()) != null) {
        List pList=(List)dataSourceMap.get(dsHandle.getDataSource().getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.getDataSource().setPropertyBinding(binding.getName(),binding.getValue());
        }
      }
    }
  }
}","/** 
 * reset the property binding in dataset.
 * @param dsHandle
 * @param dataSetMap
 * @param dataSourceMap
 * @throws SemanticException
 */
public static void resetPropertyBinding(DataSetHandle dsHandle,Map dataSetMap,Map dataSourceMap) throws SemanticException {
  if (dsHandle.getExtends() != null) {
    return;
  }
  if (dsHandle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)dsHandle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle ds=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        resetPropertyBinding(ds,dataSetMap,dataSourceMap);
      }
    }
  }
 else {
    if (dsHandle instanceof OdaDataSetHandle) {
      if (dataSetMap.get(dsHandle.getName()) != null) {
        List pList=(List)dataSetMap.get(dsHandle.getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.setPropertyBinding(binding.getName(),binding.getValue());
        }
      }
      if (dataSourceMap.get(dsHandle.getDataSource().getName()) != null) {
        List pList=(List)dataSourceMap.get(dsHandle.getDataSource().getName());
        for (int i=0; i < pList.size(); i++) {
          PropertyBinding binding=(PropertyBinding)pList.get(i);
          dsHandle.getDataSource().setPropertyBinding(binding.getName(),binding.getValue());
        }
      }
    }
  }
}",0.979905005480453
70651,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (dMinValue * dMaxValue > 0) {
      if (dMinValue > 0) {
        dMinValue=0d;
      }
 else {
        dMaxValue=0d;
      }
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.bStepFixed=true;
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isAligned();
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.setFactor(factor);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(10));
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.setStep(Integer.valueOf(1));
    sc.oStepNumber=oStepNumber;
    sc.oUnit=Integer.valueOf(iUnit);
    sc.iMinUnit=oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
        sc.oMinimumFixed=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
        sc.oMaximumFixed=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  sc.bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.bStepFixed=true;
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isAligned();
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.setFactor(factor);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(dStep));
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.setStep(new Double(10));
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.setStep(Integer.valueOf(1));
    sc.oStepNumber=oStepNumber;
    sc.oUnit=Integer.valueOf(iUnit);
    sc.iMinUnit=oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.bExpandMinMax=scModel.isAutoExpand();
    sc.bAlignZero=ax.getModelAxis().isSetAligned();
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
        sc.oMinimumFixed=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
        sc.oMaximumFixed=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  sc.bLabelWithinAxes=ax.getModelAxis().isLabelWithinAxes();
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  sc.setData(dsi);
  return sc;
}",0.9915471409447312
70652,"protected void setState(){
  boolean bEnabled=!(getAxisForProcessing().isCategoryAxis() || getAxisForProcessing().getType() == AxisType.TEXT_LITERAL);
  setState(bEnabled);
  if (axisAngleType != AngleType.Y) {
    btnShowOutside.setEnabled(false);
    btnShowOutside.setSelection(false);
    getScale().setShowOutside(false);
  }
 else {
    btnAutoExpand.setSelection(true);
    getScale().setAutoExpand(true);
  }
  boolean bAxisX=(axisAngleType == AngleType.X);
  boolean bEnableAutoExpand=btnStepAuto.getSelection() && bAxisX && !(getAxisForProcessing().getType() == AxisType.TEXT_LITERAL)&& !(getAxisForProcessing().isCategoryAxis());
  btnAutoExpand.setEnabled(bEnableAutoExpand);
  if (getAxisForProcessing().getType() == AxisType.LINEAR_LITERAL && !getAxisForProcessing().isCategoryAxis()) {
    if (!getAxisForProcessing().getScale().isSetStepNumber()) {
      btnFactor.setEnabled(true);
      if (btnFactor.getSelection()) {
        txtFactor.setEnabled(true);
      }
 else {
        txtFactor.setEnabled(false);
      }
    }
    if (btnFactor.getSelection()) {
      btnStepNumber.setEnabled(false);
      spnStepNumber.setEnabled(false);
      lblMax.setEnabled(false);
      txtScaleMax.setEnabled(false);
      lblMin.setEnabled(false);
      txtScaleMin.setEnabled(false);
    }
  }
}","protected void setState(){
  boolean bEnabled=!(getAxisForProcessing().isCategoryAxis() || getAxisForProcessing().getType() == AxisType.TEXT_LITERAL);
  setState(bEnabled);
  if (axisAngleType != AngleType.Y) {
    btnShowOutside.setEnabled(false);
    btnShowOutside.setSelection(false);
    getScale().setShowOutside(false);
  }
 else {
    btnAutoExpand.setSelection(true);
    getScale().setAutoExpand(true);
  }
  boolean bAxisX=(axisAngleType == AngleType.X);
  boolean bEnableAutoExpand=btnStepAuto.getSelection() && bAxisX && !(getAxisForProcessing().getType() == AxisType.TEXT_LITERAL)&& !(getAxisForProcessing().isCategoryAxis());
  btnAutoExpand.setEnabled(bEnableAutoExpand);
  if (getAxisForProcessing().getType() == AxisType.LINEAR_LITERAL && !getAxisForProcessing().isCategoryAxis()) {
    if (!getAxisForProcessing().getScale().isSetStepNumber()) {
      btnFactor.setEnabled(true);
      if (btnFactor.getSelection()) {
        txtFactor.setEnabled(true);
      }
 else {
        txtFactor.setEnabled(false);
      }
    }
    if (btnFactor.getSelection()) {
      btnStepNumber.setEnabled(false);
      spnStepNumber.setEnabled(false);
      lblMax.setEnabled(false);
      txtScaleMax.setEnabled(false);
    }
  }
}",0.9728025226645644
70653,"/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)cwa).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)cwa).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Scale scModel;
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<?,?> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    scModel=axaOrthogonal[j].getScale();
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,scModel,axaOrthogonal[j].getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=(LegendItemRenderingHints)seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight();
        double maxWidth=boPlot.getWidth() * AXIS_TITLE_PERCENT;
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
        dAxisTitleThickness=lbLimit.getMaxWidth();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight() * AXIS_TITLE_PERCENT;
        double maxWidth=boPlot.getWidth();
        Label laAxisTitleV=aax.getPrimaryOrthogonal().getTitle();
        if (laAxisTitleV.isVisible()) {
          laAxisTitleV=LabelImpl.copyInstance(laAxisTitleV);
          laAxisTitleV.getCaption().setValue(rtc.externalizedMessage(laAxisTitleV.getCaption().getValue()));
          LabelLimiter lbLimitV=new LabelLimiter(boPlot.getWidth() * AXIS_TITLE_PERCENT,boPlot.getWidth(),0);
          lbLimitV.computeWrapping(ids,laAxisTitleV);
          lbLimitV.limitLabelSize(ids,laAxisTitleV);
          maxWidth-=lbLimitV.getMaxWidth();
        }
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
        dAxisTitleThickness=lbLimit.getMaxHeight();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}","/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)cwa).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)cwa).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Scale scModel;
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<?,?> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    scModel=axaOrthogonal[j].getScale();
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,scModel,axaOrthogonal[j].getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=(LegendItemRenderingHints)seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight();
        double maxWidth=boPlot.getWidth() * AXIS_TITLE_PERCENT;
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
        dAxisTitleThickness=lbLimit.getMaxWidth();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan();
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight() * AXIS_TITLE_PERCENT;
        double maxWidth=boPlot.getWidth();
        Label laAxisTitleV=aax.getPrimaryOrthogonal().getTitle();
        if (laAxisTitleV.isVisible()) {
          laAxisTitleV=LabelImpl.copyInstance(laAxisTitleV);
          laAxisTitleV.getCaption().setValue(rtc.externalizedMessage(laAxisTitleV.getCaption().getValue()));
          LabelLimiter lbLimitV=new LabelLimiter(boPlot.getWidth() * AXIS_TITLE_PERCENT,boPlot.getWidth(),0);
          lbLimitV.computeWrapping(ids,laAxisTitleV);
          lbLimitV.limitLabelSize(ids,laAxisTitleV);
          maxWidth-=lbLimitV.getMaxWidth();
        }
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
        dAxisTitleThickness=lbLimit.getMaxHeight();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (oaxOverlay.getModelAxis().isSetLabelSpan()) {
        double dFixedLabelThickness=oaxOverlay.getModelAxis().getLabelSpan();
        double dWTotal=dBlockLength;
        if (dFixedLabelThickness < dWTotal - 2 * getTickSize()) {
          if (dAxisLabelsThickness + dAxisTitleThickness > dFixedLabelThickness) {
            oaxOverlay.setShowLabels(false);
          }
          if (dAxisTitleThickness > dFixedLabelThickness) {
            laAxisTitle.setVisible(false);
            dAxisTitleThickness=0;
          }
          dAxisLabelsThickness=dFixedLabelThickness;
        }
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}",0.946295464750786
70654,"/** 
 * Write a byte array to an output stream only with its raw content.
 * @param dos
 * @param bytes,it can not be null
 * @throws IOException
 */
public final static void writeRawBytes(DataOutputStream dos,byte[] bytes) throws IOException {
}","/** 
 * Write a byte array to an output stream only with its raw content.
 * @param dos
 * @param bytes , it can not be null
 * @throws IOException
 */
public final static void writeRawBytes(DataOutputStream dos,byte[] bytes) throws IOException {
}",0.9959514170040484
70655,"/** 
 * private utility method to check whether it is a long string 
 * @param str
 * @return true if it is a long string
 */
private static boolean isLongString(String str){
  int strlen=str.length();
  if (strlen > 65535) {
    return true;
  }
 else   if (strlen < 21845) {
    return false;
  }
  int utflen=getBytesSize(str);
  if (utflen > 65535) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * private utility method to check whether it is a long string
 * @param str
 * @return true if it is a long string
 */
private static boolean isLongString(String str){
  int strlen=str.length();
  if (strlen > 65535) {
    return true;
  }
 else   if (strlen < 21845) {
    return false;
  }
  int utflen=getBytesSize(str);
  if (utflen > 65535) {
    return true;
  }
 else {
    return false;
  }
}",0.998769987699877
70656,"/** 
 * private utility method helping to convert byte[] to a String 
 * @param str
 * @throws UTFDataFormatException
 */
private static int generateCharArray(char[] chararr,byte[] bytearr,int count,int chararr_count) throws UTFDataFormatException {
  int c, char2, char3;
  int utflen=bytearr.length;
  while (count < utflen) {
    c=(int)bytearr[count] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
      count++;
    chararr[chararr_count++]=(char)c;
  break;
case 12:
case 13:
count+=2;
if (count > utflen) throw new UTFDataFormatException(""String_Node_Str"");
char2=(int)bytearr[count - 1];
if ((char2 & 0xC0) != 0x80) throw new UTFDataFormatException(""String_Node_Str"" + count);
chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));
break;
case 14:
count+=3;
if (count > utflen) throw new UTFDataFormatException(""String_Node_Str"");
char2=(int)bytearr[count - 2];
char3=(int)bytearr[count - 1];
if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) throw new UTFDataFormatException(""String_Node_Str"" + (count - 1));
chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
break;
default :
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
}
return chararr_count;
}","/** 
 * private utility method helping to convert byte[] to a String
 * @param str
 * @throws UTFDataFormatException
 */
private static int generateCharArray(char[] chararr,byte[] bytearr,int count,int chararr_count) throws UTFDataFormatException {
  int c, char2, char3;
  int utflen=bytearr.length;
  while (count < utflen) {
    c=(int)bytearr[count] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
      count++;
    chararr[chararr_count++]=(char)c;
  break;
case 12:
case 13:
count+=2;
if (count > utflen) throw new UTFDataFormatException(""String_Node_Str"");
char2=(int)bytearr[count - 1];
if ((char2 & 0xC0) != 0x80) throw new UTFDataFormatException(""String_Node_Str"" + count);
chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));
break;
case 14:
count+=3;
if (count > utflen) throw new UTFDataFormatException(""String_Node_Str"");
char2=(int)bytearr[count - 2];
char3=(int)bytearr[count - 1];
if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) throw new UTFDataFormatException(""String_Node_Str"" + (count - 1));
chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
break;
default :
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
}
return chararr_count;
}",0.9996119518820332
70657,"/** 
 * private utility method to read a UTF String 
 * @param str
 * @throws UTFDataFormatException
 */
private static String readUTF(DataInputStream dis) throws IOException {
  int length=dis.readInt();
  byte[] ret=new byte[length];
  dis.read(ret,0,length);
  return convertBytes2String(ret);
}","/** 
 * private utility method to read a UTF String
 * @param str
 * @throws UTFDataFormatException
 */
private static String readUTF(DataInputStream dis) throws IOException {
  int length=dis.readInt();
  byte[] ret=new byte[length];
  dis.read(ret,0,length);
  return convertBytes2String(ret);
}",0.9983193277310924
70658,"/** 
 * private utility method to the size of a string in bytes 
 * @param str
 * @throws UTFDataFormatException
 */
private static int getBytesSize(String str){
  int c, utflen=0;
  for (int i=0; i < str.length(); i++) {
    c=str.charAt(i);
    if ((c >= 0x0001) && (c <= 0x007F)) {
      utflen++;
    }
 else     if (c > 0x07FF) {
      utflen+=3;
    }
 else {
      utflen+=2;
    }
  }
  return utflen;
}","/** 
 * private utility method to the size of a string in bytes
 * @param str
 * @throws UTFDataFormatException
 */
private static int getBytesSize(String str){
  int c, utflen=0;
  for (int i=0; i < str.length(); i++) {
    c=str.charAt(i);
    if ((c >= 0x0001) && (c <= 0x007F)) {
      utflen++;
    }
 else     if (c > 0x07FF) {
      utflen+=3;
    }
 else {
      utflen+=2;
    }
  }
  return utflen;
}",0.9987819732034104
70659,"public void startTable(ITableContent table){
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  TableInfo info=LayoutUtil.createTable(table,width);
  if (info == null) {
    return;
  }
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption);
  }
  engine.addTable(info,table.getComputedStyle());
}","public void startTable(ITableContent table){
  new ExcelFormulaEngine().startTable(table);
  ContainerSizeInfo sizeInfo=engine.getCurrentContainer().getSizeInfo();
  int width=sizeInfo.getWidth();
  TableInfo info=LayoutUtil.createTable(table,width);
  if (info == null) {
    return;
  }
  String caption=table.getCaption();
  if (caption != null) {
    engine.addCaption(caption);
  }
  engine.addTable(info,table.getComputedStyle());
}",0.944578313253012
70660,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CachedImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CancelOnErrorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngintTaskLoggerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCViewTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCStyleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TimeZoneTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.document.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.iv.IVTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.HTMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListingElementExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportPageReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.load.PageSequenceIteratorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.index.v2.IndexReadWriteTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRIOTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.html.HTMLLayoutTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCComparatorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCReadWriteTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCStyleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCVersionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCViewTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.optimize.ExecutionOptimizeTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.adapter.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CachedImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.CancelOnErrorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSetIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.DataSourceCompareTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngineTaskCancelTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.EngintTaskLoggerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.GetParameterGroupDefnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLActionHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLCompleteImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.HTMLServerImageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.InstanceIDTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.MutipleThreadRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.PageHandlerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ParameterConverterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ProgressiveViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RelativeHyperlinkInReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RenderTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineFactoryTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.ReportletTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.RunTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCViewTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCStyleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.TimeZoneTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.document.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.DataExtractionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTaskTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ParameterPromptTextTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.impl.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.RowDataTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.element.ElementTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.api.script.instance.InstanceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.content.ReportContentReaderAndWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.CSSPaserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.dom.StyleDeclarationTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.css.engine.PerfectHashTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.DataEngineTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.NamedExpressionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.data.dte.ReportQueryBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.EmbeddedHyperlinkProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.XMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.HTMLWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.DataItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ExecutorManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.GridItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ImageItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.LabelItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.ListingElementExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.MultiLineItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TableItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.TextItemExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.buffermgr.TableTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.CssParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.css.HTMLProcessorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.template.TemplateExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.i18n.EngineResourceHandleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.impl.ReportRunnerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.OffsetIndexReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ContentTreeCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.PageHintTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.document.v2.ReportContentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.FragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.ReportPageReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.SegmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.doc.TreeFragmentTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.executor.load.PageSequenceIteratorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.internal.index.v2.IndexReadWriteTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ActionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.CellTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DimensionTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DrillThroughActionDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.DynamicTextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRIOTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.EngineIRReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.FreeFormItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GraphicMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.GridItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ImageItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.LabelItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ListItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapRuleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.MapTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSequenceTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.ReportTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.RowTypeTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.SimpleMasterPageTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableBandTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableGroupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TableItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.ir.TextItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.BlockStackingExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.content.ListContainerExecutorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.html.HTMLLayoutTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFImageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFPageLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableGroupLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTableLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.PDFTextLMTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReaderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizerTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DataDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.DynamicTextItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.FreeFormDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.GridItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.HighlightTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ImageItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.LabelItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.ListDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.MapDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.PageSetupTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.StyleDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.SuppressDuplicateDataItemTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TableItemDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextDesignTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.parser.TextParserTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.HtmlPaginateEmitterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.presentation.XMLContentReaderWriterTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCBuilderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCComparatorTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCReadWriteTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCStyleTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCVersionTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.toc.TOCViewTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.util.FileUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.executor.optimize.ExecutionOptimizeTest.class);
  return suite;
}",0.9969818092829758
70661,"/** 
 * Test get/setBookmark methods set an expression as a bookmark then get the bookmark and check the action type to test if they work correctly
 */
public void testBookmark(){
  ActionDesign action=new ActionDesign();
  String bookmark=""String_Node_Str"";
  action.setBookmark(bookmark);
  assertEquals(action.getActionType(),ActionDesign.ACTION_BOOKMARK);
  assertEquals(action.getBookmark(),bookmark);
}","/** 
 * Test get/setBookmark methods set an expression as a bookmark then get the bookmark and check the action type to test if they work correctly
 */
public void testBookmark(){
  ActionDesign action=new ActionDesign();
  Expression<String> bookmark=Expression.newConstant(""String_Node_Str"");
  action.setBookmark(bookmark);
  assertEquals(action.getActionType(),ActionDesign.ACTION_BOOKMARK);
  assertEquals(action.getBookmark(),bookmark);
}",0.9577464788732394
70662,"/** 
 * Test get/setHyperlink methods set an expression as a hyperlink then get the hyperlink and check the action type to test if they work correctly
 */
public void testHyprrlink(){
  ActionDesign action=new ActionDesign();
  String hyperlink=""String_Node_Str"";
  action.setHyperlink(hyperlink);
  assertEquals(action.getActionType(),ActionDesign.ACTION_HYPERLINK);
  assertEquals(action.getHyperlink(),hyperlink);
}","/** 
 * Test get/setHyperlink methods set an expression as a hyperlink then get the hyperlink and check the action type to test if they work correctly
 */
public void testHyprrlink(){
  ActionDesign action=new ActionDesign();
  Expression<String> hyperlink=Expression.newConstant(""String_Node_Str"");
  action.setHyperlink(hyperlink);
  assertEquals(action.getActionType(),ActionDesign.ACTION_HYPERLINK);
  assertEquals(action.getHyperlink(),hyperlink);
}",0.9587155963302753
70663,"/** 
 * Test all get/set accessors set values of the cell then get the values one by one to test if they work correctly
 */
public void testAccessor(){
  CellDesign cell=new CellDesign();
  cell.setColSpan(1);
  cell.setColumn(2);
  cell.setRowSpan(3);
  cell.setDrop(""String_Node_Str"");
  assertEquals(cell.getColSpan(),1);
  assertEquals(cell.getColumn(),2);
  assertEquals(cell.getRowSpan(),3);
  assertEquals(cell.getDrop(),""String_Node_Str"");
}","/** 
 * Test all get/set accessors set values of the cell then get the values one by one to test if they work correctly
 */
public void testAccessor(){
  CellDesign cell=new CellDesign();
  cell.setColSpan(1);
  cell.setColumn(2);
  cell.setRowSpan(3);
  Expression<String> drop=newConstant(""String_Node_Str"");
  cell.setDrop(drop);
  assertEquals(cell.getColSpan(),1);
  assertEquals(cell.getColumn(),2);
  assertEquals(cell.getRowSpan(),3);
  assertEquals(cell.getDrop(),drop);
}",0.9053763440860216
70664,"/** 
 * Test all get/set accessorss set values of the column then get the values one by one to test if they work correctly
 */
public void testAccessor(){
  ColumnDesign column=(ColumnDesign)element;
  DimensionType width=new DimensionType(5.0,DimensionType.UNITS_CM);
  column.setWidth(width);
  assertEquals(column.getWidth(),width);
}","/** 
 * Test all get/set accessorss set values of the column then get the values one by one to test if they work correctly
 */
public void testAccessor(){
  ColumnDesign column=(ColumnDesign)element;
  Expression<DimensionType> width=newConstant(new DimensionType(5.0,DimensionType.UNITS_CM));
  column.setWidth(width);
  assertEquals(column.getWidth(),width);
}",0.927038626609442
70665,"public void testDrillThrough(){
  DrillThroughActionDesign drillThrough=new DrillThroughActionDesign();
  String reportName=""String_Node_Str"";
  String bookmark=""String_Node_Str"";
  Map params=new HashMap();
  drillThrough.setReportName(reportName);
  drillThrough.setBookmark(bookmark);
  drillThrough.setParameters(params);
  assertEquals(drillThrough.getReportName(),reportName);
  assertEquals(drillThrough.getBookmark(),bookmark);
  assertEquals(drillThrough.getParameters(),params);
}","public void testDrillThrough(){
  DrillThroughActionDesign drillThrough=new DrillThroughActionDesign();
  Expression<String> reportName=newConstant(""String_Node_Str"");
  Expression<String> bookmark=newConstant(""String_Node_Str"");
  Map params=new HashMap();
  drillThrough.setReportName(reportName);
  drillThrough.setBookmark(bookmark);
  drillThrough.setParameters(params);
  assertEquals(drillThrough.getReportName(),reportName);
  assertEquals(drillThrough.getBookmark(),bookmark);
  assertEquals(drillThrough.getParameters(),params);
}",0.9436893203883496
70666,"/** 
 * Test get/setExpression methods set an expression then get the expression and check the text type to test if they work correctly
 */
public void testExpression(){
  DynamicTextItemDesign multi=new DynamicTextItemDesign();
  String exp=""String_Node_Str"";
  String type=""String_Node_Str"";
  multi.setContent(exp);
  multi.setContentType(type);
  assertEquals(multi.getContent(),exp);
  assertEquals(multi.getContentType(),type);
}","/** 
 * Test get/setExpression methods set an expression then get the expression and check the text type to test if they work correctly
 */
public void testExpression(){
  DynamicTextItemDesign multi=new DynamicTextItemDesign();
  Expression<String> exp=Expression.newConstant(""String_Node_Str"");
  Expression<String> type=Expression.newConstant(""String_Node_Str"");
  multi.setContent(exp);
  multi.setContentType(type);
  assertEquals(multi.getContent(),exp);
  assertEquals(multi.getContentType(),type);
}",0.9150743099787686
70667,"/** 
 * Test get/setAltText methods set the texts then get them to test if they work correctly
 */
public void testAltText(){
  ImageItemDesign image=new ImageItemDesign();
  image.setAltText(""String_Node_Str"",""String_Node_Str"");
  assertEquals(image.getAltText(),""String_Node_Str"");
  assertEquals(image.getAltTextKey(),""String_Node_Str"");
}","/** 
 * Test get/setAltText methods set the texts then get them to test if they work correctly
 */
public void testAltText(){
  ImageItemDesign image=new ImageItemDesign();
  Expression<String> key=newConstant(""String_Node_Str"");
  Expression<String> text=newConstant(""String_Node_Str"");
  image.setAltText(key,text);
  assertEquals(image.getAltText(),text);
  assertEquals(image.getAltTextKey(),key);
}",0.7838926174496644
70668,"/** 
 * Test all get/set accessors set values of the label then get the values one by one to test if they work correctly
 */
public void testAccessor(){
  LabelItemDesign label=new LabelItemDesign();
  ActionDesign action=new ActionDesign();
  label.setAction(action);
  label.setText(""String_Node_Str"",""String_Node_Str"");
  assertEquals(label.getAction(),action);
  assertEquals(label.getText(),""String_Node_Str"");
  assertEquals(label.getTextKey(),""String_Node_Str"");
}","/** 
 * Test all get/set accessors set values of the label then get the values one by one to test if they work correctly
 */
public void testAccessor(){
  LabelItemDesign label=new LabelItemDesign();
  ActionDesign action=new ActionDesign();
  label.setAction(action);
  Expression<String> key=newConstant(""String_Node_Str"");
  Expression<String> text=newConstant(""String_Node_Str"");
  label.setText(key,text);
  assertEquals(label.getAction(),action);
  assertEquals(label.getText(),text);
  assertEquals(label.getTextKey(),key);
}",0.8454636091724825
70669,"/** 
 * Test get/setDisplayText methods set the texts then get them to test if they work correctly
 */
public void testAccessor(){
  ((MapRuleDesign)rule).setDisplayText(""String_Node_Str"",""String_Node_Str"");
  assertEquals(((MapRuleDesign)rule).getDisplayKey(),""String_Node_Str"");
  assertEquals(((MapRuleDesign)rule).getDisplayText(),""String_Node_Str"");
}","/** 
 * Test get/setDisplayText methods set the texts then get them to test if they work correctly
 */
public void testAccessor(){
  Expression<String> key=newConstant(""String_Node_Str"");
  Expression<String> text=newConstant(""String_Node_Str"");
  ((MapRuleDesign)rule).setDisplayText(key,text);
  assertEquals(((MapRuleDesign)rule).getDisplayKey(),key);
  assertEquals(((MapRuleDesign)rule).getDisplayText(),text);
}",0.7399741267787839
70670,"/** 
 * Test all get/set accessors in base class set values of the element then get the values one by one to test if they work correctly
 */
public void testBaseItem(){
  ReportItemDesign e=(ReportItemDesign)element;
  DimensionType h=new DimensionType(1,DimensionType.UNITS_CM);
  DimensionType w=new DimensionType(1,DimensionType.UNITS_CM);
  DimensionType x=new DimensionType(1,DimensionType.UNITS_CM);
  DimensionType y=new DimensionType(1,DimensionType.UNITS_CM);
  String bookmark=""String_Node_Str"";
  e.setHeight(h);
  e.setWidth(w);
  e.setX(x);
  e.setY(y);
  e.setBookmark(bookmark);
  assertEquals(e.getHeight(),h);
  assertEquals(e.getWidth(),w);
  assertEquals(e.getX(),x);
  assertEquals(e.getY(),y);
  assertEquals(e.getBookmark(),bookmark);
}","/** 
 * Test all get/set accessors in base class set values of the element then get the values one by one to test if they work correctly
 */
public void testBaseItem(){
  ReportItemDesign e=(ReportItemDesign)element;
  Expression<DimensionType> h=createDimension();
  Expression<DimensionType> w=createDimension();
  Expression<DimensionType> x=createDimension();
  Expression<DimensionType> y=createDimension();
  Expression<String> bookmark=newConstant(""String_Node_Str"");
  e.setHeight(h);
  e.setWidth(w);
  e.setX(x);
  e.setY(y);
  e.setBookmark(bookmark);
  assertEquals(e.getHeight(),h);
  assertEquals(e.getWidth(),w);
  assertEquals(e.getX(),x);
  assertEquals(e.getY(),y);
  assertEquals(e.getBookmark(),bookmark);
}",0.7299663299663299
70671,"public void testGetSet(){
  RowDesign row=new RowDesign();
  DimensionType height=new DimensionType(1.0,DimensionType.UNITS_CM);
  String bookmark=""String_Node_Str"";
  row.setHeight(height);
  row.setBookmark(bookmark);
  assertEquals(row.getHeight(),height);
  assertEquals(row.getBookmark(),bookmark);
}","public void testGetSet(){
  RowDesign row=new RowDesign();
  Expression<DimensionType> height=newConstant(new DimensionType(1.0,DimensionType.UNITS_CM));
  Expression<String> bookmark=newConstant(""String_Node_Str"");
  row.setHeight(height);
  row.setBookmark(bookmark);
  assertEquals(row.getHeight(),height);
  assertEquals(row.getBookmark(),bookmark);
}",0.8939393939393939
70672,"/** 
 * Test all get/set accessors in base class set values of the rule then get the values one by one to test if they work correctly
 */
public void testBaseRule(){
  String[] operator={EngineIRConstants.MAP_OPERATOR_ANY,EngineIRConstants.MAP_OPERATOR_BETWEEN,EngineIRConstants.MAP_OPERATOR_EQ,EngineIRConstants.MAP_OPERATOR_FALSE,EngineIRConstants.MAP_OPERATOR_GE,EngineIRConstants.MAP_OPERATOR_GT,EngineIRConstants.MAP_OPERATOR_LE,EngineIRConstants.MAP_OPERATOR_LIKE,EngineIRConstants.MAP_OPERATOR_LT,EngineIRConstants.MAP_OPERATOR_NE,EngineIRConstants.MAP_OPERATOR_NOT_BETWEEN,EngineIRConstants.MAP_OPERATOR_NOT_NULL,EngineIRConstants.MAP_OPERATOR_NULL,EngineIRConstants.MAP_OPERATOR_TRUE};
  for (int i=0; i < operator.length; i++) {
    rule.setExpression(operator[i],""String_Node_Str"",""String_Node_Str"");
    assertEquals(rule.getOperator(),operator[i]);
    assertEquals(rule.getValue1(),""String_Node_Str"");
    assertEquals(rule.getValue2(),""String_Node_Str"");
  }
  String operator1=EngineIRConstants.MAP_OPERATOR_IN;
  ArrayList values=new ArrayList();
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  rule.setExpression(operator1,values);
  List vs=rule.getValue1List();
  assertEquals(rule.getOperator(),operator1);
  assertEquals(values.size(),vs.size());
  assertEquals(values.get(0),vs.get(0));
  assertEquals(values.get(1),vs.get(1));
  assertEquals(values.get(2),vs.get(2));
  assertEquals(values.get(3),vs.get(3));
}","/** 
 * Test all get/set accessors in base class set values of the rule then get the values one by one to test if they work correctly
 */
public void testBaseRule(){
  String[] operator={EngineIRConstants.MAP_OPERATOR_ANY,EngineIRConstants.MAP_OPERATOR_BETWEEN,EngineIRConstants.MAP_OPERATOR_EQ,EngineIRConstants.MAP_OPERATOR_FALSE,EngineIRConstants.MAP_OPERATOR_GE,EngineIRConstants.MAP_OPERATOR_GT,EngineIRConstants.MAP_OPERATOR_LE,EngineIRConstants.MAP_OPERATOR_LIKE,EngineIRConstants.MAP_OPERATOR_LT,EngineIRConstants.MAP_OPERATOR_NE,EngineIRConstants.MAP_OPERATOR_NOT_BETWEEN,EngineIRConstants.MAP_OPERATOR_NOT_NULL,EngineIRConstants.MAP_OPERATOR_NULL,EngineIRConstants.MAP_OPERATOR_TRUE};
  Expression<String> exp1=newConstant(""String_Node_Str"");
  Expression<String> exp2=newConstant(""String_Node_Str"");
  for (int i=0; i < operator.length; i++) {
    rule.setExpression(operator[i],exp1,exp2);
    assertEquals(rule.getOperator(),operator[i]);
    assertEquals(rule.getValue1(),exp1);
    assertEquals(rule.getValue2(),exp2);
  }
  String operator1=EngineIRConstants.MAP_OPERATOR_IN;
  ArrayList values=new ArrayList();
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  values.add(""String_Node_Str"");
  rule.setExpression(operator1,newConstant(values));
  Expression<? extends List> vs=rule.getValue1List();
  assertEquals(rule.getOperator(),operator1);
  assertFalse(vs.isExpression());
  assertEquals(values,vs.getValue());
}",0.846307385229541
70673,"/** 
 * Test get/setStaticText methods set a static text then get the texts and check the text type to test if they work correctly
 */
public void testStaticText(){
  TextItemDesign text=new TextItemDesign();
  text.setText(""String_Node_Str"",""String_Node_Str"");
  assertEquals(text.getText(),""String_Node_Str"");
  assertEquals(text.getTextKey(),""String_Node_Str"");
}","/** 
 * Test get/setStaticText methods set a static text then get the texts and check the text type to test if they work correctly
 */
public void testStaticText(){
  TextItemDesign text=new TextItemDesign();
  Expression<String> testKey=newConstant(""String_Node_Str"");
  Expression<String> testText=newConstant(""String_Node_Str"");
  text.setText(testKey,testText);
  assertEquals(text.getText(),testText);
  assertEquals(text.getTextKey(),testKey);
}",0.7833537331701347
70674,"public Control createDialogArea(Composite parent){
  setParentShell(parent.getShell());
  Control dialogArea=super.createDialogArea(parent);
  getSQLBuilder().addContentChangeListener(this);
  return dialogArea;
}","public Control createDialogArea(Composite parent){
  setParentShell(parent.getShell());
  Control dialogArea=super.createDialogArea(parent);
  getSQLBuilder().addContentChangeListener(this);
  SQLQueryUtility.setSystemHelp(dialogArea,IHelpConstants.CONEXT_ID_DATASET_DIALOG_SQLBUILDER);
  return dialogArea;
}",0.8160919540229885
70675,"public void createPageCustomControl(Composite parent){
  IConnectionProfile connProfile=getConnectionProfile(true,true);
  if (connProfile == null)   return;
  ISQLBuilderEditorInput sqbInput=createSQBInput(parent,connProfile);
  setControl(createSQBControl(parent,sqbInput));
}","public void createPageCustomControl(Composite parent){
  IConnectionProfile connProfile=getConnectionProfile(true,true);
  if (connProfile == null)   return;
  ISQLBuilderEditorInput sqbInput=createSQBInput(parent,connProfile);
  setControl(createSQBControl(parent,sqbInput));
  SQLQueryUtility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASET_SQLWIZARDPAGE);
}",0.8553846153846154
70676,"/** 
 * set default template preference
 */
public void setDefaultTemplatePreference(){
  String defaultDir=UIUtil.getHomeDirectory();
  PreferenceFactory.getInstance().getPreferences(this).setDefault(TEMPLATE_PREFERENCE,defaultDir);
}","/** 
 * set default template preference
 */
public void setDefaultTemplatePreference(){
  String defaultRootDir=UIUtil.getFragmentDirectory();
  File templateFolder=new File(defaultRootDir,""String_Node_Str"");
  PreferenceFactory.getInstance().getPreferences(this).setDefault(TEMPLATE_PREFERENCE,templateFolder.getAbsolutePath());
}",0.7809187279151943
70677,"/** 
 * Test the write for user-defined properties.
 * @throws Exception
 */
public void testWrite() throws Exception {
  openDesign(""String_Node_Str"");
  SlotHandle params=designHandle.getParameters();
  ScalarParameterHandle handle1=(ScalarParameterHandle)params.get(0);
  assertTrue(handle1.isHidden());
  handle1.setHidden(true);
  assertTrue(handle1.isHidden());
  handle1.setValidate(""String_Node_Str"");
  handle1.setDataType(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DATETIME,handle1.getDataType());
  handle1.setParamType(DesignChoiceConstants.SCALAR_PARAM_TYPE_AD_HOC);
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_TYPE_AD_HOC,handle1.getParamType());
  handle1.setConcealValue(true);
  assertTrue(handle1.isConcealValue());
  handle1.setDefaultValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle1.getDefaultValue());
  handle1.setIsRequired(false);
  assertFalse(handle1.isRequired());
  handle1.setDistinct(false);
  assertFalse(handle1.distinct());
  handle1.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
  assertEquals(DesignChoiceConstants.SORT_DIRECTION_ASC,handle1.getSortDirection());
  handle1.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL);
  assertEquals(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL,handle1.getSortBy());
  handle1.setSortByColumn(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle1.getSortByColumn());
  handle1.setCategory(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle1.getCategory());
  handle1.setPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle1.getPattern());
  handle1.setPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle1.getPattern());
  PropertyHandle propHandle=handle1.getPropertyHandle(IScalarParameterModel.FORMAT_PROP);
  FormatValue formatValueToSet=(FormatValue)handle1.getProperty(IScalarParameterModel.FORMAT_PROP);
  FormatValueHandle formatHandle=(FormatValueHandle)formatValueToSet.getHandle(propHandle);
  formatHandle.setLocale(ULocale.CANADA);
  handle1.setControlType(DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON);
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON,handle1.getControlType());
  handle1.setAlignment(DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT);
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT,handle1.getAlignment());
  handle1.setDataSetName(""String_Node_Str"");
  handle1.setValueExpr(""String_Node_Str"");
  handle1.setLabelExpr(""String_Node_Str"");
  handle1.setMustMatch(false);
  assertFalse(handle1.isMustMatch());
  handle1.setFixedOrder(false);
  handle1.setHelpText(""String_Node_Str"");
  handle1.setHelpTextKey(""String_Node_Str"");
  handle1.setAutoSuggestThreshold(600);
  handle1.setDefaultValueListMethod(""String_Node_Str"");
  handle1.setSelectionValueListMethod(""String_Node_Str"");
  ScalarParameterHandle handle2=(ScalarParameterHandle)params.get(1);
  assertEquals(""String_Node_Str"",handle2.getValueType());
  assertEquals(""String_Node_Str"",handle2.getDataSetName());
  assertEquals(""String_Node_Str"",handle2.getValueExpr());
  handle2.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
  handle2.setDataSetName(null);
  handle2.setValueExpr(null);
  handle2.setPromptText(""String_Node_Str"");
  handle2.setListlimit(300);
  ScalarParameterHandle handle3=(ScalarParameterHandle)params.get(2);
  List<String> valueList=new ArrayList<String>();
  valueList.add(""String_Node_Str"");
  valueList.add(null);
  valueList.add(""String_Node_Str"");
  valueList.add(""String_Node_Str"");
  handle3.setDefaultValueList(valueList);
  save();
  assertTrue(compareFile(""String_Node_Str""));
}","/** 
 * Test the write for user-defined properties.
 * @throws Exception
 */
public void testWrite() throws Exception {
  openDesign(""String_Node_Str"");
  SlotHandle params=designHandle.getParameters();
  ScalarParameterHandle handle1=(ScalarParameterHandle)params.get(0);
  assertTrue(handle1.isHidden());
  handle1.setHidden(true);
  assertTrue(handle1.isHidden());
  handle1.setValidate(""String_Node_Str"");
  handle1.setDataType(DesignChoiceConstants.PARAM_TYPE_DATETIME);
  assertEquals(DesignChoiceConstants.PARAM_TYPE_DATETIME,handle1.getDataType());
  handle1.setParamType(DesignChoiceConstants.SCALAR_PARAM_TYPE_AD_HOC);
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_TYPE_AD_HOC,handle1.getParamType());
  handle1.setConcealValue(true);
  assertTrue(handle1.isConcealValue());
  handle1.setDefaultValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle1.getDefaultValue());
  handle1.setIsRequired(false);
  assertFalse(handle1.isRequired());
  handle1.setDistinct(false);
  assertFalse(handle1.distinct());
  handle1.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
  assertEquals(DesignChoiceConstants.SORT_DIRECTION_ASC,handle1.getSortDirection());
  handle1.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL);
  assertEquals(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL,handle1.getSortBy());
  handle1.setSortByColumn(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle1.getSortByColumn());
  handle1.setCategory(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle1.getCategory());
  handle1.setPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle1.getPattern());
  handle1.setPattern(""String_Node_Str"");
  assertEquals(""String_Node_Str"",handle1.getPattern());
  PropertyHandle propHandle=handle1.getPropertyHandle(IScalarParameterModel.FORMAT_PROP);
  FormatValue formatValueToSet=(FormatValue)handle1.getProperty(IScalarParameterModel.FORMAT_PROP);
  FormatValueHandle formatHandle=(FormatValueHandle)formatValueToSet.getHandle(propHandle);
  formatHandle.setLocale(ULocale.CANADA);
  handle1.setControlType(DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON);
  assertEquals(DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON,handle1.getControlType());
  handle1.setAlignment(DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT);
  assertEquals(DesignChoiceConstants.SCALAR_PARAM_ALIGN_RIGHT,handle1.getAlignment());
  handle1.setDataSetName(""String_Node_Str"");
  handle1.setValueExpr(""String_Node_Str"");
  handle1.setLabelExpr(""String_Node_Str"");
  handle1.setMustMatch(false);
  assertFalse(handle1.isMustMatch());
  handle1.setFixedOrder(false);
  handle1.setHelpText(""String_Node_Str"");
  handle1.setHelpTextKey(""String_Node_Str"");
  handle1.setAutoSuggestThreshold(600);
  handle1.setDefaultValueListMethod(""String_Node_Str"");
  handle1.setSelectionValueListMethod(""String_Node_Str"");
  ScalarParameterHandle handle2=(ScalarParameterHandle)params.get(1);
  assertEquals(""String_Node_Str"",handle2.getValueType());
  assertEquals(""String_Node_Str"",handle2.getDataSetName());
  assertEquals(""String_Node_Str"",handle2.getValueExpr());
  handle2.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
  handle2.setDataSetName(null);
  handle2.setValueExpr(null);
  handle2.setPromptText(""String_Node_Str"");
  handle2.setListlimit(300);
  ScalarParameterHandle handle3=(ScalarParameterHandle)params.get(2);
  List<Expression> valueList=new ArrayList<Expression>();
  valueList.add(new Expression(""String_Node_Str"",ExpressionType.CONSTANT));
  valueList.add(null);
  valueList.add(new Expression(""String_Node_Str"",ExpressionType.CONSTANT));
  valueList.add(new Expression(""String_Node_Str"",ExpressionType.CONSTANT));
  handle3.setDefaultValueList(valueList);
  save();
  assertTrue(compareFile(""String_Node_Str""));
}",0.9659060402684564
70678,"public void changeTask(Notification notification){
  if (previewPainter != null) {
    if (notification == null) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      return;
    }
    List<String> errorMsgs=new ArrayList<String>(2);
    if ((notification.getNotifier() instanceof Query && ((Query)notification.getNotifier()).eContainer() instanceof Series)) {
      errorMsgs.addAll(checkDataType((Query)notification.getNotifier(),(Series)((Query)notification.getNotifier()).eContainer()));
      if (!(((ChartWizardContext)getContext()).getChartType() instanceof GanttChart) && !getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
        if (getChartModel() instanceof ChartWithAxes) {
          Axis axisWithCurrentQuery=(Axis)((Query)notification.getNotifier()).eContainer().eContainer().eContainer();
          if (ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChartModel()).isCategoryAxis() && axisWithCurrentQuery.eContainer() instanceof Axis) {
            SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
            if (!base.getGrouping().isEnabled()) {
              base.getGrouping().setEnabled(true);
            }
            if (axisWithCurrentQuery.getType() == AxisType.DATE_TIME_LITERAL) {
              SeriesDefinition valueSdWithCurrQuery=(SeriesDefinition)((Query)notification.getNotifier()).eContainer().eContainer();
              valueSdWithCurrQuery.getGrouping().setEnabled(true);
              valueSdWithCurrQuery.getGrouping().setAggregateExpression(""String_Node_Str"");
            }
          }
        }
 else {
          if (((Query)notification.getNotifier()).eContainer().eContainer().eContainer() instanceof SeriesDefinition) {
            SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
            if (!base.getGrouping().isEnabled()) {
              base.getGrouping().setEnabled(true);
            }
          }
        }
      }
    }
    if (notification.getNotifier() instanceof SeriesDefinition && getChartModel() instanceof ChartWithAxes) {
      errorMsgs.addAll(checkDataTypeForChartWithAxes());
    }
    if (notification.getNotifier() instanceof Query || notification.getNotifier() instanceof Axis || notification.getNotifier() instanceof SeriesDefinition|| notification.getNotifier() instanceof SeriesGrouping) {
      doPreview(errorMsgs);
    }
 else     if (ChartPreviewPainter.isLivePreviewActive()) {
      ChartAdapter.beginIgnoreNotifications();
      ChartUIUtil.syncRuntimeSeries(getChartModel());
      ChartAdapter.endIgnoreNotifications();
      doPreview(errorMsgs);
    }
 else {
      doPreview(errorMsgs);
    }
  }
}","public void changeTask(Notification notification){
  if (previewPainter != null) {
    if (notification == null) {
      if (getChartModel() instanceof ChartWithAxes) {
        checkDataTypeForChartWithAxes();
      }
      return;
    }
    List<String> errorMsgs=new ArrayList<String>(2);
    if ((notification.getNotifier() instanceof Query && ((Query)notification.getNotifier()).eContainer() instanceof Series)) {
      Query query=(Query)notification.getNotifier();
      errorMsgs.addAll(checkDataType(query,(Series)query.eContainer()));
      if (!(((ChartWizardContext)getContext()).getChartType() instanceof GanttChart) && !getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
        if (getChartModel() instanceof ChartWithAxes) {
          Axis axisWithCurrentQuery=(Axis)((Query)notification.getNotifier()).eContainer().eContainer().eContainer();
          if (ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChartModel()).isCategoryAxis() && axisWithCurrentQuery.eContainer() instanceof Axis) {
            SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
            if (!base.getGrouping().isEnabled()) {
              base.getGrouping().setEnabled(true);
            }
            if (axisWithCurrentQuery.getType() == AxisType.DATE_TIME_LITERAL || getDataServiceProvider().getDataType(query.getDefinition()) == DataType.DATE_TIME_LITERAL) {
              if (query.getGrouping() == null) {
                query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
              }
              SeriesGrouping group=query.getGrouping();
              group.setEnabled(true);
              group.setAggregateExpression(""String_Node_Str"");
            }
          }
        }
 else {
          if (((Query)notification.getNotifier()).eContainer().eContainer().eContainer() instanceof SeriesDefinition) {
            SeriesDefinition base=ChartUIUtil.getBaseSeriesDefinitions(getChartModel()).get(0);
            if (!base.getGrouping().isEnabled()) {
              base.getGrouping().setEnabled(true);
            }
          }
        }
      }
    }
    if (notification.getNotifier() instanceof SeriesDefinition && getChartModel() instanceof ChartWithAxes) {
      errorMsgs.addAll(checkDataTypeForChartWithAxes());
    }
    if (notification.getNotifier() instanceof Query || notification.getNotifier() instanceof Axis || notification.getNotifier() instanceof SeriesDefinition|| notification.getNotifier() instanceof SeriesGrouping) {
      doPreview(errorMsgs);
    }
 else     if (ChartPreviewPainter.isLivePreviewActive()) {
      ChartAdapter.beginIgnoreNotifications();
      ChartUIUtil.syncRuntimeSeries(getChartModel());
      ChartAdapter.endIgnoreNotifications();
      doPreview(errorMsgs);
    }
 else {
      doPreview(errorMsgs);
    }
  }
}",0.8900523560209425
70679,"/** 
 * Check if chart has aggregation.
 * @param cm
 */
public static boolean hasAggregation(Chart cm){
  SeriesDefinition baseSD=null;
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    baseSD=cwa.getBaseAxes()[0].getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    baseSD=cwoa.getSeriesDefinitions().get(0);
  }
  if (isBaseGroupingDefined(baseSD) && !ChartUtil.isEmpty(baseSD.getGrouping().getAggregateExpression())) {
    return true;
  }
  if (cm instanceof ChartWithAxes) {
    EList<Axis> axisList=((ChartWithAxes)cm).getAxes().get(0).getAssociatedAxes();
    for (    Axis a : axisList) {
      for (      SeriesDefinition orthSD : a.getSeriesDefinitions()) {
        SeriesGrouping grouping=orthSD.getGrouping();
        if (grouping != null && grouping.isEnabled()) {
          for (          Query query : orthSD.getDesignTimeSeries().getDataDefinition()) {
            if (query.getGrouping() != null && !ChartUtil.isEmpty(query.getGrouping().getAggregateExpression())) {
              return true;
            }
          }
        }
      }
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    for (    SeriesDefinition orthSD : ((ChartWithoutAxes)cm).getSeriesDefinitions().get(0).getSeriesDefinitions()) {
      SeriesGrouping grouping=orthSD.getGrouping();
      if (grouping != null && grouping.isEnabled()) {
        for (        Query query : orthSD.getDesignTimeSeries().getDataDefinition()) {
          if (query.getGrouping() != null && !ChartUtil.isEmpty(query.getGrouping().getAggregateExpression())) {
            return true;
          }
        }
      }
    }
  }
  return false;
}","/** 
 * Check if chart has aggregation.
 * @param cm
 */
public static boolean hasAggregation(Chart cm){
  SeriesDefinition baseSD=null;
  if (cm instanceof ChartWithAxes) {
    ChartWithAxes cwa=(ChartWithAxes)cm;
    baseSD=cwa.getBaseAxes()[0].getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
    baseSD=cwoa.getSeriesDefinitions().get(0);
  }
  if (isBaseGroupingDefined(baseSD) && !ChartUtil.isEmpty(baseSD.getGrouping().getAggregateExpression())) {
    return true;
  }
  try {
    if (cm instanceof ChartWithAxes) {
      EList<Axis> axisList=((ChartWithAxes)cm).getAxes().get(0).getAssociatedAxes();
      for (      Axis a : axisList) {
        for (        SeriesDefinition orthSD : a.getSeriesDefinitions()) {
          for (          Query query : orthSD.getDesignTimeSeries().getDataDefinition()) {
            if (ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query) != null) {
              return true;
            }
          }
        }
      }
    }
 else     if (cm instanceof ChartWithoutAxes) {
      for (      SeriesDefinition orthSD : ((ChartWithoutAxes)cm).getSeriesDefinitions().get(0).getSeriesDefinitions()) {
        for (        Query query : orthSD.getDesignTimeSeries().getDataDefinition()) {
          if (ChartUtil.getAggregateFuncExpr(orthSD,baseSD,query) != null) {
            return true;
          }
        }
      }
    }
  }
 catch (  ChartException e) {
    logger.log(e);
  }
  return false;
}",0.5038497074222359
70680,"public void setAggregation(Query query){
  this.query=query;
  if (query.getGrouping() == null) {
    fGrouping=SeriesGroupingImpl.create();
  }
 else {
    fGrouping=(SeriesGrouping)EcoreUtil.copy(query.getGrouping());
  }
}","public void setAggregation(Query query,SeriesDefinition sd){
  this.query=query;
  this.fSeriesDefi=sd;
  if (query.getGrouping() == null) {
    if (sd.getGrouping() != null) {
      fGrouping=(SeriesGrouping)EcoreUtil.copy(sd.getGrouping());
    }
 else {
      fGrouping=SeriesGroupingImpl.create();
    }
  }
 else {
    fGrouping=(SeriesGrouping)EcoreUtil.copy(query.getGrouping());
  }
}",0.6158833063209076
70681,"public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    if (AGG_FUNC_NONE.equals(aggFunc)) {
      fGrouping.setEnabled(false);
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setEnabled(true);
      fGrouping.setAggregateExpression(aggFunc);
    }
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    if (fSeriesDefi == null) {
      query.setGrouping(fGrouping);
      query.getGrouping().eAdapters().addAll(query.eAdapters());
    }
 else {
      fSeriesDefi.setGrouping(fGrouping);
      fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    }
    ChartUIUtil.isValidAggregation(fChartContext,fGrouping,false);
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}","public void widgetSelected(SelectionEvent e){
  Object source=e.getSource();
  if (source == fCmbAggregate) {
    String aggFunc=((String[])fCmbAggregate.getData())[fCmbAggregate.getSelectionIndex()];
    showAggregateParameters(aggFunc);
    if (AGG_FUNC_NONE.equals(aggFunc)) {
      fGrouping.setEnabled(false);
      fGrouping.setAggregateExpression(null);
    }
 else {
      fGrouping.setEnabled(true);
      fGrouping.setAggregateExpression(aggFunc);
    }
  }
 else   if (isAggParametersWidget(source)) {
    setAggParameter((Text)source);
  }
 else   if (isBuilderBtnWidget(source)) {
    try {
      Text txtArg=fExprBuilderWidgetsMap.get(source);
      String sExpr=fChartContext.getUIServiceProvider().invoke(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,txtArg.getText(),fChartContext.getExtendedItem(),fTitle);
      txtArg.setText(sExpr);
      setAggParameter(txtArg);
    }
 catch (    ChartException e1) {
      WizardBase.displayException(e1);
    }
  }
 else   if (source == fBtnOK) {
    if (query != null) {
      query.setGrouping(fGrouping);
      query.getGrouping().eAdapters().addAll(query.eAdapters());
    }
 else {
      fSeriesDefi.setGrouping(fGrouping);
      fSeriesDefi.getGrouping().eAdapters().addAll(fSeriesDefi.eAdapters());
    }
    ChartUIUtil.isValidAggregation(fChartContext,fGrouping,false);
    closeAggregateEditor(getShell());
  }
 else   if (source == fBtnCancel) {
    closeAggregateEditor(getShell());
  }
}",0.9931833674164964
70682,"public AggregateEditorComposite(Composite parent,SeriesDefinition sd,ChartWizardContext context,boolean enabled,Query query){
  super(parent,SWT.NONE);
  setAggregation(query);
  fChartContext=context;
  fEnabled=enabled;
  placeComponents();
}","public AggregateEditorComposite(Composite parent,SeriesDefinition sd,ChartWizardContext context,boolean enabled,Query query){
  super(parent,SWT.NONE);
  setAggregation(query,sd);
  fChartContext=context;
  fEnabled=enabled;
  placeComponents();
}",0.9938900203665988
70683,"private void createDropDownComponent(){
  Point pLoc=UIHelper.getScreenLocation(fBtnDropDown.getParent());
  int iXLoc=pLoc.x;
  int iYLoc=pLoc.y + fBtnDropDown.getParent().getSize().y;
  int iShellWidth=BLOCK_WIDTH;
  int iShellHeight=BLOCK_HEIGHT;
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  if (iXLoc + iShellWidth > this.getDisplay().getClientArea().width) {
    iXLoc=this.getDisplay().getClientArea().width - iShellWidth;
  }
  Shell shell=new Shell(this.getShell(),SWT.NONE);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  shell.setLocation(iXLoc,iYLoc);
  if (fSeriesDefi == null) {
    setAggregation(query);
  }
 else {
    setSeriesDefinition(fSeriesDefi);
  }
  fAggregateEditor=new AggregateDropDownEditorComposite(shell,SWT.NONE,null);
  shell.layout();
  shell.open();
}","private void createDropDownComponent(){
  Point pLoc=UIHelper.getScreenLocation(fBtnDropDown.getParent());
  int iXLoc=pLoc.x;
  int iYLoc=pLoc.y + fBtnDropDown.getParent().getSize().y;
  int iShellWidth=BLOCK_WIDTH;
  int iShellHeight=BLOCK_HEIGHT;
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  if (iXLoc + iShellWidth > this.getDisplay().getClientArea().width) {
    iXLoc=this.getDisplay().getClientArea().width - iShellWidth;
  }
  Shell shell=new Shell(this.getShell(),SWT.NONE);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  shell.setLocation(iXLoc,iYLoc);
  if (query != null) {
    setAggregation(query,fSeriesDefi);
  }
 else {
    setSeriesDefinition(fSeriesDefi);
  }
  fAggregateEditor=new AggregateDropDownEditorComposite(shell,SWT.NONE,null);
  shell.layout();
  shell.open();
}",0.947429906542056
70684,"public void selectArea(boolean selected,Object data){
  if (data instanceof Object[]) {
    Object[] array=(Object[])data;
    seriesdefinition=(SeriesDefinition)array[0];
    query=(Query)array[1];
    setUIText(getInputControl(),query.getDefinition());
    DataDefinitionTextManager.getInstance().addDataDefinitionText(getInputControl(),this);
    if (fAggEditorComposite != null) {
      fAggEditorComposite.setAggregation(query);
    }
  }
  setColor();
}","public void selectArea(boolean selected,Object data){
  if (data instanceof Object[]) {
    Object[] array=(Object[])data;
    seriesdefinition=(SeriesDefinition)array[0];
    query=(Query)array[1];
    setUIText(getInputControl(),query.getDefinition());
    DataDefinitionTextManager.getInstance().addDataDefinitionText(getInputControl(),this);
    if (fAggEditorComposite != null) {
      fAggEditorComposite.setAggregation(query,seriesdefinition);
    }
  }
  setColor();
}",0.9818181818181818
70685,"private void doCompatibility(Chart cm){
  if (cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
    SeriesDefinition sdBase=ChartUtil.getBaseSeriesDefinitions(cm).get(0);
    if (cm.getLegend().getFormatSpecifier() == null && sdBase.getFormatSpecifier() != null) {
      cm.getLegend().setFormatSpecifier(FormatSpecifierImpl.copyInstance(sdBase.getFormatSpecifier()));
    }
  }
}","private void doCompatibility(Chart cm){
  if (cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
    SeriesDefinition sdBase=ChartUtil.getBaseSeriesDefinitions(cm).get(0);
    if (cm.getLegend().getFormatSpecifier() == null && sdBase.getFormatSpecifier() != null) {
      cm.getLegend().setFormatSpecifier(FormatSpecifierImpl.copyInstance(sdBase.getFormatSpecifier()));
    }
  }
  if (cm.getEmptyMessage() == null) {
    Label la=LabelImpl.create();
    la.setVisible(false);
    cm.setEmptyMessage(la);
  }
}",0.86084142394822
70686,"private String getFilePath(URL url){
  String path=url.getFile();
  try {
    return URLDecoder.decode(path,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    return path;
  }
}","private static String getFilePath(URL url){
  String path=url.getFile();
  try {
    return URLDecoder.decode(path,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    return path;
  }
}",0.982716049382716
70687,"FileLoader(URL url){
  baseUrl=url;
  baseDir=new File(url.getFile());
  codeSource=new CodeSource(baseUrl,(CodeSigner[])null);
}","FileLoader(URL url){
  baseUrl=url;
  baseDir=new File(getFilePath(url));
  codeSource=new CodeSource(baseUrl,(CodeSigner[])null);
}",0.9578544061302682
70688,"public void createTOC(Set bookmarks){
  ULocale ulocale=null;
  Locale locale=context.getLocale();
  if (locale == null) {
    ulocale=ULocale.getDefault();
  }
 else {
    ulocale=ULocale.forLocale(locale);
  }
  TOCNode tocTree=report.getTOCTree(""String_Node_Str"",ulocale).getRoot();
  if (tocTree == null || tocTree.getChildren().isEmpty()) {
    writer.setViewerPreferences(PdfWriter.PageModeUseNone);
  }
 else {
    writer.setViewerPreferences(PdfWriter.PageModeUseOutlines);
    TOCHandler tocHandler=new TOCHandler(tocTree,writer.getDirectContent().getRootOutline(),bookmarks);
    tocHandler.createTOC();
  }
}","public void createTOC(Set bookmarks){
  if (bookmarks.isEmpty()) {
    return;
  }
  ULocale ulocale=null;
  Locale locale=context.getLocale();
  if (locale == null) {
    ulocale=ULocale.getDefault();
  }
 else {
    ulocale=ULocale.forLocale(locale);
  }
  TOCNode tocTree=report.getTOCTree(""String_Node_Str"",ulocale).getRoot();
  if (tocTree == null || tocTree.getChildren().isEmpty()) {
    writer.setViewerPreferences(PdfWriter.PageModeUseNone);
  }
 else {
    writer.setViewerPreferences(PdfWriter.PageModeUseOutlines);
    TOCHandler tocHandler=new TOCHandler(tocTree,writer.getDirectContent().getRootOutline(),bookmarks);
    tocHandler.createTOC();
  }
}",0.509742790335152
70689,"protected void propertyChange(Map info){
  Set set=info.keySet();
  Iterator itor=set.iterator();
  while (itor.hasNext()) {
    Object obj=itor.next();
    if (ICrosstabReportItemConstants.MEASURE_DIRECTION_PROP.equals(obj) || ICrosstabReportItemConstants.PAGE_LAYOUT_PROP.equals(obj) || ILevelViewConstants.AGGREGATION_HEADER_LOCATION_PROP.equals(obj)) {
      refresh();
      return;
    }
  }
  super.propertyChange(info);
}","protected void propertyChange(Map info){
  Set set=info.keySet();
  Iterator itor=set.iterator();
  while (itor.hasNext()) {
    Object obj=itor.next();
    if (ICrosstabReportItemConstants.MEASURE_DIRECTION_PROP.equals(obj) || ICrosstabReportItemConstants.PAGE_LAYOUT_PROP.equals(obj) || ILevelViewConstants.AGGREGATION_HEADER_LOCATION_PROP.equals(obj)|| ICrosstabReportItemConstants.HIDE_MEASURE_HEADER_PROP.equals(obj)) {
      refresh();
      return;
    }
  }
  super.propertyChange(info);
}",0.9265658747300216
70690,"private int addMesureHeaderToVirtual(List list,int rowNumber,int rowSpan,int columnNumber,int columnSpan,List measures){
  int measureCount=measures.size();
  for (int k=0; k < measureCount; k++) {
    MeasureViewHandle preMmeasureHandle=(MeasureViewHandle)measures.get(k);
    CrosstabCellHandle preMeasureCellHandle=preMmeasureHandle.getHeader();
    CrosstabCellAdapter measureCellAdapt=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER,preMeasureCellHandle,rowNumber,rowSpan,columnNumber,columnSpan,false);
    if (isVertical()) {
      rowNumber++;
    }
 else {
      columnNumber++;
    }
    list.add(measureCellAdapt);
  }
  return measureCount;
}","private int addMesureHeaderToVirtual(List list,int rowNumber,int rowSpan,int columnNumber,int columnSpan,List measures){
  int measureCount=measures.size();
  if (isHideHeader()) {
    return measureCount;
  }
  for (int k=0; k < measureCount; k++) {
    MeasureViewHandle preMmeasureHandle=(MeasureViewHandle)measures.get(k);
    CrosstabCellHandle preMeasureCellHandle=preMmeasureHandle.getHeader();
    CrosstabCellAdapter measureCellAdapt=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER,preMeasureCellHandle,rowNumber,rowSpan,columnNumber,columnSpan,false);
    if (isVertical()) {
      rowNumber++;
    }
 else {
      columnNumber++;
    }
    list.add(measureCellAdapt);
  }
  return measureCount;
}",0.9629111266620014
70691,"private int addMesureHeader(List list,int baseColumn,int area,List measures){
  if (isVertical() && area == ICrosstabConstants.COLUMN_AXIS_TYPE) {
    return 0;
  }
 else   if (!isVertical() && area == ICrosstabConstants.ROW_AXIS_TYPE) {
    return 0;
  }
  int measureCount=measures.size();
  for (int k=0; k < measureCount; k++) {
    MeasureViewHandle preMmeasureHandle=(MeasureViewHandle)measures.get(k);
    CrosstabCellHandle preMeasureCellHandle=preMmeasureHandle.getHeader();
    CrosstabCellAdapter measureCellAdapt=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER,preMeasureCellHandle,1,-1,baseColumn + k + 1,-1,isVertical());
    list.add(measureCellAdapt);
  }
  return measureCount;
}","private int addMesureHeader(List list,int baseColumn,int area,List measures){
  if (isVertical() && area == ICrosstabConstants.COLUMN_AXIS_TYPE) {
    return 0;
  }
 else   if (!isVertical() && area == ICrosstabConstants.ROW_AXIS_TYPE) {
    return 0;
  }
  int measureCount=measures.size();
  if (isHideHeader()) {
    return measureCount;
  }
  for (int k=0; k < measureCount; k++) {
    MeasureViewHandle preMmeasureHandle=(MeasureViewHandle)measures.get(k);
    CrosstabCellHandle preMeasureCellHandle=preMmeasureHandle.getHeader();
    CrosstabCellAdapter measureCellAdapt=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER,preMeasureCellHandle,1,-1,baseColumn + k + 1,-1,isVertical());
    list.add(measureCellAdapt);
  }
  return measureCount;
}",0.9649702577660276
70692,"private List buildRowArea(){
  List retValue=new ArrayList();
  CrosstabReportItemHandle handle=getCrosstabReportItemHandle();
  int count=handle.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE);
  int measureCount=handle.getMeasureCount();
  int columnNumber=measureCount == 0 ? 1 : 2;
  if (!isVertical()) {
    columnNumber=1;
  }
  List measureHandleList=getMeasreViewHandleList();
  int rowNumber=0;
  if (count != 0) {
    rowNumber=addMesureHeader(retValue,0,ICrosstabConstants.ROW_AXIS_TYPE,measureHandleList);
  }
  if (rowNumber == 0) {
    rowNumber=1;
  }
  for (int i=count - 1; i >= 0; i--) {
    DimensionViewHandle dimensionHandle=handle.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i);
    int levelCount=dimensionHandle.getLevelCount();
    for (int j=levelCount - 1; j >= 0; j--) {
      LevelViewHandle levelHandle=dimensionHandle.getLevel(j);
      CrosstabCellHandle cellHandle=levelHandle.getCell();
      String type=j == 0 ? ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE : ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE;
      CrosstabCellAdapter cellAdapter=factory.createCrosstabCellAdapter(type,cellHandle,1,rowNumber,columnNumber,-1,false);
      retValue.add(cellAdapter);
      map.put(levelHandle,Integer.valueOf(rowNumber));
      LevelViewHandle preLevelHandle=getPreviousLevelViewHandle(dimensionHandle,levelHandle);
      if (preLevelHandle != null && preLevelHandle.getAggregationHeader() != null) {
        List list=preLevelHandle.getAggregationMeasures();
        if (list.size() != 0) {
          int preMeasureCount=list.size();
          CrosstabCellHandle preCellHandle=preLevelHandle.getAggregationHeader();
          CrosstabCellAdapter preCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_SUB_TOTAL,preCellHandle,rowNumber + 1,isVertical() ? preMeasureCount : 1,columnNumber,columnNumber - (isVertical() ? 1 : 0),false);
          retValue.add(preCellAdapter);
          int addCount=addMesureHeader(retValue,rowNumber,ICrosstabConstants.ROW_AXIS_TYPE,list);
          rowNumber=rowNumber + (addCount == 0 ? 1 : addCount);
        }
      }
      if (j != 0 || i != 0) {
        columnNumber=columnNumber + 1;
      }
    }
  }
  CrosstabCellHandle grandCell=handle.getGrandTotal(ICrosstabConstants.ROW_AXIS_TYPE);
  if (grandCell != null && !retValue.isEmpty()) {
    List list=handle.getAggregationMeasures(ICrosstabConstants.ROW_AXIS_TYPE);
    int size=list.size();
    if (size > 0) {
      CrosstabCellAdapter grandCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_GRAND_TOTAL,grandCell,rowNumber + 1,isVertical() ? size : 1,columnNumber,columnNumber - (isVertical() ? 1 : 0),false);
      retValue.add(grandCellAdapter);
      int addCount=addMesureHeader(retValue,rowNumber,ICrosstabConstants.ROW_AXIS_TYPE,list);
      rowNumber=rowNumber + (addCount == 0 ? 1 : addCount);
    }
  }
  if (retValue.isEmpty()) {
    CrosstabCellAdapter columnVirtual=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_ROW_VIRTUAL,null,1,-1,1,-1,false);
    retValue.add(columnVirtual);
    columnNumber=1;
    rowNumber=1;
  }
  map.put(ROWAREA_COLUMN,Integer.valueOf(columnNumber));
  map.put(ROWAREA_ROW,Integer.valueOf(rowNumber));
  covertColumnNumber(columnNumber,retValue);
  return retValue;
}","private List buildRowArea(){
  List retValue=new ArrayList();
  CrosstabReportItemHandle handle=getCrosstabReportItemHandle();
  int count=handle.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE);
  int measureCount=handle.getMeasureCount();
  int columnNumber=measureCount == 0 ? 1 : 2;
  if (!isVertical() || isHideHeader()) {
    columnNumber=1;
  }
  List measureHandleList=getMeasreViewHandleList();
  int rowNumber=0;
  if (count != 0) {
    rowNumber=addMesureHeader(retValue,0,ICrosstabConstants.ROW_AXIS_TYPE,measureHandleList);
  }
  if (rowNumber == 0) {
    rowNumber=1;
  }
  for (int i=count - 1; i >= 0; i--) {
    DimensionViewHandle dimensionHandle=handle.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i);
    int levelCount=dimensionHandle.getLevelCount();
    for (int j=levelCount - 1; j >= 0; j--) {
      LevelViewHandle levelHandle=dimensionHandle.getLevel(j);
      CrosstabCellHandle cellHandle=levelHandle.getCell();
      String type=j == 0 ? ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE : ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE;
      CrosstabCellAdapter cellAdapter=factory.createCrosstabCellAdapter(type,cellHandle,1,rowNumber,columnNumber,-1,false);
      retValue.add(cellAdapter);
      map.put(levelHandle,Integer.valueOf(rowNumber));
      LevelViewHandle preLevelHandle=getPreviousLevelViewHandle(dimensionHandle,levelHandle);
      if (preLevelHandle != null && preLevelHandle.getAggregationHeader() != null) {
        List list=preLevelHandle.getAggregationMeasures();
        if (list.size() != 0) {
          int preMeasureCount=list.size();
          CrosstabCellHandle preCellHandle=preLevelHandle.getAggregationHeader();
          CrosstabCellAdapter preCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_SUB_TOTAL,preCellHandle,rowNumber + 1,isVertical() ? preMeasureCount : 1,columnNumber,columnNumber - (isVertical() && !isHideHeader() ? 1 : 0),false);
          retValue.add(preCellAdapter);
          int addCount=addMesureHeader(retValue,rowNumber,ICrosstabConstants.ROW_AXIS_TYPE,list);
          rowNumber=rowNumber + (addCount == 0 ? 1 : addCount);
        }
      }
      if (j != 0 || i != 0) {
        columnNumber=columnNumber + 1;
      }
    }
  }
  CrosstabCellHandle grandCell=handle.getGrandTotal(ICrosstabConstants.ROW_AXIS_TYPE);
  if (grandCell != null && !retValue.isEmpty()) {
    List list=handle.getAggregationMeasures(ICrosstabConstants.ROW_AXIS_TYPE);
    int size=list.size();
    if (size > 0) {
      CrosstabCellAdapter grandCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_GRAND_TOTAL,grandCell,rowNumber + 1,isVertical() ? size : 1,columnNumber,columnNumber - (isVertical() && !isHideHeader() ? 1 : 0),false);
      retValue.add(grandCellAdapter);
      int addCount=addMesureHeader(retValue,rowNumber,ICrosstabConstants.ROW_AXIS_TYPE,list);
      rowNumber=rowNumber + (addCount == 0 ? 1 : addCount);
    }
  }
  if (retValue.isEmpty()) {
    CrosstabCellAdapter columnVirtual=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_ROW_VIRTUAL,null,1,-1,1,-1,false);
    retValue.add(columnVirtual);
    columnNumber=1;
    rowNumber=1;
  }
  map.put(ROWAREA_COLUMN,Integer.valueOf(columnNumber));
  map.put(ROWAREA_ROW,Integer.valueOf(rowNumber));
  covertColumnNumber(columnNumber,retValue);
  return retValue;
}",0.9916392953120334
70693,"private List buildColumnArea(){
  List retValue=new ArrayList();
  CrosstabReportItemHandle handle=getCrosstabReportItemHandle();
  int count=handle.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE);
  int measureCount=handle.getMeasureCount();
  int rowNumber=measureCount == 0 ? 1 : 2;
  if (isVertical()) {
    rowNumber=1;
  }
  List measureHandleList=getMeasreViewHandleList();
  int columnNumber=0;
  if (count != 0) {
    columnNumber=addMesureHeader(retValue,0,ICrosstabConstants.COLUMN_AXIS_TYPE,measureHandleList);
  }
  if (columnNumber == 0) {
    columnNumber=1;
  }
  for (int i=count - 1; i >= 0; i--) {
    DimensionViewHandle dimensionHandle=handle.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i);
    int levelCount=dimensionHandle.getLevelCount();
    for (int j=levelCount - 1; j >= 0; j--) {
      LevelViewHandle levelHandle=dimensionHandle.getLevel(j);
      CrosstabCellHandle cellHandle=levelHandle.getCell();
      String type=j == 0 ? ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE : ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE;
      CrosstabCellAdapter cellAdapter=factory.createCrosstabCellAdapter(type,cellHandle,rowNumber,1,1,columnNumber,false);
      retValue.add(cellAdapter);
      map.put(levelHandle,Integer.valueOf(columnNumber));
      LevelViewHandle preLevelHandle=getPreviousLevelViewHandle(dimensionHandle,levelHandle);
      if (preLevelHandle != null && preLevelHandle.getAggregationHeader() != null) {
        List list=preLevelHandle.getAggregationMeasures();
        if (list.size() != 0) {
          int preMeasureCount=list.size();
          CrosstabCellHandle preCellHandle=preLevelHandle.getAggregationHeader();
          CrosstabCellAdapter preCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_SUB_TOTAL,preCellHandle,rowNumber,rowNumber - (isVertical() ? 0 : 1),columnNumber + 1,isVertical() ? 1 : preMeasureCount,false);
          retValue.add(preCellAdapter);
          int addCount=addMesureHeader(retValue,columnNumber,ICrosstabConstants.COLUMN_AXIS_TYPE,list);
          columnNumber=columnNumber + (addCount == 0 ? 1 : addCount);
        }
      }
      if (j != 0 || i != 0) {
        rowNumber=rowNumber + 1;
      }
    }
  }
  CrosstabCellHandle grandCell=handle.getGrandTotal(ICrosstabConstants.COLUMN_AXIS_TYPE);
  if (grandCell != null && !retValue.isEmpty()) {
    List list=handle.getAggregationMeasures(ICrosstabConstants.COLUMN_AXIS_TYPE);
    int size=list.size();
    if (size > 0) {
      CrosstabCellAdapter grandCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_GRAND_TOTAL,grandCell,rowNumber,rowNumber - (isVertical() ? 0 : 1),columnNumber + 1,isVertical() ? 1 : size,false);
      retValue.add(grandCellAdapter);
      int addCount=addMesureHeader(retValue,columnNumber,ICrosstabConstants.COLUMN_AXIS_TYPE,list);
      columnNumber=columnNumber + (addCount == 0 ? 1 : addCount);
    }
  }
  if (retValue.isEmpty()) {
    CrosstabCellAdapter columnVirtual=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_COLUMN_VIRTUAL,null,1,-1,1,-1,false);
    retValue.add(columnVirtual);
    columnNumber=1;
    rowNumber=1;
  }
  map.put(COLUMNAREA_COLUMN,Integer.valueOf(columnNumber));
  map.put(COLUMNAREA_ROW,Integer.valueOf(rowNumber));
  covertRowNumber(rowNumber,retValue);
  return retValue;
}","private List buildColumnArea(){
  List retValue=new ArrayList();
  CrosstabReportItemHandle handle=getCrosstabReportItemHandle();
  int count=handle.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE);
  int measureCount=handle.getMeasureCount();
  int rowNumber=measureCount == 0 ? 1 : 2;
  if (isVertical() || isHideHeader()) {
    rowNumber=1;
  }
  List measureHandleList=getMeasreViewHandleList();
  int columnNumber=0;
  if (count != 0) {
    columnNumber=addMesureHeader(retValue,0,ICrosstabConstants.COLUMN_AXIS_TYPE,measureHandleList);
  }
  if (columnNumber == 0) {
    columnNumber=1;
  }
  for (int i=count - 1; i >= 0; i--) {
    DimensionViewHandle dimensionHandle=handle.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i);
    int levelCount=dimensionHandle.getLevelCount();
    for (int j=levelCount - 1; j >= 0; j--) {
      LevelViewHandle levelHandle=dimensionHandle.getLevel(j);
      CrosstabCellHandle cellHandle=levelHandle.getCell();
      String type=j == 0 ? ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE : ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE;
      CrosstabCellAdapter cellAdapter=factory.createCrosstabCellAdapter(type,cellHandle,rowNumber,1,1,columnNumber,false);
      retValue.add(cellAdapter);
      map.put(levelHandle,Integer.valueOf(columnNumber));
      LevelViewHandle preLevelHandle=getPreviousLevelViewHandle(dimensionHandle,levelHandle);
      if (preLevelHandle != null && preLevelHandle.getAggregationHeader() != null) {
        List list=preLevelHandle.getAggregationMeasures();
        if (list.size() != 0) {
          int preMeasureCount=list.size();
          CrosstabCellHandle preCellHandle=preLevelHandle.getAggregationHeader();
          CrosstabCellAdapter preCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_SUB_TOTAL,preCellHandle,rowNumber,rowNumber - (isVertical() || isHideHeader() ? 0 : 1),columnNumber + 1,isVertical() ? 1 : preMeasureCount,false);
          retValue.add(preCellAdapter);
          int addCount=addMesureHeader(retValue,columnNumber,ICrosstabConstants.COLUMN_AXIS_TYPE,list);
          columnNumber=columnNumber + (addCount == 0 ? 1 : addCount);
        }
      }
      if (j != 0 || i != 0) {
        rowNumber=rowNumber + 1;
      }
    }
  }
  CrosstabCellHandle grandCell=handle.getGrandTotal(ICrosstabConstants.COLUMN_AXIS_TYPE);
  if (grandCell != null && !retValue.isEmpty()) {
    List list=handle.getAggregationMeasures(ICrosstabConstants.COLUMN_AXIS_TYPE);
    int size=list.size();
    if (size > 0) {
      CrosstabCellAdapter grandCellAdapter=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_GRAND_TOTAL,grandCell,rowNumber,rowNumber - (isVertical() || isHideHeader() ? 0 : 1),columnNumber + 1,isVertical() ? 1 : size,false);
      retValue.add(grandCellAdapter);
      int addCount=addMesureHeader(retValue,columnNumber,ICrosstabConstants.COLUMN_AXIS_TYPE,list);
      columnNumber=columnNumber + (addCount == 0 ? 1 : addCount);
    }
  }
  if (retValue.isEmpty()) {
    CrosstabCellAdapter columnVirtual=factory.createCrosstabCellAdapter(ICrosstabCellAdapterFactory.CELL_COLUMN_VIRTUAL,null,1,-1,1,-1,false);
    retValue.add(columnVirtual);
    columnNumber=1;
    rowNumber=1;
  }
  map.put(COLUMNAREA_COLUMN,Integer.valueOf(columnNumber));
  map.put(COLUMNAREA_ROW,Integer.valueOf(rowNumber));
  covertRowNumber(rowNumber,retValue);
  return retValue;
}",0.9920306965761512
70694,"private void adjustDirection(List columns,List rows){
  String area, otherArea;
  List workList=null;
  if (isVertical()) {
    workList=rows;
    area=ROWAREA_ROW;
    otherArea=ROWAREA_COLUMN;
  }
 else {
    workList=columns;
    area=COLUMNAREA_COLUMN;
    otherArea=COLUMNAREA_ROW;
  }
  if (workList.size() != 1) {
    return;
  }
  Object obj=workList.get(0);
  if (!(obj instanceof VirtualCrosstabCellAdapter)) {
    return;
  }
  CrosstabCellAdapter adapter=(CrosstabCellAdapter)obj;
  List measures=getMeasreViewHandleList();
  if (measures.size() > 0) {
    int number;
    if (isVertical()) {
      number=addMesureHeaderToVirtual(workList,1,1,2,1,measures);
      adapter.setRowSpan(number);
    }
 else {
      number=addMesureHeaderToVirtual(workList,2,1,1,1,measures);
      adapter.setColumnSpan(number);
    }
    if (number == 0) {
      number=1;
    }
    map.put(area,Integer.valueOf(number));
    map.put(otherArea,Integer.valueOf(2));
  }
}","private void adjustDirection(List columns,List rows){
  String area, otherArea;
  List workList=null;
  if (isVertical()) {
    workList=rows;
    area=ROWAREA_ROW;
    otherArea=ROWAREA_COLUMN;
  }
 else {
    workList=columns;
    area=COLUMNAREA_COLUMN;
    otherArea=COLUMNAREA_ROW;
  }
  if (workList.size() != 1) {
    return;
  }
  Object obj=workList.get(0);
  if (!(obj instanceof VirtualCrosstabCellAdapter)) {
    return;
  }
  CrosstabCellAdapter adapter=(CrosstabCellAdapter)obj;
  List measures=getMeasreViewHandleList();
  if (measures.size() > 0) {
    int number;
    if (isVertical()) {
      number=addMesureHeaderToVirtual(workList,1,1,2,1,measures);
      adapter.setRowSpan(number);
    }
 else {
      number=addMesureHeaderToVirtual(workList,2,1,1,1,measures);
      adapter.setColumnSpan(number);
    }
    if (number == 0) {
      number=1;
    }
    map.put(area,Integer.valueOf(number));
    if (isHideHeader()) {
      map.put(otherArea,Integer.valueOf(1));
    }
 else {
      map.put(otherArea,Integer.valueOf(2));
    }
  }
}",0.9539831766452253
70695,"protected void writeRunProperties(IStyle style,String fontFamily,boolean ishyperlink){
  writeFont(fontFamily);
  writeFontSize(style);
  writeLetterSpacing(style);
  writeTextUnderline(style);
  writeTextLineThrough(style);
  writeFontStyle(style);
  writeFontWeight(style);
  writeTextColor(style);
  writeHyperlinkStyle(ishyperlink);
}","protected void writeRunProperties(IStyle style,String fontFamily,boolean ishyperlink){
  writeHyperlinkStyle(ishyperlink,style);
  writeFont(fontFamily);
  writeFontSize(style);
  writeLetterSpacing(style);
  writeTextLineThrough(style);
  writeFontStyle(style);
  writeFontWeight(style);
}",0.7802547770700637
70696,"private void writeHyperlinkStyle(boolean isHyperlink){
  if (isHyperlink) {
    writeAttrTag(""String_Node_Str"",""String_Node_Str"");
    writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  }
}","private void writeHyperlinkStyle(boolean isHyperlink,IStyle style){
  if (isHyperlink) {
    writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writeTextUnderline(style);
    writeTextColor(style);
  }
}",0.6926829268292682
70697,"public void start(boolean rtl,String creator,String title,String description){
  this.rtl=rtl;
  writer.startWriter();
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeCoreProperties(creator,title,description);
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.closeTag(""String_Node_Str"");
  writeBidi(rtl);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
}","public void start(boolean rtl,String creator,String title,String description){
  this.rtl=rtl;
  writer.startWriter();
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.literal(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeCoreProperties(creator,title,description);
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",4);
  writer.closeTag(""String_Node_Str"");
  writeBidi(rtl);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
}",0.8350651804269791
70698,"private static Series copyInstanceThis(Series src){
  if (src == null) {
    return null;
  }
  SeriesImpl dest=new SeriesImpl();
  if (src.getLabel() != null) {
    dest.setLabel(LabelImpl.copyInstance(src.getLabel()));
  }
  if (src.getDataDefinition() != null) {
    EList<Query> list=dest.getDataDefinition();
    for (    Query element : src.getDataDefinition()) {
      list.add(QueryImpl.copyInstance(element));
    }
  }
  if (src.getDataPoint() != null) {
    dest.setDataPoint(DataPointImpl.copyInstance(src.getDataPoint()));
  }
  if (src.getDataSets() != null) {
    EMap<String,DataSet> map=dest.getDataSets();
    map.putAll(src.getDataSets());
  }
  if (src.getTriggers() != null) {
    EList<Trigger> list=dest.getTriggers();
    for (    Trigger element : src.getTriggers()) {
      list.add(TriggerImpl.copyInstance(element));
    }
  }
  if (src.getCurveFitting() != null) {
    dest.setCurveFitting(CurveFittingImpl.copyInstance(src.getCurveFitting()));
  }
  if (src.getCursor() != null) {
    dest.setCursor(CursorImpl.copyInstance(src.getCursor()));
  }
  dest.visible=src.isVisible();
  dest.visibleESet=src.isSetVisible();
  dest.seriesIdentifier=src.getSeriesIdentifier();
  dest.labelPosition=src.getLabelPosition();
  dest.labelPositionESet=src.isSetLabelPosition();
  dest.stacked=src.isStacked();
  dest.stackedESet=src.isSetStacked();
  dest.translucent=src.isTranslucent();
  dest.translucentESet=src.isSetTranslucent();
  return dest;
}","private static Series copyInstanceThis(Series src){
  if (src == null) {
    return null;
  }
  SeriesImpl dest=new SeriesImpl();
  if (src.getLabel() != null) {
    dest.setLabel(LabelImpl.copyInstance(src.getLabel()));
  }
  if (src.getDataDefinition() != null) {
    EList<Query> list=dest.getDataDefinition();
    for (    Query element : src.getDataDefinition()) {
      list.add(QueryImpl.copyInstance(element));
    }
  }
  if (src.getDataPoint() != null) {
    dest.setDataPoint(DataPointImpl.copyInstance(src.getDataPoint()));
  }
  if (src.getDataSets() != null) {
    EMap<String,DataSet> map=dest.getDataSets();
    for (    Map.Entry<String,DataSet> entry : src.getDataSets().entrySet()) {
      map.put(entry.getKey(),DataSetImpl.copyInstance(entry.getValue()));
    }
  }
  if (src.getTriggers() != null) {
    EList<Trigger> list=dest.getTriggers();
    for (    Trigger element : src.getTriggers()) {
      list.add(TriggerImpl.copyInstance(element));
    }
  }
  if (src.getCurveFitting() != null) {
    dest.setCurveFitting(CurveFittingImpl.copyInstance(src.getCurveFitting()));
  }
  if (src.getCursor() != null) {
    dest.setCursor(CursorImpl.copyInstance(src.getCursor()));
  }
  dest.visible=src.isVisible();
  dest.visibleESet=src.isSetVisible();
  dest.seriesIdentifier=src.getSeriesIdentifier();
  dest.labelPosition=src.getLabelPosition();
  dest.labelPositionESet=src.isSetLabelPosition();
  dest.stacked=src.isStacked();
  dest.stackedESet=src.isSetStacked();
  dest.translucent=src.isTranslucent();
  dest.translucentESet=src.isSetTranslucent();
  return dest;
}",0.9490529065969956
70699,"private static AreaSeries copyInstanceThis(AreaSeries src){
  if (src == null) {
    return null;
  }
  AreaSeriesImpl dest=new AreaSeriesImpl();
  if (src.getLabel() != null) {
    dest.setLabel(LabelImpl.copyInstance(src.getLabel()));
  }
  if (src.getDataDefinition() != null) {
    EList<Query> list=dest.getDataDefinition();
    for (    Query element : src.getDataDefinition()) {
      list.add(QueryImpl.copyInstance(element));
    }
  }
  if (src.getDataPoint() != null) {
    dest.setDataPoint(DataPointImpl.copyInstance(src.getDataPoint()));
  }
  if (src.getDataSets() != null) {
    EMap<String,DataSet> map=dest.getDataSets();
    map.putAll(src.getDataSets());
  }
  if (src.getTriggers() != null) {
    EList<Trigger> list=dest.getTriggers();
    for (    Trigger element : src.getTriggers()) {
      list.add(TriggerImpl.copyInstance(element));
    }
  }
  if (src.getCurveFitting() != null) {
    dest.setCurveFitting(CurveFittingImpl.copyInstance(src.getCurveFitting()));
  }
  if (src.getCursor() != null) {
    dest.setCursor(CursorImpl.copyInstance(src.getCursor()));
  }
  if (src.getMarkers() != null) {
    EList<Marker> list=dest.getMarkers();
    for (    Marker element : src.getMarkers()) {
      list.add(MarkerImpl.copyInstance(element));
    }
  }
  if (src.getMarker() != null) {
    dest.setMarker(MarkerImpl.copyInstance(src.getMarker()));
  }
  if (src.getLineAttributes() != null) {
    dest.setLineAttributes(LineAttributesImpl.copyInstance(src.getLineAttributes()));
  }
  if (src.getShadowColor() != null) {
    dest.setShadowColor(ColorDefinitionImpl.copyInstance(src.getShadowColor()));
  }
  dest.visible=src.isVisible();
  dest.visibleESet=src.isSetVisible();
  dest.seriesIdentifier=src.getSeriesIdentifier();
  dest.labelPosition=src.getLabelPosition();
  dest.labelPositionESet=src.isSetLabelPosition();
  dest.stacked=src.isStacked();
  dest.stackedESet=src.isSetStacked();
  dest.translucent=src.isTranslucent();
  dest.translucentESet=src.isSetTranslucent();
  dest.paletteLineColor=src.isPaletteLineColor();
  dest.paletteLineColorESet=src.isSetPaletteLineColor();
  dest.curve=src.isCurve();
  dest.curveESet=src.isSetCurve();
  dest.connectMissingValue=src.isConnectMissingValue();
  dest.connectMissingValueESet=src.isSetConnectMissingValue();
  return dest;
}","private static AreaSeries copyInstanceThis(AreaSeries src){
  if (src == null) {
    return null;
  }
  AreaSeriesImpl dest=new AreaSeriesImpl();
  if (src.getLabel() != null) {
    dest.setLabel(LabelImpl.copyInstance(src.getLabel()));
  }
  if (src.getDataDefinition() != null) {
    EList<Query> list=dest.getDataDefinition();
    for (    Query element : src.getDataDefinition()) {
      list.add(QueryImpl.copyInstance(element));
    }
  }
  if (src.getDataPoint() != null) {
    dest.setDataPoint(DataPointImpl.copyInstance(src.getDataPoint()));
  }
  if (src.getDataSets() != null) {
    EMap<String,DataSet> map=dest.getDataSets();
    for (    Map.Entry<String,DataSet> entry : src.getDataSets().entrySet()) {
      map.put(entry.getKey(),DataSetImpl.copyInstance(entry.getValue()));
    }
  }
  if (src.getTriggers() != null) {
    EList<Trigger> list=dest.getTriggers();
    for (    Trigger element : src.getTriggers()) {
      list.add(TriggerImpl.copyInstance(element));
    }
  }
  if (src.getCurveFitting() != null) {
    dest.setCurveFitting(CurveFittingImpl.copyInstance(src.getCurveFitting()));
  }
  if (src.getCursor() != null) {
    dest.setCursor(CursorImpl.copyInstance(src.getCursor()));
  }
  if (src.getMarkers() != null) {
    EList<Marker> list=dest.getMarkers();
    for (    Marker element : src.getMarkers()) {
      list.add(MarkerImpl.copyInstance(element));
    }
  }
  if (src.getMarker() != null) {
    dest.setMarker(MarkerImpl.copyInstance(src.getMarker()));
  }
  if (src.getLineAttributes() != null) {
    dest.setLineAttributes(LineAttributesImpl.copyInstance(src.getLineAttributes()));
  }
  if (src.getShadowColor() != null) {
    dest.setShadowColor(ColorDefinitionImpl.copyInstance(src.getShadowColor()));
  }
  dest.visible=src.isVisible();
  dest.visibleESet=src.isSetVisible();
  dest.seriesIdentifier=src.getSeriesIdentifier();
  dest.labelPosition=src.getLabelPosition();
  dest.labelPositionESet=src.isSetLabelPosition();
  dest.stacked=src.isStacked();
  dest.stackedESet=src.isSetStacked();
  dest.translucent=src.isTranslucent();
  dest.translucentESet=src.isSetTranslucent();
  dest.paletteLineColor=src.isPaletteLineColor();
  dest.paletteLineColorESet=src.isSetPaletteLineColor();
  dest.curve=src.isCurve();
  dest.curveESet=src.isSetCurve();
  dest.connectMissingValue=src.isConnectMissingValue();
  dest.connectMissingValueESet=src.isSetConnectMissingValue();
  return dest;
}",0.967157894736842
70700,"/** 
 * A convenient method to get an instance copy. This is much faster than the ECoreUtil.copy().
 * @param src
 * @return
 */
public static BarSeries copyInstance(BarSeries src){
  if (src == null) {
    return null;
  }
  BarSeriesImpl dest=new BarSeriesImpl();
  if (src.getLabel() != null) {
    dest.setLabel(LabelImpl.copyInstance(src.getLabel()));
  }
  if (src.getDataDefinition() != null) {
    EList<Query> list=dest.getDataDefinition();
    for (    Query element : src.getDataDefinition()) {
      list.add(QueryImpl.copyInstance(element));
    }
  }
  if (src.getDataPoint() != null) {
    dest.setDataPoint(DataPointImpl.copyInstance(src.getDataPoint()));
  }
  if (src.getDataSets() != null) {
    EMap<String,DataSet> map=dest.getDataSets();
    map.putAll(src.getDataSets());
  }
  if (src.getTriggers() != null) {
    EList<Trigger> list=dest.getTriggers();
    for (    Trigger element : src.getTriggers()) {
      list.add(TriggerImpl.copyInstance(element));
    }
  }
  if (src.getCurveFitting() != null) {
    dest.setCurveFitting(CurveFittingImpl.copyInstance(src.getCurveFitting()));
  }
  if (src.getCursor() != null) {
    dest.setCursor(CursorImpl.copyInstance(src.getCursor()));
  }
  if (src.getRiserOutline() != null) {
    dest.setRiserOutline(ColorDefinitionImpl.copyInstance(src.getRiserOutline()));
  }
  dest.visible=src.isVisible();
  dest.visibleESet=src.isSetVisible();
  dest.seriesIdentifier=src.getSeriesIdentifier();
  dest.labelPosition=src.getLabelPosition();
  dest.labelPositionESet=src.isSetLabelPosition();
  dest.stacked=src.isStacked();
  dest.stackedESet=src.isSetStacked();
  dest.translucent=src.isTranslucent();
  dest.translucentESet=src.isSetTranslucent();
  dest.riser=src.getRiser();
  dest.riserESet=src.isSetRiser();
  return dest;
}","/** 
 * A convenient method to get an instance copy. This is much faster than the ECoreUtil.copy().
 * @param src
 * @return
 */
public static BarSeries copyInstance(BarSeries src){
  if (src == null) {
    return null;
  }
  BarSeriesImpl dest=new BarSeriesImpl();
  if (src.getLabel() != null) {
    dest.setLabel(LabelImpl.copyInstance(src.getLabel()));
  }
  if (src.getDataDefinition() != null) {
    EList<Query> list=dest.getDataDefinition();
    for (    Query element : src.getDataDefinition()) {
      list.add(QueryImpl.copyInstance(element));
    }
  }
  if (src.getDataPoint() != null) {
    dest.setDataPoint(DataPointImpl.copyInstance(src.getDataPoint()));
  }
  if (src.getDataSets() != null) {
    EMap<String,DataSet> map=dest.getDataSets();
    for (    Map.Entry<String,DataSet> entry : src.getDataSets().entrySet()) {
      map.put(entry.getKey(),DataSetImpl.copyInstance(entry.getValue()));
    }
  }
  if (src.getTriggers() != null) {
    EList<Trigger> list=dest.getTriggers();
    for (    Trigger element : src.getTriggers()) {
      list.add(TriggerImpl.copyInstance(element));
    }
  }
  if (src.getCurveFitting() != null) {
    dest.setCurveFitting(CurveFittingImpl.copyInstance(src.getCurveFitting()));
  }
  if (src.getCursor() != null) {
    dest.setCursor(CursorImpl.copyInstance(src.getCursor()));
  }
  if (src.getRiserOutline() != null) {
    dest.setRiserOutline(ColorDefinitionImpl.copyInstance(src.getRiserOutline()));
  }
  dest.visible=src.isVisible();
  dest.visibleESet=src.isSetVisible();
  dest.seriesIdentifier=src.getSeriesIdentifier();
  dest.labelPosition=src.getLabelPosition();
  dest.labelPositionESet=src.isSetLabelPosition();
  dest.stacked=src.isStacked();
  dest.stackedESet=src.isSetStacked();
  dest.translucent=src.isTranslucent();
  dest.translucentESet=src.isSetTranslucent();
  dest.riser=src.getRiser();
  dest.riserESet=src.isSetRiser();
  return dest;
}",0.9579967689822294
70701,"public static int covertDimensionType(DimensionType value,int parent){
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT));
  }
}","public static int covertDimensionType(DimensionType value,int parent){
  if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) {
    return (int)(value.getMeasure() / 100 * parent);
  }
  if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) {
    return (int)(value.getMeasure() * PX_PT);
  }
  if (DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits()) || DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits())) {
    return (int)value.getMeasure() * 12;
  }
 else {
    return (int)(value.convertTo(DimensionType.UNITS_PT));
  }
}",0.5463414634146342
70702,"private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}","private void declareStyle(StyleEntry style,int id){
  boolean wrapText=context.getWrappingText();
  String whiteSpace=style.getProperty(StyleConstant.WHITE_SPACE);
  if (CSSConstants.CSS_NOWRAP_VALUE.equals(whiteSpace)) {
    wrapText=false;
  }
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",id);
  writer.attribute(""String_Node_Str"",style.getName());
  if (id >= StyleEngine.RESERVE_STYLE_ID) {
    String direction=style.getProperty(StyleConstant.DIRECTION_PROP);
    String horizontalAlign=style.getProperty(StyleConstant.H_ALIGN_PROP);
    String verticalAlign=style.getProperty(StyleConstant.V_ALIGN_PROP);
    writeAlignment(horizontalAlign,verticalAlign,direction,wrapText);
    writer.openTag(""String_Node_Str"");
    String bottomColor=style.getProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP);
    String bottomLineStyle=style.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP);
    String bottomWeight=style.getProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP);
    writeBorder(""String_Node_Str"",bottomLineStyle,bottomWeight,bottomColor);
    String topColor=style.getProperty(StyleConstant.BORDER_TOP_COLOR_PROP);
    String topLineStyle=style.getProperty(StyleConstant.BORDER_TOP_STYLE_PROP);
    String topWeight=style.getProperty(StyleConstant.BORDER_TOP_WIDTH_PROP);
    writeBorder(""String_Node_Str"",topLineStyle,topWeight,topColor);
    String leftColor=style.getProperty(StyleConstant.BORDER_LEFT_COLOR_PROP);
    String leftLineStyle=style.getProperty(StyleConstant.BORDER_LEFT_STYLE_PROP);
    String leftWeight=style.getProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",leftLineStyle,leftWeight,leftColor);
    String rightColor=style.getProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP);
    String rightLineStyle=style.getProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP);
    String rightWeight=style.getProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP);
    writeBorder(""String_Node_Str"",rightLineStyle,rightWeight,rightColor);
    writer.closeTag(""String_Node_Str"");
    String fontName=style.getProperty(StyleConstant.FONT_FAMILY_PROP);
    String size=style.getProperty(StyleConstant.FONT_SIZE_PROP);
    String fontStyle=style.getProperty(StyleConstant.FONT_STYLE_PROP);
    String fontWeight=style.getProperty(StyleConstant.FONT_WEIGHT_PROP);
    String strikeThrough=style.getProperty(StyleConstant.TEXT_LINE_THROUGH_PROP);
    String underline=style.getProperty(StyleConstant.TEXT_UNDERLINE_PROP);
    String color=style.getProperty(StyleConstant.COLOR_PROP);
    writeFont(fontName,size,fontWeight,fontStyle,strikeThrough,underline,color);
    String bgColor=style.getProperty(StyleConstant.BACKGROUND_COLOR_PROP);
    writeBackGroudColor(bgColor);
  }
  writeDataFormat(style);
  writer.closeTag(""String_Node_Str"");
}",0.99009900990099
70703,"public void setHyperlinkDef(HyperlinkDef def){
  this.hyperLink=def;
  if (hyperLink != null) {
    style.setProperty(StyleConstant.COLOR_PROP,HYPERLINK_COLOR);
    style.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,HYPERLINK_UNDERLINE);
  }
}","public void setHyperlinkDef(HyperlinkDef def){
  this.hyperLink=def;
  if (hyperLink != null) {
    style.setProperty(StyleConstant.COLOR_PROP,HYPERLINK_COLOR);
    style.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,HYPERLINK_UNDERLINE);
    style.setName(StyleEntry.ENTRYNAME_HYPERLINK);
  }
}",0.9053803339517624
70704,"boolean visitScalarParameter(ScalarParameterHandle param,Object userData){
  String name=param.getName();
  if (!inputValues.containsKey(name)) {
    Object value=convertToType(param.getDefaultValue(),param.getDataType());
    executionContext.setParameterValue(name,value);
    runValues.put(name,value);
  }
  return true;
}","boolean visitScalarParameter(ScalarParameterHandle param,Object userData){
  String name=param.getName();
  if (!inputValues.containsKey(name)) {
    Object value=convertToType(param.getDefaultValueList(),param.getDataType(),param.getParamType());
    executionContext.setParameterValue(name,value);
    runValues.put(name,value);
  }
  return true;
}",0.9630723781388478
70705,"/** 
 * use the user setting parameters values to setup the execution context. the user setting values and default values are merged here.
 */
protected void usingParameterValues(){
  if (!parameterChanged) {
    return;
  }
  parameterChanged=false;
  executionContext.clearParameters();
  runValues.clear();
  Iterator iterator=inputValues.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry entry=(Map.Entry)iterator.next();
    Object key=entry.getKey();
    ParameterAttribute attribute=(ParameterAttribute)entry.getValue();
    runValues.put(key,attribute.getValue());
    executionContext.setParameter((String)key,attribute.getValue(),attribute.getDisplayText());
  }
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null) {
    return;
  }
  new ParameterVisitor(){
    boolean visitScalarParameter(    ScalarParameterHandle param,    Object userData){
      String name=param.getName();
      if (!inputValues.containsKey(name)) {
        Object value=convertToType(param.getDefaultValue(),param.getDataType());
        executionContext.setParameterValue(name,value);
        runValues.put(name,value);
      }
      return true;
    }
    boolean visitParameterGroup(    ParameterGroupHandle group,    Object value){
      return visitParametersInGroup(group,value);
    }
  }
.visit((ReportDesignHandle)runnable.getDesignHandle());
}","/** 
 * use the user setting parameters values to setup the execution context. the user setting values and default values are merged here.
 */
protected void usingParameterValues(){
  if (!parameterChanged) {
    return;
  }
  parameterChanged=false;
  executionContext.clearParameters();
  runValues.clear();
  Iterator iterator=inputValues.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry entry=(Map.Entry)iterator.next();
    Object key=entry.getKey();
    ParameterAttribute attribute=(ParameterAttribute)entry.getValue();
    runValues.put(key,attribute.getValue());
    executionContext.setParameter((String)key,attribute.getValue(),attribute.getDisplayText());
  }
  IReportRunnable runnable=executionContext.getRunnable();
  if (runnable == null) {
    return;
  }
  new ParameterVisitor(){
    boolean visitScalarParameter(    ScalarParameterHandle param,    Object userData){
      String name=param.getName();
      if (!inputValues.containsKey(name)) {
        Object value=convertToType(param.getDefaultValueList(),param.getDataType(),param.getParamType());
        executionContext.setParameterValue(name,value);
        runValues.put(name,value);
      }
      return true;
    }
    boolean visitParameterGroup(    ParameterGroupHandle group,    Object value){
      return visitParametersInGroup(group,value);
    }
  }
.visit((ReportDesignHandle)runnable.getDesignHandle());
}",0.991074616208497
70706,"protected Object convertToType(Object value,String type){
  try {
    return convertParameterType(value,type);
  }
 catch (  BirtException e) {
    log.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  return null;
}","protected Object convertToType(List<String> values,String type,String paramType){
  if (values == null) {
    return null;
  }
  try {
    if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
      List<Object> list=new ArrayList<Object>();
      for (      String string : values) {
        list.add(convertParameterType(string,type));
      }
      return list.toArray();
    }
 else {
      if (values.size() == 0) {
        return null;
      }
      return convertParameterType(values.get(0),type);
    }
  }
 catch (  BirtException e) {
    log.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  return null;
}",0.441073512252042
70707,"private void init(){
  if (isInitialized)   return;
  isInitialized=true;
  try {
    osWinClass=Class.forName(""String_Node_Str"");
    if (osWinClass != null) {
      GET_WINDOW_LONG=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Integer.TYPE});
      SET_WINDOW_LONG=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Integer.TYPE,Integer.TYPE});
      INVALIDATE_RECT=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Class.forName(""String_Node_Str""),Boolean.TYPE});
      Field field=osWinClass.getField(""String_Node_Str"");
      OS_STYLE_INDEX=field.getInt(null);
      field=osWinClass.getField(""String_Node_Str"");
      WS_EX_LAYOUTRTL=field.getInt(null);
      field=osWinClass.getField(""String_Node_Str"");
      WS_EX_NOINHERITLAYOUT=field.getInt(null);
      STYLE_FIELD=Widget.class.getDeclaredField(""String_Node_Str"");
      STYLE_FIELD.setAccessible(true);
    }
  }
 catch (  ClassNotFoundException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  NoSuchMethodException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  SecurityException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  NoSuchFieldException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalArgumentException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalAccessException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
}","private void init(){
  if (isInitialized)   return;
  isInitialized=true;
  try {
    osWinClass=Class.forName(""String_Node_Str"");
    if (osWinClass != null) {
      GET_WINDOW_LONG=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Integer.TYPE});
      SET_WINDOW_LONG=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Integer.TYPE,Integer.TYPE});
      INVALIDATE_RECT=osWinClass.getMethod(""String_Node_Str"",new Class[]{Integer.TYPE,Class.forName(""String_Node_Str""),Boolean.TYPE});
      Field field=osWinClass.getField(""String_Node_Str"");
      OS_STYLE_INDEX=field.getInt(null);
      field=osWinClass.getField(""String_Node_Str"");
      WS_EX_LAYOUTRTL=field.getInt(null);
      field=osWinClass.getField(""String_Node_Str"");
      WS_EX_NOINHERITLAYOUT=field.getInt(null);
      STYLE_FIELD=Widget.class.getDeclaredField(""String_Node_Str"");
      STYLE_FIELD.setAccessible(true);
      HANDLE=Control.class.getDeclaredField(""String_Node_Str"");
      HANDLE.setAccessible(true);
    }
  }
 catch (  ClassNotFoundException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  NoSuchMethodException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  SecurityException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  NoSuchFieldException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalArgumentException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalAccessException e) {
    osWinClass=null;
    ExceptionHandler.handle(e,true);
  }
}",0.968629961587708
70708,"public void applyOrientation(Control control,boolean mirrored){
  if (control == null)   return;
  if (!isInitialized)   init();
  if (osWinClass == null)   return;
  int swtStyle=control.getStyle() & ~(SWT.RIGHT_TO_LEFT | SWT.LEFT_TO_RIGHT | SWT.MIRRORED);
  try {
    int osStyle=((Integer)GET_WINDOW_LONG.invoke(null,new Object[]{Integer.valueOf(control.handle),Integer.valueOf(OS_STYLE_INDEX)})).intValue();
    if (mirrored) {
      SET_WINDOW_LONG.invoke(null,new Object[]{Integer.valueOf(control.handle),Integer.valueOf(OS_STYLE_INDEX),Integer.valueOf(osStyle | WS_EX_LAYOUTRTL | WS_EX_NOINHERITLAYOUT)});
      swtStyle|=SWT.RIGHT_TO_LEFT | SWT.MIRRORED;
      STYLE_FIELD.setInt(control,swtStyle);
    }
 else {
      SET_WINDOW_LONG.invoke(null,new Object[]{Integer.valueOf(control.handle),Integer.valueOf(OS_STYLE_INDEX),Integer.valueOf(osStyle & ~WS_EX_LAYOUTRTL)});
      swtStyle|=SWT.LEFT_TO_RIGHT;
      STYLE_FIELD.setInt(control,swtStyle);
    }
    INVALIDATE_RECT.invoke(null,new Object[]{Integer.valueOf(control.handle),null,Boolean.TRUE});
  }
 catch (  SecurityException e) {
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalArgumentException e) {
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalAccessException e) {
    ExceptionHandler.handle(e,true);
  }
catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e,true);
  }
  if (control instanceof Composite) {
    Control[] children=((Composite)control).getChildren();
    if (children != null) {
      for (int i=children.length; i-- > 0; ) {
        applyOrientation(children[i],mirrored);
      }
    }
  }
}","public void applyOrientation(Control control,boolean mirrored){
  if (control == null)   return;
  if (!isInitialized)   init();
  if (osWinClass == null)   return;
  int swtStyle=control.getStyle() & ~(SWT.RIGHT_TO_LEFT | SWT.LEFT_TO_RIGHT | SWT.MIRRORED);
  try {
    int osStyle=((Integer)GET_WINDOW_LONG.invoke(null,new Object[]{Integer.valueOf(getControHandle(control)),Integer.valueOf(OS_STYLE_INDEX)})).intValue();
    if (mirrored) {
      SET_WINDOW_LONG.invoke(null,new Object[]{Integer.valueOf(getControHandle(control)),Integer.valueOf(OS_STYLE_INDEX),Integer.valueOf(osStyle | WS_EX_LAYOUTRTL | WS_EX_NOINHERITLAYOUT)});
      swtStyle|=SWT.RIGHT_TO_LEFT | SWT.MIRRORED;
      STYLE_FIELD.setInt(control,swtStyle);
    }
 else {
      SET_WINDOW_LONG.invoke(null,new Object[]{Integer.valueOf(getControHandle(control)),Integer.valueOf(OS_STYLE_INDEX),Integer.valueOf(osStyle & ~WS_EX_LAYOUTRTL)});
      swtStyle|=SWT.LEFT_TO_RIGHT;
      STYLE_FIELD.setInt(control,swtStyle);
    }
    INVALIDATE_RECT.invoke(null,new Object[]{Integer.valueOf(getControHandle(control)),null,Boolean.TRUE});
  }
 catch (  SecurityException e) {
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalArgumentException e) {
    ExceptionHandler.handle(e,true);
  }
catch (  IllegalAccessException e) {
    ExceptionHandler.handle(e,true);
  }
catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e,true);
  }
  if (control instanceof Composite) {
    Control[] children=((Composite)control).getChildren();
    if (children != null) {
      for (int i=children.length; i-- > 0; ) {
        applyOrientation(children[i],mirrored);
      }
    }
  }
}",0.9536019536019535
70709,"public HyperlinkDef parseHyperLink(IContent content){
  HyperlinkDef hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
    IReportRunnable reportRunnable=service.getReportRunnable();
    IReportContext reportContext=service.getReportContext();
    IHTMLActionHandler actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      hyperlink=new HyperlinkDef(bookmark,IHyperlinkAction.ACTION_BOOKMARK,tooltip);
    break;
case IHyperlinkAction.ACTION_HYPERLINK:
  String url=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_HYPERLINK,tooltip);
break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
url=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_DRILLTHROUGH,tooltip);
break;
}
}
return hyperlink;
}","public HyperlinkDef parseHyperLink(IContent content){
  HyperlinkDef hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
    IReportRunnable reportRunnable=service.getReportRunnable();
    IReportContext reportContext=service.getReportContext();
    IHTMLActionHandler actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      hyperlink=new HyperlinkDef(bookmark,IHyperlinkAction.ACTION_BOOKMARK,tooltip);
    break;
case IHyperlinkAction.ACTION_HYPERLINK:
  String url=EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_HYPERLINK,tooltip);
break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
url=EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_DRILLTHROUGH,tooltip);
break;
}
}
return hyperlink;
}",0.9604810996563574
70710,"private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    return createData(altText,entry);
  }
  org.eclipse.birt.report.engine.layout.emitter.Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
  byte[] data=imageInfo.getData();
  if (data != null) {
    return new ImageData(image,entry,type,imageInfo,container);
  }
 else {
    return createData(image.getAltText(),entry);
  }
}","private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,Integer.toString(type));
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    return createData(altText,entry);
  }
  Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
  byte[] data=imageInfo.getData();
  if (data != null) {
    return new ImageData(image,entry,type,imageInfo,container);
  }
 else {
    return createData(image.getAltText(),entry);
  }
}",0.9730679156908664
70711,"protected HyperlinkInfo getHyperlink(IContent content){
  HyperlinkInfo hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      bookmark=bookmark.replaceAll(""String_Node_Str"",""String_Node_Str"");
    hyperlink=new HyperlinkInfo(HyperlinkInfo.BOOKMARK,bookmark,tooltip);
  break;
case IHyperlinkAction.ACTION_HYPERLINK:
case IHyperlinkAction.ACTION_DRILLTHROUGH:
String url=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkInfo(HyperlinkInfo.HYPERLINK,url,tooltip);
break;
}
}
return hyperlink;
}","protected HyperlinkInfo getHyperlink(IContent content){
  HyperlinkInfo hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      bookmark=bookmark.replaceAll(""String_Node_Str"",""String_Node_Str"");
    hyperlink=new HyperlinkInfo(HyperlinkInfo.BOOKMARK,bookmark,tooltip);
  break;
case IHyperlinkAction.ACTION_HYPERLINK:
case IHyperlinkAction.ACTION_DRILLTHROUGH:
String url=EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkInfo(HyperlinkInfo.HYPERLINK,url,tooltip);
break;
}
}
return hyperlink;
}",0.970886075949367
70712,"public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  Image imageInfo=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
  byte[] data=imageInfo.getData();
  if (data == null || data.length == 0) {
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  double height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight());
  double width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth());
  writeBookmark(image);
  writeToc(image);
  HyperlinkInfo hyper=getHyperlink(image);
  wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
}","public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
  byte[] data=imageInfo.getData();
  if (data == null || data.length == 0) {
    wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
    return;
  }
  double height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight());
  double width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth());
  writeBookmark(image);
  writeToc(image);
  HyperlinkInfo hyper=getHyperlink(image);
  wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
}",0.9793351302785264
70713,"/** 
 * Transfer background for current page to Doc format. Now, the exported file will apply the first background properties, and followed background will ignore. In addition, Since the Word only support fill-in background, the background attach, pos, posX, posY and repeat are not mapped to Word easyly. At present, ignore those properties.
 * @throws IOException
 * @TODO support background properties. attach, pos, posx, posy and repeat.
 */
protected void drawDocumentBackground() throws IOException {
  IStyle style=previousPage.getComputedStyle();
  String backgroundColor=style.getBackgroundColor();
  String backgroundImageUrl=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign());
  wordWriter.drawDocumentBackground(backgroundColor,backgroundImageUrl);
}","/** 
 * Transfer background for current page to Doc format. Now, the exported file will apply the first background properties, and followed background will ignore. In addition, Since the Word only support fill-in background, the background attach, pos, posX, posY and repeat are not mapped to Word easyly. At present, ignore those properties.
 * @throws IOException
 * @TODO support background properties. attach, pos, posx, posy and repeat.
 */
protected void drawDocumentBackground() throws IOException {
  IStyle style=previousPage.getComputedStyle();
  String backgroundColor=style.getBackgroundColor();
  String backgroundImageUrl=EmitterUtil.getBackgroundImageUrl(style,reportContent.getDesign().getReportDesign());
  wordWriter.drawDocumentBackground(backgroundColor,backgroundImageUrl);
}",0.971916971916972
70714,"public void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=creatWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    Map options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=creatMetadataEmitter(writer,htmlOption);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
    htmlIDNamespace=htmlOption.getHTMLIDNamespace();
    if (null != htmlIDNamespace) {
      if (htmlIDNamespace.length() > 0) {
        htmlIDNamespace+=""String_Node_Str"";
        metadataEmitter.setHTMLIDNamespace(htmlIDNamespace);
      }
 else {
        htmlIDNamespace=null;
      }
    }
  }
}","public void initialize(IEmitterServices services) throws EngineException {
  this.services=services;
  this.out=EmitterUtil.getOuputStream(services,REPORT_FILE);
  Object emitterConfig=services.getEmitterConfig().get(""String_Node_Str"");
  if (emitterConfig != null && emitterConfig instanceof HTMLEmitterConfig) {
    imageHandler=((HTMLEmitterConfig)emitterConfig).getImageHandler();
    actionHandler=((HTMLEmitterConfig)emitterConfig).getActionHandler();
  }
  Object im=services.getOption(HTMLRenderOption.IMAGE_HANDLER);
  if (im != null && im instanceof IHTMLImageHandler) {
    imageHandler=(IHTMLImageHandler)im;
  }
  Object ac=services.getOption(HTMLRenderOption.ACTION_HANDLER);
  if (ac != null && ac instanceof IHTMLActionHandler) {
    actionHandler=(IHTMLActionHandler)ac;
  }
  reportContext=services.getReportContext();
  renderOption=services.getRenderOption();
  runnable=services.getReportRunnable();
  writer=creatWriter();
  if (renderOption != null) {
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOption);
    isEmbeddable=htmlOption.getEmbeddable();
    Map options=renderOption.getOutputSetting();
    if (options != null) {
      urlEncoding=(String)options.get(HTMLRenderOption.URL_ENCODING);
    }
    outputMasterPageContent=htmlOption.getMasterPageContent();
    IHTMLActionHandler actHandler=htmlOption.getActionHandle();
    if (ac != null) {
      actionHandler=actHandler;
    }
    pageFooterFloatFlag=htmlOption.getPageFooterFloatFlag();
    enableMetadata=htmlOption.getEnableMetadata();
    ouputInstanceIDs=htmlOption.getInstanceIDs();
    metadataEmitter=creatMetadataEmitter(writer,htmlOption);
    layoutPreference=htmlOption.getLayoutPreference();
    enableAgentStyleEngine=htmlOption.getEnableAgentStyleEngine();
    outputMasterPageMargins=htmlOption.getOutputMasterPageMargins();
    htmlIDNamespace=htmlOption.getHTMLIDNamespace();
    if (null != htmlIDNamespace) {
      if (htmlIDNamespace.length() > 0) {
        htmlIDNamespace+=""String_Node_Str"";
        metadataEmitter.setHTMLIDNamespace(htmlIDNamespace);
      }
 else {
        htmlIDNamespace=null;
      }
    }
    writer.setIndent(htmlOption.getHTMLIndent());
  }
}",0.9884579870729456
70715,"protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_ROW_SPAN:
    rowSpan=IOUtil.readInt(in);
  break;
case FIELD_COL_SPAN:
colSpan=IOUtil.readInt(in);
break;
case FIELD_COLUMN:
column=IOUtil.readInt(in);
break;
case FIELD_START_OF_GROUP:
IOUtil.readBool(in);
break;
case FIELD_DISPLAY_GROUP_ICON:
displayGroupIcon=Boolean.valueOf(IOUtil.readBool(in));
break;
case FIELD_DIAGONAL_NUMBER:
diagonalNumber=IOUtil.readInt(in);
case FIELD_DIAGONAL_STYLE:
diagonalStyle=IOUtil.readString(in);
case FIELD_DIAGONAL_WIDTH:
diagonalWidth=new DimensionType();
diagonalWidth.readObject(in);
case FIELD_ANTIDIAGONAL_NUMBER:
antidiagonalNumber=IOUtil.readInt(in);
case FIELD_ANTIDIAGONAL_STYLE:
antidiagonalStyle=IOUtil.readString(in);
case FIELD_ANTIDIAGONAL_WIDTH:
antidiagonalWidth=new DimensionType();
antidiagonalWidth.readObject(in);
default :
super.readField(version,filedId,in,loader);
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_ROW_SPAN:
    rowSpan=IOUtil.readInt(in);
  break;
case FIELD_COL_SPAN:
colSpan=IOUtil.readInt(in);
break;
case FIELD_COLUMN:
column=IOUtil.readInt(in);
break;
case FIELD_START_OF_GROUP:
IOUtil.readBool(in);
break;
case FIELD_DISPLAY_GROUP_ICON:
displayGroupIcon=Boolean.valueOf(IOUtil.readBool(in));
break;
case FIELD_DIAGONAL_NUMBER:
diagonalNumber=IOUtil.readInt(in);
break;
case FIELD_DIAGONAL_STYLE:
diagonalStyle=IOUtil.readString(in);
break;
case FIELD_DIAGONAL_WIDTH:
diagonalWidth=new DimensionType();
diagonalWidth.readObject(in);
break;
case FIELD_ANTIDIAGONAL_NUMBER:
antidiagonalNumber=IOUtil.readInt(in);
break;
case FIELD_ANTIDIAGONAL_STYLE:
antidiagonalStyle=IOUtil.readString(in);
break;
case FIELD_ANTIDIAGONAL_WIDTH:
antidiagonalWidth=new DimensionType();
antidiagonalWidth.readObject(in);
break;
default :
super.readField(version,filedId,in,loader);
break;
}
}",0.9753645047762696
70716,"public void relocate(IFigure target){
  Rectangle bounds;
  if (getReference() instanceof HandleBounds)   bounds=((HandleBounds)getReference()).getHandleBounds();
 else   bounds=getReference().getBounds();
  Dimension dim=((MultipleGuideHandle)target).calculateIndicatorDimension();
  bounds=new PrecisionRectangle(new Rectangle(bounds.x,bounds.y + bounds.height,dim.width,dim.height));
  getReference().translateToAbsolute(bounds);
  target.translateToRelative(bounds);
  target.setBounds(bounds);
  relocateChildren(target,getReference());
}","public void relocate(IFigure target){
  Rectangle bounds;
  if (getReference() instanceof HandleBounds)   bounds=((HandleBounds)getReference()).getHandleBounds();
 else   bounds=getReference().getBounds();
  Dimension dim=((MultipleGuideHandle)target).calculateIndicatorDimension();
  bounds=new PrecisionRectangle(new Rectangle(bounds.x,bounds.y + bounds.height,dim.width,dim.height));
  Rectangle copy=bounds.getCopy();
  getReference().translateToAbsolute(bounds);
  target.translateToRelative(bounds);
  bounds.width=copy.width;
  bounds.height=copy.height;
  target.setBounds(bounds);
  relocateChildren(target,getReference());
}",0.9226847918436704
70717,"ICubeQueryDefinition createMirroredQueryDefinition(){
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition productLineDim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition porductLineHie1=productLineDim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition columnLevel1=porductLineHie1.createLevel(""String_Node_Str"");
  IDimensionDefinition productLineDim2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition porductLineHie2=productLineDim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition columnLevel2=porductLineHie2.createLevel(""String_Node_Str"");
  columnEdge.setMirrorStartingLevel(columnLevel2);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier1=geographyDim1.createHierarchy(""String_Node_Str"");
  geographyHier1.createLevel(""String_Node_Str"");
  IDimensionDefinition geographyDim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier2=geographyDim2.createHierarchy(""String_Node_Str"");
  geographyHier2.createLevel(""String_Node_Str"");
  IDimensionDefinition geographyDim3=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier3=geographyDim3.createHierarchy(""String_Node_Str"");
  ILevelDefinition startLevel=geographyHier3.createLevel(""String_Node_Str"");
  IDimensionDefinition geographyDim4=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier4=geographyDim4.createHierarchy(""String_Node_Str"");
  geographyHier4.createLevel(""String_Node_Str"");
  rowEdge.setMirrorStartingLevel(startLevel);
  return cqd;
}","ICubeQueryDefinition createMirroredQueryDefinition(String cubeName,boolean breakHierarchy){
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition productLineDim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition porductLineHie1=productLineDim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition columnLevel1=porductLineHie1.createLevel(""String_Node_Str"");
  IDimensionDefinition productLineDim2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition porductLineHie2=productLineDim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition columnLevel2=porductLineHie2.createLevel(""String_Node_Str"");
  columnEdge.creatMirrorDefinition(columnLevel2,breakHierarchy);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier1=geographyDim1.createHierarchy(""String_Node_Str"");
  geographyHier1.createLevel(""String_Node_Str"");
  IDimensionDefinition geographyDim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier2=geographyDim2.createHierarchy(""String_Node_Str"");
  geographyHier2.createLevel(""String_Node_Str"");
  IDimensionDefinition geographyDim3=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier3=geographyDim3.createHierarchy(""String_Node_Str"");
  ILevelDefinition startLevel=geographyHier3.createLevel(""String_Node_Str"");
  IDimensionDefinition geographyDim4=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier4=geographyDim4.createHierarchy(""String_Node_Str"");
  geographyHier4.createLevel(""String_Node_Str"");
  rowEdge.creatMirrorDefinition(startLevel,breakHierarchy);
  return cqd;
}",0.9560792715586502
70718,"/** 
 * Clear the model event, when the model trans Roll back.
 */
protected void clearEvent(){
  int size=listenerList.size();
  for (int i=0; i < size; i++) {
    IModelEventProcessor processor=(IModelEventProcessor)listenerList.get(i);
    processor.clear();
  }
}","/** 
 * Clear the model event, when the model trans Roll back.
 */
protected void clearEvent(){
  int size=listenerList.size();
  List list=new ArrayList(listenerList);
  for (int i=0; i < size; i++) {
    IModelEventProcessor processor=(IModelEventProcessor)list.get(i);
    processor.clear();
  }
}",0.9135802469135802
70719,"/** 
 * extract zip file and import files into project
 * @param srcZipFile
 * @param destPath
 * @param monitor
 * @param query
 * @throws CoreException
 */
private static void importFilesFromZip(ZipFile srcZipFile,IPath destPath,IProgressMonitor monitor,IOverwriteQuery query) throws CoreException {
  try {
    ZipFileStructureProvider structureProvider=new ZipFileStructureProvider(srcZipFile);
    List list=prepareFileList(structureProvider,structureProvider.getRoot(),null);
    ImportOperation op=new ImportOperation(destPath,structureProvider.getRoot(),structureProvider,query,list);
    op.run(monitor);
  }
 catch (  Exception e) {
    String message=srcZipFile.getName() + ""String_Node_Str"" + e.getMessage();
    Logger.logException(e);
    throw ChartIntegrationException.getException(message,e);
  }
}","/** 
 * extract zip file and import files into project
 * @param srcZipFile
 * @param destPath
 * @param monitor
 * @param query
 * @throws CoreException
 */
private static void importFilesFromZip(ZipFile srcZipFile,IPath destPath,IProgressMonitor monitor,IOverwriteQuery query) throws CoreException {
  try {
    ZipFileStructureProvider structureProvider=new ZipFileStructureProvider(srcZipFile);
    List list=prepareFileList(structureProvider,structureProvider.getRoot(),null);
    ImportOperation op=new ImportOperation(destPath,structureProvider.getRoot(),structureProvider,query,list);
    op.run(monitor);
  }
 catch (  InterruptedException e) {
  }
catch (  InvocationTargetException e) {
    String message=srcZipFile.getName() + ""String_Node_Str"" + e.getMessage();
    throw ChartIntegrationException.getException(message,e);
  }
}",0.9185274592637296
70720,"/** 
 * Set whether the level is mirrored.
 * @param isMirrored
 * @return
 */
public void creatMirrorDefinition(ILevelDefinition level,boolean breakHierarchy);","/** 
 * @param level The mirror starting level
 * @param breakHierarchy Whether to keep the relation ship between levels.
 * @return
 */
public void creatMirrorDefinition(ILevelDefinition level,boolean breakHierarchy);",0.5714285714285714
70721,"private void startCell(int cellindex,int colspan,int rowspan,int styleid,HyperlinkDef hyperLink,BookmarkDef linkedBookmark){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",cellindex);
  writer.attribute(""String_Node_Str"",styleid);
  if (hyperLink != null) {
    String urlAddress=hyperLink.getUrl();
    if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      if (linkedBookmark != null)       urlAddress=""String_Node_Str"" + linkedBookmark.getValidName();
 else {
        logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      }
    }
    if (urlAddress.length() >= 255) {
      logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      urlAddress=urlAddress.substring(0,254);
    }
    writer.attribute(""String_Node_Str"",urlAddress);
  }
  writer.attribute(""String_Node_Str"",colspan);
  writer.attribute(""String_Node_Str"",rowspan);
}","private void startCell(int cellindex,int colspan,int rowspan,int styleid,HyperlinkDef hyperLink,BookmarkDef linkedBookmark){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",cellindex);
  writer.attribute(""String_Node_Str"",styleid);
  if (hyperLink != null) {
    String urlAddress=hyperLink.getUrl();
    if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      if (linkedBookmark != null)       urlAddress=""String_Node_Str"" + linkedBookmark.getValidName();
 else {
        logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      }
    }
    if (urlAddress != null && urlAddress.length() >= 255) {
      logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      urlAddress=urlAddress.substring(0,254);
    }
    writer.attribute(""String_Node_Str"",urlAddress);
  }
  writer.attribute(""String_Node_Str"",colspan);
  writer.attribute(""String_Node_Str"",rowspan);
}",0.9882978723404257
70722,"public void startCell(ICellContent cell){
  logger.log(Level.FINE,""String_Node_Str"");
  boolean isHead=isCellInHead(cell);
  if (isHead) {
    writer.openTag(HTMLTags.TAG_TH);
  }
 else {
    writer.openTag(HTMLTags.TAG_TD);
  }
  String styleClass=cell.getStyleClass();
  setStyleName(styleClass,cell);
  int colSpan=cell.getColSpan();
  if (colSpan > 1) {
    writer.attribute(HTMLTags.ATTR_COLSPAN,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan > 1) {
    writer.attribute(HTMLTags.ATTR_ROWSPAN,rowSpan);
  }
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildCellStyle(cell,styleBuffer,isHead);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleCellAlign(cell);
  if (!startedGroups.isEmpty()) {
    IGroupContent group=(IGroupContent)startedGroups.firstElement();
    String bookmark=group.getBookmark();
    if (bookmark == null) {
      bookmark=idGenerator.generateUniqueID();
      group.setBookmark(bookmark);
    }
    HTMLEmitterUtil.setBookmark(writer,null,htmlIDNamespace,bookmark);
    startedGroups.remove(group);
    Iterator iter=startedGroups.iterator();
    while (iter.hasNext()) {
      group=(IGroupContent)iter.next();
      outputBookmark(group);
    }
    startedGroups.clear();
  }
  if (enableMetadata) {
    metadataEmitter.startCell(cell);
  }
}","public void startCell(ICellContent cell){
  logger.log(Level.FINE,""String_Node_Str"");
  boolean isHead=isCellInHead(cell);
  if (isHead) {
    writer.openTag(HTMLTags.TAG_TH);
  }
 else {
    writer.openTag(HTMLTags.TAG_TD);
  }
  writer.attribute(""String_Node_Str"",cell.getScope());
  writer.attribute(""String_Node_Str"",cell.getBookmark());
  writer.attribute(""String_Node_Str"",cell.getHeaders());
  String styleClass=cell.getStyleClass();
  setStyleName(styleClass,cell);
  int colSpan=cell.getColSpan();
  if (colSpan > 1) {
    writer.attribute(HTMLTags.ATTR_COLSPAN,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan > 1) {
    writer.attribute(HTMLTags.ATTR_ROWSPAN,rowSpan);
  }
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildCellStyle(cell,styleBuffer,isHead);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleCellAlign(cell);
  if (!startedGroups.isEmpty()) {
    IGroupContent group=(IGroupContent)startedGroups.firstElement();
    String bookmark=group.getBookmark();
    if (bookmark == null) {
      bookmark=idGenerator.generateUniqueID();
      group.setBookmark(bookmark);
    }
    HTMLEmitterUtil.setBookmark(writer,null,htmlIDNamespace,bookmark);
    startedGroups.remove(group);
    Iterator iter=startedGroups.iterator();
    while (iter.hasNext()) {
      group=(IGroupContent)iter.next();
      outputBookmark(group);
    }
    startedGroups.clear();
  }
  if (enableMetadata) {
    metadataEmitter.startCell(cell);
  }
}",0.9402670414617006
70723,"public IContent execute(){
  CellDesign cellDesign=(CellDesign)getDesign();
  ICellContent cellContent=report.createCellContent();
  setContent(cellContent);
  executeQuery();
  initializeContent(cellDesign,cellContent);
  processAction(cellDesign,cellContent);
  processBookmark(cellDesign,cellContent);
  processStyle(cellDesign,cellContent);
  processVisibility(cellDesign,cellContent);
  if (context.isInFactory()) {
    handleOnCreate(cellContent);
  }
  startTOCEntry(cellContent);
  currentItem=0;
  return content;
}","public IContent execute(){
  CellDesign cellDesign=(CellDesign)getDesign();
  ICellContent cellContent=report.createCellContent();
  setContent(cellContent);
  executeQuery();
  initializeContent(cellDesign,cellContent);
  processAction(cellDesign,cellContent);
  processBookmark(cellDesign,cellContent);
  processScope(cellDesign,cellContent);
  processHeaders(cellDesign,cellContent);
  processStyle(cellDesign,cellContent);
  processVisibility(cellDesign,cellContent);
  if (context.isInFactory()) {
    handleOnCreate(cellContent);
  }
  startTOCEntry(cellContent);
  currentItem=0;
  return content;
}",0.927433628318584
70724,"public void visitCell(CellHandle handle){
  CellDesign cell=new CellDesign();
  setupStyledElement(cell,handle);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      cell.addContent((ReportItemDesign)currentElement);
    }
  }
  cell.setColSpan(handle.getColumnSpan());
  int columnId=handle.getColumn() - 1;
  if (columnId < 0) {
    columnId=-1;
  }
  cell.setColumn(columnId);
  cell.setRowSpan(handle.getRowSpan());
  if (isCellInGroupHeader(handle)) {
    cell.setDrop(handle.getDrop());
  }
  String onCreate=handle.getOnCreate();
  String onCreateScriptText=createExpression(onCreate);
  if (null != onCreateScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(onCreateScriptText,id);
    cell.setOnCreate(scriptExpr);
  }
  String OnRenderScriptText=handle.getOnRender();
  if (null != OnRenderScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnRenderScriptText,id);
    cell.setOnRender(scriptExpr);
  }
  setupHighlight(cell,null);
  setCurrentElement(cell);
}","public void visitCell(CellHandle handle){
  CellDesign cell=new CellDesign();
  setupStyledElement(cell,handle);
  setupAuralInfomation(cell,handle);
  SlotHandle contentSlot=handle.getContent();
  for (int i=0; i < contentSlot.getCount(); i++) {
    apply(contentSlot.get(i));
    if (currentElement != null) {
      cell.addContent((ReportItemDesign)currentElement);
    }
  }
  cell.setColSpan(handle.getColumnSpan());
  int columnId=handle.getColumn() - 1;
  if (columnId < 0) {
    columnId=-1;
  }
  cell.setColumn(columnId);
  cell.setRowSpan(handle.getRowSpan());
  if (isCellInGroupHeader(handle)) {
    cell.setDrop(handle.getDrop());
  }
  String onCreate=handle.getOnCreate();
  String onCreateScriptText=createExpression(onCreate);
  if (null != onCreateScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_CREATE_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(onCreateScriptText,id);
    cell.setOnCreate(scriptExpr);
  }
  String OnRenderScriptText=handle.getOnRender();
  if (null != OnRenderScriptText) {
    String id=ModuleUtil.getScriptUID(handle.getPropertyHandle(ICellModel.ON_RENDER_METHOD));
    ScriptExpression scriptExpr=new ScriptExpression(OnRenderScriptText,id);
    cell.setOnRender(scriptExpr);
  }
  setupHighlight(cell,null);
  setCurrentElement(cell);
}",0.9860219115980356
70725,"/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,int length,StopSign stopSign) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (stopSign != null && stopSign.isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=ObjectSecurity.createObjectInputStream(dis);
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}","/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,int length,StopSign stopSign) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (stopSign != null && stopSign.isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=ObjectSecurity.createObjectInputStream(dis);
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
 else {
        throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}",0.9815709429236
70726,"/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 * @throws DataException 
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException, DataException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=ObjectSecurity.createObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}","/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 * @throws DataException 
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException, DataException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=ObjectSecurity.createObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
 else {
      throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}",0.977667493796526
70727,"public static void copy(Shell shell,String path,String desFileName,URL srcURL){
  final File targetfile=new File(path,desFileName);
  if (targetfile.exists()) {
    if (!MessageDialog.openConfirm(shell,Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{desFileName}))) {
      return;
    }
  }
  OutputStream output=null;
  InputStream input=null;
  try {
    output=new FileOutputStream(targetfile);
    input=srcURL.openStream();
    int offset;
    byte[] buf=new byte[1024 * 4];
    while ((offset=input.read(buf)) > -1) {
      output.write(buf,0,offset);
    }
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
 finally {
    try {
      input.close();
      output.close();
    }
 catch (    IOException e) {
      ExceptionHandler.handle(e);
    }
  }
}","public static void copy(Shell shell,String path,String desFileName,URL srcURL){
  final File targetfile=new File(path,desFileName);
  if (targetfile.exists()) {
    if (!MessageDialog.openConfirm(shell,Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{desFileName}))) {
      return;
    }
  }
  OutputStream output=null;
  InputStream input=null;
  try {
    output=new FileOutputStream(targetfile);
    input=srcURL.openStream();
    int offset;
    byte[] buf=new byte[1024 * 4];
    while ((offset=input.read(buf)) > -1) {
      output.write(buf,0,offset);
    }
  }
 catch (  IOException e) {
    ExceptionHandler.handle(e);
  }
 finally {
    if (input != null) {
      try {
        input.close();
      }
 catch (      IOException e) {
        ExceptionHandler.handle(e);
      }
    }
    if (output != null) {
      try {
        output.close();
      }
 catch (      IOException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
}",0.8419319429198683
70728,"protected void okPressed(){
  try {
    valueVisible=determineValueVisible(DEUtil.resolveNull(getValueForOperator(operator.getText())));
    if (handle == null) {
      MapRule rule=StructureFactory.createMapRule();
      rule.setProperty(MapRule.OPERATOR_MEMBER,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible == 3) {
        rule.setValue1(valueList);
        rule.setValue2(""String_Node_Str"");
      }
 else {
        if (expressionValue1.isVisible()) {
          rule.setProperty(MapRule.VALUE1_MEMBER,DEUtil.resolveNull(expressionValue1.getText()));
        }
        if (expressionValue2.isVisible()) {
          rule.setProperty(MapRule.VALUE2_MEMBER,DEUtil.resolveNull(expressionValue2.getText()));
        }
      }
      rule.setProperty(MapRule.DISPLAY_MEMBER,DEUtil.resolveNull(display.getText()));
      rule.setTestExpression(DEUtil.resolveNull(expression.getText()));
      handle=provider.doAddItem(rule,handleCount);
    }
 else {
      handle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible != 3) {
        if (expressionValue1.isVisible()) {
          handle.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          handle.setValue1(NULL_STRING);
        }
        if (expressionValue2.isVisible()) {
          handle.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          handle.setValue2(NULL_STRING);
        }
      }
 else {
        handle.setValue1(valueList);
        handle.setValue2(""String_Node_Str"");
      }
      handle.setDisplay(DEUtil.resolveNull(display.getText()));
      handle.setDisplayKey(DEUtil.resolveNull(resourceKeytext.getText()));
      handle.setTestExpression(DEUtil.resolveNull(expression.getText()));
    }
  }
 catch (  Exception e) {
    WidgetUtil.processError(getShell(),e);
  }
  super.okPressed();
}","protected void okPressed(){
  try {
    valueVisible=determineValueVisible(DEUtil.resolveNull(getValueForOperator(operator.getText())));
    if (handle == null) {
      MapRule rule=StructureFactory.createMapRule();
      rule.setProperty(MapRule.OPERATOR_MEMBER,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible == 3) {
        rule.setValue1(valueList);
        rule.setValue2(""String_Node_Str"");
      }
 else {
        if (expressionValue1.isVisible()) {
          rule.setProperty(MapRule.VALUE1_MEMBER,DEUtil.resolveNull(expressionValue1.getText()));
        }
        if (expressionValue2.isVisible()) {
          rule.setProperty(MapRule.VALUE2_MEMBER,DEUtil.resolveNull(expressionValue2.getText()));
        }
      }
      rule.setProperty(MapRule.DISPLAY_MEMBER,DEUtil.resolveNull(display.getText()));
      rule.setTestExpression(DEUtil.resolveNull(expression.getText()));
      handle=provider.doAddItem(rule,handleCount);
    }
 else {
      handle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible != 3) {
        if (expressionValue1.isVisible()) {
          handle.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          handle.setValue1(NULL_STRING);
        }
        if (expressionValue2.isVisible()) {
          handle.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          handle.setValue2(NULL_STRING);
        }
      }
 else {
        handle.setValue1(valueList);
        handle.setValue2(""String_Node_Str"");
      }
      handle.setDisplay(DEUtil.resolveNull(display.getText()));
      handle.setDisplayKey(DEUtil.resolveNull(resourceKeytext.getText()));
      handle.setTestExpression(DEUtil.resolveNull(expression.getText()));
    }
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
  super.okPressed();
}",0.9884027411702688
70729,"private void fillExpression(Combo control){
  String te=""String_Node_Str"";
  if (handle != null) {
    te=handle.getTestExpression();
  }
  if ((designHandle instanceof DataItemHandle) && (((DataItemHandle)designHandle).getResultSetColumn() != null)) {
    control.add(VALUE_OF_THIS_DATA_ITEM);
  }
  if (control.getItemCount() == 0) {
    control.add(DEUtil.resolveNull(null));
    control.select(control.getItemCount() - 1);
  }
}","private void fillExpression(Combo control){
  if ((designHandle instanceof DataItemHandle) && (((DataItemHandle)designHandle).getResultSetColumn() != null)) {
    control.add(VALUE_OF_THIS_DATA_ITEM);
  }
  if (control.getItemCount() == 0) {
    control.add(DEUtil.resolveNull(null));
    control.select(control.getItemCount() - 1);
  }
}",0.8779220779220779
70730,"private int createValueListComposite(Composite parent){
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    return 0;
  }
  disposeComposites();
  valueListComposite=new Composite(parent,SWT.NONE);
  GridData gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.horizontalSpan=4;
  valueListComposite.setLayoutData(gdata);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  valueListComposite.setLayout(layout);
  compositeList.add(valueListComposite);
  Group group=new Group(valueListComposite,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=118;
  data.horizontalSpan=3;
  data.horizontalIndent=0;
  data.grabExcessHorizontalSpace=true;
  group.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=4;
  group.setLayout(layout);
  new Label(group,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  GridData expgd=new GridData();
  expgd.widthHint=100;
  addExpressionValue=new MultiValueCombo(group,SWT.NONE);
  addExpressionValue.setLayoutData(expgd);
  addBtn=new Button(group,SWT.PUSH);
  addBtn.setText(Messages.getString(""String_Node_Str""));
  addBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(addBtn);
  addBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      String value=addExpressionValue.getText().trim();
      if (valueList.indexOf(value) < 0) {
        valueList.add(value);
        tableViewer.refresh();
        updateButtons();
        addExpressionValue.setFocus();
        addExpressionValue.setText(""String_Node_Str"");
      }
 else {
        addBtn.setEnabled(false);
      }
    }
  }
);
  new Label(group,SWT.NONE);
  int tableStyle=SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION;
  table=new Table(group,tableStyle);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  table.setLayoutData(data);
  table.setHeaderVisible(false);
  table.setLinesVisible(true);
  TableColumn column;
  int i;
  String[] columNames=new String[]{Messages.getString(""String_Node_Str"")};
  int[] columLength=new int[]{288};
  for (i=0; i < columNames.length; i++) {
    column=new TableColumn(table,SWT.NONE,i);
    column.setText(columNames[i]);
    column.setWidth(columLength[i]);
  }
  table.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      checkEditDelButtonStatus();
    }
  }
);
  table.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        delTableValue();
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      editTableValue();
    }
  }
);
  tableViewer=new TableViewer(table);
  tableViewer.setUseHashlookup(true);
  tableViewer.setColumnProperties(columNames);
  tableViewer.setLabelProvider(tableLableProvier);
  tableViewer.setContentProvider(tableContentProvider);
  Composite rightPart=new Composite(valueListComposite,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_END);
  rightPart.setLayoutData(data);
  layout=new GridLayout();
  layout.makeColumnsEqualWidth=true;
  rightPart.setLayout(layout);
  editBtn=new Button(rightPart,SWT.PUSH);
  editBtn.setText(Messages.getString(""String_Node_Str""));
  editBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(editBtn);
  editBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      editTableValue();
    }
  }
);
  delBtn=new Button(rightPart,SWT.PUSH);
  delBtn.setText(Messages.getString(""String_Node_Str""));
  delBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delBtn);
  delBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      delTableValue();
    }
  }
);
  delAllBtn=new Button(rightPart,SWT.PUSH);
  delAllBtn.setText(Messages.getString(""String_Node_Str""));
  delAllBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delAllBtn);
  delAllBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int count=valueList.size();
      if (count > 0) {
        valueList.clear();
        tableViewer.refresh();
        updateButtons();
      }
 else {
        delAllBtn.setEnabled(false);
      }
    }
  }
);
  addExpressionValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkAddButtonStatus();
      updateButtons();
    }
  }
);
  addExpressionValue.addSelectionListener(0,mAddSelValueAction);
  addExpressionValue.addSelectionListener(1,mAddExpValueAction);
  addExpressionValue.setItems(popupItems);
  parent.getParent().layout(true,true);
  if (parent.getShell() != null)   parent.getShell().pack();
  return 1;
}","private int createValueListComposite(Composite parent){
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    return 0;
  }
  disposeComposites();
  valueListComposite=new Composite(parent,SWT.NONE);
  GridData gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.horizontalSpan=4;
  valueListComposite.setLayoutData(gdata);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  valueListComposite.setLayout(layout);
  compositeList.add(valueListComposite);
  Group group=new Group(valueListComposite,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=118;
  data.horizontalSpan=3;
  data.horizontalIndent=0;
  data.grabExcessHorizontalSpace=true;
  group.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=4;
  group.setLayout(layout);
  new Label(group,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  GridData expgd=new GridData();
  expgd.widthHint=100;
  addExpressionValue=new MultiValueCombo(group,SWT.NONE);
  addExpressionValue.setLayoutData(expgd);
  addBtn=new Button(group,SWT.PUSH);
  addBtn.setText(Messages.getString(""String_Node_Str""));
  addBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(addBtn);
  addBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String value=addExpressionValue.getText().trim();
      if (valueList.indexOf(value) < 0) {
        valueList.add(value);
        tableViewer.refresh();
        updateButtons();
        addExpressionValue.setFocus();
        addExpressionValue.setText(""String_Node_Str"");
      }
 else {
        addBtn.setEnabled(false);
      }
    }
  }
);
  new Label(group,SWT.NONE);
  int tableStyle=SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION;
  table=new Table(group,tableStyle);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  table.setLayoutData(data);
  table.setHeaderVisible(false);
  table.setLinesVisible(true);
  TableColumn column;
  int i;
  String[] columNames=new String[]{Messages.getString(""String_Node_Str"")};
  int[] columLength=new int[]{288};
  for (i=0; i < columNames.length; i++) {
    column=new TableColumn(table,SWT.NONE,i);
    column.setText(columNames[i]);
    column.setWidth(columLength[i]);
  }
  table.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      checkEditDelButtonStatus();
    }
  }
);
  table.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        delTableValue();
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      editTableValue();
    }
  }
);
  tableViewer=new TableViewer(table);
  tableViewer.setUseHashlookup(true);
  tableViewer.setColumnProperties(columNames);
  tableViewer.setLabelProvider(tableLableProvier);
  tableViewer.setContentProvider(tableContentProvider);
  Composite rightPart=new Composite(valueListComposite,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_END);
  rightPart.setLayoutData(data);
  layout=new GridLayout();
  layout.makeColumnsEqualWidth=true;
  rightPart.setLayout(layout);
  editBtn=new Button(rightPart,SWT.PUSH);
  editBtn.setText(Messages.getString(""String_Node_Str""));
  editBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(editBtn);
  editBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editTableValue();
    }
  }
);
  delBtn=new Button(rightPart,SWT.PUSH);
  delBtn.setText(Messages.getString(""String_Node_Str""));
  delBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delBtn);
  delBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      delTableValue();
    }
  }
);
  delAllBtn=new Button(rightPart,SWT.PUSH);
  delAllBtn.setText(Messages.getString(""String_Node_Str""));
  delAllBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delAllBtn);
  delAllBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      int count=valueList.size();
      if (count > 0) {
        valueList.clear();
        tableViewer.refresh();
        updateButtons();
      }
 else {
        delAllBtn.setEnabled(false);
      }
    }
  }
);
  addExpressionValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkAddButtonStatus();
      updateButtons();
    }
  }
);
  addExpressionValue.addSelectionListener(0,mAddSelValueAction);
  addExpressionValue.addSelectionListener(1,mAddExpValueAction);
  addExpressionValue.setItems(popupItems);
  parent.getParent().layout(true,true);
  if (parent.getShell() != null)   parent.getShell().pack();
  return 1;
}",0.905850445563735
70731,"/** 
 * Obtains singleton instance.
 * @return browser manager instance
 */
public static BrowserManager getInstance(){
  if (instance == null) {
    instance=new BrowserManager();
    instance.init();
  }
  return instance;
}","/** 
 * Obtains singleton instance.
 * @return browser manager instance
 */
synchronized public static BrowserManager getInstance(){
  if (instance == null) {
    instance=new BrowserManager();
    instance.init();
  }
  return instance;
}",0.9720430107526882
70732,"private EditPart getEditPartUnderMouse(){
  EditPart editPart=getCurrentViewer().findObjectAtExcluding(getLocation(),new ArrayList());
  return editPart;
}","private EditPart getEditPartUnderMouse(){
  if (getCurrentViewer() == null) {
    return null;
  }
  EditPart editPart=getCurrentViewer().findObjectAtExcluding(getLocation(),new ArrayList());
  return editPart;
}",0.8446866485013624
70733,"public void run(){
  if (!getSourceEditPart().isActive()) {
    return;
  }
  EditPartViewer viewer=getSourceEditPart().getViewer();
  EditPart parent=getSourceEditPart().getParent();
  if (activeHelper == this && getSourceEditPart().isActive() && viewer.getControl() != null && !viewer.getControl().isDisposed()) {
    if (viewer.getSelectedEditParts().size() == 1) {
      if (parent.getAdapter(IDelaySelectionDragTracker.class) != null) {
        proxy=(IDelaySelectionDragTracker)parent.getAdapter(IDelaySelectionDragTracker.class);
        if (viewer instanceof DeferredGraphicalViewer)         ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(proxy.getSourceEditPart()),true);
        if (getSourceEditPart() != getEditPartUnderMouse()) {
          IFigure figure=((GraphicalEditPart)getSourceEditPart()).getFigure();
          Rectangle center=figure.getBounds().getCopy();
          figure.translateToAbsolute(center);
          proxy.setStartLocation(center.getCenter());
        }
 else {
          proxy.setStartLocation(getStartLocation());
        }
        proxy.setState(STATE_DRAG_IN_PROGRESS);
      }
      setFlag(FLAG_DELAY_SELECTION,true);
    }
 else {
      setFlag(FLAG_DELAY_SELECTION,false);
    }
  }
 else {
    setFlag(FLAG_DELAY_SELECTION,false);
  }
  activeHelper=null;
}","public void run(){
  if (!getSourceEditPart().isActive()) {
    return;
  }
  EditPartViewer viewer=getSourceEditPart().getViewer();
  EditPart parent=getSourceEditPart().getParent();
  if (activeHelper == this && getSourceEditPart().isActive() && viewer.getControl() != null && !viewer.getControl().isDisposed()) {
    viewer.getControl().removeFocusListener(focus);
    viewer.getControl().removeKeyListener(key);
    if (viewer.getSelectedEditParts().size() == 1) {
      if (parent.getAdapter(IDelaySelectionDragTracker.class) != null) {
        proxy=(IDelaySelectionDragTracker)parent.getAdapter(IDelaySelectionDragTracker.class);
        if (viewer instanceof DeferredGraphicalViewer)         ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(proxy.getSourceEditPart()),true);
        if (getSourceEditPart() != getEditPartUnderMouse()) {
          IFigure figure=((GraphicalEditPart)getSourceEditPart()).getFigure();
          Rectangle center=figure.getBounds().getCopy();
          figure.translateToAbsolute(center);
          proxy.setStartLocation(center.getCenter());
        }
 else {
          proxy.setStartLocation(getStartLocation());
        }
        proxy.setState(STATE_DRAG_IN_PROGRESS);
      }
      setFlag(FLAG_DELAY_SELECTION,true);
    }
 else {
      setFlag(FLAG_DELAY_SELECTION,false);
    }
  }
 else {
    setFlag(FLAG_DELAY_SELECTION,false);
  }
  activeHelper=null;
}",0.9636363636363636
70734,"public DelaySelectionHelper(){
  activeHelper=this;
  Display.getCurrent().timerExec(DELAY_TIME,this);
}","public DelaySelectionHelper(){
  activeHelper=this;
  hookControl(getSourceEditPart().getViewer().getControl());
  Display.getCurrent().timerExec(DELAY_TIME,this);
}",0.7732342007434945
70735,"/** 
 * @param objClass
 * @return
 */
public static boolean isValidDataType(Class objClass){
  for (int i=0; i < classes.length; i++) {
    if (classes[i].equals(objClass)) {
      return true;
    }
  }
  return true;
}","/** 
 * @param objClass
 * @return
 */
public static boolean isValidDataType(Class objClass){
  for (int i=0; i < classes.length; i++) {
    if (classes[i].equals(objClass)) {
      return true;
    }
  }
  return false;
}",0.984198645598194
70736,"public static String formatDateTime(String format,Locale locale){
  String language=locale.getLanguage();
  String code=locale2Code.get(locale);
  if (code == null) {
    code=locale2Code.get(new Locale(language));
  }
  return code + format;
}","public static String formatDateTime(String format,ULocale locale){
  String language=locale.getLanguage();
  String code=locale2Code.get(locale);
  if (code == null) {
    code=locale2Code.get(new Locale(language));
  }
  return code + format;
}",0.9979550102249488
70737,"public void initialize(IEmitterServices service) throws EngineException {
  this.service=service;
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
  }
  context.setTempFileDir(service.getReportEngine().getConfig().getTempDir());
  IReportContext reportContext=service.getReportContext();
  if (reportContext != null) {
    Locale locale=reportContext.getLocale();
    if (locale != null)     context.setLocale(ULocale.forLocale(locale));
  }
}","public void initialize(IEmitterServices service) throws EngineException {
  this.service=service;
  if (service != null) {
    this.out=EmitterUtil.getOuputStream(service,""String_Node_Str"" + getOutputFormat());
  }
  context.setTempFileDir(service.getReportEngine().getConfig().getTempDir());
  IReportContext reportContext=service.getReportContext();
  if (reportContext != null) {
    Locale locale=reportContext.getLocale();
    if (locale != null) {
      context.setLocale(ULocale.forLocale(locale));
    }
 else     context.setLocale(ULocale.getDefault());
  }
}",0.9432558139534885
70738,"public void run(){
  if (!viewer.getTree().isDisposed()) {
    IMemento memento=viewerMemento.getChild(provider.getElementType());
    if (memento == null) {
      expandToDefaultLevel();
      if (viewer.getTree().getItemCount() > 0) {
        Memento elementMemento=(Memento)viewerMemento.createChild(provider.getElementType(),MementoElement.Type_Element);
        elementMemento.getMementoElement().setValue(new Integer(0));
      }
    }
 else     if (memento instanceof Memento) {
      expandToDefaultLevel();
      expandTreeFromMemento((Memento)memento);
    }
  }
  execMemento=false;
}","public void run(){
  if (!viewer.getTree().isDisposed()) {
    IMemento memento=viewerMemento.getChild(provider.getElementType());
    if (memento == null) {
      expandToDefaultLevel();
      if (viewer.getTree().getItemCount() > 0) {
        Memento elementMemento=(Memento)viewerMemento.createChild(provider.getElementType(),MementoElement.Type_Element);
        elementMemento.getMementoElement().setValue(Integer.valueOf(0));
      }
    }
 else     if (memento instanceof Memento) {
      expandToDefaultLevel();
      expandTreeFromMemento((Memento)memento);
    }
  }
  execMemento=false;
}",0.9899497487437184
70739,"public void postElementEvent(){
  if (!viewer.getTree().isDisposed()) {
    if (getControl().isFocusControl()) {
      IMemento memento=viewerMemento.getChild(provider.getElementType());
      if (memento == null) {
        expandToDefaultLevel();
        if (viewer.getTree().getItemCount() > 0) {
          Memento elementMemento=(Memento)viewerMemento.createChild(provider.getElementType(),MementoElement.Type_Element);
          elementMemento.getMementoElement().setValue(new Integer(0));
        }
      }
      if (memento != null && memento instanceof Memento) {
        expandToDefaultLevel();
        expandTreeFromMemento((Memento)memento);
      }
      changed=false;
    }
 else {
      changed=true;
    }
  }
 else {
    deRegisterEventManager();
  }
}","public void postElementEvent(){
  if (!viewer.getTree().isDisposed()) {
    if (getControl().isFocusControl()) {
      IMemento memento=viewerMemento.getChild(provider.getElementType());
      if (memento == null) {
        expandToDefaultLevel();
        if (viewer.getTree().getItemCount() > 0) {
          Memento elementMemento=(Memento)viewerMemento.createChild(provider.getElementType(),MementoElement.Type_Element);
          elementMemento.getMementoElement().setValue(Integer.valueOf(0));
        }
      }
      if (memento != null && memento instanceof Memento) {
        expandToDefaultLevel();
        expandTreeFromMemento((Memento)memento);
      }
      changed=false;
    }
 else {
      changed=true;
    }
  }
 else {
    deRegisterEventManager();
  }
}",0.9922077922077922
70740,"protected MementoElement[] createItemPath(TreeItem item){
  MementoElement tempMemento=null;
  while (item.getParentItem() != null) {
    TreeItem parent=item.getParentItem();
    for (int i=0; i < parent.getItemCount(); i++) {
      if (parent.getItem(i) == item) {
        MementoElement memento=new MementoElement(item.getText(),new Integer(i),MementoElement.Type_Element);
        if (tempMemento != null)         memento.addChild(tempMemento);
        tempMemento=memento;
        item=parent;
        break;
      }
    }
  }
  MementoElement memento=new MementoElement(item.getText(),new Integer(0),MementoElement.Type_Element);
  if (tempMemento != null)   memento.addChild(tempMemento);
  return provider.getNodePath(memento);
}","protected MementoElement[] createItemPath(TreeItem item){
  MementoElement tempMemento=null;
  while (item.getParentItem() != null) {
    TreeItem parent=item.getParentItem();
    for (int i=0; i < parent.getItemCount(); i++) {
      if (parent.getItem(i) == item) {
        MementoElement memento=new MementoElement(item.getText(),Integer.valueOf(i),MementoElement.Type_Element);
        if (tempMemento != null)         memento.addChild(tempMemento);
        tempMemento=memento;
        item=parent;
        break;
      }
    }
  }
  MementoElement memento=new MementoElement(item.getText(),Integer.valueOf(0),MementoElement.Type_Element);
  if (tempMemento != null)   memento.addChild(tempMemento);
  return provider.getNodePath(memento);
}",0.9649122807017544
70741,"private void execMemento(){
  if (!execMemento) {
    execMemento=true;
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        if (!viewer.getTree().isDisposed()) {
          IMemento memento=viewerMemento.getChild(provider.getElementType());
          if (memento == null) {
            expandToDefaultLevel();
            if (viewer.getTree().getItemCount() > 0) {
              Memento elementMemento=(Memento)viewerMemento.createChild(provider.getElementType(),MementoElement.Type_Element);
              elementMemento.getMementoElement().setValue(new Integer(0));
            }
          }
 else           if (memento instanceof Memento) {
            expandToDefaultLevel();
            expandTreeFromMemento((Memento)memento);
          }
        }
        execMemento=false;
      }
    }
);
  }
}","private void execMemento(){
  if (!execMemento) {
    execMemento=true;
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        if (!viewer.getTree().isDisposed()) {
          IMemento memento=viewerMemento.getChild(provider.getElementType());
          if (memento == null) {
            expandToDefaultLevel();
            if (viewer.getTree().getItemCount() > 0) {
              Memento elementMemento=(Memento)viewerMemento.createChild(provider.getElementType(),MementoElement.Type_Element);
              elementMemento.getMementoElement().setValue(Integer.valueOf(0));
            }
          }
 else           if (memento instanceof Memento) {
            expandToDefaultLevel();
            expandTreeFromMemento((Memento)memento);
          }
        }
        execMemento=false;
      }
    }
);
  }
}",0.992831541218638
70742,"private boolean saveFile(String filePath){
  File f=new File(filePath);
  if (!(f.exists() && f.isFile())) {
    MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{propFileName}));
    return false;
  }
 else   if (!f.canWrite()) {
    MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{propFileName}));
    return false;
  }
  try {
    if (f.canWrite()) {
      FileOutputStream fos=new FileOutputStream(f);
      content.store(fos,""String_Node_Str"");
      fos.close();
    }
    return true;
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  return false;
}","private boolean saveFile(String filePath){
  File f=new File(filePath);
  if (!(f.exists() && f.isFile())) {
    MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{propFileName}));
    return false;
  }
 else   if (!f.canWrite()) {
    MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{propFileName}));
    return false;
  }
  FileOutputStream fos=null;
  try {
    if (f.canWrite()) {
      fos=new FileOutputStream(f);
      content.store(fos,""String_Node_Str"");
    }
    return true;
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
 finally {
    if (fos != null) {
      try {
        fos.close();
      }
 catch (      IOException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
  return false;
}",0.8328230251071648
70743,"/** 
 * Check if the name of a group/dimension level is allowed.
 * @return allowed
 */
public static boolean validateDimensionName(String name){
  DataRequestSession session=null;
  ICubeQueryUtil cubeQueryUtil=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryUtil=session.getCubeQueryUtil();
  }
 catch (  Exception e) {
  }
  return cubeQueryUtil.isValidDimensionName(name);
}","/** 
 * Check if the name of a group/dimension level is allowed.
 * @return allowed
 */
public static boolean validateDimensionName(String name){
  DataRequestSession session=null;
  ICubeQueryUtil cubeQueryUtil=null;
  try {
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    cubeQueryUtil=session.getCubeQueryUtil();
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return false;
  }
  if (cubeQueryUtil != null)   return cubeQueryUtil.isValidDimensionName(name);
 else   return false;
}",0.8893166506256015
70744,"public void run(){
  EditPartViewer viewer=getSourceEditPart().getViewer();
  EditPart parent=getSourceEditPart().getParent();
  if (activeHelper == this && getSourceEditPart().isActive() && viewer.getControl() != null && !viewer.getControl().isDisposed()) {
    if (viewer.getSelectedEditParts().size() == 1) {
      if (parent.getAdapter(IDelaySelectionDragTracker.class) != null) {
        proxy=(IDelaySelectionDragTracker)parent.getAdapter(IDelaySelectionDragTracker.class);
        if (viewer instanceof DeferredGraphicalViewer)         ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(proxy.getSourceEditPart()),true);
        if (getSourceEditPart() != getEditPartUnderMouse()) {
          IFigure figure=((GraphicalEditPart)getSourceEditPart()).getFigure();
          Rectangle center=figure.getBounds().getCopy();
          figure.translateToAbsolute(center);
          proxy.setStartLocation(center.getCenter());
        }
 else {
          proxy.setStartLocation(getStartLocation());
        }
        proxy.setState(STATE_DRAG_IN_PROGRESS);
      }
      setFlag(FLAG_DELAY_SELECTION,true);
    }
 else {
      setFlag(FLAG_DELAY_SELECTION,false);
    }
  }
 else {
    setFlag(FLAG_DELAY_SELECTION,false);
  }
  activeHelper=null;
}","public void run(){
  if (!getSourceEditPart().isActive()) {
    return;
  }
  EditPartViewer viewer=getSourceEditPart().getViewer();
  EditPart parent=getSourceEditPart().getParent();
  if (activeHelper == this && getSourceEditPart().isActive() && viewer.getControl() != null && !viewer.getControl().isDisposed()) {
    if (viewer.getSelectedEditParts().size() == 1) {
      if (parent.getAdapter(IDelaySelectionDragTracker.class) != null) {
        proxy=(IDelaySelectionDragTracker)parent.getAdapter(IDelaySelectionDragTracker.class);
        if (viewer instanceof DeferredGraphicalViewer)         ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(proxy.getSourceEditPart()),true);
        if (getSourceEditPart() != getEditPartUnderMouse()) {
          IFigure figure=((GraphicalEditPart)getSourceEditPart()).getFigure();
          Rectangle center=figure.getBounds().getCopy();
          figure.translateToAbsolute(center);
          proxy.setStartLocation(center.getCenter());
        }
 else {
          proxy.setStartLocation(getStartLocation());
        }
        proxy.setState(STATE_DRAG_IN_PROGRESS);
      }
      setFlag(FLAG_DELAY_SELECTION,true);
    }
 else {
      setFlag(FLAG_DELAY_SELECTION,false);
    }
  }
 else {
    setFlag(FLAG_DELAY_SELECTION,false);
  }
  activeHelper=null;
}",0.9780177400694176
70745,"/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,int length,StopSign stopSign) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (stopSign != null && stopSign.isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=ObjectSecurity.createObjectInputStream(dis);
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}","/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,int length,StopSign stopSign) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (stopSign != null && stopSign.isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=ObjectSecurity.createObjectInputStream(dis);
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
 else {
        throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}",0.9815709429236
70746,"/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 * @throws DataException 
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException, DataException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=ObjectSecurity.createObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}","/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 * @throws DataException 
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException, DataException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=ObjectSecurity.createObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
 else {
      throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}",0.977667493796526
70747,"/** 
 * Creates the palette viewer and its control.
 * @see Page#createControl(org.eclipse.swt.widgets.Composite)
 */
public void createControl(Composite parent){
  if (getViewer() == null) {
    return;
  }
  tree=new Tree(parent,SWT.NONE);
  treeCommon.setTree(tree);
  treeCommon.setExpressionViewer(getViewer());
  treeCommon.createDefaultExpressionTree(SessionHandleAdapter.getInstance().getReportDesignHandle().getVisibleDataSets());
  treeCommon.addMouseTrackListener();
  treeCommon.addMouseListener();
  treeCommon.addDragSupportToTree();
  treeCommon.addDropSupportToViewer();
  tree.setToolTipText(""String_Node_Str"");
  tree.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      treeCommon.removeDropSupportToViewer();
    }
  }
);
}","/** 
 * Creates the palette viewer and its control.
 * @see Page#createControl(org.eclipse.swt.widgets.Composite)
 */
public void createControl(Composite parent){
  if (getViewer() == null) {
    return;
  }
  tree=new Tree(parent,SWT.NONE);
  treeCommon.setTree(tree);
  treeCommon.setExpressionViewer(getViewer());
  treeCommon.createDefaultExpressionTree();
  treeCommon.addMouseTrackListener();
  treeCommon.addMouseListener();
  treeCommon.addDragSupportToTree();
  treeCommon.addDropSupportToViewer();
  tree.setToolTipText(""String_Node_Str"");
  tree.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      treeCommon.removeDropSupportToViewer();
    }
  }
);
}",0.9473684210526316
70748,"public void startImage(IImageContent image){
}","public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  HyperlinkDef url=parseHyperLink(image);
  BookmarkDef bookmark=getBookmark(image);
  engine.addImageData(image,style,url,bookmark);
}",0.3445692883895131
70749,"public void outputData(SheetData sheetData){
  Data d=(Data)sheetData;
  startCell(d.span.getCol(),d.span.getColSpan(),d.getRowSpan(),d.styleId,d.hyperLink,d.getLinkedBookmark());
  writeText(d);
  if (d.hyperLink != null && d.hyperLink.getToolTip() != null) {
    writeComments(d.hyperLink);
  }
  endCell();
}","public void outputData(SheetData sheetData){
  if (sheetData.getDatatype() == SheetData.IMAGE)   return;
  Data d=(Data)sheetData;
  startCell(d.span.getCol(),d.span.getColSpan(),d.getRowSpan(),d.styleId,d.hyperLink,d.getLinkedBookmark());
  writeText(d);
  if (d.hyperLink != null && d.hyperLink.getToolTip() != null) {
    writeComments(d.hyperLink);
  }
  endCell();
}",0.9120234604105572
70750,"/** 
 */
public void applyContainerBottomStyle(){
  XlsContainer container=engine.getCurrentContainer();
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=container.getStyle();
  int start=rule.getStartCoordinate();
  int col=engine.getAxis().getColumnIndexByCoordinate(start);
  int span=engine.getAxis().getColumnIndexByCoordinate(rule.getEndCoordinate());
  for (int i=col; i < span; i++) {
    SheetData data=engine.getColumnLastData(i);
    if (data == null) {
      continue;
    }
    StyleBuilder.applyBottomBorder(entry,data.style);
  }
}","public void applyContainerBottomStyle(XlsContainer container){
  ContainerSizeInfo rule=container.getSizeInfo();
  StyleEntry entry=container.getStyle();
  int start=rule.getStartCoordinate();
  int col=engine.getAxis().getColumnIndexByCoordinate(start);
  int span=engine.getAxis().getColumnIndexByCoordinate(rule.getEndCoordinate());
  for (int i=col; i < span; i++) {
    SheetData data=engine.getColumnLastData(i);
    if (data == null) {
      continue;
    }
    StyleBuilder.applyBottomBorder(entry,data.style);
  }
}",0.9211009174311928
70751,"public void complete(){
  endNormalContainer();
  Iterator<SheetData[]> iterator=cache.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      int styleid=engine.getStyleID(data.getStyle());
      data.setStyleId(styleid);
      ContainerSizeInfo rule=data.getSizeInfo();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,maxCol);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      data.setSpan(span);
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
    }
  }
}","public void complete(){
  engine.applyContainerBottomStyle(containers.get(0));
  Iterator<SheetData[]> iterator=cache.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      int styleid=engine.getStyleID(data.getStyle());
      data.setStyleId(styleid);
      ContainerSizeInfo rule=data.getSizeInfo();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,maxCol);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      data.setSpan(span);
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
    }
  }
}",0.9686411149825784
70752,"public void widgetSelected(SelectionEvent e){
  TableItem row=cursor.getRow();
  String value=row.getText(cursor.getColumn());
  int strValue=0;
  try {
    strValue=Integer.parseInt(value);
  }
 catch (  Exception ee) {
    setOriValue();
    return;
  }
  int oldValue=cale.get(Calendar.DAY_OF_MONTH);
  cale.set(Calendar.DAY_OF_MONTH,strValue);
  firePropertyListener(new PropertyChangeEvent(new Object(),""String_Node_Str"",new Integer(oldValue),new Integer(strValue)));
}","public void widgetSelected(SelectionEvent e){
  TableItem row=cursor.getRow();
  String value=row.getText(cursor.getColumn());
  int strValue=0;
  try {
    strValue=Integer.parseInt(value);
  }
 catch (  Exception ee) {
    setOriValue();
    return;
  }
  int oldValue=cale.get(Calendar.DAY_OF_MONTH);
  cale.set(Calendar.DAY_OF_MONTH,strValue);
  firePropertyListener(new PropertyChangeEvent(new Object(),""String_Node_Str"",Integer.valueOf(oldValue),Integer.valueOf(strValue)));
}",0.9748953974895398
70753,"/** 
 * Constructs a new instance of this class given its parent , a style and a calendar
 * @param composite
 * @param style
 * @param calendar
 */
public SpinnerTable(Composite composite,int style,Calendar calendar){
  super(composite,style);
  table=new TimeTable(this,SWT.HIDE_SELECTION | style | SWT.BORDER);
  createColumn(table);
  cursor=new TimeTableCursor(table,SWT.NONE);
  cursor.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_BLUE));
  cursor.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
  cursor.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      TableItem row=cursor.getRow();
      String value=row.getText(cursor.getColumn());
      int strValue=0;
      try {
        strValue=Integer.parseInt(value);
      }
 catch (      Exception ee) {
        setOriValue();
        return;
      }
      int oldValue=cale.get(Calendar.DAY_OF_MONTH);
      cale.set(Calendar.DAY_OF_MONTH,strValue);
      firePropertyListener(new PropertyChangeEvent(new Object(),""String_Node_Str"",new Integer(oldValue),new Integer(strValue)));
    }
  }
);
  createItems();
  setCalendar(calendar);
}","/** 
 * Constructs a new instance of this class given its parent , a style and a calendar
 * @param composite
 * @param style
 * @param calendar
 */
public SpinnerTable(Composite composite,int style,Calendar calendar){
  super(composite,style);
  table=new TimeTable(this,SWT.HIDE_SELECTION | style | SWT.BORDER);
  createColumn(table);
  cursor=new TimeTableCursor(table,SWT.NONE);
  cursor.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_BLUE));
  cursor.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
  cursor.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      TableItem row=cursor.getRow();
      String value=row.getText(cursor.getColumn());
      int strValue=0;
      try {
        strValue=Integer.parseInt(value);
      }
 catch (      Exception ee) {
        setOriValue();
        return;
      }
      int oldValue=cale.get(Calendar.DAY_OF_MONTH);
      cale.set(Calendar.DAY_OF_MONTH,strValue);
      firePropertyListener(new PropertyChangeEvent(new Object(),""String_Node_Str"",Integer.valueOf(oldValue),Integer.valueOf(strValue)));
    }
  }
);
  createItems();
  setCalendar(calendar);
}",0.9898734177215188
70754,"public void setValue(String va){
  int intValue;
  try {
    intValue=Integer.parseInt(va);
  }
 catch (  Exception e) {
    setText(value);
    return;
  }
  intValue=intValue % limit;
  if (intValue < 0) {
    intValue=intValue + limit;
  }
  PropertyChangeEvent event=new PropertyChangeEvent(new Object(),getChangeName(),new Integer(Integer.parseInt(value)),new Integer(intValue));
  firePropertyListener(event);
  value=String.valueOf(intValue);
  setText(value);
}","public void setValue(String va){
  int intValue;
  try {
    intValue=Integer.parseInt(va);
  }
 catch (  Exception e) {
    setText(value);
    return;
  }
  intValue=intValue % limit;
  if (intValue < 0) {
    intValue=intValue + limit;
  }
  PropertyChangeEvent event=new PropertyChangeEvent(new Object(),getChangeName(),Integer.valueOf(Integer.parseInt(value)),Integer.valueOf(intValue));
  firePropertyListener(event);
  value=String.valueOf(intValue);
  setText(value);
}",0.9429175475687104
70755,"private void setText(String text){
  int value;
  try {
    value=Integer.parseInt(text);
  }
 catch (  Exception e) {
    this.text.setText(textContend);
    return;
  }
  if (value < 0) {
    this.text.setText(textContend);
    return;
  }
  firePropertyListener(new PropertyChangeEvent(new Object(),IPropertyEventConstants.YEAR_CHANGE_EVENT,new Integer(Integer.parseInt(textContend)),new Integer(value)));
  this.textContend=text;
  this.text.setText(textContend);
}","private void setText(String text){
  int value;
  try {
    value=Integer.parseInt(text);
  }
 catch (  Exception e) {
    this.text.setText(textContend);
    return;
  }
  if (value < 0) {
    this.text.setText(textContend);
    return;
  }
  firePropertyListener(new PropertyChangeEvent(new Object(),IPropertyEventConstants.YEAR_CHANGE_EVENT,Integer.valueOf(Integer.parseInt(textContend)),Integer.valueOf(value)));
  this.textContend=text;
  this.text.setText(textContend);
}",0.945031712473573
70756,"/** 
 * Convert the single string of preference into string array
 * @param preferenceValue The specified element name
 * @return String[] The array of strings
 */
public static String[] convert(String preferenceValue){
  String preferenceValueCopy=new String();
  preferenceValueCopy=new String(PREFERENCE_DELIMITER) + preferenceValue;
  String replaceString=new String(PREFERENCE_DELIMITER) + new String(PREFERENCE_DELIMITER);
  String regrex=new String(PREFERENCE_DELIMITER) + SPACE + new String(PREFERENCE_DELIMITER);
  while (preferenceValueCopy.indexOf(replaceString) != -1) {
    preferenceValueCopy=preferenceValueCopy.replaceFirst(replaceString,regrex);
  }
  StringTokenizer tokenizer=new StringTokenizer(preferenceValueCopy,PREFERENCE_DELIMITER);
  int tokenCount=tokenizer.countTokens();
  String[] elements=new String[tokenCount];
  int i;
  for (i=0; i < tokenCount; i++) {
    elements[i]=tokenizer.nextToken().trim();
  }
  return elements;
}","/** 
 * Convert the single string of preference into string array
 * @param preferenceValue The specified element name
 * @return String[] The array of strings
 */
public static String[] convert(String preferenceValue){
  String preferenceValueCopy=PREFERENCE_DELIMITER + preferenceValue;
  String replaceString=PREFERENCE_DELIMITER + PREFERENCE_DELIMITER;
  String regrex=PREFERENCE_DELIMITER + SPACE + PREFERENCE_DELIMITER;
  while (preferenceValueCopy.indexOf(replaceString) != -1) {
    preferenceValueCopy=preferenceValueCopy.replaceFirst(replaceString,regrex);
  }
  StringTokenizer tokenizer=new StringTokenizer(preferenceValueCopy,PREFERENCE_DELIMITER);
  int tokenCount=tokenizer.countTokens();
  String[] elements=new String[tokenCount];
  int i;
  for (i=0; i < tokenCount; i++) {
    elements[i]=tokenizer.nextToken().trim();
  }
  return elements;
}",0.9472527472527472
70757,"/** 
 * set default template preference
 */
public void setDefaultTemplatePreference(){
  String defaultDir=new String(UIUtil.getHomeDirectory());
  PreferenceFactory.getInstance().getPreferences(this).setDefault(TEMPLATE_PREFERENCE,defaultDir);
}","/** 
 * set default template preference
 */
public void setDefaultTemplatePreference(){
  String defaultDir=UIUtil.getHomeDirectory();
  PreferenceFactory.getInstance().getPreferences(this).setDefault(TEMPLATE_PREFERENCE,defaultDir);
}",0.975103734439834
70758,"/** 
 * Get the custom name preference of specified element name
 * @param defaultName The specified element name
 * @return String The custom name gotten
 */
public String getCustomName(String defaultName){
  int i;
  String[] defaultNameArray=getDefaultNamePreference();
  String[] customNameArray=getCustomNamePreference();
  if (defaultNameArray.length != customNameArray.length) {
    return null;
  }
  for (i=0; i < defaultNameArray.length; i++) {
    if (defaultNameArray[i].trim().equals(defaultName)) {
      if (customNameArray[i].equals(""String_Node_Str"")) {
        return null;
      }
      return new String(customNameArray[i]);
    }
  }
  return null;
}","/** 
 * Get the custom name preference of specified element name
 * @param defaultName The specified element name
 * @return String The custom name gotten
 */
public String getCustomName(String defaultName){
  int i;
  String[] defaultNameArray=getDefaultNamePreference();
  String[] customNameArray=getCustomNamePreference();
  if (defaultNameArray.length != customNameArray.length) {
    return null;
  }
  for (i=0; i < defaultNameArray.length; i++) {
    if (defaultNameArray[i].trim().equals(defaultName)) {
      if (customNameArray[i].equals(""String_Node_Str"")) {
        return null;
      }
      return customNameArray[i];
    }
  }
  return null;
}",0.9909774436090224
70759,"/** 
 * @see org.eclipse.jface.action.IAction#run()
 */
public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  diagramViewer.setProperty(DeferredGraphicalViewer.PROPERTY_MARGIN_VISIBILITY,new Boolean(!isChecked()));
}","/** 
 * @see org.eclipse.jface.action.IAction#run()
 */
public void run(){
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  diagramViewer.setProperty(DeferredGraphicalViewer.PROPERTY_MARGIN_VISIBILITY,Boolean.valueOf(!isChecked()));
}",0.9772727272727272
70760,"protected void okPressed(){
  try {
    String familyValue=getRawFontFamily();
    String sizeValue=getRawFontSize();
    int colorValue=DEUtil.getRGBInt(color.getRGB());
    int backColorValue=DEUtil.getRGBInt(backColor.getRGB());
    String italicValue=italic.getSelection() ? DesignChoiceConstants.FONT_STYLE_ITALIC : DesignChoiceConstants.FONT_STYLE_NORMAL;
    String weightValue=bold.getSelection() ? DesignChoiceConstants.FONT_WEIGHT_BOLD : DesignChoiceConstants.FONT_WEIGHT_NORMAL;
    String underlineValue=underline.getSelection() ? DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE : DesignChoiceConstants.TEXT_UNDERLINE_NONE;
    String lingthroughValue=linethrough.getSelection() ? DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH : DesignChoiceConstants.TEXT_LINE_THROUGH_NONE;
    if (handle == null) {
      HighlightRule rule=StructureFactory.createHighlightRule();
      rule.setProperty(HighlightRule.OPERATOR_MEMBER,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible == 3) {
        rule.setValue1(valueList);
        rule.setValue2(""String_Node_Str"");
      }
 else {
        if (expressionValue1.isVisible()) {
          rule.setProperty(MapRule.VALUE1_MEMBER,DEUtil.resolveNull(expressionValue1.getText()));
        }
        if (expressionValue2.isVisible()) {
          rule.setProperty(MapRule.VALUE2_MEMBER,DEUtil.resolveNull(expressionValue2.getText()));
        }
      }
      rule.setTestExpression(DEUtil.resolveNull(getExpression()));
      if (!stylesChooser.getText().equals(NONE_DISPLAY_TEXT)) {
        rule.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
      }
 else {
        if (color.getRGB() != null) {
          rule.setProperty(HighlightRule.COLOR_MEMBER,new Integer(colorValue));
        }
        if (backColor.getRGB() != null) {
          rule.setProperty(HighlightRule.BACKGROUND_COLOR_MEMBER,new Integer(backColorValue));
        }
        if (familyValue != null) {
          rule.setProperty(HighlightRule.FONT_FAMILY_MEMBER,familyValue);
        }
        if (sizeValue != null) {
          rule.setProperty(HighlightRule.FONT_SIZE_MEMBER,sizeValue);
        }
        if (isItalicChanged) {
          rule.setProperty(HighlightRule.FONT_STYLE_MEMBER,italicValue);
        }
        if (isBoldChanged) {
          rule.setProperty(HighlightRule.FONT_WEIGHT_MEMBER,weightValue);
        }
        if (isLinethroughChanged) {
          rule.setProperty(HighlightRule.TEXT_LINE_THROUGH_MEMBER,lingthroughValue);
        }
        if (isUnderlineChanged) {
          rule.setProperty(HighlightRule.TEXT_UNDERLINE_MEMBER,underlineValue);
        }
      }
      handle=provider.doAddItem(rule,handleCount);
    }
 else {
      handle.setTestExpression(DEUtil.resolveNull(getExpression()));
      handle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible != 3) {
        if (expressionValue1.isVisible()) {
          handle.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          handle.setValue1(NULL_STRING);
        }
        if (expressionValue2.isVisible()) {
          handle.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          handle.setValue2(NULL_STRING);
        }
      }
 else {
        handle.setValue1(valueList);
        handle.setValue2(""String_Node_Str"");
      }
      if (!stylesChooser.getText().equals(NONE_DISPLAY_TEXT)) {
        if (handle.getStyle() == null) {
          handle.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
        }
 else         if (!stylesChooser.getText().equals(handle.getStyle().getName())) {
          handle.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
        }
        removeLocalStyleProperties();
      }
 else {
        handle.setStyle(null);
        handle.getFontFamilyHandle().setStringValue(DEUtil.resolveNull(familyValue));
        handle.getFontSize().setStringValue(DEUtil.resolveNull(sizeValue));
        if (color.getRGB() != null) {
          handle.getColor().setRGB(colorValue);
        }
 else {
          handle.getColor().setValue(null);
        }
        if (backColor.getRGB() != null) {
          handle.getBackgroundColor().setRGB(backColorValue);
        }
 else {
          handle.getBackgroundColor().setValue(null);
        }
        if (isItalicChanged) {
          handle.setFontStyle(italicValue);
        }
        if (isBoldChanged) {
          handle.setFontWeight(weightValue);
        }
        if (isUnderlineChanged) {
          handle.setTextUnderline(underlineValue);
        }
        if (isLinethroughChanged) {
          handle.setTextLineThrough(lingthroughValue);
        }
      }
    }
  }
 catch (  Exception e) {
    WidgetUtil.processError(getShell(),e);
  }
  super.okPressed();
}","protected void okPressed(){
  try {
    String familyValue=getRawFontFamily();
    String sizeValue=getRawFontSize();
    int colorValue=DEUtil.getRGBInt(color.getRGB());
    int backColorValue=DEUtil.getRGBInt(backColor.getRGB());
    String italicValue=italic.getSelection() ? DesignChoiceConstants.FONT_STYLE_ITALIC : DesignChoiceConstants.FONT_STYLE_NORMAL;
    String weightValue=bold.getSelection() ? DesignChoiceConstants.FONT_WEIGHT_BOLD : DesignChoiceConstants.FONT_WEIGHT_NORMAL;
    String underlineValue=underline.getSelection() ? DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE : DesignChoiceConstants.TEXT_UNDERLINE_NONE;
    String lingthroughValue=linethrough.getSelection() ? DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH : DesignChoiceConstants.TEXT_LINE_THROUGH_NONE;
    if (handle == null) {
      HighlightRule rule=StructureFactory.createHighlightRule();
      rule.setProperty(HighlightRule.OPERATOR_MEMBER,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible == 3) {
        rule.setValue1(valueList);
        rule.setValue2(""String_Node_Str"");
      }
 else {
        if (expressionValue1.isVisible()) {
          rule.setProperty(MapRule.VALUE1_MEMBER,DEUtil.resolveNull(expressionValue1.getText()));
        }
        if (expressionValue2.isVisible()) {
          rule.setProperty(MapRule.VALUE2_MEMBER,DEUtil.resolveNull(expressionValue2.getText()));
        }
      }
      rule.setTestExpression(DEUtil.resolveNull(getExpression()));
      if (!stylesChooser.getText().equals(NONE_DISPLAY_TEXT)) {
        rule.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
      }
 else {
        if (color.getRGB() != null) {
          rule.setProperty(HighlightRule.COLOR_MEMBER,Integer.valueOf(colorValue));
        }
        if (backColor.getRGB() != null) {
          rule.setProperty(HighlightRule.BACKGROUND_COLOR_MEMBER,Integer.valueOf(backColorValue));
        }
        if (familyValue != null) {
          rule.setProperty(HighlightRule.FONT_FAMILY_MEMBER,familyValue);
        }
        if (sizeValue != null) {
          rule.setProperty(HighlightRule.FONT_SIZE_MEMBER,sizeValue);
        }
        if (isItalicChanged) {
          rule.setProperty(HighlightRule.FONT_STYLE_MEMBER,italicValue);
        }
        if (isBoldChanged) {
          rule.setProperty(HighlightRule.FONT_WEIGHT_MEMBER,weightValue);
        }
        if (isLinethroughChanged) {
          rule.setProperty(HighlightRule.TEXT_LINE_THROUGH_MEMBER,lingthroughValue);
        }
        if (isUnderlineChanged) {
          rule.setProperty(HighlightRule.TEXT_UNDERLINE_MEMBER,underlineValue);
        }
      }
      handle=provider.doAddItem(rule,handleCount);
    }
 else {
      handle.setTestExpression(DEUtil.resolveNull(getExpression()));
      handle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible != 3) {
        if (expressionValue1.isVisible()) {
          handle.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          handle.setValue1(NULL_STRING);
        }
        if (expressionValue2.isVisible()) {
          handle.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          handle.setValue2(NULL_STRING);
        }
      }
 else {
        handle.setValue1(valueList);
        handle.setValue2(""String_Node_Str"");
      }
      if (!stylesChooser.getText().equals(NONE_DISPLAY_TEXT)) {
        if (handle.getStyle() == null) {
          handle.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
        }
 else         if (!stylesChooser.getText().equals(handle.getStyle().getName())) {
          handle.setStyle((StyleHandle)styles.get(stylesChooser.getText()));
        }
        removeLocalStyleProperties();
      }
 else {
        handle.setStyle(null);
        handle.getFontFamilyHandle().setStringValue(DEUtil.resolveNull(familyValue));
        handle.getFontSize().setStringValue(DEUtil.resolveNull(sizeValue));
        if (color.getRGB() != null) {
          handle.getColor().setRGB(colorValue);
        }
 else {
          handle.getColor().setValue(null);
        }
        if (backColor.getRGB() != null) {
          handle.getBackgroundColor().setRGB(backColorValue);
        }
 else {
          handle.getBackgroundColor().setValue(null);
        }
        if (isItalicChanged) {
          handle.setFontStyle(italicValue);
        }
        if (isBoldChanged) {
          handle.setFontWeight(weightValue);
        }
        if (isUnderlineChanged) {
          handle.setTextUnderline(underlineValue);
        }
        if (isLinethroughChanged) {
          handle.setTextLineThrough(lingthroughValue);
        }
      }
    }
  }
 catch (  Exception e) {
    WidgetUtil.processError(getShell(),e);
  }
  super.okPressed();
}",0.9975114060555786
70761,"protected void okPressed(){
  try {
    validateValue(defaultValue);
  }
 catch (  BirtException e1) {
    ExceptionHandler.handle(e1);
    return;
  }
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    inputParameter.setParamType(DesignChoiceConstants.SCALAR_PARAM_TYPE_SIMPLE);
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
      if (allowMultiChoice.isVisible() && allowMultiChoice.getSelection()) {
        inputParameter.setParamType(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE);
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(new ArrayList());
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      if (displayTextChooser.getText().equals(LABEL_NULL)) {
        inputParameter.setLabelExpr(""String_Node_Str"");
      }
 else {
        inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
      }
      if (startPointTypeHelper != null) {
        if (startPointTypeHelper.getControl() != null && startPointTypeHelper.getControl().isVisible()) {
          startPointTypeHelper.update(false);
          inputParameter.setAutoSuggestThreshold((Integer)startPointTypeHelper.getProperty(STARTPOINT_VALUE));
        }
      }
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ISREQUIRED)) {
      inputParameter.setIsRequired(getProperty(CHECKBOX_ISREQUIRED));
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (distinct.isEnabled()) {
      inputParameter.setDistinct(!distinct.getSelection());
    }
 else {
      inputParameter.setDistinct(true);
    }
    if (sorttingArea != null && !sorttingArea.isDisposed() && sorttingArea.isVisible()) {
      if (sortKeyChooser.getText().equals(NONE_DISPLAY_TEXT)) {
        inputParameter.setFixedOrder(true);
        inputParameter.setSortBy(null);
        inputParameter.setSortDirection(null);
        inputParameter.setSortByColumn(null);
      }
 else {
        if (isStatic()) {
          inputParameter.setFixedOrder(false);
          if (sortKeyChooser.getText().equals(CHOICE_DISPLAY_TEXT)) {
            inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL);
          }
 else           if (sortKeyChooser.getText().equals(CHOICE_VALUE_COLUMN)) {
            inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_VALUE);
          }
          inputParameter.setSortByColumn(null);
        }
 else         if (dynamicRadio.getSelection()) {
          inputParameter.setSortBy(null);
          inputParameter.setFixedOrder(false);
          inputParameter.setSortByColumn(getExpression(sortKeyChooser.getText()));
        }
        if (sortDirectionChooser.getText().equals(CHOICE_ASCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
        }
 else         if (sortDirectionChooser.getText().equals(CHOICE_DESCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
        }
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText()) && !DesignChoiceConstants.PARAM_CONTROL_AUTO_SUGGEST.equals(getSelectedControlType())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}","protected void okPressed(){
  try {
    validateValue(defaultValue);
  }
 catch (  BirtException e1) {
    ExceptionHandler.handle(e1);
    return;
  }
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    inputParameter.setParamType(DesignChoiceConstants.SCALAR_PARAM_TYPE_SIMPLE);
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
      if (allowMultiChoice.isVisible() && allowMultiChoice.getSelection()) {
        inputParameter.setParamType(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE);
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(new ArrayList());
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      if (displayTextChooser.getText().equals(LABEL_NULL)) {
        inputParameter.setLabelExpr(""String_Node_Str"");
      }
 else {
        inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
      }
      if (startPointTypeHelper != null) {
        if (startPointTypeHelper.getControl() != null && startPointTypeHelper.getControl().isVisible()) {
          startPointTypeHelper.update(false);
          inputParameter.setAutoSuggestThreshold((Integer)startPointTypeHelper.getProperty(STARTPOINT_VALUE));
        }
      }
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ISREQUIRED)) {
      inputParameter.setIsRequired(getProperty(CHECKBOX_ISREQUIRED));
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (distinct.isEnabled()) {
      inputParameter.setDistinct(!distinct.getSelection());
    }
 else {
      inputParameter.setDistinct(true);
    }
    if (sorttingArea != null && !sorttingArea.isDisposed() && sorttingArea.isVisible()) {
      if (sortKeyChooser.getText().equals(NONE_DISPLAY_TEXT)) {
        inputParameter.setFixedOrder(true);
        inputParameter.setSortBy(null);
        inputParameter.setSortDirection(null);
        inputParameter.setSortByColumn(null);
      }
 else {
        if (isStatic()) {
          inputParameter.setFixedOrder(false);
          if (sortKeyChooser.getText().equals(CHOICE_DISPLAY_TEXT)) {
            inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL);
          }
 else           if (sortKeyChooser.getText().equals(CHOICE_VALUE_COLUMN)) {
            inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_VALUE);
          }
          inputParameter.setSortByColumn(null);
        }
 else         if (dynamicRadio.getSelection()) {
          inputParameter.setSortBy(null);
          inputParameter.setFixedOrder(false);
          inputParameter.setSortByColumn(getExpression(sortKeyChooser.getText()));
        }
        if (sortDirectionChooser.getText().equals(CHOICE_ASCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
        }
 else         if (sortDirectionChooser.getText().equals(CHOICE_DESCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
        }
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText()) && !DesignChoiceConstants.PARAM_CONTROL_AUTO_SUGGEST.equals(getSelectedControlType())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}",0.9993547346346184
70762,"protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFERENCE_BIRT_DATA_SET_EDITOR_ID);
  Composite mainComposite=new Composite(parent,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  data.verticalSpan=5;
  GridLayout layout=new GridLayout();
  mainComposite.setLayout(layout);
  Group previewPageGroup=new Group(mainComposite,SWT.NONE);
  previewPageGroup.setLayout(new GridLayout());
  previewPageGroup.setText(Messages.getString(""String_Node_Str""));
  previewPageGroup.setLayoutData(data);
  previewPageGroup.setEnabled(true);
  maxRowEditor=new IntegerFieldEditor(USER_MAXROW,""String_Node_Str"",previewPageGroup);
  Label lab2=maxRowEditor.getLabelControl(previewPageGroup);
  lab2.setText(Messages.getString(""String_Node_Str""));
  maxRowEditor.setPage(this);
  maxRowEditor.setTextLimit(Integer.toString(MAX_MAX_ROW).length());
  maxRowEditor.setErrorMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{new Integer(MAX_MAX_ROW)}));
  maxRowEditor.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  maxRowEditor.setValidRange(1,MAX_MAX_ROW);
  maxRowEditor.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(maxRowEditor.isValid());
    }
  }
);
  String defaultMaxRow=ReportPlugin.getDefault().getPluginPreferences().getString(USER_MAXROW);
  if (defaultMaxRow == null || defaultMaxRow.trim().length() <= 0) {
    defaultMaxRow=String.valueOf(DEFAULT_MAX_ROW);
  }
  maxRowEditor.setStringValue(defaultMaxRow);
  return mainComposite;
}","protected Control createContents(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFERENCE_BIRT_DATA_SET_EDITOR_ID);
  Composite mainComposite=new Composite(parent,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=2;
  data.verticalSpan=5;
  GridLayout layout=new GridLayout();
  mainComposite.setLayout(layout);
  Group previewPageGroup=new Group(mainComposite,SWT.NONE);
  previewPageGroup.setLayout(new GridLayout());
  previewPageGroup.setText(Messages.getString(""String_Node_Str""));
  previewPageGroup.setLayoutData(data);
  previewPageGroup.setEnabled(true);
  maxRowEditor=new IntegerFieldEditor(USER_MAXROW,""String_Node_Str"",previewPageGroup);
  Label lab2=maxRowEditor.getLabelControl(previewPageGroup);
  lab2.setText(Messages.getString(""String_Node_Str""));
  maxRowEditor.setPage(this);
  maxRowEditor.setTextLimit(Integer.toString(MAX_MAX_ROW).length());
  maxRowEditor.setErrorMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{Integer.valueOf(MAX_MAX_ROW)}));
  maxRowEditor.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
  maxRowEditor.setValidRange(1,MAX_MAX_ROW);
  maxRowEditor.setPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().equals(FieldEditor.IS_VALID))       setValid(maxRowEditor.isValid());
    }
  }
);
  String defaultMaxRow=ReportPlugin.getDefault().getPluginPreferences().getString(USER_MAXROW);
  if (defaultMaxRow == null || defaultMaxRow.trim().length() <= 0) {
    defaultMaxRow=String.valueOf(DEFAULT_MAX_ROW);
  }
  maxRowEditor.setStringValue(defaultMaxRow);
  return mainComposite;
}",0.9964747356051704
70763,"public void setValue(String name,boolean value){
  boolean oldValue=getBoolean(name);
  if (this.preferenceType == SPECIAL_TYPE && project != null) {
    Preferences preference=prefs.getReportPreference(project);
    if (preference != null) {
      if (preference.isDefault(name) || oldValue != value) {
        preference.setValue(name,value);
        firePreferenceChangeEvent(name,new Boolean(oldValue),new Boolean(value));
      }
      return;
    }
  }
  if (oldValue != value) {
    prefsStore.setValue(name,value);
    firePreferenceChangeEvent(name,new Boolean(oldValue),new Boolean(value));
  }
}","public void setValue(String name,boolean value){
  boolean oldValue=getBoolean(name);
  if (this.preferenceType == SPECIAL_TYPE && project != null) {
    Preferences preference=prefs.getReportPreference(project);
    if (preference != null) {
      if (preference.isDefault(name) || oldValue != value) {
        preference.setValue(name,value);
        firePreferenceChangeEvent(name,Boolean.valueOf(oldValue),Boolean.valueOf(value));
      }
      return;
    }
  }
  if (oldValue != value) {
    prefsStore.setValue(name,value);
    firePreferenceChangeEvent(name,Boolean.valueOf(oldValue),Boolean.valueOf(value));
  }
}",0.9609120521172638
70764,"public void dialogFieldChanged(DialogField field){
  enableProjectSpecificSettings(((SelectionButtonDialogField)field).isSelected());
}","public void dialogFieldChanged(DialogField field){
  if (field instanceof SelectionButtonDialogField)   enableProjectSpecificSettings(((SelectionButtonDialogField)field).isSelected());
}",0.8411214953271028
70765,"protected Label createDescriptionLabel(Composite parent){
  fParentComposite=parent;
  if (enableSetProjectSettings()) {
    if (isProjectPreferencePage()) {
      Composite composite=new Composite(parent,SWT.NONE);
      composite.setFont(parent.getFont());
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginWidth=0;
      layout.numColumns=2;
      composite.setLayout(layout);
      composite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
      IDialogFieldListener listener=new IDialogFieldListener(){
        public void dialogFieldChanged(        DialogField field){
          enableProjectSpecificSettings(((SelectionButtonDialogField)field).isSelected());
        }
      }
;
      fUseProjectSettings=new SelectionButtonDialogField(SWT.CHECK);
      fUseProjectSettings.setDialogFieldListener(listener);
      fUseProjectSettings.setLabelText(Messages.getString(""String_Node_Str""));
      fUseProjectSettings.doFillIntoGrid(composite,1);
      WidgetUtil.setHorizontalGrabbing(fUseProjectSettings.getSelectionButton(null));
      if (offerLink()) {
        fChangeWorkspaceSettings=createLink(composite,Messages.getString(""String_Node_Str""));
        fChangeWorkspaceSettings.setLayoutData(new GridData(SWT.END,SWT.CENTER,false,false));
      }
 else {
        WidgetUtil.setHorizontalSpan(fUseProjectSettings.getSelectionButton(null),2);
      }
      Label horizontalLine=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
      horizontalLine.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,false,2,1));
      horizontalLine.setFont(composite.getFont());
    }
 else     if (supportsProjectSpecificOptions() && offerLink()) {
      fChangeWorkspaceSettings=createLink(parent,Messages.getString(""String_Node_Str""));
      fChangeWorkspaceSettings.setLayoutData(new GridData(SWT.END,SWT.CENTER,true,false));
    }
  }
  return super.createDescriptionLabel(parent);
}","protected Label createDescriptionLabel(Composite parent){
  fParentComposite=parent;
  if (enableSetProjectSettings()) {
    if (isProjectPreferencePage()) {
      Composite composite=new Composite(parent,SWT.NONE);
      composite.setFont(parent.getFont());
      GridLayout layout=new GridLayout();
      layout.marginHeight=0;
      layout.marginWidth=0;
      layout.numColumns=2;
      composite.setLayout(layout);
      composite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));
      IDialogFieldListener listener=new IDialogFieldListener(){
        public void dialogFieldChanged(        DialogField field){
          if (field instanceof SelectionButtonDialogField)           enableProjectSpecificSettings(((SelectionButtonDialogField)field).isSelected());
        }
      }
;
      fUseProjectSettings=new SelectionButtonDialogField(SWT.CHECK);
      fUseProjectSettings.setDialogFieldListener(listener);
      fUseProjectSettings.setLabelText(Messages.getString(""String_Node_Str""));
      fUseProjectSettings.doFillIntoGrid(composite,1);
      WidgetUtil.setHorizontalGrabbing(fUseProjectSettings.getSelectionButton(null));
      if (offerLink()) {
        fChangeWorkspaceSettings=createLink(composite,Messages.getString(""String_Node_Str""));
        fChangeWorkspaceSettings.setLayoutData(new GridData(SWT.END,SWT.CENTER,false,false));
      }
 else {
        WidgetUtil.setHorizontalSpan(fUseProjectSettings.getSelectionButton(null),2);
      }
      Label horizontalLine=new Label(composite,SWT.SEPARATOR | SWT.HORIZONTAL);
      horizontalLine.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,false,2,1));
      horizontalLine.setFont(composite.getFont());
    }
 else     if (supportsProjectSpecificOptions() && offerLink()) {
      fChangeWorkspaceSettings=createLink(parent,Messages.getString(""String_Node_Str""));
      fChangeWorkspaceSettings.setLayoutData(new GridData(SWT.END,SWT.CENTER,true,false));
    }
  }
  return super.createDescriptionLabel(parent);
}",0.9850595087363888
70766,"private int getMaxStringWidth(){
  GC gc=new GC(shell);
  String[] items=list.getItems();
  ArrayList separatorIndexes=new ArrayList(5);
  int maxChars=0;
  int maxWidth=0;
  Point pt=null;
  for (int n=0; n < items.length; n++) {
    pt=gc.textExtent(items[n]);
    if (pt.x > maxWidth) {
      maxWidth=pt.x;
    }
    int len=items[n].length();
    if (len > maxChars) {
      maxChars=len;
    }
    if (items[n].equals(""String_Node_Str"")) {
      separatorIndexes.add(new Integer(n));
    }
  }
  gc.dispose();
  String separator=getSeparator(maxChars);
  Iterator iter=separatorIndexes.iterator();
  while (iter.hasNext()) {
    list.setItem(((Integer)iter.next()).intValue(),separator);
  }
  return maxWidth + 5;
}","private int getMaxStringWidth(){
  GC gc=new GC(shell);
  String[] items=list.getItems();
  ArrayList separatorIndexes=new ArrayList(5);
  int maxChars=0;
  int maxWidth=0;
  Point pt=null;
  for (int n=0; n < items.length; n++) {
    pt=gc.textExtent(items[n]);
    if (pt.x > maxWidth) {
      maxWidth=pt.x;
    }
    int len=items[n].length();
    if (len > maxChars) {
      maxChars=len;
    }
    if (items[n].equals(""String_Node_Str"")) {
      separatorIndexes.add(Integer.valueOf(n));
    }
  }
  gc.dispose();
  String separator=getSeparator(maxChars);
  Iterator iter=separatorIndexes.iterator();
  while (iter.hasNext()) {
    list.setItem(((Integer)iter.next()).intValue(),separator);
  }
  return maxWidth + 5;
}",0.6657458563535912
70767,"/** 
 * @throws IOException
 */
public void outputCacheData() throws IOException {
  writer.startSheet(engine.getCoordinates());
  Iterator<RowData> it=engine.getIterator();
  while (it.hasNext()) {
    outputRowData(it.next());
  }
  writer.endSheet();
}","/** 
 * @throws IOException
 */
public void outputCacheData() throws IOException {
  writer.startSheet(engine.getCoordinates(),pageHeader,pageFooter);
  Iterator<RowData> it=engine.getIterator();
  while (it.hasNext()) {
    outputRowData(it.next());
  }
  writer.endSheet(orientation);
}",0.9392265193370166
70768,"protected void createWriter(){
  writer=new ExcelWriter(out,context,isRTLSheet,pageHeader,pageFooter,orientation);
}","protected void createWriter(){
  writer=new ExcelWriter(out,context,isRTLSheet);
}",0.8282828282828283
70769,"public void startSheet(int[] coordinates) throws IOException {
  if (writer == null) {
    initializeWriterAsTempWriter();
  }
  writer.startSheet(coordinates);
  sheetIndex++;
}","public void startSheet(int[] coordinates,String pageHeader,String pageFooter) throws IOException {
  if (writer == null) {
    initializeWriterAsTempWriter();
  }
  writer.startSheet(coordinates,pageHeader,pageFooter);
  sheetIndex++;
}",0.8599033816425121
70770,"/** 
 * @param out
 * @param context
 * @param isRtlSheet
 * @param pageHeader
 * @param pageFooter
 * @param orientation
 */
public ExcelWriter(OutputStream out,ExcelContext context,boolean isRtlSheet,String pageHeader,String pageFooter,String orientation){
  this.out=out;
  this.context=context;
  this.isRTLSheet=isRtlSheet;
  this.pageHeader=pageHeader;
  this.pageFooter=pageFooter;
  this.orientation=orientation;
}","/** 
 * @param out
 * @param context
 * @param isRtlSheet
 * @param pageHeader
 * @param pageFooter
 * @param orientation
 */
public ExcelWriter(OutputStream out,ExcelContext context,boolean isRtlSheet){
  this.out=out;
  this.context=context;
  this.isRTLSheet=isRtlSheet;
}",0.7890961262553802
70771,"public void start(IReportContent report,Map<StyleEntry,Integer> styles,HashMap<String,BookmarkDef> bookmarkList) throws IOException {
  writer=new ExcelXmlWriter(out,context,isRTLSheet,pageHeader,pageFooter,orientation);
  writer.setSheetIndex(sheetIndex);
  writer.start(report,styles,bookmarkList);
  copyOutputData();
}","public void start(IReportContent report,Map<StyleEntry,Integer> styles,HashMap<String,BookmarkDef> bookmarkList) throws IOException {
  writer=new ExcelXmlWriter(out,context,isRTLSheet);
  writer.setSheetIndex(sheetIndex);
  writer.start(report,styles,bookmarkList);
  copyOutputData();
}",0.8327868852459016
70772,"/** 
 * @throws FileNotFoundException
 */
private void initializeWriterAsTempWriter() throws FileNotFoundException {
  tempFilePath=context.getTempFileDir() + ""String_Node_Str"" + Thread.currentThread().getId();
  FileOutputStream out=new FileOutputStream(tempFilePath);
  tempWriter=new ExcelXmlWriter(out,context,isRTLSheet,pageHeader,pageFooter,orientation);
  writer=tempWriter;
}","/** 
 * @throws FileNotFoundException
 */
private void initializeWriterAsTempWriter() throws FileNotFoundException {
  tempFilePath=context.getTempFileDir() + ""String_Node_Str"" + Thread.currentThread().getId();
  FileOutputStream out=new FileOutputStream(tempFilePath);
  tempWriter=new ExcelXmlWriter(out,context,isRTLSheet);
  writer=tempWriter;
}",0.953551912568306
70773,"public void endSheet(){
  writer.endSheet();
}","public void endSheet(String oritentation){
  writer.endSheet(oritentation);
}",0.7479674796747967
70774,"public void startSheet(int[] coordinates){
  startSheet(sheetIndex);
  ouputColumns(coordinates);
  sheetIndex+=1;
}","public void startSheet(int[] coordinates,String pageHeader,String pageFooter){
  this.pageHeader=pageHeader;
  this.pageFooter=pageFooter;
  startSheet(sheetIndex);
  ouputColumns(coordinates);
  sheetIndex+=1;
}",0.7073170731707317
70775,"public void endSheet(){
  endTable();
  declareWorkSheetOptions(orientation,pageHeader,pageFooter);
  closeSheet();
}","public void endSheet(String orientaion){
  endTable();
  declareWorkSheetOptions(orientation,pageHeader,pageFooter);
  closeSheet();
}",0.9322709163346612
70776,public void startSheet(int[] coordinates) throws IOException ;,"public void startSheet(int[] coordinates,String pageHeader,String pageFooter) throws IOException ;",0.775
70777,public void endSheet();,public void endSheet(String orientation);,0.71875
70778,"boolean finalLaunchCheck(final ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {
  paramValues=new HashMap();
  LauncherEngineConfig engineConfig=new LauncherEngineConfig();
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  final IReportEngine engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  final String fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
  final int taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
  Display display=DebugUI.getStandardDisplay();
  if (display.getThread().equals(Thread.currentThread())) {
    return getParameterValues(getInputParameters(fileName,taskType,engine),paramValues);
  }
  final Object[] result=new Object[]{Boolean.FALSE};
  Runnable r=new Runnable(){
    public void run(){
      result[0]=new Boolean(getParameterValues(getInputParameters(fileName,taskType,engine),paramValues));
    }
  }
;
  DebugUI.getStandardDisplay().syncExec(r);
  return ((Boolean)result[0]).booleanValue();
}","boolean finalLaunchCheck(final ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {
  paramValues=new HashMap();
  LauncherEngineConfig engineConfig=new LauncherEngineConfig();
  IReportEngineFactory factory=(IReportEngineFactory)Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
  final IReportEngine engine=factory.createReportEngine(engineConfig);
  engine.changeLogLevel(Level.WARNING);
  final String fileName=covertVariables(configuration.getAttribute(ATTR_REPORT_FILE_NAME,""String_Node_Str""));
  final int taskType=configuration.getAttribute(ATTR_TASK_TYPE,DEFAULT_TASK_TYPE);
  Display display=DebugUI.getStandardDisplay();
  if (display.getThread().equals(Thread.currentThread())) {
    return getParameterValues(getInputParameters(fileName,taskType,engine),paramValues);
  }
  final Object[] result=new Object[]{Boolean.FALSE};
  Runnable r=new Runnable(){
    public void run(){
      result[0]=Boolean.valueOf(getParameterValues(getInputParameters(fileName,taskType,engine),paramValues));
    }
  }
;
  DebugUI.getStandardDisplay().syncExec(r);
  return ((Boolean)result[0]).booleanValue();
}",0.9949109414758268
70779,"private void saveFile(final ModuleHandle moduleHandle,final File file,final IPath oldReportPath,IProgressMonitor monitor){
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor pm) throws CoreException {
            try {
              execute(pm);
            }
 catch (            CoreException e) {
              throw e;
            }
catch (            IOException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
;
        ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      OperationCanceledException e) {
        throw new InterruptedException(e.getMessage());
      }
    }
    public void execute(    final IProgressMonitor monitor) throws CoreException, IOException {
      if (file.exists() || file.createNewFile()) {
        FileOutputStream out=new FileOutputStream(file);
        moduleHandle.serialize(out);
        out.close();
        if (oldReportPath != null) {
          copyReportConfigFile(new Path(file.getAbsolutePath()),oldReportPath);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(UIUtil.getDefaultShell()).run(false,true,op);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","private void saveFile(final ModuleHandle moduleHandle,final File file,final IPath oldReportPath,IProgressMonitor monitor){
  if (file.exists() && !file.canWrite()) {
    MessageDialog.openError(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new Object[]{file.getAbsolutePath()}));
    return;
  }
  IRunnableWithProgress op=new IRunnableWithProgress(){
    public synchronized final void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      try {
        IWorkspaceRunnable workspaceRunnable=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor pm) throws CoreException {
            try {
              execute(pm);
            }
 catch (            CoreException e) {
              throw e;
            }
catch (            IOException e) {
              ExceptionHandler.handle(e);
            }
          }
        }
;
        ResourcesPlugin.getWorkspace().run(workspaceRunnable,ResourcesPlugin.getWorkspace().getRoot(),IResource.NONE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
catch (      OperationCanceledException e) {
        throw new InterruptedException(e.getMessage());
      }
    }
    public void execute(    final IProgressMonitor monitor) throws CoreException, IOException {
      if (file.exists() || file.createNewFile()) {
        FileOutputStream out=new FileOutputStream(file);
        moduleHandle.serialize(out);
        out.close();
        if (oldReportPath != null) {
          copyReportConfigFile(new Path(file.getAbsolutePath()),oldReportPath);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(UIUtil.getDefaultShell()).run(false,true,op);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.9319884726224784
70780,"private void synchronize(){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  }
  rowContainer.setRowIndex(maxRowIndex);
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    if (rowspan > 0) {
      SheetData upstair=cache.getColumnLastData(currentColumnIndex);
      if (upstair != null && canSpan(upstair,rowContainer)) {
        SheetData predata=upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        SheetData realData=getRealData(predata);
        BlankData blankData=new BlankData(realData);
        if (!isInContainer(predata,rowContainer)) {
          blankData.decreasRowSpanInDesign();
        }
        int rowIndex=predata.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(predata);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
  }
}","private void synchronize(){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  }
  if (maxRowIndex == rowContainer.getRowIndex()) {
    maxRowIndex++;
  }
  rowContainer.setRowIndex(maxRowIndex);
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    if (rowspan > 0) {
      SheetData upstair=cache.getColumnLastData(currentColumnIndex);
      if (upstair != null && canSpan(upstair,rowContainer)) {
        SheetData predata=upstair;
        int rs=predata.getRowSpan() + rowspan;
        predata.setRowSpan(rs);
        SheetData realData=getRealData(predata);
        BlankData blankData=new BlankData(realData);
        if (!isInContainer(predata,rowContainer)) {
          blankData.decreasRowSpanInDesign();
        }
        int rowIndex=predata.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(predata);
          blank.setRowIndex(rowIndex + p);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
  }
}",0.9191011235955056
70781,"protected void drawImageShapeType(int imageId){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"" + imageId);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","protected void drawImageShapeType(int imageId){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"" + imageId);
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.9897757847533633
70782,"/** 
 * Swap two consecutive entries
 * @param iIndex1
 * @param iIndex2
 */
private final void swap(int iIndex1,int iIndex2){
  final Fill o1=elPaletteEntries1.get(iIndex1);
  final Fill o2=elPaletteEntries1.get(iIndex2);
  if (iIndex1 < iIndex2) {
    elPaletteEntries1.remove(iIndex2);
    elPaletteEntries1.add(iIndex1,o2);
    elPaletteEntries1.remove(iIndex2);
    elPaletteEntries1.add(iIndex2,o1);
  }
 else {
    elPaletteEntries1.remove(iIndex1);
    elPaletteEntries1.add(iIndex2,o1);
    elPaletteEntries1.remove(iIndex1);
    elPaletteEntries1.add(iIndex1,o2);
  }
  if (iSelectedIndex == iIndex1) {
    iSelectedIndex=iIndex2;
  }
 else   if (iSelectedIndex == iIndex2) {
    iSelectedIndex=iIndex1;
  }
  if (vSeriesDefns != null) {
    int index1=iIndex1;
    int index2=iIndex2;
    if (isMultiAxes()) {
      int min=Math.min(index1,index2);
      int max=Math.max(index1,index2);
      if (vSeriesDefns.length - 1 < min) {
      }
 else       if (min <= vSeriesDefns.length - 1 && vSeriesDefns.length - 1 < max) {
        vSeriesDefns[min].getSeriesPalette().getEntries().set(0,ChartUtil.eCopy(elPaletteEntries1.get(min)));
      }
 else       if (vSeriesDefns.length - 1 >= max) {
        vSeriesDefns[min].getSeriesPalette().getEntries().set(0,ChartUtil.eCopy(elPaletteEntries1.get(min)));
        vSeriesDefns[max].getSeriesPalette().getEntries().set(0,ChartUtil.eCopy(elPaletteEntries1.get(max)));
      }
    }
 else {
      for (int i=0; i < vSeriesDefns.length; i++) {
        int size=vSeriesDefns[i].getSeriesPalette().getEntries().size();
        if ((iIndex1 - i) >= 0) {
          index1=iIndex1 - i;
        }
 else {
          index1=size - i + iIndex1;
        }
        if ((iIndex2 - i) >= 0) {
          index2=iIndex2 - i;
        }
 else {
          index2=size - i + iIndex2;
        }
        EList<Fill> el=vSeriesDefns[i].getSeriesPalette().getEntries();
        final Fill o3=el.get(index1);
        final Fill o4=el.get(index2);
        if (index1 < index2) {
          el.remove(index2);
          el.remove(index1);
          el.add(index1,o4);
          el.add(index2,o3);
        }
 else {
          el.remove(index1);
          el.remove(index2);
          el.add(index2,o3);
          el.add(index1,o4);
        }
      }
    }
  }
  scrollToView(iSelectedIndex);
  coPaletteEntries.redraw();
}","/** 
 * Swap two consecutive entries
 * @param iIndex1
 * @param iIndex2
 */
private final void swap(int iIndex1,int iIndex2){
  final Fill o1=elPaletteEntries1.get(iIndex1);
  final Fill o2=elPaletteEntries1.get(iIndex2);
  if (iIndex1 < iIndex2) {
    elPaletteEntries1.remove(iIndex2);
    elPaletteEntries1.add(iIndex1,o2);
    elPaletteEntries1.remove(iIndex2);
    elPaletteEntries1.add(iIndex2,o1);
  }
 else {
    elPaletteEntries1.remove(iIndex1);
    elPaletteEntries1.add(iIndex2,o1);
    elPaletteEntries1.remove(iIndex1);
    elPaletteEntries1.add(iIndex1,o2);
  }
  if (iSelectedIndex == iIndex1) {
    iSelectedIndex=iIndex2;
  }
 else   if (iSelectedIndex == iIndex2) {
    iSelectedIndex=iIndex1;
  }
  if (vSeriesDefns != null) {
    int index1=iIndex1;
    int index2=iIndex2;
    if (isMultiAxes() && wizardContext.getModel().getLegend().getItemType().getValue() == LegendItemType.SERIES) {
      int min=Math.min(index1,index2);
      int max=Math.max(index1,index2);
      if (vSeriesDefns.length - 1 < min) {
      }
 else       if (min <= vSeriesDefns.length - 1 && vSeriesDefns.length - 1 < max) {
        vSeriesDefns[min].getSeriesPalette().getEntries().set(0,ChartUtil.eCopy(elPaletteEntries1.get(min)));
      }
 else       if (vSeriesDefns.length - 1 >= max) {
        vSeriesDefns[min].getSeriesPalette().getEntries().set(0,ChartUtil.eCopy(elPaletteEntries1.get(min)));
        vSeriesDefns[max].getSeriesPalette().getEntries().set(0,ChartUtil.eCopy(elPaletteEntries1.get(max)));
      }
    }
 else {
      for (int i=0; i < vSeriesDefns.length; i++) {
        int size=vSeriesDefns[i].getSeriesPalette().getEntries().size();
        if ((iIndex1 - i) >= 0) {
          index1=iIndex1 - i;
        }
 else {
          index1=size - i + iIndex1;
        }
        if ((iIndex2 - i) >= 0) {
          index2=iIndex2 - i;
        }
 else {
          index2=size - i + iIndex2;
        }
        EList<Fill> el=vSeriesDefns[i].getSeriesPalette().getEntries();
        final Fill o3=el.get(index1);
        final Fill o4=el.get(index2);
        if (index1 < index2) {
          el.remove(index2);
          el.remove(index1);
          el.add(index1,o4);
          el.add(index2,o3);
        }
 else {
          el.remove(index1);
          el.remove(index2);
          el.add(index2,o3);
          el.add(index1,o4);
        }
      }
    }
  }
  scrollToView(iSelectedIndex);
  coPaletteEntries.redraw();
}",0.9811715481171548
70783,"public Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_PALETTE);
  Composite cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.marginHeight=7;
    glContent.marginWidth=7;
    cmpContent.setLayout(glContent);
  }
  slPalette=new StackLayout();
  grpPalette=new Group(cmpContent,SWT.NONE);
  GridData gdGRPPalette=new GridData(GridData.FILL_BOTH);
  gdGRPPalette.heightHint=300;
  grpPalette.setLayoutData(gdGRPPalette);
  grpPalette.setLayout(slPalette);
  grpPalette.setText(Messages.getString(""String_Node_Str""));
  cmpPE=new PaletteEditorComposite(grpPalette,getContext(),cSeriesDefn.getSeriesPalette(),vSeriesDefns,iFillChooserStyle);
  cmpMPE=new Composite(grpPalette,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.marginLeft=0;
    gl.marginRight=0;
    cmpMPE.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpMPE.setLayout(gl);
  }
  tf=new TabFolder(cmpMPE,SWT.NONE);
{
    tf.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  if (isGroupedSeries && isColoredByValue()) {
    for (int i=0; i < vSeriesDefns.length; i++) {
      TabItem ti=new TabItem(tf,SWT.NONE);
      ti.setText(""String_Node_Str"" + (i + 1));
      ti.setControl(new PaletteEditorComposite(tf,getContext(),vSeriesDefns[i].getSeriesPalette(),null,iFillChooserStyle));
    }
    tf.setSelection(0);
    slPalette.topControl=cmpMPE;
  }
 else {
    if (isMultiAxes()) {
      for (int i=0; i < ChartUIUtil.getOrthogonalAxisNumber(context.getModel()); i++) {
        SeriesDefinition[] seriesDefns=ChartUIUtil.getOrthogonalSeriesDefinitions(context.getModel(),i).toArray(new SeriesDefinition[]{});
        TabItem ti=new TabItem(tf,SWT.NONE);
        ti.setText(""String_Node_Str"" + (i + 1));
        ti.setControl(new PaletteEditorComposite(tf,getContext(),seriesDefns[0].getSeriesPalette(),seriesDefns,iFillChooserStyle));
      }
      tf.setSelection(0);
      slPalette.topControl=cmpMPE;
    }
 else {
      slPalette.topControl=cmpPE;
    }
  }
  return cmpContent;
}","public Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_PALETTE);
  Composite cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.marginHeight=7;
    glContent.marginWidth=7;
    cmpContent.setLayout(glContent);
  }
  slPalette=new StackLayout();
  grpPalette=new Group(cmpContent,SWT.NONE);
  GridData gdGRPPalette=new GridData(GridData.FILL_BOTH);
  gdGRPPalette.heightHint=300;
  grpPalette.setLayoutData(gdGRPPalette);
  grpPalette.setLayout(slPalette);
  grpPalette.setText(Messages.getString(""String_Node_Str""));
  cmpPE=new PaletteEditorComposite(grpPalette,getContext(),cSeriesDefn.getSeriesPalette(),vSeriesDefns,iFillChooserStyle);
  cmpMPE=new Composite(grpPalette,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.marginLeft=0;
    gl.marginRight=0;
    cmpMPE.setLayoutData(new GridData(GridData.FILL_BOTH));
    cmpMPE.setLayout(gl);
  }
  tf=new TabFolder(cmpMPE,SWT.NONE);
{
    tf.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  if (isGroupedSeries && isColoredByValue()) {
    for (int i=0; i < vSeriesDefns.length; i++) {
      TabItem ti=new TabItem(tf,SWT.NONE);
      ti.setText(""String_Node_Str"" + (i + 1));
      ti.setControl(new PaletteEditorComposite(tf,getContext(),vSeriesDefns[i].getSeriesPalette(),null,iFillChooserStyle));
    }
    tf.setSelection(0);
    slPalette.topControl=cmpMPE;
  }
 else {
    if (isMultiAxes() && isColoredByValue()) {
      for (int i=0; i < ChartUIUtil.getOrthogonalAxisNumber(context.getModel()); i++) {
        SeriesDefinition[] seriesDefns=ChartUIUtil.getOrthogonalSeriesDefinitions(context.getModel(),i).toArray(new SeriesDefinition[]{});
        TabItem ti=new TabItem(tf,SWT.NONE);
        ti.setText(""String_Node_Str"" + (i + 1));
        ti.setControl(new PaletteEditorComposite(tf,getContext(),seriesDefns[0].getSeriesPalette(),seriesDefns,iFillChooserStyle));
      }
      tf.setSelection(0);
      slPalette.topControl=cmpMPE;
    }
 else {
      slPalette.topControl=cmpPE;
    }
  }
  return cmpContent;
}",0.9947292764734068
70784,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList Collection
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  if (this.displayTexts == null)   this.displayTexts=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  File configFile=new File(reportConfigName);
  if (!configFile.exists() || !configFile.isFile()) {
    return;
  }
  SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=prepareConfigVarName(configVar.getName());
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null)           continue;
          String tempName=varName;
          String paramName=null;
          if (varName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL)) {
            tempName=(String)varValue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(varName)) != null) {
            tempName=displayTextParam;
          }
          paramName=getParameterName(tempName,parameterList);
          ParameterDefinition parameter=BirtUtility.findParameterDefinition(parameterList,paramName);
          if (parameter != null) {
            String typeVarName=tempName + ""String_Node_Str"" + IBirtConstants.PROP_TYPE+ ""String_Node_Str"";
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType))             continue;
            String exprVarName=tempName + ""String_Node_Str"" + IBirtConstants.PROP_EXPR+ ""String_Node_Str"";
            ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
            String cachedExpr=null;
            if (exprVar != null)             cachedExpr=exprVar.getValue();
            if (cachedExpr == null)             cachedExpr=""String_Node_Str"";
            String expr=parameter.getValueExpr();
            if (expr == null)             expr=""String_Node_Str"";
            if (!cachedExpr.equals(expr))             continue;
            List values=null;
            if (parameter.isMultiValue()) {
              values=(List)this.configMap.get(paramName);
              if (values == null) {
                values=new ArrayList();
                this.configMap.put(paramName,values);
              }
            }
            if (varName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL)) {
              if (parameter.isMultiValue())               values.add(null);
 else               this.configMap.put(paramName,null);
            }
 else             if ((displayTextParam=ParameterAccessor.isDisplayText(varName)) != null) {
              this.displayTexts.put(paramName,varValue);
            }
 else {
              Object varObj=null;
              try {
                varObj=DataUtil.convert(varValue,parameter.getDataType());
              }
 catch (              Exception e) {
                varObj=varValue;
              }
              if (parameter.isMultiValue())               values.add(varObj);
 else               this.configMap.put(paramName,varObj);
            }
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList Collection
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  if (this.displayTexts == null)   this.displayTexts=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  File configFile=new File(reportConfigName);
  if (!configFile.exists() || !configFile.isFile()) {
    return;
  }
  SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=prepareConfigVarName(configVar.getName());
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null)           continue;
          String tempName=varName;
          String paramName=null;
          if (varName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL)) {
            tempName=(String)varValue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(varName)) != null) {
            tempName=displayTextParam;
          }
          paramName=getParameterName(tempName,parameterList);
          ParameterDefinition parameter=BirtUtility.findParameterDefinition(parameterList,paramName);
          if (parameter != null) {
            String typeVarName=tempName + ""String_Node_Str"" + IBirtConstants.PROP_TYPE+ ""String_Node_Str"";
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=ParameterDataTypeConverter.convertDataType(parameter.getDataType());
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType))             continue;
            String exprVarName=tempName + ""String_Node_Str"" + IBirtConstants.PROP_EXPR+ ""String_Node_Str"";
            ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
            String cachedExpr=null;
            if (exprVar != null)             cachedExpr=exprVar.getValue();
            if (cachedExpr == null)             cachedExpr=""String_Node_Str"";
            String expr=parameter.getValueExpr();
            if (expr == null)             expr=""String_Node_Str"";
            if (!cachedExpr.equals(expr))             continue;
            List values=null;
            if (parameter.isMultiValue()) {
              values=(List)this.configMap.get(paramName);
              if (values == null) {
                values=new ArrayList();
                this.configMap.put(paramName,values);
              }
            }
            if (varName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL)) {
              if (parameter.isMultiValue())               values.add(null);
 else               this.configMap.put(paramName,null);
            }
 else             if ((displayTextParam=ParameterAccessor.isDisplayText(varName)) != null) {
              this.displayTexts.put(paramName,varValue);
            }
 else {
              Object varObj=null;
              try {
                varObj=DataUtil.convert(varValue,parameter.getDataType());
              }
 catch (              Exception e) {
                varObj=varValue;
              }
              if (parameter.isMultiValue())               values.add(varObj);
 else               this.configMap.put(paramName,varObj);
            }
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}",0.9997493106041614
70785,"/** 
 * get parsed parameters with default value.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterDefinition parameter=(ParameterDefinition)iter.next();
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramObj=this.parametersAsString.get(paramName);
    if (paramObj != null) {
      String format=ParameterAccessor.getFormat(request,paramName);
      if (format == null || format.length() <= 0) {
        format=parameter.getPattern();
      }
      String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
      boolean isLocale=this.locParams.contains(paramName);
      List paramList=null;
      if (paramObj instanceof List) {
        paramList=(List)paramObj;
      }
 else {
        paramList=new ArrayList();
        paramList.add(paramObj);
      }
      for (int i=0; i < paramList.size(); i++) {
        try {
          Object paramValueObj=DataUtil.validate(paramName,dataType,format,(String)paramList.get(i),locale,timeZone,isLocale);
          paramList.set(i,paramValueObj);
        }
 catch (        ViewerValidationException e) {
          if (IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
            this.exception=e;
            break;
          }
          paramList.set(i,paramList.get(i));
        }
      }
      if (paramObj instanceof List) {
        List list=(List)paramObj;
        if (list.size() == 0 || (list.size() == 1 && list.get(0) == null))         params.put(paramName,null);
 else         params.put(paramName,paramList.toArray());
      }
 else {
        params.put(paramName,paramList.get(0));
      }
    }
 else {
      Object paramValueObj=null;
      if (!this.parametersAsString.containsKey(paramName)) {
        paramValueObj=this.defaultValues.get(paramName);
      }
      if (parameter.isMultiValue()) {
        if (paramValueObj == null)         params.put(paramName,null);
 else         params.put(paramName,new Object[]{paramValueObj});
      }
 else {
        params.put(paramName,paramValueObj);
      }
    }
  }
  return params;
}","/** 
 * get parsed parameters with default value.
 * @param design IViewerReportDesignHandle
 * @param parameterList Collection
 * @param request HttpServletRequest
 * @param options InputOptions
 * @return Map
 */
protected Map getParsedParameters(IViewerReportDesignHandle design,Collection parameterList,HttpServletRequest request,InputOptions options) throws ReportServiceException {
  Map params=new HashMap();
  if (parameterList == null || this.parametersAsString == null)   return params;
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterDefinition parameter=(ParameterDefinition)iter.next();
    if (parameter == null)     continue;
    String paramName=parameter.getName();
    Object paramObj=this.parametersAsString.get(paramName);
    if (paramObj != null) {
      String format=ParameterAccessor.getFormat(request,paramName);
      if (format == null || format.length() <= 0) {
        format=parameter.getPattern();
      }
      String dataType=ParameterDataTypeConverter.convertDataType(parameter.getDataType());
      boolean isLocale=this.locParams.contains(paramName);
      List paramList=null;
      if (paramObj instanceof List) {
        paramList=(List)paramObj;
      }
 else {
        paramList=new ArrayList();
        paramList.add(paramObj);
      }
      for (int i=0; i < paramList.size(); i++) {
        try {
          Object paramValueObj=DataUtil.validate(paramName,dataType,format,(String)paramList.get(i),locale,timeZone,isLocale);
          paramList.set(i,paramValueObj);
        }
 catch (        ViewerValidationException e) {
          if (IBirtConstants.SERVLET_PATH_PREVIEW.equalsIgnoreCase(request.getServletPath())) {
            this.exception=e;
            break;
          }
          paramList.set(i,paramList.get(i));
        }
      }
      if (paramObj instanceof List) {
        List list=(List)paramObj;
        if (list.size() == 0 || (list.size() == 1 && list.get(0) == null))         params.put(paramName,null);
 else         params.put(paramName,paramList.toArray());
      }
 else {
        params.put(paramName,paramList.get(0));
      }
    }
 else {
      Object paramValueObj=null;
      if (!this.parametersAsString.containsKey(paramName)) {
        paramValueObj=this.defaultValues.get(paramName);
      }
      if (parameter.isMultiValue()) {
        if (paramValueObj == null)         params.put(paramName,null);
 else         params.put(paramName,new Object[]{paramValueObj});
      }
 else {
        params.put(paramName,paramValueObj);
      }
    }
  }
  return params;
}",0.999611801242236
70786,"/** 
 * Paser returned report ids.
 * @param activeIds
 * @return
 * @throws RemoteException
 */
protected ReportId[] parseReportId(ArrayList activeIds) throws RemoteException {
  if (activeIds == null || activeIds.size() <= 0) {
    return null;
  }
  java.util.Vector ids=new java.util.Vector();
  for (int i=0; i < activeIds.size(); i++) {
    String id=(String)activeIds.get(i);
    int firstComma=id.indexOf(',');
    if (id == null || firstComma == -1) {
      AxisFault fault=new AxisFault();
      fault.setFaultCode(new QName(""String_Node_Str""));
      fault.setFaultString(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_ID_FORMAT,new String[]{id}));
      throw fault;
    }
    int secondComma=id.indexOf(',',firstComma + 1);
    if (secondComma == -1) {
      secondComma=id.length();
    }
    String type=id.substring(firstComma + 1,secondComma);
    if (ReportIdType._Document.equalsIgnoreCase(type) || ReportIdType._Table.equalsIgnoreCase(type) || ReportIdType._Chart.equalsIgnoreCase(type)|| ReportIdType._Extended.equalsIgnoreCase(type)|| ReportIdType._Label.equalsIgnoreCase(type)|| ReportIdType._Group.equalsIgnoreCase(type)|| ""String_Node_Str"".equalsIgnoreCase(type)) {
      ReportId reportId=new ReportId();
      reportId.setId(id.substring(0,id.indexOf(',')));
      if (ReportIdType._Document.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Document);
      }
 else       if (ReportIdType._Table.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Table);
      }
 else       if (ReportIdType._Chart.equalsIgnoreCase(type) || ReportIdType._Extended.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Chart);
      }
 else       if (ReportIdType._Label.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Label);
      }
 else       if (ReportIdType._Group.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Group);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.ColumnInfo);
      }
      try {
        reportId.setRptElementId(Long.valueOf(Long.parseLong(id.substring(secondComma + 1))));
      }
 catch (      Exception e) {
        reportId.setRptElementId(null);
      }
      ids.add(reportId);
    }
  }
  ReportId[] reportIds=new ReportId[ids.size()];
  for (int i=0; i < ids.size(); i++) {
    reportIds[i]=(ReportId)ids.get(i);
  }
  return reportIds;
}","/** 
 * Paser returned report ids.
 * @param activeIds
 * @return
 * @throws RemoteException
 */
protected ReportId[] parseReportId(ArrayList activeIds) throws RemoteException {
  if (activeIds == null || activeIds.size() <= 0) {
    return null;
  }
  java.util.Vector ids=new java.util.Vector();
  for (int i=0; i < activeIds.size(); i++) {
    String id=(String)activeIds.get(i);
    int firstComma=id.indexOf(',');
    if (firstComma == -1) {
      AxisFault fault=new AxisFault();
      fault.setFaultCode(new QName(""String_Node_Str""));
      fault.setFaultString(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_ID_FORMAT,new String[]{id}));
      throw fault;
    }
    int secondComma=id.indexOf(',',firstComma + 1);
    if (secondComma == -1) {
      secondComma=id.length();
    }
    String type=id.substring(firstComma + 1,secondComma);
    if (ReportIdType._Document.equalsIgnoreCase(type) || ReportIdType._Table.equalsIgnoreCase(type) || ReportIdType._Chart.equalsIgnoreCase(type)|| ReportIdType._Extended.equalsIgnoreCase(type)|| ReportIdType._Label.equalsIgnoreCase(type)|| ReportIdType._Group.equalsIgnoreCase(type)|| ""String_Node_Str"".equalsIgnoreCase(type)) {
      ReportId reportId=new ReportId();
      reportId.setId(id.substring(0,id.indexOf(',')));
      if (ReportIdType._Document.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Document);
      }
 else       if (ReportIdType._Table.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Table);
      }
 else       if (ReportIdType._Chart.equalsIgnoreCase(type) || ReportIdType._Extended.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Chart);
      }
 else       if (ReportIdType._Label.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Label);
      }
 else       if (ReportIdType._Group.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Group);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.ColumnInfo);
      }
      try {
        reportId.setRptElementId(Long.valueOf(Long.parseLong(id.substring(secondComma + 1))));
      }
 catch (      Exception e) {
        reportId.setRptElementId(null);
      }
      ids.add(reportId);
    }
  }
  ReportId[] reportIds=new ReportId[ids.size()];
  for (int i=0; i < ids.size(); i++) {
    reportIds[i]=(ReportId)ids.get(i);
  }
  return reportIds;
}",0.9971157807993408
70787,"/** 
 * process tag function
 * @throws Exception
 */
protected void __process() throws Exception {
  if (viewer == null)   return;
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  this.locale=BirtTagUtil.getLocale(request,viewer.getLocale());
  this.timeZone=BirtTagUtil.getTimeZone(request,viewer.getTimeZone());
  this.options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,this.locale);
  options.setOption(InputOptions.OPT_TIMEZONE,this.timeZone);
  options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
  Collection paramDefList=viewer.getParameterDefList();
  if (paramDefList == null) {
    BirtReportServiceFactory.getReportService().setContext(pageContext.getServletContext(),options);
    IViewerReportDesignHandle designHandle=BirtTagUtil.getDesignHandle(request,viewer);
    viewer.setReportDesignHandle(designHandle);
    paramDefList=BirtReportServiceFactory.getReportService().getParameterDefinitions(designHandle,options,false);
    viewer.setParameterDefList(paramDefList);
  }
  this.paramDef=BirtUtility.findParameterDefinition(paramDefList,param.getName());
  if (paramDef == null)   return;
  String dataType=ParameterDataTypeConverter.ConvertDataType(paramDef.getDataType());
  this.pattern=param.getPattern();
  if (this.pattern == null)   this.pattern=paramDef.getPattern();
  if (""String_Node_Str"".equalsIgnoreCase(param.getIsLocale()))   this.isLocale=true;
 else   this.isLocale=false;
  if (param.getValue() != null) {
    if (param.getValue() instanceof String) {
      Object valueObj=DataUtil.validateWithPattern(param.getName(),dataType,this.pattern,(String)param.getValue(),locale,timeZone,isLocale);
      if (this.paramDef.isMultiValue())       param.setValue(new Object[]{valueObj});
 else       param.setValue(valueObj);
    }
 else     if (this.paramDef.isMultiValue() && param.getValue() instanceof String[]) {
      String[] sValues=(String[])param.getValue();
      Object[] values=new Object[sValues.length];
      for (int i=0; i < sValues.length; i++) {
        Object valueObj=DataUtil.validateWithPattern(param.getName(),dataType,this.pattern,sValues[i],locale,timeZone,isLocale);
        values[i]=valueObj;
      }
      param.setValue(values);
    }
  }
 else {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    if (this.paramDef.isMultiValue())     param.setValue(new Object[]{defaultValue});
 else     param.setValue(defaultValue);
  }
  if (this.paramDef.isMultiValue()) {
    this.valueStringList=new ArrayList();
    Object[] values=(Object[])param.getValue();
    if (values != null) {
      for (int i=0; i < values.length; i++) {
        String value=DataUtil.getDisplayValue(values[i],timeZone);
        this.valueStringList.add(value);
      }
    }
  }
 else {
    this.valueString=DataUtil.getDisplayValue(param.getValue(),timeZone);
    if (this.valueString == null)     this.valueString=""String_Node_Str"";
  }
  this.displayTextString=param.getDisplayText();
  if (this.displayTextString == null) {
    Object obj=param.getValue();
    if (obj != null) {
      if (obj instanceof Object[]) {
        Object[] objs=(Object[])obj;
        if (objs.length > 0)         obj=objs[0];
 else         obj=null;
      }
      this.displayTextString=DataUtil.getDisplayValue(dataType,this.pattern,obj,locale,timeZone);
    }
  }
  if (this.displayTextString == null)   this.displayTextString=""String_Node_Str"";
  if (param.getTitle() == null)   param.setTitle(this.displayTextString);
  requesterTag.addParameter(param.getName(),param.getValue());
  if (paramDef.isHidden()) {
    __handleHidden();
  }
 else {
switch (paramDef.getControlType()) {
case IScalarParameterDefn.TEXT_BOX:
      __handleTextBox();
    break;
case IScalarParameterDefn.LIST_BOX:
  __handleListBox();
break;
case IScalarParameterDefn.RADIO_BUTTON:
__handleRadioButton();
break;
case IScalarParameterDefn.CHECK_BOX:
__handleCheckBox();
break;
default :
break;
}
}
}","/** 
 * process tag function
 * @throws Exception
 */
protected void __process() throws Exception {
  if (viewer == null)   return;
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  this.locale=BirtTagUtil.getLocale(request,viewer.getLocale());
  this.timeZone=BirtTagUtil.getTimeZone(request,viewer.getTimeZone());
  this.options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,request);
  options.setOption(InputOptions.OPT_LOCALE,this.locale);
  options.setOption(InputOptions.OPT_TIMEZONE,this.timeZone);
  options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
  Collection paramDefList=viewer.getParameterDefList();
  if (paramDefList == null) {
    BirtReportServiceFactory.getReportService().setContext(pageContext.getServletContext(),options);
    IViewerReportDesignHandle designHandle=BirtTagUtil.getDesignHandle(request,viewer);
    viewer.setReportDesignHandle(designHandle);
    paramDefList=BirtReportServiceFactory.getReportService().getParameterDefinitions(designHandle,options,false);
    viewer.setParameterDefList(paramDefList);
  }
  this.paramDef=BirtUtility.findParameterDefinition(paramDefList,param.getName());
  if (paramDef == null)   return;
  String dataType=ParameterDataTypeConverter.convertDataType(paramDef.getDataType());
  this.pattern=param.getPattern();
  if (this.pattern == null)   this.pattern=paramDef.getPattern();
  if (""String_Node_Str"".equalsIgnoreCase(param.getIsLocale()))   this.isLocale=true;
 else   this.isLocale=false;
  if (param.getValue() != null) {
    if (param.getValue() instanceof String) {
      Object valueObj=DataUtil.validateWithPattern(param.getName(),dataType,this.pattern,(String)param.getValue(),locale,timeZone,isLocale);
      if (this.paramDef.isMultiValue())       param.setValue(new Object[]{valueObj});
 else       param.setValue(valueObj);
    }
 else     if (this.paramDef.isMultiValue() && param.getValue() instanceof String[]) {
      String[] sValues=(String[])param.getValue();
      Object[] values=new Object[sValues.length];
      for (int i=0; i < sValues.length; i++) {
        Object valueObj=DataUtil.validateWithPattern(param.getName(),dataType,this.pattern,sValues[i],locale,timeZone,isLocale);
        values[i]=valueObj;
      }
      param.setValue(values);
    }
  }
 else {
    Object defaultValue=BirtReportServiceFactory.getReportService().getParameterDefaultValue(viewer.getReportDesignHandle(),param.getName(),options);
    if (this.paramDef.isMultiValue())     param.setValue(new Object[]{defaultValue});
 else     param.setValue(defaultValue);
  }
  if (this.paramDef.isMultiValue()) {
    this.valueStringList=new ArrayList();
    Object[] values=(Object[])param.getValue();
    if (values != null) {
      for (int i=0; i < values.length; i++) {
        String value=DataUtil.getDisplayValue(values[i],timeZone);
        this.valueStringList.add(value);
      }
    }
  }
 else {
    this.valueString=DataUtil.getDisplayValue(param.getValue(),timeZone);
    if (this.valueString == null)     this.valueString=""String_Node_Str"";
  }
  this.displayTextString=param.getDisplayText();
  if (this.displayTextString == null) {
    Object obj=param.getValue();
    if (obj != null) {
      if (obj instanceof Object[]) {
        Object[] objs=(Object[])obj;
        if (objs.length > 0)         obj=objs[0];
 else         obj=null;
      }
      this.displayTextString=DataUtil.getDisplayValue(dataType,this.pattern,obj,locale,timeZone);
    }
  }
  if (this.displayTextString == null)   this.displayTextString=""String_Node_Str"";
  if (param.getTitle() == null)   param.setTitle(this.displayTextString);
  requesterTag.addParameter(param.getName(),param.getValue());
  if (paramDef.isHidden()) {
    __handleHidden();
  }
 else {
switch (paramDef.getControlType()) {
case IScalarParameterDefn.TEXT_BOX:
      __handleTextBox();
    break;
case IScalarParameterDefn.LIST_BOX:
  __handleListBox();
break;
case IScalarParameterDefn.RADIO_BUTTON:
__handleRadioButton();
break;
case IScalarParameterDefn.CHECK_BOX:
__handleCheckBox();
break;
default :
break;
}
}
}",0.9997571636716852
70788,"/** 
 * Handle SOAP operation. Parse report parameters and display text
 * @param operation
 * @param bean
 * @param parameterMap
 * @param displayTexts
 * @throws Exception
 */
public static void handleOperation(Operation operation,ViewerAttributeBean bean,Map parameterMap,Map displayTexts) throws Exception {
  if (operation == null || bean == null || parameterMap == null || displayTexts == null)   return;
  List locs=new ArrayList();
  Map params=new HashMap();
  String displayTextParam=null;
  Oprand[] oprands=operation.getOprand();
  for (int i=0; i < oprands.length; i++) {
    String paramName=oprands[i].getName();
    Object paramValue=oprands[i].getValue();
    if (paramName == null || paramValue == null)     continue;
    if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISLOCALE)) {
      locs.add(paramValue);
    }
 else     if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
      ParameterDefinition parameter=bean.findParameterDefinition(displayTextParam);
      if (parameter != null) {
        if (parameter.isMultiValue())         displayTexts.put(displayTextParam,null);
 else         displayTexts.put(displayTextParam,paramValue);
      }
      continue;
    }
 else {
      if (ParameterAccessor.PARAM_ISNULL.equalsIgnoreCase(paramName)) {
        paramName=(String)paramValue;
        paramValue=null;
      }
      List list=(List)params.get(paramName);
      if (list == null) {
        list=new ArrayList();
        params.put(paramName,list);
      }
      list.add(paramValue);
    }
  }
  Iterator it=params.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    String paramName=(String)entry.getKey();
    List paramValues=(List)entry.getValue();
    ParameterDefinition parameter=bean.findParameterDefinition(paramName);
    if (parameter == null)     continue;
    String pattern=parameter.getPattern();
    String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
    boolean isLocale=locs.contains(paramName);
    if (parameter.isMultiValue()) {
      List values=new ArrayList();
      for (int i=0; i < paramValues.size(); i++) {
        Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(i),bean.getLocale(),bean.getTimeZone(),isLocale);
        values.add(paramValueObj);
      }
      if (values.size() == 0 || (values.size() == 1 && values.get(0) == null))       parameterMap.put(paramName,null);
 else       parameterMap.put(paramName,values.toArray());
    }
 else {
      Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(0),bean.getLocale(),bean.getTimeZone(),isLocale);
      parameterMap.put(paramName,paramValueObj);
    }
  }
}","/** 
 * Handle SOAP operation. Parse report parameters and display text
 * @param operation
 * @param bean
 * @param parameterMap
 * @param displayTexts
 * @throws Exception
 */
public static void handleOperation(Operation operation,ViewerAttributeBean bean,Map parameterMap,Map displayTexts) throws Exception {
  if (operation == null || bean == null || parameterMap == null || displayTexts == null)   return;
  List locs=new ArrayList();
  Map params=new HashMap();
  String displayTextParam=null;
  Oprand[] oprands=operation.getOprand();
  for (int i=0; i < oprands.length; i++) {
    String paramName=oprands[i].getName();
    Object paramValue=oprands[i].getValue();
    if (paramName == null || paramValue == null)     continue;
    if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISLOCALE)) {
      locs.add(paramValue);
    }
 else     if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
      ParameterDefinition parameter=bean.findParameterDefinition(displayTextParam);
      if (parameter != null) {
        if (parameter.isMultiValue())         displayTexts.put(displayTextParam,null);
 else         displayTexts.put(displayTextParam,paramValue);
      }
      continue;
    }
 else {
      if (ParameterAccessor.PARAM_ISNULL.equalsIgnoreCase(paramName)) {
        paramName=(String)paramValue;
        paramValue=null;
      }
      List list=(List)params.get(paramName);
      if (list == null) {
        list=new ArrayList();
        params.put(paramName,list);
      }
      list.add(paramValue);
    }
  }
  Iterator it=params.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    String paramName=(String)entry.getKey();
    List paramValues=(List)entry.getValue();
    ParameterDefinition parameter=bean.findParameterDefinition(paramName);
    if (parameter == null)     continue;
    String pattern=parameter.getPattern();
    String dataType=ParameterDataTypeConverter.convertDataType(parameter.getDataType());
    boolean isLocale=locs.contains(paramName);
    if (parameter.isMultiValue()) {
      List values=new ArrayList();
      for (int i=0; i < paramValues.size(); i++) {
        Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(i),bean.getLocale(),bean.getTimeZone(),isLocale);
        values.add(paramValueObj);
      }
      if (values.size() == 0 || (values.size() == 1 && values.get(0) == null))       parameterMap.put(paramName,null);
 else       parameterMap.put(paramName,values.toArray());
    }
 else {
      Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(0),bean.getLocale(),bean.getTimeZone(),isLocale);
      parameterMap.put(paramName,paramValueObj);
    }
  }
}",0.999637943519189
70789,"public void relocate(IFigure target){
  Rectangle bounds;
  if (getReference() instanceof HandleBounds)   bounds=((HandleBounds)getReference()).getHandleBounds();
 else   bounds=getReference().getBounds();
  bounds=new PrecisionRectangle(new Rectangle(bounds.x,bounds.y + bounds.height,DEFAULT_VALUE.width,DEFAULT_VALUE.height));
  getReference().translateToAbsolute(bounds);
  target.translateToRelative(bounds);
  if (target.getBounds().width < bounds.width || target.getBounds().height < bounds.height) {
    target.setBounds(bounds);
  }
}","public void relocate(IFigure target){
  Rectangle bounds;
  if (getReference() instanceof HandleBounds)   bounds=((HandleBounds)getReference()).getHandleBounds();
 else   bounds=getReference().getBounds();
  bounds=new PrecisionRectangle(new Rectangle(bounds.x,bounds.y + bounds.height,DEFAULT_VALUE.width,DEFAULT_VALUE.height));
  getReference().translateToAbsolute(bounds);
  target.translateToRelative(bounds);
  target.setLocation(bounds.getLocation());
  if (target.getBounds().width < bounds.width || target.getBounds().height < bounds.height) {
    target.setSize(bounds.getSize());
  }
}",0.9314586994727592
70790,"@Override protected void propertyChange(Map info){
  boolean invalidate=false;
  if (info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP) instanceof ReportDesignHandle) {
    String newOrientation=((ReportDesignHandle)info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP)).getBidiOrientation();
    UIUtil.processOrientationChange(newOrientation,getViewer());
    invalidate=true;
  }
  super.propertyChange(info);
  if (invalidate) {
    getFigure().invalidateTree();
    getFigure().revalidate();
  }
}","@Override protected void propertyChange(Map info){
  boolean invalidate=false;
  if (info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP) instanceof ReportDesignHandle) {
    String newOrientation=((ReportDesignHandle)info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP)).getBidiOrientation();
    UIUtil.processOrientationChange(newOrientation,getViewer());
    invalidate=true;
  }
  super.propertyChange(info);
  if (info.get(MasterPageHandle.WIDTH_PROP) instanceof MasterPageHandle || info.get(MasterPageHandle.HEIGHT_PROP) instanceof MasterPageHandle) {
    Display.getCurrent().asyncExec(new Runnable(){
      public void run(){
        List list=getChildren();
        int size=list.size();
        for (int i=0; i < size; i++) {
          ((ReportElementEditPart)list.get(i)).refreshVisuals();
        }
      }
    }
);
  }
  if (invalidate) {
    getFigure().invalidateTree();
    getFigure().revalidate();
  }
}",0.6916019760056458
70791,"public void relocate(IFigure target){
  Rectangle bounds;
  if (getReference() instanceof HandleBounds)   bounds=((HandleBounds)getReference()).getHandleBounds();
 else   bounds=getReference().getBounds();
  bounds=new PrecisionRectangle(new Rectangle(bounds.x,bounds.y + bounds.height,DEFAULT_VALUE.width,DEFAULT_VALUE.height));
  getReference().translateToAbsolute(bounds);
  target.translateToRelative(bounds);
  target.setBounds(bounds);
}","public void relocate(IFigure target){
  Rectangle bounds;
  if (getReference() instanceof HandleBounds)   bounds=((HandleBounds)getReference()).getHandleBounds();
 else   bounds=getReference().getBounds();
  bounds=new PrecisionRectangle(new Rectangle(bounds.x,bounds.y + bounds.height,DEFAULT_VALUE.width,DEFAULT_VALUE.height));
  getReference().translateToAbsolute(bounds);
  target.translateToRelative(bounds);
  if (target.getBounds().width < bounds.width || target.getBounds().height < bounds.height) {
    target.setBounds(bounds);
  }
}",0.845841784989858
70792,"/** 
 * Get the parent (container) of this element
 * @throws BirtException
 */
IReportElementInstance getParent() throws BirtException ;","/** 
 * Get the parent (container) of this element
 * @throws ScriptException 
 * @throws BirtException
 */
IReportElementInstance getParent() throws ScriptException ;",0.8881578947368421
70793,"/** 
 * Get the row data used to create the instance. The row data is defined by the column binding.
 * @throws BirtException
 */
IRowData getRowData() throws BirtException ;","/** 
 * Get the row data used to create the instance. The row data is defined by the column binding.
 * @throws ScriptException 
 * @throws BirtException
 */
IRowData getRowData() throws ScriptException ;",0.8888888888888888
70794,"public IReportElementInstance getParent() throws BirtException {
  return ElementUtil.getInstance(content.getParent(),context);
}","public IReportElementInstance getParent() throws ScriptException {
  try {
    return ElementUtil.getInstance(content.getParent(),context);
  }
 catch (  BirtException e) {
    ScriptException scriptException=new ScriptException(e.getLocalizedMessage());
    scriptException.initCause(e);
    throw scriptException;
  }
}",0.32
70795,"public IRowData getRowData() throws BirtException {
  if (rowData != null) {
    return rowData;
  }
  Object objGen=content.getGenerateBy();
  if (objGen instanceof ReportItemDesign) {
    ReportItemDesign design=(ReportItemDesign)objGen;
    if (design.getQuery() != null) {
      DesignElementHandle handle=design.getHandle();
      if (handle instanceof ReportItemHandle) {
        IBaseResultSet rset=context.getResultSet();
        rowData=new RowData(rset,(ReportItemHandle)handle);
        return rowData;
      }
    }
  }
  IReportElementInstance parent=this.getParent();
  if (parent != null) {
    return parent.getRowData();
  }
  return null;
}","public IRowData getRowData() throws ScriptException {
  if (rowData != null) {
    return rowData;
  }
  Object objGen=content.getGenerateBy();
  if (objGen instanceof ReportItemDesign) {
    ReportItemDesign design=(ReportItemDesign)objGen;
    if (design.getQuery() != null) {
      DesignElementHandle handle=design.getHandle();
      if (handle instanceof ReportItemHandle) {
        IBaseResultSet rset=context.getResultSet();
        rowData=new RowData(rset,(ReportItemHandle)handle);
        return rowData;
      }
    }
  }
  IReportElementInstance parent=this.getParent();
  if (parent != null) {
    return parent.getRowData();
  }
  return null;
}",0.9939301972685888
70796,"/** 
 * Returns predefined expressions for sharing case.
 * @param headers
 * @return
 */
private Object[] getPredefinedExpressionsForSharing(ColumnBindingInfo[] headers){
  Map commons=new LinkedHashMap();
  Map aggs=new LinkedHashMap();
  Map groups=new LinkedHashMap();
  Map groupsWithAgg=new LinkedHashMap();
  Map groupsWithoutAgg=new LinkedHashMap();
  for (int i=0; i < headers.length; i++) {
    int type=headers[i].getColumnType();
switch (type) {
case ColumnBindingInfo.COMMON_COLUMN:
      commons.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
    break;
case ColumnBindingInfo.AGGREGATE_COLUMN:
  aggs.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
break;
case ColumnBindingInfo.GROUP_COLUMN:
groups.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
break;
}
}
groupsWithoutAgg=new LinkedHashMap(groups);
for (Iterator iter=groupsWithoutAgg.entrySet().iterator(); iter.hasNext(); ) {
Entry entry=(Entry)iter.next();
String groupName=((ColumnBindingInfo)entry.getValue()).getName();
Object[] aggsValues=aggs.values().toArray();
for (int j=0; j < aggs.size(); j++) {
if (groupName.equals(((ComputedColumnHandle)((ColumnBindingInfo)aggsValues[j]).getObjectHandle()).getAggregateOn())) {
iter.remove();
groupsWithAgg.put(entry.getKey(),entry.getValue());
break;
}
}
}
Object[][] categorys=new Object[0][];
Object[][] optionals=new Object[0][];
categorys=new Object[groups.size() + commons.size()][2];
int index=0;
for (Iterator iter=groups.entrySet().iterator(); iter.hasNext(); ) {
Entry entry=(Entry)iter.next();
categorys[index][0]=entry.getKey();
categorys[index][1]=entry.getValue();
index++;
}
for (Iterator iter=commons.entrySet().iterator(); iter.hasNext(); ) {
Entry entry=(Entry)iter.next();
categorys[index][0]=entry.getKey();
categorys[index][1]=entry.getValue();
index++;
}
int size=(groups.size() > 0) ? 1 : 0;
optionals=new Object[size][2];
if (groups.size() > 0) {
Entry entry=(Entry)groups.entrySet().iterator().next();
;
optionals[0][0]=entry.getKey();
optionals[0][1]=entry.getValue();
}
Object[][] values=new Object[aggs.size() + commons.size()][2];
index=0;
for (Iterator iter=aggs.entrySet().iterator(); iter.hasNext(); ) {
Entry entry=(Entry)iter.next();
values[index][0]=entry.getKey();
values[index][1]=entry.getValue();
index++;
}
for (Iterator iter=commons.entrySet().iterator(); iter.hasNext(); ) {
Entry entry=(Entry)iter.next();
values[index][0]=entry.getKey();
values[index][1]=entry.getValue();
index++;
}
return new Object[]{categorys,optionals,values};
}","/** 
 * Returns predefined expressions for sharing case.
 * @param headers
 * @return
 */
private Object[] getPredefinedExpressionsForSharing(ColumnBindingInfo[] headers){
  Map<String,ColumnBindingInfo> commons=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> aggs=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> groups=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> groupsWithAgg=new LinkedHashMap<String,ColumnBindingInfo>();
  Map<String,ColumnBindingInfo> groupsWithoutAgg=new LinkedHashMap<String,ColumnBindingInfo>();
  for (int i=0; i < headers.length; i++) {
    int type=headers[i].getColumnType();
switch (type) {
case ColumnBindingInfo.COMMON_COLUMN:
      commons.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
    break;
case ColumnBindingInfo.AGGREGATE_COLUMN:
  aggs.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
break;
case ColumnBindingInfo.GROUP_COLUMN:
groups.put(ExpressionUtil.createJSRowExpression(headers[i].getName()),headers[i]);
break;
}
}
groupsWithoutAgg=new LinkedHashMap<String,ColumnBindingInfo>(groups);
for (Iterator<Entry<String,ColumnBindingInfo>> iter=groupsWithoutAgg.entrySet().iterator(); iter.hasNext(); ) {
Entry<String,ColumnBindingInfo> entry=iter.next();
String groupName=entry.getValue().getName();
ColumnBindingInfo[] aggsValues=aggs.values().toArray(new ColumnBindingInfo[]{});
for (int j=0; j < aggs.size(); j++) {
if (groupName.equals(((ComputedColumnHandle)aggsValues[j].getObjectHandle()).getAggregateOn())) {
iter.remove();
groupsWithAgg.put(entry.getKey(),entry.getValue());
break;
}
}
}
Object[][] categorys=new Object[0][];
Object[][] optionals=new Object[0][];
categorys=new Object[groups.size() + commons.size()][2];
int index=0;
for (Iterator iter=groups.entrySet().iterator(); iter.hasNext(); ) {
Entry entry=(Entry)iter.next();
categorys[index][0]=entry.getKey();
categorys[index][1]=entry.getValue();
index++;
}
for (Iterator iter=commons.entrySet().iterator(); iter.hasNext(); ) {
Entry entry=(Entry)iter.next();
categorys[index][0]=entry.getKey();
categorys[index][1]=entry.getValue();
index++;
}
int size=(groups.size() > 0) ? 1 : 0;
optionals=new Object[size][2];
if (groups.size() > 0) {
Entry entry=(Entry)groups.entrySet().iterator().next();
;
optionals[0][0]=entry.getKey();
optionals[0][1]=entry.getValue();
}
Object[][] values=new Object[aggs.size() + commons.size()][2];
index=0;
for (Iterator iter=aggs.entrySet().iterator(); iter.hasNext(); ) {
Entry entry=(Entry)iter.next();
values[index][0]=entry.getKey();
values[index][1]=entry.getValue();
index++;
}
for (Iterator iter=commons.entrySet().iterator(); iter.hasNext(); ) {
Entry entry=(Entry)iter.next();
values[index][0]=entry.getKey();
values[index][1]=entry.getValue();
index++;
}
return new Object[]{categorys,optionals,values};
}",0.4446870451237263
70797,"protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(4,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,ComboModify);
  expression.setItems(getDataSetColumns());
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
      expression.setText(getExpression(expression.getText()));
    }
  }
);
  expression.addMouseListener(new MouseAdapter(){
    public void mouseUp(    MouseEvent e){
      if (expression.getItem(0).length() == 0 && tipsForCube != null) {
        updateMessage(tipsForCube,IMessageProvider.INFORMATION);
        tipsForCube=null;
      }
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
      if (!expression.getText().equals(fCurrentExpr)) {
        needRefreshList=true;
        fCurrentExpr=expression.getText();
      }
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  UIUtil.setExpressionButtonImage(expBuilder);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(OpoertorSelection);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(4,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  expression.setItems(getDataSetColumns());
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
      expression.setText(getExpression(expression.getText()));
    }
  }
);
  expression.addMouseListener(new MouseAdapter(){
    public void mouseUp(    MouseEvent e){
      if (expression.getItem(0).length() == 0 && tipsForCube != null) {
        updateMessage(tipsForCube,IMessageProvider.INFORMATION);
        tipsForCube=null;
      }
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
      if (!expression.getText().equals(fCurrentExpr)) {
        needRefreshList=true;
        fCurrentExpr=expression.getText();
      }
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  UIUtil.setExpressionButtonImage(expBuilder);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(operatorSelectionListener);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.995174077904171
70798,"public void buildUI(Composite parent){
  super.buildUI(parent);
  ComboPropertyDescriptorProvider layoutProvider=new ComboPropertyDescriptorProvider(ReportDesignHandle.LAYOUT_PREFERENCE_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  ComboSection layoutSection=new ComboSection(layoutProvider.getDisplayName(),container,true);
  layoutSection.setProvider(layoutProvider);
  layoutSection.setWidth(500);
  layoutSection.setGridPlaceholder(2,true);
  addSection(PageSectionId.REPORT_LAYOUT_PREFERENCE,layoutSection);
  ComboPropertyDescriptorProvider biDiOrientatonProvider=new ComboPropertyDescriptorProvider(ReportDesignHandle.BIDI_ORIENTATION_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  ComboSection biDiOrientatonSection=new ComboSection(biDiOrientatonProvider.getDisplayName(),container,true);
  biDiOrientatonSection.setProvider(biDiOrientatonProvider);
  biDiOrientatonSection.setWidth(500);
  biDiOrientatonSection.setGridPlaceholder(2,true);
  addSection(PageSectionId.REPORT_BIDI_ORIENTATION,biDiOrientatonSection);
  TextPropertyDescriptorProvider displayProvider=new TextPropertyDescriptorProvider(ModuleHandle.DISPLAY_NAME_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  TextSection displaySection=new TextSection(displayProvider.getDisplayName(),container,true);
  displaySection.setProvider(displayProvider);
  displaySection.setWidth(500);
  displaySection.setGridPlaceholder(2,true);
  addSection(PageSectionId.REPORT_DISPLAY,displaySection);
  TextPropertyDescriptorProvider prvImageProvider=new TextPropertyDescriptorProvider(ReportDesignHandle.ICON_FILE_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  prvImageSection=new TextAndTwoButtonSection(prvImageProvider.getDisplayName(),container,true);
  prvImageSection.setProvider(prvImageProvider);
  prvImageSection.addSecondSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ThumbnailBuilder dialog=new ThumbnailBuilder();
      dialog.setImageName(prvImageSection.getTextControl().getText());
      ReportDesignHandle handle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
      dialog.setReportDesignHandle(handle);
      if (dialog.open() != Dialog.OK) {
        Image image=dialog.getImage();
        if (image != null) {
          image.dispose();
          image=null;
        }
        return;
      }
      if (dialog.shouldSetThumbnail()) {
        Image image=dialog.getImage();
        ImageData imageData=image.getImageData();
        ImageLoader imageLoader=new ImageLoader();
        imageLoader.data=new ImageData[1];
        imageLoader.data[0]=imageData;
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        imageLoader.save(outputStream,SWT.IMAGE_PNG);
        try {
          handle.setThumbnail(outputStream.toByteArray());
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
        if (image != null) {
          image.dispose();
          image=null;
        }
        prvImageSection.setStringValue(dialog.getImageName());
        prvImageSection.forceFocus();
      }
 else {
        if (handle.getThumbnail() != null && handle.getThumbnail().length != 0) {
          try {
            handle.deleteThumbnail();
          }
 catch (          SemanticException e1) {
            ExceptionHandler.handle(e1);
          }
        }
        prvImageSection.setStringValue(""String_Node_Str"");
        prvImageSection.forceFocus();
      }
    }
  }
);
  prvImageSection.setWidth(500);
  prvImageSection.setSecondButtonText(""String_Node_Str"");
  prvImageSection.setSecondButtonTooltipText(Messages.getString(""String_Node_Str""));
  addSection(PageSectionId.REPORT_PRVIMAGE,prvImageSection);
  createSections();
  layoutSections();
}","public void buildUI(Composite parent){
  super.buildUI(parent);
  ComboPropertyDescriptorProvider layoutProvider=new ComboPropertyDescriptorProvider(ReportDesignHandle.LAYOUT_PREFERENCE_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  ComboSection layoutSection=new ComboSection(layoutProvider.getDisplayName(),container,true);
  layoutSection.setProvider(layoutProvider);
  layoutSection.setWidth(500);
  layoutSection.setGridPlaceholder(2,true);
  addSection(PageSectionId.REPORT_LAYOUT_PREFERENCE,layoutSection);
  ComboPropertyDescriptorProvider biDiOrientatonProvider=new ComboPropertyDescriptorProvider(ReportDesignHandle.BIDI_ORIENTATION_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  ComboSection biDiOrientatonSection=new ComboSection(biDiOrientatonProvider.getDisplayName(),container,true);
  biDiOrientatonSection.setProvider(biDiOrientatonProvider);
  biDiOrientatonSection.setWidth(500);
  biDiOrientatonSection.setGridPlaceholder(2,true);
  addSection(PageSectionId.REPORT_BIDI_ORIENTATION,biDiOrientatonSection);
  TextPropertyDescriptorProvider displayProvider=new TextPropertyDescriptorProvider(ModuleHandle.DISPLAY_NAME_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  TextSection displaySection=new TextSection(displayProvider.getDisplayName(),container,true);
  displaySection.setProvider(displayProvider);
  displaySection.setWidth(500);
  displaySection.setGridPlaceholder(2,true);
  addSection(PageSectionId.REPORT_DISPLAY,displaySection);
  TextPropertyDescriptorProvider prvImageProvider=new TextPropertyDescriptorProvider(ReportDesignHandle.ICON_FILE_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  prvImageSection=new TextAndTwoButtonSection(prvImageProvider.getDisplayName(),container,true);
  prvImageSection.setProvider(prvImageProvider);
  prvImageSection.addSecondSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ThumbnailBuilder dialog=new ThumbnailBuilder();
      dialog.setImageName(prvImageSection.getTextControl().getText());
      ReportDesignHandle handle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
      dialog.setReportDesignHandle(handle);
      if (dialog.open() != Dialog.OK) {
        Image image=dialog.getImage();
        if (image != null) {
          image.dispose();
          image=null;
        }
        return;
      }
      if (dialog.shouldSetThumbnail()) {
        Image image=dialog.getImage();
        if (image != null) {
          ImageData imageData=image.getImageData();
          ImageLoader imageLoader=new ImageLoader();
          imageLoader.data=new ImageData[1];
          imageLoader.data[0]=imageData;
          ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
          imageLoader.save(outputStream,SWT.IMAGE_PNG);
          try {
            handle.setThumbnail(outputStream.toByteArray());
          }
 catch (          SemanticException e1) {
            ExceptionHandler.handle(e1);
          }
          image.dispose();
          image=null;
        }
        prvImageSection.setStringValue(dialog.getImageName());
        prvImageSection.forceFocus();
      }
 else {
        if (handle.getThumbnail() != null && handle.getThumbnail().length != 0) {
          try {
            handle.deleteThumbnail();
          }
 catch (          SemanticException e1) {
            ExceptionHandler.handle(e1);
          }
        }
        prvImageSection.setStringValue(""String_Node_Str"");
        prvImageSection.forceFocus();
      }
    }
  }
);
  prvImageSection.setWidth(500);
  prvImageSection.setSecondButtonText(""String_Node_Str"");
  prvImageSection.setSecondButtonTooltipText(Messages.getString(""String_Node_Str""));
  addSection(PageSectionId.REPORT_PRVIMAGE,prvImageSection);
  createSections();
  layoutSections();
}",0.978477690288714
70799,"public void widgetSelected(SelectionEvent e){
  ThumbnailBuilder dialog=new ThumbnailBuilder();
  dialog.setImageName(prvImageSection.getTextControl().getText());
  ReportDesignHandle handle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
  dialog.setReportDesignHandle(handle);
  if (dialog.open() != Dialog.OK) {
    Image image=dialog.getImage();
    if (image != null) {
      image.dispose();
      image=null;
    }
    return;
  }
  if (dialog.shouldSetThumbnail()) {
    Image image=dialog.getImage();
    ImageData imageData=image.getImageData();
    ImageLoader imageLoader=new ImageLoader();
    imageLoader.data=new ImageData[1];
    imageLoader.data[0]=imageData;
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    imageLoader.save(outputStream,SWT.IMAGE_PNG);
    try {
      handle.setThumbnail(outputStream.toByteArray());
    }
 catch (    SemanticException e1) {
      ExceptionHandler.handle(e1);
    }
    if (image != null) {
      image.dispose();
      image=null;
    }
    prvImageSection.setStringValue(dialog.getImageName());
    prvImageSection.forceFocus();
  }
 else {
    if (handle.getThumbnail() != null && handle.getThumbnail().length != 0) {
      try {
        handle.deleteThumbnail();
      }
 catch (      SemanticException e1) {
        ExceptionHandler.handle(e1);
      }
    }
    prvImageSection.setStringValue(""String_Node_Str"");
    prvImageSection.forceFocus();
  }
}","public void widgetSelected(SelectionEvent e){
  ThumbnailBuilder dialog=new ThumbnailBuilder();
  dialog.setImageName(prvImageSection.getTextControl().getText());
  ReportDesignHandle handle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
  dialog.setReportDesignHandle(handle);
  if (dialog.open() != Dialog.OK) {
    Image image=dialog.getImage();
    if (image != null) {
      image.dispose();
      image=null;
    }
    return;
  }
  if (dialog.shouldSetThumbnail()) {
    Image image=dialog.getImage();
    if (image != null) {
      ImageData imageData=image.getImageData();
      ImageLoader imageLoader=new ImageLoader();
      imageLoader.data=new ImageData[1];
      imageLoader.data[0]=imageData;
      ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
      imageLoader.save(outputStream,SWT.IMAGE_PNG);
      try {
        handle.setThumbnail(outputStream.toByteArray());
      }
 catch (      SemanticException e1) {
        ExceptionHandler.handle(e1);
      }
      image.dispose();
      image=null;
    }
    prvImageSection.setStringValue(dialog.getImageName());
    prvImageSection.forceFocus();
  }
 else {
    if (handle.getThumbnail() != null && handle.getThumbnail().length != 0) {
      try {
        handle.deleteThumbnail();
      }
 catch (      SemanticException e1) {
        ExceptionHandler.handle(e1);
      }
    }
    prvImageSection.setStringValue(""String_Node_Str"");
    prvImageSection.forceFocus();
  }
}",0.9749830966869506
70800,"/** 
 * Creates provider's array for font style controls.
 * @return the provider's array(elements are instances of<code>IDescriptorProvider</code>).
 */
private IDescriptorProvider[] createFontStyleProviders(){
  PropertyDescriptorProvider[] providers=new PropertyDescriptorProvider[]{new FontStylePropertyDescriptorProvider(StyleHandle.FONT_WEIGHT_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.FONT_STYLE_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.TEXT_UNDERLINE_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.TEXT_LINE_THROUGH_PROP,ReportDesignConstants.STYLE_ELEMENT),new PropertyDescriptorProvider(StyleHandle.TEXT_ALIGN_PROP,ReportDesignConstants.STYLE_ELEMENT)};
  for (int i=0; i < providers.length; i++) {
    if (providers[i] instanceof PropertyDescriptorProvider)     ((PropertyDescriptorProvider)providers[i]).enableReset(true);
  }
  return providers;
}","/** 
 * Creates provider's array for font style controls.
 * @return the provider's array(elements are instances of<code>IDescriptorProvider</code>).
 */
private IDescriptorProvider[] createFontStyleProviders(){
  PropertyDescriptorProvider[] providers=new PropertyDescriptorProvider[]{new FontStylePropertyDescriptorProvider(StyleHandle.FONT_WEIGHT_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.FONT_STYLE_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.TEXT_UNDERLINE_PROP,ReportDesignConstants.STYLE_ELEMENT),new FontStylePropertyDescriptorProvider(StyleHandle.TEXT_LINE_THROUGH_PROP,ReportDesignConstants.STYLE_ELEMENT),new PropertyDescriptorProvider(StyleHandle.TEXT_ALIGN_PROP,ReportDesignConstants.STYLE_ELEMENT)};
  for (int i=0; i < providers.length; i++) {
    ((PropertyDescriptorProvider)providers[i]).enableReset(true);
  }
  return providers;
}",0.9694501018329938
70801,"private boolean updateHideRule(DesignElementHandle element,String format,boolean checked,String expression) throws Exception {
  if (checked) {
    HideRuleHandle hideHandle=getHideRuleHandle(element,format);
    if (hideHandle == null) {
      try {
        hideHandle=createHideRuleHandle(element,format,expression);
      }
 catch (      SemanticException e) {
        throw e;
      }
    }
 else {
      if (!expression.equals(hideHandle.getExpression()) && (!expression.equals(""String_Node_Str"") || hideHandle.getExpression() != null)) {
        hideHandle.setExpression(expression);
      }
    }
  }
 else {
    Iterator visibilities=visibilityRulesIterator(element);
    if (visibilities == null) {
      return true;
    }
    while (visibilities.hasNext()) {
      HideRuleHandle handle=(HideRuleHandle)visibilities.next();
      if (format.equalsIgnoreCase(handle.getFormat())) {
        try {
          getVisibilityPropertyHandle(element).removeItem(handle.getStructure());
        }
 catch (        PropertyValueException e) {
          throw e;
        }
        return true;
      }
    }
  }
  return true;
}","private boolean updateHideRule(DesignElementHandle element,String format,boolean checked,String expression) throws Exception {
  if (checked) {
    HideRuleHandle hideHandle=getHideRuleHandle(element,format);
    if (hideHandle == null) {
      try {
        createHideRuleHandle(element,format,expression);
      }
 catch (      SemanticException e) {
        throw e;
      }
    }
 else {
      if (!expression.equals(hideHandle.getExpression()) && (!expression.equals(""String_Node_Str"") || hideHandle.getExpression() != null)) {
        hideHandle.setExpression(expression);
      }
    }
  }
 else {
    Iterator visibilities=visibilityRulesIterator(element);
    if (visibilities == null) {
      return true;
    }
    while (visibilities.hasNext()) {
      HideRuleHandle handle=(HideRuleHandle)visibilities.next();
      if (format.equalsIgnoreCase(handle.getFormat())) {
        try {
          getVisibilityPropertyHandle(element).removeItem(handle.getStructure());
        }
 catch (        PropertyValueException e) {
          throw e;
        }
        return true;
      }
    }
  }
  return true;
}",0.995091477019188
70802,"/** 
 * Updates the format Pattern String, and Preview.
 */
private void updatePreview(){
  markDirty(hasLoaded);
  String gText;
  if (getPreviewText() == null) {
    gText=DEFAULT_PREVIEW_TEXT;
  }
 else {
    gText=getPreviewText();
  }
  String category=provider.getCategory4DisplayName(typeChoicer.getText());
  setCategory(category);
  if (provider.STRING_FORMAT_TYPE_UNFORMATTED.equals(category)) {
    String pattern=null;
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(gText);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(null);
  }
 else   if (provider.STRING_FORMAT_TYPE_UPPERCASE.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(gText);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_LOWERCASE.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(gText);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_ZIP_CODE.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(SAMPLE_TEXT_ZIP_CODE);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_ZIP_CODE_4.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(SAMPLE_TEXT_ZIP_C0DE4);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_PHONE_NUMBER.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(SAMPLE_TEXT_PHONE_NUMBER);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_SOCIAL_SECURITY_NUMBER.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    gText=SAMPLE_TEXT_SOCIAL_SECURITY_NUMBER;
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(SAMPLE_TEXT_SOCIAL_SECURITY_NUMBER);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_CUSTOM.equals(category)) {
    String pattern=formatCode.getText();
    String fmtStr;
    if (provider.isBlank(previewTextBox.getText())) {
      fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(gText);
    }
 else {
      fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(previewTextBox.getText());
    }
    cPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
  return;
}","/** 
 * Updates the format Pattern String, and Preview.
 */
private void updatePreview(){
  markDirty(hasLoaded);
  String gText;
  if (getPreviewText() == null) {
    gText=DEFAULT_PREVIEW_TEXT;
  }
 else {
    gText=getPreviewText();
  }
  String category=provider.getCategory4DisplayName(typeChoicer.getText());
  setCategory(category);
  if (provider.STRING_FORMAT_TYPE_UNFORMATTED.equals(category)) {
    String pattern=null;
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(gText);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(null);
  }
 else   if (provider.STRING_FORMAT_TYPE_UPPERCASE.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(gText);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_LOWERCASE.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(gText);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_ZIP_CODE.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(SAMPLE_TEXT_ZIP_CODE);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_ZIP_CODE_4.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(SAMPLE_TEXT_ZIP_C0DE4);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_PHONE_NUMBER.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(SAMPLE_TEXT_PHONE_NUMBER);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_SOCIAL_SECURITY_NUMBER.equals(category)) {
    String pattern=FormatStringPattern.getPatternForCategory(category);
    String fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(SAMPLE_TEXT_SOCIAL_SECURITY_NUMBER);
    generalPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
 else   if (provider.STRING_FORMAT_TYPE_CUSTOM.equals(category)) {
    String pattern=formatCode.getText();
    String fmtStr;
    if (provider.isBlank(previewTextBox.getText())) {
      fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(gText);
    }
 else {
      fmtStr=new StringFormatter(pattern,DEFAULT_LOCALE).format(previewTextBox.getText());
    }
    cPreviewLabel.setText(validatedFmtStr(fmtStr));
    setPattern(pattern);
  }
  return;
}",0.9710193204530312
70803,"protected void updatePreview(Object handle){
  if (handle != null) {
    String familyValue=provider.getFontFamily(handle);
    int sizeValue=provider.getFontSize(handle);
    previewLabel.setFontFamily(familyValue);
    previewLabel.setFontSize(sizeValue);
    previewLabel.setBold(provider.isBold(handle));
    previewLabel.setItalic(provider.isItalic(handle));
    previewLabel.setForeground(provider.getColor(handle));
    previewLabel.setBackground(provider.getBackgroundColor(handle));
    previewLabel.setUnderline(provider.isUnderline(handle));
    previewLabel.setLinethrough(provider.isLinethrough(handle));
    previewLabel.setOverline(provider.isOverline(handle));
    previewLabel.updateView();
    if (provider.getBackgroundColor(handle) == null && isFormStyle()) {
      FormWidgetFactory.getInstance().paintFormStyle(previewLabel);
      FormWidgetFactory.getInstance().adapt(previewLabel);
    }
  }
 else {
    previewLabel.restoreDefaultState();
    previewLabel.setForeground(ColorManager.getColor(-1));
    previewLabel.setBackground(ColorManager.getColor(-1));
    previewLabel.updateView();
    if (isFormStyle()) {
      FormWidgetFactory.getInstance().paintFormStyle(previewLabel);
      FormWidgetFactory.getInstance().adapt(previewLabel);
    }
  }
}","protected void updatePreview(Object handle){
  if (handle != null && highlightProvider != null) {
    String familyValue=highlightProvider.getFontFamily(handle);
    int sizeValue=highlightProvider.getFontSize(handle);
    previewLabel.setFontFamily(familyValue);
    previewLabel.setFontSize(sizeValue);
    previewLabel.setBold(highlightProvider.isBold(handle));
    previewLabel.setItalic(highlightProvider.isItalic(handle));
    previewLabel.setForeground(highlightProvider.getColor(handle));
    previewLabel.setBackground(highlightProvider.getBackgroundColor(handle));
    previewLabel.setUnderline(highlightProvider.isUnderline(handle));
    previewLabel.setLinethrough(highlightProvider.isLinethrough(handle));
    previewLabel.setOverline(highlightProvider.isOverline(handle));
    previewLabel.updateView();
    if (highlightProvider.getBackgroundColor(handle) == null && isFormStyle()) {
      FormWidgetFactory.getInstance().paintFormStyle(previewLabel);
      FormWidgetFactory.getInstance().adapt(previewLabel);
    }
  }
 else {
    previewLabel.restoreDefaultState();
    previewLabel.setForeground(ColorManager.getColor(-1));
    previewLabel.setBackground(ColorManager.getColor(-1));
    previewLabel.updateView();
    if (isFormStyle()) {
      FormWidgetFactory.getInstance().paintFormStyle(previewLabel);
      FormWidgetFactory.getInstance().adapt(previewLabel);
    }
  }
}",0.9479985035540592
70804,"public void setDescriptorProvider(IDescriptorProvider provider){
  super.setDescriptorProvider(provider);
  if (provider instanceof HighlightDescriptorProvider)   this.provider=(HighlightDescriptorProvider)provider;
}","public void setDescriptorProvider(IDescriptorProvider provider){
  super.setDescriptorProvider(provider);
  if (provider instanceof HighlightDescriptorProvider)   this.highlightProvider=(HighlightDescriptorProvider)provider;
}",0.9751693002257336
70805,"protected void updatePreview(Object handle){
  if (handle != null) {
    previewLabel.setText(provider.getDisplayText(handle));
    previewLabel.updateView();
  }
 else {
    previewLabel.restoreDefaultState();
    previewLabel.setForeground(ColorManager.getColor(-1));
    previewLabel.setBackground(ColorManager.getColor(-1));
    previewLabel.setText(""String_Node_Str"");
    previewLabel.updateView();
    if (isFormStyle()) {
      FormWidgetFactory.getInstance().paintFormStyle(previewLabel);
      FormWidgetFactory.getInstance().adapt(previewLabel);
    }
  }
}","protected void updatePreview(Object handle){
  if (handle != null && mapProvider != null) {
    previewLabel.setText(mapProvider.getDisplayText(handle));
    previewLabel.updateView();
  }
 else {
    previewLabel.restoreDefaultState();
    previewLabel.setForeground(ColorManager.getColor(-1));
    previewLabel.setBackground(ColorManager.getColor(-1));
    previewLabel.setText(""String_Node_Str"");
    previewLabel.updateView();
    if (isFormStyle()) {
      FormWidgetFactory.getInstance().paintFormStyle(previewLabel);
      FormWidgetFactory.getInstance().adapt(previewLabel);
    }
  }
}",0.9759036144578314
70806,"public void setDescriptorProvider(IDescriptorProvider provider){
  super.setDescriptorProvider(provider);
  if (provider instanceof MapDescriptorProvider)   this.provider=(MapDescriptorProvider)provider;
}","public void setDescriptorProvider(IDescriptorProvider provider){
  super.setDescriptorProvider(provider);
  if (provider instanceof MapDescriptorProvider)   this.mapProvider=(MapDescriptorProvider)provider;
}",0.9878934624697336
70807,"public void load(){
  String value=marignProvider.load().toString();
  deMesurementValue=value;
  if (value == null) {
    valueCombo.deselectAll();
    valueCombo.setEnabled(false);
    unitCombo.deselectAll();
    unitCombo.setEnabled(false);
    return;
  }
  boolean stateFlag=((value == null) == valueCombo.getEnabled());
  if (stateFlag) {
    valueCombo.setEnabled(value != null);
    unitCombo.setEnabled(value != null);
  }
  if (marignProvider != null) {
    valueCombo.setItems(marignProvider.getValueItems());
    unitCombo.setItems(marignProvider.getUnitItems());
    String valueName=marignProvider.getValueName(value);
    if (valueName != null) {
      valueCombo.setText(valueName);
      deMesurementValue=valueName;
      unitCombo.deselectAll();
      unitCombo.setEnabled(false);
      return;
    }
    try {
      deUnitValue=marignProvider.getUnit();
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
    }
    String unitName=marignProvider.getUnitName(deUnitValue);
    if (unitName != null) {
      unitCombo.setText(unitName);
      deUnitValue=unitName;
    }
    deMesurementValue=marignProvider.getMeasureValue();
    valueCombo.setText(deMesurementValue);
  }
}","public void load(){
  if (marignProvider != null) {
    String value=marignProvider.load().toString();
    deMesurementValue=value;
    if (value == null) {
      valueCombo.deselectAll();
      valueCombo.setEnabled(false);
      unitCombo.deselectAll();
      unitCombo.setEnabled(false);
      return;
    }
    boolean stateFlag=((value == null) == valueCombo.getEnabled());
    if (stateFlag) {
      valueCombo.setEnabled(value != null);
      unitCombo.setEnabled(value != null);
    }
    valueCombo.setItems(marignProvider.getValueItems());
    unitCombo.setItems(marignProvider.getUnitItems());
    String valueName=marignProvider.getValueName(value);
    if (valueName != null) {
      valueCombo.setText(valueName);
      deMesurementValue=valueName;
      unitCombo.deselectAll();
      unitCombo.setEnabled(false);
      return;
    }
    try {
      deUnitValue=marignProvider.getUnit();
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
    }
    String unitName=marignProvider.getUnitName(deUnitValue);
    if (unitName != null) {
      unitCombo.setText(unitName);
      deUnitValue=unitName;
    }
    deMesurementValue=marignProvider.getMeasureValue();
    valueCombo.setText(deMesurementValue);
  }
}",0.9558823529411764
70808,"public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  if (fTableViewer.getContentProvider() == null) {
    return;
  }
  if (fTableViewer != null) {
    fTableViewer.setInput(input);
    refreshTableItemView();
  }
}","public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  if (fTableViewer != null) {
    if (fTableViewer.getContentProvider() == null) {
      return;
    }
    fTableViewer.setInput(input);
    refreshTableItemView();
  }
}",0.8641975308641975
70809,"protected boolean performInsert(Object model,SlotHandle slotHandle,String type,String position,Map extendData) throws Exception {
  if (type == ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT) {
    DesignElementHandle handle=super.createElement(type);
    slotHandle.add(handle);
    CascadingParametersDialog dialog=new CascadingParametersDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
    dialog.setInput(handle);
    return (dialog.open() == Dialog.OK);
  }
  return super.performInsert(model,slotHandle,type,position,extendData);
}","protected boolean performInsert(Object model,SlotHandle slotHandle,String type,String position,Map extendData) throws Exception {
  if (ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT.equals(type)) {
    DesignElementHandle handle=super.createElement(type);
    slotHandle.add(handle);
    CascadingParametersDialog dialog=new CascadingParametersDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
    dialog.setInput(handle);
    return (dialog.open() == Dialog.OK);
  }
  return super.performInsert(model,slotHandle,type,position,extendData);
}",0.9825726141078838
70810,"protected DesignElementHandle createElement(String type) throws Exception {
  DesignElementHandle handle=super.createElement(type);
  BaseDialog dialog=null;
  if (ReportDesignConstants.PARAMETER_GROUP_ELEMENT.equals(type)) {
    dialog=new ParameterGroupDialog(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""));
    ((ParameterGroupDialog)dialog).setInput(handle);
  }
 else   if (ReportDesignConstants.SCALAR_PARAMETER_ELEMENT.equals(type)) {
    dialog=new ParameterDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
    ((ParameterDialog)dialog).setInput(handle);
  }
  if (dialog.open() == Dialog.CANCEL) {
    return null;
  }
  return (DesignElementHandle)dialog.getResult();
}","protected DesignElementHandle createElement(String type) throws Exception {
  DesignElementHandle handle=super.createElement(type);
  BaseDialog dialog=null;
  if (ReportDesignConstants.PARAMETER_GROUP_ELEMENT.equals(type)) {
    dialog=new ParameterGroupDialog(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""));
    ((ParameterGroupDialog)dialog).setInput(handle);
  }
 else   if (ReportDesignConstants.SCALAR_PARAMETER_ELEMENT.equals(type)) {
    dialog=new ParameterDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
    ((ParameterDialog)dialog).setInput(handle);
  }
  if (dialog == null)   return null;
  if (dialog.open() == Dialog.CANCEL) {
    return null;
  }
  return (DesignElementHandle)dialog.getResult();
}",0.9763275751759436
70811,"/** 
 * Notifies this listener that the selection has changed. <p> This method is called when the selection changes from one to a <code>non-null</code> value, but not when the selection changes to <code>null</code>. If there is a requirement to be notified in the latter scenario, implement <code>INullSelectionListener</code>. The event will be posted through this method. </p>
 * @param part the workbench part containing the selection
 * @param selection the current selection. This may be <code>null</code> if <code>INullSelectionListener</code> is implemented.
 */
public void selectionChanged(IWorkbenchPart part,ISelection selection){
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() != null) {
    if (part != null && !ReportPlugin.getDefault().containIgnoreViewID(part.getSite().getId())) {
      selection=new StructuredSelection();
      handleSelectionChanged(selection);
    }
  }
}","/** 
 * Notifies this listener that the selection has changed. <p> This method is called when the selection changes from one to a <code>non-null</code> value, but not when the selection changes to <code>null</code>. If there is a requirement to be notified in the latter scenario, implement <code>INullSelectionListener</code>. The event will be posted through this method. </p>
 * @param part the workbench part containing the selection
 * @param selection the current selection. This may be <code>null</code> if <code>INullSelectionListener</code> is implemented.
 */
public void selectionChanged(IWorkbenchPart part,ISelection selection){
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() != null) {
    if (part != null && !ReportPlugin.getDefault().containIgnoreViewID(part.getSite().getId())) {
      handleSelectionChanged(new StructuredSelection());
    }
  }
}",0.958217270194986
70812,"/** 
 * Returns a new instance of specified category page.
 * @param categoryId
 * @return
 */
public static ICategoryPage getCategory(String categoryId){
  if (containCategory(categoryId)) {
    return new CategoryPage(categoryId,categoryMap.get(categoryId).toString(),paneClassMap.get(categoryId));
  }
  return null;
}","/** 
 * Returns a new instance of specified category page.
 * @param categoryId
 * @return
 */
public static ICategoryPage getCategory(String categoryId){
  if (containCategory(categoryId)) {
    return new CategoryPage(categoryId,categoryMap.get(categoryId),paneClassMap.get(categoryId));
  }
  return null;
}",0.98256735340729
70813,"public static String getCategoryDisplayName(String categoryId){
  if (containCategory(categoryId)) {
    return categoryMap.get(categoryId).toString();
  }
  return categoryId;
}","public static String getCategoryDisplayName(String categoryId){
  if (containCategory(categoryId)) {
    return categoryMap.get(categoryId);
  }
  return categoryId;
}",0.9681159420289857
70814,"protected MementoElement[] createItemPath(TreeItem item){
  MementoElement tempMemento=null;
  while (item.getParentItem() != null) {
    TreeItem parent=item.getParentItem();
    for (int i=0; i < parent.getItemCount(); i++) {
      if (parent.getItem(i) == item) {
        MementoElement memento=new MementoElement(item.getText(),new Integer(i),MementoElement.Type_Element);
        if (tempMemento != null)         memento.addChild(tempMemento);
        tempMemento=memento;
        item=parent;
        break;
      }
    }
  }
  MementoElement memento=new MementoElement(item.getText(),new Integer(0),MementoElement.Type_Element);
  if (tempMemento != null)   memento.addChild(tempMemento);
  return PropertyMementoUtil.getNodePath(memento);
}","protected MementoElement[] createItemPath(TreeItem item){
  MementoElement tempMemento=null;
  while (item.getParentItem() != null) {
    TreeItem parent=item.getParentItem();
    for (int i=0; i < parent.getItemCount(); i++) {
      if (parent.getItem(i) == item) {
        MementoElement memento=new MementoElement(item.getText(),Integer.valueOf(i),MementoElement.Type_Element);
        if (tempMemento != null)         memento.addChild(tempMemento);
        tempMemento=memento;
        item=parent;
        break;
      }
    }
  }
  MementoElement memento=new MementoElement(item.getText(),Integer.valueOf(0),MementoElement.Type_Element);
  if (tempMemento != null)   memento.addChild(tempMemento);
  return PropertyMementoUtil.getNodePath(memento);
}",0.9654255319148936
70815,"public void handleSelectionChanged(ISelection selection){
  if (this.selection != null && this.selection.equals(selection))   return;
  this.selection=selection;
  deRegisterListeners();
  list=getModelList(selection);
  GroupElementHandle handle=DEUtil.getMultiSelectionHandle(list);
  if (handle != null && !handle.isSameType()) {
    viewer.setInput(null);
    setTitleDisplayName(null);
    return;
  }
  viewer.setInput(handle);
  setTitleDisplayName(handle);
  registerListeners();
  Object element=handle.getElements().get(0);
  if (element instanceof DesignElementHandle) {
    IMemento memento=viewerMemento.getChild(PropertyMementoUtil.getElementType((DesignElementHandle)element));
    if (memento == null) {
      expandToDefaultLevel();
      if (viewer.getTree().getItemCount() > 0) {
        Memento elementMemento=(Memento)viewerMemento.createChild(PropertyMementoUtil.getElementType((DesignElementHandle)element),MementoElement.Type_Element);
        elementMemento.getMementoElement().setValue(new Integer(0));
      }
    }
 else     if (memento instanceof Memento) {
      expandToDefaultLevel();
      expandTreeFromMemento((Memento)memento);
    }
  }
}","public void handleSelectionChanged(ISelection selection){
  if (this.selection != null && this.selection.equals(selection))   return;
  this.selection=selection;
  deRegisterListeners();
  list=getModelList(selection);
  GroupElementHandle handle=DEUtil.getMultiSelectionHandle(list);
  if (handle != null && !handle.isSameType()) {
    viewer.setInput(null);
    setTitleDisplayName(null);
    return;
  }
  viewer.setInput(handle);
  setTitleDisplayName(handle);
  registerListeners();
  if (handle != null && DEUtil.getInputSize(handle) > 0) {
    Object element=handle.getElements().get(0);
    if (element instanceof DesignElementHandle) {
      IMemento memento=viewerMemento.getChild(PropertyMementoUtil.getElementType((DesignElementHandle)element));
      if (memento == null) {
        expandToDefaultLevel();
        if (viewer.getTree().getItemCount() > 0) {
          Memento elementMemento=(Memento)viewerMemento.createChild(PropertyMementoUtil.getElementType((DesignElementHandle)element),MementoElement.Type_Element);
          elementMemento.getMementoElement().setValue(Integer.valueOf(0));
        }
      }
 else       if (memento instanceof Memento) {
        expandToDefaultLevel();
        expandTreeFromMemento((Memento)memento);
      }
    }
  }
}",0.9570903146710258
70816,"protected void refresh(){
  viewer.refresh(true);
  if (!viewer.getTree().isDisposed() && viewer.getInput() != null && viewer.getInput() instanceof GroupElementHandle) {
    GroupElementHandle handle=(GroupElementHandle)viewer.getInput();
    Object obj=handle.getElements().get(0);
    if (obj instanceof DesignElementHandle) {
      IMemento memento=viewerMemento.getChild(PropertyMementoUtil.getElementType((DesignElementHandle)obj));
      if (memento == null) {
        expandToDefaultLevel();
        if (viewer.getTree().getItemCount() > 0) {
          Memento elementMemento=(Memento)viewerMemento.createChild(PropertyMementoUtil.getElementType((DesignElementHandle)obj),MementoElement.Type_Element);
          elementMemento.getMementoElement().setValue(new Integer(0));
        }
      }
      if (memento != null && memento instanceof Memento) {
        expandToDefaultLevel();
        expandTreeFromMemento((Memento)memento);
      }
    }
  }
  changed=false;
}","protected void refresh(){
  viewer.refresh(true);
  if (!viewer.getTree().isDisposed() && viewer.getInput() != null && viewer.getInput() instanceof GroupElementHandle) {
    GroupElementHandle handle=(GroupElementHandle)viewer.getInput();
    Object obj=handle.getElements().get(0);
    if (obj instanceof DesignElementHandle) {
      IMemento memento=viewerMemento.getChild(PropertyMementoUtil.getElementType((DesignElementHandle)obj));
      if (memento == null) {
        expandToDefaultLevel();
        if (viewer.getTree().getItemCount() > 0) {
          Memento elementMemento=(Memento)viewerMemento.createChild(PropertyMementoUtil.getElementType((DesignElementHandle)obj),MementoElement.Type_Element);
          elementMemento.getMementoElement().setValue(Integer.valueOf(0));
        }
      }
      if (memento != null && memento instanceof Memento) {
        expandToDefaultLevel();
        expandTreeFromMemento((Memento)memento);
      }
    }
  }
  changed=false;
}",0.9938524590163934
70817,"public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  if (!viewer.getTree().isDisposed()) {
    if (getControl().isFocusControl()) {
      IMemento memento=viewerMemento.getChild(PropertyMementoUtil.getElementType(focus));
      if (memento == null) {
        expandToDefaultLevel();
        if (viewer.getTree().getItemCount() > 0) {
          Memento elementMemento=(Memento)viewerMemento.createChild(PropertyMementoUtil.getElementType(focus),MementoElement.Type_Element);
          elementMemento.getMementoElement().setValue(new Integer(0));
        }
      }
      if (memento != null && memento instanceof Memento) {
        expandToDefaultLevel();
        expandTreeFromMemento((Memento)memento);
      }
      changed=false;
    }
 else {
      changed=true;
      if (changed == true)       refresh();
    }
  }
}","public void elementChanged(DesignElementHandle focus,NotificationEvent ev){
  if (!viewer.getTree().isDisposed()) {
    if (getControl().isFocusControl()) {
      IMemento memento=viewerMemento.getChild(PropertyMementoUtil.getElementType(focus));
      if (memento == null) {
        expandToDefaultLevel();
        if (viewer.getTree().getItemCount() > 0) {
          Memento elementMemento=(Memento)viewerMemento.createChild(PropertyMementoUtil.getElementType(focus),MementoElement.Type_Element);
          elementMemento.getMementoElement().setValue(Integer.valueOf(0));
        }
      }
      if (memento != null && memento instanceof Memento) {
        expandToDefaultLevel();
        expandTreeFromMemento((Memento)memento);
      }
      changed=false;
    }
 else {
      changed=true;
      if (changed == true)       refresh();
    }
  }
}",0.9929245283018868
70818,"/** 
 * Returns all font names for current system. NOTES: Java 1.4 only support true type fonts.
 * @param comparator Sort comparator.
 * @return font names.
 */
public static String[] getSystemFontNames(Comparator comparator){
  if (scalable_system_fonts == null) {
    FontData[] fontDatas=Display.getCurrent().getFontList(null,true);
    scalable_system_fonts=new ArrayList<String>();
    for (    FontData fd : fontDatas) {
      scalable_system_fonts.add(fd.getName());
    }
  }
  if (non_scalable_system_fonts == null) {
    FontData[] fontDatas=Display.getCurrent().getFontList(null,false);
    non_scalable_system_fonts=new ArrayList<String>();
    for (    FontData fd : fontDatas) {
      non_scalable_system_fonts.add(fd.getName());
    }
  }
  SortedSet<String> set=new TreeSet<String>(comparator);
  for (  String fontName : scalable_system_fonts) {
    set.add(fontName);
  }
  for (  String fontName : non_scalable_system_fonts) {
    set.add(fontName);
  }
  return set.toArray(new String[set.size()]);
}","/** 
 * Returns all font names for current system. NOTES: Java 1.4 only support true type fonts.
 * @param comparator Sort comparator.
 * @return font names.
 */
synchronized public static String[] getSystemFontNames(Comparator comparator){
  if (scalable_system_fonts == null) {
    FontData[] fontDatas=Display.getCurrent().getFontList(null,true);
    scalable_system_fonts=new ArrayList<String>();
    for (    FontData fd : fontDatas) {
      scalable_system_fonts.add(fd.getName());
    }
  }
  if (non_scalable_system_fonts == null) {
    FontData[] fontDatas=Display.getCurrent().getFontList(null,false);
    non_scalable_system_fonts=new ArrayList<String>();
    for (    FontData fd : fontDatas) {
      non_scalable_system_fonts.add(fd.getName());
    }
  }
  SortedSet<String> set=new TreeSet<String>(comparator);
  for (  String fontName : scalable_system_fonts) {
    set.add(fontName);
  }
  for (  String fontName : non_scalable_system_fonts) {
    set.add(fontName);
  }
  return set.toArray(new String[set.size()]);
}",0.9936739659367396
70819,"public Object getAdapter(Object adaptableObject,Class adapterType){
  if (IPathEditorInputFactory.class.equals(adapterType)) {
    return new IPathEditorInputFactory(){
      public IEditorInput create(      IPath path){
        return new PathEditorInput(path);
      }
    }
;
  }
  return null;
}","public Object getAdapter(Object adaptableObject,Class adapterType){
  if (IPathEditorInputFactory.class.equals(adapterType)) {
    return new IPathEditorInputFactory(){
      public IEditorInput create(      IPath path){
        final IFile file=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(path);
        if (file != null) {
          return new FileEditorInput(file);
        }
        return new PathEditorInput(path);
      }
    }
;
  }
  return null;
}",0.7746113989637305
70820,"public IEditorInput create(IPath path){
  return new PathEditorInput(path);
}","public IEditorInput create(IPath path){
  final IFile file=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(path);
  if (file != null) {
    return new FileEditorInput(file);
  }
  return new PathEditorInput(path);
}",0.4539473684210526
70821,"public boolean equals(Object obj){
  if (obj instanceof ElementAdapter) {
    return this.getId().equals(((ElementAdapter)obj).getId());
  }
  return super.equals(obj);
}","@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof ElementAdapter)) {
    return false;
  }
  return this.getId().equals(((ElementAdapter)obj).getId());
}",0.720626631853786
70822,"public Object getAdapter(Object adaptableObject,Class adapterType){
  if (!(adaptableObject instanceof TabularCubeHandle)) {
    return null;
  }
  TabularCubeHandle cube=(TabularCubeHandle)adaptableObject;
  if (cube == null) {
    return null;
  }
  return new CubePageGenerator();
}","public Object getAdapter(Object adaptableObject,Class adapterType){
  if (!(adaptableObject instanceof TabularCubeHandle)) {
    return null;
  }
  return new CubePageGenerator();
}",0.776824034334764
70823,"protected void setColumnList(DesignElementHandle handle){
  try {
    DataSetHandle dataset=null;
    if (handle instanceof TabularCubeHandle) {
      dataset=((TabularCubeHandle)handle).getDataSet();
    }
 else     if (handle instanceof TabularDimensionHandle) {
      TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)((TabularDimensionHandle)handle).getDefaultHierarchy();
      if (hierarchy.getDataSet() != null)       dataset=hierarchy.getDataSet();
 else       dataset=((TabularHierarchyHandle)handle).getDataSet();
    }
 else     if (handle instanceof TabularHierarchyHandle) {
      TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)handle;
      if (hierarchy.getDataSet() != null)       dataset=hierarchy.getDataSet();
 else       dataset=((TabularHierarchyHandle)handle).getDataSet();
    }
    if (dataset != null)     columnList=DataUtil.getColumnList(dataset);
 else     columnList=Collections.EMPTY_LIST;
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}","protected void setColumnList(DesignElementHandle handle){
  try {
    DataSetHandle dataset=null;
    if (handle instanceof TabularCubeHandle) {
      dataset=((TabularCubeHandle)handle).getDataSet();
    }
 else     if (handle instanceof TabularDimensionHandle) {
      TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)((TabularDimensionHandle)handle).getDefaultHierarchy();
      if (hierarchy != null)       dataset=hierarchy.getDataSet();
    }
 else     if (handle instanceof TabularHierarchyHandle) {
      TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)handle;
      if (hierarchy != null)       dataset=hierarchy.getDataSet();
    }
    if (dataset != null)     columnList=DataUtil.getColumnList(dataset);
 else     columnList=Collections.EMPTY_LIST;
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}",0.7110633727175081
70824,"private void updateBindingParameters(){
  if (provider instanceof FilterHandleProvider) {
    ParamBindingHandle[] bindingParams=null;
    if (inputList.get(0) instanceof ReportItemHandle) {
      ReportItemHandle inputHandle=(ReportItemHandle)inputList.get(0);
      List list=new ArrayList();
      for (Iterator iterator=inputHandle.paramBindingsIterator(); iterator.hasNext(); ) {
        ParamBindingHandle handle=(ParamBindingHandle)iterator.next();
        list.add(handle);
      }
      bindingParams=new ParamBindingHandle[list.size()];
      list.toArray(bindingParams);
    }
    ((FilterHandleProvider)provider).setBindingParams(bindingParams);
  }
}","private void updateBindingParameters(){
  ParamBindingHandle[] bindingParams=null;
  if (inputList.get(0) instanceof ReportItemHandle) {
    ReportItemHandle inputHandle=(ReportItemHandle)inputList.get(0);
    List list=new ArrayList();
    for (Iterator iterator=inputHandle.paramBindingsIterator(); iterator.hasNext(); ) {
      ParamBindingHandle handle=(ParamBindingHandle)iterator.next();
      list.add(handle);
    }
    bindingParams=new ParamBindingHandle[list.size()];
    list.toArray(bindingParams);
  }
  provider.setBindingParams(bindingParams);
}",0.915032679738562
70825,"private void initLevelDialog(){
  if (input != null) {
    expressionEditor.setExpressionProvider(new CubeExpressionProvider(input));
  }
  if (input.getLevelType() == null) {
    try {
      input.setLevelType(DesignChoiceConstants.LEVEL_TYPE_DYNAMIC);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  refreshDynamicViewer();
  dataset=OlapUtil.getHierarchyDataset((TabularHierarchyHandle)input.getContainer());
  if (dataset != null)   attributeItems=OlapUtil.getDataFieldNames(dataset);
  resetEditorItems();
  if (input.getName() != null)   nameText.setText(input.getName());
  dynamicDataTypeCombo.setItems(getDataTypeDisplayNames());
  dynamicDataTypeCombo.setText(getDataTypeDisplayName(input.getDataType()));
  fieldCombo.setItems(OlapUtil.getDataFieldNames(dataset));
  if (input.getColumnName() != null)   fieldCombo.setText(input.getColumnName());
 else   fieldCombo.select(0);
  displayKeyCombo.setItems(OlapUtil.getDataFieldNames(dataset));
  displayKeyCombo.add(Messages.getString(""String_Node_Str""),0);
  if (input.getDisplayColumnName() != null) {
    displayKeyCombo.setText(input.getDisplayColumnName());
  }
 else   if (displayKeyCombo.getItemCount() > 0)   displayKeyCombo.select(0);
  staticDataTypeCombo.setItems(getDataTypeDisplayNames());
  staticNameText.setText(input.getName());
  staticDataTypeCombo.setText(getDataTypeDisplayName(input.getDataType()));
  refreshStaticViewer();
  if (input.getLevelType().equals(DesignChoiceConstants.LEVEL_TYPE_DYNAMIC)) {
    dynamicButton.setSelection(true);
    updateButtonStatus(dynamicButton);
  }
 else {
    staticButton.setSelection(true);
    updateButtonStatus(staticButton);
  }
}","private void initLevelDialog(){
  if (input != null) {
    expressionEditor.setExpressionProvider(new CubeExpressionProvider(input));
    if (input.getLevelType() == null) {
      try {
        input.setLevelType(DesignChoiceConstants.LEVEL_TYPE_DYNAMIC);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
    }
    refreshDynamicViewer();
    dataset=OlapUtil.getHierarchyDataset((TabularHierarchyHandle)input.getContainer());
    if (dataset != null)     attributeItems=OlapUtil.getDataFieldNames(dataset);
    resetEditorItems();
    if (input.getName() != null)     nameText.setText(input.getName());
    dynamicDataTypeCombo.setItems(getDataTypeDisplayNames());
    dynamicDataTypeCombo.setText(getDataTypeDisplayName(input.getDataType()));
    fieldCombo.setItems(OlapUtil.getDataFieldNames(dataset));
    if (input.getColumnName() != null)     fieldCombo.setText(input.getColumnName());
 else     fieldCombo.select(0);
    displayKeyCombo.setItems(OlapUtil.getDataFieldNames(dataset));
    displayKeyCombo.add(Messages.getString(""String_Node_Str""),0);
    if (input.getDisplayColumnName() != null) {
      displayKeyCombo.setText(input.getDisplayColumnName());
    }
 else     if (displayKeyCombo.getItemCount() > 0)     displayKeyCombo.select(0);
    staticDataTypeCombo.setItems(getDataTypeDisplayNames());
    staticNameText.setText(input.getName());
    staticDataTypeCombo.setText(getDataTypeDisplayName(input.getDataType()));
    refreshStaticViewer();
    if (input.getLevelType().equals(DesignChoiceConstants.LEVEL_TYPE_DYNAMIC)) {
      dynamicButton.setSelection(true);
      updateButtonStatus(dynamicButton);
    }
 else {
      staticButton.setSelection(true);
      updateButtonStatus(staticButton);
    }
  }
}",0.9763279445727484
70826,"/** 
 * @param root:The Query model object
 * @param editPart:The edit part currently selected
 * @param selectedObject:The selected Object
 */
public DeleteJoinAction(JoinConditionEditPart editPart,Object selectedObject){
  super(selectedObject);
  if (editPart instanceof JoinConditionEditPart) {
    this.editPart=editPart;
  }
}","/** 
 * @param root : The Query model object
 * @param editPart : The edit part currently selected
 * @param selectedObject : The selected Object
 */
public DeleteJoinAction(JoinConditionEditPart editPart,Object selectedObject){
  super(selectedObject);
  this.editPart=editPart;
}",0.8972267536704731
70827,"/** 
 * There is a content start from the offset, which parent start from the parentOffset. update the index for that object. 
 * @param parentOffset
 * @param offset
 * @throws IOException
 */
protected void updateIndex(IContent content) throws IOException {
  long index=cntOffset;
  long parent=-1;
  long previous=-1;
  IContent pContent=(IContent)content.getParent();
  if (pContent != null) {
    DocumentExtension pDocExt=(DocumentExtension)pContent.getExtension(IContent.DOCUMENT_EXTENSION);
    if (pDocExt != null) {
      parent=pDocExt.getIndex();
      long lastChild=pDocExt.getLastChild();
      if (lastChild != -1) {
        previous=lastChild;
      }
      pDocExt.setLastChild(index);
    }
 else {
      previous=rootOffset;
      rootOffset=index;
    }
  }
 else {
    previous=rootOffset;
    rootOffset=index;
  }
  DocumentExtension docExt=new DocumentExtension(index);
  docExt.setParent(parent);
  docExt.setPrevious(previous);
  content.setExtension(IContent.DOCUMENT_EXTENSION,docExt);
  cntStream.seek(VERSION_SIZE + index);
  cntStream.writeLong(parent);
  cntStream.writeLong(-1);
  cntStream.writeLong(-1);
  cntOffset+=INDEX_ENTRY_SIZE;
  if (previous == -1) {
    if (parent != -1) {
      cntStream.seek(VERSION_SIZE + parent + OFFSET_CHILD);
      cntStream.writeLong(index);
    }
  }
 else {
    cntStream.seek(VERSION_SIZE + previous + OFFSET_NEXT);
    cntStream.writeLong(index);
  }
}","/** 
 * There is a content start from the offset, which parent start from the parentOffset. update the index for that object. 
 * @param parentOffset
 * @param offset
 * @throws IOException
 */
protected void updateIndex(IContent content) throws IOException {
  long index=cntOffset;
  long previous=-1;
  DocumentExtension pDocExt=null;
  DocumentExtension docExt=new DocumentExtension(index);
  docExt.setContentId(content.getInstanceID().getUniqueID());
  content.setExtension(IContent.DOCUMENT_EXTENSION,docExt);
  IContent pContent=(IContent)content.getParent();
  if (pContent != null) {
    pDocExt=(DocumentExtension)pContent.getExtension(IContent.DOCUMENT_EXTENSION);
    if (pDocExt != null) {
      pDocExt.add(docExt);
      previous=docExt.getPrevious();
    }
 else {
      previous=rootOffset;
      rootOffset=index;
    }
  }
 else {
    previous=rootOffset;
    rootOffset=index;
  }
  cntStream.seek(VERSION_SIZE + index);
  cntStream.writeLong(docExt.getParent());
  cntStream.writeLong(docExt.getNext());
  cntStream.writeLong(-1);
  cntOffset+=INDEX_ENTRY_SIZE;
  if (previous == -1) {
    if (docExt.getParent() != -1) {
      cntStream.seek(VERSION_SIZE + docExt.getParent() + OFFSET_CHILD);
      cntStream.writeLong(index);
    }
  }
 else {
    cntStream.seek(VERSION_SIZE + previous + OFFSET_NEXT);
    cntStream.writeLong(index);
  }
}",0.589541547277937
70828,"public void setHyperlinkDef(HyperlinkDef def){
  this.hyperLink=def;
}","public void setHyperlinkDef(HyperlinkDef def){
  this.hyperLink=def;
  if (hyperLink != null) {
    style.setProperty(StyleConstant.COLOR_PROP,HYPERLINK_COLOR);
    style.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,HYPERLINK_UNDERLINE);
  }
}",0.445859872611465
70829,"/** 
 * @param dimAxisIndex
 * @return
 */
private int caculateOffset(int dimAxisIndex,boolean isStart){
  EdgeInfo edgeInfo=findCurrentEdgeInfo(relationMap.mirrorStartPosition - 1);
  int start=findOuterMostChildEdgeInfoIndex(relationMap.mirrorStartPosition - 1,edgeInfo);
  if (start < 0)   return start;
  for (int i=relationMap.mirrorStartPosition; i < this.dimAxis.length; i++) {
    start=start * this.relationMap.mirrorLength[i];
  }
  for (int k=relationMap.mirrorStartPosition; k <= dimAxisIndex; k++) {
    int offset=1;
    for (int i=k + 1; i < this.dimAxis.length; i++) {
      if (k == dimAxisIndex && !isStart)       offset=offset * (this.dimensionCursorPosition[k] + 1) * relationMap.mirrorLength[i];
 else       offset=offset * this.dimensionCursorPosition[k] * relationMap.mirrorLength[i];
    }
    if (k + 1 < this.dimAxis.length)     start+=offset;
  }
  return start;
}","/** 
 * @param dimAxisIndex
 * @return
 */
private int caculateOffset(int dimAxisIndex,boolean isStart){
  EdgeInfo edgeInfo=findCurrentEdgeInfo(relationMap.mirrorStartPosition - 1);
  int start=findOuterMostChildEdgeInfoIndex(relationMap.mirrorStartPosition - 1,edgeInfo);
  if (start < 0)   return start;
  for (int i=relationMap.mirrorStartPosition; i < this.dimAxis.length; i++) {
    start=start * this.relationMap.mirrorLength[i];
  }
  for (int k=relationMap.mirrorStartPosition; k <= dimAxisIndex; k++) {
    int offset=this.dimensionCursorPosition[k];
    if (!isStart && k == dimAxisIndex) {
      offset=this.dimensionCursorPosition[k] + 1;
    }
    for (int i=k + 1; i < this.dimAxis.length; i++) {
      offset=offset * relationMap.mirrorLength[i];
    }
    if (k + 1 < this.dimAxis.length)     start+=offset;
  }
  return start;
}",0.8140472078295913
70830,"/** 
 * @param axis
 * @param relationMap
 * @param fetcher
 */
DimensionTraverse(DimensionAxis[] axis,EdgeDimensionRelation relationMap,int edgeStart,int edgeEnd){
  this.dimAxis=axis;
  this.relationMap=relationMap;
  this.dimensionCursorPosition=new int[dimAxis.length];
  this.beforeFirst();
  this.fetcher=relationMap.fetcher;
  this.edgeStart=edgeStart;
  this.edgeEnd=edgeEnd;
  dimensionCursorPosition=findDimensionPosition(edgeStart - 1);
  endPosition=findDimensionPosition(edgeEnd);
}","/** 
 * @param axis
 * @param relationMap
 * @param fetcher
 */
DimensionTraverse(DimensionAxis[] axis,EdgeDimensionRelation relationMap,int edgeStart,int edgeEnd){
  this.dimAxis=axis;
  this.relationMap=relationMap;
  this.dimensionCursorPosition=new int[dimAxis.length];
  this.beforeFirst();
  this.fetcher=relationMap.fetcher;
  this.edgeStart=edgeStart;
  this.edgeEnd=edgeEnd;
  dimensionCursorPosition=findDimensionPosition(edgeStart - 1);
}",0.951271186440678
70831,"protected void writeSectionInP() throws IOException, BirtException {
  wordWriter.startSectionInParagraph();
  writeHeaderFooter();
  wordWriter.writePageProperties(pageHeight,pageWidth,headerHeight,footerHeight,topMargin,bottomMargin,leftMargin,rightMargin,orientation);
  wordWriter.endSectionInParagraph();
}","protected void writeSectionInP() throws IOException, BirtException {
  wordWriter.startSectionInParagraph();
  writeHeaderFooter();
  wordWriter.writePageProperties(pageHeight,pageWidth,headerHeight,footerHeight,topMargin,bottomMargin,leftMargin,rightMargin,orientation);
  wordWriter.writePageBorders(previousPage.getComputedStyle(),topMargin,bottomMargin,leftMargin,rightMargin);
  wordWriter.endSectionInParagraph();
}",0.8442622950819673
70832,"protected void writeSectionInBody() throws IOException, BirtException {
  wordWriter.startSection();
  writeHeaderFooter();
  wordWriter.writePageProperties(pageHeight,pageWidth,headerHeight,footerHeight,topMargin,bottomMargin,leftMargin,rightMargin,orientation);
  wordWriter.endSection();
}","protected void writeSectionInBody() throws IOException, BirtException {
  wordWriter.startSection();
  writeHeaderFooter();
  wordWriter.writePageProperties(pageHeight,pageWidth,headerHeight,footerHeight,topMargin,bottomMargin,leftMargin,rightMargin,orientation);
  wordWriter.writePageBorders(previousPage.getComputedStyle(),topMargin,bottomMargin,leftMargin,rightMargin);
  wordWriter.endSection();
}",0.8155619596541787
70833,"private void writeTableBorders(IStyle style){
  writer.openTag(""String_Node_Str"");
  writeBorders(style);
  writer.closeTag(""String_Node_Str"");
}","private void writeTableBorders(IStyle style){
  writer.openTag(""String_Node_Str"");
  writeBorders(style,0,0,0,0);
  writer.closeTag(""String_Node_Str"");
}",0.9731543624161074
70834,"private void writeSingleBorder(String type,String borderStyle,String color,CSSValue width){
  writer.openTag(""String_Node_Str"" + type);
  writeBorderProperty(borderStyle,color,width);
  writer.closeTag(""String_Node_Str"" + type);
}","private void writeSingleBorder(String type,String borderStyle,String color,CSSValue width,int margin){
  writer.openTag(""String_Node_Str"" + type);
  writeBorderProperty(borderStyle,color,width,margin);
  writer.closeTag(""String_Node_Str"" + type);
}",0.9623430962343096
70835,"private void writeParagraphBorders(IStyle style){
  writer.openTag(""String_Node_Str"");
  writeBorders(style);
  writer.closeTag(""String_Node_Str"");
}","private void writeParagraphBorders(IStyle style){
  writer.openTag(""String_Node_Str"");
  writeBorders(style,0,0,0,0);
  writer.closeTag(""String_Node_Str"");
}",0.9738562091503268
70836,"private void writeRunBorder(String borderStyle,String color,CSSValue borderWidth){
  writer.openTag(""String_Node_Str"");
  writeBorderProperty(borderStyle,color,borderWidth);
  writer.closeTag(""String_Node_Str"");
}","private void writeRunBorder(String borderStyle,String color,CSSValue borderWidth){
  writer.openTag(""String_Node_Str"");
  writeBorderProperty(borderStyle,color,borderWidth,0);
  writer.closeTag(""String_Node_Str"");
}",0.9953271028037384
70837,"private void writeBorderProperty(String style,String color,CSSValue width){
  writer.attribute(""String_Node_Str"",WordUtil.parseBorderStyle(style));
  writer.attribute(""String_Node_Str"",WordUtil.parseBorderSize(((FloatValue)width).getFloatValue()));
  writer.attribute(""String_Node_Str"",0);
  writer.attribute(""String_Node_Str"",WordUtil.parseColor(color));
}","private void writeBorderProperty(String style,String color,CSSValue width,int margin){
  writer.attribute(""String_Node_Str"",WordUtil.parseBorderStyle(style));
  writer.attribute(""String_Node_Str"",WordUtil.parseBorderSize(((FloatValue)width).getFloatValue()));
  writer.attribute(""String_Node_Str"",validateBorderSpace(margin));
  writer.attribute(""String_Node_Str"",WordUtil.parseColor(color));
}",0.948069241011984
70838,"private void writeBorders(IStyle style){
  String borderStyle=style.getBorderBottomStyle();
  if (hasBorder(borderStyle)) {
    writeSingleBorder(BOTTOM,borderStyle,style.getBorderBottomColor(),style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH));
  }
  borderStyle=style.getBorderTopStyle();
  if (hasBorder(borderStyle)) {
    writeSingleBorder(TOP,borderStyle,style.getBorderTopColor(),style.getProperty(StyleConstants.STYLE_BORDER_TOP_WIDTH));
  }
  borderStyle=style.getBorderLeftStyle();
  if (hasBorder(borderStyle)) {
    writeSingleBorder(LEFT,borderStyle,style.getBorderLeftColor(),style.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH));
  }
  borderStyle=style.getBorderRightStyle();
  if (hasBorder(borderStyle)) {
    writeSingleBorder(RIGHT,borderStyle,style.getBorderRightColor(),style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
  }
}","protected void writeBorders(IStyle style,int bottomMargin,int topMargin,int leftMargin,int rightMargin){
  String borderStyle=style.getBorderBottomStyle();
  if (hasBorder(borderStyle)) {
    writeSingleBorder(BOTTOM,borderStyle,style.getBorderBottomColor(),style.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH),bottomMargin);
  }
  borderStyle=style.getBorderTopStyle();
  if (hasBorder(borderStyle)) {
    writeSingleBorder(TOP,borderStyle,style.getBorderTopColor(),style.getProperty(StyleConstants.STYLE_BORDER_TOP_WIDTH),topMargin);
  }
  borderStyle=style.getBorderLeftStyle();
  if (hasBorder(borderStyle)) {
    writeSingleBorder(LEFT,borderStyle,style.getBorderLeftColor(),style.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH),leftMargin);
  }
  borderStyle=style.getBorderRightStyle();
  if (hasBorder(borderStyle)) {
    writeSingleBorder(RIGHT,borderStyle,style.getBorderRightColor(),style.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH),rightMargin);
  }
}",0.9342672413793104
70839,"private void writeCellBorders(IStyle style){
  writer.openTag(""String_Node_Str"");
  writeBorders(style);
  writer.closeTag(""String_Node_Str"");
}","private void writeCellBorders(IStyle style){
  writer.openTag(""String_Node_Str"");
  writeBorders(style,0,0,0,0);
  writer.closeTag(""String_Node_Str"");
}",0.972972972972973
70840,"/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  currentX-=getX(container);
  currentY-=getY(container);
  if (container instanceof PageArea) {
    BorderInfo[] borders=cacheBorderInfo(container);
    drawBorder(borders);
    pageGraphic.dispose();
  }
 else {
    if (container instanceof RowArea) {
      rowStyleStack.pop();
    }
    if (container instanceof TableArea) {
      drawTableBorder((TableArea)container);
    }
 else     if (!(container instanceof CellArea)) {
      BorderInfo[] borders=cacheBorderInfo(container);
      drawBorder(borders);
    }
    if (container.needClip()) {
      endClip();
    }
  }
}","/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  currentX-=getX(container);
  currentY-=getY(container);
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    if (container instanceof RowArea) {
      rowStyleStack.pop();
    }
    if (container instanceof TableArea) {
      drawTableBorder((TableArea)container);
    }
 else     if (!(container instanceof CellArea)) {
      BorderInfo[] borders=cacheBorderInfo(container);
      drawBorder(borders);
    }
    if (container.needClip()) {
      endClip();
    }
  }
}",0.5152354570637119
70841,"protected void createRoot(){
  currentContext.root=new PageArea(((PageContext)currentContext).pageContent);
  PageArea page=(PageArea)currentContext.root;
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
  }
  pageContentWidth=getDimensionValue(pageContent.getPageWidth());
  pageContentHeight=getDimensionValue(pageContent.getPageHeight());
  if (pageContentWidth <= 0) {
    pageContentWidth=DEFAULT_PAGE_WIDTH;
  }
  if (pageContentHeight <= 0) {
    pageContentHeight=DEFAULT_PAGE_HEIGHT;
  }
  page.setWidth(pageContentWidth);
  page.setHeight(pageContentHeight);
  ContainerArea pageRoot=new LogicContainerArea(report);
  rootLeft=getDimensionValue(pageContent.getMarginLeft(),pageContentWidth);
  rootTop=getDimensionValue(pageContent.getMarginTop(),pageContentWidth);
  rootLeft=Math.max(0,rootLeft);
  rootLeft=Math.min(pageContentWidth,rootLeft);
  rootTop=Math.max(0,rootTop);
  rootTop=Math.min(pageContentHeight,rootTop);
  pageRoot.setPosition(rootLeft,rootTop);
  int rootRight=getDimensionValue(pageContent.getMarginRight(),pageContentWidth);
  int rootBottom=getDimensionValue(pageContent.getMarginBottom(),pageContentWidth);
  rootRight=Math.max(0,rootRight);
  rootBottom=Math.max(0,rootBottom);
  if (rootLeft + rootRight > pageContentWidth) {
    rootRight=0;
  }
  if (rootTop + rootBottom > pageContentHeight) {
    rootBottom=0;
  }
  rootWidth=pageContentWidth - rootLeft - rootRight;
  rootHeight=pageContentHeight - rootTop - rootBottom;
  pageRoot.setWidth(rootWidth);
  pageRoot.setHeight(rootHeight);
  page.setRoot(pageRoot);
  int headerHeight=getDimensionValue(pageContent.getHeaderHeight(),pageRoot.getHeight());
  int headerWidth=pageRoot.getWidth();
  headerHeight=Math.max(0,headerHeight);
  headerHeight=Math.min(pageRoot.getHeight(),headerHeight);
  ContainerArea header=new LogicContainerArea(report);
  header.setHeight(headerHeight);
  header.setWidth(headerWidth);
  header.setPosition(0,0);
  pageRoot.addChild(header);
  page.setHeader(header);
  int footerHeight=getDimensionValue(pageContent.getFooterHeight(),pageRoot.getHeight());
  int footerWidth=pageRoot.getWidth();
  footerHeight=Math.max(0,footerHeight);
  footerHeight=Math.min(pageRoot.getHeight() - headerHeight,footerHeight);
  ContainerArea footer=new LogicContainerArea(report);
  footer.setHeight(footerHeight);
  footer.setWidth(footerWidth);
  footer.setPosition(0,pageRoot.getHeight() - footerHeight);
  pageRoot.addChild(footer);
  page.setFooter(footer);
  ContainerArea body=new LogicContainerArea(report);
  int bodyLeft=getDimensionValue(pageContent.getLeftWidth(),pageRoot.getWidth());
  bodyLeft=Math.max(0,bodyLeft);
  bodyLeft=Math.min(pageRoot.getWidth(),bodyLeft);
  body.setPosition(bodyLeft,headerHeight);
  int bodyRight=getDimensionValue(pageContent.getRightWidth(),pageRoot.getWidth());
  bodyRight=Math.max(0,bodyRight);
  bodyRight=Math.min(pageRoot.getWidth() - bodyLeft,bodyRight);
  body.setWidth(pageRoot.getWidth() - bodyLeft - bodyRight);
  body.setHeight(pageRoot.getHeight() - headerHeight - footerHeight);
  page.setBody(body);
  pageRoot.addChild(body);
  if (overFlowType == IPDFRenderOption.CLIP_CONTENT || overFlowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
    pageRoot.setNeedClip(true);
    page.getBody().setNeedClip(true);
  }
 else {
    pageRoot.setNeedClip(false);
  }
}","protected void createRoot(){
  currentContext.root=new PageArea(((PageContext)currentContext).pageContent);
  PageArea page=(PageArea)currentContext.root;
  int overFlowType=context.getPageOverflow();
  if (overFlowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
  }
  pageContentWidth=getDimensionValue(pageContent.getPageWidth());
  pageContentHeight=getDimensionValue(pageContent.getPageHeight());
  if (pageContentWidth <= 0) {
    pageContentWidth=DEFAULT_PAGE_WIDTH;
  }
  if (pageContentHeight <= 0) {
    pageContentHeight=DEFAULT_PAGE_HEIGHT;
  }
  page.setWidth(pageContentWidth);
  page.setHeight(pageContentHeight);
  ContainerArea pageRoot=(ContainerArea)AreaFactory.createBlockContainer(pageContent);
  rootLeft=getDimensionValue(pageContent.getMarginLeft(),pageContentWidth);
  rootTop=getDimensionValue(pageContent.getMarginTop(),pageContentWidth);
  rootLeft=Math.max(0,rootLeft);
  rootLeft=Math.min(pageContentWidth,rootLeft);
  rootTop=Math.max(0,rootTop);
  rootTop=Math.min(pageContentHeight,rootTop);
  pageRoot.setPosition(rootLeft,rootTop);
  int rootRight=getDimensionValue(pageContent.getMarginRight(),pageContentWidth);
  int rootBottom=getDimensionValue(pageContent.getMarginBottom(),pageContentWidth);
  rootRight=Math.max(0,rootRight);
  rootBottom=Math.max(0,rootBottom);
  if (rootLeft + rootRight > pageContentWidth) {
    rootRight=0;
  }
  if (rootTop + rootBottom > pageContentHeight) {
    rootBottom=0;
  }
  rootWidth=pageContentWidth - rootLeft - rootRight;
  rootHeight=pageContentHeight - rootTop - rootBottom;
  pageRoot.setWidth(rootWidth);
  pageRoot.setHeight(rootHeight);
  page.setRoot(pageRoot);
  int headerHeight=getDimensionValue(pageContent.getHeaderHeight(),pageRoot.getHeight());
  int headerWidth=pageRoot.getWidth();
  IStyle pageStyle=pageContent.getComputedStyle();
  int topBorderWidth=PropertyUtil.getDimensionValue(pageStyle.getProperty(StyleConstants.STYLE_BORDER_TOP_WIDTH));
  int bottomBorderWidth=PropertyUtil.getDimensionValue(pageStyle.getProperty(StyleConstants.STYLE_BORDER_BOTTOM_WIDTH));
  int leftBorderWidth=PropertyUtil.getDimensionValue(pageStyle.getProperty(StyleConstants.STYLE_BORDER_LEFT_WIDTH));
  int rightBorderWidth=PropertyUtil.getDimensionValue(pageStyle.getProperty(StyleConstants.STYLE_BORDER_RIGHT_WIDTH));
  int horizontalBorderWidth=leftBorderWidth + rightBorderWidth;
  headerHeight=Math.max(0,headerHeight);
  headerHeight=Math.min(pageRoot.getHeight(),headerHeight);
  ContainerArea header=new LogicContainerArea(report);
  header.setHeight(headerHeight - topBorderWidth);
  header.setWidth(headerWidth - horizontalBorderWidth);
  header.setPosition(leftBorderWidth,topBorderWidth);
  pageRoot.addChild(header);
  page.setHeader(header);
  int footerHeight=getDimensionValue(pageContent.getFooterHeight(),pageRoot.getHeight());
  int footerWidth=pageRoot.getWidth();
  footerHeight=Math.max(0,footerHeight);
  footerHeight=Math.min(pageRoot.getHeight() - headerHeight,footerHeight);
  ContainerArea footer=new LogicContainerArea(report);
  footer.setHeight(footerHeight - bottomBorderWidth);
  footer.setWidth(footerWidth - horizontalBorderWidth);
  footer.setPosition(leftBorderWidth,pageRoot.getHeight() - footerHeight - bottomBorderWidth);
  pageRoot.addChild(footer);
  page.setFooter(footer);
  ContainerArea body=new LogicContainerArea(report);
  int bodyLeft=getDimensionValue(pageContent.getLeftWidth(),pageRoot.getWidth());
  bodyLeft=Math.max(0,bodyLeft);
  bodyLeft=Math.min(pageRoot.getWidth(),bodyLeft);
  body.setPosition(bodyLeft + leftBorderWidth,headerHeight);
  int bodyRight=getDimensionValue(pageContent.getRightWidth(),pageRoot.getWidth());
  bodyRight=Math.max(0,bodyRight);
  bodyRight=Math.min(pageRoot.getWidth() - bodyLeft,bodyRight);
  body.setWidth(pageRoot.getWidth() - bodyLeft - bodyRight- horizontalBorderWidth);
  body.setHeight(pageRoot.getHeight() - headerHeight - footerHeight);
  page.setBody(body);
  pageRoot.addChild(body);
  if (overFlowType == IPDFRenderOption.CLIP_CONTENT || overFlowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
    pageRoot.setNeedClip(true);
    page.getBody().setNeedClip(true);
  }
 else {
    pageRoot.setNeedClip(false);
  }
}",0.7549355093445643
70842,"/** 
 * handle action to clear some old birt runtime files
 * @param webContentPath
 * @param monitor
 * @throws Exception
 */
protected void doClearAction(IPath webContentPath,IProgressMonitor monitor) throws Exception {
  IPath webPath=webContentPath;
  if (webPath.segmentCount() > 0)   webPath=webPath.removeFirstSegments(1);
  Map map=BirtWizardUtil.initConflictResources(null);
  Iterator it=map.keySet().iterator();
  while (it.hasNext()) {
    String folder=(String)it.next();
    if (folder == null)     continue;
    IPath path=webPath.append(folder);
    IFolder tempFolder=project.getFolder(path);
    if (tempFolder == null || !tempFolder.exists())     continue;
    List files=(List)map.get(folder);
    if (files == null || files.size() <= 0) {
      tempFolder.delete(true,monitor);
    }
 else {
      tempFolder.accept(new LibResourceVisitor(monitor,files),IResource.DEPTH_INFINITE,false);
    }
  }
}","/** 
 * handle action to clear some old birt runtime files
 * @param webContentPath
 * @param monitor
 * @throws Exception
 */
protected void doClearAction(IPath webContentPath,IProgressMonitor monitor) throws Exception {
  IPath webPath=webContentPath;
  if (webPath.segmentCount() > 0)   webPath=webPath.removeFirstSegments(1);
  Map map=BirtWizardUtil.initConflictResources(null);
  Iterator it=map.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    String folder=(String)entry.getKey();
    if (folder == null)     continue;
    IPath path=webPath.append(folder);
    IFolder tempFolder=project.getFolder(path);
    if (tempFolder == null || !tempFolder.exists())     continue;
    List files=(List)entry.getValue();
    if (files == null || files.size() <= 0) {
      tempFolder.delete(true,monitor);
    }
 else {
      tempFolder.accept(new LibResourceVisitor(monitor,files),IResource.DEPTH_INFINITE,false);
    }
  }
}",0.9533898305084746
70843,"/** 
 * Do initialize page properties map
 */
protected void initializeProperties(){
  WebArtifactUtil.setContextParamValue(properties,BIRT_RESOURCE_FOLDER_SETTING,txtResourceFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_WORKING_FOLDER_SETTING,txtWorkingFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_DOCUMENT_FOLDER_SETTING,txtDocumentFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_REPORT_ACCESSONLY_SETTING,new String(BLANK_STRING + btAccessOnly.getSelection()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_IMAGE_FOLDER_SETTING,txtImageFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_SCRIPTLIB_FOLDER_SETTING,txtScriptlibFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_LOG_FOLDER_SETTING,txtLogFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_OVERWRITE_DOCUMENT_SETTING,new String(BLANK_STRING + btOverwrite.getSelection()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_ROWS_SETTING,DataUtil.getNumberSetting(txtMaxRows.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_ROWLEVELS_SETTING,DataUtil.getNumberSetting(txtMaxRowLevels.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_COLUMNLEVELS_SETTING,DataUtil.getNumberSetting(txtMaxColumnLevels.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_CUBE_MEMORYSIZE_SETTING,DataUtil.getNumberSetting(txtCubeMemorySize.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_LOG_LEVEL_SETTING,cbLogLevel.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_PRINT_SERVER_SETTING,cbPrintServer.getText());
}","/** 
 * Do initialize page properties map
 */
protected void initializeProperties(){
  WebArtifactUtil.setContextParamValue(properties,BIRT_RESOURCE_FOLDER_SETTING,txtResourceFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_WORKING_FOLDER_SETTING,txtWorkingFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_DOCUMENT_FOLDER_SETTING,txtDocumentFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_REPORT_ACCESSONLY_SETTING,BLANK_STRING + btAccessOnly.getSelection());
  WebArtifactUtil.setContextParamValue(properties,BIRT_IMAGE_FOLDER_SETTING,txtImageFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_SCRIPTLIB_FOLDER_SETTING,txtScriptlibFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_LOG_FOLDER_SETTING,txtLogFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_OVERWRITE_DOCUMENT_SETTING,BLANK_STRING + btOverwrite.getSelection());
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_ROWS_SETTING,DataUtil.getNumberSetting(txtMaxRows.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_ROWLEVELS_SETTING,DataUtil.getNumberSetting(txtMaxRowLevels.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_COLUMNLEVELS_SETTING,DataUtil.getNumberSetting(txtMaxColumnLevels.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_CUBE_MEMORYSIZE_SETTING,DataUtil.getNumberSetting(txtCubeMemorySize.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_LOG_LEVEL_SETTING,cbLogLevel.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_PRINT_SERVER_SETTING,cbPrintServer.getText());
}",0.97024504084014
70844,"/** 
 * Create ""BIRT_OVERWRITE_DOCUMENT"" configuration group
 * @param parent
 */
public Button createOverwriteGroup(Composite parent){
  Button btOverwrite=new Button(parent,SWT.CHECK);
  boolean defaultValue=DataUtil.getBoolean(WebArtifactUtil.getContextParamValue(properties,BIRT_OVERWRITE_DOCUMENT_SETTING));
  btOverwrite.setSelection(defaultValue);
  btOverwrite.setText(BirtWTPMessages.BIRTConfiguration_overwrite_message);
  btOverwrite.setLayoutData(new GridData(GridData.END));
  btOverwrite.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      WebArtifactUtil.setContextParamValue(properties,BIRT_OVERWRITE_DOCUMENT_SETTING,new String(BLANK_STRING + ((Button)e.getSource()).getSelection()));
    }
  }
);
  return btOverwrite;
}","/** 
 * Create ""BIRT_OVERWRITE_DOCUMENT"" configuration group
 * @param parent
 */
public Button createOverwriteGroup(Composite parent){
  Button btOverwrite=new Button(parent,SWT.CHECK);
  boolean defaultValue=DataUtil.getBoolean(WebArtifactUtil.getContextParamValue(properties,BIRT_OVERWRITE_DOCUMENT_SETTING));
  btOverwrite.setSelection(defaultValue);
  btOverwrite.setText(BirtWTPMessages.BIRTConfiguration_overwrite_message);
  btOverwrite.setLayoutData(new GridData(GridData.END));
  btOverwrite.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      WebArtifactUtil.setContextParamValue(properties,BIRT_OVERWRITE_DOCUMENT_SETTING,BLANK_STRING + ((Button)e.getSource()).getSelection());
    }
  }
);
  return btOverwrite;
}",0.9923566878980892
70845,"/** 
 * Create ""WORKING_FOLDER_ACCESS_ONLY"" configuration group
 * @param parent
 */
public Button createAccessOnlyGroup(Composite parent){
  Button btAccessOnly=new Button(parent,SWT.CHECK);
  boolean defaultValue=DataUtil.getBoolean(WebArtifactUtil.getContextParamValue(properties,BIRT_REPORT_ACCESSONLY_SETTING));
  btAccessOnly.setSelection(defaultValue);
  btAccessOnly.setText(BirtWTPMessages.BIRTConfiguration_report_access_message);
  btAccessOnly.setLayoutData(new GridData(GridData.END));
  btAccessOnly.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      WebArtifactUtil.setContextParamValue(properties,BIRT_REPORT_ACCESSONLY_SETTING,new String(BLANK_STRING + ((Button)e.getSource()).getSelection()));
    }
  }
);
  return btAccessOnly;
}","/** 
 * Create ""WORKING_FOLDER_ACCESS_ONLY"" configuration group
 * @param parent
 */
public Button createAccessOnlyGroup(Composite parent){
  Button btAccessOnly=new Button(parent,SWT.CHECK);
  boolean defaultValue=DataUtil.getBoolean(WebArtifactUtil.getContextParamValue(properties,BIRT_REPORT_ACCESSONLY_SETTING));
  btAccessOnly.setSelection(defaultValue);
  btAccessOnly.setText(BirtWTPMessages.BIRTConfiguration_report_access_message);
  btAccessOnly.setLayoutData(new GridData(GridData.END));
  btAccessOnly.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      WebArtifactUtil.setContextParamValue(properties,BIRT_REPORT_ACCESSONLY_SETTING,BLANK_STRING + ((Button)e.getSource()).getSelection());
    }
  }
);
  return btAccessOnly;
}",0.9924717691342536
70846,"/** 
 * Do initialize page properties map
 */
protected void initializeProperties(){
  WebArtifactUtil.setContextParamValue(properties,BIRT_RESOURCE_FOLDER_SETTING,txtResourceFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_WORKING_FOLDER_SETTING,txtWorkingFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_DOCUMENT_FOLDER_SETTING,txtDocumentFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_REPORT_ACCESSONLY_SETTING,new String(BLANK_STRING + btAccessOnly.getSelection()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_IMAGE_FOLDER_SETTING,txtImageFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_SCRIPTLIB_FOLDER_SETTING,txtScriptlibFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_LOG_FOLDER_SETTING,txtLogFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_OVERWRITE_DOCUMENT_SETTING,new String(BLANK_STRING + btOverwrite.getSelection()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_ROWS_SETTING,DataUtil.getNumberSetting(txtMaxRows.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_ROWLEVELS_SETTING,DataUtil.getNumberSetting(txtMaxRowLevels.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_COLUMNLEVELS_SETTING,DataUtil.getNumberSetting(txtMaxColumnLevels.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_CUBE_MEMORYSIZE_SETTING,DataUtil.getNumberSetting(txtCubeMemorySize.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_LOG_LEVEL_SETTING,cbLogLevel.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_PRINT_SERVER_SETTING,cbPrintServer.getText());
}","/** 
 * Do initialize page properties map
 */
protected void initializeProperties(){
  WebArtifactUtil.setContextParamValue(properties,BIRT_RESOURCE_FOLDER_SETTING,txtResourceFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_WORKING_FOLDER_SETTING,txtWorkingFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_DOCUMENT_FOLDER_SETTING,txtDocumentFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_REPORT_ACCESSONLY_SETTING,BLANK_STRING + btAccessOnly.getSelection());
  WebArtifactUtil.setContextParamValue(properties,BIRT_IMAGE_FOLDER_SETTING,txtImageFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_SCRIPTLIB_FOLDER_SETTING,txtScriptlibFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_LOG_FOLDER_SETTING,txtLogFolder.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_OVERWRITE_DOCUMENT_SETTING,BLANK_STRING + btOverwrite.getSelection());
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_ROWS_SETTING,DataUtil.getNumberSetting(txtMaxRows.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_ROWLEVELS_SETTING,DataUtil.getNumberSetting(txtMaxRowLevels.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_MAX_COLUMNLEVELS_SETTING,DataUtil.getNumberSetting(txtMaxColumnLevels.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_CUBE_MEMORYSIZE_SETTING,DataUtil.getNumberSetting(txtCubeMemorySize.getText()));
  WebArtifactUtil.setContextParamValue(properties,BIRT_LOG_LEVEL_SETTING,cbLogLevel.getText());
  WebArtifactUtil.setContextParamValue(properties,BIRT_PRINT_SERVER_SETTING,cbPrintServer.getText());
}",0.97024504084014
70847,"private void writeHeaderFooter() throws IOException, BirtException {
  if (previousPage.getPageHeader() != null) {
    SimpleMasterPageDesign master=(SimpleMasterPageDesign)previousPage.getGenerateBy();
    wordWriter.startHeader(!master.isShowHeaderOnFirst());
    contentVisitor.visitChildren(previousPage.getPageHeader(),null);
    wordWriter.endHeader();
  }
  if (previousPage.getPageFooter() != null) {
    wordWriter.startFooter();
    contentVisitor.visitChildren(previousPage.getPageFooter(),null);
    wordWriter.endFooter();
  }
}","private void writeHeaderFooter() throws IOException, BirtException {
  if (previousPage.getPageHeader() != null) {
    SimpleMasterPageDesign master=(SimpleMasterPageDesign)previousPage.getGenerateBy();
    wordWriter.startHeader(!master.isShowHeaderOnFirst(),headerHeight,contentWidth);
    contentVisitor.visitChildren(previousPage.getPageHeader(),null);
    wordWriter.endHeader();
  }
  if (previousPage.getPageFooter() != null) {
    wordWriter.startFooter(footerHeight,contentWidth);
    contentVisitor.visitChildren(previousPage.getPageFooter(),null);
    wordWriter.endFooter();
  }
}",0.942630185348632
70848,void startFooter() throws IOException ;,"void startFooter(int footerHeight,int footerWidth) throws IOException ;",0.7090909090909091
70849,void startHeader(boolean showHeaderOnFirst) throws IOException ;,"void startHeader(boolean showHeaderOnFirst,int headerHeight,int headerWidth) throws IOException ;",0.7950310559006211
70850,"public void endHeader(){
  writer.closeTag(""String_Node_Str"");
}","public void endHeader(){
  endHeaderFooterContainer();
  writer.closeTag(""String_Node_Str"");
}",0.810126582278481
70851,"public void startFooter(){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
}","public void startFooter(int footerHeight,int footerWidth){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  startHeaderFooterContainer(footerHeight,footerWidth);
}",0.7349397590361446
70852,"public void endFooter(){
  writer.closeTag(""String_Node_Str"");
}","public void endFooter(){
  endHeaderFooterContainer();
  writer.closeTag(""String_Node_Str"");
}",0.810126582278481
70853,"public void startHeader(boolean showHeaderOnFirst){
  writer.openTag(""String_Node_Str"");
  if (showHeaderOnFirst) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
 else   writer.attribute(""String_Node_Str"",""String_Node_Str"");
}","public void startHeader(boolean showHeaderOnFirst,int headerHeight,int headerWidth){
  writer.openTag(""String_Node_Str"");
  if (showHeaderOnFirst) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
 else   writer.attribute(""String_Node_Str"",""String_Node_Str"");
  startHeaderFooterContainer(headerHeight,headerWidth);
}",0.9001122334455668
70854,"protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(4,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,ComboModify);
  expression.setItems(getDataSetColumns());
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  expression.addMouseListener(new MouseAdapter(){
    public void mouseUp(    MouseEvent e){
      if (expression.getItem(0).length() == 0 && tipsForCube != null) {
        updateMessage(tipsForCube,IMessageProvider.INFORMATION);
        tipsForCube=null;
      }
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
      if (!expression.getText().equals(fCurrentExpr)) {
        needRefreshList=true;
        fCurrentExpr=expression.getText();
      }
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  UIUtil.setExpressionButtonImage(expBuilder);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(OpoertorSelection);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(4,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,ComboModify);
  expression.setItems(getDataSetColumns());
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
      expression.setText(getExpression(expression.getText()));
    }
  }
);
  expression.addMouseListener(new MouseAdapter(){
    public void mouseUp(    MouseEvent e){
      if (expression.getItem(0).length() == 0 && tipsForCube != null) {
        updateMessage(tipsForCube,IMessageProvider.INFORMATION);
        tipsForCube=null;
      }
    }
  }
);
  expression.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
      if (!expression.getText().equals(fCurrentExpr)) {
        needRefreshList=true;
        fCurrentExpr=expression.getText();
      }
    }
  }
);
  Button expBuilder=new Button(condition,SWT.PUSH);
  gdata=new GridData();
  gdata.heightHint=20;
  gdata.widthHint=20;
  expBuilder.setLayoutData(gdata);
  UIUtil.setExpressionButtonImage(expBuilder);
  expBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
  expBuilder.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editValue(expression);
    }
  }
);
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(OpoertorSelection);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9889917875240258
70855,"protected void okPressed(){
  try {
    if (inputHandle == null) {
      FilterConditionElementHandle filter=DesignElementFactory.getInstance().newFilterConditionElement();
      filter.setProperty(IFilterConditionElementModel.OPERATOR_PROP,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      filter.setExpr(getExpression(expression.getText()));
      if (valueVisible == 3) {
        filter.setValue1(valueList);
        filter.setValue2(""String_Node_Str"");
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          filter.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          filter.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          filter.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          filter.setValue2(NULL_STRING);
        }
      }
      PropertyHandle propertyHandle=designHandle.getPropertyHandle(ChartReportItemUtil.PROPERTY_CUBE_FILTER);
      propertyHandle.add(filter);
    }
 else {
      inputHandle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible == 3) {
        inputHandle.setValue1(valueList);
        inputHandle.setValue2(NULL_STRING);
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          inputHandle.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          inputHandle.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          inputHandle.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          inputHandle.setValue2(NULL_STRING);
        }
      }
      inputHandle.setExpr(getExpression(expression.getText()));
    }
  }
 catch (  Exception e) {
    WidgetUtil.processError(getShell(),e);
  }
  super.okPressed();
}","protected void okPressed(){
  try {
    if (inputHandle == null) {
      FilterConditionElementHandle filter=DesignElementFactory.getInstance().newFilterConditionElement();
      filter.setProperty(IFilterConditionElementModel.OPERATOR_PROP,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      filter.setExpr(expression.getText());
      if (valueVisible == 3) {
        filter.setValue1(valueList);
        filter.setValue2(""String_Node_Str"");
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          filter.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          filter.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          filter.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          filter.setValue2(NULL_STRING);
        }
      }
      PropertyHandle propertyHandle=designHandle.getPropertyHandle(ChartReportItemUtil.PROPERTY_CUBE_FILTER);
      propertyHandle.add(filter);
    }
 else {
      inputHandle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible == 3) {
        inputHandle.setValue1(valueList);
        inputHandle.setValue2(NULL_STRING);
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          inputHandle.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          inputHandle.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          inputHandle.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          inputHandle.setValue2(NULL_STRING);
        }
      }
      inputHandle.setExpr(expression.getText());
    }
  }
 catch (  Exception e) {
    WidgetUtil.processError(getShell(),e);
  }
  super.okPressed();
}",0.981637717121588
70856,"/** 
 * SYNC the control value according to the handle.
 */
protected void syncViewProperties(){
  expression.setText(DEUtil.resolveNull(getDisplayExpression(inputHandle.getExpr())));
  operator.select(getIndexForOperatorValue(inputHandle.getOperator()));
  valueVisible=determineValueVisible(inputHandle.getOperator());
  if (valueVisible == 3) {
    createValueListComposite(operator.getParent());
    valueList=new ArrayList(inputHandle.getValue1List());
    tableViewer.setInput(valueList);
  }
 else {
    create2ValueComposite(operator.getParent());
    expressionValue1.setText(DEUtil.resolveNull(inputHandle.getValue1()));
    expressionValue2.setText(DEUtil.resolveNull(inputHandle.getValue2()));
  }
  if (valueVisible == 0) {
    expressionValue1.setVisible(false);
    expressionValue2.setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 1) {
    expressionValue1.setVisible(true);
    expressionValue2.setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 2) {
    expressionValue1.setVisible(true);
    expressionValue2.setVisible(true);
    ;
    andLable.setVisible(true);
    andLable.setEnabled(true);
  }
 else   if (valueVisible == 3) {
    if (expression.getText().length() == 0) {
      valueListComposite.setEnabled(false);
    }
 else {
      valueListComposite.setEnabled(true);
    }
  }
}","/** 
 * SYNC the control value according to the handle.
 */
protected void syncViewProperties(){
  expression.setText(DEUtil.resolveNull(inputHandle.getExpr()));
  operator.select(getIndexForOperatorValue(inputHandle.getOperator()));
  valueVisible=determineValueVisible(inputHandle.getOperator());
  if (valueVisible == 3) {
    createValueListComposite(operator.getParent());
    valueList=new ArrayList(inputHandle.getValue1List());
    tableViewer.setInput(valueList);
  }
 else {
    create2ValueComposite(operator.getParent());
    expressionValue1.setText(DEUtil.resolveNull(inputHandle.getValue1()));
    expressionValue2.setText(DEUtil.resolveNull(inputHandle.getValue2()));
  }
  if (valueVisible == 0) {
    expressionValue1.setVisible(false);
    expressionValue2.setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 1) {
    expressionValue1.setVisible(true);
    expressionValue2.setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 2) {
    expressionValue1.setVisible(true);
    expressionValue2.setVisible(true);
    ;
    andLable.setVisible(true);
    andLable.setEnabled(true);
  }
 else   if (valueVisible == 3) {
    if (expression.getText().length() == 0) {
      valueListComposite.setEnabled(false);
    }
 else {
      valueListComposite.setEnabled(true);
    }
  }
}",0.9824046920821116
70857,"private Map<String,String> getChartExprDefinitions(ExtendedItemHandle handle) throws ExtendedElementException {
  Map<String,String> exprMap=new LinkedHashMap<String,String>();
  IReportItem item=handle.getReportItem();
  Chart cm;
  if (context == null) {
    cm=(Chart)((ChartReportItemImpl)item).getProperty(ChartReportItemConstants.PROPERTY_CHART);
  }
 else {
    cm=context.getModel();
  }
  SeriesDefinition sd=ChartUIUtil.getBaseSeriesDefinitions(cm).get(0);
  Query query=(Query)sd.getDesignTimeSeries().getDataDefinition().get(0);
  if (query != null && query.getDefinition() != null && !""String_Node_Str"".equals(query.getDefinition())) {
    exprMap.put(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"") + query.getDefinition(),query.getDefinition());
  }
  List<SeriesDefinition> sdList=ChartUIUtil.getAllOrthogonalSeriesDefinitions(cm);
  if (sdList.size() <= 0) {
    return exprMap;
  }
  Query q=sdList.get(0).getQuery();
  if (q != null && q.getDefinition() != null && !""String_Node_Str"".equals(q.getDefinition())) {
    exprMap.put(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"") + q.getDefinition(),q.getDefinition());
  }
  for (Iterator<SeriesDefinition> iter=sdList.iterator(); iter.hasNext(); ) {
    SeriesDefinition sDefintion=iter.next();
    for (Iterator i=sDefintion.getDesignTimeSeries().getDataDefinition().iterator(); i.hasNext(); ) {
      query=(Query)i.next();
      if (query != null && query.getDefinition() != null && !""String_Node_Str"".equals(query.getDefinition())) {
        exprMap.put(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"") + query.getDefinition(),query.getDefinition());
      }
    }
  }
  return exprMap;
}","private Map<String,String> getChartExprDefinitions(ExtendedItemHandle handle) throws ExtendedElementException {
  Map<String,String> exprMap=new LinkedHashMap<String,String>();
  IReportItem item=handle.getReportItem();
  Chart cm;
  if (context == null) {
    cm=(Chart)((ChartReportItemImpl)item).getProperty(ChartReportItemConstants.PROPERTY_CHART);
  }
 else {
    cm=context.getModel();
  }
  SeriesDefinition sd=ChartUIUtil.getBaseSeriesDefinitions(cm).get(0);
  Query query=sd.getDesignTimeSeries().getDataDefinition().get(0);
  if (query != null && query.getDefinition() != null && !""String_Node_Str"".equals(query.getDefinition())) {
    exprMap.put(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"") + query.getDefinition(),query.getDefinition());
  }
  List<SeriesDefinition> sdList=ChartUIUtil.getAllOrthogonalSeriesDefinitions(cm);
  if (sdList.size() <= 0) {
    return exprMap;
  }
  Query q=sdList.get(0).getQuery();
  if (q != null && q.getDefinition() != null && !""String_Node_Str"".equals(q.getDefinition())) {
    exprMap.put(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"") + q.getDefinition(),q.getDefinition());
  }
  for (Iterator<SeriesDefinition> iter=sdList.iterator(); iter.hasNext(); ) {
    SeriesDefinition sDefintion=iter.next();
    for (Iterator i=sDefintion.getDesignTimeSeries().getDataDefinition().iterator(); i.hasNext(); ) {
      query=(Query)i.next();
      if (query != null && query.getDefinition() != null && !""String_Node_Str"".equals(query.getDefinition())) {
        exprMap.put(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString(""String_Node_Str"") + query.getDefinition(),query.getDefinition());
      }
    }
  }
  return exprMap;
}",0.9980017128175848
70858,"/** 
 * Get the default constraint of area figure.
 * @return
 */
private Rectangle getConstraint(){
  IFigure parent=((MasterPageEditPart)getParent()).getFigure();
  Rectangle region=parent.getClientArea();
  Rectangle rect=new Rectangle();
  rect.height=-1;
  rect.width=region.width;
  SimpleMasterPageHandle mphandle=((SimpleMasterPageHandle)((MasterPageEditPart)getParent()).getModel());
  if (((SlotHandle)getModel()).getSlotID() == SimpleMasterPageHandle.PAGE_HEADER_SLOT) {
    if (mphandle.getPropertyHandle(SimpleMasterPageHandle.HEADER_HEIGHT_PROP).isSet()) {
      DimensionHandle handle=mphandle.getHeaderHeight();
      rect.height=(int)DEUtil.convertoToPixel(handle);
    }
  }
 else {
    if (mphandle.getPropertyHandle(SimpleMasterPageHandle.FOOTER_HEIGHT_PROP).isSet()) {
      DimensionHandle handle=mphandle.getFooterHeight();
      rect.height=(int)DEUtil.convertoToPixel(handle);
    }
  }
  if (((SlotHandle)getModel()).getSlotID() == SimpleMasterPageHandle.PAGE_HEADER_SLOT) {
    rect.setLocation(0,0);
  }
 else {
    rect.setLocation(-1,-1);
  }
  return rect;
}","/** 
 * Get the default constraint of area figure.
 * @return
 */
private Rectangle getConstraint(){
  IFigure parent=((MasterPageEditPart)getParent()).getFigure();
  Rectangle region=parent.getClientArea();
  Rectangle rect=new Rectangle();
  rect.height=-1;
  rect.width=region.width;
  SimpleMasterPageHandle mphandle=((SimpleMasterPageHandle)((MasterPageEditPart)getParent()).getModel());
  if (((SlotHandle)getModel()).getSlotID() == SimpleMasterPageHandle.PAGE_HEADER_SLOT) {
    if (mphandle.getPropertyHandle(SimpleMasterPageHandle.HEADER_HEIGHT_PROP).isSet()) {
      DimensionHandle handle=mphandle.getHeaderHeight();
      rect.height=getHeight(handle);
    }
  }
 else {
    if (mphandle.getPropertyHandle(SimpleMasterPageHandle.FOOTER_HEIGHT_PROP).isSet()) {
      DimensionHandle handle=mphandle.getFooterHeight();
      rect.height=getHeight(handle);
    }
  }
  if (((SlotHandle)getModel()).getSlotID() == SimpleMasterPageHandle.PAGE_HEADER_SLOT) {
    rect.setLocation(0,0);
  }
 else {
    rect.setLocation(-1,-1);
  }
  return rect;
}",0.9663865546218487
70859,"/** 
 * Unload any resources associated with the graphic context
 */
public void flush(){
  StringBuffer buffer=new StringBuffer(EventHandlers.content.toString());
  codeScript.appendChild(dom.createCDATASection(buffer.append(scriptBuffer).toString()));
  buffer=new StringBuffer(EventHandlers.styles.toString());
  styles.appendChild(dom.createCDATASection(buffer.append(styleBuffer).toString()));
  scriptBuffer=new StringBuffer();
  styleBuffer=new StringBuffer();
}","/** 
 * Unload any resources associated with the graphic context
 */
public void flush(){
  StringBuffer buffer=new StringBuffer(EventHandlers.CONTENT.toString());
  codeScript.appendChild(dom.createCDATASection(buffer.append(scriptBuffer).toString()));
  buffer=new StringBuffer(EventHandlers.STYLES.toString());
  styles.appendChild(dom.createCDATASection(buffer.append(styleBuffer).toString()));
  scriptBuffer=new StringBuffer();
  styleBuffer=new StringBuffer();
}",0.9722814498933902
70860,"/** 
 * @return Returns the url.
 */
public String getUrl(){
  if (url == null) {
    if (data != null) {
      return BASE64 + new String(Base64.encodeBase64(data));
    }
  }
  return url.toExternalForm();
}","/** 
 * @return Returns the url.
 */
public String getUrl(){
  if (url == null) {
    if (data != null) {
      return BASE64 + new String(Base64.encodeBase64(data));
    }
 else {
      return ""String_Node_Str"";
    }
  }
  return url.toExternalForm();
}",0.9008620689655172
70861,"/** 
 * Uses IDataRowExpressionEvaluator to create a ResultSetWrapper
 * @return A wrapper of the chart resultset
 * @throws ChartException
 */
protected ResultSetWrapper mapToChartResultSet(IDataRowExpressionEvaluator idre,Chart cm) throws ChartException {
  ResultSetWrapper rsw=null;
  GroupingLookupHelper lhmLookup=new GroupingLookupHelper(cm,iae,rtc,idre);
  List liResultSet=null;
  List<String> co=null;
  co=lhmLookup.getExpressions();
  try {
    liResultSet=evaluateRowSet(idre,co.toArray());
  }
 catch (  Exception e) {
    if (e instanceof ChartException) {
      throw (ChartException)e;
    }
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
  }
  final GroupKey[] orthogonalGroupKeys=findGroupKeys(cm,lhmLookup);
  if (idre instanceof IGroupedDataRowExpressionEvaluator && ((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0) != null) {
    int[] groupBreaks=new int[]{};
    if (orthogonalGroupKeys != null && orthogonalGroupKeys.length > 0) {
      groupBreaks=((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0);
    }
    formatBaseSeriesData(cm,lhmLookup,liResultSet);
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys,groupBreaks);
  }
 else {
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys);
    SeriesDefinition sdBase=null;
    SeriesDefinition sdValue=null;
    boolean bBaseGrouping=false;
    AggregationExpressionHelper aggHelper=new AggregationExpressionHelper();
    if (cm instanceof ChartWithAxes) {
      ChartWithAxes cwa=(ChartWithAxes)cm;
      Axis[] axaBase=cwa.getBaseAxes();
      Axis[] axaOrthogonal=null;
      for (int j=0; j < axaBase.length; j++) {
        sdBase=axaBase[j].getSeriesDefinitions().get(0);
        axaOrthogonal=cwa.getOrthogonalAxes(axaBase[j],true);
        bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
        for (int i=0; i < axaOrthogonal.length; i++) {
          aggHelper.addSeriesDefinitions(axaOrthogonal[i].getSeriesDefinitions(),lhmLookup);
        }
      }
      sdValue=cwa.getOrthogonalAxes(axaBase[0],true)[0].getSeriesDefinitions().get(0);
    }
 else     if (cm instanceof ChartWithoutAxes) {
      ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
      sdBase=cwoa.getSeriesDefinitions().get(0);
      bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
      aggHelper.addSeriesDefinitions(sdBase.getSeriesDefinitions(),lhmLookup);
      sdValue=sdBase.getSeriesDefinitions().get(0);
    }
    if (bBaseGrouping && aggHelper.getDataDefinitionsForBaseGrouping().size() > 0) {
      aggHelper.addAggregation(sdBase.getGrouping().getAggregateExpression(),aggHelper.getDataDefinitionsForBaseGrouping());
    }
    String[] aggregationExp=aggHelper.getAggregations();
    String[] saExpressionKeys=aggHelper.getDataDefinitions();
    if (idre instanceof IGroupedDataRowExpressionEvaluator) {
      if (((IGroupedDataRowExpressionEvaluator)idre).needOptionalGrouping()) {
        rsw.applyValueSeriesGroupingNSorting(sdValue,aggregationExp,saExpressionKeys);
      }
      if (((IGroupedDataRowExpressionEvaluator)idre).needCategoryGrouping()) {
        rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggregationExp,saExpressionKeys);
      }
    }
 else {
      rsw.applyValueSeriesGroupingNSorting(sdValue,aggregationExp,saExpressionKeys);
      rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggregationExp,saExpressionKeys);
    }
    aggHelper.dispose();
  }
  return rsw;
}","/** 
 * Uses IDataRowExpressionEvaluator to create a ResultSetWrapper
 * @return A wrapper of the chart resultset
 * @throws ChartException
 */
protected ResultSetWrapper mapToChartResultSet(IDataRowExpressionEvaluator idre,Chart cm) throws ChartException {
  ResultSetWrapper rsw=null;
  GroupingLookupHelper lhmLookup=new GroupingLookupHelper(cm,iae,rtc,idre);
  List liResultSet=null;
  List<String> co=null;
  co=lhmLookup.getExpressions();
  try {
    liResultSet=evaluateRowSet(idre,co.toArray());
  }
 catch (  RuntimeException e) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
  }
  final GroupKey[] orthogonalGroupKeys=findGroupKeys(cm,lhmLookup);
  if (idre instanceof IGroupedDataRowExpressionEvaluator && ((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0) != null) {
    int[] groupBreaks=new int[]{};
    if (orthogonalGroupKeys != null && orthogonalGroupKeys.length > 0) {
      groupBreaks=((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0);
    }
    formatBaseSeriesData(cm,lhmLookup,liResultSet);
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys,groupBreaks);
  }
 else {
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys);
    SeriesDefinition sdBase=null;
    SeriesDefinition sdValue=null;
    boolean bBaseGrouping=false;
    AggregationExpressionHelper aggHelper=new AggregationExpressionHelper();
    if (cm instanceof ChartWithAxes) {
      ChartWithAxes cwa=(ChartWithAxes)cm;
      Axis[] axaBase=cwa.getBaseAxes();
      Axis[] axaOrthogonal=null;
      for (int j=0; j < axaBase.length; j++) {
        sdBase=axaBase[j].getSeriesDefinitions().get(0);
        axaOrthogonal=cwa.getOrthogonalAxes(axaBase[j],true);
        bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
        for (int i=0; i < axaOrthogonal.length; i++) {
          aggHelper.addSeriesDefinitions(axaOrthogonal[i].getSeriesDefinitions(),lhmLookup);
        }
      }
      sdValue=cwa.getOrthogonalAxes(axaBase[0],true)[0].getSeriesDefinitions().get(0);
    }
 else     if (cm instanceof ChartWithoutAxes) {
      ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
      sdBase=cwoa.getSeriesDefinitions().get(0);
      bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
      aggHelper.addSeriesDefinitions(sdBase.getSeriesDefinitions(),lhmLookup);
      sdValue=sdBase.getSeriesDefinitions().get(0);
    }
    if (bBaseGrouping && aggHelper.getDataDefinitionsForBaseGrouping().size() > 0) {
      aggHelper.addAggregation(sdBase.getGrouping().getAggregateExpression(),aggHelper.getDataDefinitionsForBaseGrouping());
    }
    String[] aggregationExp=aggHelper.getAggregations();
    String[] saExpressionKeys=aggHelper.getDataDefinitions();
    if (idre instanceof IGroupedDataRowExpressionEvaluator) {
      if (((IGroupedDataRowExpressionEvaluator)idre).needOptionalGrouping()) {
        rsw.applyValueSeriesGroupingNSorting(sdValue,aggregationExp,saExpressionKeys);
      }
      if (((IGroupedDataRowExpressionEvaluator)idre).needCategoryGrouping()) {
        rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggregationExp,saExpressionKeys);
      }
    }
 else {
      rsw.applyValueSeriesGroupingNSorting(sdValue,aggregationExp,saExpressionKeys);
      rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggregationExp,saExpressionKeys);
    }
    aggHelper.dispose();
  }
  return rsw;
}",0.988211901718506
70862,"/** 
 * Evaluate data for all expressions, include base series, optional Y series grouping and value series.
 * @param idre
 * @param columns
 * @param areValueSeries
 * @return
 * @since 2.3
 */
public List evaluateRowSet(IDataRowExpressionEvaluator idre,final Object[] columns){
  List liResultSet=new ArrayList();
  final int iColumnCount=columns.length;
  Object[] oaTuple;
  final int MAX_ROW_COUNT=ChartUtil.getSupportedMaxRowCount(rtc);
  if (idre.first()) {
    int count=0;
    do {
      if (MAX_ROW_COUNT > 0 && count++ >= MAX_ROW_COUNT) {
        break;
      }
      oaTuple=new Object[iColumnCount];
      for (int i=0; i < columns.length; i++) {
        oaTuple[i]=idre.evaluate((String)columns[i]);
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  return liResultSet;
}","/** 
 * Evaluate data for all expressions, include base series, optional Y series grouping and value series.
 * @param idre
 * @param columns
 * @param areValueSeries
 * @return
 * @since 2.3
 */
public List<Object[]> evaluateRowSet(IDataRowExpressionEvaluator idre,final Object[] columns){
  List<Object[]> liResultSet=new ArrayList<Object[]>();
  final int iColumnCount=columns.length;
  Object[] oaTuple;
  final int MAX_ROW_COUNT=ChartUtil.getSupportedMaxRowCount(rtc);
  if (idre.first()) {
    int count=0;
    do {
      if (MAX_ROW_COUNT > 0 && count++ >= MAX_ROW_COUNT) {
        break;
      }
      oaTuple=new Object[iColumnCount];
      for (int i=0; i < columns.length; i++) {
        oaTuple[i]=idre.evaluate((String)columns[i]);
      }
      liResultSet.add(oaTuple);
    }
 while (idre.next());
  }
  return liResultSet;
}",0.9818181818181818
70863,"/** 
 * Reset value of grouped column by grouping setting.
 * @param resultSet row data list.
 * @param columnIndex grouped column index.
 * @param seriesGrouping series grouping setting.
 */
private void resetGroupedData(List resultSet,int columnIndex,SeriesGrouping seriesGrouping){
  if (seriesGrouping.getGroupType() == DataType.DATE_TIME_LITERAL) {
    int cunit=GroupingUtil.groupingUnit2CDateUnit(seriesGrouping.getGroupingUnit());
    CDateTime baseReference=null;
    for (Iterator iter=resultSet.iterator(); iter.hasNext(); ) {
      Object[] oaTuple=(Object[])iter.next();
      Object obj=oaTuple[columnIndex];
      if (obj instanceof CDateTime) {
        baseReference=(CDateTime)obj;
      }
 else       if (obj instanceof Calendar) {
        baseReference=new CDateTime((Calendar)obj);
      }
 else       if (obj instanceof Date) {
        baseReference=new CDateTime((Date)obj);
      }
 else {
        baseReference=new CDateTime(0);
      }
      oaTuple[columnIndex]=baseReference;
    }
  }
}","/** 
 * Reset value of grouped column by grouping setting.
 * @param resultSet row data list.
 * @param columnIndex grouped column index.
 * @param seriesGrouping series grouping setting.
 */
private void resetGroupedData(List resultSet,int columnIndex,SeriesGrouping seriesGrouping){
  if (seriesGrouping.getGroupType() == DataType.DATE_TIME_LITERAL) {
    CDateTime baseReference=null;
    for (Iterator iter=resultSet.iterator(); iter.hasNext(); ) {
      Object[] oaTuple=(Object[])iter.next();
      Object obj=oaTuple[columnIndex];
      if (obj instanceof CDateTime) {
        baseReference=(CDateTime)obj;
      }
 else       if (obj instanceof Calendar) {
        baseReference=new CDateTime((Calendar)obj);
      }
 else       if (obj instanceof Date) {
        baseReference=new CDateTime((Date)obj);
      }
 else {
        baseReference=new CDateTime(0);
      }
      oaTuple[columnIndex]=baseReference;
    }
  }
}",0.9562532166752444
70864,"public void widgetSelected(SelectionEvent e){
  if (e.widget == btn) {
    int i=cbType.getSelectionIndex();
switch (i) {
case 0:
      cm=InteractivityCharts.createHSChart();
    break;
case 1:
  cm=InteractivityCharts.createSTChart();
break;
case 2:
cm=InteractivityCharts.createTVChart();
break;
case 3:
cm=InteractivityCharts.createURChart();
break;
}
try {
RunTimeContext rtc=new RunTimeContext();
rtc.setULocale(ULocale.getDefault());
idr=PluginSettings.instance().getDevice(""String_Node_Str"");
Generator gr=Generator.instance();
GeneratedChartState gcs=null;
Bounds bo=BoundsImpl.create(0,0,450,300);
gcs=gr.build(idr.getDisplayServer(),cm,bo,null,rtc,null);
idr.setProperty(IDeviceRenderer.FILE_IDENTIFIER,""String_Node_Str"");
idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,new EmptyUpdateNotifier(cm,gcs.getChartModel()));
gr.render(idr,gcs);
}
 catch (ChartException ce) {
ce.printStackTrace();
}
Shell shell=new Shell(display);
shell.setSize(620,450);
shell.setLayout(new GridLayout());
Browser br=new Browser(shell,SWT.NONE);
br.setLayoutData(new GridData(GridData.FILL_BOTH));
br.setUrl(""String_Node_Str"");
br.setVisible(true);
shell.open();
}
}","public void widgetSelected(SelectionEvent e){
  if (e.widget == btn) {
    int i=cbType.getSelectionIndex();
switch (i) {
case 0:
      cm=InteractivityCharts.createHSChart();
    break;
case 1:
  cm=InteractivityCharts.createSTChart();
break;
case 2:
cm=InteractivityCharts.createTVChart();
break;
case 3:
cm=InteractivityCharts.createURChart();
break;
}
try {
RunTimeContext rtc=new RunTimeContext();
rtc.setULocale(ULocale.getDefault());
idr=PluginSettings.instance().getDevice(""String_Node_Str"");
Generator gr=Generator.instance();
Bounds bo=BoundsImpl.create(0,0,450,300);
gcs=gr.build(idr.getDisplayServer(),cm,bo,null,rtc,null);
idr.setProperty(IDeviceRenderer.FILE_IDENTIFIER,""String_Node_Str"");
idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,new EmptyUpdateNotifier(cm,gcs.getChartModel()));
gr.render(idr,gcs);
}
 catch (ChartException ce) {
ce.printStackTrace();
}
Shell shell=new Shell(display);
shell.setSize(620,450);
shell.setLayout(new GridLayout());
Browser br=new Browser(shell,SWT.NONE);
br.setLayoutData(new GridData(GridData.FILL_BOTH));
br.setUrl(""String_Node_Str"");
br.setVisible(true);
shell.open();
}
}",0.9868766404199476
70865,"public Object[] getDataForColumns(String[] sExpressions,int iMaxRecords,boolean byRow){
  byRow=false;
  Object[] array=new Object[sExpressions.length];
  for (int i=0; i < sExpressions.length; i++) {
    Object[] innerArray=new Object[ROW_COUNT];
    for (int j=0; j < ROW_COUNT; j++) {
      String str=sExpressions[i];
      int intStart=str.lastIndexOf(' ') + 1;
      int index=Integer.valueOf(str.substring(intStart,intStart + 1)).intValue() - 1;
      innerArray[j]=new Integer(((String[])getPreviewData().get(j))[index]);
    }
    array[i]=innerArray;
  }
  return array;
}","public Object[] getDataForColumns(String[] sExpressions,int iMaxRecords,boolean byRow){
  Object[] array=new Object[sExpressions.length];
  for (int i=0; i < sExpressions.length; i++) {
    Object[] innerArray=new Object[ROW_COUNT];
    for (int j=0; j < ROW_COUNT; j++) {
      String str=sExpressions[i];
      int intStart=str.lastIndexOf(' ') + 1;
      int index=Integer.valueOf(str.substring(intStart,intStart + 1)).intValue() - 1;
      innerArray[j]=new Integer(((String[])getPreviewData().get(j))[index]);
    }
    array[i]=innerArray;
  }
  return array;
}",0.9869451697127938
70866,"public void changeTask(Notification notification){
  if (task instanceof ITaskChangeListener) {
    ((ITaskChangeListener)task).changeTask(notification);
  }
  if (notification.getNotifier() instanceof Axis) {
    getParentTask().updateTree();
  }
}","public void changeTask(Notification notification){
  ((ITaskChangeListener)task).changeTask(notification);
  if (notification.getNotifier() instanceof Axis) {
    getParentTask().updateTree();
  }
}",0.8859060402684564
70867,"/** 
 * Creates the cube query definition for chart. If parent definition is null, it's usually used for Live preview in chart builder. If chart in xtab, will return sub cube query definition.
 * @param parent
 * @return ICubeQueryDefinition for cube consuming orISubCubeQueryDefinition for chart in xtab case
 * @throws BirtException
 */
public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent) throws BirtException {
  bSingleChart=parent == null;
  CubeHandle cubeHandle=handle.getCube();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartXTabUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    if (parent instanceof ICubeQueryDefinition) {
      ISubCubeQueryDefinition subQuery=createSubCubeQuery();
      if (subQuery != null) {
        if (parent instanceof ICubeQueryDefinition && ChartXTabUtil.isPlotChart(handle)) {
          addMinMaxBinding((ICubeQueryDefinition)parent);
        }
        return subQuery;
      }
      return (ICubeQueryDefinition)parent;
    }
  }
  cubeQuery=ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List<SeriesDefinition> sdList=getAllSeriesDefinitions(cm);
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    List<Query> queryList=sd.getDesignTimeSeries().getDataDefinition();
    for (int j=0; j < queryList.size(); j++) {
      Query query=queryList.get(j);
      bindSeriesQuery(query.getDefinition(),cubeQuery,cubeHandle);
    }
    bindSeriesQuery(sd.getQuery().getDefinition(),cubeQuery,cubeHandle);
  }
  Collection<ILevelDefinition> levelsInOrder=getAllLevelsInHierarchyOrder(cubeHandle,cubeQuery);
  for (Iterator<String> measureNames=registeredMeasures.keySet().iterator(); measureNames.hasNext(); ) {
    IBinding binding=registeredBindings.get(measureNames.next());
    if (binding != null && binding.getAggregatOns().isEmpty()) {
      for (Iterator<ILevelDefinition> levels=levelsInOrder.iterator(); levels.hasNext(); ) {
        ILevelDefinition level=levels.next();
        String dimensionName=level.getHierarchy().getDimension().getName();
        binding.addAggregateOn(ExpressionUtil.createJSDimensionExpression(dimensionName,level.getName()));
      }
    }
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery);
  return cubeQuery;
}","/** 
 * Creates the cube query definition for chart. If parent definition is null, it's usually used for Live preview in chart builder. If chart in xtab, will return sub cube query definition.
 * @param parent
 * @return ICubeQueryDefinition for cube consuming orISubCubeQueryDefinition for chart in xtab case
 * @throws BirtException
 */
public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent) throws BirtException {
  bSingleChart=parent == null;
  CubeHandle cubeHandle=handle.getCube();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartXTabUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    if (parent instanceof ICubeQueryDefinition) {
      ISubCubeQueryDefinition subQuery=createSubCubeQuery();
      if (subQuery != null) {
        if (ChartXTabUtil.isPlotChart(handle)) {
          addMinMaxBinding((ICubeQueryDefinition)parent);
        }
        return subQuery;
      }
      return (ICubeQueryDefinition)parent;
    }
  }
  cubeQuery=ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List<SeriesDefinition> sdList=getAllSeriesDefinitions(cm);
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    List<Query> queryList=sd.getDesignTimeSeries().getDataDefinition();
    for (int j=0; j < queryList.size(); j++) {
      Query query=queryList.get(j);
      bindSeriesQuery(query.getDefinition(),cubeQuery,cubeHandle);
    }
    bindSeriesQuery(sd.getQuery().getDefinition(),cubeQuery,cubeHandle);
  }
  Collection<ILevelDefinition> levelsInOrder=getAllLevelsInHierarchyOrder(cubeHandle,cubeQuery);
  for (Iterator<String> measureNames=registeredMeasures.keySet().iterator(); measureNames.hasNext(); ) {
    IBinding binding=registeredBindings.get(measureNames.next());
    if (binding != null && binding.getAggregatOns().isEmpty()) {
      for (Iterator<ILevelDefinition> levels=levelsInOrder.iterator(); levels.hasNext(); ) {
        ILevelDefinition level=levels.next();
        String dimensionName=level.getHierarchy().getDimension().getName();
        binding.addAggregateOn(ExpressionUtil.createJSDimensionExpression(dimensionName,level.getName()));
      }
    }
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery);
  return cubeQuery;
}",0.991891891891892
70868,"/** 
 * Gets all column bindings from handle and its container.
 * @param itemHandle
 * @param unique <code>true</code> will ignore the binding of container if it is duplicate between handle and its container.
 * @return
 * @since 2.3.2
 */
public static Iterator getColumnDataBindings(ReportItemHandle itemHandle,boolean unique){
  if (itemHandle.getDataSet() != null || itemHandle.getCube() != null) {
    return itemHandle.columnBindingsIterator();
  }
  DesignElementHandle handle=getBindingHolder(itemHandle);
  if (handle instanceof ReportItemHandle) {
    Map<String,ComputedColumnHandle> bindingMap=new LinkedHashMap<String,ComputedColumnHandle>();
    ArrayList<ComputedColumnHandle> list=new ArrayList<ComputedColumnHandle>();
    Iterator i=((ReportItemHandle)handle).columnBindingsIterator();
    while (i.hasNext()) {
      ComputedColumnHandle cch=(ComputedColumnHandle)i.next();
      list.add(cch);
      bindingMap.put(cch.getName(),cch);
    }
    if (handle != itemHandle) {
      i=itemHandle.columnBindingsIterator();
      while (i.hasNext()) {
        ComputedColumnHandle cch=(ComputedColumnHandle)i.next();
        list.add(cch);
        bindingMap.put(cch.getName(),cch);
      }
    }
    if (unique) {
      return bindingMap.values().iterator();
    }
 else     return list.iterator();
  }
  return null;
}","/** 
 * Gets all column bindings from handle and its container.
 * @param itemHandle
 * @param unique <code>true</code> will ignore the binding of container if it is duplicate between handle and its container.
 * @return
 * @since 2.3.2
 */
public static Iterator getColumnDataBindings(ReportItemHandle itemHandle,boolean unique){
  if (itemHandle.getDataSet() != null || itemHandle.getCube() != null) {
    return itemHandle.columnBindingsIterator();
  }
  ReportItemHandle handle=getBindingHolder(itemHandle);
  if (handle == null) {
    return null;
  }
  Map<String,ComputedColumnHandle> bindingMap=new LinkedHashMap<String,ComputedColumnHandle>();
  ArrayList<ComputedColumnHandle> list=new ArrayList<ComputedColumnHandle>();
  Iterator i=handle.columnBindingsIterator();
  while (i.hasNext()) {
    ComputedColumnHandle cch=(ComputedColumnHandle)i.next();
    list.add(cch);
    bindingMap.put(cch.getName(),cch);
  }
  if (handle != itemHandle) {
    i=itemHandle.columnBindingsIterator();
    while (i.hasNext()) {
      ComputedColumnHandle cch=(ComputedColumnHandle)i.next();
      list.add(cch);
      bindingMap.put(cch.getName(),cch);
    }
  }
  if (unique) {
    return bindingMap.values().iterator();
  }
 else   return list.iterator();
}",0.8760139049826188
70869,"public void testMin(){
  IScale scale=getValueAxisScale();
  assertTrue(scale instanceof ITimeScale);
  ITimeScale ls=(ITimeScale)scale;
  Date date=new Date();
  assertEquals(ls.getMin().getYear(),2002 - 1900);
  assertEquals(ls.getMin().getDate(),19);
  ls.setMin(null);
  assertNull(ls.getMin());
}","public void testMin(){
  IScale scale=getValueAxisScale();
  assertTrue(scale instanceof ITimeScale);
  ITimeScale ls=(ITimeScale)scale;
  assertEquals(ls.getMin().getYear(),2002 - 1900);
  assertEquals(ls.getMin().getDate(),19);
  ls.setMin(null);
  assertNull(ls.getMin());
}",0.9584775086505192
70870,"private void caleMergeMinWidth(List figures,List adjust,List hasAdjust){
  if (adjust.isEmpty()) {
    return;
  }
  int size=figures.size();
  Map map=getOwner().getViewer().getVisualPartMap();
  int adjustMax=0;
  int trueAdjustMax=0;
  int adjustMaxNumber=0;
  for (int i=0; i < size; i++) {
    IFigure figure=(IFigure)figures.get(i);
    ITableLayoutCell cellPart=(ITableLayoutCell)map.get(figure);
    int columnNumber=cellPart.getColumnNumber();
    int columnSpan=cellPart.getColSpan();
    Dimension minSize=figure.getMinimumSize();
    int samMin=0;
    int trueSamMin=0;
    int[] adjustNumber=new int[0];
    for (int j=columnNumber; j < columnNumber + columnSpan; j++) {
      TableLayoutData.ColumnData columnData=data.findColumnData(j);
      if (!hasAdjust.contains(new Integer(j))) {
        int len=adjustNumber.length;
        int temp[]=new int[len + 1];
        System.arraycopy(adjustNumber,0,temp,0,len);
        temp[len]=j;
        adjustNumber=temp;
      }
 else {
        samMin=samMin + columnData.trueMinColumnWidth;
        trueSamMin=trueSamMin + columnData.trueMinColumnWidth;
      }
    }
    int adjustCount=adjustNumber.length;
    if (adjustCount == 0) {
      continue;
    }
    int value=minSize.width - samMin;
    int trueValue=minSize.width - trueSamMin;
    for (int j=0; j < adjustCount; j++) {
      int temp=0;
      int trueTemp=0;
      if (j == adjustCount - 1) {
        temp=value / adjustCount + value % adjustCount;
        trueTemp=trueValue / adjustCount + trueValue % adjustCount;
      }
 else {
        temp=value / adjustCount;
        trueTemp=trueValue / adjustCount;
      }
      TableLayoutData.ColumnData columnData=data.findColumnData(adjustNumber[j]);
      temp=Math.max(temp,columnData.minColumnWidth);
      trueTemp=Math.max(trueTemp,columnData.trueMinColumnWidth);
      if (trueTemp > trueAdjustMax) {
        adjustMax=temp;
        trueAdjustMax=trueTemp;
        adjustMaxNumber=adjustNumber[j];
      }
    }
  }
  if (adjustMaxNumber > 0) {
    TableLayoutData.ColumnData columnData=data.findColumnData(adjustMaxNumber);
    columnData.minColumnWidth=adjustMax;
    columnData.trueMinColumnWidth=trueAdjustMax;
    adjust.remove(new Integer(adjustMaxNumber));
    hasAdjust.add(new Integer(adjustMaxNumber));
    caleMergeMinWidth(figures,adjust,hasAdjust);
  }
}","private void caleMergeMinWidth(List figures,List adjust,List hasAdjust){
  if (adjust.isEmpty()) {
    return;
  }
  int size=figures.size();
  Map map=getOwner().getViewer().getVisualPartMap();
  int adjustMax=0;
  int trueAdjustMax=0;
  int adjustMaxNumber=0;
  for (int i=0; i < size; i++) {
    IFigure figure=(IFigure)figures.get(i);
    ITableLayoutCell cellPart=(ITableLayoutCell)map.get(figure);
    int columnNumber=cellPart.getColumnNumber();
    int columnSpan=cellPart.getColSpan();
    Dimension minSize=figure.getMinimumSize();
    int samMin=0;
    int trueSamMin=0;
    int[] adjustNumber=new int[0];
    for (int j=columnNumber; j < columnNumber + columnSpan; j++) {
      TableLayoutData.ColumnData columnData=data.findColumnData(j);
      if (!hasAdjust.contains(Integer.valueOf(j))) {
        int len=adjustNumber.length;
        int temp[]=new int[len + 1];
        System.arraycopy(adjustNumber,0,temp,0,len);
        temp[len]=j;
        adjustNumber=temp;
      }
 else {
        samMin=samMin + columnData.trueMinColumnWidth;
        trueSamMin=trueSamMin + columnData.trueMinColumnWidth;
      }
    }
    int adjustCount=adjustNumber.length;
    if (adjustCount == 0) {
      continue;
    }
    int value=minSize.width - samMin;
    int trueValue=minSize.width - trueSamMin;
    for (int j=0; j < adjustCount; j++) {
      int temp=0;
      int trueTemp=0;
      if (j == adjustCount - 1) {
        temp=value / adjustCount + value % adjustCount;
        trueTemp=trueValue / adjustCount + trueValue % adjustCount;
      }
 else {
        temp=value / adjustCount;
        trueTemp=trueValue / adjustCount;
      }
      TableLayoutData.ColumnData columnData=data.findColumnData(adjustNumber[j]);
      temp=Math.max(temp,columnData.minColumnWidth);
      trueTemp=Math.max(trueTemp,columnData.trueMinColumnWidth);
      if (trueTemp > trueAdjustMax) {
        adjustMax=temp;
        trueAdjustMax=trueTemp;
        adjustMaxNumber=adjustNumber[j];
      }
    }
  }
  if (adjustMaxNumber > 0) {
    TableLayoutData.ColumnData columnData=data.findColumnData(adjustMaxNumber);
    columnData.minColumnWidth=adjustMax;
    columnData.trueMinColumnWidth=trueAdjustMax;
    adjust.remove(Integer.valueOf(adjustMaxNumber));
    hasAdjust.add(Integer.valueOf(adjustMaxNumber));
    caleMergeMinWidth(figures,adjust,hasAdjust);
  }
}",0.992337164750958
70871,"private void initRowMergeMinsize(List children){
  int size=children.size();
  Map map=getOwner().getViewer().getVisualPartMap();
  List list=new ArrayList();
  List adjustRow=new ArrayList();
  for (int i=0; i < size; i++) {
    IFigure figure=(IFigure)children.get(i);
    ITableLayoutCell cellPart=(ITableLayoutCell)map.get(figure);
    int rowNumber=cellPart.getRowNumber();
    int rowSpan=cellPart.getRowSpan();
    if (rowSpan == 1) {
      continue;
    }
    list.add(figure);
    if (rowSpan > 1) {
      for (int j=rowNumber; j < rowNumber + rowSpan; j++) {
        adjustRow.add(new Integer(j));
      }
    }
  }
  caleRowMergeMinHeight(list,adjustRow,new ArrayList());
}","private void initRowMergeMinsize(List children){
  int size=children.size();
  Map map=getOwner().getViewer().getVisualPartMap();
  List list=new ArrayList();
  List adjustRow=new ArrayList();
  for (int i=0; i < size; i++) {
    IFigure figure=(IFigure)children.get(i);
    ITableLayoutCell cellPart=(ITableLayoutCell)map.get(figure);
    int rowNumber=cellPart.getRowNumber();
    int rowSpan=cellPart.getRowSpan();
    if (rowSpan == 1) {
      continue;
    }
    list.add(figure);
    if (rowSpan > 1) {
      for (int j=rowNumber; j < rowNumber + rowSpan; j++) {
        adjustRow.add(Integer.valueOf(j));
      }
    }
  }
  caleRowMergeMinHeight(list,adjustRow,new ArrayList());
}",0.9912536443148688
70872,"private void resetRowMinSize(TableLayoutData.RowData[] rowHeights){
  int size=rowHeights.length;
  for (int i=1; i < size + 1; i++) {
    rowHeights[i - 1]=new TableLayoutData.RowData();
    rowHeights[i - 1].rowNumber=i;
    rowHeights[i - 1].height=getOwner().getRowHeightValue(i);
    ITableLayoutOwner.DimensionInfomation dim=getOwner().getRowHeight(i);
    rowHeights[i - 1].isForce=dim.getMeasure() > 0;
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(dim.getUnits()) && dim.getMeasure() > 0) {
      rowHeights[i - 1].isPercentage=true;
      rowHeights[i - 1].percentageHeight=dim.getMeasure();
    }
    if (dim.getUnits() == null || dim.getUnits().length() == 0) {
      rowHeights[i - 1].isAuto=true;
    }
    rowHeights[i - 1].trueMinRowHeight=(rowHeights[i - 1].isForce && !rowHeights[i - 1].isPercentage) ? rowHeights[i - 1].height : rowHeights[i - 1].minRowHeight;
  }
}","private void resetRowMinSize(TableLayoutData.RowData[] rowHeights){
  int size=rowHeights.length;
  for (int i=1; i < size + 1; i++) {
    rowHeights[i - 1]=new TableLayoutData.RowData();
    rowHeights[i - 1].rowNumber=i;
    rowHeights[i - 1].height=getOwner().getRowHeightValue(i);
    ITableLayoutOwner.DimensionInfomation dim=getOwner().getRowHeight(i);
    rowHeights[i - 1].isForce=dim.getMeasure() > 0;
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(dim.getUnits()) && dim.getMeasure() > 0) {
      rowHeights[i - 1].isPercentage=true;
      rowHeights[i - 1].percentageHeight=dim.getMeasure();
    }
    if (dim.getUnits() == null || dim.getUnits().length() == 0) {
      rowHeights[i - 1].isAuto=true;
    }
    rowHeights[i - 1].trueMinRowHeight=(rowHeights[i - 1].isForce && !rowHeights[i - 1].isPercentage) ? rowHeights[i - 1].height : rowHeights[i - 1].minRowHeight;
    if (rowHeights[i - 1].trueMinRowHeight < RowHandleAdapter.DEFAULT_MINHEIGHT) {
      rowHeights[i - 1].trueMinRowHeight=RowHandleAdapter.DEFAULT_MINHEIGHT;
    }
  }
}",0.9149590163934426
70873,"private void init(TableLayoutData.ColumnData[] columnWidths,TableLayoutData.RowData[] rowHeights){
  int size=rowHeights.length;
  for (int i=1; i < size + 1; i++) {
    rowHeights[i - 1]=new TableLayoutData.RowData();
    rowHeights[i - 1].rowNumber=i;
    rowHeights[i - 1].height=getOwner().getRowHeightValue(i);
    ITableLayoutOwner.DimensionInfomation dim=getOwner().getRowHeight(i);
    rowHeights[i - 1].isForce=dim.getMeasure() > 0;
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(dim.getUnits()) && dim.getMeasure() > 0) {
      rowHeights[i - 1].isPercentage=true;
      rowHeights[i - 1].percentageHeight=dim.getMeasure();
    }
    if (dim.getUnits() == null || dim.getUnits().length() == 0) {
      rowHeights[i - 1].isAuto=true;
    }
    rowHeights[i - 1].trueMinRowHeight=(rowHeights[i - 1].isForce && !rowHeights[i - 1].isPercentage) ? rowHeights[i - 1].height : rowHeights[i - 1].minRowHeight;
  }
  size=columnWidths.length;
  for (int i=1; i < size + 1; i++) {
    columnWidths[i - 1]=new TableLayoutData.ColumnData();
    columnWidths[i - 1].columnNumber=i;
    columnWidths[i - 1].width=getOwner().getColumnWidthValue(i);
    ITableLayoutOwner.DimensionInfomation dim=getOwner().getColumnWidth(i);
    columnWidths[i - 1].isForce=dim.getMeasure() > 0;
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(dim.getUnits()) && dim.getMeasure() > 0) {
      columnWidths[i - 1].isPercentage=true;
      columnWidths[i - 1].percentageWidth=dim.getMeasure();
    }
    if (dim.getUnits() == null || dim.getUnits().length() == 0) {
      columnWidths[i - 1].isAuto=true;
    }
    columnWidths[i - 1].trueMinColumnWidth=(columnWidths[i - 1].isForce && !columnWidths[i - 1].isPercentage) ? columnWidths[i - 1].width : columnWidths[i - 1].minColumnWidth;
  }
}","private void init(TableLayoutData.ColumnData[] columnWidths,TableLayoutData.RowData[] rowHeights){
  int size=rowHeights.length;
  for (int i=1; i < size + 1; i++) {
    rowHeights[i - 1]=new TableLayoutData.RowData();
    rowHeights[i - 1].rowNumber=i;
    rowHeights[i - 1].height=getOwner().getRowHeightValue(i);
    ITableLayoutOwner.DimensionInfomation dim=getOwner().getRowHeight(i);
    rowHeights[i - 1].isForce=dim.getMeasure() > 0;
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(dim.getUnits()) && dim.getMeasure() > 0) {
      rowHeights[i - 1].isPercentage=true;
      rowHeights[i - 1].percentageHeight=dim.getMeasure();
    }
    if (dim.getUnits() == null || dim.getUnits().length() == 0) {
      rowHeights[i - 1].isAuto=true;
    }
    rowHeights[i - 1].trueMinRowHeight=(rowHeights[i - 1].isForce && !rowHeights[i - 1].isPercentage) ? rowHeights[i - 1].height : rowHeights[i - 1].minRowHeight;
    if (rowHeights[i - 1].trueMinRowHeight < RowHandleAdapter.DEFAULT_MINHEIGHT) {
      rowHeights[i - 1].trueMinRowHeight=RowHandleAdapter.DEFAULT_MINHEIGHT;
    }
  }
  size=columnWidths.length;
  for (int i=1; i < size + 1; i++) {
    columnWidths[i - 1]=new TableLayoutData.ColumnData();
    columnWidths[i - 1].columnNumber=i;
    columnWidths[i - 1].width=getOwner().getColumnWidthValue(i);
    ITableLayoutOwner.DimensionInfomation dim=getOwner().getColumnWidth(i);
    columnWidths[i - 1].isForce=dim.getMeasure() > 0;
    if (DesignChoiceConstants.UNITS_PERCENTAGE.equals(dim.getUnits()) && dim.getMeasure() > 0) {
      columnWidths[i - 1].isPercentage=true;
      columnWidths[i - 1].percentageWidth=dim.getMeasure();
    }
    if (dim.getUnits() == null || dim.getUnits().length() == 0) {
      columnWidths[i - 1].isAuto=true;
    }
    columnWidths[i - 1].trueMinColumnWidth=(columnWidths[i - 1].isForce && !columnWidths[i - 1].isPercentage) ? columnWidths[i - 1].width : columnWidths[i - 1].minColumnWidth;
  }
}",0.955472103004292
70874,"private void caleMergeMinHeight(List figures,List adjust,List hasAdjust){
  if (adjust.isEmpty()) {
    return;
  }
  int size=figures.size();
  Map map=getOwner().getViewer().getVisualPartMap();
  int adjustMax=0;
  int trueAdjustMax=0;
  int adjustMaxNumber=0;
  for (int i=0; i < size; i++) {
    IFigure figure=(IFigure)figures.get(i);
    ITableLayoutCell cellPart=(ITableLayoutCell)map.get(figure);
    int rowNumber=cellPart.getRowNumber();
    int rowSpan=cellPart.getRowSpan();
    Dimension minSize=figure.getMinimumSize(data.findColumnData(cellPart.getColumnNumber()).width,-1);
    int samMin=0;
    int trueSamMin=0;
    int[] adjustNumber=new int[0];
    for (int j=rowNumber; j < rowNumber + rowSpan; j++) {
      TableLayoutData.RowData rowData=data.findRowData(j);
      if (!hasAdjust.contains(new Integer(j))) {
        int len=adjustNumber.length;
        int temp[]=new int[len + 1];
        System.arraycopy(adjustNumber,0,temp,0,len);
        temp[len]=j;
        adjustNumber=temp;
      }
 else {
        samMin=samMin + rowData.trueMinRowHeight;
        trueSamMin=trueSamMin + rowData.trueMinRowHeight;
      }
    }
    int adjustCount=adjustNumber.length;
    if (adjustCount == 0) {
      continue;
    }
    int value=minSize.height - samMin;
    int trueValue=minSize.height - trueSamMin;
    for (int j=0; j < adjustCount; j++) {
      int temp=0;
      int trueTemp=0;
      if (j == adjustCount - 1) {
        temp=value / adjustCount + value % adjustCount;
        trueTemp=trueValue / adjustCount + trueValue % adjustCount;
      }
 else {
        temp=value / adjustCount;
        trueTemp=trueValue / adjustCount;
      }
      TableLayoutData.RowData rowData=data.findRowData(adjustNumber[j]);
      temp=Math.max(temp,rowData.minRowHeight);
      trueTemp=Math.max(trueTemp,rowData.trueMinRowHeight);
      if (trueTemp > trueAdjustMax) {
        adjustMax=temp;
        trueAdjustMax=trueTemp;
        adjustMaxNumber=adjustNumber[j];
      }
    }
  }
  if (adjustMaxNumber > 0) {
    TableLayoutData.RowData rowData=data.findRowData(adjustMaxNumber);
    rowData.minRowHeight=adjustMax;
    rowData.trueMinRowHeight=trueAdjustMax;
    adjust.remove(new Integer(adjustMaxNumber));
    hasAdjust.add(new Integer(adjustMaxNumber));
    caleMergeMinHeight(figures,adjust,hasAdjust);
  }
}","private void caleMergeMinHeight(List figures,List adjust,List hasAdjust){
  if (adjust.isEmpty()) {
    return;
  }
  int size=figures.size();
  Map map=getOwner().getViewer().getVisualPartMap();
  int adjustMax=0;
  int trueAdjustMax=0;
  int adjustMaxNumber=0;
  for (int i=0; i < size; i++) {
    IFigure figure=(IFigure)figures.get(i);
    ITableLayoutCell cellPart=(ITableLayoutCell)map.get(figure);
    int rowNumber=cellPart.getRowNumber();
    int rowSpan=cellPart.getRowSpan();
    Dimension minSize=figure.getMinimumSize(data.findColumnData(cellPart.getColumnNumber()).width,-1);
    int samMin=0;
    int trueSamMin=0;
    int[] adjustNumber=new int[0];
    for (int j=rowNumber; j < rowNumber + rowSpan; j++) {
      TableLayoutData.RowData rowData=data.findRowData(j);
      if (!hasAdjust.contains(Integer.valueOf(j))) {
        int len=adjustNumber.length;
        int temp[]=new int[len + 1];
        System.arraycopy(adjustNumber,0,temp,0,len);
        temp[len]=j;
        adjustNumber=temp;
      }
 else {
        samMin=samMin + rowData.trueMinRowHeight;
        trueSamMin=trueSamMin + rowData.trueMinRowHeight;
      }
    }
    int adjustCount=adjustNumber.length;
    if (adjustCount == 0) {
      continue;
    }
    int value=minSize.height - samMin;
    int trueValue=minSize.height - trueSamMin;
    for (int j=0; j < adjustCount; j++) {
      int temp=0;
      int trueTemp=0;
      if (j == adjustCount - 1) {
        temp=value / adjustCount + value % adjustCount;
        trueTemp=trueValue / adjustCount + trueValue % adjustCount;
      }
 else {
        temp=value / adjustCount;
        trueTemp=trueValue / adjustCount;
      }
      TableLayoutData.RowData rowData=data.findRowData(adjustNumber[j]);
      temp=Math.max(temp,rowData.minRowHeight);
      trueTemp=Math.max(trueTemp,rowData.trueMinRowHeight);
      if (trueTemp > trueAdjustMax) {
        adjustMax=temp;
        trueAdjustMax=trueTemp;
        adjustMaxNumber=adjustNumber[j];
      }
    }
  }
  if (adjustMaxNumber > 0) {
    TableLayoutData.RowData rowData=data.findRowData(adjustMaxNumber);
    rowData.minRowHeight=adjustMax;
    rowData.trueMinRowHeight=trueAdjustMax;
    adjust.remove(Integer.valueOf(adjustMaxNumber));
    hasAdjust.add(Integer.valueOf(adjustMaxNumber));
    caleMergeMinHeight(figures,adjust,hasAdjust);
  }
}",0.9922879177377892
70875,"private void caleRowMergeMinHeight(List figures,List adjust,List hasAdjust){
  if (adjust.isEmpty()) {
    return;
  }
  int size=figures.size();
  Map map=getOwner().getViewer().getVisualPartMap();
  int adjustMax=0;
  int trueAdjustMax=0;
  int adjustMaxNumber=0;
  for (int i=0; i < size; i++) {
    IFigure figure=(IFigure)figures.get(i);
    ITableLayoutCell cellPart=(ITableLayoutCell)map.get(figure);
    int rowNumber=cellPart.getRowNumber();
    int rowSpan=cellPart.getRowSpan();
    Dimension minSize=figure.getMinimumSize(data.findColumnData(cellPart.getColumnNumber()).width,-1);
    int samMin=0;
    int trueSamMin=0;
    int[] adjustNumber=new int[0];
    for (int j=rowNumber; j < rowNumber + rowSpan; j++) {
      TableLayoutData.RowData rowData=data.findRowData(j);
      if (!hasAdjust.contains(new Integer(j))) {
        int len=adjustNumber.length;
        int temp[]=new int[len + 1];
        System.arraycopy(adjustNumber,0,temp,0,len);
        temp[len]=j;
        adjustNumber=temp;
      }
 else {
        samMin=samMin + rowData.trueMinRowHeight;
        trueSamMin=trueSamMin + rowData.trueMinRowHeight;
      }
    }
    int adjustCount=adjustNumber.length;
    if (adjustCount == 0) {
      continue;
    }
    int value=minSize.height - samMin;
    int trueValue=minSize.height - trueSamMin;
    for (int j=0; j < adjustCount; j++) {
      int temp=0;
      int trueTemp=0;
      if (j == adjustCount - 1) {
        temp=value / adjustCount + value % adjustCount;
        trueTemp=trueValue / adjustCount + trueValue % adjustCount;
      }
 else {
        temp=value / adjustCount;
        trueTemp=trueValue / adjustCount;
      }
      TableLayoutData.RowData rowData=data.findRowData(adjustNumber[j]);
      temp=Math.max(temp,rowData.minRowHeight);
      trueTemp=Math.max(trueTemp,rowData.trueMinRowHeight);
      if (trueTemp > trueAdjustMax) {
        adjustMax=temp;
        trueAdjustMax=trueTemp;
        adjustMaxNumber=adjustNumber[j];
      }
    }
  }
  if (adjustMaxNumber > 0) {
    TableLayoutData.RowData rowData=data.findRowData(adjustMaxNumber);
    rowData.minRowHeight=adjustMax;
    rowData.trueMinRowHeight=trueAdjustMax;
    adjust.remove(new Integer(adjustMaxNumber));
    hasAdjust.add(new Integer(adjustMaxNumber));
    caleMergeMinHeight(figures,adjust,hasAdjust);
  }
}","private void caleRowMergeMinHeight(List figures,List adjust,List hasAdjust){
  if (adjust.isEmpty()) {
    return;
  }
  int size=figures.size();
  Map map=getOwner().getViewer().getVisualPartMap();
  int adjustMax=0;
  int trueAdjustMax=0;
  int adjustMaxNumber=0;
  for (int i=0; i < size; i++) {
    IFigure figure=(IFigure)figures.get(i);
    ITableLayoutCell cellPart=(ITableLayoutCell)map.get(figure);
    int rowNumber=cellPart.getRowNumber();
    int rowSpan=cellPart.getRowSpan();
    Dimension minSize=figure.getMinimumSize(data.findColumnData(cellPart.getColumnNumber()).width,-1);
    int samMin=0;
    int trueSamMin=0;
    int[] adjustNumber=new int[0];
    for (int j=rowNumber; j < rowNumber + rowSpan; j++) {
      TableLayoutData.RowData rowData=data.findRowData(j);
      if (!hasAdjust.contains(Integer.valueOf(j))) {
        int len=adjustNumber.length;
        int temp[]=new int[len + 1];
        System.arraycopy(adjustNumber,0,temp,0,len);
        temp[len]=j;
        adjustNumber=temp;
      }
 else {
        samMin=samMin + rowData.trueMinRowHeight;
        trueSamMin=trueSamMin + rowData.trueMinRowHeight;
      }
    }
    int adjustCount=adjustNumber.length;
    if (adjustCount == 0) {
      continue;
    }
    int value=minSize.height - samMin;
    int trueValue=minSize.height - trueSamMin;
    for (int j=0; j < adjustCount; j++) {
      int temp=0;
      int trueTemp=0;
      if (j == adjustCount - 1) {
        temp=value / adjustCount + value % adjustCount;
        trueTemp=trueValue / adjustCount + trueValue % adjustCount;
      }
 else {
        temp=value / adjustCount;
        trueTemp=trueValue / adjustCount;
      }
      TableLayoutData.RowData rowData=data.findRowData(adjustNumber[j]);
      temp=Math.max(temp,rowData.minRowHeight);
      trueTemp=Math.max(trueTemp,rowData.trueMinRowHeight);
      if (trueTemp > trueAdjustMax) {
        adjustMax=temp;
        trueAdjustMax=trueTemp;
        adjustMaxNumber=adjustNumber[j];
      }
    }
  }
  if (adjustMaxNumber > 0) {
    TableLayoutData.RowData rowData=data.findRowData(adjustMaxNumber);
    rowData.minRowHeight=adjustMax;
    rowData.trueMinRowHeight=trueAdjustMax;
    adjust.remove(Integer.valueOf(adjustMaxNumber));
    hasAdjust.add(Integer.valueOf(adjustMaxNumber));
    caleMergeMinHeight(figures,adjust,hasAdjust);
  }
}",0.9922978177150192
70876,"private void initMergeMinsize(List children){
  int size=children.size();
  Map map=getOwner().getViewer().getVisualPartMap();
  List list=new ArrayList();
  List adjustRow=new ArrayList();
  List adjustColumn=new ArrayList();
  for (int i=0; i < size; i++) {
    IFigure figure=(IFigure)children.get(i);
    ITableLayoutCell cellPart=(ITableLayoutCell)map.get(figure);
    int rowNumber=cellPart.getRowNumber();
    int columnNumber=cellPart.getColumnNumber();
    int rowSpan=cellPart.getRowSpan();
    int columnSpan=cellPart.getColSpan();
    if (rowSpan == 1 && columnSpan == 1) {
      continue;
    }
    list.add(figure);
    if (rowSpan > 1) {
      for (int j=rowNumber; j < rowNumber + rowSpan; j++) {
        adjustRow.add(new Integer(j));
      }
    }
    if (columnSpan > 1) {
      for (int j=columnNumber; j < columnNumber + columnSpan; j++) {
        adjustColumn.add(new Integer(j));
      }
    }
  }
  caleMergeMinHeight(list,adjustRow,new ArrayList());
  caleMergeMinWidth(list,adjustColumn,new ArrayList());
}","private void initMergeMinsize(List children){
  int size=children.size();
  Map map=getOwner().getViewer().getVisualPartMap();
  List list=new ArrayList();
  List adjustRow=new ArrayList();
  List adjustColumn=new ArrayList();
  for (int i=0; i < size; i++) {
    IFigure figure=(IFigure)children.get(i);
    ITableLayoutCell cellPart=(ITableLayoutCell)map.get(figure);
    int rowNumber=cellPart.getRowNumber();
    int columnNumber=cellPart.getColumnNumber();
    int rowSpan=cellPart.getRowSpan();
    int columnSpan=cellPart.getColSpan();
    if (rowSpan == 1 && columnSpan == 1) {
      continue;
    }
    list.add(figure);
    if (rowSpan > 1) {
      for (int j=rowNumber; j < rowNumber + rowSpan; j++) {
        adjustRow.add(Integer.valueOf(j));
      }
    }
    if (columnSpan > 1) {
      for (int j=columnNumber; j < columnNumber + columnSpan; j++) {
        adjustColumn.add(Integer.valueOf(j));
      }
    }
  }
  caleMergeMinHeight(list,adjustRow,new ArrayList());
  caleMergeMinWidth(list,adjustColumn,new ArrayList());
}",0.9884169884169884
70877,"private IRunAndRenderTask createRunAndRenderTask(IReportRunnable runnable,OutputStream outputStream,InputOptions inputOptions,Map parameters,Boolean embeddable,List activeIds,RenderOption aRenderOption,Map displayTexts,String reportTitle,Integer maxRows) throws ReportServiceException {
  RenderOption renderOption=aRenderOption;
  HttpServletRequest request=(HttpServletRequest)inputOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)inputOptions.getOption(InputOptions.OPT_LOCALE);
  TimeZone timeZone=(TimeZone)inputOptions.getOption(InputOptions.OPT_TIMEZONE);
  Boolean isMasterPageContent=(Boolean)inputOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean masterPage=isMasterPageContent == null ? true : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)inputOptions.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)inputOptions.getOption(InputOptions.OPT_FORMAT);
  String emitterId=(String)inputOptions.getOption(InputOptions.OPT_EMITTER_ID);
  boolean rtl=isRtl(inputOptions);
  boolean isDesigner=isDesigner(inputOptions);
  int pageOverflow=getPageOverflow(inputOptions);
  String iServletPath=(String)inputOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRunAndRenderTask runAndRenderTask=engine.createRunAndRenderTask(runnable);
  runAndRenderTask.setLocale(locale);
  runAndRenderTask.setTimeZone(BirtUtility.toICUTimeZone(timeZone));
  if (parameters != null) {
    runAndRenderTask.setParameterValues(parameters);
  }
  if (displayTexts != null) {
    Iterator keys=displayTexts.keySet().iterator();
    while (keys.hasNext()) {
      String paramName=DataUtil.getString(keys.next());
      String displayText=DataUtil.getString(displayTexts.get(paramName));
      runAndRenderTask.setParameterDisplayText(paramName,displayText);
    }
  }
  if (maxRows != null)   runAndRenderTask.setMaxRowsPerQuery(maxRows.intValue());
  Map context=BirtUtility.getAppContext(request);
  runAndRenderTask.setAppContext(context);
  ViewerHTMLActionHandler handler=new ViewerHTMLActionHandler(locale,timeZone,rtl,masterPage,format,new Boolean(svgFlag),Boolean.toString(isDesigner));
  handler.setPageOverflow(Integer.toString(pageOverflow));
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  IViewingSession session=ViewingSessionUtil.getSession(request);
  if (!ParameterAccessor.isPDFLayout(format)) {
    if (session != null) {
      handler.setViewingSessionId(session.getId());
    }
 else {
      throw new IllegalStateException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
  }
  if (renderOption == null) {
    if (ParameterAccessor.isPDFLayout(format)) {
      renderOption=createPDFRenderOption(servletPath,request,pageOverflow,isDesigner);
    }
 else {
      if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))       svgFlag=false;
      renderOption=createHTMLRenderOption(svgFlag,servletPath,request,session);
    }
  }
  renderOption.setOutputStream(outputStream);
  renderOption.setOutputFormat(format);
  renderOption.setEmitterID(emitterId);
  renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,Boolean.valueOf(masterPage));
  renderOption.setActionHandler(handler);
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  if (renderOption instanceof IHTMLRenderOption) {
    boolean isEmbeddable=false;
    if (embeddable != null)     isEmbeddable=embeddable.booleanValue();
    if (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
  }
  renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
  initializeEmitterConfigs(request,renderOption.getOptions());
  runAndRenderTask.setRenderOption(renderOption);
  return runAndRenderTask;
}","private IRunAndRenderTask createRunAndRenderTask(IReportRunnable runnable,OutputStream outputStream,InputOptions inputOptions,Map parameters,Boolean embeddable,List activeIds,RenderOption aRenderOption,Map displayTexts,String reportTitle,Integer maxRows) throws ReportServiceException {
  RenderOption renderOption=aRenderOption;
  HttpServletRequest request=(HttpServletRequest)inputOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)inputOptions.getOption(InputOptions.OPT_LOCALE);
  TimeZone timeZone=(TimeZone)inputOptions.getOption(InputOptions.OPT_TIMEZONE);
  Boolean isMasterPageContent=(Boolean)inputOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean masterPage=isMasterPageContent == null ? true : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)inputOptions.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)inputOptions.getOption(InputOptions.OPT_FORMAT);
  String emitterId=(String)inputOptions.getOption(InputOptions.OPT_EMITTER_ID);
  boolean rtl=isRtl(inputOptions);
  boolean isDesigner=isDesigner(inputOptions);
  int pageOverflow=getPageOverflow(inputOptions);
  String iServletPath=(String)inputOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRunAndRenderTask runAndRenderTask=engine.createRunAndRenderTask(runnable);
  runAndRenderTask.setLocale(locale);
  runAndRenderTask.setTimeZone(BirtUtility.toICUTimeZone(timeZone));
  if (parameters != null) {
    runAndRenderTask.setParameterValues(parameters);
  }
  if (displayTexts != null) {
    Iterator keys=displayTexts.keySet().iterator();
    while (keys.hasNext()) {
      String paramName=DataUtil.getString(keys.next());
      String displayText=DataUtil.getString(displayTexts.get(paramName));
      runAndRenderTask.setParameterDisplayText(paramName,displayText);
    }
  }
  if (maxRows != null)   runAndRenderTask.setMaxRowsPerQuery(maxRows.intValue());
  Map context=BirtUtility.getAppContext(request);
  runAndRenderTask.setAppContext(context);
  ViewerHTMLActionHandler handler=new ViewerHTMLActionHandler(locale,timeZone,rtl,masterPage,format,Boolean.valueOf(svgFlag),Boolean.toString(isDesigner));
  handler.setPageOverflow(Integer.toString(pageOverflow));
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  IViewingSession session=ViewingSessionUtil.getSession(request);
  if (!ParameterAccessor.isPDFLayout(format)) {
    if (session != null) {
      handler.setViewingSessionId(session.getId());
    }
 else {
      throw new IllegalStateException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
  }
  if (renderOption == null) {
    if (ParameterAccessor.isPDFLayout(format)) {
      renderOption=createPDFRenderOption(servletPath,request,pageOverflow,isDesigner);
    }
 else {
      if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))       svgFlag=false;
      renderOption=createHTMLRenderOption(svgFlag,servletPath,request,session);
    }
  }
  renderOption.setOutputStream(outputStream);
  renderOption.setOutputFormat(format);
  renderOption.setEmitterID(emitterId);
  renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,Boolean.valueOf(masterPage));
  renderOption.setActionHandler(handler);
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  if (renderOption instanceof IHTMLRenderOption) {
    boolean isEmbeddable=false;
    if (embeddable != null)     isEmbeddable=embeddable.booleanValue();
    if (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
  }
  renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
  initializeEmitterConfigs(request,renderOption.getOptions());
  runAndRenderTask.setRenderOption(renderOption);
  return runAndRenderTask;
}",0.9985170538803756
70878,"/** 
 * Creates a new render task and configure it.
 * @param out output stream
 * @param reportDocument report document
 * @param inputOptions input options
 * @param pageNumber page number
 * @param activeIds active IDs
 * @return configured render task
 * @throws ViewingSessionExpiredException 
 */
private IRenderTask createRenderTask(OutputStream out,IReportDocument reportDocument,InputOptions inputOptions,long pageNumber,List activeIds) throws ReportServiceException {
  HttpServletRequest request=(HttpServletRequest)inputOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)inputOptions.getOption(InputOptions.OPT_LOCALE);
  TimeZone timeZone=(TimeZone)inputOptions.getOption(InputOptions.OPT_TIMEZONE);
  Boolean isMasterPageContent=(Boolean)inputOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean masterPage=isMasterPageContent == null ? true : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)inputOptions.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)inputOptions.getOption(InputOptions.OPT_FORMAT);
  String emitterId=(String)inputOptions.getOption(InputOptions.OPT_EMITTER_ID);
  String iServletPath=(String)inputOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  boolean rtl=isRtl(inputOptions);
  boolean isDesigner=isDesigner(inputOptions);
  int pageOverflow=getPageOverflow(inputOptions);
  if (reportDocument == null) {
    throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
  }
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,pageOverflow,ParameterAccessor.isDesigner());
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null) {
      throw new IllegalStateException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request,session);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  renderOption.setEmitterID(emitterId);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,timeZone,false,rtl,masterPage,format,new Boolean(svgFlag),Boolean.toString(isDesigner));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,timeZone,isEmbeddable,rtl,masterPage,format,new Boolean(svgFlag),Boolean.toString(isDesigner));
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null) {
      throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
    handler.setViewingSessionId(session.getId());
  }
  handler.setPageOverflow(Integer.toString(pageOverflow));
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  if (pageNumber >= 0) {
    initializeEmitterConfigs(request,renderOption.getOptions());
  }
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  renderTask.setTimeZone(BirtUtility.toICUTimeZone(timeZone));
  return renderTask;
}","/** 
 * Creates a new render task and configure it.
 * @param out output stream
 * @param reportDocument report document
 * @param inputOptions input options
 * @param pageNumber page number
 * @param activeIds active IDs
 * @return configured render task
 * @throws ViewingSessionExpiredException 
 */
private IRenderTask createRenderTask(OutputStream out,IReportDocument reportDocument,InputOptions inputOptions,long pageNumber,List activeIds) throws ReportServiceException {
  HttpServletRequest request=(HttpServletRequest)inputOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)inputOptions.getOption(InputOptions.OPT_LOCALE);
  TimeZone timeZone=(TimeZone)inputOptions.getOption(InputOptions.OPT_TIMEZONE);
  Boolean isMasterPageContent=(Boolean)inputOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean masterPage=isMasterPageContent == null ? true : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)inputOptions.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)inputOptions.getOption(InputOptions.OPT_FORMAT);
  String emitterId=(String)inputOptions.getOption(InputOptions.OPT_EMITTER_ID);
  String iServletPath=(String)inputOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  boolean rtl=isRtl(inputOptions);
  boolean isDesigner=isDesigner(inputOptions);
  int pageOverflow=getPageOverflow(inputOptions);
  if (reportDocument == null) {
    throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
  }
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,pageOverflow,ParameterAccessor.isDesigner());
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null) {
      throw new IllegalStateException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request,session);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  renderOption.setEmitterID(emitterId);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,timeZone,false,rtl,masterPage,format,Boolean.valueOf(svgFlag),Boolean.toString(isDesigner));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,Boolean.valueOf(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,timeZone,isEmbeddable,rtl,masterPage,format,Boolean.valueOf(svgFlag),Boolean.toString(isDesigner));
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null) {
      throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
    handler.setViewingSessionId(session.getId());
  }
  handler.setPageOverflow(Integer.toString(pageOverflow));
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  if (pageNumber >= 0) {
    initializeEmitterConfigs(request,renderOption.getOptions());
  }
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  renderTask.setTimeZone(BirtUtility.toICUTimeZone(timeZone));
  return renderTask;
}",0.996122361051271
70879,"/** 
 * Get page number from incoming soap request.
 * @param request
 * @param params
 * @param document
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
protected long getPageNumber(HttpServletRequest request,Oprand[] params,String documentName) throws RemoteException, ReportServiceException {
  long pageNumber=-1;
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_PAGENO.equalsIgnoreCase(params[i].getName())) {
        try {
          pageNumber=Integer.parseInt(params[i].getValue());
        }
 catch (        NumberFormatException e) {
          pageNumber=-1;
        }
        InputOptions options=new InputOptions();
        options.setOption(InputOptions.OPT_REQUEST,request);
        long totalPageNumber=getReportService().getPageCount(documentName,options,new OutputOptions());
        if (pageNumber <= 0 || pageNumber > totalPageNumber) {
          AxisFault fault=new AxisFault();
          fault.setFaultCode(new QName(""String_Node_Str""));
          fault.setFaultString(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER,new Object[]{new Long(pageNumber),new Long(totalPageNumber)}));
          throw fault;
        }
        break;
      }
    }
  }
  return pageNumber;
}","/** 
 * Get page number from incoming soap request.
 * @param request
 * @param params
 * @param document
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
protected long getPageNumber(HttpServletRequest request,Oprand[] params,String documentName) throws RemoteException, ReportServiceException {
  long pageNumber=-1;
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_PAGENO.equalsIgnoreCase(params[i].getName())) {
        try {
          pageNumber=Integer.parseInt(params[i].getValue());
        }
 catch (        NumberFormatException e) {
          pageNumber=-1;
        }
        InputOptions options=new InputOptions();
        options.setOption(InputOptions.OPT_REQUEST,request);
        long totalPageNumber=getReportService().getPageCount(documentName,options,new OutputOptions());
        if (pageNumber <= 0 || pageNumber > totalPageNumber) {
          AxisFault fault=new AxisFault();
          fault.setFaultCode(new QName(""String_Node_Str""));
          fault.setFaultString(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER,new Object[]{Long.valueOf(pageNumber),Long.valueOf(totalPageNumber)}));
          throw fault;
        }
        break;
      }
    }
  }
  return pageNumber;
}",0.9909433962264153
70880,"/** 
 * Creates an InputOptions structure based on the values from the given attribute bean.
 * @param bean attribute bean.
 * @return input options
 */
protected InputOptions createInputOptions(BaseAttributeBean bean,boolean svgFlag){
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_LOCALE,bean.getLocale());
  options.setOption(InputOptions.OPT_TIMEZONE,bean.getTimeZone());
  options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  options.setOption(InputOptions.OPT_EMITTER_ID,bean.getEmitterId());
  options.setOption(InputOptions.OPT_FORMAT,bean.getFormat());
  options.setOption(InputOptions.OPT_SVG_FLAG,new Boolean(svgFlag));
  options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT,new Boolean(bean.isMasterPageContent()));
  options.setOption(InputOptions.OPT_IS_DESIGNER,new Boolean(bean.isDesigner()));
  options.setOption(InputOptions.OPT_PAGE_OVERFLOW,ParameterAccessor.getPageOverflow(context.getRequest()));
  return options;
}","/** 
 * Creates an InputOptions structure based on the values from the given attribute bean.
 * @param bean attribute bean.
 * @return input options
 */
protected InputOptions createInputOptions(BaseAttributeBean bean,boolean svgFlag){
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_LOCALE,bean.getLocale());
  options.setOption(InputOptions.OPT_TIMEZONE,bean.getTimeZone());
  options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  options.setOption(InputOptions.OPT_EMITTER_ID,bean.getEmitterId());
  options.setOption(InputOptions.OPT_FORMAT,bean.getFormat());
  options.setOption(InputOptions.OPT_SVG_FLAG,Boolean.valueOf(svgFlag));
  options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT,Boolean.valueOf(bean.isMasterPageContent()));
  options.setOption(InputOptions.OPT_IS_DESIGNER,Boolean.valueOf(bean.isDesigner()));
  options.setOption(InputOptions.OPT_PAGE_OVERFLOW,ParameterAccessor.getPageOverflow(context.getRequest()));
  return options;
}",0.9819458375125376
70881,"/** 
 * Paser returned report ids.
 * @param activeIds
 * @return
 * @throws RemoteException
 */
protected ReportId[] parseReportId(ArrayList activeIds) throws RemoteException {
  if (activeIds == null || activeIds.size() <= 0) {
    return null;
  }
  java.util.Vector ids=new java.util.Vector();
  for (int i=0; i < activeIds.size(); i++) {
    String id=(String)activeIds.get(i);
    int firstComma=id.indexOf(',');
    if (id == null || firstComma == -1) {
      AxisFault fault=new AxisFault();
      fault.setFaultCode(new QName(""String_Node_Str""));
      fault.setFaultString(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_ID_FORMAT,new String[]{id}));
      throw fault;
    }
    int secondComma=id.indexOf(',',firstComma + 1);
    if (secondComma == -1) {
      secondComma=id.length();
    }
    String type=id.substring(firstComma + 1,secondComma);
    if (ReportIdType._Document.equalsIgnoreCase(type) || ReportIdType._Table.equalsIgnoreCase(type) || ReportIdType._Chart.equalsIgnoreCase(type)|| ReportIdType._Extended.equalsIgnoreCase(type)|| ReportIdType._Label.equalsIgnoreCase(type)|| ReportIdType._Group.equalsIgnoreCase(type)|| ""String_Node_Str"".equalsIgnoreCase(type)) {
      ReportId reportId=new ReportId();
      reportId.setId(id.substring(0,id.indexOf(',')));
      if (ReportIdType._Document.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Document);
      }
 else       if (ReportIdType._Table.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Table);
      }
 else       if (ReportIdType._Chart.equalsIgnoreCase(type) || ReportIdType._Extended.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Chart);
      }
 else       if (ReportIdType._Label.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Label);
      }
 else       if (ReportIdType._Group.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Group);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.ColumnInfo);
      }
      try {
        reportId.setRptElementId(new Long(Long.parseLong(id.substring(secondComma + 1))));
      }
 catch (      Exception e) {
        reportId.setRptElementId(null);
      }
      ids.add(reportId);
    }
  }
  ReportId[] reportIds=new ReportId[ids.size()];
  for (int i=0; i < ids.size(); i++) {
    reportIds[i]=(ReportId)ids.get(i);
  }
  return reportIds;
}","/** 
 * Paser returned report ids.
 * @param activeIds
 * @return
 * @throws RemoteException
 */
protected ReportId[] parseReportId(ArrayList activeIds) throws RemoteException {
  if (activeIds == null || activeIds.size() <= 0) {
    return null;
  }
  java.util.Vector ids=new java.util.Vector();
  for (int i=0; i < activeIds.size(); i++) {
    String id=(String)activeIds.get(i);
    int firstComma=id.indexOf(',');
    if (id == null || firstComma == -1) {
      AxisFault fault=new AxisFault();
      fault.setFaultCode(new QName(""String_Node_Str""));
      fault.setFaultString(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_ID_FORMAT,new String[]{id}));
      throw fault;
    }
    int secondComma=id.indexOf(',',firstComma + 1);
    if (secondComma == -1) {
      secondComma=id.length();
    }
    String type=id.substring(firstComma + 1,secondComma);
    if (ReportIdType._Document.equalsIgnoreCase(type) || ReportIdType._Table.equalsIgnoreCase(type) || ReportIdType._Chart.equalsIgnoreCase(type)|| ReportIdType._Extended.equalsIgnoreCase(type)|| ReportIdType._Label.equalsIgnoreCase(type)|| ReportIdType._Group.equalsIgnoreCase(type)|| ""String_Node_Str"".equalsIgnoreCase(type)) {
      ReportId reportId=new ReportId();
      reportId.setId(id.substring(0,id.indexOf(',')));
      if (ReportIdType._Document.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Document);
      }
 else       if (ReportIdType._Table.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Table);
      }
 else       if (ReportIdType._Chart.equalsIgnoreCase(type) || ReportIdType._Extended.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Chart);
      }
 else       if (ReportIdType._Label.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Label);
      }
 else       if (ReportIdType._Group.equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.Group);
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(type)) {
        reportId.setType(ReportIdType.ColumnInfo);
      }
      try {
        reportId.setRptElementId(Long.valueOf(Long.parseLong(id.substring(secondComma + 1))));
      }
 catch (      Exception e) {
        reportId.setRptElementId(null);
      }
      ids.add(reportId);
    }
  }
  ReportId[] reportIds=new ReportId[ids.size()];
  for (int i=0; i < ids.size(); i++) {
    reportIds[i]=(ReportId)ids.get(i);
  }
  return reportIds;
}",0.997532894736842
70882,"/** 
 * Get page number from incoming soap request.
 * @param params
 * @param document
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
protected long getPageNumber(HttpServletRequest request,Oprand[] params,String documentName) throws RemoteException, ReportServiceException {
  long pageNumber=-1;
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_PAGENO.equalsIgnoreCase(params[i].getName())) {
        try {
          pageNumber=Integer.parseInt(params[i].getValue());
        }
 catch (        NumberFormatException e) {
          pageNumber=-1;
        }
        InputOptions options=new InputOptions();
        options.setOption(InputOptions.OPT_REQUEST,request);
        long totalPageNumber=getReportService().getPageCount(documentName,options,new OutputOptions());
        if (pageNumber <= 0 || pageNumber > totalPageNumber) {
          AxisFault fault=new AxisFault();
          fault.setFaultCode(new QName(""String_Node_Str""));
          fault.setFaultString(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER,new Object[]{new Long(pageNumber),new Long(totalPageNumber)}));
          throw fault;
        }
        break;
      }
    }
  }
  return pageNumber;
}","/** 
 * Get page number from incoming soap request.
 * @param params
 * @param document
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
protected long getPageNumber(HttpServletRequest request,Oprand[] params,String documentName) throws RemoteException, ReportServiceException {
  long pageNumber=-1;
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_PAGENO.equalsIgnoreCase(params[i].getName())) {
        try {
          pageNumber=Integer.parseInt(params[i].getValue());
        }
 catch (        NumberFormatException e) {
          pageNumber=-1;
        }
        InputOptions options=new InputOptions();
        options.setOption(InputOptions.OPT_REQUEST,request);
        long totalPageNumber=getReportService().getPageCount(documentName,options,new OutputOptions());
        if (pageNumber <= 0 || pageNumber > totalPageNumber) {
          AxisFault fault=new AxisFault();
          fault.setFaultCode(new QName(""String_Node_Str""));
          fault.setFaultString(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER,new Object[]{Long.valueOf(pageNumber),Long.valueOf(totalPageNumber)}));
          throw fault;
        }
        break;
      }
    }
  }
  return pageNumber;
}",0.9908186687069626
70883,"/** 
 * Get page number from incoming soap request.
 * @param params
 * @param document
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
protected long getPageNumber(HttpServletRequest request,Oprand[] params,String documentName) throws RemoteException, ReportServiceException {
  long pageNumber=-1;
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_PAGENO.equalsIgnoreCase(params[i].getName())) {
        try {
          pageNumber=Integer.parseInt(params[i].getValue());
        }
 catch (        NumberFormatException e) {
          pageNumber=-1;
        }
        if (pageNumber <= 0 || pageNumber > __totalPageNumber) {
          AxisFault fault=new AxisFault();
          fault.setFaultCode(new QName(""String_Node_Str""));
          fault.setFaultString(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER,new Object[]{new Long(pageNumber),new Long(__totalPageNumber)}));
          throw fault;
        }
        break;
      }
    }
  }
  return pageNumber;
}","/** 
 * Get page number from incoming soap request.
 * @param params
 * @param document
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
protected long getPageNumber(HttpServletRequest request,Oprand[] params,String documentName) throws RemoteException, ReportServiceException {
  long pageNumber=-1;
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_PAGENO.equalsIgnoreCase(params[i].getName())) {
        try {
          pageNumber=Integer.parseInt(params[i].getValue());
        }
 catch (        NumberFormatException e) {
          pageNumber=-1;
        }
        if (pageNumber <= 0 || pageNumber > __totalPageNumber) {
          AxisFault fault=new AxisFault();
          fault.setFaultCode(new QName(""String_Node_Str""));
          fault.setFaultString(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER,new Object[]{Long.valueOf(pageNumber),Long.valueOf(__totalPageNumber)}));
          throw fault;
        }
        break;
      }
    }
  }
  return pageNumber;
}",0.9890610756608932
70884,"/** 
 * Prepare parameters
 * @throws Exception
 * @throws RemoteException
 */
protected void prepareParameters() throws Exception, RemoteException {
  __bean=(ViewerAttributeBean)context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  if (ParameterAccessor.isGetReportlet(context.getRequest())) {
    __totalPageNumber=1;
  }
 else {
    InputOptions getPageCountOptions=new InputOptions();
    getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
    getPageCountOptions.setOption(InputOptions.OPT_TIMEZONE,__bean.getTimeZone());
    getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
    OutputOptions outputOptions=new OutputOptions();
    __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
    Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
    if (isCompleted != null) {
      __isCompleted=isCompleted.booleanValue();
    }
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    __bookmark=getBookmark(operation.getOprand(),__bean);
    if (__bookmark != null && __bookmark.length() > 0) {
      InputOptions options=new InputOptions();
      options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
      options.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
      if (isToc(operation.getOprand(),__bean)) {
        __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
      }
      __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
      if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{getBookmark(operation.getOprand(),__bean)}));
        throw fault;
      }
      __useBookmark=true;
    }
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER,new Object[]{new Long(__pageNumber),new Long(__totalPageNumber)}));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}","/** 
 * Prepare parameters
 * @throws Exception
 * @throws RemoteException
 */
protected void prepareParameters() throws Exception, RemoteException {
  __bean=(ViewerAttributeBean)context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  if (ParameterAccessor.isGetReportlet(context.getRequest())) {
    __totalPageNumber=1;
  }
 else {
    InputOptions getPageCountOptions=new InputOptions();
    getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
    getPageCountOptions.setOption(InputOptions.OPT_TIMEZONE,__bean.getTimeZone());
    getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
    OutputOptions outputOptions=new OutputOptions();
    __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
    Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
    if (isCompleted != null) {
      __isCompleted=isCompleted.booleanValue();
    }
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    __bookmark=getBookmark(operation.getOprand(),__bean);
    if (__bookmark != null && __bookmark.length() > 0) {
      InputOptions options=new InputOptions();
      options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
      options.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
      if (isToc(operation.getOprand(),__bean)) {
        __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
      }
      __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
      if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{getBookmark(operation.getOprand(),__bean)}));
        throw fault;
      }
      __useBookmark=true;
    }
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER,new Object[]{Long.valueOf(__pageNumber),Long.valueOf(__totalPageNumber)}));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}",0.9887920298879204
70885,"/** 
 * Prepare response
 * @throws ReportServiceException
 * @throws RemoteException
 */
protected void prepareResponse() throws ReportServiceException, RemoteException {
  TOC toc=new TOC();
  List children=__node.getChildren();
  if (children != null && children.size() > 0) {
    TOC[] childTOCNodes=new TOC[children.size()];
    for (int i=0; i < children.size(); i++) {
      ToC child=(ToC)children.get(i);
      childTOCNodes[i]=new TOC();
      childTOCNodes[i].setId(child.getID());
      childTOCNodes[i].setDisplayName(ParameterAccessor.htmlEncode(child.getDisplayName()));
      childTOCNodes[i].setBookmark(child.getBookmark());
      childTOCNodes[i].setStyle(child.getStyle());
      childTOCNodes[i].setIsLeaf(new Boolean(child.getChildren() == null || child.getChildren().size() <= 0));
    }
    toc.setChild(childTOCNodes);
  }
  Data data=new Data();
  data.setTOC(toc);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  updateData.setData(data);
  Update update=new Update();
  update.setUpdateData(updateData);
  response.setUpdate(new Update[]{update});
}","/** 
 * Prepare response
 * @throws ReportServiceException
 * @throws RemoteException
 */
protected void prepareResponse() throws ReportServiceException, RemoteException {
  TOC toc=new TOC();
  List children=__node.getChildren();
  if (children != null && children.size() > 0) {
    TOC[] childTOCNodes=new TOC[children.size()];
    for (int i=0; i < children.size(); i++) {
      ToC child=(ToC)children.get(i);
      childTOCNodes[i]=new TOC();
      childTOCNodes[i].setId(child.getID());
      childTOCNodes[i].setDisplayName(ParameterAccessor.htmlEncode(child.getDisplayName()));
      childTOCNodes[i].setBookmark(child.getBookmark());
      childTOCNodes[i].setStyle(child.getStyle());
      childTOCNodes[i].setIsLeaf(Boolean.valueOf(child.getChildren() == null || child.getChildren().size() <= 0));
    }
    toc.setChild(childTOCNodes);
  }
  Data data=new Data();
  data.setTOC(toc);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  updateData.setData(data);
  Update update=new Update();
  update.setUpdateData(updateData);
  response.setUpdate(new Update[]{update});
}",0.9946332737030412
70886,"/** 
 * Returns the cascading parameter selection list
 * @param paramName
 * @param design
 * @param groupName
 * @param groupKeys
 * @param options
 * @param attrBean
 * @param keepDefValue
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
private List<SelectItemChoice> doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean,boolean keepDefValue) throws RemoteException, ReportServiceException {
  ParameterDefinition parameter=attrBean.findParameterDefinition(paramName);
  String defaultValue=null;
  String defaultLabel=null;
  if (keepDefValue) {
    Object obj=attrBean.getDefaultValues().get(parameter.getName());
    if (obj != null) {
      defaultValue=DataUtil.getDisplayValue(obj,attrBean.getTimeZone());
      defaultLabel=DataUtil.getDisplayValue(null,parameter.getPattern(),obj,attrBean.getLocale(),attrBean.getTimeZone());
    }
  }
  Collection<ParameterSelectionChoice> list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  ScalarParameterBean parameterBean=new ScalarParameterBean(parameter);
  parameterBean.setRequired(parameter.isRequired());
  List<ParameterSelectionChoice> selectionList=ParameterUtility.makeSelectionList(list,parameterBean,attrBean.getLocale(),attrBean.getTimeZone(),false);
  return ParameterUtility.toSelectItemChoice(selectionList);
}","/** 
 * Returns the cascading parameter selection list
 * @param paramName
 * @param design
 * @param groupName
 * @param groupKeys
 * @param options
 * @param attrBean
 * @param keepDefValue
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
private List<SelectItemChoice> doQueryCascadeParameterSelectionList(String paramName,IViewerReportDesignHandle design,String groupName,Object[] groupKeys,InputOptions options,ViewerAttributeBean attrBean,boolean keepDefValue) throws RemoteException, ReportServiceException {
  ParameterDefinition parameter=attrBean.findParameterDefinition(paramName);
  Collection<ParameterSelectionChoice> list=getReportService().getSelectionListForCascadingGroup(design,groupName,groupKeys,options);
  ScalarParameterBean parameterBean=new ScalarParameterBean(parameter);
  parameterBean.setRequired(parameter.isRequired());
  List<ParameterSelectionChoice> selectionList=ParameterUtility.makeSelectionList(list,parameterBean,attrBean.getLocale(),attrBean.getTimeZone(),false);
  return ParameterUtility.toSelectItemChoice(selectionList);
}",0.8536870854467421
70887,"/** 
 * Returns the path to the folder containing the files for a given sub session.
 * @param sessionId session ID
 * @return file path
 */
private String getSessionSubfolder(String prefix,String sessionId,String subSessionId){
  String folder=""String_Node_Str"";
  if (sessionId != null) {
    folder=(prefix + sessionId) + File.separator;
    if (subSessionId != null) {
      folder+=(subSessionId != null ? subSessionId : ""String_Node_Str"") + File.separator;
    }
  }
 else {
    folder=""String_Node_Str"";
  }
  return folder;
}","/** 
 * Returns the path to the folder containing the files for a given sub session.
 * @param sessionId session ID
 * @return file path
 */
private String getSessionSubfolder(String prefix,String sessionId,String subSessionId){
  String folder=""String_Node_Str"";
  if (sessionId != null) {
    folder=(prefix + sessionId) + File.separator;
    if (subSessionId != null) {
      folder+=subSessionId + File.separator;
    }
  }
 else {
    folder=""String_Node_Str"";
  }
  return folder;
}",0.8344760039177277
70888,"public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=new Long(getRptElementId()).hashCode();
  _hashCode+=new Long(getDataSetId()).hashCode();
  __hashCodeCalc=false;
  return _hashCode;
}","public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=Long.valueOf(getRptElementId()).hashCode();
  _hashCode+=Long.valueOf(getDataSetId()).hashCode();
  __hashCodeCalc=false;
  return _hashCode;
}",0.9558823529411764
70889,"public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=new Long(getId()).hashCode();
  if (getName() != null) {
    _hashCode+=getName().hashCode();
  }
  if (getDisplayName() != null) {
    _hashCode+=getDisplayName().hashCode();
  }
  if (getDescription() != null) {
    _hashCode+=getDescription().hashCode();
  }
  _hashCode+=(isIsDeletable() ? Boolean.TRUE : Boolean.FALSE).hashCode();
  _hashCode+=(isIsModifiable() ? Boolean.TRUE : Boolean.FALSE).hashCode();
  if (getDefinition() != null) {
    _hashCode+=getDefinition().hashCode();
  }
  if (getDataSource() != null) {
    _hashCode+=getDataSource().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}","public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=Long.valueOf(getId()).hashCode();
  if (getName() != null) {
    _hashCode+=getName().hashCode();
  }
  if (getDisplayName() != null) {
    _hashCode+=getDisplayName().hashCode();
  }
  if (getDescription() != null) {
    _hashCode+=getDescription().hashCode();
  }
  _hashCode+=(isIsDeletable() ? Boolean.TRUE : Boolean.FALSE).hashCode();
  _hashCode+=(isIsModifiable() ? Boolean.TRUE : Boolean.FALSE).hashCode();
  if (getDefinition() != null) {
    _hashCode+=getDefinition().hashCode();
  }
  if (getDataSource() != null) {
    _hashCode+=getDataSource().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}",0.9920106524633822
70890,"public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=new Long(getId()).hashCode();
  _hashCode+=(isVisible() ? Boolean.TRUE : Boolean.FALSE).hashCode();
  if (getName() != null) {
    _hashCode+=getName().hashCode();
  }
  if (getDescription() != null) {
    _hashCode+=getDescription().hashCode();
  }
  if (getDataSetUsed() != null) {
    _hashCode+=getDataSetUsed().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}","public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=Long.valueOf(getId()).hashCode();
  _hashCode+=(isVisible() ? Boolean.TRUE : Boolean.FALSE).hashCode();
  if (getName() != null) {
    _hashCode+=getName().hashCode();
  }
  if (getDescription() != null) {
    _hashCode+=getDescription().hashCode();
  }
  if (getDataSetUsed() != null) {
    _hashCode+=getDataSetUsed().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}",0.98828125
70891,"public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=new Long(getId()).hashCode();
  _hashCode+=getS_Count();
  _hashCode+=getG_Count();
  if (getCH_Row() != null) {
    _hashCode+=getCH_Row().hashCode();
  }
  if (getTC_Row() != null) {
    _hashCode+=getTC_Row().hashCode();
  }
  if (getSections() != null) {
    _hashCode+=getSections().hashCode();
  }
  if (getGroups() != null) {
    _hashCode+=getGroups().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}","public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=Long.valueOf(getId()).hashCode();
  _hashCode+=getS_Count();
  _hashCode+=getG_Count();
  if (getCH_Row() != null) {
    _hashCode+=getCH_Row().hashCode();
  }
  if (getTC_Row() != null) {
    _hashCode+=getTC_Row().hashCode();
  }
  if (getSections() != null) {
    _hashCode+=getSections().hashCode();
  }
  if (getGroups() != null) {
    _hashCode+=getGroups().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}",0.381294964028777
70892,"public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=new Long(getId()).hashCode();
  if (getName() != null) {
    _hashCode+=getName().hashCode();
  }
  if (getDisplayName() != null) {
    _hashCode+=getDisplayName().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}","public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=Long.valueOf(getId()).hashCode();
  if (getName() != null) {
    _hashCode+=getName().hashCode();
  }
  if (getDisplayName() != null) {
    _hashCode+=getDisplayName().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}",0.9833333333333332
70893,"/** 
 * Render report content from design file
 * @param out
 * @throws Exception
 */
private void __renderReport(OutputStream out,IViewingSession session) throws Exception {
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  IReportRunnable runnable=(IReportRunnable)this.reportDesignHandle.getDesignObject();
  String reportTitle=ParameterAccessor.htmlDecode(BirtUtility.getTitleFromDesign(reportDesignHandle));
  Map params=__handleParameters(reportDesignHandle,null);
  Collection parameterDefList=getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  Map displayTexts=BirtUtility.getDisplayTexts(parameterDefList,null,(HttpServletRequest)pageContext.getRequest());
  String realReportletId=viewer.getReportletId();
  if (realReportletId == null) {
    if (viewer.getBookmark() != null && ""String_Node_Str"".equalsIgnoreCase(viewer.getIsReportlet())) {
      realReportletId=viewer.getBookmark();
    }
  }
  if (realReportletId != null) {
    Locale locale=(Locale)this.options.getOption(InputOptions.OPT_LOCALE);
    TimeZone timeZone=(TimeZone)this.options.getOption(InputOptions.OPT_TIMEZONE);
    String documentName=session.getCachedReportDocument(viewer.getReportDesign(),viewer.getId());
    List<Exception> errors=ReportEngineService.getInstance().runReport(request,runnable,documentName,locale,timeZone,params,displayTexts,new Integer(viewer.getMaxRowsOfRecords()));
    if (errors != null && !errors.isEmpty()) {
      for (Iterator<Exception> i=errors.iterator(); i.hasNext(); ) {
        i.next().printStackTrace();
      }
    }
    IReportDocument doc=ReportEngineService.getInstance().openReportDocument(null,documentName,BirtTagUtil.getModuleOptions(viewer));
    ReportEngineService.getInstance().renderReportlet(out,doc,this.options,realReportletId,null);
  }
 else {
    ReportEngineService.getInstance().runAndRenderReport(runnable,out,this.options,params,Boolean.TRUE,null,null,displayTexts,reportTitle,new Integer(viewer.getMaxRowsOfRecords()));
  }
}","/** 
 * Render report content from design file
 * @param out
 * @throws Exception
 */
private void __renderReport(OutputStream out,IViewingSession session) throws Exception {
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  IReportRunnable runnable=(IReportRunnable)this.reportDesignHandle.getDesignObject();
  String reportTitle=ParameterAccessor.htmlDecode(BirtUtility.getTitleFromDesign(reportDesignHandle));
  Map params=__handleParameters(reportDesignHandle,null);
  Collection parameterDefList=getReportService().getParameterDefinitions(reportDesignHandle,options,false);
  Map displayTexts=BirtUtility.getDisplayTexts(parameterDefList,null,(HttpServletRequest)pageContext.getRequest());
  String realReportletId=viewer.getReportletId();
  if (realReportletId == null) {
    if (viewer.getBookmark() != null && ""String_Node_Str"".equalsIgnoreCase(viewer.getIsReportlet())) {
      realReportletId=viewer.getBookmark();
    }
  }
  if (realReportletId != null) {
    Locale locale=(Locale)this.options.getOption(InputOptions.OPT_LOCALE);
    TimeZone timeZone=(TimeZone)this.options.getOption(InputOptions.OPT_TIMEZONE);
    String documentName=session.getCachedReportDocument(viewer.getReportDesign(),viewer.getId());
    List<Exception> errors=ReportEngineService.getInstance().runReport(request,runnable,documentName,locale,timeZone,params,displayTexts,Integer.valueOf(viewer.getMaxRowsOfRecords()));
    if (errors != null && !errors.isEmpty()) {
      for (Iterator<Exception> i=errors.iterator(); i.hasNext(); ) {
        i.next().printStackTrace();
      }
    }
    IReportDocument doc=ReportEngineService.getInstance().openReportDocument(null,documentName,BirtTagUtil.getModuleOptions(viewer));
    ReportEngineService.getInstance().renderReportlet(out,doc,this.options,realReportletId,null);
  }
 else {
    ReportEngineService.getInstance().runAndRenderReport(runnable,out,this.options,params,Boolean.TRUE,null,null,displayTexts,reportTitle,Integer.valueOf(viewer.getMaxRowsOfRecords()));
  }
}",0.9788489916379736
70894,"/** 
 * @throws BirtException
 * @throws Exception
 * @throws IOException
 */
private void __processWithDiv() throws BirtException, Exception, IOException {
  if (!reportServiceInitialized) {
    initializeReportService();
  }
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  IViewingSession session=ViewingSessionUtil.createSession(request);
  session.lock();
  try {
    this.options=new InputOptions();
    options.setOption(InputOptions.OPT_REQUEST,request);
    options.setOption(InputOptions.OPT_LOCALE,this.locale);
    options.setOption(InputOptions.OPT_TIMEZONE,this.timeZone);
    options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
    options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT,Boolean.valueOf(viewer.getAllowMasterPage()));
    options.setOption(InputOptions.OPT_SVG_FLAG,Boolean.valueOf(viewer.getSvg()));
    options.setOption(InputOptions.OPT_FORMAT,outputFormat);
    options.setOption(InputOptions.OPT_EMITTER_ID,emitterId);
    options.setOption(InputOptions.OPT_IS_DESIGNER,new Boolean(false));
    options.setOption(InputOptions.OPT_SERVLET_PATH,IBirtConstants.SERVLET_PATH_PREVIEW);
    options.setOption(InputOptions.OPT_PAGE_OVERFLOW,viewer.getPageOverflow());
    reportDesignHandle=BirtTagUtil.getDesignHandle(request,viewer);
    if (viewer.isHostPage()) {
      HttpServletResponse response=(HttpServletResponse)pageContext.getResponse();
      __handleOutputReport(response.getOutputStream(),session);
    }
 else {
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      __handleOutputReport(out,session);
      String content=out.toString();
      JspWriter writer=pageContext.getOut();
      writer.write(__handleStyle(content));
      writer.write(__handleScript(content));
      writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str""+ __handleDivAppearance()+ ""String_Node_Str"");
      writer.write(""String_Node_Str"" + __handleBodyStyle(content) + ""String_Node_Str"");
      writer.write(__handleBody(content) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
  }
  finally {
    session.unlock();
  }
}","/** 
 * @throws BirtException
 * @throws Exception
 * @throws IOException
 */
private void __processWithDiv() throws BirtException, Exception, IOException {
  if (!reportServiceInitialized) {
    initializeReportService();
  }
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  IViewingSession session=ViewingSessionUtil.createSession(request);
  session.lock();
  try {
    this.options=new InputOptions();
    options.setOption(InputOptions.OPT_REQUEST,request);
    options.setOption(InputOptions.OPT_LOCALE,this.locale);
    options.setOption(InputOptions.OPT_TIMEZONE,this.timeZone);
    options.setOption(InputOptions.OPT_RTL,Boolean.valueOf(viewer.getRtl()));
    options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT,Boolean.valueOf(viewer.getAllowMasterPage()));
    options.setOption(InputOptions.OPT_SVG_FLAG,Boolean.valueOf(viewer.getSvg()));
    options.setOption(InputOptions.OPT_FORMAT,outputFormat);
    options.setOption(InputOptions.OPT_EMITTER_ID,emitterId);
    options.setOption(InputOptions.OPT_IS_DESIGNER,Boolean.valueOf(false));
    options.setOption(InputOptions.OPT_SERVLET_PATH,IBirtConstants.SERVLET_PATH_PREVIEW);
    options.setOption(InputOptions.OPT_PAGE_OVERFLOW,viewer.getPageOverflow());
    reportDesignHandle=BirtTagUtil.getDesignHandle(request,viewer);
    if (viewer.isHostPage()) {
      HttpServletResponse response=(HttpServletResponse)pageContext.getResponse();
      __handleOutputReport(response.getOutputStream(),session);
    }
 else {
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      __handleOutputReport(out,session);
      String content=out.toString();
      JspWriter writer=pageContext.getOut();
      writer.write(__handleStyle(content));
      writer.write(__handleScript(content));
      writer.write(""String_Node_Str"" + viewer.getId() + ""String_Node_Str""+ __handleDivAppearance()+ ""String_Node_Str"");
      writer.write(""String_Node_Str"" + __handleBodyStyle(content) + ""String_Node_Str"");
      writer.write(__handleBody(content) + ""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
  }
  finally {
    session.unlock();
  }
}",0.9972514887769124
70895,"/** 
 * Handle SOAP operation. Parse report parameters and display text
 * @param operation
 * @param bean
 * @param parameterMap
 * @param displayTexts
 * @throws Exception
 */
public static void handleOperation(Operation operation,ViewerAttributeBean bean,Map parameterMap,Map displayTexts) throws Exception {
  if (operation == null || bean == null || parameterMap == null || displayTexts == null)   return;
  List locs=new ArrayList();
  Map params=new HashMap();
  String displayTextParam=null;
  Oprand[] oprands=operation.getOprand();
  for (int i=0; i < oprands.length; i++) {
    String paramName=oprands[i].getName();
    Object paramValue=oprands[i].getValue();
    if (paramName == null || paramValue == null)     continue;
    if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISLOCALE)) {
      locs.add(paramValue);
    }
 else     if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
      ParameterDefinition parameter=bean.findParameterDefinition(displayTextParam);
      if (parameter != null) {
        if (parameter.isMultiValue())         displayTexts.put(displayTextParam,null);
 else         displayTexts.put(displayTextParam,paramValue);
      }
      continue;
    }
 else {
      if (ParameterAccessor.PARAM_ISNULL.equalsIgnoreCase(paramName)) {
        paramName=(String)paramValue;
        paramValue=null;
      }
      List list=(List)params.get(paramName);
      if (list == null) {
        list=new ArrayList();
        params.put(paramName,list);
      }
      list.add(paramValue);
    }
  }
  Iterator it=params.keySet().iterator();
  while (it.hasNext()) {
    String paramName=(String)it.next();
    List paramValues=(List)params.get(paramName);
    ParameterDefinition parameter=bean.findParameterDefinition(paramName);
    if (parameter == null)     continue;
    String pattern=parameter.getPattern();
    String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
    boolean isLocale=locs.contains(paramName);
    if (parameter.isMultiValue()) {
      List values=new ArrayList();
      for (int i=0; i < paramValues.size(); i++) {
        Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(i),bean.getLocale(),bean.getTimeZone(),isLocale);
        values.add(paramValueObj);
      }
      if (values.size() == 0 || (values.size() == 1 && values.get(0) == null))       parameterMap.put(paramName,null);
 else       parameterMap.put(paramName,values.toArray());
    }
 else {
      Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(0),bean.getLocale(),bean.getTimeZone(),isLocale);
      parameterMap.put(paramName,paramValueObj);
    }
  }
}","/** 
 * Handle SOAP operation. Parse report parameters and display text
 * @param operation
 * @param bean
 * @param parameterMap
 * @param displayTexts
 * @throws Exception
 */
public static void handleOperation(Operation operation,ViewerAttributeBean bean,Map parameterMap,Map displayTexts) throws Exception {
  if (operation == null || bean == null || parameterMap == null || displayTexts == null)   return;
  List locs=new ArrayList();
  Map params=new HashMap();
  String displayTextParam=null;
  Oprand[] oprands=operation.getOprand();
  for (int i=0; i < oprands.length; i++) {
    String paramName=oprands[i].getName();
    Object paramValue=oprands[i].getValue();
    if (paramName == null || paramValue == null)     continue;
    if (paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISLOCALE)) {
      locs.add(paramValue);
    }
 else     if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
      ParameterDefinition parameter=bean.findParameterDefinition(displayTextParam);
      if (parameter != null) {
        if (parameter.isMultiValue())         displayTexts.put(displayTextParam,null);
 else         displayTexts.put(displayTextParam,paramValue);
      }
      continue;
    }
 else {
      if (ParameterAccessor.PARAM_ISNULL.equalsIgnoreCase(paramName)) {
        paramName=(String)paramValue;
        paramValue=null;
      }
      List list=(List)params.get(paramName);
      if (list == null) {
        list=new ArrayList();
        params.put(paramName,list);
      }
      list.add(paramValue);
    }
  }
  Iterator it=params.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    String paramName=(String)entry.getKey();
    List paramValues=(List)entry.getValue();
    ParameterDefinition parameter=bean.findParameterDefinition(paramName);
    if (parameter == null)     continue;
    String pattern=parameter.getPattern();
    String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
    boolean isLocale=locs.contains(paramName);
    if (parameter.isMultiValue()) {
      List values=new ArrayList();
      for (int i=0; i < paramValues.size(); i++) {
        Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(i),bean.getLocale(),bean.getTimeZone(),isLocale);
        values.add(paramValueObj);
      }
      if (values.size() == 0 || (values.size() == 1 && values.get(0) == null))       parameterMap.put(paramName,null);
 else       parameterMap.put(paramName,values.toArray());
    }
 else {
      Object paramValueObj=DataUtil.validate(paramName,dataType,pattern,(String)paramValues.get(0),bean.getLocale(),bean.getTimeZone(),isLocale);
      parameterMap.put(paramName,paramValueObj);
    }
  }
}",0.9828467153284672
70896,"/** 
 * @see org.eclipse.birt.report.engine.dataextraction.csv.ICSVDataExtractionOption#setExportDataType(boolean)
 */
public void setExportDataType(boolean isExportDataType){
  setOption(OUTPUT_EXPORT_DATA_TYPE,new Boolean(isExportDataType));
}","/** 
 * @see org.eclipse.birt.report.engine.dataextraction.csv.ICSVDataExtractionOption#setExportDataType(boolean)
 */
public void setExportDataType(boolean isExportDataType){
  setOption(OUTPUT_EXPORT_DATA_TYPE,Boolean.valueOf(isExportDataType));
}",0.9757085020242916
70897,"/** 
 * @see org.eclipse.birt.report.engine.dataextraction.csv.ICSVDataExtractionOption#setLocaleNeutralFormat(boolean)
 */
public void setLocaleNeutralFormat(boolean isLocaleNeutralFormat){
  setOption(OUTPUT_LOCALE_NEUTRAL_FORMAT,new Boolean(isLocaleNeutralFormat));
}","/** 
 * @see org.eclipse.birt.report.engine.dataextraction.csv.ICSVDataExtractionOption#setLocaleNeutralFormat(boolean)
 */
public void setLocaleNeutralFormat(boolean isLocaleNeutralFormat){
  setOption(OUTPUT_LOCALE_NEUTRAL_FORMAT,Boolean.valueOf(isLocaleNeutralFormat));
}",0.9779411764705882
70898,"public void widgetSelected(SelectionEvent e){
  if (webapp != null && webapp.useCustomParamHandling()) {
    refresh();
  }
 else {
    parameterDialog.open();
    if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
      refresh();
    }
  }
}","public void widgetSelected(SelectionEvent e){
  if (webapp != null && webapp.useCustomParamHandling()) {
    suggestShowParameterPage=true;
    refresh();
    suggestShowParameterPage=false;
  }
 else {
    parameterDialog.open();
    if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
      refresh();
    }
  }
}",0.864696734059098
70899,"/** 
 * Refresh swt browser
 */
public void display(){
  String uri=getFileUri();
  if (uri != null && uri.length() > 0) {
    if (this.options == null) {
      this.options=new HashMap<String,String>();
      this.options.put(WebViewer.SERVLET_NAME_KEY,InputParameterHtmlDialog.VIEWER_RUN);
      this.options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
    }
    this.options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
    this.options.put(WebViewer.MAX_ROWS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
    this.options.put(WebViewer.MAX_CUBE_ROW_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBEROWLEVEL));
    this.options.put(WebViewer.MAX_CUBE_COLUMN_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL));
    String extKey=ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.APPCONTEXT_EXTENSION_KEY);
    if (extKey != null && extKey.length() > 0) {
      this.options.put(WebViewer.APPCONTEXT_EXTENSION_KEY,extKey);
    }
    System.setProperty(IPreviewConstants.MAX_DATASET_ROWS,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
    System.setProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBEROWLEVEL));
    System.setProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL));
    if (browser != null && !browser.isDisposed()) {
      WebViewer.display(uri,browser,this.options);
    }
 else {
      WebViewer.display(uri,this.options);
    }
  }
}","/** 
 * Refresh swt browser
 */
public void display(){
  String uri=getFileUri();
  if (uri != null && uri.length() > 0) {
    if (this.options == null) {
      this.options=new HashMap<String,String>();
      this.options.put(WebViewer.SERVLET_NAME_KEY,InputParameterHtmlDialog.VIEWER_RUN);
      this.options.put(WebViewer.FORMAT_KEY,WebViewer.HTML);
    }
    this.options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
    this.options.put(WebViewer.MAX_ROWS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
    this.options.put(WebViewer.MAX_CUBE_ROW_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBEROWLEVEL));
    this.options.put(WebViewer.MAX_CUBE_COLUMN_LEVELS_KEY,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL));
    String extKey=ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.APPCONTEXT_EXTENSION_KEY);
    if (extKey != null && extKey.length() > 0) {
      this.options.put(WebViewer.APPCONTEXT_EXTENSION_KEY,extKey);
    }
 else {
      this.options.remove(WebViewer.APPCONTEXT_EXTENSION_KEY);
    }
    if (suggestShowParameterPage) {
      this.options.put(WebViewer.SHOW_PARAMETER_PAGE_KEY,""String_Node_Str"");
    }
 else {
      this.options.remove(WebViewer.SHOW_PARAMETER_PAGE_KEY);
    }
    System.setProperty(IPreviewConstants.MAX_DATASET_ROWS,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW));
    System.setProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBEROWLEVEL));
    System.setProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS,ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL));
    if (browser != null && !browser.isDisposed()) {
      WebViewer.display(uri,browser,this.options);
    }
 else {
      WebViewer.display(uri,this.options);
    }
  }
}",0.9286089238845144
70900,"/** 
 * Create controls in the preview editor.
 * @param parent parent composite
 */
public void createPartControl(Composite parent){
  final ScrolledComposite sc=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  mainPane=new Composite(sc,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.verticalSpacing=0;
  mainPane.setLayout(layout);
  mainPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Composite buttonTray=new Composite(mainPane,SWT.NONE);
  GridData gData=new GridData(GridData.FILL_BOTH);
  gData.grabExcessHorizontalSpace=true;
  gData.grabExcessVerticalSpace=false;
  buttonTray.setLayoutData(gData);
  layout=new GridLayout(2,false);
  layout.marginWidth=5;
  layout.horizontalSpacing=0;
  buttonTray.setLayout(layout);
  bParameter=new Button(buttonTray,SWT.PUSH);
  bParameter.setToolTipText(Messages.getString(""String_Node_Str""));
  bParameter.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData();
  bParameter.setLayoutData(gd);
  final FormText note=new FormText(buttonTray,SWT.NONE);
  note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
  note.setSize(SWT.DEFAULT - 10,SWT.DEFAULT);
  gd=new GridData();
  gd.horizontalIndent=20;
  note.setLayoutData(gd);
  note.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      if (PreferencesUtil.createPreferenceDialogOn(UIUtil.getDefaultShell(),""String_Node_Str"",new String[]{""String_Node_Str""},null).open() == Window.OK) {
        boolean ret=MessageDialog.openQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (ret == true) {
          refresh();
        }
      }
    }
  }
);
  ViewerPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (note == null || note.isDisposed()) {
        ViewerPlugin.getDefault().getPluginPreferences().removePropertyChangeListener(this);
        return;
      }
      if (WebViewer.PREVIEW_MAXROW.equals(event.getProperty())) {
        note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
        buttonTray.layout();
      }
    }
  }
);
  progressBar=new ProgressBar(mainPane,SWT.INDETERMINATE);
  gd=new GridData(GridData.END,GridData.CENTER,false,false);
  gd.heightHint=10;
  gd.widthHint=100;
  progressBar.setLayoutData(gd);
  progressBar.setVisible(true);
  createMainBrowser();
  parameterDialog=new InputParameterHtmlDialog(Display.getCurrent().getActiveShell(),InputParameterHtmlDialog.TITLE,getFileUri(),browser);
  if (bParameter != null) {
    final IWebAppInfo webapp=WebViewer.getCurrentWebApp();
    bParameter.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        if (webapp != null && webapp.useCustomParamHandling()) {
          refresh();
        }
 else {
          parameterDialog.open();
          if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
            refresh();
          }
        }
      }
    }
);
  }
  sc.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      sc.setMinSize(buttonTray.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      mainPane.layout();
    }
  }
);
  sc.setContent(mainPane);
}","/** 
 * Create controls in the preview editor.
 * @param parent parent composite
 */
public void createPartControl(Composite parent){
  final ScrolledComposite sc=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  mainPane=new Composite(sc,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.verticalSpacing=0;
  mainPane.setLayout(layout);
  mainPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Composite buttonTray=new Composite(mainPane,SWT.NONE);
  GridData gData=new GridData(GridData.FILL_BOTH);
  gData.grabExcessHorizontalSpace=true;
  gData.grabExcessVerticalSpace=false;
  buttonTray.setLayoutData(gData);
  layout=new GridLayout(2,false);
  layout.marginWidth=5;
  layout.horizontalSpacing=0;
  buttonTray.setLayout(layout);
  bParameter=new Button(buttonTray,SWT.PUSH);
  bParameter.setToolTipText(Messages.getString(""String_Node_Str""));
  bParameter.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData();
  bParameter.setLayoutData(gd);
  final FormText note=new FormText(buttonTray,SWT.NONE);
  note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
  note.setSize(SWT.DEFAULT - 10,SWT.DEFAULT);
  gd=new GridData();
  gd.horizontalIndent=20;
  note.setLayoutData(gd);
  note.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      if (PreferencesUtil.createPreferenceDialogOn(UIUtil.getDefaultShell(),""String_Node_Str"",new String[]{""String_Node_Str""},null).open() == Window.OK) {
        boolean ret=MessageDialog.openQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (ret == true) {
          refresh();
        }
      }
    }
  }
);
  ViewerPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (note == null || note.isDisposed()) {
        ViewerPlugin.getDefault().getPluginPreferences().removePropertyChangeListener(this);
        return;
      }
      if (WebViewer.PREVIEW_MAXROW.equals(event.getProperty())) {
        note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
        buttonTray.layout();
      }
    }
  }
);
  progressBar=new ProgressBar(mainPane,SWT.INDETERMINATE);
  gd=new GridData(GridData.END,GridData.CENTER,false,false);
  gd.heightHint=10;
  gd.widthHint=100;
  progressBar.setLayoutData(gd);
  progressBar.setVisible(true);
  createMainBrowser();
  parameterDialog=new InputParameterHtmlDialog(Display.getCurrent().getActiveShell(),InputParameterHtmlDialog.TITLE,getFileUri(),browser);
  if (bParameter != null) {
    final IWebAppInfo webapp=WebViewer.getCurrentWebApp();
    bParameter.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        if (webapp != null && webapp.useCustomParamHandling()) {
          suggestShowParameterPage=true;
          refresh();
          suggestShowParameterPage=false;
        }
 else {
          parameterDialog.open();
          if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
            refresh();
          }
        }
      }
    }
);
  }
  sc.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      sc.setMinSize(buttonTray.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      mainPane.layout();
    }
  }
);
  sc.setContent(mainPane);
}",0.988575361321404
70901,"private void populateConnectionProp() throws SQLException {
  if (jdbcConn != null) {
    jdbcConn.setAutoCommit(this.autoCommit);
    if (this.isolationMode != Constants.TRANSCATION_ISOLATION_DEFAULT)     jdbcConn.setTransactionIsolation(this.isolationMode);
  }
}","private void populateConnectionProp() throws SQLException {
  if (jdbcConn != null) {
    if (this.autoCommit != null)     jdbcConn.setAutoCommit(this.autoCommit);
    if (this.isolationMode != Constants.TRANSCATION_ISOLATION_DEFAULT)     jdbcConn.setTransactionIsolation(this.isolationMode);
  }
}",0.9413854351687388
70902,"/** 
 * perform edit directly when the request is the corresponding type.
 */
public void performRequest(Request request){
  if (RequestConstants.REQ_OPEN.equals(request.getType()) || ReportRequest.CREATE_ELEMENT.equals(request.getType())) {
    if (isEdited()) {
      return;
    }
    setEdited(true);
    try {
      performDirectEdit();
    }
 catch (    RuntimeException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
    setEdited(false);
  }
}","/** 
 * perform edit directly when the request is the corresponding type.
 */
public void performRequest(Request request){
  if (request.getExtendedData().get(DesignerConstants.NEWOBJECT_FROM_LIBRARY) != null) {
    return;
  }
  if (RequestConstants.REQ_OPEN.equals(request.getType()) || ReportRequest.CREATE_ELEMENT.equals(request.getType())) {
    if (isEdited()) {
      return;
    }
    setEdited(true);
    try {
      performDirectEdit();
    }
 catch (    RuntimeException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
    setEdited(false);
  }
}",0.8983543078412392
70903,"public boolean preHandleMouseUp(){
  ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  LibraryHandle library=(LibraryHandle)elementHandle.getRoot();
  try {
    if (UIUtil.includeLibrary(moduleHandle,library)) {
      if (elementHandle instanceof ThemeHandle) {
        ThemeHandle model=UIUtil.applyTheme((ThemeHandle)elementHandle,moduleHandle,library);
        if (model != null) {
          setModel(elementHandle);
        }
      }
 else {
        DesignElementHandle newHandle=moduleHandle.getElementFactory().newElementFrom(elementHandle,elementHandle.getName());
        setModel(newHandle);
      }
    }
  }
 catch (  Exception e) {
    if (e instanceof InvalidParentException || e instanceof WrongTypeException) {
      GUIException exception=GUIException.createGUIException(ReportPlugin.REPORT_UI,e,""String_Node_Str"");
      ExceptionHandler.handle(exception);
    }
 else {
      ExceptionHandler.handle(e);
    }
  }
  return super.preHandleMouseUp();
}","public boolean preHandleMouseUp(){
  ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  LibraryHandle library=(LibraryHandle)elementHandle.getRoot();
  try {
    if (UIUtil.includeLibrary(moduleHandle,library)) {
      if (elementHandle instanceof ThemeHandle) {
        ThemeHandle model=UIUtil.applyTheme((ThemeHandle)elementHandle,moduleHandle,library);
        if (model != null) {
          setModel(elementHandle);
        }
      }
 else {
        DesignElementHandle newHandle=moduleHandle.getElementFactory().newElementFrom(elementHandle,elementHandle.getName());
        setModel(newHandle);
      }
    }
  }
 catch (  Exception e) {
    if (e instanceof InvalidParentException || e instanceof WrongTypeException) {
      GUIException exception=GUIException.createGUIException(ReportPlugin.REPORT_UI,e,""String_Node_Str"");
      ExceptionHandler.handle(exception);
    }
 else {
      ExceptionHandler.handle(e);
    }
  }
  getRequest().getExtendedData().put(DesignerConstants.NEWOBJECT_FROM_LIBRARY,Boolean.TRUE);
  return super.preHandleMouseUp();
}",0.9292161520190024
70904,"protected void handleDrop(){
  updateTargetRequest();
  updateTargetEditPart();
  if (DNDService.getInstance().performDrop(TemplateTransfer.getInstance().getTemplate(),getTargetEditPart(),DND.DROP_DEFAULT,new DNDLocation(getDropLocation()))) {
    return;
  }
  boolean isScalarparameter=false;
  boolean isResultSetColumn=false;
  boolean isEmbeddImage=false;
  final Object template=TemplateTransfer.getInstance().getTemplate();
  Assert.isNotNull(template);
  Assert.isTrue(handleValidateDrag(template));
  AbstractToolHandleExtends preHandle=null;
  String transName=null;
  if (template instanceof String) {
    PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
    if (template.toString().startsWith(IReportElementConstants.REPORT_ELEMENT_EXTENDED)) {
      String extensionName=template.toString().substring(IReportElementConstants.REPORT_ELEMENT_EXTENDED.length());
      for (int i=0; i < entries.length; i++) {
        if (entries[i].getItemName().equals(extensionName)) {
          try {
            CommandUtils.setVariable(""String_Node_Str"",getTargetEditPart());
            CommandUtils.setVariable(""String_Node_Str"",getTargetRequest());
            getCreateRequest().getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,entries[i].executeCreate());
            selectAddedObject();
            return;
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    transName=TRANS_LABEL_CREATE_ELEMENT;
    preHandle=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(template);
  }
 else   if (handleValidateInsert(template)) {
    transName=InsertInLayoutAction.DISPLAY_TEXT;
    Object objectType=getFactory(template).getObjectType();
    if (objectType instanceof DataSetHandle) {
      preHandle=new DataSetToolExtends();
    }
 else     if (objectType instanceof DataSetItemModel) {
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ResultSetColumnHandle) {
      isResultSetColumn=true;
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ScalarParameterHandle) {
      isScalarparameter=true;
      preHandle=new ParameterToolExtends();
    }
 else     if (objectType instanceof DimensionHandle) {
      preHandle=new DimensionHandleToolExtends();
    }
 else     if (objectType instanceof MeasureHandle) {
      preHandle=new MeasureHandleToolExtends();
    }
  }
 else   if (handleValidateLibrary(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
 else     preHandle=new LibraryElementsToolHandleExtends((DesignElementHandle)dragObj);
  }
 else   if (handleValidateOutline(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
  }
  if (preHandle != null) {
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    stack.startTrans(transName);
    preHandle.setRequest(this.getCreateRequest());
    preHandle.setTargetEditPart(getTargetEditPart());
    if (isEmbeddImage) {
      Object dragObj=getSingleTransferData(template);
      if (dragObj instanceof EmbeddedImageHandle) {
        if (((EmbeddedImageHandle)dragObj).getElementHandle().getRoot() instanceof LibraryHandle) {
          ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
          LibraryHandle library=(LibraryHandle)((EmbeddedImageHandle)dragObj).getElementHandle().getRoot();
          try {
            if (UIUtil.includeLibrary(moduleHandle,library)) {
              EmbeddedImage image=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)dragObj,moduleHandle);
              DNDUtil.addEmbeddedImageHandle(getTargetEditPart().getModel(),image);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    Command command=this.getCommand();
    if (command != null && command.canExecute()) {
      if (!(preHandle.preHandleMouseUp())) {
        stack.rollback();
        return;
      }
    }
    boolean isTheme=checkTheme(preHandle,getSingleTransferData(template));
    if (!isTheme) {
      super.handleDrop();
      if (!preHandle.postHandleCreation()) {
        stack.rollback();
        return;
      }
      if (isScalarparameter || isResultSetColumn) {
        Request request=new Request(ReportRequest.CREATE_SCALARPARAMETER_OR_RESULTSETCOLUMN);
        selectAddedObject(request);
      }
 else       if (isEmbeddImage) {
        Object dragObj=getSingleTransferData(template);
        final Object model=getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
        try {
          ((ImageHandle)model).setImageName(((EmbeddedImageHandle)dragObj).getName());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
        Request request=new Request(ReportRequest.SELECTION);
        selectAddedObject(request);
      }
 else       selectAddedObject();
    }
    stack.commit();
  }
}","protected void handleDrop(){
  updateTargetRequest();
  updateTargetEditPart();
  if (DNDService.getInstance().performDrop(TemplateTransfer.getInstance().getTemplate(),getTargetEditPart(),DND.DROP_DEFAULT,new DNDLocation(getDropLocation()))) {
    return;
  }
  boolean isScalarparameter=false;
  boolean isResultSetColumn=false;
  boolean isEmbeddImage=false;
  final Object template=TemplateTransfer.getInstance().getTemplate();
  Assert.isNotNull(template);
  Assert.isTrue(handleValidateDrag(template));
  AbstractToolHandleExtends preHandle=null;
  String transName=null;
  if (template instanceof String) {
    PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
    if (template.toString().startsWith(IReportElementConstants.REPORT_ELEMENT_EXTENDED)) {
      String extensionName=template.toString().substring(IReportElementConstants.REPORT_ELEMENT_EXTENDED.length());
      for (int i=0; i < entries.length; i++) {
        if (entries[i].getItemName().equals(extensionName)) {
          try {
            CommandUtils.setVariable(""String_Node_Str"",getTargetEditPart());
            CommandUtils.setVariable(""String_Node_Str"",getTargetRequest());
            getCreateRequest().getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,entries[i].executeCreate());
            selectAddedObject();
            return;
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    transName=TRANS_LABEL_CREATE_ELEMENT;
    preHandle=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(template);
  }
 else   if (handleValidateInsert(template)) {
    transName=InsertInLayoutAction.DISPLAY_TEXT;
    Object objectType=getFactory(template).getObjectType();
    if (objectType instanceof DataSetHandle) {
      preHandle=new DataSetToolExtends();
    }
 else     if (objectType instanceof DataSetItemModel) {
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ResultSetColumnHandle) {
      isResultSetColumn=true;
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ScalarParameterHandle) {
      isScalarparameter=true;
      preHandle=new ParameterToolExtends();
    }
 else     if (objectType instanceof DimensionHandle) {
      preHandle=new DimensionHandleToolExtends();
    }
 else     if (objectType instanceof MeasureHandle) {
      preHandle=new MeasureHandleToolExtends();
    }
  }
 else   if (handleValidateLibrary(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
 else     preHandle=new LibraryElementsToolHandleExtends((DesignElementHandle)dragObj);
  }
 else   if (handleValidateOutline(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
  }
  if (preHandle != null) {
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    stack.startTrans(transName);
    preHandle.setRequest(this.getCreateRequest());
    preHandle.setTargetEditPart(getTargetEditPart());
    if (isEmbeddImage) {
      Object dragObj=getSingleTransferData(template);
      if (dragObj instanceof EmbeddedImageHandle) {
        if (((EmbeddedImageHandle)dragObj).getElementHandle().getRoot() instanceof LibraryHandle) {
          ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
          LibraryHandle library=(LibraryHandle)((EmbeddedImageHandle)dragObj).getElementHandle().getRoot();
          try {
            if (UIUtil.includeLibrary(moduleHandle,library)) {
              EmbeddedImage image=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)dragObj,moduleHandle);
              DNDUtil.addEmbeddedImageHandle(getTargetEditPart().getModel(),image);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    Command command=this.getCommand();
    if (command != null && command.canExecute()) {
      if (!(preHandle.preHandleMouseUp())) {
        stack.rollback();
        return;
      }
    }
    boolean isTheme=checkTheme(preHandle,getSingleTransferData(template));
    if (!isTheme) {
      super.handleDrop();
      if (!preHandle.postHandleCreation()) {
        stack.rollback();
        return;
      }
      Request request=new Request();
      if (getCreateRequest().getExtendedData().get(DesignerConstants.NEWOBJECT_FROM_LIBRARY) != null) {
        request.getExtendedData().put(DesignerConstants.NEWOBJECT_FROM_LIBRARY,getCreateRequest().getExtendedData().get(DesignerConstants.NEWOBJECT_FROM_LIBRARY));
      }
      if (isScalarparameter || isResultSetColumn) {
        request.setType(ReportRequest.CREATE_SCALARPARAMETER_OR_RESULTSETCOLUMN);
        selectAddedObject(request);
      }
 else       if (isEmbeddImage) {
        Object dragObj=getSingleTransferData(template);
        final Object model=getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
        try {
          ((ImageHandle)model).setImageName(((EmbeddedImageHandle)dragObj).getName());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
        request.setType(ReportRequest.SELECTION);
        selectAddedObject(request);
      }
 else {
        request.setType(ReportRequest.CREATE_ELEMENT);
        selectAddedObject(request);
      }
    }
    stack.commit();
  }
}",0.9561298629633036
70905,"/** 
 * Build the style of the page
 */
public void buildPageStyle(IPageContent page,StringBuffer styleBuffer){
  IStyle style=page.getStyle();
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
}","/** 
 * Build the style of the page
 */
public void buildPageStyle(IPageContent page,StringBuffer styleBuffer){
  IStyle style=page.getStyle();
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildBorders(styleBuffer,style);
}",0.8916666666666667
70906,"public void startPage(IPageContent page) throws BirtException {
  if (orientation == null) {
    orientation=capitalize(page.getOrientation());
  }
  if (needOutputInMasterPage(page.getPageHeader()) && needOutputInMasterPage(page.getPageFooter())) {
    outputInMasterPage=true;
    pageHeader=formatHeaderFooter(page.getPageHeader(),true);
    pageFooter=formatHeaderFooter(page.getPageFooter(),false);
  }
  if (!outputInMasterPage && page.getPageHeader() != null) {
    contentVisitor.visitChildren(page.getPageHeader(),null);
  }
}","public void startPage(IPageContent page) throws BirtException {
  if (orientation == null) {
    orientation=capitalize(page.getOrientation());
  }
  if (needOutputInMasterPage(page.getPageHeader()) && needOutputInMasterPage(page.getPageFooter())) {
    outputInMasterPage=true;
    pageHeader=formatHeaderFooter(page.getPageHeader(),true);
    pageFooter=formatHeaderFooter(page.getPageFooter(),false);
  }
  if (!outputInMasterPage && page.getPageHeader() != null) {
    contentVisitor.visitChildren(page.getPageHeader(),null);
  }
  engine.setPageStyle(page.getComputedStyle());
}",0.9570661896243292
70907,"private void endNormalContainer(){
  XlsContainer container=getCurrentContainer();
  if (container.isEmpty()) {
    Data data=new Data(EMPTY,container.getStyle(),Data.STRING,container);
    data.setSizeInfo(container.getSizeInfo());
    addData(data);
  }
  engine.applyContainerBottomStyle();
  containers.pop();
}","public void endNormalContainer(){
  XlsContainer container=getCurrentContainer();
  if (container.isEmpty()) {
    Data data=new Data(EMPTY,container.getStyle(),Data.STRING,container);
    data.setSizeInfo(container.getSizeInfo());
    addData(data);
  }
  engine.applyContainerBottomStyle();
  containers.pop();
}",0.9825119236883942
70908,"public void complete(){
  Iterator<SheetData[]> iterator=cache.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      int styleid=engine.getStyleID(data.getStyle());
      data.setStyleId(styleid);
      ContainerSizeInfo rule=data.getSizeInfo();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,maxCol);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      data.setSpan(span);
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
    }
  }
}","public void complete(){
  endNormalContainer();
  Iterator<SheetData[]> iterator=cache.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      int styleid=engine.getStyleID(data.getStyle());
      data.setStyleId(styleid);
      ContainerSizeInfo rule=data.getSizeInfo();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,maxCol);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      data.setSpan(span);
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
    }
  }
}",0.9877175025588536
70909,"/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  currentX-=getX(container);
  currentY-=getY(container);
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    if (container instanceof RowArea) {
      rowStyleStack.pop();
    }
    if (container instanceof TableArea) {
      drawTableBorder((TableArea)container);
    }
 else     if (!(container instanceof CellArea)) {
      BorderInfo[] borders=cacheBorderInfo(container);
      drawBorder(borders);
    }
    if (container.needClip()) {
      endClip();
    }
  }
}","/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  currentX-=getX(container);
  currentY-=getY(container);
  if (container instanceof PageArea) {
    BorderInfo[] borders=cacheBorderInfo(container);
    drawBorder(borders);
    pageGraphic.dispose();
  }
 else {
    if (container instanceof RowArea) {
      rowStyleStack.pop();
    }
    if (container instanceof TableArea) {
      drawTableBorder((TableArea)container);
    }
 else     if (!(container instanceof CellArea)) {
      BorderInfo[] borders=cacheBorderInfo(container);
      drawBorder(borders);
    }
    if (container.needClip()) {
      endClip();
    }
  }
}",0.945983379501385
70910,"private void resizeColumn(int value,int start,int end){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  if (start != end) {
    value=getTrueValue(value,start,end);
    part.resizeColumn(start,end,value);
  }
 else {
    Dimension dimension=getDragWidth(start,end);
    if (value < dimension.width) {
      value=dimension.width;
    }
    TableHandleAdapter adp=HandleAdapterFactory.getInstance().getTableHandleAdapter(part.getModel());
    Dimension dm=adp.calculateSize();
    dm.width+=value;
    try {
      adp.ajustSize(dm);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
}","private void resizeColumn(int value,int start,int end){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  if (start != end) {
    value=getTrueValue(value,start,end);
    part.resizeColumn(start,end,value);
  }
 else {
    Dimension dimension=getDragWidth(start,end);
    if (value < dimension.width) {
      value=dimension.width;
    }
    TableHandleAdapter adp=HandleAdapterFactory.getInstance().getTableHandleAdapter(part.getModel());
    Dimension dm=adp.calculateSize();
    dm.width+=value;
    dm.height=-1;
    try {
      adp.ajustSize(dm);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
}",0.9858934169278996
70911,"protected void resize(){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  int value=getLocation().x - getStartLocation().x;
  part.getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
  if (isresizeMultipleColumn()) {
    List list=filterEditPart(part.getViewer().getSelectedEditParts());
    boolean resizeTable=false;
    int width=0;
    for (int i=0; i < list.size(); i++) {
      int tempValue=value;
      Object model=((EditPart)list.get(i)).getModel();
      ColumnHandleAdapter adapter=HandleAdapterFactory.getInstance().getColumnHandleAdapter(model);
      int start=adapter.getColumnNumber();
      int end=start + 1;
      int ori=TableUtil.caleVisualWidth(part,model);
      int adjustWidth=TableUtil.caleVisualWidth(part,part.getColumn(getStart())) + value;
      if (getStart() != start) {
        tempValue=adjustWidth - ori;
      }
      if (start == part.getColumnCount()) {
        end=start;
        resizeTable=true;
      }
 else {
        width=width + getTrueValue(tempValue,start,end);
      }
      resizeColumn(tempValue,start,end);
    }
    if (resizeTable) {
      Dimension size=part.getTableAdapter().getSize();
      try {
        part.getTableAdapter().setSize(new Dimension(size.width + width,size.height));
      }
 catch (      SemanticException e) {
        part.getTableAdapter().rollBack();
        ExceptionHandler.handle(e);
      }
    }
  }
 else {
    resizeColumn(value,getStart(),getEnd());
  }
  part.getTableAdapter().transEnd();
}","protected void resize(){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  int value=getLocation().x - getStartLocation().x;
  part.getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
  if (isresizeMultipleColumn()) {
    List list=filterEditPart(part.getViewer().getSelectedEditParts());
    boolean resizeTable=false;
    int width=0;
    for (int i=0; i < list.size(); i++) {
      int tempValue=value;
      Object model=((EditPart)list.get(i)).getModel();
      ColumnHandleAdapter adapter=HandleAdapterFactory.getInstance().getColumnHandleAdapter(model);
      int start=adapter.getColumnNumber();
      int end=start + 1;
      int ori=TableUtil.caleVisualWidth(part,model);
      int adjustWidth=TableUtil.caleVisualWidth(part,part.getColumn(getStart())) + value;
      if (getStart() != start) {
        tempValue=adjustWidth - ori;
      }
      if (start == part.getColumnCount()) {
        end=start;
        resizeTable=true;
      }
 else {
        width=width + getTrueValue(tempValue,start,end);
      }
      resizeColumn(tempValue,start,end);
    }
    if (resizeTable) {
      Dimension size=part.getTableAdapter().getSize();
      try {
        part.getTableAdapter().setSize(new Dimension(size.width + width,-1));
      }
 catch (      SemanticException e) {
        part.getTableAdapter().rollBack();
        ExceptionHandler.handle(e);
      }
    }
  }
 else {
    resizeColumn(value,getStart(),getEnd());
  }
  part.getTableAdapter().transEnd();
}",0.995636119503189
70912,"protected void resize(){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  int value=getLocation().y - getStartLocation().y;
  part.getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
  if (isresizeMultipleRow()) {
    List list=filterEditPart(part.getViewer().getSelectedEditParts());
    boolean resizeTable=false;
    int height=0;
    for (int i=0; i < list.size(); i++) {
      int tempValue=value;
      Object model=((EditPart)list.get(i)).getModel();
      RowHandleAdapter adapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(model);
      int start=adapter.getRowNumber();
      int end=start + 1;
      int ori=TableUtil.caleVisualHeight(part,model);
      int adjustHeight=TableUtil.caleVisualHeight(part,part.getRow(getStart())) + value;
      if (getStart() != start) {
        tempValue=adjustHeight - ori;
      }
      if (start == part.getRowCount()) {
        end=start;
        resizeTable=true;
      }
 else {
        height=height + getTrueValue(tempValue,start,end);
      }
      resizeRow(tempValue,start,end);
    }
    if (resizeTable) {
      Dimension size=part.getTableAdapter().getSize();
      try {
        part.getTableAdapter().setSize(new Dimension(size.width,size.height + height));
      }
 catch (      SemanticException e) {
        part.getTableAdapter().rollBack();
        ExceptionHandler.handle(e);
      }
    }
  }
 else {
    resizeRow(value,getStart(),getEnd());
  }
  part.getTableAdapter().transEnd();
}","protected void resize(){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  int value=getLocation().y - getStartLocation().y;
  part.getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
  if (isresizeMultipleRow()) {
    List list=filterEditPart(part.getViewer().getSelectedEditParts());
    boolean resizeTable=false;
    int height=0;
    for (int i=0; i < list.size(); i++) {
      int tempValue=value;
      Object model=((EditPart)list.get(i)).getModel();
      RowHandleAdapter adapter=HandleAdapterFactory.getInstance().getRowHandleAdapter(model);
      int start=adapter.getRowNumber();
      int end=start + 1;
      int ori=TableUtil.caleVisualHeight(part,model);
      int adjustHeight=TableUtil.caleVisualHeight(part,part.getRow(getStart())) + value;
      if (getStart() != start) {
        tempValue=adjustHeight - ori;
      }
      if (start == part.getRowCount()) {
        end=start;
        resizeTable=true;
      }
 else {
        height=height + getTrueValue(tempValue,start,end);
      }
      resizeRow(tempValue,start,end);
    }
    if (resizeTable) {
      Dimension size=part.getTableAdapter().getSize();
      try {
        part.getTableAdapter().setSize(new Dimension(-1,size.height + height));
      }
 catch (      SemanticException e) {
        part.getTableAdapter().rollBack();
        ExceptionHandler.handle(e);
      }
    }
  }
 else {
    resizeRow(value,getStart(),getEnd());
  }
  part.getTableAdapter().transEnd();
}",0.9959294436906376
70913,"private void resizeRow(int value,int start,int end){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  if (start != end) {
    value=getTrueValue(value,start,end);
    part.resizeRow(start,end,value);
  }
 else {
    Dimension dimension=getDragWidth(start,end);
    if (value < dimension.width) {
      value=dimension.width;
    }
    TableHandleAdapter adp=HandleAdapterFactory.getInstance().getTableHandleAdapter(part.getModel());
    Dimension dm=adp.calculateSize();
    dm.height+=value;
    try {
      adp.ajustSize(dm);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
}","private void resizeRow(int value,int start,int end){
  TableEditPart part=(TableEditPart)getSourceEditPart();
  if (start != end) {
    value=getTrueValue(value,start,end);
    part.resizeRow(start,end,value);
  }
 else {
    Dimension dimension=getDragWidth(start,end);
    if (value < dimension.width) {
      value=dimension.width;
    }
    TableHandleAdapter adp=HandleAdapterFactory.getInstance().getTableHandleAdapter(part.getModel());
    Dimension dm=adp.calculateSize();
    dm.height+=value;
    dm.width=-1;
    try {
      adp.ajustSize(dm);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
}",0.9865612648221344
70914,"public Object getProperty(String name){
  if (BORDER_BOTTOM_STYLE_PROP.equals(name) || BORDER_TOP_STYLE_PROP.equals(name) || BORDER_LEFT_STYLE_PROP.equals(name)|| BORDER_RIGHT_STYLE_PROP.equals(name)) {
    return DesignChoiceConstants.LINE_STYLE_SOLID;
  }
  if (BORDER_BOTTOM_WIDTH_PROP.equals(name) || BORDER_TOP_WIDTH_PROP.equals(name) || BORDER_LEFT_WIDTH_PROP.equals(name)|| BORDER_RIGHT_WIDTH_PROP.equals(name)) {
    return ""String_Node_Str"";
  }
  if (BORDER_BOTTOM_COLOR_PROP.equals(name) || BORDER_TOP_COLOR_PROP.equals(name) || BORDER_LEFT_COLOR_PROP.equals(name)|| BORDER_RIGHT_COLOR_PROP.equals(name)) {
    return new Integer(ColorUtil.formRGB(0xcc,0xcc,0xcc));
  }
  return null;
}","public Object getProperty(String name){
  if (BORDER_BOTTOM_STYLE_PROP.equals(name) || BORDER_TOP_STYLE_PROP.equals(name) || BORDER_LEFT_STYLE_PROP.equals(name)|| BORDER_RIGHT_STYLE_PROP.equals(name)) {
    return DesignChoiceConstants.LINE_STYLE_SOLID;
  }
  if (BORDER_BOTTOM_WIDTH_PROP.equals(name) || BORDER_TOP_WIDTH_PROP.equals(name) || BORDER_LEFT_WIDTH_PROP.equals(name)|| BORDER_RIGHT_WIDTH_PROP.equals(name)) {
    return ""String_Node_Str"";
  }
  if (BORDER_BOTTOM_COLOR_PROP.equals(name) || BORDER_TOP_COLOR_PROP.equals(name) || BORDER_LEFT_COLOR_PROP.equals(name)|| BORDER_RIGHT_COLOR_PROP.equals(name)) {
    return Integer.valueOf(ColorUtil.formRGB(0xcc,0xcc,0xcc));
  }
  return null;
}",0.9914163090128756
70915,"public CrosstabCellImpl(CrosstabCellHandle cch){
  super((ExtendedItemHandle)cch.getModelHandle());
  if (cch != null && cch.getModelHandle() != null) {
    id=cch.getModelHandle().getID();
  }
  if (cch instanceof AggregationCellHandle) {
    type=TYPE_AGGREGATION;
  }
}","public CrosstabCellImpl(CrosstabCellHandle cch){
  super((ExtendedItemHandle)cch.getModelHandle());
  if (cch.getModelHandle() != null) {
    id=cch.getModelHandle().getID();
  }
  if (cch instanceof AggregationCellHandle) {
    type=TYPE_AGGREGATION;
  }
}",0.9716446124763704
70916,"public CrosstabCellInstanceImpl(ICellContent content,ExtendedItemHandle modelHandle,IReportContext context){
  this.content=content;
  this.modelHandle=modelHandle;
  this.context=context;
  if (modelHandle != null) {
    id=modelHandle.getID();
  }
  try {
    IReportItem item=modelHandle.getReportItem();
    if (item instanceof AggregationCellHandle) {
      type=TYPE_AGGREGATION;
    }
  }
 catch (  ExtendedElementException e) {
    e.printStackTrace();
  }
}","public CrosstabCellInstanceImpl(ICellContent content,ExtendedItemHandle modelHandle,IReportContext context){
  this.content=content;
  this.modelHandle=modelHandle;
  this.context=context;
  if (modelHandle != null) {
    id=modelHandle.getID();
    try {
      IReportItem item=modelHandle.getReportItem();
      if (item instanceof AggregationCellHandle) {
        type=TYPE_AGGREGATION;
      }
    }
 catch (    ExtendedElementException e) {
      e.printStackTrace();
    }
  }
}",0.9768421052631578
70917,"protected Command getCreateCommand(CreateRequest request){
  EditPart after=getInsertionReference(request);
  Object model=this.getHost().getModel();
  Object newObject=request.getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
  if (model instanceof CrosstabCellAdapter) {
    int type=getAreaType((CrosstabCellAdapter)model);
    String position=((CrosstabCellAdapter)model).getPositionType();
    if ((newObject instanceof DimensionHandle || newObject instanceof LevelHandle) && (type == ICrosstabConstants.COLUMN_AXIS_TYPE || type == ICrosstabConstants.ROW_AXIS_TYPE)) {
      Object afterObj=after == null ? null : after.getModel();
      if (newObject instanceof LevelHandle) {
        DimensionHandle dimensionHandle=CrosstabAdaptUtil.getDimensionHandle((LevelHandle)newObject);
        AddDimensionViewHandleCommand command=new AddDimensionViewHandleCommand((CrosstabCellAdapter)model,type,dimensionHandle,afterObj);
        command.setLevelHandles(new LevelHandle[]{(LevelHandle)newObject});
        return command;
      }
      return new AddDimensionViewHandleCommand((CrosstabCellAdapter)model,type,(DimensionHandle)newObject,afterObj);
    }
 else     if (newObject instanceof MeasureHandle && position.equals(ICrosstabCellAdapterFactory.CELL_MEASURE)) {
      Object afterObj=null;
      if (after != null) {
        afterObj=after.getModel();
      }
      return new AddMeasureViewHandleCommand((CrosstabCellAdapter)model,(MeasureHandle)newObject,afterObj);
    }
 else     if (newObject instanceof MeasureGroupHandle && position.equals(ICrosstabCellAdapterFactory.CELL_MEASURE)) {
      List list=new ArrayList();
      list.add(newObject);
      Object afterObj=null;
      if (after != null) {
        afterObj=after.getModel();
      }
      return new AddMultipleMeasureCommand((CrosstabCellAdapter)model,list,afterObj);
    }
 else     if (newObject instanceof Object[] && CrosstabAdaptUtil.canCreateMultipleCommand((Object[])newObject) && position.equals(ICrosstabCellAdapterFactory.CELL_MEASURE)) {
      List list=new ArrayList();
      Object[] objs=(Object[])newObject;
      for (int i=0; i < objs.length; i++) {
        list.add(objs[i]);
      }
      Object afterObj=null;
      if (after != null) {
        afterObj=after.getModel();
      }
      return new AddMultipleMeasureCommand((CrosstabCellAdapter)model,list,afterObj);
    }
 else     if (isLevelHandles(newObject)) {
      Object[] items=(Object[])newObject;
      LevelHandle[] levelHandles=new LevelHandle[items.length];
      System.arraycopy(items,0,levelHandles,0,levelHandles.length);
      Object afterObj=after == null ? null : after.getModel();
      DimensionHandle dimensionHandle=CrosstabAdaptUtil.getDimensionHandle(levelHandles[0]);
      AddDimensionViewHandleCommand command=new AddDimensionViewHandleCommand((CrosstabCellAdapter)model,type,dimensionHandle,afterObj);
      command.setLevelHandles(levelHandles);
      return command;
    }
 else {
      CrosstabCellCreateCommand command=new CrosstabCellCreateCommand(request.getExtendedData());
      command.setParent(getHost().getModel());
      command.setAfter(after == null ? null : after.getModel());
      return command;
    }
  }
  return super.getCreateCommand(request);
}","protected Command getCreateCommand(CreateRequest request){
  EditPart after;
  if (getLocationFromRequest(request) == null) {
    after=null;
  }
 else {
    after=getInsertionReference(request);
  }
  Object model=this.getHost().getModel();
  Object newObject=request.getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
  if (model instanceof CrosstabCellAdapter) {
    int type=getAreaType((CrosstabCellAdapter)model);
    String position=((CrosstabCellAdapter)model).getPositionType();
    if ((newObject instanceof DimensionHandle || newObject instanceof LevelHandle) && (type == ICrosstabConstants.COLUMN_AXIS_TYPE || type == ICrosstabConstants.ROW_AXIS_TYPE)) {
      Object afterObj=after == null ? null : after.getModel();
      if (newObject instanceof LevelHandle) {
        DimensionHandle dimensionHandle=CrosstabAdaptUtil.getDimensionHandle((LevelHandle)newObject);
        AddDimensionViewHandleCommand command=new AddDimensionViewHandleCommand((CrosstabCellAdapter)model,type,dimensionHandle,afterObj);
        command.setLevelHandles(new LevelHandle[]{(LevelHandle)newObject});
        return command;
      }
      return new AddDimensionViewHandleCommand((CrosstabCellAdapter)model,type,(DimensionHandle)newObject,afterObj);
    }
 else     if (newObject instanceof MeasureHandle && position.equals(ICrosstabCellAdapterFactory.CELL_MEASURE)) {
      Object afterObj=null;
      if (after != null) {
        afterObj=after.getModel();
      }
      return new AddMeasureViewHandleCommand((CrosstabCellAdapter)model,(MeasureHandle)newObject,afterObj);
    }
 else     if (newObject instanceof MeasureGroupHandle && position.equals(ICrosstabCellAdapterFactory.CELL_MEASURE)) {
      List list=new ArrayList();
      list.add(newObject);
      Object afterObj=null;
      if (after != null) {
        afterObj=after.getModel();
      }
      return new AddMultipleMeasureCommand((CrosstabCellAdapter)model,list,afterObj);
    }
 else     if (newObject instanceof Object[] && CrosstabAdaptUtil.canCreateMultipleCommand((Object[])newObject) && position.equals(ICrosstabCellAdapterFactory.CELL_MEASURE)) {
      List list=new ArrayList();
      Object[] objs=(Object[])newObject;
      for (int i=0; i < objs.length; i++) {
        list.add(objs[i]);
      }
      Object afterObj=null;
      if (after != null) {
        afterObj=after.getModel();
      }
      return new AddMultipleMeasureCommand((CrosstabCellAdapter)model,list,afterObj);
    }
 else     if (isLevelHandles(newObject)) {
      Object[] items=(Object[])newObject;
      LevelHandle[] levelHandles=new LevelHandle[items.length];
      System.arraycopy(items,0,levelHandles,0,levelHandles.length);
      Object afterObj=after == null ? null : after.getModel();
      DimensionHandle dimensionHandle=CrosstabAdaptUtil.getDimensionHandle(levelHandles[0]);
      AddDimensionViewHandleCommand command=new AddDimensionViewHandleCommand((CrosstabCellAdapter)model,type,dimensionHandle,afterObj);
      command.setLevelHandles(levelHandles);
      return command;
    }
 else {
      CrosstabCellCreateCommand command=new CrosstabCellCreateCommand(request.getExtendedData());
      command.setParent(getHost().getModel());
      command.setAfter(after == null ? null : after.getModel());
      return command;
    }
  }
  return super.getCreateCommand(request);
}",0.9857316332726168
70918,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
 else   if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput(),false);
    if (ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),model.getVersion()) > 0) {
      if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        return false;
      }
    }
    prePage.doSave(null);
    UIUtil.doFinishSava(getModel());
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  hookModelEventManager(getModel());
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator(getModel()).notifyRequest(request);
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
 else   if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput(),false);
    if (ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),model.getVersion()) > 0) {
      if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        return false;
      }
    }
    prePage.doSave(null);
    UIUtil.doFinishSava(getModel());
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  hookModelEventManager(getModel());
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator(getModel()).notifyRequest(request);
  reportXMLEditor.setFocus();
  return true;
}",0.9878934624697336
70919,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
 else   if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput(),false);
    if (ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),model.getVersion()) > 0) {
      if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        return false;
      }
    }
    prePage.doSave(null);
    UIUtil.doFinishSava(getModel());
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
 else   if (prePage != this && (prePage.isDirty() || prePage.getStaleType() != IPageStaleType.NONE)) {
    ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput(),false);
    if (ModuleUtil.compareReportVersion(ModuleUtil.getReportVersion(),model.getVersion()) > 0) {
      if (!MessageDialog.openConfirm(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""))) {
        return false;
      }
    }
    prePage.doSave(null);
    UIUtil.doFinishSava(getModel());
    prePage.markPageStale(IPageStaleType.NONE);
    refreshDocument();
    markPageStale(IPageStaleType.NONE);
  }
  ReportRequest request=new ReportRequest(ReportXMLSourceEditorFormPage.this);
  List list=new ArrayList();
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  setFocus();
  return true;
}",0.9940878378378378
70920,"/** 
 * @param dimAxisIndex
 * @param sortType
 * @return
 * @throws OLAPException
 */
protected Object fetchValueFromMirror(int dimAxisIndex,int sortType) throws OLAPException {
  if (this.dimTraverse.dimensionCursorPosition[dimAxisIndex] < 0 || this.dimTraverse.dimensionCursorPosition[dimAxisIndex] >= edgeDimensRelation.mirrorLength[dimAxisIndex])   throw new OLAPException(ResourceConstants.RD_EXPR_RESULT_SET_NOT_START);
  if (sortType == IDimensionSortDefn.SORT_UNDEFINED) {
    return this.dimAxis[dimAxisIndex].getDisctinctValue().get(this.dimTraverse.dimensionCursorPosition[dimAxisIndex]);
  }
  Collection collection=null;
  try {
    collection=fetchValueCollectionInEdgeInfo(dimAxisIndex);
  }
 catch (  IOException e) {
  }
  Vector v=this.dimAxis[dimAxisIndex].getDisctinctValue();
  v.removeAll(collection);
  Iterator iter=collection.iterator();
  if (sortType == IDimensionSortDefn.SORT_ASC) {
    for (int i=0, startSize=v.size(); i < collection.size(); i++) {
      v.insertElementAt(iter.next(),startSize);
      startSize++;
    }
  }
 else {
    int index=0;
    while (iter.hasNext()) {
      v.insertElementAt(iter.next(),index);
      index++;
    }
  }
  return v.get(this.dimTraverse.dimensionCursorPosition[dimAxisIndex]);
}","/** 
 * @param dimAxisIndex
 * @param sortType
 * @return
 * @throws OLAPException
 */
protected Object fetchValueFromMirror(int dimAxisIndex,int sortType) throws OLAPException {
  if (this.dimTraverse.dimensionCursorPosition[dimAxisIndex] < 0 || this.dimTraverse.dimensionCursorPosition[dimAxisIndex] >= edgeDimensRelation.mirrorLength[dimAxisIndex])   throw new OLAPException(ResourceConstants.RD_EXPR_RESULT_SET_NOT_START);
  if (sortType == IDimensionSortDefn.SORT_UNDEFINED) {
    Collection collection=null;
    try {
      collection=fetchValueCollectionInEdgeInfo(dimAxisIndex);
    }
 catch (    IOException e) {
    }
    Vector v=this.dimAxis[dimAxisIndex].getDisctinctValue();
    v.removeAll(collection);
    Iterator iter=collection.iterator();
    for (int i=0, startSize=v.size(); i < collection.size(); i++) {
      v.insertElementAt(iter.next(),startSize);
      startSize++;
    }
    return v.get(this.dimTraverse.dimensionCursorPosition[dimAxisIndex]);
  }
 else   return this.dimAxis[dimAxisIndex].getDisctinctValue().get(this.dimTraverse.dimensionCursorPosition[dimAxisIndex]);
}",0.7419354838709677
70921,"/** 
 * @return
 */
private Vector populateValueVector(AggrSortDefinition aggrSortDefinition){
  Set valueSet=new HashSet();
  if (aggrSortDefinition != null) {
    aggrSortType=aggrSortDefinition.getSortDirection();
  }
  for (int i=0; i < this.rs.length(); i++) {
    try {
      this.rs.seek(i);
    }
 catch (    IOException e) {
    }
    valueSet.add(this.rs.getLevelKeyValue(levelIndex)[this.rs.getLevelKeyColCount(levelIndex) - 1]);
  }
  final int sortType=this.rs.getSortType(levelIndex);
  Object[] value=valueSet.toArray();
  Arrays.sort(value,new Comparator(){
    public int compare(    final Object arg0,    final Object arg1){
      if (sortType == IDimensionSortDefn.SORT_ASC || sortType == IDimensionSortDefn.SORT_UNDEFINED)       return ((Comparable)arg0).compareTo(arg1);
 else       return ((Comparable)arg0).compareTo(arg1) * -1;
    }
  }
);
  Vector v=new Vector();
  v.addAll(Arrays.asList(value));
  return v;
}","/** 
 * @return
 */
private Vector populateValueVector(AggrSortDefinition aggrSortDefinition){
  Set valueSet=new HashSet();
  if (aggrSortDefinition != null) {
    if (aggrSortDefinition.getAxisQualifierLevel().length == 0)     aggrSortType=aggrSortDefinition.getSortDirection();
 else     aggrSortType=IDimensionSortDefn.SORT_UNDEFINED;
  }
  for (int i=0; i < this.rs.length(); i++) {
    try {
      this.rs.seek(i);
    }
 catch (    IOException e) {
    }
    valueSet.add(this.rs.getLevelKeyValue(levelIndex)[this.rs.getLevelKeyColCount(levelIndex) - 1]);
  }
  final int sortType=this.rs.getSortType(levelIndex);
  Object[] value=valueSet.toArray();
  Arrays.sort(value,new Comparator(){
    public int compare(    final Object arg0,    final Object arg1){
      if (sortType == IDimensionSortDefn.SORT_ASC || sortType == IDimensionSortDefn.SORT_UNDEFINED)       return ((Comparable)arg0).compareTo(arg1);
 else       return ((Comparable)arg0).compareTo(arg1) * -1;
    }
  }
);
  Vector v=new Vector();
  v.addAll(Arrays.asList(value));
  return v;
}",0.4559118236472946
70922,"protected BookmarkDef getBookmark(IContent content){
  String bookmarkName=content.getBookmark();
  if (bookmarkName == null)   return null;
  BookmarkDef bookmark=new BookmarkDef(content.getBookmark());
  if (!ExcelUtil.isValidBookmarkName(bookmarkName) || bookmarkName.startsWith(AUTO_GENERATED_BOOKMARK)) {
    bookmark.setGeneratedName(getGenerateBookmark());
  }
  return bookmark;
}","protected BookmarkDef getBookmark(IContent content){
  String bookmarkName=content.getBookmark();
  if (bookmarkName == null)   return null;
  BookmarkDef bookmark=new BookmarkDef(content.getBookmark());
  if (!ExcelUtil.isValidBookmarkName(bookmarkName)) {
    bookmark.setGeneratedName(engine.getGenerateBookmark(bookmarkName));
  }
  return bookmark;
}",0.7940780619111709
70923,"public static boolean isValidBookmarkName(String name){
  if (name.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
  if (name.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
  for (int i=0; i < name.length(); i++) {
    if (invalidBookmarkChars.indexOf(name.charAt(i)) != -1) {
      return false;
    }
  }
  if (name.matches(""String_Node_Str"")) {
    return false;
  }
  if (name.matches(""String_Node_Str"")) {
    String[] strs=name.split(""String_Node_Str"");
    if (strs.length > 0) {
      int rowId=0;
      try {
        rowId=Integer.parseInt(strs[strs.length - 1]);
      }
 catch (      NumberFormatException e) {
        return true;
      }
      if (rowId <= 65536) {
        return false;
      }
 else {
        return true;
      }
    }
    return true;
  }
  return true;
}","public static boolean isValidBookmarkName(String name){
  if (name.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
  if (name.equalsIgnoreCase(""String_Node_Str"")) {
    return false;
  }
  if (name.startsWith(ExcelLayoutEngine.AUTO_GENERATED_BOOKMARK)) {
    return false;
  }
  for (int i=0; i < name.length(); i++) {
    if (invalidBookmarkChars.indexOf(name.charAt(i)) != -1) {
      return false;
    }
  }
  if (name.matches(""String_Node_Str"")) {
    return false;
  }
  if (name.matches(""String_Node_Str"")) {
    String[] strs=name.split(""String_Node_Str"");
    if (strs.length > 0) {
      int rowId=0;
      try {
        rowId=Integer.parseInt(strs[strs.length - 1]);
      }
 catch (      NumberFormatException e) {
        return true;
      }
      if (rowId <= 65536) {
        return false;
      }
 else {
        return true;
      }
    }
    return true;
  }
  return true;
}",0.9477351916376306
70924,"public void complete(){
  Iterator<SheetData[]> iterator=cache.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      int styleid=engine.getStyleID(data.getStyle());
      data.setStyleId(styleid);
      ContainerSizeInfo rule=data.getSizeInfo();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,maxCol);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      data.setSpan(span);
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          data.setLinkedBookmark(bookmarkList.get(hyperLink.getUrl()));
        }
      }
    }
  }
}","public void complete(){
  Iterator<SheetData[]> iterator=cache.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      int styleid=engine.getStyleID(data.getStyle());
      data.setStyleId(styleid);
      ContainerSizeInfo rule=data.getSizeInfo();
      int start=axis.getColumnIndexByCoordinate(rule.getStartCoordinate()) + 1;
      int end=axis.getColumnIndexByCoordinate(rule.getEndCoordinate()) + 1;
      end=Math.min(end,maxCol);
      int scount=Math.max(0,end - start - 1);
      Span span=new Span(start,scount);
      data.setSpan(span);
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
    }
  }
}",0.973939703628002
70925,"BirtMath(String functionName) throws BirtException {
  if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Add();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Subtract();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Multiple();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Divide();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Round();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_RoundUp();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_RoundDown();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Ceiling();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Mod();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_SafeDivide();
 else   throw new BirtException(""String_Node_Str"",null,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + functionName);
}","BirtMath(String functionName) throws BirtException {
  if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Add();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Subtract();
 else   if (""String_Node_Str"".equals(functionName) || ""String_Node_Str"".equals(functionName))   this.executor=new Function_Multiple();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Divide();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Round();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_RoundUp();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_RoundDown();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Ceiling();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_Mod();
 else   if (""String_Node_Str"".equals(functionName))   this.executor=new Function_SafeDivide();
 else   throw new BirtException(""String_Node_Str"",null,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + functionName);
}",0.9811659192825112
70926,"/** 
 * @param imageName
 * @param imageTitle
 * @param width
 * @param height
 * @param x
 * @param y
 */
private void exportImageDefn(String imageName,String imageTitle,double width,double height,double x,double y,String link){
  println(""String_Node_Str"" + (shapeCount) + ""String_Node_Str"");
  if (link != null) {
    print(""String_Node_Str"" + link + ""String_Node_Str"");
  }
  println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * @param imageName
 * @param imageTitle
 * @param width
 * @param height
 * @param x
 * @param y
 */
private void exportImageDefn(String imageName,String imageTitle,double width,double height,double x,double y,String link){
  println(""String_Node_Str"" + (shapeCount) + ""String_Node_Str"");
  if (link != null) {
    link=codeLink(link);
    print(""String_Node_Str"" + link + ""String_Node_Str"");
  }
  println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"");
  println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9232786885245902
70927,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput());
  if (model != null && getModel() != model) {
    Object oldModel=getModel();
    setModel(model);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      this.getGraphicalViewer().setContents(getModel());
      hookModelEventManager(getModel());
      markPageStale(IPageStaleType.NONE);
    }
    updateStackActions();
  }
  GraphicalViewer view=getGraphicalViewer();
  if (view != null) {
    UIUtil.resetViewSelection(view,true);
  }
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput());
  if (model != null && getModel() != model) {
    Object oldModel=getModel();
    setModel(model);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      this.getGraphicalViewer().setContents(getModel());
      hookModelEventManager(getModel());
      markPageStale(IPageStaleType.NONE);
      if (oldModel instanceof ReportDesignHandle) {
        if (!((ReportDesignHandle)getModel()).getBidiOrientation().equals(((ReportDesignHandle)oldModel).getBidiOrientation())) {
          String newOrientation=((ReportDesignHandle)getModel()).getBidiOrientation();
          UIUtil.processOrientationChange(newOrientation,getGraphicalViewer());
        }
      }
    }
    updateStackActions();
  }
  GraphicalViewer view=getGraphicalViewer();
  if (view != null) {
    UIUtil.resetViewSelection(view,true);
  }
  return true;
}",0.7925381571509327
70928,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput());
  if (model != null && getModel() != model) {
    Object oldModel=getModel();
    getProvider().connect(model);
    setModel(model);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      setViewContentsAsMasterPage();
      markPageStale(IPageStaleType.NONE);
    }
    updateStackActions();
  }
  GraphicalViewer view=getGraphicalViewer();
  UIUtil.resetViewSelection(view,true);
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  ModuleHandle model=getProvider().getReportModuleHandle(getEditorInput());
  if (model != null && getModel() != model) {
    Object oldModel=getModel();
    getProvider().connect(model);
    setModel(model);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      setViewContentsAsMasterPage();
      markPageStale(IPageStaleType.NONE);
      if (oldModel instanceof ReportDesignHandle) {
        if (!((ReportDesignHandle)getModel()).getBidiOrientation().equals(((ReportDesignHandle)oldModel).getBidiOrientation())) {
          String newOrientation=((ReportDesignHandle)getModel()).getBidiOrientation();
          UIUtil.processOrientationChange(newOrientation,getGraphicalViewer());
        }
      }
    }
    updateStackActions();
  }
  GraphicalViewer view=getGraphicalViewer();
  UIUtil.resetViewSelection(view,true);
  return true;
}",0.6919831223628692
70929,"@Override protected void propertyChange(Map info){
  boolean invalidate=false;
  if (info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP) instanceof ReportDesignHandle) {
    String newOrientation=((ReportDesignHandle)info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP)).getBidiOrientation();
    boolean mirrored=DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(newOrientation);
    this.getViewer().flush();
    Composite parent=getViewer().getControl().getParent();
    BidiUIUtils.INSTANCE.applyOrientation(parent,mirrored);
    parent.layout(true);
    getViewer().setProperty(IReportGraphicConstants.REPORT_BIDIORIENTATION_PROPERTY,newOrientation);
    invalidate=true;
  }
  super.propertyChange(info);
  if (invalidate) {
    getFigure().invalidateTree();
    getFigure().revalidate();
  }
}","@Override protected void propertyChange(Map info){
  boolean invalidate=false;
  if (info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP) instanceof ReportDesignHandle) {
    String newOrientation=((ReportDesignHandle)info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP)).getBidiOrientation();
    UIUtil.processOrientationChange(newOrientation,getViewer());
    invalidate=true;
  }
  super.propertyChange(info);
  if (invalidate) {
    getFigure().invalidateTree();
    getFigure().revalidate();
  }
}",0.7264296754250387
70930,"protected void propertyChange(Map info){
  boolean invalidate=false;
  if (info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP) instanceof ReportDesignHandle) {
    String newOrientation=((ReportDesignHandle)info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP)).getBidiOrientation();
    boolean mirrored=DesignChoiceConstants.BIDI_DIRECTION_RTL.equals(newOrientation);
    this.getViewer().flush();
    Composite parent=getViewer().getControl().getParent();
    BidiUIUtils.INSTANCE.applyOrientation(parent,mirrored);
    parent.layout(true);
    getViewer().setProperty(IReportGraphicConstants.REPORT_BIDIORIENTATION_PROPERTY,newOrientation);
    invalidate=true;
  }
  super.propertyChange(info);
  if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) != null) {
    if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) instanceof ReportDesignHandle) {
      getViewer().setProperty(IReportGraphicConstants.REPORT_LAYOUT_PROPERTY,((ReportDesignHandle)info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP)).getLayoutPreference());
      invalidate=true;
    }
  }
  if (invalidate) {
    getFigure().invalidateTree();
    getFigure().revalidate();
  }
  if (getModel() instanceof ReportDesignHandle) {
    if (info.get(IMasterPageModel.TOP_MARGIN_PROP) != null || info.get(IMasterPageModel.BOTTOM_MARGIN_PROP) != null || info.get(IMasterPageModel.LEFT_MARGIN_PROP) != null || info.get(IMasterPageModel.RIGHT_MARGIN_PROP) != null || info.get(IMasterPageModel.TYPE_PROP) != null || info.get(IMasterPageModel.WIDTH_PROP) != null || info.get(IMasterPageModel.HEIGHT_PROP) != null || info.get(IMasterPageModel.ORIENTATION_PROP) != null) {
      SlotHandle slotHandle=((ModuleHandle)getModel()).getMasterPages();
      Iterator iter=slotHandle.iterator();
      SimpleMasterPageHandle masterPageHandle=(SimpleMasterPageHandle)iter.next();
      Dimension size=getMasterPageSize(masterPageHandle);
      Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
      ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
      figure.setBorder(new ReportDesignMarginBorder(getMasterPageInsets(masterPageHandle)));
      figure.setBounds(bounds.getCopy());
    }
  }
}","protected void propertyChange(Map info){
  boolean invalidate=false;
  if (info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP) instanceof ReportDesignHandle) {
    String newOrientation=((ReportDesignHandle)info.get(ReportDesignHandle.BIDI_ORIENTATION_PROP)).getBidiOrientation();
    UIUtil.processOrientationChange(newOrientation,getViewer());
    invalidate=true;
  }
  super.propertyChange(info);
  if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) != null) {
    if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) instanceof ReportDesignHandle) {
      getViewer().setProperty(IReportGraphicConstants.REPORT_LAYOUT_PROPERTY,((ReportDesignHandle)info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP)).getLayoutPreference());
      invalidate=true;
    }
  }
  if (invalidate) {
    getFigure().invalidateTree();
    getFigure().revalidate();
  }
  if (getModel() instanceof ReportDesignHandle) {
    if (info.get(IMasterPageModel.TOP_MARGIN_PROP) != null || info.get(IMasterPageModel.BOTTOM_MARGIN_PROP) != null || info.get(IMasterPageModel.LEFT_MARGIN_PROP) != null || info.get(IMasterPageModel.RIGHT_MARGIN_PROP) != null || info.get(IMasterPageModel.TYPE_PROP) != null || info.get(IMasterPageModel.WIDTH_PROP) != null || info.get(IMasterPageModel.HEIGHT_PROP) != null || info.get(IMasterPageModel.ORIENTATION_PROP) != null) {
      SlotHandle slotHandle=((ModuleHandle)getModel()).getMasterPages();
      Iterator iter=slotHandle.iterator();
      SimpleMasterPageHandle masterPageHandle=(SimpleMasterPageHandle)iter.next();
      Dimension size=getMasterPageSize(masterPageHandle);
      Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
      ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
      figure.setBorder(new ReportDesignMarginBorder(getMasterPageInsets(masterPageHandle)));
      figure.setBounds(bounds.getCopy());
    }
  }
}",0.9136163982430454
70931,"public static DataEngineContext newInstance(int mode,ScriptContext context,IDocArchiveReader reader,IDocArchiveWriter writer,ClassLoader classLoader) throws BirtException {
  DataEngineContext result=new DataEngineContext(mode,context.getSharedScope(),reader,writer,classLoader);
  result.scriptContext=context;
  return result;
}","public static DataEngineContext newInstance(int mode,ScriptContext context,IDocArchiveReader reader,IDocArchiveWriter writer,ClassLoader classLoader) throws BirtException {
  DataEngineContext result=new DataEngineContext(mode,context.getSharedScope(),reader,writer,classLoader,context);
  return result;
}",0.9371069182389936
70932,"/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @throws BirtException
 */
private DataEngineContext(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer,ClassLoader classLoader) throws BirtException {
  Object[] params={new Integer(mode),scope,reader,writer,classLoader};
  logger.entering(DataEngineContext.class.getName(),""String_Node_Str"",params);
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new DataException(ResourceConstants.RD_INVALID_MODE);
  if (writer == null && mode == MODE_GENERATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_PRESENTATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_UPDATE)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  this.classLoader=classLoader;
  this.mode=mode;
  this.scope=scope;
  this.reader=reader;
  this.writer=writer;
  this.cacheOption=CACHE_USE_DEFAULT;
  logger.exiting(DataEngineContext.class.getName(),""String_Node_Str"");
}","/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @throws BirtException
 */
private DataEngineContext(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer,ClassLoader classLoader,ScriptContext context) throws BirtException {
  Object[] params={new Integer(mode),scope,reader,writer,classLoader};
  logger.entering(DataEngineContext.class.getName(),""String_Node_Str"",params);
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new DataException(ResourceConstants.RD_INVALID_MODE);
  if (writer == null && mode == MODE_GENERATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_PRESENTATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_UPDATE)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  this.classLoader=classLoader;
  this.mode=mode;
  this.scope=newSubScope(scope,context);
  this.reader=reader;
  this.writer=writer;
  this.cacheOption=CACHE_USE_DEFAULT;
  this.scriptContext=context;
  logger.exiting(DataEngineContext.class.getName(),""String_Node_Str"");
}",0.9647857445905812
70933,"/** 
 * @param locale The current task's locale
 */
public void setLocale(Locale locale){
  currentLocale=ULocale.forLocale(locale);
  DataException.setLocale(currentLocale);
}","/** 
 * @param locale The current task's locale
 */
public void setLocale(Locale locale){
  currentLocale=ULocale.forLocale(locale);
  propertyMap.put(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.LOCALE,currentLocale);
  DataException.setLocale(currentLocale);
}",0.7635574837310195
70934,"/** 
 * Creates a subscope within parent scope
 * @param parentAndProtoScope parent scope. If null, the shared top-level scope is used as parent
 */
private Scriptable newSubScope(Scriptable parentAndProtoScope){
  if (parentAndProtoScope == null)   parentAndProtoScope=sharedScope;
  Scriptable scope=session.getEngineContext().getScriptContext().getContext().newObject(parentAndProtoScope);
  scope.setParentScope(parentAndProtoScope);
  scope.setPrototype(parentAndProtoScope);
  if (parentAndProtoScope.get(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.FUNCITON_BEAN_NAME,parentAndProtoScope) == org.mozilla.javascript.UniqueTag.NOT_FOUND) {
    final Map<String,Object> propertyMap=new HashMap<String,Object>();
    propertyMap.put(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.LOCALE,session.getEngineContext().getLocale());
    IScriptFunctionContext functionContext=new IScriptFunctionContext(){
      public Object findProperty(      String name){
        return propertyMap.get(name);
      }
    }
;
    Object sObj=Context.javaToJS(functionContext,scope);
    scope.put(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.FUNCITON_BEAN_NAME,scope,sObj);
  }
 else {
    final IScriptFunctionContext context=(IScriptFunctionContext)Context.jsToJava(parentAndProtoScope.get(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.FUNCITON_BEAN_NAME,parentAndProtoScope),IScriptFunctionContext.class);
    final Map<String,Object> propertyMap=new HashMap<String,Object>();
    propertyMap.put(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.LOCALE,session.getEngineContext().getLocale());
    IScriptFunctionContext functionContext=new IScriptFunctionContext(){
      public Object findProperty(      String name){
        if (context.findProperty(name) != null)         return context.findProperty(name);
        return propertyMap.get(name);
      }
    }
;
    Object sObj=Context.javaToJS(functionContext,scope);
    scope.put(org.eclipse.birt.core.script.functionservice.IScriptFunctionContext.FUNCITON_BEAN_NAME,scope,sObj);
  }
  return scope;
}","/** 
 * Creates a subscope within parent scope
 * @param parentAndProtoScope parent scope. If null, the shared top-level scope is used as parent
 */
private Scriptable newSubScope(Scriptable parentAndProtoScope){
  if (parentAndProtoScope == null)   parentAndProtoScope=sharedScope;
  Scriptable scope=session.getEngineContext().getScriptContext().getContext().newObject(parentAndProtoScope);
  scope.setParentScope(parentAndProtoScope);
  scope.setPrototype(parentAndProtoScope);
  return scope;
}",0.3666540927951716
70935,"protected String[] getDataSetColumns(){
  if (columnList.isEmpty()) {
    return EMPTY;
  }
  String[] values=new String[columnList.size()];
  for (int i=0; i < columnList.size(); i++) {
    values[i]=((ComputedColumnHandle)columnList.get(i)).getName();
  }
  return values;
}","protected String[] getDataSetColumns(){
  if (columnList.isEmpty()) {
    return EMPTY;
  }
  List<String> valueList=new ArrayList<String>();
  for (int i=0; i < columnList.size(); i++) {
    ComputedColumnHandle columnHandle=((ComputedColumnHandle)columnList.get(i));
    if (columnHandle.getAggregateFunction() == null)     valueList.add(columnHandle.getName());
  }
  return valueList.toArray(new String[valueList.size()]);
}",0.5028409090909091
70936,"private void placeComponents(){
  GridLayout glCMPTrigger=new GridLayout();
  glCMPTrigger.numColumns=3;
  glCMPTrigger.horizontalSpacing=16;
  glCMPTrigger.verticalSpacing=5;
  slValues=new StackLayout();
  GridLayout glURL=new GridLayout();
  glURL.marginWidth=2;
  glURL.marginHeight=6;
  glURL.horizontalSpacing=6;
  glURL.numColumns=3;
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  this.setLayout(glCMPTrigger);
  Label lblTriggerEvent=new Label(this,SWT.NONE);
  GridData gdLBLTriggerEvent=new GridData();
  gdLBLTriggerEvent.horizontalIndent=4;
  lblTriggerEvent.setLayoutData(gdLBLTriggerEvent);
  lblTriggerEvent.setText(Messages.getString(""String_Node_Str""));
  cmbTriggerType=new TextCombo(this,SWT.NONE);
  GridData gdCMBTriggerType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBTriggerType.horizontalSpan=2;
  cmbTriggerType.setLayoutData(gdCMBTriggerType);
  cmbTriggerType.addListener(TextCombo.SELECTION_EVENT,new Listener(){
    public void handleEvent(    Event event){
      updateTrigger(lastTriggerType);
      updateActionTypeItems();
      Trigger trigger=(Trigger)triggersMap.get(cmbTriggerType.getText());
      if (trigger != null && triggerMatrix.check(trigger)) {
        cmbActionType.setText(getActionText(trigger));
      }
 else {
        cmbActionType.select(0);
      }
      updateUI(trigger);
      switchUI();
      lastTriggerType=cmbTriggerType.getText();
    }
  }
);
  Label lblActionType=new Label(this,SWT.NONE);
  GridData gdLBLActionType=new GridData();
  gdLBLActionType.horizontalIndent=4;
  lblActionType.setLayoutData(gdLBLActionType);
  lblActionType.setText(Messages.getString(""String_Node_Str""));
  cmbActionType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBActionType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBActionType.horizontalSpan=2;
  cmbActionType.setLayoutData(gdCMBActionType);
  cmbActionType.addSelectionListener(this);
  cmbActionType.setVisibleItemCount(10);
  Label lblCursorType=new Label(this,SWT.NONE);
  GridData gdLBLCursorType=new GridData();
  gdLBLCursorType.horizontalIndent=4;
  lblCursorType.setLayoutData(gdLBLCursorType);
  lblCursorType.setText(""String_Node_Str"");
  cmbCursorType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBCursorType=new GridData(GridData.FILL_HORIZONTAL);
  cmbCursorType.setLayoutData(gdCMBCursorType);
  cmbCursorType.addSelectionListener(this);
  btnCursorImage=new Button(this,SWT.NONE);
  btnCursorImage.setText(""String_Node_Str"");
  GridData gdBTNCursorImage=new GridData();
  btnCursorImage.setLayoutData(gdBTNCursorImage);
  btnCursorImage.addSelectionListener(this);
  btnCursorImage.setEnabled(false);
  grpValue=new Group(this,SWT.NONE);
  GridData gdGRPValue=new GridData(GridData.FILL_BOTH);
  gdGRPValue.horizontalSpan=3;
  grpValue.setLayoutData(gdGRPValue);
  grpValue.setText(Messages.getString(""String_Node_Str""));
  grpValue.setLayout(slValues);
  cmpDefault=new Composite(grpValue,SWT.NONE);
  cmpCallback=new Composite(grpValue,SWT.NONE);
  cmpCallback.setLayout(new GridLayout());
  addDescriptionLabel(cmpCallback,1,Messages.getString(""String_Node_Str""));
  cmpHighlight=new Composite(grpValue,SWT.NONE);
  cmpHighlight.setLayout(new GridLayout());
  addDescriptionLabel(cmpHighlight,1,Messages.getString(""String_Node_Str""));
  cmpVisiblity=new Composite(grpValue,SWT.NONE);
  cmpVisiblity.setLayout(new GridLayout());
  addDescriptionLabel(cmpVisiblity,1,Messages.getString(""String_Node_Str""));
  cmpDPVisibility=new Composite(grpValue,SWT.NONE);
  cmpDPVisibility.setLayout(new GridLayout());
  addDescriptionLabel(cmpDPVisibility,1,Messages.getString(""String_Node_Str""));
  cmpScript=new Composite(grpValue,SWT.NONE);
  cmpScript.setLayout(new GridLayout(2,false));
  Label lblScript=new Label(cmpScript,SWT.NONE);
{
    GridData gdLBLScript=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
    lblScript.setLayoutData(gdLBLScript);
    lblScript.setText(Messages.getString(""String_Node_Str""));
  }
  txtScript=new Text(cmpScript,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalSpan=2;
    txtScript.setLayoutData(gd);
    txtScript.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  btnScriptExpBuilder=new Button(cmpScript,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.heightHint=20;
    gd.widthHint=20;
    gd.verticalAlignment=GridData.BEGINNING;
    gd.horizontalAlignment=GridData.END;
    btnScriptExpBuilder.setLayoutData(gd);
    btnScriptExpBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnScriptExpBuilder.addSelectionListener(this);
    btnScriptExpBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnScriptExpBuilder.getImage().setBackground(btnScriptExpBuilder.getBackground());
  }
  cmpTooltip=new Composite(grpValue,SWT.NONE);
  cmpTooltip.setLayout(new GridLayout(3,false));
  Label lblText=new Label(cmpTooltip,SWT.NONE);
  lblText.setText(Messages.getString(""String_Node_Str""));
  if (bEnableShowTooltipValue) {
    GridData lblGd=new GridData();
    lblGd.horizontalSpan=3;
    lblText.setLayoutData(lblGd);
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    GridData gdTXTTooltipText=new GridData(GridData.FILL_BOTH);
    gdTXTTooltipText.horizontalSpan=3;
    txtTooltipText.setLayoutData(gdTXTTooltipText);
  }
 else {
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.SINGLE);
    txtTooltipText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    btnTooltipExpBuilder=new Button(cmpTooltip,SWT.PUSH);
    GridData gdBTNBuilder=new GridData();
    gdBTNBuilder.heightHint=20;
    gdBTNBuilder.widthHint=20;
    btnTooltipExpBuilder.setLayoutData(gdBTNBuilder);
    btnTooltipExpBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnTooltipExpBuilder.addSelectionListener(this);
    btnTooltipExpBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnTooltipExpBuilder.getImage().setBackground(btnTooltipExpBuilder.getBackground());
    addDescriptionLabel(cmpTooltip,3,Messages.getString(""String_Node_Str""));
  }
  cmpURL=new Composite(grpValue,SWT.NONE);
  cmpURL.setLayout(glURL);
  Label lblBaseURL=new Label(cmpURL,SWT.NONE);
  GridData gdLBLBaseURL=new GridData();
  gdLBLBaseURL.horizontalIndent=2;
  lblBaseURL.setLayoutData(gdLBLBaseURL);
  lblBaseURL.setText(Messages.getString(""String_Node_Str""));
  btnBaseURL=new Button(cmpURL,SWT.NONE);
{
    GridData gd=new GridData();
    btnBaseURL.setLayoutData(gd);
    btnBaseURL.setText(Messages.getString(""String_Node_Str""));
    btnBaseURL.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBaseURL.addSelectionListener(this);
    btnBaseURL.setEnabled(wizardContext.getUIServiceProvider().isInvokingSupported());
  }
  Label lblDefine=new Label(cmpURL,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    lblDefine.setLayoutData(gd);
    lblDefine.setText(Messages.getString(""String_Node_Str""));
  }
  btnAdvanced=new Button(cmpURL,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnAdvanced.setLayoutData(gd);
    btnAdvanced.setText(getAdvancedButtonText(bAdvanced));
    btnAdvanced.setToolTipText(Messages.getString(""String_Node_Str""));
    btnAdvanced.addSelectionListener(this);
    btnAdvanced.setEnabled(bEnableURLParameters);
  }
  grpParameters=new Group(cmpURL,SWT.NONE);
  GridData gdGRPParameters=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPParameters.horizontalSpan=3;
  grpParameters.setLayoutData(gdGRPParameters);
  grpParameters.setLayout(glParameter);
  grpParameters.setText(Messages.getString(""String_Node_Str""));
  grpParameters.setVisible(bAdvanced);
  StyledText stParameters=new StyledText(grpParameters,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    stParameters.setLayoutData(gd);
    stParameters.setText(Messages.getString(""String_Node_Str""));
    StyleRange[] sr={new StyleRange(0,4,this.getForeground(),this.getBackground(),SWT.ITALIC),new StyleRange(4,stParameters.getText().length() - 4,this.getForeground(),this.getBackground(),SWT.NORMAL)};
    stParameters.setStyleRanges(sr);
    stParameters.setBackground(this.getBackground());
  }
  Label lblBaseParm=new Label(grpParameters,SWT.NONE);
{
    GridData gdLBLBaseParm=new GridData();
    gdLBLBaseParm.horizontalIndent=2;
    lblBaseParm.setLayoutData(gdLBLBaseParm);
    lblBaseParm.setText(Messages.getString(""String_Node_Str""));
    lblBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  txtBaseParm=new Text(grpParameters,SWT.BORDER);
  GridData gdTXTBaseParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTBaseParm.horizontalSpan=2;
  txtBaseParm.setLayoutData(gdTXTBaseParm);
  txtBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  txtBaseParm.setEnabled(bEnableURLParameters && ((optionalStyle & DISABLE_CATEGORY_SERIES) != DISABLE_CATEGORY_SERIES));
  Label lblValueParm=new Label(grpParameters,SWT.NONE);
{
    GridData gdLBLValueParm=new GridData();
    gdLBLValueParm.horizontalIndent=2;
    lblValueParm.setLayoutData(gdLBLValueParm);
    lblValueParm.setText(Messages.getString(""String_Node_Str""));
    lblValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  txtValueParm=new Text(grpParameters,SWT.BORDER);
  GridData gdTXTValueParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTValueParm.horizontalSpan=2;
  txtValueParm.setLayoutData(gdTXTValueParm);
  txtValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  txtValueParm.setEnabled(bEnableURLParameters && ((optionalStyle & DISABLE_VALUE_SERIES) != DISABLE_VALUE_SERIES));
  Label lblSeriesParm=new Label(grpParameters,SWT.NONE);
{
    GridData gdLBLSeriesParm=new GridData();
    gdLBLSeriesParm.horizontalIndent=2;
    lblSeriesParm.setLayoutData(gdLBLSeriesParm);
    lblSeriesParm.setText(Messages.getString(""String_Node_Str""));
    lblSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  txtSeriesParm=new Text(grpParameters,SWT.BORDER);
  GridData gdTXTSeriesParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSeriesParm.horizontalSpan=2;
  txtSeriesParm.setLayoutData(gdTXTSeriesParm);
  txtSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  txtSeriesParm.setEnabled(bEnableURLParameters && ((optionalStyle & DISABLE_VALUE_SERIES_NAME) != DISABLE_VALUE_SERIES_NAME));
  populateLists();
}","private void placeComponents(){
  GridLayout glCMPTrigger=new GridLayout();
  glCMPTrigger.numColumns=3;
  glCMPTrigger.horizontalSpacing=16;
  glCMPTrigger.verticalSpacing=5;
  slValues=new StackLayout();
  GridLayout glURL=new GridLayout();
  glURL.marginWidth=2;
  glURL.marginHeight=6;
  glURL.horizontalSpacing=6;
  glURL.numColumns=3;
  GridLayout glParameter=new GridLayout();
  glParameter.marginWidth=2;
  glParameter.marginHeight=6;
  glParameter.horizontalSpacing=6;
  glParameter.numColumns=3;
  this.setLayout(glCMPTrigger);
  Label lblTriggerEvent=new Label(this,SWT.NONE);
  GridData gdLBLTriggerEvent=new GridData();
  gdLBLTriggerEvent.horizontalIndent=4;
  lblTriggerEvent.setLayoutData(gdLBLTriggerEvent);
  lblTriggerEvent.setText(Messages.getString(""String_Node_Str""));
  cmbTriggerType=new TextCombo(this,SWT.NONE);
  GridData gdCMBTriggerType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBTriggerType.horizontalSpan=2;
  cmbTriggerType.setLayoutData(gdCMBTriggerType);
  cmbTriggerType.addListener(TextCombo.SELECTION_EVENT,new Listener(){
    public void handleEvent(    Event event){
      updateTrigger(lastTriggerType);
      updateActionTypeItems();
      Trigger trigger=(Trigger)triggersMap.get(cmbTriggerType.getText());
      if (trigger != null && triggerMatrix.check(trigger)) {
        cmbActionType.setText(getActionText(trigger));
      }
 else {
        cmbActionType.select(0);
      }
      updateUI(trigger);
      switchUI();
      lastTriggerType=cmbTriggerType.getText();
    }
  }
);
  Label lblActionType=new Label(this,SWT.NONE);
  GridData gdLBLActionType=new GridData();
  gdLBLActionType.horizontalIndent=4;
  lblActionType.setLayoutData(gdLBLActionType);
  lblActionType.setText(Messages.getString(""String_Node_Str""));
  cmbActionType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBActionType=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBActionType.horizontalSpan=2;
  cmbActionType.setLayoutData(gdCMBActionType);
  cmbActionType.addSelectionListener(this);
  cmbActionType.setVisibleItemCount(10);
  Label lblCursorType=new Label(this,SWT.NONE);
  GridData gdLBLCursorType=new GridData();
  gdLBLCursorType.horizontalIndent=4;
  lblCursorType.setLayoutData(gdLBLCursorType);
  lblCursorType.setText(""String_Node_Str"");
  cmbCursorType=new Combo(this,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBCursorType=new GridData(GridData.FILL_HORIZONTAL);
  cmbCursorType.setLayoutData(gdCMBCursorType);
  cmbCursorType.addSelectionListener(this);
  btnCursorImage=new Button(this,SWT.NONE);
  btnCursorImage.setText(""String_Node_Str"");
  GridData gdBTNCursorImage=new GridData();
  btnCursorImage.setLayoutData(gdBTNCursorImage);
  btnCursorImage.addSelectionListener(this);
  btnCursorImage.setEnabled(false);
  grpValue=new Group(this,SWT.NONE);
  GridData gdGRPValue=new GridData(GridData.FILL_BOTH);
  gdGRPValue.horizontalSpan=3;
  grpValue.setLayoutData(gdGRPValue);
  grpValue.setText(Messages.getString(""String_Node_Str""));
  grpValue.setLayout(slValues);
  cmpDefault=new Composite(grpValue,SWT.NONE);
  cmpCallback=new Composite(grpValue,SWT.NONE);
  cmpCallback.setLayout(new GridLayout());
  addDescriptionLabel(cmpCallback,1,Messages.getString(""String_Node_Str""));
  cmpHighlight=new Composite(grpValue,SWT.NONE);
  cmpHighlight.setLayout(new GridLayout());
  addDescriptionLabel(cmpHighlight,1,Messages.getString(""String_Node_Str""));
  cmpVisiblity=new Composite(grpValue,SWT.NONE);
  cmpVisiblity.setLayout(new GridLayout());
  addDescriptionLabel(cmpVisiblity,1,Messages.getString(""String_Node_Str""));
  cmpDPVisibility=new Composite(grpValue,SWT.NONE);
  cmpDPVisibility.setLayout(new GridLayout());
  addDescriptionLabel(cmpDPVisibility,1,Messages.getString(""String_Node_Str""));
  cmpScript=new Composite(grpValue,SWT.NONE);
  cmpScript.setLayout(new GridLayout(2,false));
  Label lblScript=new Label(cmpScript,SWT.NONE);
{
    GridData gdLBLScript=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
    lblScript.setLayoutData(gdLBLScript);
    lblScript.setText(Messages.getString(""String_Node_Str""));
  }
  txtScript=new Text(cmpScript,SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalSpan=2;
    txtScript.setLayoutData(gd);
    txtScript.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  btnScriptExpBuilder=new Button(cmpScript,SWT.PUSH);
{
    GridData gd=new GridData();
    gd.heightHint=20;
    gd.widthHint=20;
    gd.verticalAlignment=GridData.BEGINNING;
    gd.horizontalAlignment=GridData.END;
    btnScriptExpBuilder.setLayoutData(gd);
    btnScriptExpBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnScriptExpBuilder.addSelectionListener(this);
    btnScriptExpBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnScriptExpBuilder.getImage().setBackground(btnScriptExpBuilder.getBackground());
  }
  cmpTooltip=new Composite(grpValue,SWT.NONE);
  cmpTooltip.setLayout(new GridLayout(3,false));
  Label lblText=new Label(cmpTooltip,SWT.NONE);
  lblText.setText(Messages.getString(""String_Node_Str""));
  if (bEnableShowTooltipValue) {
    GridData lblGd=new GridData();
    lblGd.horizontalSpan=3;
    lblText.setLayoutData(lblGd);
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    GridData gdTXTTooltipText=new GridData(GridData.FILL_BOTH);
    gdTXTTooltipText.horizontalSpan=3;
    txtTooltipText.setLayoutData(gdTXTTooltipText);
  }
 else {
    txtTooltipText=new Text(cmpTooltip,SWT.BORDER | SWT.SINGLE);
    txtTooltipText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    btnTooltipExpBuilder=new Button(cmpTooltip,SWT.PUSH);
    GridData gdBTNBuilder=new GridData();
    gdBTNBuilder.heightHint=20;
    gdBTNBuilder.widthHint=20;
    btnTooltipExpBuilder.setLayoutData(gdBTNBuilder);
    btnTooltipExpBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnTooltipExpBuilder.addSelectionListener(this);
    btnTooltipExpBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnTooltipExpBuilder.getImage().setBackground(btnTooltipExpBuilder.getBackground());
    addDescriptionLabel(cmpTooltip,3,Messages.getString(""String_Node_Str""));
  }
  cmpURL=new Composite(grpValue,SWT.NONE);
  cmpURL.setLayout(glURL);
  Label lblBaseURL=new Label(cmpURL,SWT.NONE);
  GridData gdLBLBaseURL=new GridData();
  gdLBLBaseURL.horizontalIndent=2;
  lblBaseURL.setLayoutData(gdLBLBaseURL);
  lblBaseURL.setText(Messages.getString(""String_Node_Str""));
  btnBaseURL=new Button(cmpURL,SWT.NONE);
{
    GridData gd=new GridData();
    btnBaseURL.setLayoutData(gd);
    btnBaseURL.setText(Messages.getString(""String_Node_Str""));
    btnBaseURL.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBaseURL.addSelectionListener(this);
    btnBaseURL.setEnabled(wizardContext.getUIServiceProvider().isInvokingSupported());
  }
  Label lblDefine=new Label(cmpURL,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    lblDefine.setLayoutData(gd);
    lblDefine.setText(Messages.getString(""String_Node_Str""));
  }
  btnAdvanced=new Button(cmpURL,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnAdvanced.setLayoutData(gd);
    btnAdvanced.setText(getAdvancedButtonText(bAdvanced));
    btnAdvanced.setToolTipText(Messages.getString(""String_Node_Str""));
    btnAdvanced.addSelectionListener(this);
    btnAdvanced.setEnabled(bEnableURLParameters);
  }
  grpParameters=new Group(cmpURL,SWT.NONE);
  GridData gdGRPParameters=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPParameters.horizontalSpan=3;
  grpParameters.setLayoutData(gdGRPParameters);
  grpParameters.setLayout(glParameter);
  grpParameters.setText(Messages.getString(""String_Node_Str""));
  grpParameters.setVisible(bAdvanced);
  StyledText stParameters=new StyledText(grpParameters,SWT.WRAP | SWT.READ_ONLY);
{
    GridData gd=new GridData();
    gd.horizontalIndent=2;
    gd.horizontalSpan=3;
    gd.widthHint=200;
    stParameters.setLayoutData(gd);
    stParameters.setText(Messages.getString(""String_Node_Str""));
    StyleRange[] sr={new StyleRange(0,4,this.getForeground(),this.getBackground(),SWT.ITALIC),new StyleRange(4,stParameters.getText().length() - 4,this.getForeground(),this.getBackground(),SWT.NORMAL)};
    stParameters.setStyleRanges(sr);
    stParameters.setBackground(this.getBackground());
  }
  Label lblBaseParm=new Label(grpParameters,SWT.NONE);
{
    GridData gdLBLBaseParm=new GridData();
    gdLBLBaseParm.horizontalIndent=2;
    lblBaseParm.setLayoutData(gdLBLBaseParm);
    lblBaseParm.setText(Messages.getString(""String_Node_Str""));
    lblBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  txtBaseParm=new Text(grpParameters,SWT.BORDER);
  GridData gdTXTBaseParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTBaseParm.horizontalSpan=2;
  txtBaseParm.setLayoutData(gdTXTBaseParm);
  txtBaseParm.setToolTipText(Messages.getString(""String_Node_Str""));
  txtBaseParm.setEnabled(bEnableURLParameters && ((optionalStyle & DISABLE_CATEGORY_SERIES) != DISABLE_CATEGORY_SERIES));
  Label lblValueParm=new Label(grpParameters,SWT.NONE);
{
    GridData gdLBLValueParm=new GridData();
    gdLBLValueParm.horizontalIndent=2;
    lblValueParm.setLayoutData(gdLBLValueParm);
    lblValueParm.setText(Messages.getString(""String_Node_Str""));
    lblValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  txtValueParm=new Text(grpParameters,SWT.BORDER);
  GridData gdTXTValueParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTValueParm.horizontalSpan=2;
  txtValueParm.setLayoutData(gdTXTValueParm);
  txtValueParm.setToolTipText(Messages.getString(""String_Node_Str""));
  txtValueParm.setEnabled(bEnableURLParameters && ((optionalStyle & DISABLE_VALUE_SERIES) != DISABLE_VALUE_SERIES));
  Label lblSeriesParm=new Label(grpParameters,SWT.NONE);
{
    GridData gdLBLSeriesParm=new GridData();
    gdLBLSeriesParm.horizontalIndent=2;
    lblSeriesParm.setLayoutData(gdLBLSeriesParm);
    lblSeriesParm.setText(Messages.getString(""String_Node_Str""));
    lblSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  txtSeriesParm=new Text(grpParameters,SWT.BORDER);
  GridData gdTXTSeriesParm=new GridData(GridData.FILL_HORIZONTAL);
  gdTXTSeriesParm.horizontalSpan=2;
  txtSeriesParm.setLayoutData(gdTXTSeriesParm);
  txtSeriesParm.setToolTipText(Messages.getString(""String_Node_Str""));
  txtSeriesParm.setEnabled(bEnableURLParameters && ((optionalStyle & DISABLE_VALUE_SERIES_NAME) != DISABLE_VALUE_SERIES_NAME));
  populateLists();
}",0.9992449981124952
70937,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,String link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    println(""String_Node_Str"" + link + ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,String link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    link=codeLink(link);
    println(""String_Node_Str"" + link + ""String_Node_Str""+ link+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9930805424854692
70938,"protected IReportItemExecutor prepareChildExecutor() throws Exception {
  if (prepareFirstChild) {
    if (fragment == null && nextOffset == -1) {
      DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
      if (docExt != null) {
        nextOffset=docExt.getFirstChild();
      }
    }
    if (fragment != null) {
      if (sections == null) {
        sections=fragment.getSections();
        nextSection=-1;
        useNextSection=true;
      }
    }
    prepareFirstChild=false;
  }
  if (fragment != null) {
    if (useNextSection) {
      useNextSection=false;
      nextSection++;
      if (sections == null || nextSection >= sections.length) {
        return null;
      }
      Object leftEdge=sections[nextSection][0];
      if (leftEdge == Segment.LEFT_MOST_EDGE) {
        DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
        if (docExt != null) {
          nextOffset=docExt.getFirstChild();
        }
      }
 else {
        InstanceIndex leftIndex=(InstanceIndex)leftEdge;
        InstanceID leftId=leftIndex.getInstanceID();
        long leftOffset=leftIndex.getOffset();
        if (leftOffset == -1) {
          DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
          if (docExt != null) {
            leftOffset=docExt.getFirstChild();
          }
        }
        if (leftOffset != -1) {
          IContent leftContent=reader.loadContent(leftOffset);
          InstanceID contentId=leftContent.getInstanceID();
          if (isSameInstance(contentId,leftId)) {
            nextOffset=leftIndex.getOffset();
          }
 else {
            DocumentExtension docExt=(DocumentExtension)leftContent.getExtension(IContent.DOCUMENT_EXTENSION);
            if (docExt != null) {
              nextOffset=docExt.getNext();
            }
          }
        }
        doSkipToExecutor(leftId,nextOffset);
        uniqueId=leftId.getUniqueID();
      }
    }
  }
  ReportItemExecutor childExecutor=doCreateExecutor(nextOffset);
  if (childExecutor != null) {
    IContent childContent=childExecutor.execute();
    if (childContent != null) {
      if (fragment != null) {
        InstanceID childId=childContent.getInstanceID();
        Fragment childFragment=fragment.getFragment(childId);
        if (childFragment != null) {
          childExecutor.setFragment(childFragment);
        }
        Object rightEdge=sections[nextSection][1];
        if (rightEdge != Segment.RIGHT_MOST_EDGE) {
          InstanceIndex rightIndex=(InstanceIndex)rightEdge;
          InstanceID rightId=rightIndex.getInstanceID();
          if (isSameInstance(rightId,childId)) {
            useNextSection=true;
          }
        }
      }
      DocumentExtension docExt=(DocumentExtension)childContent.getExtension(IContent.DOCUMENT_EXTENSION);
      if (docExt != null) {
        if (docExt.getIndex() == nextOffset) {
          nextOffset=docExt.getNext();
        }
      }
    }
  }
  return childExecutor;
}","protected IReportItemExecutor prepareChildExecutor() throws Exception {
  if (prepareFirstChild) {
    if (fragment == null && nextOffset == -1) {
      DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
      if (docExt != null) {
        nextOffset=docExt.getFirstChild();
      }
    }
    if (fragment != null) {
      if (sections == null) {
        sections=fragment.getSections();
        nextSection=-1;
        useNextSection=true;
      }
    }
    prepareFirstChild=false;
  }
  if (fragment != null) {
    if (useNextSection) {
      useNextSection=false;
      nextSection++;
      if (sections == null || nextSection >= sections.length) {
        return null;
      }
      Object leftEdge=sections[nextSection][0];
      if (leftEdge == Segment.LEFT_MOST_EDGE) {
        DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
        if (docExt != null) {
          nextOffset=docExt.getFirstChild();
        }
      }
 else {
        InstanceIndex leftIndex=(InstanceIndex)leftEdge;
        InstanceID leftId=leftIndex.getInstanceID();
        long leftOffset=leftIndex.getOffset();
        if (leftOffset == -1) {
          DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
          if (docExt != null) {
            leftOffset=docExt.getFirstChild();
          }
        }
        if (leftOffset != -1) {
          IContent leftContent=reader.loadContent(leftOffset);
          InstanceID contentId=leftContent.getInstanceID();
          if (isSameInstance(contentId,leftId)) {
            nextOffset=leftIndex.getOffset();
          }
 else {
            nextOffset=leftOffset;
          }
        }
        doSkipToExecutor(leftId,nextOffset);
        uniqueId=leftId.getUniqueID();
      }
    }
  }
  ReportItemExecutor childExecutor=doCreateExecutor(nextOffset);
  if (childExecutor != null) {
    IContent childContent=childExecutor.execute();
    if (childContent != null) {
      if (fragment != null) {
        InstanceID childId=childContent.getInstanceID();
        Fragment childFragment=fragment.getFragment(childId);
        if (childFragment != null) {
          childExecutor.setFragment(childFragment);
        }
        Object rightEdge=sections[nextSection][1];
        if (rightEdge != Segment.RIGHT_MOST_EDGE) {
          InstanceIndex rightIndex=(InstanceIndex)rightEdge;
          InstanceID rightId=rightIndex.getInstanceID();
          if (isSameInstance(rightId,childId)) {
            useNextSection=true;
          }
        }
      }
      DocumentExtension docExt=(DocumentExtension)childContent.getExtension(IContent.DOCUMENT_EXTENSION);
      if (docExt != null) {
        if (docExt.getIndex() == nextOffset) {
          nextOffset=docExt.getNext();
        }
      }
    }
  }
  return childExecutor;
}",0.9651221566975569
70939,"public void end(IReportContent report){
  engine.complete();
  if (writer == null) {
    writer=new ExcelWriter(out,context,isRTLSheet,pageHeader,pageFooter,orientation,engine);
  }
  try {
    writer.start(report);
    writer.outputCacheData();
    writer.end();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}","public void end(IReportContent report){
  engine.cacheBookmarks(sheetIndex);
  engine.complete();
  try {
    writer.start(report,engine.getStyleMap(),engine.getAllBookmarks());
    outputCacheData();
    writer.end();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}",0.5667166416791605
70940,"public void start(IReportContent report){
  setupRenderOptions();
  String reportOrientation=report.getDesign().getReportDesign().getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation))   isRTLSheet=true;
  IStyle style=report.getRoot().getComputedStyle();
  SimpleMasterPageDesign master=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  engine=new ExcelLayoutEngine(new PageDef(master,style),context,this);
}","public void start(IReportContent report){
  setupRenderOptions();
  String reportOrientation=report.getDesign().getReportDesign().getBidiOrientation();
  if (""String_Node_Str"".equalsIgnoreCase(reportOrientation))   isRTLSheet=true;
  IStyle style=report.getRoot().getComputedStyle();
  SimpleMasterPageDesign master=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  engine=new ExcelLayoutEngine(new PageDef(master,style),context,this);
  createWriter();
}",0.981012658227848
70941,"public void outputSheet(){
  if (writer == null)   writer=new ExcelWriter(out,context,isRTLSheet,pageHeader,pageFooter,orientation,engine);
  try {
    writer.outputSheet();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}","public void outputSheet(){
  engine.cacheBookmarks(sheetIndex);
  engine.complete();
  try {
    outputCacheData();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  sheetIndex++;
}",0.5795918367346938
70942,"public HyperlinkDef parseHyperLink(IContent content){
  HyperlinkDef hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
    IReportRunnable reportRunnable=service.getReportRunnable();
    IReportContext reportContext=service.getReportContext();
    IHTMLActionHandler actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      hyperlink=new HyperlinkDef(bookmark,IHyperlinkAction.ACTION_BOOKMARK,null,tooltip);
    break;
case IHyperlinkAction.ACTION_HYPERLINK:
  String url=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_HYPERLINK,null,tooltip);
break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
url=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_DRILLTHROUGH,null,tooltip);
break;
}
}
return hyperlink;
}","public HyperlinkDef parseHyperLink(IContent content){
  HyperlinkDef hyperlink=null;
  IHyperlinkAction linkAction=content.getHyperlinkAction();
  if (linkAction != null) {
    String tooltip=linkAction.getTooltip();
    String bookmark=linkAction.getBookmark();
    IReportRunnable reportRunnable=service.getReportRunnable();
    IReportContext reportContext=service.getReportContext();
    IHTMLActionHandler actionHandler=(IHTMLActionHandler)service.getOption(RenderOption.ACTION_HANDLER);
switch (linkAction.getType()) {
case IHyperlinkAction.ACTION_BOOKMARK:
      hyperlink=new HyperlinkDef(bookmark,IHyperlinkAction.ACTION_BOOKMARK,tooltip);
    break;
case IHyperlinkAction.ACTION_HYPERLINK:
  String url=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_HYPERLINK,tooltip);
break;
case IHyperlinkAction.ACTION_DRILLTHROUGH:
url=org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getHyperlinkUrl(linkAction,reportRunnable,actionHandler,reportContext);
hyperlink=new HyperlinkDef(url,IHyperlinkAction.ACTION_DRILLTHROUGH,tooltip);
break;
}
}
return hyperlink;
}",0.9938398357289528
70943,"/** 
 * @param dataSet
 * @return
 */
private Scriptable getScriptScope(IDataSetInstanceHandle dataSet){
  Scriptable shared=this.context.getSharedScope();
  Scriptable scope=(Scriptable)Context.javaToJS(new DataSetInstance(dataSet),shared);
  scope.setParentScope(shared);
  scope.setPrototype(shared);
  return scope;
}","/** 
 * @param dataSet
 * @return
 */
private Scriptable getScriptScope(IDataSetInstanceHandle dataSet){
  Scriptable shared=this.context.getSharedScope();
  Scriptable scope=(Scriptable)Context.javaToJS(new DataSetInstance(dataSet),shared);
  scope.setParentScope(shared);
  scope.setPrototype(dataSet.getScriptScope());
  return scope;
}",0.9545454545454546
70944,"/** 
 * Returns a timestamp value which is midnight of the current date.
 * @return
 */
private static Timestamp today(){
  Calendar c=Calendar.getInstance();
  return new Timestamp(c.getTimeInMillis());
}","/** 
 * Returns a timestamp value which is midnight of the current date.
 * @return
 */
private static Date today(){
  Calendar c=Calendar.getInstance();
  return c.getTime();
}",0.9109947643979056
70945,"/** 
 * Draws a previously built chart using the specified device renderer into a target output device.
 * @param idr A device renderer that determines the target context on which the chart will be rendered.
 * @param gcs A previously built chart that needs to be rendered.
 * @throws ChartException
 */
public final void render(IDeviceRenderer idr,GeneratedChartState gcs) throws ChartException {
  final Chart cm=gcs.getChartModel();
  idr.getDisplayServer().setResourceFinder(gcs.getRunTimeContext().getResourceFinder());
  ScriptHandler.callFunction(gcs.getRunTimeContext().getScriptHandler(),ScriptHandler.START_RENDERING,gcs);
  ScriptHandler.callFunction(gcs.getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_RENDERING,gcs,gcs.getRunTimeContext().getScriptContext());
  Legend lg=cm.getLegend();
  lg.updateLayout(cm);
  if (lg.getPosition() == Position.INSIDE_LITERAL) {
    int iType=gcs.getType();
    if (iType == WITH_AXES) {
      Bounds bo=((PlotWithAxes)gcs.getComputations()).getPlotBounds();
      updateLegendInside(bo,lg,idr.getDisplayServer(),cm,gcs.getRunTimeContext());
    }
 else     if (iType == WITHOUT_AXES) {
      Bounds bo=((PlotWithoutAxes)gcs.getComputations()).getBounds();
      updateLegendInside(bo,lg,idr.getDisplayServer(),cm,gcs.getRunTimeContext());
    }
  }
  final LinkedHashMap lhm=gcs.getRenderers();
  final int iSize=lhm.size();
  BaseRenderer br;
  final Collection co=lhm.values();
  final LegendItemRenderingHints[] lirha=(LegendItemRenderingHints[])co.toArray(new LegendItemRenderingHints[co.size()]);
  final DeferredCacheManager dcm=new DeferredCacheManager(idr,cm);
  DeferredCache dc=null;
  final Bounds bo=gcs.getChartModel().getBlock().getBounds();
  idr.setProperty(IDeviceRenderer.EXPECTED_BOUNDS,bo.scaledInstance(idr.getDisplayServer().getDpiResolution() / 72d));
  gcs.getRunTimeContext().setStructureDefinitionListener(idr.needsStructureDefinition() ? idr : null);
  idr.before();
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    dc=dcm.createDeferredCache(br);
    br.setDeferredCacheManager(dcm);
    br.set(dc);
    br.set(idr);
    br.set(gcs.getRunTimeContext());
    try {
      br.render(lhm,bo);
    }
 catch (    RuntimeException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
  }
  idr.after();
  gcs.getRunTimeContext().clearState();
  ScriptHandler.callFunction(gcs.getRunTimeContext().getScriptHandler(),ScriptHandler.FINISH_RENDERING,gcs);
  ScriptHandler.callFunction(gcs.getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_RENDERING,gcs,gcs.getRunTimeContext().getScriptContext());
}","/** 
 * Draws a previously built chart using the specified device renderer into a target output device.
 * @param idr A device renderer that determines the target context on which the chart will be rendered.
 * @param gcs A previously built chart that needs to be rendered.
 * @throws ChartException
 */
public final void render(IDeviceRenderer idr,GeneratedChartState gcs) throws ChartException {
  final Chart cm=gcs.getChartModel();
  idr.getDisplayServer().setResourceFinder(gcs.getRunTimeContext().getResourceFinder());
  ScriptHandler.callFunction(gcs.getRunTimeContext().getScriptHandler(),ScriptHandler.START_RENDERING,gcs);
  ScriptHandler.callFunction(gcs.getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_RENDERING,gcs,gcs.getRunTimeContext().getScriptContext());
  Legend lg=cm.getLegend();
  lg.updateLayout(cm);
  if (lg.getPosition() == Position.INSIDE_LITERAL) {
    int iType=gcs.getType();
    if (iType == WITH_AXES) {
      Bounds bo=((PlotWithAxes)gcs.getComputations()).getPlotBounds();
      updateLegendInside(bo,lg,idr.getDisplayServer(),cm,gcs.getRunTimeContext());
    }
 else     if (iType == WITHOUT_AXES) {
      Bounds bo=((PlotWithoutAxes)gcs.getComputations()).getBounds();
      updateLegendInside(bo,lg,idr.getDisplayServer(),cm,gcs.getRunTimeContext());
    }
  }
  final LinkedHashMap lhm=gcs.getRenderers();
  final int iSize=lhm.size();
  BaseRenderer br;
  final Collection co=lhm.values();
  final LegendItemRenderingHints[] lirha=(LegendItemRenderingHints[])co.toArray(new LegendItemRenderingHints[co.size()]);
  final DeferredCacheManager dcm=new DeferredCacheManager(idr,cm);
  DeferredCache dc=null;
  final Bounds bo=gcs.getChartModel().getBlock().getBounds();
  idr.setProperty(IDeviceRenderer.EXPECTED_BOUNDS,bo.scaledInstance(idr.getDisplayServer().getDpiResolution() / 72d));
  gcs.getRunTimeContext().setStructureDefinitionListener(idr.needsStructureDefinition() ? idr : null);
  idr.before();
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    dc=dcm.createDeferredCache(br);
    br.setDeferredCacheManager(dcm);
    br.set(dc);
    br.set(idr);
    br.set(gcs.getRunTimeContext());
    try {
      br.render(lhm,bo);
    }
 catch (    RuntimeException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
  }
  idr.after();
  if (needClearState(idr)) {
    gcs.getRunTimeContext().clearState();
  }
  ScriptHandler.callFunction(gcs.getRunTimeContext().getScriptHandler(),ScriptHandler.FINISH_RENDERING,gcs);
  ScriptHandler.callFunction(gcs.getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_RENDERING,gcs,gcs.getRunTimeContext().getScriptContext());
}",0.9934321636329516
70946,"/** 
 * Flush cached plane shadows.
 * @param _idr
 * @param planeShadows
 * @throws ChartException
 * @since 2.2.1
 */
static void flushPlaneShadows(IDeviceRenderer _idr,List planeShadows,Comparator<?> cp) throws ChartException {
  if (_idr == null || planeShadows == null) {
    return;
  }
  IRenderInstruction wi;
  if (cp != null) {
    Collections.sort(planeShadows,cp);
  }
 else {
    Collections.sort(planeShadows);
  }
  for (int i=0; i < planeShadows.size(); i++) {
    wi=(IRenderInstruction)planeShadows.get(i);
    if (wi.isModel()) {
      List al=wi.getModel();
      for (int j=0; j < al.size(); j++) {
        PrimitiveRenderEvent pre=(PrimitiveRenderEvent)al.get(j);
        pre.fill(_idr);
        pre.draw(_idr);
      }
    }
 else {
      wi.getEvent().iObjIndex=i + 1;
switch (wi.getInstruction()) {
case PrimitiveRenderEvent.FILL | PrimitiveRenderEvent.DRAW:
        wi.getEvent().fill(_idr);
      wi.getEvent().draw(_idr);
    break;
case PrimitiveRenderEvent.FILL:
  wi.getEvent().fill(_idr);
break;
case PrimitiveRenderEvent.DRAW:
wi.getEvent().draw(_idr);
break;
}
}
}
planeShadows.clear();
}","/** 
 * Flush cached plane shadows.
 * @param _idr
 * @param planeShadows
 * @throws ChartException
 * @since 2.2.1
 */
static void flushPlaneShadows(IDeviceRenderer _idr,List planeShadows,Comparator cp) throws ChartException {
  if (_idr == null || planeShadows == null) {
    return;
  }
  IRenderInstruction wi;
  if (cp != null) {
    Collections.sort(planeShadows,cp);
  }
 else {
    Collections.sort(planeShadows);
  }
  for (int i=0; i < planeShadows.size(); i++) {
    wi=(IRenderInstruction)planeShadows.get(i);
    if (wi.isModel()) {
      List al=wi.getModel();
      for (int j=0; j < al.size(); j++) {
        PrimitiveRenderEvent pre=(PrimitiveRenderEvent)al.get(j);
        pre.fill(_idr);
        pre.draw(_idr);
      }
    }
 else {
      wi.getEvent().iObjIndex=i + 1;
switch (wi.getInstruction()) {
case PrimitiveRenderEvent.FILL | PrimitiveRenderEvent.DRAW:
        wi.getEvent().fill(_idr);
      wi.getEvent().draw(_idr);
    break;
case PrimitiveRenderEvent.FILL:
  wi.getEvent().fill(_idr);
break;
case PrimitiveRenderEvent.DRAW:
wi.getEvent().draw(_idr);
break;
}
}
}
planeShadows.clear();
}",0.998661311914324
70947,"/** 
 * Flush cached planes.
 * @param _idr
 * @param planes
 * @throws ChartException
 * @since 2.2.1
 */
static void flushPlanes(IDeviceRenderer _idr,List planes,Comparator<?> cp) throws ChartException {
  if (_idr == null || planes == null) {
    return;
  }
  IRenderInstruction wi;
  if (cp != null) {
    Collections.sort(planes,cp);
  }
 else {
    Collections.sort(planes);
  }
  for (int i=0; i < planes.size(); i++) {
    wi=(IRenderInstruction)planes.get(i);
    if (wi.isModel()) {
      List al=wi.getModel();
      for (int j=0; j < al.size(); j++) {
        PrimitiveRenderEvent pre=(PrimitiveRenderEvent)al.get(j);
        pre.fill(_idr);
        pre.draw(_idr);
      }
    }
 else {
      wi.getEvent().iObjIndex=i + 1;
switch (wi.getInstruction()) {
case PrimitiveRenderEvent.FILL | PrimitiveRenderEvent.DRAW:
        wi.getEvent().fill(_idr);
      wi.getEvent().draw(_idr);
    break;
case PrimitiveRenderEvent.FILL:
  wi.getEvent().fill(_idr);
break;
case PrimitiveRenderEvent.DRAW:
wi.getEvent().draw(_idr);
break;
}
}
}
planes.clear();
}","/** 
 * Flush cached planes.
 * @param _idr
 * @param planes
 * @throws ChartException
 * @since 2.2.1
 */
static void flushPlanes(IDeviceRenderer _idr,List planes,Comparator cp) throws ChartException {
  if (_idr == null || planes == null) {
    return;
  }
  IRenderInstruction wi;
  if (cp != null) {
    Collections.sort(planes,cp);
  }
 else {
    Collections.sort(planes);
  }
  for (int i=0; i < planes.size(); i++) {
    wi=(IRenderInstruction)planes.get(i);
    if (wi.isModel()) {
      List al=wi.getModel();
      for (int j=0; j < al.size(); j++) {
        PrimitiveRenderEvent pre=(PrimitiveRenderEvent)al.get(j);
        pre.fill(_idr);
        pre.draw(_idr);
      }
    }
 else {
      wi.getEvent().iObjIndex=i + 1;
switch (wi.getInstruction()) {
case PrimitiveRenderEvent.FILL | PrimitiveRenderEvent.DRAW:
        wi.getEvent().fill(_idr);
      wi.getEvent().draw(_idr);
    break;
case PrimitiveRenderEvent.FILL:
  wi.getEvent().fill(_idr);
break;
case PrimitiveRenderEvent.DRAW:
wi.getEvent().draw(_idr);
break;
}
}
}
planes.clear();
}",0.9985842378480416
70948,"/** 
 * Get the connection with SWING device to render the graphics.
 */
SwingInteractivityViewer(){
  final PluginSettings ps=PluginSettings.instance();
  try {
    idr=ps.getDevice(""String_Node_Str"");
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  cm=InteractivityCharts.createHSChart();
}","/** 
 * Get the connection with SWING device to render the graphics.
 */
SwingInteractivityViewer(){
  PlatformConfig config=new PlatformConfig();
  config.setProperty(""String_Node_Str"",""String_Node_Str"");
  final PluginSettings ps=PluginSettings.instance(config);
  try {
    idr=ps.getDevice(""String_Node_Str"");
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  cm=InteractivityCharts.createHSChart();
}",0.8485675306957708
70949,"/** 
 * Get the connection with SWT device to render the graphics.
 */
SwtInteractivityViewer(Composite parent,int style){
  super(parent,style);
  final PluginSettings ps=PluginSettings.instance();
  try {
    idr=ps.getDevice(""String_Node_Str"");
    idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,this);
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  cm=InteractivityCharts.createHSChart();
}","/** 
 * Get the connection with SWT device to render the graphics.
 */
SwtInteractivityViewer(Composite parent,int style){
  super(parent,style);
  PlatformConfig config=new PlatformConfig();
  config.setProperty(""String_Node_Str"",""String_Node_Str"");
  final PluginSettings ps=PluginSettings.instance(config);
  try {
    idr=ps.getDevice(""String_Node_Str"");
    idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,this);
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  cm=InteractivityCharts.createHSChart();
}",0.8820403825717322
70950,"@Override protected final Object getMinMax(Axis ax,int iType) throws ChartException, IllegalArgumentException {
  if (ax.getType().getValue() == AxisType.LINEAR && ax.isAligned() && azHelper != null) {
    double[] minmax=azHelper.getCachedMinMax(ax);
    if (minmax != null) {
      return minmax;
    }
  }
  final Series[] sea=ax.getRuntimeSeries();
  final int iSeriesCount=sea.length;
  Series se;
  DataSet ds;
  Object oV1, oV2, oMin=null, oMax=null;
  PluginSettings ps=PluginSettings.instance();
  IDataSetProcessor iDSP=null;
  boolean bAnyStacked=false;
  for (int i=0; i < iSeriesCount; i++) {
    if (sea[i].isStacked()) {
      if (sea[i].canBeStacked()) {
        bAnyStacked=true;
        continue;
      }
 else {
        throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sea[i]}));
      }
    }
    iDSP=ps.getDataSetProcessor(sea[i].getClass());
    ds=sea[i].getDataSet();
    oV1=iDSP.getMinimum(ds);
    oV2=iDSP.getMaximum(ds);
    if ((iType & NUMERICAL) == NUMERICAL) {
      try {
        if (oV1 != null) {
          if (oMin == null) {
            oMin=oV1;
          }
 else {
            final double dV1=asDouble(oV1).doubleValue();
            if (Math.min(asDouble(oMin).doubleValue(),dV1) == dV1) {
              oMin=oV1;
            }
          }
        }
        if (oV2 != null) {
          if (oMax == null) {
            oMax=oV2;
          }
 else {
            final double dV2=asDouble(oV2).doubleValue();
            if (Math.max(asDouble(oMax).doubleValue(),dV2) == dV2) {
              oMax=oV2;
            }
          }
        }
      }
 catch (      ClassCastException ex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
      }
    }
 else     if ((iType & DATE_TIME) == DATE_TIME) {
      try {
        if (oV1 != null) {
          if (oMin == null) {
            oMin=oV1;
          }
 else {
            final CDateTime cdtV1=asDateTime(oV1);
            final CDateTime cdtMin=asDateTime(oMin);
            if (cdtV1.before(cdtMin)) {
              oMin=cdtV1;
            }
          }
        }
        if (oV2 != null) {
          if (oMax == null) {
            oMax=oV2;
          }
 else {
            final CDateTime cdtV2=asDateTime(oV2);
            final CDateTime cdtMax=asDateTime(oMax);
            if (cdtV2.after(cdtMax)) {
              oMax=cdtV2;
            }
          }
        }
      }
 catch (      ClassCastException ex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
      }
    }
  }
  if (bAnyStacked || ax.isPercent()) {
    if (ax.getType().getValue() == AxisType.DATE_TIME) {
      throw new IllegalArgumentException(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""));
    }
    Object oValue;
    int iSeriesPerGroup;
    double dPercentMax=0, dPercentMin=0;
    double dAxisMin=Double.MAX_VALUE, dAxisMax=-Double.MAX_VALUE;
    ArrayList<StackGroup> alSeriesGroupsPerAxis=ssl.getStackGroups(ax);
    ArrayList<Series> alSeriesPerGroup;
    StackGroup sg;
    DataSetIterator[] dsi=new DataSetIterator[ssl.getSeriesCount(ax)];
    if (alSeriesGroupsPerAxis == null) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{ax},rtc.getULocale()));
    int iSeriesIndex, iDataSetCount=ssl.getUnitCount();
    for (int k=0; k < iDataSetCount; k++) {
      iSeriesIndex=0;
      for (int i=0; i < alSeriesGroupsPerAxis.size(); i++) {
        sg=alSeriesGroupsPerAxis.get(i);
        alSeriesPerGroup=sg.getSeries();
        iSeriesPerGroup=alSeriesPerGroup.size();
        if (iSeriesPerGroup > 0) {
          se=alSeriesPerGroup.get(0);
          ds=se.getDataSet();
          if (ds instanceof NullDataSet) {
            continue;
          }
          if (dsi[iSeriesIndex] == null) {
            dsi[iSeriesIndex]=new DataSetIterator(ds);
            dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
            if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
              throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
            }
          }
          iDataSetCount=dsi[iSeriesIndex].size();
          final AxisSubUnit au=ssl.getSubUnit(sg,k);
          for (int j=0; j < iSeriesPerGroup; j++) {
            se=alSeriesPerGroup.get(j);
            if (j > 0) {
              if (dsi[iSeriesIndex] == null) {
                ds=se.getDataSet();
                dsi[iSeriesIndex]=new DataSetIterator(ds);
                dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
                if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
                  throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
                }
              }
            }
            oValue=dsi[iSeriesIndex].next();
            if (oValue != null) {
              double dValue=((Double)oValue).doubleValue();
              au.computeTotal(dValue);
            }
            iSeriesIndex++;
          }
          if (ax.isPercent()) {
            double dAbsTotal=au.getPositiveTotal() - au.getNegativeTotal();
            if (dAbsTotal != 0d) {
              dPercentMax=Math.max((au.getTotalMax() / dAbsTotal) * 100d,dPercentMax);
              dPercentMin=Math.min((au.getTotalMin() / dAbsTotal) * 100d,dPercentMin);
            }
          }
 else {
            dAxisMax=Math.max(au.getTotalMax(),dAxisMax);
            dAxisMin=Math.min(au.getTotalMin(),dAxisMin);
          }
        }
      }
    }
    if (ax.isPercent()) {
      if (dPercentMax > 100)       dPercentMax=100;
      if (dPercentMin < -100)       dPercentMin=-100;
      if (dPercentMax == 0 && dPercentMin == 0) {
        dPercentMax=100;
      }
      dAxisMin=dPercentMin;
      dAxisMax=dPercentMax;
    }
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      dAxisMin=1;
    }
    if (dAxisMin != Double.MAX_VALUE) {
      oMin=new Double(dAxisMin);
    }
    if (dAxisMax != -Double.MAX_VALUE) {
      oMax=new Double(dAxisMax);
    }
  }
  if (oMin == null && oMax == null) {
    if (iType == DATE_TIME) {
      int year=Calendar.getInstance().get(Calendar.YEAR);
      oMin=new CDateTime(year,1,1);
      oMax=new CDateTime(year,12,31);
    }
 else     if ((iType & NUMERICAL) == NUMERICAL) {
      if ((iType & PERCENT) == PERCENT) {
        oMin=new Double(0);
        oMax=new Double(100);
      }
 else       if ((iType & LOGARITHMIC) == LOGARITHMIC) {
        oMin=new Double(1);
        oMax=new Double(1000);
      }
 else {
        oMin=new Double(-1);
        oMax=new Double(1);
      }
    }
  }
  if (iType == DATE_TIME) {
    try {
      CDateTime dtMin=asDateTime(oMin);
      CDateTime dtMax=asDateTime(oMax);
      return new Calendar[]{dtMin,dtMax};
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    try {
      double dMin=asDouble(oMin).doubleValue();
      double dMax=asDouble(oMax).doubleValue();
      if (dMin == dMax) {
        if (dMin > 0) {
          dMin=0;
        }
        if (dMax < 0) {
          dMax=0;
        }
      }
      return new double[]{dMin,dMax};
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
  return null;
}","@Override protected final Object getMinMax(Axis ax,int iType) throws ChartException, IllegalArgumentException {
  if (ax.getType().getValue() == AxisType.LINEAR && ax.isAligned() && azHelper != null) {
    double[] minmax=azHelper.getCachedMinMax(ax);
    if (minmax != null) {
      return minmax;
    }
  }
  final Series[] sea=ax.getRuntimeSeries();
  final int iSeriesCount=sea.length;
  Series se;
  DataSet ds;
  Object oV1, oV2, oMin=null, oMax=null;
  PluginSettings ps=PluginSettings.instance();
  IDataSetProcessor iDSP=null;
  boolean bAnyStacked=false;
  for (int i=0; i < iSeriesCount; i++) {
    if (sea[i].isStacked()) {
      if (sea[i].canBeStacked()) {
        bAnyStacked=true;
        continue;
      }
 else {
        throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sea[i]}));
      }
    }
    iDSP=ps.getDataSetProcessor(sea[i].getClass());
    ds=sea[i].getDataSet();
    oV1=iDSP.getMinimum(ds);
    oV2=iDSP.getMaximum(ds);
    if ((iType & NUMERICAL) == NUMERICAL) {
      try {
        if (oV1 != null) {
          if (oMin == null) {
            oMin=oV1;
          }
 else {
            final double dV1=asDouble(oV1).doubleValue();
            if (Math.min(asDouble(oMin).doubleValue(),dV1) == dV1) {
              oMin=oV1;
            }
          }
        }
        if (oV2 != null) {
          if (oMax == null) {
            oMax=oV2;
          }
 else {
            final double dV2=asDouble(oV2).doubleValue();
            if (Math.max(asDouble(oMax).doubleValue(),dV2) == dV2) {
              oMax=oV2;
            }
          }
        }
      }
 catch (      ClassCastException ex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
      }
    }
 else     if ((iType & DATE_TIME) == DATE_TIME) {
      try {
        if (oV1 != null) {
          if (oMin == null) {
            oMin=oV1;
          }
 else {
            final CDateTime cdtV1=asDateTime(oV1);
            final CDateTime cdtMin=asDateTime(oMin);
            if (cdtV1.before(cdtMin)) {
              oMin=cdtV1;
            }
          }
        }
        if (oV2 != null) {
          if (oMax == null) {
            oMax=oV2;
          }
 else {
            final CDateTime cdtV2=asDateTime(oV2);
            final CDateTime cdtMax=asDateTime(oMax);
            if (cdtV2.after(cdtMax)) {
              oMax=cdtV2;
            }
          }
        }
      }
 catch (      ClassCastException ex) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
      }
    }
  }
  if (bAnyStacked || ax.isPercent()) {
    if (ax.getType().getValue() == AxisType.DATE_TIME) {
      throw new IllegalArgumentException(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""));
    }
    Object oValue;
    int iSeriesPerGroup;
    double dPercentMax=0, dPercentMin=0;
    double dAxisMin=Double.MAX_VALUE, dAxisMax=-Double.MAX_VALUE;
    List<StackGroup> alSeriesGroupsPerAxis=ssl.getStackGroups(ax);
    ArrayList<Series> alSeriesPerGroup;
    StackGroup sg;
    DataSetIterator[] dsi=new DataSetIterator[ssl.getSeriesCount(ax)];
    if (alSeriesGroupsPerAxis == null) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",new Object[]{ax},Messages.getResourceBundle(rtc.getULocale()));
    }
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{ax},rtc.getULocale()));
    int iSeriesIndex, iDataSetCount=ssl.getUnitCount();
    for (int k=0; k < iDataSetCount; k++) {
      iSeriesIndex=0;
      for (int i=0; i < alSeriesGroupsPerAxis.size(); i++) {
        sg=alSeriesGroupsPerAxis.get(i);
        alSeriesPerGroup=sg.getSeries();
        iSeriesPerGroup=alSeriesPerGroup.size();
        if (iSeriesPerGroup > 0) {
          se=alSeriesPerGroup.get(0);
          ds=se.getDataSet();
          if (ds instanceof NullDataSet) {
            continue;
          }
          if (dsi[iSeriesIndex] == null) {
            dsi[iSeriesIndex]=new DataSetIterator(ds);
            dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
            if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
              throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
            }
          }
          iDataSetCount=dsi[iSeriesIndex].size();
          final AxisSubUnit au=ssl.getSubUnit(sg,k);
          for (int j=0; j < iSeriesPerGroup; j++) {
            se=alSeriesPerGroup.get(j);
            if (j > 0) {
              if (dsi[iSeriesIndex] == null) {
                ds=se.getDataSet();
                dsi[iSeriesIndex]=new DataSetIterator(ds);
                dsi[iSeriesIndex].reverse(cwa.isReverseCategory());
                if ((dsi[iSeriesIndex].getDataType() & IConstants.NUMERICAL) != IConstants.NUMERICAL) {
                  throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
                }
              }
            }
            oValue=dsi[iSeriesIndex].next();
            if (oValue != null) {
              double dValue=((Double)oValue).doubleValue();
              au.computeTotal(dValue);
            }
            iSeriesIndex++;
          }
          if (ax.isPercent()) {
            double dAbsTotal=au.getPositiveTotal() - au.getNegativeTotal();
            if (dAbsTotal != 0d) {
              dPercentMax=Math.max((au.getTotalMax() / dAbsTotal) * 100d,dPercentMax);
              dPercentMin=Math.min((au.getTotalMin() / dAbsTotal) * 100d,dPercentMin);
            }
          }
 else {
            dAxisMax=Math.max(au.getTotalMax(),dAxisMax);
            dAxisMin=Math.min(au.getTotalMin(),dAxisMin);
          }
        }
      }
    }
    if (ax.isPercent()) {
      if (dPercentMax > 100)       dPercentMax=100;
      if (dPercentMin < -100)       dPercentMin=-100;
      if (dPercentMax == 0 && dPercentMin == 0) {
        dPercentMax=100;
      }
      dAxisMin=dPercentMin;
      dAxisMax=dPercentMax;
    }
    if ((iType & LOGARITHMIC) == LOGARITHMIC) {
      dAxisMin=1;
    }
    if (dAxisMin != Double.MAX_VALUE) {
      oMin=new Double(dAxisMin);
    }
    if (dAxisMax != -Double.MAX_VALUE) {
      oMax=new Double(dAxisMax);
    }
  }
  if (oMin == null && oMax == null) {
    if (iType == DATE_TIME) {
      int year=Calendar.getInstance().get(Calendar.YEAR);
      oMin=new CDateTime(year,1,1);
      oMax=new CDateTime(year,12,31);
    }
 else     if ((iType & NUMERICAL) == NUMERICAL) {
      if ((iType & PERCENT) == PERCENT) {
        oMin=new Double(0);
        oMax=new Double(100);
      }
 else       if ((iType & LOGARITHMIC) == LOGARITHMIC) {
        oMin=new Double(1);
        oMax=new Double(1000);
      }
 else {
        oMin=new Double(-1);
        oMax=new Double(1);
      }
    }
  }
  if (iType == DATE_TIME) {
    try {
      CDateTime dtMin=asDateTime(oMin);
      CDateTime dtMax=asDateTime(oMax);
      return new Calendar[]{dtMin,dtMax};
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
 else   if ((iType & NUMERICAL) == NUMERICAL) {
    try {
      double dMin=asDouble(oMin).doubleValue();
      double dMax=asDouble(oMax).doubleValue();
      if (dMin == dMax) {
        if (dMin > 0) {
          dMin=0;
        }
        if (dMax < 0) {
          dMax=0;
        }
      }
      return new double[]{dMin,dMax};
    }
 catch (    ClassCastException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
    }
  }
  return null;
}",0.9996881432046404
70951,"/** 
 * @param cwa
 * @return
 * @throws ChartException
 * @throws IllegalArgumentException
 */
static final StackedSeriesLookup create(ChartWithAxes cwa,RunTimeContext rtc) throws ChartException, IllegalArgumentException {
  if (cwa == null) {
    return null;
  }
  final StackedSeriesLookup ssl=new StackedSeriesLookup(rtc);
  final Axis axBase=cwa.getBaseAxes()[0];
  final Axis[] axaOrthogonal=cwa.getOrthogonalAxes(axBase,true);
  EList<?> el;
  List<?> alSeries;
  int iSeriesCount;
  StackGroup sg, sgSingle;
  Series se;
  boolean bStackedSet;
  SeriesDefinition sd;
  int iSharedUnitIndex, iSharedUnitCount, iDataSetCount;
  ArrayList<StackGroup> alSGCopies;
  DataSetIterator dsi=null;
  for (int i=0; i < axaOrthogonal.length; i++) {
    iSharedUnitIndex=0;
    iSharedUnitCount=0;
    sgSingle=null;
    el=axaOrthogonal[i].getSeriesDefinitions();
    alSGCopies=new ArrayList<StackGroup>(4);
    iSharedUnitCount=0;
    for (int j=0; j < el.size(); j++) {
      sd=(SeriesDefinition)el.get(j);
      alSeries=sd.getRunTimeSeries();
      iSeriesCount=alSeries.size();
      if (iSeriesCount > 1) {
        bStackedSet=false;
        sg=null;
        for (int k=0; k < iSeriesCount; k++) {
          se=(Series)alSeries.get(k);
          dsi=new DataSetIterator(se.getDataSet());
          iDataSetCount=dsi.size();
          if (ssl.iCachedUnitCount == 0) {
            ssl.iCachedUnitCount=iDataSetCount;
          }
 else           if (ssl.iCachedUnitCount != iDataSetCount) {
            throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(ssl.iCachedUnitCount),new Integer(iDataSetCount)}));
          }
          if (se.canBeStacked()) {
            if (!se.isSetStacked()) {
              throw new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{se},Messages.getResourceBundle(rtc.getULocale()));
            }
            if (se.canShareAxisUnit()) {
              if (se.isStacked()) {
                if (k > 0 && !bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                if (k == 0) {
                  sg=new StackGroup(iSharedUnitIndex++);
                  alSGCopies.add(sg);
                  iSharedUnitCount++;
                }
                bStackedSet=true;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
 else {
                if (k > 0 && bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                sg=new StackGroup(iSharedUnitIndex++);
                alSGCopies.add(sg);
                iSharedUnitCount++;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
            }
 else {
              if (se.isStacked()) {
                if (k > 0 && !bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                if (k == 0) {
                  sg=new StackGroup(-1);
                  alSGCopies.add(sg);
                }
                bStackedSet=true;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
 else {
                if (k > 0 && bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                sg=new StackGroup(-1);
                alSGCopies.add(sg);
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
            }
          }
 else           if (se.canShareAxisUnit()) {
            sg=new StackGroup(iSharedUnitIndex++);
            alSGCopies.add(sg);
            iSharedUnitCount++;
            ssl.htSeriesToStackGroup.put(se,sg);
            sg.addSeries(se);
          }
 else {
            sg=new StackGroup(-1);
            alSGCopies.add(sg);
            ssl.htSeriesToStackGroup.put(se,sg);
            sg.addSeries(se);
          }
        }
      }
 else {
        for (int k=0; k < iSeriesCount; k++) {
          se=(Series)alSeries.get(k);
          dsi=new DataSetIterator(se.getDataSet());
          iDataSetCount=dsi.size();
          if (ssl.iCachedUnitCount == 0) {
            ssl.iCachedUnitCount=iDataSetCount;
          }
 else           if (ssl.iCachedUnitCount != iDataSetCount) {
            throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(ssl.iCachedUnitCount),new Integer(iDataSetCount)}));
          }
          if (se.canBeStacked()) {
            if (se.canShareAxisUnit()) {
              if (se.isStacked()) {
                if (sgSingle == null) {
                  sgSingle=new StackGroup(iSharedUnitIndex++);
                  alSGCopies.add(sgSingle);
                  iSharedUnitCount++;
                }
                ssl.htSeriesToStackGroup.put(se,sgSingle);
                sgSingle.addSeries(se);
              }
 else {
                sg=new StackGroup(iSharedUnitIndex++);
                iSharedUnitCount++;
                alSGCopies.add(sg);
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
            }
 else {
              sg=new StackGroup(-1);
              alSGCopies.add(sg);
              ssl.htSeriesToStackGroup.put(se,sg);
              sg.addSeries(se);
            }
          }
 else {
            sg=new StackGroup(-1);
            alSGCopies.add(sg);
            ssl.htSeriesToStackGroup.put(se,sg);
            sg.addSeries(se);
          }
        }
      }
    }
    if (iSharedUnitCount < 1)     iSharedUnitCount=1;
    for (int j=0; j < alSGCopies.size(); j++) {
      sg=alSGCopies.get(j);
{
        sg.updateCount(iSharedUnitCount);
      }
    }
    ssl.htAxisToStackGroups.put(axaOrthogonal[i],alSGCopies);
  }
  return ssl;
}","/** 
 * @param cwa
 * @return
 * @throws ChartException
 * @throws IllegalArgumentException
 */
static final StackedSeriesLookup create(ChartWithAxes cwa,RunTimeContext rtc) throws ChartException, IllegalArgumentException {
  if (cwa == null) {
    return null;
  }
  final StackedSeriesLookup ssl=new StackedSeriesLookup(rtc);
  final Axis axBase=cwa.getBaseAxes()[0];
  final Axis[] axaOrthogonal=cwa.getOrthogonalAxes(axBase,true);
  int iSeriesCount;
  StackGroup sg, sgSingle;
  Series se;
  boolean bStackedSet;
  int iSharedUnitIndex, iSharedUnitCount, iDataSetCount;
  DataSetIterator dsi=null;
  for (int i=0; i < axaOrthogonal.length; i++) {
    iSharedUnitIndex=0;
    iSharedUnitCount=0;
    sgSingle=null;
    EList<SeriesDefinition> sdList=axaOrthogonal[i].getSeriesDefinitions();
    List<StackGroup> alSGCopies=new ArrayList<StackGroup>(4);
    iSharedUnitCount=0;
    for (    SeriesDefinition sd : sdList) {
      List<Series> alSeries=sd.getRunTimeSeries();
      iSeriesCount=alSeries.size();
      if (iSeriesCount > 1) {
        bStackedSet=false;
        sg=null;
        for (int k=0; k < iSeriesCount; k++) {
          se=alSeries.get(k);
          dsi=new DataSetIterator(se.getDataSet());
          iDataSetCount=dsi.size();
          if (ssl.iCachedUnitCount == 0) {
            ssl.iCachedUnitCount=iDataSetCount;
          }
 else           if (ssl.iCachedUnitCount != iDataSetCount) {
            throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(ssl.iCachedUnitCount),new Integer(iDataSetCount)}));
          }
          if (se.canBeStacked()) {
            if (!se.isSetStacked()) {
              throw new ChartException(ChartEnginePlugin.ID,ChartException.UNDEFINED_VALUE,""String_Node_Str"",new Object[]{se},Messages.getResourceBundle(rtc.getULocale()));
            }
            if (se.canShareAxisUnit()) {
              if (se.isStacked()) {
                if (k > 0 && !bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                if (k == 0) {
                  sg=new StackGroup(iSharedUnitIndex++);
                  alSGCopies.add(sg);
                  iSharedUnitCount++;
                }
                bStackedSet=true;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
 else {
                if (k > 0 && bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                if (canSideBySide(se)) {
                  sg=new StackGroup(iSharedUnitIndex++);
                  alSGCopies.add(sg);
                  iSharedUnitCount++;
                  ssl.htSeriesToStackGroup.put(se,sg);
                  sg.addSeries(se);
                }
              }
            }
 else {
              if (se.isStacked()) {
                if (k > 0 && !bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                if (k == 0) {
                  sg=new StackGroup(-1);
                  alSGCopies.add(sg);
                }
                bStackedSet=true;
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
 else {
                if (k > 0 && bStackedSet) {
                  throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{sd}));
                }
                sg=new StackGroup(-1);
                alSGCopies.add(sg);
                ssl.htSeriesToStackGroup.put(se,sg);
                sg.addSeries(se);
              }
            }
          }
 else           if (se.canShareAxisUnit()) {
            sg=new StackGroup(iSharedUnitIndex++);
            alSGCopies.add(sg);
            iSharedUnitCount++;
            ssl.htSeriesToStackGroup.put(se,sg);
            sg.addSeries(se);
          }
 else {
            sg=new StackGroup(-1);
            alSGCopies.add(sg);
            ssl.htSeriesToStackGroup.put(se,sg);
            sg.addSeries(se);
          }
        }
      }
 else {
        for (int k=0; k < iSeriesCount; k++) {
          se=alSeries.get(k);
          dsi=new DataSetIterator(se.getDataSet());
          iDataSetCount=dsi.size();
          if (ssl.iCachedUnitCount == 0) {
            ssl.iCachedUnitCount=iDataSetCount;
          }
 else           if (ssl.iCachedUnitCount != iDataSetCount) {
            throw new IllegalArgumentException(MessageFormat.format(Messages.getResourceBundle(rtc.getULocale()).getString(""String_Node_Str""),new Object[]{new Integer(ssl.iCachedUnitCount),new Integer(iDataSetCount)}));
          }
          if (se.canBeStacked()) {
            if (se.canShareAxisUnit()) {
              if (se.isStacked()) {
                if (sgSingle == null) {
                  sgSingle=new StackGroup(iSharedUnitIndex++);
                  alSGCopies.add(sgSingle);
                  iSharedUnitCount++;
                }
                ssl.htSeriesToStackGroup.put(se,sgSingle);
                sgSingle.addSeries(se);
              }
 else {
                if (canSideBySide(se)) {
                  sg=new StackGroup(iSharedUnitIndex++);
                  iSharedUnitCount++;
                  alSGCopies.add(sg);
                  ssl.htSeriesToStackGroup.put(se,sg);
                  sg.addSeries(se);
                }
              }
            }
 else {
              sg=new StackGroup(-1);
              alSGCopies.add(sg);
              ssl.htSeriesToStackGroup.put(se,sg);
              sg.addSeries(se);
            }
          }
 else {
            sg=new StackGroup(-1);
            alSGCopies.add(sg);
            ssl.htSeriesToStackGroup.put(se,sg);
            sg.addSeries(se);
          }
        }
      }
    }
    if (iSharedUnitCount < 1)     iSharedUnitCount=1;
    for (int j=0; j < alSGCopies.size(); j++) {
      sg=alSGCopies.get(j);
      sg.updateCount(iSharedUnitCount);
    }
    ssl.htAxisToStackGroups.put(axaOrthogonal[i],alSGCopies);
  }
  return ssl;
}",0.960919897443866
70952,"public final int getSeriesCount(Axis ax){
  final ArrayList<StackGroup> alSG=htAxisToStackGroups.get(ax);
  if (alSG == null || alSG.isEmpty()) {
    return 0;
  }
  int iCount=0;
  StackGroup sg;
  for (int i=0; i < alSG.size(); i++) {
    sg=alSG.get(i);
    iCount+=sg.alSeries.size();
  }
  return iCount;
}","public final int getSeriesCount(Axis ax){
  final List<StackGroup> alSG=htAxisToStackGroups.get(ax);
  if (alSG == null || alSG.isEmpty()) {
    return 0;
  }
  int iCount=0;
  StackGroup sg;
  for (int i=0; i < alSG.size(); i++) {
    sg=alSG.get(i);
    iCount+=sg.alSeries.size();
  }
  return iCount;
}",0.9918962722852512
70953,"public final ArrayList<StackGroup> getStackGroups(Axis ax){
  return htAxisToStackGroups.get(ax);
}","public final List<StackGroup> getStackGroups(Axis ax){
  return htAxisToStackGroups.get(ax);
}",0.9740932642487048
70954,"/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  if (query.getGroups() != null && query.getGroups().size() > 0)   return Strategy.Complex;
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    return Strategy.Complex;
  }
  if (query.getSorts() != null && query.getSorts().size() > 0)   return Strategy.Complex;
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null)       return Strategy.Complex;
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return Strategy.Simple;
}","/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  if (query.getGroups() != null && query.getGroups().size() > 0)   return Strategy.Complex;
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    return Strategy.Complex;
  }
  if (query.getSorts() != null && query.getSorts().size() > 0)   return Strategy.Complex;
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null)       return Strategy.Complex;
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return Strategy.Simple;
}",0.9832134292565948
70955,"public static TableInfo createTable(ITableContent table,int width){
  width=getElementWidth(table,width);
  int colcount=table.getColumnCount();
  if (colcount == 0) {
    return null;
  }
  int[] index=new int[colcount];
  int know=0;
  List unmount=new ArrayList();
  for (int i=0; i < colcount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      unmount.add(new Integer(i));
    }
 else {
      try {
        index[i]=ExcelUtil.covertDimensionType(value,width);
        know+=index[i];
      }
 catch (      IllegalArgumentException ex) {
        unmount.add(new Integer(i));
      }
    }
  }
  int left=width - know;
  if (left > 0 && unmount.size() == 0) {
    index[index.length - 1]=index[index.length - 1] + left;
    return new DefaultTableInfo(index);
  }
 else   if (left < 0) {
    return new DefaultTableInfo(split(width,colcount));
  }
 else   if (left > 0 && unmount.size() > 0) {
    int[] size=split(left,unmount.size());
    Iterator iter=unmount.iterator();
    int i=0;
    while (iter.hasNext()) {
      int pos=((Integer)iter.next()).intValue();
      index[pos]=size[i];
      i++;
    }
    return new DefaultTableInfo(index);
  }
 else {
    return new DefaultTableInfo(index);
  }
}","public static TableInfo createTable(ITableContent table,int width){
  int tableWidth=getElementWidth(table,width);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.covertDimensionType(value,tableWidth);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0) {
    for (int i=0; i < columnCount; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1)       columns[1]=0;
 else       columns[i]=resize(columns[i],totalAssigned,leftWidth);
    }
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new DefaultTableInfo(columns);
}",0.4099808061420345
70956,"private void startCell(int cellindex,int colspan,int rowspan,int styleid,HyperlinkDef hyperLink,BookmarkDef linkedBookmark){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",cellindex);
  writer.attribute(""String_Node_Str"",styleid);
  if (hyperLink != null) {
    String urlAddress=hyperLink.getUrl();
    if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      if (linkedBookmark != null)       urlAddress=""String_Node_Str"" + linkedBookmark.getValidName();
 else {
        logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      }
    }
    if (urlAddress.length() >= 255) {
      logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      urlAddress=urlAddress.substring(0,254);
    }
    writer.attribute(""String_Node_Str"",urlAddress);
    writer.attribute(""String_Node_Str"",colspan);
    writer.attribute(""String_Node_Str"",rowspan);
  }
}","private void startCell(int cellindex,int colspan,int rowspan,int styleid,HyperlinkDef hyperLink,BookmarkDef linkedBookmark){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",cellindex);
  writer.attribute(""String_Node_Str"",styleid);
  if (hyperLink != null) {
    String urlAddress=hyperLink.getUrl();
    if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      if (linkedBookmark != null)       urlAddress=""String_Node_Str"" + linkedBookmark.getValidName();
 else {
        logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      }
    }
    if (urlAddress.length() >= 255) {
      logger.log(Level.WARNING,""String_Node_Str"" + urlAddress + ""String_Node_Str"");
      urlAddress=urlAddress.substring(0,254);
    }
    writer.attribute(""String_Node_Str"",urlAddress);
  }
  writer.attribute(""String_Node_Str"",colspan);
  writer.attribute(""String_Node_Str"",rowspan);
}",0.9957035445757252
70957,"private int[] calculateColumnCoordinates(TableInfo table,int startCoordinate,int endCoordinate){
  XlsContainer currentContainer=getCurrentContainer();
  int columnCount=table.getColumnCount();
  int[] columnStartCoordinates=new int[columnCount + 1];
  if (isRightAligned(currentContainer)) {
    columnStartCoordinates[columnCount]=endCoordinate;
    for (int i=columnCount - 1; i >= 0; i--) {
      columnStartCoordinates[i]=columnStartCoordinates[i + 1] - table.getColumnWidth(i);
    }
  }
 else {
    columnStartCoordinates[0]=startCoordinate;
    for (int i=1; i <= columnCount; i++) {
      columnStartCoordinates[i]=columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1);
    }
  }
  return columnStartCoordinates;
}","private int[] calculateColumnCoordinates(TableInfo table,int startCoordinate,int endCoordinate){
  int columnCount=table.getColumnCount();
  int[] columnStartCoordinates=new int[columnCount + 1];
  columnStartCoordinates[0]=startCoordinate;
  for (int i=1; i <= columnCount; i++) {
    columnStartCoordinates[i]=columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1);
  }
  return columnStartCoordinates;
}",0.5771929824561404
70958,"public boolean next() throws BirtException {
  checkStarted();
  if (this.columnValueMap == null)   return false;
  if (lastRowIndex < currRowIndex) {
    currRowIndex++;
    readCurrentRow();
  }
 else {
    lastRowIndex=currRowIndex - 1;
  }
  return this.columnValueMap != null && this.columnValueMap.size() > 0;
}","public boolean next() throws BirtException {
  if (!existCachedFile) {
    return false;
  }
  checkStarted();
  if (this.columnValueMap == null)   return false;
  if (lastRowIndex < currRowIndex) {
    currRowIndex++;
    readCurrentRow();
  }
 else {
    lastRowIndex=currRowIndex - 1;
  }
  return this.columnValueMap != null && this.columnValueMap.size() > 0;
}",0.9296187683284456
70959,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(String tempDir,IQueryResults queryResults) throws DataException {
  Object[] params={tempDir,queryResults.getID()};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  this.lastRowIndex=this.currRowIndex - 1;
  this.queryResults=queryResults;
  try {
    createCacheInputStream(tempDir);
    resultClass=new ResultClass(this.metaInputStream);
    rowCount=IOUtil.readInt(rowInputStream);
    if (rowCount == -1)     rowCount=Integer.MAX_VALUE;
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    throw new DataException(ResourceConstants.OPEN_CACHE_TEMPFILE_ERROR);
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(String tempDir,IQueryResults queryResults) throws DataException {
  Object[] params={tempDir,queryResults.getID()};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  this.lastRowIndex=this.currRowIndex - 1;
  this.queryResults=queryResults;
  try {
    createCacheInputStream(tempDir);
    resultClass=new ResultClass(this.metaInputStream);
    rowCount=IOUtil.readInt(rowInputStream);
    if (rowCount == -1)     rowCount=Integer.MAX_VALUE;
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    existCachedFile=false;
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}",0.8981198076082204
70960,"public Object getValue(String name) throws BirtException {
  if (isBeforeFirst()) {
    this.next();
    this.lastRowIndex=this.currRowIndex;
  }
  return columnValueMap.get(name);
}","public Object getValue(String name) throws BirtException {
  if (!existCachedFile) {
    return null;
  }
  if (isBeforeFirst()) {
    this.next();
    this.lastRowIndex=this.currRowIndex;
  }
  return columnValueMap.get(name);
}",0.8856447688564477
70961,"public ConcreteImageLayout(LayoutEngineContext context,ContainerLayout parentContext,IContent content,Image imageObject){
  super(context,parentContext,content);
  this.imageObject=imageObject;
  ImageItemDesign imageDesign=(ImageItemDesign)content.getGenerateBy();
  if (null != imageDesign) {
    fitToContainer=imageDesign.isFitToContainer();
  }
}","public ConcreteImageLayout(LayoutEngineContext context,ContainerLayout parentContext,IContent content,Image imageObject){
  super(context,parentContext,content);
  this.imageObject=imageObject;
  Object reportItemDesign=content.getGenerateBy();
  if (null != reportItemDesign) {
    if (reportItemDesign instanceof ImageItemDesign) {
      fitToContainer=((ImageItemDesign)reportItemDesign).isFitToContainer();
    }
  }
}",0.7684346701164295
70962,"public ConcreteImageLayout(LayoutEngineContext context,ContainerLayout parentContext,IContent content,Image imageObject){
  super(context,parentContext,content);
  this.imageObject=imageObject;
  fitToContainer=((ImageItemDesign)content.getGenerateBy()).isFitToContainer();
}","public ConcreteImageLayout(LayoutEngineContext context,ContainerLayout parentContext,IContent content,Image imageObject){
  super(context,parentContext,content);
  this.imageObject=imageObject;
  ImageItemDesign imageDesign=(ImageItemDesign)content.getGenerateBy();
  if (null != imageDesign) {
    fitToContainer=imageDesign.isFitToContainer();
  }
}",0.8274760383386581
70963,"private String getFilePath(URL url){
  String path=url.getFile().replace('/','\\');
  try {
    return URLDecoder.decode(path,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    return path;
  }
}","private String getFilePath(URL url){
  String path=url.getFile();
  try {
    return URLDecoder.decode(path,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    return path;
  }
}",0.9567307692307692
70964,"public Object[] getFieldValues(){
  ArrayList fields=new ArrayList();
  fields.add(new Integer(startIndex));
  fields.add(new Integer(endIndex));
  if (sortKeys != null) {
    fields.add(new Integer(sortKeys.length));
    for (int i=0; i < sortKeys.length; i++)     fields.add(sortKeys[i]);
  }
 else {
    fields.add(null);
  }
  if (sortDirections != null) {
    fields.add(new Integer(sortDirections.length));
    for (int i=0; i < sortDirections.length; i++)     fields.add(new Boolean(sortDirections[i]));
  }
 else {
    fields.add(null);
  }
  if (this.comparator != null) {
    fields.add(new Integer(comparator.length));
    for (int i=0; i < comparator.length; i++)     fields.add(new Integer(comparator[i].getStrength()));
  }
 else {
    fields.add(null);
  }
  fields.add(new Boolean(accept));
  return fields.toArray();
}","public Object[] getFieldValues(){
  ArrayList fields=new ArrayList();
  fields.add(new Integer(startIndex));
  fields.add(new Integer(endIndex));
  if (sortKeys != null) {
    fields.add(new Integer(sortKeys.length));
    for (int i=0; i < sortKeys.length; i++)     fields.add(sortKeys[i]);
  }
 else {
    fields.add(null);
  }
  if (sortDirections != null) {
    fields.add(new Integer(sortDirections.length));
    for (int i=0; i < sortDirections.length; i++)     fields.add(new Boolean(sortDirections[i]));
  }
 else {
    fields.add(null);
  }
  if (this.comparator != null) {
    fields.add(new Integer(comparator.length));
    for (int i=0; i < comparator.length; i++)     fields.add(comparator[i] == null ? ISortDefinition.ASCII_SORT_STRENGTH : new Integer(comparator[i].getStrength()));
  }
 else {
    fields.add(null);
  }
  fields.add(new Boolean(accept));
  return fields.toArray();
}",0.945727482678984
70965,"static Loader createLoader(URL url){
  String file=url.getFile();
  if (file != null && file.endsWith(""String_Node_Str"")) {
    if (""String_Node_Str"".equals(url.getProtocol())) {
      return new FileLoader(url);
    }
    return new UrlLoader(url);
  }
  return new JarLoader(url);
}","static Loader createLoader(URL url){
  try {
    String file=url.getFile();
    if (file != null && file.endsWith(""String_Node_Str"")) {
      if (""String_Node_Str"".equals(url.getProtocol())) {
        return new FileLoader(url);
      }
      return new UrlLoader(url);
    }
    return new JarLoader(url);
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"" + url,ex);
    return null;
  }
}",0.8091168091168092
70966,"JarLoader(URL url){
  baseUrl=url;
}","JarLoader(URL url) throws IOException {
  baseUrl=url;
  jarUrl=new URL(""String_Node_Str"",""String_Node_Str"",-1,baseUrl + ""String_Node_Str"");
  if (baseUrl.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    String filePath=getFilePath(baseUrl);
    jarFile=new JarFile(filePath);
  }
 else {
    JarURLConnection jarConn=(JarURLConnection)jarUrl.openConnection();
    jarFile=jarConn.getJarFile();
  }
}",0.1621621621621621
70967,"public URLClassLoader(URL[] urls,ClassLoader parent){
  super(new URL[]{},parent);
  initURLs(urls);
  loaders=new ArrayList<Loader>(urls.length);
  for (int i=0; i < urls.length; i++) {
    Loader loader=createLoader(urls[i]);
    loaders.add(loader);
  }
}","public URLClassLoader(URL[] urls,ClassLoader parent){
  super(new URL[]{},parent);
  initURLs(urls);
  loaders=new ArrayList<Loader>(urls.length);
  for (int i=0; i < urls.length; i++) {
    Loader loader=createLoader(urls[i]);
    if (loader != null) {
      loaders.add(loader);
    }
  }
}",0.9272727272727272
70968,"public void addURL(URL url){
  if (this.urls.contains(url))   return;
  this.urls.add(url);
  this.loaders.add(createLoader(url));
}","public void addURL(URL url){
  if (url == null || this.urls.contains(url))   return;
  this.urls.add(url);
  Loader loader=createLoader(url);
  if (loader != null) {
    loaders.add(loader);
  }
}",0.7378048780487805
70969,"private void doStartup(PlatformConfig config) throws BirtException {
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  platformConfig=config;
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new FrameworkException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new FrameworkException(""String_Node_Str"",new Object[]{root});
  }
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new FrameworkException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  try {
    osgiFramework=new File(path).toURL();
  }
 catch (  MalformedURLException ex) {
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new ChildFirstURLClassLoader(new URL[]{osgiFramework},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    setupOSGiProperties();
    setupSecurityPolicy();
    Method initPropertiesMethod=clazz.getMethod(""String_Node_Str"",new Class[]{Map.class});
    if (initPropertiesMethod != null) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      initPropertiesMethod.invoke(null,new Object[]{properties});
    }
 else {
      Iterator iter=properties.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String key=(String)entry.getKey();
        String value=(String)entry.getValue();
        System.setProperty(key,value);
      }
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{new String[]{},null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  BirtException be) {
    throw be;
  }
catch (  Exception e) {
    throw new FrameworkException(""String_Node_Str"",new Object[]{e.getMessage()},e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}","private void doStartup(PlatformConfig config) throws BirtException {
  if (frameworkClassLoader != null) {
    logger.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  platformConfig=config;
  IPlatformContext context=config.getPlatformContext();
  if (context == null) {
    throw new FrameworkException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  String root=context.getPlatform();
  platformDirectory=new File(root);
  if (!platformDirectory.exists() || !platformDirectory.isDirectory()) {
    throw new FrameworkException(""String_Node_Str"",new Object[]{root});
  }
  String path=new File(platformDirectory,""String_Node_Str"").toString();
  path=searchFor(""String_Node_Str"",path);
  if (path == null) {
    throw new FrameworkException(""String_Node_Str"",new Object[]{""String_Node_Str""});
  }
  try {
    osgiFramework=new File(path).toURI().toURL();
  }
 catch (  MalformedURLException ex) {
  }
  ClassLoader original=Thread.currentThread().getContextClassLoader();
  try {
    ClassLoader loader=this.getClass().getClassLoader();
    frameworkClassLoader=new ChildFirstURLClassLoader(new URL[]{osgiFramework},loader);
    try {
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
      loader.loadClass(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
    Class clazz=frameworkClassLoader.loadClass(ECLIPSE_STARTER);
    setupOSGiProperties();
    setupSecurityPolicy();
    Method initPropertiesMethod=clazz.getMethod(""String_Node_Str"",new Class[]{Map.class});
    if (initPropertiesMethod != null) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      initPropertiesMethod.invoke(null,new Object[]{properties});
    }
 else {
      Iterator iter=properties.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry entry=(Map.Entry)iter.next();
        String key=(String)entry.getKey();
        String value=(String)entry.getValue();
        System.setProperty(key,value);
      }
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
    Method runMethod=clazz.getMethod(""String_Node_Str"",new Class[]{String[].class,Runnable.class});
    bundleContext=runMethod.invoke(null,new Object[]{new String[]{},null});
    frameworkContextClassLoader=Thread.currentThread().getContextClassLoader();
  }
 catch (  BirtException be) {
    throw be;
  }
catch (  Exception e) {
    throw new FrameworkException(""String_Node_Str"",new Object[]{e.getMessage()},e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(original);
  }
}",0.998463901689708
70970,"/** 
 * Clear the specified module handle
 * @param handle The module handle
 */
public void clear(ModuleHandle handle){
  mediatorMap.remove(handle);
  if (handle == getReportDesignHandle()) {
    setReportDesignHandle(null);
  }
}","/** 
 * Clear the specified module handle
 * @param handle The module handle
 */
public void clear(ModuleHandle handle){
  mediatorMap.remove(handle);
  if (handle == getReportDesignHandle()) {
    setReportDesignHandle(null);
    getSessionHandle().setResourceFolder(null);
  }
}",0.90625
70971,"protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  writer.drawText(text,textX,textY,width + 1f,height,textStyle.getFontInfo(),textStyle.getColor(),textStyle.isRtl(),link);
}","protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  writer.drawText(text,textX,textY,width,height,textStyle.getFontInfo(),textStyle.getColor(),textStyle.isRtl(),link);
}",0.9897330595482546
70972,"protected void setupPageBreak(PolicyNode node){
  ReportItemDesign item=node.design;
  IStyle style=item.getStyle();
  if (style != null) {
    CSSValue masterPage=style.getProperty(IStyle.STYLE_MASTER_PAGE);
    CSSValue pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    CSSValue pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    if (masterPage != null || (pageBreakBefore != null) && !pageBreakBefore.equals(IStyle.AUTO_VALUE)) {
      node.breakBefore=true;
      node.execute=true;
    }
    if (pageBreakAfter != null && !pageBreakAfter.equals(IStyle.AUTO_VALUE)) {
      node.breakAfter=true;
      node.execute=true;
    }
  }
  if (item.getJavaClass() != null || item.getOnCreate() != null || item.getOnPageBreak() != null) {
    node.breakBefore=true;
    node.breakAfter=true;
    node.execute=true;
  }
  if (node.breakBefore || node.breakAfter) {
    Iterator iter=rows.iterator();
    while (iter.hasNext()) {
      PolicyNode row=(PolicyNode)iter.next();
      row.executeAll=true;
    }
    return;
  }
  if (item.getHighlight() != null || item.getMap() != null) {
    node.execute=true;
  }
  if (item.getTOC() != null || item.getBookmark() != null || item.getAction() != null) {
    node.execute=true;
  }
  if (item.getQueries() != null) {
    node.execute=true;
  }
  if (item.getVisibility() != null) {
    node.execute=true;
  }
}","protected void setupPageBreak(PolicyNode node){
  ReportItemDesign item=node.design;
  IStyle style=item.getStyle();
  if (style != null) {
    CSSValue masterPage=style.getProperty(IStyle.STYLE_MASTER_PAGE);
    CSSValue pageBreakBefore=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
    CSSValue pageBreakAfter=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
    if (masterPage != null || (pageBreakBefore != null) && !pageBreakBefore.equals(IStyle.AUTO_VALUE)) {
      node.breakBefore=true;
      node.execute=true;
    }
    if (pageBreakAfter != null && !pageBreakAfter.equals(IStyle.AUTO_VALUE)) {
      node.breakAfter=true;
      node.execute=true;
    }
  }
  if (item.getJavaClass() != null || item.getOnCreate() != null || item.getOnPageBreak() != null) {
    node.breakBefore=true;
    node.breakAfter=true;
    node.execute=true;
    if (item instanceof TableItemDesign) {
      node.executeAll=true;
    }
  }
  if (node.breakBefore || node.breakAfter) {
    Iterator iter=rows.iterator();
    while (iter.hasNext()) {
      PolicyNode row=(PolicyNode)iter.next();
      row.executeAll=true;
    }
    return;
  }
  if (item.getHighlight() != null || item.getMap() != null) {
    node.execute=true;
  }
  if (item.getTOC() != null || item.getBookmark() != null || item.getAction() != null) {
    node.execute=true;
  }
  if (item.getQueries() != null) {
    node.execute=true;
  }
  if (item.getVisibility() != null) {
    node.execute=true;
  }
}",0.9730675061210212
70973,"/** 
 * Returns appropriate expressions if current has aggregations defined in chart.
 * @param helper
 * @param isSharingQuery
 * @return expressions list
 */
public List<String> getExpressions(GroupingLookupHelper helper,boolean isSharingQuery){
  if (isSharingQuery) {
    return helper.getExpressions();
  }
  return helper.getExpressionsForAggregate();
}","/** 
 * Returns appropriate expressions if current has aggregations defined in chart.
 * @param helper
 * @param isSharingQuery
 * @return expressions list
 */
public List<String> getExpressions(GroupingLookupHelper helper,boolean isSharingQuery){
  return helper.getExpressions();
}",0.881619937694704
70974,"/** 
 * Uses IDataRowExpressionEvaluator to create a ResultSetWrapper
 * @return A wrapper of the chart resultset
 * @throws ChartException
 */
protected ResultSetWrapper mapToChartResultSet(IDataRowExpressionEvaluator idre,Chart cm) throws ChartException {
  ResultSetWrapper rsw=null;
  GroupingLookupHelper lhmLookup=new GroupingLookupHelper(cm,iae,rtc.getULocale());
  List liResultSet=null;
  List co=null;
  if (idre instanceof AbstractGroupedDataRowExpressionEvaluator) {
    co=((AbstractGroupedDataRowExpressionEvaluator)idre).getExpressions(lhmLookup,rtc.isSharingQuery());
  }
 else {
    co=lhmLookup.getExpressions();
  }
  try {
    liResultSet=evaluateRowSet(idre,co.toArray());
  }
 catch (  Exception e) {
    if (e instanceof ChartException) {
      throw (ChartException)e;
    }
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
  }
  final GroupKey[] orthogonalGroupKeys=findGroupKeys(cm,lhmLookup);
  if (idre instanceof IGroupedDataRowExpressionEvaluator && ((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0) != null) {
    int[] groupBreaks=new int[]{};
    if (orthogonalGroupKeys != null && orthogonalGroupKeys.length > 0) {
      groupBreaks=((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0);
    }
    formatBaseSeriesData(cm,lhmLookup,liResultSet);
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys,groupBreaks);
  }
 else {
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys);
    SeriesDefinition sdBase=null;
    SeriesDefinition sdValue=null;
    boolean bBaseGrouping=false;
    AggregationExpressionHelper aggHelper=new AggregationExpressionHelper();
    if (cm instanceof ChartWithAxes) {
      ChartWithAxes cwa=(ChartWithAxes)cm;
      Axis[] axaBase=cwa.getBaseAxes();
      Axis[] axaOrthogonal=null;
      for (int j=0; j < axaBase.length; j++) {
        sdBase=(SeriesDefinition)axaBase[j].getSeriesDefinitions().get(0);
        axaOrthogonal=cwa.getOrthogonalAxes(axaBase[j],true);
        bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
        for (int i=0; i < axaOrthogonal.length; i++) {
          aggHelper.addSeriesDefinitions(axaOrthogonal[i].getSeriesDefinitions(),lhmLookup);
        }
      }
      sdValue=(SeriesDefinition)cwa.getOrthogonalAxes(axaBase[0],true)[0].getSeriesDefinitions().get(0);
    }
 else     if (cm instanceof ChartWithoutAxes) {
      ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
      sdBase=(SeriesDefinition)cwoa.getSeriesDefinitions().get(0);
      bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
      aggHelper.addSeriesDefinitions(sdBase.getSeriesDefinitions(),lhmLookup);
      sdValue=(SeriesDefinition)sdBase.getSeriesDefinitions().get(0);
    }
    if (bBaseGrouping && aggHelper.getDataDefinitionsForBaseGrouping().size() > 0) {
      aggHelper.addAggregation(sdBase.getGrouping().getAggregateExpression(),aggHelper.getDataDefinitionsForBaseGrouping());
    }
    String[] aggregationExp=aggHelper.getAggregations();
    String[] saExpressionKeys=aggHelper.getDataDefinitions();
    if (idre instanceof IGroupedDataRowExpressionEvaluator) {
      if (((IGroupedDataRowExpressionEvaluator)idre).needOptionalGrouping()) {
        rsw.applyValueSeriesGroupingNSorting(sdValue,aggregationExp,saExpressionKeys);
      }
      if (((IGroupedDataRowExpressionEvaluator)idre).needCategoryGrouping()) {
        rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggregationExp,saExpressionKeys);
      }
    }
 else {
      rsw.applyValueSeriesGroupingNSorting(sdValue,aggregationExp,saExpressionKeys);
      rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggregationExp,saExpressionKeys);
    }
    aggHelper.dispose();
  }
  return rsw;
}","/** 
 * Uses IDataRowExpressionEvaluator to create a ResultSetWrapper
 * @return A wrapper of the chart resultset
 * @throws ChartException
 */
protected ResultSetWrapper mapToChartResultSet(IDataRowExpressionEvaluator idre,Chart cm) throws ChartException {
  ResultSetWrapper rsw=null;
  GroupingLookupHelper lhmLookup=new GroupingLookupHelper(cm,iae,rtc,idre);
  List liResultSet=null;
  List<String> co=null;
  co=lhmLookup.getExpressions();
  try {
    liResultSet=evaluateRowSet(idre,co.toArray());
  }
 catch (  Exception e) {
    if (e instanceof ChartException) {
      throw (ChartException)e;
    }
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
  }
  final GroupKey[] orthogonalGroupKeys=findGroupKeys(cm,lhmLookup);
  if (idre instanceof IGroupedDataRowExpressionEvaluator && ((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0) != null) {
    int[] groupBreaks=new int[]{};
    if (orthogonalGroupKeys != null && orthogonalGroupKeys.length > 0) {
      groupBreaks=((IGroupedDataRowExpressionEvaluator)idre).getGroupBreaks(0);
    }
    formatBaseSeriesData(cm,lhmLookup,liResultSet);
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys,groupBreaks);
  }
 else {
    rsw=new ResultSetWrapper(lhmLookup,liResultSet,orthogonalGroupKeys);
    SeriesDefinition sdBase=null;
    SeriesDefinition sdValue=null;
    boolean bBaseGrouping=false;
    AggregationExpressionHelper aggHelper=new AggregationExpressionHelper();
    if (cm instanceof ChartWithAxes) {
      ChartWithAxes cwa=(ChartWithAxes)cm;
      Axis[] axaBase=cwa.getBaseAxes();
      Axis[] axaOrthogonal=null;
      for (int j=0; j < axaBase.length; j++) {
        sdBase=axaBase[j].getSeriesDefinitions().get(0);
        axaOrthogonal=cwa.getOrthogonalAxes(axaBase[j],true);
        bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
        for (int i=0; i < axaOrthogonal.length; i++) {
          aggHelper.addSeriesDefinitions(axaOrthogonal[i].getSeriesDefinitions(),lhmLookup);
        }
      }
      sdValue=cwa.getOrthogonalAxes(axaBase[0],true)[0].getSeriesDefinitions().get(0);
    }
 else     if (cm instanceof ChartWithoutAxes) {
      ChartWithoutAxes cwoa=(ChartWithoutAxes)cm;
      sdBase=cwoa.getSeriesDefinitions().get(0);
      bBaseGrouping=rsw.getRowCount() > 0 && sdBase.getGrouping() != null && sdBase.getGrouping().isEnabled();
      aggHelper.addSeriesDefinitions(sdBase.getSeriesDefinitions(),lhmLookup);
      sdValue=sdBase.getSeriesDefinitions().get(0);
    }
    if (bBaseGrouping && aggHelper.getDataDefinitionsForBaseGrouping().size() > 0) {
      aggHelper.addAggregation(sdBase.getGrouping().getAggregateExpression(),aggHelper.getDataDefinitionsForBaseGrouping());
    }
    String[] aggregationExp=aggHelper.getAggregations();
    String[] saExpressionKeys=aggHelper.getDataDefinitions();
    if (idre instanceof IGroupedDataRowExpressionEvaluator) {
      if (((IGroupedDataRowExpressionEvaluator)idre).needOptionalGrouping()) {
        rsw.applyValueSeriesGroupingNSorting(sdValue,aggregationExp,saExpressionKeys);
      }
      if (((IGroupedDataRowExpressionEvaluator)idre).needCategoryGrouping()) {
        rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggregationExp,saExpressionKeys);
      }
    }
 else {
      rsw.applyValueSeriesGroupingNSorting(sdValue,aggregationExp,saExpressionKeys);
      rsw.applyBaseSeriesSortingAndGrouping(sdBase,aggregationExp,saExpressionKeys);
    }
    aggHelper.dispose();
  }
  return rsw;
}",0.9465545306565384
70975,"/** 
 * To compute the text of the label with a limited size, the label text will be wrapped and shortened with ellipsis if required, the size of the label bound will be returned.
 * @param xs
 * @param la
 * @param maxSize
 * @param lbLimit
 * @return
 * @throws ChartException
 */
public static final LabelLimiter limitLabelSize(IDisplayServer xs,Label la,LabelLimiter lbLimit) throws ChartException {
  double maxWidth, maxHeight, wrapping;
  if (lbLimit != null) {
    EllipsisHelper eHelper=EllipsisHelper.simpleInstance(xs,la,null);
    eHelper.checkLabelEllipsis(la.getCaption().getValue(),lbLimit);
    maxWidth=eHelper.getTester().getWidth();
    maxHeight=eHelper.getTester().getHeight();
    wrapping=lbLimit.getWrapping();
  }
 else {
    BoundingBox bb=Methods.computeLabelSize(xs,la,0,null);
    maxWidth=bb.getWidth();
    maxHeight=bb.getHeight();
    wrapping=0;
  }
  return new LabelLimiter(maxWidth,maxHeight,wrapping);
}","/** 
 * To compute the text of the label with a limited size, the label text will be wrapped and shortened with ellipsis if required, the size of the label bound will be returned.
 * @param xs
 * @param la
 * @param maxSize
 * @param lbLimit
 * @param options
 * @return
 * @throws ChartException
 */
public static final LabelLimiter limitLabelSize(IDisplayServer xs,Label la,LabelLimiter lbLimit,EnumSet<Option> options) throws ChartException {
  double maxWidth, maxHeight, wrapping;
  boolean bSuccessed=true;
  if (lbLimit != null) {
    EllipsisHelper eHelper=EllipsisHelper.simpleInstance(xs,la,null);
    if (eHelper.checkLabelEllipsis(la.getCaption().getValue(),lbLimit)) {
      maxWidth=eHelper.getTester().getWidth();
      maxHeight=eHelper.getTester().getHeight();
    }
 else {
      la.getCaption().setValue(""String_Node_Str"");
      maxWidth=0;
      maxHeight=0;
      bSuccessed=false;
    }
    wrapping=lbLimit.getWrapping();
  }
 else {
    BoundingBox bb=Methods.computeLabelSize(xs,la,0,null);
    maxWidth=bb.getWidth();
    maxHeight=bb.getHeight();
    wrapping=0;
  }
  if (options.contains(Option.FIX_WIDTH)) {
    maxWidth=lbLimit.maxWidth;
  }
  if (options.contains(Option.FIX_HEIGHT)) {
    maxHeight=lbLimit.maxHeight;
  }
  return new LabelLimiter(maxWidth,maxHeight,wrapping,bSuccessed);
}",0.8291390728476821
70976,"/** 
 * Compute the wrapping with maxWidth, maxHeight. If the wrapping is set to 0, namely auto, this method should be called before calling limitLabelSize.
 * @param xs
 * @param la
 * @param lbLimit
 * @return
 */
public static final double computeWrapping(IDisplayServer xs,Label la,LabelLimiter lbLimit){
  double dWrapping=0;
  final double dSafe=10;
  if (lbLimit != null) {
    double dScale=xs.getDpiResolution() / 72d;
    double fRotation=la.getCaption().getFont().getRotation();
    Insets insets=la.getInsets().scaledInstance(dScale);
    double dInsetsWidth=insets.getLeft() + insets.getRight();
    double dInsetsHeight=insets.getTop() + insets.getBottom();
    if (ChartUtil.mathEqual(fRotation,0)) {
      dWrapping=Math.floor(lbLimit.maxWidth - dInsetsWidth) - dSafe;
    }
 else     if (ChartUtil.mathEqual(fRotation,90)) {
      dWrapping=Math.floor(lbLimit.maxHeight - dInsetsHeight) - dSafe;
    }
 else {
      fRotation%=180;
      if (fRotation < 0) {
        fRotation+=180;
      }
      double rad=Math.toRadians(fRotation % 90);
      double tg=Math.tan(rad);
      double m=1 - tg * tg;
      double r=2 * tg / (1 + tg * tg);
      double wd1=lbLimit.maxWidth;
      double ht1=lbLimit.maxHeight;
      double b, d;
      double wd2;
      if (wd1 < ht1) {
        if (((tg < 1) && (r < wd1 / ht1)) || ((tg > 1) && (r < wd1 / ht1))) {
          b=(wd1 - ht1 * tg) / m;
          d=(ht1 - wd1 * tg) / m;
        }
 else {
          b=wd1 / 2;
          d=b / tg;
        }
      }
 else {
        if (((tg < 1) && (r < ht1 / wd1)) || ((tg > 1) && (r < ht1 / wd1))) {
          b=(wd1 - ht1 * tg) / m;
          d=(ht1 - wd1 * tg) / m;
        }
 else {
          d=ht1 / 2;
          b=d / tg;
        }
      }
      double cos=Math.cos(rad);
      if (fRotation < 90) {
        wd2=b / cos;
      }
 else {
        wd2=d / cos;
      }
      dWrapping=Math.floor(wd2) - dInsetsWidth - dSafe;
    }
    lbLimit.wrapping=dWrapping;
  }
  return dWrapping;
}","/** 
 * Compute the wrapping with maxWidth, maxHeight. If the wrapping is set to 0, namely auto, this method should be called before calling limitLabelSize.
 * @param xs
 * @param la
 * @param lbLimit
 * @return
 */
public static final double computeWrapping(IDisplayServer xs,Label la,LabelLimiter lbLimit){
  double dWrapping=0;
  boolean bIsSWT=xs.getClass().getName().equals(""String_Node_Str"");
  final double dSafe=bIsSWT ? 10 : 0;
  if (lbLimit != null) {
    double dScale=xs.getDpiResolution() / 72d;
    double fRotation=la.getCaption().getFont().getRotation();
    Insets insets=la.getInsets().scaledInstance(dScale);
    double dInsetsWidth=insets.getLeft() + insets.getRight();
    if (ChartUtil.mathEqual(fRotation,0)) {
      dWrapping=Math.floor(lbLimit.maxWidth - dInsetsWidth) - dSafe;
    }
 else     if (ChartUtil.mathEqual(fRotation,90)) {
      dWrapping=Math.floor(lbLimit.maxHeight - dInsetsWidth) - dSafe;
    }
 else {
      fRotation%=180;
      if (fRotation < 0) {
        fRotation+=180;
      }
      double rad=Math.toRadians(fRotation % 90);
      double tg=Math.tan(rad);
      double m=1 - tg * tg;
      double r=2 * tg / (1 + tg * tg);
      double wd1=lbLimit.maxWidth;
      double ht1=lbLimit.maxHeight;
      double b, d;
      double wd2;
      if (wd1 < ht1) {
        if (((tg < 1) && (r < wd1 / ht1)) || ((tg > 1) && (r < wd1 / ht1))) {
          b=(wd1 - ht1 * tg) / m;
          d=(ht1 - wd1 * tg) / m;
        }
 else {
          b=wd1 / 2;
          d=b / tg;
        }
      }
 else {
        if (((tg < 1) && (r < ht1 / wd1)) || ((tg > 1) && (r < ht1 / wd1))) {
          b=(wd1 - ht1 * tg) / m;
          d=(ht1 - wd1 * tg) / m;
        }
 else {
          d=ht1 / 2;
          b=d / tg;
        }
      }
      double cos=Math.cos(rad);
      if (fRotation < 90) {
        wd2=b / cos;
      }
 else {
        wd2=d / cos;
      }
      dWrapping=Math.floor(wd2) - dInsetsWidth - dSafe;
    }
    lbLimit.wrapping=dWrapping;
  }
  return dWrapping;
}",0.9515926761976424
70977,"/** 
 * @param maxSize
 * @param dWrapping
 */
public LabelLimiter(double maxWidth,double maxHeight,double wrapping){
  this.maxWidth=maxWidth;
  this.maxHeight=maxHeight;
  this.wrapping=wrapping;
}","private LabelLimiter(double maxWidth,double maxHeight,double wrapping,boolean bSuccessed){
  this.maxWidth=maxWidth;
  this.maxHeight=maxHeight;
  this.wrapping=wrapping;
  this.bSuccessed=bSuccessed;
}",0.4239401496259352
70978,"/** 
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @param dStart
 * @param dEnd
 * @param bConsiderStartEndLabels
 * @param aax
 */
public final int computeTicks(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation,double dStart,double dEnd,boolean bConsiderStartLabel,boolean bConsiderEndLabel,AllAxes aax) throws ChartException {
  boolean bMaxIsNotIntegralMultipleOfStep=false;
  int nTicks=0;
  double dLength=0;
  double dTickGap=0;
  int iDirection=(iScaleDirection == AUTO) ? ((iOrientation == HORIZONTAL) ? FORWARD : BACKWARD) : iScaleDirection;
  if (bConsiderStartLabel || bConsiderEndLabel) {
    computeAxisStartEndShifts(xs,la,iOrientation,iLabelLocation,aax);
    if (!bLabelWithinAxes && bConsiderStartLabel) {
      dStart+=dStartShift * iDirection;
    }
    if (bConsiderEndLabel) {
      dEnd+=dEndShift * -iDirection;
    }
  }
  this.dStart=dStart;
  this.dEnd=dEnd;
  nTicks=getTickCount();
  dLength=Math.abs(dStart - dEnd);
  if (!bCategoryScale && (iType & NUMERICAL) == NUMERICAL && (iType & LINEAR) == LINEAR) {
    double dMax=asDouble(oMaximum).doubleValue();
    double dMin=asDouble(oMinimum).doubleValue();
    double dStep=asDouble(oStep).doubleValue();
    bMaxIsNotIntegralMultipleOfStep=!ChartUtil.mathEqual(dMax / dStep,(int)(dMax / dStep));
    if (bStepFixed && oStepNumber != null) {
      dTickGap=dLength / (oStepNumber.intValue()) * iDirection;
    }
 else {
      double dStepSize=asDouble(oStep).doubleValue();
      dTickGap=Math.min(Math.abs(dStepSize / (dMax - dMin) * dLength),dLength) * iDirection;
    }
  }
 else {
    if (isTickBetweenCategories()) {
      dTickGap=dLength / (nTicks - 1) * iDirection;
    }
 else {
      dTickGap=dLength / (nTicks - 2) * iDirection;
    }
  }
  if (nTicks > TICKS_MAX && bStepFixed && !bCategoryScale) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  AxisTickCoordinates atc=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!bCategoryScale || isTickBetweenCategories());
  setTickCordinates(null);
  setEndPoints(dStart,dEnd);
  setTickCordinates(atc);
  if (bStepFixed && oStepNumber == null && (nTicks > 2) && bMaxIsNotIntegralMultipleOfStep) {
    if (!checkFit(xs,la,iLabelLocation)) {
      nTicks--;
      AxisTickCoordinates atc1=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!bCategoryScale || isTickBetweenCategories());
      setTickCordinates(null);
      setTickCordinates(atc1);
    }
  }
  checkTickLabelsVisibility(xs,la,iLabelLocation);
  return nTicks;
}","/** 
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @param dStart
 * @param dEnd
 * @param bConsiderStartEndLabels
 * @param aax
 */
public final int computeTicks(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation,double dStart,double dEnd,boolean bConsiderStartLabel,boolean bConsiderEndLabel,AllAxes aax) throws ChartException {
  boolean bMaxIsNotIntegralMultipleOfStep=false;
  int nTicks=0;
  double dLength=0;
  double dTickGap=0;
  int iDirection=(iScaleDirection == AUTO) ? ((iOrientation == HORIZONTAL) ? FORWARD : BACKWARD) : iScaleDirection;
  if (bConsiderStartLabel || bConsiderEndLabel) {
    computeAxisStartEndShifts(xs,la,iOrientation,iLabelLocation,aax);
    if (!bLabelWithinAxes && bConsiderStartLabel) {
      double dNewStart=dStart + dStartShift * iDirection;
      if (dEnd > dStart && dNewStart > dEnd - 1) {
        dNewStart=dEnd - 1;
      }
 else       if (dEnd < dStart && dNewStart < dEnd + 1) {
        dNewStart=dEnd + 1;
      }
      dStartShift=(dNewStart - dStart) / iDirection;
      dStart=dNewStart;
    }
    if (bConsiderEndLabel) {
      double dNewEnd=dEnd + dEndShift * -iDirection;
      if (dEnd > dStart && dNewEnd < dStart + 1) {
        dNewEnd=dStart + 1;
      }
 else       if (dEnd < dStart && dNewEnd > dStart - 1) {
        dNewEnd=dStart - 1;
      }
      dEndShift=(dNewEnd - dEnd) / -iDirection;
      dEnd=dNewEnd;
    }
  }
  this.dStart=dStart;
  this.dEnd=dEnd;
  nTicks=getTickCount();
  dLength=Math.abs(dStart - dEnd);
  if (!bCategoryScale && (iType & NUMERICAL) == NUMERICAL && (iType & LINEAR) == LINEAR) {
    double dMax=asDouble(oMaximum).doubleValue();
    double dMin=asDouble(oMinimum).doubleValue();
    double dStep=asDouble(oStep).doubleValue();
    bMaxIsNotIntegralMultipleOfStep=!ChartUtil.mathEqual(dMax / dStep,(int)(dMax / dStep));
    if (bStepFixed && oStepNumber != null) {
      dTickGap=dLength / (oStepNumber.intValue()) * iDirection;
    }
 else {
      double dStepSize=asDouble(oStep).doubleValue();
      dTickGap=Math.min(Math.abs(dStepSize / (dMax - dMin) * dLength),dLength) * iDirection;
    }
  }
 else {
    if (isTickBetweenCategories()) {
      dTickGap=dLength / (nTicks - 1) * iDirection;
    }
 else {
      dTickGap=dLength / (nTicks - 2) * iDirection;
    }
  }
  if (nTicks > TICKS_MAX && bStepFixed && !bCategoryScale) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  AxisTickCoordinates atc=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!bCategoryScale || isTickBetweenCategories());
  setTickCordinates(null);
  setEndPoints(dStart,dEnd);
  setTickCordinates(atc);
  if (bStepFixed && oStepNumber == null && (nTicks > 2) && bMaxIsNotIntegralMultipleOfStep) {
    if (!checkFit(xs,la,iLabelLocation)) {
      nTicks--;
      AxisTickCoordinates atc1=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!bCategoryScale || isTickBetweenCategories());
      setTickCordinates(null);
      setTickCordinates(atc1);
    }
  }
  checkTickLabelsVisibility(xs,la,iLabelLocation);
  return nTicks;
}",0.9024943310657596
70979,"/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getSharedScale() != null) {
      dsi=rtc.getSharedScale().createDataSetIterator(iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,BoundsImpl.create(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}","/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  dSeriesThickness=cwa.getPlot().getClientArea().isVisible() ? dSeriesThickness : 0;
  bo.adjust(insCA);
  double dX=bo.getLeft();
  double dY=bo.getTop();
  double dW=bo.getWidth();
  double dH=bo.getHeight();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  boPlot=bo;
  if (bo.getWidth() <= 0 || bo.getHeight() <= 0) {
    return;
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    if (rtc.getSharedScale() != null) {
      dsi=rtc.getSharedScale().createDataSetIterator(iAxisType);
    }
 else {
      dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
    }
    dsi.reverse(cwa.isReverseCategory());
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,BoundsImpl.create(dX,dY,dW,dH));
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}",0.9852411552856436
70980,"/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)cwa).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)cwa).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Scale scModel;
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<?,?> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    scModel=axaOrthogonal[j].getScale();
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,scModel,axaOrthogonal[j].getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=(LegendItemRenderingHints)seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        dAxisTitleThickness=computeBox(ids,iTitleLocation,laAxisTitle,0,0,ChartUtil.computeHeightOfOrthogonalAxisTitle(cwa,getDisplayServer())).getWidth();
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        dAxisTitleThickness=computeBox(ids,iTitleLocation,laAxisTitle,0,0,ChartUtil.computeHeightOfOrthogonalAxisTitle(cwa,getDisplayServer())).getHeight();
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}","/** 
 * @param aax
 * @param dAxisStart
 * @param dAxisEnd
 * @param dBlockStart
 * @param dBlockLength
 * @throws ChartException
 * @throws IllegalArgumentException
 */
private final void updateOverlayScales(AllAxes aax,double dAxisStart,double dAxisEnd,double dBlockStart,double dBlockLength) throws ChartException, IllegalArgumentException {
  final Axis[] axa=((ChartWithAxesImpl)cwa).getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis[] axaOrthogonal=((ChartWithAxesImpl)cwa).getOrthogonalAxes(axPrimaryBase,false);
  IntersectionValue iv;
  AutoScale sc=null;
  OneAxis oaxOverlay=null;
  int iTickStyle, iAxisType, j, iTitleLocation;
  int iOverlayCount=aax.getOverlayCount();
  int iOrientation=aax.getOrientation();
  double dStart, dEnd, dAxisLabelsThickness;
  Label laAxisTitle;
  Scale scModel;
  Series[] sea=cwa.getSeries(IConstants.ORTHOGONAL);
  Map<?,?> seriesRenderingHints=rtc.getSeriesRenderers();
  for (int i=0; i < iOverlayCount; i++) {
    j=iOverlayCount - i - 1;
    oaxOverlay=aax.getOverlay(j);
    iTickStyle=oaxOverlay.getCombinedTickStyle();
    iTitleLocation=oaxOverlay.getTitlePosition();
    laAxisTitle=oaxOverlay.getTitle();
    iAxisType=getAxisType(axaOrthogonal[j]);
    scModel=axaOrthogonal[j].getScale();
    sc=AutoScale.computeScale(ids,oaxOverlay,new DataSetIterator(getMinMax(axaOrthogonal[j],iAxisType),iAxisType),iAxisType,dAxisStart,dAxisEnd,scModel,axaOrthogonal[j].getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
    oaxOverlay.set(sc);
    iv=oaxOverlay.getIntersectionValue();
    dStart=sc.getStart();
    dEnd=sc.getEnd();
    sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
    if (!sc.isStepFixed()) {
      final Object[] oaMinMax=sc.getMinMax();
      while (!sc.checkFit(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition())) {
        if (!sc.zoomOut()) {
          break;
        }
        sc.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
        sc.computeTicks(ids,oaxOverlay.getLabel(),oaxOverlay.getLabelPosition(),iOrientation,dStart,dEnd,true,null);
      }
    }
    dAxisLabelsThickness=sc.computeAxisLabelThickness(ids,oaxOverlay.getLabel(),iOrientation);
    double[] dDecorationThickness={0,0};
    for (int t=0; t < sea.length; t++) {
      LegendItemRenderingHints lirh=(LegendItemRenderingHints)seriesRenderingHints.get(sea[t]);
      if (lirh != null && lirh.getRenderer() instanceof AxesRenderer) {
        IAxesDecorator iad=((AxesRenderer)lirh.getRenderer()).getAxesDecorator(oaxOverlay);
        if (iad != null) {
          double[] thickness=iad.computeDecorationThickness(ids,oaxOverlay);
          if (thickness[0] > dDecorationThickness[0]) {
            dDecorationThickness[0]=thickness[0];
          }
          if (thickness[1] > dDecorationThickness[1]) {
            dDecorationThickness[1]=thickness[1];
          }
        }
      }
    }
    double dAxisTitleThickness=0;
    sc.resetShifts();
    if (iOrientation == VERTICAL) {
      double dX=0, dX1=0, dX2=0;
      final boolean bTicksLeft=(iTickStyle & TICK_LEFT) == TICK_LEFT;
      final boolean bTicksRight=(iTickStyle & TICK_RIGHT) == TICK_RIGHT;
      final double dAppliedYAxisPlotSpacing=dYAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight();
        double maxWidth=boPlot.getWidth() * AXIS_TITLE_PERCENT;
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_HEIGHT));
        dAxisTitleThickness=lbLimit.getMaxWidth();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (iv.getType() == IConstants.MIN) {
        dX=dBlockStart;
        dX-=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksLeft) {
          dX1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dX2+=Math.max(bTicksRight ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX1-=dDecorationThickness[0];
          dX2+=Math.max((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX1 < dBlockStart) {
          final double dDelta=(dBlockStart - dX1);
          dX1=dBlockStart;
          dX+=dDelta;
          dX2+=dDelta;
        }
        dBlockStart+=(dX2 - dX1);
      }
 else       if (iv.getType() == IConstants.MAX) {
        dX=dBlockStart + dBlockLength;
        dX+=dAppliedYAxisPlotSpacing;
        dX1=dX;
        dX2=dX;
        if (bTicksRight) {
          dX2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == RIGHT) {
          dX2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dX1-=Math.max(bTicksLeft ? getTickSize() : 0,dAppliedYAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == LEFT) {
          dX1-=Math.max((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedYAxisPlotSpacing);
          dX2+=dDecorationThickness[1];
        }
        if (iTitleLocation == LEFT) {
          dX1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == RIGHT) {
          dX2+=dAxisTitleThickness;
        }
        if (dX2 > dBlockStart + dBlockLength) {
          final double dDelta=dX2 - (dBlockStart + dBlockLength);
          dX2=dBlockStart + dBlockLength;
          dX-=dDelta;
          dX1-=dDelta;
        }
      }
      dBlockLength-=dX2 - dX1;
      double dDelta=0;
      if (iv.getType() == IConstants.MIN) {
        dDelta=-insCA.getLeft();
      }
 else       if (iv.getType() == IConstants.MAX) {
        dDelta=insCA.getRight();
      }
      oaxOverlay.setAxisCoordinate(dX + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == LEFT) ? dX1 + dDelta - 1 : dX2 + 1 - dAxisTitleThickness + dDelta);
    }
 else     if (iOrientation == HORIZONTAL) {
      double dY=0, dY1=dY, dY2=dY;
      final boolean bTicksAbove=(iTickStyle & TICK_ABOVE) == TICK_ABOVE;
      final boolean bTicksBelow=(iTickStyle & TICK_BELOW) == TICK_BELOW;
      final double dAppliedXAxisPlotSpacing=dXAxisPlotSpacing;
      if (laAxisTitle.isVisible()) {
        final String sPreviousValue=laAxisTitle.getCaption().getValue();
        laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
        double maxHeight=boPlot.getHeight() * AXIS_TITLE_PERCENT;
        double maxWidth=boPlot.getWidth();
        Label laAxisTitleV=aax.getPrimaryOrthogonal().getTitle();
        if (laAxisTitleV.isVisible()) {
          laAxisTitleV=LabelImpl.copyInstance(laAxisTitleV);
          laAxisTitleV.getCaption().setValue(rtc.externalizedMessage(laAxisTitleV.getCaption().getValue()));
          LabelLimiter lbLimitV=new LabelLimiter(boPlot.getWidth() * AXIS_TITLE_PERCENT,boPlot.getWidth(),0);
          lbLimitV.computeWrapping(ids,laAxisTitleV);
          lbLimitV.limitLabelSize(ids,laAxisTitleV);
          maxWidth-=lbLimitV.getMaxWidth();
        }
        LabelLimiter lbLimit=new LabelLimiter(maxWidth,maxHeight,0);
        lbLimit.computeWrapping(ids,laAxisTitle);
        lbLimit=lbLimit.limitLabelSize(ids,laAxisTitle,EnumSet.of(LabelLimiter.Option.FIX_WIDTH));
        dAxisTitleThickness=lbLimit.getMaxHeight();
        putLabelLimiter(oaxOverlay.getModelAxis().getTitle(),lbLimit);
        laAxisTitle.getCaption().setValue(sPreviousValue);
      }
      if (iv.getType() == IConstants.MAX) {
        dY=dBlockStart;
        dY-=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksAbove) {
          dY1-=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max(dAxisLabelsThickness,dDecorationThickness[0]);
          dY2+=Math.max(bTicksBelow ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == BELOW) {
          dY1-=dDecorationThickness[0];
          dY2+=Math.max((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY1 < dBlockStart) {
          final double dDelta=(dBlockStart - dY1);
          dY1=dBlockStart;
          dY+=dDelta;
          dY2+=dDelta;
        }
        dBlockStart+=(dY2 - dY1);
      }
 else       if (iv.getType() == IConstants.MIN) {
        dY=dBlockStart + dBlockLength;
        dY+=dAppliedXAxisPlotSpacing;
        dY1=dY;
        dY2=dY;
        if (bTicksBelow) {
          dY2+=getTickSize();
        }
        if (oaxOverlay.getLabelPosition() == BELOW) {
          dY2+=Math.max(dAxisLabelsThickness,dDecorationThickness[1]);
          dY1-=Math.max(bTicksAbove ? getTickSize() : 0,dAppliedXAxisPlotSpacing);
        }
 else         if (oaxOverlay.getLabelPosition() == ABOVE) {
          dY1-=Math.max((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness,dAppliedXAxisPlotSpacing);
          dY2+=dDecorationThickness[1];
        }
        if (iTitleLocation == ABOVE) {
          dY1-=dAxisTitleThickness;
        }
 else         if (iTitleLocation == BELOW) {
          dY2+=dAxisTitleThickness;
        }
        if (dY2 > dBlockStart + dBlockLength) {
          final double dDelta=dY2 - (dBlockStart + dBlockLength);
          dY2=dBlockStart + dBlockLength;
          dY-=dDelta;
          dY1-=dDelta;
        }
      }
      double dDelta=0;
      if (iv.getType() == IConstants.MAX) {
        dDelta=-insCA.getTop();
      }
 else       if (iv.getType() == IConstants.MIN) {
        dDelta=insCA.getBottom();
      }
      oaxOverlay.setAxisCoordinate(dY + dDelta);
      oaxOverlay.setTitleCoordinate((iTitleLocation == ABOVE) ? dY1 + dDelta - 1 : dY2 + 1 - dAxisTitleThickness + dDelta);
      dBlockLength-=(dY2 - dY1);
    }
  }
  aax.setBlockCordinates(dBlockStart,dBlockLength);
}",0.920962888665998
70981,"public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  AxisTickCoordinates daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList<?> el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates.getStart() + dUnitSize * i;
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates.getStart() + dUnitSize * i;
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      double dLength=0;
      if (!bScatter) {
        dLength=dUnitSize;
      }
 else {
        for (int j=0; j < iTickCount - 1; j++) {
          if (aax.areAxesSwapped()) {
            if ((dY <= daTickCoordinates.getCoordinate(j) && dY >= daTickCoordinates.getCoordinate(j + 1)) || (dY <= daTickCoordinates.getCoordinate(j + 1) && dY >= daTickCoordinates.getCoordinate(j))) {
              dLength=daTickCoordinates.getCoordinate(j + 1) - daTickCoordinates.getCoordinate(j);
              break;
            }
          }
 else {
            if ((dX <= daTickCoordinates.getCoordinate(j + 1) && dX >= daTickCoordinates.getCoordinate(j)) || (dX <= daTickCoordinates.getCoordinate(j) && dX >= daTickCoordinates.getCoordinate(j + 1))) {
              dLength=daTickCoordinates.getCoordinate(j + 1) - daTickCoordinates.getCoordinate(j);
              break;
            }
          }
        }
      }
      Object percentileValue=null;
      final boolean bIsPercent=oaxOrthogonal.getModelAxis().isPercent();
      if (bIsPercent) {
        AxisSubUnit au=ssl.getUnit(seOrthogonal,i);
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(au.valuePercentage(((Number)oDataOrthogonal).doubleValue()) / 100);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(au.valuePercentage(((NumberDataElement)oDataOrthogonal).getValue()) / 100);
        }
      }
 else {
        if (total != 0) {
          if (oDataOrthogonal instanceof Number) {
            percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
          }
 else           if (oDataOrthogonal instanceof NumberDataElement) {
            percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
          }
        }
 else         if (isZeroValue == true) {
          percentileValue=new Double(1.0 / iOrthogonalCount);
        }
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}","public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  AxisTickCoordinates daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList<?> el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates.getStart() + dUnitSize * i;
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates.getStart() + dUnitSize * i;
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      double dLength=0;
      if (!bScatter) {
        dLength=dUnitSize;
      }
 else {
        for (int j=0; j < iTickCount - 1; j++) {
          if (aax.areAxesSwapped()) {
            if ((dY <= daTickCoordinates.getCoordinate(j) && dY >= daTickCoordinates.getCoordinate(j + 1)) || (dY <= daTickCoordinates.getCoordinate(j + 1) && dY >= daTickCoordinates.getCoordinate(j))) {
              dLength=daTickCoordinates.getCoordinate(j + 1) - daTickCoordinates.getCoordinate(j);
              break;
            }
          }
 else {
            if ((dX <= daTickCoordinates.getCoordinate(j + 1) && dX >= daTickCoordinates.getCoordinate(j)) || (dX <= daTickCoordinates.getCoordinate(j) && dX >= daTickCoordinates.getCoordinate(j + 1))) {
              dLength=daTickCoordinates.getCoordinate(j + 1) - daTickCoordinates.getCoordinate(j);
              break;
            }
          }
        }
      }
      Object percentileValue=null;
      final boolean bIsPercent=oaxOrthogonal.getModelAxis().isPercent();
      if (bIsPercent) {
        AxisSubUnit au=ssl.getUnit(seOrthogonal,i);
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(au.valuePercentage(((Number)oDataOrthogonal).doubleValue()) / 100);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(au.valuePercentage(((NumberDataElement)oDataOrthogonal).getValue()) / 100);
        }
      }
 else {
        if (total != 0) {
          if (oDataOrthogonal instanceof Number) {
            percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
          }
 else           if (oDataOrthogonal instanceof NumberDataElement) {
            percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
          }
        }
 else         if (isZeroValue == true) {
          percentileValue=new Double(1.0 / iOrthogonalCount);
        }
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}",0.998908958661656
70982,"private void setupClassStyles(StyledElementDesign design,ReportElementHandle handle){
  List<StyleHandle> styles=handle.getFactoryElementHandle().getAllFactoryStyles();
  StringBuffer buffer=new StringBuffer();
  for (int i=styles.size() - 1; i >= 0; i--) {
    StyleHandle styleHandle=styles.get(i);
    StyleDeclaration style=createPrivateStyle(styleHandle);
    String name=styleHandle.getName();
    if (!report.getStyles().containsKey(name))     report.addStyle(name,style);
    appendStyleName(buffer,name);
  }
  StyleHandle privateStyle=handle.getPrivateStyle();
  if (privateStyle != null) {
    StyleDeclaration style=createPrivateStyle(privateStyle);
    if (style != null && !style.isEmpty()) {
      appendStyleName(buffer,assignStyleName(style));
    }
  }
  if (buffer.length() > 0)   design.setStyleClass(buffer.toString());
  design.setStyle(createPrivateStyle(handle));
}","private void setupClassStyles(StyledElementDesign design,ReportElementHandle handle){
  List<StyleHandle> styles=handle.getFactoryElementHandle().getAllFactoryStyles();
  String lastName=null;
  StringBuffer buffer=new StringBuffer();
  for (int i=styles.size() - 1; i >= 0; i--) {
    StyleHandle styleHandle=styles.get(i);
    StyleDeclaration style=createPrivateStyle(styleHandle);
    String name=validateName(styleHandle.getName());
    if (!report.getStyles().containsKey(name))     report.addStyle(name,style);
    appendStyleName(buffer,name);
    lastName=name;
  }
  StyleHandle privateStyle=handle.getPrivateStyle();
  if (privateStyle != null) {
    StyleDeclaration style=createPrivateStyle(privateStyle);
    if (style != null && !style.isEmpty()) {
      String name=assignStyleName(style);
      if (!name.equals(lastName)) {
        appendStyleName(buffer,name);
      }
    }
  }
  if (buffer.length() > 0) {
    design.setStyleClass(buffer.toString());
  }
  design.setStyle(createPrivateStyle(handle));
}",0.8970203868269734
70983,"protected void processRowLevelPageBreak(IRowContent rowContent){
  if (rowContent == null || rowLevelPageBreakIntervals == null) {
    return;
  }
  try {
    if (lastRowLevelState[0] == null) {
      lastRowLevelState[0]=getRowLevelCursorState();
      checkedRowLevelState[0]=getRowLevelCursorState();
      return;
    }
    long[] currentRowLevelState=getRowLevelCursorState();
    for (int i=0; i < rowLevelPageBreakIntervals.length; i++) {
      if (rowLevelPageBreakIntervals[i] > 0) {
        long currentPos=currentRowLevelState[i];
        long lastPos=lastRowLevelState[0][i];
        if (currentPos == lastPos) {
          continue;
        }
        long lastCheckedPos=checkedRowLevelState[0][i];
        if (currentPos - lastCheckedPos >= rowLevelPageBreakIntervals[i]) {
          rowContent.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
          System.arraycopy(currentRowLevelState,0,checkedRowLevelState[0],0,currentRowLevelState.length);
        }
        for (int j=i + 1; j < rowLevelPageBreakIntervals.length; j++) {
          checkedRowLevelState[0][j]=0;
        }
      }
    }
    lastRowLevelState[0]=currentRowLevelState;
  }
 catch (  OLAPException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}","protected void processRowLevelPageBreak(IRowContent rowContent){
  if (rowContent == null || rowLevelPageBreakIntervals == null) {
    return;
  }
  try {
    if (lastRowLevelState[0] == null) {
      lastRowLevelState[0]=getRowLevelCursorState();
      checkedRowLevelState[0]=getRowLevelCursorState();
      return;
    }
    long[] currentRowLevelState=getRowLevelCursorState();
    for (int i=0; i < rowLevelPageBreakIntervals.length; i++) {
      long currentPos=currentRowLevelState[i];
      long lastPos=lastRowLevelState[0][i];
      if (currentPos == lastPos) {
        continue;
      }
      if (rowLevelPageBreakIntervals[i] > 0) {
        long lastCheckedPos=checkedRowLevelState[0][i];
        if (currentPos - lastCheckedPos >= rowLevelPageBreakIntervals[i]) {
          rowContent.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
          System.arraycopy(currentRowLevelState,0,checkedRowLevelState[0],0,currentRowLevelState.length);
        }
      }
      for (int j=i + 1; j < rowLevelPageBreakIntervals.length; j++) {
        checkedRowLevelState[0][j]=0;
      }
    }
    lastRowLevelState[0]=currentRowLevelState;
  }
 catch (  OLAPException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
}",0.8691883372734437
70984,"private void processLevelPageBreakIntervals(IColumn col) throws OLAPException {
  if (lastColumnLevelState == null) {
    lastColumnLevelState=GroupUtil.getLevelCursorState(columnCursor);
    checkedColumnLevelState=GroupUtil.getLevelCursorState(columnCursor);
    return;
  }
  long[] currentColumnLevelState=GroupUtil.getLevelCursorState(columnCursor);
  for (int i=0; i < columnLevelPageBreakIntervals.length; i++) {
    if (columnLevelPageBreakIntervals[i] > 0) {
      long currentPos=currentColumnLevelState[i];
      long lastPos=lastColumnLevelState[i];
      if (currentPos == lastPos) {
        continue;
      }
      long lastCheckedPos=checkedColumnLevelState[i];
      if (currentPos - lastCheckedPos >= columnLevelPageBreakIntervals[i]) {
        col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
        System.arraycopy(currentColumnLevelState,0,checkedColumnLevelState,0,currentColumnLevelState.length);
      }
      for (int j=i + 1; j < columnLevelPageBreakIntervals.length; j++) {
        checkedColumnLevelState[j]=0;
      }
    }
  }
  lastColumnLevelState=currentColumnLevelState;
}","private void processLevelPageBreakIntervals(IColumn col) throws OLAPException {
  if (lastColumnLevelState == null) {
    lastColumnLevelState=GroupUtil.getLevelCursorState(columnCursor);
    checkedColumnLevelState=GroupUtil.getLevelCursorState(columnCursor);
    return;
  }
  long[] currentColumnLevelState=GroupUtil.getLevelCursorState(columnCursor);
  for (int i=0; i < columnLevelPageBreakIntervals.length; i++) {
    long currentPos=currentColumnLevelState[i];
    long lastPos=lastColumnLevelState[i];
    if (currentPos == lastPos) {
      continue;
    }
    if (columnLevelPageBreakIntervals[i] > 0) {
      long lastCheckedPos=checkedColumnLevelState[i];
      if (currentPos - lastCheckedPos >= columnLevelPageBreakIntervals[i]) {
        col.getStyle().setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.ALWAYS_VALUE);
        System.arraycopy(currentColumnLevelState,0,checkedColumnLevelState,0,currentColumnLevelState.length);
      }
    }
    for (int j=i + 1; j < columnLevelPageBreakIntervals.length; j++) {
      checkedColumnLevelState[j]=0;
    }
  }
  lastColumnLevelState=currentColumnLevelState;
}",0.820353982300885
70985,"public void endListBand(IListBandContent listBand){
  engine.endCell();
}","public void endListBand(IListBandContent listBand){
  engine.endContainer();
}",0.9403973509933776
70986,"private void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  updataRowIndex(data,container);
  outputDataIfBufferIsFull();
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
}","private void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getSizeInfo().getStartCoordinate());
  int span=axis.getColumnIndexByCoordinate(data.getSizeInfo().getEndCoordinate()) - col;
  applyTopBorderStyle(data);
  updataRowIndex(data,container);
  outputDataIfBufferIsFull();
  addDatatoCache(col,data);
  SheetData newData=new Data(data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(newData);
    addDatatoCache(i,blankData);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
}",0.970181818181818
70987,"protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible) throws BirtException {
  AbstractNode current=(AbstractNode)currentNode;
  if (!current.isFirst) {
    current.setFinished(false);
  }
 else {
    current.setFinished(finished);
  }
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
    if (finished && !isRepeated) {
      currentNode.start();
      currentNode.end();
    }
  }
  currentNode=currentNode.getParent();
}","protected void endCell(IContent content,boolean finished,IContentEmitter emitter,boolean visible) throws BirtException {
  AbstractNode current=(AbstractNode)currentNode;
  if (!current.isFirst) {
    current.setFinished(false);
  }
 else {
    current.setFinished(finished);
  }
  if (currentNode.isStarted()) {
    currentNode.end();
  }
 else {
    if (finished && !isRepeated) {
    }
  }
  currentNode=currentNode.getParent();
}",0.8540305010893247
70988,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible) throws BirtException {
  int type=content.getContentType();
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean isFinished=finished && !isRepeated;
  _endContainer(content,isFinished,emitter,visible);
break;
case IContent.PAGE_CONTENT:
endPage(content,finished,emitter);
break;
case IContent.CELL_CONTENT:
endCell(content,finished,emitter,visible);
break;
default :
_endContainer(content,finished,emitter,visible);
break;
}
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter,boolean visible) throws BirtException {
  int type=content.getContentType();
switch (type) {
case IContent.TABLE_BAND_CONTENT:
case IContent.LIST_BAND_CONTENT:
    boolean isFinished=finished && !isRepeated;
  _endContainer(content,isFinished,emitter,visible);
break;
case IContent.PAGE_CONTENT:
endPage(content,finished,emitter);
break;
case IContent.ROW_CONTENT:
isFinished=finished && !isRepeated;
endRow(content,finished,emitter,visible);
break;
case IContent.CELL_CONTENT:
endCell(content,finished,emitter,visible);
break;
default :
_endContainer(content,finished,emitter,visible);
break;
}
}",0.9102564102564102
70989,"public URLClassLoader(URL[] urls,ClassLoader parent){
  super(new URL[]{},parent);
  this.urls=urls;
  loaders=new ArrayList<Loader>(urls.length);
  for (int i=0; i < urls.length; i++) {
    Loader loader=createLoader(urls[i]);
    loaders.add(loader);
  }
}","public URLClassLoader(URL[] urls,ClassLoader parent){
  super(new URL[]{},parent);
  initURLs(urls);
  loaders=new ArrayList<Loader>(urls.length);
  for (int i=0; i < urls.length; i++) {
    Loader loader=createLoader(urls[i]);
    loaders.add(loader);
  }
}",0.9457364341085271
70990,"public URL[] getURLs(){
  return urls;
}","public URL[] getURLs(){
  return this.urls.toArray(new URL[0]);
}",0.7619047619047619
70991,"/** 
 * Returns the raw column with, if it's a fix value, covert it to Pixel unit, if it's a relative value or none, retain it.
 * @return The raw width
 */
public String getRawWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  String unit=handle.getUnits();
  if (unit == null || unit.length() == 0) {
    return ""String_Node_Str"";
  }
 else   if (unit.equals(DesignChoiceConstants.UNITS_PERCENTAGE)) {
    return String.valueOf(handle.getMeasure()) + unit;
  }
 else {
    int px=(int)DEUtil.convertoToPixel(handle);
    if (handle.isSet()) {
      px=1;
    }
    if (px <= 0) {
      TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
      return String.valueOf(adapter.getDefaultWidth(getColumnNumber()));
    }
    return String.valueOf(px);
  }
}","/** 
 * Returns the raw column with, if it's a fix value, covert it to Pixel unit, if it's a relative value or none, retain it.
 * @return The raw width
 */
public String getRawWidth(){
  DimensionHandle handle=getColumnHandle().getWidth();
  String unit=handle.getUnits();
  if (unit == null || unit.length() == 0) {
    return ""String_Node_Str"";
  }
 else   if (unit.equals(DesignChoiceConstants.UNITS_PERCENTAGE)) {
    return String.valueOf(handle.getMeasure()) + unit;
  }
 else {
    int px=(int)DEUtil.convertoToPixel(handle);
    if (px <= 0) {
      if (handle.isSet()) {
        px=1;
      }
 else {
        TableHandleAdapter adapter=HandleAdapterFactory.getInstance().getTableHandleAdapter(getTableParent());
        return String.valueOf(adapter.getDefaultWidth(getColumnNumber()));
      }
    }
    return String.valueOf(px);
  }
}",0.9664268585131894
70992,"public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_CHART);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(3,true);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    cmpBasic.setLayoutData(gd);
  }
  Composite cmp3D=new Composite(cmpContent,SWT.NONE);
{
    cmp3D.setLayout(new GridLayout());
    cmp3D.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),getChart().getBlock().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (hasWallAndFloor()) {
    Label lblWall=new Label(cmpBasic,SWT.NONE);
    lblWall.setLayoutData(new GridData());
    lblWall.setText(Messages.getString(""String_Node_Str""));
    fccWall=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getWallFill(),true,true,true,true);
    GridData gdFCCWall=new GridData(GridData.FILL_HORIZONTAL);
    fccWall.setLayoutData(gdFCCWall);
    fccWall.addListener(this);
    new Label(cmpBasic,SWT.NONE);
    Label lblFloor=new Label(cmpBasic,SWT.NONE);
    lblFloor.setLayoutData(new GridData());
    lblFloor.setText(Messages.getString(""String_Node_Str""));
    fccFloor=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getFloorFill(),true,true,true,true);
    GridData gdFCCFloor=new GridData(GridData.FILL_HORIZONTAL);
    fccFloor.setLayoutData(gdFCCFloor);
    fccFloor.addListener(this);
    new Label(cmpBasic,SWT.NONE);
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  cmbStyle=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbStyle.setLayoutData(gridData);
    cmbStyle.addSelectionListener(this);
  }
  btnEnablePreview=new Button(cmpBasic,SWT.CHECK);
{
    btnEnablePreview.setText(Messages.getString(""String_Node_Str""));
    btnEnablePreview.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
    btnEnablePreview.addSelectionListener(this);
  }
  Group grpEmptyMsg=new Group(cmpBasic,SWT.NONE);
{
{
      grpEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      grpEmptyMsg.setLayoutData(gd);
      grpEmptyMsg.setLayout(new GridLayout(2,false));
    }
    org.eclipse.birt.chart.model.component.Label laEmptyMsg=getChart().getEmptyMessage();
    btnAutoHide=new Button(grpEmptyMsg,SWT.CHECK);
{
      btnAutoHide.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnAutoHide.setLayoutData(gd);
      btnAutoHide.setSelection(!laEmptyMsg.isVisible());
      btnAutoHide.addListener(SWT.Selection,this);
    }
    new Label(grpEmptyMsg,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    List<String> keys=null;
    if (getContext().getUIServiceProvider() != null) {
      keys=getContext().getUIServiceProvider().getRegisteredKeys();
    }
    txtEmptyMsg=new ExternalizedTextEditorComposite(grpEmptyMsg,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),laEmptyMsg.getCaption().getValue());
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      txtEmptyMsg.setLayoutData(gd);
      txtEmptyMsg.setEnabled(laEmptyMsg.isVisible());
      txtEmptyMsg.addListener(this);
    }
    new Label(grpEmptyMsg,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    fdcEmptyMsg=new FontDefinitionComposite(grpEmptyMsg,SWT.NONE,getContext(),laEmptyMsg.getCaption().getFont(),laEmptyMsg.getCaption().getColor(),true);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.heightHint=fdcEmptyMsg.getPreferredSize().y;
      gd.widthHint=200;
      gd.grabExcessVerticalSpace=false;
      fdcEmptyMsg.setLayoutData(gd);
      fdcEmptyMsg.setEnabled(laEmptyMsg.isVisible());
      fdcEmptyMsg.addListener(this);
    }
  }
  if ((getChart() instanceof ChartWithAxes) && ChartUIUtil.is3DType(getChart())) {
    Group cmpRotation=new Group(cmp3D,SWT.NONE);
{
      GridLayout gl=new GridLayout();
      gl.marginTop=0;
      gl.verticalSpacing=0;
      cmpRotation.setLayout(gl);
      cmpRotation.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      cmpRotation.setText(Messages.getString(""String_Node_Str""));
    }
    xChooser=new AxisRotationChooser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),AngleType.X);
    xChooser.placeComponents(cmpRotation);
    yChooser=new AxisRotationChooser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),0),AngleType.Y);
    yChooser.placeComponents(cmpRotation);
    zChooser=new AxisRotationChooser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),AngleType.Z);
    zChooser.placeComponents(cmpRotation);
    btnResetValue=new Button(cmpRotation,SWT.PUSH);
{
      btnResetValue.setText(Messages.getString(""String_Node_Str""));
      btnResetValue.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
      btnResetValue.addSelectionListener(this);
    }
  }
 else   if (getChart() instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwa=(ChartWithoutAxes)getChart();
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpCoverage=new Composite(cmpBasic,SWT.NONE);
{
      cmpCoverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout layout=new GridLayout(2,false);
      layout.verticalSpacing=0;
      layout.marginHeight=0;
      layout.marginWidth=0;
      cmpCoverage.setLayout(layout);
    }
    spnCorverage=new Spinner(cmpCoverage,SWT.BORDER);
{
      int spnValue=(int)(cwa.getCoverage() * 100);
      spnCorverage.setValues(spnValue,1,100,0,1,10);
      spnCorverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      spnCorverage.setEnabled(cwa.isSetCoverage());
      spnCorverage.addSelectionListener(this);
    }
    new Label(cmpCoverage,SWT.NONE).setText(""String_Node_Str"");
    btnCoverageAuto=new Button(cmpBasic,SWT.CHECK);
    btnCoverageAuto.setText(Messages.getString(""String_Node_Str""));
    btnCoverageAuto.setSelection(!cwa.isSetCoverage());
    btnCoverageAuto.addSelectionListener(this);
  }
  btnEnable=new Button(cmpBasic,SWT.CHECK);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelection(getChart().getInteractivity().isEnable());
    btnEnable.addSelectionListener(this);
  }
  populateLists();
  createButtonGroup(cmpContent);
}","public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_CHART);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(3,true);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    cmpBasic.setLayoutData(gd);
  }
  Composite cmp3D=new Composite(cmpContent,SWT.NONE);
{
    cmp3D.setLayout(new GridLayout());
    cmp3D.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),getChart().getBlock().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (hasWallAndFloor()) {
    Label lblWall=new Label(cmpBasic,SWT.NONE);
    lblWall.setLayoutData(new GridData());
    lblWall.setText(Messages.getString(""String_Node_Str""));
    fccWall=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getWallFill(),true,true,true,true);
    GridData gdFCCWall=new GridData(GridData.FILL_HORIZONTAL);
    fccWall.setLayoutData(gdFCCWall);
    fccWall.addListener(this);
    new Label(cmpBasic,SWT.NONE);
    Label lblFloor=new Label(cmpBasic,SWT.NONE);
    lblFloor.setLayoutData(new GridData());
    lblFloor.setText(Messages.getString(""String_Node_Str""));
    fccFloor=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getFloorFill(),true,true,true,true);
    GridData gdFCCFloor=new GridData(GridData.FILL_HORIZONTAL);
    fccFloor.setLayoutData(gdFCCFloor);
    fccFloor.addListener(this);
    new Label(cmpBasic,SWT.NONE);
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  cmbStyle=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbStyle.setLayoutData(gridData);
    cmbStyle.addSelectionListener(this);
  }
  btnEnablePreview=new Button(cmpBasic,SWT.CHECK);
{
    btnEnablePreview.setText(Messages.getString(""String_Node_Str""));
    btnEnablePreview.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
    btnEnablePreview.addSelectionListener(this);
  }
  Group grpEmptyMsg=new Group(cmpBasic,SWT.NONE);
{
{
      grpEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      grpEmptyMsg.setLayoutData(gd);
      grpEmptyMsg.setLayout(new GridLayout(2,false));
    }
    org.eclipse.birt.chart.model.component.Label laEmptyMsg=getChart().getEmptyMessage();
    btnAutoHide=new Button(grpEmptyMsg,SWT.CHECK);
{
      btnAutoHide.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnAutoHide.setLayoutData(gd);
      btnAutoHide.setSelection(!laEmptyMsg.isVisible());
      btnAutoHide.addListener(SWT.Selection,this);
    }
    new Label(grpEmptyMsg,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    List<String> keys=null;
    if (getContext().getUIServiceProvider() != null) {
      keys=getContext().getUIServiceProvider().getRegisteredKeys();
    }
    txtEmptyMsg=new ExternalizedTextEditorComposite(grpEmptyMsg,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),laEmptyMsg.getCaption().getValue());
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      txtEmptyMsg.setLayoutData(gd);
      txtEmptyMsg.setEnabled(laEmptyMsg.isVisible());
      txtEmptyMsg.addListener(this);
    }
    new Label(grpEmptyMsg,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    fdcEmptyMsg=new FontDefinitionComposite(grpEmptyMsg,SWT.NONE,getContext(),laEmptyMsg.getCaption().getFont(),laEmptyMsg.getCaption().getColor(),true);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      gd.grabExcessVerticalSpace=false;
      fdcEmptyMsg.setLayoutData(gd);
      fdcEmptyMsg.setEnabled(laEmptyMsg.isVisible());
      fdcEmptyMsg.addListener(this);
    }
  }
  if ((getChart() instanceof ChartWithAxes) && ChartUIUtil.is3DType(getChart())) {
    Group cmpRotation=new Group(cmp3D,SWT.NONE);
{
      GridLayout gl=new GridLayout();
      gl.marginTop=0;
      gl.verticalSpacing=0;
      cmpRotation.setLayout(gl);
      cmpRotation.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      cmpRotation.setText(Messages.getString(""String_Node_Str""));
    }
    xChooser=new AxisRotationChooser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),AngleType.X);
    xChooser.placeComponents(cmpRotation);
    yChooser=new AxisRotationChooser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),0),AngleType.Y);
    yChooser.placeComponents(cmpRotation);
    zChooser=new AxisRotationChooser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),AngleType.Z);
    zChooser.placeComponents(cmpRotation);
    btnResetValue=new Button(cmpRotation,SWT.PUSH);
{
      btnResetValue.setText(Messages.getString(""String_Node_Str""));
      btnResetValue.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
      btnResetValue.addSelectionListener(this);
    }
  }
 else   if (getChart() instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwa=(ChartWithoutAxes)getChart();
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpCoverage=new Composite(cmpBasic,SWT.NONE);
{
      cmpCoverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout layout=new GridLayout(2,false);
      layout.verticalSpacing=0;
      layout.marginHeight=0;
      layout.marginWidth=0;
      cmpCoverage.setLayout(layout);
    }
    spnCorverage=new Spinner(cmpCoverage,SWT.BORDER);
{
      int spnValue=(int)(cwa.getCoverage() * 100);
      spnCorverage.setValues(spnValue,1,100,0,1,10);
      spnCorverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      spnCorverage.setEnabled(cwa.isSetCoverage());
      spnCorverage.addSelectionListener(this);
    }
    new Label(cmpCoverage,SWT.NONE).setText(""String_Node_Str"");
    btnCoverageAuto=new Button(cmpBasic,SWT.CHECK);
    btnCoverageAuto.setText(Messages.getString(""String_Node_Str""));
    btnCoverageAuto.setSelection(!cwa.isSetCoverage());
    btnCoverageAuto.addSelectionListener(this);
  }
  btnEnable=new Button(cmpBasic,SWT.CHECK);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelection(getChart().getInteractivity().isEnable());
    btnEnable.addSelectionListener(this);
  }
  populateLists();
  createButtonGroup(cmpContent);
}",0.9962163677130044
70993,"public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_TITLE);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    cmpContent.setLayout(new GridLayout());
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpBasic.setLayoutData(gd);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
{
    lblTitle.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getChart().getTitle().getLabel().getCaption().getValue());
{
    GridData gdTXTTitle=new GridData();
    gdTXTTitle.widthHint=200;
    txtTitle.setLayoutData(gdTXTTitle);
    if (!getChart().getTitle().isVisible()) {
      txtTitle.setEnabled(false);
    }
    txtTitle.addListener(this);
  }
  btnVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnVisible.setText(Messages.getString(""String_Node_Str""));
    btnVisible.setSelection(getChart().getTitle().isVisible());
    btnVisible.addSelectionListener(this);
  }
  Label lblFont=new Label(cmpBasic,SWT.NONE);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getChart().getTitle().getLabel().getCaption().getFont(),getChart().getTitle().getLabel().getCaption().getColor(),true);
  GridData gdFDCFont=new GridData();
  gdFDCFont.heightHint=fdcFont.getPreferredSize().y;
  gdFDCFont.widthHint=200;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  createButtonGroup(cmpContent);
}","public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_TITLE);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    cmpContent.setLayout(new GridLayout());
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpBasic.setLayoutData(gd);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
{
    lblTitle.setText(Messages.getString(""String_Node_Str""));
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getChart().getTitle().getLabel().getCaption().getValue());
{
    GridData gdTXTTitle=new GridData();
    gdTXTTitle.widthHint=200;
    txtTitle.setLayoutData(gdTXTTitle);
    if (!getChart().getTitle().isVisible()) {
      txtTitle.setEnabled(false);
    }
    txtTitle.addListener(this);
  }
  btnVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnVisible.setText(Messages.getString(""String_Node_Str""));
    btnVisible.setSelection(getChart().getTitle().isVisible());
    btnVisible.addSelectionListener(this);
  }
  Label lblFont=new Label(cmpBasic,SWT.NONE);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getChart().getTitle().getLabel().getCaption().getFont(),getChart().getTitle().getLabel().getCaption().getColor(),true);
  GridData gdFDCFont=new GridData();
  gdFDCFont.widthHint=200;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  createButtonGroup(cmpContent);
}",0.984002098085497
70994,"public void handleEvent(Event event){
  if (event.widget.equals(cmbBackground)) {
    getChart().getBlock().setBackground((Fill)event.data);
  }
 else   if (event.widget.equals(fccWall)) {
    if (hasWallAndFloor()) {
      ((ChartWithAxes)getChart()).setWallFill((Fill)event.data);
    }
  }
 else   if (event.widget.equals(fccFloor)) {
    if (hasWallAndFloor()) {
      ((ChartWithAxes)getChart()).setFloorFill((Fill)event.data);
    }
  }
 else   if (event.widget == txtEmptyMsg) {
    getChart().getEmptyMessage().getCaption().setValue(txtEmptyMsg.getText());
  }
 else   if (event.widget == btnAutoHide) {
    getChart().getEmptyMessage().setVisible(!btnAutoHide.getSelection());
    txtEmptyMsg.setEnabled(getChart().getEmptyMessage().isVisible());
    fdcEmptyMsg.setEnabled(getChart().getEmptyMessage().isVisible());
  }
 else   if (event.widget == fdcEmptyMsg) {
    Text caption=getChart().getEmptyMessage().getCaption();
    caption.setFont((FontDefinition)((Object[])event.data)[0]);
    caption.setColor((ColorDefinition)((Object[])event.data)[1]);
  }
}","public void handleEvent(Event event){
  if (event.widget.equals(cmbBackground)) {
    getChart().getBlock().setBackground((Fill)event.data);
  }
 else   if (event.widget.equals(fccWall)) {
    if (hasWallAndFloor()) {
      ((ChartWithAxes)getChart()).setWallFill((Fill)event.data);
    }
  }
 else   if (event.widget.equals(fccFloor)) {
    if (hasWallAndFloor()) {
      ((ChartWithAxes)getChart()).setFloorFill((Fill)event.data);
    }
  }
 else   if (event.widget == txtEmptyMsg) {
    getChart().getEmptyMessage().getCaption().setValue(txtEmptyMsg.getText());
  }
 else   if (event.widget == btnAutoHide) {
    getChart().getEmptyMessage().setVisible(!btnAutoHide.getSelection());
    updateEmptyMessageUIStates();
  }
 else   if (event.widget == fdcEmptyMsg) {
    Text caption=getChart().getEmptyMessage().getCaption();
    caption.setFont((FontDefinition)((Object[])event.data)[0]);
    caption.setColor((ColorDefinition)((Object[])event.data)[1]);
  }
}",0.9270935960591132
70995,"public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_CHART);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(3,true);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    cmpBasic.setLayoutData(gd);
  }
  Composite cmp3D=new Composite(cmpContent,SWT.NONE);
{
    cmp3D.setLayout(new GridLayout());
    cmp3D.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),getChart().getBlock().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (hasWallAndFloor()) {
    Label lblWall=new Label(cmpBasic,SWT.NONE);
    lblWall.setLayoutData(new GridData());
    lblWall.setText(Messages.getString(""String_Node_Str""));
    fccWall=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getWallFill(),true,true,true,true);
    GridData gdFCCWall=new GridData(GridData.FILL_HORIZONTAL);
    fccWall.setLayoutData(gdFCCWall);
    fccWall.addListener(this);
    new Label(cmpBasic,SWT.NONE);
    Label lblFloor=new Label(cmpBasic,SWT.NONE);
    lblFloor.setLayoutData(new GridData());
    lblFloor.setText(Messages.getString(""String_Node_Str""));
    fccFloor=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getFloorFill(),true,true,true,true);
    GridData gdFCCFloor=new GridData(GridData.FILL_HORIZONTAL);
    fccFloor.setLayoutData(gdFCCFloor);
    fccFloor.addListener(this);
    new Label(cmpBasic,SWT.NONE);
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  cmbStyle=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbStyle.setLayoutData(gridData);
    cmbStyle.addSelectionListener(this);
  }
  btnEnablePreview=new Button(cmpBasic,SWT.CHECK);
{
    btnEnablePreview.setText(Messages.getString(""String_Node_Str""));
    btnEnablePreview.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
    btnEnablePreview.addSelectionListener(this);
  }
  Group grpEmptyMsg=new Group(cmpBasic,SWT.NONE);
{
{
      grpEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      grpEmptyMsg.setLayoutData(gd);
      grpEmptyMsg.setLayout(new GridLayout(2,false));
    }
    org.eclipse.birt.chart.model.component.Label laEmptyMsg=getChart().getEmptyMessage();
    btnAutoHide=new Button(grpEmptyMsg,SWT.CHECK);
{
      btnAutoHide.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnAutoHide.setLayoutData(gd);
      btnAutoHide.setSelection(!laEmptyMsg.isVisible());
      btnAutoHide.addListener(SWT.Selection,this);
    }
    new Label(grpEmptyMsg,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    List<String> keys=null;
    if (getContext().getUIServiceProvider() != null) {
      keys=getContext().getUIServiceProvider().getRegisteredKeys();
    }
    txtEmptyMsg=new ExternalizedTextEditorComposite(grpEmptyMsg,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),laEmptyMsg.getCaption().getValue());
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      txtEmptyMsg.setLayoutData(gd);
      txtEmptyMsg.setEnabled(laEmptyMsg.isVisible());
      txtEmptyMsg.addListener(this);
    }
    new Label(grpEmptyMsg,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    fdcEmptyMsg=new FontDefinitionComposite(grpEmptyMsg,SWT.NONE,getContext(),laEmptyMsg.getCaption().getFont(),laEmptyMsg.getCaption().getColor(),true);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      gd.grabExcessVerticalSpace=false;
      fdcEmptyMsg.setLayoutData(gd);
      fdcEmptyMsg.setEnabled(laEmptyMsg.isVisible());
      fdcEmptyMsg.addListener(this);
    }
  }
  if ((getChart() instanceof ChartWithAxes) && ChartUIUtil.is3DType(getChart())) {
    Group cmpRotation=new Group(cmp3D,SWT.NONE);
{
      GridLayout gl=new GridLayout();
      gl.marginTop=0;
      gl.verticalSpacing=0;
      cmpRotation.setLayout(gl);
      cmpRotation.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      cmpRotation.setText(Messages.getString(""String_Node_Str""));
    }
    xChooser=new AxisRotationChooser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),AngleType.X);
    xChooser.placeComponents(cmpRotation);
    yChooser=new AxisRotationChooser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),0),AngleType.Y);
    yChooser.placeComponents(cmpRotation);
    zChooser=new AxisRotationChooser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),AngleType.Z);
    zChooser.placeComponents(cmpRotation);
    btnResetValue=new Button(cmpRotation,SWT.PUSH);
{
      btnResetValue.setText(Messages.getString(""String_Node_Str""));
      btnResetValue.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
      btnResetValue.addSelectionListener(this);
    }
  }
 else   if (getChart() instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwa=(ChartWithoutAxes)getChart();
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpCoverage=new Composite(cmpBasic,SWT.NONE);
{
      cmpCoverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout layout=new GridLayout(2,false);
      layout.verticalSpacing=0;
      layout.marginHeight=0;
      layout.marginWidth=0;
      cmpCoverage.setLayout(layout);
    }
    spnCorverage=new Spinner(cmpCoverage,SWT.BORDER);
{
      int spnValue=(int)(cwa.getCoverage() * 100);
      spnCorverage.setValues(spnValue,1,100,0,1,10);
      spnCorverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      spnCorverage.setEnabled(cwa.isSetCoverage());
      spnCorverage.addSelectionListener(this);
    }
    new Label(cmpCoverage,SWT.NONE).setText(""String_Node_Str"");
    btnCoverageAuto=new Button(cmpBasic,SWT.CHECK);
    btnCoverageAuto.setText(Messages.getString(""String_Node_Str""));
    btnCoverageAuto.setSelection(!cwa.isSetCoverage());
    btnCoverageAuto.addSelectionListener(this);
  }
  btnEnable=new Button(cmpBasic,SWT.CHECK);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelection(getChart().getInteractivity().isEnable());
    btnEnable.addSelectionListener(this);
  }
  populateLists();
  createButtonGroup(cmpContent);
}","public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_CHART);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(3,true);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    cmpBasic.setLayoutData(gd);
  }
  Composite cmp3D=new Composite(cmpContent,SWT.NONE);
{
    cmp3D.setLayout(new GridLayout());
    cmp3D.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),getChart().getBlock().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (hasWallAndFloor()) {
    Label lblWall=new Label(cmpBasic,SWT.NONE);
    lblWall.setLayoutData(new GridData());
    lblWall.setText(Messages.getString(""String_Node_Str""));
    fccWall=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getWallFill(),true,true,true,true);
    GridData gdFCCWall=new GridData(GridData.FILL_HORIZONTAL);
    fccWall.setLayoutData(gdFCCWall);
    fccWall.addListener(this);
    new Label(cmpBasic,SWT.NONE);
    Label lblFloor=new Label(cmpBasic,SWT.NONE);
    lblFloor.setLayoutData(new GridData());
    lblFloor.setText(Messages.getString(""String_Node_Str""));
    fccFloor=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getFloorFill(),true,true,true,true);
    GridData gdFCCFloor=new GridData(GridData.FILL_HORIZONTAL);
    fccFloor.setLayoutData(gdFCCFloor);
    fccFloor.addListener(this);
    new Label(cmpBasic,SWT.NONE);
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  cmbStyle=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbStyle.setLayoutData(gridData);
    cmbStyle.addSelectionListener(this);
  }
  btnEnablePreview=new Button(cmpBasic,SWT.CHECK);
{
    btnEnablePreview.setText(Messages.getString(""String_Node_Str""));
    btnEnablePreview.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
    btnEnablePreview.addSelectionListener(this);
  }
  Group grpEmptyMsg=new Group(cmpBasic,SWT.NONE);
{
{
      grpEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      grpEmptyMsg.setLayoutData(gd);
      grpEmptyMsg.setLayout(new GridLayout(2,false));
    }
    org.eclipse.birt.chart.model.component.Label laEmptyMsg=getChart().getEmptyMessage();
    btnAutoHide=new Button(grpEmptyMsg,SWT.CHECK);
{
      btnAutoHide.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnAutoHide.setLayoutData(gd);
      btnAutoHide.setSelection(!laEmptyMsg.isVisible());
      btnAutoHide.addListener(SWT.Selection,this);
    }
    lbTxtEmptyMsg=new Label(grpEmptyMsg,SWT.NONE);
    lbTxtEmptyMsg.setText(Messages.getString(""String_Node_Str""));
    List<String> keys=null;
    if (getContext().getUIServiceProvider() != null) {
      keys=getContext().getUIServiceProvider().getRegisteredKeys();
    }
    txtEmptyMsg=new ExternalizedTextEditorComposite(grpEmptyMsg,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),laEmptyMsg.getCaption().getValue());
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      txtEmptyMsg.setLayoutData(gd);
      txtEmptyMsg.addListener(this);
    }
    lbFdcEmptyMsg=new Label(grpEmptyMsg,SWT.NONE);
    lbFdcEmptyMsg.setText(Messages.getString(""String_Node_Str""));
    fdcEmptyMsg=new FontDefinitionComposite(grpEmptyMsg,SWT.NONE,getContext(),laEmptyMsg.getCaption().getFont(),laEmptyMsg.getCaption().getColor(),true);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      gd.grabExcessVerticalSpace=false;
      fdcEmptyMsg.setLayoutData(gd);
      fdcEmptyMsg.addListener(this);
    }
    updateEmptyMessageUIStates();
  }
  if ((getChart() instanceof ChartWithAxes) && ChartUIUtil.is3DType(getChart())) {
    Group cmpRotation=new Group(cmp3D,SWT.NONE);
{
      GridLayout gl=new GridLayout();
      gl.marginTop=0;
      gl.verticalSpacing=0;
      cmpRotation.setLayout(gl);
      cmpRotation.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      cmpRotation.setText(Messages.getString(""String_Node_Str""));
    }
    xChooser=new AxisRotationChooser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),AngleType.X);
    xChooser.placeComponents(cmpRotation);
    yChooser=new AxisRotationChooser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),0),AngleType.Y);
    yChooser.placeComponents(cmpRotation);
    zChooser=new AxisRotationChooser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),AngleType.Z);
    zChooser.placeComponents(cmpRotation);
    btnResetValue=new Button(cmpRotation,SWT.PUSH);
{
      btnResetValue.setText(Messages.getString(""String_Node_Str""));
      btnResetValue.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
      btnResetValue.addSelectionListener(this);
    }
  }
 else   if (getChart() instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwa=(ChartWithoutAxes)getChart();
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpCoverage=new Composite(cmpBasic,SWT.NONE);
{
      cmpCoverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout layout=new GridLayout(2,false);
      layout.verticalSpacing=0;
      layout.marginHeight=0;
      layout.marginWidth=0;
      cmpCoverage.setLayout(layout);
    }
    spnCorverage=new Spinner(cmpCoverage,SWT.BORDER);
{
      int spnValue=(int)(cwa.getCoverage() * 100);
      spnCorverage.setValues(spnValue,1,100,0,1,10);
      spnCorverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      spnCorverage.setEnabled(cwa.isSetCoverage());
      spnCorverage.addSelectionListener(this);
    }
    new Label(cmpCoverage,SWT.NONE).setText(""String_Node_Str"");
    btnCoverageAuto=new Button(cmpBasic,SWT.CHECK);
    btnCoverageAuto.setText(Messages.getString(""String_Node_Str""));
    btnCoverageAuto.setSelection(!cwa.isSetCoverage());
    btnCoverageAuto.addSelectionListener(this);
  }
  btnEnable=new Button(cmpBasic,SWT.CHECK);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelection(getChart().getInteractivity().isEnable());
    btnEnable.addSelectionListener(this);
  }
  populateLists();
  createButtonGroup(cmpContent);
}",0.9798733286418017
70996,"protected void writeFields(DataOutputStream out) throws IOException {
  if (name != null) {
    IOUtil.writeShort(out,FIELD_NAME);
    IOUtil.writeString(out,name);
  }
  if (x != null) {
    IOUtil.writeShort(out,FIELD_X);
    x.writeObject(out);
  }
  if (y != null) {
    IOUtil.writeShort(out,FIELD_Y);
    y.writeObject(out);
  }
  if (width != null) {
    IOUtil.writeShort(out,FIELD_WIDTH);
    width.writeObject(out);
  }
  if (height != null) {
    IOUtil.writeShort(out,FIELD_HEIGHT);
    height.writeObject(out);
  }
  if (hyperlink != null) {
    IOUtil.writeShort(out,FIELD_HYPERLINK);
    ((ActionContent)hyperlink).writeObject(out);
  }
  if (bookmark != null) {
    IOUtil.writeShort(out,FIELD_BOOKMARK);
    IOUtil.writeString(out,bookmark);
  }
  if (helpText != null) {
    IOUtil.writeShort(out,FIELD_HELPTEXT);
    IOUtil.writeString(out,helpText);
  }
  if (inlineStyle != null) {
    if (!inlineStyle.isEmpty()) {
      IOUtil.writeShort(out,FIELD_INLINESTYLE_VERSION_1);
      inlineStyle.write(out);
    }
  }
  if (instanceId != null) {
    IOUtil.writeShort(out,FIELD_INSTANCE_ID);
    IOUtil.writeString(out,instanceId.toString());
  }
  if (toc != null) {
    IOUtil.writeShort(out,FIELD_TOC);
    IOUtil.writeObject(out,toc);
  }
  if (acl != null) {
    IOUtil.writeShort(out,FIELD_ACL);
    IOUtil.writeObject(out,acl);
  }
}","protected void writeFields(DataOutputStream out) throws IOException {
  if (name != null) {
    IOUtil.writeShort(out,FIELD_NAME);
    IOUtil.writeString(out,name);
  }
  if (x != null) {
    IOUtil.writeShort(out,FIELD_X);
    x.writeObject(out);
  }
  if (y != null) {
    IOUtil.writeShort(out,FIELD_Y);
    y.writeObject(out);
  }
  if (width != null) {
    IOUtil.writeShort(out,FIELD_WIDTH);
    width.writeObject(out);
  }
  if (height != null) {
    IOUtil.writeShort(out,FIELD_HEIGHT);
    height.writeObject(out);
  }
  if (hyperlink != null) {
    IOUtil.writeShort(out,FIELD_HYPERLINK);
    ((ActionContent)hyperlink).writeObject(out);
  }
  if (bookmark != null) {
    IOUtil.writeShort(out,FIELD_BOOKMARK);
    IOUtil.writeString(out,bookmark);
  }
  if (helpText != null) {
    IOUtil.writeShort(out,FIELD_HELPTEXT);
    IOUtil.writeString(out,helpText);
  }
  if (inlineStyle != null) {
    if (!inlineStyle.isEmpty()) {
      IOUtil.writeShort(out,FIELD_INLINESTYLE_VERSION_1);
      inlineStyle.write(out);
    }
  }
  if (classStyle != null && !classStyle.isEmpty()) {
    IOUtil.writeShort(out,FIELD_CLASS_STYLE);
    classStyle.write(out);
  }
  if (instanceId != null) {
    IOUtil.writeShort(out,FIELD_INSTANCE_ID);
    IOUtil.writeString(out,instanceId.toString());
  }
  if (toc != null) {
    IOUtil.writeShort(out,FIELD_TOC);
    IOUtil.writeObject(out,toc);
  }
  if (acl != null) {
    IOUtil.writeShort(out,FIELD_ACL);
    IOUtil.writeObject(out,acl);
  }
}",0.9542897327707456
70997,"protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_NAME:
    name=IOUtil.readString(in);
  break;
case FIELD_X:
x=new DimensionType();
x.readObject(in);
break;
case FIELD_Y:
y=new DimensionType();
y.readObject(in);
break;
case FIELD_WIDTH:
width=new DimensionType();
width.readObject(in);
break;
case FIELD_HEIGHT:
height=new DimensionType();
height.readObject(in);
break;
case FIELD_HYPERLINK:
ActionContent action=new ActionContent();
action.readObject(in,loader);
hyperlink=action;
break;
case FIELD_BOOKMARK:
bookmark=IOUtil.readString(in);
break;
case FIELD_HELPTEXT:
helpText=IOUtil.readString(in);
break;
case FIELD_INLINESTYLE_VERSION_0:
String styleCssText=IOUtil.readString(in);
if (styleCssText != null && styleCssText.length() != 0) {
inlineStyle=new StyleDeclaration(cssEngine);
inlineStyle.setCssText(styleCssText);
}
break;
case FIELD_INLINESTYLE_VERSION_1:
IStyle style=new StyleDeclaration(cssEngine);
if (null != style) {
style.read(in);
if (!style.isEmpty()) {
inlineStyle=style;
}
}
break;
case FIELD_INSTANCE_ID:
String value=IOUtil.readString(in);
instanceId=InstanceID.parse(value);
break;
case FIELD_TOC:
toc=IOUtil.readObject(in,loader);
break;
case FIELD_ACL:
acl=IOUtil.readString(in);
}
}","protected void readField(int version,int filedId,DataInputStream in,ClassLoader loader) throws IOException {
switch (filedId) {
case FIELD_NAME:
    name=IOUtil.readString(in);
  break;
case FIELD_X:
x=new DimensionType();
x.readObject(in);
break;
case FIELD_Y:
y=new DimensionType();
y.readObject(in);
break;
case FIELD_WIDTH:
width=new DimensionType();
width.readObject(in);
break;
case FIELD_HEIGHT:
height=new DimensionType();
height.readObject(in);
break;
case FIELD_HYPERLINK:
ActionContent action=new ActionContent();
action.readObject(in,loader);
hyperlink=action;
break;
case FIELD_BOOKMARK:
bookmark=IOUtil.readString(in);
break;
case FIELD_HELPTEXT:
helpText=IOUtil.readString(in);
break;
case FIELD_INLINESTYLE_VERSION_0:
String styleCssText=IOUtil.readString(in);
if (styleCssText != null && styleCssText.length() != 0) {
inlineStyle=new StyleDeclaration(cssEngine);
inlineStyle.setCssText(styleCssText);
}
break;
case FIELD_INLINESTYLE_VERSION_1:
inlineStyle=readStyle(in);
break;
case FIELD_CLASS_STYLE:
classStyle=readStyle(in);
break;
case FIELD_INSTANCE_ID:
String value=IOUtil.readString(in);
instanceId=InstanceID.parse(value);
break;
case FIELD_TOC:
toc=IOUtil.readObject(in,loader);
break;
case FIELD_ACL:
acl=IOUtil.readString(in);
}
}",0.9172521467603436
70998,"protected Object readDesign(DataInputStream in) throws IOException {
  short designType=IOUtil.readShort(in);
  byte[] buffer=IOUtil.readBytes(in);
  DataInputStream dis=new DataInputStream(new ByteArrayInputStream(buffer));
switch (designType) {
case SIMPLE_MASTER_PAGE_DESIGN:
{
      SimpleMasterPageDesign masterPage=new SimpleMasterPageDesign();
      readSimpleMasterPage(dis,masterPage);
      int count=IOUtil.readInt(in);
      for (int i=0; i < count; i++) {
        ReportItemDesign item=(ReportItemDesign)readDesign(in);
        masterPage.addHeader(item);
      }
      count=IOUtil.readInt(in);
      for (int i=0; i < count; i++) {
        ReportItemDesign item=(ReportItemDesign)readDesign(in);
        masterPage.addFooter(item);
      }
      return masterPage;
    }
case GRID_DESIGN:
{
    GridItemDesign grid=new GridItemDesign();
    readGrid(dis,grid);
    int count=IOUtil.readInt(in);
    for (int i=0; i < count; i++) {
      RowDesign row=(RowDesign)readDesign(in);
      grid.addRow(row);
    }
    return grid;
  }
case FREE_FORM_DESIGN:
{
  FreeFormItemDesign freeForm=new FreeFormItemDesign();
  readFreeForm(dis,freeForm);
  int count=IOUtil.readInt(in);
  for (int i=0; i < count; i++) {
    ReportItemDesign item=(ReportItemDesign)readDesign(in);
    freeForm.addItem(item);
  }
  return freeForm;
}
case ROW_DESIGN:
{
RowDesign row=new RowDesign();
readRow(dis,row);
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
  CellDesign cell=(CellDesign)readDesign(in);
  row.addCell(cell);
}
return row;
}
case CELL_DESIGN:
{
CellDesign cell=new CellDesign();
readCell(dis,cell);
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
ReportItemDesign item=(ReportItemDesign)readDesign(in);
cell.addContent(item);
}
return cell;
}
case LIST_DESIGN:
{
ListItemDesign list=new ListItemDesign();
readList(dis,list);
if (IOUtil.readBool(in)) {
ListBandDesign header=(ListBandDesign)readDesign(in);
list.setHeader(header);
}
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
ListGroupDesign group=(ListGroupDesign)readDesign(in);
list.addGroup(group);
}
if (IOUtil.readBool(in)) {
ListBandDesign detail=(ListBandDesign)readDesign(in);
list.setDetail(detail);
}
if (IOUtil.readBool(in)) {
ListBandDesign footer=(ListBandDesign)readDesign(in);
list.setFooter(footer);
}
return list;
}
case LIST_GROUP_DESIGN:
{
ListGroupDesign listGroup=new ListGroupDesign();
readListGroup(dis,listGroup);
if (IOUtil.readBool(in)) {
ListBandDesign groupHeader=(ListBandDesign)readDesign(in);
listGroup.setHeader(groupHeader);
}
if (IOUtil.readBool(in)) {
ListBandDesign footer=(ListBandDesign)readDesign(in);
listGroup.setFooter(footer);
}
return listGroup;
}
case LIST_BAND_DESIGN:
{
ListBandDesign listBand=new ListBandDesign();
readListBand(dis,listBand);
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
ReportItemDesign item=(ReportItemDesign)readDesign(in);
listBand.addContent(item);
}
return listBand;
}
case TABLE_DESIGN:
{
TableItemDesign table=new TableItemDesign();
readTable(dis,table);
if (IOUtil.readBool(in)) {
TableBandDesign header=(TableBandDesign)readDesign(in);
table.setHeader(header);
}
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
TableGroupDesign group=(TableGroupDesign)readDesign(in);
table.addGroup(group);
}
if (IOUtil.readBool(in)) {
TableBandDesign detail=(TableBandDesign)readDesign(in);
table.setDetail(detail);
}
if (IOUtil.readBool(in)) {
TableBandDesign footer=(TableBandDesign)readDesign(in);
table.setFooter(footer);
}
return table;
}
case TABLE_GROUP_DESIGN:
{
TableGroupDesign tableGroup=new TableGroupDesign();
readTableGroup(dis,tableGroup);
if (IOUtil.readBool(in)) {
TableBandDesign groupHeader=(TableBandDesign)readDesign(in);
tableGroup.setHeader(groupHeader);
}
if (IOUtil.readBool(in)) {
TableBandDesign footer=(TableBandDesign)readDesign(in);
tableGroup.setFooter(footer);
}
return tableGroup;
}
case TABLE_BAND_DESIGN:
{
TableBandDesign band=new TableBandDesign();
readTableBand(dis,band);
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
RowDesign row=(RowDesign)readDesign(in);
band.addContent(row);
}
return band;
}
case LABEL_DESIGN:
{
LabelItemDesign design=new LabelItemDesign();
readLabel(dis,design);
return design;
}
case TEXT_DESIGN:
{
TextItemDesign design=new TextItemDesign();
readText(dis,design);
return design;
}
case DATA_DESIGN:
{
DataItemDesign design=new DataItemDesign();
readData(dis,design);
return design;
}
case MULTI_LINE_DESIGN:
{
DynamicTextItemDesign design=new DynamicTextItemDesign();
readDynamicText(dis,design);
return design;
}
case IMAGE_DESIGN:
{
ImageItemDesign design=new ImageItemDesign();
readImage(dis,design);
return design;
}
case TEMPLATE_DESIGN:
{
TemplateDesign design=new TemplateDesign();
readTemplate(dis,design);
return design;
}
case EXTENDED_DESIGN:
{
ExtendedItemDesign design=new ExtendedItemDesign();
readExtended(dis,design);
if (version >= ENGINE_IR_VERSION_3) {
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
design.getChildren().add(readDesign(in));
}
}
return design;
}
case AUTO_TEXT_DESIGN:
{
AutoTextItemDesign design=new AutoTextItemDesign();
readAutoText(dis,design);
return design;
}
default :
throw new IOException(""String_Node_Str"" + designType);
}
}","protected Object readDesign(DataInputStream in) throws IOException {
  short designType=IOUtil.readShort(in);
  byte[] buffer=IOUtil.readBytes(in);
  DataInputStream dis=new DataInputStream(new ByteArrayInputStream(buffer));
switch (designType) {
case SIMPLE_MASTER_PAGE_DESIGN:
{
      SimpleMasterPageDesign masterPage=new SimpleMasterPageDesign();
      readSimpleMasterPage(dis,masterPage);
      int count=IOUtil.readInt(in);
      for (int i=0; i < count; i++) {
        ReportItemDesign item=(ReportItemDesign)readDesign(in);
        masterPage.addHeader(item);
      }
      count=IOUtil.readInt(in);
      for (int i=0; i < count; i++) {
        ReportItemDesign item=(ReportItemDesign)readDesign(in);
        masterPage.addFooter(item);
      }
      processClassStyleCompatibility(masterPage);
      return masterPage;
    }
case GRID_DESIGN:
{
    GridItemDesign grid=new GridItemDesign();
    readGrid(dis,grid);
    int count=IOUtil.readInt(in);
    for (int i=0; i < count; i++) {
      RowDesign row=(RowDesign)readDesign(in);
      grid.addRow(row);
    }
    processClassStyleCompatibility(grid);
    return grid;
  }
case FREE_FORM_DESIGN:
{
  FreeFormItemDesign freeForm=new FreeFormItemDesign();
  readFreeForm(dis,freeForm);
  int count=IOUtil.readInt(in);
  for (int i=0; i < count; i++) {
    ReportItemDesign item=(ReportItemDesign)readDesign(in);
    freeForm.addItem(item);
  }
  processClassStyleCompatibility(freeForm);
  return freeForm;
}
case ROW_DESIGN:
{
RowDesign row=new RowDesign();
readRow(dis,row);
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
  CellDesign cell=(CellDesign)readDesign(in);
  row.addCell(cell);
}
processClassStyleCompatibility(row);
return row;
}
case CELL_DESIGN:
{
CellDesign cell=new CellDesign();
readCell(dis,cell);
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
ReportItemDesign item=(ReportItemDesign)readDesign(in);
cell.addContent(item);
}
processClassStyleCompatibility(cell);
return cell;
}
case LIST_DESIGN:
{
ListItemDesign list=new ListItemDesign();
readList(dis,list);
if (IOUtil.readBool(in)) {
ListBandDesign header=(ListBandDesign)readDesign(in);
list.setHeader(header);
}
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
ListGroupDesign group=(ListGroupDesign)readDesign(in);
list.addGroup(group);
}
if (IOUtil.readBool(in)) {
ListBandDesign detail=(ListBandDesign)readDesign(in);
list.setDetail(detail);
}
if (IOUtil.readBool(in)) {
ListBandDesign footer=(ListBandDesign)readDesign(in);
list.setFooter(footer);
}
processClassStyleCompatibility(list);
return list;
}
case LIST_GROUP_DESIGN:
{
ListGroupDesign listGroup=new ListGroupDesign();
readListGroup(dis,listGroup);
if (IOUtil.readBool(in)) {
ListBandDesign groupHeader=(ListBandDesign)readDesign(in);
listGroup.setHeader(groupHeader);
}
if (IOUtil.readBool(in)) {
ListBandDesign footer=(ListBandDesign)readDesign(in);
listGroup.setFooter(footer);
}
processClassStyleCompatibility(listGroup);
return listGroup;
}
case LIST_BAND_DESIGN:
{
ListBandDesign listBand=new ListBandDesign();
readListBand(dis,listBand);
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
ReportItemDesign item=(ReportItemDesign)readDesign(in);
listBand.addContent(item);
}
processClassStyleCompatibility(listBand);
return listBand;
}
case TABLE_DESIGN:
{
TableItemDesign table=new TableItemDesign();
readTable(dis,table);
if (IOUtil.readBool(in)) {
TableBandDesign header=(TableBandDesign)readDesign(in);
table.setHeader(header);
}
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
TableGroupDesign group=(TableGroupDesign)readDesign(in);
table.addGroup(group);
}
if (IOUtil.readBool(in)) {
TableBandDesign detail=(TableBandDesign)readDesign(in);
table.setDetail(detail);
}
if (IOUtil.readBool(in)) {
TableBandDesign footer=(TableBandDesign)readDesign(in);
table.setFooter(footer);
}
processClassStyleCompatibility(table);
return table;
}
case TABLE_GROUP_DESIGN:
{
TableGroupDesign tableGroup=new TableGroupDesign();
readTableGroup(dis,tableGroup);
if (IOUtil.readBool(in)) {
TableBandDesign groupHeader=(TableBandDesign)readDesign(in);
tableGroup.setHeader(groupHeader);
}
if (IOUtil.readBool(in)) {
TableBandDesign footer=(TableBandDesign)readDesign(in);
tableGroup.setFooter(footer);
}
processClassStyleCompatibility(tableGroup);
return tableGroup;
}
case TABLE_BAND_DESIGN:
{
TableBandDesign band=new TableBandDesign();
readTableBand(dis,band);
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
RowDesign row=(RowDesign)readDesign(in);
band.addContent(row);
}
processClassStyleCompatibility(band);
return band;
}
case LABEL_DESIGN:
{
LabelItemDesign design=new LabelItemDesign();
readLabel(dis,design);
processClassStyleCompatibility(design);
return design;
}
case TEXT_DESIGN:
{
TextItemDesign design=new TextItemDesign();
readText(dis,design);
processClassStyleCompatibility(design);
return design;
}
case DATA_DESIGN:
{
DataItemDesign design=new DataItemDesign();
readData(dis,design);
processClassStyleCompatibility(design);
return design;
}
case MULTI_LINE_DESIGN:
{
DynamicTextItemDesign design=new DynamicTextItemDesign();
readDynamicText(dis,design);
processClassStyleCompatibility(design);
return design;
}
case IMAGE_DESIGN:
{
ImageItemDesign design=new ImageItemDesign();
readImage(dis,design);
processClassStyleCompatibility(design);
return design;
}
case TEMPLATE_DESIGN:
{
TemplateDesign design=new TemplateDesign();
readTemplate(dis,design);
processClassStyleCompatibility(design);
return design;
}
case EXTENDED_DESIGN:
{
ExtendedItemDesign design=new ExtendedItemDesign();
readExtended(dis,design);
if (version >= ENGINE_IR_VERSION_3) {
int count=IOUtil.readInt(in);
for (int i=0; i < count; i++) {
design.getChildren().add(readDesign(in));
}
}
processClassStyleCompatibility(design);
return design;
}
case AUTO_TEXT_DESIGN:
{
AutoTextItemDesign design=new AutoTextItemDesign();
readAutoText(dis,design);
processClassStyleCompatibility(design);
return design;
}
default :
throw new IOException(""String_Node_Str"" + designType);
}
}",0.9314219980532696
70999,"private void readReport(DataInputStream dis) throws IOException {
  short num=IOUtil.readShort(dis);
  for (short i=0; i < num; i++) {
    short reportSegmentType=IOUtil.readShort(dis);
switch (reportSegmentType) {
case FIELD_REPORT_STYLES:
      readReportSytles(dis);
    break;
case FIELD_REPORT_NAMED_EXPRESSIONS:
  readReportNamedExpressions(dis);
break;
case FIELD_REPORT_MASTER_PAGES:
readReportPageSetup(dis);
break;
case FIELD_REPORT_BODY:
readReportBodyContent(dis);
break;
default :
throw new IOException(""String_Node_Str"" + reportSegmentType);
}
}
}","private void readReport(DataInputStream dis) throws IOException {
  short num=IOUtil.readShort(dis);
  for (short i=0; i < num; i++) {
    short reportSegmentType=IOUtil.readShort(dis);
switch (reportSegmentType) {
case FIELD_REPORT_STYLES:
      readReportSytles(dis);
    break;
case FIELD_ROOT_STYLE:
  reportDesign.setRootStyle(readStyle(dis));
break;
case FIELD_REPORT_NAMED_EXPRESSIONS:
readReportNamedExpressions(dis);
break;
case FIELD_REPORT_MASTER_PAGES:
readReportPageSetup(dis);
break;
case FIELD_REPORT_BODY:
readReportBodyContent(dis);
break;
default :
throw new IOException(""String_Node_Str"" + reportSegmentType);
}
}
String rootStyleName=reportDesign.getRootStyleName();
if (rootStyleName != null && reportDesign.getRootStyle() == null) {
reportDesign.setRootStyle(reportDesign.findStyle(rootStyleName));
}
}",0.8072202166064982
71000,"protected void readStyledElementField(DataInputStream in,StyledElementDesign design,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_STYLE_CLASS:
    String styleClass=IOUtil.readString(in);
  design.setStyleClass(styleClass);
break;
case FIELD_MAP:
MapDesign map=readMap(in);
design.setMap(map);
break;
case FIELD_HIGHLIGHT:
HighlightDesign highlight=readHighlight(in);
design.setHighlight(highlight);
break;
default :
readReportElementField(in,design,fieldType);
}
}","protected void readStyledElementField(DataInputStream in,StyledElementDesign design,short fieldType) throws IOException {
switch (fieldType) {
case FIELD_STYLE_CLASS:
    String styleClass=IOUtil.readString(in);
  design.setStyleClass(styleClass);
break;
case FIELD_STYLE:
design.setStyle(readStyle(in));
break;
case FIELD_MAP:
MapDesign map=readMap(in);
design.setMap(map);
break;
case FIELD_HIGHLIGHT:
HighlightDesign highlight=readHighlight(in);
design.setHighlight(highlight);
break;
default :
readReportElementField(in,design,fieldType);
}
}",0.944927536231884
