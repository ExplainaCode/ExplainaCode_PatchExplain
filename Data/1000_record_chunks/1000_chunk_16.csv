record_number,buggy_code,fixed_code,code_similarity
15001,"public static int generateIdFor(Note note){
  return StringUtils.getMd5IntHash(note.getSubject() + note.getType()).intValue();
}","public static int generateIdFor(Note note){
  if (note == null) {
    return 0;
  }
  return StringUtils.getMd5IntHash(note.getSubject() + note.getType()).intValue();
}",0.8648648648648649
15002,"public Note getNoteById(int id){
  Cursor cursor=db.query(NOTES_TABLE,new String[]{""String_Node_Str""},null,null,null,""String_Node_Str"" + id,null,null);
  cursor.moveToFirst();
  try {
    JSONObject jsonNote=new JSONObject(cursor.getString(0));
    return new Note(jsonNote);
  }
 catch (  JSONException e) {
    Log.e(WordPress.TAG,""String_Node_Str"" + e);
    return null;
  }
}","public Note getNoteById(int id){
  Cursor cursor=db.query(NOTES_TABLE,new String[]{""String_Node_Str""},""String_Node_Str"" + id,null,null,null,null);
  cursor.moveToFirst();
  try {
    JSONObject jsonNote=new JSONObject(cursor.getString(0));
    return new Note(jsonNote);
  }
 catch (  JSONException e) {
    Log.e(WordPress.TAG,""String_Node_Str"" + e);
    return null;
  }
catch (  CursorIndexOutOfBoundsException e) {
    Log.v(WordPress.TAG,""String_Node_Str"" + e);
    return null;
  }
}",0.8387096774193549
15003,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  createMenuDrawer(R.layout.notifications);
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(true);
  setTitle(getResources().getString(R.string.notifications));
  FragmentManager fm=getSupportFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  mNotesList=(NotificationsListFragment)fm.findFragmentById(R.id.notes_list);
  mNotesList.setNoteProvider(new NoteProvider());
  mNotesList.setOnNoteClickListener(new NoteClickListener());
  notes=WordPress.wpDB.loadNotes();
  fragmentDetectors.add(new FragmentDetector(){
    @Override public Fragment getFragment(    Note note){
      if (note.isCommentType()) {
        Fragment fragment=new NoteCommentFragment();
        return fragment;
      }
      return null;
    }
  }
);
  fragmentDetectors.add(new FragmentDetector(){
    @Override public Fragment getFragment(    Note note){
      if (note.isSingleLineListTemplate()) {
        Fragment fragment=new SingleLineListFragment();
        return fragment;
      }
      return null;
    }
  }
);
  fragmentDetectors.add(new FragmentDetector(){
    @Override public Fragment getFragment(    Note note){
      Log.d(TAG,String.format(""String_Node_Str"",note.isBigBadgeTemplate()));
      if (note.isBigBadgeTemplate()) {
        Fragment fragment=new BigBadgeFragment();
        return fragment;
      }
      return null;
    }
  }
);
  GCMIntentService.activeNotificationsMap.clear();
  if (savedInstanceState == null)   launchWithNoteId();
  refreshNotificationsListFragment(notes);
  if (savedInstanceState != null)   popNoteDetail();
  if (mBroadcastReceiver == null)   createBroadcastReceiver();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  createMenuDrawer(R.layout.notifications);
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(true);
  setTitle(getResources().getString(R.string.notifications));
  FragmentManager fm=getSupportFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  mNotesList=(NotificationsListFragment)fm.findFragmentById(R.id.notes_list);
  mNotesList.setNoteProvider(new NoteProvider());
  mNotesList.setOnNoteClickListener(new NoteClickListener());
  notes=WordPress.wpDB.getLatestNotes();
  fragmentDetectors.add(new FragmentDetector(){
    @Override public Fragment getFragment(    Note note){
      if (note.isCommentType()) {
        Fragment fragment=new NoteCommentFragment();
        return fragment;
      }
      return null;
    }
  }
);
  fragmentDetectors.add(new FragmentDetector(){
    @Override public Fragment getFragment(    Note note){
      if (note.isSingleLineListTemplate()) {
        Fragment fragment=new SingleLineListFragment();
        return fragment;
      }
      return null;
    }
  }
);
  fragmentDetectors.add(new FragmentDetector(){
    @Override public Fragment getFragment(    Note note){
      Log.d(TAG,String.format(""String_Node_Str"",note.isBigBadgeTemplate()));
      if (note.isBigBadgeTemplate()) {
        Fragment fragment=new BigBadgeFragment();
        return fragment;
      }
      return null;
    }
  }
);
  GCMIntentService.activeNotificationsMap.clear();
  if (savedInstanceState == null)   launchWithNoteId();
  refreshNotificationsListFragment(notes);
  if (savedInstanceState != null)   popNoteDetail();
  if (mBroadcastReceiver == null)   createBroadcastReceiver();
}",0.996330793113181
15004,"@Override public void onReceive(Context context,Intent intent){
  notes=WordPress.wpDB.loadNotes();
  refreshNotificationsListFragment(notes);
}","@Override public void onReceive(Context context,Intent intent){
  notes=WordPress.wpDB.getLatestNotes();
  refreshNotificationsListFragment(notes);
}",0.962457337883959
15005,"private void createBroadcastReceiver(){
  mBroadcastReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      notes=WordPress.wpDB.loadNotes();
      refreshNotificationsListFragment(notes);
    }
  }
;
}","private void createBroadcastReceiver(){
  mBroadcastReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      notes=WordPress.wpDB.getLatestNotes();
      refreshNotificationsListFragment(notes);
    }
  }
;
}",0.9754253308128544
15006,"public void testAddNote_issue134(){
  SQLiteDatabase db=TestUtils.loadDBFromDump(targetContext,testContext,""String_Node_Str"");
  WordPressDB wpdb=new WordPressDB(targetContext);
  Bundle b=new Bundle();
  b.putString(""String_Node_Str"",""String_Node_Str"");
  b.putString(""String_Node_Str"",""String_Node_Str"");
  b.putString(""String_Node_Str"",""String_Node_Str"");
  b.putString(""String_Node_Str"",""String_Node_Str"");
  b.putString(""String_Node_Str"",""String_Node_Str"");
  b.putString(""String_Node_Str"",""String_Node_Str"");
  b.putString(""String_Node_Str"",""String_Node_Str"");
  Note note=new Note(b);
  wpdb.addNote(note,true);
  db.close();
}","public void testAddNote_issue134(){
  SQLiteDatabase db=TestUtils.loadDBFromDump(targetContext,testContext,""String_Node_Str"");
  WordPressDB wpdb=new WordPressDB(targetContext);
  Note note=createEmptyNote();
  wpdb.addNote(note,true);
  db.close();
}",0.5107344632768361
15007,"@Override protected Bitmap doInBackground(String... params){
  path=params[0];
  BitmapFactory.Options bfo=new BitmapFactory.Options();
  bfo.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(path,bfo);
  bfo.inSampleSize=calculateInSampleSize(bfo,targetWidth,targetHeight);
  bfo.inJustDecodeBounds=false;
  return BitmapFactory.decodeFile(path,bfo);
}","@Override protected Bitmap doInBackground(String... params){
  path=params[0];
  BitmapFactory.Options bfo=new BitmapFactory.Options();
  bfo.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(path,bfo);
  bfo.inSampleSize=calculateInSampleSize(bfo,targetWidth,targetHeight);
  bfo.inJustDecodeBounds=false;
  try {
    File f=new File(path);
    ExifInterface exif=new ExifInterface(f.getPath());
    int orientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL);
    int angle=0;
    if (orientation == ExifInterface.ORIENTATION_NORMAL) {
      return BitmapFactory.decodeFile(path,bfo);
    }
 else     if (orientation == ExifInterface.ORIENTATION_ROTATE_90) {
      angle=90;
    }
 else     if (orientation == ExifInterface.ORIENTATION_ROTATE_180) {
      angle=180;
    }
 else     if (orientation == ExifInterface.ORIENTATION_ROTATE_270) {
      angle=270;
    }
    Matrix mat=new Matrix();
    mat.postRotate(angle);
    Bitmap bmp=BitmapFactory.decodeStream(new FileInputStream(f),null,bfo);
    return Bitmap.createBitmap(bmp,0,0,bmp.getWidth(),bmp.getHeight(),mat,true);
  }
 catch (  IOException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
  }
catch (  OutOfMemoryError oom) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
  }
  return null;
}",0.4271961492178098
15008,"public boolean saveMediaFile(MediaFile mf){
  boolean returnValue=false;
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",mf.getPostID());
  values.put(""String_Node_Str"",mf.getFilePath());
  values.put(""String_Node_Str"",mf.getFileName());
  values.put(""String_Node_Str"",mf.getTitle());
  values.put(""String_Node_Str"",mf.getDescription());
  values.put(""String_Node_Str"",mf.getCaption());
  values.put(""String_Node_Str"",mf.getHorizontalAlignment());
  values.put(""String_Node_Str"",mf.getWidth());
  values.put(""String_Node_Str"",mf.getHeight());
  values.put(""String_Node_Str"",mf.getMIMEType());
  values.put(""String_Node_Str"",mf.isFeatured());
  values.put(""String_Node_Str"",mf.isVideo());
  values.put(""String_Node_Str"",mf.isFeaturedInPost());
  values.put(""String_Node_Str"",mf.getFileURL());
  values.put(""String_Node_Str"",mf.getThumbnailURL());
  values.put(""String_Node_Str"",mf.getMediaId());
  values.put(""String_Node_Str"",mf.getBlogId());
  values.put(""String_Node_Str"",mf.getDateCreatedGMT());
  values.put(""String_Node_Str"",mf.getUploadState());
synchronized (this) {
    int result=0;
    if (mf.getMediaId() != null) {
      result=db.update(MEDIA_TABLE,values,""String_Node_Str"",new String[]{mf.getBlogId(),String.valueOf(mf.getMediaId())});
    }
    if (result == 0)     returnValue=db.insert(MEDIA_TABLE,null,values) > 0;
  }
  return (returnValue);
}","public void saveMediaFile(MediaFile mf){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",mf.getPostID());
  values.put(""String_Node_Str"",mf.getFilePath());
  values.put(""String_Node_Str"",mf.getFileName());
  values.put(""String_Node_Str"",mf.getTitle());
  values.put(""String_Node_Str"",mf.getDescription());
  values.put(""String_Node_Str"",mf.getCaption());
  values.put(""String_Node_Str"",mf.getHorizontalAlignment());
  values.put(""String_Node_Str"",mf.getWidth());
  values.put(""String_Node_Str"",mf.getHeight());
  values.put(""String_Node_Str"",mf.getMIMEType());
  values.put(""String_Node_Str"",mf.isFeatured());
  values.put(""String_Node_Str"",mf.isVideo());
  values.put(""String_Node_Str"",mf.isFeaturedInPost());
  values.put(""String_Node_Str"",mf.getFileURL());
  values.put(""String_Node_Str"",mf.getThumbnailURL());
  values.put(""String_Node_Str"",mf.getMediaId());
  values.put(""String_Node_Str"",mf.getBlogId());
  values.put(""String_Node_Str"",mf.getDateCreatedGMT());
  values.put(""String_Node_Str"",mf.getUploadState());
synchronized (this) {
    int result=0;
    boolean isMarkedForDelete=false;
    if (mf.getMediaId() != null) {
      Cursor cursor=db.rawQuery(""String_Node_Str"" + MEDIA_TABLE + ""String_Node_Str"",new String[]{mf.getMediaId()});
      if (cursor != null && cursor.moveToFirst()) {
        isMarkedForDelete=""String_Node_Str"".equals(cursor.getString(0));
      }
      if (!isMarkedForDelete)       result=db.update(MEDIA_TABLE,values,""String_Node_Str"",new String[]{mf.getBlogId(),mf.getMediaId()});
    }
    if (result == 0 && !isMarkedForDelete)     db.insert(MEDIA_TABLE,null,values);
  }
}",0.797886393659181
15009,"@Override protected void bindChildView(View view,Context context,Cursor cursor,boolean isLastChild){
  String name=cursor.getString(cursor.getColumnIndex(StatsReferrersTable.Columns.NAME));
  int total=cursor.getInt(cursor.getColumnIndex(StatsReferrersTable.Columns.TOTAL));
  TextView entryTextView=(TextView)view.findViewById(R.id.stats_list_cell_entry);
  if (name.startsWith(""String_Node_Str"")) {
    Spanned link=Html.fromHtml(""String_Node_Str"" + name + ""String_Node_Str""+ name+ ""String_Node_Str"");
    entryTextView.setText(link);
    entryTextView.setMovementMethod(LinkMovementMethod.getInstance());
  }
 else {
    entryTextView.setText(name);
  }
  DecimalFormat formatter=(DecimalFormat)DecimalFormat.getInstance(Locale.getDefault());
  TextView totalsTextView=(TextView)view.findViewById(R.id.stats_list_cell_total);
  totalsTextView.setText(formatter.format(total));
}","@Override protected void bindChildView(View view,Context context,Cursor cursor,boolean isLastChild){
  String name=cursor.getString(cursor.getColumnIndex(StatsReferrersTable.Columns.NAME));
  int total=cursor.getInt(cursor.getColumnIndex(StatsReferrersTable.Columns.TOTAL));
  TextView entryTextView=(TextView)view.findViewById(R.id.stats_list_cell_entry);
  if (name.startsWith(""String_Node_Str"")) {
    Spanned link=Html.fromHtml(""String_Node_Str"" + name + ""String_Node_Str""+ name+ ""String_Node_Str"");
    entryTextView.setText(link);
    entryTextView.setMovementMethod(LinkMovementMethod.getInstance());
  }
 else {
    entryTextView.setText(name);
    entryTextView.setMovementMethod(null);
  }
  DecimalFormat formatter=(DecimalFormat)DecimalFormat.getInstance(Locale.getDefault());
  TextView totalsTextView=(TextView)view.findViewById(R.id.stats_list_cell_total);
  totalsTextView.setText(formatter.format(total));
}",0.9761772853185596
15010,"@Override protected void bindChildView(View view,Context context,Cursor cursor,boolean isLastChild){
  String name=cursor.getString(cursor.getColumnIndex(StatsReferrersTable.Columns.NAME));
  int total=cursor.getInt(cursor.getColumnIndex(StatsReferrersTable.Columns.TOTAL));
  TextView entryTextView=(TextView)view.findViewById(R.id.stats_list_cell_entry);
  if (name.startsWith(""String_Node_Str"")) {
    Spanned link=Html.fromHtml(""String_Node_Str"" + name + ""String_Node_Str""+ name+ ""String_Node_Str"");
    entryTextView.setText(link);
    entryTextView.setMovementMethod(LinkMovementMethod.getInstance());
  }
 else {
    entryTextView.setText(name);
  }
  DecimalFormat formatter=(DecimalFormat)DecimalFormat.getInstance(Locale.getDefault());
  TextView totalsTextView=(TextView)view.findViewById(R.id.stats_list_cell_total);
  totalsTextView.setText(formatter.format(total));
}","@Override protected void bindChildView(View view,Context context,Cursor cursor,boolean isLastChild){
  String name=cursor.getString(cursor.getColumnIndex(StatsReferrersTable.Columns.NAME));
  int total=cursor.getInt(cursor.getColumnIndex(StatsReferrersTable.Columns.TOTAL));
  TextView entryTextView=(TextView)view.findViewById(R.id.stats_list_cell_entry);
  if (name.startsWith(""String_Node_Str"")) {
    Spanned link=Html.fromHtml(""String_Node_Str"" + name + ""String_Node_Str""+ name+ ""String_Node_Str"");
    entryTextView.setText(link);
    entryTextView.setMovementMethod(LinkMovementMethod.getInstance());
  }
 else {
    entryTextView.setText(name);
    entryTextView.setMovementMethod(null);
  }
  DecimalFormat formatter=(DecimalFormat)DecimalFormat.getInstance(Locale.getDefault());
  TextView totalsTextView=(TextView)view.findViewById(R.id.stats_list_cell_total);
  totalsTextView.setText(formatter.format(total));
}",0.9761772853185596
15011,"@Override protected void bindGroupView(View view,Context context,Cursor cursor,boolean isExpanded){
  String name=cursor.getString(cursor.getColumnIndex(StatsReferrerGroupsTable.Columns.NAME));
  int total=cursor.getInt(cursor.getColumnIndex(StatsReferrerGroupsTable.Columns.TOTAL));
  String url=cursor.getString(cursor.getColumnIndex(StatsReferrerGroupsTable.Columns.URL));
  String icon=cursor.getString(cursor.getColumnIndex(StatsReferrerGroupsTable.Columns.ICON));
  int children=cursor.getInt(cursor.getColumnIndex(StatsReferrerGroupsTable.Columns.CHILDREN));
  boolean urlValid=(url != null && url.length() > 0);
  toggleChevrons(children > 0,isExpanded,view);
  TextView entryTextView=(TextView)view.findViewById(R.id.stats_group_cell_entry);
  if (urlValid) {
    Spanned link=Html.fromHtml(""String_Node_Str"" + url + ""String_Node_Str""+ name+ ""String_Node_Str"");
    entryTextView.setText(link);
    entryTextView.setMovementMethod(LinkMovementMethod.getInstance());
  }
 else {
    entryTextView.setText(name);
  }
  DecimalFormat formatter=(DecimalFormat)DecimalFormat.getInstance(Locale.getDefault());
  TextView totalsTextView=(TextView)view.findViewById(R.id.stats_group_cell_total);
  totalsTextView.setText(formatter.format(total));
  view.findViewById(R.id.stats_group_cell_image_frame).setVisibility(View.VISIBLE);
  NetworkImageView imageView=(NetworkImageView)view.findViewById(R.id.stats_group_cell_image);
  ImageView errorImageView=(ImageView)view.findViewById(R.id.stats_group_cell_blank_image);
  if (icon != null && icon.length() > 0) {
    imageView.setErrorImageResId(R.drawable.stats_blank_image);
    imageView.setDefaultImageResId(R.drawable.stats_blank_image);
    imageView.setImageUrl(icon,WordPress.imageLoader);
    imageView.setVisibility(View.VISIBLE);
    errorImageView.setVisibility(View.GONE);
  }
 else {
    imageView.setVisibility(View.GONE);
    errorImageView.setVisibility(View.VISIBLE);
  }
}","@Override protected void bindGroupView(View view,Context context,Cursor cursor,boolean isExpanded){
  String name=cursor.getString(cursor.getColumnIndex(StatsReferrerGroupsTable.Columns.NAME));
  int total=cursor.getInt(cursor.getColumnIndex(StatsReferrerGroupsTable.Columns.TOTAL));
  String url=cursor.getString(cursor.getColumnIndex(StatsReferrerGroupsTable.Columns.URL));
  String icon=cursor.getString(cursor.getColumnIndex(StatsReferrerGroupsTable.Columns.ICON));
  int children=cursor.getInt(cursor.getColumnIndex(StatsReferrerGroupsTable.Columns.CHILDREN));
  boolean urlValid=(url != null && url.length() > 0);
  toggleChevrons(children > 0,isExpanded,view);
  TextView entryTextView=(TextView)view.findViewById(R.id.stats_group_cell_entry);
  if (urlValid) {
    Spanned link=Html.fromHtml(""String_Node_Str"" + url + ""String_Node_Str""+ name+ ""String_Node_Str"");
    entryTextView.setText(link);
    entryTextView.setMovementMethod(LinkMovementMethod.getInstance());
  }
 else {
    entryTextView.setText(name);
    entryTextView.setMovementMethod(null);
  }
  DecimalFormat formatter=(DecimalFormat)DecimalFormat.getInstance(Locale.getDefault());
  TextView totalsTextView=(TextView)view.findViewById(R.id.stats_group_cell_total);
  totalsTextView.setText(formatter.format(total));
  view.findViewById(R.id.stats_group_cell_image_frame).setVisibility(View.VISIBLE);
  NetworkImageView imageView=(NetworkImageView)view.findViewById(R.id.stats_group_cell_image);
  ImageView errorImageView=(ImageView)view.findViewById(R.id.stats_group_cell_blank_image);
  if (icon != null && icon.length() > 0) {
    imageView.setErrorImageResId(R.drawable.stats_blank_image);
    imageView.setDefaultImageResId(R.drawable.stats_blank_image);
    imageView.setImageUrl(icon,WordPress.imageLoader);
    imageView.setVisibility(View.VISIBLE);
    errorImageView.setVisibility(View.GONE);
  }
 else {
    imageView.setVisibility(View.GONE);
    errorImageView.setVisibility(View.VISIBLE);
  }
}",0.9890390007647208
15012,"private void loadNetworkImage(Cursor cursor,NetworkImageView imageView){
  String thumbnailURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  Uri uri=Uri.parse(thumbnailURL);
  String filepath=uri.getLastPathSegment();
  int placeholderResId=MediaUtils.getPlaceholder(filepath);
  imageView.setErrorImageResId(placeholderResId);
  imageView.setDefaultImageResId(placeholderResId);
  if (thumbnailURL != null && MediaUtils.isValidImage(filepath)) {
    imageView.setTag(thumbnailURL);
    imageView.setImageUrl(thumbnailURL,WordPress.imageLoader);
  }
 else {
    imageView.setImageResource(placeholderResId);
  }
}","private void loadNetworkImage(Cursor cursor,NetworkImageView imageView){
  String thumbnailURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  Uri uri=Uri.parse(thumbnailURL);
  String filepath=uri.getLastPathSegment();
  int placeholderResId=MediaUtils.getPlaceholder(filepath);
  imageView.setImageResource(0);
  imageView.setErrorImageResId(placeholderResId);
  imageView.setDefaultImageResId(placeholderResId);
  if (thumbnailURL != null && MediaUtils.isValidImage(filepath)) {
    imageView.setTag(thumbnailURL);
    imageView.setImageUrl(thumbnailURL,WordPress.imageLoader);
  }
 else {
    imageView.setImageResource(placeholderResId);
  }
}",0.9744384198295896
15013,"private void loadNetworkImage(Cursor cursor,NetworkImageView imageView){
  String thumbnailURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  Uri uri=Uri.parse(thumbnailURL);
  String filepath=uri.getLastPathSegment();
  int placeholderResId=MediaUtils.getPlaceholder(filepath);
  imageView.setErrorImageResId(placeholderResId);
  imageView.setDefaultImageResId(placeholderResId);
  if (thumbnailURL != null && MediaUtils.isValidImage(filepath)) {
    imageView.setTag(thumbnailURL);
    imageView.setImageUrl(thumbnailURL,WordPress.imageLoader);
  }
 else {
    imageView.setImageUrl(""String_Node_Str"",WordPress.imageLoader);
  }
}","private void loadNetworkImage(Cursor cursor,NetworkImageView imageView){
  String thumbnailURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  Uri uri=Uri.parse(thumbnailURL);
  String filepath=uri.getLastPathSegment();
  int placeholderResId=MediaUtils.getPlaceholder(filepath);
  imageView.setErrorImageResId(placeholderResId);
  imageView.setDefaultImageResId(placeholderResId);
  if (thumbnailURL != null && MediaUtils.isValidImage(filepath)) {
    imageView.setTag(thumbnailURL);
    imageView.setImageUrl(thumbnailURL,WordPress.imageLoader);
  }
 else {
    imageView.setImageResource(placeholderResId);
  }
}",0.9467084639498432
15014,"/** 
 * @param canvas
 */
@Override protected void onDraw(Canvas canvas){
  paint.setStrokeWidth(0);
  if (labelTextHeight == null || verLabelTextWidth == null) {
    paint.setTextSize(getGraphViewStyle().getTextSize());
    double testY=((getMaxY() - getMinY()) * 0.783) + getMinY();
    String testLabel=formatLabel(testY,false);
    paint.getTextBounds(testLabel,0,testLabel.length(),textBounds);
    labelTextHeight=(textBounds.height());
    verLabelTextWidth=(textBounds.width());
  }
  if (getGraphViewStyle().getVerticalLabelsWidth() == 0 && getLayoutParams().width != verLabelTextWidth + GraphViewConfig.BORDER) {
    setLayoutParams(new LayoutParams((int)(verLabelTextWidth + GraphViewConfig.BORDER),LayoutParams.FILL_PARENT));
  }
 else   if (getGraphViewStyle().getVerticalLabelsWidth() != 0 && getGraphViewStyle().getVerticalLabelsWidth() != getLayoutParams().width) {
    setLayoutParams(new LayoutParams(getGraphViewStyle().getVerticalLabelsWidth(),LayoutParams.FILL_PARENT));
  }
  float border=GraphViewConfig.BORDER;
  border+=labelTextHeight;
  float height=getHeight();
  float graphheight=height - (2 * border);
  if (verlabels == null) {
    verlabels=generateVerlabels(graphheight);
  }
  paint.setTextAlign(Align.LEFT);
  int vers=verlabels.length - 1;
  for (int i=0; i < verlabels.length; i++) {
    float y=((graphheight / vers) * i) + border;
    paint.setColor(graphViewStyle.getVerticalLabelsColor());
    canvas.drawText(verlabels[i],0,y,paint);
  }
}","/** 
 * @param canvas
 */
@Override protected void onDraw(Canvas canvas){
  paint.setStrokeWidth(0);
  int padding=(int)dpToPx(8);
  if (labelTextHeight == null || verLabelTextWidth == null) {
    paint.setTextSize(getGraphViewStyle().getTextSize());
    double testY=((getMaxY() - getMinY()) * 0.783) + getMinY();
    String testLabel=formatLabel(testY,false);
    paint.getTextBounds(testLabel,0,testLabel.length(),textBounds);
    labelTextHeight=(textBounds.height());
    verLabelTextWidth=(textBounds.width()) + padding;
  }
  if (getGraphViewStyle().getVerticalLabelsWidth() == 0 && getLayoutParams().width != verLabelTextWidth + GraphViewConfig.BORDER) {
    setLayoutParams(new LayoutParams((int)(verLabelTextWidth + GraphViewConfig.BORDER),LayoutParams.FILL_PARENT));
  }
 else   if (getGraphViewStyle().getVerticalLabelsWidth() != 0 && getGraphViewStyle().getVerticalLabelsWidth() != getLayoutParams().width) {
    setLayoutParams(new LayoutParams(getGraphViewStyle().getVerticalLabelsWidth(),LayoutParams.FILL_PARENT));
  }
  float border=GraphViewConfig.BORDER;
  border+=labelTextHeight;
  float height=getHeight();
  float graphheight=height - (2 * border);
  if (verlabels == null) {
    verlabels=generateVerlabels(graphheight);
  }
  paint.setTextAlign(Align.RIGHT);
  int vers=verlabels.length - 1;
  for (int i=0; i < verlabels.length; i++) {
    float y=((graphheight / vers) * i) + border;
    paint.setColor(graphViewStyle.getVerticalLabelsColor());
    canvas.drawText(verlabels[i],0,y,paint);
  }
}",0.984359400998336
15015,"public GraphViewSeriesStyle(int color,int thickness){
  super();
  this.color=color;
  this.thickness=thickness;
}","public GraphViewSeriesStyle(int color,int thickness,float padding){
  super();
  this.color=color;
  this.thickness=thickness;
  this.padding=padding;
}",0.8571428571428571
15016,"public GraphViewStyle(int vLabelsColor,int hLabelsColor,int gridColor){
  this.verticalLabelsColor=vLabelsColor;
  this.horizontalLabelsColor=hLabelsColor;
  this.gridColor=gridColor;
}","public GraphViewStyle(int vLabelsColor,int hLabelsColor,int gridXColor,int gridYColor){
  this.verticalLabelsColor=vLabelsColor;
  this.horizontalLabelsColor=hLabelsColor;
  this.gridXColor=gridXColor;
  this.gridYColor=gridYColor;
}",0.8373205741626795
15017,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  setTitle(R.string.media_gallery_edit);
  setContentView(R.layout.media_gallery_activity);
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(true);
  FragmentManager fm=getSupportFragmentManager();
  mMediaGallery=(MediaGallery)getIntent().getSerializableExtra(PARAMS_MEDIA_GALLERY);
  if (mMediaGallery == null)   mMediaGallery=new MediaGallery();
  mMediaGalleryEditFragment=(MediaGalleryEditFragment)fm.findFragmentById(R.id.mediaGalleryEditFragment);
  mMediaGalleryEditFragment.setMediaIds(mMediaGallery.getIds());
  mMediaGallerySettingsFragment=(MediaGallerySettingsFragment)fm.findFragmentById(R.id.mediaGallerySettingsFragment);
  mMediaGallerySettingsFragment.setRandom(mMediaGallery.isRandom());
  mMediaGallerySettingsFragment.setNumColumns(mMediaGallery.getNumColumns());
  mMediaGallerySettingsFragment.setType(mMediaGallery.getType());
  mSlidingPanelLayout=(SlidingUpPanelLayout)findViewById(R.id.media_gallery_root);
  if (mSlidingPanelLayout != null) {
    mSlidingPanelLayout.setDragView(mMediaGallerySettingsFragment.getDragView());
    mSlidingPanelLayout.setPanelHeight((int)Utils.dpToPx(48));
    mSlidingPanelLayout.setPanelSlideListener(new PanelSlideListener(){
      @Override public void onPanelSlide(      View panel,      float slideOffset){
      }
      @Override public void onPanelExpanded(      View panel){
        mMediaGallerySettingsFragment.onPanelExpanded();
        mIsPanelCollapsed=false;
      }
      @Override public void onPanelCollapsed(      View panel){
        mMediaGallerySettingsFragment.onPanelCollapsed();
        mIsPanelCollapsed=true;
      }
    }
);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    finish();
    return;
  }
  setTitle(R.string.media_gallery_edit);
  setContentView(R.layout.media_gallery_activity);
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(true);
  FragmentManager fm=getSupportFragmentManager();
  mMediaGallery=(MediaGallery)getIntent().getSerializableExtra(PARAMS_MEDIA_GALLERY);
  if (mMediaGallery == null)   mMediaGallery=new MediaGallery();
  mMediaGalleryEditFragment=(MediaGalleryEditFragment)fm.findFragmentById(R.id.mediaGalleryEditFragment);
  mMediaGalleryEditFragment.setMediaIds(mMediaGallery.getIds());
  mMediaGallerySettingsFragment=(MediaGallerySettingsFragment)fm.findFragmentById(R.id.mediaGallerySettingsFragment);
  if (savedInstanceState == null) {
    mMediaGallerySettingsFragment.setRandom(mMediaGallery.isRandom());
    mMediaGallerySettingsFragment.setNumColumns(mMediaGallery.getNumColumns());
    mMediaGallerySettingsFragment.setType(mMediaGallery.getType());
  }
  mSlidingPanelLayout=(SlidingUpPanelLayout)findViewById(R.id.media_gallery_root);
  if (mSlidingPanelLayout != null) {
    mSlidingPanelLayout.setDragView(mMediaGallerySettingsFragment.getDragView());
    mSlidingPanelLayout.setPanelHeight((int)Utils.dpToPx(48));
    mSlidingPanelLayout.setPanelSlideListener(new PanelSlideListener(){
      @Override public void onPanelSlide(      View panel,      float slideOffset){
      }
      @Override public void onPanelExpanded(      View panel){
        mMediaGallerySettingsFragment.onPanelExpanded();
        mIsPanelCollapsed=false;
      }
      @Override public void onPanelCollapsed(      View panel){
        mMediaGallerySettingsFragment.onPanelCollapsed();
        mIsPanelCollapsed=true;
      }
    }
);
  }
}",0.9879518072289156
15018,"private synchronized void loadLocalImage(Cursor cursor,final ImageView imageView){
  final String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (MediaUtils.isValidImage(filePath)) {
    imageView.setTag(filePath);
    Bitmap bitmap=WordPress.localImageCache.get(filePath);
    if (bitmap != null) {
      imageView.setImageBitmap(bitmap);
    }
 else {
      imageView.setImageBitmap(null);
      boolean shouldFetch=false;
      List<BitmapReadyCallback> list;
      if (mFilePathToCallbackMap.containsKey(filePath)) {
        list=mFilePathToCallbackMap.get(filePath);
      }
 else {
        list=new ArrayList<MediaGridAdapter.BitmapReadyCallback>();
        shouldFetch=true;
        mFilePathToCallbackMap.put(filePath,list);
      }
      list.add(new BitmapReadyCallback(){
        @Override public void onBitmapReady(        Bitmap bitmap){
          if (imageView.getTag().equals(filePath))           imageView.setImageBitmap(bitmap);
        }
      }
);
      if (shouldFetch) {
        fetchBitmap(filePath);
      }
    }
  }
}","private synchronized void loadLocalImage(Cursor cursor,final ImageView imageView){
  final String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (MediaUtils.isValidImage(filePath)) {
    imageView.setTag(filePath);
    Bitmap bitmap=WordPress.localImageCache.get(filePath);
    if (bitmap != null) {
      imageView.setImageBitmap(bitmap);
    }
 else {
      imageView.setImageBitmap(null);
      boolean shouldFetch=false;
      List<BitmapReadyCallback> list;
      if (mFilePathToCallbackMap.containsKey(filePath)) {
        list=mFilePathToCallbackMap.get(filePath);
      }
 else {
        list=new ArrayList<MediaGridAdapter.BitmapReadyCallback>();
        shouldFetch=true;
        mFilePathToCallbackMap.put(filePath,list);
      }
      list.add(new BitmapReadyCallback(){
        @Override public void onBitmapReady(        Bitmap bitmap){
          if (imageView.getTag().equals(filePath))           imageView.setImageBitmap(bitmap);
        }
      }
);
      if (shouldFetch) {
        fetchBitmap(filePath);
      }
    }
  }
 else {
    imageView.setImageBitmap(null);
  }
}",0.9780420860018298
15019,"public MediaGridAdapter(Context context,Cursor c,int flags,ArrayList<String> checkedItems){
  super(context,c,flags);
  mCheckedItems=checkedItems;
  mFilePathToCallbackMap=new HashMap<String,List<BitmapReadyCallback>>();
}","public MediaGridAdapter(Context context,Cursor c,int flags,ArrayList<String> checkedItems){
  super(context,c,flags);
  mCheckedItems=checkedItems;
  mFilePathToCallbackMap=new HashMap<String,List<BitmapReadyCallback>>();
  mHandler=new Handler();
}",0.9449152542372882
15020,"private void fetchBitmap(final String filePath){
  int width=mContext.getResources().getDimensionPixelSize(R.dimen.media_grid_local_image_width);
  BitmapWorkerTask task=new BitmapWorkerTask(null,width,width,new BitmapWorkerCallback(){
    @Override public void onBitmapReady(    String path,    ImageView imageView,    Bitmap bitmap){
      List<BitmapReadyCallback> callbacks=mFilePathToCallbackMap.get(path);
      for (      BitmapReadyCallback callback : callbacks) {
        callback.onBitmapReady(bitmap);
      }
      WordPress.localImageCache.put(path,bitmap);
      callbacks.clear();
      mFilePathToCallbackMap.remove(path);
    }
  }
);
  task.execute(filePath);
}","private void fetchBitmap(final String filePath){
  int width=mContext.getResources().getDimensionPixelSize(R.dimen.media_grid_local_image_width);
  BitmapWorkerTask task=new BitmapWorkerTask(null,width,width,new BitmapWorkerCallback(){
    @Override public void onBitmapReady(    final String path,    ImageView imageView,    final Bitmap bitmap){
      mHandler.post(new Runnable(){
        @Override public void run(){
          List<BitmapReadyCallback> callbacks=mFilePathToCallbackMap.get(path);
          for (          BitmapReadyCallback callback : callbacks) {
            callback.onBitmapReady(bitmap);
          }
          WordPress.localImageCache.put(path,bitmap);
          callbacks.clear();
          mFilePathToCallbackMap.remove(path);
        }
      }
);
    }
  }
);
  task.execute(filePath);
}",0.9077540106951872
15021,"@Override public void onBitmapReady(String path,ImageView imageView,Bitmap bitmap){
  List<BitmapReadyCallback> callbacks=mFilePathToCallbackMap.get(path);
  for (  BitmapReadyCallback callback : callbacks) {
    callback.onBitmapReady(bitmap);
  }
  WordPress.localImageCache.put(path,bitmap);
  callbacks.clear();
  mFilePathToCallbackMap.remove(path);
}","@Override public void onBitmapReady(final String path,ImageView imageView,final Bitmap bitmap){
  mHandler.post(new Runnable(){
    @Override public void run(){
      List<BitmapReadyCallback> callbacks=mFilePathToCallbackMap.get(path);
      for (      BitmapReadyCallback callback : callbacks) {
        callback.onBitmapReady(bitmap);
      }
      WordPress.localImageCache.put(path,bitmap);
      callbacks.clear();
      mFilePathToCallbackMap.remove(path);
    }
  }
);
}",0.8081534772182254
15022,"private void refreshStats(){
  if (WordPress.getCurrentBlog() == null)   return;
  final String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
  new AsyncTask<String,Void,StatsSummary>(){
    @Override protected StatsSummary doInBackground(    String... params){
      final String blogId=params[0];
      StatsSummary stats=StatUtils.getSummary(blogId);
      return stats;
    }
    protected void onPostExecute(    StatsSummary result){
      refreshViews(result);
    }
  }
.execute(blogId);
}","private void refreshStats(){
  if (WordPress.getCurrentBlog() == null)   return;
  final String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
  new AsyncTask<String,Void,StatsSummary>(){
    @Override protected StatsSummary doInBackground(    String... params){
      final String blogId=params[0];
      StatsSummary stats=StatUtils.getSummary(blogId);
      return stats;
    }
    protected void onPostExecute(    final StatsSummary result){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          refreshViews(result);
        }
      }
);
    }
  }
.execute(blogId);
}",0.9079646017699116
15023,"protected void onPostExecute(StatsSummary result){
  refreshViews(result);
}","protected void onPostExecute(final StatsSummary result){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      refreshViews(result);
    }
  }
);
}",0.6333333333333333
15024,"private void refreshSummary(){
  if (WordPress.getCurrentBlog() == null)   return;
  final String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
  new AsyncTask<String,Void,StatsVisitorsAndViewsSummary>(){
    @Override protected StatsVisitorsAndViewsSummary doInBackground(    String... params){
      final String blogId=params[0];
      StatsVisitorsAndViewsSummary stats=StatUtils.getVisitorsAndViewsSummary(blogId);
      return stats;
    }
    protected void onPostExecute(    StatsVisitorsAndViewsSummary result){
      refreshViews(result);
    }
  }
.execute(blogId);
}","private void refreshSummary(){
  if (WordPress.getCurrentBlog() == null)   return;
  final String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
  new AsyncTask<String,Void,StatsVisitorsAndViewsSummary>(){
    @Override protected StatsVisitorsAndViewsSummary doInBackground(    String... params){
      final String blogId=params[0];
      StatsVisitorsAndViewsSummary stats=StatUtils.getVisitorsAndViewsSummary(blogId);
      return stats;
    }
    protected void onPostExecute(    final StatsVisitorsAndViewsSummary result){
      getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          refreshViews(result);
        }
      }
);
    }
  }
.execute(blogId);
}",0.9097859327217124
15025,"protected void onPostExecute(StatsVisitorsAndViewsSummary result){
  refreshViews(result);
}","protected void onPostExecute(final StatsVisitorsAndViewsSummary result){
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      refreshViews(result);
    }
  }
);
}",0.6433566433566433
15026,"public void setDateFilter(){
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return;
  String blogId=String.valueOf(blog.getBlogId());
  GregorianCalendar startDate=new GregorianCalendar(mStartYear,mStartMonth,mStartDay);
  GregorianCalendar endDate=new GregorianCalendar(mEndYear,mEndMonth,mEndDay);
  long one_day=24 * 60 * 60* 1000;
  Cursor cursor=WordPress.wpDB.getMediaFilesForBlog(blogId,startDate.getTimeInMillis(),endDate.getTimeInMillis() + one_day);
  mGridAdapter.changeCursor(cursor);
  if (cursor != null && cursor.moveToFirst()) {
    mResultView.setVisibility(View.VISIBLE);
    SimpleDateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setCalendar(startDate);
    String formattedStart=fmt.format(startDate.getTime());
    String formattedEnd=fmt.format(endDate.getTime());
    mResultView.setText(""String_Node_Str"" + formattedStart + ""String_Node_Str""+ formattedEnd);
  }
 else {
    mResultView.setVisibility(View.VISIBLE);
    mResultView.setText(getResources().getString(R.string.empty_fields));
  }
}","public void setDateFilter(){
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return;
  String blogId=String.valueOf(blog.getBlogId());
  GregorianCalendar startDate=new GregorianCalendar(mStartYear,mStartMonth,mStartDay);
  GregorianCalendar endDate=new GregorianCalendar(mEndYear,mEndMonth,mEndDay);
  long one_day=24 * 60 * 60* 1000;
  Cursor cursor=WordPress.wpDB.getMediaFilesForBlog(blogId,startDate.getTimeInMillis(),endDate.getTimeInMillis() + one_day);
  mGridAdapter.swapCursor(cursor);
  if (cursor != null && cursor.moveToFirst()) {
    mResultView.setVisibility(View.VISIBLE);
    SimpleDateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setCalendar(startDate);
    String formattedStart=fmt.format(startDate.getTime());
    String formattedEnd=fmt.format(endDate.getTime());
    mResultView.setText(""String_Node_Str"" + formattedStart + ""String_Node_Str""+ formattedEnd);
  }
 else {
    mResultView.setVisibility(View.VISIBLE);
    mResultView.setText(getResources().getString(R.string.empty_fields));
  }
}",0.9952244508118434
15027,"public void setFilter(Filter filter){
  mFilter=filter;
  Cursor cursor=filterItems(mFilter);
  if (cursor != null) {
    mGridAdapter.changeCursor(cursor);
    mResultView.setVisibility(View.GONE);
  }
 else {
    if (filter != Filter.CUSTOM_DATE) {
      mResultView.setVisibility(View.VISIBLE);
      mResultView.setText(getResources().getString(R.string.empty_fields));
    }
  }
}","public void setFilter(Filter filter){
  mFilter=filter;
  Cursor cursor=filterItems(mFilter);
  if (cursor != null) {
    mGridAdapter.swapCursor(cursor);
    mResultView.setVisibility(View.GONE);
  }
 else {
    if (filter != Filter.CUSTOM_DATE) {
      mResultView.setVisibility(View.VISIBLE);
      mResultView.setText(getResources().getString(R.string.empty_fields));
    }
  }
}",0.9895833333333334
15028,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO) {
    String path=null;
switch (requestCode) {
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_VIDEO_LIBRARY:
      Uri imageUri=data.getData();
    path=getRealPathFromURI(imageUri);
  queueFileForUpload(path);
break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
path=mMediaCapturePath;
mMediaCapturePath=null;
queueFileForUpload(path);
}
break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
Uri videoUri=data.getData();
path=getRealPathFromURI(videoUri);
queueFileForUpload(path);
}
break;
}
}
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO) {
    String path=null;
switch (requestCode) {
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_VIDEO_LIBRARY:
      Uri imageUri=data.getData();
    path=getRealPathFromURI(imageUri);
  queueFileForUpload(path);
break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
path=mMediaCapturePath;
mMediaCapturePath=null;
queueFileForUpload(path);
}
break;
}
}
}",0.8596389050669773
15029,"public void launchVideoCamera(){
  MediaUtils.launchVideoCamera(this);
}","public void launchVideoCamera(){
  MediaUtils.launchVideoCamera(this,this);
}",0.9664429530201344
15030,"public static void launchCamera(Activity activity,LaunchCameraCallback callback){
  String state=android.os.Environment.getExternalStorageState();
  if (!state.equals(android.os.Environment.MEDIA_MOUNTED)) {
    showSDCardRequiredDialog(activity);
  }
 else {
    Intent takePictureFromCameraIntent=prepareLaunchCameraIntent(callback);
    activity.startActivityForResult(takePictureFromCameraIntent,RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO);
  }
}","public static void launchCamera(Activity activity,LaunchCameraCallback callback){
  String state=android.os.Environment.getExternalStorageState();
  if (!state.equals(android.os.Environment.MEDIA_MOUNTED)) {
    showSDCardRequiredDialog(activity);
  }
 else {
    Intent intent=prepareLaunchCameraIntent(callback,false);
    activity.startActivityForResult(intent,RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO);
  }
}",0.9400921658986175
15031,"public static void launchVideoCamera(Fragment fragment){
  fragment.startActivityForResult(new Intent(MediaStore.ACTION_VIDEO_CAPTURE),RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO);
}","public static void launchVideoCamera(Fragment fragment,LaunchCameraCallback callback){
  String state=android.os.Environment.getExternalStorageState();
  if (!state.equals(android.os.Environment.MEDIA_MOUNTED)) {
    showSDCardRequiredDialog(fragment.getActivity());
  }
 else {
    Intent intent=prepareLaunchCameraIntent(callback,true);
    fragment.startActivityForResult(intent,RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO);
  }
}",0.4538087520259319
15032,"private static Intent prepareLaunchCameraIntent(LaunchCameraCallback callback){
  String dcimFolderName=Environment.DIRECTORY_DCIM;
  if (dcimFolderName == null)   dcimFolderName=""String_Node_Str"";
  String mediaCapturePath=Environment.getExternalStorageDirectory() + File.separator + dcimFolderName+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str"";
  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
  intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT,Uri.fromFile(new File(mediaCapturePath)));
  if (callback != null) {
    callback.onMediaCapturePathReady(mediaCapturePath);
  }
  File directory=new File(mediaCapturePath).getParentFile();
  if (!directory.exists() && !directory.mkdirs()) {
    try {
      throw new IOException(""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return intent;
}","private static Intent prepareLaunchCameraIntent(LaunchCameraCallback callback,boolean isVideo){
  String ext=""String_Node_Str"";
  String action=MediaStore.ACTION_IMAGE_CAPTURE;
  if (isVideo) {
    ext=""String_Node_Str"";
    action=MediaStore.ACTION_VIDEO_CAPTURE;
  }
  String dcimFolderName=Environment.DIRECTORY_DCIM;
  if (dcimFolderName == null)   dcimFolderName=""String_Node_Str"";
  String mediaCapturePath=Environment.getExternalStorageDirectory() + File.separator + dcimFolderName+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ System.currentTimeMillis()+ ext;
  Intent intent=new Intent(action);
  intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT,Uri.fromFile(new File(mediaCapturePath)));
  if (callback != null) {
    callback.onMediaCapturePathReady(mediaCapturePath);
  }
  File directory=new File(mediaCapturePath).getParentFile();
  if (!directory.exists() && !directory.mkdirs()) {
    try {
      throw new IOException(""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return intent;
}",0.5722831505483549
15033,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_CANCELED) {
    if (mQuickMediaType >= 0) {
      setResult(Activity.RESULT_CANCELED,new Intent());
      finish();
    }
    if (mFormatBar.getVisibility() == View.VISIBLE)     hideFormatBar();
    return;
  }
  if (data != null || ((requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO))) {
    Bundle extras;
switch (requestCode) {
case ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
      Uri imageUri=data.getData();
    verifyImage(imageUri);
  break;
case ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
  try {
    File f=new File(mMediaCapturePath);
    Uri capturedImageUri=Uri.fromFile(f);
    f=null;
    if (!addMedia(capturedImageUri,null))     Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
    sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse(""String_Node_Str"" + Environment.getExternalStorageDirectory())));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
catch (  OutOfMemoryError e) {
    e.printStackTrace();
  }
}
break;
case ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY:
Uri videoUri=data.getData();
if (!addMedia(videoUri,null)) Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
break;
case ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
Uri capturedVideoUri=data.getData();
if (!addMedia(capturedVideoUri,null)) Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
}
break;
case ACTIVITY_REQUEST_CODE_CREATE_LINK:
try {
extras=data.getExtras();
String linkURL=extras.getString(""String_Node_Str"");
if (!linkURL.equals(""String_Node_Str"") && !linkURL.equals(""String_Node_Str"")) {
if (mSelectionStart > mSelectionEnd) {
int temp=mSelectionEnd;
mSelectionEnd=mSelectionStart;
mSelectionStart=temp;
}
Editable str=mContentEditText.getText();
if (mLocalDraft) {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkURL.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkText);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkText.length());
}
}
 else {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkURL+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkText+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
break;
case ACTIVITY_REQUEST_CODE_SELECT_CATEGORIES:
extras=data.getExtras();
mCategories=(ArrayList<String>)extras.getSerializable(""String_Node_Str"");
populateSelectedCategories();
break;
}
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_CANCELED) {
    if (mQuickMediaType >= 0) {
      setResult(Activity.RESULT_CANCELED,new Intent());
      finish();
    }
    if (mFormatBar.getVisibility() == View.VISIBLE)     hideFormatBar();
    return;
  }
  if (data != null || ((requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO))) {
    Bundle extras;
switch (requestCode) {
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
      Uri imageUri=data.getData();
    verifyImage(imageUri);
  break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
  try {
    File f=new File(mMediaCapturePath);
    Uri capturedImageUri=Uri.fromFile(f);
    f=null;
    if (!addMedia(capturedImageUri,null))     Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
    sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse(""String_Node_Str"" + Environment.getExternalStorageDirectory())));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
catch (  OutOfMemoryError e) {
    e.printStackTrace();
  }
}
break;
case RequestCode.ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY:
Uri videoUri=data.getData();
if (!addMedia(videoUri,null)) Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
File f=new File(mMediaCapturePath);
Uri capturedVideoUri=Uri.fromFile(f);
f=null;
if (!addMedia(capturedVideoUri,null)) Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
}
break;
case ACTIVITY_REQUEST_CODE_CREATE_LINK:
try {
extras=data.getExtras();
String linkURL=extras.getString(""String_Node_Str"");
if (!linkURL.equals(""String_Node_Str"") && !linkURL.equals(""String_Node_Str"")) {
if (mSelectionStart > mSelectionEnd) {
int temp=mSelectionEnd;
mSelectionEnd=mSelectionStart;
mSelectionStart=temp;
}
Editable str=mContentEditText.getText();
if (mLocalDraft) {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkURL.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkText);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkText.length());
}
}
 else {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkURL+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkText+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
break;
case ACTIVITY_REQUEST_CODE_SELECT_CATEGORIES:
extras=data.getExtras();
mCategories=(ArrayList<String>)extras.getSerializable(""String_Node_Str"");
populateSelectedCategories();
break;
}
}
}",0.9830508474576272
15034,"@Override public void onMediaCapturePathReady(String mediaCapturePath){
  mMediaCapturePath=mediaCapturePath;
  mCurrentActivityRequest=RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO;
}","@Override public void onMediaCapturePathReady(String mediaCapturePath){
  mMediaCapturePath=mediaCapturePath;
  mCurrentActivityRequest=RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO;
}",0.9781420765027322
15035,"private void launchVideoCamera(){
  mCurrentActivityRequest=RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO;
  MediaUtils.launchVideoCamera(this);
}","private void launchVideoCamera(){
  mCurrentActivityRequest=RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO;
  MediaUtils.launchVideoCamera(this,new LaunchCameraCallback(){
    @Override public void onMediaCapturePathReady(    String mediaCapturePath){
      mMediaCapturePath=mediaCapturePath;
      mCurrentActivityRequest=RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO;
    }
  }
);
}",0.5502846299810247
15036,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO) {
    String path=null;
switch (requestCode) {
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_VIDEO_LIBRARY:
      Uri imageUri=data.getData();
    path=getRealPathFromURI(imageUri);
  queueFileForUpload(path);
break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
path=mMediaCapturePath;
mMediaCapturePath=null;
queueFileForUpload(path);
}
break;
}
}
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO) {
    String path=null;
switch (requestCode) {
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_VIDEO_LIBRARY:
      Uri imageUri=data.getData();
    path=getRealPathFromURI(imageUri);
  queueFileForUpload(path);
break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
path=mMediaCapturePath;
mMediaCapturePath=null;
queueFileForUpload(path);
}
break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
path=getRealPathFromURI(MediaUtils.getLastRecordedVideoUri(getActivity()));
queueFileForUpload(path);
}
break;
}
}
}",0.8536726431463274
15037,"public void launchVideoCamera(){
  MediaUtils.launchVideoCamera(this,this);
}","public void launchVideoCamera(){
  MediaUtils.launchVideoCamera(this);
}",0.9664429530201344
15038,"public static void launchCamera(Activity activity,LaunchCameraCallback callback){
  String state=android.os.Environment.getExternalStorageState();
  if (!state.equals(android.os.Environment.MEDIA_MOUNTED)) {
    showSDCardRequiredDialog(activity);
  }
 else {
    Intent intent=prepareLaunchCameraIntent(callback,false);
    activity.startActivityForResult(intent,RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO);
  }
}","public static void launchCamera(Activity activity,LaunchCameraCallback callback){
  String state=android.os.Environment.getExternalStorageState();
  if (!state.equals(android.os.Environment.MEDIA_MOUNTED)) {
    showSDCardRequiredDialog(activity);
  }
 else {
    Intent intent=prepareLaunchCameraIntent(callback);
    activity.startActivityForResult(intent,RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO);
  }
}",0.9927360774818402
15039,"public static void launchVideoCamera(Fragment fragment,LaunchCameraCallback callback){
  String state=android.os.Environment.getExternalStorageState();
  if (!state.equals(android.os.Environment.MEDIA_MOUNTED)) {
    showSDCardRequiredDialog(fragment.getActivity());
  }
 else {
    Intent intent=prepareLaunchCameraIntent(callback,true);
    fragment.startActivityForResult(intent,RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO);
  }
}","public static void launchVideoCamera(Fragment fragment){
  Intent intent=new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
  fragment.startActivityForResult(intent,RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO);
}",0.2402496099843993
15040,"private static Intent prepareLaunchCameraIntent(LaunchCameraCallback callback,boolean isVideo){
  String ext=""String_Node_Str"";
  String action=MediaStore.ACTION_IMAGE_CAPTURE;
  if (isVideo) {
    ext=""String_Node_Str"";
    action=MediaStore.ACTION_VIDEO_CAPTURE;
  }
  String dcimFolderName=Environment.DIRECTORY_DCIM;
  if (dcimFolderName == null)   dcimFolderName=""String_Node_Str"";
  String mediaCapturePath=Environment.getExternalStorageDirectory() + File.separator + dcimFolderName+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ System.currentTimeMillis()+ ext;
  Intent intent=new Intent(action);
  intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT,Uri.fromFile(new File(mediaCapturePath)));
  if (callback != null) {
    callback.onMediaCapturePathReady(mediaCapturePath);
  }
  File directory=new File(mediaCapturePath).getParentFile();
  if (!directory.exists() && !directory.mkdirs()) {
    try {
      throw new IOException(""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return intent;
}","private static Intent prepareLaunchCameraIntent(LaunchCameraCallback callback){
  File path=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
  String mediaCapturePath=path + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ System.currentTimeMillis()+ ""String_Node_Str"";
  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
  intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT,Uri.fromFile(new File(mediaCapturePath)));
  if (callback != null) {
    callback.onMediaCapturePathReady(mediaCapturePath);
  }
  File directory=new File(mediaCapturePath).getParentFile();
  if (!directory.exists() && !directory.mkdirs()) {
    try {
      throw new IOException(""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return intent;
}",0.6190975865687304
15041,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_CANCELED) {
    if (mQuickMediaType >= 0) {
      setResult(Activity.RESULT_CANCELED,new Intent());
      finish();
    }
    if (mFormatBar.getVisibility() == View.VISIBLE)     hideFormatBar();
    return;
  }
  if (data != null || ((requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO))) {
    Bundle extras;
switch (requestCode) {
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
      Uri imageUri=data.getData();
    verifyImage(imageUri);
  break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
  try {
    File f=new File(mMediaCapturePath);
    Uri capturedImageUri=Uri.fromFile(f);
    f=null;
    if (!addMedia(capturedImageUri,null))     Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
    sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse(""String_Node_Str"" + Environment.getExternalStorageDirectory())));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
catch (  OutOfMemoryError e) {
    e.printStackTrace();
  }
}
break;
case RequestCode.ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY:
Uri videoUri=data.getData();
if (!addMedia(videoUri,null)) Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
File f=new File(mMediaCapturePath);
Uri capturedVideoUri=Uri.fromFile(f);
f=null;
if (!addMedia(capturedVideoUri,null)) Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
}
break;
case ACTIVITY_REQUEST_CODE_CREATE_LINK:
try {
extras=data.getExtras();
String linkURL=extras.getString(""String_Node_Str"");
if (!linkURL.equals(""String_Node_Str"") && !linkURL.equals(""String_Node_Str"")) {
if (mSelectionStart > mSelectionEnd) {
int temp=mSelectionEnd;
mSelectionEnd=mSelectionStart;
mSelectionStart=temp;
}
Editable str=mContentEditText.getText();
if (mLocalDraft) {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkURL.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkText);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkText.length());
}
}
 else {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkURL+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkText+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
break;
case ACTIVITY_REQUEST_CODE_SELECT_CATEGORIES:
extras=data.getExtras();
mCategories=(ArrayList<String>)extras.getSerializable(""String_Node_Str"");
populateSelectedCategories();
break;
}
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_CANCELED) {
    if (mQuickMediaType >= 0) {
      setResult(Activity.RESULT_CANCELED,new Intent());
      finish();
    }
    if (mFormatBar.getVisibility() == View.VISIBLE)     hideFormatBar();
    return;
  }
  if (data != null || ((requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO || requestCode == RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO))) {
    Bundle extras;
switch (requestCode) {
case RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY:
      Uri imageUri=data.getData();
    verifyImage(imageUri);
  break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO:
if (resultCode == Activity.RESULT_OK) {
  try {
    File f=new File(mMediaCapturePath);
    Uri capturedImageUri=Uri.fromFile(f);
    f=null;
    if (!addMedia(capturedImageUri,null))     Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
    sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,Uri.parse(""String_Node_Str"" + Environment.getExternalStorageDirectory())));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
catch (  OutOfMemoryError e) {
    e.printStackTrace();
  }
}
break;
case RequestCode.ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY:
Uri videoUri=data.getData();
if (!addMedia(videoUri,null)) Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
break;
case RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO:
if (resultCode == Activity.RESULT_OK) {
Uri capturedVideoUri=MediaUtils.getLastRecordedVideoUri(this);
if (!addMedia(capturedVideoUri,null)) Toast.makeText(EditPostActivity.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
}
break;
case ACTIVITY_REQUEST_CODE_CREATE_LINK:
try {
extras=data.getExtras();
String linkURL=extras.getString(""String_Node_Str"");
if (!linkURL.equals(""String_Node_Str"") && !linkURL.equals(""String_Node_Str"")) {
if (mSelectionStart > mSelectionEnd) {
int temp=mSelectionEnd;
mSelectionEnd=mSelectionStart;
mSelectionStart=temp;
}
Editable str=mContentEditText.getText();
if (mLocalDraft) {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkURL.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
str.insert(mSelectionStart,linkText);
str.setSpan(new URLSpan(linkURL),mSelectionStart,mSelectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
mContentEditText.setSelection(mSelectionStart + linkText.length());
}
}
 else {
if (extras.getString(""String_Node_Str"") == null) {
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkURL+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (mSelectionStart < mSelectionEnd) str.delete(mSelectionStart,mSelectionEnd);
String urlHTML=""String_Node_Str"" + linkURL + ""String_Node_Str""+ linkText+ ""String_Node_Str"";
str.insert(mSelectionStart,urlHTML);
mContentEditText.setSelection(mSelectionStart + urlHTML.length());
}
}
}
}
 catch (Exception e) {
e.printStackTrace();
}
break;
case ACTIVITY_REQUEST_CODE_SELECT_CATEGORIES:
extras=data.getExtras();
mCategories=(ArrayList<String>)extras.getSerializable(""String_Node_Str"");
populateSelectedCategories();
break;
}
}
}",0.9839805203127002
15042,"@Override public void onMediaCapturePathReady(String mediaCapturePath){
  mMediaCapturePath=mediaCapturePath;
  mCurrentActivityRequest=RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO;
}","@Override public void onMediaCapturePathReady(String mediaCapturePath){
  mMediaCapturePath=mediaCapturePath;
  mCurrentActivityRequest=RequestCode.ACTIVITY_REQUEST_CODE_TAKE_PHOTO;
}",0.9781420765027322
15043,"private void launchVideoCamera(){
  mCurrentActivityRequest=RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO;
  MediaUtils.launchVideoCamera(this,new LaunchCameraCallback(){
    @Override public void onMediaCapturePathReady(    String mediaCapturePath){
      mMediaCapturePath=mediaCapturePath;
      mCurrentActivityRequest=RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO;
    }
  }
);
}","private void launchVideoCamera(){
  mCurrentActivityRequest=RequestCode.ACTIVITY_REQUEST_CODE_TAKE_VIDEO;
  MediaUtils.launchVideoCamera(this);
}",0.5502846299810247
15044,"public void refreshMediaFromDB(){
  setFilter(mFilter);
  if (mGridAdapter.getCount() == 0 && !mHasRetrievedAllMedia) {
    refreshMediaFromServer(0,true);
  }
}","public void refreshMediaFromDB(){
  setFilter(mFilter);
  if (mGridAdapter.getDataCount() == 0 && !mHasRetrievedAllMedia) {
    refreshMediaFromServer(0,true);
  }
}",0.9877300613496932
15045,"@Override public void onMediaAdded(String mediaId){
  mMediaGridFragment.refreshMediaFromDB();
}","@Override public void onMediaAdded(String mediaId){
  mMediaGridFragment.checkSelection(mediaId);
  mMediaGridFragment.refreshMediaFromDB();
}",0.8067226890756303
15046,"private void uploadMediaFile(Cursor cursor){
  if (!cursor.moveToFirst())   return;
  mUploadInProgress=true;
  final String blogIdStr=cursor.getString((cursor.getColumnIndex(""String_Node_Str"")));
  final String mediaId=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String mimeType=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  MediaFile mediaFile=new MediaFile();
  mediaFile.setBlogId(blogIdStr);
  mediaFile.setFileName(fileName);
  mediaFile.setFilePath(filePath);
  mediaFile.setMIMEType(mimeType);
  ApiHelper.UploadMediaTask task=new ApiHelper.UploadMediaTask(mContext,mediaFile,new Callback(){
    @Override public void onSuccess(    String id){
      WordPress.wpDB.deleteMediaFile(blogIdStr,mediaId);
      fetchMediaFile(id);
    }
    @Override public void onFailure(){
      WordPress.wpDB.updateMediaUploadState(blogIdStr,mediaId,""String_Node_Str"");
      mUploadInProgress=false;
      sendUpdateBroadcast(mediaId);
      mHandler.post(mFetchQueueTask);
    }
  }
);
  WordPress.wpDB.updateMediaUploadState(blogIdStr,mediaId,""String_Node_Str"");
  sendUpdateBroadcast(mediaId);
  List<Object> apiArgs=new ArrayList<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  task.execute(apiArgs);
  mHandler.post(mFetchQueueTask);
}","private void uploadMediaFile(Cursor cursor){
  if (!cursor.moveToFirst())   return;
  mUploadInProgress=true;
  final String blogIdStr=cursor.getString((cursor.getColumnIndex(""String_Node_Str"")));
  final String mediaId=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String mimeType=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  MediaFile mediaFile=new MediaFile();
  mediaFile.setBlogId(blogIdStr);
  mediaFile.setFileName(fileName);
  mediaFile.setFilePath(filePath);
  mediaFile.setMIMEType(mimeType);
  ApiHelper.UploadMediaTask task=new ApiHelper.UploadMediaTask(mContext,mediaFile,new Callback(){
    @Override public void onSuccess(    String id){
      WordPress.wpDB.deleteMediaFile(blogIdStr,mediaId);
      sendUpdateBroadcast(mediaId);
      fetchMediaFile(id);
    }
    @Override public void onFailure(){
      WordPress.wpDB.updateMediaUploadState(blogIdStr,mediaId,""String_Node_Str"");
      mUploadInProgress=false;
      sendUpdateBroadcast(mediaId);
      mHandler.post(mFetchQueueTask);
    }
  }
);
  WordPress.wpDB.updateMediaUploadState(blogIdStr,mediaId,""String_Node_Str"");
  sendUpdateBroadcast(mediaId);
  List<Object> apiArgs=new ArrayList<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  task.execute(apiArgs);
  mHandler.post(mFetchQueueTask);
}",0.9875776397515528
15047,"@Override public void onCreate(){
  super.onCreate();
  post=WordPress.currentPost;
  context=this.getApplicationContext();
}","@Override public void onCreate(){
  super.onCreate();
  context=this.getApplicationContext();
}",0.8636363636363636
15048,"@Override public void onStart(Intent intent,int startId){
  if (post == null || context == null) {
    this.stopSelf();
    return;
  }
 else {
    new uploadPostTask().execute(post);
  }
}","@Override public void onStart(Intent intent,int startId){
  if (WordPress.currentPost == null || context == null) {
    this.stopSelf();
    return;
  }
 else {
    new uploadPostTask().execute(WordPress.currentPost);
  }
}",0.9077669902912622
15049,"private void restoreState(Bundle savedInstanceState){
  if (savedInstanceState == null)   return;
  boolean isInMultiSelectMode=savedInstanceState.getBoolean(BUNDLE_IN_MULTI_SELECT_MODE);
  if (savedInstanceState.containsKey(BUNDLE_CHECKED_STATES)) {
    mCheckedItems.addAll(savedInstanceState.getStringArrayList(BUNDLE_CHECKED_STATES));
    if (isInMultiSelectMode) {
      mListener.onMultiSelectChange(mCheckedItems.size());
      onMultiSelectChange(mCheckedItems.size());
    }
    mGridView.setMultiSelectModeEnabled(isInMultiSelectMode);
  }
  mGridView.setSelection(savedInstanceState.getInt(BUNDLE_SCROLL_POSITION,0));
  mHasRetrievedAllMedia=savedInstanceState.getBoolean(BUNDLE_HAS_RETREIEVED_ALL_MEDIA,false);
  mFilter=Filter.getFilter(savedInstanceState.getInt(BUNDLE_FILTER));
  mIsDateFilterSet=savedInstanceState.getBoolean(BUNDLE_DATE_FILTER_SET,false);
  mStartDay=savedInstanceState.getInt(BUNDLE_DATE_FILTER_START_DAY);
  mStartMonth=savedInstanceState.getInt(BUNDLE_DATE_FILTER_START_MONTH);
  mStartYear=savedInstanceState.getInt(BUNDLE_DATE_FILTER_START_YEAR);
  mEndDay=savedInstanceState.getInt(BUNDLE_DATE_FILTER_END_DAY);
  mEndMonth=savedInstanceState.getInt(BUNDLE_DATE_FILTER_END_MONTH);
  mEndYear=savedInstanceState.getInt(BUNDLE_DATE_FILTER_END_YEAR);
}","private void restoreState(Bundle savedInstanceState){
  if (savedInstanceState == null)   return;
  boolean isInMultiSelectMode=savedInstanceState.getBoolean(BUNDLE_IN_MULTI_SELECT_MODE);
  if (savedInstanceState.containsKey(BUNDLE_CHECKED_STATES)) {
    mCheckedItems.addAll(savedInstanceState.getStringArrayList(BUNDLE_CHECKED_STATES));
    if (isInMultiSelectMode) {
      mListener.onMultiSelectChange(mCheckedItems.size());
      onMultiSelectChange(mCheckedItems.size());
    }
    mGridView.setMultiSelectModeEnabled(isInMultiSelectMode);
  }
  mGridView.setSelection(savedInstanceState.getInt(BUNDLE_SCROLL_POSITION,0));
  mHasRetrievedAllMedia=savedInstanceState.getBoolean(BUNDLE_HAS_RETREIEVED_ALL_MEDIA,false);
  mFilter=Filter.getFilter(savedInstanceState.getInt(BUNDLE_FILTER));
  mIsDateFilterSet=savedInstanceState.getBoolean(BUNDLE_DATE_FILTER_SET,false);
  mStartDay=savedInstanceState.getInt(BUNDLE_DATE_FILTER_START_DAY);
  mStartMonth=savedInstanceState.getInt(BUNDLE_DATE_FILTER_START_MONTH);
  mStartYear=savedInstanceState.getInt(BUNDLE_DATE_FILTER_START_YEAR);
  mEndDay=savedInstanceState.getInt(BUNDLE_DATE_FILTER_END_DAY);
  mEndMonth=savedInstanceState.getInt(BUNDLE_DATE_FILTER_END_MONTH);
  mEndYear=savedInstanceState.getInt(BUNDLE_DATE_FILTER_END_YEAR);
  boolean datePickerShowing=savedInstanceState.getBoolean(BUNDLE_DATE_FILTER_VISIBLE);
  if (datePickerShowing)   showDatePicker();
}",0.9512555391432792
15050,"private void saveState(Bundle outState){
  outState.putStringArrayList(BUNDLE_CHECKED_STATES,mCheckedItems);
  outState.putInt(BUNDLE_SCROLL_POSITION,mGridView.getFirstVisiblePosition());
  outState.putBoolean(BUNDLE_HAS_RETREIEVED_ALL_MEDIA,mHasRetrievedAllMedia);
  outState.putBoolean(BUNDLE_IN_MULTI_SELECT_MODE,isInMultiSelect());
  outState.putInt(BUNDLE_FILTER,mFilter.ordinal());
  outState.putBoolean(BUNDLE_DATE_FILTER_SET,mIsDateFilterSet);
  outState.putInt(BUNDLE_DATE_FILTER_START_DAY,mStartDay);
  outState.putInt(BUNDLE_DATE_FILTER_START_MONTH,mStartMonth);
  outState.putInt(BUNDLE_DATE_FILTER_START_YEAR,mStartYear);
  outState.putInt(BUNDLE_DATE_FILTER_END_DAY,mEndDay);
  outState.putInt(BUNDLE_DATE_FILTER_END_MONTH,mEndMonth);
  outState.putInt(BUNDLE_DATE_FILTER_END_YEAR,mEndYear);
}","private void saveState(Bundle outState){
  outState.putStringArrayList(BUNDLE_CHECKED_STATES,mCheckedItems);
  outState.putInt(BUNDLE_SCROLL_POSITION,mGridView.getFirstVisiblePosition());
  outState.putBoolean(BUNDLE_HAS_RETREIEVED_ALL_MEDIA,mHasRetrievedAllMedia);
  outState.putBoolean(BUNDLE_IN_MULTI_SELECT_MODE,isInMultiSelect());
  outState.putInt(BUNDLE_FILTER,mFilter.ordinal());
  outState.putBoolean(BUNDLE_DATE_FILTER_SET,mIsDateFilterSet);
  outState.putBoolean(BUNDLE_DATE_FILTER_VISIBLE,(mDatePickerDialog != null && mDatePickerDialog.isShowing()));
  outState.putInt(BUNDLE_DATE_FILTER_START_DAY,mStartDay);
  outState.putInt(BUNDLE_DATE_FILTER_START_MONTH,mStartMonth);
  outState.putInt(BUNDLE_DATE_FILTER_START_YEAR,mStartYear);
  outState.putInt(BUNDLE_DATE_FILTER_END_DAY,mEndDay);
  outState.putInt(BUNDLE_DATE_FILTER_END_MONTH,mEndMonth);
  outState.putInt(BUNDLE_DATE_FILTER_END_YEAR,mEndYear);
}",0.9351100811123986
15051,"private Cursor filterItems(Filter filter){
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return null;
  String blogId=String.valueOf(blog.getBlogId());
switch (filter) {
case ALL:
    return WordPress.wpDB.getMediaFilesForBlog(blogId);
case IMAGES:
  return WordPress.wpDB.getMediaImagesForBlog(blogId);
case UNATTACHED:
return WordPress.wpDB.getMediaUnattachedForBlog(blogId);
case CUSTOM_DATE:
hideDatePicker();
if (mIsDateFilterSet) {
mIsDateFilterSet=false;
showDatePicker();
}
 else {
setDateFilter();
}
break;
}
return null;
}","private Cursor filterItems(Filter filter){
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return null;
  String blogId=String.valueOf(blog.getBlogId());
switch (filter) {
case ALL:
    return WordPress.wpDB.getMediaFilesForBlog(blogId);
case IMAGES:
  return WordPress.wpDB.getMediaImagesForBlog(blogId);
case UNATTACHED:
return WordPress.wpDB.getMediaUnattachedForBlog(blogId);
case CUSTOM_DATE:
if (mIsDateFilterSet) {
mIsDateFilterSet=false;
showDatePicker();
}
 else {
setDateFilter();
}
break;
}
return null;
}",0.8126159554730983
15052,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreateView(inflater,container,savedInstanceState);
  mCheckedItems=new ArrayList<String>();
  mFiltersText=new String[Filter.values().length];
  mGridAdapter=new MediaGridAdapter(getActivity(),null,0,mCheckedItems);
  mGridAdapter.setCallback(this);
  View view=inflater.inflate(R.layout.media_grid_fragment,container);
  mGridView=(MultiSelectGridView)view.findViewById(R.id.media_gridview);
  mGridView.setOnItemClickListener(this);
  mGridView.setRecyclerListener(this);
  mGridView.setMultiSelectListener(this);
  mGridView.setAdapter(mGridAdapter);
  mResultView=(TextView)view.findViewById(R.id.media_filter_result_text);
  mSpinner=(CustomSpinner)view.findViewById(R.id.media_filter_spinner);
  mSpinner.setOnItemSelectedListener(mFilterSelectedListener);
  mSpinner.setOnItemSelectedEvenIfUnchangedListener(mFilterSelectedListener);
  mSpinnerContainer=view.findViewById(R.id.media_filter_spinner_container);
  mSpinnerContainer.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!isInMultiSelect()) {
        mSpinner.performClick();
      }
    }
  }
);
  restoreState(savedInstanceState);
  setupSpinnerAdapter();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreateView(inflater,container,savedInstanceState);
  mCheckedItems=new ArrayList<String>();
  mFiltersText=new String[Filter.values().length];
  mGridAdapter=new MediaGridAdapter(getActivity(),null,0,mCheckedItems);
  mGridAdapter.setCallback(this);
  View view=inflater.inflate(R.layout.media_grid_fragment,container);
  mGridView=(MultiSelectGridView)view.findViewById(R.id.media_gridview);
  mGridView.setOnItemClickListener(this);
  mGridView.setRecyclerListener(this);
  mGridView.setMultiSelectListener(this);
  mGridView.setAdapter(mGridAdapter);
  mResultView=(TextView)view.findViewById(R.id.media_filter_result_text);
  mSpinner=(CustomSpinner)view.findViewById(R.id.media_filter_spinner);
  mSpinner.setOnItemSelectedListener(mFilterSelectedListener);
  mSpinner.setOnItemSelectedEvenIfUnchangedListener(mFilterSelectedListener);
  mSpinnerContainer=view.findViewById(R.id.media_filter_spinner_container);
  mSpinnerContainer.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!isInMultiSelect()) {
        mSpinnerHasLaunched=true;
        mSpinner.performClick();
      }
    }
  }
);
  restoreState(savedInstanceState);
  setupSpinnerAdapter();
  return view;
}",0.9871504157218444
15053,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == android.R.id.home) {
    FragmentManager fm=getSupportFragmentManager();
    if (fm.getBackStackEntryCount() > 0) {
      fm.popBackStack();
      setupBaseLayout();
      return true;
    }
  }
 else   if (itemId == R.id.menu_new_media) {
    View view=findViewById(R.id.menu_new_media);
    int y_offset=getResources().getDimensionPixelSize(R.dimen.action_bar_spinner_y_offset);
    mAddMediaPopup.showAsDropDown(view,0,y_offset);
    return true;
  }
 else   if (itemId == R.id.menu_search) {
    mSearchMenuItem=item;
    mSearchMenuItem.setOnActionExpandListener(this);
    mSearchMenuItem.expandActionView();
    mSearchView=(SearchView)item.getActionView();
    mSearchView.setOnQueryTextListener(this);
    return true;
  }
 else   if (itemId == R.id.menu_refresh) {
    if (mMediaGridFragment != null) {
      mMediaGridFragment.refreshMediaFromServer(0,false);
      startAnimatingRefreshButton();
    }
    return true;
  }
 else   if (itemId == R.id.menu_edit_media) {
    String mediaId=mMediaItemFragment.getMediaId();
    FragmentManager fm=getSupportFragmentManager();
    if (mMediaEditFragment == null || !mMediaEditFragment.isInLayout()) {
      FragmentTransaction ft=fm.beginTransaction();
      if (mMediaItemFragment.isVisible())       ft.hide(mMediaItemFragment);
      mMediaEditFragment=MediaEditFragment.newInstance(mediaId);
      ft.add(R.id.media_browser_container,mMediaEditFragment,MediaEditFragment.TAG);
      ft.addToBackStack(null);
      ft.commit();
      mMenuDrawer.setDrawerIndicatorEnabled(false);
    }
 else {
      mMediaEditFragment.loadMedia(mediaId);
    }
    if (mSearchView != null)     mSearchView.clearFocus();
  }
 else   if (itemId == R.id.menu_delete) {
    if (mMediaEditFragment != null && mMediaEditFragment.isInLayout()) {
      String mediaId=mMediaEditFragment.getMediaId();
      launchConfirmDeleteDialog(mediaId);
    }
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == android.R.id.home) {
    FragmentManager fm=getSupportFragmentManager();
    if (fm.getBackStackEntryCount() > 0) {
      fm.popBackStack();
      setupBaseLayout();
      return true;
    }
  }
 else   if (itemId == R.id.menu_new_media) {
    View view=findViewById(R.id.menu_new_media);
    int y_offset=getResources().getDimensionPixelSize(R.dimen.action_bar_spinner_y_offset);
    int[] loc=new int[2];
    view.getLocationOnScreen(loc);
    mAddMediaPopup.showAtLocation(view,Gravity.TOP | Gravity.LEFT,loc[0],loc[1] + view.getHeight() + y_offset);
    return true;
  }
 else   if (itemId == R.id.menu_search) {
    mSearchMenuItem=item;
    mSearchMenuItem.setOnActionExpandListener(this);
    mSearchMenuItem.expandActionView();
    mSearchView=(SearchView)item.getActionView();
    mSearchView.setOnQueryTextListener(this);
    return true;
  }
 else   if (itemId == R.id.menu_refresh) {
    if (mMediaGridFragment != null) {
      mMediaGridFragment.refreshMediaFromServer(0,false);
      startAnimatingRefreshButton();
    }
    return true;
  }
 else   if (itemId == R.id.menu_edit_media) {
    String mediaId=mMediaItemFragment.getMediaId();
    FragmentManager fm=getSupportFragmentManager();
    if (mMediaEditFragment == null || !mMediaEditFragment.isInLayout()) {
      FragmentTransaction ft=fm.beginTransaction();
      if (mMediaItemFragment.isVisible())       ft.hide(mMediaItemFragment);
      mMediaEditFragment=MediaEditFragment.newInstance(mediaId);
      ft.add(R.id.media_browser_container,mMediaEditFragment,MediaEditFragment.TAG);
      ft.addToBackStack(null);
      ft.commit();
      mMenuDrawer.setDrawerIndicatorEnabled(false);
    }
 else {
      mMediaEditFragment.loadMedia(mediaId);
    }
    if (mSearchView != null)     mSearchView.clearFocus();
  }
 else   if (itemId == R.id.menu_delete) {
    if (mMediaEditFragment != null && mMediaEditFragment.isInLayout()) {
      String mediaId=mMediaEditFragment.getMediaId();
      launchConfirmDeleteDialog(mediaId);
    }
  }
  return super.onOptionsItemSelected(item);
}",0.9674507008790688
15054,"private void stopAnimatingRefreshButton(){
  if (mRefreshMenuItem != null)   stopAnimatingRefreshButton(mRefreshMenuItem);
  if (mAddMediaPopup != null)   mAddMediaPopup.dismiss();
}","private void stopAnimatingRefreshButton(){
  if (mRefreshMenuItem != null)   stopAnimatingRefreshButton(mRefreshMenuItem);
}",0.8104575163398693
15055,"@Override public void onMediaAdded(String mediaId){
  mMediaGridFragment.checkSelection(mediaId);
  mMediaGridFragment.refreshMediaFromDB();
}","@Override public void onMediaAdded(String mediaId){
  if (WordPress.getCurrentBlog() == null || mediaId == null)   return;
  String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
  Cursor cursor=WordPress.wpDB.getMediaFile(blogId,mediaId);
  if (cursor == null || !cursor.moveToFirst()) {
    mMediaGridFragment.removeFromMultiSelect(mediaId);
    mMediaGridFragment.refreshMediaFromDB();
    if (mMediaEditFragment != null && mMediaEditFragment.isVisible() && mediaId.equals(mMediaEditFragment.getMediaId())) {
      if (mMediaEditFragment.isInLayout()) {
        mMediaEditFragment.loadMedia(null);
      }
 else {
        getSupportFragmentManager().popBackStack();
      }
    }
    if (cursor != null)     cursor.close();
  }
 else {
    mMediaGridFragment.refreshMediaFromDB();
    cursor.close();
  }
}",0.250258531540848
15056,"private void restoreState(Bundle savedInstanceState){
  if (savedInstanceState == null)   return;
  boolean isInMultiSelectMode=savedInstanceState.getBoolean(BUNDLE_IN_MULTI_SELECT_MODE);
  if (savedInstanceState.containsKey(BUNDLE_CHECKED_STATES)) {
    mCheckedItems=savedInstanceState.getStringArrayList(BUNDLE_CHECKED_STATES);
    if (isInMultiSelectMode) {
      mListener.onMultiSelectChange(mCheckedItems.size());
      onMultiSelectChange(mCheckedItems.size());
    }
    mGridView.setMultiSelectModeEnabled(isInMultiSelectMode);
  }
  mSavedFirstVisiblePosition=savedInstanceState.getInt(BUNDLE_SCROLL_POSITION,0);
  mHasRetrievedAllMedia=savedInstanceState.getBoolean(BUNDLE_HAS_RETREIEVED_ALL_MEDIA,false);
}","private void restoreState(Bundle savedInstanceState){
  if (savedInstanceState == null)   return;
  boolean isInMultiSelectMode=savedInstanceState.getBoolean(BUNDLE_IN_MULTI_SELECT_MODE);
  if (savedInstanceState.containsKey(BUNDLE_CHECKED_STATES)) {
    mCheckedItems.addAll(savedInstanceState.getStringArrayList(BUNDLE_CHECKED_STATES));
    if (isInMultiSelectMode) {
      mListener.onMultiSelectChange(mCheckedItems.size());
      onMultiSelectChange(mCheckedItems.size());
    }
    mGridView.setMultiSelectModeEnabled(isInMultiSelectMode);
  }
  mGridView.setSelection(savedInstanceState.getInt(BUNDLE_SCROLL_POSITION,0));
  mHasRetrievedAllMedia=savedInstanceState.getBoolean(BUNDLE_HAS_RETREIEVED_ALL_MEDIA,false);
  mFilter=Filter.getFilter(savedInstanceState.getInt(BUNDLE_FILTER));
}",0.9173826834104428
15057,"private void setupSpinnerAdapter(){
  if (getActivity() == null || WordPress.getCurrentBlog() == null)   return;
  updateFilterText();
  Context context=((WPActionBarActivity)getActivity()).getSupportActionBar().getThemedContext();
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(context,R.layout.sherlock_spinner_dropdown_item,mFiltersText);
  mSpinner.setAdapter(adapter);
}","private void setupSpinnerAdapter(){
  if (getActivity() == null || WordPress.getCurrentBlog() == null)   return;
  updateFilterText();
  Context context=((WPActionBarActivity)getActivity()).getSupportActionBar().getThemedContext();
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(context,R.layout.sherlock_spinner_dropdown_item,mFiltersText);
  mSpinner.setAdapter(adapter);
  mSpinner.setSelection(mFilter.ordinal());
}",0.9458128078817734
15058,"private void saveState(Bundle outState){
  outState.putStringArrayList(BUNDLE_CHECKED_STATES,mCheckedItems);
  outState.putInt(BUNDLE_SCROLL_POSITION,mGridView.getFirstVisiblePosition());
  outState.putBoolean(BUNDLE_HAS_RETREIEVED_ALL_MEDIA,mHasRetrievedAllMedia);
  outState.putBoolean(BUNDLE_IN_MULTI_SELECT_MODE,isInMultiSelect());
}","private void saveState(Bundle outState){
  outState.putStringArrayList(BUNDLE_CHECKED_STATES,mCheckedItems);
  outState.putInt(BUNDLE_SCROLL_POSITION,mGridView.getFirstVisiblePosition());
  outState.putBoolean(BUNDLE_HAS_RETREIEVED_ALL_MEDIA,mHasRetrievedAllMedia);
  outState.putBoolean(BUNDLE_IN_MULTI_SELECT_MODE,isInMultiSelect());
  outState.putInt(BUNDLE_FILTER,mFilter.ordinal());
}",0.928374655647383
15059,"public void setDateFilter(){
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return;
  String blogId=String.valueOf(blog.getBlogId());
  GregorianCalendar startDate=new GregorianCalendar(startYear,startMonth,startDay);
  GregorianCalendar endDate=new GregorianCalendar(endYear,endMonth,endDay);
  long one_day=24 * 60 * 60* 1000;
  mCursor=WordPress.wpDB.getMediaFilesForBlog(blogId,startDate.getTimeInMillis(),endDate.getTimeInMillis() + one_day);
  mGridAdapter.swapCursor(mCursor);
  if (mCursor != null && mCursor.getCount() > 0 && mGridAdapter != null) {
    mResultView.setVisibility(View.VISIBLE);
    SimpleDateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setCalendar(startDate);
    String formattedStart=fmt.format(startDate.getTime());
    String formattedEnd=fmt.format(endDate.getTime());
    mResultView.setText(""String_Node_Str"" + formattedStart + ""String_Node_Str""+ formattedEnd);
  }
 else {
    mResultView.setVisibility(View.VISIBLE);
    mResultView.setText(getResources().getString(R.string.empty_fields));
  }
}","public void setDateFilter(){
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return;
  String blogId=String.valueOf(blog.getBlogId());
  GregorianCalendar startDate=new GregorianCalendar(startYear,startMonth,startDay);
  GregorianCalendar endDate=new GregorianCalendar(endYear,endMonth,endDay);
  long one_day=24 * 60 * 60* 1000;
  Cursor cursor=WordPress.wpDB.getMediaFilesForBlog(blogId,startDate.getTimeInMillis(),endDate.getTimeInMillis() + one_day);
  mGridAdapter.swapCursor(cursor);
  if (cursor != null && cursor.moveToFirst()) {
    mResultView.setVisibility(View.VISIBLE);
    SimpleDateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setCalendar(startDate);
    String formattedStart=fmt.format(startDate.getTime());
    String formattedEnd=fmt.format(endDate.getTime());
    mResultView.setText(""String_Node_Str"" + formattedStart + ""String_Node_Str""+ formattedEnd);
  }
 else {
    mResultView.setVisibility(View.VISIBLE);
    mResultView.setText(getResources().getString(R.string.empty_fields));
  }
}",0.9486203615604186
15060,"public void refreshMediaFromDB(){
  setFilter(mFilter);
  if (mGridAdapter == null) {
    mGridAdapter=new MediaGridAdapter(getActivity(),null,0,mCheckedItems);
    mGridAdapter.setCallback(this);
    mGridView.setAdapter(mGridAdapter);
    mGridView.setSelection(mSavedFirstVisiblePosition);
  }
  if (mCursor != null && mCursor.getCount() == 0 && !mHasRetrievedAllMedia) {
    refreshMediaFromServer(0,true);
  }
  mGridAdapter.swapCursor(mCursor);
}","public void refreshMediaFromDB(){
  setFilter(mFilter);
  if (mGridAdapter.getCount() == 0 && !mHasRetrievedAllMedia) {
    refreshMediaFromServer(0,true);
  }
}",0.5252854812398042
15061,"public void search(String searchTerm){
  Blog blog=WordPress.getCurrentBlog();
  if (blog != null) {
    String blogId=String.valueOf(blog.getBlogId());
    mCursor=WordPress.wpDB.getMediaFilesForBlog(blogId,searchTerm);
    mGridAdapter.changeCursor(mCursor);
  }
}","public void search(String searchTerm){
  Blog blog=WordPress.getCurrentBlog();
  if (blog != null) {
    String blogId=String.valueOf(blog.getBlogId());
    Cursor cursor=WordPress.wpDB.getMediaFilesForBlog(blogId,searchTerm);
    mGridAdapter.changeCursor(cursor);
  }
}",0.9795158286778398
15062,"@Override public void onResume(){
  super.onResume();
  setupSpinnerAdapter();
  refreshMediaFromDB();
}","@Override public void onResume(){
  super.onResume();
  refreshSpinnerAdapter();
  refreshMediaFromDB();
}",0.9523809523809524
15063,"public void setFilter(Filter filter){
  mFilter=filter;
  mCursor=filterItems(mFilter);
  if (mGridAdapter != null && mCursor != null) {
    mGridAdapter.swapCursor(mCursor);
    mResultView.setVisibility(View.GONE);
  }
 else {
    if (filter != Filter.CUSTOM_DATE) {
      mResultView.setVisibility(View.VISIBLE);
      mResultView.setText(getResources().getString(R.string.empty_fields));
    }
  }
}","public void setFilter(Filter filter){
  mFilter=filter;
  Cursor cursor=filterItems(mFilter);
  if (cursor != null) {
    mGridAdapter.swapCursor(cursor);
    mResultView.setVisibility(View.GONE);
  }
 else {
    if (filter != Filter.CUSTOM_DATE) {
      mResultView.setVisibility(View.VISIBLE);
      mResultView.setText(getResources().getString(R.string.empty_fields));
    }
  }
}",0.8982188295165394
15064,"public void reset(){
  mCheckedItems.clear();
  mGridView.setSelection(0);
  mGridView.requestFocusFromTouch();
  mGridView.setSelection(0);
  if (mGridAdapter != null) {
    mGridAdapter.swapCursor(null);
  }
  resetSpinnerAdapter();
  clearCheckedItems();
  mHasRetrievedAllMedia=false;
}","public void reset(){
  mCheckedItems.clear();
  mGridView.setSelection(0);
  mGridView.requestFocusFromTouch();
  mGridView.setSelection(0);
  mGridAdapter.swapCursor(null);
  resetSpinnerAdapter();
  clearCheckedItems();
  mHasRetrievedAllMedia=false;
}",0.9338235294117648
15065,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreateView(inflater,container,savedInstanceState);
  View view=inflater.inflate(R.layout.media_grid_fragment,container);
  mGridView=(MultiSelectGridView)view.findViewById(R.id.media_gridview);
  mGridView.setOnItemClickListener(this);
  mGridView.setRecyclerListener(this);
  mGridView.setMultiSelectListener(this);
  mResultView=(TextView)view.findViewById(R.id.media_filter_result_text);
  mSpinnerContainer=view.findViewById(R.id.media_filter_spinner_container);
  mSpinnerContainer.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (mSpinner != null && !isInMultiSelect()) {
        mSpinner.performClick();
      }
    }
  }
);
  mFiltersText=new String[Filter.values().length];
  mSpinner=(CustomSpinner)view.findViewById(R.id.media_filter_spinner);
  mSpinner.setOnItemSelectedListener(mFilterSelectedListener);
  mSpinner.setOnItemSelectedEvenIfUnchangedListener(mFilterSelectedListener);
  setupSpinnerAdapter();
  mCheckedItems=new ArrayList<String>();
  restoreState(savedInstanceState);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreateView(inflater,container,savedInstanceState);
  mCheckedItems=new ArrayList<String>();
  mFiltersText=new String[Filter.values().length];
  mGridAdapter=new MediaGridAdapter(getActivity(),null,0,mCheckedItems);
  mGridAdapter.setCallback(this);
  View view=inflater.inflate(R.layout.media_grid_fragment,container);
  mGridView=(MultiSelectGridView)view.findViewById(R.id.media_gridview);
  mGridView.setOnItemClickListener(this);
  mGridView.setRecyclerListener(this);
  mGridView.setMultiSelectListener(this);
  mGridView.setAdapter(mGridAdapter);
  mResultView=(TextView)view.findViewById(R.id.media_filter_result_text);
  mSpinner=(CustomSpinner)view.findViewById(R.id.media_filter_spinner);
  mSpinner.setOnItemSelectedListener(mFilterSelectedListener);
  mSpinner.setOnItemSelectedEvenIfUnchangedListener(mFilterSelectedListener);
  mSpinnerContainer=view.findViewById(R.id.media_filter_spinner_container);
  mSpinnerContainer.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (!isInMultiSelect()) {
        mSpinner.performClick();
      }
    }
  }
);
  restoreState(savedInstanceState);
  setupSpinnerAdapter();
  return view;
}",0.3683152392440691
15066,"private void updateSelectedCategoryList(){
  SparseBooleanArray selectedItems=mListView.getCheckedItemPositions();
  for (int i=0; i < selectedItems.size(); i++) {
    if (selectedItems.get(selectedItems.keyAt(i))) {
      mSelectedCategories.add(mCategoryLevels.get(selectedItems.keyAt(i)).getName());
    }
 else {
      mSelectedCategories.remove(mCategoryLevels.get(selectedItems.keyAt(i)).getName());
    }
  }
}","private void updateSelectedCategoryList(){
  SparseBooleanArray selectedItems=mListView.getCheckedItemPositions();
  for (int i=0; i < selectedItems.size(); i++) {
    String currentName=StringUtils.unescapeHTML(mCategoryLevels.get(selectedItems.keyAt(i)).getName());
    if (selectedItems.get(selectedItems.keyAt(i))) {
      mSelectedCategories.add(currentName);
    }
 else {
      mSelectedCategories.remove(currentName);
    }
  }
}",0.702576112412178
15067,"private void populateCategoryList(){
  mCategoryLevels=CategoryNode.getSortedListOfCategoriesFromRoot(mCategories);
  for (int i=0; i < mCategoryLevels.size(); i++) {
    mCategoryNames.put(mCategoryLevels.get(i).getName(),i);
  }
  CategoryArrayAdapter categoryAdapter=new CategoryArrayAdapter(this,R.layout.categories_row,mCategoryLevels);
  this.setListAdapter(categoryAdapter);
  if (mSelectedCategories != null) {
    ListView lv=getListView();
    for (    String selectedCategory : mSelectedCategories) {
      if (mCategoryNames.keySet().contains(selectedCategory)) {
        lv.setItemChecked(mCategoryNames.get(selectedCategory),true);
      }
    }
  }
  restoreScrollOffset();
}","private void populateCategoryList(){
  mCategoryLevels=CategoryNode.getSortedListOfCategoriesFromRoot(mCategories);
  for (int i=0; i < mCategoryLevels.size(); i++) {
    mCategoryNames.put(StringUtils.unescapeHTML(mCategoryLevels.get(i).getName()),i);
  }
  CategoryArrayAdapter categoryAdapter=new CategoryArrayAdapter(this,R.layout.categories_row,mCategoryLevels);
  this.setListAdapter(categoryAdapter);
  if (mSelectedCategories != null) {
    ListView lv=getListView();
    for (    String selectedCategory : mSelectedCategories) {
      if (mCategoryNames.keySet().contains(selectedCategory)) {
        lv.setItemChecked(mCategoryNames.get(selectedCategory),true);
      }
    }
  }
  restoreScrollOffset();
}",0.9815078236130867
15068,"public static synchronized SQLTable getSQLTable(Uri uri){
  int uriMatch=sUriMatcher.match(uri);
  if (sUriMatchToSQLTableMap.indexOfKey(uriMatch) >= 0)   return sUriMatchToSQLTableMap.get(uriMatch);
  return null;
}","private static synchronized SQLTable getSQLTable(Uri uri){
  int uriMatch=sUriMatcher.match(uri);
  if (sUriMatchToSQLTableMap.indexOfKey(uriMatch) >= 0)   return sUriMatchToSQLTableMap.get(uriMatch);
  return null;
}",0.97459584295612
15069,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mCallback=(MediaAddFragmentCallback)activity;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(activity.toString() + ""String_Node_Str"" + MediaAddFragment.class.getSimpleName());
  }
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mCallback=(MediaAddFragmentCallback)activity;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(activity.toString() + ""String_Node_Str"" + MediaAddFragmentCallback.class.getSimpleName());
  }
}",0.9866666666666668
15070,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (savedInstanceState != null) {
    if (savedInstanceState.getString(""String_Node_Str"") != null)     mMediaCapturePath=savedInstanceState.getString(""String_Node_Str"");
  }
  return inflater.inflate(R.layout.actionbar_add_media_cell,container,false);
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (savedInstanceState != null && savedInstanceState.getString(BUNDLE_MEDIA_CAPTURE_PATH) != null)   mMediaCapturePath=savedInstanceState.getString(BUNDLE_MEDIA_CAPTURE_PATH);
  return inflater.inflate(R.layout.actionbar_add_media_cell,container,false);
}",0.859504132231405
15071,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (mMediaCapturePath != null && !mMediaCapturePath.equals(""String_Node_Str""))   outState.putString(""String_Node_Str"",mMediaCapturePath);
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (mMediaCapturePath != null && !mMediaCapturePath.equals(""String_Node_Str""))   outState.putString(BUNDLE_MEDIA_CAPTURE_PATH,mMediaCapturePath);
}",0.918032786885246
15072,"@Override public void onBlogChanged(){
  super.onBlogChanged();
  if (mMediaGridFragment != null && !mMediaGridFragment.hasRetrievedAllMediaFromServer()) {
    mMediaGridFragment.refreshMediaFromServer(0,false);
    startAnimatingRefreshButton();
  }
  getFeatureSet();
}","@Override public void onBlogChanged(){
  super.onBlogChanged();
  if (mMediaEditFragment != null) {
    mMediaEditFragment.loadMedia(null);
    if (!mMediaEditFragment.isInLayout() && mMediaEditFragment.isVisible())     getSupportFragmentManager().popBackStack();
  }
  getSupportFragmentManager().executePendingTransactions();
  if (mMediaItemFragment != null && mMediaItemFragment.isVisible())   getSupportFragmentManager().popBackStack();
  if (mMediaGridFragment != null) {
    mMediaGridFragment.reset();
    if (!mMediaGridFragment.hasRetrievedAllMediaFromServer()) {
      mMediaGridFragment.refreshMediaFromServer(0,false);
      startAnimatingRefreshButton();
    }
  }
  getFeatureSet();
}",0.5154639175257731
15073,"@SuppressLint(""String_Node_Str"") @Override public void bindView(final View view,Context context,Cursor cursor){
  int itemViewType=getItemViewType(cursor.getPosition());
  if (itemViewType == ViewTypes.PROGRESS.ordinal()) {
    if (mIsRefreshing) {
      mProgressBar=view;
      int height=mContext.getResources().getDimensionPixelSize(R.dimen.media_grid_progress_height);
      view.setLayoutParams(new GridView.LayoutParams(GridView.LayoutParams.MATCH_PARENT,height));
      view.setVisibility(View.VISIBLE);
    }
 else {
      view.setLayoutParams(new GridView.LayoutParams(0,0));
      view.setVisibility(View.GONE);
    }
    return;
  }
 else   if (itemViewType == ViewTypes.SPACER.ordinal()) {
    CheckableFrameLayout frameLayout=(CheckableFrameLayout)view.findViewById(R.id.media_grid_frame_layout);
    updateGridWidth(context,frameLayout);
    view.setVisibility(View.INVISIBLE);
    return;
  }
  final String mediaId=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String state=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  boolean isLocalFile=MediaUtils.isLocalFile(state);
  TextView filenameView=(TextView)view.findViewById(R.id.media_grid_item_filename);
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (filenameView != null) {
    filenameView.setText(""String_Node_Str"" + fileName);
  }
  TextView titleView=(TextView)view.findViewById(R.id.media_grid_item_name);
  String title=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (title == null || title.equals(""String_Node_Str""))   title=fileName;
  titleView.setText(title);
  TextView uploadDateView=(TextView)view.findViewById(R.id.media_grid_item_upload_date);
  if (uploadDateView != null) {
    String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
    uploadDateView.setText(""String_Node_Str"" + date);
  }
  final ImageView imageView=(ImageView)view.findViewById(R.id.media_grid_item_image);
  if (isLocalFile) {
    loadLocalImage(cursor,imageView);
  }
 else {
    loadNetworkImage(cursor,(NetworkImageView)imageView);
  }
  String fileType=null;
  String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (filePath == null)   filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  fileType=filePath.replaceAll(""String_Node_Str"",""String_Node_Str"").toUpperCase();
  TextView fileTypeView=(TextView)view.findViewById(R.id.media_grid_item_filetype);
  if (Utils.isXLarge(context)) {
    fileTypeView.setText(""String_Node_Str"" + fileType);
  }
 else {
    fileTypeView.setText(fileType);
  }
  TextView dimensionView=(TextView)view.findViewById(R.id.media_grid_item_dimension);
  if (dimensionView != null) {
    if (MediaUtils.isValidImage(filePath)) {
      int width=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
      int height=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
      if (width > 0 && height > 0) {
        String dimensions=width + ""String_Node_Str"" + height;
        dimensionView.setText(""String_Node_Str"" + dimensions);
        dimensionView.setVisibility(View.VISIBLE);
      }
    }
 else {
      dimensionView.setVisibility(View.GONE);
    }
  }
  CheckableFrameLayout frameLayout=(CheckableFrameLayout)view.findViewById(R.id.media_grid_frame_layout);
  frameLayout.setTag(mediaId);
  frameLayout.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CheckableFrameLayout view,    boolean isChecked){
      String mediaId=(String)view.getTag();
      if (isChecked) {
        if (!mCheckedItems.contains(mediaId)) {
          mCheckedItems.add(mediaId);
        }
      }
 else {
        mCheckedItems.remove(mediaId);
      }
    }
  }
);
  frameLayout.setChecked(mCheckedItems.contains(mediaId));
  updateGridWidth(context,frameLayout);
  final TextView stateTextView=(TextView)view.findViewById(R.id.media_grid_item_upload_state);
  final ProgressBar progressUpload=(ProgressBar)view.findViewById(R.id.media_grid_item_upload_progress);
  final RelativeLayout uploadStateView=(RelativeLayout)view.findViewById(R.id.media_grid_item_upload_state_container);
  if (stateTextView != null) {
    if (state != null && state.length() > 0) {
      if (state.equals(""String_Node_Str"")) {
        progressUpload.setVisibility(View.VISIBLE);
      }
 else {
        progressUpload.setVisibility(View.GONE);
      }
      if (state.equals(""String_Node_Str"")) {
        state=""String_Node_Str"";
        stateTextView.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            if (!inMultiSelect()) {
              stateTextView.setText(""String_Node_Str"");
              stateTextView.setOnClickListener(null);
              mCallback.onRetryUpload(mediaId);
            }
          }
        }
);
      }
      stateTextView.setText(state);
      uploadStateView.setVisibility(View.VISIBLE);
    }
 else {
      uploadStateView.setVisibility(View.GONE);
    }
  }
  int position=cursor.getPosition();
  if (position == mCursorDataCount - 1 && !mHasRetrievedAll) {
    if (mCallback != null) {
      mCallback.fetchMoreData(cursor.getCount());
    }
  }
}","@SuppressLint(""String_Node_Str"") @Override public void bindView(final View view,Context context,Cursor cursor){
  int itemViewType=getItemViewType(cursor.getPosition());
  if (itemViewType == ViewTypes.PROGRESS.ordinal()) {
    if (mIsRefreshing) {
      int height=mContext.getResources().getDimensionPixelSize(R.dimen.media_grid_progress_height);
      view.setLayoutParams(new GridView.LayoutParams(GridView.LayoutParams.MATCH_PARENT,height));
      view.setVisibility(View.VISIBLE);
    }
 else {
      view.setLayoutParams(new GridView.LayoutParams(0,0));
      view.setVisibility(View.GONE);
    }
    return;
  }
 else   if (itemViewType == ViewTypes.SPACER.ordinal()) {
    CheckableFrameLayout frameLayout=(CheckableFrameLayout)view.findViewById(R.id.media_grid_frame_layout);
    updateGridWidth(context,frameLayout);
    view.setVisibility(View.INVISIBLE);
    return;
  }
  final String mediaId=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String state=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  boolean isLocalFile=MediaUtils.isLocalFile(state);
  TextView filenameView=(TextView)view.findViewById(R.id.media_grid_item_filename);
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (filenameView != null) {
    filenameView.setText(""String_Node_Str"" + fileName);
  }
  TextView titleView=(TextView)view.findViewById(R.id.media_grid_item_name);
  String title=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (title == null || title.equals(""String_Node_Str""))   title=fileName;
  titleView.setText(title);
  TextView uploadDateView=(TextView)view.findViewById(R.id.media_grid_item_upload_date);
  if (uploadDateView != null) {
    String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
    uploadDateView.setText(""String_Node_Str"" + date);
  }
  final ImageView imageView=(ImageView)view.findViewById(R.id.media_grid_item_image);
  if (isLocalFile) {
    loadLocalImage(cursor,imageView);
  }
 else {
    loadNetworkImage(cursor,(NetworkImageView)imageView);
  }
  String fileType=null;
  String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (filePath == null)   filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  fileType=filePath.replaceAll(""String_Node_Str"",""String_Node_Str"").toUpperCase();
  TextView fileTypeView=(TextView)view.findViewById(R.id.media_grid_item_filetype);
  if (Utils.isXLarge(context)) {
    fileTypeView.setText(""String_Node_Str"" + fileType);
  }
 else {
    fileTypeView.setText(fileType);
  }
  TextView dimensionView=(TextView)view.findViewById(R.id.media_grid_item_dimension);
  if (dimensionView != null) {
    if (MediaUtils.isValidImage(filePath)) {
      int width=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
      int height=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
      if (width > 0 && height > 0) {
        String dimensions=width + ""String_Node_Str"" + height;
        dimensionView.setText(""String_Node_Str"" + dimensions);
        dimensionView.setVisibility(View.VISIBLE);
      }
    }
 else {
      dimensionView.setVisibility(View.GONE);
    }
  }
  CheckableFrameLayout frameLayout=(CheckableFrameLayout)view.findViewById(R.id.media_grid_frame_layout);
  frameLayout.setTag(mediaId);
  frameLayout.setOnCheckedChangeListener(new OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CheckableFrameLayout view,    boolean isChecked){
      String mediaId=(String)view.getTag();
      if (isChecked) {
        if (!mCheckedItems.contains(mediaId)) {
          mCheckedItems.add(mediaId);
        }
      }
 else {
        mCheckedItems.remove(mediaId);
      }
    }
  }
);
  frameLayout.setChecked(mCheckedItems.contains(mediaId));
  updateGridWidth(context,frameLayout);
  final TextView stateTextView=(TextView)view.findViewById(R.id.media_grid_item_upload_state);
  final ProgressBar progressUpload=(ProgressBar)view.findViewById(R.id.media_grid_item_upload_progress);
  final RelativeLayout uploadStateView=(RelativeLayout)view.findViewById(R.id.media_grid_item_upload_state_container);
  if (stateTextView != null) {
    if (state != null && state.length() > 0) {
      if (state.equals(""String_Node_Str"")) {
        progressUpload.setVisibility(View.VISIBLE);
      }
 else {
        progressUpload.setVisibility(View.GONE);
      }
      if (state.equals(""String_Node_Str"")) {
        state=""String_Node_Str"";
        stateTextView.setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View v){
            if (!inMultiSelect()) {
              ((TextView)v).setText(""String_Node_Str"");
              v.setOnClickListener(null);
              mCallback.onRetryUpload(mediaId);
            }
          }
        }
);
      }
      stateTextView.setText(state);
      uploadStateView.setVisibility(View.VISIBLE);
    }
 else {
      uploadStateView.setVisibility(View.GONE);
    }
  }
  int position=cursor.getPosition();
  if (position == mCursorDataCount - 1 && !mHasRetrievedAll) {
    if (mCallback != null) {
      mCallback.fetchMoreData(mCursorDataCount);
    }
  }
}",0.9923165578179024
15074,"@Override public void onClick(View v){
  if (!inMultiSelect()) {
    stateTextView.setText(""String_Node_Str"");
    stateTextView.setOnClickListener(null);
    mCallback.onRetryUpload(mediaId);
  }
}","@Override public void onClick(View v){
  if (!inMultiSelect()) {
    ((TextView)v).setText(""String_Node_Str"");
    v.setOnClickListener(null);
    mCallback.onRetryUpload(mediaId);
  }
}",0.9375
15075,"@Override public Cursor swapCursor(Cursor newCursor){
  if (newCursor == null)   return super.swapCursor(newCursor);
  mCursorDataCount=newCursor.getCount();
  MatrixCursor matrixCursor=new MatrixCursor(new String[]{""String_Node_Str""});
  int columnCount=getColumnCount(mContext);
  int remainder=newCursor.getCount() % columnCount;
  if (remainder > 0) {
    int spaceCount=columnCount - remainder;
    for (int i=0; i < spaceCount; i++) {
      int id=i - spaceCount;
      matrixCursor.addRow(new Object[]{id + ""String_Node_Str""});
    }
  }
  matrixCursor.addRow(new Object[]{Integer.MIN_VALUE});
  MergeCursor mergeCursor=new MergeCursor(new Cursor[]{newCursor,matrixCursor});
  return super.swapCursor(mergeCursor);
}","@Override public Cursor swapCursor(Cursor newCursor){
  if (newCursor == null) {
    mCursorDataCount=0;
    return super.swapCursor(newCursor);
  }
  mCursorDataCount=newCursor.getCount();
  MatrixCursor matrixCursor=new MatrixCursor(new String[]{""String_Node_Str""});
  int columnCount=getColumnCount(mContext);
  int remainder=newCursor.getCount() % columnCount;
  if (remainder > 0) {
    int spaceCount=columnCount - remainder;
    for (int i=0; i < spaceCount; i++) {
      int id=i - spaceCount;
      matrixCursor.addRow(new Object[]{id + ""String_Node_Str""});
    }
  }
  matrixCursor.addRow(new Object[]{Integer.MIN_VALUE});
  MergeCursor mergeCursor=new MergeCursor(new Cursor[]{newCursor,matrixCursor});
  return super.swapCursor(mergeCursor);
}",0.9783491204330176
15076,"public void setRefreshing(boolean refreshing){
  mIsRefreshing=refreshing;
  if (mProgressBar != null) {
    if (mIsRefreshing) {
      mProgressBar.setVisibility(View.VISIBLE);
    }
 else {
      mProgressBar.setVisibility(View.GONE);
    }
  }
}","public void setRefreshing(boolean refreshing){
  mIsRefreshing=refreshing;
  notifyDataSetChanged();
}",0.5085714285714286
15077,"private void updateFilterText(){
  if (WordPress.currentBlog == null)   return;
  String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
  int countAll=WordPress.wpDB.getMediaCountAll(blogId);
  int countImages=WordPress.wpDB.getMediaCountImages(blogId);
  int countUnattached=WordPress.wpDB.getMediaCountUnattached(blogId);
  mFiltersText[0]=getResources().getString(R.string.all) + ""String_Node_Str"" + countAll+ ""String_Node_Str"";
  mFiltersText[1]=getResources().getString(R.string.images) + ""String_Node_Str"" + countImages+ ""String_Node_Str"";
  mFiltersText[2]=getResources().getString(R.string.unattached) + ""String_Node_Str"" + countUnattached+ ""String_Node_Str"";
  mFiltersText[3]=getResources().getString(R.string.custom_date) + ""String_Node_Str"";
}","private void updateFilterText(){
  if (WordPress.currentBlog == null)   return;
  String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
  int countAll=WordPress.wpDB.getMediaCountAll(blogId);
  int countImages=WordPress.wpDB.getMediaCountImages(blogId);
  int countUnattached=WordPress.wpDB.getMediaCountUnattached(blogId);
  setFiltersText(countAll,countImages,countUnattached);
}",0.6095890410958904
15078,"private void loadNetworkImage(Cursor cursor,NetworkImageView imageView){
  String thumbnailURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (thumbnailURL != null) {
    imageView.setTag(thumbnailURL);
    imageView.setImageUrl(thumbnailURL,WordPress.imageLoader);
  }
}","private void loadNetworkImage(Cursor cursor,NetworkImageView imageView){
  String thumbnailURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  Uri uri=Uri.parse(thumbnailURL);
  if (thumbnailURL != null && MediaUtils.isValidImage(uri.getLastPathSegment())) {
    imageView.setTag(thumbnailURL);
    imageView.setImageUrl(thumbnailURL,WordPress.imageLoader);
  }
}",0.8678678678678678
15079,"private void configureAccount(){
  if (mIsWpcom) {
    mBlogURL=URL_WORDPRESS;
  }
 else {
    mBlogURL=mUrlEdit.getText().toString().trim();
  }
  final String username=mUsernameEdit.getText().toString().trim();
  final String password=mPasswordEdit.getText().toString().trim();
  if (mBlogURL.equals(""String_Node_Str"") || username.equals(""String_Node_Str"") || password.equals(""String_Node_Str"")) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.required_fields,R.string.url_username_password_required);
    return;
  }
  if (!(mBlogURL.toLowerCase().startsWith(""String_Node_Str"")) && !(mBlogURL.toLowerCase().startsWith(""String_Node_Str""))) {
    mBlogURL=""String_Node_Str"" + mBlogURL;
  }
  if (!URLUtil.isValidUrl(mBlogURL)) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.invalid_url,R.string.invalid_url_message);
    return;
  }
  String rsdUrl=getRSDMetaTagHrefRegEx(mBlogURL);
  if (rsdUrl == null) {
    rsdUrl=getRSDMetaTagHref(mBlogURL);
  }
  if (rsdUrl != null) {
    mXmlrpcURL=ApiHelper.getXMLRPCUrl(rsdUrl);
    if (mXmlrpcURL == null)     mXmlrpcURL=rsdUrl.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    mIsCustomURL=false;
    try {
      mClient=new XMLRPCClient(mBlogURL,mHttpuser,mHttppassword);
      try {
        mClient.call(""String_Node_Str"");
        mXmlrpcURL=mBlogURL;
        mIsCustomURL=true;
      }
 catch (      XMLRPCException e) {
        String guessURL=mBlogURL;
        if (guessURL.substring(guessURL.length() - 1,guessURL.length()).equals(""String_Node_Str"")) {
          guessURL=guessURL.substring(0,guessURL.length() - 1);
        }
        guessURL+=""String_Node_Str"";
        mClient=new XMLRPCClient(guessURL,mHttpuser,mHttppassword);
        try {
          mClient.call(""String_Node_Str"");
          mXmlrpcURL=guessURL;
        }
 catch (        XMLRPCException ex) {
        }
      }
    }
 catch (    Exception e) {
    }
  }
  if (mXmlrpcURL == null) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.error,R.string.no_site_error);
  }
 else {
    mClient=new XMLRPCClient(mXmlrpcURL,mHttpuser,mHttppassword);
    XMLRPCMethod method=new XMLRPCMethod(""String_Node_Str"",new XMLRPCMethodCallback(){
      public void callFinished(      Object[] result){
        Blog currentBlog=WordPress.getCurrentBlog();
        if (mIsWpcom) {
          SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(AccountSetupActivity.this);
          SharedPreferences.Editor editor=settings.edit();
          editor.putString(WordPress.WPCOM_USERNAME_PREFERENCE,username);
          editor.putString(WordPress.WPCOM_PASSWORD_PREFERENCE,WordPressDB.encryptPassword(password));
          editor.commit();
          WordPress.restClient.get(""String_Node_Str"",null,null);
        }
        if (mAuthOnly) {
          if (currentBlog != null) {
            if (mIsWpcom) {
              WordPress.wpDB.updateWPComCredentials(username,password);
              if (currentBlog != null && currentBlog.isDotcomFlag()) {
                currentBlog.setPassword(password);
              }
            }
 else {
              currentBlog.setPassword(password);
            }
            currentBlog.save(""String_Node_Str"");
          }
          setResult(RESULT_OK);
          finish();
          return;
        }
        Arrays.sort(result,Utils.BlogNameComparator);
        final String[] blogNames=new String[result.length];
        final String[] urls=new String[result.length];
        final String[] homeURLs=new String[result.length];
        final int[] blogIds=new int[result.length];
        final boolean[] wpcoms=new boolean[result.length];
        final String[] wpVersions=new String[result.length];
        final boolean[] isAdmins=new boolean[result.length];
        Map<Object,Object> contentHash=new HashMap<Object,Object>();
        mBlogCtr=0;
        for (int ctr=0; ctr < result.length; ctr++) {
          contentHash=(Map<Object,Object>)result[ctr];
          String blogName=contentHash.get(""String_Node_Str"").toString();
          if (blogName.length() == 0) {
            blogName=contentHash.get(""String_Node_Str"").toString();
          }
          blogNames[mBlogCtr]=blogName;
          if (mIsCustomURL)           urls[mBlogCtr]=mBlogURL;
 else           urls[mBlogCtr]=contentHash.get(""String_Node_Str"").toString();
          homeURLs[mBlogCtr]=contentHash.get(""String_Node_Str"").toString();
          blogIds[mBlogCtr]=Integer.parseInt(contentHash.get(""String_Node_Str"").toString());
          isAdmins[mBlogCtr]=Boolean.parseBoolean(contentHash.get(""String_Node_Str"").toString());
          String blogURL=urls[mBlogCtr];
          mBlogNames.add(StringUtils.unescapeHTML(blogNames[mBlogCtr].toString()));
          boolean wpcomFlag=false;
          if (blogURL.toLowerCase().contains(""String_Node_Str"")) {
            wpcomFlag=true;
          }
          wpcoms[mBlogCtr]=wpcomFlag;
          String wpVersion=""String_Node_Str"";
          if (!wpcomFlag) {
            Map<String,String> hPost=new HashMap<String,String>();
            hPost.put(""String_Node_Str"",""String_Node_Str"");
            Object[] vParams={1,username,password,hPost};
            Object versionResult=new Object();
            try {
              versionResult=(Object)mClient.call(""String_Node_Str"",vParams);
            }
 catch (            XMLRPCException e) {
            }
            if (versionResult != null) {
              try {
                contentHash=(Map<Object,Object>)versionResult;
                Map<?,?> sv=(Map<?,?>)contentHash.get(""String_Node_Str"");
                wpVersion=sv.get(""String_Node_Str"").toString();
              }
 catch (              Exception e) {
              }
            }
          }
 else {
            wpVersion=""String_Node_Str"";
          }
          wpVersions[mBlogCtr]=wpVersion;
          mBlogCtr++;
        }
        mProgressDialog.dismiss();
        if (mBlogCtr == 0) {
          String additionalText=""String_Node_Str"";
          if (result.length > 0) {
            additionalText=getString(R.string.additional);
          }
          AlertUtil.showAlert(AccountSetupActivity.this,R.string.no_blogs_found,String.format(getString(R.string.no_blogs_message),additionalText),getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
);
        }
 else {
          if (mBlogCtr > 1) {
            LayoutInflater inflater=(LayoutInflater)AccountSetupActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            final ListView lv=(ListView)inflater.inflate(R.layout.select_blogs_list,null);
            lv.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
            lv.setItemsCanFocus(false);
            ArrayAdapter<CharSequence> blogs=new ArrayAdapter<CharSequence>(AccountSetupActivity.this,R.layout.blogs_row,mBlogNames);
            lv.setAdapter(blogs);
            AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AccountSetupActivity.this);
            dialogBuilder.setTitle(R.string.select_blogs);
            dialogBuilder.setView(lv);
            dialogBuilder.setNegativeButton(R.string.add_selected,new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                SparseBooleanArray selectedItems=lv.getCheckedItemPositions();
                for (int i=0; i < selectedItems.size(); i++) {
                  if (selectedItems.get(selectedItems.keyAt(i)) == true) {
                    int rowID=selectedItems.keyAt(i);
                    long blogID=-1;
                    blogID=WordPress.wpDB.checkMatch(blogNames[rowID],urls[rowID],username,password);
                    if (blogID == -1) {
                      blogID=WordPress.wpDB.addAccount(urls[rowID],homeURLs[rowID],blogNames[rowID],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,20,false,blogIds[rowID],wpcoms[rowID],wpVersions[rowID],isAdmins[rowID]);
                    }
                    if (i == 0) {
                      if (blogID >= 0) {
                        WordPress.setCurrentBlog((int)blogID);
                      }
                    }
                  }
                }
                setResult(RESULT_OK);
                finish();
              }
            }
);
            dialogBuilder.setPositiveButton(R.string.add_all,new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                for (int i=0; i < mBlogCtr; i++) {
                  long blogID;
                  blogID=WordPress.wpDB.checkMatch(blogNames[i],urls[i],username,password);
                  if (blogID == -1) {
                    blogID=WordPress.wpDB.addAccount(urls[i],homeURLs[i],blogNames[i],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,5,false,blogIds[i],wpcoms[i],wpVersions[i],isAdmins[i]);
                  }
                  if (i == 0) {
                    if (blogID >= 0) {
                      WordPress.setCurrentBlog((int)blogID);
                    }
                  }
                }
                setResult(RESULT_OK);
                finish();
              }
            }
);
            dialogBuilder.setCancelable(true);
            AlertDialog ad=dialogBuilder.create();
            ad.setInverseBackgroundForced(true);
            ad.show();
            final Button addSelected=ad.getButton(AlertDialog.BUTTON_NEGATIVE);
            addSelected.setEnabled(false);
            lv.setOnItemClickListener(new OnItemClickListener(){
              public void onItemClick(              AdapterView<?> arg0,              View arg1,              int arg2,              long arg3){
                SparseBooleanArray selectedItems=lv.getCheckedItemPositions();
                boolean isChecked=false;
                for (int i=0; i < selectedItems.size(); i++) {
                  if (selectedItems.get(selectedItems.keyAt(i)) == true) {
                    isChecked=true;
                  }
                }
                if (!isChecked) {
                  addSelected.setEnabled(false);
                }
 else {
                  addSelected.setEnabled(true);
                }
              }
            }
);
          }
 else {
            long blogID;
            blogID=WordPress.wpDB.checkMatch(blogNames[0],urls[0],username,password);
            if (blogID == -1) {
              blogID=WordPress.wpDB.addAccount(urls[0],homeURLs[0],blogNames[0],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,5,false,blogIds[0],wpcoms[0],wpVersions[0],isAdmins[0]);
            }
            if (blogID >= 0) {
              WordPress.setCurrentBlog((int)blogID);
            }
            setResult(RESULT_OK);
            finish();
          }
        }
      }
    }
);
    Object[] params={username,password};
    method.call(params);
  }
}","private void configureAccount(){
  if (mIsWpcom) {
    mBlogURL=URL_WORDPRESS;
  }
 else {
    mBlogURL=mUrlEdit.getText().toString().trim();
  }
  final String username=mUsernameEdit.getText().toString().trim();
  final String password=mPasswordEdit.getText().toString().trim();
  if (mBlogURL.equals(""String_Node_Str"") || username.equals(""String_Node_Str"") || password.equals(""String_Node_Str"")) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.required_fields,R.string.url_username_password_required);
    return;
  }
  if (!(mBlogURL.toLowerCase().startsWith(""String_Node_Str"")) && !(mBlogURL.toLowerCase().startsWith(""String_Node_Str""))) {
    mBlogURL=""String_Node_Str"" + mBlogURL;
  }
  if (!URLUtil.isValidUrl(mBlogURL)) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.invalid_url,R.string.invalid_url_message);
    return;
  }
  String rsdUrl=getRSDMetaTagHrefRegEx(mBlogURL);
  if (rsdUrl == null) {
    rsdUrl=getRSDMetaTagHref(mBlogURL);
  }
  if (rsdUrl != null) {
    mXmlrpcURL=ApiHelper.getXMLRPCUrl(rsdUrl);
    if (mXmlrpcURL == null)     mXmlrpcURL=rsdUrl.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    mIsCustomURL=false;
    try {
      mClient=new XMLRPCClient(mBlogURL,mHttpuser,mHttppassword);
      try {
        mClient.call(""String_Node_Str"");
        mXmlrpcURL=mBlogURL;
        mIsCustomURL=true;
      }
 catch (      XMLRPCException e) {
        String guessURL=mBlogURL;
        if (guessURL.substring(guessURL.length() - 1,guessURL.length()).equals(""String_Node_Str"")) {
          guessURL=guessURL.substring(0,guessURL.length() - 1);
        }
        guessURL+=""String_Node_Str"";
        mClient=new XMLRPCClient(guessURL,mHttpuser,mHttppassword);
        try {
          mClient.call(""String_Node_Str"");
          mXmlrpcURL=guessURL;
        }
 catch (        XMLRPCException ex) {
        }
      }
    }
 catch (    Exception e) {
    }
  }
  if (mXmlrpcURL == null) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.error,R.string.no_site_error);
  }
 else {
    mClient=new XMLRPCClient(mXmlrpcURL,mHttpuser,mHttppassword);
    XMLRPCMethod method=new XMLRPCMethod(""String_Node_Str"",new XMLRPCMethodCallback(){
      public void callFinished(      Object[] result){
        Blog currentBlog=WordPress.getCurrentBlog();
        if (mIsWpcom) {
          SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(AccountSetupActivity.this);
          SharedPreferences.Editor editor=settings.edit();
          editor.putString(WordPress.WPCOM_USERNAME_PREFERENCE,username);
          editor.putString(WordPress.WPCOM_PASSWORD_PREFERENCE,WordPressDB.encryptPassword(password));
          editor.commit();
          WordPress.restClient.get(""String_Node_Str"",null,null);
        }
        if (mAuthOnly) {
          if (currentBlog != null) {
            if (mIsWpcom) {
              WordPress.wpDB.updateWPComCredentials(username,password);
              if (currentBlog != null && currentBlog.isDotcomFlag()) {
                currentBlog.setPassword(password);
              }
            }
 else {
              currentBlog.setPassword(password);
            }
            currentBlog.save(""String_Node_Str"");
          }
          setResult(RESULT_OK);
          finish();
          return;
        }
        Arrays.sort(result,Utils.BlogNameComparator);
        final String[] blogNames=new String[result.length];
        final String[] urls=new String[result.length];
        final String[] homeURLs=new String[result.length];
        final int[] blogIds=new int[result.length];
        final boolean[] wpcoms=new boolean[result.length];
        final String[] wpVersions=new String[result.length];
        final boolean[] isAdmins=new boolean[result.length];
        Map<Object,Object> contentHash=new HashMap<Object,Object>();
        mBlogCtr=0;
        for (int ctr=0; ctr < result.length; ctr++) {
          contentHash=(Map<Object,Object>)result[ctr];
          String blogName=contentHash.get(""String_Node_Str"").toString();
          if (blogName.length() == 0) {
            blogName=contentHash.get(""String_Node_Str"").toString();
          }
          blogNames[mBlogCtr]=blogName;
          if (mIsCustomURL)           urls[mBlogCtr]=mBlogURL;
 else           urls[mBlogCtr]=contentHash.get(""String_Node_Str"").toString();
          homeURLs[mBlogCtr]=contentHash.get(""String_Node_Str"").toString();
          blogIds[mBlogCtr]=Integer.parseInt(contentHash.get(""String_Node_Str"").toString());
          isAdmins[mBlogCtr]=Boolean.parseBoolean(contentHash.get(""String_Node_Str"").toString());
          String blogURL=urls[mBlogCtr];
          mBlogNames.add(StringUtils.unescapeHTML(blogNames[mBlogCtr].toString()));
          boolean wpcomFlag=false;
          if (blogURL.toLowerCase().contains(""String_Node_Str"")) {
            wpcomFlag=true;
          }
          wpcoms[mBlogCtr]=wpcomFlag;
          String wpVersion=""String_Node_Str"";
          if (!wpcomFlag) {
            Map<String,String> hPost=new HashMap<String,String>();
            hPost.put(""String_Node_Str"",""String_Node_Str"");
            Object[] vParams={1,username,password,hPost};
            Object versionResult=new Object();
            try {
              versionResult=(Object)mClient.call(""String_Node_Str"",vParams);
            }
 catch (            XMLRPCException e) {
            }
            if (versionResult != null) {
              try {
                contentHash=(Map<Object,Object>)versionResult;
                Map<?,?> sv=(Map<?,?>)contentHash.get(""String_Node_Str"");
                wpVersion=sv.get(""String_Node_Str"").toString();
              }
 catch (              Exception e) {
              }
            }
          }
 else {
            wpVersion=""String_Node_Str"";
          }
          wpVersions[mBlogCtr]=wpVersion;
          mBlogCtr++;
        }
        mProgressDialog.dismiss();
        if (mBlogCtr == 0) {
          String additionalText=""String_Node_Str"";
          if (result.length > 0) {
            additionalText=getString(R.string.additional);
          }
          AlertUtil.showAlert(AccountSetupActivity.this,R.string.no_blogs_found,String.format(getString(R.string.no_blogs_message),additionalText),getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
);
        }
 else {
          if (mBlogCtr > 1) {
            LayoutInflater inflater=(LayoutInflater)AccountSetupActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            final ListView lv=(ListView)inflater.inflate(R.layout.select_blogs_list,null);
            lv.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
            lv.setItemsCanFocus(false);
            ArrayAdapter<CharSequence> blogs=new ArrayAdapter<CharSequence>(AccountSetupActivity.this,R.layout.blogs_row,mBlogNames);
            lv.setAdapter(blogs);
            AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AccountSetupActivity.this);
            dialogBuilder.setTitle(R.string.select_blogs);
            dialogBuilder.setView(lv);
            dialogBuilder.setNegativeButton(R.string.add_selected,new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                SparseBooleanArray selectedItems=lv.getCheckedItemPositions();
                for (int i=0; i < selectedItems.size(); i++) {
                  if (selectedItems.get(selectedItems.keyAt(i)) == true) {
                    int rowID=selectedItems.keyAt(i);
                    long blogID=-1;
                    blogID=WordPress.wpDB.checkMatch(blogNames[rowID],urls[rowID],username,password);
                    if (blogID == -1) {
                      blogID=WordPress.wpDB.addAccount(urls[rowID],homeURLs[rowID],blogNames[rowID],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,20,false,blogIds[rowID],wpcoms[rowID],wpVersions[rowID],isAdmins[rowID]);
                    }
                    if (i == 0) {
                      if (blogID >= 0) {
                        WordPress.setCurrentBlog((int)blogID);
                      }
                    }
                  }
                }
                setResult(RESULT_OK);
                finish();
              }
            }
);
            dialogBuilder.setPositiveButton(R.string.add_all,new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                for (int i=0; i < mBlogCtr; i++) {
                  long blogID;
                  blogID=WordPress.wpDB.checkMatch(blogNames[i],urls[i],username,password);
                  if (blogID == -1) {
                    blogID=WordPress.wpDB.addAccount(urls[i],homeURLs[i],blogNames[i],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,5,false,blogIds[i],wpcoms[i],wpVersions[i],isAdmins[i]);
                  }
                  if (i == 0) {
                    if (blogID >= 0) {
                      WordPress.setCurrentBlog((int)blogID);
                    }
                  }
                }
                setResult(RESULT_OK);
                finish();
              }
            }
);
            dialogBuilder.setOnCancelListener(new OnCancelListener(){
              @Override public void onCancel(              DialogInterface dialog){
                mBlogNames.clear();
              }
            }
);
            dialogBuilder.setCancelable(true);
            AlertDialog ad=dialogBuilder.create();
            ad.setInverseBackgroundForced(true);
            ad.show();
            final Button addSelected=ad.getButton(AlertDialog.BUTTON_NEGATIVE);
            addSelected.setEnabled(false);
            lv.setOnItemClickListener(new OnItemClickListener(){
              public void onItemClick(              AdapterView<?> arg0,              View arg1,              int arg2,              long arg3){
                SparseBooleanArray selectedItems=lv.getCheckedItemPositions();
                boolean isChecked=false;
                for (int i=0; i < selectedItems.size(); i++) {
                  if (selectedItems.get(selectedItems.keyAt(i)) == true) {
                    isChecked=true;
                  }
                }
                if (!isChecked) {
                  addSelected.setEnabled(false);
                }
 else {
                  addSelected.setEnabled(true);
                }
              }
            }
);
          }
 else {
            long blogID;
            blogID=WordPress.wpDB.checkMatch(blogNames[0],urls[0],username,password);
            if (blogID == -1) {
              blogID=WordPress.wpDB.addAccount(urls[0],homeURLs[0],blogNames[0],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,5,false,blogIds[0],wpcoms[0],wpVersions[0],isAdmins[0]);
            }
            if (blogID >= 0) {
              WordPress.setCurrentBlog((int)blogID);
            }
            setResult(RESULT_OK);
            finish();
          }
        }
      }
    }
);
    Object[] params={username,password};
    method.call(params);
  }
}",0.9901645128567018
15080,"private String getRealPathFromURI(Uri contentUri){
  String[] proj={MediaStore.Images.Media.DATA};
  CursorLoader loader=new CursorLoader(getActivity(),contentUri,proj,null,null,null);
  Cursor cursor=loader.loadInBackground();
  int column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
  cursor.moveToFirst();
  String path=cursor.getString(column_index);
  cursor.close();
  return path;
}","private String getRealPathFromURI(Uri contentUri){
  if (contentUri == null)   return null;
  String[] proj={MediaStore.Images.Media.DATA};
  CursorLoader loader=new CursorLoader(getActivity(),contentUri,proj,null,null,null);
  Cursor cursor=loader.loadInBackground();
  int column_index=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
  cursor.moveToFirst();
  String path=cursor.getString(column_index);
  cursor.close();
  return path;
}",0.9524913093858632
15081,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == android.R.id.home) {
    FragmentManager fm=getSupportFragmentManager();
    if (fm.getBackStackEntryCount() > 0) {
      fm.popBackStack();
      setupBaseLayout();
      return true;
    }
  }
 else   if (itemId == R.id.menu_new_media) {
    View view=findViewById(R.id.menu_new_media);
    int y_offset=getResources().getDimensionPixelSize(R.dimen.action_bar_spinner_y_offset);
    mAddMediaPopup.showAsDropDown(view,0,y_offset);
    return true;
  }
 else   if (itemId == R.id.menu_search) {
    mSearchMenuItem=item;
    mSearchMenuItem.setOnActionExpandListener(this);
    mSearchMenuItem.expandActionView();
    mSearchView=(SearchView)item.getActionView();
    mSearchView.setOnQueryTextListener(this);
    return true;
  }
 else   if (itemId == R.id.menu_refresh) {
    if (mMediaGridFragment != null) {
      mMediaGridFragment.refreshMediaFromServer(0,false);
      startAnimatingRefreshButton();
    }
    return true;
  }
 else   if (itemId == R.id.menu_edit_media) {
    String mediaId=mMediaItemFragment.getMediaId();
    FragmentManager fm=getSupportFragmentManager();
    if (mMediaEditFragment == null || !mMediaEditFragment.isInLayout()) {
      FragmentTransaction ft=fm.beginTransaction();
      if (mMediaItemFragment.isVisible())       ft.hide(mMediaItemFragment);
      mMediaEditFragment=MediaEditFragment.newInstance(mediaId);
      ft.add(R.id.media_browser_container,mMediaEditFragment,MediaEditFragment.TAG);
      ft.addToBackStack(null);
      ft.commit();
      mMenuDrawer.setDrawerIndicatorEnabled(false);
    }
 else {
      mMediaEditFragment.loadMedia(mediaId);
    }
    if (mSearchView != null)     mSearchView.clearFocus();
  }
 else   if (itemId == R.id.menu_delete) {
    String mediaId=mMediaEditFragment.getMediaId();
    launchConfirmDeleteDialog(mediaId);
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == android.R.id.home) {
    FragmentManager fm=getSupportFragmentManager();
    if (fm.getBackStackEntryCount() > 0) {
      fm.popBackStack();
      setupBaseLayout();
      return true;
    }
  }
 else   if (itemId == R.id.menu_new_media) {
    View view=findViewById(R.id.menu_new_media);
    int y_offset=getResources().getDimensionPixelSize(R.dimen.action_bar_spinner_y_offset);
    mAddMediaPopup.showAsDropDown(view,0,y_offset);
    return true;
  }
 else   if (itemId == R.id.menu_search) {
    mSearchMenuItem=item;
    mSearchMenuItem.setOnActionExpandListener(this);
    mSearchMenuItem.expandActionView();
    mSearchView=(SearchView)item.getActionView();
    mSearchView.setOnQueryTextListener(this);
    return true;
  }
 else   if (itemId == R.id.menu_refresh) {
    if (mMediaGridFragment != null) {
      mMediaGridFragment.refreshMediaFromServer(0,false);
      startAnimatingRefreshButton();
    }
    return true;
  }
 else   if (itemId == R.id.menu_edit_media) {
    String mediaId=mMediaItemFragment.getMediaId();
    FragmentManager fm=getSupportFragmentManager();
    if (mMediaEditFragment == null || !mMediaEditFragment.isInLayout()) {
      FragmentTransaction ft=fm.beginTransaction();
      if (mMediaItemFragment.isVisible())       ft.hide(mMediaItemFragment);
      mMediaEditFragment=MediaEditFragment.newInstance(mediaId);
      ft.add(R.id.media_browser_container,mMediaEditFragment,MediaEditFragment.TAG);
      ft.addToBackStack(null);
      ft.commit();
      mMenuDrawer.setDrawerIndicatorEnabled(false);
    }
 else {
      mMediaEditFragment.loadMedia(mediaId);
    }
    if (mSearchView != null)     mSearchView.clearFocus();
  }
 else   if (itemId == R.id.menu_delete) {
    if (mMediaEditFragment != null && mMediaEditFragment.isInLayout()) {
      String mediaId=mMediaEditFragment.getMediaId();
      launchConfirmDeleteDialog(mediaId);
    }
  }
  return super.onOptionsItemSelected(item);
}",0.9792759051186016
15082,"private boolean inMultiSelect(){
  return mCheckedItems.size() > 0;
}","private boolean inMultiSelect(){
  return mCallback.isInMultiSelect();
}",0.7375886524822695
15083,"public boolean isInMultiSelect(){
  return mGridView.isInMultiSelectMode();
}","@Override public boolean isInMultiSelect(){
  return mGridView.isInMultiSelectMode();
}",0.9390243902439024
15084,"public void refreshMediaFromServer(int offset,final boolean auto){
  if (WordPress.getCurrentBlog() == null)   return;
  if (offset == 0 || !mIsRefreshing) {
    mIsRefreshing=true;
    mListener.onMediaItemListDownloadStart();
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    Callback callback=new Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        mIsRefreshing=false;
        if (MediaGridFragment.this.isVisible()) {
          refreshSpinnerAdapter();
          setFilter(mFilter);
          if (!auto)           mGridView.post(new Runnable(){
            @Override public void run(){
              mGridView.setSelection(0);
            }
          }
);
        }
        mListener.onMediaItemListDownloaded();
        mGridAdapter.setRefreshing(false);
      }
      @Override public void onFailure(){
        mIsRefreshing=false;
        mListener.onMediaItemListDownloaded();
        mGridAdapter.setRefreshing(false);
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,mFilter,callback);
    getMediaTask.execute(apiArgs);
  }
}","public void refreshMediaFromServer(int offset,final boolean auto){
  if (WordPress.getCurrentBlog() == null)   return;
  if (offset == 0 || !mIsRefreshing) {
    if (offset == mOldMediaSyncOffset) {
      offset=0;
    }
    mOldMediaSyncOffset=offset;
    mIsRefreshing=true;
    mListener.onMediaItemListDownloadStart();
    mGridAdapter.setRefreshing(true);
    List<Object> apiArgs=new ArrayList<Object>();
    apiArgs.add(WordPress.getCurrentBlog());
    Callback callback=new Callback(){
      @Override public void onSuccess(      int count){
        MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
        mHasRetrievedAllMedia=(count == 0);
        adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        mIsRefreshing=false;
        if (getActivity() != null && MediaGridFragment.this.isVisible()) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              refreshSpinnerAdapter();
              setFilter(mFilter);
              if (!auto)               mGridView.setSelection(0);
              mListener.onMediaItemListDownloaded();
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
      @Override public void onFailure(      int errorCode){
        if (errorCode == SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP) {
          Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
          mHasRetrievedAllMedia=true;
          adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
        }
        if (getActivity() != null && MediaGridFragment.this.isVisible()) {
          getActivity().runOnUiThread(new Runnable(){
            @Override public void run(){
              mIsRefreshing=false;
              mListener.onMediaItemListDownloaded();
              mGridAdapter.setRefreshing(false);
            }
          }
);
        }
      }
    }
;
    ApiHelper.SyncMediaLibraryTask getMediaTask=new ApiHelper.SyncMediaLibraryTask(offset,mFilter,callback);
    getMediaTask.execute(apiArgs);
  }
}",0.5956719817767654
15085,"@Override public void onFailure(){
  mIsRefreshing=false;
  mListener.onMediaItemListDownloaded();
  mGridAdapter.setRefreshing(false);
}","@Override public void onFailure(int errorCode){
  if (errorCode == SyncMediaLibraryTask.NO_UPLOAD_FILES_CAP) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
    mHasRetrievedAllMedia=true;
    adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  }
  if (getActivity() != null && MediaGridFragment.this.isVisible()) {
    getActivity().runOnUiThread(new Runnable(){
      @Override public void run(){
        mIsRefreshing=false;
        mListener.onMediaItemListDownloaded();
        mGridAdapter.setRefreshing(false);
      }
    }
);
  }
}",0.3499361430395913
15086,"@Override public void run(){
  mGridView.setSelection(0);
}","@Override public void run(){
  mIsRefreshing=false;
  mListener.onMediaItemListDownloaded();
  mGridAdapter.setRefreshing(false);
}",0.5052631578947369
15087,"@Override public void onSuccess(int count){
  MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
  mHasRetrievedAllMedia=(count == 0);
  adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  mIsRefreshing=false;
  if (MediaGridFragment.this.isVisible()) {
    refreshSpinnerAdapter();
    setFilter(mFilter);
    if (!auto)     mGridView.post(new Runnable(){
      @Override public void run(){
        mGridView.setSelection(0);
      }
    }
);
  }
  mListener.onMediaItemListDownloaded();
  mGridAdapter.setRefreshing(false);
}","@Override public void onSuccess(int count){
  MediaGridAdapter adapter=(MediaGridAdapter)mGridView.getAdapter();
  mHasRetrievedAllMedia=(count == 0);
  adapter.setHasRetrieviedAll(mHasRetrievedAllMedia);
  mIsRefreshing=false;
  if (getActivity() != null && MediaGridFragment.this.isVisible()) {
    getActivity().runOnUiThread(new Runnable(){
      @Override public void run(){
        refreshSpinnerAdapter();
        setFilter(mFilter);
        if (!auto)         mGridView.setSelection(0);
        mListener.onMediaItemListDownloaded();
        mGridAdapter.setRefreshing(false);
      }
    }
);
  }
}",0.6614583333333334
15088,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == R.id.menu_delete) {
    Builder builder=new AlertDialog.Builder(getActivity()).setMessage(R.string.confirm_delete_media).setCancelable(true).setPositiveButton(R.string.delete,new OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        ArrayList<String> ids=new ArrayList<String>(1);
        ids.add(getMediaId());
        mCallback.onDeleteMedia(ids);
      }
    }
).setNegativeButton(R.string.cancel,null);
    AlertDialog dialog=builder.create();
    dialog.show();
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == R.id.menu_delete) {
    Builder builder=new AlertDialog.Builder(getActivity()).setMessage(R.string.confirm_delete_media).setCancelable(true).setPositiveButton(R.string.delete,new OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        ArrayList<String> ids=new ArrayList<String>(1);
        ids.add(getMediaId());
        mCallback.onDeleteMedia(ids);
      }
    }
).setNegativeButton(R.string.cancel,null);
    AlertDialog dialog=builder.create();
    dialog.show();
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.9876900796524256
15089,"public static void launchPictureVideoLibrary(Fragment fragment){
  Intent videoPickerIntent=new Intent(Intent.ACTION_PICK);
  videoPickerIntent.setType(""String_Node_Str"");
  fragment.startActivityForResult(videoPickerIntent,RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_VIDEO_LIBRARY);
}","public static void launchPictureVideoLibrary(Fragment fragment){
  Intent intent=new Intent(Intent.ACTION_PICK);
  intent.setType(""String_Node_Str"");
  intent.putExtra(Intent.EXTRA_LOCAL_ONLY,true);
  fragment.startActivityForResult(intent,RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_VIDEO_LIBRARY);
}",0.7422680412371134
15090,"public static void launchVideoLibrary(Fragment fragment){
  Intent videoPickerIntent=new Intent(Intent.ACTION_PICK);
  videoPickerIntent.setType(""String_Node_Str"");
  fragment.startActivityForResult(videoPickerIntent,RequestCode.ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY);
}","public static void launchVideoLibrary(Fragment fragment){
  Intent intent=new Intent(Intent.ACTION_PICK);
  intent.setType(""String_Node_Str"");
  intent.putExtra(Intent.EXTRA_LOCAL_ONLY,true);
  fragment.startActivityForResult(intent,RequestCode.ACTIVITY_REQUEST_CODE_VIDEO_LIBRARY);
}",0.7282608695652174
15091,"public static void launchPictureLibrary(Fragment fragment){
  Intent photoPickerIntent=new Intent(Intent.ACTION_PICK);
  photoPickerIntent.setType(""String_Node_Str"");
  fragment.startActivityForResult(photoPickerIntent,RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY);
}","public static void launchPictureLibrary(Fragment fragment){
  Intent intent=new Intent(Intent.ACTION_PICK);
  intent.setType(""String_Node_Str"");
  intent.putExtra(Intent.EXTRA_LOCAL_ONLY,true);
  fragment.startActivityForResult(intent,RequestCode.ACTIVITY_REQUEST_CODE_PICTURE_LIBRARY);
}",0.7321428571428571
15092,"protected void onPostExecute(Boolean result){
  if (isCancelled() || !result) {
    mOnRefreshListener.onRefresh(false);
    if (getActivity() == null)     return;
    if (errorMsg != ""String_Node_Str"" && !getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(String.format(getResources().getString(R.string.error_refresh),(isPage) ? getResources().getText(R.string.pages) : getResources().getText(R.string.posts)),errorMsg);
      try {
        alert.show(ft,""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      errorMsg=""String_Node_Str"";
    }
    return;
  }
  if (loadMore)   switcher.showPrevious();
  mOnRefreshListener.onRefresh(false);
  if (isAdded())   loadPosts(loadMore);
}","protected void onPostExecute(Boolean result){
  if (isCancelled() || !result) {
    mOnRefreshListener.onRefresh(false);
    if (getActivity() == null)     return;
    if (errorMsg != ""String_Node_Str"" && !getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(String.format(getResources().getString(R.string.error_refresh),(isPage) ? getResources().getText(R.string.pages) : getResources().getText(R.string.posts)),errorMsg);
      try {
        alert.show(ft,""String_Node_Str"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      errorMsg=""String_Node_Str"";
    }
    return;
  }
  if (loadMore)   switcher.showPrevious();
  mOnRefreshListener.onRefresh(false);
  if (isAdded()) {
    if (getActivity() != null) {
      getActivity().runOnUiThread(new Runnable(){
        @Override public void run(){
          loadPosts(loadMore);
        }
      }
);
    }
  }
}",0.9133010231556272
15093,"private void fetchThemes(){
  if (mFetchingThemes)   return;
  String siteId=getBlogId();
  mFetchingThemes=true;
  mProgressBar.setVisibility(View.VISIBLE);
  startAnimatingRefreshButton();
  WordPress.restClient.getThemes(siteId,0,0,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new FetchThemesTask().execute(response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError response){
      if (response.toString().equals(AuthFailureError.class.getName())) {
        String errorTitle=getString(R.string.theme_auth_error_title);
        String errorMsg=getString(R.string.theme_auth_error_message);
        FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
        WPAlertDialogFragment fragment=WPAlertDialogFragment.newInstance(errorMsg,errorTitle,false);
        ft.add(fragment,""String_Node_Str"");
        ft.commitAllowingStateLoss();
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        Toast.makeText(ThemeBrowserActivity.this,R.string.theme_fetch_failed,Toast.LENGTH_LONG).show();
        Log.d(""String_Node_Str"",""String_Node_Str"" + response.toString());
      }
      mFetchingThemes=false;
      mProgressBar.setVisibility(View.GONE);
      stopAnimatingRefreshButton();
      refreshViewPager();
    }
  }
);
}","private void fetchThemes(){
  if (mFetchingThemes)   return;
  String siteId=getBlogId();
  mFetchingThemes=true;
  mProgressBar.setVisibility(View.VISIBLE);
  startAnimatingRefreshButton();
  WordPress.restClient.getThemes(siteId,0,0,new Listener(){
    @Override public void onResponse(    JSONObject response){
      new FetchThemesTask().execute(response);
    }
  }
,new ErrorListener(){
    @Override public void onErrorResponse(    VolleyError response){
      if (response.toString().equals(AuthFailureError.class.getName())) {
        String errorTitle=getString(R.string.theme_auth_error_title);
        String errorMsg=getString(R.string.theme_auth_error_message);
        if (!isDestroyed()) {
          FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
          WPAlertDialogFragment fragment=WPAlertDialogFragment.newInstance(errorMsg,errorTitle,false);
          ft.add(fragment,""String_Node_Str"");
          ft.commitAllowingStateLoss();
        }
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        Toast.makeText(ThemeBrowserActivity.this,R.string.theme_fetch_failed,Toast.LENGTH_LONG).show();
        Log.d(""String_Node_Str"",""String_Node_Str"" + response.toString());
      }
      mFetchingThemes=false;
      mProgressBar.setVisibility(View.GONE);
      stopAnimatingRefreshButton();
      refreshViewPager();
    }
  }
);
}",0.9824304538799414
15094,"@Override protected void onPostExecute(ArrayList<Theme> result){
  mFetchingThemes=false;
  mProgressBar.setVisibility(View.GONE);
  stopAnimatingRefreshButton();
  if (result == null) {
    Toast.makeText(ThemeBrowserActivity.this,R.string.theme_fetch_failed,Toast.LENGTH_SHORT).show();
  }
 else {
    Toast.makeText(ThemeBrowserActivity.this,R.string.theme_fetch_success,Toast.LENGTH_SHORT).show();
  }
  refreshViewPager();
}","@Override protected void onPostExecute(final ArrayList<Theme> result){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      mFetchingThemes=false;
      mProgressBar.setVisibility(View.GONE);
      stopAnimatingRefreshButton();
      if (result == null) {
        Toast.makeText(ThemeBrowserActivity.this,R.string.theme_fetch_failed,Toast.LENGTH_SHORT).show();
      }
 else {
        Toast.makeText(ThemeBrowserActivity.this,R.string.theme_fetch_success,Toast.LENGTH_SHORT).show();
      }
      refreshViewPager();
    }
  }
);
}",0.8773006134969326
15095,"public long savePost(Post post,int blogID){
  long returnValue=-1;
  if (post != null) {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",blogID);
    values.put(""String_Node_Str"",post.getTitle());
    values.put(""String_Node_Str"",post.getDate_created_gmt());
    values.put(""String_Node_Str"",post.getDescription());
    values.put(""String_Node_Str"",post.getMt_text_more());
    if (post.getJSONCategories() != null) {
      JSONArray jsonArray=null;
      try {
        jsonArray=new JSONArray(post.getJSONCategories().toString());
        values.put(""String_Node_Str"",jsonArray.toString());
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    values.put(""String_Node_Str"",post.isLocalDraft());
    values.put(""String_Node_Str"",post.getMediaPaths());
    values.put(""String_Node_Str"",post.getMt_keywords());
    values.put(""String_Node_Str"",post.getWP_password());
    values.put(""String_Node_Str"",post.getPost_status());
    values.put(""String_Node_Str"",post.isUploaded());
    values.put(""String_Node_Str"",post.isPage());
    values.put(""String_Node_Str"",post.getWP_post_format());
    values.put(""String_Node_Str"",post.getLatitude());
    values.put(""String_Node_Str"",post.getLongitude());
    values.put(""String_Node_Str"",post.isLocalChange());
    values.put(""String_Node_Str"",post.getMt_excerpt());
    returnValue=db.insert(POSTS_TABLE,null,values);
  }
  return (returnValue);
}","public long savePost(Post post,int blogID){
  long returnValue=-1;
  if (post != null) {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",blogID);
    values.put(""String_Node_Str"",post.getTitle());
    values.put(""String_Node_Str"",post.getDate_created_gmt());
    values.put(""String_Node_Str"",post.getDescription());
    values.put(""String_Node_Str"",post.getMt_text_more());
    JSONArray categoriesJsonArray=post.getJSONCategories();
    if (categoriesJsonArray != null) {
      values.put(""String_Node_Str"",categoriesJsonArray.toString());
    }
    values.put(""String_Node_Str"",post.isLocalDraft());
    values.put(""String_Node_Str"",post.getMediaPaths());
    values.put(""String_Node_Str"",post.getMt_keywords());
    values.put(""String_Node_Str"",post.getWP_password());
    values.put(""String_Node_Str"",post.getPost_status());
    values.put(""String_Node_Str"",post.isUploaded());
    values.put(""String_Node_Str"",post.isPage());
    values.put(""String_Node_Str"",post.getWP_post_format());
    values.put(""String_Node_Str"",post.getLatitude());
    values.put(""String_Node_Str"",post.getLongitude());
    values.put(""String_Node_Str"",post.isLocalChange());
    values.put(""String_Node_Str"",post.getMt_excerpt());
    returnValue=db.insert(POSTS_TABLE,null,values);
  }
  return (returnValue);
}",0.8577601728483976
15096,"public int updatePost(Post post,int blogID){
  int success=0;
  if (post != null) {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",blogID);
    values.put(""String_Node_Str"",post.getTitle());
    values.put(""String_Node_Str"",post.getDate_created_gmt());
    values.put(""String_Node_Str"",post.getDescription());
    if (post.getMt_text_more() != null)     values.put(""String_Node_Str"",post.getMt_text_more());
    values.put(""String_Node_Str"",post.isUploaded());
    if (post.getJSONCategories() != null) {
      JSONArray jsonArray=null;
      try {
        jsonArray=new JSONArray(post.getJSONCategories().toString());
        values.put(""String_Node_Str"",jsonArray.toString());
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    values.put(""String_Node_Str"",post.isLocalDraft());
    values.put(""String_Node_Str"",post.getMediaPaths());
    values.put(""String_Node_Str"",post.getMt_keywords());
    values.put(""String_Node_Str"",post.getWP_password());
    values.put(""String_Node_Str"",post.getPost_status());
    values.put(""String_Node_Str"",post.isPage());
    values.put(""String_Node_Str"",post.getWP_post_format());
    values.put(""String_Node_Str"",post.isLocalChange());
    values.put(""String_Node_Str"",post.getMt_excerpt());
    int pageInt=0;
    if (post.isPage())     pageInt=1;
    success=db.update(POSTS_TABLE,values,""String_Node_Str"" + post.getBlogID() + ""String_Node_Str""+ post.getId()+ ""String_Node_Str""+ pageInt,null);
  }
  return (success);
}","public int updatePost(Post post,int blogID){
  int success=0;
  if (post != null) {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",blogID);
    values.put(""String_Node_Str"",post.getTitle());
    values.put(""String_Node_Str"",post.getDate_created_gmt());
    values.put(""String_Node_Str"",post.getDescription());
    if (post.getMt_text_more() != null)     values.put(""String_Node_Str"",post.getMt_text_more());
    values.put(""String_Node_Str"",post.isUploaded());
    JSONArray categoriesJsonArray=post.getJSONCategories();
    if (categoriesJsonArray != null) {
      values.put(""String_Node_Str"",categoriesJsonArray.toString());
    }
    values.put(""String_Node_Str"",post.isLocalDraft());
    values.put(""String_Node_Str"",post.getMediaPaths());
    values.put(""String_Node_Str"",post.getMt_keywords());
    values.put(""String_Node_Str"",post.getWP_password());
    values.put(""String_Node_Str"",post.getPost_status());
    values.put(""String_Node_Str"",post.isPage());
    values.put(""String_Node_Str"",post.getWP_post_format());
    values.put(""String_Node_Str"",post.isLocalChange());
    values.put(""String_Node_Str"",post.getMt_excerpt());
    int pageInt=0;
    if (post.isPage())     pageInt=1;
    success=db.update(POSTS_TABLE,values,""String_Node_Str"" + post.getBlogID() + ""String_Node_Str""+ post.getId()+ ""String_Node_Str""+ pageInt,null);
  }
  return (success);
}",0.864957264957265
15097,"public JSONArray getJSONCategories(){
  JSONArray jArray=null;
  if (categories == null)   categories=""String_Node_Str"";
  try {
    categories=StringUtils.unescapeHTML(categories);
    jArray=new JSONArray(categories);
  }
 catch (  JSONException e) {
  }
  return jArray;
}","public JSONArray getJSONCategories(){
  JSONArray jArray=null;
  if (categories == null)   categories=""String_Node_Str"";
  try {
    categories=StringUtils.unescapeHTML(categories);
    jArray=new JSONArray(categories);
  }
 catch (  JSONException e) {
    Log.e(""String_Node_Str"",e.getLocalizedMessage());
  }
  return jArray;
}",0.9105960264900662
15098,"private boolean savePost(boolean isAutoSave,boolean isDraftSave){
  String title=mTitleEditText.getText().toString();
  String password=mPasswordEditText.getText().toString();
  String pubDate=mPubDateText.getText().toString();
  String excerpt=mExcerptEditText.getText().toString();
  String content=""String_Node_Str"";
  if (mLocalDraft || mIsNew && !isAutoSave) {
    Editable e=mContentEditText.getText();
    if (android.os.Build.VERSION.SDK_INT >= 14) {
      CharacterStyle[] style=e.getSpans(0,e.length(),CharacterStyle.class);
      for (int i=0; i < style.length; i++) {
        if (style[i].getClass().getName().equals(""String_Node_Str""))         e.removeSpan(style[i]);
      }
    }
    content=WPHtml.toHtml(e);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    content=mContentEditText.getText().toString();
  }
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (!mIsNew)     pubDateTimestamp=mPost.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!mIsPage) {
    tags=mTagsEditText.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"") && !isAutoSave && !isDraftSave) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPostActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        dialog.dismiss();
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!mIsNew) {
      mPost.deleteMediaFiles();
      Editable s=mContentEditText.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(mPost.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save();
          int tagStart=s.getSpanStart(wpIS);
          if (!isAutoSave) {
            s.removeSpan(wpIS);
            s.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
            if (mLocalDraft)             content=WPHtml.toHtml(s);
 else             content=s.toString();
          }
        }
      }
    }
    final String moreTag=""String_Node_Str"";
    int selectedStatus=mStatusSpinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (mBlog.isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mIsNew) {
mPost=new Post(mBlogID,title,content,excerpt,images,pubDateTimestamp,mCategories.toString(),tags,status,password,latitude,longitude,mIsPage,postFormat,true,false);
mPost.setLocalDraft(true);
if (content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
success=mPost.save();
if (success) {
mIsNew=false;
}
mPost.deleteMediaFiles();
Spannable s=mContentEditText.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(mPost.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFeatured(wpIS.isFeatured());
mf.setFeaturedInPost(wpIS.isFeaturedInPost());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save();
}
}
WordPress.currentPost=mPost;
}
 else {
if (mCurrentLocation == null) {
latitude=mPost.getLatitude();
longitude=mPost.getLongitude();
}
mPost.setTitle(title);
mPost.setMt_excerpt(excerpt);
if (mLocalDraft && content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
 else {
mPost.setDescription(content);
mPost.setMt_text_more(""String_Node_Str"");
}
mPost.setMediaPaths(images);
mPost.setDate_created_gmt(pubDateTimestamp);
mPost.setJSONCategories(new JSONArray(mCategories));
mPost.setMt_keywords(tags);
mPost.setPost_status(status);
mPost.setWP_password(password);
mPost.setLatitude(latitude);
mPost.setLongitude(longitude);
mPost.setWP_post_form(postFormat);
if (!mPost.isLocalDraft()) mPost.setLocalChange(true);
success=mPost.update();
}
}
return success;
}","private boolean savePost(boolean isAutoSave,boolean isDraftSave){
  String title=mTitleEditText.getText().toString();
  String password=mPasswordEditText.getText().toString();
  String pubDate=mPubDateText.getText().toString();
  String excerpt=mExcerptEditText.getText().toString();
  String content=""String_Node_Str"";
  if (mLocalDraft || mIsNew && !isAutoSave) {
    Editable e=mContentEditText.getText();
    if (android.os.Build.VERSION.SDK_INT >= 14) {
      CharacterStyle[] style=e.getSpans(0,e.length(),CharacterStyle.class);
      for (int i=0; i < style.length; i++) {
        if (style[i].getClass().getName().equals(""String_Node_Str""))         e.removeSpan(style[i]);
      }
    }
    content=WPHtml.toHtml(e);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    content=mContentEditText.getText().toString();
  }
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (!mIsNew)     pubDateTimestamp=mPost.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!mIsPage) {
    tags=mTagsEditText.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"") && !isAutoSave && !isDraftSave) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPostActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        dialog.dismiss();
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!mIsNew) {
      mPost.deleteMediaFiles();
      Editable s=mContentEditText.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(mPost.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save();
          int tagStart=s.getSpanStart(wpIS);
          if (!isAutoSave) {
            s.removeSpan(wpIS);
            s.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
            if (mLocalDraft)             content=WPHtml.toHtml(s);
 else             content=s.toString();
          }
        }
      }
    }
    final String moreTag=""String_Node_Str"";
    int selectedStatus=mStatusSpinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (mBlog.isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mIsNew) {
JSONArray categorisList=JSONUtil.fromStringListToJSONArray(mCategories);
mPost=new Post(mBlogID,title,content,excerpt,images,pubDateTimestamp,categorisList.toString(),tags,status,password,latitude,longitude,mIsPage,postFormat,true,false);
mPost.setLocalDraft(true);
if (content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
success=mPost.save();
if (success) {
mIsNew=false;
}
mPost.deleteMediaFiles();
Spannable s=mContentEditText.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(mPost.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFeatured(wpIS.isFeatured());
mf.setFeaturedInPost(wpIS.isFeaturedInPost());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save();
}
}
WordPress.currentPost=mPost;
}
 else {
if (mCurrentLocation == null) {
latitude=mPost.getLatitude();
longitude=mPost.getLongitude();
}
mPost.setTitle(title);
mPost.setMt_excerpt(excerpt);
if (mLocalDraft && content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
 else {
mPost.setDescription(content);
mPost.setMt_text_more(""String_Node_Str"");
}
mPost.setMediaPaths(images);
mPost.setDate_created_gmt(pubDateTimestamp);
mPost.setJSONCategories(new JSONArray(mCategories));
mPost.setMt_keywords(tags);
mPost.setPost_status(status);
mPost.setWP_password(password);
mPost.setLatitude(latitude);
mPost.setLongitude(longitude);
mPost.setWP_post_form(postFormat);
if (!mPost.isLocalDraft()) mPost.setLocalChange(true);
success=mPost.update();
}
}
return success;
}",0.9924070450097848
15099,"@Override protected Boolean doInBackground(Post... posts){
  post=posts[0];
  nm=(NotificationManager)context.getSystemService(""String_Node_Str"");
  String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
  String message=context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage;
  n=new Notification(R.drawable.notification_icon,message,System.currentTimeMillis());
  Intent notificationIntent=new Intent(context,PostsActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  notificationIntent.setAction(""String_Node_Str"");
  notificationIntent.addCategory(""String_Node_Str"");
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.getBlogID())));
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,Intent.FLAG_ACTIVITY_CLEAR_TOP);
  n.setLatestEventInfo(context,message,message,pendingIntent);
  notificationID=22 + Integer.valueOf(post.getBlogID());
  nm.notify(notificationID,n);
  if (post.getPost_status() == null) {
    post.setPost_status(""String_Node_Str"");
  }
  Boolean publishThis=false;
  Spannable s;
  String descriptionContent=""String_Node_Str"", moreContent=""String_Node_Str"";
  int moreCount=1;
  if (post.getMt_text_more() != null)   moreCount++;
  String imgTags=""String_Node_Str"";
  Pattern pattern=Pattern.compile(imgTags);
  for (int x=0; x < moreCount; x++) {
    if (post.isLocalDraft()) {
      if (x == 0)       s=(Spannable)WPHtml.fromHtml(post.getDescription(),context,post);
 else       s=(Spannable)WPHtml.fromHtml(post.getMt_text_more(),context,post);
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          String prompt=context.getResources().getText(R.string.uploading_media_item) + String.valueOf(i + 1);
          n.setLatestEventInfo(context,context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage,prompt,n.contentIntent);
          nm.notify(notificationID,n);
          WPImageSpan wpIS=click_spans[i];
          int start=s.getSpanStart(wpIS);
          int end=s.getSpanEnd(wpIS);
          MediaFile mf=new MediaFile();
          mf.setPostID(post.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          String imgHTML=uploadMediaFile(mf);
          if (imgHTML != null) {
            SpannableString ss=new SpannableString(imgHTML);
            s.setSpan(ss,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            s.removeSpan(wpIS);
          }
 else {
            s.removeSpan(wpIS);
            mediaError=true;
          }
        }
      }
      if (x == 0)       descriptionContent=WPHtml.toHtml(s);
 else       moreContent=WPHtml.toHtml(s);
    }
 else {
      Matcher matcher;
      if (x == 0) {
        descriptionContent=post.getDescription();
        matcher=pattern.matcher(descriptionContent);
      }
 else {
        moreContent=post.getMt_text_more();
        matcher=pattern.matcher(moreContent);
      }
      List<String> imageTags=new ArrayList<String>();
      while (matcher.find()) {
        imageTags.add(matcher.group());
      }
      for (      String tag : imageTags) {
        Pattern p=Pattern.compile(""String_Node_Str"");
        Matcher m=p.matcher(tag);
        String imgPath=""String_Node_Str"";
        if (m.find()) {
          imgPath=m.group(1);
          if (!imgPath.equals(""String_Node_Str"")) {
            MediaFile mf=WordPress.wpDB.getMediaFile(imgPath,post);
            if (mf != null) {
              String imgHTML=uploadMediaFile(mf);
              if (imgHTML != null) {
                if (x == 0) {
                  descriptionContent=descriptionContent.replace(tag,imgHTML);
                }
 else {
                  moreContent=moreContent.replace(tag,imgHTML);
                }
              }
 else {
                if (x == 0)                 descriptionContent=descriptionContent.replace(tag,""String_Node_Str"");
 else                 moreContent=moreContent.replace(tag,""String_Node_Str"");
                mediaError=true;
              }
            }
          }
        }
      }
    }
  }
  if (mediaError)   return false;
  JSONArray categories=post.getJSONCategories();
  String[] theCategories=null;
  if (categories != null) {
    theCategories=new String[categories.length()];
    for (int i=0; i < categories.length(); i++) {
      try {
        theCategories[i]=TextUtils.htmlEncode(categories.getString(i));
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
  Map<String,Object> contentStruct=new HashMap<String,Object>();
  if (!post.isPage() && post.isLocalDraft()) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    String tagline=""String_Node_Str"";
    if (prefs.getBoolean(""String_Node_Str"",false)) {
      tagline=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      if (tagline != null) {
        String tag=""String_Node_Str"" + tagline + ""String_Node_Str"";
        if (moreContent == ""String_Node_Str"")         descriptionContent+=tag;
 else         moreContent+=tag;
      }
    }
    if (!post.getWP_post_format().equals(""String_Node_Str"")) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       contentStruct.put(""String_Node_Str"",post.getWP_post_format());
    }
  }
  contentStruct.put(""String_Node_Str"",(post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",post.getTitle());
  long pubDate=post.getDate_created_gmt();
  if (pubDate != 0) {
    Date date_created_gmt=new Date(pubDate);
    contentStruct.put(""String_Node_Str"",date_created_gmt);
    Date dateCreated=new Date(pubDate + (date_created_gmt.getTimezoneOffset() * 60000));
    contentStruct.put(""String_Node_Str"",dateCreated);
  }
  if (!moreContent.equals(""String_Node_Str"")) {
    descriptionContent=descriptionContent.trim() + ""String_Node_Str"" + moreContent;
    post.setMt_text_more(""String_Node_Str"");
  }
  if (post.isLocalDraft()) {
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",descriptionContent);
  if (!post.isPage()) {
    if (post.getMt_keywords() != ""String_Node_Str"") {
      contentStruct.put(""String_Node_Str"",post.getMt_keywords());
    }
    if (theCategories != null) {
      if (theCategories.length > 0)       contentStruct.put(""String_Node_Str"",theCategories);
    }
  }
  if (post.getMt_excerpt() != null)   contentStruct.put(""String_Node_Str"",post.getMt_excerpt());
  contentStruct.put((post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"",post.getPost_status());
  Double latitude=0.0;
  Double longitude=0.0;
  if (!post.isPage()) {
    latitude=(Double)post.getLatitude();
    longitude=(Double)post.getLongitude();
    if (latitude > 0) {
      Map<Object,Object> hLatitude=new HashMap<Object,Object>();
      hLatitude.put(""String_Node_Str"",""String_Node_Str"");
      hLatitude.put(""String_Node_Str"",latitude);
      Map<Object,Object> hLongitude=new HashMap<Object,Object>();
      hLongitude.put(""String_Node_Str"",""String_Node_Str"");
      hLongitude.put(""String_Node_Str"",longitude);
      Map<Object,Object> hPublic=new HashMap<Object,Object>();
      hPublic.put(""String_Node_Str"",""String_Node_Str"");
      hPublic.put(""String_Node_Str"",1);
      Object[] geo={hLatitude,hLongitude,hPublic};
      contentStruct.put(""String_Node_Str"",geo);
    }
  }
  if (featuredImageID != -1)   contentStruct.put(""String_Node_Str"",featuredImageID);
  XMLRPCClient client=new XMLRPCClient(post.getBlog().getUrl(),post.getBlog().getHttpuser(),post.getBlog().getHttppassword());
  if (post.getQuickPostType() != null)   client.addQuickPostHeader(post.getQuickPostType());
  n.setLatestEventInfo(context,message,message,n.contentIntent);
  nm.notify(notificationID,n);
  if (post.getWP_password() != null) {
    contentStruct.put(""String_Node_Str"",post.getWP_password());
  }
  Object[] params;
  if (post.isLocalDraft() && !post.isUploaded())   params=new Object[]{post.getBlog().getBlogId(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
 else   params=new Object[]{post.getPostid(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
  try {
    client.call((post.isLocalDraft() && !post.isUploaded()) ? ""String_Node_Str"" : ""String_Node_Str"",params);
    post.setUploaded(true);
    post.setLocalChange(false);
    post.update();
    return true;
  }
 catch (  final XMLRPCException e) {
    error=String.format(context.getResources().getText(R.string.error_upload).toString(),post.isPage() ? context.getResources().getText(R.string.page).toString() : context.getResources().getText(R.string.post).toString()) + ""String_Node_Str"" + cleanXMLRPCErrorMessage(e.getMessage());
    mediaError=false;
    Log.i(""String_Node_Str"",error);
  }
  return false;
}","@Override protected Boolean doInBackground(Post... posts){
  post=posts[0];
  nm=(NotificationManager)context.getSystemService(""String_Node_Str"");
  String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
  String message=context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage;
  n=new Notification(R.drawable.notification_icon,message,System.currentTimeMillis());
  Intent notificationIntent=new Intent(context,PostsActivity.class);
  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  notificationIntent.setAction(""String_Node_Str"");
  notificationIntent.addCategory(""String_Node_Str"");
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.getBlogID())));
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,Intent.FLAG_ACTIVITY_CLEAR_TOP);
  n.setLatestEventInfo(context,message,message,pendingIntent);
  notificationID=22 + Integer.valueOf(post.getBlogID());
  nm.notify(notificationID,n);
  if (post.getPost_status() == null) {
    post.setPost_status(""String_Node_Str"");
  }
  Boolean publishThis=false;
  Spannable s;
  String descriptionContent=""String_Node_Str"", moreContent=""String_Node_Str"";
  int moreCount=1;
  if (post.getMt_text_more() != null)   moreCount++;
  String imgTags=""String_Node_Str"";
  Pattern pattern=Pattern.compile(imgTags);
  for (int x=0; x < moreCount; x++) {
    if (post.isLocalDraft()) {
      if (x == 0)       s=(Spannable)WPHtml.fromHtml(post.getDescription(),context,post);
 else       s=(Spannable)WPHtml.fromHtml(post.getMt_text_more(),context,post);
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          String prompt=context.getResources().getText(R.string.uploading_media_item) + String.valueOf(i + 1);
          n.setLatestEventInfo(context,context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage,prompt,n.contentIntent);
          nm.notify(notificationID,n);
          WPImageSpan wpIS=click_spans[i];
          int start=s.getSpanStart(wpIS);
          int end=s.getSpanEnd(wpIS);
          MediaFile mf=new MediaFile();
          mf.setPostID(post.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          String imgHTML=uploadMediaFile(mf);
          if (imgHTML != null) {
            SpannableString ss=new SpannableString(imgHTML);
            s.setSpan(ss,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            s.removeSpan(wpIS);
          }
 else {
            s.removeSpan(wpIS);
            mediaError=true;
          }
        }
      }
      if (x == 0)       descriptionContent=WPHtml.toHtml(s);
 else       moreContent=WPHtml.toHtml(s);
    }
 else {
      Matcher matcher;
      if (x == 0) {
        descriptionContent=post.getDescription();
        matcher=pattern.matcher(descriptionContent);
      }
 else {
        moreContent=post.getMt_text_more();
        matcher=pattern.matcher(moreContent);
      }
      List<String> imageTags=new ArrayList<String>();
      while (matcher.find()) {
        imageTags.add(matcher.group());
      }
      for (      String tag : imageTags) {
        Pattern p=Pattern.compile(""String_Node_Str"");
        Matcher m=p.matcher(tag);
        String imgPath=""String_Node_Str"";
        if (m.find()) {
          imgPath=m.group(1);
          if (!imgPath.equals(""String_Node_Str"")) {
            MediaFile mf=WordPress.wpDB.getMediaFile(imgPath,post);
            if (mf != null) {
              String imgHTML=uploadMediaFile(mf);
              if (imgHTML != null) {
                if (x == 0) {
                  descriptionContent=descriptionContent.replace(tag,imgHTML);
                }
 else {
                  moreContent=moreContent.replace(tag,imgHTML);
                }
              }
 else {
                if (x == 0)                 descriptionContent=descriptionContent.replace(tag,""String_Node_Str"");
 else                 moreContent=moreContent.replace(tag,""String_Node_Str"");
                mediaError=true;
              }
            }
          }
        }
      }
    }
  }
  if (mediaError)   return false;
  JSONArray categoriesJsonArray=post.getJSONCategories();
  String[] theCategories=null;
  if (categoriesJsonArray != null) {
    theCategories=new String[categoriesJsonArray.length()];
    for (int i=0; i < categoriesJsonArray.length(); i++) {
      try {
        theCategories[i]=TextUtils.htmlEncode(categoriesJsonArray.getString(i));
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
  Map<String,Object> contentStruct=new HashMap<String,Object>();
  if (!post.isPage() && post.isLocalDraft()) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    String tagline=""String_Node_Str"";
    if (prefs.getBoolean(""String_Node_Str"",false)) {
      tagline=prefs.getString(""String_Node_Str"",""String_Node_Str"");
      if (tagline != null) {
        String tag=""String_Node_Str"" + tagline + ""String_Node_Str"";
        if (moreContent == ""String_Node_Str"")         descriptionContent+=tag;
 else         moreContent+=tag;
      }
    }
    if (!post.getWP_post_format().equals(""String_Node_Str"")) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       contentStruct.put(""String_Node_Str"",post.getWP_post_format());
    }
  }
  contentStruct.put(""String_Node_Str"",(post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",post.getTitle());
  long pubDate=post.getDate_created_gmt();
  if (pubDate != 0) {
    Date date_created_gmt=new Date(pubDate);
    contentStruct.put(""String_Node_Str"",date_created_gmt);
    Date dateCreated=new Date(pubDate + (date_created_gmt.getTimezoneOffset() * 60000));
    contentStruct.put(""String_Node_Str"",dateCreated);
  }
  if (!moreContent.equals(""String_Node_Str"")) {
    descriptionContent=descriptionContent.trim() + ""String_Node_Str"" + moreContent;
    post.setMt_text_more(""String_Node_Str"");
  }
  if (post.isLocalDraft()) {
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",descriptionContent);
  if (!post.isPage()) {
    if (post.getMt_keywords() != ""String_Node_Str"") {
      contentStruct.put(""String_Node_Str"",post.getMt_keywords());
    }
    if (theCategories != null && theCategories.length > 0)     contentStruct.put(""String_Node_Str"",theCategories);
  }
  if (post.getMt_excerpt() != null)   contentStruct.put(""String_Node_Str"",post.getMt_excerpt());
  contentStruct.put((post.isPage()) ? ""String_Node_Str"" : ""String_Node_Str"",post.getPost_status());
  Double latitude=0.0;
  Double longitude=0.0;
  if (!post.isPage()) {
    latitude=(Double)post.getLatitude();
    longitude=(Double)post.getLongitude();
    if (latitude > 0) {
      Map<Object,Object> hLatitude=new HashMap<Object,Object>();
      hLatitude.put(""String_Node_Str"",""String_Node_Str"");
      hLatitude.put(""String_Node_Str"",latitude);
      Map<Object,Object> hLongitude=new HashMap<Object,Object>();
      hLongitude.put(""String_Node_Str"",""String_Node_Str"");
      hLongitude.put(""String_Node_Str"",longitude);
      Map<Object,Object> hPublic=new HashMap<Object,Object>();
      hPublic.put(""String_Node_Str"",""String_Node_Str"");
      hPublic.put(""String_Node_Str"",1);
      Object[] geo={hLatitude,hLongitude,hPublic};
      contentStruct.put(""String_Node_Str"",geo);
    }
  }
  if (featuredImageID != -1)   contentStruct.put(""String_Node_Str"",featuredImageID);
  XMLRPCClient client=new XMLRPCClient(post.getBlog().getUrl(),post.getBlog().getHttpuser(),post.getBlog().getHttppassword());
  if (post.getQuickPostType() != null)   client.addQuickPostHeader(post.getQuickPostType());
  n.setLatestEventInfo(context,message,message,n.contentIntent);
  nm.notify(notificationID,n);
  if (post.getWP_password() != null) {
    contentStruct.put(""String_Node_Str"",post.getWP_password());
  }
  Object[] params;
  if (post.isLocalDraft() && !post.isUploaded())   params=new Object[]{post.getBlog().getBlogId(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
 else   params=new Object[]{post.getPostid(),post.getBlog().getUsername(),post.getBlog().getPassword(),contentStruct,publishThis};
  try {
    client.call((post.isLocalDraft() && !post.isUploaded()) ? ""String_Node_Str"" : ""String_Node_Str"",params);
    post.setUploaded(true);
    post.setLocalChange(false);
    post.update();
    return true;
  }
 catch (  final XMLRPCException e) {
    error=String.format(context.getResources().getText(R.string.error_upload).toString(),post.isPage() ? context.getResources().getText(R.string.page).toString() : context.getResources().getText(R.string.post).toString()) + ""String_Node_Str"" + cleanXMLRPCErrorMessage(e.getMessage());
    mediaError=false;
    Log.i(""String_Node_Str"",error);
  }
  return false;
}",0.9963145600830522
15100,"/** 
 * Get the feature set for a wordpress.com hosted blog 
 */
private void getFeatureSet(){
  ApiHelper.GetFeatures task=new ApiHelper.GetFeatures(new Callback(){
    @Override public void onResult(    FeatureSet featureSet){
      mFeatureSet=featureSet;
    }
  }
);
  List<Object> apiArgs=new ArrayList<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  task.execute(apiArgs);
}","/** 
 * Get the feature set for a wordpress.com hosted blog 
 */
private void getFeatureSet(){
  if (WordPress.getCurrentBlog() == null || !WordPress.getCurrentBlog().isDotcomFlag())   return;
  ApiHelper.GetFeatures task=new ApiHelper.GetFeatures(new Callback(){
    @Override public void onResult(    FeatureSet featureSet){
      mFeatureSet=featureSet;
    }
  }
);
  List<Object> apiArgs=new ArrayList<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  task.execute(apiArgs);
}",0.8881278538812786
15101,"@Override public void onBlogChanged(){
  super.onBlogChanged();
  if (mMediaGridFragment != null && !mMediaGridFragment.hasRetrievedAllMediaFromServer()) {
    mMediaGridFragment.refreshMediaFromServer(0,false);
    startAnimatingRefreshButton();
  }
}","@Override public void onBlogChanged(){
  super.onBlogChanged();
  if (mMediaGridFragment != null && !mMediaGridFragment.hasRetrievedAllMediaFromServer()) {
    mMediaGridFragment.refreshMediaFromServer(0,false);
    startAnimatingRefreshButton();
  }
  getFeatureSet();
}",0.9636711281070746
15102,"private void loadNetworkImage(Cursor cursor,NetworkImageView imageView){
  String thumbnailURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  Uri uri=Uri.parse(thumbnailURL);
  if (thumbnailURL != null && MediaUtils.isValidImage(uri.getLastPathSegment())) {
    imageView.setTag(thumbnailURL);
    imageView.setImageUrl(thumbnailURL,WordPress.imageLoader);
  }
}","private void loadNetworkImage(Cursor cursor,NetworkImageView imageView){
  String thumbnailURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  Uri uri=Uri.parse(thumbnailURL);
  if (thumbnailURL != null && MediaUtils.isValidImage(uri.getLastPathSegment())) {
    imageView.setTag(thumbnailURL);
    imageView.setImageUrl(thumbnailURL,WordPress.imageLoader);
  }
 else {
    imageView.setImageUrl(null,null);
  }
}",0.9378109452736318
15103,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  CheckableFrameLayout frameLayout=((CheckableFrameLayout)view.findViewById(R.id.media_grid_frame_layout));
  if (!isInMultiSelectMode()) {
    getSelectedItems().clear();
    notifyMultiSelectCountChanged();
    frameLayout.setChecked(true);
    mOnItemClickListener.onItemClick(parent,view,position,id);
    mAdapter.notifyDataSetChanged();
    return;
  }
  Cursor cursor=((CursorAdapter)parent.getAdapter()).getCursor();
  String mediaId=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (getSelectedItems().contains(mediaId)) {
    frameLayout.setChecked(false);
  }
 else {
    frameLayout.setChecked(true);
  }
  notifyMultiSelectCountChanged();
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  CheckableFrameLayout frameLayout=((CheckableFrameLayout)view.findViewById(R.id.media_grid_frame_layout));
  Cursor cursor=((CursorAdapter)parent.getAdapter()).getCursor();
  String mediaId=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (!isInMultiSelectMode()) {
    getSelectedItems().clear();
    getSelectedItems().add(mediaId);
    frameLayout.setChecked(true);
    mOnItemClickListener.onItemClick(parent,view,position,id);
    mAdapter.notifyDataSetChanged();
    return;
  }
  if (getSelectedItems().contains(mediaId)) {
    frameLayout.setChecked(false);
  }
 else {
    frameLayout.setChecked(true);
  }
  notifyMultiSelectCountChanged();
}",0.7717678100263852
15104,"private void restoreState(Bundle savedInstanceState){
  if (savedInstanceState == null)   return;
  if (savedInstanceState.containsKey(BUNDLE_CHECKED_STATES)) {
    boolean isInMultiSelectMode=savedInstanceState.getBoolean(BUNDLE_IN_MULTI_SELECT_MODE);
    mCheckedItems=savedInstanceState.getStringArrayList(BUNDLE_CHECKED_STATES);
    if (isInMultiSelectMode)     mListener.onMultiSelectChange(mCheckedItems.size());
    mGridView.setMultiSelectModeEnabled(isInMultiSelectMode);
  }
  mSavedFirstVisiblePosition=savedInstanceState.getInt(BUNDLE_SCROLL_POSITION,0);
  mHasRetrievedAllMedia=savedInstanceState.getBoolean(BUNDLE_HAS_RETREIEVED_ALL_MEDIA,false);
}","private void restoreState(Bundle savedInstanceState){
  if (savedInstanceState == null)   return;
  boolean isInMultiSelectMode=savedInstanceState.getBoolean(BUNDLE_IN_MULTI_SELECT_MODE);
  if (savedInstanceState.containsKey(BUNDLE_CHECKED_STATES)) {
    mCheckedItems=savedInstanceState.getStringArrayList(BUNDLE_CHECKED_STATES);
    if (isInMultiSelectMode) {
      mListener.onMultiSelectChange(mCheckedItems.size());
      onMultiSelectChange(mCheckedItems.size());
    }
    mGridView.setMultiSelectModeEnabled(isInMultiSelectMode);
  }
  mSavedFirstVisiblePosition=savedInstanceState.getInt(BUNDLE_SCROLL_POSITION,0);
  mHasRetrievedAllMedia=savedInstanceState.getBoolean(BUNDLE_HAS_RETREIEVED_ALL_MEDIA,false);
}",0.7356987690079653
15105,"public void setDateFilter(){
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return;
  String blogId=String.valueOf(blog.getBlogId());
  GregorianCalendar startDate=new GregorianCalendar(startYear,startMonth,startDay);
  GregorianCalendar endDate=new GregorianCalendar(endYear,endMonth,endDay);
  mCursor=WordPress.wpDB.getMediaFilesForBlog(blogId,startDate.getTimeInMillis(),endDate.getTimeInMillis());
  mGridAdapter.swapCursor(mCursor);
  if (mCursor != null && mCursor.getCount() > 0 && mGridAdapter != null) {
    mResultView.setVisibility(View.VISIBLE);
    SimpleDateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setCalendar(startDate);
    String formattedStart=fmt.format(startDate.getTime());
    String formattedEnd=fmt.format(endDate.getTime());
    mResultView.setText(""String_Node_Str"" + formattedStart + ""String_Node_Str""+ formattedEnd);
  }
 else {
    mResultView.setVisibility(View.VISIBLE);
    mResultView.setText(getResources().getString(R.string.empty_fields));
  }
}","public void setDateFilter(){
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return;
  String blogId=String.valueOf(blog.getBlogId());
  GregorianCalendar startDate=new GregorianCalendar(startYear,startMonth,startDay);
  GregorianCalendar endDate=new GregorianCalendar(endYear,endMonth,endDay);
  long one_day=24 * 60 * 60* 1000;
  mCursor=WordPress.wpDB.getMediaFilesForBlog(blogId,startDate.getTimeInMillis(),endDate.getTimeInMillis() + one_day);
  mGridAdapter.swapCursor(mCursor);
  if (mCursor != null && mCursor.getCount() > 0 && mGridAdapter != null) {
    mResultView.setVisibility(View.VISIBLE);
    SimpleDateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setCalendar(startDate);
    String formattedStart=fmt.format(startDate.getTime());
    String formattedEnd=fmt.format(endDate.getTime());
    mResultView.setText(""String_Node_Str"" + formattedStart + ""String_Node_Str""+ formattedEnd);
  }
 else {
    mResultView.setVisibility(View.VISIBLE);
    mResultView.setText(getResources().getString(R.string.empty_fields));
  }
}",0.9783549783549784
15106,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  if (!cursor.moveToFirst())   return;
  int numPoints=Math.min(30,cursor.getCount());
  GraphViewData[] views=new GraphViewData[numPoints];
  GraphViewData[] visitors=new GraphViewData[numPoints];
  String[] horLabels=new String[numPoints];
  for (int i=numPoints - 1; i >= 0; i--) {
    views[i]=new GraphViewData(i,getViews(cursor));
    visitors[i]=new GraphViewData(i,getVisitors(cursor));
    horLabels[i]=getDate(cursor);
    cursor.moveToNext();
  }
  viewsSeries=new GraphViewSeries(views);
  visitorsSeries=new GraphViewSeries(visitors);
  viewsSeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views);
  viewsSeries.getStyle().padding=Utils.dpToPx(1);
  visitorsSeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_visitors);
  visitorsSeries.getStyle().padding=Utils.dpToPx(3);
  graphView=new StatsBarGraph(getActivity(),""String_Node_Str"");
  graphView.addSeries(viewsSeries);
  graphView.addSeries(visitorsSeries);
  graphView.getGraphViewStyle().setNumHorizontalLabels(horLabels.length / 5);
  graphView.setHorizontalLabels(horLabels);
  mBarGraphLayout.removeAllViews();
  mBarGraphLayout.addView(graphView);
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){
  if (getActivity() == null)   return;
  if (!cursor.moveToFirst())   return;
  int numPoints=Math.min(30,cursor.getCount());
  GraphViewData[] views=new GraphViewData[numPoints];
  GraphViewData[] visitors=new GraphViewData[numPoints];
  String[] horLabels=new String[numPoints];
  for (int i=numPoints - 1; i >= 0; i--) {
    views[i]=new GraphViewData(i,getViews(cursor));
    visitors[i]=new GraphViewData(i,getVisitors(cursor));
    horLabels[i]=getDate(cursor);
    cursor.moveToNext();
  }
  viewsSeries=new GraphViewSeries(views);
  visitorsSeries=new GraphViewSeries(visitors);
  viewsSeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_views);
  viewsSeries.getStyle().padding=Utils.dpToPx(1);
  visitorsSeries.getStyle().color=getResources().getColor(R.color.stats_bar_graph_visitors);
  visitorsSeries.getStyle().padding=Utils.dpToPx(3);
  graphView=new StatsBarGraph(getActivity(),""String_Node_Str"");
  graphView.addSeries(viewsSeries);
  graphView.addSeries(visitorsSeries);
  graphView.getGraphViewStyle().setNumHorizontalLabels(horLabels.length / 5);
  graphView.setHorizontalLabels(horLabels);
  mBarGraphLayout.removeAllViews();
  mBarGraphLayout.addView(graphView);
}",0.9845422116527944
15107,"private boolean savePost(boolean isAutoSave,boolean isDraftSave){
  String title=mTitleEditText.getText().toString();
  String password=mPasswordEditText.getText().toString();
  String pubDate=mPubDateText.getText().toString();
  String content=""String_Node_Str"";
  if (mLocalDraft || mIsNew && !isAutoSave) {
    Editable e=mContentEditText.getText();
    if (android.os.Build.VERSION.SDK_INT >= 14) {
      CharacterStyle[] style=e.getSpans(0,e.length(),CharacterStyle.class);
      for (int i=0; i < style.length; i++) {
        if (style[i].getClass().getName().equals(""String_Node_Str""))         e.removeSpan(style[i]);
      }
    }
    content=StringUtils.unescapeHTML(WPHtml.toHtml(e));
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    content=mContentEditText.getText().toString();
  }
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (!mIsNew)     pubDateTimestamp=mPost.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!mIsPage) {
    tags=mTagsEditText.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"") && !isAutoSave && !isDraftSave) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPostActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        dialog.dismiss();
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!mIsNew) {
      mPost.deleteMediaFiles();
      Editable s=mContentEditText.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(mPost.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save();
          int tagStart=s.getSpanStart(wpIS);
          if (!isAutoSave) {
            s.removeSpan(wpIS);
            s.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
            if (mLocalDraft)             content=StringUtils.unescapeHTML(WPHtml.toHtml(s));
 else             content=s.toString();
          }
        }
      }
    }
    final String moreTag=""String_Node_Str"";
    int selectedStatus=mStatusSpinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (mBlog.isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mIsNew) {
mPost=new Post(mBlogID,title,content,images,pubDateTimestamp,mCategories.toString(),tags,status,password,latitude,longitude,mIsPage,postFormat,true,false);
mPost.setLocalDraft(true);
if (content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
success=mPost.save();
if (success) {
mIsNew=false;
}
mPost.deleteMediaFiles();
Spannable s=mContentEditText.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(mPost.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFeatured(wpIS.isFeatured());
mf.setFeaturedInPost(wpIS.isFeaturedInPost());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save();
}
}
WordPress.currentPost=mPost;
}
 else {
if (mCurrentLocation == null) {
latitude=mPost.getLatitude();
longitude=mPost.getLongitude();
}
mPost.setTitle(title);
if (mLocalDraft && content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
 else {
mPost.setDescription(content);
mPost.setMt_text_more(""String_Node_Str"");
}
mPost.setMediaPaths(images);
mPost.setDate_created_gmt(pubDateTimestamp);
mPost.setJSONCategories(new JSONArray(mCategories));
mPost.setMt_keywords(tags);
mPost.setPost_status(status);
mPost.setWP_password(password);
mPost.setLatitude(latitude);
mPost.setLongitude(longitude);
mPost.setWP_post_form(postFormat);
if (!mPost.isLocalDraft()) mPost.setLocalChange(true);
success=mPost.update();
}
}
return success;
}","private boolean savePost(boolean isAutoSave,boolean isDraftSave){
  String title=mTitleEditText.getText().toString();
  String password=mPasswordEditText.getText().toString();
  String pubDate=mPubDateText.getText().toString();
  String content=""String_Node_Str"";
  if (mLocalDraft || mIsNew && !isAutoSave) {
    Editable e=mContentEditText.getText();
    if (android.os.Build.VERSION.SDK_INT >= 14) {
      CharacterStyle[] style=e.getSpans(0,e.length(),CharacterStyle.class);
      for (int i=0; i < style.length; i++) {
        if (style[i].getClass().getName().equals(""String_Node_Str""))         e.removeSpan(style[i]);
      }
    }
    content=WPHtml.toHtml(e);
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    content=mContentEditText.getText().toString();
  }
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (!mIsNew)     pubDateTimestamp=mPost.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!mIsPage) {
    tags=mTagsEditText.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"") && !isAutoSave && !isDraftSave) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPostActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        dialog.dismiss();
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!mIsNew) {
      mPost.deleteMediaFiles();
      Editable s=mContentEditText.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(mPost.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save();
          int tagStart=s.getSpanStart(wpIS);
          if (!isAutoSave) {
            s.removeSpan(wpIS);
            s.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
            if (mLocalDraft)             content=WPHtml.toHtml(s);
 else             content=s.toString();
          }
        }
      }
    }
    final String moreTag=""String_Node_Str"";
    int selectedStatus=mStatusSpinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (mBlog.isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mIsNew) {
mPost=new Post(mBlogID,title,content,images,pubDateTimestamp,mCategories.toString(),tags,status,password,latitude,longitude,mIsPage,postFormat,true,false);
mPost.setLocalDraft(true);
if (content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
success=mPost.save();
if (success) {
mIsNew=false;
}
mPost.deleteMediaFiles();
Spannable s=mContentEditText.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(mPost.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFeatured(wpIS.isFeatured());
mf.setFeaturedInPost(wpIS.isFeaturedInPost());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save();
}
}
WordPress.currentPost=mPost;
}
 else {
if (mCurrentLocation == null) {
latitude=mPost.getLatitude();
longitude=mPost.getLongitude();
}
mPost.setTitle(title);
if (mLocalDraft && content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
 else {
mPost.setDescription(content);
mPost.setMt_text_more(""String_Node_Str"");
}
mPost.setMediaPaths(images);
mPost.setDate_created_gmt(pubDateTimestamp);
mPost.setJSONCategories(new JSONArray(mCategories));
mPost.setMt_keywords(tags);
mPost.setPost_status(status);
mPost.setWP_password(password);
mPost.setLatitude(latitude);
mPost.setLongitude(longitude);
mPost.setWP_post_form(postFormat);
if (!mPost.isLocalDraft()) mPost.setLocalChange(true);
success=mPost.update();
}
}
return success;
}",0.9926774912448264
15108,"@Override protected void onMessage(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  Bundle extras=intent.getExtras();
  if (extras == null) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String title=extras.getString(""String_Node_Str"");
  if (title == null)   title=""String_Node_Str"";
  String message=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
  String note_id=extras.getString(""String_Node_Str"");
  if (note_id == null)   note_id=StringUtils.getMd5Hash(message);
  if (note_id != null) {
    if (!activeNotificationsMap.containsKey(note_id))     activeNotificationsMap.put(note_id,extras);
  }
  String iconURL=extras.getString(""String_Node_Str"");
  Bitmap largeIconBitmap=null;
  if (iconURL != null) {
    try {
      iconURL=URLDecoder.decode(iconURL,""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    float screenDensity=getResources().getDisplayMetrics().densityDpi;
    int size=Math.round(64 * (screenDensity / 160));
    String resizedURL=iconURL.replaceAll(""String_Node_Str"",""String_Node_Str"" + size);
    largeIconBitmap=ImageHelper.downloadBitmap(resizedURL);
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  boolean sound, vibrate, light;
  sound=prefs.getBoolean(""String_Node_Str"",false);
  vibrate=prefs.getBoolean(""String_Node_Str"",false);
  light=prefs.getBoolean(""String_Node_Str"",false);
  NotificationCompat.Builder mBuilder;
  Intent resultIntent=new Intent(this,PostsActivity.class);
  resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  resultIntent.setAction(""String_Node_Str"");
  resultIntent.addCategory(""String_Node_Str"");
  resultIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
  if (activeNotificationsMap.size() <= 1) {
    mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setContentTitle(title).setContentText(message).setTicker(message).setAutoCancel(true).setStyle(new NotificationCompat.BigTextStyle().bigText(message));
    if (note_id != null)     resultIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
    String noteType=extras.getString(""String_Node_Str"");
    if (noteType != null && noteType.equals(""String_Node_Str"")) {
      Intent commentReplyIntent=new Intent(this,PostsActivity.class);
      commentReplyIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
      commentReplyIntent.setAction(""String_Node_Str"");
      commentReplyIntent.addCategory(""String_Node_Str"");
      commentReplyIntent.addCategory(""String_Node_Str"");
      commentReplyIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
      commentReplyIntent.putExtra(NotificationsActivity.NOTE_INSTANT_REPLY_EXTRA,true);
      if (note_id != null)       commentReplyIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
      PendingIntent commentReplyPendingIntent=PendingIntent.getActivity(context,0,commentReplyIntent,PendingIntent.FLAG_CANCEL_CURRENT);
      mBuilder.addAction(R.drawable.ab_icon_reply,getResources().getText(R.string.reply),commentReplyPendingIntent);
    }
    if (largeIconBitmap != null) {
      mBuilder.setLargeIcon(largeIconBitmap);
    }
  }
 else {
    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
    int noteCtr=1;
    for (    Bundle wpNotification : activeNotificationsMap.values()) {
      if (noteCtr > 5)       break;
      if (wpNotification.getString(""String_Node_Str"") != null) {
        if (wpNotification.getString(""String_Node_Str"").equals(""String_Node_Str""))         inboxStyle.addLine(wpNotification.getString(""String_Node_Str"") + ""String_Node_Str"" + wpNotification.getString(""String_Node_Str""));
 else         inboxStyle.addLine(wpNotification.getString(""String_Node_Str""));
        noteCtr++;
      }
    }
    if (activeNotificationsMap.size() > 5)     inboxStyle.setSummaryText(String.format(getString(R.string.more_notifications),activeNotificationsMap.size() - 5));
    String subject=String.format(getString(R.string.new_notifications),activeNotificationsMap.size());
    mBuilder=new NotificationCompat.Builder(this).setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.notification_multi)).setSmallIcon(R.drawable.notification_icon).setContentTitle(""String_Node_Str"").setContentText(subject).setTicker(message).setAutoCancel(true).setStyle(inboxStyle);
  }
  if (sound)   mBuilder.setSound(Uri.parse(""String_Node_Str"" + getPackageName() + ""String_Node_Str""+ R.raw.notification));
  if (vibrate)   mBuilder.setVibrate(new long[]{500,500,500});
  if (light)   mBuilder.setLights(0xff0000ff,1000,5000);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,resultIntent,PendingIntent.FLAG_CANCEL_CURRENT);
  mBuilder.setContentIntent(pendingIntent);
  NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mNotificationManager.notify(notificationId,mBuilder.build());
}","@Override protected void onMessage(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  Bundle extras=intent.getExtras();
  if (extras == null) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String title=extras.getString(""String_Node_Str"");
  if (title == null)   title=""String_Node_Str"";
  String message=StringUtils.unescapeHTML(extras.getString(""String_Node_Str""));
  String note_id=extras.getString(""String_Node_Str"");
  if (note_id == null)   note_id=StringUtils.getMd5Hash(message);
  if (note_id != null) {
    if (!activeNotificationsMap.containsKey(note_id))     activeNotificationsMap.put(note_id,extras);
  }
  String iconURL=extras.getString(""String_Node_Str"");
  Bitmap largeIconBitmap=null;
  if (iconURL != null) {
    try {
      iconURL=URLDecoder.decode(iconURL,""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    float screenDensity=getResources().getDisplayMetrics().densityDpi;
    int size=Math.round(64 * (screenDensity / 160));
    String resizedURL=iconURL.replaceAll(""String_Node_Str"",""String_Node_Str"" + size);
    largeIconBitmap=ImageHelper.downloadBitmap(resizedURL);
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  boolean sound, vibrate, light;
  sound=prefs.getBoolean(""String_Node_Str"",false);
  vibrate=prefs.getBoolean(""String_Node_Str"",false);
  light=prefs.getBoolean(""String_Node_Str"",false);
  NotificationCompat.Builder mBuilder;
  Intent resultIntent=new Intent(this,PostsActivity.class);
  resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  resultIntent.setAction(""String_Node_Str"");
  resultIntent.addCategory(""String_Node_Str"");
  resultIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
  if (activeNotificationsMap.size() <= 1) {
    mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setContentTitle(title).setContentText(message).setTicker(message).setAutoCancel(true).setStyle(new NotificationCompat.BigTextStyle().bigText(message));
    if (note_id != null)     resultIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
    String noteType=extras.getString(""String_Node_Str"");
    if (noteType != null && noteType.equals(""String_Node_Str"")) {
      Intent commentReplyIntent=new Intent(this,PostsActivity.class);
      commentReplyIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
      commentReplyIntent.setAction(""String_Node_Str"");
      commentReplyIntent.addCategory(""String_Node_Str"");
      commentReplyIntent.addCategory(""String_Node_Str"");
      commentReplyIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
      commentReplyIntent.putExtra(NotificationsActivity.NOTE_INSTANT_REPLY_EXTRA,true);
      if (note_id != null)       commentReplyIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
      PendingIntent commentReplyPendingIntent=PendingIntent.getActivity(context,0,commentReplyIntent,PendingIntent.FLAG_CANCEL_CURRENT);
      mBuilder.addAction(R.drawable.ab_icon_reply,getResources().getText(R.string.reply),commentReplyPendingIntent);
    }
    if (largeIconBitmap != null) {
      mBuilder.setLargeIcon(largeIconBitmap);
    }
  }
 else {
    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
    int noteCtr=1;
    for (    Bundle wpNotification : activeNotificationsMap.values()) {
      if (noteCtr > 5)       break;
      if (wpNotification.getString(""String_Node_Str"") != null) {
        if (wpNotification.getString(""String_Node_Str"").equals(""String_Node_Str""))         inboxStyle.addLine(wpNotification.getString(""String_Node_Str"") + ""String_Node_Str"" + wpNotification.getString(""String_Node_Str""));
 else         inboxStyle.addLine(wpNotification.getString(""String_Node_Str""));
        noteCtr++;
      }
    }
    if (activeNotificationsMap.size() > 5)     inboxStyle.setSummaryText(String.format(getString(R.string.more_notifications),activeNotificationsMap.size() - 5));
    String subject=String.format(getString(R.string.new_notifications),activeNotificationsMap.size());
    mBuilder=new NotificationCompat.Builder(this).setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.notification_multi)).setSmallIcon(R.drawable.notification_icon).setContentTitle(""String_Node_Str"").setContentText(subject).setTicker(message).setAutoCancel(true).setStyle(inboxStyle);
  }
  if (sound)   mBuilder.setSound(Uri.parse(""String_Node_Str"" + getPackageName() + ""String_Node_Str""+ R.raw.notification));
  if (vibrate)   mBuilder.setVibrate(new long[]{500,500,500});
  if (light)   mBuilder.setLights(0xff0000ff,1000,5000);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,resultIntent,PendingIntent.FLAG_CANCEL_CURRENT);
  mBuilder.setContentIntent(pendingIntent);
  NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mNotificationManager.notify(notificationId,mBuilder.build());
}",0.9982561519085448
15109,"public JSONArray getJSONCategories(){
  JSONArray jArray=null;
  if (categories == null)   categories=""String_Node_Str"";
  try {
    jArray=new JSONArray(categories);
  }
 catch (  JSONException e) {
  }
  return jArray;
}","public JSONArray getJSONCategories(){
  JSONArray jArray=null;
  if (categories == null)   categories=""String_Node_Str"";
  try {
    categories=StringUtils.unescapeHTML(categories);
    jArray=new JSONArray(categories);
  }
 catch (  JSONException e) {
  }
  return jArray;
}",0.8933601609657947
15110,"private void buildDialog(int positionParam){
  final int position=positionParam;
  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AddQuickPressShortcutActivity.this);
  dialogBuilder.setTitle(R.string.quickpress_add_alert_title);
  final EditText quickPressShortcutName=new EditText(AddQuickPressShortcutActivity.this);
  quickPressShortcutName.setText(""String_Node_Str"" + EscapeUtils.unescapeHtml(accountNames.get(position)));
  dialogBuilder.setView(quickPressShortcutName);
  dialogBuilder.setPositiveButton(R.string.add,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      if (TextUtils.isEmpty(quickPressShortcutName.getText())) {
        Toast t=Toast.makeText(AddQuickPressShortcutActivity.this,R.string.quickpress_add_error,Toast.LENGTH_LONG);
        t.show();
      }
 else {
        Intent shortcutIntent=new Intent(AddQuickPressShortcutActivity.this,EditPostActivity.class);
        shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        shortcutIntent.putExtra(""String_Node_Str"",accountIDs[position]);
        shortcutIntent.putExtra(""String_Node_Str"",true);
        shortcutIntent.putExtra(""String_Node_Str"",EscapeUtils.unescapeHtml(accountNames.get(position)));
        shortcutIntent.putExtra(""String_Node_Str"",true);
        Intent addIntent=new Intent();
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,quickPressShortcutName.getText().toString());
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(AddQuickPressShortcutActivity.this,R.drawable.app_icon));
        WordPress.wpDB.addQuickPressShortcut(accountIDs[position],quickPressShortcutName.getText().toString());
        if (WordPress.currentBlog == null) {
          try {
            WordPress.currentBlog=new Blog(accountIDs[position]);
            WordPress.wpDB.updateLastBlogId(accountIDs[position]);
          }
 catch (          Exception e) {
          }
        }
        addIntent.setAction(""String_Node_Str"");
        AddQuickPressShortcutActivity.this.sendBroadcast(addIntent);
        AddQuickPressShortcutActivity.this.finish();
      }
    }
  }
);
  dialogBuilder.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  dialogBuilder.setCancelable(false);
  dialogBuilder.create().show();
}","private void buildDialog(int positionParam){
  final int position=positionParam;
  AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AddQuickPressShortcutActivity.this);
  dialogBuilder.setTitle(R.string.quickpress_add_alert_title);
  final EditText quickPressShortcutName=new EditText(AddQuickPressShortcutActivity.this);
  quickPressShortcutName.setText(""String_Node_Str"" + StringUtils.unescapeHTML(accountNames.get(position)));
  dialogBuilder.setView(quickPressShortcutName);
  dialogBuilder.setPositiveButton(R.string.add,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      if (TextUtils.isEmpty(quickPressShortcutName.getText())) {
        Toast t=Toast.makeText(AddQuickPressShortcutActivity.this,R.string.quickpress_add_error,Toast.LENGTH_LONG);
        t.show();
      }
 else {
        Intent shortcutIntent=new Intent(AddQuickPressShortcutActivity.this,EditPostActivity.class);
        shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        shortcutIntent.putExtra(""String_Node_Str"",accountIDs[position]);
        shortcutIntent.putExtra(""String_Node_Str"",true);
        shortcutIntent.putExtra(""String_Node_Str"",StringUtils.unescapeHTML(accountNames.get(position)));
        shortcutIntent.putExtra(""String_Node_Str"",true);
        Intent addIntent=new Intent();
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,quickPressShortcutName.getText().toString());
        addIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(AddQuickPressShortcutActivity.this,R.drawable.app_icon));
        WordPress.wpDB.addQuickPressShortcut(accountIDs[position],quickPressShortcutName.getText().toString());
        if (WordPress.currentBlog == null) {
          try {
            WordPress.currentBlog=new Blog(accountIDs[position]);
            WordPress.wpDB.updateLastBlogId(accountIDs[position]);
          }
 catch (          Exception e) {
          }
        }
        addIntent.setAction(""String_Node_Str"");
        AddQuickPressShortcutActivity.this.sendBroadcast(addIntent);
        AddQuickPressShortcutActivity.this.finish();
      }
    }
  }
);
  dialogBuilder.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  dialogBuilder.setCancelable(false);
  dialogBuilder.create().show();
}",0.9929577464788732
15111,"public View getView(int position,View convertView,ViewGroup parent){
  RelativeLayout view=(RelativeLayout)convertView;
  if (view == null) {
    LayoutInflater inflater=getLayoutInflater();
    view=(RelativeLayout)inflater.inflate(R.layout.home_row,parent,false);
  }
  String username=accountUsers[position];
  view.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_bg_selector));
  view.setId(Integer.valueOf(accountIDs[position]));
  TextView blogName=(TextView)view.findViewById(R.id.blogName);
  TextView blogUsername=(TextView)view.findViewById(R.id.blogUser);
  NetworkImageView blavatar=(NetworkImageView)view.findViewById(R.id.blavatar);
  blogName.setText(EscapeUtils.unescapeHtml(blogNames[position]));
  blogUsername.setText(EscapeUtils.unescapeHtml(username));
  blavatar.setImageUrl(blavatars[position],WordPress.imageLoader);
  return view;
}","public View getView(int position,View convertView,ViewGroup parent){
  RelativeLayout view=(RelativeLayout)convertView;
  if (view == null) {
    LayoutInflater inflater=getLayoutInflater();
    view=(RelativeLayout)inflater.inflate(R.layout.home_row,parent,false);
  }
  String username=accountUsers[position];
  view.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_bg_selector));
  view.setId(Integer.valueOf(accountIDs[position]));
  TextView blogName=(TextView)view.findViewById(R.id.blogName);
  TextView blogUsername=(TextView)view.findViewById(R.id.blogUser);
  NetworkImageView blavatar=(NetworkImageView)view.findViewById(R.id.blavatar);
  blogName.setText(StringUtils.unescapeHTML(blogNames[position]));
  blogUsername.setText(StringUtils.unescapeHTML(username));
  blavatar.setImageUrl(blavatars[position],WordPress.imageLoader);
  return view;
}",0.9794050343249427
15112,"/** 
 * Get the names of all the blogs configured within the application. If a blog does not have a specific name, the blog URL is returned.
 * @return array of blog names
 */
private static String[] getBlogNames(){
  List<Map<String,Object>> accounts=WordPress.wpDB.getAccounts();
  int blogCount=accounts.size();
  blogIDs=new int[blogCount];
  String[] blogNames=new String[blogCount];
  for (int i=0; i < blogCount; i++) {
    Map<String,Object> account=accounts.get(i);
    String name;
    if (account.get(""String_Node_Str"") != null) {
      name=EscapeUtils.unescapeHtml(account.get(""String_Node_Str"").toString());
    }
 else {
      name=account.get(""String_Node_Str"").toString();
    }
    blogNames[i]=name;
    blogIDs[i]=Integer.valueOf(account.get(""String_Node_Str"").toString());
  }
  return blogNames;
}","/** 
 * Get the names of all the blogs configured within the application. If a blog does not have a specific name, the blog URL is returned.
 * @return array of blog names
 */
private static String[] getBlogNames(){
  List<Map<String,Object>> accounts=WordPress.wpDB.getAccounts();
  int blogCount=accounts.size();
  blogIDs=new int[blogCount];
  String[] blogNames=new String[blogCount];
  for (int i=0; i < blogCount; i++) {
    Map<String,Object> account=accounts.get(i);
    String name;
    if (account.get(""String_Node_Str"") != null) {
      name=StringUtils.unescapeHTML(account.get(""String_Node_Str"").toString());
    }
 else {
      name=account.get(""String_Node_Str"").toString();
    }
    blogNames[i]=name;
    blogIDs[i]=Integer.valueOf(account.get(""String_Node_Str"").toString());
  }
  return blogNames;
}",0.978021978021978
15113,"private void configureAccount(){
  if (mIsWpcom) {
    mBlogURL=URL_WORDPRESS;
  }
 else {
    mBlogURL=mUrlEdit.getText().toString().trim();
  }
  final String username=mUsernameEdit.getText().toString().trim();
  final String password=mPasswordEdit.getText().toString().trim();
  if (mBlogURL.equals(""String_Node_Str"") || username.equals(""String_Node_Str"") || password.equals(""String_Node_Str"")) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.required_fields,R.string.url_username_password_required);
    return;
  }
  if (!(mBlogURL.toLowerCase().startsWith(""String_Node_Str"")) && !(mBlogURL.toLowerCase().startsWith(""String_Node_Str""))) {
    mBlogURL=""String_Node_Str"" + mBlogURL;
  }
  if (!URLUtil.isValidUrl(mBlogURL)) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.invalid_url,R.string.invalid_url_message);
    return;
  }
  String rsdUrl=getRSDMetaTagHrefRegEx(mBlogURL);
  if (rsdUrl == null) {
    rsdUrl=getRSDMetaTagHref(mBlogURL);
  }
  if (rsdUrl != null) {
    mXmlrpcURL=ApiHelper.getXMLRPCUrl(rsdUrl);
    if (mXmlrpcURL == null)     mXmlrpcURL=rsdUrl.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    mIsCustomURL=false;
    try {
      mClient=new XMLRPCClient(mBlogURL,mHttpuser,mHttppassword);
      try {
        mClient.call(""String_Node_Str"");
        mXmlrpcURL=mBlogURL;
        mIsCustomURL=true;
      }
 catch (      XMLRPCException e) {
        String guessURL=mBlogURL;
        if (guessURL.substring(guessURL.length() - 1,guessURL.length()).equals(""String_Node_Str"")) {
          guessURL=guessURL.substring(0,guessURL.length() - 1);
        }
        guessURL+=""String_Node_Str"";
        mClient=new XMLRPCClient(guessURL,mHttpuser,mHttppassword);
        try {
          mClient.call(""String_Node_Str"");
          mXmlrpcURL=guessURL;
        }
 catch (        XMLRPCException ex) {
        }
      }
    }
 catch (    Exception e) {
    }
  }
  if (mXmlrpcURL == null) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.error,R.string.no_site_error);
  }
 else {
    mClient=new XMLRPCClient(mXmlrpcURL,mHttpuser,mHttppassword);
    XMLRPCMethod method=new XMLRPCMethod(""String_Node_Str"",new XMLRPCMethodCallback(){
      public void callFinished(      Object[] result){
        Blog currentBlog=WordPress.getCurrentBlog();
        if (mIsWpcom) {
          SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(AccountSetupActivity.this);
          SharedPreferences.Editor editor=settings.edit();
          editor.putString(WordPress.WPCOM_USERNAME_PREFERENCE,username);
          editor.putString(WordPress.WPCOM_PASSWORD_PREFERENCE,WordPressDB.encryptPassword(password));
          editor.commit();
          WordPress.restClient.get(""String_Node_Str"",null,null);
        }
        if (mAuthOnly) {
          if (currentBlog != null) {
            if (mIsWpcom) {
              WordPress.wpDB.updateWPComCredentials(username,password);
              if (currentBlog != null && currentBlog.isDotcomFlag()) {
                currentBlog.setPassword(password);
              }
            }
 else {
              currentBlog.setPassword(password);
            }
            currentBlog.save(""String_Node_Str"");
          }
          setResult(RESULT_OK);
          finish();
          return;
        }
        Arrays.sort(result,Utils.BlogNameComparator);
        final String[] blogNames=new String[result.length];
        final String[] urls=new String[result.length];
        final String[] homeURLs=new String[result.length];
        final int[] blogIds=new int[result.length];
        final boolean[] wpcoms=new boolean[result.length];
        final String[] wpVersions=new String[result.length];
        Map<Object,Object> contentHash=new HashMap<Object,Object>();
        mBlogCtr=0;
        for (int ctr=0; ctr < result.length; ctr++) {
          contentHash=(Map<Object,Object>)result[ctr];
          String blogName=contentHash.get(""String_Node_Str"").toString();
          if (blogName.length() == 0) {
            blogName=contentHash.get(""String_Node_Str"").toString();
          }
          blogNames[mBlogCtr]=blogName;
          if (mIsCustomURL)           urls[mBlogCtr]=mBlogURL;
 else           urls[mBlogCtr]=contentHash.get(""String_Node_Str"").toString();
          homeURLs[mBlogCtr]=contentHash.get(""String_Node_Str"").toString();
          blogIds[mBlogCtr]=Integer.parseInt(contentHash.get(""String_Node_Str"").toString());
          String blogURL=urls[mBlogCtr];
          mBlogNames.add(EscapeUtils.unescapeHtml(blogNames[mBlogCtr]));
          boolean wpcomFlag=false;
          if (blogURL.toLowerCase().contains(""String_Node_Str"")) {
            wpcomFlag=true;
          }
          wpcoms[mBlogCtr]=wpcomFlag;
          String wpVersion=""String_Node_Str"";
          if (!wpcomFlag) {
            Map<String,String> hPost=new HashMap<String,String>();
            hPost.put(""String_Node_Str"",""String_Node_Str"");
            Object[] vParams={1,username,password,hPost};
            Object versionResult=new Object();
            try {
              versionResult=(Object)mClient.call(""String_Node_Str"",vParams);
            }
 catch (            XMLRPCException e) {
            }
            if (versionResult != null) {
              try {
                contentHash=(Map<Object,Object>)versionResult;
                Map<?,?> sv=(Map<?,?>)contentHash.get(""String_Node_Str"");
                wpVersion=sv.get(""String_Node_Str"").toString();
              }
 catch (              Exception e) {
              }
            }
          }
 else {
            wpVersion=""String_Node_Str"";
          }
          wpVersions[mBlogCtr]=wpVersion;
          mBlogCtr++;
        }
        mProgressDialog.dismiss();
        if (mBlogCtr == 0) {
          String additionalText=""String_Node_Str"";
          if (result.length > 0) {
            additionalText=getString(R.string.additional);
          }
          AlertUtil.showAlert(AccountSetupActivity.this,R.string.no_blogs_found,String.format(getString(R.string.no_blogs_message),additionalText),getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
);
        }
 else {
          if (mBlogCtr > 1) {
            LayoutInflater inflater=(LayoutInflater)AccountSetupActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            final ListView lv=(ListView)inflater.inflate(R.layout.select_blogs_list,null);
            lv.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
            lv.setItemsCanFocus(false);
            ArrayAdapter<CharSequence> blogs=new ArrayAdapter<CharSequence>(AccountSetupActivity.this,R.layout.blogs_row,mBlogNames);
            lv.setAdapter(blogs);
            AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AccountSetupActivity.this);
            dialogBuilder.setTitle(R.string.select_blogs);
            dialogBuilder.setView(lv);
            dialogBuilder.setNegativeButton(R.string.add_selected,new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                SparseBooleanArray selectedItems=lv.getCheckedItemPositions();
                for (int i=0; i < selectedItems.size(); i++) {
                  if (selectedItems.get(selectedItems.keyAt(i)) == true) {
                    int rowID=selectedItems.keyAt(i);
                    long blogID=-1;
                    blogID=WordPress.wpDB.checkMatch(blogNames[rowID],urls[rowID],username,password);
                    if (blogID == -1) {
                      blogID=WordPress.wpDB.addAccount(urls[rowID],homeURLs[rowID],blogNames[rowID],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,20,false,blogIds[rowID],wpcoms[rowID],wpVersions[rowID]);
                    }
                    if (i == 0) {
                      if (blogID >= 0) {
                        WordPress.setCurrentBlog((int)blogID);
                      }
                    }
                  }
                }
                setResult(RESULT_OK);
                finish();
              }
            }
);
            dialogBuilder.setPositiveButton(R.string.add_all,new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                for (int i=0; i < mBlogCtr; i++) {
                  long blogID;
                  blogID=WordPress.wpDB.checkMatch(blogNames[i],urls[i],username,password);
                  if (blogID == -1) {
                    blogID=WordPress.wpDB.addAccount(urls[i],homeURLs[i],blogNames[i],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,5,false,blogIds[i],wpcoms[i],wpVersions[i]);
                  }
                  if (i == 0) {
                    if (blogID >= 0) {
                      WordPress.setCurrentBlog((int)blogID);
                    }
                  }
                }
                setResult(RESULT_OK);
                finish();
              }
            }
);
            dialogBuilder.setCancelable(true);
            AlertDialog ad=dialogBuilder.create();
            ad.setInverseBackgroundForced(true);
            ad.show();
            final Button addSelected=ad.getButton(AlertDialog.BUTTON_NEGATIVE);
            addSelected.setEnabled(false);
            lv.setOnItemClickListener(new OnItemClickListener(){
              public void onItemClick(              AdapterView<?> arg0,              View arg1,              int arg2,              long arg3){
                SparseBooleanArray selectedItems=lv.getCheckedItemPositions();
                boolean isChecked=false;
                for (int i=0; i < selectedItems.size(); i++) {
                  if (selectedItems.get(selectedItems.keyAt(i)) == true) {
                    isChecked=true;
                  }
                }
                if (!isChecked) {
                  addSelected.setEnabled(false);
                }
 else {
                  addSelected.setEnabled(true);
                }
              }
            }
);
          }
 else {
            long blogID;
            blogID=WordPress.wpDB.checkMatch(blogNames[0],urls[0],username,password);
            if (blogID == -1) {
              blogID=WordPress.wpDB.addAccount(urls[0],homeURLs[0],blogNames[0],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,5,false,blogIds[0],wpcoms[0],wpVersions[0]);
            }
            if (blogID >= 0) {
              WordPress.setCurrentBlog((int)blogID);
            }
            setResult(RESULT_OK);
            finish();
          }
        }
      }
    }
);
    Object[] params={username,password};
    method.call(params);
  }
}","private void configureAccount(){
  if (mIsWpcom) {
    mBlogURL=URL_WORDPRESS;
  }
 else {
    mBlogURL=mUrlEdit.getText().toString().trim();
  }
  final String username=mUsernameEdit.getText().toString().trim();
  final String password=mPasswordEdit.getText().toString().trim();
  if (mBlogURL.equals(""String_Node_Str"") || username.equals(""String_Node_Str"") || password.equals(""String_Node_Str"")) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.required_fields,R.string.url_username_password_required);
    return;
  }
  if (!(mBlogURL.toLowerCase().startsWith(""String_Node_Str"")) && !(mBlogURL.toLowerCase().startsWith(""String_Node_Str""))) {
    mBlogURL=""String_Node_Str"" + mBlogURL;
  }
  if (!URLUtil.isValidUrl(mBlogURL)) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.invalid_url,R.string.invalid_url_message);
    return;
  }
  String rsdUrl=getRSDMetaTagHrefRegEx(mBlogURL);
  if (rsdUrl == null) {
    rsdUrl=getRSDMetaTagHref(mBlogURL);
  }
  if (rsdUrl != null) {
    mXmlrpcURL=ApiHelper.getXMLRPCUrl(rsdUrl);
    if (mXmlrpcURL == null)     mXmlrpcURL=rsdUrl.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    mIsCustomURL=false;
    try {
      mClient=new XMLRPCClient(mBlogURL,mHttpuser,mHttppassword);
      try {
        mClient.call(""String_Node_Str"");
        mXmlrpcURL=mBlogURL;
        mIsCustomURL=true;
      }
 catch (      XMLRPCException e) {
        String guessURL=mBlogURL;
        if (guessURL.substring(guessURL.length() - 1,guessURL.length()).equals(""String_Node_Str"")) {
          guessURL=guessURL.substring(0,guessURL.length() - 1);
        }
        guessURL+=""String_Node_Str"";
        mClient=new XMLRPCClient(guessURL,mHttpuser,mHttppassword);
        try {
          mClient.call(""String_Node_Str"");
          mXmlrpcURL=guessURL;
        }
 catch (        XMLRPCException ex) {
        }
      }
    }
 catch (    Exception e) {
    }
  }
  if (mXmlrpcURL == null) {
    mProgressDialog.dismiss();
    AlertUtil.showAlert(AccountSetupActivity.this,R.string.error,R.string.no_site_error);
  }
 else {
    mClient=new XMLRPCClient(mXmlrpcURL,mHttpuser,mHttppassword);
    XMLRPCMethod method=new XMLRPCMethod(""String_Node_Str"",new XMLRPCMethodCallback(){
      public void callFinished(      Object[] result){
        Blog currentBlog=WordPress.getCurrentBlog();
        if (mIsWpcom) {
          SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(AccountSetupActivity.this);
          SharedPreferences.Editor editor=settings.edit();
          editor.putString(WordPress.WPCOM_USERNAME_PREFERENCE,username);
          editor.putString(WordPress.WPCOM_PASSWORD_PREFERENCE,WordPressDB.encryptPassword(password));
          editor.commit();
          WordPress.restClient.get(""String_Node_Str"",null,null);
        }
        if (mAuthOnly) {
          if (currentBlog != null) {
            if (mIsWpcom) {
              WordPress.wpDB.updateWPComCredentials(username,password);
              if (currentBlog != null && currentBlog.isDotcomFlag()) {
                currentBlog.setPassword(password);
              }
            }
 else {
              currentBlog.setPassword(password);
            }
            currentBlog.save(""String_Node_Str"");
          }
          setResult(RESULT_OK);
          finish();
          return;
        }
        Arrays.sort(result,Utils.BlogNameComparator);
        final String[] blogNames=new String[result.length];
        final String[] urls=new String[result.length];
        final String[] homeURLs=new String[result.length];
        final int[] blogIds=new int[result.length];
        final boolean[] wpcoms=new boolean[result.length];
        final String[] wpVersions=new String[result.length];
        Map<Object,Object> contentHash=new HashMap<Object,Object>();
        mBlogCtr=0;
        for (int ctr=0; ctr < result.length; ctr++) {
          contentHash=(Map<Object,Object>)result[ctr];
          String blogName=contentHash.get(""String_Node_Str"").toString();
          if (blogName.length() == 0) {
            blogName=contentHash.get(""String_Node_Str"").toString();
          }
          blogNames[mBlogCtr]=blogName;
          if (mIsCustomURL)           urls[mBlogCtr]=mBlogURL;
 else           urls[mBlogCtr]=contentHash.get(""String_Node_Str"").toString();
          homeURLs[mBlogCtr]=contentHash.get(""String_Node_Str"").toString();
          blogIds[mBlogCtr]=Integer.parseInt(contentHash.get(""String_Node_Str"").toString());
          String blogURL=urls[mBlogCtr];
          mBlogNames.add(StringUtils.unescapeHTML(blogNames[mBlogCtr].toString()));
          boolean wpcomFlag=false;
          if (blogURL.toLowerCase().contains(""String_Node_Str"")) {
            wpcomFlag=true;
          }
          wpcoms[mBlogCtr]=wpcomFlag;
          String wpVersion=""String_Node_Str"";
          if (!wpcomFlag) {
            Map<String,String> hPost=new HashMap<String,String>();
            hPost.put(""String_Node_Str"",""String_Node_Str"");
            Object[] vParams={1,username,password,hPost};
            Object versionResult=new Object();
            try {
              versionResult=(Object)mClient.call(""String_Node_Str"",vParams);
            }
 catch (            XMLRPCException e) {
            }
            if (versionResult != null) {
              try {
                contentHash=(Map<Object,Object>)versionResult;
                Map<?,?> sv=(Map<?,?>)contentHash.get(""String_Node_Str"");
                wpVersion=sv.get(""String_Node_Str"").toString();
              }
 catch (              Exception e) {
              }
            }
          }
 else {
            wpVersion=""String_Node_Str"";
          }
          wpVersions[mBlogCtr]=wpVersion;
          mBlogCtr++;
        }
        mProgressDialog.dismiss();
        if (mBlogCtr == 0) {
          String additionalText=""String_Node_Str"";
          if (result.length > 0) {
            additionalText=getString(R.string.additional);
          }
          AlertUtil.showAlert(AccountSetupActivity.this,R.string.no_blogs_found,String.format(getString(R.string.no_blogs_message),additionalText),getString(R.string.ok),new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              dialog.dismiss();
            }
          }
);
        }
 else {
          if (mBlogCtr > 1) {
            LayoutInflater inflater=(LayoutInflater)AccountSetupActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            final ListView lv=(ListView)inflater.inflate(R.layout.select_blogs_list,null);
            lv.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
            lv.setItemsCanFocus(false);
            ArrayAdapter<CharSequence> blogs=new ArrayAdapter<CharSequence>(AccountSetupActivity.this,R.layout.blogs_row,mBlogNames);
            lv.setAdapter(blogs);
            AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AccountSetupActivity.this);
            dialogBuilder.setTitle(R.string.select_blogs);
            dialogBuilder.setView(lv);
            dialogBuilder.setNegativeButton(R.string.add_selected,new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                SparseBooleanArray selectedItems=lv.getCheckedItemPositions();
                for (int i=0; i < selectedItems.size(); i++) {
                  if (selectedItems.get(selectedItems.keyAt(i)) == true) {
                    int rowID=selectedItems.keyAt(i);
                    long blogID=-1;
                    blogID=WordPress.wpDB.checkMatch(blogNames[rowID],urls[rowID],username,password);
                    if (blogID == -1) {
                      blogID=WordPress.wpDB.addAccount(urls[rowID],homeURLs[rowID],blogNames[rowID],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,20,false,blogIds[rowID],wpcoms[rowID],wpVersions[rowID]);
                    }
                    if (i == 0) {
                      if (blogID >= 0) {
                        WordPress.setCurrentBlog((int)blogID);
                      }
                    }
                  }
                }
                setResult(RESULT_OK);
                finish();
              }
            }
);
            dialogBuilder.setPositiveButton(R.string.add_all,new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                for (int i=0; i < mBlogCtr; i++) {
                  long blogID;
                  blogID=WordPress.wpDB.checkMatch(blogNames[i],urls[i],username,password);
                  if (blogID == -1) {
                    blogID=WordPress.wpDB.addAccount(urls[i],homeURLs[i],blogNames[i],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,5,false,blogIds[i],wpcoms[i],wpVersions[i]);
                  }
                  if (i == 0) {
                    if (blogID >= 0) {
                      WordPress.setCurrentBlog((int)blogID);
                    }
                  }
                }
                setResult(RESULT_OK);
                finish();
              }
            }
);
            dialogBuilder.setCancelable(true);
            AlertDialog ad=dialogBuilder.create();
            ad.setInverseBackgroundForced(true);
            ad.show();
            final Button addSelected=ad.getButton(AlertDialog.BUTTON_NEGATIVE);
            addSelected.setEnabled(false);
            lv.setOnItemClickListener(new OnItemClickListener(){
              public void onItemClick(              AdapterView<?> arg0,              View arg1,              int arg2,              long arg3){
                SparseBooleanArray selectedItems=lv.getCheckedItemPositions();
                boolean isChecked=false;
                for (int i=0; i < selectedItems.size(); i++) {
                  if (selectedItems.get(selectedItems.keyAt(i)) == true) {
                    isChecked=true;
                  }
                }
                if (!isChecked) {
                  addSelected.setEnabled(false);
                }
 else {
                  addSelected.setEnabled(true);
                }
              }
            }
);
          }
 else {
            long blogID;
            blogID=WordPress.wpDB.checkMatch(blogNames[0],urls[0],username,password);
            if (blogID == -1) {
              blogID=WordPress.wpDB.addAccount(urls[0],homeURLs[0],blogNames[0],username,password,mHttpuser,mHttppassword,""String_Node_Str"",false,false,DEFAULT_IMAGE_SIZE,5,false,blogIds[0],wpcoms[0],wpVersions[0]);
            }
            if (blogID >= 0) {
              WordPress.setCurrentBlog((int)blogID);
            }
            setResult(RESULT_OK);
            finish();
          }
        }
      }
    }
);
    Object[] params={username,password};
    method.call(params);
  }
}",0.998684270223674
15114,"public boolean loadComments(boolean refresh,boolean loadMore){
  refreshOnly=refresh;
  String author, postID, comment, dateCreatedFormatted, status, authorEmail, authorURL, postTitle;
  int commentID;
  List<Map<String,Object>> loadedComments=WordPress.wpDB.loadComments(WordPress.currentBlog.getId());
  if (loadedComments != null) {
    numRecords=loadedComments.size();
    if (refreshOnly) {
      if (model != null) {
        model.clear();
      }
    }
 else {
      model=new ArrayList<Comment>();
    }
    checkedComments=new Vector<String>();
    for (int i=0; i < loadedComments.size(); i++) {
      checkedComments.add(i,""String_Node_Str"");
      Map<String,Object> contentHash=loadedComments.get(i);
      allComments.put((Integer)contentHash.get(""String_Node_Str""),contentHash);
      author=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      commentID=(Integer)contentHash.get(""String_Node_Str"");
      postID=contentHash.get(""String_Node_Str"").toString();
      comment=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      dateCreatedFormatted=contentHash.get(""String_Node_Str"").toString();
      status=contentHash.get(""String_Node_Str"").toString();
      authorEmail=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      authorURL=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      postTitle=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      if (model == null) {
        model=new ArrayList<Comment>();
      }
      model.add(new Comment(postID,commentID,i,author,dateCreatedFormatted,comment,status,postTitle,authorURL,authorEmail,URI.create(""String_Node_Str"" + StringUtils.getMd5Hash(authorEmail.trim()) + ""String_Node_Str"")));
    }
    if (!refreshOnly) {
      ListView listView=this.getListView();
      listView.removeFooterView(switcher);
      if (loadedComments.size() % 30 == 0) {
        listView.addFooterView(switcher);
      }
      setListAdapter(new CommentAdapter());
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View view,        int position,        long id){
          selectedPosition=position;
          Comment comment=model.get((int)id);
          onCommentSelectedListener.onCommentSelected(comment);
          getListView().invalidateViews();
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          WordPress.currentComment=model.get(info.position);
          menu.setHeaderTitle(getResources().getText(R.string.comment_actions));
          menu.add(0,0,0,getResources().getText(R.string.mark_approved));
          menu.add(0,1,0,getResources().getText(R.string.mark_unapproved));
          menu.add(0,2,0,getResources().getText(R.string.mark_spam));
          menu.add(0,3,0,getResources().getText(R.string.reply));
          menu.add(0,4,0,getResources().getText(R.string.delete));
          menu.add(0,5,0,getResources().getText(R.string.edit));
        }
      }
);
    }
 else {
      getListView().invalidateViews();
    }
    if (this.shouldSelectAfterLoad) {
      if (model != null) {
        if (model.size() > 0) {
          selectedPosition=0;
          Comment aComment=model.get((int)0);
          onCommentSelectedListener.onCommentSelected(aComment);
          getListView().setItemChecked(0,true);
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadMore && scrollPosition > 0) {
      ListView listView=this.getListView();
      try {
        listView.setSelectionFromTop(scrollPosition,scrollPositionTop);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean loadComments(boolean refresh,boolean loadMore){
  refreshOnly=refresh;
  String author, postID, comment, dateCreatedFormatted, status, authorEmail, authorURL, postTitle;
  int commentID;
  List<Map<String,Object>> loadedComments=WordPress.wpDB.loadComments(WordPress.currentBlog.getId());
  if (loadedComments != null) {
    numRecords=loadedComments.size();
    if (refreshOnly) {
      if (model != null) {
        model.clear();
      }
    }
 else {
      model=new ArrayList<Comment>();
    }
    checkedComments=new Vector<String>();
    for (int i=0; i < loadedComments.size(); i++) {
      checkedComments.add(i,""String_Node_Str"");
      Map<String,Object> contentHash=loadedComments.get(i);
      allComments.put((Integer)contentHash.get(""String_Node_Str""),contentHash);
      author=StringUtils.unescapeHTML(contentHash.get(""String_Node_Str"").toString());
      commentID=(Integer)contentHash.get(""String_Node_Str"");
      postID=contentHash.get(""String_Node_Str"").toString();
      comment=StringUtils.unescapeHTML(contentHash.get(""String_Node_Str"").toString());
      dateCreatedFormatted=contentHash.get(""String_Node_Str"").toString();
      status=contentHash.get(""String_Node_Str"").toString();
      authorEmail=StringUtils.unescapeHTML(contentHash.get(""String_Node_Str"").toString());
      authorURL=StringUtils.unescapeHTML(contentHash.get(""String_Node_Str"").toString());
      postTitle=StringUtils.unescapeHTML(contentHash.get(""String_Node_Str"").toString());
      if (model == null) {
        model=new ArrayList<Comment>();
      }
      model.add(new Comment(postID,commentID,i,author,dateCreatedFormatted,comment,status,postTitle,authorURL,authorEmail,URI.create(""String_Node_Str"" + StringUtils.getMd5Hash(authorEmail.trim()) + ""String_Node_Str"")));
    }
    if (!refreshOnly) {
      ListView listView=this.getListView();
      listView.removeFooterView(switcher);
      if (loadedComments.size() % 30 == 0) {
        listView.addFooterView(switcher);
      }
      setListAdapter(new CommentAdapter());
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View view,        int position,        long id){
          selectedPosition=position;
          Comment comment=model.get((int)id);
          onCommentSelectedListener.onCommentSelected(comment);
          getListView().invalidateViews();
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          WordPress.currentComment=model.get(info.position);
          menu.setHeaderTitle(getResources().getText(R.string.comment_actions));
          menu.add(0,0,0,getResources().getText(R.string.mark_approved));
          menu.add(0,1,0,getResources().getText(R.string.mark_unapproved));
          menu.add(0,2,0,getResources().getText(R.string.mark_spam));
          menu.add(0,3,0,getResources().getText(R.string.reply));
          menu.add(0,4,0,getResources().getText(R.string.delete));
          menu.add(0,5,0,getResources().getText(R.string.edit));
        }
      }
);
    }
 else {
      getListView().invalidateViews();
    }
    if (this.shouldSelectAfterLoad) {
      if (model != null) {
        if (model.size() > 0) {
          selectedPosition=0;
          Comment aComment=model.get((int)0);
          onCommentSelectedListener.onCommentSelected(aComment);
          getListView().setItemChecked(0,true);
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadMore && scrollPosition > 0) {
      ListView listView=this.getListView();
      try {
        listView.setSelectionFromTop(scrollPosition,scrollPositionTop);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    return true;
  }
 else {
    return false;
  }
}",0.9782345828295044
15115,"@Override public void onStart(){
  super.onStart();
  if (getNote() == null && getActivity() != null) {
    ((NotificationsActivity)getActivity()).popNoteDetail();
    return;
  }
  mFollowRow.getImageView().setImageUrl(getNote().getIconURL(),WordPress.imageLoader);
  SpannableStringBuilder html=(SpannableStringBuilder)getNote().getCommentBody();
  final Html.ImageGetter imgGetter=new AsyncImageGetter(mCommentText);
  ImageSpan imgs[]=html.getSpans(0,html.length(),ImageSpan.class);
  for (  ImageSpan img : imgs) {
    final String src=img.getSource();
    final RemoteDrawable remoteDrawable=(RemoteDrawable)imgGetter.getDrawable(src);
    ClickableSpan clickListener=new ClickableSpan(){
      @Override public void onClick(      View v){
        if (remoteDrawable.didFail()) {
          imgGetter.getDrawable(src);
        }
      }
    }
;
    ImageSpan remote=new ImageSpan(remoteDrawable,img.getSource());
    int spanStart=html.getSpanStart(img);
    int spanEnd=html.getSpanEnd(img);
    int spanFlags=html.getSpanFlags(img);
    html.setSpan(remote,spanStart,spanEnd,spanFlags);
    html.setSpan(clickListener,spanStart,spanEnd,spanFlags);
    html.removeSpan(img);
  }
  mCommentText.setText(html);
  mCommentText.setMovementMethod(LinkMovementMethod.getInstance());
  mReplyField.setOnReplyListener(mReplyListener);
  mDetailHeader.setText(getNote().getSubject());
  Map<String,JSONObject> noteActions=getNote().getActions();
  boolean hasModerateAction=false;
  if (noteActions.containsKey(APPROVE_TAG)) {
    hasModerateAction=true;
    mApproveButton.setImageResource(R.drawable.moderate_approve);
    mApproveButton.setVisibility(View.VISIBLE);
    mApproveButton.setOnClickListener(mModerateClickListener);
    mApproveButton.setTag(APPROVE_TAG);
  }
  if (noteActions.containsKey(UNAPPROVE_TAG)) {
    hasModerateAction=true;
    mApproveButton.setImageResource(R.drawable.moderate_unapprove);
    mApproveButton.setVisibility(View.VISIBLE);
    mApproveButton.setOnClickListener(mModerateClickListener);
    mApproveButton.setTag(UNAPPROVE_TAG);
  }
  if (noteActions.containsKey(SPAM_TAG)) {
    hasModerateAction=true;
    mSpamButton.setVisibility(View.VISIBLE);
    mSpamButton.setOnClickListener(mModerateClickListener);
    mSpamButton.setTag(SPAM_TAG);
  }
 else {
    mSpamButton.setVisibility(View.GONE);
  }
  if (noteActions.containsKey(TRASH_TAG)) {
    hasModerateAction=true;
    mTrashButton.setVisibility(View.VISIBLE);
    mTrashButton.setOnClickListener(mModerateClickListener);
    mTrashButton.setTag(TRASH_TAG);
  }
 else {
    mTrashButton.setVisibility(View.GONE);
  }
  if (!hasModerateAction)   mModerateSection.setVisibility(View.GONE);
  String url=getNote().queryJSON(""String_Node_Str"",""String_Node_Str"");
  if (!url.equals(""String_Node_Str"")) {
    mDetailHeader.setUrl(url);
  }
  JSONObject followAction=getNote().queryJSON(""String_Node_Str"",new JSONObject());
  mFollowRow.setDefaultText(EscapeUtils.unescapeHtml(getNote().queryJSON(""String_Node_Str"",""String_Node_Str"")));
  mFollowRow.setAction(followAction);
  mFollowRow.setListener(new FollowListener(getActivity().getApplicationContext()));
  Bundle arguments=getArguments();
  if (arguments != null && (arguments.containsKey(NotificationsActivity.NOTE_REPLY_EXTRA) || arguments.containsKey(NotificationsActivity.NOTE_INSTANT_REPLY_EXTRA))) {
    if (arguments.containsKey(NotificationsActivity.NOTE_REPLY_EXTRA))     mReplyField.setText(arguments.getString(NotificationsActivity.NOTE_REPLY_EXTRA));
    mReplyField.mTextField.requestFocus();
    InputMethodManager inputMethodManager=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
    if (inputMethodManager != null)     inputMethodManager.showSoftInput(mReplyField.mTextField,0);
  }
}","@Override public void onStart(){
  super.onStart();
  if (getNote() == null && getActivity() != null) {
    ((NotificationsActivity)getActivity()).popNoteDetail();
    return;
  }
  mFollowRow.getImageView().setImageUrl(getNote().getIconURL(),WordPress.imageLoader);
  SpannableStringBuilder html=(SpannableStringBuilder)getNote().getCommentBody();
  final Html.ImageGetter imgGetter=new AsyncImageGetter(mCommentText);
  ImageSpan imgs[]=html.getSpans(0,html.length(),ImageSpan.class);
  for (  ImageSpan img : imgs) {
    final String src=img.getSource();
    final RemoteDrawable remoteDrawable=(RemoteDrawable)imgGetter.getDrawable(src);
    ClickableSpan clickListener=new ClickableSpan(){
      @Override public void onClick(      View v){
        if (remoteDrawable.didFail()) {
          imgGetter.getDrawable(src);
        }
      }
    }
;
    ImageSpan remote=new ImageSpan(remoteDrawable,img.getSource());
    int spanStart=html.getSpanStart(img);
    int spanEnd=html.getSpanEnd(img);
    int spanFlags=html.getSpanFlags(img);
    html.setSpan(remote,spanStart,spanEnd,spanFlags);
    html.setSpan(clickListener,spanStart,spanEnd,spanFlags);
    html.removeSpan(img);
  }
  mCommentText.setText(html);
  mCommentText.setMovementMethod(LinkMovementMethod.getInstance());
  mReplyField.setOnReplyListener(mReplyListener);
  mDetailHeader.setText(getNote().getSubject());
  Map<String,JSONObject> noteActions=getNote().getActions();
  boolean hasModerateAction=false;
  if (noteActions.containsKey(APPROVE_TAG)) {
    hasModerateAction=true;
    mApproveButton.setImageResource(R.drawable.moderate_approve);
    mApproveButton.setVisibility(View.VISIBLE);
    mApproveButton.setOnClickListener(mModerateClickListener);
    mApproveButton.setTag(APPROVE_TAG);
  }
  if (noteActions.containsKey(UNAPPROVE_TAG)) {
    hasModerateAction=true;
    mApproveButton.setImageResource(R.drawable.moderate_unapprove);
    mApproveButton.setVisibility(View.VISIBLE);
    mApproveButton.setOnClickListener(mModerateClickListener);
    mApproveButton.setTag(UNAPPROVE_TAG);
  }
  if (noteActions.containsKey(SPAM_TAG)) {
    hasModerateAction=true;
    mSpamButton.setVisibility(View.VISIBLE);
    mSpamButton.setOnClickListener(mModerateClickListener);
    mSpamButton.setTag(SPAM_TAG);
  }
 else {
    mSpamButton.setVisibility(View.GONE);
  }
  if (noteActions.containsKey(TRASH_TAG)) {
    hasModerateAction=true;
    mTrashButton.setVisibility(View.VISIBLE);
    mTrashButton.setOnClickListener(mModerateClickListener);
    mTrashButton.setTag(TRASH_TAG);
  }
 else {
    mTrashButton.setVisibility(View.GONE);
  }
  if (!hasModerateAction)   mModerateSection.setVisibility(View.GONE);
  String url=getNote().queryJSON(""String_Node_Str"",""String_Node_Str"");
  if (!url.equals(""String_Node_Str"")) {
    mDetailHeader.setUrl(url);
  }
  JSONObject followAction=getNote().queryJSON(""String_Node_Str"",new JSONObject());
  mFollowRow.setDefaultText(Html.fromHtml(getNote().queryJSON(""String_Node_Str"",""String_Node_Str"")));
  mFollowRow.setAction(followAction);
  mFollowRow.setListener(new FollowListener(getActivity().getApplicationContext()));
  Bundle arguments=getArguments();
  if (arguments != null && (arguments.containsKey(NotificationsActivity.NOTE_REPLY_EXTRA) || arguments.containsKey(NotificationsActivity.NOTE_INSTANT_REPLY_EXTRA))) {
    if (arguments.containsKey(NotificationsActivity.NOTE_REPLY_EXTRA))     mReplyField.setText(arguments.getString(NotificationsActivity.NOTE_REPLY_EXTRA));
    mReplyField.mTextField.requestFocus();
    InputMethodManager inputMethodManager=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
    if (inputMethodManager != null)     inputMethodManager.showSoftInput(mReplyField.mTextField,0);
  }
}",0.9961614824619456
15116,"private boolean selectBlogForShareAction(){
  mIsNew=true;
  mLocalDraft=true;
  List<Map<String,Object>> accounts=WordPress.wpDB.getAccounts();
  if (accounts.size() > 0) {
    final String blogNames[]=new String[accounts.size()];
    final int accountIDs[]=new int[accounts.size()];
    for (int i=0; i < accounts.size(); i++) {
      Map<String,Object> curHash=accounts.get(i);
      try {
        blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
      }
 catch (      Exception e) {
        blogNames[i]=curHash.get(""String_Node_Str"").toString();
      }
      accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
      try {
        mBlog=new Blog(accountIDs[i]);
      }
 catch (      Exception e) {
        showBlogErrorAndFinish();
        return false;
      }
    }
    if (accounts.size() > 1) {
      AlertDialog.Builder builder=new AlertDialog.Builder(EditPostActivity.this);
      builder.setCancelable(false);
      builder.setTitle(getResources().getText(R.string.select_a_blog));
      builder.setItems(blogNames,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int item){
          mBlogID=accountIDs[item];
          try {
            mBlog=new Blog(mBlogID);
          }
 catch (          Exception e) {
            showBlogErrorAndFinish();
          }
          WordPress.currentBlog=mBlog;
          WordPress.wpDB.updateLastBlogId(WordPress.currentBlog.getId());
          mAccountName=blogNames[item];
          setTitle(EscapeUtils.unescapeHtml(mAccountName) + ""String_Node_Str"" + getResources().getText((mIsPage) ? R.string.new_page : R.string.new_post));
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
 else {
      mBlogID=accountIDs[0];
      try {
        mBlog=new Blog(mBlogID);
      }
 catch (      Exception e) {
        showBlogErrorAndFinish();
        return false;
      }
      WordPress.currentBlog=mBlog;
      WordPress.wpDB.updateLastBlogId(WordPress.currentBlog.getId());
      mAccountName=blogNames[0];
      setTitle(EscapeUtils.unescapeHtml(mAccountName) + ""String_Node_Str"" + getResources().getText((mIsPage) ? R.string.new_page : R.string.new_post));
    }
    ;
    return true;
  }
 else {
    Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
    startActivity(new Intent(this,NewAccountActivity.class));
    finish();
    return false;
  }
}","private boolean selectBlogForShareAction(){
  mIsNew=true;
  mLocalDraft=true;
  List<Map<String,Object>> accounts=WordPress.wpDB.getAccounts();
  if (accounts.size() > 0) {
    final String blogNames[]=new String[accounts.size()];
    final int accountIDs[]=new int[accounts.size()];
    for (int i=0; i < accounts.size(); i++) {
      Map<String,Object> curHash=accounts.get(i);
      try {
        blogNames[i]=StringUtils.unescapeHTML(curHash.get(""String_Node_Str"").toString());
      }
 catch (      Exception e) {
        blogNames[i]=curHash.get(""String_Node_Str"").toString();
      }
      accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
      try {
        mBlog=new Blog(accountIDs[i]);
      }
 catch (      Exception e) {
        showBlogErrorAndFinish();
        return false;
      }
    }
    if (accounts.size() > 1) {
      AlertDialog.Builder builder=new AlertDialog.Builder(EditPostActivity.this);
      builder.setCancelable(false);
      builder.setTitle(getResources().getText(R.string.select_a_blog));
      builder.setItems(blogNames,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int item){
          mBlogID=accountIDs[item];
          try {
            mBlog=new Blog(mBlogID);
          }
 catch (          Exception e) {
            showBlogErrorAndFinish();
          }
          WordPress.currentBlog=mBlog;
          WordPress.wpDB.updateLastBlogId(WordPress.currentBlog.getId());
          mAccountName=blogNames[item];
          setTitle(StringUtils.unescapeHTML(mAccountName) + ""String_Node_Str"" + getResources().getText((mIsPage) ? R.string.new_page : R.string.new_post));
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
 else {
      mBlogID=accountIDs[0];
      try {
        mBlog=new Blog(mBlogID);
      }
 catch (      Exception e) {
        showBlogErrorAndFinish();
        return false;
      }
      WordPress.currentBlog=mBlog;
      WordPress.wpDB.updateLastBlogId(WordPress.currentBlog.getId());
      mAccountName=blogNames[0];
      setTitle(StringUtils.unescapeHTML(mAccountName) + ""String_Node_Str"" + getResources().getText((mIsPage) ? R.string.new_page : R.string.new_post));
    }
    ;
    return true;
  }
 else {
    Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
    startActivity(new Intent(this,NewAccountActivity.class));
    finish();
    return false;
  }
}",0.9783219590525892
15117,"private boolean savePost(boolean isAutoSave,boolean isDraftSave){
  String title=mTitleEditText.getText().toString();
  String password=mPasswordEditText.getText().toString();
  String pubDate=mPubDateText.getText().toString();
  String content=""String_Node_Str"";
  if (mLocalDraft || mIsNew && !isAutoSave) {
    Editable e=mContentEditText.getText();
    if (android.os.Build.VERSION.SDK_INT >= 14) {
      CharacterStyle[] style=e.getSpans(0,e.length(),CharacterStyle.class);
      for (int i=0; i < style.length; i++) {
        if (style[i].getClass().getName().equals(""String_Node_Str""))         e.removeSpan(style[i]);
      }
    }
    content=EscapeUtils.unescapeHtml(WPHtml.toHtml(e));
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    content=mContentEditText.getText().toString();
  }
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (!mIsNew)     pubDateTimestamp=mPost.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!mIsPage) {
    tags=mTagsEditText.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"") && !isAutoSave && !isDraftSave) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPostActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        dialog.dismiss();
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!mIsNew) {
      mPost.deleteMediaFiles();
      Editable s=mContentEditText.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(mPost.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save();
          int tagStart=s.getSpanStart(wpIS);
          if (!isAutoSave) {
            s.removeSpan(wpIS);
            s.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
            if (mLocalDraft)             content=EscapeUtils.unescapeHtml(WPHtml.toHtml(s));
 else             content=s.toString();
          }
        }
      }
    }
    final String moreTag=""String_Node_Str"";
    int selectedStatus=mStatusSpinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (mBlog.isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mIsNew) {
mPost=new Post(mBlogID,title,content,images,pubDateTimestamp,mCategories.toString(),tags,status,password,latitude,longitude,mIsPage,postFormat,true,false);
mPost.setLocalDraft(true);
if (content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
success=mPost.save();
if (success) {
mIsNew=false;
mIsNewDraft=true;
}
mPost.deleteMediaFiles();
Spannable s=mContentEditText.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(mPost.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFeatured(wpIS.isFeatured());
mf.setFeaturedInPost(wpIS.isFeaturedInPost());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save();
}
}
WordPress.currentPost=mPost;
}
 else {
if (mCurrentLocation == null) {
latitude=mPost.getLatitude();
longitude=mPost.getLongitude();
}
mPost.setTitle(title);
if (mLocalDraft && content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
 else {
mPost.setDescription(content);
mPost.setMt_text_more(""String_Node_Str"");
}
mPost.setMediaPaths(images);
mPost.setDate_created_gmt(pubDateTimestamp);
mPost.setJSONCategories(new JSONArray(mCategories));
mPost.setMt_keywords(tags);
mPost.setPost_status(status);
mPost.setWP_password(password);
mPost.setLatitude(latitude);
mPost.setLongitude(longitude);
mPost.setWP_post_form(postFormat);
if (!mPost.isLocalDraft()) mPost.setLocalChange(true);
success=mPost.update();
}
}
return success;
}","private boolean savePost(boolean isAutoSave,boolean isDraftSave){
  String title=mTitleEditText.getText().toString();
  String password=mPasswordEditText.getText().toString();
  String pubDate=mPubDateText.getText().toString();
  String content=""String_Node_Str"";
  if (mLocalDraft || mIsNew && !isAutoSave) {
    Editable e=mContentEditText.getText();
    if (android.os.Build.VERSION.SDK_INT >= 14) {
      CharacterStyle[] style=e.getSpans(0,e.length(),CharacterStyle.class);
      for (int i=0; i < style.length; i++) {
        if (style[i].getClass().getName().equals(""String_Node_Str""))         e.removeSpan(style[i]);
      }
    }
    content=StringUtils.unescapeHTML(WPHtml.toHtml(e));
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    content=mContentEditText.getText().toString();
  }
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (!mIsNew)     pubDateTimestamp=mPost.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!mIsPage) {
    tags=mTagsEditText.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"") && !isAutoSave && !isDraftSave) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPostActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        dialog.dismiss();
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!mIsNew) {
      mPost.deleteMediaFiles();
      Editable s=mContentEditText.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(mPost.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save();
          int tagStart=s.getSpanStart(wpIS);
          if (!isAutoSave) {
            s.removeSpan(wpIS);
            s.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
            if (mLocalDraft)             content=StringUtils.unescapeHTML(WPHtml.toHtml(s));
 else             content=s.toString();
          }
        }
      }
    }
    final String moreTag=""String_Node_Str"";
    int selectedStatus=mStatusSpinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (mBlog.isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mIsNew) {
mPost=new Post(mBlogID,title,content,images,pubDateTimestamp,mCategories.toString(),tags,status,password,latitude,longitude,mIsPage,postFormat,true,false);
mPost.setLocalDraft(true);
if (content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
success=mPost.save();
if (success) {
mIsNew=false;
mIsNewDraft=true;
}
mPost.deleteMediaFiles();
Spannable s=mContentEditText.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(mPost.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFeatured(wpIS.isFeatured());
mf.setFeaturedInPost(wpIS.isFeaturedInPost());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save();
}
}
WordPress.currentPost=mPost;
}
 else {
if (mCurrentLocation == null) {
latitude=mPost.getLatitude();
longitude=mPost.getLongitude();
}
mPost.setTitle(title);
if (mLocalDraft && content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
 else {
mPost.setDescription(content);
mPost.setMt_text_more(""String_Node_Str"");
}
mPost.setMediaPaths(images);
mPost.setDate_created_gmt(pubDateTimestamp);
mPost.setJSONCategories(new JSONArray(mCategories));
mPost.setMt_keywords(tags);
mPost.setPost_status(status);
mPost.setWP_password(password);
mPost.setLatitude(latitude);
mPost.setLongitude(longitude);
mPost.setWP_post_form(postFormat);
if (!mPost.isLocalDraft()) mPost.setLocalChange(true);
success=mPost.update();
}
}
return success;
}",0.9971546000632312
15118,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  ActionBar actionBar=getSupportActionBar();
  actionBar.setHomeButtonEnabled(true);
  actionBar.setDisplayHomeAsUpEnabled(true);
  Calendar c=Calendar.getInstance();
  mYear=c.get(Calendar.YEAR);
  mMonth=c.get(Calendar.MONTH);
  mDay=c.get(Calendar.DAY_OF_MONTH);
  mHour=c.get(Calendar.HOUR_OF_DAY);
  mMinute=c.get(Calendar.MINUTE);
  mCategories=new ArrayList<String>();
  mAutoSaveHandler=new Handler();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    mIsExternalInstance=true;
    if (!selectBlogForShareAction())     return;
  }
 else {
    initBlog();
    if (extras != null) {
      mAccountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      mPostID=extras.getLong(""String_Node_Str"");
      mLocalDraft=extras.getBoolean(""String_Node_Str"",false);
      mIsPage=extras.getBoolean(""String_Node_Str"",false);
      mIsNew=extras.getBoolean(""String_Node_Str"",false);
      if (savedInstanceState != null) {
        mCurrentActivityRequest=savedInstanceState.getInt(""String_Node_Str"");
        if (savedInstanceState.getString(""String_Node_Str"") != null)         mMediaCapturePath=savedInstanceState.getString(""String_Node_Str"");
      }
 else {
        mQuickMediaType=extras.getInt(""String_Node_Str"",-1);
      }
      if (extras.getBoolean(""String_Node_Str"")) {
        mIsExternalInstance=true;
        mBlogID=extras.getInt(""String_Node_Str"");
      }
 else {
        mBlogID=WordPress.currentBlog.getId();
      }
      try {
        mBlog=new Blog(mBlogID);
        WordPress.currentBlog=mBlog;
      }
 catch (      Exception e) {
        showBlogErrorAndFinish();
        return;
      }
      if (!mIsNew) {
        try {
          mPost=new Post(mBlogID,mPostID,mIsPage);
          if (mPost == null) {
            Toast.makeText(this,getResources().getText(R.string.post_not_found),Toast.LENGTH_LONG).show();
            finish();
            return;
          }
 else {
            WordPress.currentPost=mPost;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          finish();
        }
      }
    }
    if (mIsNew) {
      mLocalDraft=true;
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  setContentView(R.layout.edit);
  mContentEditText=(WPEditText)findViewById(R.id.postContent);
  mTitleEditText=(EditText)findViewById(R.id.title);
  mPasswordEditText=(EditText)findViewById(R.id.post_password);
  mLocationText=(TextView)findViewById(R.id.locationText);
  mBoldToggleButton=(ToggleButton)findViewById(R.id.bold);
  mEmToggleButton=(ToggleButton)findViewById(R.id.em);
  mBquoteToggleButton=(ToggleButton)findViewById(R.id.bquote);
  mUnderlineToggleButton=(ToggleButton)findViewById(R.id.underline);
  mStrikeToggleButton=(ToggleButton)findViewById(R.id.strike);
  mAddPictureButton=(ImageButton)findViewById(R.id.addPictureButton);
  mPubDateButton=(Button)findViewById(R.id.pubDateButton);
  mPubDateText=(TextView)findViewById(R.id.pubDate);
  mLinkButton=(Button)findViewById(R.id.link);
  mMoreButton=(Button)findViewById(R.id.more);
  mStatusSpinner=(Spinner)findViewById(R.id.status);
  mTagsEditText=(EditText)findViewById(R.id.tags);
  mFormatBar=(RelativeLayout)findViewById(R.id.formatBar);
  ((TextView)findViewById(R.id.categoryLabel)).setText(getResources().getString(R.string.categories).toUpperCase());
  ((TextView)findViewById(R.id.statusLabel)).setText(getResources().getString(R.string.status).toUpperCase());
  ((TextView)findViewById(R.id.postFormatLabel)).setText(getResources().getString(R.string.post_format).toUpperCase());
  ((TextView)findViewById(R.id.pubDateLabel)).setText(getResources().getString(R.string.publish_date).toUpperCase());
  if (mIsPage) {
    (findViewById(R.id.sectionTags)).setVisibility(View.GONE);
    (findViewById(R.id.sectionCategories)).setVisibility(View.GONE);
    (findViewById(R.id.sectionLocation)).setVisibility(View.GONE);
    (findViewById(R.id.postFormatLabel)).setVisibility(View.GONE);
    (findViewById(R.id.postFormat)).setVisibility(View.GONE);
  }
 else {
    if (mBlog.getPostFormats().equals(""String_Node_Str"")) {
      List<Object> args=new Vector<Object>();
      args.add(mBlog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      mPostFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      mPostFormats=defaultPostFormatTitles;
    }
 else {
      try {
        Gson gson=new Gson();
        Type type=new TypeToken<Map<String,String>>(){
        }
.getType();
        Map<String,String> jsonPostFormats=gson.fromJson(mBlog.getPostFormats(),type);
        mPostFormats=new String[jsonPostFormats.size()];
        mPostFormatTitles=new String[jsonPostFormats.size()];
        int i=0;
        for (        Map.Entry<String,String> entry : jsonPostFormats.entrySet()) {
          String key=entry.getKey();
          String val=entry.getValue();
          mPostFormats[i]=key;
          mPostFormatTitles[i]=val;
          i++;
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,mPostFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!mIsNew) {
      try {
        if (!mPost.getWP_post_format().equals(""String_Node_Str""))         activePostFormat=mPost.getWP_post_format();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int i=0; i < mPostFormats.length; i++) {
      if (mPostFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mStatusSpinner.setAdapter(adapter);
  getLocationProvider();
  if (mIsNew) {
    if (mQuickMediaType >= 0) {
      if (mQuickMediaType == Constants.QUICK_POST_PHOTO_CAMERA)       launchCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_PHOTO_LIBRARY)       launchPictureLibrary();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_CAMERA)       launchVideoCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_LIBRARY)       launchVideoLibrary();
      mLocalDraft=extras.getBoolean(""String_Node_Str"");
    }
  }
 else {
    mTitleEditText.setText(mPost.getTitle());
    if (mPost.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      mStatusSpinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!mPost.getMt_text_more().equals(""String_Node_Str"")) {
      if (mPost.isLocalDraft())       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
 else       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
    }
 else     contentHTML=mPost.getDescription();
    try {
      if (mPost.isLocalDraft())       mContentEditText.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPostActivity.this,mPost));
 else       mContentEditText.setText(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    long pubDate=mPost.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPostActivity.this,pubDate,flags);
        mPubDateText.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (mPost.getWP_password() != null)     mPasswordEditText.setText(mPost.getWP_password());
    if (mPost.getPost_status() != null) {
      String status=mPost.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(0,true);
      }
    }
    if (!mIsPage) {
      if (mPost.getJSONCategories() != null) {
        mCategories=JSONUtil.fromJSONArrayToStringList(mPost.getJSONCategories());
      }
      Double latitude=mPost.getLatitude();
      Double longitude=mPost.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
    }
    String tags=mPost.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      mTagsEditText.setText(tags);
    }
  }
  populateSelectedCategories();
  registerForContextMenu(mAddPictureButton);
  mContentEditText.setOnSelectionChangedListener(this);
  mContentEditText.setOnEditTextImeBackListener(this);
  mContentEditText.setOnTouchListener(this);
  mContentEditText.addTextChangedListener(this);
  mContentEditText.setOnFocusChangeListener(this);
  mAddPictureButton.setOnClickListener(this);
  mPubDateButton.setOnClickListener(this);
  mBoldToggleButton.setOnClickListener(this);
  mLinkButton.setOnClickListener(this);
  mEmToggleButton.setOnClickListener(this);
  mUnderlineToggleButton.setOnClickListener(this);
  mStrikeToggleButton.setOnClickListener(this);
  mBquoteToggleButton.setOnClickListener(this);
  mMoreButton.setOnClickListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  ActionBar actionBar=getSupportActionBar();
  actionBar.setHomeButtonEnabled(true);
  actionBar.setDisplayHomeAsUpEnabled(true);
  Calendar c=Calendar.getInstance();
  mYear=c.get(Calendar.YEAR);
  mMonth=c.get(Calendar.MONTH);
  mDay=c.get(Calendar.DAY_OF_MONTH);
  mHour=c.get(Calendar.HOUR_OF_DAY);
  mMinute=c.get(Calendar.MINUTE);
  mCategories=new ArrayList<String>();
  mAutoSaveHandler=new Handler();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    mIsExternalInstance=true;
    if (!selectBlogForShareAction())     return;
  }
 else {
    initBlog();
    if (extras != null) {
      mAccountName=StringUtils.unescapeHTML(extras.getString(""String_Node_Str""));
      mPostID=extras.getLong(""String_Node_Str"");
      mLocalDraft=extras.getBoolean(""String_Node_Str"",false);
      mIsPage=extras.getBoolean(""String_Node_Str"",false);
      mIsNew=extras.getBoolean(""String_Node_Str"",false);
      if (savedInstanceState != null) {
        mCurrentActivityRequest=savedInstanceState.getInt(""String_Node_Str"");
        if (savedInstanceState.getString(""String_Node_Str"") != null)         mMediaCapturePath=savedInstanceState.getString(""String_Node_Str"");
      }
 else {
        mQuickMediaType=extras.getInt(""String_Node_Str"",-1);
      }
      if (extras.getBoolean(""String_Node_Str"")) {
        mIsExternalInstance=true;
        mBlogID=extras.getInt(""String_Node_Str"");
      }
 else {
        mBlogID=WordPress.currentBlog.getId();
      }
      try {
        mBlog=new Blog(mBlogID);
        WordPress.currentBlog=mBlog;
      }
 catch (      Exception e) {
        showBlogErrorAndFinish();
        return;
      }
      if (!mIsNew) {
        try {
          mPost=new Post(mBlogID,mPostID,mIsPage);
          if (mPost == null) {
            Toast.makeText(this,getResources().getText(R.string.post_not_found),Toast.LENGTH_LONG).show();
            finish();
            return;
          }
 else {
            WordPress.currentPost=mPost;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          finish();
        }
      }
    }
    if (mIsNew) {
      mLocalDraft=true;
      setTitle(StringUtils.unescapeHTML(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(StringUtils.unescapeHTML(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  setContentView(R.layout.edit);
  mContentEditText=(WPEditText)findViewById(R.id.postContent);
  mTitleEditText=(EditText)findViewById(R.id.title);
  mPasswordEditText=(EditText)findViewById(R.id.post_password);
  mLocationText=(TextView)findViewById(R.id.locationText);
  mBoldToggleButton=(ToggleButton)findViewById(R.id.bold);
  mEmToggleButton=(ToggleButton)findViewById(R.id.em);
  mBquoteToggleButton=(ToggleButton)findViewById(R.id.bquote);
  mUnderlineToggleButton=(ToggleButton)findViewById(R.id.underline);
  mStrikeToggleButton=(ToggleButton)findViewById(R.id.strike);
  mAddPictureButton=(ImageButton)findViewById(R.id.addPictureButton);
  mPubDateButton=(Button)findViewById(R.id.pubDateButton);
  mPubDateText=(TextView)findViewById(R.id.pubDate);
  mLinkButton=(Button)findViewById(R.id.link);
  mMoreButton=(Button)findViewById(R.id.more);
  mStatusSpinner=(Spinner)findViewById(R.id.status);
  mTagsEditText=(EditText)findViewById(R.id.tags);
  mFormatBar=(RelativeLayout)findViewById(R.id.formatBar);
  ((TextView)findViewById(R.id.categoryLabel)).setText(getResources().getString(R.string.categories).toUpperCase());
  ((TextView)findViewById(R.id.statusLabel)).setText(getResources().getString(R.string.status).toUpperCase());
  ((TextView)findViewById(R.id.postFormatLabel)).setText(getResources().getString(R.string.post_format).toUpperCase());
  ((TextView)findViewById(R.id.pubDateLabel)).setText(getResources().getString(R.string.publish_date).toUpperCase());
  if (mIsPage) {
    (findViewById(R.id.sectionTags)).setVisibility(View.GONE);
    (findViewById(R.id.sectionCategories)).setVisibility(View.GONE);
    (findViewById(R.id.sectionLocation)).setVisibility(View.GONE);
    (findViewById(R.id.postFormatLabel)).setVisibility(View.GONE);
    (findViewById(R.id.postFormat)).setVisibility(View.GONE);
  }
 else {
    if (mBlog.getPostFormats().equals(""String_Node_Str"")) {
      List<Object> args=new Vector<Object>();
      args.add(mBlog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      mPostFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      mPostFormats=defaultPostFormatTitles;
    }
 else {
      try {
        Gson gson=new Gson();
        Type type=new TypeToken<Map<String,String>>(){
        }
.getType();
        Map<String,String> jsonPostFormats=gson.fromJson(mBlog.getPostFormats(),type);
        mPostFormats=new String[jsonPostFormats.size()];
        mPostFormatTitles=new String[jsonPostFormats.size()];
        int i=0;
        for (        Map.Entry<String,String> entry : jsonPostFormats.entrySet()) {
          String key=entry.getKey();
          String val=entry.getValue();
          mPostFormats[i]=key;
          mPostFormatTitles[i]=val;
          i++;
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,mPostFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!mIsNew) {
      try {
        if (!mPost.getWP_post_format().equals(""String_Node_Str""))         activePostFormat=mPost.getWP_post_format();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int i=0; i < mPostFormats.length; i++) {
      if (mPostFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mStatusSpinner.setAdapter(adapter);
  getLocationProvider();
  if (mIsNew) {
    if (mQuickMediaType >= 0) {
      if (mQuickMediaType == Constants.QUICK_POST_PHOTO_CAMERA)       launchCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_PHOTO_LIBRARY)       launchPictureLibrary();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_CAMERA)       launchVideoCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_LIBRARY)       launchVideoLibrary();
      mLocalDraft=extras.getBoolean(""String_Node_Str"");
    }
  }
 else {
    mTitleEditText.setText(mPost.getTitle());
    if (mPost.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      mStatusSpinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!mPost.getMt_text_more().equals(""String_Node_Str"")) {
      if (mPost.isLocalDraft())       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
 else       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
    }
 else     contentHTML=mPost.getDescription();
    try {
      if (mPost.isLocalDraft())       mContentEditText.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPostActivity.this,mPost));
 else       mContentEditText.setText(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    long pubDate=mPost.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPostActivity.this,pubDate,flags);
        mPubDateText.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (mPost.getWP_password() != null)     mPasswordEditText.setText(mPost.getWP_password());
    if (mPost.getPost_status() != null) {
      String status=mPost.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(0,true);
      }
    }
    if (!mIsPage) {
      if (mPost.getJSONCategories() != null) {
        mCategories=JSONUtil.fromJSONArrayToStringList(mPost.getJSONCategories());
      }
      Double latitude=mPost.getLatitude();
      Double longitude=mPost.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
    }
    String tags=mPost.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      mTagsEditText.setText(tags);
    }
  }
  populateSelectedCategories();
  registerForContextMenu(mAddPictureButton);
  mContentEditText.setOnSelectionChangedListener(this);
  mContentEditText.setOnEditTextImeBackListener(this);
  mContentEditText.setOnTouchListener(this);
  mContentEditText.addTextChangedListener(this);
  mContentEditText.setOnFocusChangeListener(this);
  mAddPictureButton.setOnClickListener(this);
  mPubDateButton.setOnClickListener(this);
  mBoldToggleButton.setOnClickListener(this);
  mLinkButton.setOnClickListener(this);
  mEmToggleButton.setOnClickListener(this);
  mUnderlineToggleButton.setOnClickListener(this);
  mStrikeToggleButton.setOnClickListener(this);
  mBquoteToggleButton.setOnClickListener(this);
  mMoreButton.setOnClickListener(this);
}",0.9975918658580092
15119,"private boolean loadDrafts(){
  List<Map<String,Object>> loadedPosts;
  if (isPage) {
    loadedPosts=WordPress.wpDB.loadDrafts(WordPress.currentBlog.getId(),true);
  }
 else {
    loadedPosts=WordPress.wpDB.loadDrafts(WordPress.currentBlog.getId(),false);
  }
  if (loadedPosts != null) {
    mDraftIDs=new String[loadedPosts.size()];
    mDraftTitles=new String[loadedPosts.size()];
    mDraftDateCreated=new String[loadedPosts.size()];
    mUploaded=new int[loadedPosts.size()];
    totalDrafts=loadedPosts.size();
    mDraftStatuses=new String[loadedPosts.size()];
    for (int i=0; i < loadedPosts.size(); i++) {
      Map<String,Object> contentHash=loadedPosts.get(i);
      mDraftIDs[i]=contentHash.get(""String_Node_Str"").toString();
      mDraftTitles[i]=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      mDraftDateCreated[i]=""String_Node_Str"";
      mUploaded[i]=(Integer)contentHash.get(""String_Node_Str"");
      mDraftStatuses[i]=getString(R.string.local_draft);
    }
    return true;
  }
 else {
    totalDrafts=0;
    return false;
  }
}","private boolean loadDrafts(){
  List<Map<String,Object>> loadedPosts;
  if (isPage) {
    loadedPosts=WordPress.wpDB.loadDrafts(WordPress.currentBlog.getId(),true);
  }
 else {
    loadedPosts=WordPress.wpDB.loadDrafts(WordPress.currentBlog.getId(),false);
  }
  if (loadedPosts != null) {
    mDraftIDs=new String[loadedPosts.size()];
    mDraftTitles=new String[loadedPosts.size()];
    mDraftDateCreated=new String[loadedPosts.size()];
    mUploaded=new int[loadedPosts.size()];
    totalDrafts=loadedPosts.size();
    mDraftStatuses=new String[loadedPosts.size()];
    for (int i=0; i < loadedPosts.size(); i++) {
      Map<String,Object> contentHash=loadedPosts.get(i);
      mDraftIDs[i]=contentHash.get(""String_Node_Str"").toString();
      mDraftTitles[i]=StringUtils.unescapeHTML(contentHash.get(""String_Node_Str"").toString());
      mDraftDateCreated[i]=""String_Node_Str"";
      mUploaded[i]=(Integer)contentHash.get(""String_Node_Str"");
      mDraftStatuses[i]=getString(R.string.local_draft);
    }
    return true;
  }
 else {
    totalDrafts=0;
    return false;
  }
}",0.9833333333333332
15120,"public boolean loadPosts(boolean loadMore){
  List<Map<String,Object>> loadedPosts;
  try {
    if (isPage) {
      loadedPosts=WordPress.wpDB.loadUploadedPosts(WordPress.currentBlog.getId(),true);
    }
 else {
      loadedPosts=WordPress.wpDB.loadUploadedPosts(WordPress.currentBlog.getId(),false);
    }
  }
 catch (  Exception e1) {
    return false;
  }
  if (loadedPosts != null) {
    numRecords=loadedPosts.size();
    mTitles=new String[loadedPosts.size()];
    mPostIDs=new String[loadedPosts.size()];
    mDateCreated=new String[loadedPosts.size()];
    mDateCreatedFormatted=new String[loadedPosts.size()];
    mStatuses=new String[loadedPosts.size()];
  }
 else {
    mTitles=new String[0];
    mPostIDs=new String[0];
    mDateCreated=new String[0];
    mDateCreatedFormatted=new String[0];
    mStatuses=new String[0];
    if (mPostListAdapter != null) {
      mPostListAdapter.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null) {
    Date d=new Date();
    for (int i=0; i < loadedPosts.size(); i++) {
      Map<String,Object> contentHash=loadedPosts.get(i);
      mTitles[i]=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      mPostIDs[i]=contentHash.get(""String_Node_Str"").toString();
      mDateCreated[i]=contentHash.get(""String_Node_Str"").toString();
      if (contentHash.get(""String_Node_Str"") != null) {
        String api_status=contentHash.get(""String_Node_Str"").toString();
        if (api_status.equals(""String_Node_Str"")) {
          mStatuses[i]=getResources().getText(R.string.published).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          mStatuses[i]=getResources().getText(R.string.draft).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          mStatuses[i]=getResources().getText(R.string.pending_review).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          mStatuses[i]=getResources().getText(R.string.post_private).toString();
        }
        if ((Long)contentHash.get(""String_Node_Str"") > d.getTime() && api_status.equals(""String_Node_Str"")) {
          mStatuses[i]=getResources().getText(R.string.scheduled).toString();
        }
      }
      long localTime=(Long)contentHash.get(""String_Node_Str"");
      mDateCreatedFormatted[i]=getFormattedDate(localTime);
    }
  }
  boolean drafts=loadDrafts();
  if (drafts) {
    mPostIDs=StringUtils.mergeStringArrays(mDraftIDs,mPostIDs);
    mTitles=StringUtils.mergeStringArrays(mDraftTitles,mTitles);
    mDateCreatedFormatted=StringUtils.mergeStringArrays(mDraftDateCreated,mDateCreatedFormatted);
    mStatuses=StringUtils.mergeStringArrays(mDraftStatuses,mStatuses);
  }
 else {
    if (mPostListAdapter != null) {
      mPostListAdapter.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null || drafts == true) {
    ListView listView=getListView();
    listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    listView.setBackgroundColor(getResources().getColor(R.color.list_row_bg));
    listView.setDivider(getResources().getDrawable(R.drawable.list_divider));
    listView.setDividerHeight(1);
    listView.removeFooterView(switcher);
    if (loadedPosts != null) {
      if (loadedPosts.size() >= 20) {
        listView.addFooterView(switcher);
      }
    }
    if (loadMore) {
      mPostListAdapter.notifyDataSetChanged();
    }
 else {
      mPostListAdapter=new PostListAdapter(getActivity().getBaseContext());
      listView.setAdapter(mPostListAdapter);
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View v,        int position,        long id){
          if (position < mPostIDs.length) {
            if (v != null && !mParentActivity.isRefreshing) {
              mSelectedID=v.getId();
              Post post=new Post(WordPress.currentBlog.getId(),mSelectedID,isPage);
              if (post.getId() >= 0) {
                WordPress.currentPost=post;
                mOnPostSelectedListener.onPostSelected(post);
                mPostListAdapter.notifyDataSetChanged();
              }
 else {
                if (!getActivity().isFinishing()) {
                  FragmentTransaction ft=getFragmentManager().beginTransaction();
                  WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.post_not_found));
                  alert.show(ft,""String_Node_Str"");
                }
              }
            }
          }
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          if (mParentActivity.isRefreshing)           return;
          Object[] args={R.id.row_post_id};
          try {
            Method m=android.view.View.class.getMethod(""String_Node_Str"");
            m.invoke(mSelectedID,args);
          }
 catch (          NoSuchMethodException e) {
            mSelectedID=info.targetView.getId();
          }
catch (          IllegalArgumentException e) {
            mSelectedID=info.targetView.getId();
          }
catch (          IllegalAccessException e) {
            mSelectedID=info.targetView.getId();
          }
catch (          InvocationTargetException e) {
            mSelectedID=info.targetView.getId();
          }
          boolean allowComments=false;
          Post post=new Post(WordPress.currentBlog.getId(),mSelectedID,isPage);
          if (post.getId() >= 0) {
            allowComments=post.isMt_allow_comments();
          }
          mRowID=info.position;
          if (totalDrafts > 0 && mRowID < totalDrafts) {
            menu.clear();
            menu.setHeaderTitle(getResources().getText(R.string.draft_actions));
            menu.add(1,0,0,getResources().getText(R.string.edit_draft));
            menu.add(1,1,0,getResources().getText(R.string.delete_draft));
          }
 else {
            menu.clear();
            if (isPage) {
              menu.setHeaderTitle(getResources().getText(R.string.page_actions));
              menu.add(2,0,0,getResources().getText(R.string.edit_page));
              menu.add(2,1,0,getResources().getText(R.string.delete_page));
              menu.add(2,2,0,getResources().getText(R.string.share_url_page));
              if (allowComments)               menu.add(2,3,0,getResources().getText(R.string.add_comment));
            }
 else {
              menu.setHeaderTitle(getResources().getText(R.string.post_actions));
              menu.add(0,0,0,getResources().getText(R.string.edit_post));
              menu.add(0,1,0,getResources().getText(R.string.delete_post));
              menu.add(0,2,0,getResources().getText(R.string.share_url));
              if (allowComments)               menu.add(0,3,0,getResources().getText(R.string.add_comment));
            }
          }
        }
      }
);
    }
    if (this.shouldSelectAfterLoad) {
      if (mPostIDs != null) {
        if (mPostIDs.length >= 1) {
          Post post=new Post(WordPress.currentBlog.getId(),Integer.valueOf(mPostIDs[0]),isPage);
          if (post.getId() >= 0) {
            WordPress.currentPost=post;
            mOnPostSelectedListener.onPostSelected(post);
            FragmentManager fm=getActivity().getSupportFragmentManager();
            ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
            if (f != null && f.isInLayout())             getListView().setItemChecked(0,true);
          }
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    return true;
  }
 else {
    if (loadedPosts == null) {
      refreshPosts(false);
      if (!isPage)       new ApiHelper.RefreshBlogContentTask(getActivity(),WordPress.getCurrentBlog()).execute(false);
    }
    return false;
  }
}","public boolean loadPosts(boolean loadMore){
  List<Map<String,Object>> loadedPosts;
  try {
    if (isPage) {
      loadedPosts=WordPress.wpDB.loadUploadedPosts(WordPress.currentBlog.getId(),true);
    }
 else {
      loadedPosts=WordPress.wpDB.loadUploadedPosts(WordPress.currentBlog.getId(),false);
    }
  }
 catch (  Exception e1) {
    return false;
  }
  if (loadedPosts != null) {
    numRecords=loadedPosts.size();
    mTitles=new String[loadedPosts.size()];
    mPostIDs=new String[loadedPosts.size()];
    mDateCreated=new String[loadedPosts.size()];
    mDateCreatedFormatted=new String[loadedPosts.size()];
    mStatuses=new String[loadedPosts.size()];
  }
 else {
    mTitles=new String[0];
    mPostIDs=new String[0];
    mDateCreated=new String[0];
    mDateCreatedFormatted=new String[0];
    mStatuses=new String[0];
    if (mPostListAdapter != null) {
      mPostListAdapter.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null) {
    Date d=new Date();
    for (int i=0; i < loadedPosts.size(); i++) {
      Map<String,Object> contentHash=loadedPosts.get(i);
      mTitles[i]=StringUtils.unescapeHTML(contentHash.get(""String_Node_Str"").toString());
      mPostIDs[i]=contentHash.get(""String_Node_Str"").toString();
      mDateCreated[i]=contentHash.get(""String_Node_Str"").toString();
      if (contentHash.get(""String_Node_Str"") != null) {
        String api_status=contentHash.get(""String_Node_Str"").toString();
        if (api_status.equals(""String_Node_Str"")) {
          mStatuses[i]=getResources().getText(R.string.published).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          mStatuses[i]=getResources().getText(R.string.draft).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          mStatuses[i]=getResources().getText(R.string.pending_review).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          mStatuses[i]=getResources().getText(R.string.post_private).toString();
        }
        if ((Long)contentHash.get(""String_Node_Str"") > d.getTime() && api_status.equals(""String_Node_Str"")) {
          mStatuses[i]=getResources().getText(R.string.scheduled).toString();
        }
      }
      long localTime=(Long)contentHash.get(""String_Node_Str"");
      mDateCreatedFormatted[i]=getFormattedDate(localTime);
    }
  }
  boolean drafts=loadDrafts();
  if (drafts) {
    mPostIDs=StringUtils.mergeStringArrays(mDraftIDs,mPostIDs);
    mTitles=StringUtils.mergeStringArrays(mDraftTitles,mTitles);
    mDateCreatedFormatted=StringUtils.mergeStringArrays(mDraftDateCreated,mDateCreatedFormatted);
    mStatuses=StringUtils.mergeStringArrays(mDraftStatuses,mStatuses);
  }
 else {
    if (mPostListAdapter != null) {
      mPostListAdapter.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null || drafts == true) {
    ListView listView=getListView();
    listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    listView.setBackgroundColor(getResources().getColor(R.color.list_row_bg));
    listView.setDivider(getResources().getDrawable(R.drawable.list_divider));
    listView.setDividerHeight(1);
    listView.removeFooterView(switcher);
    if (loadedPosts != null) {
      if (loadedPosts.size() >= 20) {
        listView.addFooterView(switcher);
      }
    }
    if (loadMore) {
      mPostListAdapter.notifyDataSetChanged();
    }
 else {
      mPostListAdapter=new PostListAdapter(getActivity().getBaseContext());
      listView.setAdapter(mPostListAdapter);
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View v,        int position,        long id){
          if (position < mPostIDs.length) {
            if (v != null && !mParentActivity.isRefreshing) {
              mSelectedID=v.getId();
              Post post=new Post(WordPress.currentBlog.getId(),mSelectedID,isPage);
              if (post.getId() >= 0) {
                WordPress.currentPost=post;
                mOnPostSelectedListener.onPostSelected(post);
                mPostListAdapter.notifyDataSetChanged();
              }
 else {
                if (!getActivity().isFinishing()) {
                  FragmentTransaction ft=getFragmentManager().beginTransaction();
                  WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.post_not_found));
                  alert.show(ft,""String_Node_Str"");
                }
              }
            }
          }
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          if (mParentActivity.isRefreshing)           return;
          Object[] args={R.id.row_post_id};
          try {
            Method m=android.view.View.class.getMethod(""String_Node_Str"");
            m.invoke(mSelectedID,args);
          }
 catch (          NoSuchMethodException e) {
            mSelectedID=info.targetView.getId();
          }
catch (          IllegalArgumentException e) {
            mSelectedID=info.targetView.getId();
          }
catch (          IllegalAccessException e) {
            mSelectedID=info.targetView.getId();
          }
catch (          InvocationTargetException e) {
            mSelectedID=info.targetView.getId();
          }
          boolean allowComments=false;
          Post post=new Post(WordPress.currentBlog.getId(),mSelectedID,isPage);
          if (post.getId() >= 0) {
            allowComments=post.isMt_allow_comments();
          }
          mRowID=info.position;
          if (totalDrafts > 0 && mRowID < totalDrafts) {
            menu.clear();
            menu.setHeaderTitle(getResources().getText(R.string.draft_actions));
            menu.add(1,0,0,getResources().getText(R.string.edit_draft));
            menu.add(1,1,0,getResources().getText(R.string.delete_draft));
          }
 else {
            menu.clear();
            if (isPage) {
              menu.setHeaderTitle(getResources().getText(R.string.page_actions));
              menu.add(2,0,0,getResources().getText(R.string.edit_page));
              menu.add(2,1,0,getResources().getText(R.string.delete_page));
              menu.add(2,2,0,getResources().getText(R.string.share_url_page));
              if (allowComments)               menu.add(2,3,0,getResources().getText(R.string.add_comment));
            }
 else {
              menu.setHeaderTitle(getResources().getText(R.string.post_actions));
              menu.add(0,0,0,getResources().getText(R.string.edit_post));
              menu.add(0,1,0,getResources().getText(R.string.delete_post));
              menu.add(0,2,0,getResources().getText(R.string.share_url));
              if (allowComments)               menu.add(0,3,0,getResources().getText(R.string.add_comment));
            }
          }
        }
      }
);
    }
    if (this.shouldSelectAfterLoad) {
      if (mPostIDs != null) {
        if (mPostIDs.length >= 1) {
          Post post=new Post(WordPress.currentBlog.getId(),Integer.valueOf(mPostIDs[0]),isPage);
          if (post.getId() >= 0) {
            WordPress.currentPost=post;
            mOnPostSelectedListener.onPostSelected(post);
            FragmentManager fm=getActivity().getSupportFragmentManager();
            ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
            if (f != null && f.isInLayout())             getListView().setItemChecked(0,true);
          }
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    return true;
  }
 else {
    if (loadedPosts == null) {
      refreshPosts(false);
      if (!isPage)       new ApiHelper.RefreshBlogContentTask(getActivity(),WordPress.getCurrentBlog()).execute(false);
    }
    return false;
  }
}",0.9977837970943118
15121,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  boolean isPage=getIntent().getBooleanExtra(""String_Node_Str"",false);
  if (isPage) {
    this.setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText(R.string.preview_page));
  }
 else {
    this.setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText(R.string.preview_post));
  }
  mWebView.setWebChromeClient(new WordPressWebChromeClient(this));
  mWebView.getSettings().setJavaScriptEnabled(true);
  if (WordPress.currentPost != null)   loadPostPreview(WordPress.currentPost);
 else {
    Toast.makeText(this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  boolean isPage=getIntent().getBooleanExtra(""String_Node_Str"",false);
  if (isPage) {
    this.setTitle(StringUtils.unescapeHTML(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText(R.string.preview_page));
  }
 else {
    this.setTitle(StringUtils.unescapeHTML(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText(R.string.preview_post));
  }
  mWebView.setWebChromeClient(new WordPressWebChromeClient(this));
  mWebView.getSettings().setJavaScriptEnabled(true);
  if (WordPress.currentPost != null)   loadPostPreview(WordPress.currentPost);
 else {
    Toast.makeText(this,R.string.post_not_found,Toast.LENGTH_SHORT).show();
  }
}",0.9073604060913706
15122,"public void loadPost(Post post){
  if (post == null || post.getTitle() == null)   return;
  TextView title=(TextView)getActivity().findViewById(R.id.postTitle);
  if (post.getTitle().equals(""String_Node_Str""))   title.setText(""String_Node_Str"" + getResources().getText(R.string.untitled) + ""String_Node_Str"");
 else   title.setText(EscapeUtils.unescapeHtml(post.getTitle()));
  WebView webView=(WebView)getActivity().findViewById(R.id.viewPostWebView);
  TextView tv=(TextView)getActivity().findViewById(R.id.viewPostTextView);
  ImageButton shareURLButton=(ImageButton)getActivity().findViewById(R.id.sharePostLink);
  ImageButton viewPostButton=(ImageButton)getActivity().findViewById(R.id.viewPost);
  ImageButton addCommentButton=(ImageButton)getActivity().findViewById(R.id.addComment);
  tv.setVisibility(View.GONE);
  webView.setVisibility(View.VISIBLE);
  String html=StringUtils.addPTags(post.getDescription() + ""String_Node_Str"" + post.getMt_text_more());
  String htmlText=""String_Node_Str"" + html + ""String_Node_Str"";
  webView.loadDataWithBaseURL(""String_Node_Str"",htmlText,""String_Node_Str"",""String_Node_Str"",null);
  if (post.isLocalDraft()) {
    shareURLButton.setVisibility(View.GONE);
    viewPostButton.setVisibility(View.GONE);
    addCommentButton.setVisibility(View.GONE);
  }
 else {
    shareURLButton.setVisibility(View.VISIBLE);
    viewPostButton.setVisibility(View.VISIBLE);
    if (post.isMt_allow_comments()) {
      addCommentButton.setVisibility(View.VISIBLE);
    }
 else {
      addCommentButton.setVisibility(View.GONE);
    }
  }
}","public void loadPost(Post post){
  if (post == null || post.getTitle() == null)   return;
  TextView title=(TextView)getActivity().findViewById(R.id.postTitle);
  if (post.getTitle().equals(""String_Node_Str""))   title.setText(""String_Node_Str"" + getResources().getText(R.string.untitled) + ""String_Node_Str"");
 else   title.setText(StringUtils.unescapeHTML(post.getTitle()));
  WebView webView=(WebView)getActivity().findViewById(R.id.viewPostWebView);
  TextView tv=(TextView)getActivity().findViewById(R.id.viewPostTextView);
  ImageButton shareURLButton=(ImageButton)getActivity().findViewById(R.id.sharePostLink);
  ImageButton viewPostButton=(ImageButton)getActivity().findViewById(R.id.viewPost);
  ImageButton addCommentButton=(ImageButton)getActivity().findViewById(R.id.addComment);
  tv.setVisibility(View.GONE);
  webView.setVisibility(View.VISIBLE);
  String html=StringUtils.addPTags(post.getDescription() + ""String_Node_Str"" + post.getMt_text_more());
  String htmlText=""String_Node_Str"" + html + ""String_Node_Str"";
  webView.loadDataWithBaseURL(""String_Node_Str"",htmlText,""String_Node_Str"",""String_Node_Str"",null);
  if (post.isLocalDraft()) {
    shareURLButton.setVisibility(View.GONE);
    viewPostButton.setVisibility(View.GONE);
    addCommentButton.setVisibility(View.GONE);
  }
 else {
    shareURLButton.setVisibility(View.VISIBLE);
    viewPostButton.setVisibility(View.VISIBLE);
    if (post.isMt_allow_comments()) {
      addCommentButton.setVisibility(View.VISIBLE);
    }
 else {
      addCommentButton.setVisibility(View.GONE);
    }
  }
}",0.9885204081632653
15123,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.blog_preferences);
  Integer id=getIntent().getIntExtra(""String_Node_Str"",-1);
  blog=WordPress.getBlog(id);
  if (blog == null) {
    Toast.makeText(this,getString(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
    finish();
    return;
  }
  ActionBar actionBar=getSupportActionBar();
  actionBar.setTitle(EscapeUtils.unescapeHtml(blog.getBlogName()));
  actionBar.setDisplayHomeAsUpEnabled(true);
  mUsernameET=(EditText)findViewById(R.id.username);
  mPasswordET=(EditText)findViewById(R.id.password);
  mHttpUsernameET=(EditText)findViewById(R.id.httpuser);
  mHttpPasswordET=(EditText)findViewById(R.id.httppassword);
  mScaledImageWidthET=(EditText)findViewById(R.id.scaledImageWidth);
  mFullSizeCB=(CheckBox)findViewById(R.id.fullSizeImage);
  mScaledCB=(CheckBox)findViewById(R.id.scaledImage);
  mLocationCB=(CheckBox)findViewById(R.id.location);
  mImageWidthSpinner=(Spinner)findViewById(R.id.maxImageWidth);
  if (blog.isDotcomFlag()) {
    RelativeLayout credentialsRL=(RelativeLayout)findViewById(R.id.sectionContent);
    credentialsRL.setVisibility(View.GONE);
  }
  loadSettingsForBlog();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.blog_preferences);
  Integer id=getIntent().getIntExtra(""String_Node_Str"",-1);
  blog=WordPress.getBlog(id);
  if (blog == null) {
    Toast.makeText(this,getString(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
    finish();
    return;
  }
  ActionBar actionBar=getSupportActionBar();
  actionBar.setTitle(StringUtils.unescapeHTML(blog.getBlogName()));
  actionBar.setDisplayHomeAsUpEnabled(true);
  mUsernameET=(EditText)findViewById(R.id.username);
  mPasswordET=(EditText)findViewById(R.id.password);
  mHttpUsernameET=(EditText)findViewById(R.id.httpuser);
  mHttpPasswordET=(EditText)findViewById(R.id.httppassword);
  mScaledImageWidthET=(EditText)findViewById(R.id.scaledImageWidth);
  mFullSizeCB=(CheckBox)findViewById(R.id.fullSizeImage);
  mScaledCB=(CheckBox)findViewById(R.id.scaledImage);
  mLocationCB=(CheckBox)findViewById(R.id.location);
  mImageWidthSpinner=(Spinner)findViewById(R.id.maxImageWidth);
  if (blog.isDotcomFlag()) {
    RelativeLayout credentialsRL=(RelativeLayout)findViewById(R.id.sectionContent);
    credentialsRL.setVisibility(View.GONE);
  }
  loadSettingsForBlog();
}",0.9927302100161552
15124,"private void loadNotifications(){
  PreferenceScreen rootScreen=(PreferenceScreen)findPreference(""String_Node_Str"");
  rootScreen.addPreference(mNotificationsGroup);
  PreferenceCategory notificationTypesCategory=(PreferenceCategory)findPreference(""String_Node_Str"");
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
  String settingsJson=settings.getString(""String_Node_Str"",null);
  if (settingsJson == null) {
    rootScreen.removePreference(mNotificationsGroup);
    return;
  }
 else {
    try {
      Gson gson=new Gson();
      mNotificationSettings=gson.fromJson(settingsJson,HashMap.class);
      StringMap<?> mutedBlogsMap=(StringMap<?>)mNotificationSettings.get(""String_Node_Str"");
      mMutedBlogsList=(ArrayList<StringMap<Double>>)mutedBlogsMap.get(""String_Node_Str"");
      Collections.sort(mMutedBlogsList,this.BlogNameComparatorForMutedBlogsList);
      mTypeList=mNotificationSettings.keySet().toArray();
      for (int i=0; i < mTypeList.length; i++) {
        if (!mTypeList[i].equals(""String_Node_Str"") && !mTypeList[i].equals(""String_Node_Str"")) {
          StringMap<?> typeMap=(StringMap<?>)mNotificationSettings.get(mTypeList[i].toString());
          CheckBoxPreference typePreference=new CheckBoxPreference(this);
          typePreference.setKey(mTypeList[i].toString());
          typePreference.setChecked(typeMap.get(""String_Node_Str"").toString().equals(""String_Node_Str""));
          typePreference.setTitle(typeMap.get(""String_Node_Str"").toString());
          typePreference.setOnPreferenceChangeListener(mTypeChangeListener);
          notificationTypesCategory.addPreference(typePreference);
        }
      }
      PreferenceCategory selectBlogsCategory=(PreferenceCategory)findPreference(""String_Node_Str"");
      for (int i=0; i < mMutedBlogsList.size(); i++) {
        StringMap<?> blogMap=(StringMap<?>)mMutedBlogsList.get(i);
        String blogName=(String)blogMap.get(""String_Node_Str"");
        if (blogName == null || blogName.trim().equals(""String_Node_Str""))         blogName=(String)blogMap.get(""String_Node_Str"");
        CheckBoxPreference blogPreference=new CheckBoxPreference(this);
        blogPreference.setChecked(!blogMap.get(""String_Node_Str"").toString().equals(""String_Node_Str""));
        blogPreference.setTitle(EscapeUtils.unescapeHtml(blogName));
        blogPreference.setOnPreferenceChangeListener(mMuteBlogChangeListener);
        selectBlogsCategory.addPreference(blogPreference);
      }
    }
 catch (    JsonSyntaxException e) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      return;
    }
catch (    Exception e) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      return;
    }
    CheckBoxPreference notificationsEnabledCheckBox=(CheckBoxPreference)findPreference(""String_Node_Str"");
    notificationsEnabledCheckBox.setOnPreferenceChangeListener(mNotificationsEnabledChangeListener);
  }
}","private void loadNotifications(){
  PreferenceScreen rootScreen=(PreferenceScreen)findPreference(""String_Node_Str"");
  rootScreen.addPreference(mNotificationsGroup);
  PreferenceCategory notificationTypesCategory=(PreferenceCategory)findPreference(""String_Node_Str"");
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
  String settingsJson=settings.getString(""String_Node_Str"",null);
  if (settingsJson == null) {
    rootScreen.removePreference(mNotificationsGroup);
    return;
  }
 else {
    try {
      Gson gson=new Gson();
      mNotificationSettings=gson.fromJson(settingsJson,HashMap.class);
      StringMap<?> mutedBlogsMap=(StringMap<?>)mNotificationSettings.get(""String_Node_Str"");
      mMutedBlogsList=(ArrayList<StringMap<Double>>)mutedBlogsMap.get(""String_Node_Str"");
      Collections.sort(mMutedBlogsList,this.BlogNameComparatorForMutedBlogsList);
      mTypeList=mNotificationSettings.keySet().toArray();
      for (int i=0; i < mTypeList.length; i++) {
        if (!mTypeList[i].equals(""String_Node_Str"") && !mTypeList[i].equals(""String_Node_Str"")) {
          StringMap<?> typeMap=(StringMap<?>)mNotificationSettings.get(mTypeList[i].toString());
          CheckBoxPreference typePreference=new CheckBoxPreference(this);
          typePreference.setKey(mTypeList[i].toString());
          typePreference.setChecked(typeMap.get(""String_Node_Str"").toString().equals(""String_Node_Str""));
          typePreference.setTitle(typeMap.get(""String_Node_Str"").toString());
          typePreference.setOnPreferenceChangeListener(mTypeChangeListener);
          notificationTypesCategory.addPreference(typePreference);
        }
      }
      PreferenceCategory selectBlogsCategory=(PreferenceCategory)findPreference(""String_Node_Str"");
      for (int i=0; i < mMutedBlogsList.size(); i++) {
        StringMap<?> blogMap=(StringMap<?>)mMutedBlogsList.get(i);
        String blogName=(String)blogMap.get(""String_Node_Str"");
        if (blogName == null || blogName.trim().equals(""String_Node_Str""))         blogName=(String)blogMap.get(""String_Node_Str"");
        CheckBoxPreference blogPreference=new CheckBoxPreference(this);
        blogPreference.setChecked(!blogMap.get(""String_Node_Str"").toString().equals(""String_Node_Str""));
        blogPreference.setTitle(StringUtils.unescapeHTML(blogName));
        blogPreference.setOnPreferenceChangeListener(mMuteBlogChangeListener);
        selectBlogsCategory.addPreference(blogPreference);
      }
    }
 catch (    JsonSyntaxException e) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      return;
    }
catch (    Exception e) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      return;
    }
    CheckBoxPreference notificationsEnabledCheckBox=(CheckBoxPreference)findPreference(""String_Node_Str"");
    notificationsEnabledCheckBox.setOnPreferenceChangeListener(mNotificationsEnabledChangeListener);
  }
}",0.9969072164948454
15125,"/** 
 * Update the ""blogs"" preference category to contain a preference for each blog to configure blog-specific settings. This also adds an ""add blog"" preference for setting up new blogs.
 */
protected void updateBlogsPreferenceCategory(){
  PreferenceCategory blogsCategory=(PreferenceCategory)findPreference(""String_Node_Str"");
  blogsCategory.removeAll();
  List<Map<String,Object>> accounts=WordPress.wpDB.getAccounts();
  int order=0;
  for (  Map<String,Object> account : accounts) {
    String blogName=EscapeUtils.unescapeHtml(account.get(""String_Node_Str"").toString());
    int accountId=(Integer)account.get(""String_Node_Str"");
    Preference blogSettingsPreference=new Preference(this);
    blogSettingsPreference.setTitle(blogName);
    try {
      URL blogUrl=new URL(account.get(""String_Node_Str"").toString());
      if (!blogName.equals(blogUrl.getHost())) {
        blogSettingsPreference.setSummary(blogUrl.getHost());
      }
    }
 catch (    MalformedURLException e) {
    }
    Intent intent=new Intent(this,BlogPreferencesActivity.class);
    intent.putExtra(""String_Node_Str"",accountId);
    blogSettingsPreference.setIntent(intent);
    blogSettingsPreference.setOrder(order++);
    blogsCategory.addPreference(blogSettingsPreference);
  }
  Preference addBlogPreference=new Preference(this);
  addBlogPreference.setTitle(R.string.add_account);
  Intent intent=new Intent(this,NewAccountActivity.class);
  addBlogPreference.setIntent(intent);
  addBlogPreference.setOrder(order++);
  blogsCategory.addPreference(addBlogPreference);
}","/** 
 * Update the ""blogs"" preference category to contain a preference for each blog to configure blog-specific settings. This also adds an ""add blog"" preference for setting up new blogs.
 */
protected void updateBlogsPreferenceCategory(){
  PreferenceCategory blogsCategory=(PreferenceCategory)findPreference(""String_Node_Str"");
  blogsCategory.removeAll();
  List<Map<String,Object>> accounts=WordPress.wpDB.getAccounts();
  int order=0;
  for (  Map<String,Object> account : accounts) {
    String blogName=StringUtils.unescapeHTML(account.get(""String_Node_Str"").toString());
    int accountId=(Integer)account.get(""String_Node_Str"");
    Preference blogSettingsPreference=new Preference(this);
    blogSettingsPreference.setTitle(blogName);
    try {
      URL blogUrl=new URL(account.get(""String_Node_Str"").toString());
      if (!blogName.equals(blogUrl.getHost())) {
        blogSettingsPreference.setSummary(blogUrl.getHost());
      }
    }
 catch (    MalformedURLException e) {
    }
    Intent intent=new Intent(this,BlogPreferencesActivity.class);
    intent.putExtra(""String_Node_Str"",accountId);
    blogSettingsPreference.setIntent(intent);
    blogSettingsPreference.setOrder(order++);
    blogsCategory.addPreference(blogSettingsPreference);
  }
  Preference addBlogPreference=new Preference(this);
  addBlogPreference.setTitle(R.string.add_account);
  Intent intent=new Intent(this,NewAccountActivity.class);
  addBlogPreference.setIntent(intent);
  addBlogPreference.setOrder(order++);
  blogsCategory.addPreference(addBlogPreference);
}",0.9884393063583816
15126,"public void onThemeActivated(boolean activated){
  mActivateThemeButton.setEnabled(true);
  mActivateThemeButton.setText(R.string.theme_activate_button);
  showViewSite();
}","public void onThemeActivated(boolean activated){
  mActivateThemeButton.setEnabled(true);
  mActivateThemeButton.setText(R.string.theme_activate_button);
  if (activated)   showViewSite();
}",0.953168044077135
15127,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (!mMediaCapturePath.equals(""String_Node_Str""))   outState.putString(""String_Node_Str"",mMediaCapturePath);
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (mMediaCapturePath != null && !mMediaCapturePath.equals(""String_Node_Str""))   outState.putString(""String_Node_Str"",mMediaCapturePath);
}",0.9356984478935698
15128,"@Override public void onBlogChanged(){
  super.onBlogChanged();
  fetchThemes();
}","@Override public void onBlogChanged(){
  super.onBlogChanged();
  if (areThemesAccessible()) {
    fetchThemes();
  }
}",0.8159203980099502
15129,"private void refreshViews(Cursor cursor){
  if (!cursor.moveToFirst())   return;
  String state=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mIsLocal=MediaUtils.isLocalFile(state);
  if (mIsLocal)   getSherlockActivity().invalidateOptionsMenu();
  mTitleView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  String caption=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (caption == null || caption.length() == 0) {
    mCaptionView.setVisibility(View.GONE);
  }
 else {
    mCaptionView.setText(caption);
    mCaptionView.setVisibility(View.VISIBLE);
  }
  String desc=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (desc == null || desc.length() == 0) {
    mDescriptionView.setVisibility(View.GONE);
  }
 else {
    mDescriptionView.setText(desc);
    mDescriptionView.setVisibility(View.VISIBLE);
  }
  String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
  if (mIsLocal)   mDateView.setText(""String_Node_Str"" + date);
 else   mDateView.setText(""String_Node_Str"" + date);
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mFileNameView.setText(""String_Node_Str"" + fileName);
  String fileURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (fileURL != null) {
    String fileType=fileURL.replaceAll(""String_Node_Str"",""String_Node_Str"").toUpperCase();
    mFileTypeView.setText(""String_Node_Str"" + fileType);
    mFileTypeView.setVisibility(View.VISIBLE);
  }
 else {
    mFileTypeView.setVisibility(View.GONE);
  }
  String imageUri=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (imageUri == null)   imageUri=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  inflateImageView();
  if (MediaUtils.isValidImage(imageUri)) {
    int width=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    int height=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    float screenWidth;
    View parentView=(View)mImageView.getParent();
    if (this.isInLayout()) {
      screenWidth=parentView.getMeasuredWidth();
    }
 else {
      screenWidth=getActivity().getResources().getDisplayMetrics().widthPixels;
    }
    float screenHeight=getActivity().getResources().getDisplayMetrics().heightPixels;
    if (width > 0 && height > 0) {
      String dimensions=width + ""String_Node_Str"" + height;
      mDimensionsView.setText(""String_Node_Str"" + dimensions);
      mDimensionsView.setVisibility(View.VISIBLE);
    }
 else {
      mDimensionsView.setVisibility(View.GONE);
    }
    if (width > screenWidth) {
      height=(int)(height / (width / screenWidth));
    }
 else     if (height > screenHeight) {
      width=(int)(width / (height / screenHeight));
    }
    if (mIsLocal) {
      final String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
      loadLocalImage(mImageView,filePath,width,height);
    }
 else {
      ((NetworkImageView)mImageView).setImageUrl(imageUri + ""String_Node_Str"" + screenWidth,WordPress.imageLoader);
    }
    mImageView.setVisibility(View.VISIBLE);
    mImageView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,height));
  }
 else {
    mImageView.setVisibility(View.GONE);
    mDimensionsView.setVisibility(View.GONE);
  }
}","private void refreshViews(Cursor cursor){
  if (!cursor.moveToFirst())   return;
  String state=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mIsLocal=MediaUtils.isLocalFile(state);
  if (mIsLocal)   getSherlockActivity().invalidateOptionsMenu();
  mTitleView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  String caption=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (caption == null || caption.length() == 0) {
    mCaptionView.setVisibility(View.GONE);
  }
 else {
    mCaptionView.setText(caption);
    mCaptionView.setVisibility(View.VISIBLE);
  }
  String desc=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (desc == null || desc.length() == 0) {
    mDescriptionView.setVisibility(View.GONE);
  }
 else {
    mDescriptionView.setText(desc);
    mDescriptionView.setVisibility(View.VISIBLE);
  }
  String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
  if (mIsLocal)   mDateView.setText(""String_Node_Str"" + date);
 else   mDateView.setText(""String_Node_Str"" + date);
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mFileNameView.setText(""String_Node_Str"" + fileName);
  String fileURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (fileURL != null) {
    String fileType=fileURL.replaceAll(""String_Node_Str"",""String_Node_Str"").toUpperCase();
    mFileTypeView.setText(""String_Node_Str"" + fileType);
    mFileTypeView.setVisibility(View.VISIBLE);
  }
 else {
    mFileTypeView.setVisibility(View.GONE);
  }
  String imageUri=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (imageUri == null)   imageUri=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  inflateImageView();
  if (MediaUtils.isValidImage(imageUri)) {
    int width=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    int height=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    float screenWidth;
    View parentView=(View)mImageView.getParent();
    if (this.isInLayout()) {
      screenWidth=parentView.getMeasuredWidth();
    }
 else {
      screenWidth=getActivity().getResources().getDisplayMetrics().widthPixels;
    }
    float screenHeight=getActivity().getResources().getDisplayMetrics().heightPixels;
    if (width > 0 && height > 0) {
      String dimensions=width + ""String_Node_Str"" + height;
      mDimensionsView.setText(""String_Node_Str"" + dimensions);
      mDimensionsView.setVisibility(View.VISIBLE);
    }
 else {
      mDimensionsView.setVisibility(View.GONE);
    }
    if (width > screenWidth) {
      height=(int)(height / (width / screenWidth));
      width=(int)screenWidth;
    }
 else     if (height > screenHeight) {
      width=(int)(width / (height / screenHeight));
      height=(int)screenHeight;
    }
    if (mIsLocal) {
      final String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
      loadLocalImage(mImageView,filePath,width,height);
    }
 else {
      ((NetworkImageView)mImageView).setImageUrl(imageUri + ""String_Node_Str"" + screenWidth,WordPress.imageLoader);
    }
    mImageView.setVisibility(View.VISIBLE);
    mImageView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,height));
  }
 else {
    mImageView.setVisibility(View.GONE);
    mDimensionsView.setVisibility(View.GONE);
  }
}",0.9907018596280744
15130,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.actionbar_add_media_cell,container,false);
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (savedInstanceState != null) {
    if (savedInstanceState.getString(""String_Node_Str"") != null)     mMediaCapturePath=savedInstanceState.getString(""String_Node_Str"");
  }
  return inflater.inflate(R.layout.actionbar_add_media_cell,container,false);
}",0.6788321167883211
15131,"@Override protected void onPause(){
  super.onPause();
  mIsRunning=false;
}","@Override protected void onPause(){
  removeViewPagerFragments();
  super.onPause();
  mIsRunning=false;
}",0.8351648351648352
15132,"public void refresh(){
  Cursor cursor=fetchThemes(getThemeSortType());
  mAdapter.swapCursor(cursor);
}","public void refresh(){
  Cursor cursor=fetchThemes(getThemeSortType());
  if (mAdapter == null) {
    mAdapter=new ThemeTabAdapter(getActivity(),cursor,false);
  }
  mAdapter.swapCursor(cursor);
}",0.6933333333333334
15133,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_category);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    id=extras.getInt(""String_Node_Str"");
  }
  loadCategories();
  final Button cancelButton=(Button)findViewById(R.id.cancel);
  final Button okButton=(Button)findViewById(R.id.ok);
  okButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      EditText categoryNameET=(EditText)findViewById(R.id.category_name);
      String category_name=categoryNameET.getText().toString();
      EditText categorySlugET=(EditText)findViewById(R.id.category_slug);
      String category_slug=categorySlugET.getText().toString();
      EditText categoryDescET=(EditText)findViewById(R.id.category_desc);
      String category_desc=categoryDescET.getText().toString();
      Spinner sCategories=(Spinner)findViewById(R.id.parent_category);
      String parent_category=""String_Node_Str"";
      if (sCategories.getSelectedItem() != null)       parent_category=sCategories.getSelectedItem().toString();
      int parent_id=0;
      if (sCategories.getSelectedItemPosition() != 0) {
        parent_id=WordPress.wpDB.getCategoryId(id,parent_category);
      }
      if (category_name.replaceAll(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AddCategoryActivity.this);
        dialogBuilder.setTitle(getResources().getText(R.string.required_field));
        dialogBuilder.setMessage(getResources().getText(R.string.cat_name_required));
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",category_name);
        bundle.putString(""String_Node_Str"",category_slug);
        bundle.putString(""String_Node_Str"",category_desc);
        bundle.putInt(""String_Node_Str"",parent_id);
        bundle.putString(""String_Node_Str"",""String_Node_Str"");
        Intent mIntent=new Intent();
        mIntent.putExtras(bundle);
        setResult(RESULT_OK,mIntent);
        finish();
      }
    }
  }
);
  cancelButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",""String_Node_Str"");
      Intent mIntent=new Intent();
      mIntent.putExtras(bundle);
      setResult(RESULT_OK,mIntent);
      finish();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_category);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    id=extras.getInt(""String_Node_Str"");
  }
  loadCategories();
  final Button cancelButton=(Button)findViewById(R.id.cancel);
  final Button okButton=(Button)findViewById(R.id.ok);
  okButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      EditText categoryNameET=(EditText)findViewById(R.id.category_name);
      String category_name=categoryNameET.getText().toString();
      EditText categorySlugET=(EditText)findViewById(R.id.category_slug);
      String category_slug=categorySlugET.getText().toString();
      EditText categoryDescET=(EditText)findViewById(R.id.category_desc);
      String category_desc=categoryDescET.getText().toString();
      Spinner sCategories=(Spinner)findViewById(R.id.parent_category);
      String parent_category=""String_Node_Str"";
      if (sCategories.getSelectedItem() != null)       parent_category=sCategories.getSelectedItem().toString().trim();
      int parent_id=0;
      if (sCategories.getSelectedItemPosition() != 0) {
        parent_id=WordPress.wpDB.getCategoryId(id,parent_category);
      }
      if (category_name.replaceAll(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(AddCategoryActivity.this);
        dialogBuilder.setTitle(getResources().getText(R.string.required_field));
        dialogBuilder.setMessage(getResources().getText(R.string.cat_name_required));
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        dialogBuilder.create().show();
      }
 else {
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",category_name);
        bundle.putString(""String_Node_Str"",category_slug);
        bundle.putString(""String_Node_Str"",category_desc);
        bundle.putInt(""String_Node_Str"",parent_id);
        bundle.putString(""String_Node_Str"",""String_Node_Str"");
        Intent mIntent=new Intent();
        mIntent.putExtras(bundle);
        setResult(RESULT_OK,mIntent);
        finish();
      }
    }
  }
);
  cancelButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",""String_Node_Str"");
      Intent mIntent=new Intent();
      mIntent.putExtras(bundle);
      setResult(RESULT_OK,mIntent);
      finish();
    }
  }
);
}",0.9987362339772522
15134,"public boolean saveMediaFile(MediaFile mf){
  boolean returnValue=false;
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",mf.getPostID());
  values.put(""String_Node_Str"",mf.getFilePath());
  values.put(""String_Node_Str"",mf.getFileName());
  values.put(""String_Node_Str"",mf.getTitle());
  values.put(""String_Node_Str"",mf.getDescription());
  values.put(""String_Node_Str"",mf.getCaption());
  values.put(""String_Node_Str"",mf.getHorizontalAlignment());
  values.put(""String_Node_Str"",mf.getWidth());
  values.put(""String_Node_Str"",mf.getHeight());
  values.put(""String_Node_Str"",mf.getMIMEType());
  values.put(""String_Node_Str"",mf.isFeatured());
  values.put(""String_Node_Str"",mf.isVideo());
  values.put(""String_Node_Str"",mf.isFeaturedInPost());
  values.put(""String_Node_Str"",mf.getFileURL());
  values.put(""String_Node_Str"",mf.getThumbnailURL());
  values.put(""String_Node_Str"",mf.getMediaId());
  values.put(""String_Node_Str"",mf.getBlogId());
  values.put(""String_Node_Str"",mf.getDateCreatedGMT());
  values.put(""String_Node_Str"",mf.getUploadState());
synchronized (this) {
    int result=db.update(MEDIA_TABLE,values,""String_Node_Str"",new String[]{mf.getBlogId(),String.valueOf(mf.getMediaId())});
    if (result == 0)     returnValue=db.insert(MEDIA_TABLE,null,values) > 0;
  }
  return (returnValue);
}","public boolean saveMediaFile(MediaFile mf){
  boolean returnValue=false;
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",mf.getPostID());
  values.put(""String_Node_Str"",mf.getFilePath());
  values.put(""String_Node_Str"",mf.getFileName());
  values.put(""String_Node_Str"",mf.getTitle());
  values.put(""String_Node_Str"",mf.getDescription());
  values.put(""String_Node_Str"",mf.getCaption());
  values.put(""String_Node_Str"",mf.getHorizontalAlignment());
  values.put(""String_Node_Str"",mf.getWidth());
  values.put(""String_Node_Str"",mf.getHeight());
  values.put(""String_Node_Str"",mf.getMIMEType());
  values.put(""String_Node_Str"",mf.isFeatured());
  values.put(""String_Node_Str"",mf.isVideo());
  values.put(""String_Node_Str"",mf.isFeaturedInPost());
  values.put(""String_Node_Str"",mf.getFileURL());
  values.put(""String_Node_Str"",mf.getThumbnailURL());
  values.put(""String_Node_Str"",mf.getMediaId());
  values.put(""String_Node_Str"",mf.getBlogId());
  values.put(""String_Node_Str"",mf.getDateCreatedGMT());
  values.put(""String_Node_Str"",mf.getUploadState());
synchronized (this) {
    int result=0;
    if (mf.getMediaId() != null) {
      result=db.update(MEDIA_TABLE,values,""String_Node_Str"",new String[]{mf.getBlogId(),String.valueOf(mf.getMediaId())});
    }
    if (result == 0)     returnValue=db.insert(MEDIA_TABLE,null,values) > 0;
  }
  return (returnValue);
}",0.9790518191841234
15135,"@Override public void onResume(){
  super.onResume();
  Cursor cursor=fetchThemes(getThemeSortType());
  mAdapter=new ThemeTabAdapter(getActivity(),cursor,false);
  mGridView.setAdapter(mAdapter);
  mGridView.setOnItemClickListener(this);
  mGridView.setSelection(mSavedScrollPosition);
}","@Override public void onResume(){
  super.onResume();
  if (getActivity() == null || WordPress.getCurrentBlog() == null)   return;
  Cursor cursor=fetchThemes(getThemeSortType());
  mAdapter=new ThemeTabAdapter(getActivity(),cursor,false);
  mGridView.setAdapter(mAdapter);
  mGridView.setOnItemClickListener(this);
  mGridView.setSelection(mSavedScrollPosition);
}",0.8820826952526799
15136,"@Override public void onResume(){
  super.onResume();
  refreshMediaFromDB();
  if (mLastRefreshTime == 0l)   refreshMediaFromServer(0);
}","@Override public void onResume(){
  super.onResume();
  setupSpinnerAdapter();
  refreshMediaFromDB();
  if (mLastRefreshTime == 0l)   refreshMediaFromServer(0);
}",0.9169435215946844
15137,"public void refreshMediaFromDB(){
  setFilter(mFilter);
  if (mCursor != null) {
    mGridAdapter=new MediaGridAdapter(getActivity(),mCursor,0,mCheckedItems);
    mGridAdapter.setCallback(this);
    mGridView.setAdapter(mGridAdapter);
    mGridView.setSelection(mSavedFirstVisiblePosition);
  }
}","public void refreshMediaFromDB(){
  setFilter(mFilter);
  if (mCursor != null) {
    if (mCursor.getCount() == 0) {
      refreshMediaFromServer(0,true);
    }
    mGridAdapter=new MediaGridAdapter(getActivity(),mCursor,0,mCheckedItems);
    mGridAdapter.setCallback(this);
    mGridView.setAdapter(mGridAdapter);
    mGridView.setSelection(mSavedFirstVisiblePosition);
  }
}",0.8822652757078987
15138,"public void setDateFilter(){
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return;
  String blogId=String.valueOf(blog.getBlogId());
  GregorianCalendar startDate=new GregorianCalendar(startYear,startMonth,startDay);
  GregorianCalendar endDate=new GregorianCalendar(endYear,endMonth,endDay);
  mCursor=WordPress.wpDB.getMediaFilesForBlog(blogId,startDate.getTimeInMillis(),endDate.getTimeInMillis());
  if (mCursor != null && mCursor.getCount() > 0 && mGridAdapter != null) {
    mGridAdapter.swapCursor(mCursor);
    mResultView.setVisibility(View.VISIBLE);
    SimpleDateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setCalendar(startDate);
    String formattedStart=fmt.format(startDate.getTime());
    String formattedEnd=fmt.format(endDate.getTime());
    mResultView.setText(""String_Node_Str"" + formattedStart + ""String_Node_Str""+ formattedEnd);
  }
 else {
    mResultView.setVisibility(View.VISIBLE);
    mResultView.setText(getResources().getString(R.string.empty_fields));
  }
}","public void setDateFilter(){
  Blog blog=WordPress.getCurrentBlog();
  if (blog == null)   return;
  String blogId=String.valueOf(blog.getBlogId());
  GregorianCalendar startDate=new GregorianCalendar(startYear,startMonth,startDay);
  GregorianCalendar endDate=new GregorianCalendar(endYear,endMonth,endDay);
  mCursor=WordPress.wpDB.getMediaFilesForBlog(blogId,startDate.getTimeInMillis(),endDate.getTimeInMillis());
  mGridAdapter.swapCursor(mCursor);
  if (mCursor != null && mCursor.getCount() > 0 && mGridAdapter != null) {
    mResultView.setVisibility(View.VISIBLE);
    SimpleDateFormat fmt=new SimpleDateFormat(""String_Node_Str"");
    fmt.setCalendar(startDate);
    String formattedStart=fmt.format(startDate.getTime());
    String formattedEnd=fmt.format(endDate.getTime());
    mResultView.setText(""String_Node_Str"" + formattedStart + ""String_Node_Str""+ formattedEnd);
  }
 else {
    mResultView.setVisibility(View.VISIBLE);
    mResultView.setText(getResources().getString(R.string.empty_fields));
  }
}",0.9636542239685658
15139,"private void refreshViews(Cursor cursor){
  if (!cursor.moveToFirst())   return;
  mTitleView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mCaptionView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mDescriptionView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  String state=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mIsLocal=MediaUtils.isLocalFile(state);
  if (mIsLocal)   getActivity().invalidateOptionsMenu();
  inflateImageView();
  String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
  if (mIsLocal)   mDateView.setText(""String_Node_Str"" + date);
 else   mDateView.setText(""String_Node_Str"" + date);
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mFileNameView.setText(""String_Node_Str"" + fileName);
  String fileURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (fileURL != null) {
    String fileType=fileURL.replaceAll(""String_Node_Str"",""String_Node_Str"").toUpperCase();
    mFileTypeView.setText(""String_Node_Str"" + fileType);
    mFileTypeView.setVisibility(View.VISIBLE);
  }
 else {
    mFileTypeView.setVisibility(View.GONE);
  }
  String imageUri=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (imageUri == null)   imageUri=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (MediaUtils.isValidImage(imageUri)) {
    int width=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    int height=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    float screenWidth;
    View parentView=(View)mImageView.getParent();
    if (this.isInLayout()) {
      screenWidth=parentView.getMeasuredWidth();
    }
 else {
      screenWidth=getActivity().getResources().getDisplayMetrics().widthPixels;
    }
    float screenHeight=getActivity().getResources().getDisplayMetrics().heightPixels;
    if (width > 0 && height > 0) {
      String dimensions=width + ""String_Node_Str"" + height;
      mDimensionsView.setText(""String_Node_Str"" + dimensions);
      mDimensionsView.setVisibility(View.VISIBLE);
    }
 else {
      mDimensionsView.setVisibility(View.GONE);
    }
    if (width > screenWidth) {
      height=(int)(height / (width / screenWidth));
    }
 else     if (height > screenHeight) {
      width=(int)(width / (height / screenHeight));
    }
    if (mIsLocal) {
      final String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
      loadLocalImage(mImageView,filePath,width,height);
    }
 else {
      ((NetworkImageView)mImageView).setImageUrl(imageUri + ""String_Node_Str"" + screenWidth,WordPress.imageLoader);
    }
    mImageView.setVisibility(View.VISIBLE);
    mImageView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,height));
  }
 else {
    mImageView.setVisibility(View.GONE);
    mDimensionsView.setVisibility(View.GONE);
  }
}","private void refreshViews(Cursor cursor){
  if (!cursor.moveToFirst())   return;
  mTitleView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mCaptionView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mDescriptionView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  String state=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mIsLocal=MediaUtils.isLocalFile(state);
  if (mIsLocal)   getSherlockActivity().invalidateOptionsMenu();
  inflateImageView();
  String date=MediaUtils.getDate(cursor.getLong(cursor.getColumnIndex(""String_Node_Str"")));
  if (mIsLocal)   mDateView.setText(""String_Node_Str"" + date);
 else   mDateView.setText(""String_Node_Str"" + date);
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mFileNameView.setText(""String_Node_Str"" + fileName);
  String fileURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (fileURL != null) {
    String fileType=fileURL.replaceAll(""String_Node_Str"",""String_Node_Str"").toUpperCase();
    mFileTypeView.setText(""String_Node_Str"" + fileType);
    mFileTypeView.setVisibility(View.VISIBLE);
  }
 else {
    mFileTypeView.setVisibility(View.GONE);
  }
  String imageUri=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (imageUri == null)   imageUri=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (MediaUtils.isValidImage(imageUri)) {
    int width=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    int height=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    float screenWidth;
    View parentView=(View)mImageView.getParent();
    if (this.isInLayout()) {
      screenWidth=parentView.getMeasuredWidth();
    }
 else {
      screenWidth=getActivity().getResources().getDisplayMetrics().widthPixels;
    }
    float screenHeight=getActivity().getResources().getDisplayMetrics().heightPixels;
    if (width > 0 && height > 0) {
      String dimensions=width + ""String_Node_Str"" + height;
      mDimensionsView.setText(""String_Node_Str"" + dimensions);
      mDimensionsView.setVisibility(View.VISIBLE);
    }
 else {
      mDimensionsView.setVisibility(View.GONE);
    }
    if (width > screenWidth) {
      height=(int)(height / (width / screenWidth));
    }
 else     if (height > screenHeight) {
      width=(int)(width / (height / screenHeight));
    }
    if (mIsLocal) {
      final String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
      loadLocalImage(mImageView,filePath,width,height);
    }
 else {
      ((NetworkImageView)mImageView).setImageUrl(imageUri + ""String_Node_Str"" + screenWidth,WordPress.imageLoader);
    }
    mImageView.setVisibility(View.VISIBLE);
    mImageView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,height));
  }
 else {
    mImageView.setVisibility(View.GONE);
    mDimensionsView.setVisibility(View.GONE);
  }
}",0.9986380660537963
15140,"@Override public void onCommentSelected(Comment comment){
  FragmentManager fm=getSupportFragmentManager();
  CommentFragment f=(CommentFragment)fm.findFragmentById(R.id.commentDetail);
  if (comment != null) {
    if (f == null || !f.isInLayout()) {
      WordPress.currentComment=comment;
      FragmentTransaction ft=fm.beginTransaction();
      ft.hide(commentList);
      f=new CommentFragment();
      ft.add(R.id.commentDetailFragmentContainer,f);
      ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
      ft.addToBackStack(null);
      ft.commit();
      mMenuDrawer.setDrawerIndicatorEnabled(false);
    }
 else {
      f.loadComment(comment);
    }
  }
}","@Override public void onCommentSelected(Comment comment){
  FragmentManager fm=getSupportFragmentManager();
  fm.executePendingTransactions();
  CommentFragment f=(CommentFragment)fm.findFragmentById(R.id.commentDetail);
  if (comment != null && fm.getBackStackEntryCount() == 0) {
    if (f == null || !f.isInLayout()) {
      WordPress.currentComment=comment;
      FragmentTransaction ft=fm.beginTransaction();
      ft.hide(commentList);
      f=new CommentFragment();
      ft.add(R.id.commentDetailFragmentContainer,f);
      ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
      ft.addToBackStack(null);
      ft.commit();
      mMenuDrawer.setDrawerIndicatorEnabled(false);
    }
 else {
      f.loadComment(comment);
    }
  }
}",0.9503149055283416
15141,"@Override public void onMediaItemSelected(String mediaId){
  if (mSearchView != null)   mSearchView.clearFocus();
  if (mSearchMenuItem != null)   mSearchMenuItem.collapseActionView();
  FragmentManager fm=getSupportFragmentManager();
  if (mMediaEditFragment == null || !mMediaEditFragment.isInLayout()) {
    FragmentTransaction ft=fm.beginTransaction();
    ft.hide(mMediaGridFragment);
    setupBaseLayout();
    mMediaItemFragment=MediaItemFragment.newInstance(mediaId);
    ft.add(R.id.media_browser_container,mMediaItemFragment,MediaItemFragment.TAG);
    ft.addToBackStack(null);
    ft.commit();
    mMenuDrawer.setDrawerIndicatorEnabled(false);
  }
 else {
    mMediaEditFragment.loadMedia(mediaId);
  }
}","@Override public void onMediaItemSelected(String mediaId){
  if (mSearchView != null)   mSearchView.clearFocus();
  if (mSearchMenuItem != null)   mSearchMenuItem.collapseActionView();
  FragmentManager fm=getSupportFragmentManager();
  if (mMediaEditFragment == null || !mMediaEditFragment.isInLayout()) {
    if (fm.getBackStackEntryCount() == 0) {
      FragmentTransaction ft=fm.beginTransaction();
      ft.hide(mMediaGridFragment);
      setupBaseLayout();
      mMediaItemFragment=MediaItemFragment.newInstance(mediaId);
      ft.add(R.id.media_browser_container,mMediaItemFragment,MediaItemFragment.TAG);
      ft.addToBackStack(null);
      ft.commit();
      mMenuDrawer.setDrawerIndicatorEnabled(false);
    }
  }
 else {
    mMediaEditFragment.loadMedia(mediaId);
  }
}",0.9385026737967914
15142,"@Override protected int sizeOf(String key,Bitmap value){
  return super.sizeOf(key,value);
}","@Override protected int sizeOf(String key,Bitmap value){
  int bytes=(value.getRowBytes() * value.getHeight());
  return (bytes / 1024);
}",0.6173913043478261
15143,"@Override public void onCreate(){
  versionName=getVersionName();
  wpDB=new WordPressDB(this);
  requestQueue=Volley.newRequestQueue(this);
  int maxMemory=(int)(Runtime.getRuntime().maxMemory() / 1024);
  int cacheSize=maxMemory / 16;
  imageLoader=new ImageLoader(requestQueue,new BitmapLruCache(cacheSize));
  Log.d(""String_Node_Str"",""String_Node_Str"" + cacheSize + ""String_Node_Str""+ maxMemory);
  localImageCache=new BitmapLruCache(cacheSize / 2);
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
  if (settings.getInt(""String_Node_Str"",-1) >= 0)   shouldRestoreSelectedActivity=true;
  restClient=new WPRestClient(requestQueue,new OauthAuthenticator(),settings.getString(ACCESS_TOKEN_PREFERENCE,null));
  registerForCloudMessaging(this);
  loadNotifications(this);
  super.onCreate();
}","@Override public void onCreate(){
  versionName=getVersionName();
  wpDB=new WordPressDB(this);
  requestQueue=Volley.newRequestQueue(this);
  int maxMemory=(int)(Runtime.getRuntime().maxMemory() / 1024);
  int cacheSize=maxMemory / 32;
  imageLoader=new ImageLoader(requestQueue,new BitmapLruCache(cacheSize));
  localImageCache=new BitmapLruCache(cacheSize / 2);
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(this);
  if (settings.getInt(""String_Node_Str"",-1) >= 0)   shouldRestoreSelectedActivity=true;
  restClient=new WPRestClient(requestQueue,new OauthAuthenticator(),settings.getString(ACCESS_TOKEN_PREFERENCE,null));
  registerForCloudMessaging(this);
  loadNotifications(this);
  super.onCreate();
}",0.9404990403071016
15144,"@Override protected int sizeOf(String key,Bitmap value){
  if (android.os.Build.VERSION.SDK_INT < 12)   return value.getRowBytes() * value.getHeight();
 else   return value.getByteCount() / 1024;
}","@Override protected int sizeOf(String key,Bitmap value){
  return value.getRowBytes() * value.getHeight() / 1024;
}",0.7371794871794872
15145,"public void onEditCompleted(boolean result){
  if (mMediaEditFragment != null && mMediaEditFragment.isVisible() && result) {
    getSupportFragmentManager().popBackStack();
    if (mMediaItemFragment != null)     mMediaItemFragment.loadMedia(mMediaItemFragment.getMediaId());
    mMediaGridFragment.refreshMediaFromDB();
  }
}","public void onEditCompleted(String mediaId,boolean result){
  if (mMediaEditFragment != null && mMediaEditFragment.isVisible() && result) {
    getSupportFragmentManager().popBackStack();
    if (mMediaItemFragment != null)     mMediaItemFragment.loadMedia(mMediaItemFragment.getMediaId());
    mMediaEditFragment.loadMedia(mediaId);
    mMediaGridFragment.refreshMediaFromDB();
  }
}",0.9183098591549296
15146,"public void hideKeyboard(){
  InputMethodManager inputManager=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
  inputManager.hideSoftInputFromWindow(getActivity().getCurrentFocus().getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
}","public void hideKeyboard(){
  if (getActivity() != null) {
    InputMethodManager inputManager=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
    inputManager.hideSoftInputFromWindow(getActivity().getCurrentFocus().getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
  }
}",0.932642487046632
15147,"private void refreshViews(Cursor cursor){
  if (!cursor.moveToFirst())   return;
  mTitleView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mCaptionView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mDescriptionView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  String imageUrl=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (MediaUtils.isValidImage(imageUrl)) {
    int width=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    int height=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    float screenWidth=getActivity().getResources().getDisplayMetrics().widthPixels;
    View parentView=(View)mImageView.getParent();
    if (this.isInLayout()) {
      screenWidth=parentView.getMeasuredWidth();
    }
 else {
      screenWidth=getActivity().getResources().getDisplayMetrics().widthPixels;
    }
    float screenHeight=getActivity().getResources().getDisplayMetrics().heightPixels;
    mImageView.setImageUrl(imageUrl + ""String_Node_Str"" + screenWidth,WordPress.imageLoader);
    mImageView.setVisibility(View.VISIBLE);
    if (width > screenWidth) {
      height=(int)(height / (width / screenWidth));
    }
 else     if (height > screenHeight) {
      width=(int)(width / (height / screenHeight));
    }
    mImageView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,height));
  }
 else {
    mImageView.setVisibility(View.GONE);
  }
}","private void refreshViews(Cursor cursor){
  if (!cursor.moveToFirst())   return;
  mMediaId=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mTitleView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mCaptionView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  mDescriptionView.setText(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
  String imageUrl=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  if (MediaUtils.isValidImage(imageUrl)) {
    int width=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    int height=cursor.getInt(cursor.getColumnIndex(""String_Node_Str""));
    float screenWidth=getActivity().getResources().getDisplayMetrics().widthPixels;
    View parentView=(View)mImageView.getParent();
    if (this.isInLayout()) {
      screenWidth=parentView.getMeasuredWidth();
    }
 else {
      screenWidth=getActivity().getResources().getDisplayMetrics().widthPixels;
    }
    float screenHeight=getActivity().getResources().getDisplayMetrics().heightPixels;
    mImageView.setImageUrl(imageUrl + ""String_Node_Str"" + screenWidth,WordPress.imageLoader);
    mImageView.setVisibility(View.VISIBLE);
    if (width > screenWidth) {
      height=(int)(height / (width / screenWidth));
    }
 else     if (height > screenHeight) {
      width=(int)(width / (height / screenHeight));
    }
    mImageView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,height));
  }
 else {
    mImageView.setVisibility(View.GONE);
  }
}",0.9765133972874628
15148,"@Override public void onFailure(){
  Toast.makeText(getActivity(),R.string.media_edit_failure,Toast.LENGTH_LONG).show();
  setMediaUpdating(false);
  mCallback.onEditCompleted(false);
}","@Override public void onFailure(){
  if (getActivity() != null)   Toast.makeText(getActivity(),R.string.media_edit_failure,Toast.LENGTH_LONG).show();
  setMediaUpdating(false);
  mCallback.onEditCompleted(mediaId,false);
}",0.9090909090909092
15149,public void onEditCompleted(boolean result);,"public void onEditCompleted(String mediaId,boolean result);",0.8543689320388349
15150,"public void editMedia(){
  hideKeyboard();
  final String mediaId=this.getMediaId();
  final String title=mTitleView.getText().toString();
  final String description=mDescriptionView.getText().toString();
  final Blog currentBlog=WordPress.getCurrentBlog();
  ApiHelper.EditMediaItemTask task=new ApiHelper.EditMediaItemTask(mediaId,title,description,new ApiHelper.EditMediaItemTask.Callback(){
    @Override public void onSuccess(){
      String blogId=String.valueOf(currentBlog.getBlogId());
      WordPress.wpDB.updateMediaFile(blogId,mediaId,title,description);
      Toast.makeText(getActivity(),R.string.media_edit_success,Toast.LENGTH_LONG).show();
      setMediaUpdating(false);
      mCallback.onEditCompleted(true);
    }
    @Override public void onFailure(){
      Toast.makeText(getActivity(),R.string.media_edit_failure,Toast.LENGTH_LONG).show();
      setMediaUpdating(false);
      mCallback.onEditCompleted(false);
    }
  }
);
  List<Object> apiArgs=new ArrayList<Object>();
  apiArgs.add(currentBlog);
  if (!isMediaUpdating()) {
    setMediaUpdating(true);
    task.execute(apiArgs);
  }
}","public void editMedia(){
  hideKeyboard();
  final String mediaId=this.getMediaId();
  final String title=mTitleView.getText().toString();
  final String description=mDescriptionView.getText().toString();
  final Blog currentBlog=WordPress.getCurrentBlog();
  ApiHelper.EditMediaItemTask task=new ApiHelper.EditMediaItemTask(mediaId,title,description,new ApiHelper.EditMediaItemTask.Callback(){
    @Override public void onSuccess(){
      String blogId=String.valueOf(currentBlog.getBlogId());
      WordPress.wpDB.updateMediaFile(blogId,mediaId,title,description);
      if (getActivity() != null)       Toast.makeText(getActivity(),R.string.media_edit_success,Toast.LENGTH_LONG).show();
      setMediaUpdating(false);
      mCallback.onEditCompleted(mediaId,true);
    }
    @Override public void onFailure(){
      if (getActivity() != null)       Toast.makeText(getActivity(),R.string.media_edit_failure,Toast.LENGTH_LONG).show();
      setMediaUpdating(false);
      mCallback.onEditCompleted(mediaId,false);
    }
  }
);
  List<Object> apiArgs=new ArrayList<Object>();
  apiArgs.add(currentBlog);
  if (!isMediaUpdating()) {
    setMediaUpdating(true);
    task.execute(apiArgs);
  }
}",0.9643788010425716
15151,"@Override public void onSuccess(){
  String blogId=String.valueOf(currentBlog.getBlogId());
  WordPress.wpDB.updateMediaFile(blogId,mediaId,title,description);
  Toast.makeText(getActivity(),R.string.media_edit_success,Toast.LENGTH_LONG).show();
  setMediaUpdating(false);
  mCallback.onEditCompleted(true);
}","@Override public void onSuccess(){
  String blogId=String.valueOf(currentBlog.getBlogId());
  WordPress.wpDB.updateMediaFile(blogId,mediaId,title,description);
  if (getActivity() != null)   Toast.makeText(getActivity(),R.string.media_edit_success,Toast.LENGTH_LONG).show();
  setMediaUpdating(false);
  mCallback.onEditCompleted(mediaId,true);
}",0.9435114503816794
15152,"@Override public void onEditCompleted(boolean result){
  if (mMediaEditFragment != null && mMediaEditFragment.isVisible() && result) {
    getSupportFragmentManager().popBackStack();
  }
}","@Override public void onEditCompleted(String mediaId,boolean result){
  if (mMediaEditFragment != null && mMediaEditFragment.isVisible() && result) {
    getSupportFragmentManager().popBackStack();
  }
}",0.9616368286445012
15153,"private void updateFilterText(){
  String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
  int countAll=WordPress.wpDB.getMediaCountAll(blogId);
  int countImages=WordPress.wpDB.getMediaCountImages(blogId);
  int countUnattached=WordPress.wpDB.getMediaCountUnattached(blogId);
  mFilters[0]=getResources().getString(R.string.all) + ""String_Node_Str"" + countAll+ ""String_Node_Str"";
  mFilters[1]=getResources().getString(R.string.images) + ""String_Node_Str"" + countImages+ ""String_Node_Str"";
  mFilters[2]=getResources().getString(R.string.unattached) + ""String_Node_Str"" + countUnattached+ ""String_Node_Str"";
}","private void updateFilterText(){
  if (WordPress.currentBlog == null)   return;
  String blogId=String.valueOf(WordPress.getCurrentBlog().getBlogId());
  int countAll=WordPress.wpDB.getMediaCountAll(blogId);
  int countImages=WordPress.wpDB.getMediaCountImages(blogId);
  int countUnattached=WordPress.wpDB.getMediaCountUnattached(blogId);
  mFilters[0]=getResources().getString(R.string.all) + ""String_Node_Str"" + countAll+ ""String_Node_Str"";
  mFilters[1]=getResources().getString(R.string.images) + ""String_Node_Str"" + countImages+ ""String_Node_Str"";
  mFilters[2]=getResources().getString(R.string.unattached) + ""String_Node_Str"" + countUnattached+ ""String_Node_Str"";
}",0.9638183217859893
15154,"@Override protected void onPostExecute(ArrayList<Theme> result){
  if (result == null) {
    Toast.makeText(ThemeBrowserActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    refreshFragments();
  }
}","@Override protected void onPostExecute(ArrayList<Theme> result){
  if (result == null) {
    Toast.makeText(ThemeBrowserActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
  refreshFragments();
}",0.9855769230769232
15155,"@Override public void onResponse(ImageContainer response,boolean isImmediate){
  if (response != null && response.getBitmap() != null)   imageView.setImageBitmap(response.getBitmap());
 else   imageView.setImageBitmap(null);
}","@Override public void onResponse(ImageContainer response,boolean isImmediate){
  ViewHolder holder=(ViewHolder)imageView.getTag();
  if (holder != null) {
    String url=holder.requestURL;
    if (response != null && response.getBitmap() != null && response.getRequestUrl().equals(url)) {
      imageView.setImageBitmap(response.getBitmap());
    }
  }
}",0.6413793103448275
15156,"@Override public void bindView(View view,Context context,Cursor cursor){
  String screenshotURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  final ImageView imageView=(ImageView)view.findViewById(R.id.theme_grid_item_image);
  imageView.setImageBitmap(null);
  WordPress.imageLoader.get(screenshotURL,new ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
    }
    @Override public void onResponse(    ImageContainer response,    boolean isImmediate){
      if (response != null && response.getBitmap() != null)       imageView.setImageBitmap(response.getBitmap());
 else       imageView.setImageBitmap(null);
    }
  }
,getGridWidth(context),getGridHeight(context));
  updateGridWidth(mContext,view);
}","@Override public void bindView(View view,Context context,Cursor cursor){
  final String screenshotURL=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  final ImageView imageView=(ImageView)view.findViewById(R.id.theme_grid_item_image);
  ViewHolder holder=(ViewHolder)imageView.getTag();
  if (holder == null) {
    holder=new ViewHolder();
    holder.requestURL=screenshotURL;
    imageView.setTag(holder);
  }
  if (!holder.requestURL.equals(screenshotURL)) {
    imageView.setImageBitmap(null);
    holder.requestURL=screenshotURL;
  }
  WordPress.imageLoader.get(holder.requestURL,new ImageListener(){
    @Override public void onErrorResponse(    VolleyError error){
    }
    @Override public void onResponse(    ImageContainer response,    boolean isImmediate){
      ViewHolder holder=(ViewHolder)imageView.getTag();
      if (holder != null) {
        String url=holder.requestURL;
        if (response != null && response.getBitmap() != null && response.getRequestUrl().equals(url)) {
          imageView.setImageBitmap(response.getBitmap());
        }
      }
    }
  }
,getGridWidth(context),getGridHeight(context));
  updateGridWidth(mContext,view);
}",0.7268014515292898
15157,"/** 
 * Login to the WordPress blog and load the specified URL.
 * @param url URL to be loaded in the webview.
 */
protected void loadAuthenticatedUrl(String url){
  String postData=String.format(""String_Node_Str"",mBlog.getUsername(),mBlog.getPassword(),url);
  mWebView.postUrl(getLoginUrl(),postData.getBytes());
}","/** 
 * Login to the WordPress blog and load the specified URL.
 * @param url URL to be loaded in the webview.
 */
protected void loadAuthenticatedUrl(String url){
  try {
    String postData=String.format(""String_Node_Str"",mBlog.getUsername(),mBlog.getPassword(),URLEncoder.encode(url,""String_Node_Str""));
    mWebView.postUrl(getLoginUrl(),postData.getBytes());
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
}",0.8337730870712401
15158,"private void uploadMediaFile(Cursor cursor){
  if (!cursor.moveToFirst())   return;
  mUploadInProgress=true;
  int blogId=Integer.valueOf(cursor.getString((cursor.getColumnIndex(""String_Node_Str""))));
  final String blogIdStr=String.valueOf(blogId);
  final String mediaId=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String mimeType=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  MediaFile mediaFile=new MediaFile();
  mediaFile.setBlogId(blogIdStr);
  mediaFile.setFileName(fileName);
  mediaFile.setFilePath(filePath);
  mediaFile.setMIMEType(mimeType);
  mediaFile.save();
  ApiHelper.UploadMediaTask task=new ApiHelper.UploadMediaTask(mContext,mediaFile,new Callback(){
    @Override public void onSuccess(    String id){
      mUploadInProgress=false;
      WordPress.wpDB.updateMediaUploadState(blogIdStr,mediaId,""String_Node_Str"");
      sendUpdateBroadcast();
      mHandler.post(FetchQueueTask);
    }
    @Override public void onFailure(){
      mUploadInProgress=false;
      WordPress.wpDB.updateMediaUploadState(blogIdStr,mediaId,""String_Node_Str"");
      sendUpdateBroadcast();
      mHandler.post(FetchQueueTask);
    }
  }
);
  WordPress.wpDB.updateMediaUploadState(blogIdStr,mediaId,""String_Node_Str"");
  sendUpdateBroadcast();
  List<Object> apiArgs=new ArrayList<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  task.execute(apiArgs);
  mHandler.post(FetchQueueTask);
}","private void uploadMediaFile(Cursor cursor){
  if (!cursor.moveToFirst())   return;
  mUploadInProgress=true;
  int blogId=Integer.valueOf(cursor.getString((cursor.getColumnIndex(""String_Node_Str""))));
  final String blogIdStr=String.valueOf(blogId);
  final String mediaId=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String fileName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String filePath=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String mimeType=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  MediaFile mediaFile=new MediaFile();
  mediaFile.setBlogId(blogIdStr);
  mediaFile.setFileName(fileName);
  mediaFile.setFilePath(filePath);
  mediaFile.setMIMEType(mimeType);
  ApiHelper.UploadMediaTask task=new ApiHelper.UploadMediaTask(mContext,mediaFile,new Callback(){
    @Override public void onSuccess(    String id){
      mUploadInProgress=false;
      WordPress.wpDB.updateMediaUploadState(blogIdStr,mediaId,""String_Node_Str"");
      sendUpdateBroadcast();
      mHandler.post(FetchQueueTask);
    }
    @Override public void onFailure(){
      mUploadInProgress=false;
      WordPress.wpDB.updateMediaUploadState(blogIdStr,mediaId,""String_Node_Str"");
      sendUpdateBroadcast();
      mHandler.post(FetchQueueTask);
    }
  }
);
  WordPress.wpDB.updateMediaUploadState(blogIdStr,mediaId,""String_Node_Str"");
  sendUpdateBroadcast();
  List<Object> apiArgs=new ArrayList<Object>();
  apiArgs.add(WordPress.getCurrentBlog());
  task.execute(apiArgs);
  mHandler.post(FetchQueueTask);
}",0.9936507936507936
15159,"@SuppressWarnings(""String_Node_Str"") private void changeCommentStatus(final String newStatus,final int selCommentID){
  client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
  Map<String,String> contentHash, postHash=new HashMap<String,String>();
  contentHash=(Map<String,String>)commentList.allComments.get(selCommentID);
  postHash.put(""String_Node_Str"",newStatus);
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),selCommentID,postHash};
  Object result=null;
  try {
    result=(Object)client.call(""String_Node_Str"",params);
    boolean bResult=Boolean.parseBoolean(result.toString());
    if (bResult) {
      WordPress.currentComment.status=newStatus;
      commentList.model.set(WordPress.currentComment.position,WordPress.currentComment);
      WordPress.wpDB.updateCommentStatus(id,WordPress.currentComment.commentID,newStatus);
    }
    dismissDialog(ID_DIALOG_MODERATING);
    Thread action=new Thread(){
      public void run(){
        Toast.makeText(CommentsActivity.this,getResources().getText(R.string.comment_moderated),Toast.LENGTH_SHORT).show();
      }
    }
;
    runOnUiThread(action);
    Thread action2=new Thread(){
      public void run(){
        commentList.getListView().invalidateViews();
      }
    }
;
    runOnUiThread(action2);
  }
 catch (  final XMLRPCException e) {
    dismissDialog(ID_DIALOG_MODERATING);
    Thread action3=new Thread(){
      public void run(){
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(CommentsActivity.this);
        dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
        dialogBuilder.setMessage(getResources().getText(R.string.error_moderate_comment));
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
    }
;
    runOnUiThread(action3);
  }
}","@SuppressWarnings(""String_Node_Str"") private void changeCommentStatus(final String newStatus,final int selCommentID){
  client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
  Map<String,String> contentHash, postHash=new HashMap<String,String>();
  contentHash=(Map<String,String>)commentList.allComments.get(selCommentID);
  postHash.put(""String_Node_Str"",newStatus);
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),selCommentID,postHash};
  Object result=null;
  try {
    result=(Object)client.call(""String_Node_Str"",params);
    boolean bResult=Boolean.parseBoolean(result.toString());
    if (bResult) {
      WordPress.currentComment.status=newStatus;
      commentList.model.set(WordPress.currentComment.position,WordPress.currentComment);
      WordPress.wpDB.updateCommentStatus(id,WordPress.currentComment.commentID,newStatus);
      contentHash.put(""String_Node_Str"",newStatus);
    }
    dismissDialog(ID_DIALOG_MODERATING);
    Thread action=new Thread(){
      public void run(){
        Toast.makeText(CommentsActivity.this,getResources().getText(R.string.comment_moderated),Toast.LENGTH_SHORT).show();
      }
    }
;
    runOnUiThread(action);
    Thread action2=new Thread(){
      public void run(){
        commentList.getListView().invalidateViews();
      }
    }
;
    runOnUiThread(action2);
  }
 catch (  final XMLRPCException e) {
    dismissDialog(ID_DIALOG_MODERATING);
    Thread action3=new Thread(){
      public void run(){
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(CommentsActivity.this);
        dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
        dialogBuilder.setMessage(getResources().getText(R.string.error_moderate_comment));
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
    }
;
    runOnUiThread(action3);
  }
}",0.9896661367249604
15160,"@SuppressWarnings(""String_Node_Str"") protected void moderateComments(String newStatus){
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals(""String_Node_Str"")) {
      client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
      Comment listRow=(Comment)getListView().getItemAtPosition(i);
      int curCommentID=listRow.commentID;
      Map<String,String> contentHash, postHash=new HashMap<String,String>();
      contentHash=(Map<String,String>)allComments.get(curCommentID);
      postHash.put(""String_Node_Str"",newStatus);
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID,postHash};
      Object result=null;
      try {
        result=(Object)client.call(""String_Node_Str"",params);
        boolean bResult=Boolean.parseBoolean(result.toString());
        if (bResult) {
          checkedComments.set(i,""String_Node_Str"");
          listRow.status=newStatus;
          model.set(i,listRow);
          WordPress.wpDB.updateCommentStatus(WordPress.currentBlog.getId(),listRow.commentID,newStatus);
        }
      }
 catch (      XMLRPCException e) {
        moderateErrorMsg=getResources().getText(R.string.error_moderate_comment).toString();
      }
    }
  }
  getActivity().dismissDialog(ID_DIALOG_MODERATING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        getListView().invalidateViews();
      }
 else {
        if (!getActivity().isFinishing()) {
          checkedCommentTotal=0;
          hideModerationBar();
          getListView().invalidateViews();
          FragmentTransaction ft=getFragmentManager().beginTransaction();
          WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
          alert.show(ft,""String_Node_Str"");
        }
        moderateErrorMsg=""String_Node_Str"";
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  pd=new ProgressDialog(getActivity().getApplicationContext());
}","@SuppressWarnings(""String_Node_Str"") protected void moderateComments(String newStatus){
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals(""String_Node_Str"")) {
      client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
      Comment listRow=(Comment)getListView().getItemAtPosition(i);
      int curCommentID=listRow.commentID;
      Map<String,String> contentHash, postHash=new HashMap<String,String>();
      contentHash=(Map<String,String>)allComments.get(curCommentID);
      if (contentHash.get(""String_Node_Str"").equals(newStatus)) {
        checkedComments.set(i,""String_Node_Str"");
        continue;
      }
      postHash.put(""String_Node_Str"",newStatus);
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID,postHash};
      Object result=null;
      try {
        result=(Object)client.call(""String_Node_Str"",params);
        boolean bResult=Boolean.parseBoolean(result.toString());
        if (bResult) {
          checkedComments.set(i,""String_Node_Str"");
          listRow.status=newStatus;
          contentHash.put(""String_Node_Str"",newStatus);
          model.set(i,listRow);
          WordPress.wpDB.updateCommentStatus(WordPress.currentBlog.getId(),listRow.commentID,newStatus);
        }
      }
 catch (      XMLRPCException e) {
        moderateErrorMsg=getResources().getText(R.string.error_moderate_comment).toString();
      }
    }
  }
  getActivity().dismissDialog(ID_DIALOG_MODERATING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        getListView().invalidateViews();
      }
 else {
        if (!getActivity().isFinishing()) {
          checkedCommentTotal=0;
          hideModerationBar();
          getListView().invalidateViews();
          FragmentTransaction ft=getFragmentManager().beginTransaction();
          WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
          alert.show(ft,""String_Node_Str"");
        }
        moderateErrorMsg=""String_Node_Str"";
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  pd=new ProgressDialog(getActivity().getApplicationContext());
}",0.9656011118832524
15161,"public boolean loadComments(boolean refresh,boolean loadMore){
  refreshOnly=refresh;
  String author, postID, comment, dateCreatedFormatted, status, authorEmail, authorURL, postTitle;
  int commentID;
  List<Map<String,Object>> loadedPosts=WordPress.wpDB.loadComments(WordPress.currentBlog.getId());
  if (loadedPosts != null) {
    numRecords=loadedPosts.size();
    if (refreshOnly) {
      if (model != null) {
        model.clear();
      }
    }
 else {
      model=new ArrayList<Comment>();
    }
    checkedComments=new Vector<String>();
    for (int i=0; i < loadedPosts.size(); i++) {
      checkedComments.add(i,""String_Node_Str"");
      Map<String,Object> contentHash=loadedPosts.get(i);
      allComments.put((Integer)contentHash.get(""String_Node_Str""),contentHash);
      author=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      commentID=(Integer)contentHash.get(""String_Node_Str"");
      postID=contentHash.get(""String_Node_Str"").toString();
      comment=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      dateCreatedFormatted=contentHash.get(""String_Node_Str"").toString();
      status=contentHash.get(""String_Node_Str"").toString();
      authorEmail=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      authorURL=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      postTitle=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      if (model == null) {
        model=new ArrayList<Comment>();
      }
      model.add(new Comment(postID,commentID,i,author,dateCreatedFormatted,comment,status,postTitle,authorURL,authorEmail,URI.create(""String_Node_Str"" + StringUtils.getMd5Hash(authorEmail.trim()) + ""String_Node_Str"")));
    }
    if (!refreshOnly) {
      ListView listView=this.getListView();
      listView.removeFooterView(switcher);
      if (loadedPosts.size() % 30 == 0) {
        listView.addFooterView(switcher);
      }
      setListAdapter(new CommentAdapter());
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View view,        int position,        long id){
          selectedPosition=position;
          Comment comment=model.get((int)id);
          onCommentSelectedListener.onCommentSelected(comment);
          getListView().invalidateViews();
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          WordPress.currentComment=model.get(info.position);
          menu.setHeaderTitle(getResources().getText(R.string.comment_actions));
          menu.add(0,0,0,getResources().getText(R.string.mark_approved));
          menu.add(0,1,0,getResources().getText(R.string.mark_unapproved));
          menu.add(0,2,0,getResources().getText(R.string.mark_spam));
          menu.add(0,3,0,getResources().getText(R.string.reply));
          menu.add(0,4,0,getResources().getText(R.string.delete));
          menu.add(0,5,0,getResources().getText(R.string.edit));
        }
      }
);
    }
 else {
      getListView().invalidateViews();
    }
    if (this.shouldSelectAfterLoad) {
      if (model != null) {
        if (model.size() > 0) {
          selectedPosition=0;
          Comment aComment=model.get((int)0);
          onCommentSelectedListener.onCommentSelected(aComment);
          getListView().setItemChecked(0,true);
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadMore && scrollPosition > 0) {
      ListView listView=this.getListView();
      try {
        listView.setSelectionFromTop(scrollPosition,scrollPositionTop);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean loadComments(boolean refresh,boolean loadMore){
  refreshOnly=refresh;
  String author, postID, comment, dateCreatedFormatted, status, authorEmail, authorURL, postTitle;
  int commentID;
  List<Map<String,Object>> loadedComments=WordPress.wpDB.loadComments(WordPress.currentBlog.getId());
  if (loadedComments != null) {
    numRecords=loadedComments.size();
    if (refreshOnly) {
      if (model != null) {
        model.clear();
      }
    }
 else {
      model=new ArrayList<Comment>();
    }
    checkedComments=new Vector<String>();
    for (int i=0; i < loadedComments.size(); i++) {
      checkedComments.add(i,""String_Node_Str"");
      Map<String,Object> contentHash=loadedComments.get(i);
      allComments.put((Integer)contentHash.get(""String_Node_Str""),contentHash);
      author=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      commentID=(Integer)contentHash.get(""String_Node_Str"");
      postID=contentHash.get(""String_Node_Str"").toString();
      comment=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      dateCreatedFormatted=contentHash.get(""String_Node_Str"").toString();
      status=contentHash.get(""String_Node_Str"").toString();
      authorEmail=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      authorURL=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      postTitle=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      if (model == null) {
        model=new ArrayList<Comment>();
      }
      model.add(new Comment(postID,commentID,i,author,dateCreatedFormatted,comment,status,postTitle,authorURL,authorEmail,URI.create(""String_Node_Str"" + StringUtils.getMd5Hash(authorEmail.trim()) + ""String_Node_Str"")));
    }
    if (!refreshOnly) {
      ListView listView=this.getListView();
      listView.removeFooterView(switcher);
      if (loadedComments.size() % 30 == 0) {
        listView.addFooterView(switcher);
      }
      setListAdapter(new CommentAdapter());
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View view,        int position,        long id){
          selectedPosition=position;
          Comment comment=model.get((int)id);
          onCommentSelectedListener.onCommentSelected(comment);
          getListView().invalidateViews();
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          WordPress.currentComment=model.get(info.position);
          menu.setHeaderTitle(getResources().getText(R.string.comment_actions));
          menu.add(0,0,0,getResources().getText(R.string.mark_approved));
          menu.add(0,1,0,getResources().getText(R.string.mark_unapproved));
          menu.add(0,2,0,getResources().getText(R.string.mark_spam));
          menu.add(0,3,0,getResources().getText(R.string.reply));
          menu.add(0,4,0,getResources().getText(R.string.delete));
          menu.add(0,5,0,getResources().getText(R.string.edit));
        }
      }
);
    }
 else {
      getListView().invalidateViews();
    }
    if (this.shouldSelectAfterLoad) {
      if (model != null) {
        if (model.size() > 0) {
          selectedPosition=0;
          Comment aComment=model.get((int)0);
          onCommentSelectedListener.onCommentSelected(aComment);
          getListView().setItemChecked(0,true);
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadMore && scrollPosition > 0) {
      ListView listView=this.getListView();
      try {
        listView.setSelectionFromTop(scrollPosition,scrollPositionTop);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    return true;
  }
 else {
    return false;
  }
}",0.993456131846825
15162,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    Log.d(""String_Node_Str"",""String_Node_Str"");
    finish();
    return;
  }
  createMenuDrawer(R.layout.media_browser_activity);
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(true);
  FragmentManager fm=getSupportFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  mMediaItemListFragment=(MediaItemListFragment)fm.findFragmentById(R.id.mediaItemListFragment);
  mMediaItemListFragment.setListShown(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (WordPress.wpDB == null) {
    Toast.makeText(this,R.string.fatal_db_error,Toast.LENGTH_LONG).show();
    Log.d(""String_Node_Str"",""String_Node_Str"");
    finish();
    return;
  }
  createMenuDrawer(R.layout.media_browser_activity);
  ActionBar actionBar=getSupportActionBar();
  actionBar.setDisplayShowTitleEnabled(true);
  FragmentManager fm=getSupportFragmentManager();
  fm.addOnBackStackChangedListener(mOnBackStackChangedListener);
  mMediaItemListFragment=(MediaItemListFragment)fm.findFragmentById(R.id.mediaItemListFragment);
  mMediaItemListFragment.setListShown(true);
  mMediaItemFragment=(MediaItemFragment)fm.findFragmentById(R.id.mediaItemFragment);
}",0.9449838187702264
15163,"@Override public void onMediaItemSelected(String mediaId){
  FragmentManager fm=getSupportFragmentManager();
  mMediaItemFragment=(MediaItemFragment)fm.findFragmentById(R.id.mediaItemFragment);
  if (mMediaItemFragment == null || !mMediaItemFragment.isInLayout()) {
    FragmentTransaction ft=fm.beginTransaction();
    ft.hide(mMediaItemListFragment);
    mMediaItemFragment=MediaItemFragment.newInstance(mediaId);
    ft.add(R.id.media_browser_container,mMediaItemFragment);
    ft.addToBackStack(null);
    ft.commit();
    mMenuDrawer.setDrawerIndicatorEnabled(false);
  }
 else {
    mMediaItemFragment.loadMedia(mediaId);
  }
}","@Override public void onMediaItemSelected(String mediaId){
  FragmentManager fm=getSupportFragmentManager();
  if (mMediaItemFragment == null || !mMediaItemFragment.isInLayout()) {
    FragmentTransaction ft=fm.beginTransaction();
    ft.hide(mMediaItemListFragment);
    mMediaItemFragment=MediaItemFragment.newInstance(mediaId);
    ft.add(R.id.media_browser_container,mMediaItemFragment);
    ft.addToBackStack(null);
    ft.commit();
    mMenuDrawer.setDrawerIndicatorEnabled(false);
  }
 else {
    mMediaItemFragment.loadMedia(mediaId);
  }
}",0.9280270956816258
15164,"public void loadMedia(String mediaId){
  if (mediaId == null)   return;
  Blog blog=WordPress.getCurrentBlog();
  if (blog != null) {
    String blogId=String.valueOf(blog.getBlogId());
    Cursor cursor=WordPress.wpDB.getMediaFile(blogId,mediaId);
    refreshViews(cursor);
  }
}","public void loadMedia(String mediaId){
  String id=mediaId;
  Blog blog=WordPress.getCurrentBlog();
  if (blog != null) {
    String blogId=String.valueOf(blog.getBlogId());
    Cursor cursor;
    if (id == null) {
      cursor=WordPress.wpDB.getFirstMediaFileForBlog(blogId);
    }
 else {
      cursor=WordPress.wpDB.getMediaFile(blogId,id);
    }
    refreshViews(cursor);
  }
}",0.7534039334341907
15165,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mListener=(OnMediaItemSelectedListener)activity;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(activity.toString() + ""String_Node_Str"");
  }
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  try {
    mListener=(MediaItemListListener)activity;
  }
 catch (  ClassCastException e) {
    throw new ClassCastException(activity.toString() + ""String_Node_Str"");
  }
}",0.9725490196078432
15166,"private void loadCursor(){
  Blog blog=WordPress.getCurrentBlog();
  if (blog != null) {
    String blogId=String.valueOf(blog.getBlogId());
    mCursor=WordPress.wpDB.getMediaFilesForBlog(blogId);
    if (mCursor.moveToFirst()) {
      String mediaId=mCursor.getString(mCursor.getColumnIndex(""String_Node_Str""));
      mListener.onMediaItemSelected(mediaId);
    }
  }
}","private void loadCursor(){
  Blog blog=WordPress.getCurrentBlog();
  if (blog != null) {
    String blogId=String.valueOf(blog.getBlogId());
    mCursor=WordPress.wpDB.getMediaFilesForBlog(blogId);
  }
}",0.7073170731707317
15167,"@Override public void onSuccess(){
  loadCursor();
  mAdapter.changeCursor(mCursor);
}","@Override public void onSuccess(){
  loadCursor();
  mListener.onMediaItemListDownloaded();
  mAdapter.changeCursor(mCursor);
}",0.8075117370892019
15168,"public void addAll(List<Note> notes){
  if (notes.size() == 0) {
    mAllNotesLoaded=true;
    if (mPressFooterView != null)     mProgressFooterView.setVisibility(View.GONE);
  }
 else {
    Iterator<Note> noteIterator=notes.iterator();
    while (noteIterator.hasNext()) {
      add(noteIterator.next());
    }
  }
}","public void addAll(List<Note> notes){
  if (notes.size() == 0) {
    mAllNotesLoaded=true;
    if (mProgressFooterView != null)     mProgressFooterView.setVisibility(View.GONE);
  }
 else {
    Iterator<Note> noteIterator=notes.iterator();
    while (noteIterator.hasNext()) {
      add(noteIterator.next());
    }
  }
}",0.9952904238618524
15169,"public void refreshNotes(){
  mFirstLoadComplete=false;
  shouldAnimateRefreshButton=true;
  startAnimatingRefreshButton(mRefreshMenuItem);
  NotesResponseHandler handler=new NotesResponseHandler(){
    @Override public void onNotes(    List<Note> notes){
      mFirstLoadComplete=true;
      final NotificationsListFragment.NotesAdapter adapter=mNotesList.getNotesAdapter();
      adapter.clear();
      adapter.addAll(notes);
      adapter.notifyDataSetChanged();
      if (!notes.isEmpty()) {
        updateLastSeen(notes.get(0).getTimestamp());
      }
      stopAnimatingRefreshButton(mRefreshMenuItem);
    }
    @Override public void onErrorResponse(    VolleyError error){
      mFirstLoadComplete=true;
      final NotificationsListFragment.NotesAdapter adapter=mNotesList.getNotesAdapter();
      adapter.clear();
      adapter.addAll(new ArrayList<Note>());
      adapter.notifyDataSetChanged();
      Toast.makeText(NotificationsActivity.this,getString(R.string.error_refresh),Toast.LENGTH_LONG).show();
      stopAnimatingRefreshButton(mRefreshMenuItem);
    }
  }
;
  restClient.getNotifications(handler,handler);
}","public void refreshNotes(){
  mFirstLoadComplete=false;
  shouldAnimateRefreshButton=true;
  startAnimatingRefreshButton(mRefreshMenuItem);
  NotesResponseHandler handler=new NotesResponseHandler(){
    @Override public void onNotes(    List<Note> notes){
      mFirstLoadComplete=true;
      final NotificationsListFragment.NotesAdapter adapter=mNotesList.getNotesAdapter();
      adapter.clear();
      adapter.addAll(notes);
      adapter.notifyDataSetChanged();
      if (!notes.isEmpty()) {
        updateLastSeen(notes.get(0).getTimestamp());
      }
      stopAnimatingRefreshButton(mRefreshMenuItem);
    }
    @Override public void onErrorResponse(    VolleyError error){
      mFirstLoadComplete=true;
      final NotificationsListFragment.NotesAdapter adapter=mNotesList.getNotesAdapter();
      adapter.clear();
      adapter.addAll(new ArrayList<Note>());
      adapter.notifyDataSetChanged();
      Toast.makeText(NotificationsActivity.this,String.format(getResources().getString(R.string.error_refresh),getResources().getText(R.string.notifications).toString().toLowerCase()),Toast.LENGTH_LONG).show();
      stopAnimatingRefreshButton(mRefreshMenuItem);
    }
  }
;
  restClient.getNotifications(handler,handler);
}",0.9542372881355932
15170,"@Override protected void onMessage(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  Bundle extras=intent.getExtras();
  if (extras == null) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String title=extras.getString(""String_Node_Str"");
  if (title == null)   title=""String_Node_Str"";
  String message=extras.getString(""String_Node_Str"");
  String note_id=extras.getString(""String_Node_Str"");
  if (note_id == null)   note_id=StringUtils.getMd5Hash(message);
  if (note_id != null) {
    if (!activeNotificationsMap.containsKey(note_id))     activeNotificationsMap.put(note_id,extras);
  }
  String iconURL=extras.getString(""String_Node_Str"");
  Bitmap largeIconBitmap=null;
  if (iconURL != null) {
    float screenDensity=getResources().getDisplayMetrics().densityDpi;
    int size=Math.round(64 * (screenDensity / 160));
    String resizedURL=iconURL.replaceAll(""String_Node_Str"",""String_Node_Str"" + size);
    largeIconBitmap=ImageHelper.downloadBitmap(resizedURL);
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  boolean sound, vibrate, light;
  sound=prefs.getBoolean(""String_Node_Str"",false);
  vibrate=prefs.getBoolean(""String_Node_Str"",false);
  light=prefs.getBoolean(""String_Node_Str"",false);
  NotificationCompat.Builder mBuilder;
  if (activeNotificationsMap.size() <= 1) {
    mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setContentTitle(title).setContentText(message).setTicker(message).setAutoCancel(true).setStyle(new NotificationCompat.BigTextStyle().bigText(message));
    String noteType=extras.getString(""String_Node_Str"");
    if (noteType != null && noteType.equals(""String_Node_Str"")) {
      Intent commentReplyIntent=new Intent(this,PostsActivity.class);
      commentReplyIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TASK| IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
      commentReplyIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
      commentReplyIntent.putExtra(NotificationsActivity.NOTE_INSTANT_REPLY_EXTRA,true);
      commentReplyIntent.setAction(Intent.ACTION_RUN);
      if (note_id != null)       commentReplyIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
      PendingIntent commentReplyPendingIntent=PendingIntent.getActivity(context,0,commentReplyIntent,0);
      mBuilder.addAction(R.drawable.ab_icon_reply,getResources().getText(R.string.reply),commentReplyPendingIntent);
    }
  }
 else {
    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
    int noteCtr=1;
    for (    Bundle wpNotification : activeNotificationsMap.values()) {
      if (noteCtr > 5)       break;
      if (wpNotification.getString(""String_Node_Str"") != null) {
        if (wpNotification.getString(""String_Node_Str"").equals(""String_Node_Str""))         inboxStyle.addLine(wpNotification.getString(""String_Node_Str"") + ""String_Node_Str"" + wpNotification.getString(""String_Node_Str""));
 else         inboxStyle.addLine(wpNotification.getString(""String_Node_Str""));
        noteCtr++;
      }
    }
    if (activeNotificationsMap.size() > 5)     inboxStyle.setSummaryText(String.format(getString(R.string.more_notifications),activeNotificationsMap.size() - 5));
    String subject=String.format(getString(R.string.new_notifications),activeNotificationsMap.size());
    mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setContentTitle(subject).setContentText(getString(R.string.tap_to_view)).setTicker(message).setAutoCancel(true).setStyle(inboxStyle);
  }
  if (largeIconBitmap != null) {
    mBuilder.setLargeIcon(largeIconBitmap);
  }
  if (sound)   mBuilder.setSound(Uri.parse(""String_Node_Str"" + getPackageName() + ""String_Node_Str""+ R.raw.notification));
  if (vibrate)   mBuilder.setVibrate(new long[]{500,500,500});
  if (light)   mBuilder.setLights(0xff0000ff,1000,5000);
  Intent resultIntent=new Intent(this,PostsActivity.class);
  resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  resultIntent.setAction(""String_Node_Str"");
  resultIntent.addCategory(""String_Node_Str"");
  resultIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
  if (note_id != null)   resultIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,resultIntent,Intent.FLAG_ACTIVITY_NO_ANIMATION);
  mBuilder.setContentIntent(pendingIntent);
  NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mNotificationManager.notify(notificationId,mBuilder.build());
}","@Override protected void onMessage(Context context,Intent intent){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  Bundle extras=intent.getExtras();
  if (extras == null) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String title=extras.getString(""String_Node_Str"");
  if (title == null)   title=""String_Node_Str"";
  String message=extras.getString(""String_Node_Str"");
  String note_id=extras.getString(""String_Node_Str"");
  if (note_id == null)   note_id=StringUtils.getMd5Hash(message);
  if (note_id != null) {
    if (!activeNotificationsMap.containsKey(note_id))     activeNotificationsMap.put(note_id,extras);
  }
  String iconURL=extras.getString(""String_Node_Str"");
  Bitmap largeIconBitmap=null;
  if (iconURL != null) {
    try {
      iconURL=URLDecoder.decode(iconURL,""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    float screenDensity=getResources().getDisplayMetrics().densityDpi;
    int size=Math.round(64 * (screenDensity / 160));
    String resizedURL=iconURL.replaceAll(""String_Node_Str"",""String_Node_Str"" + size);
    largeIconBitmap=ImageHelper.downloadBitmap(resizedURL);
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  boolean sound, vibrate, light;
  sound=prefs.getBoolean(""String_Node_Str"",false);
  vibrate=prefs.getBoolean(""String_Node_Str"",false);
  light=prefs.getBoolean(""String_Node_Str"",false);
  NotificationCompat.Builder mBuilder;
  if (activeNotificationsMap.size() <= 1) {
    mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setContentTitle(title).setContentText(message).setTicker(message).setAutoCancel(true).setStyle(new NotificationCompat.BigTextStyle().bigText(message));
    String noteType=extras.getString(""String_Node_Str"");
    if (noteType != null && noteType.equals(""String_Node_Str"")) {
      Intent commentReplyIntent=new Intent(this,PostsActivity.class);
      commentReplyIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TASK| IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
      commentReplyIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
      commentReplyIntent.putExtra(NotificationsActivity.NOTE_INSTANT_REPLY_EXTRA,true);
      commentReplyIntent.setAction(Intent.ACTION_RUN);
      if (note_id != null)       commentReplyIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
      PendingIntent commentReplyPendingIntent=PendingIntent.getActivity(context,0,commentReplyIntent,0);
      mBuilder.addAction(R.drawable.ab_icon_reply,getResources().getText(R.string.reply),commentReplyPendingIntent);
    }
  }
 else {
    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
    int noteCtr=1;
    for (    Bundle wpNotification : activeNotificationsMap.values()) {
      if (noteCtr > 5)       break;
      if (wpNotification.getString(""String_Node_Str"") != null) {
        if (wpNotification.getString(""String_Node_Str"").equals(""String_Node_Str""))         inboxStyle.addLine(wpNotification.getString(""String_Node_Str"") + ""String_Node_Str"" + wpNotification.getString(""String_Node_Str""));
 else         inboxStyle.addLine(wpNotification.getString(""String_Node_Str""));
        noteCtr++;
      }
    }
    if (activeNotificationsMap.size() > 5)     inboxStyle.setSummaryText(String.format(getString(R.string.more_notifications),activeNotificationsMap.size() - 5));
    String subject=String.format(getString(R.string.new_notifications),activeNotificationsMap.size());
    mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.notification_icon).setContentTitle(subject).setContentText(getString(R.string.tap_to_view)).setTicker(message).setAutoCancel(true).setStyle(inboxStyle);
  }
  if (largeIconBitmap != null) {
    mBuilder.setLargeIcon(largeIconBitmap);
  }
  if (sound)   mBuilder.setSound(Uri.parse(""String_Node_Str"" + getPackageName() + ""String_Node_Str""+ R.raw.notification));
  if (vibrate)   mBuilder.setVibrate(new long[]{500,500,500});
  if (light)   mBuilder.setLights(0xff0000ff,1000,5000);
  Intent resultIntent=new Intent(this,PostsActivity.class);
  resultIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK | IntentCompat.FLAG_ACTIVITY_CLEAR_TASK);
  resultIntent.setAction(""String_Node_Str"");
  resultIntent.addCategory(""String_Node_Str"");
  resultIntent.putExtra(NotificationsActivity.FROM_NOTIFICATION_EXTRA,true);
  if (note_id != null)   resultIntent.putExtra(NotificationsActivity.NOTE_ID_EXTRA,note_id);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,resultIntent,Intent.FLAG_ACTIVITY_NO_ANIMATION);
  mBuilder.setContentIntent(pendingIntent);
  NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mNotificationManager.notify(notificationId,mBuilder.build());
}",0.9840518571869534
15171,"@Override public boolean onContextItemSelected(MenuItem item){
  Post post=new Post(WordPress.currentBlog.getId(),mSelectedID,isPage);
  if (post.getId() < 0) {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.post_not_found));
      alert.show(ft,""String_Node_Str"");
    }
    return false;
  }
  if (item.getGroupId() == 0) {
switch (item.getItemId()) {
case 0:
      Intent i2=new Intent(getActivity().getApplicationContext(),EditPostActivity.class);
    i2.putExtra(""String_Node_Str"",mSelectedID);
  i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
startActivityForResult(i2,0);
return true;
case 1:
mOnPostActionListener.onPostAction(PostsActivity.POST_DELETE,post);
return true;
case 2:
mOnPostActionListener.onPostAction(PostsActivity.POST_SHARE,post);
return true;
case 3:
mOnPostActionListener.onPostAction(PostsActivity.POST_COMMENT,post);
return true;
}
}
 else if (item.getGroupId() == 2) {
switch (item.getItemId()) {
case 0:
Intent i2=new Intent(getActivity().getApplicationContext(),EditPostActivity.class);
i2.putExtra(""String_Node_Str"",mSelectedID);
i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
i2.putExtra(""String_Node_Str"",true);
startActivityForResult(i2,0);
return true;
case 1:
mOnPostActionListener.onPostAction(PostsActivity.POST_DELETE,post);
return true;
case 2:
mOnPostActionListener.onPostAction(PostsActivity.POST_SHARE,post);
return true;
}
}
 else {
switch (item.getItemId()) {
case 0:
Intent i2=new Intent(getActivity().getApplicationContext(),EditPostActivity.class);
i2.putExtra(""String_Node_Str"",mSelectedID);
i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
if (isPage) {
i2.putExtra(""String_Node_Str"",true);
}
i2.putExtra(""String_Node_Str"",true);
startActivityForResult(i2,0);
return true;
case 1:
mOnPostActionListener.onPostAction(PostsActivity.POST_DELETE,post);
return true;
}
}
return false;
}","@Override public boolean onContextItemSelected(MenuItem item){
  Post post=new Post(WordPress.currentBlog.getId(),mSelectedID,isPage);
  if (post.getId() < 0) {
    if (!getActivity().isFinishing()) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(getString(R.string.post_not_found));
      alert.show(ft,""String_Node_Str"");
    }
    return false;
  }
  if (item.getGroupId() == 0) {
switch (item.getItemId()) {
case 0:
      Intent i2=new Intent(getActivity().getApplicationContext(),EditPostActivity.class);
    i2.putExtra(""String_Node_Str"",mSelectedID);
  i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
startActivityForResult(i2,0);
return true;
case 1:
mOnPostActionListener.onPostAction(PostsActivity.POST_DELETE,post);
return true;
case 2:
mOnPostActionListener.onPostAction(PostsActivity.POST_SHARE,post);
return true;
case 3:
mOnPostActionListener.onPostAction(PostsActivity.POST_COMMENT,post);
return true;
}
}
 else if (item.getGroupId() == 2) {
switch (item.getItemId()) {
case 0:
Intent i2=new Intent(getActivity().getApplicationContext(),EditPostActivity.class);
i2.putExtra(""String_Node_Str"",mSelectedID);
i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
i2.putExtra(""String_Node_Str"",true);
startActivityForResult(i2,0);
return true;
case 1:
mOnPostActionListener.onPostAction(PostsActivity.POST_DELETE,post);
return true;
case 2:
mOnPostActionListener.onPostAction(PostsActivity.POST_SHARE,post);
return true;
case 3:
mOnPostActionListener.onPostAction(PostsActivity.POST_COMMENT,post);
return true;
}
}
 else {
switch (item.getItemId()) {
case 0:
Intent i2=new Intent(getActivity().getApplicationContext(),EditPostActivity.class);
i2.putExtra(""String_Node_Str"",mSelectedID);
i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
if (isPage) {
i2.putExtra(""String_Node_Str"",true);
}
i2.putExtra(""String_Node_Str"",true);
startActivityForResult(i2,0);
return true;
case 1:
mOnPostActionListener.onPostAction(PostsActivity.POST_DELETE,post);
return true;
}
}
return false;
}",0.9782713664896184
15172,"@Override public void onChangeTopic(final String topicID,final String topicName){
  try {
    final ReaderImplFragment readerPageFragment=(ReaderImplFragment)readerPage;
    readerPageFragment.topicsID=topicID;
    runOnUiThread(new Runnable(){
      public void run(){
        String methodCall=""String_Node_Str"" + topicID + ""String_Node_Str"";
        readerPageFragment.wv.loadUrl(""String_Node_Str"" + methodCall);
        if (topicName != null) {
          topicText.setText(topicName);
        }
        readerPager.setCurrentItem(1,true);
        supportInvalidateOptionsMenu();
      }
    }
);
  }
 catch (  Exception e) {
  }
}","@Override public void onChangeTopic(final String topicID,final String topicName){
  try {
    final ReaderImplFragment readerPageFragment=(ReaderImplFragment)readerPage;
    readerPageFragment.topicsID=topicID;
    runOnUiThread(new Runnable(){
      public void run(){
        String methodCall=""String_Node_Str"" + topicID + ""String_Node_Str"";
        readerPageFragment.wv.loadUrl(""String_Node_Str"" + methodCall);
        if (topicName != null) {
          topicText.setText(topicName);
        }
        if (readerPager.getCurrentItem() != 1) {
          readerPager.setCurrentItem(1,true);
          supportInvalidateOptionsMenu();
        }
      }
    }
);
  }
 catch (  Exception e) {
  }
}",0.9526671675432006
15173,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  CookieSyncManager.createInstance(this.getActivity().getApplicationContext());
  View v=inflater.inflate(R.layout.reader_wpcom,container,false);
  if (WordPress.currentBlog == null) {
    if (WordPress.setCurrentBlogToLastActive() == null) {
      Toast.makeText(getActivity().getApplicationContext(),getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
      getActivity().finish();
    }
  }
  wv=(WebView)v.findViewById(R.id.webView);
  wv.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
  wv.addJavascriptInterface(new JavaScriptInterface(getActivity().getApplicationContext()),interfaceNameForJS);
  wv.setWebViewClient(new WebViewClient(){
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      if (isAdded()) {
        if (url.equalsIgnoreCase(Constants.readerDetailURL)) {
          view.stopLoading();
          wv.loadUrl(""String_Node_Str"");
          wv.loadUrl(""String_Node_Str"");
          onPostSelectedListener.onPostSelected(url);
        }
 else {
          ((ReaderActivity)getActivity()).startAnimatingButton();
        }
        if (url.contains(""String_Node_Str"")) {
          loadDetailListener.onLoadDetail();
        }
      }
    }
    @Override public void onPageFinished(    WebView view,    String url){
      if (getActivity() != null && !getActivity().isFinishing())       ((ReaderActivity)getActivity()).stopAnimatingButton();
    }
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      return false;
    }
  }
);
  this.setDefaultWebViewSettings(wv);
  new loadReaderTask().execute(null,null,null,null);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  CookieSyncManager.createInstance(this.getActivity().getApplicationContext());
  View v=inflater.inflate(R.layout.reader_wpcom,container,false);
  if (WordPress.currentBlog == null) {
    if (WordPress.setCurrentBlogToLastActive() == null) {
      Toast.makeText(getActivity().getApplicationContext(),getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
      getActivity().finish();
    }
  }
  wv=(WebView)v.findViewById(R.id.webView);
  wv.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);
  wv.addJavascriptInterface(new JavaScriptInterface(getActivity().getApplicationContext()),interfaceNameForJS);
  wv.setWebViewClient(new WebViewClient(){
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      if (isAdded()) {
        if (url.equalsIgnoreCase(Constants.readerDetailURL)) {
          view.stopLoading();
          wv.loadUrl(""String_Node_Str"");
          wv.loadUrl(""String_Node_Str"");
          onPostSelectedListener.onPostSelected(url);
        }
 else {
          ((ReaderActivity)getActivity()).startAnimatingButton();
        }
        if (url.contains(""String_Node_Str"")) {
          loadDetailListener.onLoadDetail();
        }
      }
    }
    @Override public void onPageFinished(    WebView view,    String url){
      if (getActivity() != null && !getActivity().isFinishing())       ((ReaderActivity)getActivity()).stopAnimatingButton();
    }
    @Override public void onReceivedError(    WebView view,    int errorCode,    String description,    String failingUrl){
      ((ReaderActivity)getActivity()).stopAnimatingButton();
      super.onReceivedError(view,errorCode,description,failingUrl);
    }
    @Override public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      return false;
    }
  }
);
  this.setDefaultWebViewSettings(wv);
  new loadReaderTask().execute(null,null,null,null);
  return v;
}",0.8868969153704191
15174,"protected void onPostExecute(List<?> result){
  CookieManager cookieManager=CookieManager.getInstance();
  final String cookie=cookieManager.getCookie(""String_Node_Str"");
  new Thread(new Runnable(){
    public void run(){
      try {
        HttpClient httpclient=new DefaultHttpClient();
        HttpProtocolParams.setUserAgent(httpclient.getParams(),""String_Node_Str"");
        String readerURL=Constants.readerURL + ""String_Node_Str"";
        HttpGet httpGet=new HttpGet(readerURL);
        httpGet.setHeader(""String_Node_Str"",cookie);
        httpclient.execute(httpGet);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
).start();
}","protected void onPostExecute(List<?> result){
  ((ReaderActivity)getActivity()).stopAnimatingButton();
  CookieManager cookieManager=CookieManager.getInstance();
  final String cookie=cookieManager.getCookie(""String_Node_Str"");
  new Thread(new Runnable(){
    public void run(){
      try {
        HttpClient httpclient=new DefaultHttpClient();
        HttpProtocolParams.setUserAgent(httpclient.getParams(),""String_Node_Str"");
        String readerURL=Constants.readerURL + ""String_Node_Str"";
        HttpGet httpGet=new HttpGet(readerURL);
        httpGet.setHeader(""String_Node_Str"",cookie);
        httpclient.execute(httpGet);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
).start();
}",0.9593727726300784
15175,"private boolean savePost(boolean autoSave){
  String title=mTitleEditText.getText().toString();
  String password=mPasswordEditText.getText().toString();
  String pubDate=mPubDateText.getText().toString();
  String content=""String_Node_Str"";
  if (mLocalDraft || mIsNew && !autoSave) {
    Editable e=mContentEditText.getText();
    if (android.os.Build.VERSION.SDK_INT >= 14) {
      CharacterStyle[] style=e.getSpans(0,e.length(),CharacterStyle.class);
      for (int i=0; i < style.length; i++) {
        if (style[i].getClass().getName().equals(""String_Node_Str""))         e.removeSpan(style[i]);
      }
    }
    content=EscapeUtils.unescapeHtml(WPHtml.toHtml(e));
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    content=mContentEditText.getText().toString();
  }
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (!mIsNew)     pubDateTimestamp=mPost.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!mIsPage) {
    tags=mTagsEditText.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"") && !autoSave) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPostActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(getString(R.id.ok),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        dialog.dismiss();
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!mIsNew) {
      mPost.deleteMediaFiles();
      Editable s=mContentEditText.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(mPost.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save();
          int tagStart=s.getSpanStart(wpIS);
          if (!autoSave) {
            s.removeSpan(wpIS);
            s.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
            if (mLocalDraft)             content=EscapeUtils.unescapeHtml(WPHtml.toHtml(s));
 else             content=s.toString();
          }
        }
      }
    }
    final String moreTag=""String_Node_Str"";
    int selectedStatus=mStatusSpinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
case 4:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (mBlog.isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mIsNew) {
mPost=new Post(mBlogID,title,content,images,pubDateTimestamp,mCategories.toString(),tags,status,password,latitude,longitude,mIsPage,postFormat,true,false);
mPost.setLocalDraft(true);
if (content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
success=mPost.save();
if (success) {
mIsNew=false;
mIsNewDraft=true;
}
mPost.deleteMediaFiles();
Spannable s=mContentEditText.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(mPost.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFeatured(wpIS.isFeatured());
mf.setFeaturedInPost(wpIS.isFeaturedInPost());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save();
}
}
WordPress.currentPost=mPost;
}
 else {
if (mCurrentLocation == null) {
latitude=mPost.getLatitude();
longitude=mPost.getLongitude();
}
mPost.setTitle(title);
if (mLocalDraft && content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
 else {
mPost.setDescription(content);
mPost.setMt_text_more(""String_Node_Str"");
}
mPost.setMediaPaths(images);
mPost.setDate_created_gmt(pubDateTimestamp);
mPost.setCategories(mCategories);
mPost.setMt_keywords(tags);
mPost.setPost_status(status);
mPost.setWP_password(password);
mPost.setLatitude(latitude);
mPost.setLongitude(longitude);
mPost.setWP_post_form(postFormat);
if (!mPost.isLocalDraft()) mPost.setLocalChange(true);
success=mPost.update();
}
}
return success;
}","private boolean savePost(boolean autoSave){
  String title=mTitleEditText.getText().toString();
  String password=mPasswordEditText.getText().toString();
  String pubDate=mPubDateText.getText().toString();
  String content=""String_Node_Str"";
  if (mLocalDraft || mIsNew && !autoSave) {
    Editable e=mContentEditText.getText();
    if (android.os.Build.VERSION.SDK_INT >= 14) {
      CharacterStyle[] style=e.getSpans(0,e.length(),CharacterStyle.class);
      for (int i=0; i < style.length; i++) {
        if (style[i].getClass().getName().equals(""String_Node_Str""))         e.removeSpan(style[i]);
      }
    }
    content=EscapeUtils.unescapeHtml(WPHtml.toHtml(e));
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"");
    content=content.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    content=mContentEditText.getText().toString();
  }
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (mIsCustomPubDate)     pubDateTimestamp=mCustomPubDate;
 else     if (!mIsNew)     pubDateTimestamp=mPost.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!mIsPage) {
    tags=mTagsEditText.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=mPostFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"") && !autoSave) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPostActivity.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        dialog.dismiss();
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!mIsNew) {
      mPost.deleteMediaFiles();
      Editable s=mContentEditText.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(mPost.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFeaturedInPost(wpIS.isFeaturedInPost());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save();
          int tagStart=s.getSpanStart(wpIS);
          if (!autoSave) {
            s.removeSpan(wpIS);
            s.insert(tagStart,""String_Node_Str"" + wpIS.getImageSource().toString() + ""String_Node_Str"");
            if (mLocalDraft)             content=EscapeUtils.unescapeHtml(WPHtml.toHtml(s));
 else             content=s.toString();
          }
        }
      }
    }
    final String moreTag=""String_Node_Str"";
    int selectedStatus=mStatusSpinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
case 4:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (mBlog.isLocation()) {
try {
latitude=mCurrentLocation.getLatitude();
longitude=mCurrentLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
if (mIsNew) {
mPost=new Post(mBlogID,title,content,images,pubDateTimestamp,mCategories.toString(),tags,status,password,latitude,longitude,mIsPage,postFormat,true,false);
mPost.setLocalDraft(true);
if (content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
success=mPost.save();
if (success) {
mIsNew=false;
mIsNewDraft=true;
}
mPost.deleteMediaFiles();
Spannable s=mContentEditText.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(mPost.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFeatured(wpIS.isFeatured());
mf.setFeaturedInPost(wpIS.isFeaturedInPost());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save();
}
}
WordPress.currentPost=mPost;
}
 else {
if (mCurrentLocation == null) {
latitude=mPost.getLatitude();
longitude=mPost.getLongitude();
}
mPost.setTitle(title);
if (mLocalDraft && content.indexOf(moreTag) >= 0) {
mPost.setDescription(content.substring(0,content.indexOf(moreTag)));
mPost.setMt_text_more(content.substring(content.indexOf(moreTag) + moreTag.length(),content.length()));
}
 else {
mPost.setDescription(content);
mPost.setMt_text_more(""String_Node_Str"");
}
mPost.setMediaPaths(images);
mPost.setDate_created_gmt(pubDateTimestamp);
mPost.setCategories(mCategories);
mPost.setMt_keywords(tags);
mPost.setPost_status(status);
mPost.setWP_password(password);
mPost.setLatitude(latitude);
mPost.setLongitude(longitude);
mPost.setWP_post_form(postFormat);
if (!mPost.isLocalDraft()) mPost.setLocalChange(true);
success=mPost.update();
}
}
return success;
}",0.9978583326723248
15176,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  ActionBar actionBar=getSupportActionBar();
  actionBar.setHomeButtonEnabled(true);
  actionBar.setDisplayHomeAsUpEnabled(true);
  Calendar c=Calendar.getInstance();
  mYear=c.get(Calendar.YEAR);
  mMonth=c.get(Calendar.MONTH);
  mDay=c.get(Calendar.DAY_OF_MONTH);
  mHour=c.get(Calendar.HOUR_OF_DAY);
  mMinute=c.get(Calendar.MINUTE);
  mCategories=new JSONArray();
  mAutoSaveHandler=new Handler();
  mSelectedCategories=new Vector<String>();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    if (!selectBlogForShareAction())     return;
  }
 else {
    initBlog();
    if (extras != null) {
      mAccountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      mPostID=extras.getLong(""String_Node_Str"");
      mLocalDraft=extras.getBoolean(""String_Node_Str"",false);
      mIsPage=extras.getBoolean(""String_Node_Str"",false);
      mIsNew=extras.getBoolean(""String_Node_Str"",false);
      if (savedInstanceState != null) {
        mCurrentActivityRequest=savedInstanceState.getInt(""String_Node_Str"");
        if (savedInstanceState.getString(""String_Node_Str"") != null)         mMediaCapturePath=savedInstanceState.getString(""String_Node_Str"");
      }
 else {
        mQuickMediaType=extras.getInt(""String_Node_Str"");
      }
      if (extras.getBoolean(""String_Node_Str"")) {
        mBlogID=extras.getInt(""String_Node_Str"");
      }
 else {
        mBlogID=WordPress.currentBlog.getId();
      }
      try {
        mBlog=new Blog(mBlogID);
        WordPress.currentBlog=mBlog;
      }
 catch (      Exception e) {
        showBlogErrorAndFinish();
        return;
      }
      if (!mIsNew) {
        try {
          mPost=new Post(mBlogID,mPostID,mIsPage);
          if (mPost == null) {
            Toast.makeText(this,getResources().getText(R.string.post_not_found),Toast.LENGTH_LONG).show();
            finish();
            return;
          }
 else {
            WordPress.currentPost=mPost;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          finish();
        }
      }
    }
    if (mIsNew) {
      mLocalDraft=true;
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  setContentView(R.layout.edit);
  mContentEditText=(WPEditText)findViewById(R.id.postContent);
  mTitleEditText=(EditText)findViewById(R.id.title);
  mPasswordEditText=(EditText)findViewById(R.id.post_password);
  mLocationText=(TextView)findViewById(R.id.locationText);
  mBoldToggleButton=(ToggleButton)findViewById(R.id.bold);
  mEmToggleButton=(ToggleButton)findViewById(R.id.em);
  mBquoteToggleButton=(ToggleButton)findViewById(R.id.bquote);
  mUnderlineToggleButton=(ToggleButton)findViewById(R.id.underline);
  mStrikeToggleButton=(ToggleButton)findViewById(R.id.strike);
  mCategoriesText=(TextView)findViewById(R.id.selectedCategories);
  mAddPictureButton=(ImageButton)findViewById(R.id.addPictureButton);
  mPubDateButton=(Button)findViewById(R.id.pubDateButton);
  mPubDateText=(TextView)findViewById(R.id.pubDate);
  mLinkButton=(Button)findViewById(R.id.link);
  mMoreButton=(Button)findViewById(R.id.more);
  mStatusSpinner=(Spinner)findViewById(R.id.status);
  mTagsEditText=(EditText)findViewById(R.id.tags);
  mFormatBar=(RelativeLayout)findViewById(R.id.formatBar);
  ((TextView)findViewById(R.id.statusLabel)).setText(getResources().getString(R.string.status).toUpperCase());
  ((TextView)findViewById(R.id.postFormatLabel)).setText(getResources().getString(R.string.post_format).toUpperCase());
  ((TextView)findViewById(R.id.pubDateLabel)).setText(getResources().getString(R.string.publish_date).toUpperCase());
  if (mIsPage) {
    ((LinearLayout)findViewById(R.id.section2)).setVisibility(View.GONE);
    ((RelativeLayout)findViewById(R.id.section3)).setVisibility(View.GONE);
    ((TextView)findViewById(R.id.postFormatLabel)).setVisibility(View.GONE);
    ((Spinner)findViewById(R.id.postFormat)).setVisibility(View.GONE);
  }
 else {
    if (mBlog.getPostFormats().equals(""String_Node_Str"")) {
      List<Object> args=new Vector<Object>();
      args.add(mBlog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      mPostFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      mPostFormats=defaultPostFormatTitles;
    }
 else {
      try {
        Gson gson=new Gson();
        Type type=new TypeToken<Map<String,String>>(){
        }
.getType();
        Map<String,String> jsonPostFormats=gson.fromJson(mBlog.getPostFormats(),type);
        mPostFormats=new String[jsonPostFormats.size()];
        mPostFormatTitles=new String[jsonPostFormats.size()];
        int i=0;
        for (        Map.Entry<String,String> entry : jsonPostFormats.entrySet()) {
          String key=entry.getKey();
          String val=entry.getValue();
          mPostFormats[i]=key;
          mPostFormatTitles[i]=val;
          i++;
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,mPostFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!mIsNew) {
      try {
        if (!mPost.getWP_post_format().equals(""String_Node_Str""))         activePostFormat=mPost.getWP_post_format();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int i=0; i < mPostFormats.length; i++) {
      if (mPostFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mStatusSpinner.setAdapter(adapter);
  getLocationProvider();
  if (mIsNew) {
    if (mQuickMediaType >= 0) {
      if (mQuickMediaType == Constants.QUICK_POST_PHOTO_CAMERA)       launchCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_PHOTO_LIBRARY)       launchPictureLibrary();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_CAMERA)       launchVideoCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_LIBRARY)       launchVideoLibrary();
      mLocalDraft=extras.getBoolean(""String_Node_Str"");
    }
  }
 else {
    mTitleEditText.setText(mPost.getTitle());
    if (mPost.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      mStatusSpinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!mPost.getMt_text_more().equals(""String_Node_Str"")) {
      if (mPost.isLocalDraft())       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
 else       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
    }
 else     contentHTML=mPost.getDescription();
    try {
      if (mPost.isLocalDraft())       mContentEditText.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPostActivity.this,mPost));
 else       mContentEditText.setText(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    long pubDate=mPost.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPostActivity.this,pubDate,flags);
        mPubDateText.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (mPost.getWP_password() != null)     mPasswordEditText.setText(mPost.getWP_password());
    if (mPost.getPost_status() != null) {
      String status=mPost.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(4,true);
      }
    }
    if (!mIsPage) {
      if (mPost.getCategories() != null) {
        mCategories=mPost.getCategories();
        if (!mCategories.equals(""String_Node_Str"")) {
          for (int i=0; i < mCategories.length(); i++) {
            try {
              mSelectedCategories.add(mCategories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          mCategoriesText.setVisibility(View.VISIBLE);
          mCategoriesText.setText(getString(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      Double latitude=mPost.getLatitude();
      Double longitude=mPost.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
    }
    String tags=mPost.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      mTagsEditText.setText(tags);
    }
  }
  if (!mIsPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(this);
  }
  registerForContextMenu(mAddPictureButton);
  mContentEditText.setOnSelectionChangedListener(this);
  mContentEditText.setOnTouchListener(this);
  mContentEditText.addTextChangedListener(this);
  mContentEditText.setOnFocusChangeListener(this);
  mAddPictureButton.setOnClickListener(this);
  mPubDateButton.setOnClickListener(this);
  mBoldToggleButton.setOnClickListener(this);
  mLinkButton.setOnClickListener(this);
  mEmToggleButton.setOnClickListener(this);
  mUnderlineToggleButton.setOnClickListener(this);
  mStrikeToggleButton.setOnClickListener(this);
  mBquoteToggleButton.setOnClickListener(this);
  mMoreButton.setOnClickListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  ActionBar actionBar=getSupportActionBar();
  actionBar.setHomeButtonEnabled(true);
  actionBar.setDisplayHomeAsUpEnabled(true);
  Calendar c=Calendar.getInstance();
  mYear=c.get(Calendar.YEAR);
  mMonth=c.get(Calendar.MONTH);
  mDay=c.get(Calendar.DAY_OF_MONTH);
  mHour=c.get(Calendar.HOUR_OF_DAY);
  mMinute=c.get(Calendar.MINUTE);
  mCategories=new JSONArray();
  mAutoSaveHandler=new Handler();
  mSelectedCategories=new Vector<String>();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    if (!selectBlogForShareAction())     return;
  }
 else {
    initBlog();
    if (extras != null) {
      mAccountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      mPostID=extras.getLong(""String_Node_Str"");
      mLocalDraft=extras.getBoolean(""String_Node_Str"",false);
      mIsPage=extras.getBoolean(""String_Node_Str"",false);
      mIsNew=extras.getBoolean(""String_Node_Str"",false);
      if (savedInstanceState != null) {
        mCurrentActivityRequest=savedInstanceState.getInt(""String_Node_Str"");
        if (savedInstanceState.getString(""String_Node_Str"") != null)         mMediaCapturePath=savedInstanceState.getString(""String_Node_Str"");
      }
 else {
        mQuickMediaType=extras.getInt(""String_Node_Str"",-1);
      }
      if (extras.getBoolean(""String_Node_Str"")) {
        mBlogID=extras.getInt(""String_Node_Str"");
      }
 else {
        mBlogID=WordPress.currentBlog.getId();
      }
      try {
        mBlog=new Blog(mBlogID);
        WordPress.currentBlog=mBlog;
      }
 catch (      Exception e) {
        showBlogErrorAndFinish();
        return;
      }
      if (!mIsNew) {
        try {
          mPost=new Post(mBlogID,mPostID,mIsPage);
          if (mPost == null) {
            Toast.makeText(this,getResources().getText(R.string.post_not_found),Toast.LENGTH_LONG).show();
            finish();
            return;
          }
 else {
            WordPress.currentPost=mPost;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          finish();
        }
      }
    }
    if (mIsNew) {
      mLocalDraft=true;
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getString((mIsPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  setContentView(R.layout.edit);
  mContentEditText=(WPEditText)findViewById(R.id.postContent);
  mTitleEditText=(EditText)findViewById(R.id.title);
  mPasswordEditText=(EditText)findViewById(R.id.post_password);
  mLocationText=(TextView)findViewById(R.id.locationText);
  mBoldToggleButton=(ToggleButton)findViewById(R.id.bold);
  mEmToggleButton=(ToggleButton)findViewById(R.id.em);
  mBquoteToggleButton=(ToggleButton)findViewById(R.id.bquote);
  mUnderlineToggleButton=(ToggleButton)findViewById(R.id.underline);
  mStrikeToggleButton=(ToggleButton)findViewById(R.id.strike);
  mCategoriesText=(TextView)findViewById(R.id.selectedCategories);
  mAddPictureButton=(ImageButton)findViewById(R.id.addPictureButton);
  mPubDateButton=(Button)findViewById(R.id.pubDateButton);
  mPubDateText=(TextView)findViewById(R.id.pubDate);
  mLinkButton=(Button)findViewById(R.id.link);
  mMoreButton=(Button)findViewById(R.id.more);
  mStatusSpinner=(Spinner)findViewById(R.id.status);
  mTagsEditText=(EditText)findViewById(R.id.tags);
  mFormatBar=(RelativeLayout)findViewById(R.id.formatBar);
  ((TextView)findViewById(R.id.statusLabel)).setText(getResources().getString(R.string.status).toUpperCase());
  ((TextView)findViewById(R.id.postFormatLabel)).setText(getResources().getString(R.string.post_format).toUpperCase());
  ((TextView)findViewById(R.id.pubDateLabel)).setText(getResources().getString(R.string.publish_date).toUpperCase());
  if (mIsPage) {
    ((LinearLayout)findViewById(R.id.section2)).setVisibility(View.GONE);
    ((RelativeLayout)findViewById(R.id.section3)).setVisibility(View.GONE);
    ((TextView)findViewById(R.id.postFormatLabel)).setVisibility(View.GONE);
    ((Spinner)findViewById(R.id.postFormat)).setVisibility(View.GONE);
  }
 else {
    if (mBlog.getPostFormats().equals(""String_Node_Str"")) {
      List<Object> args=new Vector<Object>();
      args.add(mBlog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      mPostFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      mPostFormats=defaultPostFormatTitles;
    }
 else {
      try {
        Gson gson=new Gson();
        Type type=new TypeToken<Map<String,String>>(){
        }
.getType();
        Map<String,String> jsonPostFormats=gson.fromJson(mBlog.getPostFormats(),type);
        mPostFormats=new String[jsonPostFormats.size()];
        mPostFormatTitles=new String[jsonPostFormats.size()];
        int i=0;
        for (        Map.Entry<String,String> entry : jsonPostFormats.entrySet()) {
          String key=entry.getKey();
          String val=entry.getValue();
          mPostFormats[i]=key;
          mPostFormatTitles[i]=val;
          i++;
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,mPostFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!mIsNew) {
      try {
        if (!mPost.getWP_post_format().equals(""String_Node_Str""))         activePostFormat=mPost.getWP_post_format();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int i=0; i < mPostFormats.length; i++) {
      if (mPostFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mStatusSpinner.setAdapter(adapter);
  getLocationProvider();
  if (mIsNew) {
    if (mQuickMediaType >= 0) {
      if (mQuickMediaType == Constants.QUICK_POST_PHOTO_CAMERA)       launchCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_PHOTO_LIBRARY)       launchPictureLibrary();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_CAMERA)       launchVideoCamera();
 else       if (mQuickMediaType == Constants.QUICK_POST_VIDEO_LIBRARY)       launchVideoLibrary();
      mLocalDraft=extras.getBoolean(""String_Node_Str"");
    }
  }
 else {
    mTitleEditText.setText(mPost.getTitle());
    if (mPost.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      mStatusSpinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!mPost.getMt_text_more().equals(""String_Node_Str"")) {
      if (mPost.isLocalDraft())       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
 else       contentHTML=mPost.getDescription() + ""String_Node_Str"" + mPost.getMt_text_more();
    }
 else     contentHTML=mPost.getDescription();
    try {
      if (mPost.isLocalDraft())       mContentEditText.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPostActivity.this,mPost));
 else       mContentEditText.setText(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    long pubDate=mPost.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPostActivity.this,pubDate,flags);
        mPubDateText.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (mPost.getWP_password() != null)     mPasswordEditText.setText(mPost.getWP_password());
    if (mPost.getPost_status() != null) {
      String status=mPost.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        mStatusSpinner.setSelection(4,true);
      }
    }
    if (!mIsPage) {
      if (mPost.getCategories() != null) {
        mCategories=mPost.getCategories();
        if (!mCategories.equals(""String_Node_Str"")) {
          for (int i=0; i < mCategories.length(); i++) {
            try {
              mSelectedCategories.add(mCategories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          mCategoriesText.setVisibility(View.VISIBLE);
          mCategoriesText.setText(getString(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      Double latitude=mPost.getLatitude();
      Double longitude=mPost.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
    }
    String tags=mPost.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      mTagsEditText.setText(tags);
    }
  }
  if (!mIsPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(this);
  }
  registerForContextMenu(mAddPictureButton);
  mContentEditText.setOnSelectionChangedListener(this);
  mContentEditText.setOnTouchListener(this);
  mContentEditText.addTextChangedListener(this);
  mContentEditText.setOnFocusChangeListener(this);
  mAddPictureButton.setOnClickListener(this);
  mPubDateButton.setOnClickListener(this);
  mBoldToggleButton.setOnClickListener(this);
  mLinkButton.setOnClickListener(this);
  mEmToggleButton.setOnClickListener(this);
  mUnderlineToggleButton.setOnClickListener(this);
  mStrikeToggleButton.setOnClickListener(this);
  mBquoteToggleButton.setOnClickListener(this);
  mMoreButton.setOnClickListener(this);
}",0.9998712501609373
15177,"@Override public void drawSeries(Canvas canvas,GraphViewData[] values,float graphwidth,float graphheight,float border,double minX,double minY,double diffX,double diffY,float horstart,GraphViewSeriesStyle style){
  double lastEndY=0;
  double lastEndX=0;
  if (drawBackground) {
    float startY=graphheight + border;
    for (int i=0; i < values.length; i++) {
      double valY=values[i].valueY - minY;
      double ratY=valY / diffY;
      double y=graphheight * ratY;
      double valX=values[i].valueX - minX;
      double ratX=valX / diffX;
      double x=graphwidth * ratX;
      float endX=(float)x + (horstart + 1);
      float endY=(float)(border - y) + graphheight + 2;
      if (i > 0) {
        int numSpace=(int)((endX - lastEndX) / 3f) + 1;
        for (int xi=0; xi < numSpace; xi++) {
          float spaceX=(float)(lastEndX + ((endX - lastEndX) * xi / (numSpace - 1)));
          float spaceY=(float)(lastEndY + ((endY - lastEndY) * xi / (numSpace - 1)));
          float startX=spaceX;
          if (startX - horstart > 1) {
            canvas.drawLine(startX,startY,spaceX,spaceY,paintBackground);
          }
        }
      }
      lastEndY=endY;
      lastEndX=endX;
    }
  }
  paint.setStrokeWidth(style.thickness);
  paint.setColor(style.color);
  lastEndY=0;
  lastEndX=0;
  for (int i=0; i < values.length; i++) {
    double valY=values[i].valueY - minY;
    double ratY=valY / diffY;
    double y=graphheight * ratY;
    double valX=values[i].valueX - minX;
    double ratX=valX / diffX;
    double x=graphwidth * ratX;
    if (i > 0) {
      float startX=(float)lastEndX + (horstart + 1);
      float startY=(float)(border - lastEndY) + graphheight;
      float endX=(float)x + (horstart + 1);
      float endY=(float)(border - y) + graphheight;
      canvas.drawLine(startX,startY,endX,endY,paint);
    }
    lastEndY=y;
    lastEndX=x;
  }
}","@Override public void drawSeries(Canvas canvas,GraphViewData[] values,float graphwidth,float graphheight,float border,double minX,double minY,double diffX,double diffY,float horstart,GraphViewSeriesStyle style){
  double lastEndY=0;
  double lastEndX=0;
  if (drawBackground) {
    float startY=graphheight + border;
    for (int i=0; i < values.length; i++) {
      double valY=values[i].valueY - minY;
      double ratY=valY / diffY;
      double y=graphheight * ratY;
      double valX=values[i].valueX - minX;
      double ratX=valX / diffX;
      double x=graphwidth * ratX;
      float endX=(float)x + (horstart + 1);
      float endY=(float)(border - y) + graphheight + 2;
      if (i > 0) {
        double numSpace=((endX - lastEndX) / 3f) + 1;
        for (int xi=0; xi < numSpace; xi++) {
          float spaceX=(float)(lastEndX + ((endX - lastEndX) * xi / (numSpace - 1)));
          float spaceY=(float)(lastEndY + ((endY - lastEndY) * xi / (numSpace - 1)));
          float startX=spaceX;
          if (startX - horstart > 1) {
            canvas.drawLine(startX,startY,spaceX,spaceY,paintBackground);
          }
        }
      }
      lastEndY=endY;
      lastEndX=endX;
    }
  }
  paint.setStrokeWidth(style.thickness);
  paint.setColor(style.color);
  lastEndY=0;
  lastEndX=0;
  for (int i=0; i < values.length; i++) {
    double valY=values[i].valueY - minY;
    double ratY=valY / diffY;
    double y=graphheight * ratY;
    double valX=values[i].valueX - minX;
    double ratX=valX / diffX;
    double x=graphwidth * ratX;
    if (i > 0) {
      float startX=(float)lastEndX + (horstart + 1);
      float startY=(float)(border - lastEndY) + graphheight;
      float endX=(float)x + (horstart + 1);
      float endY=(float)(border - y) + graphheight;
      canvas.drawLine(startX,startY,endX,endY,paint);
    }
    lastEndY=y;
    lastEndX=x;
  }
}",0.9962586851950828
15178,"@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder b=new AlertDialog.Builder(getActivity());
  if (!isXMLRPC) {
    b.setTitle(R.string.error);
    b.setPositiveButton(""String_Node_Str"",this);
    b.setMessage(this.getArguments().getString(""String_Node_Str""));
    return b.create();
  }
 else {
    String error=this.getArguments().getString(""String_Node_Str"");
    String message=this.getArguments().getString(""String_Node_Str"");
    if (error.contains(""String_Node_Str"")) {
      b.setIcon(android.R.drawable.ic_dialog_alert);
      b.setTitle(R.string.connection_error);
      b.setMessage(R.string.incorrect_credentials);
      b.setCancelable(true);
      b.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          Intent settingsIntent=new Intent(getActivity(),Settings.class);
          getActivity().startActivity(settingsIntent);
        }
      }
);
      b.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      return b.create();
    }
 else {
      b.setIcon(android.R.drawable.ic_dialog_alert);
      b.setTitle(R.string.connection_error);
      b.setMessage((error.contains(""String_Node_Str"")) ? error : message);
      b.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      b.setCancelable(true);
      return b.create();
    }
  }
}","@Override public Dialog onCreateDialog(Bundle savedInstanceState){
  AlertDialog.Builder b=new AlertDialog.Builder(getActivity());
  if (!isXMLRPC) {
    b.setTitle(R.string.error);
    b.setPositiveButton(""String_Node_Str"",this);
    b.setMessage(this.getArguments().getString(""String_Node_Str""));
    return b.create();
  }
 else {
    String error=this.getArguments().getString(""String_Node_Str"");
    if (error == null)     error=getString(R.string.error_generic);
    String message=this.getArguments().getString(""String_Node_Str"");
    if (message == null)     message=getString(R.string.error_generic);
    if (error.contains(""String_Node_Str"")) {
      b.setIcon(android.R.drawable.ic_dialog_alert);
      b.setTitle(R.string.connection_error);
      b.setMessage(R.string.incorrect_credentials);
      b.setCancelable(true);
      b.setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          Intent settingsIntent=new Intent(getActivity(),Settings.class);
          getActivity().startActivity(settingsIntent);
        }
      }
);
      b.setNegativeButton(R.string.no,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      return b.create();
    }
 else {
      b.setIcon(android.R.drawable.ic_dialog_alert);
      b.setTitle(R.string.connection_error);
      b.setMessage((error.contains(""String_Node_Str"")) ? error : message);
      b.setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      b.setCancelable(true);
      return b.create();
    }
  }
}",0.9595842956120092
15179,"private void initStats(){
  titleBar.startRotatingRefreshIcon();
  Blog blog=WordPress.currentBlog;
  int blogid=blog.getBlogId();
  if (blogid == 1 && blog.getApi_blogid() == null) {
    this.checkAPIBlogInfo();
  }
 else   if (!blog.isDotcomFlag() && blog.getDotcom_username() == null) {
    this.showLoginForm();
  }
 else {
    this.loadStats();
  }
}","private void initStats(){
  titleBar.startRotatingRefreshIcon();
  Blog blog=WordPress.currentBlog;
  if (!blog.isDotcomFlag() && blog.getApi_blogid() == null) {
    this.checkAPIBlogInfo();
  }
 else   if (!blog.isDotcomFlag() && blog.getDotcom_username() == null) {
    this.showLoginForm();
  }
 else {
    this.loadStats();
  }
}",0.9098837209302324
15180,"private void addMedia(String imgPath,Uri curStream){
  Bitmap resizedBitmap=null;
  ImageHelper ih=new ImageHelper();
  Display display=getWindowManager().getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (width > height)   width=height;
  HashMap<String,Object> mediaData=ih.getImageBytesForPath(imgPath,EditPost.this);
  if (mediaData == null) {
    Toast.makeText(EditPost.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
    return;
  }
  BitmapFactory.Options opts=new BitmapFactory.Options();
  opts.inJustDecodeBounds=true;
  byte[] bytes=(byte[])mediaData.get(""String_Node_Str"");
  BitmapFactory.decodeByteArray(bytes,0,bytes.length,opts);
  float conversionFactor=0.25f;
  if (opts.outWidth > opts.outHeight)   conversionFactor=0.40f;
  byte[] finalBytes=ih.createThumbnail(bytes,String.valueOf((int)(width * conversionFactor)),(String)mediaData.get(""String_Node_Str""),true);
  resizedBitmap=BitmapFactory.decodeByteArray(finalBytes,0,finalBytes.length);
  WPEditText content=(WPEditText)findViewById(R.id.postContent);
  int selectionStart=content.getSelectionStart();
  styleStart=selectionStart;
  int selectionEnd=content.getSelectionEnd();
  if (selectionStart > selectionEnd) {
    int temp=selectionEnd;
    selectionEnd=selectionStart;
    selectionStart=temp;
  }
  if (content.getText().length() == 0) {
    content.setText(""String_Node_Str"");
  }
  Editable s=content.getText();
  WPImageSpan is=new WPImageSpan(EditPost.this,resizedBitmap,curStream);
  String imageWidth=WordPress.currentBlog.getMaxImageWidth();
  if (!imageWidth.equals(""String_Node_Str"")) {
    try {
      is.setWidth(Integer.valueOf(imageWidth));
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
  }
  is.setTitle((String)mediaData.get(""String_Node_Str""));
  is.setImageSource(curStream);
  if (imgPath.contains(""String_Node_Str"")) {
    is.setVideo(true);
  }
  WPImageSpan[] click_spans=s.getSpans(selectionStart,selectionEnd,WPImageSpan.class);
  if (click_spans.length != 0) {
    s.insert(selectionEnd,""String_Node_Str"");
    selectionStart=selectionStart + 2;
    selectionEnd=selectionEnd + 2;
  }
  s.insert(selectionStart,""String_Node_Str"");
  s.setSpan(is,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
  s.setSpan(as,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  s.insert(selectionEnd + 1,""String_Node_Str"");
  try {
    content.setSelection(s.length());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void addMedia(String imgPath,Uri curStream){
  Bitmap resizedBitmap=null;
  ImageHelper ih=new ImageHelper();
  Display display=getWindowManager().getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (width > height)   width=height;
  HashMap<String,Object> mediaData=ih.getImageBytesForPath(imgPath,EditPost.this);
  if (mediaData == null) {
    Toast.makeText(EditPost.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
    return;
  }
  BitmapFactory.Options opts=new BitmapFactory.Options();
  opts.inJustDecodeBounds=true;
  byte[] bytes=(byte[])mediaData.get(""String_Node_Str"");
  BitmapFactory.decodeByteArray(bytes,0,bytes.length,opts);
  float conversionFactor=0.25f;
  if (opts.outWidth > opts.outHeight)   conversionFactor=0.40f;
  byte[] finalBytes=ih.createThumbnail(bytes,String.valueOf((int)(width * conversionFactor)),(String)mediaData.get(""String_Node_Str""),true);
  resizedBitmap=BitmapFactory.decodeByteArray(finalBytes,0,finalBytes.length);
  WPEditText content=(WPEditText)findViewById(R.id.postContent);
  int selectionStart=content.getSelectionStart();
  styleStart=selectionStart;
  int selectionEnd=content.getSelectionEnd();
  if (selectionStart > selectionEnd) {
    int temp=selectionEnd;
    selectionEnd=selectionStart;
    selectionStart=temp;
  }
  Editable s=content.getText();
  WPImageSpan is=new WPImageSpan(EditPost.this,resizedBitmap,curStream);
  String imageWidth=WordPress.currentBlog.getMaxImageWidth();
  if (!imageWidth.equals(""String_Node_Str"")) {
    try {
      is.setWidth(Integer.valueOf(imageWidth));
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
  }
  is.setTitle((String)mediaData.get(""String_Node_Str""));
  is.setImageSource(curStream);
  if (imgPath.contains(""String_Node_Str"")) {
    is.setVideo(true);
  }
  WPImageSpan[] click_spans=s.getSpans(selectionStart,selectionEnd,WPImageSpan.class);
  if (click_spans.length != 0) {
    s.insert(selectionEnd,""String_Node_Str"");
    selectionStart=selectionStart + 2;
    selectionEnd=selectionEnd + 2;
  }
  s.insert(selectionStart,""String_Node_Str"");
  s.setSpan(is,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
  s.setSpan(as,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  s.insert(selectionEnd + 1,""String_Node_Str"");
  try {
    content.setSelection(s.length());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9837195939475196
15181,"@Override protected Boolean doInBackground(Post... posts){
  post=posts[0];
  nm=(NotificationManager)context.getSystemService(""String_Node_Str"");
  String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
  String message=context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage;
  n=new Notification(R.drawable.notification_icon,message,System.currentTimeMillis());
  Intent notificationIntent=new Intent(context,Posts.class);
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.blogID)));
  notificationIntent.putExtra(""String_Node_Str"",true);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,Intent.FLAG_ACTIVITY_CLEAR_TOP);
  n.setLatestEventInfo(context,message,message,pendingIntent);
  notificationID=22 + Integer.valueOf(post.blogID);
  nm.notify(notificationID,n);
  if (post.post_status == null) {
    post.post_status=""String_Node_Str"";
  }
  Boolean publishThis=false;
  Spannable s;
  String descriptionContent=""String_Node_Str"", moreContent=""String_Node_Str"";
  int moreCount=1;
  if (post.getMt_text_more() != null)   moreCount++;
  String imgTags=""String_Node_Str"";
  Pattern pattern=Pattern.compile(imgTags);
  for (int x=0; x < moreCount; x++) {
    if (post.isLocalDraft()) {
      if (x == 0)       s=(Spannable)WPHtml.fromHtml(post.getDescription(),context,post);
 else       s=(Spannable)WPHtml.fromHtml(post.getMt_text_more(),context,post);
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          String prompt=context.getResources().getText(R.string.uploading_media_item) + String.valueOf(i + 1);
          n.setLatestEventInfo(context,context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage,prompt,n.contentIntent);
          nm.notify(notificationID,n);
          WPImageSpan wpIS=click_spans[i];
          int start=s.getSpanStart(wpIS);
          int end=s.getSpanEnd(wpIS);
          MediaFile mf=new MediaFile();
          mf.setPostID(post.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          String imgHTML=uploadImage(mf);
          if (imgHTML != null) {
            SpannableString ss=new SpannableString(imgHTML);
            s.setSpan(ss,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            s.removeSpan(wpIS);
          }
 else {
            s.removeSpan(wpIS);
            mediaError=true;
          }
        }
      }
      if (x == 0)       descriptionContent=WPHtml.toHtml(s);
 else       moreContent=WPHtml.toHtml(s);
    }
 else {
      Matcher matcher;
      if (x == 0) {
        descriptionContent=post.getDescription();
        matcher=pattern.matcher(descriptionContent);
      }
 else {
        moreContent=post.getMt_text_more();
        matcher=pattern.matcher(moreContent);
      }
      while (matcher.find()) {
        String tag=""String_Node_Str"";
        if (x == 0)         tag=descriptionContent.substring(matcher.start(),matcher.end());
 else         tag=moreContent.substring(matcher.start(),matcher.end());
        Pattern p=Pattern.compile(""String_Node_Str"");
        Matcher m=p.matcher(tag);
        String imgPath=""String_Node_Str"";
        if (m.find()) {
          imgPath=m.group(1);
          if (!imgPath.equals(""String_Node_Str"")) {
            MediaFile mf=WordPress.wpDB.getMediaFile(imgPath,post);
            if (mf != null) {
              String imgHTML=uploadImage(mf);
              if (imgHTML != null) {
                if (x == 0)                 descriptionContent=descriptionContent.replace(tag,imgHTML);
 else                 moreContent=moreContent.replace(tag,imgHTML);
              }
 else {
                if (x == 0)                 descriptionContent=descriptionContent.replace(tag,""String_Node_Str"");
 else                 moreContent=moreContent.replace(tag,""String_Node_Str"");
                mediaError=true;
              }
            }
          }
        }
      }
    }
  }
  JSONArray categories=post.getCategories();
  String[] theCategories=null;
  if (categories != null) {
    theCategories=new String[categories.length()];
    for (int i=0; i < categories.length(); i++) {
      try {
        theCategories[i]=categories.getString(i);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
  Map<String,Object> contentStruct=new HashMap<String,Object>();
  if (!post.isPage && post.isLocalDraft()) {
    HashMap<?,?> globalSettings=WordPress.wpDB.getNotificationOptions(context);
    boolean taglineValue=false;
    String tagline=""String_Node_Str"";
    if (globalSettings != null) {
      if (globalSettings.get(""String_Node_Str"").toString().equals(""String_Node_Str"")) {
        taglineValue=true;
      }
      if (taglineValue) {
        tagline=globalSettings.get(""String_Node_Str"").toString();
        if (tagline != null) {
          String tag=""String_Node_Str"" + tagline + ""String_Node_Str"";
          if (moreContent == ""String_Node_Str"")           descriptionContent+=tag;
 else           moreContent+=tag;
        }
      }
    }
    if (!post.getWP_post_format().equals(""String_Node_Str"")) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       contentStruct.put(""String_Node_Str"",post.getWP_post_format());
    }
  }
  contentStruct.put(""String_Node_Str"",(post.isPage) ? ""String_Node_Str"" : ""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",post.title);
  long pubDate=post.date_created_gmt;
  if (pubDate != 0) {
    Date date_created_gmt=new Date(pubDate);
    contentStruct.put(""String_Node_Str"",date_created_gmt);
    Date dateCreated=new Date(pubDate + (date_created_gmt.getTimezoneOffset() * 60000));
    contentStruct.put(""String_Node_Str"",dateCreated);
  }
  if (!moreContent.equals(""String_Node_Str"")) {
    descriptionContent=descriptionContent + ""String_Node_Str"" + moreContent;
    post.mt_text_more=""String_Node_Str"";
  }
  if (post.isLocalDraft()) {
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",descriptionContent);
  if (!post.isPage) {
    if (post.mt_keywords != ""String_Node_Str"") {
      contentStruct.put(""String_Node_Str"",post.mt_keywords);
    }
    if (theCategories != null) {
      if (theCategories.length > 0)       contentStruct.put(""String_Node_Str"",theCategories);
    }
  }
  if (post.getMt_excerpt() != null)   contentStruct.put(""String_Node_Str"",post.getMt_excerpt());
  contentStruct.put((post.isPage) ? ""String_Node_Str"" : ""String_Node_Str"",post.post_status);
  Double latitude=0.0;
  Double longitude=0.0;
  if (!post.isPage) {
    latitude=(Double)post.getLatitude();
    longitude=(Double)post.getLongitude();
    if (latitude > 0) {
      HashMap<Object,Object> hLatitude=new HashMap<Object,Object>();
      hLatitude.put(""String_Node_Str"",""String_Node_Str"");
      hLatitude.put(""String_Node_Str"",latitude);
      HashMap<Object,Object> hLongitude=new HashMap<Object,Object>();
      hLongitude.put(""String_Node_Str"",""String_Node_Str"");
      hLongitude.put(""String_Node_Str"",longitude);
      HashMap<Object,Object> hPublic=new HashMap<Object,Object>();
      hPublic.put(""String_Node_Str"",""String_Node_Str"");
      hPublic.put(""String_Node_Str"",1);
      Object[] geo={hLatitude,hLongitude,hPublic};
      contentStruct.put(""String_Node_Str"",geo);
    }
  }
  XMLRPCClient client=new XMLRPCClient(post.blog.getUrl(),post.blog.getHttpuser(),post.blog.getHttppassword());
  if (post.quickPostType != null)   client.addQuickPostHeader(post.quickPostType);
  n.setLatestEventInfo(context,message,message,n.contentIntent);
  nm.notify(notificationID,n);
  if (post.wp_password != null) {
    contentStruct.put(""String_Node_Str"",post.wp_password);
  }
  Object[] params;
  if (post.isLocalDraft() && !post.uploaded)   params=new Object[]{post.blog.getBlogId(),post.blog.getUsername(),post.blog.getPassword(),contentStruct,publishThis};
 else   params=new Object[]{post.getPostid(),post.blog.getUsername(),post.blog.getPassword(),contentStruct,publishThis};
  try {
    client.call((post.isLocalDraft() && !post.uploaded) ? ""String_Node_Str"" : ""String_Node_Str"",params);
    post.setUploaded(true);
    post.setLocalChange(false);
    post.update();
    return true;
  }
 catch (  final XMLRPCException e) {
    error=e.getLocalizedMessage();
    mediaError=false;
    Log.i(""String_Node_Str"",error);
  }
  return false;
}","@Override protected Boolean doInBackground(Post... posts){
  post=posts[0];
  nm=(NotificationManager)context.getSystemService(""String_Node_Str"");
  String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
  String message=context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage;
  n=new Notification(R.drawable.notification_icon,message,System.currentTimeMillis());
  Intent notificationIntent=new Intent(context,Posts.class);
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.blogID)));
  notificationIntent.putExtra(""String_Node_Str"",true);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,Intent.FLAG_ACTIVITY_CLEAR_TOP);
  n.setLatestEventInfo(context,message,message,pendingIntent);
  notificationID=22 + Integer.valueOf(post.blogID);
  nm.notify(notificationID,n);
  if (post.post_status == null) {
    post.post_status=""String_Node_Str"";
  }
  Boolean publishThis=false;
  Spannable s;
  String descriptionContent=""String_Node_Str"", moreContent=""String_Node_Str"";
  int moreCount=1;
  if (post.getMt_text_more() != null)   moreCount++;
  String imgTags=""String_Node_Str"";
  Pattern pattern=Pattern.compile(imgTags);
  for (int x=0; x < moreCount; x++) {
    if (post.isLocalDraft()) {
      if (x == 0)       s=(Spannable)WPHtml.fromHtml(post.getDescription(),context,post);
 else       s=(Spannable)WPHtml.fromHtml(post.getMt_text_more(),context,post);
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          String prompt=context.getResources().getText(R.string.uploading_media_item) + String.valueOf(i + 1);
          n.setLatestEventInfo(context,context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage,prompt,n.contentIntent);
          nm.notify(notificationID,n);
          WPImageSpan wpIS=click_spans[i];
          int start=s.getSpanStart(wpIS);
          int end=s.getSpanEnd(wpIS);
          MediaFile mf=new MediaFile();
          mf.setPostID(post.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          String imgHTML=uploadImage(mf);
          if (imgHTML != null) {
            SpannableString ss=new SpannableString(imgHTML);
            s.setSpan(ss,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            s.removeSpan(wpIS);
          }
 else {
            s.removeSpan(wpIS);
            mediaError=true;
          }
        }
      }
      if (x == 0)       descriptionContent=WPHtml.toHtml(s);
 else       moreContent=WPHtml.toHtml(s);
    }
 else {
      Matcher matcher;
      if (x == 0) {
        descriptionContent=post.getDescription();
        matcher=pattern.matcher(descriptionContent);
      }
 else {
        moreContent=post.getMt_text_more();
        matcher=pattern.matcher(moreContent);
      }
      while (matcher.find()) {
        String tag=""String_Node_Str"";
        if (x == 0)         tag=descriptionContent.substring(matcher.start(),matcher.end());
 else         tag=moreContent.substring(matcher.start(),matcher.end());
        Pattern p=Pattern.compile(""String_Node_Str"");
        Matcher m=p.matcher(tag);
        String imgPath=""String_Node_Str"";
        if (m.find()) {
          imgPath=m.group(1);
          if (!imgPath.equals(""String_Node_Str"")) {
            MediaFile mf=WordPress.wpDB.getMediaFile(imgPath,post);
            if (mf != null) {
              String imgHTML=uploadImage(mf);
              if (imgHTML != null) {
                if (x == 0) {
                  descriptionContent=descriptionContent.replace(tag,imgHTML);
                  matcher=pattern.matcher(descriptionContent);
                }
 else {
                  moreContent=moreContent.replace(tag,imgHTML);
                  matcher=pattern.matcher(moreContent);
                }
              }
 else {
                if (x == 0)                 descriptionContent=descriptionContent.replace(tag,""String_Node_Str"");
 else                 moreContent=moreContent.replace(tag,""String_Node_Str"");
                mediaError=true;
              }
            }
          }
        }
      }
    }
  }
  JSONArray categories=post.getCategories();
  String[] theCategories=null;
  if (categories != null) {
    theCategories=new String[categories.length()];
    for (int i=0; i < categories.length(); i++) {
      try {
        theCategories[i]=categories.getString(i);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
  Map<String,Object> contentStruct=new HashMap<String,Object>();
  if (!post.isPage && post.isLocalDraft()) {
    HashMap<?,?> globalSettings=WordPress.wpDB.getNotificationOptions(context);
    boolean taglineValue=false;
    String tagline=""String_Node_Str"";
    if (globalSettings != null) {
      if (globalSettings.get(""String_Node_Str"").toString().equals(""String_Node_Str"")) {
        taglineValue=true;
      }
      if (taglineValue) {
        tagline=globalSettings.get(""String_Node_Str"").toString();
        if (tagline != null) {
          String tag=""String_Node_Str"" + tagline + ""String_Node_Str"";
          if (moreContent == ""String_Node_Str"")           descriptionContent+=tag;
 else           moreContent+=tag;
        }
      }
    }
    if (!post.getWP_post_format().equals(""String_Node_Str"")) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       contentStruct.put(""String_Node_Str"",post.getWP_post_format());
    }
  }
  contentStruct.put(""String_Node_Str"",(post.isPage) ? ""String_Node_Str"" : ""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",post.title);
  long pubDate=post.date_created_gmt;
  if (pubDate != 0) {
    Date date_created_gmt=new Date(pubDate);
    contentStruct.put(""String_Node_Str"",date_created_gmt);
    Date dateCreated=new Date(pubDate + (date_created_gmt.getTimezoneOffset() * 60000));
    contentStruct.put(""String_Node_Str"",dateCreated);
  }
  if (!moreContent.equals(""String_Node_Str"")) {
    descriptionContent=descriptionContent + ""String_Node_Str"" + moreContent;
    post.mt_text_more=""String_Node_Str"";
  }
  if (post.isLocalDraft()) {
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
  contentStruct.put(""String_Node_Str"",descriptionContent);
  if (!post.isPage) {
    if (post.mt_keywords != ""String_Node_Str"") {
      contentStruct.put(""String_Node_Str"",post.mt_keywords);
    }
    if (theCategories != null) {
      if (theCategories.length > 0)       contentStruct.put(""String_Node_Str"",theCategories);
    }
  }
  if (post.getMt_excerpt() != null)   contentStruct.put(""String_Node_Str"",post.getMt_excerpt());
  contentStruct.put((post.isPage) ? ""String_Node_Str"" : ""String_Node_Str"",post.post_status);
  Double latitude=0.0;
  Double longitude=0.0;
  if (!post.isPage) {
    latitude=(Double)post.getLatitude();
    longitude=(Double)post.getLongitude();
    if (latitude > 0) {
      HashMap<Object,Object> hLatitude=new HashMap<Object,Object>();
      hLatitude.put(""String_Node_Str"",""String_Node_Str"");
      hLatitude.put(""String_Node_Str"",latitude);
      HashMap<Object,Object> hLongitude=new HashMap<Object,Object>();
      hLongitude.put(""String_Node_Str"",""String_Node_Str"");
      hLongitude.put(""String_Node_Str"",longitude);
      HashMap<Object,Object> hPublic=new HashMap<Object,Object>();
      hPublic.put(""String_Node_Str"",""String_Node_Str"");
      hPublic.put(""String_Node_Str"",1);
      Object[] geo={hLatitude,hLongitude,hPublic};
      contentStruct.put(""String_Node_Str"",geo);
    }
  }
  XMLRPCClient client=new XMLRPCClient(post.blog.getUrl(),post.blog.getHttpuser(),post.blog.getHttppassword());
  if (post.quickPostType != null)   client.addQuickPostHeader(post.quickPostType);
  n.setLatestEventInfo(context,message,message,n.contentIntent);
  nm.notify(notificationID,n);
  if (post.wp_password != null) {
    contentStruct.put(""String_Node_Str"",post.wp_password);
  }
  Object[] params;
  if (post.isLocalDraft() && !post.uploaded)   params=new Object[]{post.blog.getBlogId(),post.blog.getUsername(),post.blog.getPassword(),contentStruct,publishThis};
 else   params=new Object[]{post.getPostid(),post.blog.getUsername(),post.blog.getPassword(),contentStruct,publishThis};
  try {
    client.call((post.isLocalDraft() && !post.uploaded) ? ""String_Node_Str"" : ""String_Node_Str"",params);
    post.setUploaded(true);
    post.setLocalChange(false);
    post.update();
    return true;
  }
 catch (  final XMLRPCException e) {
    error=e.getLocalizedMessage();
    mediaError=false;
    Log.i(""String_Node_Str"",error);
  }
  return false;
}",0.9906224293940225
15182,"public String uploadImage(MediaFile mf){
  String content=""String_Node_Str"";
  String finalThumbnailUrl=null;
  String finalImageUrl=null;
  if (mf.getFileName() != null) {
    XMLRPCClient client=new XMLRPCClient(post.blog.getUrl(),post.blog.getHttpuser(),post.blog.getHttppassword());
    String curImagePath=""String_Node_Str"";
    curImagePath=mf.getFileName();
    boolean video=false;
    if (curImagePath.contains(""String_Node_Str"")) {
      video=true;
    }
    if (video) {
      Uri videoUri=Uri.parse(curImagePath);
      File fVideo=null;
      String mimeType=""String_Node_Str"", xRes=""String_Node_Str"", yRes=""String_Node_Str"";
      if (videoUri.toString().contains(""String_Node_Str"")) {
        String[] projection;
        Uri imgPath;
        projection=new String[]{Video.Media._ID,Video.Media.DATA,Video.Media.MIME_TYPE,Video.Media.RESOLUTION};
        imgPath=videoUri;
        Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
        String thumbData=""String_Node_Str"";
        if (cur.moveToFirst()) {
          int mimeTypeColumn, resolutionColumn, dataColumn;
          dataColumn=cur.getColumnIndex(Video.Media.DATA);
          mimeTypeColumn=cur.getColumnIndex(Video.Media.MIME_TYPE);
          resolutionColumn=cur.getColumnIndex(Video.Media.RESOLUTION);
          mf=new MediaFile();
          thumbData=cur.getString(dataColumn);
          mimeType=cur.getString(mimeTypeColumn);
          fVideo=new File(thumbData);
          mf.setFilePath(fVideo.getPath());
          String resolution=cur.getString(resolutionColumn);
          if (resolution != null) {
            String[] resx=resolution.split(""String_Node_Str"");
            xRes=resx[0];
            yRes=resx[1];
          }
 else {
            if (!post.blog.getMaxImageWidth().equals(""String_Node_Str"")) {
              xRes=post.blog.getMaxImageWidth();
              yRes=String.valueOf(Math.round(Integer.valueOf(post.blog.getMaxImageWidth()) * 0.75));
            }
 else {
              xRes=""String_Node_Str"";
              yRes=""String_Node_Str"";
            }
          }
        }
      }
 else {
        fVideo=new File(videoUri.toString().replace(""String_Node_Str"",""String_Node_Str""));
      }
      String imageTitle=fVideo.getName();
      HashMap<String,Object> m=new HashMap<String,Object>();
      m.put(""String_Node_Str"",imageTitle);
      m.put(""String_Node_Str"",mimeType);
      m.put(""String_Node_Str"",mf);
      m.put(""String_Node_Str"",true);
      Object[] params={1,post.blog.getUsername(),post.blog.getPassword(),m};
      Object result=null;
      try {
        result=(Object)client.call(""String_Node_Str"",params);
      }
 catch (      XMLRPCException e) {
        String mediaErrorMsg=e.getLocalizedMessage();
        if (video) {
          if (mediaErrorMsg.contains(""String_Node_Str"")) {
            mediaErrorMsg=context.getResources().getString(R.string.vp_upgrade);
          }
        }
        return null;
      }
      HashMap<?,?> contentHash=new HashMap<Object,Object>();
      contentHash=(HashMap<?,?>)result;
      String resultURL=contentHash.get(""String_Node_Str"").toString();
      if (contentHash.containsKey(""String_Node_Str"")) {
        resultURL=contentHash.get(""String_Node_Str"").toString() + ""String_Node_Str"";
      }
 else {
        resultURL=String.format(""String_Node_Str"",xRes,yRes,resultURL,mimeType,resultURL);
      }
      content=content + resultURL;
    }
 else {
      for (int i=0; i < 2; i++) {
        curImagePath=mf.getFileName();
        if (i == 0 || post.blog.isFullSizeImage()) {
          Uri imageUri=Uri.parse(curImagePath);
          File jpeg=null;
          String mimeType=""String_Node_Str"", orientation=""String_Node_Str"", path=""String_Node_Str"";
          if (imageUri.toString().contains(""String_Node_Str"")) {
            String[] projection;
            Uri imgPath;
            projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE,Images.Media.ORIENTATION};
            imgPath=imageUri;
            Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
            String thumbData=""String_Node_Str"";
            if (cur.moveToFirst()) {
              int dataColumn, mimeTypeColumn, orientationColumn;
              dataColumn=cur.getColumnIndex(Images.Media.DATA);
              mimeTypeColumn=cur.getColumnIndex(Images.Media.MIME_TYPE);
              orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
              orientation=cur.getString(orientationColumn);
              thumbData=cur.getString(dataColumn);
              mimeType=cur.getString(mimeTypeColumn);
              jpeg=new File(thumbData);
              path=thumbData;
              mf.setFilePath(jpeg.getPath());
            }
          }
 else {
            path=imageUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
            jpeg=new File(path);
            mf.setFilePath(path);
          }
          if (jpeg == null) {
            break;
          }
          ImageHelper ih=new ImageHelper();
          orientation=ih.getExifOrientation(path,orientation);
          String imageTitle=jpeg.getName();
          byte[] finalBytes=null;
          if (i == 0) {
            byte[] bytes=new byte[(int)jpeg.length()];
            DataInputStream in=null;
            try {
              in=new DataInputStream(new FileInputStream(jpeg));
            }
 catch (            FileNotFoundException e) {
              e.printStackTrace();
            }
            try {
              in.readFully(bytes);
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            try {
              in.close();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            ImageHelper ih2=new ImageHelper();
            finalBytes=ih2.createThumbnail(bytes,String.valueOf(mf.getWidth()),orientation,false);
          }
          if (finalBytes == null) {
            error=context.getResources().getText(R.string.media_error).toString();
            return null;
          }
          Map<String,Object> m=new HashMap<String,Object>();
          m.put(""String_Node_Str"",imageTitle);
          m.put(""String_Node_Str"",mimeType);
          if (i == 0) {
            m.put(""String_Node_Str"",finalBytes);
          }
 else {
            m.put(""String_Node_Str"",mf);
          }
          m.put(""String_Node_Str"",true);
          Object[] params={1,post.blog.getUsername(),post.blog.getPassword(),m};
          Object result=null;
          try {
            result=(Object)client.call(""String_Node_Str"",params);
          }
 catch (          XMLRPCException e) {
            error=e.getMessage();
            return null;
          }
          HashMap<?,?> contentHash=new HashMap<Object,Object>();
          contentHash=(HashMap<?,?>)result;
          String resultURL=contentHash.get(""String_Node_Str"").toString();
          if (i == 0) {
            finalThumbnailUrl=resultURL;
          }
 else {
            if (post.blog.isFullSizeImage()) {
              finalImageUrl=resultURL;
            }
 else {
              finalImageUrl=""String_Node_Str"";
            }
          }
          String alignment=""String_Node_Str"";
switch (mf.getHorizontalAlignment()) {
case 0:
            alignment=""String_Node_Str"";
          break;
case 1:
        alignment=""String_Node_Str"";
      break;
case 2:
    alignment=""String_Node_Str"";
  break;
case 3:
alignment=""String_Node_Str"";
break;
}
String alignmentCSS=""String_Node_Str"" + alignment + ""String_Node_Str"";
if (resultURL != null) {
if (i != 0 && post.blog.isFullSizeImage()) {
content=content + ""String_Node_Str"" + finalImageUrl+ ""String_Node_Str""+ mf.getTitle()+ ""String_Node_Str""+ alignmentCSS+ ""String_Node_Str""+ finalThumbnailUrl+ ""String_Node_Str"";
}
 else {
if (i == 0 && post.blog.isFullSizeImage() == false) {
content=content + ""String_Node_Str"" + mf.getTitle()+ ""String_Node_Str""+ alignmentCSS+ ""String_Node_Str""+ finalThumbnailUrl+ ""String_Node_Str"";
}
}
if (!mf.getCaption().equals(""String_Node_Str"")) {
content=String.format(""String_Node_Str"",alignment,mf.getWidth(),EscapeUtils.escapeHtml(mf.getCaption()),content);
}
}
}
}
}
}
return content;
}","public String uploadImage(MediaFile mf){
  String content=""String_Node_Str"";
  String finalThumbnailUrl=null;
  String finalImageUrl=null;
  if (mf.getFileName() != null) {
    XMLRPCClient client=new XMLRPCClient(post.blog.getUrl(),post.blog.getHttpuser(),post.blog.getHttppassword());
    String curImagePath=""String_Node_Str"";
    curImagePath=mf.getFileName();
    boolean video=false;
    if (curImagePath.contains(""String_Node_Str"")) {
      video=true;
    }
    if (video) {
      Uri videoUri=Uri.parse(curImagePath);
      File fVideo=null;
      String mimeType=""String_Node_Str"", xRes=""String_Node_Str"", yRes=""String_Node_Str"";
      if (videoUri.toString().contains(""String_Node_Str"")) {
        String[] projection;
        Uri imgPath;
        projection=new String[]{Video.Media._ID,Video.Media.DATA,Video.Media.MIME_TYPE,Video.Media.RESOLUTION};
        imgPath=videoUri;
        Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
        String thumbData=""String_Node_Str"";
        if (cur.moveToFirst()) {
          int mimeTypeColumn, resolutionColumn, dataColumn;
          dataColumn=cur.getColumnIndex(Video.Media.DATA);
          mimeTypeColumn=cur.getColumnIndex(Video.Media.MIME_TYPE);
          resolutionColumn=cur.getColumnIndex(Video.Media.RESOLUTION);
          mf=new MediaFile();
          thumbData=cur.getString(dataColumn);
          mimeType=cur.getString(mimeTypeColumn);
          fVideo=new File(thumbData);
          mf.setFilePath(fVideo.getPath());
          String resolution=cur.getString(resolutionColumn);
          if (resolution != null) {
            String[] resx=resolution.split(""String_Node_Str"");
            xRes=resx[0];
            yRes=resx[1];
          }
 else {
            if (!post.blog.getMaxImageWidth().equals(""String_Node_Str"")) {
              xRes=post.blog.getMaxImageWidth();
              yRes=String.valueOf(Math.round(Integer.valueOf(post.blog.getMaxImageWidth()) * 0.75));
            }
 else {
              xRes=""String_Node_Str"";
              yRes=""String_Node_Str"";
            }
          }
        }
      }
 else {
        fVideo=new File(videoUri.toString().replace(""String_Node_Str"",""String_Node_Str""));
      }
      String imageTitle=fVideo.getName();
      HashMap<String,Object> m=new HashMap<String,Object>();
      m.put(""String_Node_Str"",imageTitle);
      m.put(""String_Node_Str"",mimeType);
      m.put(""String_Node_Str"",mf);
      m.put(""String_Node_Str"",true);
      Object[] params={1,post.blog.getUsername(),post.blog.getPassword(),m};
      Object result=null;
      try {
        result=(Object)client.call(""String_Node_Str"",params);
      }
 catch (      XMLRPCException e) {
        String mediaErrorMsg=e.getLocalizedMessage();
        if (video) {
          if (mediaErrorMsg.contains(""String_Node_Str"")) {
            mediaErrorMsg=context.getResources().getString(R.string.vp_upgrade);
          }
        }
        return null;
      }
      HashMap<?,?> contentHash=new HashMap<Object,Object>();
      contentHash=(HashMap<?,?>)result;
      String resultURL=contentHash.get(""String_Node_Str"").toString();
      if (contentHash.containsKey(""String_Node_Str"")) {
        resultURL=contentHash.get(""String_Node_Str"").toString() + ""String_Node_Str"";
      }
 else {
        resultURL=String.format(""String_Node_Str"",xRes,yRes,resultURL,mimeType,resultURL);
      }
      content=content + resultURL;
    }
 else {
      for (int i=0; i < 2; i++) {
        curImagePath=mf.getFileName();
        if (i == 0 || post.blog.isFullSizeImage()) {
          Uri imageUri=Uri.parse(curImagePath);
          File jpeg=null;
          String mimeType=""String_Node_Str"", orientation=""String_Node_Str"", path=""String_Node_Str"";
          if (imageUri.toString().contains(""String_Node_Str"")) {
            String[] projection;
            Uri imgPath;
            projection=new String[]{Images.Media._ID,Images.Media.DATA,Images.Media.MIME_TYPE,Images.Media.ORIENTATION};
            imgPath=imageUri;
            Cursor cur=context.getContentResolver().query(imgPath,projection,null,null,null);
            String thumbData=""String_Node_Str"";
            if (cur.moveToFirst()) {
              int dataColumn, mimeTypeColumn, orientationColumn;
              dataColumn=cur.getColumnIndex(Images.Media.DATA);
              mimeTypeColumn=cur.getColumnIndex(Images.Media.MIME_TYPE);
              orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
              orientation=cur.getString(orientationColumn);
              thumbData=cur.getString(dataColumn);
              mimeType=cur.getString(mimeTypeColumn);
              jpeg=new File(thumbData);
              path=thumbData;
              mf.setFilePath(jpeg.getPath());
            }
          }
 else {
            path=imageUri.toString().replace(""String_Node_Str"",""String_Node_Str"");
            jpeg=new File(path);
            mf.setFilePath(path);
          }
          if (jpeg == null) {
            break;
          }
          ImageHelper ih=new ImageHelper();
          orientation=ih.getExifOrientation(path,orientation);
          String imageTitle=jpeg.getName();
          byte[] finalBytes=null;
          if (i == 0) {
            byte[] bytes=new byte[(int)jpeg.length()];
            DataInputStream in=null;
            try {
              in=new DataInputStream(new FileInputStream(jpeg));
            }
 catch (            FileNotFoundException e) {
              e.printStackTrace();
            }
            try {
              in.readFully(bytes);
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            try {
              in.close();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
            ImageHelper ih2=new ImageHelper();
            finalBytes=ih2.createThumbnail(bytes,String.valueOf(mf.getWidth()),orientation,false);
            if (finalBytes == null) {
              error=context.getResources().getText(R.string.media_error).toString();
              return null;
            }
          }
          Map<String,Object> m=new HashMap<String,Object>();
          m.put(""String_Node_Str"",imageTitle);
          m.put(""String_Node_Str"",mimeType);
          if (i == 0) {
            m.put(""String_Node_Str"",finalBytes);
          }
 else {
            m.put(""String_Node_Str"",mf);
          }
          m.put(""String_Node_Str"",true);
          Object[] params={1,post.blog.getUsername(),post.blog.getPassword(),m};
          Object result=null;
          try {
            result=(Object)client.call(""String_Node_Str"",params);
          }
 catch (          XMLRPCException e) {
            error=e.getMessage();
            return null;
          }
          HashMap<?,?> contentHash=new HashMap<Object,Object>();
          contentHash=(HashMap<?,?>)result;
          String resultURL=contentHash.get(""String_Node_Str"").toString();
          if (i == 0) {
            finalThumbnailUrl=resultURL;
          }
 else {
            if (post.blog.isFullSizeImage()) {
              finalImageUrl=resultURL;
            }
 else {
              finalImageUrl=""String_Node_Str"";
            }
          }
          String alignment=""String_Node_Str"";
switch (mf.getHorizontalAlignment()) {
case 0:
            alignment=""String_Node_Str"";
          break;
case 1:
        alignment=""String_Node_Str"";
      break;
case 2:
    alignment=""String_Node_Str"";
  break;
case 3:
alignment=""String_Node_Str"";
break;
}
String alignmentCSS=""String_Node_Str"" + alignment + ""String_Node_Str"";
if (resultURL != null) {
if (i != 0 && post.blog.isFullSizeImage()) {
content=content + ""String_Node_Str"" + finalImageUrl+ ""String_Node_Str""+ mf.getTitle()+ ""String_Node_Str""+ alignmentCSS+ ""String_Node_Str""+ finalThumbnailUrl+ ""String_Node_Str"";
}
 else {
if (i == 0 && post.blog.isFullSizeImage() == false) {
content=content + ""String_Node_Str"" + mf.getTitle()+ ""String_Node_Str""+ alignmentCSS+ ""String_Node_Str""+ finalThumbnailUrl+ ""String_Node_Str"";
}
}
if (!mf.getCaption().equals(""String_Node_Str"")) {
content=String.format(""String_Node_Str"",alignment,mf.getWidth(),EscapeUtils.escapeHtml(mf.getCaption()),content);
}
}
}
}
}
}
return content;
}",0.9968526812734536
15183,"protected void onPostExecute(final Object[] result){
  if (isCancelled())   return;
  Thread action=new Thread(){
    public void run(){
      if (result != null) {
        if (result.length > 0) {
          HashMap<?,?> contentHash=new HashMap<Object,Object>();
          Vector<HashMap<?,?>> dbVector=new Vector<HashMap<?,?>>();
          if (!loadMore) {
            WordPress.wpDB.deleteUploadedPosts(WordPress.currentBlog.getId(),isPage);
          }
          for (int ctr=0; ctr < result.length; ctr++) {
            HashMap<String,Object> dbValues=new HashMap<String,Object>();
            contentHash=(HashMap<?,?>)result[ctr];
            dbValues.put(""String_Node_Str"",WordPress.currentBlog.getBlogId());
            dbVector.add(ctr,contentHash);
          }
          WordPress.wpDB.savePosts(dbVector,WordPress.currentBlog.getId(),isPage);
          numRecords+=20;
          if (loadMore)           switcher.showPrevious();
          loadPosts(loadMore);
        }
 else {
          if (pla != null) {
            if (postIDs.length == 2) {
              try {
                WordPress.wpDB.deleteUploadedPosts(WordPress.currentBlog.getId(),WordPress.currentPost.isPage());
                onPostActionListener.onPostAction(Posts.POST_CLEAR,WordPress.currentPost);
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
              WordPress.currentPost=null;
              loadPosts(false);
            }
          }
        }
        onRefreshListener.onRefresh(false);
      }
 else {
        onRefreshListener.onRefresh(false);
        if (errorMsg != ""String_Node_Str"") {
          FragmentTransaction ft=getFragmentManager().beginTransaction();
          WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(errorMsg);
          alert.show(ft,""String_Node_Str"");
          errorMsg=""String_Node_Str"";
        }
      }
    }
  }
;
  getActivity().runOnUiThread(action);
}","protected void onPostExecute(final Object[] result){
  if (isCancelled())   return;
  if (result != null) {
    if (result.length > 0) {
      HashMap<?,?> contentHash=new HashMap<Object,Object>();
      Vector<HashMap<?,?>> dbVector=new Vector<HashMap<?,?>>();
      if (!loadMore) {
        WordPress.wpDB.deleteUploadedPosts(WordPress.currentBlog.getId(),isPage);
      }
      for (int ctr=0; ctr < result.length; ctr++) {
        HashMap<String,Object> dbValues=new HashMap<String,Object>();
        contentHash=(HashMap<?,?>)result[ctr];
        dbValues.put(""String_Node_Str"",WordPress.currentBlog.getBlogId());
        dbVector.add(ctr,contentHash);
      }
      WordPress.wpDB.savePosts(dbVector,WordPress.currentBlog.getId(),isPage);
      numRecords+=20;
      if (loadMore)       switcher.showPrevious();
      loadPosts(loadMore);
    }
 else {
      if (pla != null) {
        if (postIDs.length == 2) {
          try {
            WordPress.wpDB.deleteUploadedPosts(WordPress.currentBlog.getId(),WordPress.currentPost.isPage());
            onPostActionListener.onPostAction(Posts.POST_CLEAR,WordPress.currentPost);
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          WordPress.currentPost=null;
          loadPosts(false);
        }
      }
    }
    onRefreshListener.onRefresh(false);
  }
 else {
    onRefreshListener.onRefresh(false);
    if (errorMsg != ""String_Node_Str"") {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(errorMsg);
      alert.show(ft,""String_Node_Str"");
      errorMsg=""String_Node_Str"";
    }
  }
}",0.9141441937259218
15184,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  categories=new JSONArray();
  String action=getIntent().getAction();
  WordPress.richPostContent=null;
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        try {
          blog=new Blog(accountIDs[i],EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setCancelable(false);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            try {
              blog=new Blog(id,EditPost.this);
            }
 catch (            Exception e) {
              Toast.makeText(EditPost.this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
              finish();
            }
            WordPress.currentBlog=blog;
            WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
            accountName=blogNames[item];
            setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        try {
          blog=new Blog(id,EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
        WordPress.currentBlog=blog;
        WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
        accountName=blogNames[0];
        setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
      return;
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      try {
        blog=new Blog(id,this);
      }
 catch (      Exception e) {
        Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
        finish();
      }
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (extras.getBoolean(""String_Node_Str"")) {
        id=extras.getInt(""String_Node_Str"");
        try {
          blog=new Blog(id,this);
          WordPress.currentBlog=blog;
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_LONG).show();
          finish();
          return;
        }
      }
      if (!isNew) {
        try {
          post=new Post(id,postID,isPage,this);
          if (post == null) {
            Toast.makeText(this,getResources().getText(R.string.post_not_found),Toast.LENGTH_LONG).show();
            finish();
            return;
          }
 else {
            WordPress.currentPost=post;
          }
        }
 catch (        Exception e) {
          finish();
        }
      }
    }
    if (isNew) {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      evaluateSaveButtonText();
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  boolean hasLocationProvider=false;
  LocationManager locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
  List<String> providers=locationManager.getProviders(true);
  for (  String providerName : providers) {
    if (providerName.equals(LocationManager.GPS_PROVIDER) || providerName.equals(LocationManager.NETWORK_PROVIDER)) {
      hasLocationProvider=true;
    }
  }
  if (hasLocationProvider && blog.isLocation() && !isPage) {
    enableLBSButtons();
  }
  if (isNew) {
    if (option != null) {
      Intent i=new Intent(EditPost.this,EditContent.class);
      i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      i.putExtra(""String_Node_Str"",option);
      startActivityForResult(i,0);
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      if (post.isLocalDraft())       contentHTML=post.getDescription() + ""String_Node_Str"" + post.getMt_text_more();
 else       contentHTML=post.getDescription() + ""String_Node_Str"" + post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    try {
      if (post.isLocalDraft()) {
        contentET.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPost.this,post));
      }
 else {
        contentET.setText(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPost.this,pubDate,flags);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
      evaluateSaveButtonText();
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      Double latitude=post.getLatitude();
      Double longitude=post.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,1);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        Intent i=new Intent(EditPost.this,EditContent.class);
        if (isNew || localDraft)         i.putExtra(""String_Node_Str"",true);
 else         i.putExtra(""String_Node_Str"",false);
        WordPress.richPostContent=content.getText();
        i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivityForResult(i,0);
      }
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  categories=new JSONArray();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    WordPress.richPostContent=null;
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        try {
          blog=new Blog(accountIDs[i],EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setCancelable(false);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            try {
              blog=new Blog(id,EditPost.this);
            }
 catch (            Exception e) {
              Toast.makeText(EditPost.this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
              finish();
            }
            WordPress.currentBlog=blog;
            WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
            accountName=blogNames[item];
            setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        try {
          blog=new Blog(id,EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
        WordPress.currentBlog=blog;
        WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
        accountName=blogNames[0];
        setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
      return;
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      try {
        blog=new Blog(id,this);
      }
 catch (      Exception e) {
        Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
        finish();
      }
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (extras.getBoolean(""String_Node_Str"")) {
        id=extras.getInt(""String_Node_Str"");
        try {
          blog=new Blog(id,this);
          WordPress.currentBlog=blog;
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_LONG).show();
          finish();
          return;
        }
      }
      if (!isNew) {
        try {
          post=new Post(id,postID,isPage,this);
          if (post == null) {
            Toast.makeText(this,getResources().getText(R.string.post_not_found),Toast.LENGTH_LONG).show();
            finish();
            return;
          }
 else {
            WordPress.currentPost=post;
          }
        }
 catch (        Exception e) {
          finish();
        }
      }
    }
    if (isNew) {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      evaluateSaveButtonText();
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  boolean hasLocationProvider=false;
  LocationManager locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
  List<String> providers=locationManager.getProviders(true);
  for (  String providerName : providers) {
    if (providerName.equals(LocationManager.GPS_PROVIDER) || providerName.equals(LocationManager.NETWORK_PROVIDER)) {
      hasLocationProvider=true;
    }
  }
  if (hasLocationProvider && blog.isLocation() && !isPage) {
    enableLBSButtons();
  }
  if (isNew) {
    if (option != null) {
      Intent i=new Intent(EditPost.this,EditContent.class);
      i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      i.putExtra(""String_Node_Str"",option);
      startActivityForResult(i,0);
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      if (post.isLocalDraft())       contentHTML=post.getDescription() + ""String_Node_Str"" + post.getMt_text_more();
 else       contentHTML=post.getDescription() + ""String_Node_Str"" + post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    try {
      if (post.isLocalDraft()) {
        contentET.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPost.this,post));
      }
 else {
        contentET.setText(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPost.this,pubDate,flags);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
      evaluateSaveButtonText();
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      Double latitude=post.getLatitude();
      Double longitude=post.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,1);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        Intent i=new Intent(EditPost.this,EditContent.class);
        if (isNew || localDraft)         i.putExtra(""String_Node_Str"",true);
 else         i.putExtra(""String_Node_Str"",false);
        WordPress.richPostContent=content.getText();
        i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivityForResult(i,0);
      }
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}",0.997610595303113
15185,"@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case 0:
    Intent i=new Intent(this,EditPost.class);
  i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
i.putExtra(""String_Node_Str"",true);
if (isPage) i.putExtra(""String_Node_Str"",true);
startActivity(i);
return true;
}
return false;
}","@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case 0:
    WordPress.richPostContent=null;
  Intent i=new Intent(this,EditPost.class);
i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
i.putExtra(""String_Node_Str"",true);
if (isPage) i.putExtra(""String_Node_Str"",true);
startActivity(i);
return true;
}
return false;
}",0.9502762430939228
15186,"@Override public boolean onContextItemSelected(MenuItem item){
  Post post=new Post(WordPress.currentBlog.getId(),selectedID,isPage,getActivity().getApplicationContext());
  if (item.getGroupId() == 0) {
switch (item.getItemId()) {
case 0:
      Intent i2=new Intent(getActivity().getApplicationContext(),EditPost.class);
    i2.putExtra(""String_Node_Str"",selectedID);
  i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
i2.putExtra(""String_Node_Str"",accountName);
startActivityForResult(i2,0);
return true;
case 1:
onPostActionListener.onPostAction(Posts.POST_DELETE,post);
return true;
case 2:
onPostActionListener.onPostAction(Posts.POST_SHARE,post);
return true;
}
}
 else if (item.getGroupId() == 2) {
switch (item.getItemId()) {
case 0:
Intent i2=new Intent(getActivity().getApplicationContext(),EditPost.class);
i2.putExtra(""String_Node_Str"",selectedID);
i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
i2.putExtra(""String_Node_Str"",accountName);
i2.putExtra(""String_Node_Str"",true);
startActivityForResult(i2,0);
return true;
case 1:
onPostActionListener.onPostAction(Posts.POST_DELETE,post);
return true;
case 2:
onPostActionListener.onPostAction(Posts.POST_SHARE,post);
return true;
}
}
 else {
switch (item.getItemId()) {
case 0:
Intent i2=new Intent(getActivity().getApplicationContext(),EditPost.class);
i2.putExtra(""String_Node_Str"",selectedID);
i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
if (isPage) {
i2.putExtra(""String_Node_Str"",true);
}
i2.putExtra(""String_Node_Str"",accountName);
i2.putExtra(""String_Node_Str"",true);
startActivityForResult(i2,0);
return true;
case 1:
onPostActionListener.onPostAction(Posts.POST_DELETE,post);
return true;
}
}
return false;
}","@Override public boolean onContextItemSelected(MenuItem item){
  Post post=new Post(WordPress.currentBlog.getId(),selectedID,isPage,getActivity().getApplicationContext());
  if (item.getGroupId() == 0) {
switch (item.getItemId()) {
case 0:
      WordPress.richPostContent=null;
    Intent i2=new Intent(getActivity().getApplicationContext(),EditPost.class);
  i2.putExtra(""String_Node_Str"",selectedID);
i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
i2.putExtra(""String_Node_Str"",accountName);
startActivityForResult(i2,0);
return true;
case 1:
onPostActionListener.onPostAction(Posts.POST_DELETE,post);
return true;
case 2:
onPostActionListener.onPostAction(Posts.POST_SHARE,post);
return true;
}
}
 else if (item.getGroupId() == 2) {
switch (item.getItemId()) {
case 0:
WordPress.richPostContent=null;
Intent i2=new Intent(getActivity().getApplicationContext(),EditPost.class);
i2.putExtra(""String_Node_Str"",selectedID);
i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
i2.putExtra(""String_Node_Str"",accountName);
i2.putExtra(""String_Node_Str"",true);
startActivityForResult(i2,0);
return true;
case 1:
onPostActionListener.onPostAction(Posts.POST_DELETE,post);
return true;
case 2:
onPostActionListener.onPostAction(Posts.POST_SHARE,post);
return true;
}
}
 else {
switch (item.getItemId()) {
case 0:
WordPress.richPostContent=null;
Intent i2=new Intent(getActivity().getApplicationContext(),EditPost.class);
i2.putExtra(""String_Node_Str"",selectedID);
i2.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
if (isPage) {
i2.putExtra(""String_Node_Str"",true);
}
i2.putExtra(""String_Node_Str"",accountName);
i2.putExtra(""String_Node_Str"",true);
startActivityForResult(i2,0);
return true;
case 1:
onPostActionListener.onPostAction(Posts.POST_DELETE,post);
return true;
}
}
return false;
}",0.9655756207674944
15187,"public void onClick(View v){
  PackageManager pm=context.getPackageManager();
  if (pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
    Intent i=new Intent(context,EditPost.class);
    i.putExtra(""String_Node_Str"",""String_Node_Str"");
    i.putExtra(""String_Node_Str"",true);
    context.startActivity(i);
    hideOverlay();
  }
 else {
    Toast.makeText(context,getResources().getText(R.string.no_camera_found),Toast.LENGTH_LONG).show();
  }
}","public void onClick(View v){
  PackageManager pm=context.getPackageManager();
  if (pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
    WordPress.richPostContent=null;
    Intent i=new Intent(context,EditPost.class);
    i.putExtra(""String_Node_Str"",""String_Node_Str"");
    i.putExtra(""String_Node_Str"",true);
    context.startActivity(i);
    hideOverlay();
  }
 else {
    Toast.makeText(context,getResources().getText(R.string.no_camera_found),Toast.LENGTH_LONG).show();
  }
}",0.961456102783726
15188,"private void setupDashboardButtons(){
  LinearLayout writeButton=(LinearLayout)findViewById(R.id.dashboard_newpost_btn);
  writeButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,EditPost.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout newPageButton=(LinearLayout)findViewById(R.id.dashboard_newpage_btn);
  newPageButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,EditPost.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout postsButton=(LinearLayout)findViewById(R.id.dashboard_posts_btn);
  postsButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,Posts.class);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout pagesButton=(LinearLayout)findViewById(R.id.dashboard_pages_btn);
  pagesButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,Posts.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout commentsButton=(LinearLayout)findViewById(R.id.dashboard_comments_btn);
  commentsButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,Comments.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout statsButton=(LinearLayout)findViewById(R.id.dashboard_stats_btn);
  statsButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,ViewStats.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout settingsButton=(LinearLayout)findViewById(R.id.dashboard_settings_btn);
  settingsButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,Settings.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout readButton=(LinearLayout)findViewById(R.id.dashboard_subs_btn);
  readButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      int readerBlogID=WordPress.wpDB.getWPCOMBlogID();
      if (WordPress.currentBlog.isDotcomFlag()) {
        Intent i=new Intent(context,Read.class);
        i.putExtra(""String_Node_Str"",readerBlogID);
        i.putExtra(""String_Node_Str"",true);
        context.startActivity(i);
        hideOverlay();
      }
 else {
        Intent i=new Intent(context,Read.class);
        i.putExtra(""String_Node_Str"",true);
        context.startActivity(i);
        hideOverlay();
      }
    }
  }
);
  LinearLayout picButton=(LinearLayout)findViewById(R.id.dashboard_quickphoto_btn);
  picButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      PackageManager pm=context.getPackageManager();
      if (pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
        Intent i=new Intent(context,EditPost.class);
        i.putExtra(""String_Node_Str"",""String_Node_Str"");
        i.putExtra(""String_Node_Str"",true);
        context.startActivity(i);
        hideOverlay();
      }
 else {
        Toast.makeText(context,getResources().getText(R.string.no_camera_found),Toast.LENGTH_LONG).show();
      }
    }
  }
);
  LinearLayout videoButton=(LinearLayout)findViewById(R.id.dashboard_quickvideo_btn);
  videoButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      PackageManager pm=context.getPackageManager();
      if (pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
        Intent i=new Intent(context,EditPost.class);
        i.putExtra(""String_Node_Str"",""String_Node_Str"");
        i.putExtra(""String_Node_Str"",true);
        context.startActivity(i);
        hideOverlay();
      }
 else {
        Toast.makeText(context,getResources().getText(R.string.no_camera_found),Toast.LENGTH_LONG).show();
      }
    }
  }
);
  commentBadgeText=(TextView)findViewById(R.id.comment_badge_text);
  updateCommentBadge();
  updateReadButton();
}","private void setupDashboardButtons(){
  LinearLayout writeButton=(LinearLayout)findViewById(R.id.dashboard_newpost_btn);
  writeButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      WordPress.richPostContent=null;
      Intent i=new Intent(context,EditPost.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout newPageButton=(LinearLayout)findViewById(R.id.dashboard_newpage_btn);
  newPageButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      WordPress.richPostContent=null;
      Intent i=new Intent(context,EditPost.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout postsButton=(LinearLayout)findViewById(R.id.dashboard_posts_btn);
  postsButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,Posts.class);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout pagesButton=(LinearLayout)findViewById(R.id.dashboard_pages_btn);
  pagesButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,Posts.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout commentsButton=(LinearLayout)findViewById(R.id.dashboard_comments_btn);
  commentsButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,Comments.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout statsButton=(LinearLayout)findViewById(R.id.dashboard_stats_btn);
  statsButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,ViewStats.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout settingsButton=(LinearLayout)findViewById(R.id.dashboard_settings_btn);
  settingsButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      Intent i=new Intent(context,Settings.class);
      i.putExtra(""String_Node_Str"",WordPress.currentBlog.getId());
      i.putExtra(""String_Node_Str"",true);
      context.startActivity(i);
      hideOverlay();
    }
  }
);
  LinearLayout readButton=(LinearLayout)findViewById(R.id.dashboard_subs_btn);
  readButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      int readerBlogID=WordPress.wpDB.getWPCOMBlogID();
      if (WordPress.currentBlog.isDotcomFlag()) {
        Intent i=new Intent(context,Read.class);
        i.putExtra(""String_Node_Str"",readerBlogID);
        i.putExtra(""String_Node_Str"",true);
        context.startActivity(i);
        hideOverlay();
      }
 else {
        Intent i=new Intent(context,Read.class);
        i.putExtra(""String_Node_Str"",true);
        context.startActivity(i);
        hideOverlay();
      }
    }
  }
);
  LinearLayout picButton=(LinearLayout)findViewById(R.id.dashboard_quickphoto_btn);
  picButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      PackageManager pm=context.getPackageManager();
      if (pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
        WordPress.richPostContent=null;
        Intent i=new Intent(context,EditPost.class);
        i.putExtra(""String_Node_Str"",""String_Node_Str"");
        i.putExtra(""String_Node_Str"",true);
        context.startActivity(i);
        hideOverlay();
      }
 else {
        Toast.makeText(context,getResources().getText(R.string.no_camera_found),Toast.LENGTH_LONG).show();
      }
    }
  }
);
  LinearLayout videoButton=(LinearLayout)findViewById(R.id.dashboard_quickvideo_btn);
  videoButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      PackageManager pm=context.getPackageManager();
      if (pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
        WordPress.richPostContent=null;
        Intent i=new Intent(context,EditPost.class);
        i.putExtra(""String_Node_Str"",""String_Node_Str"");
        i.putExtra(""String_Node_Str"",true);
        context.startActivity(i);
        hideOverlay();
      }
 else {
        Toast.makeText(context,getResources().getText(R.string.no_camera_found),Toast.LENGTH_LONG).show();
      }
    }
  }
);
  commentBadgeText=(TextView)findViewById(R.id.comment_badge_text);
  updateCommentBadge();
  updateReadButton();
}",0.9845268795873836
15189,"@Override protected Vector<?> doInBackground(String... args){
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(Read.this),Read.this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  loginURL=WordPress.currentBlog.getUrl().replace(""String_Node_Str"",""String_Node_Str"");
  if (WordPress.currentBlog.getUrl().lastIndexOf(""String_Node_Str"") != -1)   loginURL=WordPress.currentBlog.getUrl().substring(0,WordPress.currentBlog.getUrl().lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"";
 else   loginURL=WordPress.currentBlog.getUrl().replace(""String_Node_Str"",""String_Node_Str"");
  String readerURL=Constants.readerURL;
  if ((getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) == 4) {
    readerURL+=""String_Node_Str"";
  }
  if (loadAdmin) {
    if (WordPress.currentBlog.getUrl().lastIndexOf(""String_Node_Str"") != -1)     readerURL=WordPress.currentBlog.getUrl().substring(0,WordPress.currentBlog.getUrl().lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"";
 else     readerURL=WordPress.currentBlog.getUrl().replace(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    String responseContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + loginURL + ""String_Node_Str""+ ""String_Node_Str""+ WordPress.currentBlog.getUsername()+ ""String_Node_Str""+ ""String_Node_Str""+ WordPress.currentBlog.getPassword()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ readerURL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    wv.setWebViewClient(new WebViewClient(){
      @Override public boolean shouldOverrideUrlLoading(      WebView view,      String url){
        view.loadUrl(url);
        return false;
      }
      @Override public void onPageFinished(      WebView view,      String url){
      }
    }
);
    wv.setWebChromeClient(new WebChromeClient(){
      public void onProgressChanged(      WebView view,      int progress){
        Read.this.setTitle(""String_Node_Str"");
        Read.this.setProgress(progress * 100);
        if (progress == 100) {
          if (loadReader)           Read.this.setTitle(getResources().getText(R.string.reader));
 else           Read.this.setTitle(getResources().getText(R.string.wp_admin));
        }
      }
    }
);
    wv.getSettings().setUserAgentString(""String_Node_Str"");
    wv.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
    wv.getSettings().setSavePassword(false);
    wv.getSettings().setBuiltInZoomControls(true);
    wv.getSettings().setJavaScriptEnabled(true);
    wv.getSettings().setPluginsEnabled(true);
    wv.getSettings().setDomStorageEnabled(true);
    wv.loadData(responseContent,""String_Node_Str"",HTTP.UTF_8);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return null;
}","@Override protected Vector<?> doInBackground(String... args){
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(Read.this),Read.this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  loginURL=WordPress.currentBlog.getUrl().replace(""String_Node_Str"",""String_Node_Str"");
  if (WordPress.currentBlog.getUrl().lastIndexOf(""String_Node_Str"") != -1)   loginURL=WordPress.currentBlog.getUrl().substring(0,WordPress.currentBlog.getUrl().lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"";
 else   loginURL=WordPress.currentBlog.getUrl().replace(""String_Node_Str"",""String_Node_Str"");
  String readerURL=Constants.readerURL;
  if ((getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) == 4) {
    readerURL+=""String_Node_Str"";
  }
  if (loadAdmin) {
    if (WordPress.currentBlog.getUrl().lastIndexOf(""String_Node_Str"") != -1)     readerURL=WordPress.currentBlog.getUrl().substring(0,WordPress.currentBlog.getUrl().lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"";
 else     readerURL=WordPress.currentBlog.getUrl().replace(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    String responseContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + loginURL + ""String_Node_Str""+ ""String_Node_Str""+ WordPress.currentBlog.getUsername()+ ""String_Node_Str""+ ""String_Node_Str""+ WordPress.currentBlog.getPassword()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ readerURL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    wv.setWebViewClient(new WebViewClient(){
      @Override public boolean shouldOverrideUrlLoading(      WebView view,      String url){
        view.loadUrl(url);
        return false;
      }
      @Override public void onPageFinished(      WebView view,      String url){
      }
    }
);
    wv.setWebChromeClient(new WebChromeClient(){
      public void onProgressChanged(      WebView view,      int progress){
        Read.this.setTitle(""String_Node_Str"");
        Read.this.setProgress(progress * 100);
        if (progress == 100) {
          if (loadReader)           Read.this.setTitle(getResources().getText(R.string.reader));
 else           Read.this.setTitle(getResources().getText(R.string.wp_admin));
        }
      }
    }
);
    wv.getSettings().setUserAgentString(""String_Node_Str"");
    wv.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
    wv.getSettings().setSavePassword(false);
    wv.getSettings().setBuiltInZoomControls(true);
    wv.getSettings().setJavaScriptEnabled(true);
    wv.getSettings().setPluginsEnabled(true);
    wv.getSettings().setDomStorageEnabled(true);
    wv.loadData(Uri.encode(responseContent),""String_Node_Str"",HTTP.UTF_8);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return null;
}",0.9979130434782608
15190,"public SpannableStringBuilder addMediaFromShareAction(String imgPath,Uri curStream,SpannableStringBuilder ssb){
  Bitmap resizedBitmap=null;
  String imageTitle=""String_Node_Str"";
  ImageHelper ih=new ImageHelper();
  Display display=getWindowManager().getDefaultDisplay();
  int width=display.getWidth();
  HashMap<?,?> mediaData=ih.getImageBytesForPath(imgPath,EditPost.this);
  if (mediaData == null) {
    return null;
  }
  byte[] finalBytes=ih.createThumbnail((byte[])mediaData.get(""String_Node_Str""),String.valueOf(width / 2),(String)mediaData.get(""String_Node_Str""),true);
  resizedBitmap=BitmapFactory.decodeByteArray(finalBytes,0,finalBytes.length);
  WPImageSpan is=new WPImageSpan(EditPost.this,resizedBitmap,curStream);
  String imageWidth=WordPress.currentBlog.getMaxImageWidth();
  if (!imageWidth.equals(""String_Node_Str"")) {
    try {
      is.setWidth(Integer.valueOf(imageWidth));
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
  }
  is.setTitle(imageTitle);
  is.setImageSource(curStream);
  is.setVideo(imgPath.contains(""String_Node_Str""));
  ssb.append(""String_Node_Str"");
  ssb.setSpan(is,ssb.length() - 1,ssb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
  ssb.setSpan(as,ssb.length() - 1,ssb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  ssb.append(""String_Node_Str"");
  return ssb;
}","public SpannableStringBuilder addMediaFromShareAction(String imgPath,Uri curStream,SpannableStringBuilder ssb){
  Bitmap resizedBitmap=null;
  String imageTitle=""String_Node_Str"";
  ImageHelper ih=new ImageHelper();
  Display display=getWindowManager().getDefaultDisplay();
  int width=display.getWidth();
  HashMap<?,?> mediaData=ih.getImageBytesForPath(imgPath,EditPost.this);
  if (mediaData == null) {
    return null;
  }
  BitmapFactory.Options opts=new BitmapFactory.Options();
  opts.inJustDecodeBounds=true;
  byte[] bytes=(byte[])mediaData.get(""String_Node_Str"");
  BitmapFactory.decodeByteArray(bytes,0,bytes.length,opts);
  float conversionFactor=0.25f;
  if (opts.outWidth > opts.outHeight)   conversionFactor=0.40f;
  byte[] finalBytes=ih.createThumbnail((byte[])mediaData.get(""String_Node_Str""),String.valueOf((int)(width * conversionFactor)),(String)mediaData.get(""String_Node_Str""),true);
  resizedBitmap=BitmapFactory.decodeByteArray(finalBytes,0,finalBytes.length);
  WPImageSpan is=new WPImageSpan(EditPost.this,resizedBitmap,curStream);
  String imageWidth=WordPress.currentBlog.getMaxImageWidth();
  if (!imageWidth.equals(""String_Node_Str"")) {
    try {
      is.setWidth(Integer.valueOf(imageWidth));
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
  }
  is.setTitle(imageTitle);
  is.setImageSource(curStream);
  is.setVideo(imgPath.contains(""String_Node_Str""));
  ssb.append(""String_Node_Str"");
  ssb.setSpan(is,ssb.length() - 1,ssb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
  ssb.setSpan(as,ssb.length() - 1,ssb.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  ssb.append(""String_Node_Str"");
  return ssb;
}",0.8803016022620169
15191,"private void addMedia(String imgPath,Uri curStream){
  Bitmap resizedBitmap=null;
  ImageHelper ih=new ImageHelper();
  Display display=getWindowManager().getDefaultDisplay();
  int width=display.getWidth();
  HashMap<String,Object> mediaData=ih.getImageBytesForPath(imgPath,EditPost.this);
  if (mediaData == null) {
    Toast.makeText(EditPost.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
    return;
  }
  BitmapFactory.Options opts=new BitmapFactory.Options();
  opts.inJustDecodeBounds=true;
  byte[] bytes=(byte[])mediaData.get(""String_Node_Str"");
  BitmapFactory.decodeByteArray(bytes,0,bytes.length,opts);
  float conversionFactor=0.25f;
  if (opts.outWidth > opts.outHeight)   conversionFactor=0.45f;
  byte[] finalBytes=ih.createThumbnail(bytes,String.valueOf((int)(width * conversionFactor)),(String)mediaData.get(""String_Node_Str""),true);
  resizedBitmap=BitmapFactory.decodeByteArray(finalBytes,0,finalBytes.length);
  WPEditText content=(WPEditText)findViewById(R.id.postContent);
  int selectionStart=content.getSelectionStart();
  styleStart=selectionStart;
  int selectionEnd=content.getSelectionEnd();
  if (selectionStart > selectionEnd) {
    int temp=selectionEnd;
    selectionEnd=selectionStart;
    selectionStart=temp;
  }
  if (content.getText().length() == 0) {
    content.setText(""String_Node_Str"");
  }
  Editable s=content.getText();
  WPImageSpan is=new WPImageSpan(EditPost.this,resizedBitmap,curStream);
  String imageWidth=WordPress.currentBlog.getMaxImageWidth();
  if (!imageWidth.equals(""String_Node_Str"")) {
    try {
      is.setWidth(Integer.valueOf(imageWidth));
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
  }
  is.setTitle((String)mediaData.get(""String_Node_Str""));
  is.setImageSource(curStream);
  if (imgPath.contains(""String_Node_Str"")) {
    is.setVideo(true);
  }
  WPImageSpan[] click_spans=s.getSpans(selectionStart,selectionEnd,WPImageSpan.class);
  if (click_spans.length != 0) {
    s.insert(selectionEnd,""String_Node_Str"");
    selectionStart=selectionStart + 2;
    selectionEnd=selectionEnd + 2;
  }
  s.insert(selectionStart,""String_Node_Str"");
  s.setSpan(is,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
  s.setSpan(as,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  s.insert(selectionEnd + 1,""String_Node_Str"");
  try {
    content.setSelection(s.length());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void addMedia(String imgPath,Uri curStream){
  Bitmap resizedBitmap=null;
  ImageHelper ih=new ImageHelper();
  Display display=getWindowManager().getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (width > height)   width=height;
  HashMap<String,Object> mediaData=ih.getImageBytesForPath(imgPath,EditPost.this);
  if (mediaData == null) {
    Toast.makeText(EditPost.this,getResources().getText(R.string.gallery_error),Toast.LENGTH_SHORT).show();
    return;
  }
  BitmapFactory.Options opts=new BitmapFactory.Options();
  opts.inJustDecodeBounds=true;
  byte[] bytes=(byte[])mediaData.get(""String_Node_Str"");
  BitmapFactory.decodeByteArray(bytes,0,bytes.length,opts);
  float conversionFactor=0.25f;
  if (opts.outWidth > opts.outHeight)   conversionFactor=0.40f;
  byte[] finalBytes=ih.createThumbnail(bytes,String.valueOf((int)(width * conversionFactor)),(String)mediaData.get(""String_Node_Str""),true);
  resizedBitmap=BitmapFactory.decodeByteArray(finalBytes,0,finalBytes.length);
  WPEditText content=(WPEditText)findViewById(R.id.postContent);
  int selectionStart=content.getSelectionStart();
  styleStart=selectionStart;
  int selectionEnd=content.getSelectionEnd();
  if (selectionStart > selectionEnd) {
    int temp=selectionEnd;
    selectionEnd=selectionStart;
    selectionStart=temp;
  }
  if (content.getText().length() == 0) {
    content.setText(""String_Node_Str"");
  }
  Editable s=content.getText();
  WPImageSpan is=new WPImageSpan(EditPost.this,resizedBitmap,curStream);
  String imageWidth=WordPress.currentBlog.getMaxImageWidth();
  if (!imageWidth.equals(""String_Node_Str"")) {
    try {
      is.setWidth(Integer.valueOf(imageWidth));
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
  }
  is.setTitle((String)mediaData.get(""String_Node_Str""));
  is.setImageSource(curStream);
  if (imgPath.contains(""String_Node_Str"")) {
    is.setVideo(true);
  }
  WPImageSpan[] click_spans=s.getSpans(selectionStart,selectionEnd,WPImageSpan.class);
  if (click_spans.length != 0) {
    s.insert(selectionEnd,""String_Node_Str"");
    selectionStart=selectionStart + 2;
    selectionEnd=selectionEnd + 2;
  }
  s.insert(selectionStart,""String_Node_Str"");
  s.setSpan(is,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  AlignmentSpan.Standard as=new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);
  s.setSpan(as,selectionStart,selectionEnd + 1,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  s.insert(selectionEnd + 1,""String_Node_Str"");
  try {
    content.setSelection(s.length());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9858616736721436
15192,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  categories=new JSONArray();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        try {
          blog=new Blog(accountIDs[i],EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(EditPost.this);
        builder.setCancelable(false);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            try {
              blog=new Blog(id,EditPost.this);
            }
 catch (            Exception e) {
              Toast.makeText(EditPost.this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
              finish();
            }
            WordPress.currentBlog=blog;
            WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
            accountName=blogNames[item];
            setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        try {
          blog=new Blog(id,EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
        WordPress.currentBlog=blog;
        WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
        accountName=blogNames[0];
        setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
      return;
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      try {
        blog=new Blog(id,this);
      }
 catch (      Exception e) {
        Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
        finish();
      }
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (extras.getBoolean(""String_Node_Str"")) {
        id=extras.getInt(""String_Node_Str"");
        try {
          blog=new Blog(id,this);
          WordPress.currentBlog=blog;
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_LONG).show();
          finish();
          return;
        }
      }
      if (!isNew) {
        try {
          post=new Post(id,postID,isPage,this);
          if (post == null) {
            Toast.makeText(this,getResources().getText(R.string.post_not_found),Toast.LENGTH_LONG).show();
            finish();
            return;
          }
 else {
            WordPress.currentPost=post;
          }
        }
 catch (        Exception e) {
          finish();
        }
      }
    }
    if (isNew) {
      localDraft=true;
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  setContentView(R.layout.edit);
  if (isPage) {
    RelativeLayout section3=(RelativeLayout)findViewById(R.id.section3);
    section3.setVisibility(View.GONE);
    RelativeLayout locationWrapper=(RelativeLayout)findViewById(R.id.location_wrapper);
    locationWrapper.setVisibility(View.GONE);
    TextView postFormatLabel=(TextView)findViewById(R.id.postFormatLabel);
    postFormatLabel.setVisibility(View.GONE);
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormatSpinner.setVisibility(View.GONE);
  }
 else {
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      evaluateSaveButtonText();
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  boolean hasLocationProvider=false;
  LocationManager locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
  List<String> providers=locationManager.getProviders(true);
  for (  String providerName : providers) {
    if (providerName.equals(LocationManager.GPS_PROVIDER) || providerName.equals(LocationManager.NETWORK_PROVIDER)) {
      hasLocationProvider=true;
    }
  }
  if (hasLocationProvider && blog.isLocation() && !isPage) {
    enableLBSButtons();
  }
  if (isNew) {
    if (option != null) {
      if (option.equals(""String_Node_Str""))       launchCamera();
 else       if (option.equals(""String_Node_Str""))       launchPictureLibrary();
 else       if (option.equals(""String_Node_Str""))       launchVideoCamera();
 else       if (option.equals(""String_Node_Str""))       launchVideoLibrary();
      localDraft=extras.getBoolean(""String_Node_Str"");
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      if (post.isLocalDraft())       contentHTML=post.getDescription() + ""String_Node_Str"" + post.getMt_text_more();
 else       contentHTML=post.getDescription() + ""String_Node_Str"" + post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    try {
      if (post.isLocalDraft()) {
        contentET.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPost.this,post));
      }
 else {
        contentET.setText(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPost.this,pubDate,flags);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
      evaluateSaveButtonText();
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      Double latitude=post.getLatitude();
      Double longitude=post.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,5);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (!isFullScreenEditing && hasFocus)       content.performClick();
    }
  }
);
  content.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() > 1)       scrollDetected=true;
      if (event.getAction() == 1 && !scrollDetected && isFullScreenEditing) {
        Layout layout=((TextView)v).getLayout();
        int x=(int)event.getX();
        int y=(int)event.getY();
        if (layout != null) {
          int line=layout.getLineForVertical(y);
          int charPosition=layout.getOffsetForHorizontal(line,x);
          final Spannable s=content.getText();
          WPImageSpan[] click_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
          if (click_spans.length != 0) {
            final WPImageSpan span=click_spans[0];
            if (!span.isVideo()) {
              LayoutInflater factory=LayoutInflater.from(EditPost.this);
              final View alertView=factory.inflate(R.layout.alert_image_options,null);
              final TextView imageWidthText=(TextView)alertView.findViewById(R.id.imageWidthText);
              final EditText titleText=(EditText)alertView.findViewById(R.id.title);
              final EditText caption=(EditText)alertView.findViewById(R.id.caption);
              final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
              final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
              ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(EditPost.this,R.array.alignment_array,android.R.layout.simple_spinner_item);
              adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
              alignmentSpinner.setAdapter(adapter);
              imageWidthText.setText(String.valueOf(span.getWidth()) + ""String_Node_Str"");
              seekBar.setProgress(span.getWidth());
              titleText.setText(span.getTitle());
              caption.setText(span.getCaption());
              alignmentSpinner.setSelection(span.getHorizontalAlignment(),true);
              seekBar.setMax(100);
              if (span.getWidth() != 0)               seekBar.setProgress(span.getWidth() / 10);
              seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
                @Override public void onStopTrackingTouch(                SeekBar seekBar){
                }
                @Override public void onStartTrackingTouch(                SeekBar seekBar){
                }
                @Override public void onProgressChanged(                SeekBar seekBar,                int progress,                boolean fromUser){
                  if (progress == 0)                   progress=1;
                  imageWidthText.setText(progress * 10 + ""String_Node_Str"");
                }
              }
);
              AlertDialog ad=new AlertDialog.Builder(EditPost.this).setTitle(""String_Node_Str"").setView(alertView).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                public void onClick(                DialogInterface dialog,                int whichButton){
                  span.setTitle(titleText.getText().toString());
                  span.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
                  span.setWidth(seekBar.getProgress() * 10);
                  span.setCaption(caption.getText().toString());
                }
              }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                public void onClick(                DialogInterface dialog,                int whichButton){
                }
              }
).create();
              ad.show();
              scrollDetected=false;
              return true;
            }
          }
 else {
            content.setMovementMethod(ArrowKeyMovementMethod.getInstance());
            content.setSelection(content.getSelectionStart());
          }
        }
      }
 else       if (event.getAction() == 1) {
        scrollDetected=false;
      }
      return false;
    }
  }
);
  content.setOnClickListener(new EditText.OnClickListener(){
    public void onClick(    View v){
      if (!isFullScreenEditing) {
        isFullScreenEditing=true;
        content.setFocusableInTouchMode(true);
        try {
          LinearLayout smallEditorWrap=(LinearLayout)findViewById(R.id.postContentEditorSmallWrapper);
          smallEditorWrap.removeView(content);
          ScrollView scrollView=(ScrollView)findViewById(R.id.scrollView);
          scrollView.setVisibility(View.GONE);
          LinearLayout contentEditorWrap=(LinearLayout)findViewById(R.id.postContentEditorWrapper);
          contentEditorWrap.addView(content);
          contentEditorWrap.setVisibility(View.VISIBLE);
          RelativeLayout formatBar=(RelativeLayout)findViewById(R.id.formatBar);
          formatBar.setVisibility(View.VISIBLE);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        content.requestFocus();
      }
    }
  }
);
  content.setOnEditTextImeBackListener(new WPEditText.EditTextImeBackListener(){
    @Override public void onImeBack(    WPEditText view,    String text){
      finishEditing();
      imeBackPressed=true;
    }
  }
);
  content.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      try {
        int position=Selection.getSelectionStart(content.getText());
        if ((isBackspace && position != 1) || lastPosition == position || !localDraft)         return;
        ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
        ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
        ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
        ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
        ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
        if (position < 0) {
          position=0;
        }
        lastPosition=position;
        if (position > 0) {
          if (styleStart > position) {
            styleStart=position - 1;
          }
          boolean exists=false;
          if (boldButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.BOLD) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (emButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (emButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (underlineButton.isChecked()) {
            WPUnderlineSpan[] ss=s.getSpans(styleStart,position,WPUnderlineSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new WPUnderlineSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (strikeButton.isChecked()) {
            StrikethroughSpan[] ss=s.getSpans(styleStart,position,StrikethroughSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new StrikethroughSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (bquoteButton.isChecked()) {
            QuoteSpan[] ss=s.getSpans(styleStart,position,QuoteSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new QuoteSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
      if ((count - after == 1) || (s.length() == 0))       isBackspace=true;
 else       isBackspace=false;
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  final ImageButton addPictureButton=(ImageButton)findViewById(R.id.addPictureButton);
  registerForContextMenu(addPictureButton);
  addPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      addPictureButton.performLongClick();
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
  final ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
  boldButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(boldButton,""String_Node_Str"");
    }
  }
);
  final Button linkButton=(Button)findViewById(R.id.link);
  linkButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      WPEditText contentText=(WPEditText)findViewById(R.id.postContent);
      selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      Intent i=new Intent(EditPost.this,Link.class);
      if (selectionEnd > selectionStart) {
        String selectedText=contentText.getText().subSequence(selectionStart,selectionEnd).toString();
        i.putExtra(""String_Node_Str"",selectedText);
      }
      startActivityForResult(i,4);
    }
  }
);
  final ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
  emButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(emButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
  underlineButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(underlineButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
  strikeButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(strikeButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
  bquoteButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(bquoteButton,""String_Node_Str"");
    }
  }
);
  final Button moreButton=(Button)findViewById(R.id.more);
  moreButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      WPEditText contentText=(WPEditText)findViewById(R.id.postContent);
      selectionEnd=contentText.getSelectionEnd();
      Editable str=contentText.getText();
      str.insert(selectionEnd,""String_Node_Str"");
    }
  }
);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  categories=new JSONArray();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        try {
          blog=new Blog(accountIDs[i],EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(EditPost.this);
        builder.setCancelable(false);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            try {
              blog=new Blog(id,EditPost.this);
            }
 catch (            Exception e) {
              Toast.makeText(EditPost.this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
              finish();
            }
            WordPress.currentBlog=blog;
            WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
            accountName=blogNames[item];
            setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        try {
          blog=new Blog(id,EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
        WordPress.currentBlog=blog;
        WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
        accountName=blogNames[0];
        setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
      return;
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      try {
        blog=new Blog(id,this);
      }
 catch (      Exception e) {
        Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
        finish();
      }
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (extras.getBoolean(""String_Node_Str"")) {
        id=extras.getInt(""String_Node_Str"");
        try {
          blog=new Blog(id,this);
          WordPress.currentBlog=blog;
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_LONG).show();
          finish();
          return;
        }
      }
      if (!isNew) {
        try {
          post=new Post(id,postID,isPage,this);
          if (post == null) {
            Toast.makeText(this,getResources().getText(R.string.post_not_found),Toast.LENGTH_LONG).show();
            finish();
            return;
          }
 else {
            WordPress.currentPost=post;
          }
        }
 catch (        Exception e) {
          finish();
        }
      }
    }
    if (isNew) {
      localDraft=true;
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  setContentView(R.layout.edit);
  if (isPage) {
    RelativeLayout section3=(RelativeLayout)findViewById(R.id.section3);
    section3.setVisibility(View.GONE);
    RelativeLayout locationWrapper=(RelativeLayout)findViewById(R.id.location_wrapper);
    locationWrapper.setVisibility(View.GONE);
    TextView postFormatLabel=(TextView)findViewById(R.id.postFormatLabel);
    postFormatLabel.setVisibility(View.GONE);
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormatSpinner.setVisibility(View.GONE);
  }
 else {
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      evaluateSaveButtonText();
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  boolean hasLocationProvider=false;
  LocationManager locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);
  List<String> providers=locationManager.getProviders(true);
  for (  String providerName : providers) {
    if (providerName.equals(LocationManager.GPS_PROVIDER) || providerName.equals(LocationManager.NETWORK_PROVIDER)) {
      hasLocationProvider=true;
    }
  }
  if (hasLocationProvider && blog.isLocation() && !isPage) {
    enableLBSButtons();
  }
  if (isNew) {
    if (option != null) {
      if (option.equals(""String_Node_Str""))       launchCamera();
 else       if (option.equals(""String_Node_Str""))       launchPictureLibrary();
 else       if (option.equals(""String_Node_Str""))       launchVideoCamera();
 else       if (option.equals(""String_Node_Str""))       launchVideoLibrary();
      localDraft=extras.getBoolean(""String_Node_Str"");
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      if (post.isLocalDraft())       contentHTML=post.getDescription() + ""String_Node_Str"" + post.getMt_text_more();
 else       contentHTML=post.getDescription() + ""String_Node_Str"" + post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    try {
      if (post.isLocalDraft()) {
        contentET.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPost.this,post));
      }
 else {
        contentET.setText(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPost.this,pubDate,flags);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
      evaluateSaveButtonText();
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      Double latitude=post.getLatitude();
      Double longitude=post.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,5);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (!isFullScreenEditing && hasFocus)       content.performClick();
    }
  }
);
  content.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      float pos=event.getY();
      if (event.getAction() == 0)       lastYPos=pos;
      if (event.getAction() > 1) {
        if (((lastYPos - pos) > 2.0f) || ((pos - lastYPos) > 2.0f))         scrollDetected=true;
      }
      lastYPos=pos;
      if (event.getAction() == 1 && !scrollDetected && isFullScreenEditing) {
        Layout layout=((TextView)v).getLayout();
        int x=(int)event.getX();
        int y=(int)event.getY();
        if (layout != null) {
          int line=layout.getLineForVertical(y);
          int charPosition=layout.getOffsetForHorizontal(line,x);
          final Spannable s=content.getText();
          WPImageSpan[] click_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
          if (click_spans.length != 0) {
            final WPImageSpan span=click_spans[0];
            if (!span.isVideo()) {
              LayoutInflater factory=LayoutInflater.from(EditPost.this);
              final View alertView=factory.inflate(R.layout.alert_image_options,null);
              final TextView imageWidthText=(TextView)alertView.findViewById(R.id.imageWidthText);
              final EditText titleText=(EditText)alertView.findViewById(R.id.title);
              final EditText caption=(EditText)alertView.findViewById(R.id.caption);
              final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
              final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
              ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(EditPost.this,R.array.alignment_array,android.R.layout.simple_spinner_item);
              adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
              alignmentSpinner.setAdapter(adapter);
              imageWidthText.setText(String.valueOf(span.getWidth()) + ""String_Node_Str"");
              seekBar.setProgress(span.getWidth());
              titleText.setText(span.getTitle());
              caption.setText(span.getCaption());
              alignmentSpinner.setSelection(span.getHorizontalAlignment(),true);
              seekBar.setMax(100);
              if (span.getWidth() != 0)               seekBar.setProgress(span.getWidth() / 10);
              seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
                @Override public void onStopTrackingTouch(                SeekBar seekBar){
                }
                @Override public void onStartTrackingTouch(                SeekBar seekBar){
                }
                @Override public void onProgressChanged(                SeekBar seekBar,                int progress,                boolean fromUser){
                  if (progress == 0)                   progress=1;
                  imageWidthText.setText(progress * 10 + ""String_Node_Str"");
                }
              }
);
              AlertDialog ad=new AlertDialog.Builder(EditPost.this).setTitle(""String_Node_Str"").setView(alertView).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                public void onClick(                DialogInterface dialog,                int whichButton){
                  span.setTitle(titleText.getText().toString());
                  span.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
                  span.setWidth(seekBar.getProgress() * 10);
                  span.setCaption(caption.getText().toString());
                }
              }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
                public void onClick(                DialogInterface dialog,                int whichButton){
                }
              }
).create();
              ad.show();
              scrollDetected=false;
              return true;
            }
          }
 else {
            content.setMovementMethod(ArrowKeyMovementMethod.getInstance());
            content.setSelection(content.getSelectionStart());
          }
        }
      }
 else       if (event.getAction() == 1) {
        scrollDetected=false;
      }
      return false;
    }
  }
);
  content.setOnSelectionChangedListener(new WPEditText.OnSelectionChangedListener(){
    @Override public void onSelectionChanged(){
      if (!localDraft)       return;
      final Spannable s=content.getText();
      styleStart=content.getSelectionStart();
      Object[] spans=s.getSpans(content.getSelectionStart(),content.getSelectionStart(),Object.class);
      ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
      ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
      ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
      ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
      ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
      boldButton.setChecked(false);
      emButton.setChecked(false);
      bquoteButton.setChecked(false);
      underlineButton.setChecked(false);
      strikeButton.setChecked(false);
      for (      Object span : spans) {
        if (span instanceof StyleSpan) {
          StyleSpan ss=(StyleSpan)span;
          if (ss.getStyle() == android.graphics.Typeface.BOLD) {
            boldButton.setChecked(true);
          }
          if (ss.getStyle() == android.graphics.Typeface.ITALIC) {
            emButton.setChecked(true);
          }
        }
        if (span instanceof QuoteSpan) {
          bquoteButton.setChecked(true);
        }
        if (span instanceof WPUnderlineSpan) {
          underlineButton.setChecked(true);
        }
        if (span instanceof StrikethroughSpan) {
          strikeButton.setChecked(true);
        }
      }
    }
  }
);
  content.setOnClickListener(new EditText.OnClickListener(){
    public void onClick(    View v){
      if (!isFullScreenEditing) {
        isFullScreenEditing=true;
        content.setFocusableInTouchMode(true);
        try {
          LinearLayout smallEditorWrap=(LinearLayout)findViewById(R.id.postContentEditorSmallWrapper);
          smallEditorWrap.removeView(content);
          ScrollView scrollView=(ScrollView)findViewById(R.id.scrollView);
          scrollView.setVisibility(View.GONE);
          LinearLayout contentEditorWrap=(LinearLayout)findViewById(R.id.postContentEditorWrapper);
          contentEditorWrap.addView(content);
          contentEditorWrap.setVisibility(View.VISIBLE);
          RelativeLayout formatBar=(RelativeLayout)findViewById(R.id.formatBar);
          formatBar.setVisibility(View.VISIBLE);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        content.requestFocus();
      }
    }
  }
);
  content.setOnEditTextImeBackListener(new WPEditText.EditTextImeBackListener(){
    @Override public void onImeBack(    WPEditText view,    String text){
      finishEditing();
      imeBackPressed=true;
    }
  }
);
  content.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      try {
        int position=Selection.getSelectionStart(content.getText());
        if ((isBackspace && position != 1) || lastPosition == position || !localDraft)         return;
        ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
        ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
        ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
        ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
        ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
        if (position < 0) {
          position=0;
        }
        lastPosition=position;
        if (position > 0) {
          if (styleStart > position) {
            styleStart=position - 1;
          }
          boolean exists=false;
          if (boldButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.BOLD) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (emButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (emButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (underlineButton.isChecked()) {
            WPUnderlineSpan[] ss=s.getSpans(styleStart,position,WPUnderlineSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new WPUnderlineSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (strikeButton.isChecked()) {
            StrikethroughSpan[] ss=s.getSpans(styleStart,position,StrikethroughSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new StrikethroughSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (bquoteButton.isChecked()) {
            QuoteSpan[] ss=s.getSpans(styleStart,position,QuoteSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new QuoteSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
      if ((count - after == 1) || (s.length() == 0))       isBackspace=true;
 else       isBackspace=false;
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  final ImageButton addPictureButton=(ImageButton)findViewById(R.id.addPictureButton);
  registerForContextMenu(addPictureButton);
  addPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      addPictureButton.performLongClick();
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
  final ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
  boldButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(boldButton,""String_Node_Str"");
    }
  }
);
  final Button linkButton=(Button)findViewById(R.id.link);
  linkButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      WPEditText contentText=(WPEditText)findViewById(R.id.postContent);
      selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      Intent i=new Intent(EditPost.this,Link.class);
      if (selectionEnd > selectionStart) {
        String selectedText=contentText.getText().subSequence(selectionStart,selectionEnd).toString();
        i.putExtra(""String_Node_Str"",selectedText);
      }
      startActivityForResult(i,4);
    }
  }
);
  final ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
  emButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(emButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
  underlineButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(underlineButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
  strikeButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(strikeButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
  bquoteButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(bquoteButton,""String_Node_Str"");
    }
  }
);
  final Button moreButton=(Button)findViewById(R.id.more);
  moreButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      WPEditText contentText=(WPEditText)findViewById(R.id.postContent);
      selectionEnd=contentText.getSelectionEnd();
      Editable str=contentText.getText();
      str.insert(selectionEnd,""String_Node_Str"");
    }
  }
);
}",0.9678747494447152
15193,"@Override public boolean onTouch(View v,MotionEvent event){
  if (event.getAction() > 1)   scrollDetected=true;
  if (event.getAction() == 1 && !scrollDetected && isFullScreenEditing) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      final Spannable s=content.getText();
      WPImageSpan[] click_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (click_spans.length != 0) {
        final WPImageSpan span=click_spans[0];
        if (!span.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(EditPost.this);
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          final TextView imageWidthText=(TextView)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(EditPost.this,R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(span.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(span.getWidth());
          titleText.setText(span.getTitle());
          caption.setText(span.getCaption());
          alignmentSpinner.setSelection(span.getHorizontalAlignment(),true);
          seekBar.setMax(100);
          if (span.getWidth() != 0)           seekBar.setProgress(span.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(EditPost.this).setTitle(""String_Node_Str"").setView(alertView).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              span.setTitle(titleText.getText().toString());
              span.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              span.setWidth(seekBar.getProgress() * 10);
              span.setCaption(caption.getText().toString());
            }
          }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
            }
          }
).create();
          ad.show();
          scrollDetected=false;
          return true;
        }
      }
 else {
        content.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        content.setSelection(content.getSelectionStart());
      }
    }
  }
 else   if (event.getAction() == 1) {
    scrollDetected=false;
  }
  return false;
}","@Override public boolean onTouch(View v,MotionEvent event){
  float pos=event.getY();
  if (event.getAction() == 0)   lastYPos=pos;
  if (event.getAction() > 1) {
    if (((lastYPos - pos) > 2.0f) || ((pos - lastYPos) > 2.0f))     scrollDetected=true;
  }
  lastYPos=pos;
  if (event.getAction() == 1 && !scrollDetected && isFullScreenEditing) {
    Layout layout=((TextView)v).getLayout();
    int x=(int)event.getX();
    int y=(int)event.getY();
    if (layout != null) {
      int line=layout.getLineForVertical(y);
      int charPosition=layout.getOffsetForHorizontal(line,x);
      final Spannable s=content.getText();
      WPImageSpan[] click_spans=s.getSpans(charPosition,charPosition,WPImageSpan.class);
      if (click_spans.length != 0) {
        final WPImageSpan span=click_spans[0];
        if (!span.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(EditPost.this);
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          final TextView imageWidthText=(TextView)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(EditPost.this,R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(span.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(span.getWidth());
          titleText.setText(span.getTitle());
          caption.setText(span.getCaption());
          alignmentSpinner.setSelection(span.getHorizontalAlignment(),true);
          seekBar.setMax(100);
          if (span.getWidth() != 0)           seekBar.setProgress(span.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(EditPost.this).setTitle(""String_Node_Str"").setView(alertView).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              span.setTitle(titleText.getText().toString());
              span.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              span.setWidth(seekBar.getProgress() * 10);
              span.setCaption(caption.getText().toString());
            }
          }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
            }
          }
).create();
          ad.show();
          scrollDetected=false;
          return true;
        }
      }
 else {
        content.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        content.setSelection(content.getSelectionStart());
      }
    }
  }
 else   if (event.getAction() == 1) {
    scrollDetected=false;
  }
  return false;
}",0.9775880469583778
15194,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.edit_content);
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
    }
 catch (    Exception e) {
      Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
      finish();
    }
  }
  final ImageButton addPictureButton=(ImageButton)findViewById(R.id.addPictureButton);
  registerForContextMenu(addPictureButton);
  addPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      addPictureButton.performLongClick();
    }
  }
);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    option=extras.getString(""String_Node_Str"");
    if (option != null) {
      if (option.equals(""String_Node_Str"")) {
        launchCamera();
      }
 else       if (option.equals(""String_Node_Str"")) {
        launchPictureLibrary();
      }
 else       if (option.equals(""String_Node_Str"")) {
        launchVideoCamera();
      }
 else       if (option.equals(""String_Node_Str"")) {
        launchVideoLibrary();
      }
    }
    localDraft=extras.getBoolean(""String_Node_Str"");
  }
  final WPEditText contentEditor=(WPEditText)findViewById(R.id.postContent);
  if (WordPress.richPostContent != null) {
    try {
      contentEditor.setText(WordPress.richPostContent);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  contentEditor.setOnSelectionChangedListener(new WPEditText.OnSelectionChangedListener(){
    @Override public void onSelectionChanged(){
      if (!localDraft)       return;
      final Spannable s=contentEditor.getText();
      styleStart=contentEditor.getSelectionStart();
      Object[] spans=s.getSpans(contentEditor.getSelectionStart(),contentEditor.getSelectionStart(),Object.class);
      ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
      ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
      ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
      ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
      ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
      boldButton.setChecked(false);
      emButton.setChecked(false);
      bquoteButton.setChecked(false);
      underlineButton.setChecked(false);
      strikeButton.setChecked(false);
      for (      Object span : spans) {
        if (span instanceof StyleSpan) {
          StyleSpan ss=(StyleSpan)span;
          if (ss.getStyle() == android.graphics.Typeface.BOLD) {
            boldButton.setChecked(true);
          }
          if (ss.getStyle() == android.graphics.Typeface.ITALIC) {
            emButton.setChecked(true);
          }
        }
        if (span instanceof QuoteSpan) {
          bquoteButton.setChecked(true);
        }
        if (span instanceof WPUnderlineSpan) {
          underlineButton.setChecked(true);
        }
        if (span instanceof StrikethroughSpan) {
          strikeButton.setChecked(true);
        }
      }
    }
  }
);
  contentEditor.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      RelativeLayout formatBar=(RelativeLayout)findViewById(R.id.formatBar);
      if (hasFocus) {
        formatBar.setVisibility(View.VISIBLE);
        Animation fadeInAnimation=AnimationUtils.loadAnimation(EditContent.this,R.anim.show);
        formatBar.startAnimation(fadeInAnimation);
      }
 else {
        Animation fadeOutAnimation=AnimationUtils.loadAnimation(EditContent.this,R.anim.disappear);
        formatBar.startAnimation(fadeOutAnimation);
        formatBar.setVisibility(View.GONE);
      }
    }
  }
);
  contentEditor.setOnEditTextImeBackListener(new WPEditText.EditTextImeBackListener(){
    @Override public void onImeBack(    WPEditText view,    String text){
      finishEditing();
    }
  }
);
  contentEditor.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      RelativeLayout formatBar=(RelativeLayout)findViewById(R.id.formatBar);
      if (!(formatBar.getVisibility() == View.VISIBLE)) {
        formatBar.setVisibility(View.VISIBLE);
        Animation fadeInAnimation=AnimationUtils.loadAnimation(EditContent.this,R.anim.show);
        formatBar.startAnimation(fadeInAnimation);
      }
      final Spannable s=contentEditor.getText();
      styleStart=contentEditor.getSelectionStart();
      WPImageSpan[] click_spans=s.getSpans(contentEditor.getSelectionStart(),contentEditor.getSelectionStart(),WPImageSpan.class);
      if (click_spans.length != 0) {
        final WPImageSpan span=click_spans[0];
        if (!span.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(EditContent.this);
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          final TextView imageWidthText=(TextView)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(EditContent.this,R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(span.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(span.getWidth());
          titleText.setText(span.getTitle());
          caption.setText(span.getCaption());
          alignmentSpinner.setSelection(span.getHorizontalAlignment(),true);
          seekBar.setMax(100);
          if (span.getWidth() != 0)           seekBar.setProgress(span.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(EditContent.this).setTitle(""String_Node_Str"").setView(alertView).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              span.setTitle(titleText.getText().toString());
              span.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              span.setWidth(seekBar.getProgress() * 10);
              span.setCaption(caption.getText().toString());
            }
          }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
            }
          }
).create();
          ad.show();
        }
      }
 else {
        contentEditor.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        contentEditor.setSelection(contentEditor.getSelectionStart());
      }
    }
  }
);
  final WPEditText contentEdit=(WPEditText)findViewById(R.id.postContent);
  contentEdit.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      try {
        int position=Selection.getSelectionStart(contentEdit.getText());
        if ((isBackspace && position != 1) || lastPosition == position || !localDraft)         return;
        ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
        ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
        ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
        ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
        ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
        if (position < 0) {
          position=0;
        }
        lastPosition=position;
        if (position > 0) {
          if (styleStart > position) {
            styleStart=position - 1;
          }
          boolean exists=false;
          if (boldButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.BOLD) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (emButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (emButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (underlineButton.isChecked()) {
            WPUnderlineSpan[] ss=s.getSpans(styleStart,position,WPUnderlineSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new WPUnderlineSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (strikeButton.isChecked()) {
            StrikethroughSpan[] ss=s.getSpans(styleStart,position,StrikethroughSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new StrikethroughSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (bquoteButton.isChecked()) {
            QuoteSpan[] ss=s.getSpans(styleStart,position,QuoteSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new QuoteSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
      if ((count - after == 1) || (s.length() == 0))       isBackspace=true;
 else       isBackspace=false;
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  final ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
  boldButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(boldButton,""String_Node_Str"");
    }
  }
);
  final Button linkButton=(Button)findViewById(R.id.link);
  linkButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      WPEditText contentText=(WPEditText)findViewById(R.id.postContent);
      selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      Intent i=new Intent(EditContent.this,Link.class);
      if (selectionEnd > selectionStart) {
        String selectedText=contentText.getText().subSequence(selectionStart,selectionEnd).toString();
        i.putExtra(""String_Node_Str"",selectedText);
      }
      startActivityForResult(i,4);
    }
  }
);
  final ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
  emButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(emButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
  underlineButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(underlineButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
  strikeButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(strikeButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
  bquoteButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(bquoteButton,""String_Node_Str"");
    }
  }
);
  final Button moreButton=(Button)findViewById(R.id.more);
  moreButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      WPEditText contentText=(WPEditText)findViewById(R.id.postContent);
      selectionEnd=contentText.getSelectionEnd();
      Editable str=contentText.getText();
      str.insert(selectionEnd,""String_Node_Str"");
    }
  }
);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.edit_content);
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
    }
 catch (    Exception e) {
      Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
      finish();
    }
  }
  final ImageButton addPictureButton=(ImageButton)findViewById(R.id.addPictureButton);
  registerForContextMenu(addPictureButton);
  addPictureButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      addPictureButton.performLongClick();
    }
  }
);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    option=extras.getString(""String_Node_Str"");
    if (option != null) {
      if (option.equals(""String_Node_Str"")) {
        launchCamera();
      }
 else       if (option.equals(""String_Node_Str"")) {
        launchPictureLibrary();
      }
 else       if (option.equals(""String_Node_Str"")) {
        launchVideoCamera();
      }
 else       if (option.equals(""String_Node_Str"")) {
        launchVideoLibrary();
      }
    }
    localDraft=extras.getBoolean(""String_Node_Str"");
  }
  final WPEditText contentEditor=(WPEditText)findViewById(R.id.postContent);
  if (WordPress.richPostContent != null) {
    try {
      contentEditor.setText(WordPress.richPostContent);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  contentEditor.setOnSelectionChangedListener(new WPEditText.OnSelectionChangedListener(){
    @Override public void onSelectionChanged(){
      if (!localDraft)       return;
      final Spannable s=contentEditor.getText();
      styleStart=contentEditor.getSelectionStart();
      Object[] spans=s.getSpans(contentEditor.getSelectionStart(),contentEditor.getSelectionStart(),Object.class);
      ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
      ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
      ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
      ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
      ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
      boldButton.setChecked(false);
      emButton.setChecked(false);
      bquoteButton.setChecked(false);
      underlineButton.setChecked(false);
      strikeButton.setChecked(false);
      for (      Object span : spans) {
        if (span instanceof StyleSpan) {
          StyleSpan ss=(StyleSpan)span;
          if (ss.getStyle() == android.graphics.Typeface.BOLD) {
            boldButton.setChecked(true);
          }
          if (ss.getStyle() == android.graphics.Typeface.ITALIC) {
            emButton.setChecked(true);
          }
        }
        if (span instanceof QuoteSpan) {
          bquoteButton.setChecked(true);
        }
        if (span instanceof WPUnderlineSpan) {
          underlineButton.setChecked(true);
        }
        if (span instanceof StrikethroughSpan) {
          strikeButton.setChecked(true);
        }
      }
    }
  }
);
  contentEditor.setOnEditTextImeBackListener(new WPEditText.EditTextImeBackListener(){
    @Override public void onImeBack(    WPEditText view,    String text){
      finishEditing();
    }
  }
);
  contentEditor.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      RelativeLayout formatBar=(RelativeLayout)findViewById(R.id.formatBar);
      if (!(formatBar.getVisibility() == View.VISIBLE)) {
        formatBar.setVisibility(View.VISIBLE);
        Animation fadeInAnimation=AnimationUtils.loadAnimation(EditContent.this,R.anim.show);
        formatBar.startAnimation(fadeInAnimation);
      }
      final Spannable s=contentEditor.getText();
      styleStart=contentEditor.getSelectionStart();
      WPImageSpan[] click_spans=s.getSpans(contentEditor.getSelectionStart(),contentEditor.getSelectionStart(),WPImageSpan.class);
      if (click_spans.length != 0) {
        final WPImageSpan span=click_spans[0];
        if (!span.isVideo()) {
          LayoutInflater factory=LayoutInflater.from(EditContent.this);
          final View alertView=factory.inflate(R.layout.alert_image_options,null);
          final TextView imageWidthText=(TextView)alertView.findViewById(R.id.imageWidthText);
          final EditText titleText=(EditText)alertView.findViewById(R.id.title);
          final EditText caption=(EditText)alertView.findViewById(R.id.caption);
          final SeekBar seekBar=(SeekBar)alertView.findViewById(R.id.imageWidth);
          final Spinner alignmentSpinner=(Spinner)alertView.findViewById(R.id.alignment_spinner);
          ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(EditContent.this,R.array.alignment_array,android.R.layout.simple_spinner_item);
          adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
          alignmentSpinner.setAdapter(adapter);
          imageWidthText.setText(String.valueOf(span.getWidth()) + ""String_Node_Str"");
          seekBar.setProgress(span.getWidth());
          titleText.setText(span.getTitle());
          caption.setText(span.getCaption());
          alignmentSpinner.setSelection(span.getHorizontalAlignment(),true);
          seekBar.setMax(100);
          if (span.getWidth() != 0)           seekBar.setProgress(span.getWidth() / 10);
          seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener(){
            @Override public void onStopTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onStartTrackingTouch(            SeekBar seekBar){
            }
            @Override public void onProgressChanged(            SeekBar seekBar,            int progress,            boolean fromUser){
              if (progress == 0)               progress=1;
              imageWidthText.setText(progress * 10 + ""String_Node_Str"");
            }
          }
);
          AlertDialog ad=new AlertDialog.Builder(EditContent.this).setTitle(""String_Node_Str"").setView(alertView).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
              span.setTitle(titleText.getText().toString());
              span.setHorizontalAlignment(alignmentSpinner.getSelectedItemPosition());
              span.setWidth(seekBar.getProgress() * 10);
              span.setCaption(caption.getText().toString());
            }
          }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
            public void onClick(            DialogInterface dialog,            int whichButton){
            }
          }
).create();
          ad.show();
        }
      }
 else {
        contentEditor.setMovementMethod(ArrowKeyMovementMethod.getInstance());
        contentEditor.setSelection(contentEditor.getSelectionStart());
      }
    }
  }
);
  final WPEditText contentEdit=(WPEditText)findViewById(R.id.postContent);
  contentEdit.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      try {
        int position=Selection.getSelectionStart(contentEdit.getText());
        if ((isBackspace && position != 1) || lastPosition == position || !localDraft)         return;
        ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
        ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
        ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
        ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
        ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
        if (position < 0) {
          position=0;
        }
        lastPosition=position;
        if (position > 0) {
          if (styleStart > position) {
            styleStart=position - 1;
          }
          boolean exists=false;
          if (boldButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.BOLD) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (emButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (emButton.isChecked()) {
            StyleSpan[] ss=s.getSpans(styleStart,position,StyleSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              if (ss[i].getStyle() == android.graphics.Typeface.ITALIC) {
                exists=true;
              }
            }
            if (!exists)             s.setSpan(new StyleSpan(android.graphics.Typeface.ITALIC),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (underlineButton.isChecked()) {
            WPUnderlineSpan[] ss=s.getSpans(styleStart,position,WPUnderlineSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new WPUnderlineSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (strikeButton.isChecked()) {
            StrikethroughSpan[] ss=s.getSpans(styleStart,position,StrikethroughSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new StrikethroughSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
          if (bquoteButton.isChecked()) {
            QuoteSpan[] ss=s.getSpans(styleStart,position,QuoteSpan.class);
            exists=false;
            for (int i=0; i < ss.length; i++) {
              exists=true;
            }
            if (!exists)             s.setSpan(new QuoteSpan(),styleStart,position,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
      if ((count - after == 1) || (s.length() == 0))       isBackspace=true;
 else       isBackspace=false;
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  final ToggleButton boldButton=(ToggleButton)findViewById(R.id.bold);
  boldButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(boldButton,""String_Node_Str"");
    }
  }
);
  final Button linkButton=(Button)findViewById(R.id.link);
  linkButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      WPEditText contentText=(WPEditText)findViewById(R.id.postContent);
      selectionStart=contentText.getSelectionStart();
      styleStart=selectionStart;
      selectionEnd=contentText.getSelectionEnd();
      if (selectionStart > selectionEnd) {
        int temp=selectionEnd;
        selectionEnd=selectionStart;
        selectionStart=temp;
      }
      Intent i=new Intent(EditContent.this,Link.class);
      if (selectionEnd > selectionStart) {
        String selectedText=contentText.getText().subSequence(selectionStart,selectionEnd).toString();
        i.putExtra(""String_Node_Str"",selectedText);
      }
      startActivityForResult(i,4);
    }
  }
);
  final ToggleButton emButton=(ToggleButton)findViewById(R.id.em);
  emButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(emButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton underlineButton=(ToggleButton)findViewById(R.id.underline);
  underlineButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(underlineButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton strikeButton=(ToggleButton)findViewById(R.id.strike);
  strikeButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(strikeButton,""String_Node_Str"");
    }
  }
);
  final ToggleButton bquoteButton=(ToggleButton)findViewById(R.id.bquote);
  bquoteButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      formatBtnClick(bquoteButton,""String_Node_Str"");
    }
  }
);
  final Button moreButton=(Button)findViewById(R.id.more);
  moreButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      WPEditText contentText=(WPEditText)findViewById(R.id.postContent);
      selectionEnd=contentText.getSelectionEnd();
      Editable str=contentText.getText();
      str.insert(selectionEnd,""String_Node_Str"");
    }
  }
);
}",0.9755090210854286
15195,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.posts);
  FragmentManager fm=getSupportFragmentManager();
  postList=(ViewPosts)fm.findFragmentById(R.id.postList);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    isPage=extras.getBoolean(""String_Node_Str"");
  }
  WordPress.currentPost=null;
  titleBar=(WPTitleBar)findViewById(R.id.postsActionBar);
  titleBar.refreshButton.setOnClickListener(new ImageButton.OnClickListener(){
    public void onClick(    View v){
      postList.refreshPosts(false);
    }
  }
);
  titleBar.setOnBlogChangedListener(new OnBlogChangedListener(){
    @Override public void OnBlogChanged(){
      FragmentManager fm=getSupportFragmentManager();
      ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
      if (f == null) {
        fm.popBackStack();
      }
      attemptToSelectPost();
      postList.loadPosts(false);
    }
  }
);
  WordPress.setOnPostUploadedListener(new WordPress.OnPostUploadedListener(){
    @Override public void OnPostUploaded(){
      if (isFinishing())       return;
      FragmentManager fm=getSupportFragmentManager();
      ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
      if (f == null) {
        fm.popBackStack();
      }
      attemptToSelectPost();
      postList.refreshPosts(false);
    }
  }
);
  attemptToSelectPost();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.posts);
  FragmentManager fm=getSupportFragmentManager();
  postList=(ViewPosts)fm.findFragmentById(R.id.postList);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    isPage=extras.getBoolean(""String_Node_Str"");
    String errorMessage=extras.getString(""String_Node_Str"");
    if (errorMessage != null) {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(Posts.this);
      dialogBuilder.setTitle(getResources().getText(R.string.error));
      dialogBuilder.setMessage(errorMessage);
      dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
  }
  WordPress.currentPost=null;
  titleBar=(WPTitleBar)findViewById(R.id.postsActionBar);
  titleBar.refreshButton.setOnClickListener(new ImageButton.OnClickListener(){
    public void onClick(    View v){
      postList.refreshPosts(false);
    }
  }
);
  titleBar.setOnBlogChangedListener(new OnBlogChangedListener(){
    @Override public void OnBlogChanged(){
      FragmentManager fm=getSupportFragmentManager();
      ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
      if (f == null) {
        fm.popBackStack();
      }
      attemptToSelectPost();
      postList.loadPosts(false);
    }
  }
);
  WordPress.setOnPostUploadedListener(new WordPress.OnPostUploadedListener(){
    @Override public void OnPostUploaded(){
      if (isFinishing())       return;
      FragmentManager fm=getSupportFragmentManager();
      ViewPostFragment f=(ViewPostFragment)fm.findFragmentById(R.id.postDetail);
      if (f == null) {
        fm.popBackStack();
      }
      attemptToSelectPost();
      postList.refreshPosts(false);
    }
  }
);
  attemptToSelectPost();
}",0.8261490151298887
15196,"@Override protected void onResume(){
  super.onResume();
  attemptToSelectPost();
  postList.loadPosts(false);
  if (WordPress.postsShouldRefresh) {
    postList.refreshPosts(false);
    WordPress.postsShouldRefresh=false;
  }
}","@Override protected void onResume(){
  super.onResume();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  attemptToSelectPost();
  postList.loadPosts(false);
  if (WordPress.postsShouldRefresh) {
    postList.refreshPosts(false);
    WordPress.postsShouldRefresh=false;
  }
}",0.8669201520912547
15197,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  Bundle extras=intent.getExtras();
  if (extras != null) {
    isPage=extras.getBoolean(""String_Node_Str"");
    postList.isPage=isPage;
  }
 else {
    isPage=false;
    postList.isPage=isPage;
  }
  titleBar.refreshBlog();
  attemptToSelectPost();
  postList.loadPosts(false);
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  Bundle extras=intent.getExtras();
  if (extras != null) {
    isPage=extras.getBoolean(""String_Node_Str"");
    postList.isPage=isPage;
    String errorMessage=extras.getString(""String_Node_Str"");
    if (errorMessage != null) {
      AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(Posts.this);
      dialogBuilder.setTitle(getResources().getText(R.string.error));
      dialogBuilder.setMessage(errorMessage);
      dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      dialogBuilder.setCancelable(true);
      if (!isFinishing()) {
        dialogBuilder.create().show();
      }
    }
  }
 else {
    isPage=false;
    postList.isPage=isPage;
  }
  titleBar.refreshBlog();
  attemptToSelectPost();
  postList.loadPosts(false);
}",0.5431357839459865
15198,"private void deleteComment(final int selCommentID){
  client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
  Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),selCommentID};
  try {
    client.call(""String_Node_Str"",params);
    dismissDialog(ID_DIALOG_DELETING);
    attemptToSelectComment();
    Thread action=new Thread(){
      public void run(){
        Toast.makeText(Comments.this,getResources().getText(R.string.comment_moderated),Toast.LENGTH_SHORT).show();
      }
    }
;
    runOnUiThread(action);
    Thread action2=new Thread(){
      public void run(){
        pd=new ProgressDialog(Comments.this);
        commentList.refreshComments(false,true,false);
      }
    }
;
    runOnUiThread(action2);
  }
 catch (  final XMLRPCException e) {
    dismissDialog(ID_DIALOG_DELETING);
    Thread action3=new Thread(){
      public void run(){
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(Comments.this);
        dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
        dialogBuilder.setMessage(e.getLocalizedMessage());
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
    }
;
    runOnUiThread(action3);
  }
}","private void deleteComment(int selCommentID){
  client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
  Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),selCommentID};
  try {
    client.call(""String_Node_Str"",params);
    dismissDialog(ID_DIALOG_DELETING);
    attemptToSelectComment();
    Thread action=new Thread(){
      public void run(){
        Toast.makeText(Comments.this,getResources().getText(R.string.comment_moderated),Toast.LENGTH_SHORT).show();
      }
    }
;
    runOnUiThread(action);
    Thread action2=new Thread(){
      public void run(){
        pd=new ProgressDialog(Comments.this);
        commentList.refreshComments(false,true,false);
      }
    }
;
    runOnUiThread(action2);
  }
 catch (  final XMLRPCException e) {
    dismissDialog(ID_DIALOG_DELETING);
    Thread action3=new Thread(){
      public void run(){
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(Comments.this);
        dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
        dialogBuilder.setMessage(e.getLocalizedMessage());
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
    }
;
    runOnUiThread(action3);
  }
}",0.9981378026070764
15199,"@Override public void onCommentStatusChanged(final String status){
  if (WordPress.currentComment != null) {
    String comment_id=WordPress.currentComment.commentID;
    if (status.equals(""String_Node_Str"") || status.equals(""String_Node_Str"") || status.equals(""String_Node_Str"")) {
      final int commentID=Integer.parseInt(comment_id);
      showDialog(ID_DIALOG_MODERATING);
      new Thread(){
        public void run(){
          Looper.prepare();
          changeCommentStatus(status,commentID);
        }
      }
.start();
    }
 else     if (status.equals(""String_Node_Str"")) {
      final int commentID_del=Integer.parseInt(comment_id);
      showDialog(ID_DIALOG_DELETING);
      FragmentManager fm=getSupportFragmentManager();
      ViewCommentFragment f=(ViewCommentFragment)fm.findFragmentById(R.id.commentDetail);
      if (f == null) {
        fm.popBackStack();
      }
      new Thread(){
        public void run(){
          deleteComment(commentID_del);
        }
      }
.start();
    }
 else     if (status.equals(""String_Node_Str"")) {
      Intent i=new Intent(Comments.this,ReplyToComment.class);
      i.putExtra(""String_Node_Str"",Integer.parseInt(comment_id));
      i.putExtra(""String_Node_Str"",WordPress.currentComment.postID);
      startActivityForResult(i,0);
    }
 else     if (status.equals(""String_Node_Str"")) {
      FragmentManager fm=getSupportFragmentManager();
      ViewCommentFragment f=(ViewCommentFragment)fm.findFragmentById(R.id.commentDetail);
      if (f != null) {
        f.clearContent();
      }
    }
  }
}","@Override public void onCommentStatusChanged(final String status){
  if (WordPress.currentComment != null) {
    final int commentID=WordPress.currentComment.commentID;
    if (status.equals(""String_Node_Str"") || status.equals(""String_Node_Str"") || status.equals(""String_Node_Str"")) {
      showDialog(ID_DIALOG_MODERATING);
      new Thread(){
        public void run(){
          Looper.prepare();
          changeCommentStatus(status,commentID);
        }
      }
.start();
    }
 else     if (status.equals(""String_Node_Str"")) {
      showDialog(ID_DIALOG_DELETING);
      FragmentManager fm=getSupportFragmentManager();
      ViewCommentFragment f=(ViewCommentFragment)fm.findFragmentById(R.id.commentDetail);
      if (f == null) {
        fm.popBackStack();
      }
      new Thread(){
        public void run(){
          deleteComment(commentID);
        }
      }
.start();
    }
 else     if (status.equals(""String_Node_Str"")) {
      Intent i=new Intent(Comments.this,ReplyToComment.class);
      i.putExtra(""String_Node_Str"",commentID);
      i.putExtra(""String_Node_Str"",WordPress.currentComment.postID);
      startActivityForResult(i,0);
    }
 else     if (status.equals(""String_Node_Str"")) {
      FragmentManager fm=getSupportFragmentManager();
      ViewCommentFragment f=(ViewCommentFragment)fm.findFragmentById(R.id.commentDetail);
      if (f != null) {
        f.clearContent();
      }
    }
  }
}",0.9352566252935256
15200,"@SuppressWarnings(""String_Node_Str"") private void changeCommentStatus(final String newStatus,final int selCommentID){
  String sSelCommentID=String.valueOf(selCommentID);
  WordPressDB db=new WordPressDB(Comments.this);
  client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
  HashMap<String,String> contentHash, postHash=new HashMap<String,String>();
  contentHash=(HashMap<String,String>)commentList.allComments.get(sSelCommentID);
  postHash.put(""String_Node_Str"",newStatus);
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),sSelCommentID,postHash};
  Object result=null;
  try {
    result=(Object)client.call(""String_Node_Str"",params);
    boolean bResult=Boolean.parseBoolean(result.toString());
    if (bResult) {
      WordPress.currentComment.status=newStatus;
      commentList.model.set(WordPress.currentComment.position,WordPress.currentComment);
      db.updateCommentStatus(id,WordPress.currentComment.commentID,newStatus);
    }
    dismissDialog(ID_DIALOG_MODERATING);
    Thread action=new Thread(){
      public void run(){
        Toast.makeText(Comments.this,getResources().getText(R.string.comment_moderated),Toast.LENGTH_SHORT).show();
      }
    }
;
    runOnUiThread(action);
    Thread action2=new Thread(){
      public void run(){
        commentList.thumbs.notifyDataSetChanged();
      }
    }
;
    runOnUiThread(action2);
  }
 catch (  final XMLRPCException e) {
    dismissDialog(ID_DIALOG_MODERATING);
    Thread action3=new Thread(){
      public void run(){
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(Comments.this);
        dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
        dialogBuilder.setMessage(e.getLocalizedMessage());
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
    }
;
    runOnUiThread(action3);
  }
}","@SuppressWarnings(""String_Node_Str"") private void changeCommentStatus(final String newStatus,final int selCommentID){
  WordPressDB db=new WordPressDB(Comments.this);
  client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
  HashMap<String,String> contentHash, postHash=new HashMap<String,String>();
  contentHash=(HashMap<String,String>)commentList.allComments.get(selCommentID);
  postHash.put(""String_Node_Str"",newStatus);
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
  Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),selCommentID,postHash};
  Object result=null;
  try {
    result=(Object)client.call(""String_Node_Str"",params);
    boolean bResult=Boolean.parseBoolean(result.toString());
    if (bResult) {
      WordPress.currentComment.status=newStatus;
      commentList.model.set(WordPress.currentComment.position,WordPress.currentComment);
      db.updateCommentStatus(id,WordPress.currentComment.commentID,newStatus);
    }
    dismissDialog(ID_DIALOG_MODERATING);
    Thread action=new Thread(){
      public void run(){
        Toast.makeText(Comments.this,getResources().getText(R.string.comment_moderated),Toast.LENGTH_SHORT).show();
      }
    }
;
    runOnUiThread(action);
    Thread action2=new Thread(){
      public void run(){
        commentList.thumbs.notifyDataSetChanged();
      }
    }
;
    runOnUiThread(action2);
  }
 catch (  final XMLRPCException e) {
    dismissDialog(ID_DIALOG_MODERATING);
    Thread action3=new Thread(){
      public void run(){
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(Comments.this);
        dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
        dialogBuilder.setMessage(e.getLocalizedMessage());
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
    }
;
    runOnUiThread(action3);
  }
}",0.9890547263681592
15201,"protected void deleteComments(){
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals(""String_Node_Str"")) {
      client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
      Comment listRow=(Comment)getListView().getItemAtPosition(i);
      String curCommentID=listRow.commentID;
      Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID};
      try {
        client.call(""String_Node_Str"",params);
      }
 catch (      final XMLRPCException e) {
        moderateErrorMsg=e.getLocalizedMessage();
      }
    }
  }
  getActivity().dismissDialog(ID_DIALOG_DELETING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        refreshComments(false,false,false);
      }
 else {
        FragmentTransaction ft=getFragmentManager().beginTransaction();
        WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
        alert.show(ft,""String_Node_Str"");
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  pd=new ProgressDialog(getActivity().getApplicationContext());
}","protected void deleteComments(){
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals(""String_Node_Str"")) {
      client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
      Comment listRow=(Comment)getListView().getItemAtPosition(i);
      int curCommentID=listRow.commentID;
      Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID};
      try {
        client.call(""String_Node_Str"",params);
      }
 catch (      final XMLRPCException e) {
        moderateErrorMsg=e.getLocalizedMessage();
      }
    }
  }
  getActivity().dismissDialog(ID_DIALOG_DELETING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        refreshComments(false,false,false);
      }
 else {
        FragmentTransaction ft=getFragmentManager().beginTransaction();
        WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
        alert.show(ft,""String_Node_Str"");
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  pd=new ProgressDialog(getActivity().getApplicationContext());
}",0.9972127593682256
15202,"@Override protected HashMap<String,HashMap<?,?>> doInBackground(Void... args){
  HashMap<String,HashMap<?,?>> commentsResult;
  try {
    commentsResult=ApiHelper.refreshComments(getActivity().getApplicationContext(),commentParams);
  }
 catch (  XMLRPCException e) {
    if (!getActivity().isFinishing())     moderateErrorMsg=e.getLocalizedMessage();
    return null;
  }
  return commentsResult;
}","@Override protected HashMap<Integer,HashMap<?,?>> doInBackground(Void... args){
  HashMap<Integer,HashMap<?,?>> commentsResult;
  try {
    commentsResult=ApiHelper.refreshComments(getActivity().getApplicationContext(),commentParams);
  }
 catch (  XMLRPCException e) {
    if (!getActivity().isFinishing())     moderateErrorMsg=e.getLocalizedMessage();
    return null;
  }
  return commentsResult;
}",0.9675
15203,"@SuppressWarnings(""String_Node_Str"") protected void moderateComments(String newStatus){
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals(""String_Node_Str"")) {
      client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
      Comment listRow=(Comment)getListView().getItemAtPosition(i);
      String curCommentID=listRow.commentID;
      HashMap<String,String> contentHash, postHash=new HashMap<String,String>();
      contentHash=(HashMap<String,String>)allComments.get(curCommentID);
      postHash.put(""String_Node_Str"",newStatus);
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID,postHash};
      Object result=null;
      try {
        result=(Object)client.call(""String_Node_Str"",params);
        boolean bResult=Boolean.parseBoolean(result.toString());
        if (bResult) {
          checkedComments.set(i,""String_Node_Str"");
          listRow.status=newStatus;
          model.set(i,listRow);
          WordPress.wpDB.updateCommentStatus(WordPress.currentBlog.getId(),listRow.commentID,newStatus);
        }
      }
 catch (      XMLRPCException e) {
        moderateErrorMsg=e.getLocalizedMessage();
      }
    }
  }
  getActivity().dismissDialog(ID_DIALOG_MODERATING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        thumbs.notifyDataSetChanged();
      }
 else {
        FragmentTransaction ft=getFragmentManager().beginTransaction();
        WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
        alert.show(ft,""String_Node_Str"");
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  pd=new ProgressDialog(getActivity().getApplicationContext());
}","@SuppressWarnings(""String_Node_Str"") protected void moderateComments(String newStatus){
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals(""String_Node_Str"")) {
      client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
      Comment listRow=(Comment)getListView().getItemAtPosition(i);
      int curCommentID=listRow.commentID;
      HashMap<String,String> contentHash, postHash=new HashMap<String,String>();
      contentHash=(HashMap<String,String>)allComments.get(curCommentID);
      postHash.put(""String_Node_Str"",newStatus);
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID,postHash};
      Object result=null;
      try {
        result=(Object)client.call(""String_Node_Str"",params);
        boolean bResult=Boolean.parseBoolean(result.toString());
        if (bResult) {
          checkedComments.set(i,""String_Node_Str"");
          listRow.status=newStatus;
          model.set(i,listRow);
          WordPress.wpDB.updateCommentStatus(WordPress.currentBlog.getId(),listRow.commentID,newStatus);
        }
      }
 catch (      XMLRPCException e) {
        moderateErrorMsg=e.getLocalizedMessage();
      }
    }
  }
  getActivity().dismissDialog(ID_DIALOG_MODERATING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        thumbs.notifyDataSetChanged();
      }
 else {
        checkedCommentTotal=0;
        hideModerationBar();
        thumbs.notifyDataSetChanged();
        FragmentTransaction ft=getFragmentManager().beginTransaction();
        WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
        alert.show(ft,""String_Node_Str"");
        moderateErrorMsg=""String_Node_Str"";
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  pd=new ProgressDialog(getActivity().getApplicationContext());
}",0.9708141321044548
15204,"protected void onPostExecute(HashMap<String,HashMap<?,?>> commentsResult){
  if (isCancelled())   return;
  if (commentsResult == null) {
    if (thumbs != null) {
      if (model.size() == 1) {
        WordPress.wpDB.clearComments(WordPress.currentBlog.getId());
        model.clear();
        allComments.clear();
        thumbs.notifyDataSetChanged();
        onCommentStatusChangeListener.onCommentStatusChanged(""String_Node_Str"");
        WordPress.currentComment=null;
        loadComments(false,false);
      }
    }
    onAnimateRefreshButton.onAnimateRefreshButton(false);
    if (!moderateErrorMsg.equals(""String_Node_Str"")) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
      alert.show(ft,""String_Node_Str"");
    }
    return;
  }
  if (commentsResult.size() == 0) {
    if (pd.isShowing()) {
      pd.dismiss();
    }
    onAnimateRefreshButton.onAnimateRefreshButton(false);
  }
 else {
    allComments.putAll(commentsResult);
    if (!doInBackground) {
      loadComments(refreshOnly,loadMore);
    }
    onAnimateRefreshButton.onAnimateRefreshButton(false);
  }
  if (!loadMore && !doInBackground) {
    onAnimateRefreshButton.onAnimateRefreshButton(false);
  }
 else   if (loadMore) {
    switcher.showPrevious();
  }
}","protected void onPostExecute(HashMap<Integer,HashMap<?,?>> commentsResult){
  if (isCancelled())   return;
  if (commentsResult == null) {
    if (thumbs != null) {
      if (model.size() == 1) {
        WordPress.wpDB.clearComments(WordPress.currentBlog.getId());
        model.clear();
        allComments.clear();
        thumbs.notifyDataSetChanged();
        onCommentStatusChangeListener.onCommentStatusChanged(""String_Node_Str"");
        WordPress.currentComment=null;
        loadComments(false,false);
      }
    }
    onAnimateRefreshButton.onAnimateRefreshButton(false);
    if (!moderateErrorMsg.equals(""String_Node_Str"")) {
      FragmentTransaction ft=getFragmentManager().beginTransaction();
      WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
      alert.show(ft,""String_Node_Str"");
    }
    return;
  }
  if (commentsResult.size() == 0) {
    if (pd.isShowing()) {
      pd.dismiss();
    }
    onAnimateRefreshButton.onAnimateRefreshButton(false);
  }
 else {
    allComments.putAll(commentsResult);
    if (!doInBackground) {
      loadComments(refreshOnly,loadMore);
    }
    onAnimateRefreshButton.onAnimateRefreshButton(false);
  }
  if (!loadMore && !doInBackground) {
    onAnimateRefreshButton.onAnimateRefreshButton(false);
  }
 else   if (loadMore) {
    switcher.showPrevious();
  }
}",0.9951834012597258
15205,"public boolean loadComments(boolean refresh,boolean loadMore){
  refreshOnly=refresh;
  String author, postID, commentID, comment, dateCreatedFormatted, status, authorEmail, authorURL, postTitle;
  Vector<?> loadedPosts=WordPress.wpDB.loadComments(WordPress.currentBlog.getId());
  if (loadedPosts != null) {
    numRecords=loadedPosts.size();
    if (refreshOnly) {
      if (model != null) {
        model.clear();
      }
    }
 else {
      model=new ArrayList<Comment>();
    }
    checkedComments=new Vector<String>();
    for (int i=0; i < loadedPosts.size(); i++) {
      checkedComments.add(i,""String_Node_Str"");
      HashMap<?,?> contentHash=(HashMap<?,?>)loadedPosts.get(i);
      allComments.put(contentHash.get(""String_Node_Str"").toString(),contentHash);
      author=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      commentID=contentHash.get(""String_Node_Str"").toString();
      postID=contentHash.get(""String_Node_Str"").toString();
      comment=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      dateCreatedFormatted=contentHash.get(""String_Node_Str"").toString();
      status=contentHash.get(""String_Node_Str"").toString();
      authorEmail=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      authorURL=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      postTitle=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      if (model == null) {
        model=new ArrayList<Comment>();
      }
      model.add(new Comment(postID,commentID,i,author,dateCreatedFormatted,comment,status,postTitle,authorURL,authorEmail,URI.create(""String_Node_Str"" + getMd5Hash(authorEmail.trim()) + ""String_Node_Str"")));
    }
    if (!refreshOnly) {
      try {
        ThumbnailBus bus=new ThumbnailBus();
        thumbs=new ThumbnailAdapter(getActivity(),new CommentAdapter(),new SimpleWebImageCache<ThumbnailBus,ThumbnailMessage>(null,null,101,bus),IMAGE_IDS);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
      ListView listView=this.getListView();
      listView.removeFooterView(switcher);
      if (loadedPosts.size() % 30 == 0) {
        listView.addFooterView(switcher);
      }
      setListAdapter(thumbs);
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View view,        int position,        long id){
          selectedPosition=position;
          Comment comment=model.get((int)id);
          onCommentSelectedListener.onCommentSelected(comment);
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          WordPress.currentComment=model.get(info.position);
          menu.setHeaderTitle(getResources().getText(R.string.comment_actions));
          menu.add(0,0,0,getResources().getText(R.string.mark_approved));
          menu.add(0,1,0,getResources().getText(R.string.mark_unapproved));
          menu.add(0,2,0,getResources().getText(R.string.mark_spam));
          menu.add(0,3,0,getResources().getText(R.string.reply));
          menu.add(0,4,0,getResources().getText(R.string.delete));
        }
      }
);
    }
 else {
      if (thumbs != null) {
        thumbs.notifyDataSetChanged();
      }
    }
    if (this.shouldSelectAfterLoad) {
      if (model != null) {
        if (model.size() > 0) {
          selectedPosition=0;
          Comment aComment=model.get((int)0);
          onCommentSelectedListener.onCommentSelected(aComment);
          thumbs.notifyDataSetChanged();
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadMore && scrollPosition > 0) {
      ListView listView=this.getListView();
      try {
        listView.setSelectionFromTop(scrollPosition,scrollPositionTop);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean loadComments(boolean refresh,boolean loadMore){
  refreshOnly=refresh;
  String author, postID, comment, dateCreatedFormatted, status, authorEmail, authorURL, postTitle;
  int commentID;
  Vector<?> loadedPosts=WordPress.wpDB.loadComments(WordPress.currentBlog.getId());
  if (loadedPosts != null) {
    numRecords=loadedPosts.size();
    if (refreshOnly) {
      if (model != null) {
        model.clear();
      }
    }
 else {
      model=new ArrayList<Comment>();
    }
    checkedComments=new Vector<String>();
    for (int i=0; i < loadedPosts.size(); i++) {
      checkedComments.add(i,""String_Node_Str"");
      HashMap<?,?> contentHash=(HashMap<?,?>)loadedPosts.get(i);
      allComments.put((Integer)contentHash.get(""String_Node_Str""),contentHash);
      author=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      commentID=(Integer)contentHash.get(""String_Node_Str"");
      postID=contentHash.get(""String_Node_Str"").toString();
      comment=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      dateCreatedFormatted=contentHash.get(""String_Node_Str"").toString();
      status=contentHash.get(""String_Node_Str"").toString();
      authorEmail=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      authorURL=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      postTitle=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      if (model == null) {
        model=new ArrayList<Comment>();
      }
      model.add(new Comment(postID,commentID,i,author,dateCreatedFormatted,comment,status,postTitle,authorURL,authorEmail,URI.create(""String_Node_Str"" + getMd5Hash(authorEmail.trim()) + ""String_Node_Str"")));
    }
    if (!refreshOnly) {
      try {
        ThumbnailBus bus=new ThumbnailBus();
        thumbs=new ThumbnailAdapter(getActivity(),new CommentAdapter(),new SimpleWebImageCache<ThumbnailBus,ThumbnailMessage>(null,null,101,bus),IMAGE_IDS);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
      ListView listView=this.getListView();
      listView.removeFooterView(switcher);
      if (loadedPosts.size() % 30 == 0) {
        listView.addFooterView(switcher);
      }
      setListAdapter(thumbs);
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View view,        int position,        long id){
          selectedPosition=position;
          Comment comment=model.get((int)id);
          onCommentSelectedListener.onCommentSelected(comment);
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          WordPress.currentComment=model.get(info.position);
          menu.setHeaderTitle(getResources().getText(R.string.comment_actions));
          menu.add(0,0,0,getResources().getText(R.string.mark_approved));
          menu.add(0,1,0,getResources().getText(R.string.mark_unapproved));
          menu.add(0,2,0,getResources().getText(R.string.mark_spam));
          menu.add(0,3,0,getResources().getText(R.string.reply));
          menu.add(0,4,0,getResources().getText(R.string.delete));
        }
      }
);
    }
 else {
      if (thumbs != null) {
        thumbs.notifyDataSetChanged();
      }
    }
    if (this.shouldSelectAfterLoad) {
      if (model != null) {
        if (model.size() > 0) {
          selectedPosition=0;
          Comment aComment=model.get((int)0);
          onCommentSelectedListener.onCommentSelected(aComment);
          thumbs.notifyDataSetChanged();
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadMore && scrollPosition > 0) {
      ListView listView=this.getListView();
      try {
        listView.setSelectionFromTop(scrollPosition,scrollPositionTop);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    return true;
  }
 else {
    return false;
  }
}",0.992081974848626
15206,"public void updateCommentStatus(int blogID,String id,String newStatus){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",newStatus);
synchronized (this) {
    db.update(COMMENTS_TABLE,values,""String_Node_Str"" + blogID + ""String_Node_Str""+ id,null);
  }
}","public void updateCommentStatus(int blogID,int id,String newStatus){
  ContentValues values=new ContentValues();
  values.put(""String_Node_Str"",newStatus);
synchronized (this) {
    db.update(COMMENTS_TABLE,values,""String_Node_Str"" + blogID + ""String_Node_Str""+ id,null);
  }
}",0.9838420107719928
15207,"public Comment(String postID,String commentID,int position,String name,String dateCreatedFormatted,String comment,String status,String postTitle,String authorURL,String authorEmail,URI profileImageUrl){
  this.postID=postID;
  this.commentID=commentID;
  this.position=position;
  this.name=name;
  this.emailURL=authorEmail;
  this.status=status;
  this.comment=comment;
  this.postTitle=postTitle;
  this.authorURL=authorURL;
  this.authorEmail=authorEmail;
  this.profileImageUrl=profileImageUrl;
  this.dateCreatedFormatted=dateCreatedFormatted;
}","public Comment(String postID,int commentID,int position,String name,String dateCreatedFormatted,String comment,String status,String postTitle,String authorURL,String authorEmail,URI profileImageUrl){
  this.postID=postID;
  this.commentID=commentID;
  this.position=position;
  this.name=name;
  this.emailURL=authorEmail;
  this.status=status;
  this.comment=comment;
  this.postTitle=postTitle;
  this.authorURL=authorURL;
  this.authorEmail=authorEmail;
  this.profileImageUrl=profileImageUrl;
  this.dateCreatedFormatted=dateCreatedFormatted;
}",0.991810737033667
15208,"public static HashMap<String,HashMap<?,?>> refreshComments(Context ctx,Object[] commentParams) throws XMLRPCException {
  Blog blog=WordPress.currentBlog;
  client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
  String author, postID, commentID, comment, status, authorEmail, authorURL, postTitle;
  HashMap<String,HashMap<?,?>> allComments=new HashMap<String,HashMap<?,?>>();
  HashMap<?,?> contentHash=new HashMap<Object,Object>();
  Vector<HashMap<?,?>> dbVector=new Vector<HashMap<?,?>>();
  Date d=new Date();
  Object[] result;
  try {
    result=(Object[])client.call(""String_Node_Str"",commentParams);
  }
 catch (  XMLRPCException e) {
    throw new XMLRPCException(e);
  }
  if (result.length == 0)   return null;
  for (int ctr=0; ctr < result.length; ctr++) {
    HashMap<Object,Object> dbValues=new HashMap<Object,Object>();
    contentHash=(HashMap<?,?>)result[ctr];
    allComments.put(contentHash.get(""String_Node_Str"").toString(),contentHash);
    comment=contentHash.get(""String_Node_Str"").toString();
    author=contentHash.get(""String_Node_Str"").toString();
    status=contentHash.get(""String_Node_Str"").toString();
    postID=contentHash.get(""String_Node_Str"").toString();
    commentID=contentHash.get(""String_Node_Str"").toString();
    d=(Date)contentHash.get(""String_Node_Str"");
    authorURL=contentHash.get(""String_Node_Str"").toString();
    authorEmail=contentHash.get(""String_Node_Str"").toString();
    postTitle=contentHash.get(""String_Node_Str"").toString();
    String formattedDate=d.toString();
    try {
      int flags=0;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
      flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
      formattedDate=DateUtils.formatDateTime(ctx,d.getTime(),flags);
    }
 catch (    Exception e) {
    }
    dbValues.put(""String_Node_Str"",String.valueOf(blog.getId()));
    dbValues.put(""String_Node_Str"",postID);
    dbValues.put(""String_Node_Str"",commentID);
    dbValues.put(""String_Node_Str"",author);
    dbValues.put(""String_Node_Str"",comment);
    dbValues.put(""String_Node_Str"",formattedDate);
    dbValues.put(""String_Node_Str"",formattedDate);
    dbValues.put(""String_Node_Str"",status);
    dbValues.put(""String_Node_Str"",authorURL);
    dbValues.put(""String_Node_Str"",authorEmail);
    dbValues.put(""String_Node_Str"",postTitle);
    dbVector.add(ctr,dbValues);
  }
  WordPress.wpDB.saveComments(dbVector);
  return allComments;
}","public static HashMap<Integer,HashMap<?,?>> refreshComments(Context ctx,Object[] commentParams) throws XMLRPCException {
  Blog blog=WordPress.currentBlog;
  client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
  String author, postID, comment, status, authorEmail, authorURL, postTitle;
  int commentID;
  HashMap<Integer,HashMap<?,?>> allComments=new HashMap<Integer,HashMap<?,?>>();
  HashMap<?,?> contentHash=new HashMap<Object,Object>();
  Vector<HashMap<?,?>> dbVector=new Vector<HashMap<?,?>>();
  Date d=new Date();
  Object[] result;
  try {
    result=(Object[])client.call(""String_Node_Str"",commentParams);
  }
 catch (  XMLRPCException e) {
    throw new XMLRPCException(e);
  }
  if (result.length == 0)   return null;
  for (int ctr=0; ctr < result.length; ctr++) {
    HashMap<Object,Object> dbValues=new HashMap<Object,Object>();
    contentHash=(HashMap<?,?>)result[ctr];
    allComments.put(Integer.parseInt(contentHash.get(""String_Node_Str"").toString()),contentHash);
    comment=contentHash.get(""String_Node_Str"").toString();
    author=contentHash.get(""String_Node_Str"").toString();
    status=contentHash.get(""String_Node_Str"").toString();
    postID=contentHash.get(""String_Node_Str"").toString();
    commentID=Integer.parseInt(contentHash.get(""String_Node_Str"").toString());
    d=(Date)contentHash.get(""String_Node_Str"");
    authorURL=contentHash.get(""String_Node_Str"").toString();
    authorEmail=contentHash.get(""String_Node_Str"").toString();
    postTitle=contentHash.get(""String_Node_Str"").toString();
    String formattedDate=d.toString();
    try {
      int flags=0;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
      flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
      formattedDate=DateUtils.formatDateTime(ctx,d.getTime(),flags);
    }
 catch (    Exception e) {
    }
    dbValues.put(""String_Node_Str"",String.valueOf(blog.getId()));
    dbValues.put(""String_Node_Str"",postID);
    dbValues.put(""String_Node_Str"",commentID);
    dbValues.put(""String_Node_Str"",author);
    dbValues.put(""String_Node_Str"",comment);
    dbValues.put(""String_Node_Str"",formattedDate);
    dbValues.put(""String_Node_Str"",formattedDate);
    dbValues.put(""String_Node_Str"",status);
    dbValues.put(""String_Node_Str"",authorURL);
    dbValues.put(""String_Node_Str"",authorEmail);
    dbValues.put(""String_Node_Str"",postTitle);
    dbVector.add(ctr,dbValues);
  }
  WordPress.wpDB.saveComments(dbVector);
  return allComments;
}",0.9801656075486233
15209,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  categories=new JSONArray();
  String action=getIntent().getAction();
  WordPress.richPostContent=null;
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        try {
          blog=new Blog(accountIDs[i],EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setCancelable(false);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            try {
              blog=new Blog(id,EditPost.this);
            }
 catch (            Exception e) {
              Toast.makeText(EditPost.this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
              finish();
            }
            WordPress.currentBlog=blog;
            WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
            accountName=blogNames[item];
            setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        try {
          blog=new Blog(id,EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
        WordPress.currentBlog=blog;
        WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
        accountName=blogNames[0];
        setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
      return;
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      try {
        blog=new Blog(id,this);
      }
 catch (      Exception e) {
        Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
        finish();
      }
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (extras.getBoolean(""String_Node_Str"")) {
        id=extras.getInt(""String_Node_Str"");
        try {
          blog=new Blog(id,this);
          WordPress.currentBlog=blog;
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (!isNew)       post=new Post(id,postID,isPage,this);
      WordPress.currentPost=post;
    }
    if (isNew) {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    lbsCheck();
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      evaluateSaveButtonText();
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  if (isNew) {
    if (!isAction) {
      if (!isPage) {
        enableLBSButtons();
      }
    }
    if (option != null) {
      Intent i=new Intent(EditPost.this,EditContent.class);
      i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      i.putExtra(""String_Node_Str"",option);
      startActivityForResult(i,0);
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      contentHTML=post.getDescription() + ""String_Node_Str"" + getResources().getText(R.string.more_tag)+ ""String_Node_Str""+ post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    try {
      if (post.isLocalDraft()) {
        contentET.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPost.this,post));
      }
 else {
        contentET.setText(WPHtml.fromHtml(StringHelper.addPTags(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str"")),EditPost.this,post));
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        long localTime=pubDate + TimeZone.getDefault().getOffset(pubDate);
        String formattedDate=DateUtils.formatDateTime(EditPost.this,localTime,flags);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
      evaluateSaveButtonText();
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      if (blog.isLocation()) {
        enableLBSButtons();
      }
      Double latitude=post.getLatitude();
      Double longitude=post.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
      if (blog.isLocation() && latitude > 0) {
        Button updateLocation=(Button)findViewById(R.id.updateLocation);
        updateLocation.setOnClickListener(new Button.OnClickListener(){
          public void onClick(          View v){
            lm=(LocationManager)getSystemService(LOCATION_SERVICE);
            lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
            lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
            locationActive=true;
          }
        }
);
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
 else       if (blog.isLocation()) {
        lm=(LocationManager)getSystemService(LOCATION_SERVICE);
        lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
        lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
        locationActive=true;
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,1);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        Intent i=new Intent(EditPost.this,EditContent.class);
        WordPress.richPostContent=content.getText();
        i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivityForResult(i,0);
      }
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  categories=new JSONArray();
  String action=getIntent().getAction();
  WordPress.richPostContent=null;
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        try {
          blog=new Blog(accountIDs[i],EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setCancelable(false);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            try {
              blog=new Blog(id,EditPost.this);
            }
 catch (            Exception e) {
              Toast.makeText(EditPost.this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
              finish();
            }
            WordPress.currentBlog=blog;
            WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
            accountName=blogNames[item];
            setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        try {
          blog=new Blog(id,EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
        WordPress.currentBlog=blog;
        WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
        accountName=blogNames[0];
        setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
      return;
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      try {
        blog=new Blog(id,this);
      }
 catch (      Exception e) {
        Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
        finish();
      }
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (extras.getBoolean(""String_Node_Str"")) {
        id=extras.getInt(""String_Node_Str"");
        try {
          blog=new Blog(id,this);
          WordPress.currentBlog=blog;
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (!isNew)       post=new Post(id,postID,isPage,this);
      WordPress.currentPost=post;
    }
    if (isNew) {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    lbsCheck();
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      evaluateSaveButtonText();
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  if (isNew) {
    if (!isAction) {
      if (!isPage) {
        enableLBSButtons();
      }
    }
    if (option != null) {
      Intent i=new Intent(EditPost.this,EditContent.class);
      i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      i.putExtra(""String_Node_Str"",option);
      startActivityForResult(i,0);
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      contentHTML=post.getDescription() + ""String_Node_Str"" + getResources().getText(R.string.more_tag)+ ""String_Node_Str""+ post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    try {
      if (post.isLocalDraft()) {
        contentET.setText(WPHtml.fromHtml(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str""),EditPost.this,post));
      }
 else {
        contentET.setText(WPHtml.fromHtml(StringHelper.addPTags(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str"")),EditPost.this,post));
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace();
    }
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        String formattedDate=DateUtils.formatDateTime(EditPost.this,pubDate,flags);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
      evaluateSaveButtonText();
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      if (blog.isLocation()) {
        enableLBSButtons();
      }
      Double latitude=post.getLatitude();
      Double longitude=post.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
      if (blog.isLocation() && latitude > 0) {
        Button updateLocation=(Button)findViewById(R.id.updateLocation);
        updateLocation.setOnClickListener(new Button.OnClickListener(){
          public void onClick(          View v){
            lm=(LocationManager)getSystemService(LOCATION_SERVICE);
            lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
            lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
            locationActive=true;
          }
        }
);
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
 else       if (blog.isLocation()) {
        lm=(LocationManager)getSystemService(LOCATION_SERVICE);
        lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
        lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
        locationActive=true;
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,1);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        Intent i=new Intent(EditPost.this,EditContent.class);
        WordPress.richPostContent=content.getText();
        i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivityForResult(i,0);
      }
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}",0.9937261410788382
15210,"public void onTimeSet(TimePicker view,int hour,int minute){
  mHour=hour;
  mMinute=minute;
  Date d=new Date(mYear - 1900,mMonth,mDay,mHour,mMinute);
  long timestamp=d.getTime();
  try {
    int flags=0;
    flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
    flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
    flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
    flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
    customPubDate=timestamp + TimeZone.getDefault().getOffset(timestamp);
    String formattedDate=DateUtils.formatDateTime(EditPost.this,customPubDate,flags);
    TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
    tvPubDate.setText(formattedDate);
    isCustomPubDate=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void onTimeSet(TimePicker view,int hour,int minute){
  mHour=hour;
  mMinute=minute;
  Date d=new Date(mYear - 1900,mMonth,mDay,mHour,mMinute);
  long timestamp=d.getTime();
  try {
    int flags=0;
    flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
    flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
    flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
    flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
    String formattedDate=DateUtils.formatDateTime(EditPost.this,timestamp,flags);
    customPubDate=timestamp;
    TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
    tvPubDate.setText(formattedDate);
    isCustomPubDate=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8606932635709614
15211,"public boolean loadPosts(boolean loadMore){
  Vector<?> loadedPosts;
  if (isPage) {
    loadedPosts=WordPress.wpDB.loadUploadedPosts(getActivity().getApplicationContext(),WordPress.currentBlog.getId(),true);
  }
 else {
    loadedPosts=WordPress.wpDB.loadUploadedPosts(getActivity().getApplicationContext(),WordPress.currentBlog.getId(),false);
  }
  if (loadedPosts != null) {
    titles=new String[loadedPosts.size()];
    postIDs=new String[loadedPosts.size()];
    dateCreated=new String[loadedPosts.size()];
    dateCreatedFormatted=new String[loadedPosts.size()];
    statuses=new String[loadedPosts.size()];
  }
 else {
    titles=new String[0];
    postIDs=new String[0];
    dateCreated=new String[0];
    dateCreatedFormatted=new String[0];
    statuses=new String[0];
    if (pla != null) {
      pla.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null) {
    for (int i=0; i < loadedPosts.size(); i++) {
      HashMap<?,?> contentHash=(HashMap<?,?>)loadedPosts.get(i);
      titles[i]=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      postIDs[i]=contentHash.get(""String_Node_Str"").toString();
      dateCreated[i]=contentHash.get(""String_Node_Str"").toString();
      if (contentHash.get(""String_Node_Str"") != null) {
        String api_status=contentHash.get(""String_Node_Str"").toString();
        if (api_status.equals(""String_Node_Str"")) {
          statuses[i]=getResources().getText(R.string.published).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          statuses[i]=getResources().getText(R.string.draft).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          statuses[i]=getResources().getText(R.string.pending_review).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          statuses[i]=getResources().getText(R.string.post_private).toString();
        }
      }
      int flags=0;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
      flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
      long localTime=(Long)contentHash.get(""String_Node_Str"") + TimeZone.getDefault().getOffset((Long)contentHash.get(""String_Node_Str""));
      dateCreatedFormatted[i]=DateUtils.formatDateTime(getActivity().getApplicationContext(),localTime,flags);
    }
    List<String> postIDList=Arrays.asList(postIDs);
    List<String> newPostIDList=new ArrayList<String>();
    newPostIDList.add(""String_Node_Str"");
    newPostIDList.addAll(postIDList);
    postIDs=(String[])newPostIDList.toArray(new String[newPostIDList.size()]);
    List<String> postTitleList=Arrays.asList(titles);
    List<CharSequence> newPostTitleList=new ArrayList<CharSequence>();
    newPostTitleList.add(getResources().getText((isPage) ? R.string.tab_pages : R.string.tab_posts));
    newPostTitleList.addAll(postTitleList);
    titles=(String[])newPostTitleList.toArray(new String[newPostTitleList.size()]);
    List<String> dateList=Arrays.asList(dateCreated);
    List<String> newDateList=new ArrayList<String>();
    newDateList.add(""String_Node_Str"");
    newDateList.addAll(dateList);
    dateCreated=(String[])newDateList.toArray(new String[newDateList.size()]);
    List<String> dateFormattedList=Arrays.asList(dateCreatedFormatted);
    List<String> newDateFormattedList=new ArrayList<String>();
    newDateFormattedList.add(""String_Node_Str"");
    newDateFormattedList.addAll(dateFormattedList);
    dateCreatedFormatted=(String[])newDateFormattedList.toArray(new String[newDateFormattedList.size()]);
    List<String> statusList=Arrays.asList(statuses);
    List<String> newStatusList=new ArrayList<String>();
    newStatusList.add(""String_Node_Str"");
    newStatusList.addAll(statusList);
    statuses=(String[])newStatusList.toArray(new String[newStatusList.size()]);
  }
  boolean drafts=loadDrafts();
  if (drafts) {
    List<String> draftIDList=Arrays.asList(draftIDs);
    List<String> newDraftIDList=new ArrayList<String>();
    newDraftIDList.add(""String_Node_Str"");
    newDraftIDList.addAll(draftIDList);
    draftIDs=(String[])newDraftIDList.toArray(new String[newDraftIDList.size()]);
    List<String> titleList=Arrays.asList(draftTitles);
    List<CharSequence> newTitleList=new ArrayList<CharSequence>();
    newTitleList.add(getResources().getText(R.string.local_drafts));
    newTitleList.addAll(titleList);
    draftTitles=(String[])newTitleList.toArray(new String[newTitleList.size()]);
    List<String> draftDateList=Arrays.asList(draftDateCreated);
    List<String> newDraftDateList=new ArrayList<String>();
    newDraftDateList.add(""String_Node_Str"");
    newDraftDateList.addAll(draftDateList);
    draftDateCreated=(String[])newDraftDateList.toArray(new String[newDraftDateList.size()]);
    List<String> draftStatusList=Arrays.asList(draftStatuses);
    List<String> newDraftStatusList=new ArrayList<String>();
    newDraftStatusList.add(""String_Node_Str"");
    newDraftStatusList.addAll(draftStatusList);
    draftStatuses=(String[])newDraftStatusList.toArray(new String[newDraftStatusList.size()]);
    postIDs=StringHelper.mergeStringArrays(draftIDs,postIDs);
    titles=StringHelper.mergeStringArrays(draftTitles,titles);
    dateCreatedFormatted=StringHelper.mergeStringArrays(draftDateCreated,dateCreatedFormatted);
    statuses=StringHelper.mergeStringArrays(draftStatuses,statuses);
  }
 else {
    if (pla != null) {
      pla.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null || drafts == true) {
    ListView listView=getListView();
    listView.removeFooterView(switcher);
    if (!isPage) {
      if (loadedPosts != null) {
        if (loadedPosts.size() >= 20) {
          listView.addFooterView(switcher);
        }
      }
    }
    if (loadMore) {
      pla.notifyDataSetChanged();
    }
 else {
      pla=new PostListAdapter(getActivity().getApplicationContext());
      listView.setAdapter(pla);
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View v,        int position,        long id){
          if (v != null && !postIDs[position].equals(""String_Node_Str"") && !postIDs[position].equals(""String_Node_Str"")) {
            selectedPosition=position;
            selectedID=v.getId();
            Post post=new Post(WordPress.currentBlog.getId(),selectedID,isPage,getActivity().getApplicationContext());
            WordPress.currentPost=post;
            onPostSelectedListener.onPostSelected(post);
            pla.notifyDataSetChanged();
          }
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          Object[] args={R.id.row_post_id};
          try {
            Method m=android.view.View.class.getMethod(""String_Node_Str"");
            m.invoke(selectedID,args);
          }
 catch (          NoSuchMethodException e) {
            selectedID=info.targetView.getId();
          }
catch (          IllegalArgumentException e) {
            selectedID=info.targetView.getId();
          }
catch (          IllegalAccessException e) {
            selectedID=info.targetView.getId();
          }
catch (          InvocationTargetException e) {
            selectedID=info.targetView.getId();
          }
          rowID=info.position;
          if (totalDrafts > 0 && rowID <= totalDrafts && rowID != 0) {
            menu.clear();
            menu.setHeaderTitle(getResources().getText(R.string.draft_actions));
            menu.add(1,0,0,getResources().getText(R.string.edit_draft));
            menu.add(1,1,0,getResources().getText(R.string.delete_draft));
          }
 else           if (rowID == 1 || ((rowID != (totalDrafts + 1)) && rowID != 0)) {
            menu.clear();
            if (isPage) {
              menu.setHeaderTitle(getResources().getText(R.string.page_actions));
              menu.add(2,0,0,getResources().getText(R.string.edit_page));
              menu.add(2,1,0,getResources().getText(R.string.delete_page));
              menu.add(2,2,0,getResources().getText(R.string.share_url));
            }
 else {
              menu.setHeaderTitle(getResources().getText(R.string.post_actions));
              menu.add(0,0,0,getResources().getText(R.string.edit_post));
              menu.add(0,1,0,getResources().getText(R.string.delete_post));
              menu.add(0,2,0,getResources().getText(R.string.share_url));
            }
          }
        }
      }
);
    }
    if (this.shouldSelectAfterLoad) {
      if (postIDs != null) {
        if (postIDs.length >= 1) {
          Post post=new Post(WordPress.currentBlog.getId(),Integer.valueOf(postIDs[1]),isPage,getActivity().getApplicationContext());
          WordPress.currentPost=post;
          onPostSelectedListener.onPostSelected(post);
          selectedPosition=1;
          pla.notifyDataSetChanged();
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    return true;
  }
 else {
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    return false;
  }
}","public boolean loadPosts(boolean loadMore){
  Vector<?> loadedPosts;
  if (isPage) {
    loadedPosts=WordPress.wpDB.loadUploadedPosts(getActivity().getApplicationContext(),WordPress.currentBlog.getId(),true);
  }
 else {
    loadedPosts=WordPress.wpDB.loadUploadedPosts(getActivity().getApplicationContext(),WordPress.currentBlog.getId(),false);
  }
  if (loadedPosts != null) {
    titles=new String[loadedPosts.size()];
    postIDs=new String[loadedPosts.size()];
    dateCreated=new String[loadedPosts.size()];
    dateCreatedFormatted=new String[loadedPosts.size()];
    statuses=new String[loadedPosts.size()];
  }
 else {
    titles=new String[0];
    postIDs=new String[0];
    dateCreated=new String[0];
    dateCreatedFormatted=new String[0];
    statuses=new String[0];
    if (pla != null) {
      pla.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null) {
    for (int i=0; i < loadedPosts.size(); i++) {
      HashMap<?,?> contentHash=(HashMap<?,?>)loadedPosts.get(i);
      titles[i]=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      postIDs[i]=contentHash.get(""String_Node_Str"").toString();
      dateCreated[i]=contentHash.get(""String_Node_Str"").toString();
      if (contentHash.get(""String_Node_Str"") != null) {
        String api_status=contentHash.get(""String_Node_Str"").toString();
        if (api_status.equals(""String_Node_Str"")) {
          statuses[i]=getResources().getText(R.string.published).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          statuses[i]=getResources().getText(R.string.draft).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          statuses[i]=getResources().getText(R.string.pending_review).toString();
        }
 else         if (api_status.equals(""String_Node_Str"")) {
          statuses[i]=getResources().getText(R.string.post_private).toString();
        }
      }
      int flags=0;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
      flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
      long localTime=(Long)contentHash.get(""String_Node_Str"");
      dateCreatedFormatted[i]=DateUtils.formatDateTime(getActivity().getApplicationContext(),localTime,flags);
    }
    List<String> postIDList=Arrays.asList(postIDs);
    List<String> newPostIDList=new ArrayList<String>();
    newPostIDList.add(""String_Node_Str"");
    newPostIDList.addAll(postIDList);
    postIDs=(String[])newPostIDList.toArray(new String[newPostIDList.size()]);
    List<String> postTitleList=Arrays.asList(titles);
    List<CharSequence> newPostTitleList=new ArrayList<CharSequence>();
    newPostTitleList.add(getResources().getText((isPage) ? R.string.tab_pages : R.string.tab_posts));
    newPostTitleList.addAll(postTitleList);
    titles=(String[])newPostTitleList.toArray(new String[newPostTitleList.size()]);
    List<String> dateList=Arrays.asList(dateCreated);
    List<String> newDateList=new ArrayList<String>();
    newDateList.add(""String_Node_Str"");
    newDateList.addAll(dateList);
    dateCreated=(String[])newDateList.toArray(new String[newDateList.size()]);
    List<String> dateFormattedList=Arrays.asList(dateCreatedFormatted);
    List<String> newDateFormattedList=new ArrayList<String>();
    newDateFormattedList.add(""String_Node_Str"");
    newDateFormattedList.addAll(dateFormattedList);
    dateCreatedFormatted=(String[])newDateFormattedList.toArray(new String[newDateFormattedList.size()]);
    List<String> statusList=Arrays.asList(statuses);
    List<String> newStatusList=new ArrayList<String>();
    newStatusList.add(""String_Node_Str"");
    newStatusList.addAll(statusList);
    statuses=(String[])newStatusList.toArray(new String[newStatusList.size()]);
  }
  boolean drafts=loadDrafts();
  if (drafts) {
    List<String> draftIDList=Arrays.asList(draftIDs);
    List<String> newDraftIDList=new ArrayList<String>();
    newDraftIDList.add(""String_Node_Str"");
    newDraftIDList.addAll(draftIDList);
    draftIDs=(String[])newDraftIDList.toArray(new String[newDraftIDList.size()]);
    List<String> titleList=Arrays.asList(draftTitles);
    List<CharSequence> newTitleList=new ArrayList<CharSequence>();
    newTitleList.add(getResources().getText(R.string.local_drafts));
    newTitleList.addAll(titleList);
    draftTitles=(String[])newTitleList.toArray(new String[newTitleList.size()]);
    List<String> draftDateList=Arrays.asList(draftDateCreated);
    List<String> newDraftDateList=new ArrayList<String>();
    newDraftDateList.add(""String_Node_Str"");
    newDraftDateList.addAll(draftDateList);
    draftDateCreated=(String[])newDraftDateList.toArray(new String[newDraftDateList.size()]);
    List<String> draftStatusList=Arrays.asList(draftStatuses);
    List<String> newDraftStatusList=new ArrayList<String>();
    newDraftStatusList.add(""String_Node_Str"");
    newDraftStatusList.addAll(draftStatusList);
    draftStatuses=(String[])newDraftStatusList.toArray(new String[newDraftStatusList.size()]);
    postIDs=StringHelper.mergeStringArrays(draftIDs,postIDs);
    titles=StringHelper.mergeStringArrays(draftTitles,titles);
    dateCreatedFormatted=StringHelper.mergeStringArrays(draftDateCreated,dateCreatedFormatted);
    statuses=StringHelper.mergeStringArrays(draftStatuses,statuses);
  }
 else {
    if (pla != null) {
      pla.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null || drafts == true) {
    ListView listView=getListView();
    listView.removeFooterView(switcher);
    if (!isPage) {
      if (loadedPosts != null) {
        if (loadedPosts.size() >= 20) {
          listView.addFooterView(switcher);
        }
      }
    }
    if (loadMore) {
      pla.notifyDataSetChanged();
    }
 else {
      pla=new PostListAdapter(getActivity().getApplicationContext());
      listView.setAdapter(pla);
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View v,        int position,        long id){
          if (v != null && !postIDs[position].equals(""String_Node_Str"") && !postIDs[position].equals(""String_Node_Str"")) {
            selectedPosition=position;
            selectedID=v.getId();
            Post post=new Post(WordPress.currentBlog.getId(),selectedID,isPage,getActivity().getApplicationContext());
            WordPress.currentPost=post;
            onPostSelectedListener.onPostSelected(post);
            pla.notifyDataSetChanged();
          }
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          Object[] args={R.id.row_post_id};
          try {
            Method m=android.view.View.class.getMethod(""String_Node_Str"");
            m.invoke(selectedID,args);
          }
 catch (          NoSuchMethodException e) {
            selectedID=info.targetView.getId();
          }
catch (          IllegalArgumentException e) {
            selectedID=info.targetView.getId();
          }
catch (          IllegalAccessException e) {
            selectedID=info.targetView.getId();
          }
catch (          InvocationTargetException e) {
            selectedID=info.targetView.getId();
          }
          rowID=info.position;
          if (totalDrafts > 0 && rowID <= totalDrafts && rowID != 0) {
            menu.clear();
            menu.setHeaderTitle(getResources().getText(R.string.draft_actions));
            menu.add(1,0,0,getResources().getText(R.string.edit_draft));
            menu.add(1,1,0,getResources().getText(R.string.delete_draft));
          }
 else           if (rowID == 1 || ((rowID != (totalDrafts + 1)) && rowID != 0)) {
            menu.clear();
            if (isPage) {
              menu.setHeaderTitle(getResources().getText(R.string.page_actions));
              menu.add(2,0,0,getResources().getText(R.string.edit_page));
              menu.add(2,1,0,getResources().getText(R.string.delete_page));
              menu.add(2,2,0,getResources().getText(R.string.share_url));
            }
 else {
              menu.setHeaderTitle(getResources().getText(R.string.post_actions));
              menu.add(0,0,0,getResources().getText(R.string.edit_post));
              menu.add(0,1,0,getResources().getText(R.string.delete_post));
              menu.add(0,2,0,getResources().getText(R.string.share_url));
            }
          }
        }
      }
);
    }
    if (this.shouldSelectAfterLoad) {
      if (postIDs != null) {
        if (postIDs.length >= 1) {
          Post post=new Post(WordPress.currentBlog.getId(),Integer.valueOf(postIDs[1]),isPage,getActivity().getApplicationContext());
          WordPress.currentPost=post;
          onPostSelectedListener.onPostSelected(post);
          selectedPosition=1;
          pla.notifyDataSetChanged();
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    return true;
  }
 else {
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    return false;
  }
}",0.9959983150800336
15212,"public boolean savePosts(Vector<?> postValues,int blogID,boolean isPage){
  boolean returnValue=false;
  if (postValues.size() != 0) {
    for (int i=0; i < postValues.size(); i++) {
      try {
        ContentValues values=new ContentValues();
        HashMap<?,?> thisHash=(HashMap<?,?>)postValues.get(i);
        values.put(""String_Node_Str"",blogID);
        if (thisHash.get((isPage) ? ""String_Node_Str"" : ""String_Node_Str"") == null)         return false;
        String postID=thisHash.get((isPage) ? ""String_Node_Str"" : ""String_Node_Str"").toString();
        values.put(""String_Node_Str"",postID);
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        Date d;
        try {
          d=(Date)thisHash.get(""String_Node_Str"");
          values.put(""String_Node_Str"",d.getTime());
        }
 catch (        Exception e) {
          Date now=new Date();
          values.put(""String_Node_Str"",now.getTime());
        }
        try {
          d=(Date)thisHash.get(""String_Node_Str"");
          values.put(""String_Node_Str"",d.getTime());
        }
 catch (        Exception e) {
          d=new Date((Long)values.get(""String_Node_Str""));
          values.put(""String_Node_Str"",d.getTime() + (d.getTimezoneOffset() * 60000));
        }
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        Object[] cats=(Object[])thisHash.get(""String_Node_Str"");
        JSONArray jsonArray=new JSONArray();
        if (cats != null) {
          for (int x=0; x < cats.length; x++) {
            jsonArray.put(cats[x].toString());
          }
        }
        values.put(""String_Node_Str"",jsonArray.toString());
        Object[] custom_fields=(Object[])thisHash.get(""String_Node_Str"");
        jsonArray=new JSONArray();
        if (custom_fields != null) {
          for (int x=0; x < custom_fields.length; x++) {
            jsonArray.put(custom_fields[x].toString());
            Map<?,?> customField=(Map<?,?>)custom_fields[x];
            if (customField.get(""String_Node_Str"") != null && customField.get(""String_Node_Str"") != null) {
              if (customField.get(""String_Node_Str"").equals(""String_Node_Str""))               values.put(""String_Node_Str"",customField.get(""String_Node_Str"").toString());
              if (customField.get(""String_Node_Str"").equals(""String_Node_Str""))               values.put(""String_Node_Str"",customField.get(""String_Node_Str"").toString());
            }
          }
        }
        values.put(""String_Node_Str"",jsonArray.toString());
        values.put(""String_Node_Str"",thisHash.get((isPage) ? ""String_Node_Str"" : ""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get((isPage) ? ""String_Node_Str"" : ""String_Node_Str"").toString());
        values.put(""String_Node_Str"",(Integer)thisHash.get(""String_Node_Str""));
        values.put(""String_Node_Str"",(Integer)thisHash.get(""String_Node_Str""));
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get((isPage) ? ""String_Node_Str"" : ""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        int isPageInt=0;
        if (isPage) {
          isPageInt=1;
          values.put(""String_Node_Str"",true);
          values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
          values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        }
 else {
          values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
          try {
            values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
          }
 catch (          Exception e) {
            values.put(""String_Node_Str"",""String_Node_Str"");
          }
        }
        int result=db.update(POSTS_TABLE,values,""String_Node_Str"" + postID + ""String_Node_Str""+ isPageInt,null);
        if (result == 0)         returnValue=db.insert(POSTS_TABLE,null,values) > 0;
 else         returnValue=true;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return (returnValue);
}","public boolean savePosts(Vector<?> postValues,int blogID,boolean isPage){
  boolean returnValue=false;
  if (postValues.size() != 0) {
    Calendar cal=new GregorianCalendar(TimeZone.getTimeZone(""String_Node_Str""));
    for (int i=0; i < postValues.size(); i++) {
      try {
        ContentValues values=new ContentValues();
        HashMap<?,?> thisHash=(HashMap<?,?>)postValues.get(i);
        values.put(""String_Node_Str"",blogID);
        if (thisHash.get((isPage) ? ""String_Node_Str"" : ""String_Node_Str"") == null)         return false;
        String postID=thisHash.get((isPage) ? ""String_Node_Str"" : ""String_Node_Str"").toString();
        values.put(""String_Node_Str"",postID);
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        Date d;
        try {
          d=(Date)thisHash.get(""String_Node_Str"");
          values.put(""String_Node_Str"",d.getTime());
        }
 catch (        Exception e) {
          Date now=new Date();
          values.put(""String_Node_Str"",now.getTime());
        }
        try {
          d=(Date)thisHash.get(""String_Node_Str"");
          cal.set(d.getYear() + 1900,d.getMonth(),d.getDate(),d.getHours(),d.getMinutes(),d.getSeconds());
          values.put(""String_Node_Str"",cal.getTime().getTime());
        }
 catch (        Exception e) {
          d=new Date((Long)values.get(""String_Node_Str""));
          values.put(""String_Node_Str"",d.getTime() + (d.getTimezoneOffset() * 60000));
        }
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        Object[] cats=(Object[])thisHash.get(""String_Node_Str"");
        JSONArray jsonArray=new JSONArray();
        if (cats != null) {
          for (int x=0; x < cats.length; x++) {
            jsonArray.put(cats[x].toString());
          }
        }
        values.put(""String_Node_Str"",jsonArray.toString());
        Object[] custom_fields=(Object[])thisHash.get(""String_Node_Str"");
        jsonArray=new JSONArray();
        if (custom_fields != null) {
          for (int x=0; x < custom_fields.length; x++) {
            jsonArray.put(custom_fields[x].toString());
            Map<?,?> customField=(Map<?,?>)custom_fields[x];
            if (customField.get(""String_Node_Str"") != null && customField.get(""String_Node_Str"") != null) {
              if (customField.get(""String_Node_Str"").equals(""String_Node_Str""))               values.put(""String_Node_Str"",customField.get(""String_Node_Str"").toString());
              if (customField.get(""String_Node_Str"").equals(""String_Node_Str""))               values.put(""String_Node_Str"",customField.get(""String_Node_Str"").toString());
            }
          }
        }
        values.put(""String_Node_Str"",jsonArray.toString());
        values.put(""String_Node_Str"",thisHash.get((isPage) ? ""String_Node_Str"" : ""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get((isPage) ? ""String_Node_Str"" : ""String_Node_Str"").toString());
        values.put(""String_Node_Str"",(Integer)thisHash.get(""String_Node_Str""));
        values.put(""String_Node_Str"",(Integer)thisHash.get(""String_Node_Str""));
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get((isPage) ? ""String_Node_Str"" : ""String_Node_Str"").toString());
        values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        int isPageInt=0;
        if (isPage) {
          isPageInt=1;
          values.put(""String_Node_Str"",true);
          values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
          values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
        }
 else {
          values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
          try {
            values.put(""String_Node_Str"",thisHash.get(""String_Node_Str"").toString());
          }
 catch (          Exception e) {
            values.put(""String_Node_Str"",""String_Node_Str"");
          }
        }
        int result=db.update(POSTS_TABLE,values,""String_Node_Str"" + postID + ""String_Node_Str""+ isPageInt,null);
        if (result == 0)         returnValue=db.insert(POSTS_TABLE,null,values) > 0;
 else         returnValue=true;
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  return (returnValue);
}",0.9783354783354784
15213,"@Override protected Boolean doInBackground(Post... posts){
  post=posts[0];
  nm=(NotificationManager)context.getSystemService(""String_Node_Str"");
  String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
  String message=context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage;
  n=new Notification(R.drawable.notification_icon,message,System.currentTimeMillis());
  Intent notificationIntent=new Intent(context,Posts.class);
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.blogID)));
  notificationIntent.putExtra(""String_Node_Str"",true);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,Intent.FLAG_ACTIVITY_CLEAR_TOP);
  n.setLatestEventInfo(context,message,message,pendingIntent);
  notificationID=22 + Integer.valueOf(post.blogID);
  nm.notify(notificationID,n);
  if (post.post_status == null) {
    post.post_status=""String_Node_Str"";
  }
  Boolean publishThis=false;
  boolean mediaError=false;
  Spannable s;
  String descriptionContent=""String_Node_Str"", moreContent=""String_Node_Str"";
  int moreCount=1;
  if (post.getMt_text_more() != null)   moreCount++;
  for (int x=0; x < moreCount; x++) {
    if (x == 0)     s=(Spannable)WPHtml.fromHtml(post.getDescription(),context,post);
 else     s=(Spannable)WPHtml.fromHtml(post.getMt_text_more(),context,post);
    WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
    if (click_spans.length != 0) {
      for (int i=0; i < click_spans.length; i++) {
        String prompt=context.getResources().getText(R.string.uploading_media_item) + String.valueOf(i + 1);
        n.setLatestEventInfo(context,context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage,prompt,n.contentIntent);
        nm.notify(notificationID,n);
        WPImageSpan wpIS=click_spans[i];
        int start=s.getSpanStart(wpIS);
        int end=s.getSpanEnd(wpIS);
        MediaFile mf=new MediaFile();
        mf.setPostID(post.getId());
        mf.setTitle(wpIS.getTitle());
        mf.setCaption(wpIS.getCaption());
        mf.setDescription(wpIS.getDescription());
        mf.setFeatured(wpIS.isFeatured());
        mf.setFileName(wpIS.getImageSource().toString());
        mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
        mf.setWidth(wpIS.getWidth());
        String imgHTML=uploadImage(mf);
        if (imgHTML != null) {
          SpannableString ss=new SpannableString(imgHTML);
          s.setSpan(ss,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          s.removeSpan(wpIS);
        }
 else {
          mediaError=true;
        }
      }
    }
    if (x == 0)     descriptionContent=WPHtml.toHtml(s);
 else     moreContent=WPHtml.toHtml(s);
  }
  if (!mediaError) {
    JSONArray categories=post.getCategories();
    String[] theCategories=null;
    if (categories != null) {
      theCategories=new String[categories.length()];
      for (int i=0; i < categories.length(); i++) {
        try {
          theCategories[i]=categories.getString(i);
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
    }
    Map<String,Object> contentStruct=new HashMap<String,Object>();
    if (!post.isPage) {
      HashMap<?,?> globalSettings=WordPress.wpDB.getNotificationOptions(context);
      boolean taglineValue=false;
      String tagline=""String_Node_Str"";
      if (globalSettings != null) {
        if (globalSettings.get(""String_Node_Str"").toString().equals(""String_Node_Str"")) {
          taglineValue=true;
        }
        if (taglineValue) {
          tagline=globalSettings.get(""String_Node_Str"").toString();
          if (tagline != null) {
            String tag=""String_Node_Str"" + tagline + ""String_Node_Str"";
            if (moreContent == ""String_Node_Str"")             descriptionContent+=tag;
 else             moreContent+=tag;
          }
        }
      }
      if (!post.getWP_post_format().equals(""String_Node_Str"")) {
        if (!post.getWP_post_format().equals(""String_Node_Str""))         contentStruct.put(""String_Node_Str"",post.getWP_post_format());
      }
    }
    contentStruct.put(""String_Node_Str"",(post.isPage) ? ""String_Node_Str"" : ""String_Node_Str"");
    contentStruct.put(""String_Node_Str"",post.title);
    long pubDate=post.date_created_gmt;
    if (pubDate != 0) {
      Date date=new Date(pubDate);
      contentStruct.put(""String_Node_Str"",date);
    }
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    moreContent=moreContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    if (!moreContent.equals(""String_Node_Str"")) {
      descriptionContent=descriptionContent + ""String_Node_Str"" + moreContent;
      post.mt_text_more=""String_Node_Str"";
    }
    descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
    contentStruct.put(""String_Node_Str"",descriptionContent);
    if (!post.isPage) {
      if (post.mt_keywords != ""String_Node_Str"") {
        contentStruct.put(""String_Node_Str"",post.mt_keywords);
      }
      if (theCategories != null) {
        if (theCategories.length > 0)         contentStruct.put(""String_Node_Str"",theCategories);
      }
    }
    contentStruct.put((post.isPage) ? ""String_Node_Str"" : ""String_Node_Str"",post.post_status);
    Double latitude=0.0;
    Double longitude=0.0;
    if (!post.isPage) {
      latitude=(Double)post.getLatitude();
      longitude=(Double)post.getLongitude();
      if (latitude > 0) {
        HashMap<Object,Object> hLatitude=new HashMap<Object,Object>();
        hLatitude.put(""String_Node_Str"",""String_Node_Str"");
        hLatitude.put(""String_Node_Str"",latitude);
        HashMap<Object,Object> hLongitude=new HashMap<Object,Object>();
        hLongitude.put(""String_Node_Str"",""String_Node_Str"");
        hLongitude.put(""String_Node_Str"",longitude);
        HashMap<Object,Object> hPublic=new HashMap<Object,Object>();
        hPublic.put(""String_Node_Str"",""String_Node_Str"");
        hPublic.put(""String_Node_Str"",1);
        Object[] geo={hLatitude,hLongitude,hPublic};
        contentStruct.put(""String_Node_Str"",geo);
      }
    }
    XMLRPCClient client=new XMLRPCClient(post.blog.getUrl(),post.blog.getHttpuser(),post.blog.getHttppassword());
    n.setLatestEventInfo(context,message,message,n.contentIntent);
    nm.notify(notificationID,n);
    if (post.wp_password != null) {
      contentStruct.put(""String_Node_Str"",post.wp_password);
    }
    Object[] params;
    if (post.isLocalDraft() && !post.uploaded)     params=new Object[]{post.blog.getBlogId(),post.blog.getUsername(),post.blog.getPassword(),contentStruct,publishThis};
 else     params=new Object[]{post.getPostid(),post.blog.getUsername(),post.blog.getPassword(),contentStruct,publishThis};
    try {
      client.call((post.isLocalDraft() && !post.uploaded) ? ""String_Node_Str"" : ""String_Node_Str"",params);
      post.setUploaded(true);
      post.update();
      return true;
    }
 catch (    final XMLRPCException e) {
      error=e.getLocalizedMessage();
    }
  }
  return false;
}","@Override protected Boolean doInBackground(Post... posts){
  post=posts[0];
  nm=(NotificationManager)context.getSystemService(""String_Node_Str"");
  String postOrPage=(String)(post.isPage() ? context.getResources().getText(R.string.page_id) : context.getResources().getText(R.string.post_id));
  String message=context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage;
  n=new Notification(R.drawable.notification_icon,message,System.currentTimeMillis());
  Intent notificationIntent=new Intent(context,Posts.class);
  notificationIntent.setData((Uri.parse(""String_Node_Str"" + post.blogID)));
  notificationIntent.putExtra(""String_Node_Str"",true);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,Intent.FLAG_ACTIVITY_CLEAR_TOP);
  n.setLatestEventInfo(context,message,message,pendingIntent);
  notificationID=22 + Integer.valueOf(post.blogID);
  nm.notify(notificationID,n);
  if (post.post_status == null) {
    post.post_status=""String_Node_Str"";
  }
  Boolean publishThis=false;
  boolean mediaError=false;
  Spannable s;
  String descriptionContent=""String_Node_Str"", moreContent=""String_Node_Str"";
  int moreCount=1;
  if (post.getMt_text_more() != null)   moreCount++;
  for (int x=0; x < moreCount; x++) {
    if (x == 0)     s=(Spannable)WPHtml.fromHtml(post.getDescription(),context,post);
 else     s=(Spannable)WPHtml.fromHtml(post.getMt_text_more(),context,post);
    WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
    if (click_spans.length != 0) {
      for (int i=0; i < click_spans.length; i++) {
        String prompt=context.getResources().getText(R.string.uploading_media_item) + String.valueOf(i + 1);
        n.setLatestEventInfo(context,context.getResources().getText(R.string.uploading) + ""String_Node_Str"" + postOrPage,prompt,n.contentIntent);
        nm.notify(notificationID,n);
        WPImageSpan wpIS=click_spans[i];
        int start=s.getSpanStart(wpIS);
        int end=s.getSpanEnd(wpIS);
        MediaFile mf=new MediaFile();
        mf.setPostID(post.getId());
        mf.setTitle(wpIS.getTitle());
        mf.setCaption(wpIS.getCaption());
        mf.setDescription(wpIS.getDescription());
        mf.setFeatured(wpIS.isFeatured());
        mf.setFileName(wpIS.getImageSource().toString());
        mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
        mf.setWidth(wpIS.getWidth());
        String imgHTML=uploadImage(mf);
        if (imgHTML != null) {
          SpannableString ss=new SpannableString(imgHTML);
          s.setSpan(ss,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          s.removeSpan(wpIS);
        }
 else {
          mediaError=true;
        }
      }
    }
    if (x == 0)     descriptionContent=WPHtml.toHtml(s);
 else     moreContent=WPHtml.toHtml(s);
  }
  if (!mediaError) {
    JSONArray categories=post.getCategories();
    String[] theCategories=null;
    if (categories != null) {
      theCategories=new String[categories.length()];
      for (int i=0; i < categories.length(); i++) {
        try {
          theCategories[i]=categories.getString(i);
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
    }
    Map<String,Object> contentStruct=new HashMap<String,Object>();
    if (!post.isPage) {
      HashMap<?,?> globalSettings=WordPress.wpDB.getNotificationOptions(context);
      boolean taglineValue=false;
      String tagline=""String_Node_Str"";
      if (globalSettings != null) {
        if (globalSettings.get(""String_Node_Str"").toString().equals(""String_Node_Str"")) {
          taglineValue=true;
        }
        if (taglineValue) {
          tagline=globalSettings.get(""String_Node_Str"").toString();
          if (tagline != null) {
            String tag=""String_Node_Str"" + tagline + ""String_Node_Str"";
            if (moreContent == ""String_Node_Str"")             descriptionContent+=tag;
 else             moreContent+=tag;
          }
        }
      }
      if (!post.getWP_post_format().equals(""String_Node_Str"")) {
        if (!post.getWP_post_format().equals(""String_Node_Str""))         contentStruct.put(""String_Node_Str"",post.getWP_post_format());
      }
    }
    contentStruct.put(""String_Node_Str"",(post.isPage) ? ""String_Node_Str"" : ""String_Node_Str"");
    contentStruct.put(""String_Node_Str"",post.title);
    long pubDate=post.date_created_gmt;
    if (pubDate != 0) {
      Date dateCreated=new Date(pubDate);
      contentStruct.put(""String_Node_Str"",dateCreated);
      Date date_created_gmt=new Date(pubDate + (dateCreated.getTimezoneOffset() * 60000));
      contentStruct.put(""String_Node_Str"",date_created_gmt);
    }
    descriptionContent=descriptionContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    moreContent=moreContent.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    if (!moreContent.equals(""String_Node_Str"")) {
      descriptionContent=descriptionContent + ""String_Node_Str"" + moreContent;
      post.mt_text_more=""String_Node_Str"";
    }
    descriptionContent=descriptionContent.replaceAll(""String_Node_Str"",""String_Node_Str"");
    contentStruct.put(""String_Node_Str"",descriptionContent);
    if (!post.isPage) {
      if (post.mt_keywords != ""String_Node_Str"") {
        contentStruct.put(""String_Node_Str"",post.mt_keywords);
      }
      if (theCategories != null) {
        if (theCategories.length > 0)         contentStruct.put(""String_Node_Str"",theCategories);
      }
    }
    contentStruct.put((post.isPage) ? ""String_Node_Str"" : ""String_Node_Str"",post.post_status);
    Double latitude=0.0;
    Double longitude=0.0;
    if (!post.isPage) {
      latitude=(Double)post.getLatitude();
      longitude=(Double)post.getLongitude();
      if (latitude > 0) {
        HashMap<Object,Object> hLatitude=new HashMap<Object,Object>();
        hLatitude.put(""String_Node_Str"",""String_Node_Str"");
        hLatitude.put(""String_Node_Str"",latitude);
        HashMap<Object,Object> hLongitude=new HashMap<Object,Object>();
        hLongitude.put(""String_Node_Str"",""String_Node_Str"");
        hLongitude.put(""String_Node_Str"",longitude);
        HashMap<Object,Object> hPublic=new HashMap<Object,Object>();
        hPublic.put(""String_Node_Str"",""String_Node_Str"");
        hPublic.put(""String_Node_Str"",1);
        Object[] geo={hLatitude,hLongitude,hPublic};
        contentStruct.put(""String_Node_Str"",geo);
      }
    }
    XMLRPCClient client=new XMLRPCClient(post.blog.getUrl(),post.blog.getHttpuser(),post.blog.getHttppassword());
    n.setLatestEventInfo(context,message,message,n.contentIntent);
    nm.notify(notificationID,n);
    if (post.wp_password != null) {
      contentStruct.put(""String_Node_Str"",post.wp_password);
    }
    Object[] params;
    if (post.isLocalDraft() && !post.uploaded)     params=new Object[]{post.blog.getBlogId(),post.blog.getUsername(),post.blog.getPassword(),contentStruct,publishThis};
 else     params=new Object[]{post.getPostid(),post.blog.getUsername(),post.blog.getPassword(),contentStruct,publishThis};
    try {
      client.call((post.isLocalDraft() && !post.uploaded) ? ""String_Node_Str"" : ""String_Node_Str"",params);
      post.setUploaded(true);
      post.update();
      return true;
    }
 catch (    final XMLRPCException e) {
      error=e.getLocalizedMessage();
    }
  }
  return false;
}",0.9886704886704888
15214,"/** 
 * Call method with optional parameters
 * @param method name of method to call
 * @param params parameters to pass to method (may be null if method has no parameters)
 * @return deserialized method return value
 * @throws XMLRPCException
 */
@SuppressWarnings(""String_Node_Str"") private Object callXMLRPC(String method,Object[] params) throws XMLRPCException {
  try {
    File tempFile=null;
    if (method.equals(""String_Node_Str"")) {
      String tempFileName=""String_Node_Str"" + System.currentTimeMillis();
      tempFile=File.createTempFile(tempFileName,null);
      if (!tempFile.exists() && !tempFile.mkdirs()) {
        throw new XMLRPCException(""String_Node_Str"");
      }
      FileWriter fileWriter=new FileWriter(tempFile);
      serializer.setOutput(fileWriter);
      serializer.startDocument(null,null);
      serializer.startTag(null,TAG_METHOD_CALL);
      serializer.startTag(null,TAG_METHOD_NAME).text(method).endTag(null,TAG_METHOD_NAME);
      if (params != null && params.length != 0) {
        serializer.startTag(null,TAG_PARAMS);
        for (int i=0; i < params.length; i++) {
          serializer.startTag(null,TAG_PARAM).startTag(null,XMLRPCSerializer.TAG_VALUE);
          XMLRPCSerializer.serialize(serializer,params[i],false);
          serializer.endTag(null,XMLRPCSerializer.TAG_VALUE).endTag(null,TAG_PARAM);
        }
        serializer.endTag(null,TAG_PARAMS);
      }
      serializer.endTag(null,TAG_METHOD_CALL);
      serializer.endDocument();
      fileWriter.flush();
      fileWriter.close();
      FileEntity fEntity=new FileEntity(tempFile,""String_Node_Str"");
      fEntity.setContentType(""String_Node_Str"");
      postMethod.setEntity(fEntity);
    }
 else {
      StringWriter bodyWriter=new StringWriter();
      serializer.setOutput(bodyWriter);
      serializer.startDocument(null,null);
      serializer.startTag(null,TAG_METHOD_CALL);
      serializer.startTag(null,TAG_METHOD_NAME).text(method).endTag(null,TAG_METHOD_NAME);
      if (params != null && params.length != 0) {
        serializer.startTag(null,TAG_PARAMS);
        for (int i=0; i < params.length; i++) {
          serializer.startTag(null,TAG_PARAM).startTag(null,XMLRPCSerializer.TAG_VALUE);
          if (method.equals(""String_Node_Str"") || method.equals(""String_Node_Str"")) {
            XMLRPCSerializer.serialize(serializer,params[i],true);
          }
 else {
            XMLRPCSerializer.serialize(serializer,params[i],false);
          }
          serializer.endTag(null,XMLRPCSerializer.TAG_VALUE).endTag(null,TAG_PARAM);
        }
        serializer.endTag(null,TAG_PARAMS);
      }
      serializer.endTag(null,TAG_METHOD_CALL);
      serializer.endDocument();
      HttpEntity entity=new StringEntity(bodyWriter.toString());
      postMethod.setEntity(entity);
    }
    client.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,40000);
    client.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,40000);
    postMethod.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,40000);
    postMethod.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,40000);
    HttpResponse response=client.execute(postMethod);
    Log.i(""String_Node_Str"",""String_Node_Str"" + response.getStatusLine());
    int statusCode=response.getStatusLine().getStatusCode();
    if ((method.equals(""String_Node_Str""))) {
      tempFile.delete();
    }
    if (statusCode != HttpStatus.SC_OK) {
      throw new XMLRPCException(""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase());
    }
    XmlPullParser pullParser=XmlPullParserFactory.newInstance().newPullParser();
    HttpEntity entity=response.getEntity();
    PushbackInputStream is=new PushbackInputStream(entity.getContent());
    int bomCheck=is.read();
    int stopper=0;
    while (bomCheck != 60 && stopper < 20) {
      bomCheck=is.read();
      stopper++;
    }
    is.unread(bomCheck);
    pullParser.setInput(is,""String_Node_Str"");
    pullParser.nextTag();
    pullParser.require(XmlPullParser.START_TAG,null,TAG_METHOD_RESPONSE);
    pullParser.nextTag();
    String tag=pullParser.getName();
    if (tag.equals(TAG_PARAMS)) {
      pullParser.nextTag();
      pullParser.require(XmlPullParser.START_TAG,null,TAG_PARAM);
      pullParser.nextTag();
      Object obj=XMLRPCSerializer.deserialize(pullParser);
      entity.consumeContent();
      return obj;
    }
 else     if (tag.equals(TAG_FAULT)) {
      pullParser.nextTag();
      Map<String,Object> map=(Map<String,Object>)XMLRPCSerializer.deserialize(pullParser);
      String faultString=(String)map.get(TAG_FAULT_STRING);
      int faultCode=(Integer)map.get(TAG_FAULT_CODE);
      entity.consumeContent();
      throw new XMLRPCFault(faultString,faultCode);
    }
 else {
      entity.consumeContent();
      throw new XMLRPCException(""String_Node_Str"" + tag + ""String_Node_Str"");
    }
  }
 catch (  XMLRPCException e) {
    throw e;
  }
catch (  Exception e) {
    throw new XMLRPCException(e);
  }
}","/** 
 * Call method with optional parameters
 * @param method name of method to call
 * @param params parameters to pass to method (may be null if method has no parameters)
 * @return deserialized method return value
 * @throws XMLRPCException
 */
@SuppressWarnings(""String_Node_Str"") private Object callXMLRPC(String method,Object[] params) throws XMLRPCException {
  try {
    File tempFile=null;
    if (method.equals(""String_Node_Str"")) {
      String tempFileName=""String_Node_Str"" + System.currentTimeMillis();
      tempFile=File.createTempFile(tempFileName,null);
      if (!tempFile.exists() && !tempFile.mkdirs()) {
        throw new XMLRPCException(""String_Node_Str"");
      }
      FileWriter fileWriter=new FileWriter(tempFile);
      serializer.setOutput(fileWriter);
      serializer.startDocument(null,null);
      serializer.startTag(null,TAG_METHOD_CALL);
      serializer.startTag(null,TAG_METHOD_NAME).text(method).endTag(null,TAG_METHOD_NAME);
      if (params != null && params.length != 0) {
        serializer.startTag(null,TAG_PARAMS);
        for (int i=0; i < params.length; i++) {
          serializer.startTag(null,TAG_PARAM).startTag(null,XMLRPCSerializer.TAG_VALUE);
          XMLRPCSerializer.serialize(serializer,params[i]);
          serializer.endTag(null,XMLRPCSerializer.TAG_VALUE).endTag(null,TAG_PARAM);
        }
        serializer.endTag(null,TAG_PARAMS);
      }
      serializer.endTag(null,TAG_METHOD_CALL);
      serializer.endDocument();
      fileWriter.flush();
      fileWriter.close();
      FileEntity fEntity=new FileEntity(tempFile,""String_Node_Str"");
      fEntity.setContentType(""String_Node_Str"");
      postMethod.setEntity(fEntity);
    }
 else {
      StringWriter bodyWriter=new StringWriter();
      serializer.setOutput(bodyWriter);
      serializer.startDocument(null,null);
      serializer.startTag(null,TAG_METHOD_CALL);
      serializer.startTag(null,TAG_METHOD_NAME).text(method).endTag(null,TAG_METHOD_NAME);
      if (params != null && params.length != 0) {
        serializer.startTag(null,TAG_PARAMS);
        for (int i=0; i < params.length; i++) {
          serializer.startTag(null,TAG_PARAM).startTag(null,XMLRPCSerializer.TAG_VALUE);
          if (method.equals(""String_Node_Str"") || method.equals(""String_Node_Str"")) {
            XMLRPCSerializer.serialize(serializer,params[i]);
          }
 else {
            XMLRPCSerializer.serialize(serializer,params[i]);
          }
          serializer.endTag(null,XMLRPCSerializer.TAG_VALUE).endTag(null,TAG_PARAM);
        }
        serializer.endTag(null,TAG_PARAMS);
      }
      serializer.endTag(null,TAG_METHOD_CALL);
      serializer.endDocument();
      HttpEntity entity=new StringEntity(bodyWriter.toString());
      postMethod.setEntity(entity);
    }
    client.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,40000);
    client.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,40000);
    postMethod.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,40000);
    postMethod.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,40000);
    HttpResponse response=client.execute(postMethod);
    Log.i(""String_Node_Str"",""String_Node_Str"" + response.getStatusLine());
    int statusCode=response.getStatusLine().getStatusCode();
    if ((method.equals(""String_Node_Str""))) {
      tempFile.delete();
    }
    if (statusCode != HttpStatus.SC_OK) {
      throw new XMLRPCException(""String_Node_Str"" + statusCode + ""String_Node_Str""+ response.getStatusLine().getReasonPhrase());
    }
    XmlPullParser pullParser=XmlPullParserFactory.newInstance().newPullParser();
    HttpEntity entity=response.getEntity();
    PushbackInputStream is=new PushbackInputStream(entity.getContent());
    int bomCheck=is.read();
    int stopper=0;
    while (bomCheck != 60 && stopper < 20) {
      bomCheck=is.read();
      stopper++;
    }
    is.unread(bomCheck);
    pullParser.setInput(is,""String_Node_Str"");
    pullParser.nextTag();
    pullParser.require(XmlPullParser.START_TAG,null,TAG_METHOD_RESPONSE);
    pullParser.nextTag();
    String tag=pullParser.getName();
    if (tag.equals(TAG_PARAMS)) {
      pullParser.nextTag();
      pullParser.require(XmlPullParser.START_TAG,null,TAG_PARAM);
      pullParser.nextTag();
      Object obj=XMLRPCSerializer.deserialize(pullParser);
      entity.consumeContent();
      return obj;
    }
 else     if (tag.equals(TAG_FAULT)) {
      pullParser.nextTag();
      Map<String,Object> map=(Map<String,Object>)XMLRPCSerializer.deserialize(pullParser);
      String faultString=(String)map.get(TAG_FAULT_STRING);
      int faultCode=(Integer)map.get(TAG_FAULT_CODE);
      entity.consumeContent();
      throw new XMLRPCFault(faultString,faultCode);
    }
 else {
      entity.consumeContent();
      throw new XMLRPCException(""String_Node_Str"" + tag + ""String_Node_Str"");
    }
  }
 catch (  XMLRPCException e) {
    throw e;
  }
catch (  Exception e) {
    throw new XMLRPCException(e);
  }
}",0.9983032238746382
15215,"@SuppressWarnings(""String_Node_Str"") static void serialize(XmlSerializer serializer,Object object,boolean convertToGMT) throws IOException {
  if (object instanceof Integer || object instanceof Short || object instanceof Byte) {
    serializer.startTag(null,TYPE_I4).text(object.toString()).endTag(null,TYPE_I4);
  }
 else   if (object instanceof Long) {
    serializer.startTag(null,TYPE_I8).text(object.toString()).endTag(null,TYPE_I8);
  }
 else   if (object instanceof Double || object instanceof Float) {
    serializer.startTag(null,TYPE_DOUBLE).text(object.toString()).endTag(null,TYPE_DOUBLE);
  }
 else   if (object instanceof Boolean) {
    Boolean bool=(Boolean)object;
    String boolStr=bool.booleanValue() ? ""String_Node_Str"" : ""String_Node_Str"";
    serializer.startTag(null,TYPE_BOOLEAN).text(boolStr).endTag(null,TYPE_BOOLEAN);
  }
 else   if (object instanceof String) {
    serializer.startTag(null,TYPE_STRING).text(object.toString()).endTag(null,TYPE_STRING);
  }
 else   if (object instanceof Date || object instanceof Calendar) {
    Date date=(Date)object;
    SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    if (convertToGMT) {
      long pubDate=date.getTime();
      TimeZone tz=TimeZone.getDefault();
      long offset=tz.getOffset(pubDate);
      pubDate+=offset * -1;
      date=new Date(pubDate);
    }
    String sDate=dateFormat.format(date);
    serializer.startTag(null,TYPE_DATE_TIME_ISO8601).text(sDate).endTag(null,TYPE_DATE_TIME_ISO8601);
  }
 else   if (object instanceof byte[]) {
    String value=new String(Base64Coder.encode((byte[])object));
    serializer.startTag(null,TYPE_BASE64).text(value).endTag(null,TYPE_BASE64);
  }
 else   if (object instanceof MediaFile) {
    serializer.startTag(null,""String_Node_Str"");
    MediaFile videoFile=(MediaFile)object;
    InputStream inStream=new DataInputStream(new FileInputStream(videoFile.getFilePath()));
    byte[] buffer=new byte[3600];
    int length=-1;
    String chunk=null;
    while ((length=inStream.read(buffer)) > 0) {
      chunk=Base64.encodeBytes(buffer,0,length);
      serializer.text(chunk);
    }
    inStream.close();
    serializer.endTag(null,""String_Node_Str"");
  }
 else   if (object instanceof List<?>) {
    serializer.startTag(null,TYPE_ARRAY).startTag(null,TAG_DATA);
    List<Object> list=(List<Object>)object;
    Iterator<Object> iter=list.iterator();
    while (iter.hasNext()) {
      Object o=iter.next();
      serializer.startTag(null,TAG_VALUE);
      serialize(serializer,o,convertToGMT);
      serializer.endTag(null,TAG_VALUE);
    }
    serializer.endTag(null,TAG_DATA).endTag(null,TYPE_ARRAY);
  }
 else   if (object instanceof Object[]) {
    serializer.startTag(null,TYPE_ARRAY).startTag(null,TAG_DATA);
    Object[] objects=(Object[])object;
    for (int i=0; i < objects.length; i++) {
      Object o=objects[i];
      serializer.startTag(null,TAG_VALUE);
      serialize(serializer,o,convertToGMT);
      serializer.endTag(null,TAG_VALUE);
    }
    serializer.endTag(null,TAG_DATA).endTag(null,TYPE_ARRAY);
  }
 else   if (object instanceof Map) {
    serializer.startTag(null,TYPE_STRUCT);
    Map<String,Object> map=(Map<String,Object>)object;
    Iterator<Entry<String,Object>> iter=map.entrySet().iterator();
    while (iter.hasNext()) {
      Entry<String,Object> entry=iter.next();
      String key=entry.getKey();
      Object value=entry.getValue();
      serializer.startTag(null,TAG_MEMBER);
      serializer.startTag(null,TAG_NAME).text(key).endTag(null,TAG_NAME);
      serializer.startTag(null,TAG_VALUE);
      serialize(serializer,value,convertToGMT);
      serializer.endTag(null,TAG_VALUE);
      serializer.endTag(null,TAG_MEMBER);
    }
    serializer.endTag(null,TYPE_STRUCT);
  }
 else {
    throw new IOException(""String_Node_Str"" + object);
  }
}","@SuppressWarnings(""String_Node_Str"") static void serialize(XmlSerializer serializer,Object object) throws IOException {
  if (object instanceof Integer || object instanceof Short || object instanceof Byte) {
    serializer.startTag(null,TYPE_I4).text(object.toString()).endTag(null,TYPE_I4);
  }
 else   if (object instanceof Long) {
    serializer.startTag(null,TYPE_I8).text(object.toString()).endTag(null,TYPE_I8);
  }
 else   if (object instanceof Double || object instanceof Float) {
    serializer.startTag(null,TYPE_DOUBLE).text(object.toString()).endTag(null,TYPE_DOUBLE);
  }
 else   if (object instanceof Boolean) {
    Boolean bool=(Boolean)object;
    String boolStr=bool.booleanValue() ? ""String_Node_Str"" : ""String_Node_Str"";
    serializer.startTag(null,TYPE_BOOLEAN).text(boolStr).endTag(null,TYPE_BOOLEAN);
  }
 else   if (object instanceof String) {
    serializer.startTag(null,TYPE_STRING).text(object.toString()).endTag(null,TYPE_STRING);
  }
 else   if (object instanceof Date || object instanceof Calendar) {
    Date date=(Date)object;
    SimpleDateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    String sDate=dateFormat.format(date);
    serializer.startTag(null,TYPE_DATE_TIME_ISO8601).text(sDate).endTag(null,TYPE_DATE_TIME_ISO8601);
  }
 else   if (object instanceof byte[]) {
    String value=new String(Base64Coder.encode((byte[])object));
    serializer.startTag(null,TYPE_BASE64).text(value).endTag(null,TYPE_BASE64);
  }
 else   if (object instanceof MediaFile) {
    serializer.startTag(null,""String_Node_Str"");
    MediaFile videoFile=(MediaFile)object;
    InputStream inStream=new DataInputStream(new FileInputStream(videoFile.getFilePath()));
    byte[] buffer=new byte[3600];
    int length=-1;
    String chunk=null;
    while ((length=inStream.read(buffer)) > 0) {
      chunk=Base64.encodeBytes(buffer,0,length);
      serializer.text(chunk);
    }
    inStream.close();
    serializer.endTag(null,""String_Node_Str"");
  }
 else   if (object instanceof List<?>) {
    serializer.startTag(null,TYPE_ARRAY).startTag(null,TAG_DATA);
    List<Object> list=(List<Object>)object;
    Iterator<Object> iter=list.iterator();
    while (iter.hasNext()) {
      Object o=iter.next();
      serializer.startTag(null,TAG_VALUE);
      serialize(serializer,o);
      serializer.endTag(null,TAG_VALUE);
    }
    serializer.endTag(null,TAG_DATA).endTag(null,TYPE_ARRAY);
  }
 else   if (object instanceof Object[]) {
    serializer.startTag(null,TYPE_ARRAY).startTag(null,TAG_DATA);
    Object[] objects=(Object[])object;
    for (int i=0; i < objects.length; i++) {
      Object o=objects[i];
      serializer.startTag(null,TAG_VALUE);
      serialize(serializer,o);
      serializer.endTag(null,TAG_VALUE);
    }
    serializer.endTag(null,TAG_DATA).endTag(null,TYPE_ARRAY);
  }
 else   if (object instanceof Map) {
    serializer.startTag(null,TYPE_STRUCT);
    Map<String,Object> map=(Map<String,Object>)object;
    Iterator<Entry<String,Object>> iter=map.entrySet().iterator();
    while (iter.hasNext()) {
      Entry<String,Object> entry=iter.next();
      String key=entry.getKey();
      Object value=entry.getValue();
      serializer.startTag(null,TAG_MEMBER);
      serializer.startTag(null,TAG_NAME).text(key).endTag(null,TAG_NAME);
      serializer.startTag(null,TAG_VALUE);
      serialize(serializer,value);
      serializer.endTag(null,TAG_VALUE);
      serializer.endTag(null,TAG_MEMBER);
    }
    serializer.endTag(null,TYPE_STRUCT);
  }
 else {
    throw new IOException(""String_Node_Str"" + object);
  }
}",0.9642037012022152
15216,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_account);
  this.setTitle(""String_Node_Str"" + getResources().getText(R.string.add_account));
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    wpcom=extras.getBoolean(""String_Node_Str"",false);
  }
  if (wpcom) {
    TextView urlLabel=(TextView)findViewById(R.id.l_url);
    urlLabel.setVisibility(View.GONE);
    EditText urlET=(EditText)findViewById(R.id.url);
    urlET.setVisibility(View.GONE);
  }
 else {
    ImageView logo=(ImageView)findViewById(R.id.wpcomLogo);
    logo.setImageDrawable(getResources().getDrawable(R.drawable.wplogo));
  }
  final Button settingsButton=(Button)findViewById(R.id.settingsButton);
  if (!wpcom) {
    settingsButton.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Intent settings=new Intent(AddAccount.this,AddAcountSettings.class);
        settings.putExtra(""String_Node_Str"",httpuser);
        settings.putExtra(""String_Node_Str"",httppassword);
        startActivityForResult(settings,R.id.settingsButton);
      }
    }
);
  }
 else {
    settingsButton.setVisibility(View.GONE);
  }
  final Button cancelButton=(Button)findViewById(R.id.cancel);
  final Button saveButton=(Button)findViewById(R.id.save);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      pd=ProgressDialog.show(AddAccount.this,getResources().getText(R.string.account_setup),getResources().getText(R.string.attempting_configure),true,false);
      Thread action=new Thread(){
        public void run(){
          Looper.prepare();
          configureAccount();
          Looper.loop();
        }
      }
;
      action.start();
    }
  }
);
  cancelButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",""String_Node_Str"");
      Intent mIntent=new Intent();
      mIntent.putExtras(bundle);
      setResult(RESULT_OK,mIntent);
      finish();
    }
  }
);
  Button signUp=(Button)findViewById(R.id.wordpressdotcom);
  signUp.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Intent signupIntent=new Intent(AddAccount.this,Signup.class);
      startActivity(signupIntent);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_account);
  this.setTitle(""String_Node_Str"" + getResources().getText(R.string.add_account));
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    wpcom=extras.getBoolean(""String_Node_Str"",false);
  }
  if (wpcom) {
    TextView urlLabel=(TextView)findViewById(R.id.l_url);
    urlLabel.setVisibility(View.GONE);
    EditText urlET=(EditText)findViewById(R.id.url);
    urlET.setVisibility(View.GONE);
  }
 else {
    ImageView logo=(ImageView)findViewById(R.id.wpcomLogo);
    logo.setImageDrawable(getResources().getDrawable(R.drawable.wplogo));
  }
  final Button settingsButton=(Button)findViewById(R.id.settingsButton);
  if (!wpcom) {
    settingsButton.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Intent settings=new Intent(AddAccount.this,AddAcountSettings.class);
        settings.putExtra(""String_Node_Str"",httpuser);
        settings.putExtra(""String_Node_Str"",httppassword);
        startActivityForResult(settings,R.id.settingsButton);
      }
    }
);
  }
 else {
    settingsButton.setVisibility(View.GONE);
  }
  final Button cancelButton=(Button)findViewById(R.id.cancel);
  final Button saveButton=(Button)findViewById(R.id.save);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      pd=ProgressDialog.show(AddAccount.this,getResources().getText(R.string.account_setup),getResources().getText(R.string.attempting_configure),true,false);
      Thread action=new Thread(){
        public void run(){
          Looper.prepare();
          configureAccount();
          Looper.loop();
        }
      }
;
      action.start();
    }
  }
);
  cancelButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Bundle bundle=new Bundle();
      bundle.putString(""String_Node_Str"",""String_Node_Str"");
      Intent mIntent=new Intent();
      mIntent.putExtras(bundle);
      setResult(RESULT_OK,mIntent);
      finish();
    }
  }
);
  Button signUp=(Button)findViewById(R.id.wordpressdotcom);
  signUp.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Intent signupIntent=new Intent(AddAccount.this,Signup.class);
      startActivity(signupIntent);
    }
  }
);
}",0.985661614092585
15217,"public boolean savePost(){
  EditText titleET=(EditText)findViewById(R.id.title);
  String title=titleET.getText().toString();
  WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
  String content=EscapeUtils.unescapeHtml(WPHtml.toHtml(contentET.getText()));
  EditText passwordET=(EditText)findViewById(R.id.post_password);
  String password=passwordET.getText().toString();
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
  String pubDate=tvPubDate.getText().toString();
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Date d=new Date();
    try {
      d=sdf.parse(pubDate);
      pubDateTimestamp=d.getTime();
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
catch (    java.text.ParseException e) {
      e.printStackTrace();
    }
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!isPage) {
    EditText tagsET=(EditText)findViewById(R.id.tags);
    tags=tagsET.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=postFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"")) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPost.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!isNew) {
      post.deleteMediaFiles();
      Spannable s=contentET.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(post.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save(EditPost.this);
        }
      }
    }
    Spinner spinner=(Spinner)findViewById(R.id.status);
    int selectedStatus=spinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
case 4:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (blog.isLocation()) {
try {
latitude=curLocation.getLatitude();
longitude=curLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
String needle=""String_Node_Str"" + getResources().getText(R.string.more_tag) + ""String_Node_Str"";
if (isNew) {
post=new Post(id,title,content,images,pubDateTimestamp,categories.toString(),tags,status,password,latitude,longitude,isPage,postFormat,EditPost.this,true);
post.setLocalDraft(true);
if (content.indexOf(needle) >= 0) {
post.setDescription(content.substring(0,content.indexOf(needle)));
post.setMt_text_more(content.substring(content.indexOf(needle) + needle.length(),content.length()));
}
success=post.save();
post.deleteMediaFiles();
Spannable s=contentET.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(post.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save(EditPost.this);
}
}
}
 else {
post.setTitle(title);
if (content.indexOf(needle) >= 0) {
post.setDescription(content.substring(0,content.indexOf(needle)));
post.setMt_text_more(content.substring(content.indexOf(needle) + needle.length(),content.length()));
}
 else {
post.setDescription(content);
}
post.setMediaPaths(images);
post.setDate_created_gmt(pubDateTimestamp);
post.setCategories(categories);
post.setMt_keywords(tags);
post.setPost_status(status);
post.setWP_password(password);
post.setLatitude(latitude);
post.setLongitude(longitude);
post.setWP_post_form(postFormat);
success=post.update();
}
}
return success;
}","public boolean savePost(){
  EditText titleET=(EditText)findViewById(R.id.title);
  String title=titleET.getText().toString();
  WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
  String content=EscapeUtils.unescapeHtml(WPHtml.toHtml(contentET.getText()));
  EditText passwordET=(EditText)findViewById(R.id.post_password);
  String password=passwordET.getText().toString();
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
  String pubDate=tvPubDate.getText().toString();
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    if (isCustomPubDate)     pubDateTimestamp=customPubDate;
 else     if (!isNew)     pubDateTimestamp=post.getDate_created_gmt();
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!isPage) {
    EditText tagsET=(EditText)findViewById(R.id.tags);
    tags=tagsET.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=postFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"")) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPost.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!isNew) {
      post.deleteMediaFiles();
      Spannable s=contentET.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(post.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save(EditPost.this);
        }
      }
    }
    Spinner spinner=(Spinner)findViewById(R.id.status);
    int selectedStatus=spinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
case 4:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (blog.isLocation()) {
try {
latitude=curLocation.getLatitude();
longitude=curLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
String needle=""String_Node_Str"" + getResources().getText(R.string.more_tag) + ""String_Node_Str"";
if (isNew) {
post=new Post(id,title,content,images,pubDateTimestamp,categories.toString(),tags,status,password,latitude,longitude,isPage,postFormat,EditPost.this,true);
post.setLocalDraft(true);
if (content.indexOf(needle) >= 0) {
post.setDescription(content.substring(0,content.indexOf(needle)));
post.setMt_text_more(content.substring(content.indexOf(needle) + needle.length(),content.length()));
}
success=post.save();
post.deleteMediaFiles();
Spannable s=contentET.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(post.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save(EditPost.this);
}
}
WordPress.currentPost=post;
}
 else {
post.setTitle(title);
if (content.indexOf(needle) >= 0) {
post.setDescription(content.substring(0,content.indexOf(needle)));
post.setMt_text_more(content.substring(content.indexOf(needle) + needle.length(),content.length()));
}
 else {
post.setDescription(content);
}
post.setMediaPaths(images);
post.setDate_created_gmt(pubDateTimestamp);
post.setCategories(categories);
post.setMt_keywords(tags);
post.setPost_status(status);
post.setWP_password(password);
post.setLatitude(latitude);
post.setLongitude(longitude);
post.setWP_post_form(postFormat);
success=post.update();
}
}
return success;
}",0.9623004423927678
15218,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  categories=new JSONArray();
  String action=getIntent().getAction();
  WordPress.richPostContent=null;
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        try {
          blog=new Blog(accountIDs[i],EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setCancelable(false);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            try {
              blog=new Blog(id,EditPost.this);
            }
 catch (            Exception e) {
              Toast.makeText(EditPost.this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
              finish();
            }
            WordPress.currentBlog=blog;
            WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
            accountName=blogNames[item];
            setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        try {
          blog=new Blog(id,EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
        WordPress.currentBlog=blog;
        WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
        accountName=blogNames[0];
        setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
      return;
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      try {
        blog=new Blog(id,this);
      }
 catch (      Exception e) {
        Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
        finish();
      }
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (extras.getBoolean(""String_Node_Str"")) {
        id=extras.getInt(""String_Node_Str"");
        try {
          blog=new Blog(id,this);
          WordPress.currentBlog=blog;
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (!isNew)       post=new Post(id,postID,isPage,this);
    }
    if (isNew) {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    lbsCheck();
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      evaluateSaveButtonText();
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  if (isNew) {
    if (!isAction) {
      if (!isPage) {
        enableLBSButtons();
      }
    }
    if (option != null) {
      Intent i=new Intent(EditPost.this,EditContent.class);
      i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      i.putExtra(""String_Node_Str"",option);
      startActivityForResult(i,0);
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      contentHTML=post.getDescription() + ""String_Node_Str"" + getResources().getText(R.string.more_tag)+ ""String_Node_Str""+ post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    contentET.setText(WPHtml.fromHtml(StringHelper.addPTags(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str"")),EditPost.this,post));
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        long localTime=pubDate + TimeZone.getDefault().getOffset(pubDate);
        String formattedDate=DateUtils.formatDateTime(EditPost.this,localTime,flags);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
      evaluateSaveButtonText();
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      if (blog.isLocation()) {
        enableLBSButtons();
      }
      Double latitude=post.getLatitude();
      Double longitude=post.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
      if (blog.isLocation() && latitude > 0) {
        Button updateLocation=(Button)findViewById(R.id.updateLocation);
        updateLocation.setOnClickListener(new Button.OnClickListener(){
          public void onClick(          View v){
            lm=(LocationManager)getSystemService(LOCATION_SERVICE);
            lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
            lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
            locationActive=true;
          }
        }
);
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
 else       if (blog.isLocation()) {
        lm=(LocationManager)getSystemService(LOCATION_SERVICE);
        lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
        lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
        locationActive=true;
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,1);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        Intent i=new Intent(EditPost.this,EditContent.class);
        WordPress.richPostContent=content.getText();
        i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivityForResult(i,0);
      }
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    try {
      WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  categories=new JSONArray();
  String action=getIntent().getAction();
  WordPress.richPostContent=null;
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        try {
          blog=new Blog(accountIDs[i],EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setCancelable(false);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            try {
              blog=new Blog(id,EditPost.this);
            }
 catch (            Exception e) {
              Toast.makeText(EditPost.this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
              finish();
            }
            WordPress.currentBlog=blog;
            WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
            accountName=blogNames[item];
            setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        try {
          blog=new Blog(id,EditPost.this);
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
        WordPress.currentBlog=blog;
        WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
        accountName=blogNames[0];
        setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
      return;
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      try {
        blog=new Blog(id,this);
      }
 catch (      Exception e) {
        Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
        finish();
      }
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (extras.getBoolean(""String_Node_Str"")) {
        id=extras.getInt(""String_Node_Str"");
        try {
          blog=new Blog(id,this);
          WordPress.currentBlog=blog;
        }
 catch (        Exception e) {
          Toast.makeText(this,getResources().getText(R.string.blog_not_found),Toast.LENGTH_SHORT).show();
          finish();
        }
      }
      if (!isNew)       post=new Post(id,postID,isPage,this);
      WordPress.currentPost=post;
    }
    if (isNew) {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    lbsCheck();
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      evaluateSaveButtonText();
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  if (isNew) {
    if (!isAction) {
      if (!isPage) {
        enableLBSButtons();
      }
    }
    if (option != null) {
      Intent i=new Intent(EditPost.this,EditContent.class);
      i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      i.putExtra(""String_Node_Str"",option);
      startActivityForResult(i,0);
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      contentHTML=post.getDescription() + ""String_Node_Str"" + getResources().getText(R.string.more_tag)+ ""String_Node_Str""+ post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    contentET.setText(WPHtml.fromHtml(StringHelper.addPTags(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str"")),EditPost.this,post));
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        long localTime=pubDate + TimeZone.getDefault().getOffset(pubDate);
        String formattedDate=DateUtils.formatDateTime(EditPost.this,localTime,flags);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
      evaluateSaveButtonText();
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      if (blog.isLocation()) {
        enableLBSButtons();
      }
      Double latitude=post.getLatitude();
      Double longitude=post.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
      if (blog.isLocation() && latitude > 0) {
        Button updateLocation=(Button)findViewById(R.id.updateLocation);
        updateLocation.setOnClickListener(new Button.OnClickListener(){
          public void onClick(          View v){
            lm=(LocationManager)getSystemService(LOCATION_SERVICE);
            lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
            lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
            locationActive=true;
          }
        }
);
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
 else       if (blog.isLocation()) {
        lm=(LocationManager)getSystemService(LOCATION_SERVICE);
        lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
        lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
        locationActive=true;
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,1);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        Intent i=new Intent(EditPost.this,EditContent.class);
        WordPress.richPostContent=content.getText();
        i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivityForResult(i,0);
      }
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}",0.9988529788813172
15219,"public void onTimeSet(TimePicker view,int hour,int minute){
  mHour=hour;
  mMinute=minute;
  String AMPM=""String_Node_Str"";
  if (mHour >= 12) {
    AMPM=""String_Node_Str"";
    if (mHour > 12) {
      mHour-=12;
    }
  }
  TextView pubDate=(TextView)findViewById(R.id.pubDate);
  String[] shortMonths=new DateFormatSymbols().getShortMonths();
  pubDate.setText(shortMonths[mMonth] + ""String_Node_Str"" + String.format(""String_Node_Str"",mDay)+ ""String_Node_Str""+ mYear+ ""String_Node_Str""+ String.format(""String_Node_Str"",mHour)+ ""String_Node_Str""+ String.format(""String_Node_Str"",mMinute)+ ""String_Node_Str""+ AMPM);
  isCustomPubDate=true;
}","public void onTimeSet(TimePicker view,int hour,int minute){
  mHour=hour;
  mMinute=minute;
  Date d=new Date(mYear - 1900,mMonth,mDay,mHour,mMinute);
  long timestamp=d.getTime();
  try {
    int flags=0;
    flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
    flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
    flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
    flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
    customPubDate=timestamp + TimeZone.getDefault().getOffset(timestamp);
    String formattedDate=DateUtils.formatDateTime(EditPost.this,customPubDate,flags);
    TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
    tvPubDate.setText(formattedDate);
    isCustomPubDate=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.2321678321678321
15220,"public void handleMessage(Message msg){
  super.handleMessage(msg);
  final ImageView ivGravatar=(ImageView)getActivity().findViewById(R.id.gravatar);
  ivGravatar.setImageDrawable(d);
}","public void handleMessage(Message msg){
  super.handleMessage(msg);
  try {
    final ImageView ivGravatar=(ImageView)getActivity().findViewById(R.id.gravatar);
    ivGravatar.setImageDrawable(d);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8416289592760181
15221,"protected void deleteComments(){
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals(""String_Node_Str"")) {
      client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
      Comment listRow=(Comment)getListView().getItemAtPosition(i);
      String curCommentID=listRow.commentID;
      Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID};
      try {
        client.call(""String_Node_Str"",params);
      }
 catch (      final XMLRPCException e) {
        moderateErrorMsg=e.getLocalizedMessage();
      }
    }
  }
  getActivity().dismissDialog(ID_DIALOG_DELETING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        refreshComments(false,false,false);
      }
 else {
        FragmentTransaction ft=getFragmentManager().beginTransaction();
        WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
        alert.show(ft,""String_Node_Str"");
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  pd=new ProgressDialog(getActivity().getApplicationContext());
}","protected void deleteComments(){
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals(""String_Node_Str"")) {
      client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
      Comment listRow=(Comment)getListView().getItemAtPosition(i);
      String curCommentID=listRow.commentID;
      Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID};
      try {
        client.call(""String_Node_Str"",params);
      }
 catch (      final XMLRPCException e) {
        moderateErrorMsg=e.getLocalizedMessage();
      }
    }
  }
  getActivity().dismissDialog(ID_DIALOG_DELETING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        refreshComments(false,false,false);
      }
 else {
        FragmentTransaction ft=getFragmentManager().beginTransaction();
        WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
        alert.show(ft,""String_Node_Str"");
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  pd=new ProgressDialog(getActivity().getApplicationContext());
}",0.9909459881361224
15222,"@SuppressWarnings(""String_Node_Str"") protected void moderateComments(String newStatus){
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals(""String_Node_Str"")) {
      client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
      Comment listRow=(Comment)getListView().getItemAtPosition(i);
      String curCommentID=listRow.commentID;
      HashMap<String,String> contentHash, postHash=new HashMap<String,String>();
      contentHash=(HashMap<String,String>)allComments.get(curCommentID);
      postHash.put(""String_Node_Str"",newStatus);
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID,postHash};
      Object result=null;
      try {
        result=(Object)client.call(""String_Node_Str"",params);
        boolean bResult=Boolean.parseBoolean(result.toString());
        if (bResult) {
          checkedComments.set(i,""String_Node_Str"");
          listRow.status=newStatus;
          model.set(i,listRow);
          WordPress.wpDB.updateCommentStatus(WordPress.currentBlog.getId(),listRow.commentID,newStatus);
        }
      }
 catch (      XMLRPCException e) {
        moderateErrorMsg=e.getLocalizedMessage();
      }
    }
  }
  getActivity().dismissDialog(ID_DIALOG_MODERATING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        thumbs.notifyDataSetChanged();
      }
 else {
        FragmentTransaction ft=getFragmentManager().beginTransaction();
        WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
        alert.show(ft,""String_Node_Str"");
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  pd=new ProgressDialog(getActivity().getApplicationContext());
}","@SuppressWarnings(""String_Node_Str"") protected void moderateComments(String newStatus){
  for (int i=0; i < checkedComments.size(); i++) {
    if (checkedComments.get(i).toString().equals(""String_Node_Str"")) {
      client=new XMLRPCClient(WordPress.currentBlog.getUrl(),WordPress.currentBlog.getHttpuser(),WordPress.currentBlog.getHttppassword());
      Comment listRow=(Comment)getListView().getItemAtPosition(i);
      String curCommentID=listRow.commentID;
      HashMap<String,String> contentHash, postHash=new HashMap<String,String>();
      contentHash=(HashMap<String,String>)allComments.get(curCommentID);
      postHash.put(""String_Node_Str"",newStatus);
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      postHash.put(""String_Node_Str"",contentHash.get(""String_Node_Str""));
      Object[] params={WordPress.currentBlog.getBlogId(),WordPress.currentBlog.getUsername(),WordPress.currentBlog.getPassword(),curCommentID,postHash};
      Object result=null;
      try {
        result=(Object)client.call(""String_Node_Str"",params);
        boolean bResult=Boolean.parseBoolean(result.toString());
        if (bResult) {
          checkedComments.set(i,""String_Node_Str"");
          listRow.status=newStatus;
          model.set(i,listRow);
          WordPress.wpDB.updateCommentStatus(WordPress.currentBlog.getId(),listRow.commentID,newStatus);
        }
      }
 catch (      XMLRPCException e) {
        moderateErrorMsg=e.getLocalizedMessage();
      }
    }
  }
  getActivity().dismissDialog(ID_DIALOG_MODERATING);
  Thread action=new Thread(){
    public void run(){
      if (moderateErrorMsg == ""String_Node_Str"") {
        String msg=getResources().getText(R.string.comment_moderated).toString();
        if (checkedCommentTotal > 1)         msg=getResources().getText(R.string.comments_moderated).toString();
        Toast.makeText(getActivity().getApplicationContext(),msg,Toast.LENGTH_SHORT).show();
        checkedCommentTotal=0;
        hideModerationBar();
        thumbs.notifyDataSetChanged();
      }
 else {
        FragmentTransaction ft=getFragmentManager().beginTransaction();
        WPAlertDialogFragment alert=WPAlertDialogFragment.newInstance(moderateErrorMsg);
        alert.show(ft,""String_Node_Str"");
      }
    }
  }
;
  getActivity().runOnUiThread(action);
  pd=new ProgressDialog(getActivity().getApplicationContext());
}",0.994244889859099
15223,"@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
  if (WordPress.currentPost != null) {
    loadPost(WordPress.currentPost);
  }
}","@Override public void onActivityCreated(Bundle bundle){
  super.onActivityCreated(bundle);
}",0.696969696969697
15224,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data != null || (resultCode != RESULT_CANCELED || (requestCode == 1 || requestCode == 3))) {
    Bundle extras;
switch (requestCode) {
case 0:
      Uri imageUri=data.getData();
    String imgPath=imageUri.toString();
  addMedia(imgPath,imageUri);
break;
case 1:
if (resultCode == Activity.RESULT_OK) {
File f=new File(SD_CARD_TEMP_DIR);
try {
  Uri capturedImage=Uri.parse(android.provider.MediaStore.Images.Media.insertImage(getContentResolver(),f.getAbsolutePath(),null,null));
  Log.i(""String_Node_Str"",""String_Node_Str"" + capturedImage.toString());
  f.delete();
  addMedia(capturedImage.toString(),capturedImage);
}
 catch (FileNotFoundException e) {
}
}
 else {
if (option != null) {
  Intent intent=new Intent();
  intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
  setResult(Activity.RESULT_CANCELED,intent);
  finish();
}
}
break;
case 2:
Uri videoUri=data.getData();
String videoPath=videoUri.toString();
addMedia(videoPath,videoUri);
break;
case 3:
if (resultCode == Activity.RESULT_OK) {
Uri capturedVideo=data.getData();
addMedia(capturedVideo.toString(),capturedVideo);
}
 else {
if (option != null) {
Intent intent=new Intent();
intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
setResult(Activity.RESULT_CANCELED,intent);
finish();
}
}
break;
case 4:
extras=data.getExtras();
String linkURL=extras.getString(""String_Node_Str"");
if (!linkURL.equals(""String_Node_Str"") && !linkURL.equals(""String_Node_Str"")) {
WPEditText contentText=(WPEditText)findViewById(R.id.postContent);
if (selectionStart > selectionEnd) {
int temp=selectionEnd;
selectionEnd=selectionStart;
selectionStart=temp;
}
Editable str=contentText.getText();
if (extras.getString(""String_Node_Str"") == null) {
if (selectionStart < selectionEnd) str.delete(selectionStart,selectionEnd);
str.insert(selectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),selectionStart,selectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
contentText.setSelection(selectionStart + linkURL.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (selectionStart < selectionEnd) str.delete(selectionStart,selectionEnd);
str.insert(selectionStart,linkText);
str.setSpan(new URLSpan(linkURL),selectionStart,selectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
contentText.setSelection(selectionStart + linkText.length());
}
}
break;
}
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_CANCELED)   return;
  if (data != null || ((requestCode == 1 || requestCode == 3))) {
    Bundle extras;
switch (requestCode) {
case 0:
      Uri imageUri=data.getData();
    String imgPath=imageUri.toString();
  addMedia(imgPath,imageUri);
break;
case 1:
if (resultCode == Activity.RESULT_OK) {
File f=new File(SD_CARD_TEMP_DIR);
try {
  Uri capturedImage=Uri.parse(android.provider.MediaStore.Images.Media.insertImage(getContentResolver(),f.getAbsolutePath(),null,null));
  Log.i(""String_Node_Str"",""String_Node_Str"" + capturedImage.toString());
  f.delete();
  addMedia(capturedImage.toString(),capturedImage);
}
 catch (FileNotFoundException e) {
}
catch (Exception e) {
}
}
 else {
if (option != null) {
  Intent intent=new Intent();
  intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
  setResult(Activity.RESULT_CANCELED,intent);
  finish();
}
}
break;
case 2:
Uri videoUri=data.getData();
String videoPath=videoUri.toString();
addMedia(videoPath,videoUri);
break;
case 3:
if (resultCode == Activity.RESULT_OK) {
Uri capturedVideo=data.getData();
addMedia(capturedVideo.toString(),capturedVideo);
}
 else {
if (option != null) {
Intent intent=new Intent();
intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
setResult(Activity.RESULT_CANCELED,intent);
finish();
}
}
break;
case 4:
extras=data.getExtras();
String linkURL=extras.getString(""String_Node_Str"");
if (!linkURL.equals(""String_Node_Str"") && !linkURL.equals(""String_Node_Str"")) {
WPEditText contentText=(WPEditText)findViewById(R.id.postContent);
if (selectionStart > selectionEnd) {
int temp=selectionEnd;
selectionEnd=selectionStart;
selectionStart=temp;
}
Editable str=contentText.getText();
if (extras.getString(""String_Node_Str"") == null) {
if (selectionStart < selectionEnd) str.delete(selectionStart,selectionEnd);
str.insert(selectionStart,linkURL);
str.setSpan(new URLSpan(linkURL),selectionStart,selectionStart + linkURL.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
contentText.setSelection(selectionStart + linkURL.length());
}
 else {
String linkText=extras.getString(""String_Node_Str"");
if (selectionStart < selectionEnd) str.delete(selectionStart,selectionEnd);
str.insert(selectionStart,linkText);
str.setSpan(new URLSpan(linkURL),selectionStart,selectionStart + linkText.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
contentText.setSelection(selectionStart + linkText.length());
}
}
break;
}
}
}",0.985369711348359
15225,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  categories=new JSONArray();
  String action=getIntent().getAction();
  WordPress.richPostContent=null;
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        blog=new Blog(accountIDs[i],EditPost.this);
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            blog=new Blog(id,EditPost.this);
            WordPress.currentBlog=blog;
            accountName=blogNames[item];
            setTitle(accountName + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        blog=new Blog(id,EditPost.this);
        WordPress.currentBlog=blog;
        accountName=blogNames[0];
        setTitle(accountName + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
      return;
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      blog=new Blog(id,this);
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (!isNew)       post=new Post(id,postID,isPage,this);
    }
    if (isNew) {
      setTitle(WordPress.currentBlog.getBlogName() + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(WordPress.currentBlog.getBlogName() + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    lbsCheck();
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      evaluateSaveButtonText();
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  if (isNew) {
    if (!isAction) {
      if (!isPage) {
        enableLBSButtons();
      }
    }
    if (option != null) {
      Intent i=new Intent(EditPost.this,EditContent.class);
      i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      i.putExtra(""String_Node_Str"",option);
      startActivityForResult(i,0);
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      contentHTML=post.getDescription() + ""String_Node_Str"" + getResources().getText(R.string.more_tag)+ ""String_Node_Str""+ post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    contentET.setText(WPHtml.fromHtml(StringHelper.addPTags(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str"")),EditPost.this,post));
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        long localTime=pubDate + TimeZone.getDefault().getOffset(pubDate);
        String formattedDate=DateUtils.formatDateTime(EditPost.this,localTime,flags);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
      evaluateSaveButtonText();
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      if (blog.isLocation()) {
        enableLBSButtons();
      }
      Double latitude=post.getLatitude();
      Double longitude=post.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
      if (blog.isLocation() && latitude > 0) {
        Button updateLocation=(Button)findViewById(R.id.updateLocation);
        updateLocation.setOnClickListener(new Button.OnClickListener(){
          public void onClick(          View v){
            lm=(LocationManager)getSystemService(LOCATION_SERVICE);
            lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
            lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
            locationActive=true;
          }
        }
);
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
 else       if (blog.isLocation()) {
        lm=(LocationManager)getSystemService(LOCATION_SERVICE);
        lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
        lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
        locationActive=true;
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,1);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        Intent i=new Intent(EditPost.this,EditContent.class);
        WordPress.richPostContent=content.getText();
        i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivityForResult(i,0);
      }
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  if (WordPress.currentBlog == null) {
    WordPress.currentBlog=new Blog(WordPress.wpDB.getLastBlogID(this),this);
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  categories=new JSONArray();
  String action=getIntent().getAction();
  WordPress.richPostContent=null;
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        blog=new Blog(accountIDs[i],EditPost.this);
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            blog=new Blog(id,EditPost.this);
            WordPress.currentBlog=blog;
            accountName=blogNames[item];
            setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        blog=new Blog(id,EditPost.this);
        WordPress.currentBlog=blog;
        accountName=blogNames[0];
        setTitle(EscapeUtils.unescapeHtml(accountName) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
      return;
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      blog=new Blog(id,this);
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (!isNew)       post=new Post(id,postID,isPage,this);
    }
    if (isNew) {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
    }
 else {
      setTitle(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()) + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
    }
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    lbsCheck();
    if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action))     setContent();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> arg0,    View arg1,    int arg2,    long arg3){
      evaluateSaveButtonText();
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  if (isNew) {
    if (!isAction) {
      if (!isPage) {
        enableLBSButtons();
      }
    }
    if (option != null) {
      Intent i=new Intent(EditPost.this,EditContent.class);
      i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      i.putExtra(""String_Node_Str"",option);
      startActivityForResult(i,0);
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      contentHTML=post.getDescription() + ""String_Node_Str"" + getResources().getText(R.string.more_tag)+ ""String_Node_Str""+ post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    contentET.setText(WPHtml.fromHtml(StringHelper.addPTags(contentHTML.replaceAll(""String_Node_Str"",""String_Node_Str"")),EditPost.this,post));
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        int flags=0;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
        flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
        flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
        long localTime=pubDate + TimeZone.getDefault().getOffset(pubDate);
        String formattedDate=DateUtils.formatDateTime(EditPost.this,localTime,flags);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(formattedDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
      evaluateSaveButtonText();
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
      if (blog.isLocation()) {
        enableLBSButtons();
      }
      Double latitude=post.getLatitude();
      Double longitude=post.getLongitude();
      if (latitude != 0.0) {
        new getAddressTask().execute(latitude,longitude);
      }
      if (blog.isLocation() && latitude > 0) {
        Button updateLocation=(Button)findViewById(R.id.updateLocation);
        updateLocation.setOnClickListener(new Button.OnClickListener(){
          public void onClick(          View v){
            lm=(LocationManager)getSystemService(LOCATION_SERVICE);
            lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
            lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
            locationActive=true;
          }
        }
);
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
 else       if (blog.isLocation()) {
        lm=(LocationManager)getSystemService(LOCATION_SERVICE);
        lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
        lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
        locationActive=true;
        RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
        locationSection.setVisibility(View.VISIBLE);
      }
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,1);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        Intent i=new Intent(EditPost.this,EditContent.class);
        WordPress.richPostContent=content.getText();
        i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivityForResult(i,0);
      }
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}",0.9960987320879284
15226,"protected void loadPostPreview(){
  if (!WordPress.currentPost.getPermaLink().equals(""String_Node_Str"")) {
    Intent i=new Intent(getActivity(),Read.class);
    startActivity(i);
  }
}","protected void loadPostPreview(){
  if (WordPress.currentPost != null) {
    if (!WordPress.currentPost.getPermaLink().equals(""String_Node_Str"")) {
      Intent i=new Intent(getActivity(),Read.class);
      startActivity(i);
    }
  }
}",0.8788598574821853
15227,"public HashMap<String,Object> getImageBytesForPath(String filePath,Context ctx){
  Uri curStream=null;
  String[] projection;
  HashMap<String,Object> mediaData=new HashMap<String,Object>();
  String title=""String_Node_Str"", orientation=""String_Node_Str"";
  byte[] bytes;
  if (filePath != null) {
    if (!filePath.contains(""String_Node_Str""))     curStream=Uri.parse(""String_Node_Str"" + filePath);
 else     curStream=Uri.parse(filePath);
  }
  if (curStream != null) {
    if (filePath.contains(""String_Node_Str"")) {
      int videoID=Integer.parseInt(curStream.getLastPathSegment());
      projection=new String[]{Video.Thumbnails._ID,Video.Thumbnails.DATA};
      ContentResolver crThumb=ctx.getContentResolver();
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=1;
      Bitmap videoBitmap=MediaStore.Video.Thumbnails.getThumbnail(crThumb,videoID,MediaStore.Video.Thumbnails.MINI_KIND,options);
      ByteArrayOutputStream stream=new ByteArrayOutputStream();
      videoBitmap.compress(Bitmap.CompressFormat.PNG,100,stream);
      bytes=stream.toByteArray();
      title=""String_Node_Str"";
      videoBitmap=null;
    }
 else {
      projection=new String[]{Images.Thumbnails._ID,Images.Thumbnails.DATA,Images.Media.ORIENTATION};
      String path=""String_Node_Str"";
      Cursor cur=ctx.getContentResolver().query(curStream,projection,null,null,null);
      File jpeg=null;
      if (cur != null) {
        String thumbData=""String_Node_Str"";
        if (cur.moveToFirst()) {
          int dataColumn, orientationColumn;
          dataColumn=cur.getColumnIndex(Images.Media.DATA);
          thumbData=cur.getString(dataColumn);
          orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
          orientation=cur.getString(orientationColumn);
        }
        if (thumbData == null) {
          return null;
        }
        jpeg=new File(thumbData);
        path=thumbData;
      }
 else {
        path=curStream.toString().replace(""String_Node_Str"",""String_Node_Str"");
        jpeg=new File(curStream.toString().replace(""String_Node_Str"",""String_Node_Str""));
      }
      title=jpeg.getName();
      bytes=new byte[(int)jpeg.length()];
      DataInputStream in=null;
      try {
        in=new DataInputStream(new FileInputStream(jpeg));
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        return null;
      }
      try {
        in.readFully(bytes);
      }
 catch (      IOException e) {
        e.printStackTrace();
        return null;
      }
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
        return null;
      }
      title=jpeg.getName();
      if (orientation == ""String_Node_Str"") {
        orientation=getExifOrientation(path,orientation);
      }
    }
    mediaData.put(""String_Node_Str"",bytes);
    mediaData.put(""String_Node_Str"",title);
    mediaData.put(""String_Node_Str"",orientation);
    return mediaData;
  }
 else {
    return null;
  }
}","public HashMap<String,Object> getImageBytesForPath(String filePath,Context ctx){
  Uri curStream=null;
  String[] projection;
  HashMap<String,Object> mediaData=new HashMap<String,Object>();
  String title=""String_Node_Str"", orientation=""String_Node_Str"";
  byte[] bytes;
  if (filePath != null) {
    if (!filePath.contains(""String_Node_Str""))     curStream=Uri.parse(""String_Node_Str"" + filePath);
 else     curStream=Uri.parse(filePath);
  }
  if (curStream != null) {
    if (filePath.contains(""String_Node_Str"")) {
      int videoID=Integer.parseInt(curStream.getLastPathSegment());
      projection=new String[]{Video.Thumbnails._ID,Video.Thumbnails.DATA};
      ContentResolver crThumb=ctx.getContentResolver();
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=1;
      Bitmap videoBitmap=MediaStore.Video.Thumbnails.getThumbnail(crThumb,videoID,MediaStore.Video.Thumbnails.MINI_KIND,options);
      ByteArrayOutputStream stream=new ByteArrayOutputStream();
      try {
        videoBitmap.compress(Bitmap.CompressFormat.PNG,100,stream);
        bytes=stream.toByteArray();
        title=""String_Node_Str"";
        videoBitmap=null;
      }
 catch (      Exception e) {
        return null;
      }
    }
 else {
      projection=new String[]{Images.Thumbnails._ID,Images.Thumbnails.DATA,Images.Media.ORIENTATION};
      String path=""String_Node_Str"";
      Cursor cur=ctx.getContentResolver().query(curStream,projection,null,null,null);
      File jpeg=null;
      if (cur != null) {
        String thumbData=""String_Node_Str"";
        if (cur.moveToFirst()) {
          int dataColumn, orientationColumn;
          dataColumn=cur.getColumnIndex(Images.Media.DATA);
          thumbData=cur.getString(dataColumn);
          orientationColumn=cur.getColumnIndex(Images.Media.ORIENTATION);
          orientation=cur.getString(orientationColumn);
        }
        if (thumbData == null) {
          return null;
        }
        jpeg=new File(thumbData);
        path=thumbData;
      }
 else {
        path=curStream.toString().replace(""String_Node_Str"",""String_Node_Str"");
        jpeg=new File(curStream.toString().replace(""String_Node_Str"",""String_Node_Str""));
      }
      title=jpeg.getName();
      bytes=new byte[(int)jpeg.length()];
      DataInputStream in=null;
      try {
        in=new DataInputStream(new FileInputStream(jpeg));
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        return null;
      }
      try {
        in.readFully(bytes);
      }
 catch (      IOException e) {
        e.printStackTrace();
        return null;
      }
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
        return null;
      }
      title=jpeg.getName();
      if (orientation == ""String_Node_Str"") {
        orientation=getExifOrientation(path,orientation);
      }
    }
    mediaData.put(""String_Node_Str"",bytes);
    mediaData.put(""String_Node_Str"",title);
    mediaData.put(""String_Node_Str"",orientation);
    return mediaData;
  }
 else {
    return null;
  }
}",0.9859706362153344
15228,"public void showDashboard(final long delay){
  final ImageButton showDashboard=(ImageButton)findViewById(R.id.home_small);
  showDashboard.postDelayed(new Runnable(){
    public void run(){
      if (dashboard.getVisibility() == View.GONE) {
        showDashboardOverlay(delay);
      }
    }
  }
,0);
}","public void showDashboard(final long delay){
  final ImageButton showDashboard=(ImageButton)findViewById(R.id.home_small);
  if (dashboard == null)   initViews();
  showDashboard.postDelayed(new Runnable(){
    public void run(){
      if (dashboard.getVisibility() == View.GONE) {
        showDashboardOverlay(delay);
      }
    }
  }
,0);
}",0.9380804953560372
15229,"@Override protected void onFinishInflate(){
  super.onFinishInflate();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(context);
  accounts=WordPress.wpDB.getAccounts(context);
  dashboard=(LinearLayout)findViewById(R.id.dashboard_overlay);
  commentBadgeText=(TextView)findViewById(R.id.comment_badge_text);
  blogNames=new CharSequence[accounts.size()];
  blogIDs=new int[accounts.size()];
  for (int i=0; i < accounts.size(); i++) {
    HashMap<?,?> defHash=(HashMap<?,?>)accounts.get(i);
    String curBlogName=EscapeUtils.unescapeHtml(defHash.get(""String_Node_Str"").toString());
    blogNames[i]=curBlogName;
    blogIDs[i]=Integer.valueOf(defHash.get(""String_Node_Str"").toString());
    blogTitle=(TextView)findViewById(R.id.blog_title);
  }
  int lastBlogID=WordPress.wpDB.getLastBlogID(context);
  if (lastBlogID != -1) {
    try {
      boolean matchedID=false;
      for (int i=0; i < blogIDs.length; i++) {
        if (blogIDs[i] == lastBlogID) {
          matchedID=true;
          WordPress.currentBlog=new Blog(blogIDs[i],context);
        }
      }
      if (!matchedID) {
        WordPress.currentBlog=new Blog(blogIDs[0],context);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    if (blogIDs.length > 0)     WordPress.currentBlog=new Blog(blogIDs[0],context);
  }
  if (WordPress.currentBlog != null) {
    updateBlavatarImage();
    updateCommentBadge();
    refreshButton=(Button)findViewById(R.id.action_refresh);
    blogTitle.setText(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()));
    rl=(RelativeLayout)findViewById(R.id.blogSelector);
    rl.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        dialogBuilder=new AlertDialog.Builder(context);
        dialogBuilder.setTitle(getResources().getText(R.string.choose_blog));
        dialogBuilder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int pos){
            blogTitle.setText(blogNames[pos]);
            WordPress.currentBlog=new Blog(blogIDs[pos],context);
            WordPress.wpDB.updateLastBlogID(blogIDs[pos]);
            updateBlavatarImage();
            updateCommentBadge();
            if (onBlogChangedListener != null) {
              onBlogChangedListener.OnBlogChanged();
            }
          }
        }
);
        dialogBuilder.show();
      }
    }
);
    final ImageButton showDashboard=(ImageButton)findViewById(R.id.home_small);
    showDashboard.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        if (dashboard.getVisibility() == View.GONE) {
          showDashboardOverlay(0);
          isShowingDashboard=true;
        }
 else {
          hideDashboardOverlay();
        }
      }
    }
);
    setupDashboardButtons();
  }
}","@Override protected void onFinishInflate(){
  super.onFinishInflate();
  initViews();
  for (int i=0; i < accounts.size(); i++) {
    HashMap<?,?> defHash=(HashMap<?,?>)accounts.get(i);
    String curBlogName=EscapeUtils.unescapeHtml(defHash.get(""String_Node_Str"").toString());
    blogNames[i]=curBlogName;
    blogIDs[i]=Integer.valueOf(defHash.get(""String_Node_Str"").toString());
    blogTitle=(TextView)findViewById(R.id.blog_title);
  }
  int lastBlogID=WordPress.wpDB.getLastBlogID(context);
  if (lastBlogID != -1) {
    try {
      boolean matchedID=false;
      for (int i=0; i < blogIDs.length; i++) {
        if (blogIDs[i] == lastBlogID) {
          matchedID=true;
          WordPress.currentBlog=new Blog(blogIDs[i],context);
        }
      }
      if (!matchedID) {
        WordPress.currentBlog=new Blog(blogIDs[0],context);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    if (blogIDs.length > 0)     WordPress.currentBlog=new Blog(blogIDs[0],context);
  }
  if (WordPress.currentBlog != null) {
    WordPress.wpDB.updateLastBlogID(WordPress.currentBlog.getId());
    updateBlavatarImage();
    updateCommentBadge();
    refreshButton=(Button)findViewById(R.id.action_refresh);
    blogTitle.setText(EscapeUtils.unescapeHtml(WordPress.currentBlog.getBlogName()));
    rl=(RelativeLayout)findViewById(R.id.blogSelector);
    rl.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        dialogBuilder=new AlertDialog.Builder(context);
        dialogBuilder.setTitle(getResources().getText(R.string.choose_blog));
        dialogBuilder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int pos){
            blogTitle.setText(blogNames[pos]);
            WordPress.currentBlog=new Blog(blogIDs[pos],context);
            WordPress.wpDB.updateLastBlogID(blogIDs[pos]);
            updateBlavatarImage();
            updateCommentBadge();
            if (onBlogChangedListener != null) {
              onBlogChangedListener.OnBlogChanged();
            }
          }
        }
);
        dialogBuilder.show();
      }
    }
);
    final ImageButton showDashboard=(ImageButton)findViewById(R.id.home_small);
    showDashboard.setOnClickListener(new View.OnClickListener(){
      public void onClick(      View v){
        if (dashboard.getVisibility() == View.GONE) {
          showDashboardOverlay(0);
          isShowingDashboard=true;
        }
 else {
          hideDashboardOverlay();
        }
      }
    }
);
    setupDashboardButtons();
  }
}",0.9259865430078196
15230,"@Override protected Boolean doInBackground(Void... params){
  Blog blog=WordPress.currentBlog;
  XMLRPCClient client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
  if (!blog.isDotcomFlag()) {
    HashMap<String,String> hPost=new HashMap<String,String>();
    hPost.put(""String_Node_Str"",""String_Node_Str"");
    Object[] vParams={blog.getBlogId(),blog.getUsername(),blog.getPassword(),hPost};
    Object versionResult=new Object();
    try {
      versionResult=(Object)client.call(""String_Node_Str"",vParams);
    }
 catch (    XMLRPCException e) {
    }
    if (versionResult != null) {
      try {
        HashMap<?,?> contentHash=(HashMap<?,?>)versionResult;
        HashMap<?,?> sv=(HashMap<?,?>)contentHash.get(""String_Node_Str"");
        String wpVersion=sv.get(""String_Node_Str"").toString();
        if (wpVersion.length() > 0) {
          blog.setWpVersion(wpVersion);
        }
      }
 catch (      Exception e) {
      }
    }
  }
  Vector<Object> args=new Vector<Object>();
  args.add(blog);
  args.add(Dashboard.this);
  new ApiHelper.getPostFormatsTask().execute(args);
  HashMap<String,Object> hPost=new HashMap<String,Object>();
  hPost.put(""String_Node_Str"",""String_Node_Str"");
  hPost.put(""String_Node_Str"",""String_Node_Str"");
  hPost.put(""String_Node_Str"",30);
  Object[] commentParams={blog.getBlogId(),blog.getUsername(),blog.getPassword(),hPost};
  args.add(commentParams);
  try {
    ApiHelper.refreshComments(Dashboard.this,commentParams,false);
  }
 catch (  XMLRPCException e) {
    e.printStackTrace();
  }
  return true;
}","@Override protected Boolean doInBackground(Void... params){
  Blog blog=WordPress.currentBlog;
  XMLRPCClient client=new XMLRPCClient(blog.getUrl(),blog.getHttpuser(),blog.getHttppassword());
  if (!blog.isDotcomFlag()) {
    HashMap<String,String> hPost=new HashMap<String,String>();
    hPost.put(""String_Node_Str"",""String_Node_Str"");
    Object[] vParams={blog.getBlogId(),blog.getUsername(),blog.getPassword(),hPost};
    Object versionResult=new Object();
    try {
      versionResult=(Object)client.call(""String_Node_Str"",vParams);
    }
 catch (    XMLRPCException e) {
    }
    if (versionResult != null) {
      try {
        HashMap<?,?> contentHash=(HashMap<?,?>)versionResult;
        HashMap<?,?> sv=(HashMap<?,?>)contentHash.get(""String_Node_Str"");
        String wpVersion=sv.get(""String_Node_Str"").toString();
        if (wpVersion.length() > 0) {
          blog.setWpVersion(wpVersion);
        }
      }
 catch (      Exception e) {
      }
    }
  }
  Vector<Object> args=new Vector<Object>();
  args.add(blog);
  args.add(Dashboard.this);
  new ApiHelper.getPostFormatsTask().execute(args);
  HashMap<String,Object> hPost=new HashMap<String,Object>();
  hPost.put(""String_Node_Str"",30);
  Object[] commentParams={blog.getBlogId(),blog.getUsername(),blog.getPassword(),hPost};
  args.add(commentParams);
  try {
    ApiHelper.refreshComments(Dashboard.this,commentParams);
  }
 catch (  XMLRPCException e) {
    e.printStackTrace();
  }
  return true;
}",0.9652914210870988
15231,"public boolean savePost(){
  EditText titleET=(EditText)findViewById(R.id.title);
  String title=titleET.getText().toString();
  WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
  String content=EscapeUtils.unescapeHtml(WPHtml.toHtml(contentET.getText()));
  EditText passwordET=(EditText)findViewById(R.id.post_password);
  String password=passwordET.getText().toString();
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
  String pubDate=tvPubDate.getText().toString();
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Date d=new Date();
    try {
      d=sdf.parse(pubDate);
      pubDateTimestamp=d.getTime();
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
catch (    java.text.ParseException e) {
      e.printStackTrace();
    }
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!isPage) {
    EditText tagsET=(EditText)findViewById(R.id.tags);
    tags=tagsET.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=postFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"")) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPost.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!isNew) {
      post.deleteMediaFiles();
      Spannable s=contentET.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(post.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save(EditPost.this);
        }
      }
    }
    Spinner spinner=(Spinner)findViewById(R.id.status);
    int selectedStatus=spinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
case 4:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (blog.isLocation()) {
try {
latitude=curLocation.getLatitude();
longitude=curLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
String needle=""String_Node_Str"" + getResources().getText(R.string.more_tag) + ""String_Node_Str"";
if (isNew) {
post=new Post(id,title,content,images,pubDateTimestamp,categories.toString(),tags,status,password,latitude,longitude,isPage,postFormat,EditPost.this,true);
post.setLocalDraft(true);
if (content.indexOf(needle) >= 0) {
post.setDescription(content.substring(0,content.indexOf(needle)));
post.setMt_text_more(content.substring(content.indexOf(needle) + needle.length(),content.length()));
}
success=post.save();
post.deleteMediaFiles();
Spannable s=contentET.getText();
WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (click_spans.length != 0) {
for (int i=0; i < click_spans.length; i++) {
WPImageSpan wpIS=click_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(post.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save(EditPost.this);
}
}
}
 else {
post.setTitle(title);
if (content.indexOf(needle) >= 0) {
post.setDescription(content.substring(0,content.indexOf(needle)));
post.setMt_text_more(content.substring(content.indexOf(needle) + needle.length(),content.length()));
}
 else {
post.setDescription(content);
}
post.setMediaPaths(images);
post.setDate_created_gmt(pubDateTimestamp);
post.setCategories(categories);
post.setMt_keywords(tags);
post.setPost_status(status);
post.setWP_password(password);
post.setLatitude(latitude);
post.setLongitude(longitude);
post.setWP_post_form(postFormat);
success=post.update();
}
}
return success;
}","public boolean savePost(){
  EditText titleET=(EditText)findViewById(R.id.title);
  String title=titleET.getText().toString();
  WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
  String content=EscapeUtils.unescapeHtml(WPHtml.toHtml(contentET.getText()));
  EditText passwordET=(EditText)findViewById(R.id.post_password);
  String password=passwordET.getText().toString();
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  content=content.replace(""String_Node_Str"",""String_Node_Str"");
  TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
  String pubDate=tvPubDate.getText().toString();
  long pubDateTimestamp=0;
  if (!pubDate.equals(getResources().getText(R.string.immediately))) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    Date d=new Date();
    try {
      d=sdf.parse(pubDate);
      pubDateTimestamp=d.getTime();
    }
 catch (    ParseException e) {
      e.printStackTrace();
    }
catch (    java.text.ParseException e) {
      e.printStackTrace();
    }
  }
  String tags=""String_Node_Str"", postFormat=""String_Node_Str"";
  if (!isPage) {
    EditText tagsET=(EditText)findViewById(R.id.tags);
    tags=tagsET.getText().toString();
    Spinner postFormatSpinner=(Spinner)findViewById(R.id.postFormat);
    postFormat=postFormats[postFormatSpinner.getSelectedItemPosition()];
  }
  String images=""String_Node_Str"";
  boolean success=false;
  if (content.equals(""String_Node_Str"")) {
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(EditPost.this);
    dialogBuilder.setTitle(getResources().getText(R.string.empty_fields));
    dialogBuilder.setMessage(getResources().getText(R.string.title_post_required));
    dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    dialogBuilder.setCancelable(true);
    dialogBuilder.create().show();
  }
 else {
    if (!isNew) {
      post.deleteMediaFiles();
      Spannable s=contentET.getText();
      WPImageSpan[] click_spans=s.getSpans(0,s.length(),WPImageSpan.class);
      if (click_spans.length != 0) {
        for (int i=0; i < click_spans.length; i++) {
          WPImageSpan wpIS=click_spans[i];
          images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
          MediaFile mf=new MediaFile();
          mf.setPostID(post.getId());
          mf.setTitle(wpIS.getTitle());
          mf.setCaption(wpIS.getCaption());
          mf.setDescription(wpIS.getDescription());
          mf.setFeatured(wpIS.isFeatured());
          mf.setFileName(wpIS.getImageSource().toString());
          mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
          mf.setWidth(wpIS.getWidth());
          mf.save(EditPost.this);
        }
      }
    }
    Spinner spinner=(Spinner)findViewById(R.id.status);
    int selectedStatus=spinner.getSelectedItemPosition();
    String status=""String_Node_Str"";
switch (selectedStatus) {
case 0:
      status=""String_Node_Str"";
    break;
case 1:
  status=""String_Node_Str"";
break;
case 2:
status=""String_Node_Str"";
break;
case 3:
status=""String_Node_Str"";
break;
case 4:
status=""String_Node_Str"";
break;
}
Double latitude=0.0;
Double longitude=0.0;
if (blog.isLocation()) {
try {
latitude=curLocation.getLatitude();
longitude=curLocation.getLongitude();
}
 catch (Exception e) {
e.printStackTrace();
}
}
String needle=""String_Node_Str"" + getResources().getText(R.string.more_tag) + ""String_Node_Str"";
if (isNew) {
post=new Post(id,title,content,images,pubDateTimestamp,categories.toString(),tags,status,password,latitude,longitude,isPage,postFormat,EditPost.this,true);
post.setLocalDraft(true);
if (content.indexOf(needle) >= 0) {
post.setDescription(content.substring(0,content.indexOf(needle)));
post.setMt_text_more(content.substring(content.indexOf(needle) + needle.length(),content.length()));
}
success=post.save();
post.deleteMediaFiles();
Spannable s=contentET.getText();
WPImageSpan[] image_spans=s.getSpans(0,s.length(),WPImageSpan.class);
if (image_spans.length != 0) {
for (int i=0; i < image_spans.length; i++) {
WPImageSpan wpIS=image_spans[i];
images+=wpIS.getImageSource().toString() + ""String_Node_Str"";
MediaFile mf=new MediaFile();
mf.setPostID(post.getId());
mf.setTitle(wpIS.getTitle());
mf.setCaption(wpIS.getCaption());
mf.setFileName(wpIS.getImageSource().toString());
mf.setFilePath(wpIS.getImageSource().toString());
mf.setHorizontalAlignment(wpIS.getHorizontalAlignment());
mf.setWidth(wpIS.getWidth());
mf.setVideo(wpIS.isVideo());
mf.save(EditPost.this);
}
}
}
 else {
post.setTitle(title);
if (content.indexOf(needle) >= 0) {
post.setDescription(content.substring(0,content.indexOf(needle)));
post.setMt_text_more(content.substring(content.indexOf(needle) + needle.length(),content.length()));
}
 else {
post.setDescription(content);
}
post.setMediaPaths(images);
post.setDate_created_gmt(pubDateTimestamp);
post.setCategories(categories);
post.setMt_keywords(tags);
post.setPost_status(status);
post.setWP_password(password);
post.setLatitude(latitude);
post.setLongitude(longitude);
post.setWP_post_form(postFormat);
success=post.update();
}
}
return success;
}",0.9962070927365826
15232,"private static void startImg(SpannableStringBuilder text,Attributes attributes,WPHtml.ImageGetter img){
  String src=attributes.getValue(""String_Node_Str"");
  Bitmap resizedBitmap=null;
  Display display=((WindowManager)ctx.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  ImageHelper ih=new ImageHelper();
  HashMap<String,Object> mediaData=ih.getImageBytesForPath(src,ctx);
  if (mediaData != null) {
    byte[] finalBytes=ih.createThumbnail((byte[])mediaData.get(""String_Node_Str""),String.valueOf(width / 2),(String)mediaData.get(""String_Node_Str""),true);
    resizedBitmap=BitmapFactory.decodeByteArray(finalBytes,0,finalBytes.length);
    int len=text.length();
    text.append(""String_Node_Str"");
    Uri curStream=Uri.parse(src);
    if (curStream == null) {
      return;
    }
    WPImageSpan is=new WPImageSpan(ctx,resizedBitmap,curStream);
    MediaFile mf=WordPress.wpDB.getMediaFile(src,post);
    if (mf != null) {
      is.setTitle(mf.getTitle());
      is.setDescription(mf.getDescription());
      is.setCaption(mf.getCaption());
      is.setFeatured(mf.isFeatured());
      is.setHorizontalAlignment(mf.getHorizontalAlignment());
      is.setImageSource(curStream);
      is.setWidth(mf.getWidth());
      is.setVideo(mf.isVideo());
    }
    text.setSpan(is,len,text.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
 else {
    if (attributes != null) {
      text.append(""String_Node_Str"");
      for (int i=0; i < attributes.getLength(); i++) {
        String aName=attributes.getLocalName(i);
        if (""String_Node_Str"".equals(aName))         aName=attributes.getQName(i);
        text.append(""String_Node_Str"");
        text.append(aName + ""String_Node_Str"" + attributes.getValue(i)+ ""String_Node_Str"");
      }
      text.append(""String_Node_Str"");
    }
  }
}","private static void startImg(SpannableStringBuilder text,Attributes attributes,WPHtml.ImageGetter img){
  String src=attributes.getValue(""String_Node_Str"");
  Bitmap resizedBitmap=null;
  Display display=((WindowManager)ctx.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  ImageHelper ih=new ImageHelper();
  HashMap<String,Object> mediaData=ih.getImageBytesForPath(src,ctx);
  if (mediaData != null) {
    byte[] finalBytes=ih.createThumbnail((byte[])mediaData.get(""String_Node_Str""),String.valueOf(width / 2),(String)mediaData.get(""String_Node_Str""),true);
    resizedBitmap=BitmapFactory.decodeByteArray(finalBytes,0,finalBytes.length);
    int len=text.length();
    text.append(""String_Node_Str"");
    Uri curStream=Uri.parse(src);
    if (curStream == null) {
      return;
    }
    WPImageSpan is=new WPImageSpan(ctx,resizedBitmap,curStream);
    MediaFile mf=WordPress.wpDB.getMediaFile(src,post);
    if (mf != null) {
      is.setTitle(mf.getTitle());
      is.setDescription(mf.getDescription());
      is.setCaption(mf.getCaption());
      is.setFeatured(mf.isFeatured());
      is.setHorizontalAlignment(mf.getHorizontalAlignment());
      is.setImageSource(curStream);
      is.setWidth(mf.getWidth());
      is.setVideo(mf.isVideo());
      text.setSpan(is,len,text.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
  }
 else {
    if (attributes != null) {
      text.append(""String_Node_Str"");
      for (int i=0; i < attributes.getLength(); i++) {
        String aName=attributes.getLocalName(i);
        if (""String_Node_Str"".equals(aName))         aName=attributes.getQName(i);
        text.append(""String_Node_Str"");
        text.append(aName + ""String_Node_Str"" + attributes.getValue(i)+ ""String_Node_Str"");
      }
      text.append(""String_Node_Str"");
    }
  }
}",0.9972781709308656
15233,"@Override protected void onResume(){
  super.onResume();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  commentList.loadComments(false,false);
  attemptToSelectComment();
  commentList.refreshComments(false,false,false);
}","@Override protected void onResume(){
  super.onResume();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  boolean commentsLoaded=commentList.loadComments(false,false);
  if (!commentsLoaded)   commentList.refreshComments(false,false,false);
}",0.86328125
15234,"protected void setContent(){
  Intent intent=getIntent();
  String text=intent.getStringExtra(Intent.EXTRA_TEXT);
  String title=intent.getStringExtra(Intent.EXTRA_SUBJECT);
  if (text != null) {
    EditText titleET=(EditText)findViewById(R.id.title);
    if (title != null) {
      titleET.setText(title);
    }
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    if (text.contains(""String_Node_Str"")) {
      text=text.replace(""String_Node_Str"",""String_Node_Str"");
      text=text.replace(""String_Node_Str"",""String_Node_Str"");
      text=text.replace(""String_Node_Str"",""String_Node_Str"");
      text=text.replace(""String_Node_Str"",""String_Node_Str"");
      text=""String_Node_Str"" + text + ""String_Node_Str""+ text+ ""String_Node_Str"";
      contentET.setText(text);
    }
 else {
      text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      contentET.setText(WPHtml.fromHtml(text,EditPost.this,post));
    }
  }
 else {
    String action=intent.getAction();
    final String type=intent.getType();
    final ArrayList<Uri> multi_stream;
    if (Intent.ACTION_SEND_MULTIPLE.equals(action)) {
      multi_stream=intent.getParcelableArrayListExtra((Intent.EXTRA_STREAM));
    }
 else {
      multi_stream=new ArrayList<Uri>();
      multi_stream.add((Uri)intent.getParcelableExtra(Intent.EXTRA_STREAM));
    }
    Vector<Serializable> params=new Vector<Serializable>();
    params.add(multi_stream);
    params.add(type);
    new processAttachmentsTask().execute(params);
  }
}","protected void setContent(){
  Intent intent=getIntent();
  String text=intent.getStringExtra(Intent.EXTRA_TEXT);
  String title=intent.getStringExtra(Intent.EXTRA_SUBJECT);
  if (text != null) {
    EditText titleET=(EditText)findViewById(R.id.title);
    if (title != null) {
      titleET.setText(title);
    }
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    if (text.contains(""String_Node_Str"")) {
      text=text.replace(""String_Node_Str"",""String_Node_Str"");
      text=text.replace(""String_Node_Str"",""String_Node_Str"");
      text=text.replace(""String_Node_Str"",""String_Node_Str"");
      text=text.replace(""String_Node_Str"",""String_Node_Str"");
      text=""String_Node_Str"" + text + ""String_Node_Str""+ text+ ""String_Node_Str"";
      contentET.setText(text);
    }
 else {
      text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      contentET.setText(WPHtml.fromHtml(StringHelper.addPTags(text),EditPost.this,post));
    }
  }
 else {
    String action=intent.getAction();
    final String type=intent.getType();
    final ArrayList<Uri> multi_stream;
    if (Intent.ACTION_SEND_MULTIPLE.equals(action)) {
      multi_stream=intent.getParcelableArrayListExtra((Intent.EXTRA_STREAM));
    }
 else {
      multi_stream=new ArrayList<Uri>();
      multi_stream.add((Uri)intent.getParcelableExtra(Intent.EXTRA_STREAM));
    }
    Vector<Serializable> params=new Vector<Serializable>();
    params.add(multi_stream);
    params.add(type);
    new processAttachmentsTask().execute(params);
  }
}",0.9897858319604612
15235,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  categories=new JSONArray();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        blog=new Blog(accountIDs[i],EditPost.this);
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            blog=new Blog(id,EditPost.this);
            accountName=blogNames[item];
            setTitle(accountName + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
            setContent();
            lbsCheck();
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        blog=new Blog(id,EditPost.this);
        accountName=blogNames[0];
        setTitle(accountName + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
        setContent();
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      blog=new Blog(id,this);
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (!isNew)       post=new Post(id,postID,isPage,this);
    }
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    lbsCheck();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  if (isNew) {
    setTitle(accountName + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
  }
 else {
    setTitle(accountName + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
  }
  if (isNew) {
    if (!isAction) {
      if (!isPage) {
        enableLBSButtons();
      }
    }
    if (option != null) {
      Intent i=new Intent(EditPost.this,EditContent.class);
      i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      i.putExtra(""String_Node_Str"",option);
      startActivityForResult(i,0);
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      contentHTML=post.getDescription() + ""String_Node_Str"" + getResources().getText(R.string.more_tag)+ ""String_Node_Str""+ post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    contentET.setText(WPHtml.fromHtml(contentHTML,EditPost.this,post));
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        Date date=new Date(pubDate);
        SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
        String sPubDate=sdf.format(date);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(sPubDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
    }
    if (blog.isLocation()) {
      enableLBSButtons();
    }
    Double latitude=post.getLatitude();
    Double longitude=post.getLongitude();
    if (latitude != 0.0) {
      new getAddressTask().execute(latitude,longitude);
    }
    if (blog.isLocation() && latitude > 0) {
      Button updateLocation=(Button)findViewById(R.id.updateLocation);
      updateLocation.setOnClickListener(new Button.OnClickListener(){
        public void onClick(        View v){
          lm=(LocationManager)getSystemService(LOCATION_SERVICE);
          lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
          lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
          locationActive=true;
        }
      }
);
      RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
      locationSection.setVisibility(View.VISIBLE);
    }
 else     if (blog.isLocation()) {
      lm=(LocationManager)getSystemService(LOCATION_SERVICE);
      lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
      lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
      locationActive=true;
      RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
      locationSection.setVisibility(View.VISIBLE);
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,1);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        Intent i=new Intent(EditPost.this,EditContent.class);
        WordPress.richPostContent=content.getText();
        i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivityForResult(i,0);
      }
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Bundle extras=getIntent().getExtras();
  if (WordPress.wpDB == null)   WordPress.wpDB=new WordPressDB(this);
  categories=new JSONArray();
  String action=getIntent().getAction();
  if (Intent.ACTION_SEND.equals(action) || Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    isAction=true;
    isNew=true;
    Vector<?> accounts=WordPress.wpDB.getAccounts(this);
    if (accounts.size() > 0) {
      final String blogNames[]=new String[accounts.size()];
      final int accountIDs[]=new int[accounts.size()];
      for (int i=0; i < accounts.size(); i++) {
        HashMap<?,?> curHash=(HashMap<?,?>)accounts.get(i);
        try {
          blogNames[i]=EscapeUtils.unescapeHtml(curHash.get(""String_Node_Str"").toString());
        }
 catch (        Exception e) {
          blogNames[i]=curHash.get(""String_Node_Str"").toString();
        }
        accountIDs[i]=(Integer)curHash.get(""String_Node_Str"");
        blog=new Blog(accountIDs[i],EditPost.this);
      }
      if (accounts.size() != 1) {
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setTitle(getResources().getText(R.string.select_a_blog));
        builder.setItems(blogNames,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int item){
            id=accountIDs[item];
            blog=new Blog(id,EditPost.this);
            accountName=blogNames[item];
            setTitle(accountName + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
            setContent();
            lbsCheck();
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
 else {
        id=accountIDs[0];
        blog=new Blog(id,EditPost.this);
        accountName=blogNames[0];
        setTitle(accountName + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
        setContent();
      }
    }
 else {
      Intent i=new Intent(this,Dashboard.class);
      Toast.makeText(getApplicationContext(),getResources().getText(R.string.no_account),Toast.LENGTH_LONG).show();
      startActivity(i);
      finish();
    }
  }
 else {
    if (extras != null) {
      id=WordPress.currentBlog.getId();
      blog=new Blog(id,this);
      accountName=EscapeUtils.unescapeHtml(extras.getString(""String_Node_Str""));
      postID=extras.getLong(""String_Node_Str"");
      localDraft=extras.getBoolean(""String_Node_Str"",false);
      isPage=extras.getBoolean(""String_Node_Str"",false);
      isNew=extras.getBoolean(""String_Node_Str"",false);
      option=extras.getString(""String_Node_Str"");
      if (!isNew)       post=new Post(id,postID,isPage,this);
    }
  }
  Display display=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  int width=display.getWidth();
  int height=display.getHeight();
  if (height > width) {
    width=height;
  }
  if (width > 480) {
    isLargeScreen=true;
  }
  if (isPage) {
    setContentView(R.layout.edit_page);
  }
 else {
    setContentView(R.layout.edit);
    if (blog.getPostFormats().equals(""String_Node_Str"")) {
      Vector<Object> args=new Vector<Object>();
      args.add(blog);
      args.add(this);
      new ApiHelper.getPostFormatsTask().execute(args);
      postFormatTitles=getResources().getStringArray(R.array.post_formats_array);
      String defaultPostFormatTitles[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      postFormats=defaultPostFormatTitles;
    }
 else {
      try {
        JSONObject jsonPostFormats=new JSONObject(blog.getPostFormats());
        postFormats=new String[jsonPostFormats.length()];
        postFormatTitles=new String[jsonPostFormats.length()];
        Iterator<?> it=jsonPostFormats.keys();
        int i=0;
        while (it.hasNext()) {
          String key=(String)it.next();
          String val=(String)jsonPostFormats.get(key);
          postFormats[i]=key;
          postFormatTitles[i]=val;
          i++;
        }
        java.util.Arrays.sort(postFormats);
        java.util.Arrays.sort(postFormatTitles);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    Spinner pfSpinner=(Spinner)findViewById(R.id.postFormat);
    ArrayAdapter<String> pfAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,postFormatTitles);
    pfAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    pfSpinner.setAdapter(pfAdapter);
    String activePostFormat=""String_Node_Str"";
    if (!isNew) {
      if (!post.getWP_post_format().equals(""String_Node_Str""))       activePostFormat=post.getWP_post_format();
    }
    for (int i=0; i < postFormats.length; i++) {
      if (postFormats[i].equals(activePostFormat))       pfSpinner.setSelection(i);
    }
    lbsCheck();
  }
  String[] items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private),getResources().getString(R.string.local_draft)};
  Spinner spinner=(Spinner)findViewById(R.id.status);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  spinner.setAdapter(adapter);
  if (isNew) {
    setTitle(accountName + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.new_page : R.string.new_post));
  }
 else {
    setTitle(accountName + ""String_Node_Str"" + getResources().getText((isPage) ? R.string.edit_page : R.string.edit_post));
  }
  if (isNew) {
    if (!isAction) {
      if (!isPage) {
        enableLBSButtons();
      }
    }
    if (option != null) {
      Intent i=new Intent(EditPost.this,EditContent.class);
      i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      i.putExtra(""String_Node_Str"",option);
      startActivityForResult(i,0);
    }
  }
 else {
    EditText titleET=(EditText)findViewById(R.id.title);
    WPEditText contentET=(WPEditText)findViewById(R.id.postContent);
    EditText passwordET=(EditText)findViewById(R.id.post_password);
    titleET.setText(post.getTitle());
    if (post.isUploaded()) {
      items=new String[]{getResources().getString(R.string.publish_post),getResources().getString(R.string.draft),getResources().getString(R.string.pending_review),getResources().getString(R.string.post_private)};
      adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,items);
      spinner.setAdapter(adapter);
    }
    String contentHTML;
    if (!post.getMt_text_more().equals(""String_Node_Str"")) {
      contentHTML=post.getDescription() + ""String_Node_Str"" + getResources().getText(R.string.more_tag)+ ""String_Node_Str""+ post.getMt_text_more();
    }
 else {
      contentHTML=post.getDescription();
    }
    contentET.setText(WPHtml.fromHtml(StringHelper.addPTags(contentHTML),EditPost.this,post));
    long pubDate=post.getDate_created_gmt();
    if (pubDate != 0) {
      try {
        Date date=new Date(pubDate);
        SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
        String sPubDate=sdf.format(date);
        TextView tvPubDate=(TextView)findViewById(R.id.pubDate);
        tvPubDate.setText(sPubDate);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (post.getWP_password() != null)     passwordET.setText(post.getWP_password());
    if (post.getPost_status() != null) {
      String status=post.getPost_status();
      if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(0,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(1,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(2,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(3,true);
      }
 else       if (status.equals(""String_Node_Str"")) {
        spinner.setSelection(4,true);
      }
    }
    if (!isPage) {
      if (post.getCategories() != null) {
        categories=post.getCategories();
        if (!categories.equals(""String_Node_Str"")) {
          for (int i=0; i < categories.length(); i++) {
            try {
              selectedCategories.add(categories.getString(i));
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
          }
          TextView tvCategories=(TextView)findViewById(R.id.selectedCategories);
          tvCategories.setText(getResources().getText(R.string.selected_categories) + ""String_Node_Str"" + getCategoriesCSV());
        }
      }
    }
    if (blog.isLocation()) {
      enableLBSButtons();
    }
    Double latitude=post.getLatitude();
    Double longitude=post.getLongitude();
    if (latitude != 0.0) {
      new getAddressTask().execute(latitude,longitude);
    }
    if (blog.isLocation() && latitude > 0) {
      Button updateLocation=(Button)findViewById(R.id.updateLocation);
      updateLocation.setOnClickListener(new Button.OnClickListener(){
        public void onClick(        View v){
          lm=(LocationManager)getSystemService(LOCATION_SERVICE);
          lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
          lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
          locationActive=true;
        }
      }
);
      RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
      locationSection.setVisibility(View.VISIBLE);
    }
 else     if (blog.isLocation()) {
      lm=(LocationManager)getSystemService(LOCATION_SERVICE);
      lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,20000,0,EditPost.this);
      lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,20000,0,EditPost.this);
      locationActive=true;
      RelativeLayout locationSection=(RelativeLayout)findViewById(R.id.section4);
      locationSection.setVisibility(View.VISIBLE);
    }
    String tags=post.getMt_keywords();
    if (!tags.equals(""String_Node_Str"")) {
      EditText tagsET=(EditText)findViewById(R.id.tags);
      tagsET.setText(tags);
    }
  }
  if (!isPage) {
    Button selectCategories=(Button)findViewById(R.id.selectCategories);
    selectCategories.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        Bundle bundle=new Bundle();
        bundle.putInt(""String_Node_Str"",id);
        if (categories.length() > 0) {
          bundle.putString(""String_Node_Str"",getCategoriesCSV());
        }
        Intent i=new Intent(EditPost.this,SelectCategories.class);
        i.putExtras(bundle);
        startActivityForResult(i,1);
      }
    }
);
  }
  final WPEditText content=(WPEditText)findViewById(R.id.postContent);
  content.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View view,    boolean hasFocus){
      if (hasFocus) {
        Intent i=new Intent(EditPost.this,EditContent.class);
        WordPress.richPostContent=content.getText();
        i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
        startActivityForResult(i,0);
      }
    }
  }
);
  final Button saveButton=(Button)findViewById(R.id.post);
  saveButton.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      boolean result=savePost();
      if (result) {
        if (post.isUploaded() || !post.getPost_status().equals(""String_Node_Str""))         post.upload();
        finish();
      }
    }
  }
);
  Button pubDate=(Button)findViewById(R.id.pubDateButton);
  pubDate.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Calendar c=Calendar.getInstance();
      mYear=c.get(Calendar.YEAR);
      mMonth=c.get(Calendar.MONTH);
      mDay=c.get(Calendar.DAY_OF_MONTH);
      mHour=c.get(Calendar.HOUR_OF_DAY);
      mMinute=c.get(Calendar.MINUTE);
      showDialog(ID_DIALOG_DATE);
    }
  }
);
}",0.9990574156796852
15236,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.posts);
  FragmentManager fm=getSupportFragmentManager();
  postList=(ViewPosts)fm.findFragmentById(R.id.postList);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    isPage=extras.getBoolean(""String_Node_Str"");
  }
  WordPress.currentPost=null;
  titleBar=(WPTitleBar)findViewById(R.id.postsActionBar);
  titleBar.refreshButton.setOnClickListener(new ImageButton.OnClickListener(){
    public void onClick(    View v){
      postList.refreshPosts(false);
    }
  }
);
  titleBar.setOnBlogChangedListener(new OnBlogChangedListener(){
    @Override public void OnBlogChanged(){
      postList.shouldSelectAfterLoad=true;
      boolean loadedPosts=postList.loadPosts(false);
      if (!loadedPosts)       postList.refreshPosts(false);
    }
  }
);
  attemptToSelectPost();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.posts);
  FragmentManager fm=getSupportFragmentManager();
  postList=(ViewPosts)fm.findFragmentById(R.id.postList);
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    isPage=extras.getBoolean(""String_Node_Str"");
  }
  WordPress.currentPost=null;
  titleBar=(WPTitleBar)findViewById(R.id.postsActionBar);
  titleBar.refreshButton.setOnClickListener(new ImageButton.OnClickListener(){
    public void onClick(    View v){
      postList.refreshPosts(false);
    }
  }
);
  titleBar.setOnBlogChangedListener(new OnBlogChangedListener(){
    @Override public void OnBlogChanged(){
      attemptToSelectPost();
      boolean loadedPosts=postList.loadPosts(false);
      if (!loadedPosts)       postList.refreshPosts(false);
    }
  }
);
  attemptToSelectPost();
}",0.8195819581958196
15237,"@Override public void OnBlogChanged(){
  postList.shouldSelectAfterLoad=true;
  boolean loadedPosts=postList.loadPosts(false);
  if (!loadedPosts)   postList.refreshPosts(false);
}","@Override public void OnBlogChanged(){
  attemptToSelectPost();
  boolean loadedPosts=postList.loadPosts(false);
  if (!loadedPosts)   postList.refreshPosts(false);
}",0.8901734104046243
15238,"@Override protected void onResume(){
  super.onResume();
  postList.refreshPosts(false);
}","@Override protected void onResume(){
  super.onResume();
  attemptToSelectPost();
  boolean loadedPosts=postList.loadPosts(false);
  if (!loadedPosts)   postList.refreshPosts(false);
}",0.656934306569343
15239,"public void loadPost(Post post){
  TextView title=(TextView)getActivity().findViewById(R.id.postTitle);
  if (post.getTitle().equals(""String_Node_Str""))   title.setText(""String_Node_Str"" + getResources().getText(R.string.untitled) + ""String_Node_Str"");
 else   title.setText(post.getTitle());
  WebView webView=(WebView)getActivity().findViewById(R.id.viewPostWebView);
  TextView tv=(TextView)getActivity().findViewById(R.id.viewPostTextView);
  if (post.isLocalDraft()) {
    tv.setVisibility(View.VISIBLE);
    webView.setVisibility(View.GONE);
    tv.setText(WPHtml.fromHtml(post.getDescription() + post.getMt_text_more(),getActivity().getApplicationContext(),post));
  }
 else {
    tv.setVisibility(View.GONE);
    webView.setVisibility(View.VISIBLE);
    String htmlText=""String_Node_Str"" + post.getDescription() + post.getMt_text_more()+ ""String_Node_Str"";
    webView.loadDataWithBaseURL(""String_Node_Str"",htmlText,""String_Node_Str"",""String_Node_Str"",null);
  }
}","public void loadPost(Post post){
  TextView title=(TextView)getActivity().findViewById(R.id.postTitle);
  if (post.getTitle().equals(""String_Node_Str""))   title.setText(""String_Node_Str"" + getResources().getText(R.string.untitled) + ""String_Node_Str"");
 else   title.setText(post.getTitle());
  WebView webView=(WebView)getActivity().findViewById(R.id.viewPostWebView);
  TextView tv=(TextView)getActivity().findViewById(R.id.viewPostTextView);
  if (post.isLocalDraft()) {
    tv.setVisibility(View.VISIBLE);
    webView.setVisibility(View.GONE);
    tv.setText(WPHtml.fromHtml(post.getDescription() + post.getMt_text_more(),getActivity().getApplicationContext(),post));
  }
 else {
    tv.setVisibility(View.GONE);
    webView.setVisibility(View.VISIBLE);
    String html=StringHelper.addPTags(post.getDescription() + post.getMt_text_more());
    String htmlText=""String_Node_Str"" + html + ""String_Node_Str"";
    webView.loadDataWithBaseURL(""String_Node_Str"",htmlText,""String_Node_Str"",""String_Node_Str"",null);
  }
}",0.9276381909547738
15240,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.view_stats);
  initStats();
  Button saveStatsLogin=(Button)findViewById(R.id.saveDotcom);
  saveStatsLogin.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      EditText dotcomUsername=(EditText)findViewById(R.id.dotcomUsername);
      EditText dotcomPassword=(EditText)findViewById(R.id.dotcomPassword);
      String dcUsername=dotcomUsername.getText().toString();
      String dcPassword=dotcomPassword.getText().toString();
      if (dcUsername.equals(""String_Node_Str"") || dcPassword.equals(""String_Node_Str"")) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(ViewStats.this);
        dialogBuilder.setTitle(getResources().getText(R.string.required_fields));
        dialogBuilder.setMessage(getResources().getText(R.string.username_password_required));
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
 else {
        WordPress.wpDB.saveStatsLogin(WordPress.currentBlog.getId(),dcUsername,dcPassword);
        showOrHideLoginForm();
        initStats();
      }
    }
  }
);
  final Button go=(Button)findViewById(R.id.go);
  go.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Spinner reportType=(Spinner)findViewById(R.id.reportType);
      Spinner reportInterval=(Spinner)findViewById(R.id.reportInterval);
      final String type=parseType(reportType.getSelectedItemPosition());
      final int interval=parseInterval(reportInterval.getSelectedItemPosition());
      Vector<?> apiData=WordPress.wpDB.loadAPIData(WordPress.currentBlog.getId());
      final String apiKey=apiData.get(0).toString();
      final String apiBlogID=apiData.get(1).toString();
      if (!isFinishing())       showDialog(ID_DIALOG_GET_STATS);
      Thread action=new Thread(){
        public void run(){
          getStatsData(apiKey,apiBlogID,type,interval);
        }
      }
;
      action.start();
    }
  }
);
  titleBar=(WPTitleBar)findViewById(R.id.actionBar);
  titleBar.refreshButton.setOnClickListener(new ImageButton.OnClickListener(){
    public void onClick(    View v){
      go.performClick();
    }
  }
);
  titleBar.setOnBlogChangedListener(new OnBlogChangedListener(){
    @Override public void OnBlogChanged(){
      ImageView iv=(ImageView)findViewById(R.id.chart);
      iv.setVisibility(View.GONE);
      RelativeLayout filters=(RelativeLayout)findViewById(R.id.filters);
      filters.setVisibility(View.GONE);
      TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
      tl.removeAllViews();
      RelativeLayout moderationBar=(RelativeLayout)findViewById(R.id.dotcomLogin);
      moderationBar.setVisibility(View.GONE);
      TextView reportTitle=(TextView)findViewById(R.id.chartTitle);
      reportTitle.setVisibility(View.GONE);
      initStats();
    }
  }
);
  TextView wpcomHelp=(TextView)findViewById(R.id.wpcomHelp);
  wpcomHelp.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Intent intent1=new Intent(Intent.ACTION_VIEW);
      intent1.setData(Uri.parse(""String_Node_Str""));
      startActivity(intent1);
    }
  }
);
  Spinner reportInterval=(Spinner)findViewById(R.id.reportInterval);
  reportInterval.setSelection(1);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.view_stats);
  initStats();
  Button saveStatsLogin=(Button)findViewById(R.id.saveDotcom);
  saveStatsLogin.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      EditText dotcomUsername=(EditText)findViewById(R.id.dotcomUsername);
      EditText dotcomPassword=(EditText)findViewById(R.id.dotcomPassword);
      String dcUsername=dotcomUsername.getText().toString();
      String dcPassword=dotcomPassword.getText().toString();
      if (dcUsername.equals(""String_Node_Str"") || dcPassword.equals(""String_Node_Str"")) {
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(ViewStats.this);
        dialogBuilder.setTitle(getResources().getText(R.string.required_fields));
        dialogBuilder.setMessage(getResources().getText(R.string.username_password_required));
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
 else {
        WordPress.wpDB.saveStatsLogin(WordPress.currentBlog.getId(),dcUsername,dcPassword);
        showOrHideLoginForm();
        initStats();
      }
    }
  }
);
  final Button go=(Button)findViewById(R.id.go);
  go.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      Spinner reportType=(Spinner)findViewById(R.id.reportType);
      Spinner reportInterval=(Spinner)findViewById(R.id.reportInterval);
      final String type=parseType(reportType.getSelectedItemPosition());
      final int interval=parseInterval(reportInterval.getSelectedItemPosition());
      final String apiKey=WordPress.currentBlog.getApi_key();
      final String apiBlogID=WordPress.currentBlog.getApi_blogid();
      if (!isFinishing())       titleBar.startRotatingRefreshIcon();
      Thread action=new Thread(){
        public void run(){
          getStatsData(apiKey,apiBlogID,type,interval);
        }
      }
;
      action.start();
    }
  }
);
  titleBar=(WPTitleBar)findViewById(R.id.actionBar);
  titleBar.refreshButton.setOnClickListener(new ImageButton.OnClickListener(){
    public void onClick(    View v){
      go.performClick();
    }
  }
);
  titleBar.setOnBlogChangedListener(new OnBlogChangedListener(){
    @Override public void OnBlogChanged(){
      ImageView iv=(ImageView)findViewById(R.id.chart);
      iv.setVisibility(View.GONE);
      RelativeLayout filters=(RelativeLayout)findViewById(R.id.filters);
      filters.setVisibility(View.GONE);
      TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
      tl.removeAllViews();
      RelativeLayout moderationBar=(RelativeLayout)findViewById(R.id.dotcomLogin);
      moderationBar.setVisibility(View.GONE);
      TextView reportTitle=(TextView)findViewById(R.id.chartTitle);
      reportTitle.setVisibility(View.GONE);
      initStats();
    }
  }
);
  TextView wpcomHelp=(TextView)findViewById(R.id.wpcomHelp);
  wpcomHelp.setOnClickListener(new TextView.OnClickListener(){
    public void onClick(    View v){
      Intent intent1=new Intent(Intent.ACTION_VIEW);
      intent1.setData(Uri.parse(""String_Node_Str""));
      startActivity(intent1);
    }
  }
);
  Spinner reportInterval=(Spinner)findViewById(R.id.reportInterval);
  reportInterval.setSelection(1);
}",0.9631766968947512
15241,"private void getStatsData(String apiKey,String blogID,final String reportType,int interval){
  if (isFinishing()) {
    finish();
  }
  String DATE_FORMAT=""String_Node_Str"";
  SimpleDateFormat sdf=new SimpleDateFormat(DATE_FORMAT);
  Calendar c1=Calendar.getInstance();
  String period=""String_Node_Str"";
  if (interval == 90) {
    period=""String_Node_Str"";
    interval=12;
  }
 else   if (interval == 365) {
    period=""String_Node_Str"";
    interval=11;
  }
 else   if (interval == -1) {
    period=""String_Node_Str"";
  }
  String uriString=""String_Node_Str"" + ""String_Node_Str"" + apiKey + ""String_Node_Str""+ blogID+ ""String_Node_Str""+ reportType+ ""String_Node_Str""+ sdf.format(c1.getTime())+ ""String_Node_Str""+ interval+ ""String_Node_Str""+ period;
  vsoURI=uriString;
  if (!reportType.equals(""String_Node_Str"")) {
    uriString+=""String_Node_Str"";
  }
  URI uri=URI.create(uriString);
  configureClient(uri,null,null);
  try {
    HttpResponse response;
    response=client.execute(postMethod);
    XmlPullParser pullParser=XmlPullParserFactory.newInstance().newPullParser();
    HttpEntity entity=response.getEntity();
    PushbackInputStream is=new PushbackInputStream(entity.getContent());
    int bomCheck=is.read();
    int stopper=0;
    while (bomCheck != 60 && stopper < 20) {
      bomCheck=is.read();
      stopper++;
    }
    is.unread(bomCheck);
    pullParser.setInput(is,""String_Node_Str"");
    int eventType=pullParser.getEventType();
    boolean foundDataItem=false;
    final Vector<HashMap<String,String>> dataSet=new Vector<HashMap<String,String>>();
    final Vector<Integer> numDataSet=new Vector<Integer>();
    int rowCount=0;
    while (eventType != XmlPullParser.END_DOCUMENT) {
      if (eventType == XmlPullParser.START_DOCUMENT) {
      }
 else       if (eventType == XmlPullParser.END_DOCUMENT) {
      }
 else       if (eventType == XmlPullParser.START_TAG) {
        String name=pullParser.getName();
        if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")) {
        }
 else         if (pullParser.getName().equals(""String_Node_Str"")) {
          break;
        }
 else {
          foundDataItem=true;
          HashMap<String,String> dataRow=new HashMap<String,String>();
          for (int i=0; i < pullParser.getAttributeCount(); i++) {
            dataRow.put(pullParser.getAttributeName(i).toString(),pullParser.getAttributeValue(i).toString());
          }
          if (dataRow != null) {
            dataSet.add(rowCount,dataRow);
          }
        }
      }
 else       if (eventType == XmlPullParser.END_TAG) {
      }
 else       if (eventType == XmlPullParser.TEXT) {
        if (foundDataItem) {
          if (pullParser.getText().toString() == ""String_Node_Str"") {
            numDataSet.add(rowCount,0);
          }
 else {
            int value=0;
            try {
              value=Integer.parseInt(pullParser.getText().toString());
            }
 catch (            NumberFormatException e) {
            }
            numDataSet.add(rowCount,value);
          }
          rowCount++;
          foundDataItem=false;
        }
      }
      eventType=pullParser.next();
    }
    if (dataSet.size() > 0) {
      final int intervalT=interval;
      Thread uiThread=new Thread(){
        public void run(){
          RelativeLayout filters=(RelativeLayout)findViewById(R.id.filters);
          filters.setVisibility(View.VISIBLE);
          TextView reportTitle=(TextView)findViewById(R.id.chartTitle);
          reportTitle.setVisibility(View.VISIBLE);
          ImageView iv=(ImageView)findViewById(R.id.chart);
          if (reportType.equals(""String_Node_Str"")) {
            if (intervalT != 1) {
              iv.setVisibility(View.VISIBLE);
            }
 else {
              iv.setVisibility(View.GONE);
            }
            reportTitle.setText(getResources().getText(R.string.report_views));
            String dataValues=""String_Node_Str"", dateStrings=""String_Node_Str"", xLabels=""String_Node_Str"";
            Object[] key=numDataSet.toArray();
            Arrays.sort(key);
            TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
            tl.removeAllViews();
            LayoutInflater inflater=getLayoutInflater();
            TableRow table_row=(TableRow)inflater.inflate(R.layout.table_row_header,tl,false);
            TextView col_1=(TextView)table_row.findViewById(R.id.col1);
            col_1.setText(getResources().getText(R.string.date));
            col_1.setTypeface(Typeface.DEFAULT_BOLD);
            TextView col_2=(TextView)table_row.findViewById(R.id.col2);
            col_2.setText(getResources().getText(R.string.report_views));
            col_2.setTypeface(Typeface.DEFAULT_BOLD);
            tl.addView(table_row);
            HashMap<?,?> row;
            for (int i=0; i < dataSet.size(); i++) {
              row=(HashMap<?,?>)dataSet.get(i);
              String date;
              try {
                date=row.get(""String_Node_Str"").toString();
              }
 catch (              Exception e) {
                return;
              }
              String value=numDataSet.get(i).toString();
              dateStrings+=date + ""String_Node_Str"";
              dataValues+=value + ""String_Node_Str"";
              if (i == 0)               xLabels+=date + ""String_Node_Str"";
 else               if (i == (dataSet.size() - 1))               xLabels+=date;
 else               xLabels+=""String_Node_Str"";
              TableRow tr=(TableRow)inflater.inflate(R.layout.table_row,tl,false);
              TextView col1=(TextView)tr.findViewById(R.id.col1);
              col1.setText(date);
              TextView col2=(TextView)tr.findViewById(R.id.col2);
              col2.setText(value);
              if (i % 2 == 0) {
                tr.setBackgroundColor(Color.parseColor(""String_Node_Str""));
              }
              tl.addView(tr);
            }
            int maxValue=Integer.parseInt(key[key.length - 1].toString());
            int minValue=Integer.parseInt(key[0].toString());
            dataValues=dataValues.substring(0,dataValues.length() - 1);
            dateStrings=dateStrings.substring(0,dateStrings.length() - 1);
            long minBuffer=Math.round(minValue - (maxValue * .10));
            if (minBuffer < 0) {
              minBuffer=0;
            }
            long maxBuffer=Math.round(maxValue + (maxValue * .10));
            for (int i=0; i < 9; i++) {
              if (minBuffer % 10 == 0)               break;
 else {
                minBuffer--;
              }
            }
            for (int i=0; i < 9; i++) {
              if (maxBuffer % 10 == 0)               break;
 else {
                maxBuffer++;
              }
            }
            long yInterval=maxBuffer / 10;
            for (int i=0; i < 9; i++) {
              if (yInterval % 10 == 0)               break;
 else {
                yInterval++;
              }
            }
            float xGrid=100.00f / 6;
            if (yInterval == 0) {
              yInterval=1;
            }
            long numRows=(maxBuffer - minBuffer) / yInterval;
            float yGrid=100.00f / numRows;
            Display display=getWindowManager().getDefaultDisplay();
            int width=display.getWidth();
            int height=display.getHeight();
            String screenSize=""String_Node_Str"";
            if (width > 480 || height > 480) {
              screenSize=""String_Node_Str"";
            }
            final String chartViewURL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + dataValues + ""String_Node_Str""+ screenSize+ ""String_Node_Str""+ ""String_Node_Str""+ xLabels+ ""String_Node_Str""+ minBuffer+ ""String_Node_Str""+ maxBuffer+ ""String_Node_Str""+ minBuffer+ ""String_Node_Str""+ maxBuffer+ ""String_Node_Str""+ yInterval+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ xGrid+ ""String_Node_Str""+ yGrid+ ""String_Node_Str"";
            new statsChartTask().execute(chartViewURL);
          }
 else           if (reportType.equals(""String_Node_Str"")) {
            reportTitle.setText(getResources().getText(R.string.report_postviews));
            iv.setVisibility(View.GONE);
            Object[] key=numDataSet.toArray();
            Arrays.sort(key);
            TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
            tl.removeAllViews();
            LayoutInflater inflater=getLayoutInflater();
            TableRow table_row=(TableRow)inflater.inflate(R.layout.table_row_header,tl,false);
            TextView col_1=(TextView)table_row.findViewById(R.id.col1);
            col_1.setText(getResources().getText(R.string.report_post_title));
            col_1.setTypeface(Typeface.DEFAULT_BOLD);
            TextView col_2=(TextView)table_row.findViewById(R.id.col2);
            col_2.setText(getResources().getText(R.string.report_views));
            col_2.setTypeface(Typeface.DEFAULT_BOLD);
            tl.addView(table_row);
            HashMap<?,?> row;
            for (int i=0; i < dataSet.size(); i++) {
              row=(HashMap<?,?>)dataSet.get(i);
              String date=row.get(""String_Node_Str"").toString();
              String value=numDataSet.get(i).toString();
              TableRow tr=(TableRow)inflater.inflate(R.layout.table_row,tl,false);
              TextView col1=(TextView)tr.findViewById(R.id.col1);
              col1.setText(date);
              TextView col2=(TextView)tr.findViewById(R.id.col2);
              col2.setText(value);
              if (i % 2 == 0) {
                tr.setBackgroundColor(Color.parseColor(""String_Node_Str""));
              }
              tl.addView(tr);
            }
          }
 else           if (reportType.equals(""String_Node_Str"") || reportType.equals(""String_Node_Str"") || reportType.equals(""String_Node_Str"")) {
            iv.setVisibility(View.GONE);
            Object[] key=numDataSet.toArray();
            Arrays.sort(key);
            TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
            tl.removeAllViews();
            LayoutInflater inflater=getLayoutInflater();
            TableRow table_row=(TableRow)inflater.inflate(R.layout.table_row_header,tl,false);
            TextView col_1=(TextView)table_row.findViewById(R.id.col1);
            if (reportType.equals(""String_Node_Str"")) {
              col_1.setText(getResources().getText(R.string.report_referrers));
              reportTitle.setText(getResources().getText(R.string.report_referrers));
            }
 else             if (reportType.equals(""String_Node_Str"")) {
              reportTitle.setText(getResources().getText(R.string.report_searchterms));
              col_1.setText(getResources().getText(R.string.report_searchterms));
            }
 else {
              reportTitle.setText(getResources().getText(R.string.report_clicks));
              col_1.setText(getResources().getText(R.string.report_clicks));
            }
            col_1.setTypeface(Typeface.DEFAULT_BOLD);
            TextView col_2=(TextView)table_row.findViewById(R.id.col2);
            col_2.setText(""String_Node_Str"");
            col_2.setTypeface(Typeface.DEFAULT_BOLD);
            tl.addView(table_row);
            HashMap<?,?> row;
            for (int i=0; i < dataSet.size(); i++) {
              row=(HashMap<?,?>)dataSet.get(i);
              String date=row.get(""String_Node_Str"").toString();
              String value=numDataSet.get(i).toString();
              TableRow tr=(TableRow)inflater.inflate(R.layout.table_row,tl,false);
              TextView col1=(TextView)tr.findViewById(R.id.col1);
              col1.setText(date);
              Linkify.addLinks(col1,Linkify.WEB_URLS);
              TextView col2=(TextView)tr.findViewById(R.id.col2);
              col2.setText(value);
              if (i % 2 == 0) {
                tr.setBackgroundColor(Color.parseColor(""String_Node_Str""));
              }
              tl.addView(tr);
            }
          }
          if (!isFinishing())           dismissDialog(ID_DIALOG_GET_STATS);
        }
      }
;
      this.runOnUiThread(uiThread);
    }
 else {
      Thread alert=new Thread(){
        public void run(){
          dismissDialog(ID_DIALOG_GET_STATS);
          RelativeLayout filters=(RelativeLayout)findViewById(R.id.filters);
          filters.setVisibility(View.VISIBLE);
          Toast.makeText(ViewStats.this,getResources().getText(R.string.no_data_found),Toast.LENGTH_SHORT).show();
        }
      }
;
      if (!isFinishing()) {
        this.runOnUiThread(alert);
      }
    }
  }
 catch (  ClientProtocolException e) {
    dismissDialog(ID_DIALOG_GET_STATS);
    errorMsg=e.getMessage();
  }
catch (  IllegalStateException e) {
    dismissDialog(ID_DIALOG_GET_STATS);
    errorMsg=e.getMessage();
  }
catch (  IOException e) {
    dismissDialog(ID_DIALOG_GET_STATS);
    errorMsg=e.getMessage();
  }
catch (  XmlPullParserException e) {
    dismissDialog(ID_DIALOG_GET_STATS);
    errorMsg=e.getMessage();
  }
  if (errorMsg != ""String_Node_Str"") {
    Thread error=new Thread(){
      public void run(){
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(ViewStats.this);
        dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
        dialogBuilder.setMessage(errorMsg);
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
    }
;
    this.runOnUiThread(error);
  }
}","private void getStatsData(String apiKey,String blogID,final String reportType,int interval){
  if (isFinishing()) {
    finish();
  }
  String DATE_FORMAT=""String_Node_Str"";
  SimpleDateFormat sdf=new SimpleDateFormat(DATE_FORMAT);
  Calendar c1=Calendar.getInstance();
  String period=""String_Node_Str"";
  if (interval == 90) {
    period=""String_Node_Str"";
    interval=12;
  }
 else   if (interval == 365) {
    period=""String_Node_Str"";
    interval=11;
  }
 else   if (interval == -1) {
    period=""String_Node_Str"";
  }
  String uriString=""String_Node_Str"" + ""String_Node_Str"" + apiKey + ""String_Node_Str""+ blogID+ ""String_Node_Str""+ reportType+ ""String_Node_Str""+ sdf.format(c1.getTime())+ ""String_Node_Str""+ interval+ ""String_Node_Str""+ period;
  vsoURI=uriString;
  if (!reportType.equals(""String_Node_Str"")) {
    uriString+=""String_Node_Str"";
  }
  URI uri=URI.create(uriString);
  configureClient(uri,null,null);
  try {
    HttpResponse response;
    response=client.execute(postMethod);
    XmlPullParser pullParser=XmlPullParserFactory.newInstance().newPullParser();
    HttpEntity entity=response.getEntity();
    PushbackInputStream is=new PushbackInputStream(entity.getContent());
    int bomCheck=is.read();
    int stopper=0;
    while (bomCheck != 60 && stopper < 20) {
      bomCheck=is.read();
      stopper++;
    }
    is.unread(bomCheck);
    pullParser.setInput(is,""String_Node_Str"");
    int eventType=pullParser.getEventType();
    boolean foundDataItem=false;
    final Vector<HashMap<String,String>> dataSet=new Vector<HashMap<String,String>>();
    final Vector<Integer> numDataSet=new Vector<Integer>();
    int rowCount=0;
    while (eventType != XmlPullParser.END_DOCUMENT) {
      if (eventType == XmlPullParser.START_DOCUMENT) {
      }
 else       if (eventType == XmlPullParser.END_DOCUMENT) {
      }
 else       if (eventType == XmlPullParser.START_TAG) {
        String name=pullParser.getName();
        if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")) {
        }
 else         if (pullParser.getName().equals(""String_Node_Str"")) {
          break;
        }
 else {
          foundDataItem=true;
          HashMap<String,String> dataRow=new HashMap<String,String>();
          for (int i=0; i < pullParser.getAttributeCount(); i++) {
            dataRow.put(pullParser.getAttributeName(i).toString(),pullParser.getAttributeValue(i).toString());
          }
          if (dataRow != null) {
            dataSet.add(rowCount,dataRow);
          }
        }
      }
 else       if (eventType == XmlPullParser.END_TAG) {
      }
 else       if (eventType == XmlPullParser.TEXT) {
        if (foundDataItem) {
          if (pullParser.getText().toString() == ""String_Node_Str"") {
            numDataSet.add(rowCount,0);
          }
 else {
            int value=0;
            try {
              value=Integer.parseInt(pullParser.getText().toString());
            }
 catch (            NumberFormatException e) {
            }
            numDataSet.add(rowCount,value);
          }
          rowCount++;
          foundDataItem=false;
        }
      }
      eventType=pullParser.next();
    }
    if (dataSet.size() > 0) {
      final int intervalT=interval;
      Thread uiThread=new Thread(){
        public void run(){
          RelativeLayout filters=(RelativeLayout)findViewById(R.id.filters);
          filters.setVisibility(View.VISIBLE);
          TextView reportTitle=(TextView)findViewById(R.id.chartTitle);
          reportTitle.setVisibility(View.VISIBLE);
          ImageView iv=(ImageView)findViewById(R.id.chart);
          if (reportType.equals(""String_Node_Str"")) {
            if (intervalT != 1) {
              iv.setVisibility(View.VISIBLE);
            }
 else {
              iv.setVisibility(View.GONE);
            }
            reportTitle.setText(getResources().getText(R.string.report_views));
            String dataValues=""String_Node_Str"", dateStrings=""String_Node_Str"", xLabels=""String_Node_Str"";
            Object[] key=numDataSet.toArray();
            Arrays.sort(key);
            TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
            tl.removeAllViews();
            LayoutInflater inflater=getLayoutInflater();
            TableRow table_row=(TableRow)inflater.inflate(R.layout.table_row_header,tl,false);
            TextView col_1=(TextView)table_row.findViewById(R.id.col1);
            col_1.setText(getResources().getText(R.string.date));
            col_1.setTypeface(Typeface.DEFAULT_BOLD);
            TextView col_2=(TextView)table_row.findViewById(R.id.col2);
            col_2.setText(getResources().getText(R.string.report_views));
            col_2.setTypeface(Typeface.DEFAULT_BOLD);
            tl.addView(table_row);
            HashMap<?,?> row;
            for (int i=0; i < dataSet.size(); i++) {
              row=(HashMap<?,?>)dataSet.get(i);
              String date;
              try {
                date=row.get(""String_Node_Str"").toString();
              }
 catch (              Exception e) {
                return;
              }
              String value=numDataSet.get(i).toString();
              dateStrings+=date + ""String_Node_Str"";
              dataValues+=value + ""String_Node_Str"";
              if (i == 0)               xLabels+=date + ""String_Node_Str"";
 else               if (i == (dataSet.size() - 1))               xLabels+=date;
 else               xLabels+=""String_Node_Str"";
              TableRow tr=(TableRow)inflater.inflate(R.layout.table_row,tl,false);
              TextView col1=(TextView)tr.findViewById(R.id.col1);
              col1.setText(date);
              TextView col2=(TextView)tr.findViewById(R.id.col2);
              col2.setText(value);
              if (i % 2 == 0) {
                tr.setBackgroundColor(Color.parseColor(""String_Node_Str""));
              }
              tl.addView(tr);
            }
            int maxValue=Integer.parseInt(key[key.length - 1].toString());
            int minValue=Integer.parseInt(key[0].toString());
            dataValues=dataValues.substring(0,dataValues.length() - 1);
            dateStrings=dateStrings.substring(0,dateStrings.length() - 1);
            long minBuffer=Math.round(minValue - (maxValue * .10));
            if (minBuffer < 0) {
              minBuffer=0;
            }
            long maxBuffer=Math.round(maxValue + (maxValue * .10));
            for (int i=0; i < 9; i++) {
              if (minBuffer % 10 == 0)               break;
 else {
                minBuffer--;
              }
            }
            for (int i=0; i < 9; i++) {
              if (maxBuffer % 10 == 0)               break;
 else {
                maxBuffer++;
              }
            }
            long yInterval=maxBuffer / 10;
            for (int i=0; i < 9; i++) {
              if (yInterval % 10 == 0)               break;
 else {
                yInterval++;
              }
            }
            float xGrid=100.00f / 6;
            if (yInterval == 0) {
              yInterval=1;
            }
            long numRows=(maxBuffer - minBuffer) / yInterval;
            float yGrid=100.00f / numRows;
            Display display=getWindowManager().getDefaultDisplay();
            int width=display.getWidth();
            int height=display.getHeight();
            String screenSize=""String_Node_Str"";
            if (width > 480 || height > 480) {
              screenSize=""String_Node_Str"";
            }
            final String chartViewURL=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + dataValues + ""String_Node_Str""+ screenSize+ ""String_Node_Str""+ ""String_Node_Str""+ xLabels+ ""String_Node_Str""+ minBuffer+ ""String_Node_Str""+ maxBuffer+ ""String_Node_Str""+ minBuffer+ ""String_Node_Str""+ maxBuffer+ ""String_Node_Str""+ yInterval+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ xGrid+ ""String_Node_Str""+ yGrid+ ""String_Node_Str"";
            new statsChartTask().execute(chartViewURL);
          }
 else           if (reportType.equals(""String_Node_Str"")) {
            reportTitle.setText(getResources().getText(R.string.report_postviews));
            iv.setVisibility(View.GONE);
            Object[] key=numDataSet.toArray();
            Arrays.sort(key);
            TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
            tl.removeAllViews();
            LayoutInflater inflater=getLayoutInflater();
            TableRow table_row=(TableRow)inflater.inflate(R.layout.table_row_header,tl,false);
            TextView col_1=(TextView)table_row.findViewById(R.id.col1);
            col_1.setText(getResources().getText(R.string.report_post_title));
            col_1.setTypeface(Typeface.DEFAULT_BOLD);
            TextView col_2=(TextView)table_row.findViewById(R.id.col2);
            col_2.setText(getResources().getText(R.string.report_views));
            col_2.setTypeface(Typeface.DEFAULT_BOLD);
            tl.addView(table_row);
            HashMap<?,?> row;
            for (int i=0; i < dataSet.size(); i++) {
              row=(HashMap<?,?>)dataSet.get(i);
              String date=row.get(""String_Node_Str"").toString();
              String value=numDataSet.get(i).toString();
              TableRow tr=(TableRow)inflater.inflate(R.layout.table_row,tl,false);
              TextView col1=(TextView)tr.findViewById(R.id.col1);
              col1.setText(date);
              TextView col2=(TextView)tr.findViewById(R.id.col2);
              col2.setText(value);
              if (i % 2 == 0) {
                tr.setBackgroundColor(Color.parseColor(""String_Node_Str""));
              }
              tl.addView(tr);
            }
          }
 else           if (reportType.equals(""String_Node_Str"") || reportType.equals(""String_Node_Str"") || reportType.equals(""String_Node_Str"")) {
            iv.setVisibility(View.GONE);
            Object[] key=numDataSet.toArray();
            Arrays.sort(key);
            TableLayout tl=(TableLayout)findViewById(R.id.dataTable);
            tl.removeAllViews();
            LayoutInflater inflater=getLayoutInflater();
            TableRow table_row=(TableRow)inflater.inflate(R.layout.table_row_header,tl,false);
            TextView col_1=(TextView)table_row.findViewById(R.id.col1);
            if (reportType.equals(""String_Node_Str"")) {
              col_1.setText(getResources().getText(R.string.report_referrers));
              reportTitle.setText(getResources().getText(R.string.report_referrers));
            }
 else             if (reportType.equals(""String_Node_Str"")) {
              reportTitle.setText(getResources().getText(R.string.report_searchterms));
              col_1.setText(getResources().getText(R.string.report_searchterms));
            }
 else {
              reportTitle.setText(getResources().getText(R.string.report_clicks));
              col_1.setText(getResources().getText(R.string.report_clicks));
            }
            col_1.setTypeface(Typeface.DEFAULT_BOLD);
            TextView col_2=(TextView)table_row.findViewById(R.id.col2);
            col_2.setText(""String_Node_Str"");
            col_2.setTypeface(Typeface.DEFAULT_BOLD);
            tl.addView(table_row);
            HashMap<?,?> row;
            for (int i=0; i < dataSet.size(); i++) {
              row=(HashMap<?,?>)dataSet.get(i);
              String date=row.get(""String_Node_Str"").toString();
              String value=numDataSet.get(i).toString();
              TableRow tr=(TableRow)inflater.inflate(R.layout.table_row,tl,false);
              TextView col1=(TextView)tr.findViewById(R.id.col1);
              col1.setText(date);
              Linkify.addLinks(col1,Linkify.WEB_URLS);
              TextView col2=(TextView)tr.findViewById(R.id.col2);
              col2.setText(value);
              if (i % 2 == 0) {
                tr.setBackgroundColor(Color.parseColor(""String_Node_Str""));
              }
              tl.addView(tr);
            }
          }
          if (!isFinishing())           titleBar.stopRotatingRefreshIcon();
        }
      }
;
      this.runOnUiThread(uiThread);
    }
 else {
      Thread alert=new Thread(){
        public void run(){
          titleBar.stopRotatingRefreshIcon();
          RelativeLayout filters=(RelativeLayout)findViewById(R.id.filters);
          filters.setVisibility(View.VISIBLE);
          Toast.makeText(ViewStats.this,getResources().getText(R.string.no_data_found),Toast.LENGTH_SHORT).show();
        }
      }
;
      if (!isFinishing()) {
        this.runOnUiThread(alert);
      }
    }
  }
 catch (  ClientProtocolException e) {
    titleBar.stopRotatingRefreshIcon();
    errorMsg=e.getMessage();
  }
catch (  IllegalStateException e) {
    titleBar.stopRotatingRefreshIcon();
    errorMsg=e.getMessage();
  }
catch (  IOException e) {
    titleBar.stopRotatingRefreshIcon();
    errorMsg=e.getMessage();
  }
catch (  XmlPullParserException e) {
    titleBar.stopRotatingRefreshIcon();
    errorMsg=e.getMessage();
  }
  if (errorMsg != ""String_Node_Str"") {
    Thread error=new Thread(){
      public void run(){
        AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(ViewStats.this);
        dialogBuilder.setTitle(getResources().getText(R.string.connection_error));
        dialogBuilder.setMessage(errorMsg);
        dialogBuilder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        dialogBuilder.setCancelable(true);
        if (!isFinishing()) {
          dialogBuilder.create().show();
        }
      }
    }
;
    this.runOnUiThread(error);
  }
}",0.975800043343206
15242,"private void initStats(){
  String sUsername, sPassword;
  if (WordPress.currentBlog.getApi_key() == null) {
    if (WordPress.currentBlog.getDotcom_username() != null) {
      sUsername=WordPress.currentBlog.getDotcom_username();
      sPassword=WordPress.currentBlog.getDotcom_password();
    }
 else {
      sUsername=WordPress.currentBlog.getUsername();
      sPassword=WordPress.currentBlog.getPassword();
    }
    showProgressBar();
    new statsUserDataTask().execute(sUsername,sPassword,WordPress.currentBlog.getUrl(),String.valueOf(WordPress.currentBlog.getBlogId()));
  }
 else {
    showDialog(ID_DIALOG_GET_STATS);
    Thread action=new Thread(){
      public void run(){
        getStatsData(WordPress.currentBlog.getApi_key(),WordPress.currentBlog.getApi_blogid(),""String_Node_Str"",7);
      }
    }
;
    action.start();
  }
}","private void initStats(){
  String sUsername, sPassword;
  if (WordPress.currentBlog.getApi_key() == null) {
    if (WordPress.currentBlog.getDotcom_username() != null) {
      sUsername=WordPress.currentBlog.getDotcom_username();
      sPassword=WordPress.currentBlog.getDotcom_password();
    }
 else {
      sUsername=WordPress.currentBlog.getUsername();
      sPassword=WordPress.currentBlog.getPassword();
    }
    new statsUserDataTask().execute(sUsername,sPassword,WordPress.currentBlog.getUrl(),String.valueOf(WordPress.currentBlog.getBlogId()));
  }
 else {
    titleBar.startRotatingRefreshIcon();
    Thread action=new Thread(){
      public void run(){
        getStatsData(WordPress.currentBlog.getApi_key(),WordPress.currentBlog.getApi_blogid(),""String_Node_Str"",7);
      }
    }
;
    action.start();
  }
}",0.9513513513513514
15243,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  Bundle extras=intent.getExtras();
  if (extras != null) {
    isPage=extras.getBoolean(""String_Node_Str"");
    postList.isPage=isPage;
  }
  titleBar.refreshBlog();
  attemptToSelectPost();
  postList.loadPosts(false);
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  Bundle extras=intent.getExtras();
  if (extras != null) {
    isPage=extras.getBoolean(""String_Node_Str"");
    postList.isPage=isPage;
  }
 else {
    isPage=false;
    postList.isPage=isPage;
  }
  titleBar.refreshBlog();
  attemptToSelectPost();
  postList.loadPosts(false);
}",0.9129129129129128
15244,"private void createSwitcher(){
  if (!isPage) {
    switcher=new ViewSwitcher(getActivity().getApplicationContext());
    Button footer=(Button)View.inflate(getActivity().getApplicationContext(),R.layout.list_footer_btn,null);
    footer.setText(getResources().getText(R.string.load_more) + ""String_Node_Str"" + getResources().getText(R.string.tab_posts));
    footer.setOnClickListener(new Button.OnClickListener(){
      public void onClick(      View v){
        switcher.showNext();
        numRecords+=30;
        refreshPosts(true);
      }
    }
);
    View progress=View.inflate(getActivity().getApplicationContext(),R.layout.list_footer_progress,null);
    switcher.addView(footer);
    switcher.addView(progress);
  }
}","public void createSwitcher(){
  switcher=new ViewSwitcher(getActivity().getApplicationContext());
  Button footer=(Button)View.inflate(getActivity().getApplicationContext(),R.layout.list_footer_btn,null);
  footer.setText(getResources().getText(R.string.load_more) + ""String_Node_Str"" + getResources().getText(R.string.tab_posts));
  footer.setOnClickListener(new Button.OnClickListener(){
    public void onClick(    View v){
      switcher.showNext();
      numRecords+=30;
      refreshPosts(true);
    }
  }
);
  View progress=View.inflate(getActivity().getApplicationContext(),R.layout.list_footer_progress,null);
  switcher.addView(footer);
  switcher.addView(progress);
}",0.8662873399715505
15245,"public boolean loadPosts(boolean loadMore){
  Vector<?> loadedPosts;
  if (isPage) {
    loadedPosts=WordPress.wpDB.loadUploadedPosts(getActivity().getApplicationContext(),WordPress.currentBlog.getId(),true);
  }
 else {
    loadedPosts=WordPress.wpDB.loadUploadedPosts(getActivity().getApplicationContext(),WordPress.currentBlog.getId(),false);
  }
  if (loadedPosts != null) {
    titles=new String[loadedPosts.size()];
    postIDs=new String[loadedPosts.size()];
    dateCreated=new String[loadedPosts.size()];
    dateCreatedFormatted=new String[loadedPosts.size()];
  }
 else {
    titles=new String[0];
    postIDs=new String[0];
    dateCreated=new String[0];
    dateCreatedFormatted=new String[0];
    if (pla != null) {
      pla.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null) {
    for (int i=0; i < loadedPosts.size(); i++) {
      HashMap<?,?> contentHash=(HashMap<?,?>)loadedPosts.get(i);
      titles[i]=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      postIDs[i]=contentHash.get(""String_Node_Str"").toString();
      dateCreated[i]=contentHash.get(""String_Node_Str"").toString();
      int flags=0;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
      flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
      long localTime=(Long)contentHash.get(""String_Node_Str"") + TimeZone.getDefault().getOffset((Long)contentHash.get(""String_Node_Str""));
      dateCreatedFormatted[i]=DateUtils.formatDateTime(getActivity().getApplicationContext(),localTime,flags);
    }
    List<String> postIDList=Arrays.asList(postIDs);
    List<String> newPostIDList=new ArrayList<String>();
    newPostIDList.add(""String_Node_Str"");
    newPostIDList.addAll(postIDList);
    postIDs=(String[])newPostIDList.toArray(new String[newPostIDList.size()]);
    List<String> postTitleList=Arrays.asList(titles);
    List<CharSequence> newPostTitleList=new ArrayList<CharSequence>();
    newPostTitleList.add(getResources().getText((isPage) ? R.string.tab_pages : R.string.tab_posts));
    newPostTitleList.addAll(postTitleList);
    titles=(String[])newPostTitleList.toArray(new String[newPostTitleList.size()]);
    List<String> dateList=Arrays.asList(dateCreated);
    List<String> newDateList=new ArrayList<String>();
    newDateList.add(""String_Node_Str"");
    newDateList.addAll(dateList);
    dateCreated=(String[])newDateList.toArray(new String[newDateList.size()]);
    List<String> dateFormattedList=Arrays.asList(dateCreatedFormatted);
    List<String> newDateFormattedList=new ArrayList<String>();
    newDateFormattedList.add(""String_Node_Str"");
    newDateFormattedList.addAll(dateFormattedList);
    dateCreatedFormatted=(String[])newDateFormattedList.toArray(new String[newDateFormattedList.size()]);
  }
  boolean drafts=loadDrafts();
  if (drafts) {
    List<String> draftIDList=Arrays.asList(draftIDs);
    List<String> newDraftIDList=new ArrayList<String>();
    newDraftIDList.add(""String_Node_Str"");
    newDraftIDList.addAll(draftIDList);
    draftIDs=(String[])newDraftIDList.toArray(new String[newDraftIDList.size()]);
    List<String> titleList=Arrays.asList(draftTitles);
    List<CharSequence> newTitleList=new ArrayList<CharSequence>();
    newTitleList.add(getResources().getText(R.string.local_drafts));
    newTitleList.addAll(titleList);
    draftTitles=(String[])newTitleList.toArray(new String[newTitleList.size()]);
    List<String> draftDateList=Arrays.asList(draftDateCreated);
    List<String> newDraftDateList=new ArrayList<String>();
    newDraftDateList.add(""String_Node_Str"");
    newDraftDateList.addAll(draftDateList);
    draftDateCreated=(String[])newDraftDateList.toArray(new String[newDraftDateList.size()]);
    postIDs=StringHelper.mergeStringArrays(draftIDs,postIDs);
    titles=StringHelper.mergeStringArrays(draftTitles,titles);
    dateCreatedFormatted=StringHelper.mergeStringArrays(draftDateCreated,dateCreatedFormatted);
  }
 else {
    if (pla != null) {
      pla.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null || drafts == true) {
    ListView listView=getListView();
    if (!isPage) {
      listView.removeFooterView(switcher);
      if (loadedPosts != null) {
        if (loadedPosts.size() >= 20) {
          listView.addFooterView(switcher);
        }
      }
    }
    if (loadMore) {
      pla.notifyDataSetChanged();
    }
 else {
      pla=new PostListAdapter(getActivity().getApplicationContext());
      listView.setAdapter(pla);
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View v,        int position,        long id){
          if (v != null) {
            selectedPosition=position;
            selectedID=v.getId();
            Post post=new Post(WordPress.currentBlog.getId(),selectedID,isPage,getActivity().getApplicationContext());
            WordPress.currentPost=post;
            onPostSelectedListener.onPostSelected(post);
            pla.notifyDataSetChanged();
          }
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          Object[] args={R.id.row_post_id};
          try {
            Method m=android.view.View.class.getMethod(""String_Node_Str"");
            m.invoke(selectedID,args);
          }
 catch (          NoSuchMethodException e) {
            selectedID=info.targetView.getId();
          }
catch (          IllegalArgumentException e) {
            selectedID=info.targetView.getId();
          }
catch (          IllegalAccessException e) {
            selectedID=info.targetView.getId();
          }
catch (          InvocationTargetException e) {
            selectedID=info.targetView.getId();
          }
          rowID=info.position;
          if (totalDrafts > 0 && rowID <= totalDrafts && rowID != 0) {
            menu.clear();
            menu.setHeaderTitle(getResources().getText(R.string.draft_actions));
            menu.add(1,0,0,getResources().getText(R.string.edit_draft));
            menu.add(1,1,0,getResources().getText(R.string.delete_draft));
          }
 else           if (rowID == 1 || ((rowID != (totalDrafts + 1)) && rowID != 0)) {
            menu.clear();
            if (isPage) {
              menu.setHeaderTitle(getResources().getText(R.string.page_actions));
              menu.add(2,0,0,getResources().getText(R.string.edit_page));
              menu.add(2,1,0,getResources().getText(R.string.delete_page));
              menu.add(2,2,0,getResources().getText(R.string.share_url));
            }
 else {
              menu.setHeaderTitle(getResources().getText(R.string.post_actions));
              menu.add(0,0,0,getResources().getText(R.string.edit_post));
              menu.add(0,1,0,getResources().getText(R.string.delete_post));
              menu.add(0,2,0,getResources().getText(R.string.share_url));
            }
          }
        }
      }
);
    }
    if (this.shouldSelectAfterLoad) {
      if (postIDs != null) {
        if (postIDs.length >= 1) {
          Post post=new Post(WordPress.currentBlog.getId(),Integer.valueOf(postIDs[1]),isPage,getActivity().getApplicationContext());
          WordPress.currentPost=post;
          onPostSelectedListener.onPostSelected(post);
          selectedPosition=1;
          pla.notifyDataSetChanged();
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    return true;
  }
 else {
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    return false;
  }
}","public boolean loadPosts(boolean loadMore){
  Vector<?> loadedPosts;
  if (isPage) {
    loadedPosts=WordPress.wpDB.loadUploadedPosts(getActivity().getApplicationContext(),WordPress.currentBlog.getId(),true);
  }
 else {
    loadedPosts=WordPress.wpDB.loadUploadedPosts(getActivity().getApplicationContext(),WordPress.currentBlog.getId(),false);
  }
  if (loadedPosts != null) {
    titles=new String[loadedPosts.size()];
    postIDs=new String[loadedPosts.size()];
    dateCreated=new String[loadedPosts.size()];
    dateCreatedFormatted=new String[loadedPosts.size()];
  }
 else {
    titles=new String[0];
    postIDs=new String[0];
    dateCreated=new String[0];
    dateCreatedFormatted=new String[0];
    if (pla != null) {
      pla.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null) {
    for (int i=0; i < loadedPosts.size(); i++) {
      HashMap<?,?> contentHash=(HashMap<?,?>)loadedPosts.get(i);
      titles[i]=EscapeUtils.unescapeHtml(contentHash.get(""String_Node_Str"").toString());
      postIDs[i]=contentHash.get(""String_Node_Str"").toString();
      dateCreated[i]=contentHash.get(""String_Node_Str"").toString();
      int flags=0;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_DATE;
      flags|=android.text.format.DateUtils.FORMAT_ABBREV_MONTH;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_YEAR;
      flags|=android.text.format.DateUtils.FORMAT_SHOW_TIME;
      long localTime=(Long)contentHash.get(""String_Node_Str"") + TimeZone.getDefault().getOffset((Long)contentHash.get(""String_Node_Str""));
      dateCreatedFormatted[i]=DateUtils.formatDateTime(getActivity().getApplicationContext(),localTime,flags);
    }
    List<String> postIDList=Arrays.asList(postIDs);
    List<String> newPostIDList=new ArrayList<String>();
    newPostIDList.add(""String_Node_Str"");
    newPostIDList.addAll(postIDList);
    postIDs=(String[])newPostIDList.toArray(new String[newPostIDList.size()]);
    List<String> postTitleList=Arrays.asList(titles);
    List<CharSequence> newPostTitleList=new ArrayList<CharSequence>();
    newPostTitleList.add(getResources().getText((isPage) ? R.string.tab_pages : R.string.tab_posts));
    newPostTitleList.addAll(postTitleList);
    titles=(String[])newPostTitleList.toArray(new String[newPostTitleList.size()]);
    List<String> dateList=Arrays.asList(dateCreated);
    List<String> newDateList=new ArrayList<String>();
    newDateList.add(""String_Node_Str"");
    newDateList.addAll(dateList);
    dateCreated=(String[])newDateList.toArray(new String[newDateList.size()]);
    List<String> dateFormattedList=Arrays.asList(dateCreatedFormatted);
    List<String> newDateFormattedList=new ArrayList<String>();
    newDateFormattedList.add(""String_Node_Str"");
    newDateFormattedList.addAll(dateFormattedList);
    dateCreatedFormatted=(String[])newDateFormattedList.toArray(new String[newDateFormattedList.size()]);
  }
  boolean drafts=loadDrafts();
  if (drafts) {
    List<String> draftIDList=Arrays.asList(draftIDs);
    List<String> newDraftIDList=new ArrayList<String>();
    newDraftIDList.add(""String_Node_Str"");
    newDraftIDList.addAll(draftIDList);
    draftIDs=(String[])newDraftIDList.toArray(new String[newDraftIDList.size()]);
    List<String> titleList=Arrays.asList(draftTitles);
    List<CharSequence> newTitleList=new ArrayList<CharSequence>();
    newTitleList.add(getResources().getText(R.string.local_drafts));
    newTitleList.addAll(titleList);
    draftTitles=(String[])newTitleList.toArray(new String[newTitleList.size()]);
    List<String> draftDateList=Arrays.asList(draftDateCreated);
    List<String> newDraftDateList=new ArrayList<String>();
    newDraftDateList.add(""String_Node_Str"");
    newDraftDateList.addAll(draftDateList);
    draftDateCreated=(String[])newDraftDateList.toArray(new String[newDraftDateList.size()]);
    postIDs=StringHelper.mergeStringArrays(draftIDs,postIDs);
    titles=StringHelper.mergeStringArrays(draftTitles,titles);
    dateCreatedFormatted=StringHelper.mergeStringArrays(draftDateCreated,dateCreatedFormatted);
  }
 else {
    if (pla != null) {
      pla.notifyDataSetChanged();
    }
  }
  if (loadedPosts != null || drafts == true) {
    ListView listView=getListView();
    listView.removeFooterView(switcher);
    if (!isPage) {
      if (loadedPosts != null) {
        if (loadedPosts.size() >= 20) {
          listView.addFooterView(switcher);
        }
      }
    }
    if (loadMore) {
      pla.notifyDataSetChanged();
    }
 else {
      pla=new PostListAdapter(getActivity().getApplicationContext());
      listView.setAdapter(pla);
      listView.setOnItemClickListener(new OnItemClickListener(){
        public void onItemClick(        AdapterView<?> arg0,        View v,        int position,        long id){
          if (v != null) {
            selectedPosition=position;
            selectedID=v.getId();
            Post post=new Post(WordPress.currentBlog.getId(),selectedID,isPage,getActivity().getApplicationContext());
            WordPress.currentPost=post;
            onPostSelectedListener.onPostSelected(post);
            pla.notifyDataSetChanged();
          }
        }
      }
);
      listView.setOnCreateContextMenuListener(new OnCreateContextMenuListener(){
        public void onCreateContextMenu(        ContextMenu menu,        View v,        ContextMenuInfo menuInfo){
          AdapterView.AdapterContextMenuInfo info;
          try {
            info=(AdapterView.AdapterContextMenuInfo)menuInfo;
          }
 catch (          ClassCastException e) {
            return;
          }
          Object[] args={R.id.row_post_id};
          try {
            Method m=android.view.View.class.getMethod(""String_Node_Str"");
            m.invoke(selectedID,args);
          }
 catch (          NoSuchMethodException e) {
            selectedID=info.targetView.getId();
          }
catch (          IllegalArgumentException e) {
            selectedID=info.targetView.getId();
          }
catch (          IllegalAccessException e) {
            selectedID=info.targetView.getId();
          }
catch (          InvocationTargetException e) {
            selectedID=info.targetView.getId();
          }
          rowID=info.position;
          if (totalDrafts > 0 && rowID <= totalDrafts && rowID != 0) {
            menu.clear();
            menu.setHeaderTitle(getResources().getText(R.string.draft_actions));
            menu.add(1,0,0,getResources().getText(R.string.edit_draft));
            menu.add(1,1,0,getResources().getText(R.string.delete_draft));
          }
 else           if (rowID == 1 || ((rowID != (totalDrafts + 1)) && rowID != 0)) {
            menu.clear();
            if (isPage) {
              menu.setHeaderTitle(getResources().getText(R.string.page_actions));
              menu.add(2,0,0,getResources().getText(R.string.edit_page));
              menu.add(2,1,0,getResources().getText(R.string.delete_page));
              menu.add(2,2,0,getResources().getText(R.string.share_url));
            }
 else {
              menu.setHeaderTitle(getResources().getText(R.string.post_actions));
              menu.add(0,0,0,getResources().getText(R.string.edit_post));
              menu.add(0,1,0,getResources().getText(R.string.delete_post));
              menu.add(0,2,0,getResources().getText(R.string.share_url));
            }
          }
        }
      }
);
    }
    if (this.shouldSelectAfterLoad) {
      if (postIDs != null) {
        if (postIDs.length >= 1) {
          Post post=new Post(WordPress.currentBlog.getId(),Integer.valueOf(postIDs[1]),isPage,getActivity().getApplicationContext());
          WordPress.currentPost=post;
          onPostSelectedListener.onPostSelected(post);
          selectedPosition=1;
          pla.notifyDataSetChanged();
        }
      }
      shouldSelectAfterLoad=false;
    }
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    return true;
  }
 else {
    if (loadedPosts == null) {
      refreshPosts(false);
    }
    return false;
  }
}",0.9947493436679584
15246,"public long savePost(Context ctx,Post post,String blogID){
  long returnValue=-1;
  if (post != null) {
    db=ctx.openOrCreateDatabase(DATABASE_NAME,0,null);
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",blogID);
    values.put(""String_Node_Str"",post.getTitle());
    values.put(""String_Node_Str"",post.getDate_created_gmt());
    values.put(""String_Node_Str"",post.getDescription());
    if (post.getCategories() != null) {
      JSONArray jsonArray=null;
      try {
        jsonArray=new JSONArray(post.getCategories().toString());
        values.put(""String_Node_Str"",jsonArray.toString());
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    values.put(""String_Node_Str"",post.isLocalDraft());
    values.put(""String_Node_Str"",post.getMediaPaths());
    values.put(""String_Node_Str"",post.getMt_keywords());
    values.put(""String_Node_Str"",post.getWP_password());
    values.put(""String_Node_Str"",post.getPost_status());
    values.put(""String_Node_Str"",post.isUploaded());
    values.put(""String_Node_Str"",post.isPage());
    if (post.isUploaded()) {
      returnValue=db.update(POSTS_TABLE,values,""String_Node_Str"" + blogID + ""String_Node_Str""+ post.getPostid(),null);
    }
 else {
      returnValue=db.insert(POSTS_TABLE,null,values);
    }
    db.close();
  }
  return (returnValue);
}","public long savePost(Context ctx,Post post,String blogID){
  long returnValue=-1;
  if (post != null) {
    db=ctx.openOrCreateDatabase(DATABASE_NAME,0,null);
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",blogID);
    values.put(""String_Node_Str"",post.getTitle());
    values.put(""String_Node_Str"",post.getDate_created_gmt());
    values.put(""String_Node_Str"",post.getDescription());
    if (post.getCategories() != null) {
      JSONArray jsonArray=null;
      try {
        jsonArray=new JSONArray(post.getCategories().toString());
        values.put(""String_Node_Str"",jsonArray.toString());
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
    values.put(""String_Node_Str"",post.isLocalDraft());
    values.put(""String_Node_Str"",post.getMediaPaths());
    values.put(""String_Node_Str"",post.getMt_keywords());
    values.put(""String_Node_Str"",post.getWP_password());
    values.put(""String_Node_Str"",post.getPost_status());
    values.put(""String_Node_Str"",post.isUploaded());
    values.put(""String_Node_Str"",post.isPage());
    values.put(""String_Node_Str"",post.getLatitude());
    values.put(""String_Node_Str"",post.getLongitude());
    if (post.isUploaded() || post.getId() > 0) {
      returnValue=db.update(POSTS_TABLE,values,""String_Node_Str"" + blogID + ""String_Node_Str""+ post.getId(),null);
    }
 else {
      returnValue=db.insert(POSTS_TABLE,null,values);
    }
    db.close();
  }
  return (returnValue);
}",0.9526149526149528
15247,"/** 
 * Sets the progress and max of a ProgressBar.
 * @param viewId The view id.
 * @param progress The progress.
 * @param max The max value of a ProgressBar.
 * @return The BaseAdapterHelper for chaining.
 */
public BaseAdapterHelper setProgress(int viewId,int progress,int max){
  ProgressBar view=retrieveView(viewId);
  view.setProgress(progress);
  view.setMax(max);
  return this;
}","/** 
 * Sets the progress and max of a ProgressBar.
 * @param viewId The view id.
 * @param progress The progress.
 * @param max The max value of a ProgressBar.
 * @return The BaseAdapterHelper for chaining.
 */
public BaseAdapterHelper setProgress(int viewId,int progress,int max){
  ProgressBar view=retrieveView(viewId);
  view.setMax(max);
  view.setProgress(progress);
  return this;
}",0.9435897435897436
15248,"/** 
 * Sets the rating (the number of stars filled) and max of a RatingBar.
 * @param viewId The view id.
 * @param rating The rating.
 * @param max The range of the RatingBar to 0...max.
 * @return The BaseAdapterHelper for chaining.
 */
public BaseAdapterHelper setRating(int viewId,float rating,int max){
  RatingBar view=retrieveView(viewId);
  view.setRating(rating);
  view.setMax(max);
  return this;
}","/** 
 * Sets the rating (the number of stars filled) and max of a RatingBar.
 * @param viewId The view id.
 * @param rating The rating.
 * @param max The range of the RatingBar to 0...max.
 * @return The BaseAdapterHelper for chaining.
 */
public BaseAdapterHelper setRating(int viewId,float rating,int max){
  RatingBar view=retrieveView(viewId);
  view.setMax(max);
  view.setRating(rating);
  return this;
}",0.9560975609756096
15249,"protected void tearDown() throws Exception {
  Thread.sleep(100L);
  this.agilePmRabbitMQExchangeListener.close();
  this.collaborationRabbitMQExchangeListener.close();
  this.identityAccessRabbitMQExchangeListener.close();
  super.tearDown();
}","@Override protected void tearDown() throws Exception {
  this.agilePmRabbitMQExchangeListener.close();
  this.collaborationRabbitMQExchangeListener.close();
  this.identityAccessRabbitMQExchangeListener.close();
  super.tearDown();
}",0.9330543933054394
15250,"protected void expectedNotifications(int anNotificationCount){
  try {
    Thread.sleep(500L);
  }
 catch (  InterruptedException e) {
  }
  if (this.handledNotifications.size() != anNotificationCount) {
    throw new IllegalStateException(""String_Node_Str"" + anNotificationCount + ""String_Node_Str""+ this.handledNotifications.size()+ ""String_Node_Str""+ this.handledNotifications.values());
  }
}","protected void expectedNotifications(int anNotificationCount){
  try {
    Thread.sleep(200L);
  }
 catch (  InterruptedException e) {
  }
  if (this.handledNotifications.size() != anNotificationCount) {
    throw new IllegalStateException(""String_Node_Str"" + anNotificationCount + ""String_Node_Str""+ this.handledNotifications.size()+ ""String_Node_Str""+ this.handledNotifications.values());
  }
}",0.9974747474747476
15251,"protected void setUp() throws Exception {
  Thread.sleep(100L);
  SlothServer.executeInProcessDetachedServer();
  Thread.sleep(100L);
  DomainEventPublisher.instance().reset();
  DomainEventPublisher.instance().subscribe(new DomainEventSubscriber<DomainEvent>(){
    @Override public void handleEvent(    DomainEvent aDomainEvent){
      handledEvents.add(aDomainEvent.getClass());
    }
    @Override public Class<DomainEvent> subscribedToEventType(){
      return DomainEvent.class;
    }
  }
);
  this.handledEvents=new ArrayList<Class<? extends DomainEvent>>();
  this.handledNotifications=new HashMap<String,String>();
  this.agilePmRabbitMQExchangeListener=new TestAgilePMRabbitMQExchangeListener();
  this.collaborationRabbitMQExchangeListener=new TestCollaborationRabbitMQExchangeListener();
  this.identityAccessRabbitMQExchangeListener=new TestIdentityAccessRabbitMQExchangeListener();
  Thread.sleep(200L);
}","@Override protected void setUp() throws Exception {
  Thread.sleep(100L);
  SlothServer.executeInProcessDetachedServer();
  Thread.sleep(100L);
  DomainEventPublisher.instance().reset();
  DomainEventPublisher.instance().subscribe(new DomainEventSubscriber<DomainEvent>(){
    @Override public void handleEvent(    DomainEvent aDomainEvent){
      handledEvents.add(aDomainEvent.getClass());
    }
    @Override public Class<DomainEvent> subscribedToEventType(){
      return DomainEvent.class;
    }
  }
);
  this.handledEvents=new ArrayList<Class<? extends DomainEvent>>();
  this.handledNotifications=new HashMap<String,String>();
  this.agilePmRabbitMQExchangeListener=new TestAgilePMRabbitMQExchangeListener();
  this.collaborationRabbitMQExchangeListener=new TestCollaborationRabbitMQExchangeListener();
  this.identityAccessRabbitMQExchangeListener=new TestIdentityAccessRabbitMQExchangeListener();
  clearExchangeListeners();
  Thread.sleep(200L);
}",0.9797441364605544
15252,"protected void expectedNotification(Class<? extends DomainEvent> aNotificationType,int aTotal){
  try {
    Thread.sleep(500L);
  }
 catch (  InterruptedException e) {
  }
  int count=0;
  String notificationTypeName=aNotificationType.getName();
  for (  String type : this.handledNotifications.values()) {
    if (type.equals(notificationTypeName)) {
      System.out.println(""String_Node_Str"" + type);
      System.out.println(""String_Node_Str"" + notificationTypeName);
      ++count;
    }
  }
  if (count != aTotal) {
    throw new IllegalStateException(""String_Node_Str"" + aTotal + ""String_Node_Str""+ aNotificationType.getSimpleName()+ ""String_Node_Str""+ this.handledNotifications.size()+ ""String_Node_Str""+ this.handledNotifications.values());
  }
}","protected void expectedNotification(Class<? extends DomainEvent> aNotificationType,int aTotal){
  try {
    Thread.sleep(200L);
  }
 catch (  InterruptedException e) {
  }
  int count=0;
  String notificationTypeName=aNotificationType.getName();
  for (  String type : this.handledNotifications.values()) {
    if (type.equals(notificationTypeName)) {
      ++count;
    }
  }
  if (count != aTotal) {
    throw new IllegalStateException(""String_Node_Str"" + aTotal + ""String_Node_Str""+ aNotificationType.getSimpleName()+ ""String_Node_Str""+ this.handledNotifications.size()+ ""String_Node_Str""+ this.handledNotifications.values());
  }
}",0.912230215827338
15253,"@Override public boolean onContextItemSelected(MenuItem item){
  if (item.getItemId() != R.id.DeleteListItem && item.getItemId() != R.id.AddListItem) {
    return false;
  }
  ContextMenuInfo menuInfo=item.getMenuInfo();
  AdapterContextMenuInfo adapterInfo=(AdapterContextMenuInfo)menuInfo;
  int position=adapterInfo.position;
  Book book=(Book)mListView.getItemAtPosition(position);
  BookArrayAdapter adapter=(BookArrayAdapter)mListView.getAdapter();
  if (item.getItemId() == R.id.DeleteListItem) {
  }
 else   if (item.getItemId() == R.id.AddListItem) {
  }
  adapter.notifyDataSetChanged();
  return true;
}","@Override public boolean onContextItemSelected(MenuItem item){
  if (item.getItemId() != R.id.DeleteListItem && item.getItemId() != R.id.AddListItem) {
    return false;
  }
  ContextMenuInfo menuInfo=item.getMenuInfo();
  AdapterContextMenuInfo adapterInfo=(AdapterContextMenuInfo)menuInfo;
  int position=adapterInfo.position;
  Book book=(Book)mListView.getItemAtPosition(position);
  if (item.getItemId() == R.id.DeleteListItem) {
  }
 else   if (item.getItemId() == R.id.AddListItem) {
  }
  return true;
}",0.704
15254,"@Override protected void onCreate(Bundle savedInstanceState){
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mActivity=this;
  ArrayList<Book> list=new ArrayList<Book>();
  for (int i=0; i < 20; i++) {
    list.add(new Book(""String_Node_Str"" + i,""String_Node_Str"" + i,i * 10));
  }
  mListView=(ListView)findViewById(R.id.BookList);
}",0.2916666666666667
15255,"TracingFilter(HttpTracing httpTracing){
  tracer=httpTracing.tracing().tracer();
  handler=HttpServerHandler.create(httpTracing,ADAPTER);
  extractor=httpTracing.tracing().propagation().extractor(GETTER);
}","TracingFilter(HttpTracing httpTracing){
  tracer=httpTracing.tracing().tracer();
  currentTraceContext=httpTracing.tracing().currentTraceContext();
  handler=HttpServerHandler.create(httpTracing,ADAPTER);
  extractor=httpTracing.tracing().propagation().extractor(GETTER);
}",0.860125260960334
15256,"@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=servlet.httpResponse(response);
  if (request.getAttribute(""String_Node_Str"") != null) {
    chain.doFilter(request,response);
    return;
  }
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  Span span=handler.handleReceive(extractor,httpRequest);
  request.setAttribute(SpanCustomizer.class.getName(),span.customizer());
  request.setAttribute(TraceContext.class.getName(),span.context());
  Throwable error=null;
  try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
    chain.doFilter(httpRequest,httpResponse);
  }
 catch (  IOException|ServletException|RuntimeException|Error e) {
    error=e;
    throw e;
  }
 finally {
    if (servlet.isAsync(httpRequest)) {
      servlet.handleAsync(handler,httpRequest,span);
    }
 else {
      handler.handleSend(ADAPTER.adaptResponse(httpRequest,httpResponse),error,span);
    }
  }
}","@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=servlet.httpResponse(response);
  TraceContext context=(TraceContext)request.getAttribute(TraceContext.class.getName());
  if (context != null) {
    Scope scope=currentTraceContext.maybeScope(context);
    try {
      chain.doFilter(request,response);
    }
  finally {
      scope.close();
    }
    return;
  }
  Span span=handler.handleReceive(extractor,httpRequest);
  request.setAttribute(SpanCustomizer.class.getName(),span.customizer());
  request.setAttribute(TraceContext.class.getName(),span.context());
  Throwable error=null;
  Scope scope=currentTraceContext.newScope(span.context());
  try {
    chain.doFilter(httpRequest,httpResponse);
  }
 catch (  IOException|ServletException|RuntimeException|Error e) {
    error=e;
    throw e;
  }
 finally {
    scope.close();
    if (servlet.isAsync(httpRequest)) {
      servlet.handleAsync(handler,httpRequest,span);
    }
 else {
      handler.handleSend(ADAPTER.adaptResponse(httpRequest,httpResponse),error,span);
    }
  }
}",0.6337234503684439
15257,"InternalBuilder debug(boolean debug){
  if (debug) {
    flags|=FLAG_DEBUG;
  }
 else {
    flags&=~FLAG_DEBUG;
  }
  return this;
}","/** 
 * Ensures sampled is set when debug is 
 */
InternalBuilder debug(boolean debug){
  if (debug) {
    flags|=FLAG_DEBUG;
    flags|=FLAG_SAMPLED_SET;
    flags|=FLAG_SAMPLED;
  }
 else {
    flags&=~FLAG_DEBUG;
  }
  return this;
}",0.717391304347826
15258,"/** 
 * Returns a customizer for current span in scope or noop if there isn't one. <p>Unlike   {@link CurrentSpanCustomizer}, this represents a single span. Accordingly, this reference should not be saved as a field. That said, it is more efficient to save this result as a method-local variable vs repeated calls to   {@link #currentSpanCustomizer()}.
 */
public SpanCustomizer currentSpanCustomizer(){
  TraceContext currentContext=currentTraceContext.get();
  return currentContext != null ? RealSpanCustomizer.create(currentContext,recorder) : NoopSpanCustomizer.INSTANCE;
}","/** 
 * Returns a customizer for current span in scope or noop if there isn't one. <p>Unlike   {@link CurrentSpanCustomizer}, this represents a single span. Accordingly, this reference should not be saved as a field. That said, it is more efficient to save this result as a method-local variable vs repeated calls to   {@link #currentSpanCustomizer()}.
 */
public SpanCustomizer currentSpanCustomizer(){
  TraceContext currentContext=currentTraceContext.get();
  return currentContext != null && Boolean.TRUE.equals(currentContext.sampled()) ? RealSpanCustomizer.create(currentContext,recorder) : NoopSpanCustomizer.INSTANCE;
}",0.9593360995850624
15259,"@Override public TraceContext decorate(TraceContext context){
  TraceContext result=delegate.decorate(context);
  int extraIndex=indexOfExtra(result.extra());
  if (extraIndex != -1) {
    Extra extra=(Extra)result.extra().get(extraIndex);
    if (!Arrays.equals(extra.fieldNames,fieldNames)) {
      throw new IllegalStateException(String.format(""String_Node_Str"",Arrays.asList(extra.fieldNames),Arrays.asList(fieldNames)));
    }
    if (extra.tryAssociate(context))     return context;
  }
  List<Object> copyOfExtra=new ArrayList<>(result.extra());
  Extra extra;
  if (extraIndex != -1) {
    extra=((Extra)copyOfExtra.get(extraIndex)).clone();
    copyOfExtra.set(extraIndex,extra);
  }
 else {
    extra=new Extra(fieldNames);
    copyOfExtra.add(extra);
  }
  extra.context=context;
  return result.toBuilder().extra(Collections.unmodifiableList(copyOfExtra)).build();
}","@Override public TraceContext decorate(TraceContext context){
  TraceContext result=delegate.decorate(context);
  List<Object> extras=result.extra();
  int thisExtraIndex=-1, parentExtraIndex=-1;
  for (int i=0, length=extras.size(); i < length; i++) {
    if (extras.get(i) instanceof Extra) {
      Extra extra=(Extra)result.extra().get(i);
      if (!Arrays.equals(extra.fieldNames,fieldNames)) {
        throw new IllegalStateException(String.format(""String_Node_Str"",Arrays.toString(extra.fieldNames),Arrays.toString(fieldNames)));
      }
      if (extra.tryAssociate(context)) {
        thisExtraIndex=i;
      }
 else {
        parentExtraIndex=i;
      }
    }
  }
  if (thisExtraIndex != -1 && parentExtraIndex == -1)   return context;
  List<Object> copyOfExtra=new ArrayList<>(result.extra());
  Extra extra;
  if (thisExtraIndex == -1 && parentExtraIndex != -1) {
    extra=((Extra)copyOfExtra.get(parentExtraIndex)).clone();
    copyOfExtra.set(parentExtraIndex,extra);
  }
 else   if (thisExtraIndex != -1 && parentExtraIndex != -1) {
    extra=((Extra)copyOfExtra.get(thisExtraIndex));
    Extra parent=(Extra)copyOfExtra.remove(parentExtraIndex);
    if (parent.values != null) {
      for (int i=0; i < parent.values.length; i++) {
        if (parent.values[i] != null && extra.get(i) == null) {
          extra.set(i,parent.values[i]);
        }
      }
    }
  }
 else {
    extra=new Extra(fieldNames);
    copyOfExtra.add(extra);
  }
  TraceContext resultContext=result.toBuilder().extra(Collections.unmodifiableList(copyOfExtra)).build();
  extra.context=resultContext;
  return resultContext;
}",0.2828525641025641
15260,"/** 
 * Converts the context as-is to a Span object 
 */
public Span toSpan(TraceContext context){
  if (context == null)   throw new NullPointerException(""String_Node_Str"");
  if (noop.get() == false && Boolean.TRUE.equals(context.sampled())) {
    return RealSpan.create(context,recorder);
  }
  return NoopSpan.create(context);
}","/** 
 * Converts the context as-is to a Span object 
 */
public Span toSpan(TraceContext context){
  if (context == null)   throw new NullPointerException(""String_Node_Str"");
  if (!noop.get() && Boolean.TRUE.equals(context.sampled())) {
    return RealSpan.create(context,recorder);
  }
  return NoopSpan.create(context);
}",0.9847560975609756
15261,"/** 
 * Explicitly creates a child within an existing. The result will be have its parent ID set to the input's span ID. <p>To implicitly create a new trace, or a span within an existing one, use   {@link #nextSpan()}.
 */
public Span newChild(TraceContext parent){
  if (parent == null)   throw new NullPointerException(""String_Node_Str"");
  return nextSpan(TraceContextOrSamplingFlags.create(parent));
}","/** 
 * Explicitly creates a child within an existing trace. The result will be have its parent ID set to the input's span ID. If a sampling decision has not yet been made, one will happen here. <p>To implicitly create a new trace, or a span within an existing one, use   {@link #nextSpan()}.
 */
public Span newChild(TraceContext parent){
  if (parent == null)   throw new NullPointerException(""String_Node_Str"");
  return nextSpan(TraceContextOrSamplingFlags.create(parent));
}",0.916289592760181
15262,"@Override public String toString(){
  String[] elements;
synchronized (this) {
    elements=values;
  }
  Map<String,String> contents=new LinkedHashMap<>();
  for (int i=0, length=fieldNames.length; i < length; i++) {
    String maybeValue=elements[i];
    if (maybeValue == null)     continue;
    contents.put(fieldNames[i],maybeValue);
  }
  return ""String_Node_Str"" + contents;
}","@Override public String toString(){
  String[] elements;
synchronized (this) {
    elements=values;
  }
  if (elements == null)   return ""String_Node_Str"";
  Map<String,String> contents=new LinkedHashMap<>();
  for (int i=0, length=fieldNames.length; i < length; i++) {
    String maybeValue=elements[i];
    if (maybeValue == null)     continue;
    contents.put(fieldNames[i],maybeValue);
  }
  return ""String_Node_Str"" + contents;
}",0.9364303178484108
15263,"@Override public void init(ServletContextHandler handler){
  super.init(handler);
  handler.addServlet(new ServletHolder(new AsyncServlet()),""String_Node_Str"");
  handler.addServlet(new ServletHolder(new ExceptionAsyncServlet()),""String_Node_Str"");
}","@Override public void init(ServletContextHandler handler){
  super.init(handler);
  handler.addServlet(new ServletHolder(new AsyncServlet()),""String_Node_Str"");
  handler.addServlet(new ServletHolder(new ForwardServlet()),""String_Node_Str"");
  handler.addServlet(new ServletHolder(new AsyncForwardServlet()),""String_Node_Str"");
  handler.addServlet(new ServletHolder(new ExceptionAsyncServlet()),""String_Node_Str"");
}",0.7496251874062968
15264,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  AsyncContext ctx=req.startAsync();
  ctx.setTimeout(1);
  ctx.start(() -> {
    try {
      Thread.sleep(10L);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
 finally {
      ctx.complete();
    }
  }
);
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp){
  AsyncContext ctx=req.startAsync();
  ctx.setTimeout(1);
  ctx.start(() -> {
    try {
      Thread.sleep(10L);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
 finally {
      ctx.complete();
    }
  }
);
}",0.9708454810495628
15265,"@Override public void onError(AsyncEvent e) throws IOException {
  handler.handleSend(null,e.getThrowable(),span);
}","@Override public void onError(AsyncEvent e){
  if (complete)   return;
  handler.handleSend(null,e.getThrowable(),span);
  complete=true;
}",0.792156862745098
15266,"@Override public void onComplete(AsyncEvent e) throws IOException {
  handler.handleSend((HttpServletResponse)e.getSuppliedResponse(),null,span);
}","@Override public void onComplete(AsyncEvent e){
  if (complete)   return;
  handler.handleSend((HttpServletResponse)e.getSuppliedResponse(),null,span);
  complete=true;
}",0.832807570977918
15267,"@Override public void onStartAsync(AsyncEvent e) throws IOException {
}","/** 
 * If another async is created (ex via asyncContext.dispatch), this needs to be re-attached 
 */
@Override public void onStartAsync(AsyncEvent event){
  AsyncContext eventAsyncContext=event.getAsyncContext();
  if (eventAsyncContext != null)   eventAsyncContext.addListener(this);
}",0.2793296089385474
15268,"@Override public void onTimeout(AsyncEvent e) throws IOException {
  span.tag(""String_Node_Str"",String.format(""String_Node_Str"",e.getAsyncContext().getTimeout()));
  handler.handleSend((HttpServletResponse)e.getSuppliedResponse(),null,span);
}","@Override public void onTimeout(AsyncEvent e){
  if (complete)   return;
  span.tag(""String_Node_Str"",String.format(""String_Node_Str"",e.getAsyncContext().getTimeout()));
  handler.handleSend((HttpServletResponse)e.getSuppliedResponse(),null,span);
  complete=true;
}",0.4518664047151277
15269,"@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=servlet.httpResponse(response);
  Span span=handler.handleReceive(extractor,httpRequest);
  Throwable error=null;
  try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
    chain.doFilter(httpRequest,httpResponse);
  }
 catch (  IOException|ServletException|RuntimeException|Error e) {
    error=e;
    throw e;
  }
 finally {
    if (servlet.isAsync(httpRequest)) {
      servlet.handleAsync(handler,httpRequest,span);
    }
 else {
      handler.handleSend(httpResponse,error,span);
    }
  }
}","@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=servlet.httpResponse(response);
  if (request.getAttribute(""String_Node_Str"") != null) {
    chain.doFilter(request,response);
    return;
  }
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  Span span=handler.handleReceive(extractor,httpRequest);
  Throwable error=null;
  try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
    chain.doFilter(httpRequest,httpResponse);
  }
 catch (  IOException|ServletException|RuntimeException|Error e) {
    error=e;
    throw e;
  }
 finally {
    if (servlet.isAsync(httpRequest)) {
      servlet.handleAsync(handler,httpRequest,span);
    }
 else {
      handler.handleSend(httpResponse,error,span);
    }
  }
}",0.8952496954933008
15270,"/** 
 * This sets as span in scope both for the interception and for the start of the request. It does not set a span in scope during the response listener as it is unexpected it would be used at that fine granularity. If users want access to the span in a response listener, they will need to wrap the executor with one that's aware of the current context.
 */
@Override public <ReqT,RespT>ClientCall<ReqT,RespT> interceptCall(final MethodDescriptor<ReqT,RespT> method,final CallOptions callOptions,final Channel next){
  Span span=tracer.nextSpan();
  try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
    return new SimpleForwardingClientCall<ReqT,RespT>(next.newCall(method,callOptions)){
      @Override public void start(      Listener<RespT> responseListener,      Metadata headers){
        injector.inject(span.context(),headers);
        span.kind(Span.Kind.CLIENT).start();
        parser.onStart(method,callOptions,headers,span);
        try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
          super.start(new SimpleForwardingClientCallListener<RespT>(responseListener){
            @Override public void onMessage(            RespT message){
              try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
                parser.onMessageReceived(message,span);
                delegate().onMessage(message);
              }
             }
            @Override public void onClose(            Status status,            Metadata trailers){
              try {
                super.onClose(status,trailers);
                parser.onClose(status,trailers,span);
              }
  finally {
                span.finish();
              }
            }
          }
,headers);
        }
       }
      @Override public void sendMessage(      ReqT message){
        super.sendMessage(message);
        parser.onMessageSent(message,span);
      }
    }
;
  }
 catch (  RuntimeException|Error e) {
    parser.onError(e,span);
    span.finish();
    throw e;
  }
}","/** 
 * This sets as span in scope both for the interception and for the start of the request. It does not set a span in scope during the response listener as it is unexpected it would be used at that fine granularity. If users want access to the span in a response listener, they will need to wrap the executor with one that's aware of the current context.
 */
@Override public <ReqT,RespT>ClientCall<ReqT,RespT> interceptCall(final MethodDescriptor<ReqT,RespT> method,final CallOptions callOptions,final Channel next){
  Span span=tracer.nextSpan();
  try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
    return new SimpleForwardingClientCall<ReqT,RespT>(next.newCall(method,callOptions)){
      @Override public void start(      Listener<RespT> responseListener,      Metadata headers){
        injector.inject(span.context(),headers);
        span.kind(Span.Kind.CLIENT).start();
        try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
          parser.onStart(method,callOptions,headers,span);
          super.start(new SimpleForwardingClientCallListener<RespT>(responseListener){
            @Override public void onMessage(            RespT message){
              try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
                parser.onMessageReceived(message,span);
                delegate().onMessage(message);
              }
             }
            @Override public void onClose(            Status status,            Metadata trailers){
              try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
                super.onClose(status,trailers);
                parser.onClose(status,trailers,span);
              }
  finally {
                span.finish();
              }
            }
          }
,headers);
        }
       }
      @Override public void sendMessage(      ReqT message){
        try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
          super.sendMessage(message);
          parser.onMessageSent(message,span);
        }
       }
    }
;
  }
 catch (  RuntimeException|Error e) {
    parser.onError(e,span);
    span.finish();
    throw e;
  }
}",0.935366739288308
15271,"@Override public void onClose(Status status,Metadata trailers){
  try {
    super.onClose(status,trailers);
    parser.onClose(status,trailers,span);
  }
  finally {
    span.finish();
  }
}","@Override public void onClose(Status status,Metadata trailers){
  try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
    super.onClose(status,trailers);
    parser.onClose(status,trailers,span);
  }
  finally {
    span.finish();
  }
}",0.8796296296296297
15272,"@Override public void start(Listener<RespT> responseListener,Metadata headers){
  injector.inject(span.context(),headers);
  span.kind(Span.Kind.CLIENT).start();
  parser.onStart(method,callOptions,headers,span);
  try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
    super.start(new SimpleForwardingClientCallListener<RespT>(responseListener){
      @Override public void onMessage(      RespT message){
        try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
          parser.onMessageReceived(message,span);
          delegate().onMessage(message);
        }
       }
      @Override public void onClose(      Status status,      Metadata trailers){
        try {
          super.onClose(status,trailers);
          parser.onClose(status,trailers,span);
        }
  finally {
          span.finish();
        }
      }
    }
,headers);
  }
 }","@Override public void start(Listener<RespT> responseListener,Metadata headers){
  injector.inject(span.context(),headers);
  span.kind(Span.Kind.CLIENT).start();
  try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
    parser.onStart(method,callOptions,headers,span);
    super.start(new SimpleForwardingClientCallListener<RespT>(responseListener){
      @Override public void onMessage(      RespT message){
        try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
          parser.onMessageReceived(message,span);
          delegate().onMessage(message);
        }
       }
      @Override public void onClose(      Status status,      Metadata trailers){
        try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
          super.onClose(status,trailers);
          parser.onClose(status,trailers,span);
        }
  finally {
          span.finish();
        }
      }
    }
,headers);
  }
 }",0.9023569023569024
15273,"@Override public void sendMessage(ReqT message){
  super.sendMessage(message);
  parser.onMessageSent(message,span);
}","@Override public void sendMessage(ReqT message){
  try (Tracer.SpanInScope ws=tracer.withSpanInScope(span)){
    super.sendMessage(message);
    parser.onMessageSent(message,span);
  }
 }",0.7737704918032787
15274,"@Override protected <M>void onMessageSent(M message,SpanCustomizer span){
  span.tag(""String_Node_Str"",message.toString());
}","@Override protected <M>void onMessageSent(M message,SpanCustomizer span){
  span.tag(""String_Node_Str"",message.toString());
  if (tracing.tracing().currentTraceContext().get() != null) {
    span.tag(""String_Node_Str"",""String_Node_Str"");
  }
}",0.6793478260869565
15275,"@Test public void clientParserTest() throws Exception {
  closeClient(client);
  tracing=tracing.toBuilder().clientParser(new GrpcClientParser(){
    @Override protected <M>void onMessageSent(    M message,    SpanCustomizer span){
      span.tag(""String_Node_Str"",message.toString());
    }
    @Override protected <M>void onMessageReceived(    M message,    SpanCustomizer span){
      span.tag(""String_Node_Str"",message.toString());
    }
    @Override protected <ReqT,RespT>String spanName(    MethodDescriptor<ReqT,RespT> methodDescriptor){
      return methodDescriptor.getType().name();
    }
  }
).build();
  client=newClient();
  GreeterGrpc.newBlockingStub(client).sayHello(HELLO_REQUEST);
  assertThat(spans.getFirst().name()).isEqualTo(""String_Node_Str"");
  assertThat(spans).flatExtracting(s -> s.tags().keySet()).containsExactlyInAnyOrder(""String_Node_Str"",""String_Node_Str"");
}","@Test public void clientParserTest() throws Exception {
  closeClient(client);
  tracing=tracing.toBuilder().clientParser(new GrpcClientParser(){
    @Override protected <M>void onMessageSent(    M message,    SpanCustomizer span){
      span.tag(""String_Node_Str"",message.toString());
      if (tracing.tracing().currentTraceContext().get() != null) {
        span.tag(""String_Node_Str"",""String_Node_Str"");
      }
    }
    @Override protected <M>void onMessageReceived(    M message,    SpanCustomizer span){
      span.tag(""String_Node_Str"",message.toString());
      if (tracing.tracing().currentTraceContext().get() != null) {
        span.tag(""String_Node_Str"",""String_Node_Str"");
      }
    }
    @Override protected <ReqT,RespT>String spanName(    MethodDescriptor<ReqT,RespT> methodDescriptor){
      return methodDescriptor.getType().name();
    }
  }
).build();
  client=newClient();
  GreeterGrpc.newBlockingStub(client).sayHello(HELLO_REQUEST);
  assertThat(spans.getFirst().name()).isEqualTo(""String_Node_Str"");
  assertThat(spans).flatExtracting(s -> s.tags().keySet()).containsExactlyInAnyOrder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.8576923076923076
15276,"@Test public void serverParserTest() throws Exception {
  grpcTracing=grpcTracing.toBuilder().serverParser(new GrpcServerParser(){
    @Override protected <M>void onMessageSent(    M message,    SpanCustomizer span){
      span.tag(""String_Node_Str"",message.toString());
    }
    @Override protected <M>void onMessageReceived(    M message,    SpanCustomizer span){
      span.tag(""String_Node_Str"",message.toString());
    }
    @Override protected <ReqT,RespT>String spanName(    MethodDescriptor<ReqT,RespT> methodDescriptor){
      return methodDescriptor.getType().name();
    }
  }
).build();
  init();
  GreeterGrpc.newBlockingStub(client).sayHello(HELLO_REQUEST);
  assertThat(spans.getFirst().name()).isEqualTo(""String_Node_Str"");
  assertThat(spans).flatExtracting(s -> s.tags().keySet()).containsExactlyInAnyOrder(""String_Node_Str"",""String_Node_Str"");
}","@Test public void serverParserTest() throws Exception {
  grpcTracing=grpcTracing.toBuilder().serverParser(new GrpcServerParser(){
    @Override protected <M>void onMessageSent(    M message,    SpanCustomizer span){
      span.tag(""String_Node_Str"",message.toString());
      if (grpcTracing.tracing().currentTraceContext().get() != null) {
        span.tag(""String_Node_Str"",""String_Node_Str"");
      }
    }
    @Override protected <M>void onMessageReceived(    M message,    SpanCustomizer span){
      span.tag(""String_Node_Str"",message.toString());
      if (grpcTracing.tracing().currentTraceContext().get() != null) {
        span.tag(""String_Node_Str"",""String_Node_Str"");
      }
    }
    @Override protected <ReqT,RespT>String spanName(    MethodDescriptor<ReqT,RespT> methodDescriptor){
      return methodDescriptor.getType().name();
    }
  }
).build();
  init();
  GreeterGrpc.newBlockingStub(client).sayHello(HELLO_REQUEST);
  assertThat(spans.getFirst().name()).isEqualTo(""String_Node_Str"");
  assertThat(spans).flatExtracting(s -> s.tags().keySet()).containsExactlyInAnyOrder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.8505408062930186
15277,"@Override protected <M>void onMessageReceived(M message,SpanCustomizer span){
  span.tag(""String_Node_Str"",message.toString());
}","@Override protected <M>void onMessageReceived(M message,SpanCustomizer span){
  span.tag(""String_Node_Str"",message.toString());
  if (grpcTracing.tracing().currentTraceContext().get() != null) {
    span.tag(""String_Node_Str"",""String_Node_Str"");
  }
}",0.6789473684210526
15278,"@Test public void supportsPortableCustomization() throws Exception {
  String uri=""String_Node_Str"";
  close();
  httpTracing=httpTracing.toBuilder().clientParser(new HttpClientParser(){
    @Override public <Req>void request(    HttpAdapter<Req,?> adapter,    Req req,    SpanCustomizer customizer){
      customizer.name(adapter.method(req).toLowerCase() + ""String_Node_Str"" + adapter.path(req));
      customizer.tag(""String_Node_Str"",adapter.url(req));
    }
  }
).build().clientOf(""String_Node_Str"");
  client=newClient(server.getPort());
  server.enqueue(new MockResponse());
  get(client,uri);
  assertThat(spans).extracting(Span::name).containsExactly(""String_Node_Str"");
  assertThat(spans).extracting(Span::remoteServiceName).containsExactly(""String_Node_Str"");
  assertReportedTagsInclude(""String_Node_Str"",url(uri));
}","@Test public void supportsPortableCustomization() throws Exception {
  String uri=""String_Node_Str"";
  close();
  httpTracing=httpTracing.toBuilder().clientParser(new HttpClientParser(){
    @Override public <Req>void request(    HttpAdapter<Req,?> adapter,    Req req,    SpanCustomizer customizer){
      customizer.name(adapter.method(req).toLowerCase() + ""String_Node_Str"" + adapter.path(req));
      customizer.tag(""String_Node_Str"",adapter.url(req));
      customizer.tag(""String_Node_Str"",String.valueOf(currentTraceContext.get() != null));
    }
  }
).build().clientOf(""String_Node_Str"");
  client=newClient(server.getPort());
  server.enqueue(new MockResponse());
  get(client,uri);
  assertThat(spans).extracting(Span::name).containsExactly(""String_Node_Str"");
  assertThat(spans).extracting(Span::remoteServiceName).containsExactly(""String_Node_Str"");
  assertReportedTagsInclude(""String_Node_Str"",url(uri));
  assertReportedTagsInclude(""String_Node_Str"",""String_Node_Str"");
}",0.8893780957622455
15279,"@Override public <Req>void request(HttpAdapter<Req,?> adapter,Req req,SpanCustomizer customizer){
  customizer.name(adapter.method(req).toLowerCase() + ""String_Node_Str"" + adapter.path(req));
  customizer.tag(""String_Node_Str"",adapter.url(req));
}","@Override public <Req>void request(HttpAdapter<Req,?> adapter,Req req,SpanCustomizer customizer){
  customizer.name(adapter.method(req).toLowerCase() + ""String_Node_Str"" + adapter.path(req));
  customizer.tag(""String_Node_Str"",adapter.url(req));
  customizer.tag(""String_Node_Str"",String.valueOf(currentTraceContext.get() != null));
}",0.8502581755593803
15280,"@Test public void supportsPortableCustomization() throws Exception {
  httpTracing=httpTracing.toBuilder().serverParser(new HttpServerParser(){
    @Override public <Req>void request(    HttpAdapter<Req,?> adapter,    Req req,    SpanCustomizer customizer){
      customizer.name(adapter.method(req).toLowerCase() + ""String_Node_Str"" + adapter.path(req));
      customizer.tag(""String_Node_Str"",adapter.url(req));
    }
  }
).build();
  init();
  String uri=""String_Node_Str"";
  get(uri);
  assertThat(spans).extracting(Span::name).containsExactly(""String_Node_Str"");
  assertReportedTagsInclude(""String_Node_Str"",url(uri));
}","@Test public void supportsPortableCustomization() throws Exception {
  httpTracing=httpTracing.toBuilder().serverParser(new HttpServerParser(){
    @Override public <Req>void request(    HttpAdapter<Req,?> adapter,    Req req,    SpanCustomizer customizer){
      customizer.name(adapter.method(req).toLowerCase() + ""String_Node_Str"" + adapter.path(req));
      customizer.tag(""String_Node_Str"",adapter.url(req));
      customizer.tag(""String_Node_Str"",String.valueOf(currentTraceContext.get() != null));
    }
  }
).build();
  init();
  String uri=""String_Node_Str"";
  get(uri);
  assertThat(spans).extracting(Span::name).containsExactly(""String_Node_Str"");
  assertReportedTagsInclude(""String_Node_Str"",url(uri));
  assertReportedTagsInclude(""String_Node_Str"",""String_Node_Str"");
}",0.8885734563520227
15281,"@Override public <Req>void request(HttpAdapter<Req,?> adapter,Req req,SpanCustomizer customizer){
  customizer.name(adapter.method(req).toLowerCase() + ""String_Node_Str"" + adapter.path(req));
  customizer.tag(""String_Node_Str"",adapter.url(req));
}","@Override public <Req>void request(HttpAdapter<Req,?> adapter,Req req,SpanCustomizer customizer){
  customizer.name(adapter.method(req).toLowerCase() + ""String_Node_Str"" + adapter.path(req));
  customizer.tag(""String_Node_Str"",adapter.url(req));
  customizer.tag(""String_Node_Str"",String.valueOf(currentTraceContext.get() != null));
}",0.8502581755593803
15282,"/** 
 * Finishes the client span after assigning it tags according to the response or error. <p>This is typically called once the response headers are received, and after the span is  {@link brave.Tracer.SpanInScope#close() no longer in scope}.
 * @see HttpClientParser#response(HttpAdapter,Object,Throwable,SpanCustomizer)
 */
public void handleReceive(@Nullable Resp response,@Nullable Throwable error,Span span){
  if (span.isNoop())   return;
  try {
    parser.response(adapter,response,error,span);
  }
  finally {
    span.finish();
  }
}","/** 
 * Finishes the client span after assigning it tags according to the response or error. <p>This is typically called once the response headers are received, and after the span is  {@link brave.Tracer.SpanInScope#close() no longer in scope}.
 * @see HttpClientParser#response(HttpAdapter,Object,Throwable,SpanCustomizer)
 */
public void handleReceive(@Nullable Resp response,@Nullable Throwable error,Span span){
  if (span.isNoop())   return;
  Tracer.SpanInScope ws=tracer.withSpanInScope(span);
  try {
    parser.response(adapter,response,error,span);
  }
  finally {
    ws.close();
    span.finish();
  }
}",0.9396551724137931
15283,"/** 
 * Like   {@link #handleSend(TraceContext.Injector,Object,Object)}, except explicitly controls the span representing the request.
 * @since 4.4
 */
public <C>Span handleSend(TraceContext.Injector<C> injector,C carrier,Req request,Span span){
  injector.inject(span.context(),carrier);
  if (span.isNoop())   return span;
  span.kind(Span.Kind.CLIENT);
  parser.request(adapter,request,span);
  boolean parsedEndpoint=false;
  if (Platform.get().zipkinV1Present()) {
    zipkin.Endpoint.Builder deprecatedEndpoint=zipkin.Endpoint.builder().serviceName(serverNameSet ? serverName : ""String_Node_Str"");
    if ((parsedEndpoint=adapter.parseServerAddress(request,deprecatedEndpoint))) {
      span.remoteEndpoint(deprecatedEndpoint.serviceName(serverName).build());
    }
  }
  if (!parsedEndpoint) {
    Endpoint.Builder remoteEndpoint=Endpoint.newBuilder().serviceName(serverName);
    if (adapter.parseServerAddress(request,remoteEndpoint) || serverNameSet) {
      span.remoteEndpoint(remoteEndpoint.build());
    }
  }
  return span.start();
}","/** 
 * Like   {@link #handleSend(TraceContext.Injector,Object,Object)}, except explicitly controls the span representing the request.
 * @since 4.4
 */
public <C>Span handleSend(TraceContext.Injector<C> injector,C carrier,Req request,Span span){
  injector.inject(span.context(),carrier);
  if (span.isNoop())   return span;
  span.kind(Span.Kind.CLIENT);
  Tracer.SpanInScope ws=tracer.withSpanInScope(span);
  try {
    parser.request(adapter,request,span);
  }
  finally {
    ws.close();
  }
  boolean parsedEndpoint=false;
  if (Platform.get().zipkinV1Present()) {
    zipkin.Endpoint.Builder deprecatedEndpoint=zipkin.Endpoint.builder().serviceName(serverNameSet ? serverName : ""String_Node_Str"");
    if ((parsedEndpoint=adapter.parseServerAddress(request,deprecatedEndpoint))) {
      span.remoteEndpoint(deprecatedEndpoint.serviceName(serverName).build());
    }
  }
  if (!parsedEndpoint) {
    Endpoint.Builder remoteEndpoint=Endpoint.newBuilder().serviceName(serverName);
    if (adapter.parseServerAddress(request,remoteEndpoint) || serverNameSet) {
      span.remoteEndpoint(remoteEndpoint.build());
    }
  }
  return span.start();
}",0.9545040946314832
15284,"/** 
 * Like   {@link #handleReceive(TraceContext.Extractor,Object)}, except for when the carrier of trace data is not the same as the request.
 * @see HttpServerParser#request(HttpAdapter,Object,SpanCustomizer)
 */
public <C>Span handleReceive(TraceContext.Extractor<C> extractor,C carrier,Req request){
  Span span=nextSpan(extractor.extract(carrier),request);
  if (span.isNoop())   return span;
  span.kind(Span.Kind.SERVER);
  parser.request(adapter,request,span);
  boolean parsedEndpoint=false;
  if (Platform.get().zipkinV1Present()) {
    zipkin.Endpoint.Builder deprecatedEndpoint=zipkin.Endpoint.builder().serviceName(""String_Node_Str"");
    if ((parsedEndpoint=adapter.parseClientAddress(request,deprecatedEndpoint))) {
      span.remoteEndpoint(deprecatedEndpoint.build());
    }
  }
  if (!parsedEndpoint) {
    Endpoint.Builder remoteEndpoint=Endpoint.newBuilder();
    if (adapter.parseClientAddress(request,remoteEndpoint)) {
      span.remoteEndpoint(remoteEndpoint.build());
    }
  }
  return span.start();
}","/** 
 * Like   {@link #handleReceive(TraceContext.Extractor,Object)}, except for when the carrier of trace data is not the same as the request.
 * @see HttpServerParser#request(HttpAdapter,Object,SpanCustomizer)
 */
public <C>Span handleReceive(TraceContext.Extractor<C> extractor,C carrier,Req request){
  Span span=nextSpan(extractor.extract(carrier),request);
  if (span.isNoop())   return span;
  span.kind(Span.Kind.SERVER);
  Tracer.SpanInScope ws=tracer.withSpanInScope(span);
  try {
    parser.request(adapter,request,span);
  }
  finally {
    ws.close();
  }
  boolean parsedEndpoint=false;
  if (Platform.get().zipkinV1Present()) {
    zipkin.Endpoint.Builder deprecatedEndpoint=zipkin.Endpoint.builder().serviceName(""String_Node_Str"");
    if ((parsedEndpoint=adapter.parseClientAddress(request,deprecatedEndpoint))) {
      span.remoteEndpoint(deprecatedEndpoint.build());
    }
  }
  if (!parsedEndpoint) {
    Endpoint.Builder remoteEndpoint=Endpoint.newBuilder();
    if (adapter.parseClientAddress(request,remoteEndpoint)) {
      span.remoteEndpoint(remoteEndpoint.build());
    }
  }
  return span.start();
}",0.953617810760668
15285,"/** 
 * Finishes the server span after assigning it tags according to the response or error. <p>This is typically called once the response headers are sent, and after the span is   {@link brave.Tracer.SpanInScope#close() no longer in scope}.
 * @see HttpServerParser#response(HttpAdapter,Object,Throwable,SpanCustomizer)
 */
public void handleSend(@Nullable Resp response,@Nullable Throwable error,Span span){
  if (span.isNoop())   return;
  try {
    parser.response(adapter,response,error,span);
  }
  finally {
    span.finish();
  }
}","/** 
 * Finishes the server span after assigning it tags according to the response or error. <p>This is typically called once the response headers are sent, and after the span is   {@link brave.Tracer.SpanInScope#close() no longer in scope}.
 * @see HttpServerParser#response(HttpAdapter,Object,Throwable,SpanCustomizer)
 */
public void handleSend(@Nullable Resp response,@Nullable Throwable error,Span span){
  if (span.isNoop())   return;
  Tracer.SpanInScope ws=tracer.withSpanInScope(span);
  try {
    parser.response(adapter,response,error,span);
  }
  finally {
    ws.close();
    span.finish();
  }
}",0.9390243902439024
15286,"TraceContext nextContext(@Nullable TraceContext parent,SamplingFlags samplingFlags){
  long nextId=Platform.get().randomLong();
  if (parent != null) {
    return parent.toBuilder().spanId(nextId).parentId(parent.spanId()).build();
  }
  return TraceContext.newBuilder().sampled(samplingFlags.sampled()).debug(samplingFlags.debug()).traceIdHigh(traceId128Bit ? Platform.get().randomLong() : 0L).traceId(nextId).spanId(nextId).build();
}","TraceContext nextContext(@Nullable TraceContext parent,SamplingFlags samplingFlags){
  long nextId=Platform.get().randomLong();
  if (parent != null) {
    return parent.toBuilder().spanId(nextId).parentId(parent.spanId()).shared(false).build();
  }
  return TraceContext.newBuilder().sampled(samplingFlags.sampled()).debug(samplingFlags.debug()).traceIdHigh(traceId128Bit ? Platform.get().randomLong() : 0L).traceId(nextId).spanId(nextId).build();
}",0.984198645598194
15287,"/** 
 * Sets current client span. <p/> Should be thread-aware to support multiple parallel requests.
 * @param span Client span.
 */
void setCurrentClientSpan(final Span span);","/** 
 * Sets current client span. <p/> Should be thread-aware to support multiple parallel requests.
 * @param span Client span.
 */
void setCurrentClientSpan(@Nullable Span span);",0.9719101123595506
15288,"/** 
 * Gets the Span for the client request that was started as part of current request. <p/> Should be thread-aware to support multiple parallel requests.
 * @return Client request span for current thread.
 */
Span getCurrentClientSpan();","/** 
 * Gets the Span for the client request that was started as part of current request. <p/> Should be thread-aware to support multiple parallel requests.
 * @return Client request span for current thread.
 */
@Nullable Span getCurrentClientSpan();",0.979591836734694
15289,"@Override public void setCurrentClientSpan(final Span span){
  currentClientSpan.set(span);
}","@Override public void setCurrentClientSpan(@Nullable Span span){
  currentClientSpan.set(span);
}",0.9473684210526316
15290,"@Override public void setCurrentServerSpan(final ServerSpan span){
  if (span == null) {
    currentServerSpan.remove();
  }
 else {
    currentServerSpan.set(span);
  }
}","@Override public void setCurrentServerSpan(@Nullable ServerSpan span){
  if (span == null) {
    currentServerSpan.remove();
  }
 else {
    currentServerSpan.set(span);
  }
}",0.9710982658959536
15291,"/** 
 * Never returns null:   {@code setCurrentServerSpan(null)} coerces to {@link ServerSpan#EMPTY} 
 */
@Override public ServerSpan getCurrentServerSpan(){
  return currentServerSpan.get();
}","/** 
 * Never returns null:   {@code setCurrentServerSpan(null)} coerces to {@link ServerSpan#EMPTY} 
 */
@Override @Nonnull public ServerSpan getCurrentServerSpan(){
  return currentServerSpan.get();
}",0.9772151898734176
15292,"/** 
 * Sets the specified local span as the active span at the top of the stack, or if the specified span is null, the top of the stack is popped.
 * @param span Local span.
 */
@Override public void setCurrentLocalSpan(Span span){
  Deque<Span> deque=currentLocalSpan.get();
  if (span == null) {
    deque.pollFirst();
  }
 else {
    deque.addFirst(span);
  }
}","/** 
 * Sets the specified local span as the active span at the top of the stack, or if the specified span is null, the top of the stack is popped.
 * @param span Local span.
 */
@Override public void setCurrentLocalSpan(@Nullable Span span){
  Deque<Span> deque=currentLocalSpan.get();
  if (span == null) {
    deque.pollFirst();
  }
 else {
    deque.addFirst(span);
  }
}",0.9864864864864864
15293,"@Override public Span getCurrentClientSpan(){
  return currentClientSpan.get();
}","@Override @Nullable public Span getCurrentClientSpan(){
  return currentClientSpan.get();
}",0.9418604651162792
15294,"/** 
 * Sets current local span. <p/> Should be thread-aware to support multiple parallel requests.
 * @param span Local span.
 */
void setCurrentLocalSpan(Span span);","/** 
 * Sets current local span. <p/> Should be thread-aware to support multiple parallel requests.
 * @param span Local span.
 */
void setCurrentLocalSpan(@Nullable Span span);",0.9709302325581396
15295,"/** 
 * Set span for current request.
 * @param span Span for current request.
 */
void setCurrentServerSpan(final ServerSpan span);","/** 
 * Set span for current request.
 * @param span Span for current request.
 */
void setCurrentServerSpan(@Nullable ServerSpan span);",0.9626865671641792
15296,"/** 
 * {@inheritDoc}
 */
@Override public void setCurrentClientSpan(final Span span){
  currentClientSpan.set(span);
}","/** 
 * {@inheritDoc}
 */
@Override public void setCurrentClientSpan(@Nullable Span span){
  currentClientSpan.set(span);
}",0.9586776859504132
15297,"@Override public Span getCurrentLocalSpan(){
  return currentLocalSpan.get();
}","@Override @Nullable public Span getCurrentLocalSpan(){
  return currentLocalSpan.get();
}",0.9404761904761904
15298,"/** 
 * {@inheritDoc}
 */
@Override public void setCurrentServerSpan(final ServerSpan span){
  if (span == null) {
    currentServerSpan.remove();
  }
 else {
    currentServerSpan.set(span);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void setCurrentServerSpan(@Nullable ServerSpan span){
  if (span == null) {
    currentServerSpan.remove();
  }
 else {
    currentServerSpan.set(span);
  }
}",0.964824120603015
15299,"/** 
 * Never returns null:   {@code setCurrentServerSpan(null)} coerces to {@link ServerSpan#EMPTY} 
 */
@Override public ServerSpan getCurrentServerSpan(){
  return currentServerSpan.get();
}","/** 
 * Never returns null:   {@code setCurrentServerSpan(null)} coerces to {@link ServerSpan#EMPTY} 
 */
@Override @Nonnull public ServerSpan getCurrentServerSpan(){
  return currentServerSpan.get();
}",0.9772151898734176
15300,"@Override public Boolean sample(){
  return currentServerSpan.get().getSample();
}","@Override @Nullable public Boolean sample(){
  return currentServerSpan.get().getSample();
}",0.942528735632184
15301,"@Override public void setCurrentLocalSpan(Span span){
  if (span == null) {
    currentLocalSpan.remove();
  }
 else {
    currentLocalSpan.set(span);
  }
}","@Override public void setCurrentLocalSpan(@Nullable Span span){
  if (span == null) {
    currentLocalSpan.remove();
  }
 else {
    currentLocalSpan.set(span);
  }
}",0.968944099378882
15302,"/** 
 * {@inheritDoc}
 */
@Override public Span getCurrentClientSpan(){
  return currentClientSpan.get();
}","/** 
 * {@inheritDoc}
 */
@Override @Nullable public Span getCurrentClientSpan(){
  return currentClientSpan.get();
}",0.9553571428571428
15303,"@Override public TraceContextOrSamplingFlags extract(C carrier){
  if (carrier == null)   throw new NullPointerException(""String_Node_Str"");
  String sampledString=getter.get(carrier,propagation.sampledKey);
  Boolean sampled=sampledString != null ? sampledString.equals(""String_Node_Str"") || sampledString.equalsIgnoreCase(""String_Node_Str"") : null;
  boolean debug=""String_Node_Str"".equals(getter.get(carrier,propagation.debugKey));
  String traceIdString=getter.get(carrier,propagation.traceIdKey);
  TraceContext.Builder result=TraceContext.newBuilder().sampled(sampled).debug(debug);
  if (traceIdString != null) {
    result.traceIdHigh(traceIdString.length() == 32 ? lowerHexToUnsignedLong(traceIdString,0) : 0);
    result.traceId(lowerHexToUnsignedLong(traceIdString));
  }
  String spanIdString=getter.get(carrier,propagation.spanIdKey);
  if (spanIdString != null) {
    result.spanId(lowerHexToUnsignedLong(spanIdString));
  }
  String parentSpanIdString=getter.get(carrier,propagation.parentSpanIdKey);
  if (parentSpanIdString != null) {
    result.parentId(lowerHexToUnsignedLong(parentSpanIdString));
  }
  return TraceContextOrSamplingFlags.create(result);
}","@Override public TraceContextOrSamplingFlags extract(C carrier){
  if (carrier == null)   throw new NullPointerException(""String_Node_Str"");
  String sampledString=getter.get(carrier,propagation.sampledKey);
  Boolean sampled=sampledString != null ? sampledString.equals(""String_Node_Str"") || sampledString.equalsIgnoreCase(""String_Node_Str"") : null;
  boolean debug=""String_Node_Str"".equals(getter.get(carrier,propagation.debugKey));
  String traceIdString=getter.get(carrier,propagation.traceIdKey);
  if (traceIdString == null) {
    return TraceContextOrSamplingFlags.create(new SamplingFlags.Builder().sampled(sampled).debug(debug).build());
  }
  TraceContext.Builder result=TraceContext.newBuilder().sampled(sampled).debug(debug);
  result.traceIdHigh(traceIdString.length() == 32 ? lowerHexToUnsignedLong(traceIdString,0) : 0);
  result.traceId(lowerHexToUnsignedLong(traceIdString));
  String spanIdString=getter.get(carrier,propagation.spanIdKey);
  if (spanIdString != null) {
    result.spanId(lowerHexToUnsignedLong(spanIdString));
  }
  String parentSpanIdString=getter.get(carrier,propagation.parentSpanIdKey);
  if (parentSpanIdString != null) {
    result.parentId(lowerHexToUnsignedLong(parentSpanIdString));
  }
  return TraceContextOrSamplingFlags.create(result);
}",0.9235772357723576
15304,"/** 
 * Identifies problems by throwing assertion errors when a scope is closed on a different thread. 
 */
@Override public Scope newScope(TraceContext currentSpan){
  local.set(currentSpan);
  return new StrictScope(new Throwable(String.format(""String_Node_Str"",Thread.currentThread().getName(),currentSpan)));
}","/** 
 * Identifies problems by throwing assertion errors when a scope is closed on a different thread. 
 */
@Override public Scope newScope(TraceContext currentSpan){
  TraceContext previous=local.get();
  local.set(currentSpan);
  return new StrictScope(previous,new Error(String.format(""String_Node_Str"",Thread.currentThread().getName(),currentSpan)));
}",0.7671641791044777
15305,"StrictScope(Throwable caller){
  this.caller=caller;
}","StrictScope(TraceContext previous,Throwable caller){
  this.previous=previous;
  this.caller=caller;
}",0.6923076923076923
15306,"/** 
 * Returns true if this is the root span. 
 */
public final boolean root(){
  return (flags & FLAG_IS_ROOT) == FLAG_IS_ROOT || parentId == traceId && parentId == spanId;
}","/** 
 * Returns true if this is the root span. 
 */
public final boolean root(){
  return (flags & FLAG_IS_ROOT) == FLAG_IS_ROOT || (parentId == traceId && parentId == spanId);
}",0.9943502824858758
15307,"@Nullable public final void accept(T input){
  ServerSpan serverSpan=threadBinder.getCurrentServerSpan();
  Span span=serverSpan != null ? serverSpan.getSpan() : null;
  if (span == null)   return;
  byte[] addressBytes;
  try {
    addressBytes=parseAddressBytes(input);
    if (addressBytes == null)     return;
  }
 catch (  RuntimeException e) {
    return;
  }
  Endpoint.Builder builder=Endpoint.builder().serviceName(""String_Node_Str"");
  if (addressBytes.length == 4) {
    builder.ipv4(ByteBuffer.wrap(addressBytes).getInt());
  }
 else   if (addressBytes.length == 16) {
    boolean maybeIpv4Compat=true;
    for (int i=0; i < 10; i++) {
      if (addressBytes[i] != 0) {
        maybeIpv4Compat=false;
        break;
      }
    }
    if (maybeIpv4Compat) {
      ByteBuffer buffer=ByteBuffer.wrap(addressBytes,10,6);
      short flag=buffer.getShort();
      if (flag == 0 || flag == -1) {
        builder.ipv4(buffer.getInt());
      }
 else {
        builder.ipv6(addressBytes);
      }
    }
 else {
      builder.ipv6(addressBytes);
    }
  }
 else {
    return;
  }
  try {
    int port=parsePort(input);
    if (port > 0)     builder.port(port);
  }
 catch (  RuntimeException ignore) {
  }
  Endpoint ca=builder.build();
synchronized (span) {
    span.addToBinary_annotations(BinaryAnnotation.address(CLIENT_ADDR,ca));
  }
}","public final void accept(T input){
  ServerSpan serverSpan=threadBinder.getCurrentServerSpan();
  Span span=serverSpan != null ? serverSpan.getSpan() : null;
  if (span == null)   return;
  byte[] addressBytes;
  try {
    addressBytes=parseAddressBytes(input);
    if (addressBytes == null)     return;
  }
 catch (  RuntimeException e) {
    return;
  }
  Endpoint.Builder builder=Endpoint.builder().serviceName(""String_Node_Str"");
  if (addressBytes.length == 4) {
    builder.ipv4(ByteBuffer.wrap(addressBytes).getInt());
  }
 else   if (addressBytes.length == 16) {
    boolean maybeIpv4Compat=true;
    for (int i=0; i < 10; i++) {
      if (addressBytes[i] != 0) {
        maybeIpv4Compat=false;
        break;
      }
    }
    if (maybeIpv4Compat) {
      ByteBuffer buffer=ByteBuffer.wrap(addressBytes,10,6);
      short flag=buffer.getShort();
      if (flag == 0 || flag == -1) {
        builder.ipv4(buffer.getInt());
      }
 else {
        builder.ipv6(addressBytes);
      }
    }
 else {
      builder.ipv6(addressBytes);
    }
  }
 else {
    return;
  }
  try {
    int port=parsePort(input);
    if (port > 0)     builder.port(port);
  }
 catch (  RuntimeException ignore) {
  }
  Endpoint ca=builder.build();
synchronized (span) {
    span.addToBinary_annotations(BinaryAnnotation.address(CLIENT_ADDR,ca));
  }
}",0.9962630792227204
15308,"/** 
 * This adds an annotation that corresponds with   {@link Span#getDuration()}, and sends the span for collection.
 * @return true if a span was sent for collection.
 */
boolean submitEndAnnotation(String annotationName,Reporter<zipkin.Span> reporter){
  Span span=spanAndEndpoint().span();
  if (span == null) {
    return false;
  }
  Long startTimestamp;
  Long startTick;
synchronized (span) {
    startTimestamp=span.getTimestamp();
    startTick=span.startTick;
  }
  Long endTimestamp;
  Long duration=null;
  if (startTick != null) {
    long endTick=System.nanoTime();
    duration=Math.max(1L,(endTick - startTick) / 1000L);
    endTimestamp=startTimestamp + duration;
  }
 else {
    endTimestamp=currentTimeMicroseconds(null);
    if (startTimestamp != null) {
      duration=Math.max(1L,endTimestamp - startTimestamp);
    }
  }
  Annotation annotation=Annotation.create(endTimestamp,annotationName,spanAndEndpoint().endpoint());
synchronized (span) {
    span.addToAnnotations(annotation);
    if (startTimestamp != null) {
      span.setDuration(duration);
    }
  }
  reporter.report(span.toZipkin());
  return true;
}","/** 
 * This adds an annotation that corresponds with   {@link Span#getDuration()}, and sends the span for collection.
 * @return true if a span was sent for collection.
 */
boolean submitEndAnnotation(String annotationName,Reporter<zipkin.Span> reporter){
  Span span=spanAndEndpoint().span();
  if (span == null) {
    return false;
  }
  Long startTimestamp;
  Long startTick;
synchronized (span) {
    startTimestamp=span.getTimestamp();
    startTick=span.startTick;
  }
  long endTimestamp=currentTimeMicroseconds(startTimestamp,startTick);
  Annotation annotation=Annotation.create(endTimestamp,annotationName,spanAndEndpoint().endpoint());
synchronized (span) {
    span.addToAnnotations(annotation);
    if (startTimestamp != null) {
      span.setDuration(Math.max(1L,endTimestamp - startTimestamp));
    }
  }
  reporter.report(span.toZipkin());
  return true;
}",0.5350571854798608
15309,"/** 
 * This adds an annotation that corresponds with   {@link Span#getTimestamp()} 
 */
void submitStartAnnotation(String annotationName){
  Span span=spanAndEndpoint().span();
  if (span != null) {
    Annotation annotation=Annotation.create(currentTimeMicroseconds(null),annotationName,spanAndEndpoint().endpoint());
synchronized (span) {
      span.setTimestamp(annotation.timestamp);
      span.addToAnnotations(annotation);
      span.startTick=System.nanoTime();
    }
  }
}","/** 
 * This adds an annotation that corresponds with   {@link Span#getTimestamp()} 
 */
void submitStartAnnotation(String annotationName){
  Span span=spanAndEndpoint().span();
  if (span != null) {
    Annotation annotation=Annotation.create(clock().currentTimeMicroseconds(),annotationName,spanAndEndpoint().endpoint());
synchronized (span) {
      span.setTimestamp(annotation.timestamp);
      span.addToAnnotations(annotation);
      span.startTick=System.nanoTime();
    }
  }
}",0.9875776397515528
15310,"@Test public void testCurrentTimeMicroSeconds_fromRelativeNanoTick(){
  AnnotationSubmitter anotherAnnotationSubmitter=AnnotationSubmitter.create(StaticSpanAndEndpoint.create(null,endpoint));
  PowerMockito.when(System.nanoTime()).thenReturn(1000L);
  assertEquals(1,anotherAnnotationSubmitter.currentTimeMicroseconds(0L));
}","@Test public void testCurrentTimeMicroSeconds_fromRelativeNanoTick(){
  PowerMockito.when(System.nanoTime()).thenReturn(1000L);
  assertThat(annotationSubmitter.currentTimeMicroseconds(CURRENT_TIME_MICROSECONDS,0L)).isEqualTo(CURRENT_TIME_MICROSECONDS + 1L);
}",0.294017094017094
15311,"@Test public void testSubmitBinaryAnnotationStringValue() throws UnsupportedEncodingException {
  annotationSubmitter.submitBinaryAnnotation(KEY,STRING_VALUE);
  final BinaryAnnotation expectedAnnotation=BinaryAnnotation.create(KEY,STRING_VALUE,endpoint);
  verify(mockSpan).addToBinary_annotations(expectedAnnotation);
  verifyNoMoreInteractions(mockSpan);
}","@Test public void testSubmitBinaryAnnotationStringValue() throws UnsupportedEncodingException {
  annotationSubmitter.submitBinaryAnnotation(KEY,STRING_VALUE);
  assertThat(span.getBinary_annotations()).containsExactly(BinaryAnnotation.create(KEY,STRING_VALUE,endpoint));
}",0.6867088607594937
15312,"@Test public void testSubmitAnnotationSpanEndpointString(){
  annotationSubmitter.submitAnnotation(ANNOTATION_NAME);
  Annotation expectedAnnotation=Annotation.create(CURRENT_TIME_MICROSECONDS,ANNOTATION_NAME,endpoint);
  verify(mockSpan).addToAnnotations(expectedAnnotation);
  verifyNoMoreInteractions(mockSpan);
}","@Test public void testSubmitAnnotationSpanEndpointString(){
  annotationSubmitter.submitAnnotation(ANNOTATION_NAME);
  assertThat(span.getAnnotations()).containsExactly(Annotation.create(CURRENT_TIME_MICROSECONDS,ANNOTATION_NAME,endpoint));
}",0.6917562724014337
15313,"@Test public void testCurrentTimeMicroSeconds_fromSystemCurrentMillis(){
  AnnotationSubmitter anotherAnnotationSubmitter=AnnotationSubmitter.create(StaticSpanAndEndpoint.create(null,endpoint));
  assertEquals(CURRENT_TIME_MICROSECONDS,anotherAnnotationSubmitter.currentTimeMicroseconds(null));
}","@Test public void testCurrentTimeMicroSeconds_fromSystemCurrentMillis(){
  assertThat(annotationSubmitter.clock().currentTimeMicroseconds()).isEqualTo(CURRENT_TIME_MICROSECONDS);
}",0.6134453781512605
15314,"@Before public void setup(){
  mockSpan=mock(Span.class);
  PowerMockito.mockStatic(System.class);
  PowerMockito.when(System.currentTimeMillis()).thenReturn(CURRENT_TIME_MICROSECONDS / 1000);
  annotationSubmitter=AnnotationSubmitter.create(StaticSpanAndEndpoint.create(mockSpan,endpoint));
}","@Before public void setup(){
  PowerMockito.mockStatic(System.class);
  PowerMockito.when(System.currentTimeMillis()).thenReturn(CURRENT_TIME_MICROSECONDS / 1000);
}",0.7205240174672489
15315,"@Test public void testSubmitBinaryAnnotationIntValue(){
  annotationSubmitter.submitBinaryAnnotation(KEY,INT_VALUE);
  final BinaryAnnotation expectedAnnotation=BinaryAnnotation.create(KEY,String.valueOf(INT_VALUE),endpoint);
  verify(mockSpan).addToBinary_annotations(expectedAnnotation);
  verifyNoMoreInteractions(mockSpan);
}","@Test public void testSubmitBinaryAnnotationIntValue(){
  annotationSubmitter.submitBinaryAnnotation(KEY,INT_VALUE);
  assertThat(span.getBinary_annotations()).containsExactly(BinaryAnnotation.create(KEY,String.valueOf(INT_VALUE),endpoint));
}",0.6538461538461539
15316,"/** 
 * @param rate 0 means never sample, 1 means always sample. Otherwise minimum sample rate is0.0001, or 0.01% of traces
 */
public static Sampler create(float rate){
  if (rate == 0)   return Sampler.NEVER_SAMPLE;
  if (rate == 1.0)   return ALWAYS_SAMPLE;
  checkArgument(rate > 0.0001 && rate < 1,""String_Node_Str"",rate);
  final long boundary=(long)(rate * 10000);
  return new BoundarySampler(boundary);
}","/** 
 * @param rate 0 means never sample, 1 means always sample. Otherwise minimum sample rate is0.0001, or 0.01% of traces
 */
public static Sampler create(float rate){
  if (rate == 0)   return Sampler.NEVER_SAMPLE;
  if (rate == 1.0)   return ALWAYS_SAMPLE;
  checkArgument(rate >= 0.0001f && rate < 1,""String_Node_Str"",rate);
  final long boundary=(long)(rate * 10000);
  return new BoundarySampler(boundary);
}",0.9806763285024156
15317,"/** 
 * Returns a sampler, given a rate expressed as a percentage. <p>The sampler returned is good for low volumes of traffic (<100K requests), as it is precise. If you have high volumes of traffic, consider   {@link BoundarySampler}.
 * @param rate minimum sample rate is 0.0001, or 0.01% of traces
 */
public static Sampler create(float rate){
  return CountingSampler.create(rate);
}","/** 
 * Returns a sampler, given a rate expressed as a percentage. <p>The sampler returned is good for low volumes of traffic (<100K requests), as it is precise. If you have high volumes of traffic, consider   {@link BoundarySampler}.
 * @param rate minimum sample rate is 0.01, or 1% of traces
 */
public static Sampler create(float rate){
  return CountingSampler.create(rate);
}",0.9934810951760104
15318,"/** 
 * Requests the thread to stop.
 */
public void stop(){
  stop=true;
}","/** 
 * Requests the thread to stop as well as closes the client connection for this thread.
 */
public void stop(){
  stop=true;
  clientProvider.close();
}",0.646551724137931
15319,"/** 
 * Create a new instance.
 * @param zipkinCollectorHost Host for zipkin collector.
 * @param zipkinCollectorPort Port for zipkin collector.
 * @param params Zipkin Span Collector parameters.
 */
public ZipkinSpanCollector(final String zipkinCollectorHost,final int zipkinCollectorPort,final ZipkinSpanCollectorParams params){
  Validate.notEmpty(zipkinCollectorHost);
  Validate.notNull(params);
  clientProvider=new ZipkinCollectorClientProvider(zipkinCollectorHost,zipkinCollectorPort,params.getSocketTimeout());
  try {
    clientProvider.setup();
  }
 catch (  final TException e) {
    if (params.failOnSetup()) {
      throw new IllegalStateException(e);
    }
 else {
      LOGGER.warn(""String_Node_Str"",e);
    }
  }
  spanQueue=new ArrayBlockingQueue<Span>(params.getQueueSize());
  executorService=Executors.newFixedThreadPool(params.getNrOfThreads());
  for (int i=1; i <= params.getNrOfThreads(); i++) {
    final SpanProcessingThread spanProcessingThread=new SpanProcessingThread(spanQueue,clientProvider,params.getBatchSize());
    spanProcessingThreads.add(spanProcessingThread);
    futures.add(executorService.submit(spanProcessingThread));
  }
}","/** 
 * Create a new instance.
 * @param zipkinCollectorHost Host for zipkin collector.
 * @param zipkinCollectorPort Port for zipkin collector.
 * @param params Zipkin Span Collector parameters.
 */
public ZipkinSpanCollector(final String zipkinCollectorHost,final int zipkinCollectorPort,final ZipkinSpanCollectorParams params){
  Validate.notEmpty(zipkinCollectorHost);
  Validate.notNull(params);
  spanQueue=new ArrayBlockingQueue<Span>(params.getQueueSize());
  executorService=Executors.newFixedThreadPool(params.getNrOfThreads());
  for (int i=1; i <= params.getNrOfThreads(); i++) {
    ZipkinCollectorClientProvider clientProvider=new ZipkinCollectorClientProvider(zipkinCollectorHost,zipkinCollectorPort,params.getSocketTimeout());
    try {
      clientProvider.setup();
    }
 catch (    final TException e) {
      if (params.failOnSetup()) {
        throw new IllegalStateException(e);
      }
 else {
        LOGGER.warn(""String_Node_Str"",e);
      }
    }
    final SpanProcessingThread spanProcessingThread=new SpanProcessingThread(spanQueue,clientProvider,params.getBatchSize());
    spanProcessingThreads.add(spanProcessingThread);
    futures.add(executorService.submit(spanProcessingThread));
  }
}",0.6867671691792295
15320,"/** 
 * {@inheritDoc}
 */
@Override @PreDestroy public void close(){
  LOGGER.info(""String_Node_Str"");
  for (  final SpanProcessingThread thread : spanProcessingThreads) {
    thread.stop();
  }
  for (  final Future<Integer> future : futures) {
    try {
      final Integer spansProcessed=future.get();
      LOGGER.info(""String_Node_Str"",spansProcessed);
    }
 catch (    final Exception e) {
      LOGGER.warn(""String_Node_Str"",e);
    }
  }
  executorService.shutdown();
  clientProvider.close();
  LOGGER.info(""String_Node_Str"");
}","/** 
 * {@inheritDoc}
 */
@Override @PreDestroy public void close(){
  LOGGER.info(""String_Node_Str"");
  for (  final SpanProcessingThread thread : spanProcessingThreads) {
    thread.stop();
  }
  for (  final Future<Integer> future : futures) {
    try {
      final Integer spansProcessed=future.get();
      LOGGER.info(""String_Node_Str"",spansProcessed);
    }
 catch (    final Exception e) {
      LOGGER.warn(""String_Node_Str"",e);
    }
  }
  executorService.shutdown();
  LOGGER.info(""String_Node_Str"");
}",0.9752851711026616
15321,"private void submitEndpoint(){
  if (!endPointSubmitter.endPointSubmitted()) {
    final String localAddr=servletRequest.getLocalAddr();
    final int localPort=servletRequest.getLocalPort();
    final String contextPath=servletRequest.getContextPath();
    LOGGER.debug(""String_Node_Str"",localAddr,localPort,contextPath);
    endPointSubmitter.submit(localAddr,localPort,contextPath);
  }
}","private void submitEndpoint(){
  if (!endPointSubmitter.endPointSubmitted()) {
    final String localAddr=servletRequest.getLocalAddr();
    final int localPort=servletRequest.getLocalPort();
    final String contextPath=getContextPathWithoutFirstSlash();
    LOGGER.debug(""String_Node_Str"",localAddr,localPort,contextPath);
    endPointSubmitter.submit(localAddr,localPort,contextPath);
  }
}",0.9591836734693876
15322,"/** 
 * {@inheritDoc}
 */
@Override public Status process() throws EventDeliveryException {
  Status status=Status.BACKOFF;
  final Channel channel=getChannel();
  final Transaction txn=channel.getTransaction();
  txn.begin();
  try {
    Event event=channel.take();
    if (event != null) {
      final List<LogEntry> logEntries=new ArrayList<LogEntry>(batchSize);
      logEntries.add(create(event));
      int count=1;
      while ((event=channel.take()) != null && count < batchSize) {
        count++;
        logEntries.add(create(event));
      }
      client.Log(logEntries);
      sinkCounter.incrementBatchCompleteCount();
      status=Status.READY;
    }
 else {
      sinkCounter.incrementBatchEmptyCount();
    }
    txn.commit();
  }
 catch (  final TTransportException e) {
    txn.rollback();
    LOGGER.error(""String_Node_Str"");
    try {
      connect();
      LOGGER.info(""String_Node_Str"");
    }
 catch (    final TTransportException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
catch (  final Throwable e) {
    txn.rollback();
    throw new EventDeliveryException(e);
  }
 finally {
    txn.close();
  }
  return status;
}","/** 
 * {@inheritDoc}
 */
@Override public Status process() throws EventDeliveryException {
  Status status=Status.BACKOFF;
  final Channel channel=getChannel();
  final Transaction txn=channel.getTransaction();
  txn.begin();
  try {
    Event event=channel.take();
    if (event != null) {
      final List<LogEntry> logEntries=new ArrayList<LogEntry>(batchSize);
      logEntries.add(create(event));
      int count=1;
      while (count < batchSize && (event=channel.take()) != null) {
        count++;
        logEntries.add(create(event));
      }
      client.Log(logEntries);
      sinkCounter.incrementBatchCompleteCount();
      status=Status.READY;
    }
 else {
      sinkCounter.incrementBatchEmptyCount();
    }
    txn.commit();
  }
 catch (  final TTransportException e) {
    txn.rollback();
    LOGGER.error(""String_Node_Str"");
    try {
      connect();
      LOGGER.info(""String_Node_Str"");
    }
 catch (    final TTransportException e1) {
      LOGGER.error(""String_Node_Str"",e1);
    }
  }
catch (  final Throwable e) {
    txn.rollback();
    throw new EventDeliveryException(e);
  }
 finally {
    txn.close();
  }
  return status;
}",0.9818652849740932
15323,"/** 
 * Submits a binary annotation with custom type.
 * @param span Span.
 * @param endPoint Endpoint, optional, can be <code>null</code>.
 * @param key Key, should not be empty.
 * @param value Should not be null.
 * @param annotationType Indicates the type of the value.
 */
private void submitBinaryAnnotation(final Span span,final Endpoint endPoint,final String key,final ByteBuffer value,final AnnotationType annotationType){
  Validate.notBlank(key);
  Validate.notNull(value);
  final BinaryAnnotation binaryAnnotation=new BinaryAnnotation();
  binaryAnnotation.setKey(key);
  binaryAnnotation.setValue(value);
  binaryAnnotation.setAnnotation_type(annotationType);
  binaryAnnotation.setHost(endPoint);
  span.addToBinary_annotations(binaryAnnotation);
}","/** 
 * Submits a binary annotation with custom type.
 * @param span Span.
 * @param endPoint Endpoint, optional, can be <code>null</code>.
 * @param key Key, should not be empty.
 * @param value Should not be null.
 * @param annotationType Indicates the type of the value.
 */
private void submitBinaryAnnotation(final Span span,final Endpoint endPoint,final String key,final ByteBuffer value,final AnnotationType annotationType){
  Validate.notBlank(key);
  Validate.notNull(value);
  final BinaryAnnotation binaryAnnotation=new BinaryAnnotation();
  binaryAnnotation.setKey(key);
  binaryAnnotation.setValue(value);
  binaryAnnotation.setAnnotation_type(annotationType);
  binaryAnnotation.setHost(endPoint);
  addBinaryAnnotation(span,binaryAnnotation);
}",0.9724047306176083
15324,"/** 
 * {@inheritDoc}
 */
@Override public void submitAnnotation(final String annotationName){
  final Span span=getSpan();
  if (span != null) {
    final Annotation annotation=new Annotation();
    annotation.setTimestamp(currentTimeMicroseconds());
    annotation.setHost(getEndPoint());
    annotation.setValue(annotationName);
    span.addToAnnotations(annotation);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void submitAnnotation(final String annotationName){
  final Span span=getSpan();
  if (span != null) {
    final Annotation annotation=new Annotation();
    annotation.setTimestamp(currentTimeMicroseconds());
    annotation.setHost(getEndPoint());
    annotation.setValue(annotationName);
    addAnnotation(span,annotation);
  }
}",0.97196261682243
15325,"/** 
 * {@inheritDoc}
 */
@Override public Integer call() throws Exception {
  int subsequentEmptyBatches=0;
  do {
    final Span span=queue.poll(5,TimeUnit.SECONDS);
    if (span == null) {
      subsequentEmptyBatches++;
    }
 else {
      logEntries.add(create(span));
    }
    if (subsequentEmptyBatches >= MAX_SUBSEQUENT_EMPTY_BATCHES && !logEntries.isEmpty() || logEntries.size() >= maxBatchSize || !logEntries.isEmpty() && stop) {
      log(logEntries);
      logEntries.clear();
      subsequentEmptyBatches=0;
    }
  }
 while (stop == false);
  return processedSpans;
}","/** 
 * {@inheritDoc}
 */
@Override public Integer call(){
  int subsequentEmptyBatches=0;
  do {
    try {
      final Span span=queue.poll(5,TimeUnit.SECONDS);
      if (span == null) {
        subsequentEmptyBatches++;
      }
 else {
        logEntries.add(create(span));
      }
      if (subsequentEmptyBatches >= MAX_SUBSEQUENT_EMPTY_BATCHES && !logEntries.isEmpty() || logEntries.size() >= maxBatchSize || !logEntries.isEmpty() && stop) {
        log(logEntries);
        logEntries.clear();
        subsequentEmptyBatches=0;
      }
    }
 catch (    final Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
 while (stop == false);
  return processedSpans;
}",0.805379746835443
15326,"/** 
 * {@inheritDoc}
 */
@Override public Integer call() throws Exception {
  do {
    final Span span=queue.poll(5000,TimeUnit.SECONDS);
    if (span != null) {
      final long start=System.currentTimeMillis();
      try {
        final String spanAsString=base64.encodeToString(spanToBytes(span));
        final LogEntry logEntry=new LogEntry(""String_Node_Str"",spanAsString);
        client.Log(Arrays.asList(logEntry));
      }
 catch (      final TException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        if (LOGGER.isDebugEnabled()) {
          final long end=System.currentTimeMillis();
          LOGGER.debug(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
        }
      }
      processedSpans++;
    }
  }
 while (stop == false);
  return processedSpans;
}","/** 
 * {@inheritDoc}
 */
@Override public Integer call() throws Exception {
  do {
    final Span span=queue.poll(5,TimeUnit.SECONDS);
    if (span != null) {
      final long start=System.currentTimeMillis();
      try {
        final String spanAsString=base64.encodeToString(spanToBytes(span));
        final LogEntry logEntry=new LogEntry(""String_Node_Str"",spanAsString);
        client.Log(Arrays.asList(logEntry));
      }
 catch (      final TException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
 finally {
        if (LOGGER.isDebugEnabled()) {
          final long end=System.currentTimeMillis();
          LOGGER.debug(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
        }
      }
      processedSpans++;
    }
  }
 while (stop == false);
  return processedSpans;
}",0.9981308411214952
15327,"/** 
 * {@inheritDoc}
 */
@Override public void collect(final Span span){
  final long start=System.currentTimeMillis();
  try {
    spanQueue.offer(span,5000,TimeUnit.SECONDS);
  }
 catch (  final InterruptedException e1) {
    LOGGER.error(""String_Node_Str"" + span,e1);
  }
  final long end=System.currentTimeMillis();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void collect(final Span span){
  final long start=System.currentTimeMillis();
  try {
    spanQueue.offer(span,5,TimeUnit.SECONDS);
  }
 catch (  final InterruptedException e1) {
    LOGGER.error(""String_Node_Str"" + span,e1);
  }
  final long end=System.currentTimeMillis();
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + (end - start) + ""String_Node_Str"");
  }
}",0.9965156794425089
15328,"@SuppressLint(""String_Node_Str"") @Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  mActivity=(AppCompatActivity)getActivity();
  CookieSyncManager.createInstance(mActivity);
  outer=(FrameLayout)inflater.inflate(R.layout.web_view_fragment,null);
  final RedditPost src_post=getArguments().getParcelable(""String_Node_Str"");
  final RedditPreparedPost post;
  if (src_post != null) {
    final RedditParsedPost parsedPost=new RedditParsedPost(src_post,false);
    post=new RedditPreparedPost(mActivity,CacheManager.getInstance(mActivity),0,parsedPost,-1,false,false);
  }
 else {
    post=null;
  }
  webView=(WebViewFixed)outer.findViewById(R.id.web_view_fragment_webviewfixed);
  final FrameLayout loadingViewFrame=(FrameLayout)outer.findViewById(R.id.web_view_fragment_loadingview_frame);
  progressView=new ProgressBar(mActivity,null,android.R.attr.progressBarStyleHorizontal);
  loadingViewFrame.addView(progressView);
  loadingViewFrame.setPadding(General.dpToPixels(mActivity,10),0,General.dpToPixels(mActivity,10),0);
  final WebSettings settings=webView.getSettings();
  settings.setBuiltInZoomControls(true);
  settings.setJavaScriptEnabled(true);
  settings.setJavaScriptCanOpenWindowsAutomatically(false);
  settings.setUseWideViewPort(true);
  settings.setLoadWithOverviewMode(true);
  settings.setDomStorageEnabled(true);
  if (AndroidApi.isHoneyCombOrLater()) {
    settings.setDisplayZoomControls(false);
  }
  webView.setWebChromeClient(new WebChromeClient(){
    @Override public void onProgressChanged(    WebView view,    final int newProgress){
      super.onProgressChanged(view,newProgress);
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        @Override public void run(){
          progressView.setProgress(newProgress);
          progressView.setVisibility(newProgress == 100 ? View.GONE : View.VISIBLE);
        }
      }
);
    }
  }
);
  if (mUrl != null) {
    webView.loadUrl(mUrl);
  }
 else {
    webView.loadDataWithBaseURL(""String_Node_Str"",html,""String_Node_Str"",null,null);
  }
  webView.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    final WebView view,    final String url){
      if (url == null)       return false;
      if (url.startsWith(""String_Node_Str"")) {
        return true;
      }
      if (goingBack && currentUrl != null && url.equals(currentUrl)) {
        General.quickToast(mActivity,String.format(Locale.US,""String_Node_Str"",-lastBackDepthAttempt),Toast.LENGTH_SHORT);
        lastBackDepthAttempt--;
        if (webView.canGoBackOrForward(lastBackDepthAttempt)) {
          webView.goBackOrForward(lastBackDepthAttempt);
        }
 else {
          mActivity.finish();
        }
      }
 else {
        if (RedditURLParser.parse(Uri.parse(url)) != null) {
          LinkHandler.onLinkClicked(mActivity,url,false);
        }
 else {
          webView.loadUrl(url);
          currentUrl=url;
        }
      }
      return true;
    }
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      super.onPageStarted(view,url,favicon);
      if (mUrl != null && url != null) {
        final AppCompatActivity activity=mActivity;
        if (activity != null) {
          activity.setTitle(url);
        }
      }
    }
    @Override public void onPageFinished(    final WebView view,    final String url){
      super.onPageFinished(view,url);
      new Timer().schedule(new TimerTask(){
        @Override public void run(){
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            @Override public void run(){
              if (currentUrl == null || url == null)               return;
              if (!url.equals(view.getUrl()))               return;
              if (goingBack && url.equals(currentUrl)) {
                General.quickToast(mActivity,String.format(Locale.US,""String_Node_Str"",-lastBackDepthAttempt));
                lastBackDepthAttempt--;
                if (webView.canGoBackOrForward(lastBackDepthAttempt)) {
                  webView.goBackOrForward(lastBackDepthAttempt);
                }
 else {
                  mActivity.finish();
                }
              }
 else {
                goingBack=false;
              }
            }
          }
);
        }
      }
,1000);
    }
    @Override public void doUpdateVisitedHistory(    WebView view,    String url,    boolean isReload){
      super.doUpdateVisitedHistory(view,url,isReload);
    }
  }
);
  final FrameLayout outerFrame=new FrameLayout(mActivity);
  outerFrame.addView(outer);
  if (post != null) {
    final SideToolbarOverlay toolbarOverlay=new SideToolbarOverlay(mActivity);
    final BezelSwipeOverlay bezelOverlay=new BezelSwipeOverlay(mActivity,new BezelSwipeOverlay.BezelSwipeListener(){
      @Override public boolean onSwipe(      @BezelSwipeOverlay.SwipeEdge int edge){
        toolbarOverlay.setContents(post.generateToolbar(mActivity,false,toolbarOverlay));
        toolbarOverlay.show(edge == BezelSwipeOverlay.LEFT ? SideToolbarOverlay.SideToolbarPosition.LEFT : SideToolbarOverlay.SideToolbarPosition.RIGHT);
        return true;
      }
      @Override public boolean onTap(){
        if (toolbarOverlay.isShown()) {
          toolbarOverlay.hide();
          return true;
        }
        return false;
      }
    }
);
    outerFrame.addView(bezelOverlay);
    outerFrame.addView(toolbarOverlay);
    bezelOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    bezelOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
  }
  return outerFrame;
}","@SuppressLint(""String_Node_Str"") @Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  mActivity=(AppCompatActivity)getActivity();
  CookieSyncManager.createInstance(mActivity);
  outer=(FrameLayout)inflater.inflate(R.layout.web_view_fragment,null);
  final RedditPost src_post=getArguments().getParcelable(""String_Node_Str"");
  final RedditPreparedPost post;
  if (src_post != null) {
    final RedditParsedPost parsedPost=new RedditParsedPost(src_post,false);
    post=new RedditPreparedPost(mActivity,CacheManager.getInstance(mActivity),0,parsedPost,-1,false,false);
  }
 else {
    post=null;
  }
  webView=(WebViewFixed)outer.findViewById(R.id.web_view_fragment_webviewfixed);
  final FrameLayout loadingViewFrame=(FrameLayout)outer.findViewById(R.id.web_view_fragment_loadingview_frame);
  webView.setDownloadListener(new DownloadListener(){
    @Override public void onDownloadStart(    final String url,    String userAgent,    String contentDisposition,    String mimetype,    long contentLength){
{
        new AlertDialog.Builder(mActivity).setTitle(R.string.download_link_title).setMessage(R.string.download_link_message).setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            Intent i=new Intent(Intent.ACTION_VIEW);
            i.setData(Uri.parse(url));
            getContext().startActivity(i);
            mActivity.onBackPressed();
          }
        }
).setNegativeButton(android.R.string.no,new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            mActivity.onBackPressed();
          }
        }
).setIcon(android.R.drawable.ic_dialog_alert).show();
      }
    }
  }
);
  progressView=new ProgressBar(mActivity,null,android.R.attr.progressBarStyleHorizontal);
  loadingViewFrame.addView(progressView);
  loadingViewFrame.setPadding(General.dpToPixels(mActivity,10),0,General.dpToPixels(mActivity,10),0);
  final WebSettings settings=webView.getSettings();
  settings.setBuiltInZoomControls(true);
  settings.setJavaScriptEnabled(true);
  settings.setJavaScriptCanOpenWindowsAutomatically(false);
  settings.setUseWideViewPort(true);
  settings.setLoadWithOverviewMode(true);
  settings.setDomStorageEnabled(true);
  if (AndroidApi.isHoneyCombOrLater()) {
    settings.setDisplayZoomControls(false);
  }
  webView.setWebChromeClient(new WebChromeClient(){
    @Override public void onProgressChanged(    WebView view,    final int newProgress){
      super.onProgressChanged(view,newProgress);
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        @Override public void run(){
          progressView.setProgress(newProgress);
          progressView.setVisibility(newProgress == 100 ? View.GONE : View.VISIBLE);
        }
      }
);
    }
  }
);
  if (mUrl != null) {
    webView.loadUrl(mUrl);
  }
 else {
    webView.loadDataWithBaseURL(""String_Node_Str"",html,""String_Node_Str"",null,null);
  }
  webView.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    final WebView view,    final String url){
      if (url == null)       return false;
      if (url.startsWith(""String_Node_Str"")) {
        return true;
      }
      if (goingBack && currentUrl != null && url.equals(currentUrl)) {
        General.quickToast(mActivity,String.format(Locale.US,""String_Node_Str"",-lastBackDepthAttempt),Toast.LENGTH_SHORT);
        lastBackDepthAttempt--;
        if (webView.canGoBackOrForward(lastBackDepthAttempt)) {
          webView.goBackOrForward(lastBackDepthAttempt);
        }
 else {
          mActivity.finish();
        }
      }
 else {
        if (RedditURLParser.parse(Uri.parse(url)) != null) {
          LinkHandler.onLinkClicked(mActivity,url,false);
        }
 else {
          webView.loadUrl(url);
          currentUrl=url;
        }
      }
      return true;
    }
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      super.onPageStarted(view,url,favicon);
      if (mUrl != null && url != null) {
        final AppCompatActivity activity=mActivity;
        if (activity != null) {
          activity.setTitle(url);
        }
      }
    }
    @Override public void onPageFinished(    final WebView view,    final String url){
      super.onPageFinished(view,url);
      new Timer().schedule(new TimerTask(){
        @Override public void run(){
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            @Override public void run(){
              if (currentUrl == null || url == null)               return;
              if (!url.equals(view.getUrl()))               return;
              if (goingBack && url.equals(currentUrl)) {
                General.quickToast(mActivity,String.format(Locale.US,""String_Node_Str"",-lastBackDepthAttempt));
                lastBackDepthAttempt--;
                if (webView.canGoBackOrForward(lastBackDepthAttempt)) {
                  webView.goBackOrForward(lastBackDepthAttempt);
                }
 else {
                  mActivity.finish();
                }
              }
 else {
                goingBack=false;
              }
            }
          }
);
        }
      }
,1000);
    }
    @Override public void doUpdateVisitedHistory(    WebView view,    String url,    boolean isReload){
      super.doUpdateVisitedHistory(view,url,isReload);
    }
  }
);
  final FrameLayout outerFrame=new FrameLayout(mActivity);
  outerFrame.addView(outer);
  if (post != null) {
    final SideToolbarOverlay toolbarOverlay=new SideToolbarOverlay(mActivity);
    final BezelSwipeOverlay bezelOverlay=new BezelSwipeOverlay(mActivity,new BezelSwipeOverlay.BezelSwipeListener(){
      @Override public boolean onSwipe(      @BezelSwipeOverlay.SwipeEdge int edge){
        toolbarOverlay.setContents(post.generateToolbar(mActivity,false,toolbarOverlay));
        toolbarOverlay.show(edge == BezelSwipeOverlay.LEFT ? SideToolbarOverlay.SideToolbarPosition.LEFT : SideToolbarOverlay.SideToolbarPosition.RIGHT);
        return true;
      }
      @Override public boolean onTap(){
        if (toolbarOverlay.isShown()) {
          toolbarOverlay.hide();
          return true;
        }
        return false;
      }
    }
);
    outerFrame.addView(bezelOverlay);
    outerFrame.addView(toolbarOverlay);
    bezelOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    bezelOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
  }
  return outerFrame;
}",0.9215917117965624
15329,"private void performDownload(final HTTPBackend.Request request){
  if (mInitiator.queueType == CacheRequest.DOWNLOAD_QUEUE_REDDIT_API) {
    if (resetUserCredentials.getAndSet(false)) {
      mInitiator.user.setAccessToken(null);
    }
    RedditOAuth.AccessToken accessToken=mInitiator.user.getMostRecentAccessToken();
    if (accessToken == null || accessToken.isExpired()) {
      mInitiator.notifyProgress(true,0,0);
      final RedditOAuth.FetchAccessTokenResult result;
      if (mInitiator.user.isAnonymous()) {
        result=RedditOAuth.fetchAnonymousAccessTokenSynchronous(mInitiator.context);
      }
 else {
        result=RedditOAuth.fetchAccessTokenSynchronous(mInitiator.context,mInitiator.user.refreshToken);
      }
      if (result.status != RedditOAuth.FetchAccessTokenResultStatus.SUCCESS) {
        mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_REQUEST,result.error.t,result.error.httpStatus,result.error.title + ""String_Node_Str"" + result.error.message);
        return;
      }
      accessToken=result.accessToken;
      mInitiator.user.setAccessToken(accessToken);
    }
    request.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken.token);
  }
  if (mInitiator.queueType == CacheRequest.DOWNLOAD_QUEUE_IMGUR_API) {
    request.addHeader(""String_Node_Str"",""String_Node_Str"");
  }
  mInitiator.notifyDownloadStarted();
  request.executeInThisThread(new HTTPBackend.Listener(){
    @Override public void onError(    final @CacheRequest.RequestFailureType int failureType,    final Throwable exception,    final Integer httpStatus){
      if (mInitiator.queueType == CacheRequest.DOWNLOAD_QUEUE_REDDIT_API && TorCommon.isTorEnabled()) {
        OKHTTPBackend.recreateHttpBackend();
        resetUserCredentialsOnNextRequest();
      }
      mInitiator.notifyFailure(failureType,exception,httpStatus,""String_Node_Str"");
    }
    @Override public void onSuccess(    final String mimetype,    final Long bodyBytes,    final InputStream is){
      final NotifyOutputStream cacheOs;
      final CacheManager.WritableCacheFile cacheFile;
      if (mInitiator.cache) {
        try {
          cacheFile=manager.openNewCacheFile(mInitiator,session,mimetype);
          cacheOs=cacheFile.getOutputStream();
        }
 catch (        IOException e) {
          e.printStackTrace();
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
          return;
        }
      }
 else {
        cacheOs=null;
        cacheFile=null;
      }
      if (mInitiator.isJson) {
        final InputStream bis;
        if (mInitiator.cache) {
          bis=new BufferedInputStream(new CachingInputStream(is,cacheOs,new CachingInputStream.BytesReadListener(){
            public void onBytesRead(            final long total){
              if (bodyBytes != null) {
                mInitiator.notifyProgress(false,total,bodyBytes);
              }
            }
          }
),64 * 1024);
        }
 else {
          bis=new BufferedInputStream(is,64 * 1024);
        }
        final JsonValue value;
        try {
          value=new JsonValue(bis);
          mInitiator.notifyJsonParseStarted(value,RRTime.utcCurrentTimeMillis(),session,false);
          value.buildInThisThread();
        }
 catch (        Throwable t) {
          t.printStackTrace();
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_PARSE,t,null,""String_Node_Str"");
          return;
        }
        if (mInitiator.cache && cacheFile != null) {
          try {
            mInitiator.notifySuccess(cacheFile.getReadableCacheFile(),RRTime.utcCurrentTimeMillis(),session,false,mimetype);
          }
 catch (          IOException e) {
            if (e.getMessage().contains(""String_Node_Str"")) {
              mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_DISK_SPACE,e,null,""String_Node_Str"");
            }
 else {
              mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
            }
          }
        }
      }
 else {
        if (!mInitiator.cache) {
          BugReportActivity.handleGlobalError(mInitiator.context,""String_Node_Str"");
          return;
        }
        try {
          final byte[] buf=new byte[64 * 1024];
          int bytesRead;
          long totalBytesRead=0;
          while ((bytesRead=is.read(buf)) > 0) {
            totalBytesRead+=bytesRead;
            cacheOs.write(buf,0,bytesRead);
            if (bodyBytes != null) {
              mInitiator.notifyProgress(false,totalBytesRead,bodyBytes);
            }
          }
          cacheOs.flush();
          cacheOs.close();
          try {
            mInitiator.notifySuccess(cacheFile.getReadableCacheFile(),RRTime.utcCurrentTimeMillis(),session,false,mimetype);
          }
 catch (          IOException e) {
            if (e.getMessage().contains(""String_Node_Str"")) {
              mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_DISK_SPACE,e,null,""String_Node_Str"");
            }
 else {
              mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
            }
          }
        }
 catch (        IOException e) {
          if (e.getMessage() != null && e.getMessage().contains(""String_Node_Str"")) {
            mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
          }
 else {
            e.printStackTrace();
            mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_CONNECTION,e,null,""String_Node_Str"");
          }
        }
catch (        Throwable t) {
          t.printStackTrace();
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_CONNECTION,t,null,""String_Node_Str"");
        }
      }
    }
  }
);
}","private void performDownload(final HTTPBackend.Request request){
  if (mInitiator.queueType == CacheRequest.DOWNLOAD_QUEUE_REDDIT_API) {
    if (resetUserCredentials.getAndSet(false)) {
      mInitiator.user.setAccessToken(null);
    }
    RedditOAuth.AccessToken accessToken=mInitiator.user.getMostRecentAccessToken();
    if (accessToken == null || accessToken.isExpired()) {
      mInitiator.notifyProgress(true,0,0);
      final RedditOAuth.FetchAccessTokenResult result;
      if (mInitiator.user.isAnonymous()) {
        result=RedditOAuth.fetchAnonymousAccessTokenSynchronous(mInitiator.context);
      }
 else {
        result=RedditOAuth.fetchAccessTokenSynchronous(mInitiator.context,mInitiator.user.refreshToken);
      }
      if (result.status != RedditOAuth.FetchAccessTokenResultStatus.SUCCESS) {
        mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_REQUEST,result.error.t,result.error.httpStatus,result.error.title + ""String_Node_Str"" + result.error.message);
        return;
      }
      accessToken=result.accessToken;
      mInitiator.user.setAccessToken(accessToken);
    }
    request.addHeader(""String_Node_Str"",""String_Node_Str"" + accessToken.token);
  }
  if (mInitiator.queueType == CacheRequest.DOWNLOAD_QUEUE_IMGUR_API) {
    request.addHeader(""String_Node_Str"",""String_Node_Str"");
  }
  mInitiator.notifyDownloadStarted();
  request.executeInThisThread(new HTTPBackend.Listener(){
    @Override public void onError(    final @CacheRequest.RequestFailureType int failureType,    final Throwable exception,    final Integer httpStatus){
      if (mInitiator.queueType == CacheRequest.DOWNLOAD_QUEUE_REDDIT_API && TorCommon.isTorEnabled()) {
        OKHTTPBackend.recreateHttpBackend();
        resetUserCredentialsOnNextRequest();
      }
      mInitiator.notifyFailure(failureType,exception,httpStatus,""String_Node_Str"");
    }
    @Override public void onSuccess(    final String mimetype,    final Long bodyBytes,    final InputStream is){
      final NotifyOutputStream cacheOs;
      final CacheManager.WritableCacheFile cacheFile;
      if (mInitiator.cache) {
        try {
          cacheFile=manager.openNewCacheFile(mInitiator,session,mimetype);
          cacheOs=cacheFile.getOutputStream();
        }
 catch (        IOException e) {
          e.printStackTrace();
          final int failureType;
          if (manager.getPreferredCacheLocation().exists()) {
            failureType=CacheRequest.REQUEST_FAILURE_STORAGE;
          }
 else {
            failureType=CacheRequest.REQUEST_FAILURE_CACHE_DIR_DOES_NOT_EXIST;
          }
          mInitiator.notifyFailure(failureType,e,null,""String_Node_Str"");
          return;
        }
      }
 else {
        cacheOs=null;
        cacheFile=null;
      }
      if (mInitiator.isJson) {
        final InputStream bis;
        if (mInitiator.cache) {
          bis=new BufferedInputStream(new CachingInputStream(is,cacheOs,new CachingInputStream.BytesReadListener(){
            public void onBytesRead(            final long total){
              if (bodyBytes != null) {
                mInitiator.notifyProgress(false,total,bodyBytes);
              }
            }
          }
),64 * 1024);
        }
 else {
          bis=new BufferedInputStream(is,64 * 1024);
        }
        final JsonValue value;
        try {
          value=new JsonValue(bis);
          mInitiator.notifyJsonParseStarted(value,RRTime.utcCurrentTimeMillis(),session,false);
          value.buildInThisThread();
        }
 catch (        Throwable t) {
          t.printStackTrace();
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_PARSE,t,null,""String_Node_Str"");
          return;
        }
        if (mInitiator.cache && cacheFile != null) {
          try {
            mInitiator.notifySuccess(cacheFile.getReadableCacheFile(),RRTime.utcCurrentTimeMillis(),session,false,mimetype);
          }
 catch (          IOException e) {
            if (e.getMessage().contains(""String_Node_Str"")) {
              mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_DISK_SPACE,e,null,""String_Node_Str"");
            }
 else {
              mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
            }
          }
        }
      }
 else {
        if (!mInitiator.cache) {
          BugReportActivity.handleGlobalError(mInitiator.context,""String_Node_Str"");
          return;
        }
        try {
          final byte[] buf=new byte[64 * 1024];
          int bytesRead;
          long totalBytesRead=0;
          while ((bytesRead=is.read(buf)) > 0) {
            totalBytesRead+=bytesRead;
            cacheOs.write(buf,0,bytesRead);
            if (bodyBytes != null) {
              mInitiator.notifyProgress(false,totalBytesRead,bodyBytes);
            }
          }
          cacheOs.flush();
          cacheOs.close();
          try {
            mInitiator.notifySuccess(cacheFile.getReadableCacheFile(),RRTime.utcCurrentTimeMillis(),session,false,mimetype);
          }
 catch (          IOException e) {
            if (e.getMessage().contains(""String_Node_Str"")) {
              mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_DISK_SPACE,e,null,""String_Node_Str"");
            }
 else {
              mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
            }
          }
        }
 catch (        IOException e) {
          if (e.getMessage() != null && e.getMessage().contains(""String_Node_Str"")) {
            mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
          }
 else {
            e.printStackTrace();
            mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_CONNECTION,e,null,""String_Node_Str"");
          }
        }
catch (        Throwable t) {
          t.printStackTrace();
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_CONNECTION,t,null,""String_Node_Str"");
        }
      }
    }
  }
);
}",0.974942273154879
15330,"@Override public void onSuccess(final String mimetype,final Long bodyBytes,final InputStream is){
  final NotifyOutputStream cacheOs;
  final CacheManager.WritableCacheFile cacheFile;
  if (mInitiator.cache) {
    try {
      cacheFile=manager.openNewCacheFile(mInitiator,session,mimetype);
      cacheOs=cacheFile.getOutputStream();
    }
 catch (    IOException e) {
      e.printStackTrace();
      mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
      return;
    }
  }
 else {
    cacheOs=null;
    cacheFile=null;
  }
  if (mInitiator.isJson) {
    final InputStream bis;
    if (mInitiator.cache) {
      bis=new BufferedInputStream(new CachingInputStream(is,cacheOs,new CachingInputStream.BytesReadListener(){
        public void onBytesRead(        final long total){
          if (bodyBytes != null) {
            mInitiator.notifyProgress(false,total,bodyBytes);
          }
        }
      }
),64 * 1024);
    }
 else {
      bis=new BufferedInputStream(is,64 * 1024);
    }
    final JsonValue value;
    try {
      value=new JsonValue(bis);
      mInitiator.notifyJsonParseStarted(value,RRTime.utcCurrentTimeMillis(),session,false);
      value.buildInThisThread();
    }
 catch (    Throwable t) {
      t.printStackTrace();
      mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_PARSE,t,null,""String_Node_Str"");
      return;
    }
    if (mInitiator.cache && cacheFile != null) {
      try {
        mInitiator.notifySuccess(cacheFile.getReadableCacheFile(),RRTime.utcCurrentTimeMillis(),session,false,mimetype);
      }
 catch (      IOException e) {
        if (e.getMessage().contains(""String_Node_Str"")) {
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_DISK_SPACE,e,null,""String_Node_Str"");
        }
 else {
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
        }
      }
    }
  }
 else {
    if (!mInitiator.cache) {
      BugReportActivity.handleGlobalError(mInitiator.context,""String_Node_Str"");
      return;
    }
    try {
      final byte[] buf=new byte[64 * 1024];
      int bytesRead;
      long totalBytesRead=0;
      while ((bytesRead=is.read(buf)) > 0) {
        totalBytesRead+=bytesRead;
        cacheOs.write(buf,0,bytesRead);
        if (bodyBytes != null) {
          mInitiator.notifyProgress(false,totalBytesRead,bodyBytes);
        }
      }
      cacheOs.flush();
      cacheOs.close();
      try {
        mInitiator.notifySuccess(cacheFile.getReadableCacheFile(),RRTime.utcCurrentTimeMillis(),session,false,mimetype);
      }
 catch (      IOException e) {
        if (e.getMessage().contains(""String_Node_Str"")) {
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_DISK_SPACE,e,null,""String_Node_Str"");
        }
 else {
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
        }
      }
    }
 catch (    IOException e) {
      if (e.getMessage() != null && e.getMessage().contains(""String_Node_Str"")) {
        mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
      }
 else {
        e.printStackTrace();
        mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_CONNECTION,e,null,""String_Node_Str"");
      }
    }
catch (    Throwable t) {
      t.printStackTrace();
      mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_CONNECTION,t,null,""String_Node_Str"");
    }
  }
}","@Override public void onSuccess(final String mimetype,final Long bodyBytes,final InputStream is){
  final NotifyOutputStream cacheOs;
  final CacheManager.WritableCacheFile cacheFile;
  if (mInitiator.cache) {
    try {
      cacheFile=manager.openNewCacheFile(mInitiator,session,mimetype);
      cacheOs=cacheFile.getOutputStream();
    }
 catch (    IOException e) {
      e.printStackTrace();
      final int failureType;
      if (manager.getPreferredCacheLocation().exists()) {
        failureType=CacheRequest.REQUEST_FAILURE_STORAGE;
      }
 else {
        failureType=CacheRequest.REQUEST_FAILURE_CACHE_DIR_DOES_NOT_EXIST;
      }
      mInitiator.notifyFailure(failureType,e,null,""String_Node_Str"");
      return;
    }
  }
 else {
    cacheOs=null;
    cacheFile=null;
  }
  if (mInitiator.isJson) {
    final InputStream bis;
    if (mInitiator.cache) {
      bis=new BufferedInputStream(new CachingInputStream(is,cacheOs,new CachingInputStream.BytesReadListener(){
        public void onBytesRead(        final long total){
          if (bodyBytes != null) {
            mInitiator.notifyProgress(false,total,bodyBytes);
          }
        }
      }
),64 * 1024);
    }
 else {
      bis=new BufferedInputStream(is,64 * 1024);
    }
    final JsonValue value;
    try {
      value=new JsonValue(bis);
      mInitiator.notifyJsonParseStarted(value,RRTime.utcCurrentTimeMillis(),session,false);
      value.buildInThisThread();
    }
 catch (    Throwable t) {
      t.printStackTrace();
      mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_PARSE,t,null,""String_Node_Str"");
      return;
    }
    if (mInitiator.cache && cacheFile != null) {
      try {
        mInitiator.notifySuccess(cacheFile.getReadableCacheFile(),RRTime.utcCurrentTimeMillis(),session,false,mimetype);
      }
 catch (      IOException e) {
        if (e.getMessage().contains(""String_Node_Str"")) {
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_DISK_SPACE,e,null,""String_Node_Str"");
        }
 else {
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
        }
      }
    }
  }
 else {
    if (!mInitiator.cache) {
      BugReportActivity.handleGlobalError(mInitiator.context,""String_Node_Str"");
      return;
    }
    try {
      final byte[] buf=new byte[64 * 1024];
      int bytesRead;
      long totalBytesRead=0;
      while ((bytesRead=is.read(buf)) > 0) {
        totalBytesRead+=bytesRead;
        cacheOs.write(buf,0,bytesRead);
        if (bodyBytes != null) {
          mInitiator.notifyProgress(false,totalBytesRead,bodyBytes);
        }
      }
      cacheOs.flush();
      cacheOs.close();
      try {
        mInitiator.notifySuccess(cacheFile.getReadableCacheFile(),RRTime.utcCurrentTimeMillis(),session,false,mimetype);
      }
 catch (      IOException e) {
        if (e.getMessage().contains(""String_Node_Str"")) {
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_DISK_SPACE,e,null,""String_Node_Str"");
        }
 else {
          mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
        }
      }
    }
 catch (    IOException e) {
      if (e.getMessage() != null && e.getMessage().contains(""String_Node_Str"")) {
        mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_STORAGE,e,null,""String_Node_Str"");
      }
 else {
        e.printStackTrace();
        mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_CONNECTION,e,null,""String_Node_Str"");
      }
    }
catch (    Throwable t) {
      t.printStackTrace();
      mInitiator.notifyFailure(CacheRequest.REQUEST_FAILURE_CONNECTION,t,null,""String_Node_Str"");
    }
  }
}",0.9622244066844544
15331,"private WritableCacheFile(final CacheRequest request,final UUID session,final String mimetype) throws IOException {
  this.request=request;
  location=PrefsUtility.pref_cache_location(context,PreferenceManager.getDefaultSharedPreferences(context));
  final File tmpFile=new File(location,UUID.randomUUID().toString() + tempExt);
  final FileOutputStream fos=new FileOutputStream(tmpFile);
  final OutputStream bufferedOs=new BufferedOutputStream(fos,64 * 1024);
  final NotifyOutputStream.Listener listener=new NotifyOutputStream.Listener(){
    public void onClose() throws IOException {
      cacheFileId=dbManager.newEntry(request,session,mimetype);
      final File dstFile=new File(location,cacheFileId + ext);
      General.moveFile(tmpFile,dstFile);
      dbManager.setEntryDone(cacheFileId);
      readableCacheFile=new ReadableCacheFile(cacheFileId);
    }
  }
;
  this.os=new NotifyOutputStream(bufferedOs,listener);
}","private WritableCacheFile(final CacheRequest request,final UUID session,final String mimetype) throws IOException {
  this.request=request;
  location=getPreferredCacheLocation();
  final File tmpFile=new File(location,UUID.randomUUID().toString() + tempExt);
  final FileOutputStream fos=new FileOutputStream(tmpFile);
  final OutputStream bufferedOs=new BufferedOutputStream(fos,64 * 1024);
  final NotifyOutputStream.Listener listener=new NotifyOutputStream.Listener(){
    public void onClose() throws IOException {
      cacheFileId=dbManager.newEntry(request,session,mimetype);
      final File dstFile=new File(location,cacheFileId + ext);
      General.moveFile(tmpFile,dstFile);
      dbManager.setEntryDone(cacheFileId);
      readableCacheFile=new ReadableCacheFile(cacheFileId);
    }
  }
;
  this.os=new NotifyOutputStream(bufferedOs,listener);
}",0.93676552881925
15332,"public static List<File> getCacheDirs(Context context){
  List<File> dirs=new ArrayList<>();
  dirs.add(context.getCacheDir());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    Collections.addAll(dirs,context.getExternalCacheDirs());
  }
 else {
    File extDir=context.getExternalCacheDir();
    if (extDir != null)     dirs.add(extDir);
  }
  return dirs;
}","public static List<File> getCacheDirs(Context context){
  final ArrayList<File> dirs=new ArrayList<>();
  dirs.add(context.getCacheDir());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    for (    final File dir : context.getExternalCacheDirs()) {
      if (dir != null) {
        dirs.add(dir);
      }
    }
  }
 else {
    final File extDir=context.getExternalCacheDir();
    if (extDir != null) {
      dirs.add(extDir);
    }
  }
  return dirs;
}",0.5605700712589073
15333,"@Override public int hashCode(){
  return username.toLowerCase().hashCode();
}","@Override public int hashCode(){
  return getCanonicalUsername().hashCode();
}",0.8333333333333334
15334,"private static void add(final BaseActivity activity,final Menu menu,final Option option,final boolean longText){
switch (option) {
case ACCOUNTS:
    menu.add(activity.getString(R.string.options_accounts)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      final MenuItem item){
        new AccountListDialog().show(activity.getSupportFragmentManager(),null);
        return true;
      }
    }
);
  break;
case SETTINGS:
menu.add(activity.getString(R.string.options_settings)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
  public boolean onMenuItemClick(  final MenuItem item){
    final Intent intent=new Intent(activity,SettingsActivity.class);
    activity.startActivityForResult(intent,1);
    return true;
  }
}
);
break;
case CLOSE_ALL:
if (!(activity instanceof MainActivity)) {
menu.add(activity.getString(R.string.options_close_all)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
  activity.closeAllExceptMain();
  return true;
}
}
);
}
break;
case THEMES:
menu.add(activity.getString(R.string.options_theme)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(activity);
final PrefsUtility.AppearanceTheme currentTheme=PrefsUtility.appearance_theme(activity,prefs);
final String[] themeNames=activity.getResources().getStringArray(R.array.pref_appearance_theme);
final String[] themeValues=activity.getResources().getStringArray(R.array.pref_appearance_theme_return);
int selectedPos=-1;
for (int i=0; i < themeValues.length; i++) {
if (PrefsUtility.AppearanceTheme.valueOf(themeValues[i].toUpperCase()).equals(currentTheme)) {
selectedPos=i;
break;
}
}
final AlertDialog.Builder dialog=new AlertDialog.Builder(activity);
dialog.setTitle(R.string.pref_appearance_theme_title);
dialog.setSingleChoiceItems(themeNames,selectedPos,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int item){
final SharedPreferences.Editor editor=prefs.edit();
editor.putString(activity.getString(R.string.pref_appearance_theme_key),themeValues[item]);
editor.apply();
dialog.dismiss();
}
}
);
final AlertDialog alert=dialog.create();
alert.show();
return true;
}
}
);
break;
case REFRESH_SUBREDDITS:
final MenuItem refreshSubreddits=menu.add(activity.getString(R.string.options_refresh_subreddits)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuSubredditsListener)activity).onRefreshSubreddits();
return true;
}
}
);
refreshSubreddits.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
if (!longText) refreshSubreddits.setIcon(R.drawable.ic_refresh_dark);
break;
case REFRESH_POSTS:
final MenuItem refreshPosts=menu.add(activity.getString(R.string.options_refresh_posts)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onRefreshPosts();
return true;
}
}
);
refreshPosts.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
if (!longText) refreshPosts.setIcon(R.drawable.ic_refresh_dark);
break;
case SUBMIT_POST:
menu.add(activity.getString(R.string.options_submit_post)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onSubmitPost();
return true;
}
}
);
break;
case SEARCH:
menu.add(Menu.NONE,Menu.NONE,1,activity.getString(R.string.action_search)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
if (activity instanceof OptionsMenuPostsListener) {
((OptionsMenuPostsListener)activity).onSearchPosts();
return true;
}
 else if (activity instanceof OptionsMenuCommentsListener) {
((OptionsMenuCommentsListener)activity).onSearchComments();
return true;
}
 else {
return false;
}
}
}
);
break;
case SEARCH_COMMENTS:
menu.add(Menu.NONE,Menu.NONE,1,activity.getString(R.string.action_search_comments)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
@Override public boolean onMenuItemClick(MenuItem item){
if (activity instanceof OptionsMenuCommentsListener) {
((OptionsMenuCommentsListener)activity).onSearchComments();
return true;
}
return false;
}
}
);
break;
case REFRESH_COMMENTS:
final MenuItem refreshComments=menu.add(activity.getString(R.string.options_refresh_comments)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuCommentsListener)activity).onRefreshComments();
return true;
}
}
);
refreshComments.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
if (!longText) refreshComments.setIcon(R.drawable.ic_refresh_dark);
break;
case PAST_POSTS:
menu.add(activity.getString(longText ? R.string.options_past_posts : R.string.options_past)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onPastPosts();
return true;
}
}
);
break;
case PAST_COMMENTS:
menu.add(activity.getString(longText ? R.string.options_past_comments : R.string.options_past)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuCommentsListener)activity).onPastComments();
return true;
}
}
);
break;
case SUBSCRIBE:
menu.add(activity.getString(R.string.options_subscribe)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onSubscribe();
return true;
}
}
);
break;
case UNSUBSCRIBE:
menu.add(activity.getString(R.string.options_unsubscribe)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onUnsubscribe();
return true;
}
}
);
break;
case UNSUBSCRIBING:
menu.add(activity.getString(R.string.options_unsubscribing)).setEnabled(false);
break;
case SUBSCRIBING:
menu.add(activity.getString(R.string.options_subscribing)).setEnabled(false);
break;
case SIDEBAR:
menu.add(activity.getString(R.string.options_sidebar)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onSidebar();
return true;
}
}
);
break;
case PIN:
menu.add(activity.getString(R.string.pin_subreddit)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onPin();
return true;
}
}
);
break;
case UNPIN:
menu.add(activity.getString(R.string.unpin_subreddit)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onUnpin();
return true;
}
}
);
break;
case BLOCK:
menu.add(activity.getString(R.string.block_subreddit)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onBlock();
return true;
}
}
);
break;
case UNBLOCK:
menu.add(activity.getString(R.string.unblock_subreddit)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onUnblock();
return true;
}
}
);
break;
default :
BugReportActivity.handleGlobalError(activity,""String_Node_Str"");
}
}","private static void add(final BaseActivity activity,final Menu menu,final Option option,final boolean longText){
switch (option) {
case ACCOUNTS:
    menu.add(activity.getString(R.string.options_accounts)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
      public boolean onMenuItemClick(      final MenuItem item){
        new AccountListDialog().show(activity.getSupportFragmentManager(),null);
        return true;
      }
    }
);
  break;
case SETTINGS:
menu.add(activity.getString(R.string.options_settings)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
  public boolean onMenuItemClick(  final MenuItem item){
    final Intent intent=new Intent(activity,SettingsActivity.class);
    activity.startActivityForResult(intent,1);
    return true;
  }
}
);
break;
case CLOSE_ALL:
if (!(activity instanceof MainActivity)) {
menu.add(activity.getString(R.string.options_close_all)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
  activity.closeAllExceptMain();
  return true;
}
}
);
}
break;
case THEMES:
menu.add(activity.getString(R.string.options_theme)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(activity);
final PrefsUtility.AppearanceTheme currentTheme=PrefsUtility.appearance_theme(activity,prefs);
final String[] themeNames=activity.getResources().getStringArray(R.array.pref_appearance_theme);
final String[] themeValues=activity.getResources().getStringArray(R.array.pref_appearance_theme_return);
int selectedPos=-1;
for (int i=0; i < themeValues.length; i++) {
if (PrefsUtility.AppearanceTheme.valueOf(General.asciiUppercase(themeValues[i])).equals(currentTheme)) {
selectedPos=i;
break;
}
}
final AlertDialog.Builder dialog=new AlertDialog.Builder(activity);
dialog.setTitle(R.string.pref_appearance_theme_title);
dialog.setSingleChoiceItems(themeNames,selectedPos,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int item){
final SharedPreferences.Editor editor=prefs.edit();
editor.putString(activity.getString(R.string.pref_appearance_theme_key),themeValues[item]);
editor.apply();
dialog.dismiss();
}
}
);
final AlertDialog alert=dialog.create();
alert.show();
return true;
}
}
);
break;
case REFRESH_SUBREDDITS:
final MenuItem refreshSubreddits=menu.add(activity.getString(R.string.options_refresh_subreddits)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuSubredditsListener)activity).onRefreshSubreddits();
return true;
}
}
);
refreshSubreddits.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
if (!longText) refreshSubreddits.setIcon(R.drawable.ic_refresh_dark);
break;
case REFRESH_POSTS:
final MenuItem refreshPosts=menu.add(activity.getString(R.string.options_refresh_posts)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onRefreshPosts();
return true;
}
}
);
refreshPosts.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
if (!longText) refreshPosts.setIcon(R.drawable.ic_refresh_dark);
break;
case SUBMIT_POST:
menu.add(activity.getString(R.string.options_submit_post)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onSubmitPost();
return true;
}
}
);
break;
case SEARCH:
menu.add(Menu.NONE,Menu.NONE,1,activity.getString(R.string.action_search)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
if (activity instanceof OptionsMenuPostsListener) {
((OptionsMenuPostsListener)activity).onSearchPosts();
return true;
}
 else if (activity instanceof OptionsMenuCommentsListener) {
((OptionsMenuCommentsListener)activity).onSearchComments();
return true;
}
 else {
return false;
}
}
}
);
break;
case SEARCH_COMMENTS:
menu.add(Menu.NONE,Menu.NONE,1,activity.getString(R.string.action_search_comments)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
@Override public boolean onMenuItemClick(MenuItem item){
if (activity instanceof OptionsMenuCommentsListener) {
((OptionsMenuCommentsListener)activity).onSearchComments();
return true;
}
return false;
}
}
);
break;
case REFRESH_COMMENTS:
final MenuItem refreshComments=menu.add(activity.getString(R.string.options_refresh_comments)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuCommentsListener)activity).onRefreshComments();
return true;
}
}
);
refreshComments.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
if (!longText) refreshComments.setIcon(R.drawable.ic_refresh_dark);
break;
case PAST_POSTS:
menu.add(activity.getString(longText ? R.string.options_past_posts : R.string.options_past)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onPastPosts();
return true;
}
}
);
break;
case PAST_COMMENTS:
menu.add(activity.getString(longText ? R.string.options_past_comments : R.string.options_past)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuCommentsListener)activity).onPastComments();
return true;
}
}
);
break;
case SUBSCRIBE:
menu.add(activity.getString(R.string.options_subscribe)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onSubscribe();
return true;
}
}
);
break;
case UNSUBSCRIBE:
menu.add(activity.getString(R.string.options_unsubscribe)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onUnsubscribe();
return true;
}
}
);
break;
case UNSUBSCRIBING:
menu.add(activity.getString(R.string.options_unsubscribing)).setEnabled(false);
break;
case SUBSCRIBING:
menu.add(activity.getString(R.string.options_subscribing)).setEnabled(false);
break;
case SIDEBAR:
menu.add(activity.getString(R.string.options_sidebar)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onSidebar();
return true;
}
}
);
break;
case PIN:
menu.add(activity.getString(R.string.pin_subreddit)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onPin();
return true;
}
}
);
break;
case UNPIN:
menu.add(activity.getString(R.string.unpin_subreddit)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onUnpin();
return true;
}
}
);
break;
case BLOCK:
menu.add(activity.getString(R.string.block_subreddit)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onBlock();
return true;
}
}
);
break;
case UNBLOCK:
menu.add(activity.getString(R.string.unblock_subreddit)).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
public boolean onMenuItemClick(final MenuItem item){
((OptionsMenuPostsListener)activity).onUnblock();
return true;
}
}
);
break;
default :
BugReportActivity.handleGlobalError(activity,""String_Node_Str"");
}
}",0.9976729153199742
15335,"private Collection<GroupedRecyclerViewAdapter.Item> filter(Collection<RedditCommentListItem> comments){
  final Collection<RedditCommentListItem> searchComments;
  if (mSearchString == null) {
    searchComments=comments;
  }
 else {
    searchComments=new ArrayList<>();
    for (    RedditCommentListItem comment : comments) {
      if (!comment.isComment())       continue;
      String commentStr=comment.asComment().getParsedComment().getRawComment().body;
      if (commentStr != null) {
        commentStr=commentStr.toLowerCase();
        if (commentStr.contains(mSearchString)) {
          searchComments.add(comment);
        }
      }
    }
  }
  return Collections.<GroupedRecyclerViewAdapter.Item>unmodifiableCollection(searchComments);
}","private Collection<GroupedRecyclerViewAdapter.Item> filter(Collection<RedditCommentListItem> comments){
  final Collection<RedditCommentListItem> searchComments;
  if (mSearchString == null) {
    searchComments=comments;
  }
 else {
    searchComments=new ArrayList<>();
    for (    RedditCommentListItem comment : comments) {
      if (!comment.isComment())       continue;
      String commentStr=comment.asComment().getParsedComment().getRawComment().body;
      if (commentStr != null) {
        commentStr=General.asciiLowercase(commentStr);
        if (commentStr.contains(mSearchString)) {
          searchComments.add(comment);
        }
      }
    }
  }
  return Collections.<GroupedRecyclerViewAdapter.Item>unmodifiableCollection(searchComments);
}",0.9695767195767196
15336,"public static boolean isImage(String mimetype){
  return mimetype.toLowerCase().startsWith(""String_Node_Str"");
}","public static boolean isImage(String mimetype){
  return General.asciiLowercase(mimetype).startsWith(""String_Node_Str"");
}",0.8461538461538461
15337,"@Override public void onClick(DialogInterface dialog,int which){
  final String query=editText.getText().toString().toLowerCase().trim();
  if (StringUtils.isEmpty(query)) {
    listener.onSearch(null);
  }
 else {
    listener.onSearch(query);
  }
}","@Override public void onClick(DialogInterface dialog,int which){
  final String query=General.asciiLowercase(editText.getText().toString()).trim();
  if (StringUtils.isEmpty(query)) {
    listener.onSearch(null);
  }
 else {
    listener.onSearch(query);
  }
}",0.9294117647058824
15338,"public static void showSearchDialog(Context context,int titleRes,final OnSearchListener listener){
  final AlertDialog.Builder alertBuilder=new AlertDialog.Builder(context);
  final EditText editText=(EditText)LayoutInflater.from(context).inflate(R.layout.dialog_editbox,null);
  alertBuilder.setView(editText);
  alertBuilder.setTitle(titleRes);
  alertBuilder.setPositiveButton(R.string.action_search,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final String query=editText.getText().toString().toLowerCase().trim();
      if (StringUtils.isEmpty(query)) {
        listener.onSearch(null);
      }
 else {
        listener.onSearch(query);
      }
    }
  }
);
  alertBuilder.setNegativeButton(R.string.dialog_cancel,null);
  final AlertDialog alertDialog=alertBuilder.create();
  alertDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
  alertDialog.show();
}","public static void showSearchDialog(Context context,int titleRes,final OnSearchListener listener){
  final AlertDialog.Builder alertBuilder=new AlertDialog.Builder(context);
  final EditText editText=(EditText)LayoutInflater.from(context).inflate(R.layout.dialog_editbox,null);
  alertBuilder.setView(editText);
  alertBuilder.setTitle(titleRes);
  alertBuilder.setPositiveButton(R.string.action_search,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final String query=General.asciiLowercase(editText.getText().toString()).trim();
      if (StringUtils.isEmpty(query)) {
        listener.onSearch(null);
      }
 else {
        listener.onSearch(query);
      }
    }
  }
);
  alertBuilder.setNegativeButton(R.string.dialog_cancel,null);
  final AlertDialog alertDialog=alertBuilder.create();
  alertDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
  alertDialog.show();
}",0.9572736520854528
15339,"private static String getImageUrlPatternMatch(final String url){
  final String urlLower=url.toLowerCase();
  final String[] imageExtensions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  final String ext : imageExtensions) {
    if (urlLower.endsWith(ext)) {
      return url;
    }
  }
  if (url.contains(""String_Node_Str"")) {
    final String urlBeforeQ=urlLower.split(""String_Node_Str"")[0];
    for (    final String ext : imageExtensions) {
      if (urlBeforeQ.endsWith(ext)) {
        return url;
      }
    }
  }
  final Matcher matchQkme1=qkmePattern1.matcher(url);
  if (matchQkme1.find()) {
    final String imgId=matchQkme1.group(1);
    if (imgId.length() > 2)     return String.format(""String_Node_Str"",imgId);
  }
  final Matcher matchQkme2=qkmePattern2.matcher(url);
  if (matchQkme2.find()) {
    final String imgId=matchQkme2.group(1);
    if (imgId.length() > 2)     return String.format(""String_Node_Str"",imgId);
  }
  final Matcher matchLvme=lvmePattern.matcher(url);
  if (matchLvme.find()) {
    final String imgId=matchLvme.group(1);
    if (imgId.length() > 2)     return String.format(""String_Node_Str"",imgId);
  }
  return null;
}","private static String getImageUrlPatternMatch(final String url){
  final String urlLower=General.asciiLowercase(url);
  final String[] imageExtensions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  final String ext : imageExtensions) {
    if (urlLower.endsWith(ext)) {
      return url;
    }
  }
  if (url.contains(""String_Node_Str"")) {
    final String urlBeforeQ=urlLower.split(""String_Node_Str"")[0];
    for (    final String ext : imageExtensions) {
      if (urlBeforeQ.endsWith(ext)) {
        return url;
      }
    }
  }
  final Matcher matchQkme1=qkmePattern1.matcher(url);
  if (matchQkme1.find()) {
    final String imgId=matchQkme1.group(1);
    if (imgId.length() > 2)     return String.format(""String_Node_Str"",imgId);
  }
  final Matcher matchQkme2=qkmePattern2.matcher(url);
  if (matchQkme2.find()) {
    final String imgId=matchQkme2.group(1);
    if (imgId.length() > 2)     return String.format(""String_Node_Str"",imgId);
  }
  final Matcher matchLvme=lvmePattern.matcher(url);
  if (matchLvme.find()) {
    final String imgId=matchLvme.group(1);
    if (imgId.length() > 2)     return String.format(""String_Node_Str"",imgId);
  }
  return null;
}",0.9908256880733946
15340,"public static boolean pref_pinned_subreddits_check(final Context context,final SharedPreferences sharedPreferences,final String subreddit) throws RedditSubreddit.InvalidSubredditNameException {
  final List<String> list=pref_pinned_subreddits(context,sharedPreferences);
  for (  final String existingSr : list) {
    if (subreddit.toLowerCase().equals(existingSr.toLowerCase()))     return true;
  }
  return false;
}","public static boolean pref_pinned_subreddits_check(final Context context,final SharedPreferences sharedPreferences,final String subreddit) throws RedditSubreddit.InvalidSubredditNameException {
  final List<String> list=pref_pinned_subreddits(context,sharedPreferences);
  for (  final String existingSr : list) {
    if (General.asciiLowercase(subreddit).equals(General.asciiLowercase(existingSr)))     return true;
  }
  return false;
}",0.9088785046728972
15341,"public static boolean pref_blocked_subreddits_check(final Context context,final SharedPreferences sharedPreferences,final String subreddit) throws RedditSubreddit.InvalidSubredditNameException {
  final List<String> list=pref_blocked_subreddits(context,sharedPreferences);
  for (  final String existingSr : list) {
    if (subreddit.toLowerCase().equals(existingSr.toLowerCase()))     return true;
  }
  return false;
}","public static boolean pref_blocked_subreddits_check(final Context context,final SharedPreferences sharedPreferences,final String subreddit) throws RedditSubreddit.InvalidSubredditNameException {
  final List<String> list=pref_blocked_subreddits(context,sharedPreferences);
  for (  final String existingSr : list) {
    if (General.asciiLowercase(subreddit).equals(General.asciiLowercase(existingSr)))     return true;
  }
  return false;
}",0.9093023255813952
15342,"public static EnumSet<AppearanceCommentHeaderItem> appearance_comment_header_items(final Context context,final SharedPreferences sharedPreferences){
  final Set<String> strings=getStringSet(R.string.pref_appearance_comment_header_items_key,R.array.pref_appearance_comment_header_items_default,context,sharedPreferences);
  final EnumSet<AppearanceCommentHeaderItem> result=EnumSet.noneOf(AppearanceCommentHeaderItem.class);
  for (  String s : strings) {
    if (s.equalsIgnoreCase(""String_Node_Str""))     continue;
    try {
      result.add(AppearanceCommentHeaderItem.valueOf(s.toUpperCase()));
    }
 catch (    IllegalArgumentException e) {
    }
  }
  return result;
}","public static EnumSet<AppearanceCommentHeaderItem> appearance_comment_header_items(final Context context,final SharedPreferences sharedPreferences){
  final Set<String> strings=getStringSet(R.string.pref_appearance_comment_header_items_key,R.array.pref_appearance_comment_header_items_default,context,sharedPreferences);
  final EnumSet<AppearanceCommentHeaderItem> result=EnumSet.noneOf(AppearanceCommentHeaderItem.class);
  for (  String s : strings) {
    if (s.equalsIgnoreCase(""String_Node_Str""))     continue;
    try {
      result.add(AppearanceCommentHeaderItem.valueOf(General.asciiUppercase(s)));
    }
 catch (    IllegalArgumentException e) {
    }
  }
  return result;
}",0.979381443298969
15343,"private static void pref_subreddits_remove(Context context,SharedPreferences sharedPreferences,String subreddit,int prefId) throws RedditSubreddit.InvalidSubredditNameException {
  final String name=RedditSubreddit.getCanonicalName(subreddit);
  final String value=getString(prefId,""String_Node_Str"",context,sharedPreferences);
  final ArrayList<String> list=WritableHashSet.escapedStringToList(value);
  list.add(name);
  final ArrayList<String> result=new ArrayList<>(list.size());
  for (  final String existingSr : list) {
    if (!name.toLowerCase().equals(existingSr.toLowerCase())) {
      result.add(existingSr);
    }
  }
  final String resultStr=WritableHashSet.listToEscapedString(result);
  sharedPreferences.edit().putString(context.getString(prefId),resultStr).apply();
}","private static void pref_subreddits_remove(Context context,SharedPreferences sharedPreferences,String subreddit,int prefId) throws RedditSubreddit.InvalidSubredditNameException {
  final String name=RedditSubreddit.getCanonicalName(subreddit);
  final String value=getString(prefId,""String_Node_Str"",context,sharedPreferences);
  final ArrayList<String> list=WritableHashSet.escapedStringToList(value);
  list.add(name);
  final ArrayList<String> result=new ArrayList<>(list.size());
  for (  final String existingSr : list) {
    if (!General.asciiLowercase(name).equals(General.asciiLowercase(existingSr))) {
      result.add(existingSr);
    }
  }
  final String resultStr=WritableHashSet.listToEscapedString(result);
  sharedPreferences.edit().putString(context.getString(prefId),resultStr).apply();
}",0.9509433962264152
15344,"public static Sort parseSort(String string){
  Sort[] sorts=Sort.values();
  for (  Sort sort : sorts)   if (sort.name().toLowerCase().contentEquals(string))   return sort;
  return null;
}","public static Sort parseSort(String string){
  Sort[] sorts=Sort.values();
  for (  Sort sort : sorts)   if (General.asciiLowercase(sort.name()).contentEquals(string))   return sort;
  return null;
}",0.9072164948453608
15345,"public int compareTo(final RedditSubreddit another){
  return display_name.toLowerCase().compareTo(another.display_name.toLowerCase());
}","public int compareTo(final RedditSubreddit another){
  return General.asciiLowercase(display_name).compareTo(General.asciiLowercase(another.display_name));
}",0.7551020408163265
15346,"public static Sort lookup(String name){
  name=name.toUpperCase();
  if (name.equals(""String_Node_Str"")) {
    return BEST;
  }
  try {
    return Sort.valueOf(name);
  }
 catch (  IllegalArgumentException e) {
    return null;
  }
}","public static Sort lookup(String name){
  name=General.asciiUppercase(name);
  if (name.equals(""String_Node_Str"")) {
    return BEST;
  }
  try {
    return Sort.valueOf(name);
  }
 catch (  IllegalArgumentException e) {
    return null;
  }
}",0.9327731092436976
15347,"public static PostCommentListingURL parse(final Uri uri){
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (segment.toLowerCase().endsWith(""String_Node_Str"") || segment.toLowerCase().endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      pathSegmentsFiltered.add(segment);
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  if (pathSegments.length == 1 && uri.getHost().equals(""String_Node_Str"")) {
    return new PostCommentListingURL(null,pathSegments[0],null,null,null,null);
  }
  if (pathSegments.length < 2) {
    return null;
  }
  int offset=0;
  if (pathSegments[0].equalsIgnoreCase(""String_Node_Str"")) {
    offset=2;
    if (pathSegments.length - offset < 2) {
      return null;
    }
  }
  if (!pathSegments[offset].equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  final String postId;
  String commentId=null;
  postId=pathSegments[offset + 1];
  offset+=2;
  if (pathSegments.length - offset >= 2) {
    commentId=pathSegments[offset + 1];
  }
  String after=null;
  Integer limit=null;
  Integer context=null;
  Sort order=null;
  for (  final String parameterKey : General.getUriQueryParameterNames(uri)) {
    if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      after=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        limit=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        context=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      order=Sort.lookup(uri.getQueryParameter(parameterKey));
    }
  }
  return new PostCommentListingURL(after,postId,commentId,context,limit,order);
}","public static PostCommentListingURL parse(final Uri uri){
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (General.asciiLowercase(segment).endsWith(""String_Node_Str"") || General.asciiLowercase(segment).endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      pathSegmentsFiltered.add(segment);
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  if (pathSegments.length == 1 && uri.getHost().equals(""String_Node_Str"")) {
    return new PostCommentListingURL(null,pathSegments[0],null,null,null,null);
  }
  if (pathSegments.length < 2) {
    return null;
  }
  int offset=0;
  if (pathSegments[0].equalsIgnoreCase(""String_Node_Str"")) {
    offset=2;
    if (pathSegments.length - offset < 2) {
      return null;
    }
  }
  if (!pathSegments[offset].equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  final String postId;
  String commentId=null;
  postId=pathSegments[offset + 1];
  offset+=2;
  if (pathSegments.length - offset >= 2) {
    commentId=pathSegments[offset + 1];
  }
  String after=null;
  Integer limit=null;
  Integer context=null;
  Sort order=null;
  for (  final String parameterKey : General.getUriQueryParameterNames(uri)) {
    if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      after=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        limit=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        context=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      order=Sort.lookup(uri.getQueryParameter(parameterKey));
    }
  }
  return new PostCommentListingURL(after,postId,commentId,context,limit,order);
}",0.9817601459188326
15348,"private static boolean isRedditUri(Uri uri){
  if (uri == null || uri.getHost() == null)   return false;
  final String[] hostSegments=uri.getHost().toLowerCase().split(""String_Node_Str"");
  if (hostSegments.length < 2)   return false;
  if (hostSegments[hostSegments.length - 1].equals(""String_Node_Str"") && hostSegments[hostSegments.length - 2].equals(""String_Node_Str""))   return true;
  if (hostSegments[hostSegments.length - 1].equals(""String_Node_Str"") && hostSegments[hostSegments.length - 2].equals(""String_Node_Str""))   return true;
  return false;
}","private static boolean isRedditUri(Uri uri){
  if (uri == null || uri.getHost() == null)   return false;
  final String[] hostSegments=General.asciiLowercase(uri.getHost()).split(""String_Node_Str"");
  if (hostSegments.length < 2)   return false;
  if (hostSegments[hostSegments.length - 1].equals(""String_Node_Str"") && hostSegments[hostSegments.length - 2].equals(""String_Node_Str""))   return true;
  if (hostSegments[hostSegments.length - 1].equals(""String_Node_Str"") && hostSegments[hostSegments.length - 2].equals(""String_Node_Str""))   return true;
  return false;
}",0.9680851063829788
15349,"@Override public Uri generateJsonUri(){
  Uri.Builder builder=new Uri.Builder();
  builder.scheme(Constants.Reddit.getScheme()).authority(Constants.Reddit.getDomain());
  if (subreddit != null) {
    builder.encodedPath(""String_Node_Str"");
    builder.appendPath(subreddit);
    builder.appendQueryParameter(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    builder.encodedPath(""String_Node_Str"");
  }
  builder.appendEncodedPath(""String_Node_Str"");
  if (query != null) {
    builder.appendQueryParameter(""String_Node_Str"",query);
  }
  if (order != null) {
switch (order) {
case RELEVANCE:
case NEW:
case HOT:
case TOP:
case COMMENTS:
      builder.appendQueryParameter(""String_Node_Str"",order.name().toLowerCase());
    break;
}
}
if (before != null) {
builder.appendQueryParameter(""String_Node_Str"",before);
}
if (after != null) {
builder.appendQueryParameter(""String_Node_Str"",after);
}
if (limit != null) {
builder.appendQueryParameter(""String_Node_Str"",String.valueOf(limit));
}
builder.appendEncodedPath(""String_Node_Str"");
return builder.build();
}","@Override public Uri generateJsonUri(){
  Uri.Builder builder=new Uri.Builder();
  builder.scheme(Constants.Reddit.getScheme()).authority(Constants.Reddit.getDomain());
  if (subreddit != null) {
    builder.encodedPath(""String_Node_Str"");
    builder.appendPath(subreddit);
    builder.appendQueryParameter(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    builder.encodedPath(""String_Node_Str"");
  }
  builder.appendEncodedPath(""String_Node_Str"");
  if (query != null) {
    builder.appendQueryParameter(""String_Node_Str"",query);
  }
  if (order != null) {
switch (order) {
case RELEVANCE:
case NEW:
case HOT:
case TOP:
case COMMENTS:
      builder.appendQueryParameter(""String_Node_Str"",General.asciiLowercase(order.name()));
    break;
}
}
if (before != null) {
builder.appendQueryParameter(""String_Node_Str"",before);
}
if (after != null) {
builder.appendQueryParameter(""String_Node_Str"",after);
}
if (limit != null) {
builder.appendQueryParameter(""String_Node_Str"",String.valueOf(limit));
}
builder.appendEncodedPath(""String_Node_Str"");
return builder.build();
}",0.9765478424015008
15350,"public static SearchPostListURL parse(final Uri uri){
  boolean restrict_sr=false;
  String query=""String_Node_Str"";
  PostListingController.Sort order=null;
  Integer limit=null;
  String before=null, after=null;
  for (  final String parameterKey : General.getUriQueryParameterNames(uri)) {
    if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      after=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      before=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        limit=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      order=PostListingController.parseSort(uri.getQueryParameter(parameterKey));
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      query=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      restrict_sr=""String_Node_Str"".equalsIgnoreCase(uri.getQueryParameter(parameterKey));
    }
  }
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (segment.toLowerCase().endsWith(""String_Node_Str"") || segment.toLowerCase().endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      if (segment.length() > 0) {
        pathSegmentsFiltered.add(segment);
      }
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  if (pathSegments.length != 1 && pathSegments.length != 3)   return null;
  if (!pathSegments[pathSegments.length - 1].equalsIgnoreCase(""String_Node_Str""))   return null;
switch (pathSegments.length) {
case 1:
{
      return new SearchPostListURL(null,query,order,limit,before,after);
    }
case 3:
{
    if (!pathSegments[0].equals(""String_Node_Str""))     return null;
    final String subreddit=pathSegments[1];
    return new SearchPostListURL(restrict_sr ? subreddit : null,query,order,limit,before,after);
  }
default :
return null;
}
}","public static SearchPostListURL parse(final Uri uri){
  boolean restrict_sr=false;
  String query=""String_Node_Str"";
  PostListingController.Sort order=null;
  Integer limit=null;
  String before=null, after=null;
  for (  final String parameterKey : General.getUriQueryParameterNames(uri)) {
    if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      after=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      before=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        limit=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      order=PostListingController.parseSort(uri.getQueryParameter(parameterKey));
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      query=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      restrict_sr=""String_Node_Str"".equalsIgnoreCase(uri.getQueryParameter(parameterKey));
    }
  }
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (General.asciiLowercase(segment).endsWith(""String_Node_Str"") || General.asciiLowercase(segment).endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      if (segment.length() > 0) {
        pathSegmentsFiltered.add(segment);
      }
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  if (pathSegments.length != 1 && pathSegments.length != 3)   return null;
  if (!pathSegments[pathSegments.length - 1].equalsIgnoreCase(""String_Node_Str""))   return null;
switch (pathSegments.length) {
case 1:
{
      return new SearchPostListURL(null,query,order,limit,before,after);
    }
case 3:
{
    if (!pathSegments[0].equals(""String_Node_Str""))     return null;
    final String subreddit=pathSegments[1];
    return new SearchPostListURL(restrict_sr ? subreddit : null,query,order,limit,before,after);
  }
default :
return null;
}
}",0.9828913601368692
15351,"@Override public Uri generateJsonUri(){
  Uri.Builder builder=new Uri.Builder();
  builder.scheme(Constants.Reddit.getScheme()).authority(Constants.Reddit.getDomain());
switch (type) {
case FRONTPAGE:
    builder.encodedPath(""String_Node_Str"");
  break;
case ALL:
builder.encodedPath(""String_Node_Str"");
break;
case SUBREDDIT:
case SUBREDDIT_COMBINATION:
case ALL_SUBTRACTION:
builder.encodedPath(""String_Node_Str"");
builder.appendPath(subreddit);
break;
}
if (order != null) {
switch (order) {
case HOT:
case NEW:
case RISING:
case CONTROVERSIAL:
builder.appendEncodedPath(order.name().toLowerCase());
break;
case TOP_HOUR:
case TOP_DAY:
case TOP_WEEK:
case TOP_MONTH:
case TOP_YEAR:
case TOP_ALL:
builder.appendEncodedPath(""String_Node_Str"");
builder.appendQueryParameter(""String_Node_Str"",order.name().split(""String_Node_Str"")[1].toLowerCase());
break;
}
}
if (before != null) {
builder.appendQueryParameter(""String_Node_Str"",before);
}
if (after != null) {
builder.appendQueryParameter(""String_Node_Str"",after);
}
if (limit != null) {
builder.appendQueryParameter(""String_Node_Str"",String.valueOf(limit));
}
builder.appendEncodedPath(""String_Node_Str"");
return builder.build();
}","@Override public Uri generateJsonUri(){
  Uri.Builder builder=new Uri.Builder();
  builder.scheme(Constants.Reddit.getScheme()).authority(Constants.Reddit.getDomain());
switch (type) {
case FRONTPAGE:
    builder.encodedPath(""String_Node_Str"");
  break;
case ALL:
builder.encodedPath(""String_Node_Str"");
break;
case SUBREDDIT:
case SUBREDDIT_COMBINATION:
case ALL_SUBTRACTION:
builder.encodedPath(""String_Node_Str"");
builder.appendPath(subreddit);
break;
}
if (order != null) {
switch (order) {
case HOT:
case NEW:
case RISING:
case CONTROVERSIAL:
builder.appendEncodedPath(General.asciiLowercase(order.name()));
break;
case TOP_HOUR:
case TOP_DAY:
case TOP_WEEK:
case TOP_MONTH:
case TOP_YEAR:
case TOP_ALL:
builder.appendEncodedPath(""String_Node_Str"");
builder.appendQueryParameter(""String_Node_Str"",General.asciiLowercase(order.name().split(""String_Node_Str"")[1]));
break;
}
}
if (before != null) {
builder.appendQueryParameter(""String_Node_Str"",before);
}
if (after != null) {
builder.appendQueryParameter(""String_Node_Str"",after);
}
if (limit != null) {
builder.appendQueryParameter(""String_Node_Str"",String.valueOf(limit));
}
builder.appendEncodedPath(""String_Node_Str"");
return builder.build();
}",0.9698239731768652
15352,"public static SubredditPostListURL parse(final Uri uri){
  Integer limit=null;
  String before=null, after=null;
  for (  final String parameterKey : General.getUriQueryParameterNames(uri)) {
    if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      after=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      before=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        limit=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
  }
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (segment.toLowerCase().endsWith(""String_Node_Str"") || segment.toLowerCase().endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      if (segment.length() > 0) {
        pathSegmentsFiltered.add(segment);
      }
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  final PostListingController.Sort order;
  if (pathSegments.length > 0) {
    order=getOrder(pathSegments[pathSegments.length - 1],uri.getQueryParameter(""String_Node_Str""));
  }
 else {
    order=null;
  }
switch (pathSegments.length) {
case 0:
    return new SubredditPostListURL(Type.FRONTPAGE,null,null,limit,before,after);
case 1:
{
    if (order != null) {
      return new SubredditPostListURL(Type.FRONTPAGE,null,order,limit,before,after);
    }
 else {
      return null;
    }
  }
case 2:
case 3:
{
  if (!pathSegments[0].equals(""String_Node_Str""))   return null;
  final String subreddit=pathSegments[1];
  if (subreddit.equals(""String_Node_Str"")) {
    if (pathSegments.length == 2) {
      return new SubredditPostListURL(Type.ALL,null,null,limit,before,after);
    }
 else     if (order != null) {
      return new SubredditPostListURL(Type.ALL,null,order,limit,before,after);
    }
 else {
      return null;
    }
  }
 else   if (subreddit.matches(""String_Node_Str"")) {
    if (pathSegments.length == 2) {
      return new SubredditPostListURL(Type.ALL_SUBTRACTION,subreddit,null,limit,before,after);
    }
 else     if (order != null) {
      return new SubredditPostListURL(Type.ALL_SUBTRACTION,subreddit,order,limit,before,after);
    }
 else {
      return null;
    }
  }
 else   if (subreddit.matches(""String_Node_Str"")) {
    if (pathSegments.length == 2) {
      return new SubredditPostListURL(Type.SUBREDDIT_COMBINATION,subreddit,null,limit,before,after);
    }
 else     if (order != null) {
      return new SubredditPostListURL(Type.SUBREDDIT_COMBINATION,subreddit,order,limit,before,after);
    }
 else {
      return null;
    }
  }
 else   if (subreddit.matches(""String_Node_Str"")) {
    if (pathSegments.length == 2) {
      return new SubredditPostListURL(Type.SUBREDDIT,subreddit,null,limit,before,after);
    }
 else     if (order != null) {
      return new SubredditPostListURL(Type.SUBREDDIT,subreddit,order,limit,before,after);
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}
default :
return null;
}
}","public static SubredditPostListURL parse(final Uri uri){
  Integer limit=null;
  String before=null, after=null;
  for (  final String parameterKey : General.getUriQueryParameterNames(uri)) {
    if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      after=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      before=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        limit=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
  }
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (General.asciiLowercase(segment).endsWith(""String_Node_Str"") || General.asciiLowercase(segment).endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      if (segment.length() > 0) {
        pathSegmentsFiltered.add(segment);
      }
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  final PostListingController.Sort order;
  if (pathSegments.length > 0) {
    order=getOrder(pathSegments[pathSegments.length - 1],uri.getQueryParameter(""String_Node_Str""));
  }
 else {
    order=null;
  }
switch (pathSegments.length) {
case 0:
    return new SubredditPostListURL(Type.FRONTPAGE,null,null,limit,before,after);
case 1:
{
    if (order != null) {
      return new SubredditPostListURL(Type.FRONTPAGE,null,order,limit,before,after);
    }
 else {
      return null;
    }
  }
case 2:
case 3:
{
  if (!pathSegments[0].equals(""String_Node_Str""))   return null;
  final String subreddit=pathSegments[1];
  if (subreddit.equals(""String_Node_Str"")) {
    if (pathSegments.length == 2) {
      return new SubredditPostListURL(Type.ALL,null,null,limit,before,after);
    }
 else     if (order != null) {
      return new SubredditPostListURL(Type.ALL,null,order,limit,before,after);
    }
 else {
      return null;
    }
  }
 else   if (subreddit.matches(""String_Node_Str"")) {
    if (pathSegments.length == 2) {
      return new SubredditPostListURL(Type.ALL_SUBTRACTION,subreddit,null,limit,before,after);
    }
 else     if (order != null) {
      return new SubredditPostListURL(Type.ALL_SUBTRACTION,subreddit,order,limit,before,after);
    }
 else {
      return null;
    }
  }
 else   if (subreddit.matches(""String_Node_Str"")) {
    if (pathSegments.length == 2) {
      return new SubredditPostListURL(Type.SUBREDDIT_COMBINATION,subreddit,null,limit,before,after);
    }
 else     if (order != null) {
      return new SubredditPostListURL(Type.SUBREDDIT_COMBINATION,subreddit,order,limit,before,after);
    }
 else {
      return null;
    }
  }
 else   if (subreddit.matches(""String_Node_Str"")) {
    if (pathSegments.length == 2) {
      return new SubredditPostListURL(Type.SUBREDDIT,subreddit,null,limit,before,after);
    }
 else     if (order != null) {
      return new SubredditPostListURL(Type.SUBREDDIT,subreddit,order,limit,before,after);
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}
default :
return null;
}
}",0.98796992481203
15353,"@Override public String humanReadablePath(){
  String path=super.humanReadablePath();
  if (order == null) {
    return path;
  }
switch (order) {
case TOP_HOUR:
case TOP_DAY:
case TOP_WEEK:
case TOP_MONTH:
case TOP_YEAR:
case TOP_ALL:
    return path + ""String_Node_Str"" + order.name().split(""String_Node_Str"")[1].toLowerCase();
default :
  return path;
}
}","@Override public String humanReadablePath(){
  String path=super.humanReadablePath();
  if (order == null) {
    return path;
  }
switch (order) {
case TOP_HOUR:
case TOP_DAY:
case TOP_WEEK:
case TOP_MONTH:
case TOP_YEAR:
case TOP_ALL:
    return path + ""String_Node_Str"" + General.asciiLowercase(order.name().split(""String_Node_Str"")[1]);
default :
  return path;
}
}",0.950413223140496
15354,"@Nullable private static PostListingController.Sort getOrder(@Nullable String sort,@Nullable String t){
  if (sort == null) {
    return null;
  }
  sort=sort.toLowerCase();
  t=t != null ? t.toLowerCase() : null;
  if (sort.equals(""String_Node_Str"")) {
    return PostListingController.Sort.HOT;
  }
 else   if (sort.equals(""String_Node_Str"")) {
    return PostListingController.Sort.NEW;
  }
 else   if (sort.equals(""String_Node_Str"")) {
    return PostListingController.Sort.CONTROVERSIAL;
  }
 else   if (sort.equals(""String_Node_Str"")) {
    return PostListingController.Sort.RISING;
  }
 else   if (sort.equals(""String_Node_Str"")) {
    if (t == null)     return PostListingController.Sort.TOP_ALL;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_ALL;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_HOUR;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_DAY;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_WEEK;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_MONTH;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_YEAR;
 else     return PostListingController.Sort.TOP_ALL;
  }
 else {
    return null;
  }
}","@Nullable private static PostListingController.Sort getOrder(@Nullable String sort,@Nullable String t){
  if (sort == null) {
    return null;
  }
  sort=General.asciiLowercase(sort);
  t=t != null ? General.asciiLowercase(t) : null;
  if (sort.equals(""String_Node_Str"")) {
    return PostListingController.Sort.HOT;
  }
 else   if (sort.equals(""String_Node_Str"")) {
    return PostListingController.Sort.NEW;
  }
 else   if (sort.equals(""String_Node_Str"")) {
    return PostListingController.Sort.CONTROVERSIAL;
  }
 else   if (sort.equals(""String_Node_Str"")) {
    return PostListingController.Sort.RISING;
  }
 else   if (sort.equals(""String_Node_Str"")) {
    if (t == null)     return PostListingController.Sort.TOP_ALL;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_ALL;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_HOUR;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_DAY;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_WEEK;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_MONTH;
 else     if (t.equals(""String_Node_Str""))     return PostListingController.Sort.TOP_YEAR;
 else     return PostListingController.Sort.TOP_ALL;
  }
 else {
    return null;
  }
}",0.9769858945805494
15355,"public static UserCommentListingURL parse(Uri uri){
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (segment.toLowerCase().endsWith(""String_Node_Str"") || segment.toLowerCase().endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      if (segment.length() > 0) {
        pathSegmentsFiltered.add(segment);
      }
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  if (pathSegments.length < 3) {
    return null;
  }
  if (!pathSegments[0].equalsIgnoreCase(""String_Node_Str"") && !pathSegments[0].equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  final String username=pathSegments[1];
  final String typeName=pathSegments[2];
  if (!typeName.equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  Integer limit=null;
  String after=null;
  for (  final String parameterKey : General.getUriQueryParameterNames(uri)) {
    if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      after=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        limit=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
  }
  return new UserCommentListingURL(username,limit,after);
}","public static UserCommentListingURL parse(Uri uri){
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (General.asciiLowercase(segment).endsWith(""String_Node_Str"") || General.asciiLowercase(segment).endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      if (segment.length() > 0) {
        pathSegmentsFiltered.add(segment);
      }
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  if (pathSegments.length < 3) {
    return null;
  }
  if (!pathSegments[0].equalsIgnoreCase(""String_Node_Str"") && !pathSegments[0].equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  final String username=pathSegments[1];
  final String typeName=pathSegments[2];
  if (!typeName.equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  Integer limit=null;
  String after=null;
  for (  final String parameterKey : General.getUriQueryParameterNames(uri)) {
    if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      after=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        limit=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
  }
  return new UserCommentListingURL(username,limit,after);
}",0.9738048461034708
15356,"@Override public Uri generateJsonUri(){
  Uri.Builder builder=new Uri.Builder();
  builder.scheme(Constants.Reddit.getScheme()).authority(Constants.Reddit.getDomain());
  builder.appendEncodedPath(""String_Node_Str"");
  builder.appendPath(user);
  builder.appendEncodedPath(type.name().toLowerCase());
  if (before != null) {
    builder.appendQueryParameter(""String_Node_Str"",before);
  }
  if (after != null) {
    builder.appendQueryParameter(""String_Node_Str"",after);
  }
  if (limit != null) {
    builder.appendQueryParameter(""String_Node_Str"",String.valueOf(limit));
  }
  builder.appendEncodedPath(""String_Node_Str"");
  return builder.build();
}","@Override public Uri generateJsonUri(){
  Uri.Builder builder=new Uri.Builder();
  builder.scheme(Constants.Reddit.getScheme()).authority(Constants.Reddit.getDomain());
  builder.appendEncodedPath(""String_Node_Str"");
  builder.appendPath(user);
  builder.appendEncodedPath(General.asciiLowercase(type.name()));
  if (before != null) {
    builder.appendQueryParameter(""String_Node_Str"",before);
  }
  if (after != null) {
    builder.appendQueryParameter(""String_Node_Str"",after);
  }
  if (limit != null) {
    builder.appendQueryParameter(""String_Node_Str"",String.valueOf(limit));
  }
  builder.appendEncodedPath(""String_Node_Str"");
  return builder.build();
}",0.9726027397260274
15357,"public static UserPostListingURL parse(Uri uri){
  Integer limit=null;
  String before=null, after=null;
  for (  final String parameterKey : General.getUriQueryParameterNames(uri)) {
    if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      after=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      before=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        limit=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
  }
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (segment.toLowerCase().endsWith(""String_Node_Str"") || segment.toLowerCase().endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      if (segment.length() > 0) {
        pathSegmentsFiltered.add(segment);
      }
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  if (pathSegments.length < 3) {
    return null;
  }
  if (!pathSegments[0].equalsIgnoreCase(""String_Node_Str"") && !pathSegments[0].equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  final String username=pathSegments[1];
  final String typeName=pathSegments[2].toUpperCase();
  final Type type;
  try {
    type=Type.valueOf(typeName);
  }
 catch (  Throwable t) {
    return null;
  }
  return new UserPostListingURL(type,username,limit,before,after);
}","public static UserPostListingURL parse(Uri uri){
  Integer limit=null;
  String before=null, after=null;
  for (  final String parameterKey : General.getUriQueryParameterNames(uri)) {
    if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      after=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      before=uri.getQueryParameter(parameterKey);
    }
 else     if (parameterKey.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        limit=Integer.parseInt(uri.getQueryParameter(parameterKey));
      }
 catch (      Throwable ignored) {
      }
    }
  }
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (General.asciiLowercase(segment).endsWith(""String_Node_Str"") || General.asciiLowercase(segment).endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      if (segment.length() > 0) {
        pathSegmentsFiltered.add(segment);
      }
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  if (pathSegments.length < 3) {
    return null;
  }
  if (!pathSegments[0].equalsIgnoreCase(""String_Node_Str"") && !pathSegments[0].equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  final String username=pathSegments[1];
  final String typeName=General.asciiUppercase(pathSegments[2]);
  final Type type;
  try {
    type=Type.valueOf(typeName);
  }
 catch (  Throwable t) {
    return null;
  }
  return new UserPostListingURL(type,username,limit,before,after);
}",0.9662986635676932
15358,"public static UserProfileURL parse(Uri uri){
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (segment.toLowerCase().endsWith(""String_Node_Str"") || segment.toLowerCase().endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      if (segment.length() > 0) {
        pathSegmentsFiltered.add(segment);
      }
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  if (pathSegments.length != 2) {
    return null;
  }
  if (!pathSegments[0].equalsIgnoreCase(""String_Node_Str"") && !pathSegments[0].equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  final String username=pathSegments[1];
  return new UserProfileURL(username);
}","public static UserProfileURL parse(Uri uri){
  final String[] pathSegments;
{
    final List<String> pathSegmentsList=uri.getPathSegments();
    final ArrayList<String> pathSegmentsFiltered=new ArrayList<>(pathSegmentsList.size());
    for (    String segment : pathSegmentsList) {
      while (General.asciiLowercase(segment).endsWith(""String_Node_Str"") || General.asciiLowercase(segment).endsWith(""String_Node_Str"")) {
        segment=segment.substring(0,segment.lastIndexOf('.'));
      }
      if (segment.length() > 0) {
        pathSegmentsFiltered.add(segment);
      }
    }
    pathSegments=pathSegmentsFiltered.toArray(new String[pathSegmentsFiltered.size()]);
  }
  if (pathSegments.length != 2) {
    return null;
  }
  if (!pathSegments[0].equalsIgnoreCase(""String_Node_Str"") && !pathSegments[0].equalsIgnoreCase(""String_Node_Str"")) {
    return null;
  }
  final String username=pathSegments[1];
  return new UserProfileURL(username);
}",0.9574468085106383
15359,"@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  super.onPageStarted(view,url,favicon);
  final AppCompatActivity activity=mActivity;
  if (activity != null) {
    activity.setTitle(url);
  }
}","@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  super.onPageStarted(view,url,favicon);
  if (mUrl != null && url != null) {
    final AppCompatActivity activity=mActivity;
    if (activity != null) {
      activity.setTitle(url);
    }
  }
}",0.901010101010101
15360,"@Override public void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  url=getArguments().getString(""String_Node_Str"");
  html=getArguments().getString(""String_Node_Str"");
}","@Override public void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mUrl=getArguments().getString(""String_Node_Str"");
  html=getArguments().getString(""String_Node_Str"");
}",0.9927710843373494
15361,"public String getCurrentUrl(){
  return (currentUrl != null) ? currentUrl : url;
}","public String getCurrentUrl(){
  return (currentUrl != null) ? currentUrl : mUrl;
}",0.9818181818181818
15362,"@SuppressLint(""String_Node_Str"") @Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  mActivity=(AppCompatActivity)getActivity();
  CookieSyncManager.createInstance(mActivity);
  outer=(FrameLayout)inflater.inflate(R.layout.web_view_fragment,null);
  final RedditPost src_post=getArguments().getParcelable(""String_Node_Str"");
  final RedditPreparedPost post;
  if (src_post != null) {
    final RedditParsedPost parsedPost=new RedditParsedPost(src_post,false);
    post=new RedditPreparedPost(mActivity,CacheManager.getInstance(mActivity),0,parsedPost,-1,false,false);
  }
 else {
    post=null;
  }
  webView=(WebViewFixed)outer.findViewById(R.id.web_view_fragment_webviewfixed);
  final FrameLayout loadingViewFrame=(FrameLayout)outer.findViewById(R.id.web_view_fragment_loadingview_frame);
  progressView=new ProgressBar(mActivity,null,android.R.attr.progressBarStyleHorizontal);
  loadingViewFrame.addView(progressView);
  loadingViewFrame.setPadding(General.dpToPixels(mActivity,10),0,General.dpToPixels(mActivity,10),0);
  final WebSettings settings=webView.getSettings();
  settings.setBuiltInZoomControls(true);
  settings.setJavaScriptEnabled(true);
  settings.setJavaScriptCanOpenWindowsAutomatically(false);
  settings.setUseWideViewPort(true);
  settings.setLoadWithOverviewMode(true);
  settings.setDomStorageEnabled(true);
  if (AndroidApi.isHoneyCombOrLater()) {
    settings.setDisplayZoomControls(false);
  }
  webView.setWebChromeClient(new WebChromeClient(){
    @Override public void onProgressChanged(    WebView view,    final int newProgress){
      super.onProgressChanged(view,newProgress);
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        @Override public void run(){
          progressView.setProgress(newProgress);
          progressView.setVisibility(newProgress == 100 ? View.GONE : View.VISIBLE);
        }
      }
);
    }
  }
);
  if (url != null) {
    webView.loadUrl(url);
    webView.setWebViewClient(new WebViewClient(){
      @Override public boolean shouldOverrideUrlLoading(      final WebView view,      final String url){
        if (url == null)         return false;
        if (url.startsWith(""String_Node_Str"")) {
          return true;
        }
        if (goingBack && currentUrl != null && url.equals(currentUrl)) {
          General.quickToast(mActivity,String.format(""String_Node_Str"",-lastBackDepthAttempt),Toast.LENGTH_SHORT);
          lastBackDepthAttempt--;
          if (webView.canGoBackOrForward(lastBackDepthAttempt)) {
            webView.goBackOrForward(lastBackDepthAttempt);
          }
 else {
            mActivity.finish();
          }
        }
 else {
          if (RedditURLParser.parse(Uri.parse(url)) != null) {
            LinkHandler.onLinkClicked(mActivity,url,false);
          }
 else {
            webView.loadUrl(url);
            currentUrl=url;
          }
        }
        return true;
      }
      @Override public void onPageStarted(      WebView view,      String url,      Bitmap favicon){
        super.onPageStarted(view,url,favicon);
        final AppCompatActivity activity=mActivity;
        if (activity != null) {
          activity.setTitle(url);
        }
      }
      @Override public void onPageFinished(      final WebView view,      final String url){
        super.onPageFinished(view,url);
        new Timer().schedule(new TimerTask(){
          @Override public void run(){
            AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
              @Override public void run(){
                if (currentUrl == null || url == null)                 return;
                if (!url.equals(view.getUrl()))                 return;
                if (goingBack && url.equals(currentUrl)) {
                  General.quickToast(mActivity,String.format(""String_Node_Str"",-lastBackDepthAttempt));
                  lastBackDepthAttempt--;
                  if (webView.canGoBackOrForward(lastBackDepthAttempt)) {
                    webView.goBackOrForward(lastBackDepthAttempt);
                  }
 else {
                    mActivity.finish();
                  }
                }
 else {
                  goingBack=false;
                }
              }
            }
);
          }
        }
,1000);
      }
      @Override public void doUpdateVisitedHistory(      WebView view,      String url,      boolean isReload){
        super.doUpdateVisitedHistory(view,url,isReload);
      }
    }
);
  }
 else {
    webView.loadData(html,""String_Node_Str"",null);
  }
  final FrameLayout outerFrame=new FrameLayout(mActivity);
  outerFrame.addView(outer);
  if (post != null) {
    final SideToolbarOverlay toolbarOverlay=new SideToolbarOverlay(mActivity);
    final BezelSwipeOverlay bezelOverlay=new BezelSwipeOverlay(mActivity,new BezelSwipeOverlay.BezelSwipeListener(){
      @Override public boolean onSwipe(      @BezelSwipeOverlay.SwipeEdge int edge){
        toolbarOverlay.setContents(post.generateToolbar(mActivity,false,toolbarOverlay));
        toolbarOverlay.show(edge == BezelSwipeOverlay.LEFT ? SideToolbarOverlay.SideToolbarPosition.LEFT : SideToolbarOverlay.SideToolbarPosition.RIGHT);
        return true;
      }
      @Override public boolean onTap(){
        if (toolbarOverlay.isShown()) {
          toolbarOverlay.hide();
          return true;
        }
        return false;
      }
    }
);
    outerFrame.addView(bezelOverlay);
    outerFrame.addView(toolbarOverlay);
    bezelOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    bezelOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
  }
  return outerFrame;
}","@SuppressLint(""String_Node_Str"") @Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  mActivity=(AppCompatActivity)getActivity();
  CookieSyncManager.createInstance(mActivity);
  outer=(FrameLayout)inflater.inflate(R.layout.web_view_fragment,null);
  final RedditPost src_post=getArguments().getParcelable(""String_Node_Str"");
  final RedditPreparedPost post;
  if (src_post != null) {
    final RedditParsedPost parsedPost=new RedditParsedPost(src_post,false);
    post=new RedditPreparedPost(mActivity,CacheManager.getInstance(mActivity),0,parsedPost,-1,false,false);
  }
 else {
    post=null;
  }
  webView=(WebViewFixed)outer.findViewById(R.id.web_view_fragment_webviewfixed);
  final FrameLayout loadingViewFrame=(FrameLayout)outer.findViewById(R.id.web_view_fragment_loadingview_frame);
  progressView=new ProgressBar(mActivity,null,android.R.attr.progressBarStyleHorizontal);
  loadingViewFrame.addView(progressView);
  loadingViewFrame.setPadding(General.dpToPixels(mActivity,10),0,General.dpToPixels(mActivity,10),0);
  final WebSettings settings=webView.getSettings();
  settings.setBuiltInZoomControls(true);
  settings.setJavaScriptEnabled(true);
  settings.setJavaScriptCanOpenWindowsAutomatically(false);
  settings.setUseWideViewPort(true);
  settings.setLoadWithOverviewMode(true);
  settings.setDomStorageEnabled(true);
  if (AndroidApi.isHoneyCombOrLater()) {
    settings.setDisplayZoomControls(false);
  }
  webView.setWebChromeClient(new WebChromeClient(){
    @Override public void onProgressChanged(    WebView view,    final int newProgress){
      super.onProgressChanged(view,newProgress);
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        @Override public void run(){
          progressView.setProgress(newProgress);
          progressView.setVisibility(newProgress == 100 ? View.GONE : View.VISIBLE);
        }
      }
);
    }
  }
);
  if (mUrl != null) {
    webView.loadUrl(mUrl);
  }
 else {
    webView.loadDataWithBaseURL(""String_Node_Str"",html,""String_Node_Str"",null,null);
  }
  webView.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    final WebView view,    final String url){
      if (url == null)       return false;
      if (url.startsWith(""String_Node_Str"")) {
        return true;
      }
      if (goingBack && currentUrl != null && url.equals(currentUrl)) {
        General.quickToast(mActivity,String.format(""String_Node_Str"",-lastBackDepthAttempt),Toast.LENGTH_SHORT);
        lastBackDepthAttempt--;
        if (webView.canGoBackOrForward(lastBackDepthAttempt)) {
          webView.goBackOrForward(lastBackDepthAttempt);
        }
 else {
          mActivity.finish();
        }
      }
 else {
        if (RedditURLParser.parse(Uri.parse(url)) != null) {
          LinkHandler.onLinkClicked(mActivity,url,false);
        }
 else {
          webView.loadUrl(url);
          currentUrl=url;
        }
      }
      return true;
    }
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      super.onPageStarted(view,url,favicon);
      if (mUrl != null && url != null) {
        final AppCompatActivity activity=mActivity;
        if (activity != null) {
          activity.setTitle(url);
        }
      }
    }
    @Override public void onPageFinished(    final WebView view,    final String url){
      super.onPageFinished(view,url);
      new Timer().schedule(new TimerTask(){
        @Override public void run(){
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            @Override public void run(){
              if (currentUrl == null || url == null)               return;
              if (!url.equals(view.getUrl()))               return;
              if (goingBack && url.equals(currentUrl)) {
                General.quickToast(mActivity,String.format(""String_Node_Str"",-lastBackDepthAttempt));
                lastBackDepthAttempt--;
                if (webView.canGoBackOrForward(lastBackDepthAttempt)) {
                  webView.goBackOrForward(lastBackDepthAttempt);
                }
 else {
                  mActivity.finish();
                }
              }
 else {
                goingBack=false;
              }
            }
          }
);
        }
      }
,1000);
    }
    @Override public void doUpdateVisitedHistory(    WebView view,    String url,    boolean isReload){
      super.doUpdateVisitedHistory(view,url,isReload);
    }
  }
);
  final FrameLayout outerFrame=new FrameLayout(mActivity);
  outerFrame.addView(outer);
  if (post != null) {
    final SideToolbarOverlay toolbarOverlay=new SideToolbarOverlay(mActivity);
    final BezelSwipeOverlay bezelOverlay=new BezelSwipeOverlay(mActivity,new BezelSwipeOverlay.BezelSwipeListener(){
      @Override public boolean onSwipe(      @BezelSwipeOverlay.SwipeEdge int edge){
        toolbarOverlay.setContents(post.generateToolbar(mActivity,false,toolbarOverlay));
        toolbarOverlay.show(edge == BezelSwipeOverlay.LEFT ? SideToolbarOverlay.SideToolbarPosition.LEFT : SideToolbarOverlay.SideToolbarPosition.RIGHT);
        return true;
      }
      @Override public boolean onTap(){
        if (toolbarOverlay.isShown()) {
          toolbarOverlay.hide();
          return true;
        }
        return false;
      }
    }
);
    outerFrame.addView(bezelOverlay);
    outerFrame.addView(toolbarOverlay);
    bezelOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    bezelOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
  }
  return outerFrame;
}",0.9485237811622564
15363,"private Collection<GroupedRecyclerViewAdapter.Item> filter(Collection<RedditCommentListItem> comments){
  Collection<RedditCommentListItem> searchComments;
  if (mSearchString == null) {
    searchComments=comments;
  }
 else {
    searchComments=new ArrayList<>();
    for (    RedditCommentListItem comment : comments) {
      if (!comment.isComment())       continue;
      String commentStr=comment.asComment().getParsedComment().getRawComment().body;
      if (commentStr != null && commentStr.contains(mSearchString)) {
        searchComments.add(comment);
      }
    }
  }
  return Collections.<GroupedRecyclerViewAdapter.Item>unmodifiableCollection(searchComments);
}","private Collection<GroupedRecyclerViewAdapter.Item> filter(Collection<RedditCommentListItem> comments){
  Collection<RedditCommentListItem> searchComments;
  if (mSearchString == null) {
    searchComments=comments;
  }
 else {
    searchComments=new ArrayList<>();
    for (    RedditCommentListItem comment : comments) {
      if (!comment.isComment())       continue;
      String commentStr=comment.asComment().getParsedComment().getRawComment().body;
      if (commentStr != null) {
        commentStr=commentStr.toLowerCase();
        if (commentStr.contains(mSearchString)) {
          searchComments.add(comment);
        }
      }
    }
  }
  return Collections.<GroupedRecyclerViewAdapter.Item>unmodifiableCollection(searchComments);
}",0.9458128078817734
15364,"public void add(final K key,final V value){
  WeakReferenceListManager<V> list=mData.get(key);
  if (list == null) {
    list=new WeakReferenceListManager<>();
    mData.put(key,list);
  }
  list.add(value);
  if (++mCleanupCounter == 0) {
    clean();
  }
}","public synchronized void add(final K key,final V value){
  WeakReferenceListManager<V> list=mData.get(key);
  if (list == null) {
    list=new WeakReferenceListManager<>();
    mData.put(key,list);
  }
  list.add(value);
  if (++mCleanupCounter == 0) {
    clean();
  }
}",0.9754253308128544
15365,"public void clean(){
  final Iterator<Map.Entry<K,WeakReferenceListManager<V>>> iterator=mData.entrySet().iterator();
  while (iterator.hasNext()) {
    final Map.Entry<K,WeakReferenceListManager<V>> entry=iterator.next();
    final WeakReferenceListManager<V> list=entry.getValue();
    list.clean();
    if (list.isEmpty()) {
      iterator.remove();
    }
  }
}","public synchronized void clean(){
  final Iterator<Map.Entry<K,WeakReferenceListManager<V>>> iterator=mData.entrySet().iterator();
  while (iterator.hasNext()) {
    final Map.Entry<K,WeakReferenceListManager<V>> entry=iterator.next();
    final WeakReferenceListManager<V> list=entry.getValue();
    list.clean();
    if (list.isEmpty()) {
      iterator.remove();
    }
  }
}",0.9824561403508772
15366,"public <A>void map(final K key,final WeakReferenceListManager.ArgOperator<V,A> operator,final A arg){
  WeakReferenceListManager<V> list=mData.get(key);
  if (list != null) {
    list.map(operator,arg);
  }
}","public synchronized <A>void map(final K key,final WeakReferenceListManager.ArgOperator<V,A> operator,final A arg){
  WeakReferenceListManager<V> list=mData.get(key);
  if (list != null) {
    list.map(operator,arg);
  }
}",0.9696969696969696
15367,"public void remove(final K key,final V value){
  WeakReferenceListManager<V> list=mData.get(key);
  if (list != null) {
    list.remove(value);
  }
}","public synchronized void remove(final K key,final V value){
  WeakReferenceListManager<V> list=mData.get(key);
  if (list != null) {
    list.remove(value);
  }
}",0.9581993569131833
15368,"@Override public void onRedditDataChange(final String thingIdAndType){
  mListener.onCommentChanged(this);
}","@Override public void onRedditDataChange(final String thingIdAndType){
  HANDLER.dispatchMessage(Message.obtain(HANDLER,HANDLER_REQUEST_COMMENT_CHANGED,this));
}",0.6840148698884758
15369,"@Override protected void onFailure(final RequestFailureType type,Throwable t,StatusLine status,final String readableMessage){
  final RRError error=General.getGeneralErrorForFailure(context,type,t,status,url.toString());
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      mRequest=null;
      setMainView(new ErrorView(ImageViewActivity.this,error));
    }
  }
);
}","@Override protected void onFailure(final RequestFailureType type,Throwable t,StatusLine status,final String readableMessage){
  final RRError error=General.getGeneralErrorForFailure(context,type,t,status,url.toString());
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      mRequest=null;
      final LinearLayout layout=new LinearLayout(context);
      layout.addView(new ErrorView(ImageViewActivity.this,error));
      setMainView(layout);
    }
  }
);
}",0.8828213879408419
15370,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  final boolean solidblack=PrefsUtility.appearance_solidblack(this,sharedPreferences);
  if (solidblack)   getWindow().setBackgroundDrawable(new ColorDrawable(Color.BLACK));
  final Intent intent=getIntent();
  mUrl=intent.getDataString();
  if (mUrl == null) {
    finish();
    return;
  }
  mPost=intent.getParcelableExtra(""String_Node_Str"");
  if (intent.hasExtra(""String_Node_Str"")) {
    ImgurAPI.getAlbumInfo(this,intent.getStringExtra(""String_Node_Str""),Constants.Priority.IMAGE_VIEW,0,new GetAlbumInfoListener(){
      @Override public void onFailure(      final RequestFailureType type,      final Throwable t,      final StatusLine status,      final String readableMessage){
      }
      @Override public void onSuccess(      final ImgurAPI.AlbumInfo info){
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          @Override public void run(){
            mAlbumInfo=info;
            mAlbumImageIndex=intent.getIntExtra(""String_Node_Str"",0);
          }
        }
);
      }
    }
);
  }
  Log.i(""String_Node_Str"",""String_Node_Str"" + mUrl);
  final DonutProgress progressBar=new DonutProgress(this);
  progressBar.setIndeterminate(true);
  progressBar.setFinishedStrokeColor(Color.rgb(200,200,200));
  progressBar.setUnfinishedStrokeColor(Color.rgb(50,50,50));
  final int progressStrokeWidthPx=General.dpToPixels(this,15);
  progressBar.setUnfinishedStrokeWidth(progressStrokeWidthPx);
  progressBar.setFinishedStrokeWidth(progressStrokeWidthPx);
  progressBar.setStartingDegree(-90);
  progressBar.initPainters();
  final RelativeLayout progressLayout=new RelativeLayout(this);
  progressLayout.addView(progressBar);
  final int progressDimensionsPx=General.dpToPixels(this,150);
  progressBar.getLayoutParams().width=progressDimensionsPx;
  progressBar.getLayoutParams().height=progressDimensionsPx;
  ((RelativeLayout.LayoutParams)progressBar.getLayoutParams()).addRule(RelativeLayout.CENTER_IN_PARENT);
  mLayout=new FrameLayout(this);
  mLayout.addView(progressLayout);
  LinkHandler.getImageInfo(this,mUrl,Constants.Priority.IMAGE_VIEW,0,new GetImageInfoListener(){
    @Override public void onFailure(    final RequestFailureType type,    final Throwable t,    final StatusLine status,    final String readableMessage){
      revertToWeb();
    }
    @Override public void onSuccess(    final ImgurAPI.ImageInfo info){
      Log.i(""String_Node_Str"",""String_Node_Str"" + info.urlOriginal);
      final URI uri=General.uriFromString(info.urlOriginal);
      if (uri == null) {
        revertToWeb();
        return;
      }
      CacheManager.getInstance(ImageViewActivity.this).makeRequest(mRequest=new CacheRequest(uri,RedditAccountManager.getAnon(),null,Constants.Priority.IMAGE_VIEW,0,CacheRequest.DownloadType.IF_NECESSARY,Constants.FileType.IMAGE,false,false,false,ImageViewActivity.this){
        @Override protected void onCallbackException(        Throwable t){
          BugReportActivity.handleGlobalError(context.getApplicationContext(),new RRError(null,null,t));
        }
        @Override protected void onDownloadNecessary(){
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            @Override public void run(){
              progressBar.setVisibility(View.VISIBLE);
              progressBar.setIndeterminate(true);
            }
          }
);
        }
        @Override protected void onDownloadStarted(){
        }
        @Override protected void onFailure(        final RequestFailureType type,        Throwable t,        StatusLine status,        final String readableMessage){
          final RRError error=General.getGeneralErrorForFailure(context,type,t,status,url.toString());
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            public void run(){
              mRequest=null;
              setMainView(new ErrorView(ImageViewActivity.this,error));
            }
          }
);
        }
        @Override protected void onProgress(        final boolean authorizationInProgress,        final long bytesRead,        final long totalBytes){
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            @Override public void run(){
              progressBar.setVisibility(View.VISIBLE);
              progressBar.setIndeterminate(authorizationInProgress);
              progressBar.setProgress(((float)((1000 * bytesRead) / totalBytes)) / 1000);
            }
          }
);
        }
        @Override protected void onSuccess(        final CacheManager.ReadableCacheFile cacheFile,        long timestamp,        UUID session,        boolean fromCache,        final String mimetype){
          onImageLoaded(cacheFile,mimetype);
        }
      }
);
    }
    @Override public void onNotAnImage(){
      revertToWeb();
    }
  }
);
  final RedditPreparedPost post=mPost == null ? null : new RedditPreparedPost(this,CacheManager.getInstance(this),0,mPost,-1,false,false,false,false,RedditAccountManager.getInstance(this).getDefaultAccount(),false);
  final FrameLayout outerFrame=new FrameLayout(this);
  outerFrame.addView(mLayout);
  if (post != null) {
    final SideToolbarOverlay toolbarOverlay=new SideToolbarOverlay(this);
    final BezelSwipeOverlay bezelOverlay=new BezelSwipeOverlay(this,new BezelSwipeOverlay.BezelSwipeListener(){
      public boolean onSwipe(      BezelSwipeOverlay.SwipeEdge edge){
        toolbarOverlay.setContents(post.generateToolbar(ImageViewActivity.this,false,toolbarOverlay));
        toolbarOverlay.show(edge == BezelSwipeOverlay.SwipeEdge.LEFT ? SideToolbarOverlay.SideToolbarPosition.LEFT : SideToolbarOverlay.SideToolbarPosition.RIGHT);
        return true;
      }
      public boolean onTap(){
        if (toolbarOverlay.isShown()) {
          toolbarOverlay.hide();
          return true;
        }
        return false;
      }
    }
);
    outerFrame.addView(bezelOverlay);
    outerFrame.addView(toolbarOverlay);
    bezelOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    bezelOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
  }
  setContentView(outerFrame);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  final boolean solidblack=PrefsUtility.appearance_solidblack(this,sharedPreferences);
  if (solidblack)   getWindow().setBackgroundDrawable(new ColorDrawable(Color.BLACK));
  final Intent intent=getIntent();
  mUrl=intent.getDataString();
  if (mUrl == null) {
    finish();
    return;
  }
  mPost=intent.getParcelableExtra(""String_Node_Str"");
  if (intent.hasExtra(""String_Node_Str"")) {
    ImgurAPI.getAlbumInfo(this,intent.getStringExtra(""String_Node_Str""),Constants.Priority.IMAGE_VIEW,0,new GetAlbumInfoListener(){
      @Override public void onFailure(      final RequestFailureType type,      final Throwable t,      final StatusLine status,      final String readableMessage){
      }
      @Override public void onSuccess(      final ImgurAPI.AlbumInfo info){
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          @Override public void run(){
            mAlbumInfo=info;
            mAlbumImageIndex=intent.getIntExtra(""String_Node_Str"",0);
          }
        }
);
      }
    }
);
  }
  Log.i(""String_Node_Str"",""String_Node_Str"" + mUrl);
  final DonutProgress progressBar=new DonutProgress(this);
  progressBar.setIndeterminate(true);
  progressBar.setFinishedStrokeColor(Color.rgb(200,200,200));
  progressBar.setUnfinishedStrokeColor(Color.rgb(50,50,50));
  final int progressStrokeWidthPx=General.dpToPixels(this,15);
  progressBar.setUnfinishedStrokeWidth(progressStrokeWidthPx);
  progressBar.setFinishedStrokeWidth(progressStrokeWidthPx);
  progressBar.setStartingDegree(-90);
  progressBar.initPainters();
  final RelativeLayout progressLayout=new RelativeLayout(this);
  progressLayout.addView(progressBar);
  final int progressDimensionsPx=General.dpToPixels(this,150);
  progressBar.getLayoutParams().width=progressDimensionsPx;
  progressBar.getLayoutParams().height=progressDimensionsPx;
  ((RelativeLayout.LayoutParams)progressBar.getLayoutParams()).addRule(RelativeLayout.CENTER_IN_PARENT);
  mLayout=new FrameLayout(this);
  mLayout.addView(progressLayout);
  LinkHandler.getImageInfo(this,mUrl,Constants.Priority.IMAGE_VIEW,0,new GetImageInfoListener(){
    @Override public void onFailure(    final RequestFailureType type,    final Throwable t,    final StatusLine status,    final String readableMessage){
      revertToWeb();
    }
    @Override public void onSuccess(    final ImgurAPI.ImageInfo info){
      Log.i(""String_Node_Str"",""String_Node_Str"" + info.urlOriginal);
      final URI uri=General.uriFromString(info.urlOriginal);
      if (uri == null) {
        revertToWeb();
        return;
      }
      CacheManager.getInstance(ImageViewActivity.this).makeRequest(mRequest=new CacheRequest(uri,RedditAccountManager.getAnon(),null,Constants.Priority.IMAGE_VIEW,0,CacheRequest.DownloadType.IF_NECESSARY,Constants.FileType.IMAGE,false,false,false,ImageViewActivity.this){
        @Override protected void onCallbackException(        Throwable t){
          BugReportActivity.handleGlobalError(context.getApplicationContext(),new RRError(null,null,t));
        }
        @Override protected void onDownloadNecessary(){
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            @Override public void run(){
              progressBar.setVisibility(View.VISIBLE);
              progressBar.setIndeterminate(true);
            }
          }
);
        }
        @Override protected void onDownloadStarted(){
        }
        @Override protected void onFailure(        final RequestFailureType type,        Throwable t,        StatusLine status,        final String readableMessage){
          final RRError error=General.getGeneralErrorForFailure(context,type,t,status,url.toString());
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            public void run(){
              mRequest=null;
              final LinearLayout layout=new LinearLayout(context);
              layout.addView(new ErrorView(ImageViewActivity.this,error));
              setMainView(layout);
            }
          }
);
        }
        @Override protected void onProgress(        final boolean authorizationInProgress,        final long bytesRead,        final long totalBytes){
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            @Override public void run(){
              progressBar.setVisibility(View.VISIBLE);
              progressBar.setIndeterminate(authorizationInProgress);
              progressBar.setProgress(((float)((1000 * bytesRead) / totalBytes)) / 1000);
            }
          }
);
        }
        @Override protected void onSuccess(        final CacheManager.ReadableCacheFile cacheFile,        long timestamp,        UUID session,        boolean fromCache,        final String mimetype){
          onImageLoaded(cacheFile,mimetype);
        }
      }
);
    }
    @Override public void onNotAnImage(){
      revertToWeb();
    }
  }
);
  final RedditPreparedPost post=mPost == null ? null : new RedditPreparedPost(this,CacheManager.getInstance(this),0,mPost,-1,false,false,false,false,RedditAccountManager.getInstance(this).getDefaultAccount(),false);
  final FrameLayout outerFrame=new FrameLayout(this);
  outerFrame.addView(mLayout);
  if (post != null) {
    final SideToolbarOverlay toolbarOverlay=new SideToolbarOverlay(this);
    final BezelSwipeOverlay bezelOverlay=new BezelSwipeOverlay(this,new BezelSwipeOverlay.BezelSwipeListener(){
      public boolean onSwipe(      BezelSwipeOverlay.SwipeEdge edge){
        toolbarOverlay.setContents(post.generateToolbar(ImageViewActivity.this,false,toolbarOverlay));
        toolbarOverlay.show(edge == BezelSwipeOverlay.SwipeEdge.LEFT ? SideToolbarOverlay.SideToolbarPosition.LEFT : SideToolbarOverlay.SideToolbarPosition.RIGHT);
        return true;
      }
      public boolean onTap(){
        if (toolbarOverlay.isShown()) {
          toolbarOverlay.hide();
          return true;
        }
        return false;
      }
    }
);
    outerFrame.addView(bezelOverlay);
    outerFrame.addView(toolbarOverlay);
    bezelOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    bezelOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
  }
  setContentView(outerFrame);
}",0.9908916953693072
15371,"public static HttpClient createHttpClient(final Context context){
  final HttpParams params=new BasicHttpParams();
  params.setParameter(CoreProtocolPNames.USER_AGENT,Constants.ua(context));
  params.setParameter(CoreConnectionPNames.SO_TIMEOUT,20000);
  params.setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,20000);
  params.setParameter(CoreConnectionPNames.MAX_HEADER_COUNT,100);
  params.setParameter(ClientPNames.HANDLE_REDIRECTS,true);
  params.setParameter(ClientPNames.MAX_REDIRECTS,5);
  params.setParameter(ConnManagerPNames.MAX_TOTAL_CONNECTIONS,50);
  params.setParameter(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE,new ConnPerRoute(){
    public int getMaxForRoute(    HttpRoute route){
      return 25;
    }
  }
);
  final SchemeRegistry schemeRegistry=new SchemeRegistry();
  schemeRegistry.register(new Scheme(""String_Node_Str"",PlainSocketFactory.getSocketFactory(),80));
  schemeRegistry.register(new Scheme(""String_Node_Str"",SSLSocketFactory.getSocketFactory(),443));
  final ThreadSafeClientConnManager connManager=new ThreadSafeClientConnManager(params,schemeRegistry);
  final DefaultHttpClient httpClient=new DefaultHttpClient(connManager,params);
  httpClient.setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler(3,true));
  httpClient.addResponseInterceptor(new HttpResponseInterceptor(){
    public void process(    final HttpResponse response,    final HttpContext context) throws HttpException, IOException {
      final HttpEntity entity=response.getEntity();
      final Header encHeader=entity.getContentEncoding();
      if (encHeader == null)       return;
      for (      final HeaderElement elem : encHeader.getElements()) {
        if (""String_Node_Str"".equalsIgnoreCase(elem.getName())) {
          response.setEntity(new GzipDecompressingEntity(entity));
          return;
        }
      }
    }
  }
);
  return httpClient;
}","public static HttpClient createHttpClient(final Context context){
  final HttpParams params=new BasicHttpParams();
  params.setParameter(CoreProtocolPNames.USER_AGENT,Constants.ua(context));
  params.setParameter(CoreConnectionPNames.SO_TIMEOUT,15000);
  params.setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,15000);
  params.setParameter(CoreConnectionPNames.MAX_HEADER_COUNT,100);
  params.setParameter(ClientPNames.HANDLE_REDIRECTS,true);
  params.setParameter(ClientPNames.MAX_REDIRECTS,5);
  params.setParameter(ConnManagerPNames.MAX_TOTAL_CONNECTIONS,50);
  params.setParameter(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE,new ConnPerRoute(){
    public int getMaxForRoute(    HttpRoute route){
      return 25;
    }
  }
);
  final SchemeRegistry schemeRegistry=new SchemeRegistry();
  schemeRegistry.register(new Scheme(""String_Node_Str"",PlainSocketFactory.getSocketFactory(),80));
  schemeRegistry.register(new Scheme(""String_Node_Str"",SSLSocketFactory.getSocketFactory(),443));
  final ThreadSafeClientConnManager connManager=new ThreadSafeClientConnManager(params,schemeRegistry);
  final DefaultHttpClient httpClient=new DefaultHttpClient(connManager,params);
  httpClient.setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler(3,true));
  httpClient.setReuseStrategy(new NoConnectionReuseStrategy());
  httpClient.addResponseInterceptor(new HttpResponseInterceptor(){
    public void process(    final HttpResponse response,    final HttpContext context) throws HttpException, IOException {
      final HttpEntity entity=response.getEntity();
      final Header encHeader=entity.getContentEncoding();
      if (encHeader == null)       return;
      for (      final HeaderElement elem : encHeader.getElements()) {
        if (""String_Node_Str"".equalsIgnoreCase(elem.getName())) {
          response.setEntity(new GzipDecompressingEntity(entity));
          return;
        }
      }
    }
  }
);
  return httpClient;
}",0.9811715481171548
15372,"@Override protected void onCreate(Bundle savedInstanceState){
  PrefsUtility.applyTheme(this);
  getActionBar().setTitle(R.string.post_captcha_title);
  super.onCreate(savedInstanceState);
  final LoadingView loadingView=new LoadingView(this,R.string.download_waiting,true,true);
  setContentView(loadingView);
  final RedditAccount selectedAccount=RedditAccountManager.getInstance(this).getAccount(getIntent().getStringExtra(""String_Node_Str""));
  final CacheManager cm=CacheManager.getInstance(this);
  RedditAPI.newCaptcha(cm,new APIResponseHandler.NewCaptchaResponseHandler(this){
    @Override protected void onSuccess(    final String captchaId){
      final URI captchaUrl=Constants.Reddit.getUri(""String_Node_Str"" + captchaId);
      cm.makeRequest(new CacheRequest(captchaUrl,RedditAccountManager.getAnon(),null,Constants.Priority.CAPTCHA,0,CacheRequest.DownloadType.FORCE,Constants.FileType.CAPTCHA,false,false,true,CaptchaActivity.this){
        @Override protected void onCallbackException(        Throwable t){
          BugReportActivity.handleGlobalError(CaptchaActivity.this,t);
        }
        @Override protected void onDownloadNecessary(){
        }
        @Override protected void onDownloadStarted(){
          loadingView.setIndeterminate(R.string.download_downloading);
        }
        @Override protected void onFailure(        RequestFailureType type,        Throwable t,        StatusLine status,        String readableMessage){
          final RRError error=General.getGeneralErrorForFailure(CaptchaActivity.this,type,t,status,url.toString());
          General.showResultDialog(CaptchaActivity.this,error);
          finish();
        }
        @Override protected void onProgress(        final boolean authorizationInProgress,        long bytesRead,        long totalBytes){
          if (authorizationInProgress) {
            loadingView.setIndeterminate(R.string.download_authorizing);
          }
 else {
            loadingView.setProgress(R.string.download_downloading,(float)((double)bytesRead / (double)totalBytes));
          }
        }
        @Override protected void onSuccess(        final CacheManager.ReadableCacheFile cacheFile,        long timestamp,        UUID session,        boolean fromCache,        String mimetype){
          final Bitmap image;
          try {
            image=BitmapFactory.decodeStream(cacheFile.getInputStream());
          }
 catch (          IOException e) {
            BugReportActivity.handleGlobalError(CaptchaActivity.this,e);
            return;
          }
          General.UI_THREAD_HANDLER.post(new Runnable(){
            public void run(){
              final LinearLayout ll=new LinearLayout(CaptchaActivity.this);
              ll.setOrientation(LinearLayout.VERTICAL);
              final ImageView captchaImg=new ImageView(CaptchaActivity.this);
              ll.addView(captchaImg);
              final LinearLayout.LayoutParams layoutParams=(LinearLayout.LayoutParams)captchaImg.getLayoutParams();
              layoutParams.setMargins(20,20,20,20);
              layoutParams.height=General.dpToPixels(context,100);
              captchaImg.setScaleType(ImageView.ScaleType.FIT_CENTER);
              final EditText captchaText=new EditText(CaptchaActivity.this);
              ll.addView(captchaText);
              ((LinearLayout.LayoutParams)captchaText.getLayoutParams()).setMargins(20,0,20,20);
              captchaText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD | InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS);
              captchaImg.setImageBitmap(image);
              final Button submitButton=new Button(CaptchaActivity.this);
              submitButton.setText(R.string.post_captcha_submit_button);
              ll.addView(submitButton);
              ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).setMargins(20,0,20,20);
              ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).gravity=Gravity.RIGHT;
              ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).width=LinearLayout.LayoutParams.WRAP_CONTENT;
              submitButton.setOnClickListener(new View.OnClickListener(){
                public void onClick(                View v){
                  final Intent result=new Intent();
                  result.putExtra(""String_Node_Str"",captchaId);
                  result.putExtra(""String_Node_Str"",captchaText.getText().toString());
                  setResult(RESULT_OK,result);
                  finish();
                }
              }
);
              final ScrollView sv=new ScrollView(CaptchaActivity.this);
              sv.addView(ll);
              setContentView(sv);
            }
          }
);
        }
      }
);
    }
    @Override protected void onCallbackException(    Throwable t){
      BugReportActivity.handleGlobalError(CaptchaActivity.this,t);
    }
    @Override protected void onFailure(    RequestFailureType type,    Throwable t,    StatusLine status,    String readableMessage){
      final RRError error=General.getGeneralErrorForFailure(CaptchaActivity.this,type,t,status,null);
      General.showResultDialog(CaptchaActivity.this,error);
      finish();
    }
    @Override protected void onFailure(    APIFailureType type){
      final RRError error=General.getGeneralErrorForFailure(CaptchaActivity.this,type);
      General.showResultDialog(CaptchaActivity.this,error);
      finish();
    }
  }
,selectedAccount,this);
}","@Override protected void onCreate(Bundle savedInstanceState){
  PrefsUtility.applyTheme(this);
  getActionBar().setTitle(R.string.post_captcha_title);
  super.onCreate(savedInstanceState);
  final LoadingView loadingView=new LoadingView(this,R.string.download_waiting,true,true);
  setContentView(loadingView);
  final RedditAccount selectedAccount=RedditAccountManager.getInstance(this).getAccount(getIntent().getStringExtra(""String_Node_Str""));
  final CacheManager cm=CacheManager.getInstance(this);
  RedditAPI.newCaptcha(cm,new APIResponseHandler.NewCaptchaResponseHandler(this){
    @Override protected void onSuccess(    final String captchaId){
      final URI captchaUrl=Constants.Reddit.getUri(""String_Node_Str"" + captchaId);
      cm.makeRequest(new CacheRequest(captchaUrl,RedditAccountManager.getAnon(),null,Constants.Priority.CAPTCHA,0,CacheRequest.DownloadType.FORCE,Constants.FileType.CAPTCHA,false,false,true,CaptchaActivity.this){
        @Override protected void onCallbackException(        Throwable t){
          BugReportActivity.handleGlobalError(CaptchaActivity.this,t);
        }
        @Override protected void onDownloadNecessary(){
        }
        @Override protected void onDownloadStarted(){
          loadingView.setIndeterminate(R.string.download_downloading);
        }
        @Override protected void onFailure(        RequestFailureType type,        Throwable t,        StatusLine status,        String readableMessage){
          final RRError error=General.getGeneralErrorForFailure(CaptchaActivity.this,type,t,status,url.toString());
          General.showResultDialog(CaptchaActivity.this,error);
          finish();
        }
        @Override protected void onProgress(        final boolean authorizationInProgress,        long bytesRead,        long totalBytes){
          if (authorizationInProgress) {
            loadingView.setIndeterminate(R.string.download_authorizing);
          }
 else {
            loadingView.setProgress(R.string.download_downloading,(float)((double)bytesRead / (double)totalBytes));
          }
        }
        @Override protected void onSuccess(        final CacheManager.ReadableCacheFile cacheFile,        long timestamp,        UUID session,        boolean fromCache,        String mimetype){
          final Bitmap image;
          try {
            image=BitmapFactory.decodeStream(cacheFile.getInputStream());
          }
 catch (          IOException e) {
            BugReportActivity.handleGlobalError(CaptchaActivity.this,e);
            return;
          }
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            public void run(){
              final LinearLayout ll=new LinearLayout(CaptchaActivity.this);
              ll.setOrientation(LinearLayout.VERTICAL);
              final ImageView captchaImg=new ImageView(CaptchaActivity.this);
              ll.addView(captchaImg);
              final LinearLayout.LayoutParams layoutParams=(LinearLayout.LayoutParams)captchaImg.getLayoutParams();
              layoutParams.setMargins(20,20,20,20);
              layoutParams.height=General.dpToPixels(context,100);
              captchaImg.setScaleType(ImageView.ScaleType.FIT_CENTER);
              final EditText captchaText=new EditText(CaptchaActivity.this);
              ll.addView(captchaText);
              ((LinearLayout.LayoutParams)captchaText.getLayoutParams()).setMargins(20,0,20,20);
              captchaText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD | InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS);
              captchaImg.setImageBitmap(image);
              final Button submitButton=new Button(CaptchaActivity.this);
              submitButton.setText(R.string.post_captcha_submit_button);
              ll.addView(submitButton);
              ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).setMargins(20,0,20,20);
              ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).gravity=Gravity.RIGHT;
              ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).width=LinearLayout.LayoutParams.WRAP_CONTENT;
              submitButton.setOnClickListener(new View.OnClickListener(){
                public void onClick(                View v){
                  final Intent result=new Intent();
                  result.putExtra(""String_Node_Str"",captchaId);
                  result.putExtra(""String_Node_Str"",captchaText.getText().toString());
                  setResult(RESULT_OK,result);
                  finish();
                }
              }
);
              final ScrollView sv=new ScrollView(CaptchaActivity.this);
              sv.addView(ll);
              setContentView(sv);
            }
          }
);
        }
      }
);
    }
    @Override protected void onCallbackException(    Throwable t){
      BugReportActivity.handleGlobalError(CaptchaActivity.this,t);
    }
    @Override protected void onFailure(    RequestFailureType type,    Throwable t,    StatusLine status,    String readableMessage){
      final RRError error=General.getGeneralErrorForFailure(CaptchaActivity.this,type,t,status,null);
      General.showResultDialog(CaptchaActivity.this,error);
      finish();
    }
    @Override protected void onFailure(    APIFailureType type){
      final RRError error=General.getGeneralErrorForFailure(CaptchaActivity.this,type);
      General.showResultDialog(CaptchaActivity.this,error);
      finish();
    }
  }
,selectedAccount,this);
}",0.9984549668272288
15373,"@Override protected void onSuccess(final CacheManager.ReadableCacheFile cacheFile,long timestamp,UUID session,boolean fromCache,String mimetype){
  final Bitmap image;
  try {
    image=BitmapFactory.decodeStream(cacheFile.getInputStream());
  }
 catch (  IOException e) {
    BugReportActivity.handleGlobalError(CaptchaActivity.this,e);
    return;
  }
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      final LinearLayout ll=new LinearLayout(CaptchaActivity.this);
      ll.setOrientation(LinearLayout.VERTICAL);
      final ImageView captchaImg=new ImageView(CaptchaActivity.this);
      ll.addView(captchaImg);
      final LinearLayout.LayoutParams layoutParams=(LinearLayout.LayoutParams)captchaImg.getLayoutParams();
      layoutParams.setMargins(20,20,20,20);
      layoutParams.height=General.dpToPixels(context,100);
      captchaImg.setScaleType(ImageView.ScaleType.FIT_CENTER);
      final EditText captchaText=new EditText(CaptchaActivity.this);
      ll.addView(captchaText);
      ((LinearLayout.LayoutParams)captchaText.getLayoutParams()).setMargins(20,0,20,20);
      captchaText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD | InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS);
      captchaImg.setImageBitmap(image);
      final Button submitButton=new Button(CaptchaActivity.this);
      submitButton.setText(R.string.post_captcha_submit_button);
      ll.addView(submitButton);
      ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).setMargins(20,0,20,20);
      ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).gravity=Gravity.RIGHT;
      ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).width=LinearLayout.LayoutParams.WRAP_CONTENT;
      submitButton.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View v){
          final Intent result=new Intent();
          result.putExtra(""String_Node_Str"",captchaId);
          result.putExtra(""String_Node_Str"",captchaText.getText().toString());
          setResult(RESULT_OK,result);
          finish();
        }
      }
);
      final ScrollView sv=new ScrollView(CaptchaActivity.this);
      sv.addView(ll);
      setContentView(sv);
    }
  }
);
}","@Override protected void onSuccess(final CacheManager.ReadableCacheFile cacheFile,long timestamp,UUID session,boolean fromCache,String mimetype){
  final Bitmap image;
  try {
    image=BitmapFactory.decodeStream(cacheFile.getInputStream());
  }
 catch (  IOException e) {
    BugReportActivity.handleGlobalError(CaptchaActivity.this,e);
    return;
  }
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      final LinearLayout ll=new LinearLayout(CaptchaActivity.this);
      ll.setOrientation(LinearLayout.VERTICAL);
      final ImageView captchaImg=new ImageView(CaptchaActivity.this);
      ll.addView(captchaImg);
      final LinearLayout.LayoutParams layoutParams=(LinearLayout.LayoutParams)captchaImg.getLayoutParams();
      layoutParams.setMargins(20,20,20,20);
      layoutParams.height=General.dpToPixels(context,100);
      captchaImg.setScaleType(ImageView.ScaleType.FIT_CENTER);
      final EditText captchaText=new EditText(CaptchaActivity.this);
      ll.addView(captchaText);
      ((LinearLayout.LayoutParams)captchaText.getLayoutParams()).setMargins(20,0,20,20);
      captchaText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD | InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS);
      captchaImg.setImageBitmap(image);
      final Button submitButton=new Button(CaptchaActivity.this);
      submitButton.setText(R.string.post_captcha_submit_button);
      ll.addView(submitButton);
      ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).setMargins(20,0,20,20);
      ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).gravity=Gravity.RIGHT;
      ((LinearLayout.LayoutParams)submitButton.getLayoutParams()).width=LinearLayout.LayoutParams.WRAP_CONTENT;
      submitButton.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View v){
          final Intent result=new Intent();
          result.putExtra(""String_Node_Str"",captchaId);
          result.putExtra(""String_Node_Str"",captchaText.getText().toString());
          setResult(RESULT_OK,result);
          finish();
        }
      }
);
      final ScrollView sv=new ScrollView(CaptchaActivity.this);
      sv.addView(ll);
      setContentView(sv);
    }
  }
);
}",0.9962596259625962
15374,"@Override protected void onFailure(final APIFailureType type){
  final RRError error=General.getGeneralErrorForFailure(context,type);
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      General.showResultDialog(CommentEditActivity.this,error);
      if (progressDialog.isShowing())       progressDialog.dismiss();
    }
  }
);
}","@Override protected void onFailure(final APIFailureType type){
  final RRError error=General.getGeneralErrorForFailure(context,type);
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      General.showResultDialog(CommentEditActivity.this,error);
      if (progressDialog.isShowing())       progressDialog.dismiss();
    }
  }
);
}",0.9760900140646976
15375,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getTitle().equals(getString(R.string.comment_edit_save))) {
    final ProgressDialog progressDialog=new ProgressDialog(this);
    progressDialog.setTitle(getString(R.string.comment_reply_submitting_title));
    progressDialog.setMessage(getString(R.string.comment_reply_submitting_message));
    progressDialog.setIndeterminate(true);
    progressDialog.setCancelable(true);
    progressDialog.setCanceledOnTouchOutside(false);
    progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener(){
      public void onCancel(      final DialogInterface dialogInterface){
        General.quickToast(CommentEditActivity.this,R.string.comment_reply_oncancel);
        progressDialog.dismiss();
      }
    }
);
    progressDialog.setOnKeyListener(new DialogInterface.OnKeyListener(){
      public boolean onKey(      final DialogInterface dialogInterface,      final int keyCode,      final KeyEvent keyEvent){
        if (keyCode == KeyEvent.KEYCODE_BACK) {
          General.quickToast(CommentEditActivity.this,R.string.comment_reply_oncancel);
          progressDialog.dismiss();
        }
        return true;
      }
    }
);
    final APIResponseHandler.ActionResponseHandler handler=new APIResponseHandler.ActionResponseHandler(this){
      @Override protected void onSuccess(){
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            if (progressDialog.isShowing())             progressDialog.dismiss();
            General.quickToast(CommentEditActivity.this,R.string.comment_edit_done);
            finish();
          }
        }
);
      }
      @Override protected void onCallbackException(      Throwable t){
        BugReportActivity.handleGlobalError(CommentEditActivity.this,t);
      }
      @Override protected void onFailure(      RequestFailureType type,      Throwable t,      StatusLine status,      String readableMessage){
        final RRError error=General.getGeneralErrorForFailure(context,type,t,status,null);
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(CommentEditActivity.this,error);
            if (progressDialog.isShowing())             progressDialog.dismiss();
          }
        }
);
      }
      @Override protected void onFailure(      final APIFailureType type){
        final RRError error=General.getGeneralErrorForFailure(context,type);
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(CommentEditActivity.this,error);
            if (progressDialog.isShowing())             progressDialog.dismiss();
          }
        }
);
      }
    }
;
    final CacheManager cm=CacheManager.getInstance(this);
    final RedditAccount selectedAccount=RedditAccountManager.getInstance(this).getDefaultAccount();
    RedditAPI.editComment(cm,handler,selectedAccount,commentIdAndType,textEdit.getText().toString(),this);
    progressDialog.show();
  }
 else   if (item.getTitle().equals(getString(R.string.comment_reply_preview))) {
    MarkdownPreviewDialog.newInstance(textEdit.getText().toString()).show(getFragmentManager(),""String_Node_Str"");
  }
  return true;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getTitle().equals(getString(R.string.comment_edit_save))) {
    final ProgressDialog progressDialog=new ProgressDialog(this);
    progressDialog.setTitle(getString(R.string.comment_reply_submitting_title));
    progressDialog.setMessage(getString(R.string.comment_reply_submitting_message));
    progressDialog.setIndeterminate(true);
    progressDialog.setCancelable(true);
    progressDialog.setCanceledOnTouchOutside(false);
    progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener(){
      public void onCancel(      final DialogInterface dialogInterface){
        General.quickToast(CommentEditActivity.this,R.string.comment_reply_oncancel);
        progressDialog.dismiss();
      }
    }
);
    progressDialog.setOnKeyListener(new DialogInterface.OnKeyListener(){
      public boolean onKey(      final DialogInterface dialogInterface,      final int keyCode,      final KeyEvent keyEvent){
        if (keyCode == KeyEvent.KEYCODE_BACK) {
          General.quickToast(CommentEditActivity.this,R.string.comment_reply_oncancel);
          progressDialog.dismiss();
        }
        return true;
      }
    }
);
    final APIResponseHandler.ActionResponseHandler handler=new APIResponseHandler.ActionResponseHandler(this){
      @Override protected void onSuccess(){
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            if (progressDialog.isShowing())             progressDialog.dismiss();
            General.quickToast(CommentEditActivity.this,R.string.comment_edit_done);
            finish();
          }
        }
);
      }
      @Override protected void onCallbackException(      Throwable t){
        BugReportActivity.handleGlobalError(CommentEditActivity.this,t);
      }
      @Override protected void onFailure(      RequestFailureType type,      Throwable t,      StatusLine status,      String readableMessage){
        final RRError error=General.getGeneralErrorForFailure(context,type,t,status,null);
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(CommentEditActivity.this,error);
            if (progressDialog.isShowing())             progressDialog.dismiss();
          }
        }
);
      }
      @Override protected void onFailure(      final APIFailureType type){
        final RRError error=General.getGeneralErrorForFailure(context,type);
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(CommentEditActivity.this,error);
            if (progressDialog.isShowing())             progressDialog.dismiss();
          }
        }
);
      }
    }
;
    final CacheManager cm=CacheManager.getInstance(this);
    final RedditAccount selectedAccount=RedditAccountManager.getInstance(this).getDefaultAccount();
    RedditAPI.editComment(cm,handler,selectedAccount,commentIdAndType,textEdit.getText().toString(),this);
    progressDialog.show();
  }
 else   if (item.getTitle().equals(getString(R.string.comment_reply_preview))) {
    MarkdownPreviewDialog.newInstance(textEdit.getText().toString()).show(getFragmentManager(),""String_Node_Str"");
  }
  return true;
}",0.9922101725981366
15376,"@Override protected void onSuccess(){
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      if (progressDialog.isShowing())       progressDialog.dismiss();
      General.quickToast(CommentEditActivity.this,R.string.comment_edit_done);
      finish();
    }
  }
);
}","@Override protected void onSuccess(){
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      if (progressDialog.isShowing())       progressDialog.dismiss();
      General.quickToast(CommentEditActivity.this,R.string.comment_edit_done);
      finish();
    }
  }
);
}",0.9707401032702238
15377,"@Override protected void onFailure(final APIFailureType type){
  final RRError error=General.getGeneralErrorForFailure(context,type);
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      General.showResultDialog(CommentReplyActivity.this,error);
      if (progressDialog.isShowing())       progressDialog.dismiss();
    }
  }
);
}","@Override protected void onFailure(final APIFailureType type){
  final RRError error=General.getGeneralErrorForFailure(context,type);
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      General.showResultDialog(CommentReplyActivity.this,error);
      if (progressDialog.isShowing())       progressDialog.dismiss();
    }
  }
);
}",0.976157082748948
15378,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getTitle().equals(getString(R.string.comment_reply_send))) {
    final ProgressDialog progressDialog=new ProgressDialog(this);
    progressDialog.setTitle(getString(R.string.comment_reply_submitting_title));
    progressDialog.setMessage(getString(R.string.comment_reply_submitting_message));
    progressDialog.setIndeterminate(true);
    progressDialog.setCancelable(true);
    progressDialog.setCanceledOnTouchOutside(false);
    progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener(){
      public void onCancel(      final DialogInterface dialogInterface){
        General.quickToast(CommentReplyActivity.this,getString(R.string.comment_reply_oncancel));
        progressDialog.dismiss();
      }
    }
);
    progressDialog.setOnKeyListener(new DialogInterface.OnKeyListener(){
      public boolean onKey(      final DialogInterface dialogInterface,      final int keyCode,      final KeyEvent keyEvent){
        if (keyCode == KeyEvent.KEYCODE_BACK) {
          General.quickToast(CommentReplyActivity.this,getString(R.string.comment_reply_oncancel));
          progressDialog.dismiss();
        }
        return true;
      }
    }
);
    final APIResponseHandler.ActionResponseHandler handler=new APIResponseHandler.ActionResponseHandler(this){
      @Override protected void onSuccess(){
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            if (progressDialog.isShowing())             progressDialog.dismiss();
            General.quickToast(CommentReplyActivity.this,getString(R.string.comment_reply_done));
            finish();
          }
        }
);
      }
      @Override protected void onCallbackException(      Throwable t){
        BugReportActivity.handleGlobalError(CommentReplyActivity.this,t);
      }
      @Override protected void onFailure(      RequestFailureType type,      Throwable t,      StatusLine status,      String readableMessage){
        final RRError error=General.getGeneralErrorForFailure(context,type,t,status,null);
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(CommentReplyActivity.this,error);
            if (progressDialog.isShowing())             progressDialog.dismiss();
          }
        }
);
      }
      @Override protected void onFailure(      final APIFailureType type){
        final RRError error=General.getGeneralErrorForFailure(context,type);
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(CommentReplyActivity.this,error);
            if (progressDialog.isShowing())             progressDialog.dismiss();
          }
        }
);
      }
    }
;
    final CacheManager cm=CacheManager.getInstance(this);
    final ArrayList<RedditAccount> accounts=RedditAccountManager.getInstance(this).getAccounts();
    RedditAccount selectedAccount=null;
    for (    RedditAccount account : accounts) {
      if (!account.isAnonymous() && account.username.equalsIgnoreCase((String)usernameSpinner.getSelectedItem())) {
        selectedAccount=account;
        break;
      }
    }
    RedditAPI.comment(cm,handler,selectedAccount,parentIdAndType,textEdit.getText().toString(),this);
    progressDialog.show();
  }
 else   if (item.getTitle().equals(getString(R.string.comment_reply_preview))) {
    MarkdownPreviewDialog.newInstance(textEdit.getText().toString()).show(getFragmentManager(),""String_Node_Str"");
  }
  return true;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getTitle().equals(getString(R.string.comment_reply_send))) {
    final ProgressDialog progressDialog=new ProgressDialog(this);
    progressDialog.setTitle(getString(R.string.comment_reply_submitting_title));
    progressDialog.setMessage(getString(R.string.comment_reply_submitting_message));
    progressDialog.setIndeterminate(true);
    progressDialog.setCancelable(true);
    progressDialog.setCanceledOnTouchOutside(false);
    progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener(){
      public void onCancel(      final DialogInterface dialogInterface){
        General.quickToast(CommentReplyActivity.this,getString(R.string.comment_reply_oncancel));
        progressDialog.dismiss();
      }
    }
);
    progressDialog.setOnKeyListener(new DialogInterface.OnKeyListener(){
      public boolean onKey(      final DialogInterface dialogInterface,      final int keyCode,      final KeyEvent keyEvent){
        if (keyCode == KeyEvent.KEYCODE_BACK) {
          General.quickToast(CommentReplyActivity.this,getString(R.string.comment_reply_oncancel));
          progressDialog.dismiss();
        }
        return true;
      }
    }
);
    final APIResponseHandler.ActionResponseHandler handler=new APIResponseHandler.ActionResponseHandler(this){
      @Override protected void onSuccess(){
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            if (progressDialog.isShowing())             progressDialog.dismiss();
            General.quickToast(CommentReplyActivity.this,getString(R.string.comment_reply_done));
            finish();
          }
        }
);
      }
      @Override protected void onCallbackException(      Throwable t){
        BugReportActivity.handleGlobalError(CommentReplyActivity.this,t);
      }
      @Override protected void onFailure(      RequestFailureType type,      Throwable t,      StatusLine status,      String readableMessage){
        final RRError error=General.getGeneralErrorForFailure(context,type,t,status,null);
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(CommentReplyActivity.this,error);
            if (progressDialog.isShowing())             progressDialog.dismiss();
          }
        }
);
      }
      @Override protected void onFailure(      final APIFailureType type){
        final RRError error=General.getGeneralErrorForFailure(context,type);
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(CommentReplyActivity.this,error);
            if (progressDialog.isShowing())             progressDialog.dismiss();
          }
        }
);
      }
    }
;
    final CacheManager cm=CacheManager.getInstance(this);
    final ArrayList<RedditAccount> accounts=RedditAccountManager.getInstance(this).getAccounts();
    RedditAccount selectedAccount=null;
    for (    RedditAccount account : accounts) {
      if (!account.isAnonymous() && account.username.equalsIgnoreCase((String)usernameSpinner.getSelectedItem())) {
        selectedAccount=account;
        break;
      }
    }
    RedditAPI.comment(cm,handler,selectedAccount,parentIdAndType,textEdit.getText().toString(),this);
    progressDialog.show();
  }
 else   if (item.getTitle().equals(getString(R.string.comment_reply_preview))) {
    MarkdownPreviewDialog.newInstance(textEdit.getText().toString()).show(getFragmentManager(),""String_Node_Str"");
  }
  return true;
}",0.9928661351237936
15379,"@Override protected void onSuccess(){
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      if (progressDialog.isShowing())       progressDialog.dismiss();
      General.quickToast(CommentReplyActivity.this,getString(R.string.comment_reply_done));
      finish();
    }
  }
);
}","@Override protected void onSuccess(){
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      if (progressDialog.isShowing())       progressDialog.dismiss();
      General.quickToast(CommentReplyActivity.this,getString(R.string.comment_reply_done));
      finish();
    }
  }
);
}",0.971993410214168
15380,"@Override protected void onProgress(final boolean authorizationInProgress,final long bytesRead,final long totalBytes){
  General.UI_THREAD_HANDLER.post(new Runnable(){
    @Override public void run(){
      progressBar.setVisibility(View.VISIBLE);
      progressBar.setIndeterminate(authorizationInProgress);
      progressBar.setProgress((int)((100 * bytesRead) / totalBytes));
    }
  }
);
}","@Override protected void onProgress(final boolean authorizationInProgress,final long bytesRead,final long totalBytes){
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    @Override public void run(){
      progressBar.setVisibility(View.VISIBLE);
      progressBar.setIndeterminate(authorizationInProgress);
      progressBar.setProgress((int)((100 * bytesRead) / totalBytes));
    }
  }
);
}",0.9784537389100126
15381,"@Override protected void onFailure(final RequestFailureType type,Throwable t,StatusLine status,final String readableMessage){
  final RRError error=General.getGeneralErrorForFailure(context,type,t,status,url.toString());
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      mRequest=null;
      progressBar.setVisibility(View.GONE);
      layout.addView(new ErrorView(ImageViewActivity.this,error));
    }
  }
);
}","@Override protected void onFailure(final RequestFailureType type,Throwable t,StatusLine status,final String readableMessage){
  final RRError error=General.getGeneralErrorForFailure(context,type,t,status,url.toString());
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      mRequest=null;
      progressBar.setVisibility(View.GONE);
      layout.addView(new ErrorView(ImageViewActivity.this,error));
    }
  }
);
}",0.9807037457434732
15382,"public void onGifLoaded(){
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      if (mIsDestroyed)       return;
      mRequest=null;
      imageView=new ImageView(context);
      imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
      setContentView(imageView);
      gifThread.setView(imageView);
      imageView.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View v){
          finish();
        }
      }
);
    }
  }
);
}","public void onGifLoaded(){
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      if (mIsDestroyed)       return;
      mRequest=null;
      imageView=new ImageView(context);
      imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
      setContentView(imageView);
      gifThread.setView(imageView);
      imageView.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View v){
          finish();
        }
      }
);
    }
  }
);
}",0.982776089159068
15383,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  final boolean solidblack=PrefsUtility.appearance_solidblack(this,sharedPreferences);
  if (solidblack)   getWindow().setBackgroundDrawable(new ColorDrawable(Color.BLACK));
  final Intent intent=getIntent();
  mUrl=General.uriFromString(intent.getDataString());
  final RedditPost src_post=intent.getParcelableExtra(""String_Node_Str"");
  if (mUrl == null) {
    General.quickToast(this,""String_Node_Str"");
    revertToWeb();
    return;
  }
  Log.i(""String_Node_Str"",""String_Node_Str"" + mUrl.toString());
  final ProgressBar progressBar=new ProgressBar(this,null,android.R.attr.progressBarStyleHorizontal);
  final LinearLayout layout=new LinearLayout(this);
  layout.setOrientation(LinearLayout.VERTICAL);
  layout.addView(progressBar);
  CacheManager.getInstance(this).makeRequest(mRequest=new CacheRequest(mUrl,RedditAccountManager.getAnon(),null,Constants.Priority.IMAGE_VIEW,0,CacheRequest.DownloadType.IF_NECESSARY,Constants.FileType.IMAGE,false,false,false,this){
    private void setContentView(    View v){
      layout.removeAllViews();
      layout.addView(v);
      v.getLayoutParams().width=ViewGroup.LayoutParams.MATCH_PARENT;
      v.getLayoutParams().height=ViewGroup.LayoutParams.MATCH_PARENT;
    }
    @Override protected void onCallbackException(    Throwable t){
      BugReportActivity.handleGlobalError(context.getApplicationContext(),new RRError(null,null,t));
    }
    @Override protected void onDownloadNecessary(){
      General.UI_THREAD_HANDLER.post(new Runnable(){
        @Override public void run(){
          progressBar.setVisibility(View.VISIBLE);
          progressBar.setIndeterminate(true);
        }
      }
);
    }
    @Override protected void onDownloadStarted(){
    }
    @Override protected void onFailure(    final RequestFailureType type,    Throwable t,    StatusLine status,    final String readableMessage){
      final RRError error=General.getGeneralErrorForFailure(context,type,t,status,url.toString());
      General.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          mRequest=null;
          progressBar.setVisibility(View.GONE);
          layout.addView(new ErrorView(ImageViewActivity.this,error));
        }
      }
);
    }
    @Override protected void onProgress(    final boolean authorizationInProgress,    final long bytesRead,    final long totalBytes){
      General.UI_THREAD_HANDLER.post(new Runnable(){
        @Override public void run(){
          progressBar.setVisibility(View.VISIBLE);
          progressBar.setIndeterminate(authorizationInProgress);
          progressBar.setProgress((int)((100 * bytesRead) / totalBytes));
        }
      }
);
    }
    @Override protected void onSuccess(    final CacheManager.ReadableCacheFile cacheFile,    long timestamp,    UUID session,    boolean fromCache,    final String mimetype){
      if (mimetype == null || (!Constants.Mime.isImage(mimetype) && !Constants.Mime.isVideo(mimetype))) {
        revertToWeb();
        return;
      }
      final InputStream cacheFileInputStream;
      try {
        cacheFileInputStream=cacheFile.getInputStream();
      }
 catch (      IOException e) {
        notifyFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"");
        return;
      }
      if (cacheFileInputStream == null) {
        notifyFailure(RequestFailureType.CACHE_MISS,null,null,""String_Node_Str"");
        return;
      }
      if (Constants.Mime.isVideo(mimetype)) {
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            if (mIsDestroyed)             return;
            mRequest=null;
            try {
              final RelativeLayout layout=new RelativeLayout(context);
              layout.setGravity(Gravity.CENTER);
              final VideoView videoView=new VideoView(ImageViewActivity.this);
              videoView.setVideoURI(cacheFile.getUri());
              layout.addView(videoView);
              setContentView(layout);
              layout.getLayoutParams().width=ViewGroup.LayoutParams.MATCH_PARENT;
              layout.getLayoutParams().height=ViewGroup.LayoutParams.MATCH_PARENT;
              videoView.setLayoutParams(new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
              videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener(){
                @Override public void onPrepared(                MediaPlayer mp){
                  mp.setLooping(true);
                  videoView.start();
                }
              }
);
              videoView.setOnErrorListener(new MediaPlayer.OnErrorListener(){
                @Override public boolean onError(                final MediaPlayer mediaPlayer,                final int i,                final int i1){
                  revertToWeb();
                  return true;
                }
              }
);
              videoView.setOnTouchListener(new View.OnTouchListener(){
                @Override public boolean onTouch(                final View view,                final MotionEvent motionEvent){
                  finish();
                  return true;
                }
              }
);
            }
 catch (            OutOfMemoryError e) {
              General.quickToast(context,R.string.imageview_oom);
              revertToWeb();
            }
catch (            Throwable e) {
              General.quickToast(context,R.string.imageview_invalid_video);
              revertToWeb();
            }
          }
        }
);
      }
 else       if (Constants.Mime.isImageGif(mimetype)) {
        final PrefsUtility.GifViewMode gifViewMode=PrefsUtility.pref_behaviour_gifview_mode(context,sharedPreferences);
        if (gifViewMode == PrefsUtility.GifViewMode.INTERNAL_BROWSER) {
          revertToWeb();
          return;
        }
 else         if (gifViewMode == PrefsUtility.GifViewMode.EXTERNAL_BROWSER) {
          General.UI_THREAD_HANDLER.post(new Runnable(){
            @Override public void run(){
              LinkHandler.openWebBrowser(ImageViewActivity.this,Uri.parse(mUrl.toString()));
              finish();
            }
          }
);
          return;
        }
        if (AndroidApi.isIceCreamSandwichOrLater() && gifViewMode == PrefsUtility.GifViewMode.INTERNAL_MOVIE) {
          General.UI_THREAD_HANDLER.post(new Runnable(){
            public void run(){
              if (mIsDestroyed)               return;
              mRequest=null;
              try {
                final GIFView gifView=new GIFView(ImageViewActivity.this,cacheFileInputStream);
                setContentView(gifView);
                gifView.setOnClickListener(new View.OnClickListener(){
                  public void onClick(                  View v){
                    finish();
                  }
                }
);
              }
 catch (              OutOfMemoryError e) {
                General.quickToast(context,R.string.imageview_oom);
                revertToWeb();
              }
catch (              Throwable e) {
                General.quickToast(context,R.string.imageview_invalid_gif);
                revertToWeb();
              }
            }
          }
);
        }
 else {
          gifThread=new GifDecoderThread(cacheFileInputStream,new GifDecoderThread.OnGifLoadedListener(){
            public void onGifLoaded(){
              General.UI_THREAD_HANDLER.post(new Runnable(){
                public void run(){
                  if (mIsDestroyed)                   return;
                  mRequest=null;
                  imageView=new ImageView(context);
                  imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
                  setContentView(imageView);
                  gifThread.setView(imageView);
                  imageView.setOnClickListener(new View.OnClickListener(){
                    public void onClick(                    View v){
                      finish();
                    }
                  }
);
                }
              }
);
            }
            public void onOutOfMemory(){
              General.quickToast(context,R.string.imageview_oom);
              revertToWeb();
            }
            public void onGifInvalid(){
              General.quickToast(context,R.string.imageview_invalid_gif);
              revertToWeb();
            }
          }
);
          gifThread.start();
        }
      }
 else {
        final ImageTileSource imageTileSource;
        try {
          final long bytes=cacheFile.getSize();
          final byte[] buf=new byte[(int)bytes];
          try {
            new DataInputStream(cacheFileInputStream).readFully(buf);
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
          try {
            imageTileSource=new ImageTileSourceWholeBitmap(buf);
          }
 catch (          Throwable t) {
            Log.e(""String_Node_Str"",""String_Node_Str"",t);
            General.quickToast(context,R.string.imageview_decode_failed);
            revertToWeb();
            return;
          }
        }
 catch (        OutOfMemoryError e) {
          General.quickToast(context,R.string.imageview_oom);
          revertToWeb();
          return;
        }
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            if (mIsDestroyed)             return;
            mRequest=null;
            mImageViewDisplayerManager=new ImageViewDisplayListManager(imageTileSource,ImageViewActivity.this);
            surfaceView=new RRGLSurfaceView(ImageViewActivity.this,mImageViewDisplayerManager);
            setContentView(surfaceView);
            surfaceView.setOnClickListener(new View.OnClickListener(){
              public void onClick(              View v){
                finish();
              }
            }
);
            if (mIsPaused) {
              surfaceView.onPause();
            }
 else {
              surfaceView.onResume();
            }
          }
        }
);
      }
    }
  }
);
  final RedditPreparedPost post=src_post == null ? null : new RedditPreparedPost(this,CacheManager.getInstance(this),0,src_post,-1,false,false,false,false,RedditAccountManager.getInstance(this).getDefaultAccount(),false);
  final FrameLayout outerFrame=new FrameLayout(this);
  outerFrame.addView(layout);
  if (post != null) {
    final SideToolbarOverlay toolbarOverlay=new SideToolbarOverlay(this);
    final BezelSwipeOverlay bezelOverlay=new BezelSwipeOverlay(this,new BezelSwipeOverlay.BezelSwipeListener(){
      public boolean onSwipe(      BezelSwipeOverlay.SwipeEdge edge){
        toolbarOverlay.setContents(post.generateToolbar(ImageViewActivity.this,false,toolbarOverlay));
        toolbarOverlay.show(edge == BezelSwipeOverlay.SwipeEdge.LEFT ? SideToolbarOverlay.SideToolbarPosition.LEFT : SideToolbarOverlay.SideToolbarPosition.RIGHT);
        return true;
      }
      public boolean onTap(){
        if (toolbarOverlay.isShown()) {
          toolbarOverlay.hide();
          return true;
        }
        return false;
      }
    }
);
    outerFrame.addView(bezelOverlay);
    outerFrame.addView(toolbarOverlay);
    bezelOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    bezelOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
  }
  setContentView(outerFrame);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  final boolean solidblack=PrefsUtility.appearance_solidblack(this,sharedPreferences);
  if (solidblack)   getWindow().setBackgroundDrawable(new ColorDrawable(Color.BLACK));
  final Intent intent=getIntent();
  mUrl=General.uriFromString(intent.getDataString());
  final RedditPost src_post=intent.getParcelableExtra(""String_Node_Str"");
  if (mUrl == null) {
    General.quickToast(this,""String_Node_Str"");
    revertToWeb();
    return;
  }
  Log.i(""String_Node_Str"",""String_Node_Str"" + mUrl.toString());
  final ProgressBar progressBar=new ProgressBar(this,null,android.R.attr.progressBarStyleHorizontal);
  final LinearLayout layout=new LinearLayout(this);
  layout.setOrientation(LinearLayout.VERTICAL);
  layout.addView(progressBar);
  CacheManager.getInstance(this).makeRequest(mRequest=new CacheRequest(mUrl,RedditAccountManager.getAnon(),null,Constants.Priority.IMAGE_VIEW,0,CacheRequest.DownloadType.IF_NECESSARY,Constants.FileType.IMAGE,false,false,false,this){
    private void setContentView(    View v){
      layout.removeAllViews();
      layout.addView(v);
      v.getLayoutParams().width=ViewGroup.LayoutParams.MATCH_PARENT;
      v.getLayoutParams().height=ViewGroup.LayoutParams.MATCH_PARENT;
    }
    @Override protected void onCallbackException(    Throwable t){
      BugReportActivity.handleGlobalError(context.getApplicationContext(),new RRError(null,null,t));
    }
    @Override protected void onDownloadNecessary(){
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        @Override public void run(){
          progressBar.setVisibility(View.VISIBLE);
          progressBar.setIndeterminate(true);
        }
      }
);
    }
    @Override protected void onDownloadStarted(){
    }
    @Override protected void onFailure(    final RequestFailureType type,    Throwable t,    StatusLine status,    final String readableMessage){
      final RRError error=General.getGeneralErrorForFailure(context,type,t,status,url.toString());
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          mRequest=null;
          progressBar.setVisibility(View.GONE);
          layout.addView(new ErrorView(ImageViewActivity.this,error));
        }
      }
);
    }
    @Override protected void onProgress(    final boolean authorizationInProgress,    final long bytesRead,    final long totalBytes){
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        @Override public void run(){
          progressBar.setVisibility(View.VISIBLE);
          progressBar.setIndeterminate(authorizationInProgress);
          progressBar.setProgress((int)((100 * bytesRead) / totalBytes));
        }
      }
);
    }
    @Override protected void onSuccess(    final CacheManager.ReadableCacheFile cacheFile,    long timestamp,    UUID session,    boolean fromCache,    final String mimetype){
      if (mimetype == null || (!Constants.Mime.isImage(mimetype) && !Constants.Mime.isVideo(mimetype))) {
        revertToWeb();
        return;
      }
      final InputStream cacheFileInputStream;
      try {
        cacheFileInputStream=cacheFile.getInputStream();
      }
 catch (      IOException e) {
        notifyFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"");
        return;
      }
      if (cacheFileInputStream == null) {
        notifyFailure(RequestFailureType.CACHE_MISS,null,null,""String_Node_Str"");
        return;
      }
      if (Constants.Mime.isVideo(mimetype)) {
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            if (mIsDestroyed)             return;
            mRequest=null;
            try {
              final RelativeLayout layout=new RelativeLayout(context);
              layout.setGravity(Gravity.CENTER);
              final VideoView videoView=new VideoView(ImageViewActivity.this);
              videoView.setVideoURI(cacheFile.getUri());
              layout.addView(videoView);
              setContentView(layout);
              layout.getLayoutParams().width=ViewGroup.LayoutParams.MATCH_PARENT;
              layout.getLayoutParams().height=ViewGroup.LayoutParams.MATCH_PARENT;
              videoView.setLayoutParams(new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
              videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener(){
                @Override public void onPrepared(                MediaPlayer mp){
                  mp.setLooping(true);
                  videoView.start();
                }
              }
);
              videoView.setOnErrorListener(new MediaPlayer.OnErrorListener(){
                @Override public boolean onError(                final MediaPlayer mediaPlayer,                final int i,                final int i1){
                  revertToWeb();
                  return true;
                }
              }
);
              videoView.setOnTouchListener(new View.OnTouchListener(){
                @Override public boolean onTouch(                final View view,                final MotionEvent motionEvent){
                  finish();
                  return true;
                }
              }
);
            }
 catch (            OutOfMemoryError e) {
              General.quickToast(context,R.string.imageview_oom);
              revertToWeb();
            }
catch (            Throwable e) {
              General.quickToast(context,R.string.imageview_invalid_video);
              revertToWeb();
            }
          }
        }
);
      }
 else       if (Constants.Mime.isImageGif(mimetype)) {
        final PrefsUtility.GifViewMode gifViewMode=PrefsUtility.pref_behaviour_gifview_mode(context,sharedPreferences);
        if (gifViewMode == PrefsUtility.GifViewMode.INTERNAL_BROWSER) {
          revertToWeb();
          return;
        }
 else         if (gifViewMode == PrefsUtility.GifViewMode.EXTERNAL_BROWSER) {
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            @Override public void run(){
              LinkHandler.openWebBrowser(ImageViewActivity.this,Uri.parse(mUrl.toString()));
              finish();
            }
          }
);
          return;
        }
        if (AndroidApi.isIceCreamSandwichOrLater() && gifViewMode == PrefsUtility.GifViewMode.INTERNAL_MOVIE) {
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            public void run(){
              if (mIsDestroyed)               return;
              mRequest=null;
              try {
                final GIFView gifView=new GIFView(ImageViewActivity.this,cacheFileInputStream);
                setContentView(gifView);
                gifView.setOnClickListener(new View.OnClickListener(){
                  public void onClick(                  View v){
                    finish();
                  }
                }
);
              }
 catch (              OutOfMemoryError e) {
                General.quickToast(context,R.string.imageview_oom);
                revertToWeb();
              }
catch (              Throwable e) {
                General.quickToast(context,R.string.imageview_invalid_gif);
                revertToWeb();
              }
            }
          }
);
        }
 else {
          gifThread=new GifDecoderThread(cacheFileInputStream,new GifDecoderThread.OnGifLoadedListener(){
            public void onGifLoaded(){
              AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
                public void run(){
                  if (mIsDestroyed)                   return;
                  mRequest=null;
                  imageView=new ImageView(context);
                  imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
                  setContentView(imageView);
                  gifThread.setView(imageView);
                  imageView.setOnClickListener(new View.OnClickListener(){
                    public void onClick(                    View v){
                      finish();
                    }
                  }
);
                }
              }
);
            }
            public void onOutOfMemory(){
              General.quickToast(context,R.string.imageview_oom);
              revertToWeb();
            }
            public void onGifInvalid(){
              General.quickToast(context,R.string.imageview_invalid_gif);
              revertToWeb();
            }
          }
);
          gifThread.start();
        }
      }
 else {
        final ImageTileSource imageTileSource;
        try {
          final long bytes=cacheFile.getSize();
          final byte[] buf=new byte[(int)bytes];
          try {
            new DataInputStream(cacheFileInputStream).readFully(buf);
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
          try {
            imageTileSource=new ImageTileSourceWholeBitmap(buf);
          }
 catch (          Throwable t) {
            Log.e(""String_Node_Str"",""String_Node_Str"",t);
            General.quickToast(context,R.string.imageview_decode_failed);
            revertToWeb();
            return;
          }
        }
 catch (        OutOfMemoryError e) {
          General.quickToast(context,R.string.imageview_oom);
          revertToWeb();
          return;
        }
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            if (mIsDestroyed)             return;
            mRequest=null;
            mImageViewDisplayerManager=new ImageViewDisplayListManager(imageTileSource,ImageViewActivity.this);
            surfaceView=new RRGLSurfaceView(ImageViewActivity.this,mImageViewDisplayerManager);
            setContentView(surfaceView);
            surfaceView.setOnClickListener(new View.OnClickListener(){
              public void onClick(              View v){
                finish();
              }
            }
);
            if (mIsPaused) {
              surfaceView.onPause();
            }
 else {
              surfaceView.onResume();
            }
          }
        }
);
      }
    }
  }
);
  final RedditPreparedPost post=src_post == null ? null : new RedditPreparedPost(this,CacheManager.getInstance(this),0,src_post,-1,false,false,false,false,RedditAccountManager.getInstance(this).getDefaultAccount(),false);
  final FrameLayout outerFrame=new FrameLayout(this);
  outerFrame.addView(layout);
  if (post != null) {
    final SideToolbarOverlay toolbarOverlay=new SideToolbarOverlay(this);
    final BezelSwipeOverlay bezelOverlay=new BezelSwipeOverlay(this,new BezelSwipeOverlay.BezelSwipeListener(){
      public boolean onSwipe(      BezelSwipeOverlay.SwipeEdge edge){
        toolbarOverlay.setContents(post.generateToolbar(ImageViewActivity.this,false,toolbarOverlay));
        toolbarOverlay.show(edge == BezelSwipeOverlay.SwipeEdge.LEFT ? SideToolbarOverlay.SideToolbarPosition.LEFT : SideToolbarOverlay.SideToolbarPosition.RIGHT);
        return true;
      }
      public boolean onTap(){
        if (toolbarOverlay.isShown()) {
          toolbarOverlay.hide();
          return true;
        }
        return false;
      }
    }
);
    outerFrame.addView(bezelOverlay);
    outerFrame.addView(toolbarOverlay);
    bezelOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    bezelOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().width=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
    toolbarOverlay.getLayoutParams().height=android.widget.FrameLayout.LayoutParams.MATCH_PARENT;
  }
  setContentView(outerFrame);
}",0.9942206357300696
15384,"private void revertToWeb(){
  final Runnable r=new Runnable(){
    public void run(){
      if (!mHaveReverted) {
        mHaveReverted=true;
        LinkHandler.onLinkClicked(ImageViewActivity.this,mUrl.toString(),true);
        finish();
      }
    }
  }
;
  if (General.isThisUIThread()) {
    r.run();
  }
 else {
    General.UI_THREAD_HANDLER.post(r);
  }
}","private void revertToWeb(){
  final Runnable r=new Runnable(){
    public void run(){
      if (!mHaveReverted) {
        mHaveReverted=true;
        LinkHandler.onLinkClicked(ImageViewActivity.this,mUrl.toString(),true);
        finish();
      }
    }
  }
;
  if (General.isThisUIThread()) {
    r.run();
  }
 else {
    AndroidApi.UI_THREAD_HANDLER.post(r);
  }
}",0.9766803840877916
15385,"@Override protected void onDownloadNecessary(){
  General.UI_THREAD_HANDLER.post(new Runnable(){
    @Override public void run(){
      progressBar.setVisibility(View.VISIBLE);
      progressBar.setIndeterminate(true);
    }
  }
);
}","@Override protected void onDownloadNecessary(){
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    @Override public void run(){
      progressBar.setVisibility(View.VISIBLE);
      progressBar.setIndeterminate(true);
    }
  }
);
}",0.9637526652452024
15386,"@Override protected void onSuccess(final CacheManager.ReadableCacheFile cacheFile,long timestamp,UUID session,boolean fromCache,final String mimetype){
  if (mimetype == null || (!Constants.Mime.isImage(mimetype) && !Constants.Mime.isVideo(mimetype))) {
    revertToWeb();
    return;
  }
  final InputStream cacheFileInputStream;
  try {
    cacheFileInputStream=cacheFile.getInputStream();
  }
 catch (  IOException e) {
    notifyFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"");
    return;
  }
  if (cacheFileInputStream == null) {
    notifyFailure(RequestFailureType.CACHE_MISS,null,null,""String_Node_Str"");
    return;
  }
  if (Constants.Mime.isVideo(mimetype)) {
    General.UI_THREAD_HANDLER.post(new Runnable(){
      public void run(){
        if (mIsDestroyed)         return;
        mRequest=null;
        try {
          final RelativeLayout layout=new RelativeLayout(context);
          layout.setGravity(Gravity.CENTER);
          final VideoView videoView=new VideoView(ImageViewActivity.this);
          videoView.setVideoURI(cacheFile.getUri());
          layout.addView(videoView);
          setContentView(layout);
          layout.getLayoutParams().width=ViewGroup.LayoutParams.MATCH_PARENT;
          layout.getLayoutParams().height=ViewGroup.LayoutParams.MATCH_PARENT;
          videoView.setLayoutParams(new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
          videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener(){
            @Override public void onPrepared(            MediaPlayer mp){
              mp.setLooping(true);
              videoView.start();
            }
          }
);
          videoView.setOnErrorListener(new MediaPlayer.OnErrorListener(){
            @Override public boolean onError(            final MediaPlayer mediaPlayer,            final int i,            final int i1){
              revertToWeb();
              return true;
            }
          }
);
          videoView.setOnTouchListener(new View.OnTouchListener(){
            @Override public boolean onTouch(            final View view,            final MotionEvent motionEvent){
              finish();
              return true;
            }
          }
);
        }
 catch (        OutOfMemoryError e) {
          General.quickToast(context,R.string.imageview_oom);
          revertToWeb();
        }
catch (        Throwable e) {
          General.quickToast(context,R.string.imageview_invalid_video);
          revertToWeb();
        }
      }
    }
);
  }
 else   if (Constants.Mime.isImageGif(mimetype)) {
    final PrefsUtility.GifViewMode gifViewMode=PrefsUtility.pref_behaviour_gifview_mode(context,sharedPreferences);
    if (gifViewMode == PrefsUtility.GifViewMode.INTERNAL_BROWSER) {
      revertToWeb();
      return;
    }
 else     if (gifViewMode == PrefsUtility.GifViewMode.EXTERNAL_BROWSER) {
      General.UI_THREAD_HANDLER.post(new Runnable(){
        @Override public void run(){
          LinkHandler.openWebBrowser(ImageViewActivity.this,Uri.parse(mUrl.toString()));
          finish();
        }
      }
);
      return;
    }
    if (AndroidApi.isIceCreamSandwichOrLater() && gifViewMode == PrefsUtility.GifViewMode.INTERNAL_MOVIE) {
      General.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          if (mIsDestroyed)           return;
          mRequest=null;
          try {
            final GIFView gifView=new GIFView(ImageViewActivity.this,cacheFileInputStream);
            setContentView(gifView);
            gifView.setOnClickListener(new View.OnClickListener(){
              public void onClick(              View v){
                finish();
              }
            }
);
          }
 catch (          OutOfMemoryError e) {
            General.quickToast(context,R.string.imageview_oom);
            revertToWeb();
          }
catch (          Throwable e) {
            General.quickToast(context,R.string.imageview_invalid_gif);
            revertToWeb();
          }
        }
      }
);
    }
 else {
      gifThread=new GifDecoderThread(cacheFileInputStream,new GifDecoderThread.OnGifLoadedListener(){
        public void onGifLoaded(){
          General.UI_THREAD_HANDLER.post(new Runnable(){
            public void run(){
              if (mIsDestroyed)               return;
              mRequest=null;
              imageView=new ImageView(context);
              imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
              setContentView(imageView);
              gifThread.setView(imageView);
              imageView.setOnClickListener(new View.OnClickListener(){
                public void onClick(                View v){
                  finish();
                }
              }
);
            }
          }
);
        }
        public void onOutOfMemory(){
          General.quickToast(context,R.string.imageview_oom);
          revertToWeb();
        }
        public void onGifInvalid(){
          General.quickToast(context,R.string.imageview_invalid_gif);
          revertToWeb();
        }
      }
);
      gifThread.start();
    }
  }
 else {
    final ImageTileSource imageTileSource;
    try {
      final long bytes=cacheFile.getSize();
      final byte[] buf=new byte[(int)bytes];
      try {
        new DataInputStream(cacheFileInputStream).readFully(buf);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      try {
        imageTileSource=new ImageTileSourceWholeBitmap(buf);
      }
 catch (      Throwable t) {
        Log.e(""String_Node_Str"",""String_Node_Str"",t);
        General.quickToast(context,R.string.imageview_decode_failed);
        revertToWeb();
        return;
      }
    }
 catch (    OutOfMemoryError e) {
      General.quickToast(context,R.string.imageview_oom);
      revertToWeb();
      return;
    }
    General.UI_THREAD_HANDLER.post(new Runnable(){
      public void run(){
        if (mIsDestroyed)         return;
        mRequest=null;
        mImageViewDisplayerManager=new ImageViewDisplayListManager(imageTileSource,ImageViewActivity.this);
        surfaceView=new RRGLSurfaceView(ImageViewActivity.this,mImageViewDisplayerManager);
        setContentView(surfaceView);
        surfaceView.setOnClickListener(new View.OnClickListener(){
          public void onClick(          View v){
            finish();
          }
        }
);
        if (mIsPaused) {
          surfaceView.onPause();
        }
 else {
          surfaceView.onResume();
        }
      }
    }
);
  }
}","@Override protected void onSuccess(final CacheManager.ReadableCacheFile cacheFile,long timestamp,UUID session,boolean fromCache,final String mimetype){
  if (mimetype == null || (!Constants.Mime.isImage(mimetype) && !Constants.Mime.isVideo(mimetype))) {
    revertToWeb();
    return;
  }
  final InputStream cacheFileInputStream;
  try {
    cacheFileInputStream=cacheFile.getInputStream();
  }
 catch (  IOException e) {
    notifyFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"");
    return;
  }
  if (cacheFileInputStream == null) {
    notifyFailure(RequestFailureType.CACHE_MISS,null,null,""String_Node_Str"");
    return;
  }
  if (Constants.Mime.isVideo(mimetype)) {
    AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
      public void run(){
        if (mIsDestroyed)         return;
        mRequest=null;
        try {
          final RelativeLayout layout=new RelativeLayout(context);
          layout.setGravity(Gravity.CENTER);
          final VideoView videoView=new VideoView(ImageViewActivity.this);
          videoView.setVideoURI(cacheFile.getUri());
          layout.addView(videoView);
          setContentView(layout);
          layout.getLayoutParams().width=ViewGroup.LayoutParams.MATCH_PARENT;
          layout.getLayoutParams().height=ViewGroup.LayoutParams.MATCH_PARENT;
          videoView.setLayoutParams(new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
          videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener(){
            @Override public void onPrepared(            MediaPlayer mp){
              mp.setLooping(true);
              videoView.start();
            }
          }
);
          videoView.setOnErrorListener(new MediaPlayer.OnErrorListener(){
            @Override public boolean onError(            final MediaPlayer mediaPlayer,            final int i,            final int i1){
              revertToWeb();
              return true;
            }
          }
);
          videoView.setOnTouchListener(new View.OnTouchListener(){
            @Override public boolean onTouch(            final View view,            final MotionEvent motionEvent){
              finish();
              return true;
            }
          }
);
        }
 catch (        OutOfMemoryError e) {
          General.quickToast(context,R.string.imageview_oom);
          revertToWeb();
        }
catch (        Throwable e) {
          General.quickToast(context,R.string.imageview_invalid_video);
          revertToWeb();
        }
      }
    }
);
  }
 else   if (Constants.Mime.isImageGif(mimetype)) {
    final PrefsUtility.GifViewMode gifViewMode=PrefsUtility.pref_behaviour_gifview_mode(context,sharedPreferences);
    if (gifViewMode == PrefsUtility.GifViewMode.INTERNAL_BROWSER) {
      revertToWeb();
      return;
    }
 else     if (gifViewMode == PrefsUtility.GifViewMode.EXTERNAL_BROWSER) {
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        @Override public void run(){
          LinkHandler.openWebBrowser(ImageViewActivity.this,Uri.parse(mUrl.toString()));
          finish();
        }
      }
);
      return;
    }
    if (AndroidApi.isIceCreamSandwichOrLater() && gifViewMode == PrefsUtility.GifViewMode.INTERNAL_MOVIE) {
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          if (mIsDestroyed)           return;
          mRequest=null;
          try {
            final GIFView gifView=new GIFView(ImageViewActivity.this,cacheFileInputStream);
            setContentView(gifView);
            gifView.setOnClickListener(new View.OnClickListener(){
              public void onClick(              View v){
                finish();
              }
            }
);
          }
 catch (          OutOfMemoryError e) {
            General.quickToast(context,R.string.imageview_oom);
            revertToWeb();
          }
catch (          Throwable e) {
            General.quickToast(context,R.string.imageview_invalid_gif);
            revertToWeb();
          }
        }
      }
);
    }
 else {
      gifThread=new GifDecoderThread(cacheFileInputStream,new GifDecoderThread.OnGifLoadedListener(){
        public void onGifLoaded(){
          AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
            public void run(){
              if (mIsDestroyed)               return;
              mRequest=null;
              imageView=new ImageView(context);
              imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
              setContentView(imageView);
              gifThread.setView(imageView);
              imageView.setOnClickListener(new View.OnClickListener(){
                public void onClick(                View v){
                  finish();
                }
              }
);
            }
          }
);
        }
        public void onOutOfMemory(){
          General.quickToast(context,R.string.imageview_oom);
          revertToWeb();
        }
        public void onGifInvalid(){
          General.quickToast(context,R.string.imageview_invalid_gif);
          revertToWeb();
        }
      }
);
      gifThread.start();
    }
  }
 else {
    final ImageTileSource imageTileSource;
    try {
      final long bytes=cacheFile.getSize();
      final byte[] buf=new byte[(int)bytes];
      try {
        new DataInputStream(cacheFileInputStream).readFully(buf);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      try {
        imageTileSource=new ImageTileSourceWholeBitmap(buf);
      }
 catch (      Throwable t) {
        Log.e(""String_Node_Str"",""String_Node_Str"",t);
        General.quickToast(context,R.string.imageview_decode_failed);
        revertToWeb();
        return;
      }
    }
 catch (    OutOfMemoryError e) {
      General.quickToast(context,R.string.imageview_oom);
      revertToWeb();
      return;
    }
    AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
      public void run(){
        if (mIsDestroyed)         return;
        mRequest=null;
        mImageViewDisplayerManager=new ImageViewDisplayListManager(imageTileSource,ImageViewActivity.this);
        surfaceView=new RRGLSurfaceView(ImageViewActivity.this,mImageViewDisplayerManager);
        setContentView(surfaceView);
        surfaceView.setOnClickListener(new View.OnClickListener(){
          public void onClick(          View v){
            finish();
          }
        }
);
        if (mIsPaused) {
          surfaceView.onPause();
        }
 else {
          surfaceView.onResume();
        }
      }
    }
);
  }
}",0.993527754511536
15387,"@Override protected void onFailure(final APIFailureType type){
  final RRError error=General.getGeneralErrorForFailure(context,type);
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      General.showResultDialog(InboxListingActivity.this,error);
    }
  }
);
}","@Override protected void onFailure(final APIFailureType type){
  final RRError error=General.getGeneralErrorForFailure(context,type);
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      General.showResultDialog(InboxListingActivity.this,error);
    }
  }
);
}",0.9703315881326352
15388,"private void makeFirstRequest(final Context context){
  final RedditAccount user=RedditAccountManager.getInstance(context).getDefaultAccount();
  final CacheManager cm=CacheManager.getInstance(context);
  final URI url;
  if (!isModmail) {
    url=Constants.Reddit.getUri(""String_Node_Str"");
  }
 else {
    url=Constants.Reddit.getUri(""String_Node_Str"");
  }
  request=new CacheRequest(url,user,null,Constants.Priority.API_INBOX_LIST,0,CacheRequest.DownloadType.FORCE,Constants.FileType.INBOX_LIST,true,true,true,context){
    @Override protected void onDownloadNecessary(){
    }
    @Override protected void onDownloadStarted(){
    }
    @Override protected void onCallbackException(    final Throwable t){
      request=null;
      BugReportActivity.handleGlobalError(context,t);
    }
    @Override protected void onFailure(    final RequestFailureType type,    final Throwable t,    final StatusLine status,    final String readableMessage){
      request=null;
      if (loadingView != null)       loadingView.setDone(R.string.download_failed);
      final RRError error=General.getGeneralErrorForFailure(context,type,t,status,url.toString());
      General.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          notifications.addView(new ErrorView(InboxListingActivity.this,error));
        }
      }
);
      if (t != null)       t.printStackTrace();
    }
    @Override protected void onProgress(    final boolean authorizationInProgress,    final long bytesRead,    final long totalBytes){
    }
    @Override protected void onSuccess(    final CacheManager.ReadableCacheFile cacheFile,    final long timestamp,    final UUID session,    final boolean fromCache,    final String mimetype){
      request=null;
    }
    @Override public void onJsonParseStarted(    final JsonValue value,    final long timestamp,    final UUID session,    final boolean fromCache){
      if (loadingView != null)       loadingView.setIndeterminate(R.string.download_downloading);
      if (fromCache && RRTime.since(timestamp) > 10 * 60 * 1000) {
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            final TextView cacheNotif=new TextView(context);
            cacheNotif.setText(context.getString(R.string.listing_cached) + RRTime.formatDateTime(timestamp,context));
            final int paddingPx=General.dpToPixels(context,6);
            final int sidePaddingPx=General.dpToPixels(context,10);
            cacheNotif.setPadding(sidePaddingPx,paddingPx,sidePaddingPx,paddingPx);
            cacheNotif.setTextSize(13f);
            notifications.addView(cacheNotif);
            adapter.notifyDataSetChanged();
          }
        }
);
      }
      try {
        final JsonBufferedObject root=value.asObject();
        final JsonBufferedObject data=root.getObject(""String_Node_Str"");
        final JsonBufferedArray children=data.getArray(""String_Node_Str"");
        for (        JsonValue child : children) {
          final RedditThing thing=child.asObject(RedditThing.class);
switch (thing.getKind()) {
case COMMENT:
            final RedditPreparedComment comment=new RedditPreparedComment(InboxListingActivity.this,thing.asComment(),timestamp,false,null,user,headerItems);
          itemHandler.sendMessage(General.handlerMessage(0,comment));
        break;
case MESSAGE:
      final RedditPreparedMessage message=new RedditPreparedMessage(InboxListingActivity.this,thing.asMessage(),timestamp);
    itemHandler.sendMessage(General.handlerMessage(0,message));
  if (message.src.replies != null && message.src.replies.getType() == JsonValue.Type.OBJECT) {
    final JsonBufferedArray replies=message.src.replies.asObject().getObject(""String_Node_Str"").getArray(""String_Node_Str"");
    for (    JsonValue childMsgValue : replies) {
      final RedditMessage childMsgRaw=childMsgValue.asObject(RedditThing.class).asMessage();
      final RedditPreparedMessage childMsg=new RedditPreparedMessage(InboxListingActivity.this,childMsgRaw,timestamp);
      itemHandler.sendMessage(General.handlerMessage(0,childMsg));
    }
  }
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
}
}
 catch (Throwable t) {
notifyFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"");
return;
}
if (loadingView != null) loadingView.setDone(R.string.download_done);
}
}
;
cm.makeRequest(request);
}","private void makeFirstRequest(final Context context){
  final RedditAccount user=RedditAccountManager.getInstance(context).getDefaultAccount();
  final CacheManager cm=CacheManager.getInstance(context);
  final URI url;
  if (!isModmail) {
    url=Constants.Reddit.getUri(""String_Node_Str"");
  }
 else {
    url=Constants.Reddit.getUri(""String_Node_Str"");
  }
  request=new CacheRequest(url,user,null,Constants.Priority.API_INBOX_LIST,0,CacheRequest.DownloadType.FORCE,Constants.FileType.INBOX_LIST,true,true,true,context){
    @Override protected void onDownloadNecessary(){
    }
    @Override protected void onDownloadStarted(){
    }
    @Override protected void onCallbackException(    final Throwable t){
      request=null;
      BugReportActivity.handleGlobalError(context,t);
    }
    @Override protected void onFailure(    final RequestFailureType type,    final Throwable t,    final StatusLine status,    final String readableMessage){
      request=null;
      if (loadingView != null)       loadingView.setDone(R.string.download_failed);
      final RRError error=General.getGeneralErrorForFailure(context,type,t,status,url.toString());
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          notifications.addView(new ErrorView(InboxListingActivity.this,error));
        }
      }
);
      if (t != null)       t.printStackTrace();
    }
    @Override protected void onProgress(    final boolean authorizationInProgress,    final long bytesRead,    final long totalBytes){
    }
    @Override protected void onSuccess(    final CacheManager.ReadableCacheFile cacheFile,    final long timestamp,    final UUID session,    final boolean fromCache,    final String mimetype){
      request=null;
    }
    @Override public void onJsonParseStarted(    final JsonValue value,    final long timestamp,    final UUID session,    final boolean fromCache){
      if (loadingView != null)       loadingView.setIndeterminate(R.string.download_downloading);
      if (fromCache && RRTime.since(timestamp) > 10 * 60 * 1000) {
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            final TextView cacheNotif=new TextView(context);
            cacheNotif.setText(context.getString(R.string.listing_cached) + RRTime.formatDateTime(timestamp,context));
            final int paddingPx=General.dpToPixels(context,6);
            final int sidePaddingPx=General.dpToPixels(context,10);
            cacheNotif.setPadding(sidePaddingPx,paddingPx,sidePaddingPx,paddingPx);
            cacheNotif.setTextSize(13f);
            notifications.addView(cacheNotif);
            adapter.notifyDataSetChanged();
          }
        }
);
      }
      try {
        final JsonBufferedObject root=value.asObject();
        final JsonBufferedObject data=root.getObject(""String_Node_Str"");
        final JsonBufferedArray children=data.getArray(""String_Node_Str"");
        for (        JsonValue child : children) {
          final RedditThing thing=child.asObject(RedditThing.class);
switch (thing.getKind()) {
case COMMENT:
            final RedditPreparedComment comment=new RedditPreparedComment(InboxListingActivity.this,thing.asComment(),timestamp,false,null,user,headerItems);
          itemHandler.sendMessage(General.handlerMessage(0,comment));
        break;
case MESSAGE:
      final RedditPreparedMessage message=new RedditPreparedMessage(InboxListingActivity.this,thing.asMessage(),timestamp);
    itemHandler.sendMessage(General.handlerMessage(0,message));
  if (message.src.replies != null && message.src.replies.getType() == JsonValue.Type.OBJECT) {
    final JsonBufferedArray replies=message.src.replies.asObject().getObject(""String_Node_Str"").getArray(""String_Node_Str"");
    for (    JsonValue childMsgValue : replies) {
      final RedditMessage childMsgRaw=childMsgValue.asObject(RedditThing.class).asMessage();
      final RedditPreparedMessage childMsg=new RedditPreparedMessage(InboxListingActivity.this,childMsgRaw,timestamp);
      itemHandler.sendMessage(General.handlerMessage(0,childMsg));
    }
  }
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
}
}
 catch (Throwable t) {
notifyFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"");
return;
}
if (loadingView != null) loadingView.setDone(R.string.download_done);
}
}
;
cm.makeRequest(request);
}",0.9961027051811095
15389,"@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case OPTIONS_MENU_MARK_ALL_AS_READ:
    RedditAPI.markAllAsRead(CacheManager.getInstance(this),new APIResponseHandler.ActionResponseHandler(this){
      @Override protected void onSuccess(){
        General.quickToast(context,R.string.mark_all_as_read_success);
      }
      @Override protected void onCallbackException(      final Throwable t){
        BugReportActivity.addGlobalError(new RRError(""String_Node_Str"",""String_Node_Str"",t));
      }
      @Override protected void onFailure(      final RequestFailureType type,      final Throwable t,      final StatusLine status,      final String readableMessage){
        final RRError error=General.getGeneralErrorForFailure(context,type,t,status,""String_Node_Str"");
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(InboxListingActivity.this,error);
          }
        }
);
      }
      @Override protected void onFailure(      final APIFailureType type){
        final RRError error=General.getGeneralErrorForFailure(context,type);
        General.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(InboxListingActivity.this,error);
          }
        }
);
      }
    }
,RedditAccountManager.getInstance(this).getDefaultAccount(),this);
  return true;
case android.R.id.home:
finish();
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(final MenuItem item){
switch (item.getItemId()) {
case OPTIONS_MENU_MARK_ALL_AS_READ:
    RedditAPI.markAllAsRead(CacheManager.getInstance(this),new APIResponseHandler.ActionResponseHandler(this){
      @Override protected void onSuccess(){
        General.quickToast(context,R.string.mark_all_as_read_success);
      }
      @Override protected void onCallbackException(      final Throwable t){
        BugReportActivity.addGlobalError(new RRError(""String_Node_Str"",""String_Node_Str"",t));
      }
      @Override protected void onFailure(      final RequestFailureType type,      final Throwable t,      final StatusLine status,      final String readableMessage){
        final RRError error=General.getGeneralErrorForFailure(context,type,t,status,""String_Node_Str"");
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(InboxListingActivity.this,error);
          }
        }
);
      }
      @Override protected void onFailure(      final APIFailureType type){
        final RRError error=General.getGeneralErrorForFailure(context,type);
        AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
          public void run(){
            General.showResultDialog(InboxListingActivity.this,error);
          }
        }
);
      }
    }
,RedditAccountManager.getInstance(this).getDefaultAccount(),this);
  return true;
case android.R.id.home:
finish();
return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.9889538661468484
15390,"@Override public void onJsonParseStarted(final JsonValue value,final long timestamp,final UUID session,final boolean fromCache){
  if (loadingView != null)   loadingView.setIndeterminate(R.string.download_downloading);
  if (fromCache && RRTime.since(timestamp) > 10 * 60 * 1000) {
    General.UI_THREAD_HANDLER.post(new Runnable(){
      public void run(){
        final TextView cacheNotif=new TextView(context);
        cacheNotif.setText(context.getString(R.string.listing_cached) + RRTime.formatDateTime(timestamp,context));
        final int paddingPx=General.dpToPixels(context,6);
        final int sidePaddingPx=General.dpToPixels(context,10);
        cacheNotif.setPadding(sidePaddingPx,paddingPx,sidePaddingPx,paddingPx);
        cacheNotif.setTextSize(13f);
        notifications.addView(cacheNotif);
        adapter.notifyDataSetChanged();
      }
    }
);
  }
  try {
    final JsonBufferedObject root=value.asObject();
    final JsonBufferedObject data=root.getObject(""String_Node_Str"");
    final JsonBufferedArray children=data.getArray(""String_Node_Str"");
    for (    JsonValue child : children) {
      final RedditThing thing=child.asObject(RedditThing.class);
switch (thing.getKind()) {
case COMMENT:
        final RedditPreparedComment comment=new RedditPreparedComment(InboxListingActivity.this,thing.asComment(),timestamp,false,null,user,headerItems);
      itemHandler.sendMessage(General.handlerMessage(0,comment));
    break;
case MESSAGE:
  final RedditPreparedMessage message=new RedditPreparedMessage(InboxListingActivity.this,thing.asMessage(),timestamp);
itemHandler.sendMessage(General.handlerMessage(0,message));
if (message.src.replies != null && message.src.replies.getType() == JsonValue.Type.OBJECT) {
final JsonBufferedArray replies=message.src.replies.asObject().getObject(""String_Node_Str"").getArray(""String_Node_Str"");
for (JsonValue childMsgValue : replies) {
  final RedditMessage childMsgRaw=childMsgValue.asObject(RedditThing.class).asMessage();
  final RedditPreparedMessage childMsg=new RedditPreparedMessage(InboxListingActivity.this,childMsgRaw,timestamp);
  itemHandler.sendMessage(General.handlerMessage(0,childMsg));
}
}
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
}
}
 catch (Throwable t) {
notifyFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"");
return;
}
if (loadingView != null) loadingView.setDone(R.string.download_done);
}","@Override public void onJsonParseStarted(final JsonValue value,final long timestamp,final UUID session,final boolean fromCache){
  if (loadingView != null)   loadingView.setIndeterminate(R.string.download_downloading);
  if (fromCache && RRTime.since(timestamp) > 10 * 60 * 1000) {
    AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
      public void run(){
        final TextView cacheNotif=new TextView(context);
        cacheNotif.setText(context.getString(R.string.listing_cached) + RRTime.formatDateTime(timestamp,context));
        final int paddingPx=General.dpToPixels(context,6);
        final int sidePaddingPx=General.dpToPixels(context,10);
        cacheNotif.setPadding(sidePaddingPx,paddingPx,sidePaddingPx,paddingPx);
        cacheNotif.setTextSize(13f);
        notifications.addView(cacheNotif);
        adapter.notifyDataSetChanged();
      }
    }
);
  }
  try {
    final JsonBufferedObject root=value.asObject();
    final JsonBufferedObject data=root.getObject(""String_Node_Str"");
    final JsonBufferedArray children=data.getArray(""String_Node_Str"");
    for (    JsonValue child : children) {
      final RedditThing thing=child.asObject(RedditThing.class);
switch (thing.getKind()) {
case COMMENT:
        final RedditPreparedComment comment=new RedditPreparedComment(InboxListingActivity.this,thing.asComment(),timestamp,false,null,user,headerItems);
      itemHandler.sendMessage(General.handlerMessage(0,comment));
    break;
case MESSAGE:
  final RedditPreparedMessage message=new RedditPreparedMessage(InboxListingActivity.this,thing.asMessage(),timestamp);
itemHandler.sendMessage(General.handlerMessage(0,message));
if (message.src.replies != null && message.src.replies.getType() == JsonValue.Type.OBJECT) {
final JsonBufferedArray replies=message.src.replies.asObject().getObject(""String_Node_Str"").getArray(""String_Node_Str"");
for (JsonValue childMsgValue : replies) {
  final RedditMessage childMsgRaw=childMsgValue.asObject(RedditThing.class).asMessage();
  final RedditPreparedMessage childMsg=new RedditPreparedMessage(InboxListingActivity.this,childMsgRaw,timestamp);
  itemHandler.sendMessage(General.handlerMessage(0,childMsg));
}
}
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
}
}
 catch (Throwable t) {
notifyFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"");
return;
}
if (loadingView != null) loadingView.setDone(R.string.download_done);
}",0.9964825160355888
15391,"@Override protected void onFailure(final APIFailureType type){
  final RRError error=General.getGeneralErrorForFailure(context,type);
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      General.showResultDialog(PostSubmitActivity.this,error);
      if (progressDialog.isShowing())       progressDialog.dismiss();
    }
  }
);
}","@Override protected void onFailure(final APIFailureType type){
  final RRError error=General.getGeneralErrorForFailure(context,type);
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      General.showResultDialog(PostSubmitActivity.this,error);
      if (progressDialog.isShowing())       progressDialog.dismiss();
    }
  }
);
}",0.9760225669957688
15392,"@Override protected void onActivityResult(int requestCode,int resultCode,final Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode != RESULT_OK)   return;
  final ProgressDialog progressDialog=new ProgressDialog(this);
  progressDialog.setTitle(getString(R.string.comment_reply_submitting_title));
  progressDialog.setMessage(getString(R.string.comment_reply_submitting_message));
  progressDialog.setIndeterminate(true);
  progressDialog.setCancelable(true);
  progressDialog.setCanceledOnTouchOutside(false);
  progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener(){
    public void onCancel(    final DialogInterface dialogInterface){
      General.quickToast(PostSubmitActivity.this,getString(R.string.comment_reply_oncancel));
      progressDialog.dismiss();
    }
  }
);
  progressDialog.setOnKeyListener(new DialogInterface.OnKeyListener(){
    public boolean onKey(    final DialogInterface dialogInterface,    final int keyCode,    final KeyEvent keyEvent){
      if (keyCode == KeyEvent.KEYCODE_BACK) {
        General.quickToast(PostSubmitActivity.this,getString(R.string.comment_reply_oncancel));
        progressDialog.dismiss();
      }
      return true;
    }
  }
);
  final CacheManager cm=CacheManager.getInstance(this);
  final APIResponseHandler.ActionResponseHandler handler=new APIResponseHandler.ActionResponseHandler(this){
    @Override protected void onSuccess(){
      General.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          if (progressDialog.isShowing())           progressDialog.dismiss();
          General.quickToast(PostSubmitActivity.this,getString(R.string.post_submit_done));
          finish();
        }
      }
);
    }
    @Override protected void onCallbackException(    Throwable t){
      BugReportActivity.handleGlobalError(PostSubmitActivity.this,t);
    }
    @Override protected void onFailure(    RequestFailureType type,    Throwable t,    StatusLine status,    String readableMessage){
      final RRError error=General.getGeneralErrorForFailure(context,type,t,status,null);
      General.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          General.showResultDialog(PostSubmitActivity.this,error);
          if (progressDialog.isShowing())           progressDialog.dismiss();
        }
      }
);
    }
    @Override protected void onFailure(    final APIFailureType type){
      final RRError error=General.getGeneralErrorForFailure(context,type);
      General.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          General.showResultDialog(PostSubmitActivity.this,error);
          if (progressDialog.isShowing())           progressDialog.dismiss();
        }
      }
);
    }
  }
;
  final boolean is_self=!typeSpinner.getSelectedItem().equals(""String_Node_Str"");
  final RedditAccount selectedAccount=RedditAccountManager.getInstance(this).getAccount((String)usernameSpinner.getSelectedItem());
  String subreddit=subredditEdit.getText().toString();
  final String title=titleEdit.getText().toString();
  final String text=textEdit.getText().toString();
  final String captchaId=data.getStringExtra(""String_Node_Str"");
  final String captchaText=data.getStringExtra(""String_Node_Str"");
  while (subreddit.startsWith(""String_Node_Str""))   subreddit=subreddit.substring(1);
  while (subreddit.startsWith(""String_Node_Str""))   subreddit=subreddit.substring(2);
  while (subreddit.endsWith(""String_Node_Str""))   subreddit=subreddit.substring(0,subreddit.length() - 1);
  RedditAPI.submit(cm,handler,selectedAccount,is_self,subreddit,title,text,captchaId,captchaText,this);
  progressDialog.show();
}","@Override protected void onActivityResult(int requestCode,int resultCode,final Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode != RESULT_OK)   return;
  final ProgressDialog progressDialog=new ProgressDialog(this);
  progressDialog.setTitle(getString(R.string.comment_reply_submitting_title));
  progressDialog.setMessage(getString(R.string.comment_reply_submitting_message));
  progressDialog.setIndeterminate(true);
  progressDialog.setCancelable(true);
  progressDialog.setCanceledOnTouchOutside(false);
  progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener(){
    public void onCancel(    final DialogInterface dialogInterface){
      General.quickToast(PostSubmitActivity.this,getString(R.string.comment_reply_oncancel));
      progressDialog.dismiss();
    }
  }
);
  progressDialog.setOnKeyListener(new DialogInterface.OnKeyListener(){
    public boolean onKey(    final DialogInterface dialogInterface,    final int keyCode,    final KeyEvent keyEvent){
      if (keyCode == KeyEvent.KEYCODE_BACK) {
        General.quickToast(PostSubmitActivity.this,getString(R.string.comment_reply_oncancel));
        progressDialog.dismiss();
      }
      return true;
    }
  }
);
  final CacheManager cm=CacheManager.getInstance(this);
  final APIResponseHandler.ActionResponseHandler handler=new APIResponseHandler.ActionResponseHandler(this){
    @Override protected void onSuccess(){
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          if (progressDialog.isShowing())           progressDialog.dismiss();
          General.quickToast(PostSubmitActivity.this,getString(R.string.post_submit_done));
          finish();
        }
      }
);
    }
    @Override protected void onCallbackException(    Throwable t){
      BugReportActivity.handleGlobalError(PostSubmitActivity.this,t);
    }
    @Override protected void onFailure(    RequestFailureType type,    Throwable t,    StatusLine status,    String readableMessage){
      final RRError error=General.getGeneralErrorForFailure(context,type,t,status,null);
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          General.showResultDialog(PostSubmitActivity.this,error);
          if (progressDialog.isShowing())           progressDialog.dismiss();
        }
      }
);
    }
    @Override protected void onFailure(    final APIFailureType type){
      final RRError error=General.getGeneralErrorForFailure(context,type);
      AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
        public void run(){
          General.showResultDialog(PostSubmitActivity.this,error);
          if (progressDialog.isShowing())           progressDialog.dismiss();
        }
      }
);
    }
  }
;
  final boolean is_self=!typeSpinner.getSelectedItem().equals(""String_Node_Str"");
  final RedditAccount selectedAccount=RedditAccountManager.getInstance(this).getAccount((String)usernameSpinner.getSelectedItem());
  String subreddit=subredditEdit.getText().toString();
  final String title=titleEdit.getText().toString();
  final String text=textEdit.getText().toString();
  final String captchaId=data.getStringExtra(""String_Node_Str"");
  final String captchaText=data.getStringExtra(""String_Node_Str"");
  while (subreddit.startsWith(""String_Node_Str""))   subreddit=subreddit.substring(1);
  while (subreddit.startsWith(""String_Node_Str""))   subreddit=subreddit.substring(2);
  while (subreddit.endsWith(""String_Node_Str""))   subreddit=subreddit.substring(0,subreddit.length() - 1);
  RedditAPI.submit(cm,handler,selectedAccount,is_self,subreddit,title,text,captchaId,captchaText,this);
  progressDialog.show();
}",0.9930715935334872
15393,"@Override protected void onSuccess(){
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      if (progressDialog.isShowing())       progressDialog.dismiss();
      General.quickToast(PostSubmitActivity.this,getString(R.string.post_submit_done));
      finish();
    }
  }
);
}","@Override protected void onSuccess(){
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      if (progressDialog.isShowing())       progressDialog.dismiss();
      General.quickToast(PostSubmitActivity.this,getString(R.string.post_submit_done));
      finish();
    }
  }
);
}",0.9716193656093488
15394,"public void setSubreddits(final Collection<String> subscriptions){
  final ArrayList<String> subscriptionsSorted=new ArrayList<String>(subscriptions);
  Collections.sort(subscriptionsSorted);
  General.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      subredditItems.clear();
      for (      final String subreddit : subscriptionsSorted) {
        try {
          subredditItems.add(makeSubredditItem(RedditSubreddit.stripRPrefix(subreddit)));
        }
 catch (        RedditSubreddit.InvalidSubredditNameException e) {
          subredditItems.add(makeSubredditItem(""String_Node_Str"" + subreddit));
        }
      }
      notifyDataSetChanged();
    }
  }
);
}","public void setSubreddits(final Collection<String> subscriptions){
  final ArrayList<String> subscriptionsSorted=new ArrayList<String>(subscriptions);
  Collections.sort(subscriptionsSorted);
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      subredditItems.clear();
      for (      final String subreddit : subscriptionsSorted) {
        try {
          subredditItems.add(makeSubredditItem(RedditSubreddit.stripRPrefix(subreddit)));
        }
 catch (        RedditSubreddit.InvalidSubredditNameException e) {
          subredditItems.add(makeSubredditItem(""String_Node_Str"" + subreddit));
        }
      }
      notifyDataSetChanged();
    }
  }
);
}",0.9875640087783468
15395,"public static void showResultDialog(final Activity context,final RRError error){
  UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      final AlertDialog.Builder alertBuilder=new AlertDialog.Builder(context);
      alertBuilder.setNeutralButton(R.string.dialog_close,null);
      alertBuilder.setNegativeButton(R.string.button_moredetail,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          ErrorPropertiesDialog.newInstance(error).show(context.getFragmentManager(),""String_Node_Str"");
        }
      }
);
      alertBuilder.setTitle(error.title);
      alertBuilder.setMessage(error.message);
      alertBuilder.create().show();
    }
  }
);
}","public static void showResultDialog(final Activity context,final RRError error){
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      final AlertDialog.Builder alertBuilder=new AlertDialog.Builder(context);
      alertBuilder.setNeutralButton(R.string.dialog_close,null);
      alertBuilder.setNegativeButton(R.string.button_moredetail,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          ErrorPropertiesDialog.newInstance(error).show(context.getFragmentManager(),""String_Node_Str"");
        }
      }
);
      alertBuilder.setTitle(error.title);
      alertBuilder.setMessage(error.message);
      alertBuilder.create().show();
    }
  }
);
}",0.9925725860904794
15396,"public static void quickToast(final Context context,final String text,final int duration){
  UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      Toast.makeText(context,text,duration).show();
    }
  }
);
}","public static void quickToast(final Context context,final String text,final int duration){
  AndroidApi.UI_THREAD_HANDLER.post(new Runnable(){
    public void run(){
      Toast.makeText(context,text,duration).show();
    }
  }
);
}",0.9757174392935982
15397,"public void action(final Activity activity,final RedditAPI.RedditAction action){
  final RedditAccount user=RedditAccountManager.getInstance(activity).getDefaultAccount();
  if (user.isAnonymous()) {
    General.quickToast(activity,""String_Node_Str"");
    return;
  }
  final int lastVoteDirection=voteDirection;
switch (action) {
case DOWNVOTE:
    voteDirection=-1;
  break;
case UNVOTE:
voteDirection=0;
break;
case UPVOTE:
voteDirection=1;
break;
case SAVE:
saved=true;
break;
case UNSAVE:
saved=false;
break;
}
refreshView(activity);
RedditAPI.action(CacheManager.getInstance(activity),new APIResponseHandler.ActionResponseHandler(activity){
@Override protected void onCallbackException(final Throwable t){
throw new RuntimeException(t);
}
@Override protected void onFailure(final RequestFailureType type,final Throwable t,final StatusLine status,final String readableMessage){
revertOnFailure();
if (t != null) t.printStackTrace();
final RRError error=General.getGeneralErrorForFailure(context,type,t,status,null);
General.UI_THREAD_HANDLER.post(new Runnable(){
public void run(){
General.showResultDialog(activity,error);
}
}
);
}
@Override protected void onFailure(final APIFailureType type){
revertOnFailure();
final RRError error=General.getGeneralErrorForFailure(context,type);
General.UI_THREAD_HANDLER.post(new Runnable(){
public void run(){
General.showResultDialog(activity,error);
}
}
);
}
@Override protected void onSuccess(){
lastChange=RRTime.utcCurrentTimeMillis();
RedditChangeDataManager.getInstance(context).update(src.link_id,user,RedditPreparedComment.this,true);
refreshView(activity);
}
private void revertOnFailure(){
switch (action) {
case DOWNVOTE:
case UNVOTE:
case UPVOTE:
voteDirection=lastVoteDirection;
break;
case SAVE:
saved=false;
break;
case UNSAVE:
saved=true;
break;
}
refreshView(context);
}
}
,user,idAndType,action,activity);
}","public void action(final Activity activity,final RedditAPI.RedditAction action){
  final RedditAccount user=RedditAccountManager.getInstance(activity).getDefaultAccount();
  if (user.isAnonymous()) {
    General.quickToast(activity,""String_Node_Str"");
    return;
  }
  final int lastVoteDirection=voteDirection;
switch (action) {
case DOWNVOTE:
    if (!src.archived) {
      voteDirection=-1;
    }
  break;
case UNVOTE:
if (!src.archived) {
  voteDirection=0;
}
break;
case UPVOTE:
if (!src.archived) {
voteDirection=1;
}
break;
case SAVE:
saved=true;
break;
case UNSAVE:
saved=false;
break;
}
refreshView(activity);
boolean vote=(action == RedditAPI.RedditAction.DOWNVOTE | action == RedditAPI.RedditAction.UPVOTE | action == RedditAPI.RedditAction.UNVOTE);
if (src.archived && vote) {
Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
return;
}
RedditAPI.action(CacheManager.getInstance(activity),new APIResponseHandler.ActionResponseHandler(activity){
@Override protected void onCallbackException(final Throwable t){
throw new RuntimeException(t);
}
@Override protected void onFailure(final RequestFailureType type,final Throwable t,final StatusLine status,final String readableMessage){
revertOnFailure();
if (t != null) t.printStackTrace();
final RRError error=General.getGeneralErrorForFailure(context,type,t,status,null);
General.UI_THREAD_HANDLER.post(new Runnable(){
public void run(){
General.showResultDialog(activity,error);
}
}
);
}
@Override protected void onFailure(final APIFailureType type){
revertOnFailure();
final RRError error=General.getGeneralErrorForFailure(context,type);
General.UI_THREAD_HANDLER.post(new Runnable(){
public void run(){
General.showResultDialog(activity,error);
}
}
);
}
@Override protected void onSuccess(){
lastChange=RRTime.utcCurrentTimeMillis();
RedditChangeDataManager.getInstance(context).update(src.link_id,user,RedditPreparedComment.this,true);
refreshView(activity);
}
private void revertOnFailure(){
switch (action) {
case DOWNVOTE:
case UNVOTE:
case UPVOTE:
voteDirection=lastVoteDirection;
break;
case SAVE:
saved=false;
break;
case UNSAVE:
saved=true;
break;
}
refreshView(context);
}
}
,user,idAndType,action,activity);
}",0.3653326786152713
15398,"private RedditComment(final Parcel in){
  body=in.readString();
  body_html=in.readString();
  author=in.readString();
  subreddit=in.readString();
  author_flair_text=in.readString();
switch (in.readInt()) {
case -1:
    likes=false;
  break;
case 0:
likes=null;
break;
case 1:
likes=true;
break;
}
replies=null;
id=in.readString();
subreddit_id=in.readString();
link_id=in.readString();
parent_id=in.readString();
name=in.readString();
context=in.readString();
ups=in.readInt();
downs=in.readInt();
final long in_edited=in.readLong();
if (in_edited == -1) {
edited=false;
}
 else {
edited=in_edited;
}
created=in.readLong();
created_utc=in.readLong();
saved=in.readInt() != 0;
gilded=in.readInt();
}","private RedditComment(final Parcel in){
  body=in.readString();
  body_html=in.readString();
  author=in.readString();
  subreddit=in.readString();
  author_flair_text=in.readString();
  archived=in.readInt() == 1;
switch (in.readInt()) {
case -1:
    likes=false;
  break;
case 0:
likes=null;
break;
case 1:
likes=true;
break;
}
replies=null;
id=in.readString();
subreddit_id=in.readString();
link_id=in.readString();
parent_id=in.readString();
name=in.readString();
context=in.readString();
ups=in.readInt();
downs=in.readInt();
final long in_edited=in.readLong();
if (in_edited == -1) {
edited=false;
}
 else {
edited=in_edited;
}
created=in.readLong();
created_utc=in.readLong();
saved=in.readInt() != 0;
gilded=in.readInt();
}",0.979050279329609
15399,"public void writeToParcel(final Parcel parcel,final int flags){
  parcel.writeString(body);
  parcel.writeString(body_html);
  parcel.writeString(author);
  parcel.writeString(subreddit);
  parcel.writeString(author_flair_text);
  if (likes == null) {
    parcel.writeInt(0);
  }
 else {
    parcel.writeInt(likes ? 1 : -1);
  }
  parcel.writeString(id);
  parcel.writeString(subreddit_id);
  parcel.writeString(link_id);
  parcel.writeString(parent_id);
  parcel.writeString(name);
  parcel.writeString(context);
  parcel.writeInt(ups);
  parcel.writeInt(downs);
  if (edited instanceof Long) {
    parcel.writeLong((Long)edited);
  }
 else {
    parcel.writeLong(-1);
  }
  parcel.writeLong(created);
  parcel.writeLong(created_utc);
  parcel.writeInt(saved ? 1 : 0);
  parcel.writeInt(gilded);
}","public void writeToParcel(final Parcel parcel,final int flags){
  parcel.writeString(body);
  parcel.writeString(body_html);
  parcel.writeString(author);
  parcel.writeString(subreddit);
  parcel.writeString(author_flair_text);
  parcel.writeInt(archived ? 1 : 0);
  if (likes == null) {
    parcel.writeInt(0);
  }
 else {
    parcel.writeInt(likes ? 1 : -1);
  }
  parcel.writeString(id);
  parcel.writeString(subreddit_id);
  parcel.writeString(link_id);
  parcel.writeString(parent_id);
  parcel.writeString(name);
  parcel.writeString(context);
  parcel.writeInt(ups);
  parcel.writeInt(downs);
  if (edited instanceof Long) {
    parcel.writeLong((Long)edited);
  }
 else {
    parcel.writeLong(-1);
  }
  parcel.writeLong(created);
  parcel.writeLong(created_utc);
  parcel.writeInt(saved ? 1 : 0);
  parcel.writeInt(gilded);
}",0.977342314758114
15400,"public void writeToParcel(final Parcel parcel,final int flags){
  parcel.writeString(id);
  parcel.writeString(name);
  parcel.writeString(title);
  parcel.writeString(url);
  parcel.writeString(author);
  parcel.writeString(domain);
  parcel.writeString(subreddit);
  parcel.writeString(subreddit_id);
  parcel.writeInt(num_comments);
  parcel.writeInt(score);
  parcel.writeInt(ups);
  parcel.writeInt(downs);
  parcel.writeInt(over_18 ? 1 : 0);
  parcel.writeInt(hidden ? 1 : 0);
  parcel.writeInt(saved ? 1 : 0);
  parcel.writeInt(is_self ? 1 : 0);
  parcel.writeInt(clicked ? 1 : 0);
  parcel.writeInt(stickied ? 1 : 0);
  if (edited instanceof Long) {
    parcel.writeLong((Long)edited);
  }
 else {
    parcel.writeLong(-1);
  }
  if (likes == null) {
    parcel.writeInt(0);
  }
 else {
    parcel.writeInt(likes ? 1 : -1);
  }
  parcel.writeLong(created);
  parcel.writeLong(created_utc);
  parcel.writeString(selftext);
  parcel.writeString(permalink);
  parcel.writeString(link_flair_text);
  parcel.writeString(author_flair_text);
  parcel.writeString(thumbnail);
}","public void writeToParcel(final Parcel parcel,final int flags){
  parcel.writeString(id);
  parcel.writeString(name);
  parcel.writeString(title);
  parcel.writeString(url);
  parcel.writeString(author);
  parcel.writeString(domain);
  parcel.writeString(subreddit);
  parcel.writeString(subreddit_id);
  parcel.writeInt(num_comments);
  parcel.writeInt(score);
  parcel.writeInt(ups);
  parcel.writeInt(downs);
  parcel.writeInt(archived ? 1 : 0);
  parcel.writeInt(over_18 ? 1 : 0);
  parcel.writeInt(hidden ? 1 : 0);
  parcel.writeInt(saved ? 1 : 0);
  parcel.writeInt(is_self ? 1 : 0);
  parcel.writeInt(clicked ? 1 : 0);
  parcel.writeInt(stickied ? 1 : 0);
  if (edited instanceof Long) {
    parcel.writeLong((Long)edited);
  }
 else {
    parcel.writeLong(-1);
  }
  if (likes == null) {
    parcel.writeInt(0);
  }
 else {
    parcel.writeInt(likes ? 1 : -1);
  }
  parcel.writeLong(created);
  parcel.writeLong(created_utc);
  parcel.writeString(selftext);
  parcel.writeString(permalink);
  parcel.writeString(link_flair_text);
  parcel.writeString(author_flair_text);
  parcel.writeString(thumbnail);
}",0.983112733911456
15401,"private RedditPost(final Parcel in){
  id=in.readString();
  name=in.readString();
  title=in.readString();
  url=in.readString();
  author=in.readString();
  domain=in.readString();
  subreddit=in.readString();
  subreddit_id=in.readString();
  num_comments=in.readInt();
  score=in.readInt();
  ups=in.readInt();
  downs=in.readInt();
  over_18=in.readInt() == 1;
  hidden=in.readInt() == 1;
  saved=in.readInt() == 1;
  is_self=in.readInt() == 1;
  clicked=in.readInt() == 1;
  stickied=in.readInt() == 1;
  final long in_edited=in.readLong();
  if (in_edited == -1) {
    edited=false;
  }
 else {
    edited=in_edited;
  }
switch (in.readInt()) {
case -1:
    likes=false;
  break;
case 0:
likes=null;
break;
case 1:
likes=true;
break;
}
created=in.readLong();
created_utc=in.readLong();
selftext=in.readString();
permalink=in.readString();
link_flair_text=in.readString();
author_flair_text=in.readString();
thumbnail=in.readString();
}","private RedditPost(final Parcel in){
  id=in.readString();
  name=in.readString();
  title=in.readString();
  url=in.readString();
  author=in.readString();
  domain=in.readString();
  subreddit=in.readString();
  subreddit_id=in.readString();
  num_comments=in.readInt();
  score=in.readInt();
  ups=in.readInt();
  downs=in.readInt();
  archived=in.readInt() == 1;
  over_18=in.readInt() == 1;
  hidden=in.readInt() == 1;
  saved=in.readInt() == 1;
  is_self=in.readInt() == 1;
  clicked=in.readInt() == 1;
  stickied=in.readInt() == 1;
  final long in_edited=in.readLong();
  if (in_edited == -1) {
    edited=false;
  }
 else {
    edited=in_edited;
  }
switch (in.readInt()) {
case -1:
    likes=false;
  break;
case 0:
likes=null;
break;
case 1:
likes=true;
break;
}
created=in.readLong();
created_utc=in.readLong();
selftext=in.readString();
permalink=in.readString();
link_flair_text=in.readString();
author_flair_text=in.readString();
thumbnail=in.readString();
}",0.9843260188087776
15402,"private void doSubredditListRequest(final RedditSubredditManager.SubredditListType type,final RequestResponseHandler<WritableHashSet,SubredditRequestFailure> handler,final String after){
  URI uri;
switch (type) {
case SUBSCRIBED:
    uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_MINE_SUBSCRIBER);
  break;
case MODERATED:
uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_MINE_MODERATOR);
break;
case MOST_POPULAR:
uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_POPULAR);
break;
default :
throw new UnexpectedInternalStateException(type.name());
}
if (after != null) {
final Uri.Builder builder=Uri.parse(uri.toString()).buildUpon();
builder.appendQueryParameter(""String_Node_Str"",after);
uri=General.uriFromString(builder.toString());
}
final CacheRequest aboutSubredditCacheRequest=new CacheRequest(uri,user,null,Constants.Priority.API_SUBREDDIT_INVIDIVUAL,0,CacheRequest.DownloadType.FORCE,Constants.FileType.SUBREDDIT_LIST,true,true,false,context){
@Override protected void onCallbackException(Throwable t){
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"",url));
}
@Override protected void onDownloadNecessary(){
}
@Override protected void onDownloadStarted(){
}
@Override protected void onProgress(final boolean authorizationInProgress,long bytesRead,long totalBytes){
}
@Override protected void onFailure(RequestFailureType type,Throwable t,StatusLine status,String readableMessage){
handler.onRequestFailed(new SubredditRequestFailure(type,t,status,readableMessage,url.toString()));
}
@Override protected void onSuccess(CacheManager.ReadableCacheFile cacheFile,long timestamp,UUID session,boolean fromCache,String mimetype){
}
@Override public void onJsonParseStarted(JsonValue result,long timestamp,UUID session,boolean fromCache){
try {
final HashSet<String> output=new HashSet<String>();
final ArrayList<RedditSubreddit> toWrite=new ArrayList<RedditSubreddit>();
final JsonBufferedObject redditListing=result.asObject().getObject(""String_Node_Str"");
final JsonBufferedArray subreddits=redditListing.getArray(""String_Node_Str"");
final JsonBuffered.Status joinStatus=subreddits.join();
if (joinStatus == JsonBuffered.Status.FAILED) {
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,null,null,""String_Node_Str"",url.toString()));
return;
}
if (type == RedditSubredditManager.SubredditListType.SUBSCRIBED && subreddits.getCurrentItemCount() == 0 && after == null) {
doSubredditListRequest(RedditSubredditManager.SubredditListType.MOST_POPULAR,handler,null);
return;
}
for (final JsonValue v : subreddits) {
final RedditThing thing=v.asObject(RedditThing.class);
final RedditSubreddit subreddit=thing.asSubreddit();
subreddit.downloadTime=timestamp;
toWrite.add(subreddit);
output.add(subreddit.getCanonicalName());
}
RedditSubredditManager.getInstance(context,user).offerRawSubredditData(toWrite,timestamp);
final String receivedAfter=redditListing.getString(""String_Node_Str"");
if (receivedAfter != null && type != RedditSubredditManager.SubredditListType.MOST_POPULAR) {
doSubredditListRequest(type,new RequestResponseHandler<WritableHashSet,SubredditRequestFailure>(){
public void onRequestFailed(SubredditRequestFailure failureReason){
handler.onRequestFailed(failureReason);
}
public void onRequestSuccess(WritableHashSet result,long timeCached){
output.addAll(result.toHashset());
handler.onRequestSuccess(new WritableHashSet(output,timeCached,type.name()),timeCached);
if (after == null) {
  Log.i(""String_Node_Str"",""String_Node_Str"" + output.size() + ""String_Node_Str"");
}
}
}
,receivedAfter);
}
 else {
handler.onRequestSuccess(new WritableHashSet(output,timestamp,type.name()),timestamp);
if (after == null) {
Log.i(""String_Node_Str"",""String_Node_Str"" + output.size() + ""String_Node_Str"");
}
}
}
 catch (Exception e) {
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"",url.toString()));
}
}
}
;
CacheManager.getInstance(context).makeRequest(aboutSubredditCacheRequest);
}","private void doSubredditListRequest(final RedditSubredditManager.SubredditListType type,final RequestResponseHandler<WritableHashSet,SubredditRequestFailure> handler,final String after){
  URI uri;
switch (type) {
case SUBSCRIBED:
    uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_MINE_SUBSCRIBER);
  break;
case MODERATED:
uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_MINE_MODERATOR);
break;
case MOST_POPULAR:
uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_POPULAR);
break;
default :
throw new UnexpectedInternalStateException(type.name());
}
if (after != null) {
final Uri.Builder builder=Uri.parse(uri.toString()).buildUpon();
builder.appendQueryParameter(""String_Node_Str"",after);
uri=General.uriFromString(builder.toString());
}
final CacheRequest aboutSubredditCacheRequest=new CacheRequest(uri,user,null,Constants.Priority.API_SUBREDDIT_INVIDIVUAL,0,CacheRequest.DownloadType.FORCE,Constants.FileType.SUBREDDIT_LIST,true,true,false,context){
@Override protected void onCallbackException(Throwable t){
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"",url));
}
@Override protected void onDownloadNecessary(){
}
@Override protected void onDownloadStarted(){
}
@Override protected void onProgress(final boolean authorizationInProgress,long bytesRead,long totalBytes){
}
@Override protected void onFailure(RequestFailureType type,Throwable t,StatusLine status,String readableMessage){
handler.onRequestFailed(new SubredditRequestFailure(type,t,status,readableMessage,url.toString()));
}
@Override protected void onSuccess(CacheManager.ReadableCacheFile cacheFile,long timestamp,UUID session,boolean fromCache,String mimetype){
}
@Override public void onJsonParseStarted(JsonValue result,long timestamp,UUID session,boolean fromCache){
try {
final HashSet<String> output=new HashSet<String>();
final ArrayList<RedditSubreddit> toWrite=new ArrayList<RedditSubreddit>();
final JsonBufferedObject redditListing=result.asObject().getObject(""String_Node_Str"");
final JsonBufferedArray subreddits=redditListing.getArray(""String_Node_Str"");
final JsonBuffered.Status joinStatus=subreddits.join();
if (joinStatus == JsonBuffered.Status.FAILED) {
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,null,null,""String_Node_Str"",url.toString()));
return;
}
if (type == RedditSubredditManager.SubredditListType.SUBSCRIBED && subreddits.getCurrentItemCount() == 0 && after == null) {
doSubredditListRequest(RedditSubredditManager.SubredditListType.DEFAULTS,handler,null);
return;
}
for (final JsonValue v : subreddits) {
final RedditThing thing=v.asObject(RedditThing.class);
final RedditSubreddit subreddit=thing.asSubreddit();
subreddit.downloadTime=timestamp;
toWrite.add(subreddit);
output.add(subreddit.getCanonicalName());
}
RedditSubredditManager.getInstance(context,user).offerRawSubredditData(toWrite,timestamp);
final String receivedAfter=redditListing.getString(""String_Node_Str"");
if (receivedAfter != null && type != RedditSubredditManager.SubredditListType.MOST_POPULAR) {
doSubredditListRequest(type,new RequestResponseHandler<WritableHashSet,SubredditRequestFailure>(){
public void onRequestFailed(SubredditRequestFailure failureReason){
handler.onRequestFailed(failureReason);
}
public void onRequestSuccess(WritableHashSet result,long timeCached){
output.addAll(result.toHashset());
handler.onRequestSuccess(new WritableHashSet(output,timeCached,type.name()),timeCached);
if (after == null) {
  Log.i(""String_Node_Str"",""String_Node_Str"" + output.size() + ""String_Node_Str"");
}
}
}
,receivedAfter);
}
 else {
handler.onRequestSuccess(new WritableHashSet(output,timestamp,type.name()),timestamp);
if (after == null) {
Log.i(""String_Node_Str"",""String_Node_Str"" + output.size() + ""String_Node_Str"");
}
}
}
 catch (Exception e) {
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"",url.toString()));
}
}
}
;
CacheManager.getInstance(context).makeRequest(aboutSubredditCacheRequest);
}",0.6547648362472297
15403,"@Override public void onJsonParseStarted(JsonValue result,long timestamp,UUID session,boolean fromCache){
  try {
    final HashSet<String> output=new HashSet<String>();
    final ArrayList<RedditSubreddit> toWrite=new ArrayList<RedditSubreddit>();
    final JsonBufferedObject redditListing=result.asObject().getObject(""String_Node_Str"");
    final JsonBufferedArray subreddits=redditListing.getArray(""String_Node_Str"");
    final JsonBuffered.Status joinStatus=subreddits.join();
    if (joinStatus == JsonBuffered.Status.FAILED) {
      handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,null,null,""String_Node_Str"",url.toString()));
      return;
    }
    if (type == RedditSubredditManager.SubredditListType.SUBSCRIBED && subreddits.getCurrentItemCount() == 0 && after == null) {
      doSubredditListRequest(RedditSubredditManager.SubredditListType.MOST_POPULAR,handler,null);
      return;
    }
    for (    final JsonValue v : subreddits) {
      final RedditThing thing=v.asObject(RedditThing.class);
      final RedditSubreddit subreddit=thing.asSubreddit();
      subreddit.downloadTime=timestamp;
      toWrite.add(subreddit);
      output.add(subreddit.getCanonicalName());
    }
    RedditSubredditManager.getInstance(context,user).offerRawSubredditData(toWrite,timestamp);
    final String receivedAfter=redditListing.getString(""String_Node_Str"");
    if (receivedAfter != null && type != RedditSubredditManager.SubredditListType.MOST_POPULAR) {
      doSubredditListRequest(type,new RequestResponseHandler<WritableHashSet,SubredditRequestFailure>(){
        public void onRequestFailed(        SubredditRequestFailure failureReason){
          handler.onRequestFailed(failureReason);
        }
        public void onRequestSuccess(        WritableHashSet result,        long timeCached){
          output.addAll(result.toHashset());
          handler.onRequestSuccess(new WritableHashSet(output,timeCached,type.name()),timeCached);
          if (after == null) {
            Log.i(""String_Node_Str"",""String_Node_Str"" + output.size() + ""String_Node_Str"");
          }
        }
      }
,receivedAfter);
    }
 else {
      handler.onRequestSuccess(new WritableHashSet(output,timestamp,type.name()),timestamp);
      if (after == null) {
        Log.i(""String_Node_Str"",""String_Node_Str"" + output.size() + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"",url.toString()));
  }
}","@Override public void onJsonParseStarted(JsonValue result,long timestamp,UUID session,boolean fromCache){
  try {
    final HashSet<String> output=new HashSet<String>();
    final ArrayList<RedditSubreddit> toWrite=new ArrayList<RedditSubreddit>();
    final JsonBufferedObject redditListing=result.asObject().getObject(""String_Node_Str"");
    final JsonBufferedArray subreddits=redditListing.getArray(""String_Node_Str"");
    final JsonBuffered.Status joinStatus=subreddits.join();
    if (joinStatus == JsonBuffered.Status.FAILED) {
      handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,null,null,""String_Node_Str"",url.toString()));
      return;
    }
    if (type == RedditSubredditManager.SubredditListType.SUBSCRIBED && subreddits.getCurrentItemCount() == 0 && after == null) {
      doSubredditListRequest(RedditSubredditManager.SubredditListType.DEFAULTS,handler,null);
      return;
    }
    for (    final JsonValue v : subreddits) {
      final RedditThing thing=v.asObject(RedditThing.class);
      final RedditSubreddit subreddit=thing.asSubreddit();
      subreddit.downloadTime=timestamp;
      toWrite.add(subreddit);
      output.add(subreddit.getCanonicalName());
    }
    RedditSubredditManager.getInstance(context,user).offerRawSubredditData(toWrite,timestamp);
    final String receivedAfter=redditListing.getString(""String_Node_Str"");
    if (receivedAfter != null && type != RedditSubredditManager.SubredditListType.MOST_POPULAR) {
      doSubredditListRequest(type,new RequestResponseHandler<WritableHashSet,SubredditRequestFailure>(){
        public void onRequestFailed(        SubredditRequestFailure failureReason){
          handler.onRequestFailed(failureReason);
        }
        public void onRequestSuccess(        WritableHashSet result,        long timeCached){
          output.addAll(result.toHashset());
          handler.onRequestSuccess(new WritableHashSet(output,timeCached,type.name()),timeCached);
          if (after == null) {
            Log.i(""String_Node_Str"",""String_Node_Str"" + output.size() + ""String_Node_Str"");
          }
        }
      }
,receivedAfter);
    }
 else {
      handler.onRequestSuccess(new WritableHashSet(output,timestamp,type.name()),timestamp);
      if (after == null) {
        Log.i(""String_Node_Str"",""String_Node_Str"" + output.size() + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"",url.toString()));
  }
}",0.3928289992119779
15404,"@Override public synchronized void onFingersMoved(){
  mScaleAnimation=null;
  mScrollbars.showBars();
switch (mCurrentTouchState) {
case DOUBLE_TAP_ONE_FINGER_DOWN:
{
      if (mDragFinger.mTotalPosDifference.distanceSquared() >= 400f * mScreenDensity * mScreenDensity) {
        mCurrentTouchState=TouchState.DOUBLE_TAP_ONE_FINGER_DRAG;
      }
      break;
    }
case DOUBLE_TAP_ONE_FINGER_DRAG:
{
    final MutableFloatPoint2D screenCentre=mTmpPoint1_onFingersMoved;
    screenCentre.set(mResolutionX / 2,mResolutionY / 2);
    mCoordinateHelper.scaleAboutScreenPoint(screenCentre,(float)Math.pow(1.01,mDragFinger.mPosDifference.y / mScreenDensity));
    break;
  }
case ONE_FINGER_DOWN:
{
  if (mDragFinger.mTotalPosDifference.distanceSquared() >= 100f * mScreenDensity * mScreenDensity) {
    mCurrentTouchState=TouchState.ONE_FINGER_DRAG;
  }
}
case ONE_FINGER_DRAG:
mCoordinateHelper.translateScreen(mDragFinger.mLastPos,mDragFinger.mCurrentPos);
break;
case TWO_FINGER_PINCH:
{
final double oldDistance=mPinchFinger1.mLastPos.euclideanDistanceTo(mPinchFinger2.mLastPos);
final double newDistance=mPinchFinger1.mCurrentPos.euclideanDistanceTo(mPinchFinger2.mCurrentPos);
final MutableFloatPoint2D oldCentre=mTmpPoint1_onFingersMoved;
mPinchFinger1.mLastPos.add(mPinchFinger2.mLastPos,oldCentre);
oldCentre.scale(0.5);
final MutableFloatPoint2D newCentre=mTmpPoint2_onFingersMoved;
mPinchFinger1.mCurrentPos.add(mPinchFinger2.mCurrentPos,newCentre);
newCentre.scale(0.5);
final float scaleDifference=(float)(newDistance / oldDistance);
mCoordinateHelper.scaleAboutScreenPoint(newCentre,scaleDifference);
mCoordinateHelper.translateScreen(oldCentre,newCentre);
break;
}
}
}","@Override public synchronized void onFingersMoved(){
  if (mScrollbars == null) {
    return;
  }
  mScaleAnimation=null;
  mScrollbars.showBars();
switch (mCurrentTouchState) {
case DOUBLE_TAP_ONE_FINGER_DOWN:
{
      if (mDragFinger.mTotalPosDifference.distanceSquared() >= 400f * mScreenDensity * mScreenDensity) {
        mCurrentTouchState=TouchState.DOUBLE_TAP_ONE_FINGER_DRAG;
      }
      break;
    }
case DOUBLE_TAP_ONE_FINGER_DRAG:
{
    final MutableFloatPoint2D screenCentre=mTmpPoint1_onFingersMoved;
    screenCentre.set(mResolutionX / 2,mResolutionY / 2);
    mCoordinateHelper.scaleAboutScreenPoint(screenCentre,(float)Math.pow(1.01,mDragFinger.mPosDifference.y / mScreenDensity));
    break;
  }
case ONE_FINGER_DOWN:
{
  if (mDragFinger.mTotalPosDifference.distanceSquared() >= 100f * mScreenDensity * mScreenDensity) {
    mCurrentTouchState=TouchState.ONE_FINGER_DRAG;
  }
}
case ONE_FINGER_DRAG:
mCoordinateHelper.translateScreen(mDragFinger.mLastPos,mDragFinger.mCurrentPos);
break;
case TWO_FINGER_PINCH:
{
final double oldDistance=mPinchFinger1.mLastPos.euclideanDistanceTo(mPinchFinger2.mLastPos);
final double newDistance=mPinchFinger1.mCurrentPos.euclideanDistanceTo(mPinchFinger2.mCurrentPos);
final MutableFloatPoint2D oldCentre=mTmpPoint1_onFingersMoved;
mPinchFinger1.mLastPos.add(mPinchFinger2.mLastPos,oldCentre);
oldCentre.scale(0.5);
final MutableFloatPoint2D newCentre=mTmpPoint2_onFingersMoved;
mPinchFinger1.mCurrentPos.add(mPinchFinger2.mCurrentPos,newCentre);
newCentre.scale(0.5);
final float scaleDifference=(float)(newDistance / oldDistance);
mCoordinateHelper.scaleAboutScreenPoint(newCentre,scaleDifference);
mCoordinateHelper.translateScreen(oldCentre,newCentre);
break;
}
}
}",0.9867763737878342
15405,"@Override public synchronized void onFingerUp(FingerTracker.Finger finger){
  mScaleAnimation=null;
  mScrollbars.showBars();
  if (mSpareFingers.remove(finger)) {
    return;
  }
switch (mCurrentTouchState) {
case DOUBLE_TAP_ONE_FINGER_DOWN:
    if (finger.mDownDuration < TAP_MAX_DURATION_MS) {
      onDoubleTap(finger.mCurrentPos);
    }
  mCurrentTouchState=null;
mDragFinger=null;
break;
case ONE_FINGER_DOWN:
if (finger.mDownDuration < TAP_MAX_DURATION_MS) {
mDoubleTapGapTimer.startTimer();
mCurrentTouchState=TouchState.DOUBLE_TAP_WAIT_NO_FINGERS_DOWN;
mFirstTapReleaseTime=System.currentTimeMillis();
}
 else {
mCurrentTouchState=null;
}
mDragFinger=null;
break;
case ONE_FINGER_DRAG:
case DOUBLE_TAP_ONE_FINGER_DRAG:
if (mSpareFingers.isEmpty()) {
mCurrentTouchState=null;
mDragFinger=null;
}
 else {
mDragFinger=mSpareFingers.pop();
}
break;
case TWO_FINGER_PINCH:
if (mSpareFingers.isEmpty()) {
mCurrentTouchState=TouchState.ONE_FINGER_DRAG;
mDragFinger=(mPinchFinger1 == finger) ? mPinchFinger2 : mPinchFinger1;
mPinchFinger1=null;
mPinchFinger2=null;
}
 else {
if (mPinchFinger1 == finger) {
mPinchFinger1=mSpareFingers.pop();
}
 else {
mPinchFinger2=mSpareFingers.pop();
}
}
break;
}
}","@Override public synchronized void onFingerUp(FingerTracker.Finger finger){
  if (mScrollbars == null) {
    return;
  }
  mScaleAnimation=null;
  mScrollbars.showBars();
  if (mSpareFingers.remove(finger)) {
    return;
  }
switch (mCurrentTouchState) {
case DOUBLE_TAP_ONE_FINGER_DOWN:
    if (finger.mDownDuration < TAP_MAX_DURATION_MS) {
      onDoubleTap(finger.mCurrentPos);
    }
  mCurrentTouchState=null;
mDragFinger=null;
break;
case ONE_FINGER_DOWN:
if (finger.mDownDuration < TAP_MAX_DURATION_MS) {
mDoubleTapGapTimer.startTimer();
mCurrentTouchState=TouchState.DOUBLE_TAP_WAIT_NO_FINGERS_DOWN;
mFirstTapReleaseTime=System.currentTimeMillis();
}
 else {
mCurrentTouchState=null;
}
mDragFinger=null;
break;
case ONE_FINGER_DRAG:
case DOUBLE_TAP_ONE_FINGER_DRAG:
if (mSpareFingers.isEmpty()) {
mCurrentTouchState=null;
mDragFinger=null;
}
 else {
mDragFinger=mSpareFingers.pop();
}
break;
case TWO_FINGER_PINCH:
if (mSpareFingers.isEmpty()) {
mCurrentTouchState=TouchState.ONE_FINGER_DRAG;
mDragFinger=(mPinchFinger1 == finger) ? mPinchFinger2 : mPinchFinger1;
mPinchFinger1=null;
mPinchFinger2=null;
}
 else {
if (mPinchFinger1 == finger) {
mPinchFinger1=mSpareFingers.pop();
}
 else {
mPinchFinger2=mSpareFingers.pop();
}
}
break;
}
}",0.981610134859011
15406,"@Override public synchronized void onFingerDown(FingerTracker.Finger finger){
  mScaleAnimation=null;
  mScrollbars.showBars();
  if (mCurrentTouchState == null) {
    mCurrentTouchState=TouchState.ONE_FINGER_DOWN;
    mDragFinger=finger;
  }
 else {
switch (mCurrentTouchState) {
case DOUBLE_TAP_WAIT_NO_FINGERS_DOWN:
      mCurrentTouchState=TouchState.DOUBLE_TAP_ONE_FINGER_DOWN;
    mDragFinger=finger;
  mDoubleTapGapTimer.stopTimer();
break;
case ONE_FINGER_DOWN:
case ONE_FINGER_DRAG:
case DOUBLE_TAP_ONE_FINGER_DOWN:
case DOUBLE_TAP_ONE_FINGER_DRAG:
mCurrentTouchState=TouchState.TWO_FINGER_PINCH;
mPinchFinger1=mDragFinger;
mPinchFinger2=finger;
mDragFinger=null;
break;
default :
mSpareFingers.push(finger);
break;
}
}
}","@Override public synchronized void onFingerDown(FingerTracker.Finger finger){
  if (mScrollbars == null) {
    return;
  }
  mScaleAnimation=null;
  mScrollbars.showBars();
  if (mCurrentTouchState == null) {
    mCurrentTouchState=TouchState.ONE_FINGER_DOWN;
    mDragFinger=finger;
  }
 else {
switch (mCurrentTouchState) {
case DOUBLE_TAP_WAIT_NO_FINGERS_DOWN:
      mCurrentTouchState=TouchState.DOUBLE_TAP_ONE_FINGER_DOWN;
    mDragFinger=finger;
  mDoubleTapGapTimer.stopTimer();
break;
case ONE_FINGER_DOWN:
case ONE_FINGER_DRAG:
case DOUBLE_TAP_ONE_FINGER_DOWN:
case DOUBLE_TAP_ONE_FINGER_DRAG:
mCurrentTouchState=TouchState.TWO_FINGER_PINCH;
mPinchFinger1=mDragFinger;
mPinchFinger2=finger;
mDragFinger=null;
break;
default :
mSpareFingers.push(finger);
break;
}
}
}",0.9700996677740864
15407,"public void reset(final RedditPreparedPost data){
  if (post == data) {
    return;
  }
  usageId++;
  super.reset();
  if (post != null)   post.unbind(this);
  data.bind(this);
  swipeReady=false;
  leftOverlayShown=false;
  rightOverlayShown=false;
  leftOverlayText.setVisibility(GONE);
  rightOverlayText.setVisibility(GONE);
  this.post=data;
  final Bitmap thumbnail=data.getThumbnail(this,usageId);
  thumbnailView.setImageBitmap(thumbnail);
  title.setText(data.title);
  commentsText.setText(String.valueOf(post.commentCount));
  if (data.hasThumbnail) {
    thumbnailView.setVisibility(VISIBLE);
    thumbnailView.setMinimumWidth((int)(64.0f * dpScale));
    thumbnailView.getLayoutParams().height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    thumbnailView.setMinimumWidth(0);
    thumbnailView.setVisibility(GONE);
  }
  updateAppearance();
}","public void reset(final RedditPreparedPost data){
  usageId++;
  super.reset();
  if (post != null)   post.unbind(this);
  data.bind(this);
  swipeReady=false;
  leftOverlayShown=false;
  rightOverlayShown=false;
  leftOverlayText.setVisibility(GONE);
  rightOverlayText.setVisibility(GONE);
  this.post=data;
  final Bitmap thumbnail=data.getThumbnail(this,usageId);
  thumbnailView.setImageBitmap(thumbnail);
  title.setText(data.title);
  commentsText.setText(String.valueOf(post.commentCount));
  if (data.hasThumbnail) {
    thumbnailView.setVisibility(VISIBLE);
    thumbnailView.setMinimumWidth((int)(64.0f * dpScale));
    thumbnailView.getLayoutParams().height=ViewGroup.LayoutParams.MATCH_PARENT;
  }
 else {
    thumbnailView.setMinimumWidth(0);
    thumbnailView.setVisibility(GONE);
  }
  updateAppearance();
}",0.9774346793349168
15408,"public void markAsRead(final Context context){
  setRead(true);
  final RedditAccount user=RedditAccountManager.getInstance(context).getDefaultAccount();
  RedditChangeDataManager.getInstance(context).update(""String_Node_Str"",user,RedditPreparedPost.this,true);
}","public void markAsRead(final Context context){
  setRead(true);
  refreshView(context);
  final RedditAccount user=RedditAccountManager.getInstance(context).getDefaultAccount();
  RedditChangeDataManager.getInstance(context).update(""String_Node_Str"",user,RedditPreparedPost.this,true);
}",0.9563636363636364
15409,"@Override public void handleMessage(final Message msg){
  if (usageId != msg.what)   return;
  thumbnailView.setImageBitmap((Bitmap)msg.obj);
  invalidate();
}","@Override public void handleMessage(final Message msg){
  if (usageId != msg.what)   return;
  thumbnailView.setImageBitmap((Bitmap)msg.obj);
  invalidate();
  mListView.invalidateViews();
}",0.9111747851002864
15410,"public RedditPostView(final Context context,final ListView listParent,final PostListingFragment fragmentParent){
  super(context,listParent);
  this.fragmentParent=fragmentParent;
  offsetBeginAllowed=General.dpToPixels(context,50);
  offsetActionPerformed=General.dpToPixels(context,150);
  thumbnailHandler=new Handler(Looper.getMainLooper()){
    @Override public void handleMessage(    final Message msg){
      if (usageId != msg.what)       return;
      thumbnailView.setImageBitmap((Bitmap)msg.obj);
      invalidate();
    }
  }
;
  dpScale=context.getResources().getDisplayMetrics().density;
  final float fontScale=PrefsUtility.appearance_fontscale_posts(context,PreferenceManager.getDefaultSharedPreferences(context));
  final FrameLayout mainLayout=(FrameLayout)inflate(context,R.layout.reddit_post,null);
  visiblePostLayout=(LinearLayout)mainLayout.findViewById(R.id.reddit_post_layout);
  thumbnailView=(ImageView)mainLayout.findViewById(R.id.reddit_post_thumbnail_view);
  savedIcon=(ImageView)mainLayout.findViewById(R.id.reddit_post_saved_icon);
  hiddenIcon=(ImageView)mainLayout.findViewById(R.id.reddit_post_hidden_icon);
  title=(TextView)mainLayout.findViewById(R.id.reddit_post_title);
  subtitle=(TextView)mainLayout.findViewById(R.id.reddit_post_subtitle);
  commentsButton=(LinearLayout)mainLayout.findViewById(R.id.reddit_post_comments_button);
  commentsText=(TextView)commentsButton.findViewById(R.id.reddit_post_comments_text);
  title.setTextSize(TypedValue.COMPLEX_UNIT_PX,title.getTextSize() * fontScale);
  subtitle.setTextSize(TypedValue.COMPLEX_UNIT_PX,subtitle.getTextSize() * fontScale);
  leftOverlayText=(TextView)mainLayout.findViewById(R.id.reddit_post_fling_text_left);
  rightOverlayText=(TextView)mainLayout.findViewById(R.id.reddit_post_fling_text_right);
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
  leftFlingPref=PrefsUtility.pref_behaviour_fling_post_left(context,sharedPreferences);
  rightFlingPref=PrefsUtility.pref_behaviour_fling_post_right(context,sharedPreferences);
  final TypedArray attr=context.obtainStyledAttributes(new int[]{R.attr.rrIconFfLeft,R.attr.rrIconFfRight,R.attr.rrIconTick,R.attr.rrPostTitleCol,R.attr.rrPostTitleReadCol,R.attr.rrListItemBackgroundCol,R.attr.rrPostBackgroundColSticky,R.attr.rrPostCommentsButtonBackCol,R.attr.rrPostCommentsButtonBackColSticky});
  rrIconFfLeft=attr.getDrawable(0);
  rrIconFfRight=attr.getDrawable(1);
  rrIconTick=attr.getDrawable(2);
  rrPostTitleCol=attr.getColor(3,0);
  rrPostTitleReadCol=attr.getColor(4,0);
  rrListItemBackgroundCol=attr.getColor(5,0);
  rrPostBackgroundColSticky=attr.getColor(6,0);
  rrPostCommentsButtonBackCol=attr.getColor(7,0);
  rrPostCommentsButtonBackColSticky=attr.getColor(8,0);
  setDescendantFocusability(FOCUS_BLOCK_DESCENDANTS);
  setSwipableView(visiblePostLayout);
  setVisibleView(mainLayout);
}","public RedditPostView(final Context context,final ListView listParent,final PostListingFragment fragmentParent){
  super(context,listParent);
  this.fragmentParent=fragmentParent;
  mListView=listParent;
  offsetBeginAllowed=General.dpToPixels(context,50);
  offsetActionPerformed=General.dpToPixels(context,150);
  thumbnailHandler=new Handler(Looper.getMainLooper()){
    @Override public void handleMessage(    final Message msg){
      if (usageId != msg.what)       return;
      thumbnailView.setImageBitmap((Bitmap)msg.obj);
      invalidate();
      mListView.invalidateViews();
    }
  }
;
  dpScale=context.getResources().getDisplayMetrics().density;
  final float fontScale=PrefsUtility.appearance_fontscale_posts(context,PreferenceManager.getDefaultSharedPreferences(context));
  final FrameLayout mainLayout=(FrameLayout)inflate(context,R.layout.reddit_post,null);
  visiblePostLayout=(LinearLayout)mainLayout.findViewById(R.id.reddit_post_layout);
  thumbnailView=(ImageView)mainLayout.findViewById(R.id.reddit_post_thumbnail_view);
  savedIcon=(ImageView)mainLayout.findViewById(R.id.reddit_post_saved_icon);
  hiddenIcon=(ImageView)mainLayout.findViewById(R.id.reddit_post_hidden_icon);
  title=(TextView)mainLayout.findViewById(R.id.reddit_post_title);
  subtitle=(TextView)mainLayout.findViewById(R.id.reddit_post_subtitle);
  commentsButton=(LinearLayout)mainLayout.findViewById(R.id.reddit_post_comments_button);
  commentsText=(TextView)commentsButton.findViewById(R.id.reddit_post_comments_text);
  title.setTextSize(TypedValue.COMPLEX_UNIT_PX,title.getTextSize() * fontScale);
  subtitle.setTextSize(TypedValue.COMPLEX_UNIT_PX,subtitle.getTextSize() * fontScale);
  leftOverlayText=(TextView)mainLayout.findViewById(R.id.reddit_post_fling_text_left);
  rightOverlayText=(TextView)mainLayout.findViewById(R.id.reddit_post_fling_text_right);
  final SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
  leftFlingPref=PrefsUtility.pref_behaviour_fling_post_left(context,sharedPreferences);
  rightFlingPref=PrefsUtility.pref_behaviour_fling_post_right(context,sharedPreferences);
  final TypedArray attr=context.obtainStyledAttributes(new int[]{R.attr.rrIconFfLeft,R.attr.rrIconFfRight,R.attr.rrIconTick,R.attr.rrPostTitleCol,R.attr.rrPostTitleReadCol,R.attr.rrListItemBackgroundCol,R.attr.rrPostBackgroundColSticky,R.attr.rrPostCommentsButtonBackCol,R.attr.rrPostCommentsButtonBackColSticky});
  rrIconFfLeft=attr.getDrawable(0);
  rrIconFfRight=attr.getDrawable(1);
  rrIconTick=attr.getDrawable(2);
  rrPostTitleCol=attr.getColor(3,0);
  rrPostTitleReadCol=attr.getColor(4,0);
  rrListItemBackgroundCol=attr.getColor(5,0);
  rrPostBackgroundColSticky=attr.getColor(6,0);
  rrPostCommentsButtonBackCol=attr.getColor(7,0);
  rrPostCommentsButtonBackColSticky=attr.getColor(8,0);
  setDescendantFocusability(FOCUS_BLOCK_DESCENDANTS);
  setSwipableView(visiblePostLayout);
  setVisibleView(mainLayout);
}",0.9899471800988244
15411,"@Override public boolean onContextItemSelected(MenuItem item){
  final AdapterView.AdapterContextMenuInfo info=(AdapterView.AdapterContextMenuInfo)item.getMenuInfo();
  if (info.position <= 0) {
    return false;
  }
  final Object selectedObject=lv.getAdapter().getItem(info.position);
  if (!(selectedObject instanceof RedditCommentListItem) || !((RedditCommentListItem)selectedObject).isComment()) {
    return false;
  }
  final Action action=Action.values()[item.getItemId()];
  final RedditPreparedComment comment=((RedditCommentListItem)selectedObject).asComment();
switch (action) {
case UPVOTE:
    comment.action(getSupportActivity(),RedditAPI.RedditAction.UPVOTE);
  break;
case DOWNVOTE:
comment.action(getSupportActivity(),RedditAPI.RedditAction.DOWNVOTE);
break;
case UNVOTE:
comment.action(getSupportActivity(),RedditAPI.RedditAction.UNVOTE);
break;
case SAVE:
comment.action(getSupportActivity(),RedditAPI.RedditAction.SAVE);
break;
case UNSAVE:
comment.action(getSupportActivity(),RedditAPI.RedditAction.UNSAVE);
break;
case REPORT:
new AlertDialog.Builder(getSupportActivity()).setTitle(R.string.action_report).setMessage(R.string.action_report_sure).setPositiveButton(R.string.action_report,new DialogInterface.OnClickListener(){
public void onClick(final DialogInterface dialog,final int which){
comment.action(getSupportActivity(),RedditAPI.RedditAction.REPORT);
}
}
).setNegativeButton(R.string.dialog_cancel,null).show();
break;
case REPLY:
{
final Intent intent=new Intent(getSupportActivity(),CommentReplyActivity.class);
intent.putExtra(""String_Node_Str"",comment.idAndType);
startActivity(intent);
break;
}
case EDIT:
{
final Intent intent=new Intent(getSupportActivity(),CommentEditActivity.class);
intent.putExtra(""String_Node_Str"",comment.idAndType);
intent.putExtra(""String_Node_Str"",StringEscapeUtils.unescapeHtml4(comment.src.body));
startActivity(intent);
break;
}
case COMMENT_LINKS:
final HashSet<String> linksInComment=comment.computeAllLinks();
if (linksInComment.isEmpty()) {
General.quickToast(getSupportActivity(),R.string.error_toast_no_urls_in_comment);
}
 else {
final String[] linksArr=linksInComment.toArray(new String[linksInComment.size()]);
final AlertDialog.Builder builder=new AlertDialog.Builder(getSupportActivity());
builder.setItems(linksArr,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int which){
LinkHandler.onLinkClicked(getSupportActivity(),linksArr[which],false);
dialog.dismiss();
}
}
);
final AlertDialog alert=builder.create();
alert.setTitle(R.string.action_comment_links);
alert.setCanceledOnTouchOutside(true);
alert.show();
}
break;
case SHARE:
final Intent mailer=new Intent(Intent.ACTION_SEND);
mailer.setType(""String_Node_Str"");
mailer.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + comment.src.author + ""String_Node_Str"");
mailer.putExtra(Intent.EXTRA_TEXT,StringEscapeUtils.unescapeHtml4(comment.src.body));
startActivityForResult(Intent.createChooser(mailer,getSupportActivity().getString(R.string.action_share)),1);
break;
case COPY:
ClipboardManager manager=(ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
manager.setText(StringEscapeUtils.unescapeHtml4(comment.src.body));
break;
case COLLAPSE:
if (comment.getBoundView() != null) handleCommentVisibilityToggle(comment.getBoundView());
break;
case USER_PROFILE:
LinkHandler.onLinkClicked(getSupportActivity(),new UserProfileURL(comment.src.author).toString());
break;
case PROPERTIES:
CommentPropertiesDialog.newInstance(comment.src).show(getSupportActivity());
break;
case GO_TO_COMMENT:
{
PostCommentListingURL url=new PostCommentListingURL(null,comment.src.link_id,comment.idAlone,null,null,null);
LinkHandler.onLinkClicked(getSupportActivity(),url.toString());
break;
}
case CONTEXT:
{
PostCommentListingURL url=new PostCommentListingURL(null,comment.src.link_id,comment.idAlone,3,null,null);
LinkHandler.onLinkClicked(getSupportActivity(),url.toString());
break;
}
}
return true;
}","@Override public boolean onContextItemSelected(MenuItem item){
  final AdapterView.AdapterContextMenuInfo info=(AdapterView.AdapterContextMenuInfo)item.getMenuInfo();
  if (info.position <= 0) {
    return false;
  }
  final Object selectedObject=lv.getAdapter().getItem(info.position);
  if (!(selectedObject instanceof RedditCommentListItem) || !((RedditCommentListItem)selectedObject).isComment()) {
    return false;
  }
  final Action action=Action.values()[item.getItemId()];
  final RedditPreparedComment comment=((RedditCommentListItem)selectedObject).asComment();
switch (action) {
case UPVOTE:
    comment.action(getSupportActivity(),RedditAPI.RedditAction.UPVOTE);
  break;
case DOWNVOTE:
comment.action(getSupportActivity(),RedditAPI.RedditAction.DOWNVOTE);
break;
case UNVOTE:
comment.action(getSupportActivity(),RedditAPI.RedditAction.UNVOTE);
break;
case SAVE:
comment.action(getSupportActivity(),RedditAPI.RedditAction.SAVE);
break;
case UNSAVE:
comment.action(getSupportActivity(),RedditAPI.RedditAction.UNSAVE);
break;
case REPORT:
new AlertDialog.Builder(getSupportActivity()).setTitle(R.string.action_report).setMessage(R.string.action_report_sure).setPositiveButton(R.string.action_report,new DialogInterface.OnClickListener(){
public void onClick(final DialogInterface dialog,final int which){
comment.action(getSupportActivity(),RedditAPI.RedditAction.REPORT);
}
}
).setNegativeButton(R.string.dialog_cancel,null).show();
break;
case REPLY:
{
final Intent intent=new Intent(getSupportActivity(),CommentReplyActivity.class);
intent.putExtra(""String_Node_Str"",comment.idAndType);
startActivity(intent);
break;
}
case EDIT:
{
final Intent intent=new Intent(getSupportActivity(),CommentEditActivity.class);
intent.putExtra(""String_Node_Str"",comment.idAndType);
intent.putExtra(""String_Node_Str"",StringEscapeUtils.unescapeHtml4(comment.src.body));
startActivity(intent);
break;
}
case COMMENT_LINKS:
final HashSet<String> linksInComment=comment.computeAllLinks();
if (linksInComment.isEmpty()) {
General.quickToast(getSupportActivity(),R.string.error_toast_no_urls_in_comment);
}
 else {
final String[] linksArr=linksInComment.toArray(new String[linksInComment.size()]);
final AlertDialog.Builder builder=new AlertDialog.Builder(getSupportActivity());
builder.setItems(linksArr,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int which){
LinkHandler.onLinkClicked(getSupportActivity(),linksArr[which],false);
dialog.dismiss();
}
}
);
final AlertDialog alert=builder.create();
alert.setTitle(R.string.action_comment_links);
alert.setCanceledOnTouchOutside(true);
alert.show();
}
break;
case SHARE:
final Intent mailer=new Intent(Intent.ACTION_SEND);
mailer.setType(""String_Node_Str"");
mailer.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + comment.src.author + ""String_Node_Str"");
mailer.putExtra(Intent.EXTRA_TEXT,StringEscapeUtils.unescapeHtml4(comment.src.body));
startActivityForResult(Intent.createChooser(mailer,getSupportActivity().getString(R.string.action_share)),1);
break;
case COPY:
ClipboardManager manager=(ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
manager.setText(StringEscapeUtils.unescapeHtml4(comment.src.body));
break;
case COLLAPSE:
if (comment.getBoundView() != null) {
handleCommentVisibilityToggle(comment.getBoundView());
}
 else {
General.quickToast(getSupportActivity(),""String_Node_Str"");
}
break;
case USER_PROFILE:
LinkHandler.onLinkClicked(getSupportActivity(),new UserProfileURL(comment.src.author).toString());
break;
case PROPERTIES:
CommentPropertiesDialog.newInstance(comment.src).show(getSupportActivity());
break;
case GO_TO_COMMENT:
{
PostCommentListingURL url=new PostCommentListingURL(null,comment.src.link_id,comment.idAlone,null,null,null);
LinkHandler.onLinkClicked(getSupportActivity(),url.toString());
break;
}
case CONTEXT:
{
PostCommentListingURL url=new PostCommentListingURL(null,comment.src.link_id,comment.idAlone,3,null,null);
LinkHandler.onLinkClicked(getSupportActivity(),url.toString());
break;
}
}
return true;
}",0.9907914385266302
15412,"public void reset(final Activity activity,final RedditPreparedComment comment,final int indent){
  if (comment == mComment) {
    return;
  }
  if (mComment != null)   mComment.unbind(this);
  mComment=comment;
  comment.bind(this);
  mIndentView.setIndentation(indent);
  if (!comment.isCollapsed()) {
    mHeader.setText(comment.header);
  }
 else {
    mHeader.setText(""String_Node_Str"" + comment.header);
  }
  final boolean hideLinkButtons=comment.src.author.equalsIgnoreCase(""String_Node_Str"");
  mBodyHolder.removeAllViews();
  final ViewGroup commentBody=comment.getBody(activity,13.0f * mFontScale,mBodyCol,mShowLinkButtons && !hideLinkButtons);
  mBodyHolder.addView(commentBody);
  commentBody.getLayoutParams().width=ViewGroup.LayoutParams.MATCH_PARENT;
  ((MarginLayoutParams)commentBody.getLayoutParams()).topMargin=General.dpToPixels(activity,1);
  updateVisibility(activity);
}","public void reset(final Activity activity,final RedditPreparedComment comment,final int indent){
  if (comment == mComment) {
    comment.bind(this);
    return;
  }
  if (mComment != null) {
    mComment.unbind(this);
  }
  mComment=comment;
  comment.bind(this);
  mIndentView.setIndentation(indent);
  if (!comment.isCollapsed()) {
    mHeader.setText(comment.header);
  }
 else {
    mHeader.setText(""String_Node_Str"" + comment.header);
  }
  final boolean hideLinkButtons=comment.src.author.equalsIgnoreCase(""String_Node_Str"");
  mBodyHolder.removeAllViews();
  final ViewGroup commentBody=comment.getBody(activity,13.0f * mFontScale,mBodyCol,mShowLinkButtons && !hideLinkButtons);
  mBodyHolder.addView(commentBody);
  commentBody.getLayoutParams().width=ViewGroup.LayoutParams.MATCH_PARENT;
  ((MarginLayoutParams)commentBody.getLayoutParams()).topMargin=General.dpToPixels(activity,1);
  updateVisibility(activity);
}",0.9823982398239824
15413,"public PostCommentListingURL commentId(String commentId){
  if (commentId.startsWith(""String_Node_Str"")) {
    commentId=commentId.substring(3);
  }
  return new PostCommentListingURL(after,postId,commentId,context,limit,order);
}","public PostCommentListingURL commentId(String commentId){
  if (commentId != null && commentId.startsWith(""String_Node_Str"")) {
    commentId=commentId.substring(3);
  }
  return new PostCommentListingURL(after,postId,commentId,context,limit,order);
}",0.9563409563409564
15414,"@Override protected void prepare(Activity context,LinearLayout items){
  final RedditComment comment=getArguments().getParcelable(""String_Node_Str"");
  items.addView(propView(context,R.string.props_author,comment.author,false));
  if (comment.author_flair_text != null && comment.author_flair_text.length() > 0) {
    items.addView(propView(context,R.string.props_author_flair,comment.author_flair_text,false));
  }
  items.addView(propView(context,R.string.props_created,RRTime.formatDateTime(comment.created_utc * 1000,context),false));
  if (comment.edited instanceof Long) {
    items.addView(propView(context,R.string.props_edited,RRTime.formatDateTime((Long)comment.edited * 1000,context),false));
  }
 else {
    items.addView(propView(context,R.string.props_edited,R.string.props_never,false));
  }
  items.addView(propView(context,R.string.props_score,String.valueOf(comment.ups - comment.downs),false));
  items.addView(propView(context,R.string.props_subreddit,comment.subreddit,false));
  if (comment.body != null && comment.body.length() > 0) {
    items.addView(propView(context,R.string.props_body_markdown,StringEscapeUtils.unescapeHtml4(comment.body),false));
  }
}","@Override protected void prepare(Activity context,LinearLayout items){
  final RedditComment comment=getArguments().getParcelable(""String_Node_Str"");
  items.addView(propView(context,""String_Node_Str"",comment.name,false));
  items.addView(propView(context,R.string.props_author,comment.author,false));
  if (comment.author_flair_text != null && comment.author_flair_text.length() > 0) {
    items.addView(propView(context,R.string.props_author_flair,comment.author_flair_text,false));
  }
  items.addView(propView(context,R.string.props_created,RRTime.formatDateTime(comment.created_utc * 1000,context),false));
  if (comment.edited instanceof Long) {
    items.addView(propView(context,R.string.props_edited,RRTime.formatDateTime((Long)comment.edited * 1000,context),false));
  }
 else {
    items.addView(propView(context,R.string.props_edited,R.string.props_never,false));
  }
  items.addView(propView(context,R.string.props_score,String.valueOf(comment.ups - comment.downs),false));
  items.addView(propView(context,R.string.props_subreddit,comment.subreddit,false));
  if (comment.body != null && comment.body.length() > 0) {
    items.addView(propView(context,R.string.props_body_markdown,StringEscapeUtils.unescapeHtml4(comment.body),false));
  }
}",0.9700451374640952
15415,"public List<PostCommentListingURL> getMoreUrls(){
  final ArrayList<PostCommentListingURL> urls=new ArrayList<PostCommentListingURL>(16);
  for (  JsonValue child : mSrc.children) {
    if (child.getType() == JsonValue.Type.STRING) {
      urls.add(mPostUrl.commentId(child.asString()));
    }
  }
  return urls;
}","public List<PostCommentListingURL> getMoreUrls(){
  final ArrayList<PostCommentListingURL> urls=new ArrayList<PostCommentListingURL>(16);
  if (mSrc.count > 0) {
    for (    JsonValue child : mSrc.children) {
      if (child.getType() == JsonValue.Type.STRING) {
        urls.add(mPostUrl.commentId(child.asString()));
      }
    }
  }
 else {
    urls.add(mPostUrl.commentId(mSrc.parent_id));
  }
  return urls;
}",0.8191780821917808
15416,"/** 
 * Sets the indentation for the View
 * @param indent comment indentation number
 */
public void setIndentation(int indent){
  this.getLayoutParams().width=(mPixelsPerIndent * indent);
  this.mIndent=indent;
  this.invalidate();
}","/** 
 * Sets the indentation for the View
 * @param indent comment indentation number
 */
public void setIndentation(int indent){
  this.getLayoutParams().width=(mPixelsPerIndent * indent);
  this.mIndent=indent;
  this.invalidate();
  this.requestLayout();
}",0.951417004048583
15417,"public void reset(RedditCommentListItem item){
  mItem=item;
  mTitleView.setText(String.format(""String_Node_Str"",mItem.asLoadMore().getCount()));
  mIndentView.setIndentation(mItem.getIndent());
}","public void reset(final RedditCommentListItem item){
  mItem=item;
  if (item.asLoadMore().getCount() > 0) {
    mTitleView.setText(String.format(""String_Node_Str"",item.asLoadMore().getCount()));
  }
 else {
    mTitleView.setText(""String_Node_Str"");
  }
  mIndentView.setIndentation(item.getIndent());
}",0.6347305389221557
15418,"public void onReceive(Context context,Intent intent){
  boolean notificationsEnabled=PrefsUtility.pref_behaviour_notifications(context,PreferenceManager.getDefaultSharedPreferences(context));
  if (!notificationsEnabled)   return;
  final RedditAccount user=RedditAccountManager.getInstance(context).getDefaultAccount();
  final CacheManager cm=CacheManager.getInstance(context);
  final URI url;
  url=Constants.Reddit.getUri(""String_Node_Str"");
  request=new CacheRequest(url,user,null,Constants.Priority.API_INBOX_LIST,0,CacheRequest.DownloadType.FORCE,Constants.FileType.INBOX_LIST,true,true,true,context){
    @Override protected void onDownloadNecessary(){
    }
    @Override protected void onDownloadStarted(){
    }
    @Override protected void onCallbackException(    final Throwable t){
      request=null;
      BugReportActivity.handleGlobalError(context,t);
    }
    @Override protected void onFailure(    final RequestFailureType type,    final Throwable t,    final StatusLine status,    final String readableMessage){
    }
    @Override protected void onProgress(    final long bytesRead,    final long totalBytes){
    }
    @Override protected void onSuccess(    final CacheManager.ReadableCacheFile cacheFile,    final long timestamp,    final UUID session,    final boolean fromCache,    final String mimetype){
      request=null;
    }
    @Override public void onJsonParseStarted(    final JsonValue value,    final long timestamp,    final UUID session,    final boolean fromCache){
      try {
        final JsonBufferedObject root=value.asObject();
        final JsonBufferedObject data=root.getObject(""String_Node_Str"");
        final JsonBufferedArray children=data.getArray(""String_Node_Str"");
        try {
          JsonValue newMessage=children.get(0);
          int numMessages=children.getCurrentItemCount();
          RedditThing thing=newMessage.asObject(RedditThing.class);
          String title;
          String text=context.getString(R.string.notification_message_action);
          String messageID;
switch (thing.getKind()) {
case COMMENT:
            final RedditComment comment=thing.asComment();
          title=comment.author + ""String_Node_Str"" + context.getString(R.string.notification_comment);
        messageID=comment.name;
      break;
case MESSAGE:
    final RedditMessage message=thing.asMessage();
  title=message.author + ""String_Node_Str"" + context.getString(R.string.notification_message);
messageID=message.name;
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
android.content.SharedPreferences messageStore=context.getSharedPreferences(PREFS_FILENAME,0);
String oldMessage=messageStore.getString(PREFS_SAVED_MESSAGE,""String_Node_Str"");
if (messageID.equals(oldMessage)) return;
messageStore.edit().putString(PREFS_SAVED_MESSAGE,newMessage.toString()).commit();
if (numMessages > 1) {
title=context.getString(R.string.notification_message_multiple);
}
createNotification(title,text,context);
}
 catch (IndexOutOfBoundsException e) {
}
}
 catch (Throwable t) {
notifyFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"");
}
}
}
;
cm.makeRequest(request);
}","public void onReceive(Context context,Intent intent){
  boolean notificationsEnabled=PrefsUtility.pref_behaviour_notifications(context,PreferenceManager.getDefaultSharedPreferences(context));
  if (!notificationsEnabled)   return;
  final RedditAccount user=RedditAccountManager.getInstance(context).getDefaultAccount();
  final CacheManager cm=CacheManager.getInstance(context);
  final URI url;
  url=Constants.Reddit.getUri(""String_Node_Str"");
  request=new CacheRequest(url,user,null,Constants.Priority.API_INBOX_LIST,0,CacheRequest.DownloadType.FORCE,Constants.FileType.INBOX_LIST,true,true,true,context){
    @Override protected void onDownloadNecessary(){
    }
    @Override protected void onDownloadStarted(){
    }
    @Override protected void onCallbackException(    final Throwable t){
      request=null;
      BugReportActivity.handleGlobalError(context,t);
    }
    @Override protected void onFailure(    final RequestFailureType type,    final Throwable t,    final StatusLine status,    final String readableMessage){
    }
    @Override protected void onProgress(    final long bytesRead,    final long totalBytes){
    }
    @Override protected void onSuccess(    final CacheManager.ReadableCacheFile cacheFile,    final long timestamp,    final UUID session,    final boolean fromCache,    final String mimetype){
      request=null;
    }
    @Override public void onJsonParseStarted(    final JsonValue value,    final long timestamp,    final UUID session,    final boolean fromCache){
      try {
        final JsonBufferedObject root=value.asObject();
        final JsonBufferedObject data=root.getObject(""String_Node_Str"");
        final JsonBufferedArray children=data.getArray(""String_Node_Str"");
        try {
          JsonValue newMessage=children.get(0);
          int numMessages=children.getCurrentItemCount();
          RedditThing thing=newMessage.asObject(RedditThing.class);
          String title;
          String text=context.getString(R.string.notification_message_action);
          String messageID;
switch (thing.getKind()) {
case COMMENT:
            final RedditComment comment=thing.asComment();
          title=comment.author + ""String_Node_Str"" + context.getString(R.string.notification_comment);
        messageID=comment.name;
      break;
case MESSAGE:
    final RedditMessage message=thing.asMessage();
  title=message.author + ""String_Node_Str"" + context.getString(R.string.notification_message);
messageID=message.name;
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
android.content.SharedPreferences messageStore=context.getSharedPreferences(PREFS_FILENAME,0);
String oldMessage=messageStore.getString(PREFS_SAVED_MESSAGE,""String_Node_Str"");
if (messageID.equals(oldMessage)) return;
messageStore.edit().putString(PREFS_SAVED_MESSAGE,messageID).commit();
if (numMessages > 1) {
title=context.getString(R.string.notification_message_multiple);
}
createNotification(title,text,context);
}
 catch (IndexOutOfBoundsException e) {
}
}
 catch (Throwable t) {
notifyFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"");
}
}
}
;
cm.makeRequest(request);
}",0.995216836734694
15419,"@Override public void onJsonParseStarted(final JsonValue value,final long timestamp,final UUID session,final boolean fromCache){
  try {
    final JsonBufferedObject root=value.asObject();
    final JsonBufferedObject data=root.getObject(""String_Node_Str"");
    final JsonBufferedArray children=data.getArray(""String_Node_Str"");
    try {
      JsonValue newMessage=children.get(0);
      int numMessages=children.getCurrentItemCount();
      RedditThing thing=newMessage.asObject(RedditThing.class);
      String title;
      String text=context.getString(R.string.notification_message_action);
      String messageID;
switch (thing.getKind()) {
case COMMENT:
        final RedditComment comment=thing.asComment();
      title=comment.author + ""String_Node_Str"" + context.getString(R.string.notification_comment);
    messageID=comment.name;
  break;
case MESSAGE:
final RedditMessage message=thing.asMessage();
title=message.author + ""String_Node_Str"" + context.getString(R.string.notification_message);
messageID=message.name;
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
android.content.SharedPreferences messageStore=context.getSharedPreferences(PREFS_FILENAME,0);
String oldMessage=messageStore.getString(PREFS_SAVED_MESSAGE,""String_Node_Str"");
if (messageID.equals(oldMessage)) return;
messageStore.edit().putString(PREFS_SAVED_MESSAGE,newMessage.toString()).commit();
if (numMessages > 1) {
title=context.getString(R.string.notification_message_multiple);
}
createNotification(title,text,context);
}
 catch (IndexOutOfBoundsException e) {
}
}
 catch (Throwable t) {
notifyFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"");
}
}","@Override public void onJsonParseStarted(final JsonValue value,final long timestamp,final UUID session,final boolean fromCache){
  try {
    final JsonBufferedObject root=value.asObject();
    final JsonBufferedObject data=root.getObject(""String_Node_Str"");
    final JsonBufferedArray children=data.getArray(""String_Node_Str"");
    try {
      JsonValue newMessage=children.get(0);
      int numMessages=children.getCurrentItemCount();
      RedditThing thing=newMessage.asObject(RedditThing.class);
      String title;
      String text=context.getString(R.string.notification_message_action);
      String messageID;
switch (thing.getKind()) {
case COMMENT:
        final RedditComment comment=thing.asComment();
      title=comment.author + ""String_Node_Str"" + context.getString(R.string.notification_comment);
    messageID=comment.name;
  break;
case MESSAGE:
final RedditMessage message=thing.asMessage();
title=message.author + ""String_Node_Str"" + context.getString(R.string.notification_message);
messageID=message.name;
break;
default :
throw new RuntimeException(""String_Node_Str"");
}
android.content.SharedPreferences messageStore=context.getSharedPreferences(PREFS_FILENAME,0);
String oldMessage=messageStore.getString(PREFS_SAVED_MESSAGE,""String_Node_Str"");
if (messageID.equals(oldMessage)) return;
messageStore.edit().putString(PREFS_SAVED_MESSAGE,messageID).commit();
if (numMessages > 1) {
title=context.getString(R.string.notification_message_multiple);
}
createNotification(title,text,context);
}
 catch (IndexOutOfBoundsException e) {
}
}
 catch (Throwable t) {
notifyFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"");
}
}",0.9909529553679132
15420,"@Override protected void onCreate(Bundle savedInstanceState){
  PrefsUtility.applyTheme(this);
  super.onCreate(savedInstanceState);
  final LinearLayout layout=(LinearLayout)getLayoutInflater().inflate(R.layout.post_submit);
  typeSpinner=(Spinner)layout.findViewById(R.id.post_submit_type);
  usernameSpinner=(Spinner)layout.findViewById(R.id.post_submit_username);
  subredditEdit=(EditText)layout.findViewById(R.id.post_submit_subreddit);
  titleEdit=(EditText)layout.findViewById(R.id.post_submit_title);
  textEdit=(EditText)layout.findViewById(R.id.post_submit_body);
  final Intent intent=getIntent();
  if (intent != null) {
    if (intent.hasExtra(""String_Node_Str"")) {
      final String subreddit=intent.getStringExtra(""String_Node_Str"");
      if (subreddit != null && subreddit.length() > 0 && !subreddit.matches(""String_Node_Str"") && subreddit.matches(""String_Node_Str"")) {
        subredditEdit.setText(subreddit);
      }
    }
 else     if (intent.getAction().equalsIgnoreCase(Intent.ACTION_SEND) && intent.hasExtra(Intent.EXTRA_TEXT)) {
      final String url=intent.getStringExtra(Intent.EXTRA_TEXT);
      textEdit.setText(url);
    }
  }
 else   if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    titleEdit.setText(savedInstanceState.getString(""String_Node_Str""));
    textEdit.setText(savedInstanceState.getString(""String_Node_Str""));
    subredditEdit.setText(savedInstanceState.getString(""String_Node_Str""));
    typeSpinner.setSelection(savedInstanceState.getInt(""String_Node_Str""));
  }
  final ArrayList<RedditAccount> accounts=RedditAccountManager.getInstance(this).getAccounts();
  final ArrayList<String> usernames=new ArrayList<String>();
  for (  RedditAccount account : accounts) {
    if (!account.isAnonymous()) {
      usernames.add(account.username);
    }
  }
  if (usernames.size() == 0) {
    General.quickToast(this,R.string.error_toast_notloggedin);
    finish();
  }
  usernameSpinner.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,usernames));
  typeSpinner.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,postTypes));
  setHint();
  typeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setHint();
    }
    public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  final ScrollView sv=new ScrollView(this);
  sv.addView(layout);
  setContentView(sv);
}","@Override protected void onCreate(Bundle savedInstanceState){
  PrefsUtility.applyTheme(this);
  super.onCreate(savedInstanceState);
  final LinearLayout layout=(LinearLayout)getLayoutInflater().inflate(R.layout.post_submit);
  typeSpinner=(Spinner)layout.findViewById(R.id.post_submit_type);
  usernameSpinner=(Spinner)layout.findViewById(R.id.post_submit_username);
  subredditEdit=(EditText)layout.findViewById(R.id.post_submit_subreddit);
  titleEdit=(EditText)layout.findViewById(R.id.post_submit_title);
  textEdit=(EditText)layout.findViewById(R.id.post_submit_body);
  final Intent intent=getIntent();
  if (intent != null) {
    if (intent.hasExtra(""String_Node_Str"")) {
      final String subreddit=intent.getStringExtra(""String_Node_Str"");
      if (subreddit != null && subreddit.length() > 0 && !subreddit.matches(""String_Node_Str"") && subreddit.matches(""String_Node_Str"")) {
        subredditEdit.setText(subreddit);
      }
    }
 else     if (Intent.ACTION_SEND.equalsIgnoreCase(intent.getAction()) && intent.hasExtra(Intent.EXTRA_TEXT)) {
      final String url=intent.getStringExtra(Intent.EXTRA_TEXT);
      textEdit.setText(url);
    }
  }
 else   if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    titleEdit.setText(savedInstanceState.getString(""String_Node_Str""));
    textEdit.setText(savedInstanceState.getString(""String_Node_Str""));
    subredditEdit.setText(savedInstanceState.getString(""String_Node_Str""));
    typeSpinner.setSelection(savedInstanceState.getInt(""String_Node_Str""));
  }
  final ArrayList<RedditAccount> accounts=RedditAccountManager.getInstance(this).getAccounts();
  final ArrayList<String> usernames=new ArrayList<String>();
  for (  RedditAccount account : accounts) {
    if (!account.isAnonymous()) {
      usernames.add(account.username);
    }
  }
  if (usernames.size() == 0) {
    General.quickToast(this,R.string.error_toast_notloggedin);
    finish();
  }
  usernameSpinner.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,usernames));
  typeSpinner.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,postTypes));
  setHint();
  typeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      setHint();
    }
    public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  final ScrollView sv=new ScrollView(this);
  sv.addView(layout);
  setContentView(sv);
}",0.9858657243816256
15421,"public void onClick(DialogInterface dialog,int which){
  final String query=editText.getText().toString().toLowerCase().trim();
  final RedditURLParser.SearchPostListURL url;
  if (controller != null && controller.isSubreddit()) {
    url=RedditURLParser.SearchPostListURL.build(controller.subredditCanonicalName(),query);
  }
 else {
    url=RedditURLParser.SearchPostListURL.build(null,query);
  }
  final Intent intent=new Intent(activity,activity.getClass());
  intent.setData(url.generateJsonUri());
  activity.startActivity(intent);
}","public void onClick(DialogInterface dialog,int which){
  final String query=editText.getText().toString().toLowerCase().trim();
  final RedditURLParser.SearchPostListURL url;
  if (controller != null && controller.isSubreddit()) {
    url=RedditURLParser.SearchPostListURL.build(controller.subredditCanonicalName(),query);
  }
 else {
    url=RedditURLParser.SearchPostListURL.build(null,query);
  }
  final Intent intent=new Intent(activity,PostListingActivity.class);
  intent.setData(url.generateJsonUri());
  activity.startActivity(intent);
}",0.9742173112338858
15422,"public static void onSearchPosts(final PostListingController controller,final Activity activity){
  final AlertDialog.Builder alertBuilder=new AlertDialog.Builder(activity);
  final LinearLayout layout=(LinearLayout)activity.getLayoutInflater().inflate(R.layout.dialog_editbox);
  final EditText editText=(EditText)layout.findViewById(R.id.dialog_editbox_edittext);
  editText.requestFocus();
  alertBuilder.setView(layout);
  alertBuilder.setTitle(R.string.action_search);
  alertBuilder.setPositiveButton(R.string.action_search,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final String query=editText.getText().toString().toLowerCase().trim();
      final RedditURLParser.SearchPostListURL url;
      if (controller != null && controller.isSubreddit()) {
        url=RedditURLParser.SearchPostListURL.build(controller.subredditCanonicalName(),query);
      }
 else {
        url=RedditURLParser.SearchPostListURL.build(null,query);
      }
      final Intent intent=new Intent(activity,activity.getClass());
      intent.setData(url.generateJsonUri());
      activity.startActivity(intent);
    }
  }
);
  alertBuilder.setNegativeButton(R.string.dialog_cancel,null);
  final AlertDialog alertDialog=alertBuilder.create();
  alertDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
  alertDialog.show();
}","public static void onSearchPosts(final PostListingController controller,final Activity activity){
  final AlertDialog.Builder alertBuilder=new AlertDialog.Builder(activity);
  final LinearLayout layout=(LinearLayout)activity.getLayoutInflater().inflate(R.layout.dialog_editbox);
  final EditText editText=(EditText)layout.findViewById(R.id.dialog_editbox_edittext);
  editText.requestFocus();
  alertBuilder.setView(layout);
  alertBuilder.setTitle(R.string.action_search);
  alertBuilder.setPositiveButton(R.string.action_search,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final String query=editText.getText().toString().toLowerCase().trim();
      final RedditURLParser.SearchPostListURL url;
      if (controller != null && controller.isSubreddit()) {
        url=RedditURLParser.SearchPostListURL.build(controller.subredditCanonicalName(),query);
      }
 else {
        url=RedditURLParser.SearchPostListURL.build(null,query);
      }
      final Intent intent=new Intent(activity,PostListingActivity.class);
      intent.setData(url.generateJsonUri());
      activity.startActivity(intent);
    }
  }
);
  alertBuilder.setNegativeButton(R.string.dialog_cancel,null);
  final AlertDialog alertDialog=alertBuilder.create();
  alertDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
  alertDialog.show();
}",0.99009900990099
15423,"public void onSubscribe(){
  try {
    RedditSubredditSubscriptionManager.getSingleton(getSupportActivity(),RedditAccountManager.getInstance(getSupportActivity()).getDefaultAccount()).subscribe(subreddit.getCanonicalName(),getSupportActivity());
  }
 catch (  RedditSubreddit.InvalidSubredditNameException e) {
    throw new RuntimeException(e);
  }
}","public void onSubscribe(){
  if (postListingURL.pathType() != RedditURLParser.PathType.SubredditPostListingURL)   return;
  try {
    RedditSubredditSubscriptionManager.getSingleton(getSupportActivity(),RedditAccountManager.getInstance(getSupportActivity()).getDefaultAccount()).subscribe(RedditSubreddit.getCanonicalName(postListingURL.asSubredditPostListURL().subreddit),getSupportActivity());
  }
 catch (  RedditSubreddit.InvalidSubredditNameException e) {
    throw new RuntimeException(e);
  }
}",0.8169014084507042
15424,"private static void clean(final IntArrayLengthPair input,final IntArrayLengthPair output){
  final boolean[] toRevert=new boolean[input.pos];
  final boolean[] toDelete=new boolean[input.pos];
  int lastUnderscore=-1, lastUnderscoreDouble=-1;
  int lastAsterisk=-1, lastAsteriskDouble=-1;
  int lastTildeDouble=-1;
  int lastBracketSquareOpen=-1;
  for (int i=0; i < input.pos; i++) {
    final int c=input.data[i];
switch (c) {
case TOKEN_UNDERSCORE:
      lastUnderscore=lastUnderscore < 0 ? i : -1;
    break;
case TOKEN_UNDERSCORE_DOUBLE:
  if (lastUnderscoreDouble < 0) {
    lastUnderscoreDouble=i;
  }
 else {
    if (lastUnderscoreDouble == i - 1) {
      toRevert[lastUnderscoreDouble]=true;
      toRevert[i]=true;
    }
    lastUnderscoreDouble=-1;
  }
break;
case TOKEN_ASTERISK:
lastAsterisk=lastAsterisk < 0 ? i : -1;
break;
case TOKEN_ASTERISK_DOUBLE:
if (lastAsteriskDouble < 0) {
lastAsteriskDouble=i;
}
 else {
if (lastAsteriskDouble == i - 1) {
toRevert[lastAsteriskDouble]=true;
toRevert[i]=true;
}
lastAsteriskDouble=-1;
}
break;
case TOKEN_TILDE_DOUBLE:
if (lastTildeDouble < 0) {
lastTildeDouble=i;
}
 else {
if (lastTildeDouble == i - 1) {
toRevert[lastTildeDouble]=true;
toRevert[i]=true;
}
lastTildeDouble=-1;
}
break;
case TOKEN_GRAVE:
final int openingGrave=i;
final int closingGrave=indexOf(input.data,TOKEN_GRAVE,i + 1,input.pos);
if (closingGrave < 0) {
toRevert[i]=true;
}
 else {
for (int j=openingGrave + 1; j < closingGrave; j++) {
if (input.data[j] < 0) toRevert[j]=true;
}
i=closingGrave;
}
break;
case TOKEN_BRACKET_SQUARE_OPEN:
if (lastBracketSquareOpen < 0) {
lastBracketSquareOpen=i;
}
 else {
toRevert[lastBracketSquareOpen]=true;
lastBracketSquareOpen=i;
}
break;
case TOKEN_BRACKET_SQUARE_CLOSE:
if (lastBracketSquareOpen < 0) {
toRevert[i]=true;
}
 else {
final int lastBracketSquareClose=i;
final int parenOpenPos=indexOf(input.data,TOKEN_PAREN_OPEN,lastBracketSquareClose + 1,input.pos);
boolean linkParseSuccess=false;
if (parenOpenPos >= 0) {
if (isSpaces(input.data,lastBracketSquareClose + 1,parenOpenPos)) {
final int parenClosePos=findParenClosePos(input,parenOpenPos + 1);
if (parenClosePos >= 0) {
linkParseSuccess=true;
for (int j=lastBracketSquareClose + 1; j < parenOpenPos; j++) {
toDelete[j]=true;
}
for (int j=parenOpenPos + 1; j < parenClosePos; j++) {
if (input.data[j] < 0) {
toRevert[j]=true;
}
 else if (input.data[j] == ' ' && input.data[j - 1] == ' ') {
toDelete[j]=true;
}
}
for (int j=parenOpenPos + 1; input.data[j] == ' '; j++) {
toDelete[j]=true;
}
for (int j=parenClosePos - 1; input.data[j] == ' '; j--) {
toDelete[j]=true;
}
i=parenClosePos;
}
}
}
if (!linkParseSuccess) {
toRevert[lastBracketSquareOpen]=true;
toRevert[lastBracketSquareClose]=true;
i=lastBracketSquareClose;
}
}
lastBracketSquareOpen=-1;
break;
case TOKEN_PAREN_OPEN:
case TOKEN_PAREN_CLOSE:
case TOKEN_UNICODE_CLOSE:
toRevert[i]=true;
break;
case TOKEN_UNICODE_OPEN:
final int openingUnicode=i;
final int closingUnicode=indexOf(input.data,TOKEN_UNICODE_CLOSE,i + 1,Math.min(input.pos,i + 8));
if (closingUnicode < 0 || !isDigits(input.data,openingUnicode + 1,closingUnicode)) {
toRevert[i]=true;
}
 else {
final int codePoint=getDecimal(input.data,openingUnicode + 1,closingUnicode);
if (unicodeWhitespace.contains(codePoint)) {
input.data[openingUnicode]=' ';
}
 else {
input.data[openingUnicode]=codePoint;
}
for (int j=openingUnicode + 1; j <= closingUnicode; j++) {
toDelete[j]=true;
}
i=closingUnicode;
}
break;
case TOKEN_CARET:
if (input.pos <= i + 1 || input.data[i + 1] == ' ') {
toRevert[i]=true;
}
break;
case ' ':
if (i < 1 || input.data[i - 1] == ' ') {
toDelete[i]=true;
}
break;
}
}
if (lastUnderscore >= 0) toRevert[lastUnderscore]=true;
if (lastUnderscoreDouble >= 0) toRevert[lastUnderscoreDouble]=true;
if (lastAsterisk >= 0) toRevert[lastAsterisk]=true;
if (lastAsteriskDouble >= 0) toRevert[lastAsteriskDouble]=true;
if (lastTildeDouble >= 0) toRevert[lastTildeDouble]=true;
if (lastBracketSquareOpen >= 0) toRevert[lastBracketSquareOpen]=true;
for (int j=input.pos - 1; j >= 0 && input.data[j] == ' '; j--) {
toDelete[j]=true;
}
output.clear();
for (int i=0; i < input.pos; i++) {
if (toDelete[i]) continue;
if (toRevert[i]) {
final char[] revertTo=reverseLookup[20 + input.data[i]];
output.append(revertTo);
}
 else {
output.data[output.pos++]=input.data[i];
}
}
}","private static void clean(final IntArrayLengthPair input,final IntArrayLengthPair output){
  final boolean[] toRevert=new boolean[input.pos];
  final boolean[] toDelete=new boolean[input.pos];
  int openingUnderscore=-1, openingUnderscoreDouble=-1;
  int openingAsterisk=-1, openingAsteriskDouble=-1;
  int openingTildeDouble=-1;
  int lastBracketSquareOpen=-1;
  for (int i=0; i < input.pos; i++) {
    final int c=input.data[i];
    final boolean beforeASpace=i + 1 < input.pos && input.data[i + 1] == ' ';
    final boolean afterASpace=i > 0 && input.data[i - 1] == ' ';
switch (c) {
case TOKEN_UNDERSCORE:
      if (openingUnderscore < 0) {
        if (beforeASpace) {
          toRevert[i]=true;
        }
 else {
          openingUnderscore=i;
        }
      }
 else {
        if (afterASpace) {
          toRevert[i]=true;
        }
 else {
          openingUnderscore=-1;
        }
      }
    break;
case TOKEN_UNDERSCORE_DOUBLE:
  if (i != 0 && openingUnderscoreDouble == i - 1) {
    toRevert[openingUnderscoreDouble]=true;
    toRevert[i]=true;
    openingUnderscoreDouble=-1;
  }
 else {
    if (openingUnderscoreDouble < 0) {
      if (beforeASpace) {
        toRevert[i]=true;
      }
 else {
        openingUnderscoreDouble=i;
      }
    }
 else {
      if (afterASpace) {
        toRevert[i]=true;
      }
 else {
        openingUnderscoreDouble=-1;
      }
    }
  }
break;
case TOKEN_ASTERISK:
if (openingAsterisk < 0) {
if (beforeASpace) {
  toRevert[i]=true;
}
 else {
  openingAsterisk=i;
}
}
 else {
if (afterASpace) {
  toRevert[i]=true;
}
 else {
  openingAsterisk=-1;
}
}
break;
case TOKEN_ASTERISK_DOUBLE:
if (i != 0 && openingAsteriskDouble == i - 1) {
toRevert[openingAsteriskDouble]=true;
toRevert[i]=true;
openingAsteriskDouble=-1;
}
 else {
if (openingAsteriskDouble < 0) {
if (beforeASpace) {
toRevert[i]=true;
}
 else {
openingAsteriskDouble=i;
}
}
 else {
if (afterASpace) {
toRevert[i]=true;
}
 else {
openingAsteriskDouble=-1;
}
}
}
break;
case TOKEN_TILDE_DOUBLE:
if (i != 0 && openingTildeDouble == i - 1) {
toRevert[openingTildeDouble]=true;
toRevert[i]=true;
openingTildeDouble=-1;
}
 else {
if (openingTildeDouble < 0) {
if (beforeASpace) {
toRevert[i]=true;
}
 else {
openingTildeDouble=i;
}
}
 else {
if (afterASpace) {
toRevert[i]=true;
}
 else {
openingTildeDouble=-1;
}
}
}
break;
case TOKEN_GRAVE:
final int openingGrave=i;
final int closingGrave=indexOf(input.data,TOKEN_GRAVE,i + 1,input.pos);
if (closingGrave < 0) {
toRevert[i]=true;
}
 else {
for (int j=openingGrave + 1; j < closingGrave; j++) {
if (input.data[j] < 0) toRevert[j]=true;
}
i=closingGrave;
}
break;
case TOKEN_BRACKET_SQUARE_OPEN:
if (lastBracketSquareOpen < 0) {
lastBracketSquareOpen=i;
}
 else {
toRevert[lastBracketSquareOpen]=true;
lastBracketSquareOpen=i;
}
break;
case TOKEN_BRACKET_SQUARE_CLOSE:
if (lastBracketSquareOpen < 0) {
toRevert[i]=true;
}
 else {
final int lastBracketSquareClose=i;
final int parenOpenPos=indexOf(input.data,TOKEN_PAREN_OPEN,lastBracketSquareClose + 1,input.pos);
boolean linkParseSuccess=false;
if (parenOpenPos >= 0) {
if (isSpaces(input.data,lastBracketSquareClose + 1,parenOpenPos)) {
final int parenClosePos=findParenClosePos(input,parenOpenPos + 1);
if (parenClosePos >= 0) {
linkParseSuccess=true;
for (int j=lastBracketSquareClose + 1; j < parenOpenPos; j++) {
toDelete[j]=true;
}
for (int j=parenOpenPos + 1; j < parenClosePos; j++) {
if (input.data[j] < 0) {
toRevert[j]=true;
}
 else if (input.data[j] == ' ' && input.data[j - 1] == ' ') {
toDelete[j]=true;
}
}
for (int j=parenOpenPos + 1; input.data[j] == ' '; j++) {
toDelete[j]=true;
}
for (int j=parenClosePos - 1; input.data[j] == ' '; j--) {
toDelete[j]=true;
}
i=parenClosePos;
}
}
}
if (!linkParseSuccess) {
toRevert[lastBracketSquareOpen]=true;
toRevert[lastBracketSquareClose]=true;
i=lastBracketSquareClose;
}
}
lastBracketSquareOpen=-1;
break;
case TOKEN_PAREN_OPEN:
case TOKEN_PAREN_CLOSE:
case TOKEN_UNICODE_CLOSE:
toRevert[i]=true;
break;
case TOKEN_UNICODE_OPEN:
final int openingUnicode=i;
final int closingUnicode=indexOf(input.data,TOKEN_UNICODE_CLOSE,i + 1,Math.min(input.pos,i + 8));
if (closingUnicode < 0 || !isDigits(input.data,openingUnicode + 1,closingUnicode)) {
toRevert[i]=true;
}
 else {
final int codePoint=getDecimal(input.data,openingUnicode + 1,closingUnicode);
if (unicodeWhitespace.contains(codePoint)) {
input.data[openingUnicode]=' ';
}
 else {
input.data[openingUnicode]=codePoint;
}
for (int j=openingUnicode + 1; j <= closingUnicode; j++) {
toDelete[j]=true;
}
i=closingUnicode;
}
break;
case TOKEN_CARET:
if (input.pos <= i + 1 || input.data[i + 1] == ' ') {
toRevert[i]=true;
}
break;
case ' ':
if (i < 1 || input.data[i - 1] == ' ') {
toDelete[i]=true;
}
break;
}
}
if (openingUnderscore >= 0) toRevert[openingUnderscore]=true;
if (openingUnderscoreDouble >= 0) toRevert[openingUnderscoreDouble]=true;
if (openingAsterisk >= 0) toRevert[openingAsterisk]=true;
if (openingAsteriskDouble >= 0) toRevert[openingAsteriskDouble]=true;
if (openingTildeDouble >= 0) toRevert[openingTildeDouble]=true;
if (lastBracketSquareOpen >= 0) toRevert[lastBracketSquareOpen]=true;
for (int j=input.pos - 1; j >= 0 && input.data[j] == ' '; j--) {
toDelete[j]=true;
}
output.clear();
for (int i=0; i < input.pos; i++) {
if (toDelete[i]) continue;
if (toRevert[i]) {
final char[] revertTo=reverseLookup[20 + input.data[i]];
output.append(revertTo);
}
 else {
output.data[output.pos++]=input.data[i];
}
}
}",0.7994682482871459
15425,"public static void onLinkClicked(final Activity activity,String url,final boolean forceNoImage,final RedditPost post){
  if (url.startsWith(""String_Node_Str"")) {
    final Uri rrUri=Uri.parse(url);
    if (rrUri.getAuthority().equals(""String_Node_Str"")) {
      new Handler().post(new Runnable(){
        public void run(){
          final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
          builder.setTitle(rrUri.getQueryParameter(""String_Node_Str""));
          builder.setMessage(rrUri.getQueryParameter(""String_Node_Str""));
          AlertDialog alert=builder.create();
          alert.show();
        }
      }
);
      return;
    }
  }
  final Matcher shortSubredditMatcher=shortSubredditPattern.matcher(url);
  if (shortSubredditMatcher.find()) {
    try {
      final Intent intent=new Intent(activity,PostListingActivity.class);
      intent.setData(RedditURLParser.SubredditPostListURL.getSubreddit(shortSubredditMatcher.group(1)).generateJsonUri());
      activity.startActivity(intent);
    }
 catch (    RedditSubreddit.InvalidSubredditNameException e) {
      Toast.makeText(activity,R.string.invalid_subreddit_name,Toast.LENGTH_LONG).show();
    }
    return;
  }
  final Matcher redditUserMatcher=redditUserPattern.matcher(url);
  if (redditUserMatcher.find()) {
    UserProfileDialog.newInstance(redditUserMatcher.group(2)).show(activity);
    return;
  }
  if (!url.contains(""String_Node_Str"")) {
    url=""String_Node_Str"" + url;
  }
  if (!forceNoImage) {
    final String imageUrl=getImageUrl(url);
    if (imageUrl != null) {
      final Intent intent=new Intent(activity,ImageViewActivity.class);
      intent.setData(Uri.parse(imageUrl));
      intent.putExtra(""String_Node_Str"",post);
      activity.startActivity(intent);
      return;
    }
  }
  final Matcher redditCommentsMatcher=redditCommentsPattern.matcher(url);
  if (redditCommentsMatcher.find()) {
    final Intent intent=new Intent(activity,CommentListingActivity.class);
    intent.putExtra(""String_Node_Str"",redditCommentsMatcher.group(2));
    activity.startActivity(intent);
    return;
  }
  final RedditURLParser.RedditURL redditURL=RedditURLParser.parse(Uri.parse(url));
  if (redditURL != null) {
switch (redditURL.pathType()) {
case SubredditPostListingURL:
case UserPostListingURL:
case UnknownPostListingURL:
      final Intent intent=new Intent(activity,PostListingActivity.class);
    intent.setData(redditURL.generateJsonUri());
  activity.startActivityForResult(intent,1);
break;
}
}
if (!PrefsUtility.pref_behaviour_useinternalbrowser(activity,PreferenceManager.getDefaultSharedPreferences(activity))) {
openWebBrowser(activity,Uri.parse(url));
return;
}
if (youtubeDotComPattern.matcher(url).matches() || vimeoPattern.matcher(url).matches() || googlePlayPattern.matcher(url).matches()) {
openWebBrowser(activity,Uri.parse(url));
return;
}
final Matcher youtuDotBeMatcher=youtuDotBePattern.matcher(url);
if (youtuDotBeMatcher.find() && youtuDotBeMatcher.group(1) != null) {
final String youtuBeUrl=""String_Node_Str"" + youtuDotBeMatcher.group(1) + (youtuDotBeMatcher.group(2).length() > 0 ? ""String_Node_Str"" + youtuDotBeMatcher.group(2).substring(1) : ""String_Node_Str"");
openWebBrowser(activity,Uri.parse(youtuBeUrl));
}
 else {
final Intent intent=new Intent(activity,WebViewActivity.class);
intent.putExtra(""String_Node_Str"",url);
intent.putExtra(""String_Node_Str"",post);
activity.startActivity(intent);
}
}","public static void onLinkClicked(final Activity activity,String url,final boolean forceNoImage,final RedditPost post){
  if (url.startsWith(""String_Node_Str"")) {
    final Uri rrUri=Uri.parse(url);
    if (rrUri.getAuthority().equals(""String_Node_Str"")) {
      new Handler().post(new Runnable(){
        public void run(){
          final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
          builder.setTitle(rrUri.getQueryParameter(""String_Node_Str""));
          builder.setMessage(rrUri.getQueryParameter(""String_Node_Str""));
          AlertDialog alert=builder.create();
          alert.show();
        }
      }
);
      return;
    }
  }
  final Matcher shortSubredditMatcher=shortSubredditPattern.matcher(url);
  if (shortSubredditMatcher.find()) {
    try {
      final Intent intent=new Intent(activity,PostListingActivity.class);
      intent.setData(RedditURLParser.SubredditPostListURL.getSubreddit(shortSubredditMatcher.group(1)).generateJsonUri());
      activity.startActivity(intent);
    }
 catch (    RedditSubreddit.InvalidSubredditNameException e) {
      Toast.makeText(activity,R.string.invalid_subreddit_name,Toast.LENGTH_LONG).show();
    }
    return;
  }
  final Matcher redditUserMatcher=redditUserPattern.matcher(url);
  if (redditUserMatcher.find()) {
    UserProfileDialog.newInstance(redditUserMatcher.group(2)).show(activity);
    return;
  }
  if (!url.contains(""String_Node_Str"")) {
    url=""String_Node_Str"" + url;
  }
  if (!forceNoImage) {
    final String imageUrl=getImageUrl(url);
    if (imageUrl != null) {
      final Intent intent=new Intent(activity,ImageViewActivity.class);
      intent.setData(Uri.parse(imageUrl));
      intent.putExtra(""String_Node_Str"",post);
      activity.startActivity(intent);
      return;
    }
  }
  final Matcher redditCommentsMatcher=redditCommentsPattern.matcher(url);
  if (redditCommentsMatcher.find()) {
    final Intent intent=new Intent(activity,CommentListingActivity.class);
    intent.putExtra(""String_Node_Str"",redditCommentsMatcher.group(2));
    activity.startActivity(intent);
    return;
  }
  final RedditURLParser.RedditURL redditURL=RedditURLParser.parse(Uri.parse(url));
  if (redditURL != null) {
switch (redditURL.pathType()) {
case SubredditPostListingURL:
case UserPostListingURL:
case UnknownPostListingURL:
      final Intent intent=new Intent(activity,PostListingActivity.class);
    intent.setData(redditURL.generateJsonUri());
  activity.startActivityForResult(intent,1);
return;
}
}
if (!PrefsUtility.pref_behaviour_useinternalbrowser(activity,PreferenceManager.getDefaultSharedPreferences(activity))) {
openWebBrowser(activity,Uri.parse(url));
return;
}
if (youtubeDotComPattern.matcher(url).matches() || vimeoPattern.matcher(url).matches() || googlePlayPattern.matcher(url).matches()) {
openWebBrowser(activity,Uri.parse(url));
return;
}
final Matcher youtuDotBeMatcher=youtuDotBePattern.matcher(url);
if (youtuDotBeMatcher.find() && youtuDotBeMatcher.group(1) != null) {
final String youtuBeUrl=""String_Node_Str"" + youtuDotBeMatcher.group(1) + (youtuDotBeMatcher.group(2).length() > 0 ? ""String_Node_Str"" + youtuDotBeMatcher.group(2).substring(1) : ""String_Node_Str"");
openWebBrowser(activity,Uri.parse(youtuBeUrl));
}
 else {
final Intent intent=new Intent(activity,WebViewActivity.class);
intent.putExtra(""String_Node_Str"",url);
intent.putExtra(""String_Node_Str"",post);
activity.startActivity(intent);
}
}",0.9983986024166546
15426,"@Override public boolean onCreateOptionsMenu(final Menu menu){
  final boolean postsVisible=postListingFragment != null;
  final boolean commentsVisible=commentListingFragment != null;
  final boolean postsSortable=postListingController != null && postListingController.isSortable();
  final boolean commentsSortable=commentListingController != null && commentListingController.isSortable();
  final RedditSubredditSubscriptionManager.SubredditSubscriptionState subredditSubscriptionState;
  final RedditSubredditSubscriptionManager subredditSubscriptionManager=RedditSubredditSubscriptionManager.getSingleton(this,RedditAccountManager.getInstance(this).getDefaultAccount());
  if (postsVisible && postListingController.getSubreddit().isSubscribable() && subredditSubscriptionManager.areSubscriptionsReady()) {
    try {
      subredditSubscriptionState=subredditSubscriptionManager.getSubscriptionState(postListingController.getSubreddit().getCanonicalName());
    }
 catch (    RedditSubreddit.InvalidSubredditNameException e) {
      throw new UnexpectedInternalStateException(""String_Node_Str"");
    }
  }
 else {
    subredditSubscriptionState=null;
  }
  OptionsMenuUtility.prepare(this,menu,isMenuShown,postsVisible,commentsVisible,postsSortable,commentsSortable,subredditSubscriptionState);
  getSupportActionBar().setHomeButtonEnabled(!isMenuShown);
  getSupportActionBar().setDisplayHomeAsUpEnabled(!isMenuShown);
  return true;
}","@Override public boolean onCreateOptionsMenu(final Menu menu){
  final boolean postsVisible=postListingFragment != null;
  final boolean commentsVisible=commentListingFragment != null;
  final boolean postsSortable=postListingController != null && postListingController.isSortable();
  final boolean commentsSortable=commentListingController != null && commentListingController.isSortable();
  final RedditAccount user=RedditAccountManager.getInstance(this).getDefaultAccount();
  final RedditSubredditSubscriptionManager.SubredditSubscriptionState subredditSubscriptionState;
  final RedditSubredditSubscriptionManager subredditSubscriptionManager=RedditSubredditSubscriptionManager.getSingleton(this,user);
  if (postsVisible && !user.isAnonymous() && postListingController.getSubreddit().isSubscribable()&& subredditSubscriptionManager.areSubscriptionsReady()) {
    try {
      subredditSubscriptionState=subredditSubscriptionManager.getSubscriptionState(postListingController.getSubreddit().getCanonicalName());
    }
 catch (    RedditSubreddit.InvalidSubredditNameException e) {
      throw new UnexpectedInternalStateException(""String_Node_Str"");
    }
  }
 else {
    subredditSubscriptionState=null;
  }
  OptionsMenuUtility.prepare(this,menu,isMenuShown,postsVisible,commentsVisible,postsSortable,commentsSortable,subredditSubscriptionState);
  getSupportActionBar().setHomeButtonEnabled(!isMenuShown);
  getSupportActionBar().setDisplayHomeAsUpEnabled(!isMenuShown);
  return true;
}",0.782282793867121
15427,"@Override public boolean onCreateOptionsMenu(final Menu menu){
  final RedditSubredditSubscriptionManager.SubredditSubscriptionState subredditSubscriptionState;
  final RedditSubredditSubscriptionManager subredditSubscriptionManager=RedditSubredditSubscriptionManager.getSingleton(this,RedditAccountManager.getInstance(this).getDefaultAccount());
  if (subreddit.isSubscribable() && subredditSubscriptionManager.areSubscriptionsReady()) {
    try {
      subredditSubscriptionState=subredditSubscriptionManager.getSubscriptionState(subreddit.getCanonicalName());
    }
 catch (    RedditSubreddit.InvalidSubredditNameException e) {
      throw new UnexpectedInternalStateException(""String_Node_Str"");
    }
  }
 else {
    subredditSubscriptionState=null;
  }
  OptionsMenuUtility.prepare(this,menu,false,true,false,subreddit.isSortable(),false,subredditSubscriptionState);
  return true;
}","@Override public boolean onCreateOptionsMenu(final Menu menu){
  final RedditAccount user=RedditAccountManager.getInstance(this).getDefaultAccount();
  final RedditSubredditSubscriptionManager.SubredditSubscriptionState subredditSubscriptionState;
  final RedditSubredditSubscriptionManager subredditSubscriptionManager=RedditSubredditSubscriptionManager.getSingleton(this,user);
  if (!user.isAnonymous() && subreddit.isSubscribable() && subredditSubscriptionManager.areSubscriptionsReady()) {
    try {
      subredditSubscriptionState=subredditSubscriptionManager.getSubscriptionState(subreddit.getCanonicalName());
    }
 catch (    RedditSubreddit.InvalidSubredditNameException e) {
      throw new UnexpectedInternalStateException(""String_Node_Str"");
    }
  }
 else {
    subredditSubscriptionState=null;
  }
  OptionsMenuUtility.prepare(this,menu,false,true,false,subreddit.isSortable(),false,subredditSubscriptionState);
  return true;
}",0.6721132897603486
15428,"private void doSubredditListRequest(final RedditSubredditManager.SubredditListType type,final RequestResponseHandler<WritableHashSet,SubredditRequestFailure> handler,final String after){
  URI uri;
switch (type) {
case SUBSCRIBED:
    uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_MINE_SUBSCRIBER);
  break;
case MODERATED:
uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_MINE_MODERATOR);
break;
case MOST_POPULAR:
uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_POPULAR);
break;
default :
throw new UnexpectedInternalStateException(type.name());
}
if (after != null) {
final Uri.Builder builder=Uri.parse(uri.toString()).buildUpon();
builder.appendQueryParameter(""String_Node_Str"",after);
uri=General.uriFromString(builder.toString());
}
final CacheRequest aboutSubredditCacheRequest=new CacheRequest(uri,user,null,Constants.Priority.API_SUBREDDIT_INVIDIVUAL,0,CacheRequest.DownloadType.FORCE,Constants.FileType.SUBREDDIT_LIST,true,true,false,context){
@Override protected void onCallbackException(Throwable t){
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"",url));
}
@Override protected void onDownloadNecessary(){
}
@Override protected void onDownloadStarted(){
}
@Override protected void onProgress(long bytesRead,long totalBytes){
}
@Override protected void onFailure(RequestFailureType type,Throwable t,StatusLine status,String readableMessage){
handler.onRequestFailed(new SubredditRequestFailure(type,t,status,readableMessage,url.toString()));
}
@Override protected void onSuccess(CacheManager.ReadableCacheFile cacheFile,long timestamp,UUID session,boolean fromCache,String mimetype){
}
@Override public void onJsonParseStarted(JsonValue result,long timestamp,UUID session,boolean fromCache){
try {
final HashSet<String> output=new HashSet<String>();
final ArrayList<RedditSubreddit> toWrite=new ArrayList<RedditSubreddit>();
final JsonBufferedObject redditListing=result.asObject().getObject(""String_Node_Str"");
final JsonBufferedArray subreddits=redditListing.getArray(""String_Node_Str"");
final JsonBuffered.Status joinStatus=subreddits.join();
if (joinStatus == JsonBuffered.Status.FAILED) {
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,null,null,""String_Node_Str"",url.toString()));
return;
}
if (type == RedditSubredditManager.SubredditListType.SUBSCRIBED && subreddits.getCurrentItemCount() == 0) {
doSubredditListRequest(RedditSubredditManager.SubredditListType.MOST_POPULAR,handler,null);
return;
}
for (final JsonValue v : subreddits) {
final RedditThing thing=v.asObject(RedditThing.class);
final RedditSubreddit subreddit=thing.asSubreddit();
subreddit.downloadTime=timestamp;
toWrite.add(subreddit);
output.add(subreddit.getCanonicalName());
}
RedditSubredditManager.getInstance(context,user).offerRawSubredditData(toWrite,timestamp);
final String receivedAfter=redditListing.getString(""String_Node_Str"");
if (receivedAfter != null) {
doSubredditListRequest(type,new RequestResponseHandler<WritableHashSet,SubredditRequestFailure>(){
public void onRequestFailed(SubredditRequestFailure failureReason){
handler.onRequestFailed(failureReason);
}
public void onRequestSuccess(WritableHashSet result,long timeCached){
output.addAll(result.toHashset());
handler.onRequestSuccess(new WritableHashSet(output,timeCached,type.name()),timeCached);
}
}
,receivedAfter);
}
 else {
handler.onRequestSuccess(new WritableHashSet(output,timestamp,type.name()),timestamp);
}
}
 catch (Exception e) {
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"",url.toString()));
}
}
}
;
CacheManager.getInstance(context).makeRequest(aboutSubredditCacheRequest);
}","private void doSubredditListRequest(final RedditSubredditManager.SubredditListType type,final RequestResponseHandler<WritableHashSet,SubredditRequestFailure> handler,final String after){
  URI uri;
switch (type) {
case SUBSCRIBED:
    uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_MINE_SUBSCRIBER);
  break;
case MODERATED:
uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_MINE_MODERATOR);
break;
case MOST_POPULAR:
uri=Constants.Reddit.getUri(Constants.Reddit.PATH_SUBREDDITS_POPULAR);
break;
default :
throw new UnexpectedInternalStateException(type.name());
}
if (after != null) {
final Uri.Builder builder=Uri.parse(uri.toString()).buildUpon();
builder.appendQueryParameter(""String_Node_Str"",after);
uri=General.uriFromString(builder.toString());
}
final CacheRequest aboutSubredditCacheRequest=new CacheRequest(uri,user,null,Constants.Priority.API_SUBREDDIT_INVIDIVUAL,0,CacheRequest.DownloadType.FORCE,Constants.FileType.SUBREDDIT_LIST,true,true,false,context){
@Override protected void onCallbackException(Throwable t){
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,t,null,""String_Node_Str"",url));
}
@Override protected void onDownloadNecessary(){
}
@Override protected void onDownloadStarted(){
}
@Override protected void onProgress(long bytesRead,long totalBytes){
}
@Override protected void onFailure(RequestFailureType type,Throwable t,StatusLine status,String readableMessage){
handler.onRequestFailed(new SubredditRequestFailure(type,t,status,readableMessage,url.toString()));
}
@Override protected void onSuccess(CacheManager.ReadableCacheFile cacheFile,long timestamp,UUID session,boolean fromCache,String mimetype){
}
@Override public void onJsonParseStarted(JsonValue result,long timestamp,UUID session,boolean fromCache){
try {
final HashSet<String> output=new HashSet<String>();
final ArrayList<RedditSubreddit> toWrite=new ArrayList<RedditSubreddit>();
final JsonBufferedObject redditListing=result.asObject().getObject(""String_Node_Str"");
final JsonBufferedArray subreddits=redditListing.getArray(""String_Node_Str"");
final JsonBuffered.Status joinStatus=subreddits.join();
if (joinStatus == JsonBuffered.Status.FAILED) {
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,null,null,""String_Node_Str"",url.toString()));
return;
}
if (type == RedditSubredditManager.SubredditListType.SUBSCRIBED && subreddits.getCurrentItemCount() == 0) {
doSubredditListRequest(RedditSubredditManager.SubredditListType.MOST_POPULAR,handler,null);
return;
}
for (final JsonValue v : subreddits) {
final RedditThing thing=v.asObject(RedditThing.class);
final RedditSubreddit subreddit=thing.asSubreddit();
subreddit.downloadTime=timestamp;
toWrite.add(subreddit);
output.add(subreddit.getCanonicalName());
}
RedditSubredditManager.getInstance(context,user).offerRawSubredditData(toWrite,timestamp);
final String receivedAfter=redditListing.getString(""String_Node_Str"");
if (receivedAfter != null && type != RedditSubredditManager.SubredditListType.MOST_POPULAR) {
doSubredditListRequest(type,new RequestResponseHandler<WritableHashSet,SubredditRequestFailure>(){
public void onRequestFailed(SubredditRequestFailure failureReason){
handler.onRequestFailed(failureReason);
}
public void onRequestSuccess(WritableHashSet result,long timeCached){
output.addAll(result.toHashset());
handler.onRequestSuccess(new WritableHashSet(output,timeCached,type.name()),timeCached);
}
}
,receivedAfter);
}
 else {
handler.onRequestSuccess(new WritableHashSet(output,timestamp,type.name()),timestamp);
}
}
 catch (Exception e) {
handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"",url.toString()));
}
}
}
;
CacheManager.getInstance(context).makeRequest(aboutSubredditCacheRequest);
}",0.991373589913736
15429,"@Override public void onJsonParseStarted(JsonValue result,long timestamp,UUID session,boolean fromCache){
  try {
    final HashSet<String> output=new HashSet<String>();
    final ArrayList<RedditSubreddit> toWrite=new ArrayList<RedditSubreddit>();
    final JsonBufferedObject redditListing=result.asObject().getObject(""String_Node_Str"");
    final JsonBufferedArray subreddits=redditListing.getArray(""String_Node_Str"");
    final JsonBuffered.Status joinStatus=subreddits.join();
    if (joinStatus == JsonBuffered.Status.FAILED) {
      handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,null,null,""String_Node_Str"",url.toString()));
      return;
    }
    if (type == RedditSubredditManager.SubredditListType.SUBSCRIBED && subreddits.getCurrentItemCount() == 0) {
      doSubredditListRequest(RedditSubredditManager.SubredditListType.MOST_POPULAR,handler,null);
      return;
    }
    for (    final JsonValue v : subreddits) {
      final RedditThing thing=v.asObject(RedditThing.class);
      final RedditSubreddit subreddit=thing.asSubreddit();
      subreddit.downloadTime=timestamp;
      toWrite.add(subreddit);
      output.add(subreddit.getCanonicalName());
    }
    RedditSubredditManager.getInstance(context,user).offerRawSubredditData(toWrite,timestamp);
    final String receivedAfter=redditListing.getString(""String_Node_Str"");
    if (receivedAfter != null) {
      doSubredditListRequest(type,new RequestResponseHandler<WritableHashSet,SubredditRequestFailure>(){
        public void onRequestFailed(        SubredditRequestFailure failureReason){
          handler.onRequestFailed(failureReason);
        }
        public void onRequestSuccess(        WritableHashSet result,        long timeCached){
          output.addAll(result.toHashset());
          handler.onRequestSuccess(new WritableHashSet(output,timeCached,type.name()),timeCached);
        }
      }
,receivedAfter);
    }
 else {
      handler.onRequestSuccess(new WritableHashSet(output,timestamp,type.name()),timestamp);
    }
  }
 catch (  Exception e) {
    handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"",url.toString()));
  }
}","@Override public void onJsonParseStarted(JsonValue result,long timestamp,UUID session,boolean fromCache){
  try {
    final HashSet<String> output=new HashSet<String>();
    final ArrayList<RedditSubreddit> toWrite=new ArrayList<RedditSubreddit>();
    final JsonBufferedObject redditListing=result.asObject().getObject(""String_Node_Str"");
    final JsonBufferedArray subreddits=redditListing.getArray(""String_Node_Str"");
    final JsonBuffered.Status joinStatus=subreddits.join();
    if (joinStatus == JsonBuffered.Status.FAILED) {
      handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,null,null,""String_Node_Str"",url.toString()));
      return;
    }
    if (type == RedditSubredditManager.SubredditListType.SUBSCRIBED && subreddits.getCurrentItemCount() == 0) {
      doSubredditListRequest(RedditSubredditManager.SubredditListType.MOST_POPULAR,handler,null);
      return;
    }
    for (    final JsonValue v : subreddits) {
      final RedditThing thing=v.asObject(RedditThing.class);
      final RedditSubreddit subreddit=thing.asSubreddit();
      subreddit.downloadTime=timestamp;
      toWrite.add(subreddit);
      output.add(subreddit.getCanonicalName());
    }
    RedditSubredditManager.getInstance(context,user).offerRawSubredditData(toWrite,timestamp);
    final String receivedAfter=redditListing.getString(""String_Node_Str"");
    if (receivedAfter != null && type != RedditSubredditManager.SubredditListType.MOST_POPULAR) {
      doSubredditListRequest(type,new RequestResponseHandler<WritableHashSet,SubredditRequestFailure>(){
        public void onRequestFailed(        SubredditRequestFailure failureReason){
          handler.onRequestFailed(failureReason);
        }
        public void onRequestSuccess(        WritableHashSet result,        long timeCached){
          output.addAll(result.toHashset());
          handler.onRequestSuccess(new WritableHashSet(output,timeCached,type.name()),timeCached);
        }
      }
,receivedAfter);
    }
 else {
      handler.onRequestSuccess(new WritableHashSet(output,timestamp,type.name()),timestamp);
    }
  }
 catch (  Exception e) {
    handler.onRequestFailed(new SubredditRequestFailure(RequestFailureType.PARSE,e,null,""String_Node_Str"",url.toString()));
  }
}",0.9854423292273236
15430,"public void onSubscriptionsChanged(final Collection<String> subscriptions){
  RedditSubredditManager.getInstance(context,user).getSubreddits(subscriptions,TimestampBound.notOlderThan(1000 * 60 * 60* 24),new RequestResponseHandler<HashMap<String,RedditSubreddit>,SubredditRequestFailure>(){
    @Override public void onRequestFailed(    SubredditRequestFailure failureReason){
      onError(failureReason.asError(context));
    }
    @Override public void onRequestSuccess(    HashMap<String,RedditSubreddit> result,    long timeCached){
      adapter.setSubreddits(result.values());
    }
  }
);
  if (loadingView != null)   loadingView.setDone(R.string.download_done);
}","public void onSubscriptionsChanged(final Collection<String> subscriptions){
  RedditSubredditManager.getInstance(context,user).getSubreddits(subscriptions,TimestampBound.ANY,new RequestResponseHandler<HashMap<String,RedditSubreddit>,SubredditRequestFailure>(){
    @Override public void onRequestFailed(    SubredditRequestFailure failureReason){
      onError(failureReason.asError(context));
    }
    @Override public void onRequestSuccess(    HashMap<String,RedditSubreddit> result,    long timeCached){
      adapter.setSubreddits(result.values());
    }
  }
);
  if (loadingView != null)   loadingView.setDone(R.string.download_done);
}",0.9733434881949732
15431,"private static void clean(final IntArrayLengthPair input,final IntArrayLengthPair output){
  final boolean[] toRevert=new boolean[input.pos];
  final boolean[] toDelete=new boolean[input.pos];
  int lastUnderscore=-1, lastUnderscoreDouble=-1;
  int lastAsterisk=-1, lastAsteriskDouble=-1;
  int lastTildeDouble=-1;
  int lastBracketSquareOpen=-1;
  for (int i=0; i < input.pos; i++) {
    final int c=input.data[i];
switch (c) {
case TOKEN_UNDERSCORE:
      lastUnderscore=lastUnderscore < 0 ? i : -1;
    break;
case TOKEN_UNDERSCORE_DOUBLE:
  if (lastUnderscoreDouble < 0) {
    lastUnderscoreDouble=i;
  }
 else {
    if (lastUnderscoreDouble == i - 1) {
      toRevert[lastUnderscoreDouble]=true;
      toRevert[i]=true;
    }
    lastUnderscoreDouble=-1;
  }
break;
case TOKEN_ASTERISK:
lastAsterisk=lastAsterisk < 0 ? i : -1;
break;
case TOKEN_ASTERISK_DOUBLE:
if (lastAsteriskDouble < 0) {
lastAsteriskDouble=i;
}
 else {
if (lastAsteriskDouble == i - 1) {
toRevert[lastAsteriskDouble]=true;
toRevert[i]=true;
}
lastAsteriskDouble=-1;
}
break;
case TOKEN_TILDE_DOUBLE:
if (lastTildeDouble < 0) {
lastTildeDouble=i;
}
 else {
if (lastTildeDouble == i - 1) {
toRevert[lastTildeDouble]=true;
toRevert[i]=true;
}
lastTildeDouble=-1;
}
break;
case TOKEN_GRAVE:
final int openingGrave=i;
final int closingGrave=indexOf(input.data,TOKEN_GRAVE,i + 1,input.pos);
if (closingGrave < 0) {
toRevert[i]=true;
}
 else {
for (int j=openingGrave + 1; j < closingGrave; j++) {
if (input.data[j] < 0) toRevert[j]=true;
}
i=closingGrave;
}
break;
case TOKEN_BRACKET_SQUARE_OPEN:
if (lastBracketSquareOpen < 0) {
lastBracketSquareOpen=i;
}
 else {
toRevert[lastBracketSquareOpen]=true;
lastBracketSquareOpen=i;
}
break;
case TOKEN_BRACKET_SQUARE_CLOSE:
if (lastBracketSquareOpen < 0) {
toRevert[i]=true;
}
 else {
final int lastBracketSquareClose=i;
final int parenOpenPos=indexOf(input.data,TOKEN_PAREN_OPEN,lastBracketSquareClose + 1,input.pos);
boolean linkParseSuccess=false;
if (parenOpenPos >= 0) {
if (isSpaces(input.data,lastBracketSquareClose + 1,parenOpenPos)) {
final int parenClosePos=findParenClosePos(input,parenOpenPos + 1);
if (parenClosePos >= 0) {
linkParseSuccess=true;
for (int j=lastBracketSquareClose + 1; j < parenOpenPos; j++) {
toDelete[j]=true;
}
for (int j=parenOpenPos + 1; j < parenClosePos; j++) {
if (input.data[j] < 0) {
toRevert[j]=true;
}
 else if (input.data[j] == ' ' && input.data[j - 1] == ' ') {
toDelete[j]=true;
}
}
for (int j=parenOpenPos + 1; input.data[j] == ' '; j++) {
toDelete[j]=true;
}
for (int j=parenClosePos - 1; input.data[j] == ' '; j--) {
toDelete[j]=true;
}
i=parenClosePos;
}
}
}
if (!linkParseSuccess) {
toRevert[lastBracketSquareOpen]=true;
toRevert[lastBracketSquareClose]=true;
i=lastBracketSquareClose;
}
}
lastBracketSquareOpen=-1;
break;
case TOKEN_PAREN_OPEN:
case TOKEN_PAREN_CLOSE:
case TOKEN_UNICODE_CLOSE:
toRevert[i]=true;
break;
case TOKEN_UNICODE_OPEN:
final int openingUnicode=i;
final int closingUnicode=indexOf(input.data,TOKEN_UNICODE_CLOSE,i + 1,Math.min(input.pos,i + 8));
if (closingUnicode < 0 || !isDigits(input.data,openingUnicode + 1,closingUnicode)) {
toRevert[i]=true;
}
 else {
final int codePoint=getDecimal(input.data,openingUnicode + 1,closingUnicode);
input.data[openingUnicode]=codePoint;
for (int j=openingUnicode + 1; j <= closingUnicode; j++) {
toDelete[j]=true;
}
i=closingUnicode;
}
break;
case ' ':
if (i < 1 || input.data[i - 1] == ' ') {
toDelete[i]=true;
}
break;
}
}
if (lastUnderscore >= 0) toRevert[lastUnderscore]=true;
if (lastUnderscoreDouble >= 0) toRevert[lastUnderscoreDouble]=true;
if (lastAsterisk >= 0) toRevert[lastAsterisk]=true;
if (lastAsteriskDouble >= 0) toRevert[lastAsteriskDouble]=true;
if (lastTildeDouble >= 0) toRevert[lastTildeDouble]=true;
if (lastBracketSquareOpen >= 0) toRevert[lastBracketSquareOpen]=true;
for (int j=input.pos - 1; input.data[j] == ' '; j--) {
toDelete[j]=true;
}
output.clear();
for (int i=0; i < input.pos; i++) {
if (toDelete[i]) continue;
if (toRevert[i]) {
final char[] revertTo=reverseLookup[20 + input.data[i]];
output.append(revertTo);
}
 else {
output.data[output.pos++]=input.data[i];
}
}
}","private static void clean(final IntArrayLengthPair input,final IntArrayLengthPair output){
  final boolean[] toRevert=new boolean[input.pos];
  final boolean[] toDelete=new boolean[input.pos];
  int lastUnderscore=-1, lastUnderscoreDouble=-1;
  int lastAsterisk=-1, lastAsteriskDouble=-1;
  int lastTildeDouble=-1;
  int lastBracketSquareOpen=-1;
  for (int i=0; i < input.pos; i++) {
    final int c=input.data[i];
switch (c) {
case TOKEN_UNDERSCORE:
      lastUnderscore=lastUnderscore < 0 ? i : -1;
    break;
case TOKEN_UNDERSCORE_DOUBLE:
  if (lastUnderscoreDouble < 0) {
    lastUnderscoreDouble=i;
  }
 else {
    if (lastUnderscoreDouble == i - 1) {
      toRevert[lastUnderscoreDouble]=true;
      toRevert[i]=true;
    }
    lastUnderscoreDouble=-1;
  }
break;
case TOKEN_ASTERISK:
lastAsterisk=lastAsterisk < 0 ? i : -1;
break;
case TOKEN_ASTERISK_DOUBLE:
if (lastAsteriskDouble < 0) {
lastAsteriskDouble=i;
}
 else {
if (lastAsteriskDouble == i - 1) {
toRevert[lastAsteriskDouble]=true;
toRevert[i]=true;
}
lastAsteriskDouble=-1;
}
break;
case TOKEN_TILDE_DOUBLE:
if (lastTildeDouble < 0) {
lastTildeDouble=i;
}
 else {
if (lastTildeDouble == i - 1) {
toRevert[lastTildeDouble]=true;
toRevert[i]=true;
}
lastTildeDouble=-1;
}
break;
case TOKEN_GRAVE:
final int openingGrave=i;
final int closingGrave=indexOf(input.data,TOKEN_GRAVE,i + 1,input.pos);
if (closingGrave < 0) {
toRevert[i]=true;
}
 else {
for (int j=openingGrave + 1; j < closingGrave; j++) {
if (input.data[j] < 0) toRevert[j]=true;
}
i=closingGrave;
}
break;
case TOKEN_BRACKET_SQUARE_OPEN:
if (lastBracketSquareOpen < 0) {
lastBracketSquareOpen=i;
}
 else {
toRevert[lastBracketSquareOpen]=true;
lastBracketSquareOpen=i;
}
break;
case TOKEN_BRACKET_SQUARE_CLOSE:
if (lastBracketSquareOpen < 0) {
toRevert[i]=true;
}
 else {
final int lastBracketSquareClose=i;
final int parenOpenPos=indexOf(input.data,TOKEN_PAREN_OPEN,lastBracketSquareClose + 1,input.pos);
boolean linkParseSuccess=false;
if (parenOpenPos >= 0) {
if (isSpaces(input.data,lastBracketSquareClose + 1,parenOpenPos)) {
final int parenClosePos=findParenClosePos(input,parenOpenPos + 1);
if (parenClosePos >= 0) {
linkParseSuccess=true;
for (int j=lastBracketSquareClose + 1; j < parenOpenPos; j++) {
toDelete[j]=true;
}
for (int j=parenOpenPos + 1; j < parenClosePos; j++) {
if (input.data[j] < 0) {
toRevert[j]=true;
}
 else if (input.data[j] == ' ' && input.data[j - 1] == ' ') {
toDelete[j]=true;
}
}
for (int j=parenOpenPos + 1; input.data[j] == ' '; j++) {
toDelete[j]=true;
}
for (int j=parenClosePos - 1; input.data[j] == ' '; j--) {
toDelete[j]=true;
}
i=parenClosePos;
}
}
}
if (!linkParseSuccess) {
toRevert[lastBracketSquareOpen]=true;
toRevert[lastBracketSquareClose]=true;
i=lastBracketSquareClose;
}
}
lastBracketSquareOpen=-1;
break;
case TOKEN_PAREN_OPEN:
case TOKEN_PAREN_CLOSE:
case TOKEN_UNICODE_CLOSE:
toRevert[i]=true;
break;
case TOKEN_UNICODE_OPEN:
final int openingUnicode=i;
final int closingUnicode=indexOf(input.data,TOKEN_UNICODE_CLOSE,i + 1,Math.min(input.pos,i + 8));
if (closingUnicode < 0 || !isDigits(input.data,openingUnicode + 1,closingUnicode)) {
toRevert[i]=true;
}
 else {
final int codePoint=getDecimal(input.data,openingUnicode + 1,closingUnicode);
input.data[openingUnicode]=codePoint;
for (int j=openingUnicode + 1; j <= closingUnicode; j++) {
toDelete[j]=true;
}
i=closingUnicode;
}
break;
case ' ':
if (i < 1 || input.data[i - 1] == ' ') {
toDelete[i]=true;
}
break;
}
}
if (lastUnderscore >= 0) toRevert[lastUnderscore]=true;
if (lastUnderscoreDouble >= 0) toRevert[lastUnderscoreDouble]=true;
if (lastAsterisk >= 0) toRevert[lastAsterisk]=true;
if (lastAsteriskDouble >= 0) toRevert[lastAsteriskDouble]=true;
if (lastTildeDouble >= 0) toRevert[lastTildeDouble]=true;
if (lastBracketSquareOpen >= 0) toRevert[lastBracketSquareOpen]=true;
for (int j=input.pos - 1; j >= 0 && input.data[j] == ' '; j--) {
toDelete[j]=true;
}
output.clear();
for (int i=0; i < input.pos; i++) {
if (toDelete[i]) continue;
if (toRevert[i]) {
final char[] revertTo=reverseLookup[20 + input.data[i]];
output.append(revertTo);
}
 else {
output.data[output.pos++]=input.data[i];
}
}
}",0.998791978738826
15432,"public static void onLinkClicked(final Activity activity,final String url,final boolean forceNoImage,final RedditPost post){
  if (url.startsWith(""String_Node_Str"")) {
    final Uri rrUri=Uri.parse(url);
    if (rrUri.getAuthority().equals(""String_Node_Str"")) {
      final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
      builder.setTitle(rrUri.getQueryParameter(""String_Node_Str""));
      builder.setMessage(rrUri.getQueryParameter(""String_Node_Str""));
      AlertDialog alert=builder.create();
      alert.show();
      return;
    }
  }
  if (!forceNoImage) {
    final String imageUrl=getImageUrl(url);
    if (imageUrl != null) {
      final Intent intent=new Intent(activity,ImageViewActivity.class);
      intent.setData(Uri.parse(imageUrl));
      intent.putExtra(""String_Node_Str"",post);
      activity.startActivity(intent);
      return;
    }
  }
  final Matcher redditCommentsMatcher=redditCommentsPattern.matcher(url);
  if (redditCommentsMatcher.find()) {
    final Intent intent=new Intent(activity,CommentListingActivity.class);
    intent.putExtra(""String_Node_Str"",redditCommentsMatcher.group(2));
    activity.startActivity(intent);
    return;
  }
  final Matcher redditUserMatcher=redditUserPattern.matcher(url);
  if (redditUserMatcher.find()) {
    UserProfileDialog.newInstance(redditUserMatcher.group(2)).show(activity);
    return;
  }
  final Matcher redditSubredditMatcher=subredditPattern.matcher(url);
  if (redditSubredditMatcher.find()) {
    final String subredditUrl=redditSubredditMatcher.group(1);
    final Intent intent=new Intent(activity,PostListingActivity.class);
    intent.putExtra(""String_Node_Str"",new RedditSubreddit(subredditUrl,subredditUrl,true));
    activity.startActivity(intent);
    return;
  }
  final Matcher shortSubredditMatcher=shortSubredditPattern.matcher(url);
  if (shortSubredditMatcher.find()) {
    final String subredditUrl=""String_Node_Str"" + shortSubredditMatcher.group(1);
    final Intent intent=new Intent(activity,PostListingActivity.class);
    intent.putExtra(""String_Node_Str"",new RedditSubreddit(subredditUrl,subredditUrl,true));
    activity.startActivity(intent);
    return;
  }
  if (youtubeDotComPattern.matcher(url).matches() || vimeoPattern.matcher(url).matches()) {
    final Intent intent=new Intent(Intent.ACTION_VIEW);
    intent.setData(Uri.parse(url.replaceAll(""String_Node_Str"",""String_Node_Str"")));
    activity.startActivity(intent);
  }
 else {
    final Matcher youtuDotBeMatcher=youtuDotBePattern.matcher(url);
    if (youtuDotBeMatcher.find() && youtuDotBeMatcher.group(1) != null) {
      final String youtuBeUrl=""String_Node_Str"" + youtuDotBeMatcher.group(1) + (youtuDotBeMatcher.group(2).length() > 0 ? ""String_Node_Str"" + youtuDotBeMatcher.group(2).substring(1) : ""String_Node_Str"");
      final Intent intent=new Intent(Intent.ACTION_VIEW);
      intent.setData(Uri.parse(youtuBeUrl));
      activity.startActivity(intent);
    }
 else {
      final Intent intent=new Intent(activity,WebViewActivity.class);
      intent.putExtra(""String_Node_Str"",url);
      intent.putExtra(""String_Node_Str"",post);
      activity.startActivity(intent);
    }
  }
}","public static void onLinkClicked(final Activity activity,final String url,final boolean forceNoImage,final RedditPost post){
  if (url.startsWith(""String_Node_Str"")) {
    final Uri rrUri=Uri.parse(url);
    if (rrUri.getAuthority().equals(""String_Node_Str"")) {
      new Handler().post(new Runnable(){
        public void run(){
          final AlertDialog.Builder builder=new AlertDialog.Builder(activity);
          builder.setTitle(rrUri.getQueryParameter(""String_Node_Str""));
          builder.setMessage(rrUri.getQueryParameter(""String_Node_Str""));
          AlertDialog alert=builder.create();
          alert.show();
        }
      }
);
      return;
    }
  }
  if (!forceNoImage) {
    final String imageUrl=getImageUrl(url);
    if (imageUrl != null) {
      final Intent intent=new Intent(activity,ImageViewActivity.class);
      intent.setData(Uri.parse(imageUrl));
      intent.putExtra(""String_Node_Str"",post);
      activity.startActivity(intent);
      return;
    }
  }
  final Matcher redditCommentsMatcher=redditCommentsPattern.matcher(url);
  if (redditCommentsMatcher.find()) {
    final Intent intent=new Intent(activity,CommentListingActivity.class);
    intent.putExtra(""String_Node_Str"",redditCommentsMatcher.group(2));
    activity.startActivity(intent);
    return;
  }
  final Matcher redditUserMatcher=redditUserPattern.matcher(url);
  if (redditUserMatcher.find()) {
    UserProfileDialog.newInstance(redditUserMatcher.group(2)).show(activity);
    return;
  }
  final Matcher redditSubredditMatcher=subredditPattern.matcher(url);
  if (redditSubredditMatcher.find()) {
    final String subredditUrl=redditSubredditMatcher.group(1);
    final Intent intent=new Intent(activity,PostListingActivity.class);
    intent.putExtra(""String_Node_Str"",new RedditSubreddit(subredditUrl,subredditUrl,true));
    activity.startActivity(intent);
    return;
  }
  final Matcher shortSubredditMatcher=shortSubredditPattern.matcher(url);
  if (shortSubredditMatcher.find()) {
    final String subredditUrl=""String_Node_Str"" + shortSubredditMatcher.group(1);
    final Intent intent=new Intent(activity,PostListingActivity.class);
    intent.putExtra(""String_Node_Str"",new RedditSubreddit(subredditUrl,subredditUrl,true));
    activity.startActivity(intent);
    return;
  }
  if (youtubeDotComPattern.matcher(url).matches() || vimeoPattern.matcher(url).matches()) {
    final Intent intent=new Intent(Intent.ACTION_VIEW);
    intent.setData(Uri.parse(url.replaceAll(""String_Node_Str"",""String_Node_Str"")));
    activity.startActivity(intent);
  }
 else {
    final Matcher youtuDotBeMatcher=youtuDotBePattern.matcher(url);
    if (youtuDotBeMatcher.find() && youtuDotBeMatcher.group(1) != null) {
      final String youtuBeUrl=""String_Node_Str"" + youtuDotBeMatcher.group(1) + (youtuDotBeMatcher.group(2).length() > 0 ? ""String_Node_Str"" + youtuDotBeMatcher.group(2).substring(1) : ""String_Node_Str"");
      final Intent intent=new Intent(Intent.ACTION_VIEW);
      intent.setData(Uri.parse(youtuBeUrl));
      activity.startActivity(intent);
    }
 else {
      final Intent intent=new Intent(activity,WebViewActivity.class);
      intent.putExtra(""String_Node_Str"",url);
      intent.putExtra(""String_Node_Str"",post);
      activity.startActivity(intent);
    }
  }
}",0.9831243226505652
15433,"public MarkdownLine rejoin(MarkdownLine toAppend){
  return new MarkdownLine(src.rejoin(toAppend.src),type,spacesAtStart,toAppend.spacesAtEnd,prefixLength,level,number);
}","public MarkdownLine rejoin(MarkdownLine toAppend){
  src.arr[src.start + src.length]=' ';
  return new MarkdownLine(src.rejoin(toAppend.src),type,spacesAtStart,toAppend.spacesAtEnd,prefixLength,level,number);
}",0.8976377952755905
15434,"public static MarkdownParagraphGroup parse(final char[] raw){
  final CharArrSubstring[] rawLines=CharArrSubstring.generateFromLines(raw);
  final MarkdownLine[] lines=new MarkdownLine[rawLines.length];
  for (int i=0; i < rawLines.length; i++) {
    lines[i]=MarkdownLine.generate(rawLines[i]);
  }
  final ArrayList<MarkdownLine> mergedLines=new ArrayList<MarkdownLine>(rawLines.length);
  MarkdownLine currentLine=null;
  for (int i=0; i < lines.length; i++) {
    if (currentLine != null) {
switch (lines[i].type) {
case BULLET:
case NUMBERED:
case HEADER:
case CODE:
case HLINE:
case QUOTE:
        mergedLines.add(currentLine);
      currentLine=lines[i];
    break;
case EMPTY:
  mergedLines.add(currentLine);
currentLine=null;
break;
case TEXT:
if (i > 0) {
switch (lines[i - 1].type) {
case QUOTE:
case BULLET:
case NUMBERED:
case TEXT:
if (lines[i - 1].spacesAtEnd >= 2) {
  mergedLines.add(currentLine);
  currentLine=lines[i];
}
 else {
  currentLine=currentLine.rejoin(lines[i]);
}
break;
case CODE:
case HEADER:
case HLINE:
mergedLines.add(currentLine);
currentLine=lines[i];
break;
}
}
 else {
throw new RuntimeException(""String_Node_Str"");
}
break;
}
}
 else if (lines[i].type != MarkdownParagraphType.EMPTY) {
currentLine=lines[i];
}
}
if (currentLine != null) {
mergedLines.add(currentLine);
}
final MarkdownParagraph[] paragraphs=new MarkdownParagraph[mergedLines.size()];
for (int i=0; i < paragraphs.length; i++) {
paragraphs[i]=mergedLines.get(i).tokenize(i > 0 ? paragraphs[i - 1] : null);
}
return new MarkdownParagraphGroup(paragraphs);
}","public static MarkdownParagraphGroup parse(final char[] raw){
  final CharArrSubstring[] rawLines=CharArrSubstring.generateFromLines(raw);
  final MarkdownLine[] lines=new MarkdownLine[rawLines.length];
  for (int i=0; i < rawLines.length; i++) {
    lines[i]=MarkdownLine.generate(rawLines[i]);
  }
  final ArrayList<MarkdownLine> mergedLines=new ArrayList<MarkdownLine>(rawLines.length);
  MarkdownLine currentLine=null;
  for (int i=0; i < lines.length; i++) {
    if (currentLine != null) {
switch (lines[i].type) {
case BULLET:
case NUMBERED:
case HEADER:
case CODE:
case HLINE:
case QUOTE:
        mergedLines.add(currentLine);
      currentLine=lines[i];
    break;
case EMPTY:
  mergedLines.add(currentLine);
currentLine=null;
break;
case TEXT:
if (i < 1) {
throw new RuntimeException(""String_Node_Str"");
}
switch (lines[i - 1].type) {
case QUOTE:
case BULLET:
case NUMBERED:
case TEXT:
if (lines[i - 1].spacesAtEnd >= 2) {
mergedLines.add(currentLine);
currentLine=lines[i];
}
 else {
currentLine=currentLine.rejoin(lines[i]);
}
break;
case CODE:
case HEADER:
case HLINE:
mergedLines.add(currentLine);
currentLine=lines[i];
break;
}
break;
}
}
 else if (lines[i].type != MarkdownParagraphType.EMPTY) {
currentLine=lines[i];
}
}
if (currentLine != null) {
mergedLines.add(currentLine);
}
final MarkdownParagraph[] paragraphs=new MarkdownParagraph[mergedLines.size()];
for (int i=0; i < paragraphs.length; i++) {
paragraphs[i]=mergedLines.get(i).tokenize(i > 0 ? paragraphs[i - 1] : null);
}
return new MarkdownParagraphGroup(paragraphs);
}",0.9614147909967846
15435,"public void reset(final Activity activity,final CommentListingFragment fragment,final RedditPreparedComment comment,final ActiveTextView.OnLinkClickedListener listener){
  if (this.comment != null)   this.comment.unbind(this);
  this.comment=comment;
  comment.bind(this);
  final int paddingPixelsPerIndent=General.dpToPixels(activity,10.0f);
  leftIndent.getLayoutParams().width=paddingPixelsPerIndent * comment.indentation;
  leftDividerLine.setVisibility(comment.indentation == 0 ? GONE : VISIBLE);
  if (!comment.isCollapsed()) {
    header.setText(comment.header);
  }
 else {
    header.setText(""String_Node_Str"" + comment.header);
  }
  bodyHolder.removeAllViews();
  final ViewGroup commentBody=comment.getBody(activity,13.0f * fontScale,bodyCol);
  bodyHolder.addView(commentBody);
  commentBody.getLayoutParams().width=ViewGroup.LayoutParams.MATCH_PARENT;
  ((MarginLayoutParams)commentBody.getLayoutParams()).topMargin=General.dpToPixels(activity,2);
  updateVisibility(activity);
}","public void reset(final Activity activity,final CommentListingFragment fragment,final RedditPreparedComment comment,final ActiveTextView.OnLinkClickedListener listener){
  if (this.comment != null)   this.comment.unbind(this);
  this.comment=comment;
  comment.bind(this);
  final int paddingPixelsPerIndent=General.dpToPixels(activity,10.0f);
  leftIndent.getLayoutParams().width=paddingPixelsPerIndent * comment.indentation;
  leftDividerLine.setVisibility(comment.indentation == 0 ? GONE : VISIBLE);
  if (!comment.isCollapsed()) {
    header.setText(comment.header);
  }
 else {
    header.setText(""String_Node_Str"" + comment.header);
  }
  bodyHolder.removeAllViews();
  final ViewGroup commentBody=comment.getBody(activity,13.0f * fontScale,bodyCol);
  bodyHolder.addView(commentBody);
  commentBody.getLayoutParams().width=ViewGroup.LayoutParams.MATCH_PARENT;
  ((MarginLayoutParams)commentBody.getLayoutParams()).topMargin=General.dpToPixels(activity,1);
  updateVisibility(activity);
}",0.9989939637826962
15436,"public static int[] tokenizeCleanAndLinkify(final char[] rawArr){
  final int[] passTwoResult=tokenizeAndClean(rawArr);
  final int passTwoResultLength=passTwoResult.length;
  final int[] passThreeResult=new int[rawArr.length * 3];
  int passThreeResultLength=0;
  boolean ready=true;
  for (int i=0; i < passTwoResultLength; i++) {
    final int token=passTwoResult[i];
switch (token) {
case TOKEN_BRACKET_SQUARE_OPEN:
case TOKEN_PAREN_OPEN:
      passThreeResult[passThreeResultLength++]=token;
    ready=false;
  break;
case TOKEN_BRACKET_SQUARE_CLOSE:
case TOKEN_PAREN_CLOSE:
case ' ':
passThreeResult[passThreeResultLength++]=token;
ready=true;
break;
case 'h':
case 'w':
if (ready) {
final int linkStartType=getLinkStartType(passThreeResult,i,passThreeResultLength);
if (linkStartType >= 0) {
int linkEndPos=i + linkPrefixes[linkStartType].length;
}
 else {
passThreeResult[passThreeResultLength++]=token;
}
}
 else {
passThreeResult[passThreeResultLength++]=token;
}
ready=false;
break;
case 'r':
case 'u':
case '/':
if (ready) {
final int linkStartType=getRedditLinkStartType(passThreeResult,i,passThreeResultLength);
if (linkStartType >= 0) {
final int linkStartPos=i;
final int linkPrefixEndPos=linkPrefixes_reddit[linkStartType].length + linkStartPos;
int linkEndPos=linkPrefixEndPos;
while (linkEndPos < passTwoResultLength) {
final int lToken=passThreeResult[linkEndPos];
final boolean isValidChar=(lToken >= 'a' && lToken <= 'z') || (lToken >= 'A' && lToken <= 'Z') || (lToken >= '0' && lToken <= '9')|| lToken == '_' || lToken == '+' || lToken == '-';
linkEndPos++;
}
if (linkEndPos - linkPrefixEndPos > 2) {
final int[] reverted=revert(passTwoResult,linkStartPos,linkEndPos);
passThreeResult[passThreeResultLength++]=TOKEN_BRACKET_SQUARE_OPEN;
System.arraycopy(reverted,0,passThreeResult,passThreeResultLength,reverted.length);
passThreeResultLength+=reverted.length;
passThreeResult[passThreeResultLength++]=TOKEN_BRACKET_SQUARE_CLOSE;
passThreeResult[passThreeResultLength++]=TOKEN_PAREN_OPEN;
System.arraycopy(reverted,0,passThreeResult,passThreeResultLength,reverted.length);
passThreeResultLength+=reverted.length;
passThreeResult[passThreeResultLength++]=TOKEN_PAREN_CLOSE;
i=linkEndPos;
}
 else {
passThreeResult[passThreeResultLength++]=token;
}
}
 else {
passThreeResult[passThreeResultLength++]=token;
}
}
 else {
passThreeResult[passThreeResultLength++]=token;
}
ready=false;
break;
default :
ready=token < 0 || (!Character.isAlphabetic(token) && !Character.isDigit(token) && token != '/');
passThreeResult[passThreeResultLength++]=token;
break;
}
}
return Arrays.copyOf(passThreeResult,passThreeResultLength);
}","public static int[] tokenizeCleanAndLinkify(final char[] rawArr){
  final int[] passTwoResult=tokenizeAndClean(rawArr);
  final int passTwoResultLength=passTwoResult.length;
  final int[] passThreeResult=new int[rawArr.length * 3];
  int passThreeResultLength=0;
  boolean ready=true;
  for (int i=0; i < passTwoResultLength; i++) {
    final int token=passTwoResult[i];
switch (token) {
case TOKEN_BRACKET_SQUARE_OPEN:
case TOKEN_PAREN_OPEN:
      passThreeResult[passThreeResultLength++]=token;
    ready=false;
  break;
case TOKEN_BRACKET_SQUARE_CLOSE:
case TOKEN_PAREN_CLOSE:
case ' ':
passThreeResult[passThreeResultLength++]=token;
ready=true;
break;
case 'h':
case 'w':
if (ready) {
final int linkStartType=getLinkStartType(passTwoResult,i,passTwoResultLength);
if (linkStartType >= 0) {
int linkEndPos=i + linkPrefixes[linkStartType].length;
}
 else {
passThreeResult[passThreeResultLength++]=token;
}
}
 else {
passThreeResult[passThreeResultLength++]=token;
}
ready=false;
break;
case 'r':
case 'u':
case '/':
if (ready) {
final int linkStartType=getRedditLinkStartType(passTwoResult,i,passTwoResultLength);
if (linkStartType >= 0) {
final int linkStartPos=i;
final int linkPrefixEndPos=linkPrefixes_reddit[linkStartType].length + linkStartPos;
int linkEndPos=linkPrefixEndPos;
while (linkEndPos < passTwoResultLength) {
final int lToken=passTwoResult[linkEndPos];
final boolean isValidChar=(lToken >= 'a' && lToken <= 'z') || (lToken >= 'A' && lToken <= 'Z') || (lToken >= '0' && lToken <= '9')|| lToken == '_' || lToken == TOKEN_UNDERSCORE || lToken == TOKEN_UNDERSCORE_DOUBLE || lToken == '+' || lToken == '-';
if (isValidChar) {
linkEndPos++;
}
 else {
break;
}
}
if (linkEndPos - linkPrefixEndPos > 2) {
final int[] reverted=revert(passTwoResult,linkStartPos,linkEndPos);
passThreeResult[passThreeResultLength++]=TOKEN_BRACKET_SQUARE_OPEN;
System.arraycopy(reverted,0,passThreeResult,passThreeResultLength,reverted.length);
passThreeResultLength+=reverted.length;
passThreeResult[passThreeResultLength++]=TOKEN_BRACKET_SQUARE_CLOSE;
passThreeResult[passThreeResultLength++]=TOKEN_PAREN_OPEN;
System.arraycopy(reverted,0,passThreeResult,passThreeResultLength,reverted.length);
passThreeResultLength+=reverted.length;
passThreeResult[passThreeResultLength++]=TOKEN_PAREN_CLOSE;
i=linkEndPos - 1;
}
 else {
passThreeResult[passThreeResultLength++]=token;
}
}
 else {
passThreeResult[passThreeResultLength++]=token;
}
}
 else {
passThreeResult[passThreeResultLength++]=token;
}
ready=false;
break;
default :
ready=token < 0 || (!Character.isAlphabetic(token) && !Character.isDigit(token) && token != '/');
passThreeResult[passThreeResultLength++]=token;
break;
}
}
return Arrays.copyOf(passThreeResult,passThreeResultLength);
}",0.9730332899386276
15437,"public static int[] tokenizeAndClean(final char[] rawArr){
  final int[] passOneResult=tokenize(rawArr);
  final int passOneResultLength=passOneResult.length;
  final boolean[] toRevert=new boolean[passOneResultLength];
  final boolean[] toDelete=new boolean[passOneResultLength];
  int lastUnderscore=-1, lastUnderscoreDouble=-1;
  int lastAsterisk=-1, lastAsteriskDouble=-1;
  int lastTildeDouble=-1;
  int lastGrave=-1;
  int lastBracketSquareOpen=-1;
  for (int i=0; i < passOneResultLength; i++) {
    final int c=passOneResult[i];
switch (c) {
case TOKEN_UNDERSCORE:
      lastUnderscore=lastUnderscore < 0 ? i : -1;
    break;
case TOKEN_UNDERSCORE_DOUBLE:
  if (lastUnderscoreDouble < 0) {
    lastUnderscoreDouble=i;
  }
 else {
    if (lastUnderscoreDouble == i - 1) {
      toRevert[lastUnderscoreDouble]=true;
      toRevert[i]=true;
    }
    lastUnderscoreDouble=-1;
  }
break;
case TOKEN_ASTERISK:
lastAsterisk=lastAsterisk < 0 ? i : -1;
break;
case TOKEN_ASTERISK_DOUBLE:
if (lastAsteriskDouble < 0) {
lastAsteriskDouble=i;
}
 else {
if (lastAsteriskDouble == i - 1) {
toRevert[lastAsteriskDouble]=true;
toRevert[i]=true;
}
lastAsteriskDouble=-1;
}
break;
case TOKEN_TILDE_DOUBLE:
if (lastTildeDouble < 0) {
lastTildeDouble=i;
}
 else {
if (lastTildeDouble == i - 1) {
toRevert[lastTildeDouble]=true;
toRevert[i]=true;
}
lastTildeDouble=-1;
}
break;
case TOKEN_GRAVE:
if (lastGrave < 0) {
lastGrave=i;
}
 else {
if (lastGrave == i - 1) {
toRevert[lastGrave]=true;
toRevert[i]=true;
}
lastGrave=-1;
}
break;
case TOKEN_BRACKET_SQUARE_OPEN:
if (lastBracketSquareOpen < 0) {
lastBracketSquareOpen=i;
}
 else {
toRevert[lastBracketSquareOpen]=true;
lastBracketSquareOpen=i;
}
break;
case TOKEN_BRACKET_SQUARE_CLOSE:
if (lastBracketSquareOpen < 0) {
toRevert[i]=true;
}
 else {
final int lastBracketSquareClose=i;
final int parenOpenPos=indexOf(passOneResult,TOKEN_PAREN_OPEN,lastBracketSquareClose + 1,passOneResultLength);
boolean linkParseSuccess=false;
if (parenOpenPos >= 0) {
if (isSpaces(passOneResult,lastBracketSquareClose + 1,parenOpenPos)) {
final int parenClosePos=indexOf(passOneResult,TOKEN_PAREN_CLOSE,parenOpenPos + 1,passOneResultLength);
if (parenClosePos >= 0) {
linkParseSuccess=true;
for (int j=lastBracketSquareClose + 1; j < parenOpenPos; j++) {
toDelete[j]=true;
}
for (int j=parenOpenPos + 1; j < parenClosePos; j++) {
if (passOneResult[j] < 0) toRevert[j]=true;
}
i=parenClosePos;
}
}
}
if (!linkParseSuccess) {
toRevert[lastBracketSquareOpen]=true;
toRevert[lastBracketSquareClose]=true;
i=lastBracketSquareClose;
}
}
lastBracketSquareOpen=-1;
break;
case TOKEN_PAREN_OPEN:
case TOKEN_PAREN_CLOSE:
toRevert[i]=true;
break;
}
}
if (lastUnderscore >= 0) toRevert[lastUnderscore]=true;
if (lastUnderscoreDouble >= 0) toRevert[lastUnderscoreDouble]=true;
if (lastAsterisk >= 0) toRevert[lastAsterisk]=true;
if (lastAsteriskDouble >= 0) toRevert[lastAsteriskDouble]=true;
if (lastTildeDouble >= 0) toRevert[lastTildeDouble]=true;
if (lastGrave >= 0) toRevert[lastGrave]=true;
if (lastBracketSquareOpen >= 0) toRevert[lastBracketSquareOpen]=true;
final int[] passTwoResult=new int[rawArr.length];
int passTwoPos=0;
for (int i=0; i < passOneResultLength; i++) {
if (toDelete[i]) continue;
if (toRevert[i]) {
final char[] revertTo=reverseLookup[20 + passOneResult[i]];
for (final char rCh : revertTo) {
passTwoResult[passTwoPos++]=rCh;
}
}
 else {
passTwoResult[passTwoPos++]=passOneResult[i];
}
}
return Arrays.copyOf(passTwoResult,passTwoPos);
}","public static int[] tokenizeAndClean(final char[] rawArr){
  final int[] passOneResult=tokenize(rawArr);
  final int passOneResultLength=passOneResult.length;
  final boolean[] toRevert=new boolean[passOneResultLength];
  final boolean[] toDelete=new boolean[passOneResultLength];
  int lastUnderscore=-1, lastUnderscoreDouble=-1;
  int lastAsterisk=-1, lastAsteriskDouble=-1;
  int lastTildeDouble=-1;
  int lastBracketSquareOpen=-1;
  for (int i=0; i < passOneResultLength; i++) {
    final int c=passOneResult[i];
switch (c) {
case TOKEN_UNDERSCORE:
      lastUnderscore=lastUnderscore < 0 ? i : -1;
    break;
case TOKEN_UNDERSCORE_DOUBLE:
  if (lastUnderscoreDouble < 0) {
    lastUnderscoreDouble=i;
  }
 else {
    if (lastUnderscoreDouble == i - 1) {
      toRevert[lastUnderscoreDouble]=true;
      toRevert[i]=true;
    }
    lastUnderscoreDouble=-1;
  }
break;
case TOKEN_ASTERISK:
lastAsterisk=lastAsterisk < 0 ? i : -1;
break;
case TOKEN_ASTERISK_DOUBLE:
if (lastAsteriskDouble < 0) {
lastAsteriskDouble=i;
}
 else {
if (lastAsteriskDouble == i - 1) {
toRevert[lastAsteriskDouble]=true;
toRevert[i]=true;
}
lastAsteriskDouble=-1;
}
break;
case TOKEN_TILDE_DOUBLE:
if (lastTildeDouble < 0) {
lastTildeDouble=i;
}
 else {
if (lastTildeDouble == i - 1) {
toRevert[lastTildeDouble]=true;
toRevert[i]=true;
}
lastTildeDouble=-1;
}
break;
case TOKEN_GRAVE:
final int openingGrave=i;
final int closingGrave=indexOf(passOneResult,TOKEN_GRAVE,i + 1,passOneResultLength);
if (closingGrave < 0) {
toRevert[i]=true;
}
 else {
for (int j=openingGrave + 1; j < closingGrave; j++) {
if (passOneResult[j] < 0) toRevert[j]=true;
}
i=closingGrave;
}
break;
case TOKEN_BRACKET_SQUARE_OPEN:
if (lastBracketSquareOpen < 0) {
lastBracketSquareOpen=i;
}
 else {
toRevert[lastBracketSquareOpen]=true;
lastBracketSquareOpen=i;
}
break;
case TOKEN_BRACKET_SQUARE_CLOSE:
if (lastBracketSquareOpen < 0) {
toRevert[i]=true;
}
 else {
final int lastBracketSquareClose=i;
final int parenOpenPos=indexOf(passOneResult,TOKEN_PAREN_OPEN,lastBracketSquareClose + 1,passOneResultLength);
boolean linkParseSuccess=false;
if (parenOpenPos >= 0) {
if (isSpaces(passOneResult,lastBracketSquareClose + 1,parenOpenPos)) {
final int parenClosePos=indexOf(passOneResult,TOKEN_PAREN_CLOSE,parenOpenPos + 1,passOneResultLength);
if (parenClosePos >= 0) {
linkParseSuccess=true;
for (int j=lastBracketSquareClose + 1; j < parenOpenPos; j++) {
toDelete[j]=true;
}
for (int j=parenOpenPos + 1; j < parenClosePos; j++) {
if (passOneResult[j] < 0) toRevert[j]=true;
}
i=parenClosePos;
}
}
}
if (!linkParseSuccess) {
toRevert[lastBracketSquareOpen]=true;
toRevert[lastBracketSquareClose]=true;
i=lastBracketSquareClose;
}
}
lastBracketSquareOpen=-1;
break;
case TOKEN_PAREN_OPEN:
case TOKEN_PAREN_CLOSE:
toRevert[i]=true;
break;
}
}
if (lastUnderscore >= 0) toRevert[lastUnderscore]=true;
if (lastUnderscoreDouble >= 0) toRevert[lastUnderscoreDouble]=true;
if (lastAsterisk >= 0) toRevert[lastAsterisk]=true;
if (lastAsteriskDouble >= 0) toRevert[lastAsteriskDouble]=true;
if (lastTildeDouble >= 0) toRevert[lastTildeDouble]=true;
if (lastBracketSquareOpen >= 0) toRevert[lastBracketSquareOpen]=true;
final int[] passTwoResult=new int[rawArr.length];
int passTwoPos=0;
for (int i=0; i < passOneResultLength; i++) {
if (toDelete[i]) continue;
if (toRevert[i]) {
final char[] revertTo=reverseLookup[20 + passOneResult[i]];
for (final char rCh : revertTo) {
passTwoResult[passTwoPos++]=rCh;
}
}
 else {
passTwoResult[passTwoPos++]=passOneResult[i];
}
}
return Arrays.copyOf(passTwoResult,passTwoPos);
}",0.94074179337786
15438,"public synchronized void cancel(){
  cancelled=true;
  if (httpGet != null)   httpGet.abort();
  queue.exterminateDownload(this);
  notifyAllOnFailure(RequestFailureType.CANCELLED,null,null,""String_Node_Str"");
}","public synchronized void cancel(){
  cancelled=true;
  new Thread(){
    public void run(){
      if (httpGet != null)       httpGet.abort();
      queue.exterminateDownload(CacheDownload.this);
      notifyAllOnFailure(RequestFailureType.CANCELLED,null,null,""String_Node_Str"");
    }
  }
.start();
}",0.8258317025440313
15439,"@Override public URI getUri(){
  if (!subreddit.isSortable()) {
    if (subreddit.url.contains(""String_Node_Str""))     return Constants.Reddit.getUri(subreddit.url.replaceFirst(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
 else     return Constants.Reddit.getUri(subreddit.url + ""String_Node_Str"");
  }
switch (getSort()) {
case HOT:
case NEW:
case CONTROVERSIAL:
case RISING:
    return Constants.Reddit.getUri(subreddit.url + ""String_Node_Str"" + getSort().name().toLowerCase()+ ""String_Node_Str"");
case TOP_HOUR:
case TOP_DAY:
case TOP_WEEK:
case TOP_MONTH:
case TOP_YEAR:
case TOP_ALL:
  return Constants.Reddit.getUri(subreddit.url + ""String_Node_Str"" + getSort().name().split(""String_Node_Str"")[1].toLowerCase());
}
throw new RuntimeException(""String_Node_Str"" + getSort().name());
}","@Override public URI getUri(){
  if (!subreddit.isSortable()) {
    if (subreddit.url.contains(""String_Node_Str""))     return Constants.Reddit.getUri(subreddit.url.replaceFirst(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
 else     return Constants.Reddit.getUri(subreddit.url + ""String_Node_Str"");
  }
switch (getSort()) {
case HOT:
case NEW:
case CONTROVERSIAL:
case RISING:
    return Constants.Reddit.getUri(subreddit.url + getSort().name().toLowerCase() + ""String_Node_Str"");
case TOP_HOUR:
case TOP_DAY:
case TOP_WEEK:
case TOP_MONTH:
case TOP_YEAR:
case TOP_ALL:
  return Constants.Reddit.getUri(subreddit.url + ""String_Node_Str"" + getSort().name().split(""String_Node_Str"")[1].toLowerCase());
}
throw new RuntimeException(""String_Node_Str"" + getSort().name());
}",0.9871559633027523
15440,"public VerticalToolbar generateToolbar(final Context context,final Fragment fragmentParent,final SideToolbarOverlay overlay){
  final VerticalToolbar toolbar=new VerticalToolbar(context);
  final EnumSet<Action> itemsPref=PrefsUtility.pref_menus_post_toolbar_items(context,PreferenceManager.getDefaultSharedPreferences(context));
  final Action[] possibleItems={Action.ACTION_MENU,fragmentParent instanceof CommentListingFragment ? Action.LINK_SWITCH : Action.COMMENTS_SWITCH,Action.UPVOTE,Action.DOWNVOTE,Action.SAVE,Action.HIDE,Action.REPLY,Action.EXTERNAL,Action.SAVE_IMAGE,Action.SHARE,Action.COPY,Action.USER_PROFILE,Action.PROPERTIES};
  final EnumMap<Action,Integer> iconsDark=new EnumMap<Action,Integer>(Action.class);
  iconsDark.put(Action.ACTION_MENU,R.drawable.ic_action_overflow);
  iconsDark.put(Action.COMMENTS_SWITCH,R.drawable.ic_action_comments_dark);
  iconsDark.put(Action.LINK_SWITCH,imageUrl != null ? R.drawable.ic_action_image_dark : R.drawable.ic_action_page_dark);
  iconsDark.put(Action.UPVOTE,R.drawable.ic_action_thumb_up_dark);
  iconsDark.put(Action.DOWNVOTE,R.drawable.ic_action_thumb_down_dark);
  iconsDark.put(Action.SAVE,R.drawable.ic_action_star_filled_dark);
  iconsDark.put(Action.HIDE,R.drawable.ic_action_cross_dark);
  iconsDark.put(Action.REPLY,R.drawable.ic_action_reply_dark);
  iconsDark.put(Action.EXTERNAL,R.drawable.ic_action_globe_dark);
  iconsDark.put(Action.SAVE_IMAGE,R.drawable.ic_action_save_dark);
  iconsDark.put(Action.SHARE,R.drawable.ic_action_share_dark);
  iconsDark.put(Action.COPY,R.drawable.ic_action_copy_dark);
  iconsDark.put(Action.USER_PROFILE,R.drawable.ic_action_person_dark);
  iconsDark.put(Action.PROPERTIES,R.drawable.ic_action_info_dark);
  final EnumMap<Action,Integer> iconsLight=new EnumMap<Action,Integer>(Action.class);
  iconsLight.put(Action.ACTION_MENU,R.drawable.ic_action_overflow);
  iconsLight.put(Action.COMMENTS_SWITCH,R.drawable.ic_action_comments_light);
  iconsDark.put(Action.LINK_SWITCH,imageUrl != null ? R.drawable.ic_action_image_light : R.drawable.ic_action_page_light);
  iconsLight.put(Action.UPVOTE,R.drawable.ic_action_thumb_up_light);
  iconsLight.put(Action.DOWNVOTE,R.drawable.ic_action_thumb_down_light);
  iconsLight.put(Action.SAVE,R.drawable.ic_action_star_filled_light);
  iconsLight.put(Action.HIDE,R.drawable.ic_action_cross_light);
  iconsLight.put(Action.REPLY,R.drawable.ic_action_reply_light);
  iconsLight.put(Action.EXTERNAL,R.drawable.ic_action_globe_light);
  iconsLight.put(Action.SAVE_IMAGE,R.drawable.ic_action_save_light);
  iconsLight.put(Action.SHARE,R.drawable.ic_action_share_light);
  iconsLight.put(Action.COPY,R.drawable.ic_action_copy_light);
  iconsLight.put(Action.USER_PROFILE,R.drawable.ic_action_person_light);
  iconsLight.put(Action.PROPERTIES,R.drawable.ic_action_info_light);
  for (  final Action action : possibleItems) {
    if (action == Action.SAVE_IMAGE && imageUrl == null)     continue;
    if (itemsPref.contains(action)) {
      final FlatImageButton ib=new FlatImageButton(context);
      final int buttonPadding=General.dpToPixels(context,10);
      ib.setPadding(buttonPadding,buttonPadding,buttonPadding,buttonPadding);
      if (action == Action.UPVOTE && isUpvoted() || action == Action.DOWNVOTE && isDownvoted() || action == Action.SAVE && isSaved() || action == Action.HIDE && isHidden()) {
        ib.setBackgroundColor(Color.WHITE);
        ib.setImageResource(iconsLight.get(action));
      }
 else {
        ib.setImageResource(iconsDark.get(action));
      }
      ib.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View v){
          final Action actionToTake;
switch (action) {
case UPVOTE:
            actionToTake=isUpvoted() ? Action.UNVOTE : Action.UPVOTE;
          break;
case DOWNVOTE:
        actionToTake=isDownvoted() ? Action.UNVOTE : Action.DOWNVOTE;
      break;
case SAVE:
    actionToTake=isSaved() ? Action.UNSAVE : Action.SAVE;
  break;
case HIDE:
actionToTake=isHidden() ? Action.UNHIDE : Action.HIDE;
break;
default :
actionToTake=action;
break;
}
onActionMenuItemSelected(RedditPreparedPost.this,fragmentParent,actionToTake);
overlay.hide();
}
}
);
toolbar.addItem(ib);
}
}
return toolbar;
}","public VerticalToolbar generateToolbar(final Context context,final Fragment fragmentParent,final SideToolbarOverlay overlay){
  final VerticalToolbar toolbar=new VerticalToolbar(context);
  final EnumSet<Action> itemsPref=PrefsUtility.pref_menus_post_toolbar_items(context,PreferenceManager.getDefaultSharedPreferences(context));
  final Action[] possibleItems={Action.ACTION_MENU,fragmentParent instanceof CommentListingFragment ? Action.LINK_SWITCH : Action.COMMENTS_SWITCH,Action.UPVOTE,Action.DOWNVOTE,Action.SAVE,Action.HIDE,Action.REPLY,Action.EXTERNAL,Action.SAVE_IMAGE,Action.SHARE,Action.COPY,Action.USER_PROFILE,Action.PROPERTIES};
  final EnumMap<Action,Integer> iconsDark=new EnumMap<Action,Integer>(Action.class);
  iconsDark.put(Action.ACTION_MENU,R.drawable.ic_action_overflow);
  iconsDark.put(Action.COMMENTS_SWITCH,R.drawable.ic_action_comments_dark);
  iconsDark.put(Action.LINK_SWITCH,imageUrl != null ? R.drawable.ic_action_image_dark : R.drawable.ic_action_page_dark);
  iconsDark.put(Action.UPVOTE,R.drawable.ic_action_thumb_up_dark);
  iconsDark.put(Action.DOWNVOTE,R.drawable.ic_action_thumb_down_dark);
  iconsDark.put(Action.SAVE,R.drawable.ic_action_star_filled_dark);
  iconsDark.put(Action.HIDE,R.drawable.ic_action_cross_dark);
  iconsDark.put(Action.REPLY,R.drawable.ic_action_reply_dark);
  iconsDark.put(Action.EXTERNAL,R.drawable.ic_action_globe_dark);
  iconsDark.put(Action.SAVE_IMAGE,R.drawable.ic_action_save_dark);
  iconsDark.put(Action.SHARE,R.drawable.ic_action_share_dark);
  iconsDark.put(Action.COPY,R.drawable.ic_action_copy_dark);
  iconsDark.put(Action.USER_PROFILE,R.drawable.ic_action_person_dark);
  iconsDark.put(Action.PROPERTIES,R.drawable.ic_action_info_dark);
  final EnumMap<Action,Integer> iconsLight=new EnumMap<Action,Integer>(Action.class);
  iconsLight.put(Action.ACTION_MENU,R.drawable.ic_action_overflow);
  iconsLight.put(Action.COMMENTS_SWITCH,R.drawable.ic_action_comments_light);
  iconsLight.put(Action.LINK_SWITCH,imageUrl != null ? R.drawable.ic_action_image_light : R.drawable.ic_action_page_light);
  iconsLight.put(Action.UPVOTE,R.drawable.ic_action_thumb_up_light);
  iconsLight.put(Action.DOWNVOTE,R.drawable.ic_action_thumb_down_light);
  iconsLight.put(Action.SAVE,R.drawable.ic_action_star_filled_light);
  iconsLight.put(Action.HIDE,R.drawable.ic_action_cross_light);
  iconsLight.put(Action.REPLY,R.drawable.ic_action_reply_light);
  iconsLight.put(Action.EXTERNAL,R.drawable.ic_action_globe_light);
  iconsLight.put(Action.SAVE_IMAGE,R.drawable.ic_action_save_light);
  iconsLight.put(Action.SHARE,R.drawable.ic_action_share_light);
  iconsLight.put(Action.COPY,R.drawable.ic_action_copy_light);
  iconsLight.put(Action.USER_PROFILE,R.drawable.ic_action_person_light);
  iconsLight.put(Action.PROPERTIES,R.drawable.ic_action_info_light);
  for (  final Action action : possibleItems) {
    if (action == Action.SAVE_IMAGE && imageUrl == null)     continue;
    if (itemsPref.contains(action)) {
      final FlatImageButton ib=new FlatImageButton(context);
      final int buttonPadding=General.dpToPixels(context,10);
      ib.setPadding(buttonPadding,buttonPadding,buttonPadding,buttonPadding);
      if (action == Action.UPVOTE && isUpvoted() || action == Action.DOWNVOTE && isDownvoted() || action == Action.SAVE && isSaved() || action == Action.HIDE && isHidden()) {
        ib.setBackgroundColor(Color.WHITE);
        ib.setImageResource(iconsLight.get(action));
      }
 else {
        ib.setImageResource(iconsDark.get(action));
      }
      ib.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View v){
          final Action actionToTake;
switch (action) {
case UPVOTE:
            actionToTake=isUpvoted() ? Action.UNVOTE : Action.UPVOTE;
          break;
case DOWNVOTE:
        actionToTake=isDownvoted() ? Action.UNVOTE : Action.DOWNVOTE;
      break;
case SAVE:
    actionToTake=isSaved() ? Action.UNSAVE : Action.SAVE;
  break;
case HIDE:
actionToTake=isHidden() ? Action.UNHIDE : Action.HIDE;
break;
default :
actionToTake=action;
break;
}
onActionMenuItemSelected(RedditPreparedPost.this,fragmentParent,actionToTake);
overlay.hide();
}
}
);
toolbar.addItem(ib);
}
}
return toolbar;
}",0.998932510971415
15441,"@Override public void handleMessage(final Message msg){
  final Context context=getSupportActivity();
switch (msg.what) {
case NOTIF_DOWNLOAD_NECESSARY:
    loadingView=new LoadingView(context,R.string.download_waiting,true,true);
  listFooterNotifications.addView(loadingView);
break;
case NOTIF_DOWNLOAD_START:
loadingView.setIndeterminate(R.string.download_connecting);
break;
case NOTIF_STARTING:
if (loadingView != null) loadingView.setIndeterminate(R.string.download_downloadstarting);
break;
case NOTIF_AGE:
final TextView cacheNotif=new TextView(context);
cacheNotif.setText(context.getString(R.string.listing_cached) + ""String_Node_Str"" + RRTime.formatDateTime((Long)msg.obj));
final int paddingPx=General.dpToPixels(context,6);
cacheNotif.setPadding(paddingPx,paddingPx,paddingPx,paddingPx);
cacheNotif.setTextSize(13f);
listHeaderNotifications.addView(cacheNotif);
listHeaderNotifications.requestLayout();
adapter.notifyDataSetChanged();
break;
case NOTIF_ERROR:
{
if (loadingView != null) loadingView.setDone(R.string.download_failed);
final RRError error=(RRError)msg.obj;
fragmentHeader.addView(new ErrorView(getSupportActivity(),error));
break;
}
case NOTIF_PROGRESS:
if (loadingView != null) loadingView.setProgress(R.string.download_loading,(Float)msg.obj);
break;
case NOTIF_DOWNLOAD_DONE:
if (loadingView != null) loadingView.setDoneNoAnim(R.string.download_done);
break;
case NOTIF_ERROR_FOOTER:
{
if (loadingView != null) loadingView.setDone(R.string.download_failed);
final RRError error=(RRError)msg.obj;
listFooterNotifications.addView(new ErrorView(getSupportActivity(),error));
adapter.notifyDataSetChanged();
break;
}
}
}","@Override public void handleMessage(final Message msg){
  final Context context=getSupportActivity();
switch (msg.what) {
case NOTIF_DOWNLOAD_NECESSARY:
    loadingView=new LoadingView(context,R.string.download_waiting,true,true);
  listFooterNotifications.addView(loadingView);
adapter.notifyDataSetChanged();
break;
case NOTIF_DOWNLOAD_START:
loadingView.setIndeterminate(R.string.download_connecting);
break;
case NOTIF_STARTING:
if (loadingView != null) loadingView.setIndeterminate(R.string.download_downloadstarting);
break;
case NOTIF_AGE:
final TextView cacheNotif=new TextView(context);
cacheNotif.setText(context.getString(R.string.listing_cached) + ""String_Node_Str"" + RRTime.formatDateTime((Long)msg.obj));
final int paddingPx=General.dpToPixels(context,6);
cacheNotif.setPadding(paddingPx,paddingPx,paddingPx,paddingPx);
cacheNotif.setTextSize(13f);
listHeaderNotifications.addView(cacheNotif);
listHeaderNotifications.requestLayout();
adapter.notifyDataSetChanged();
break;
case NOTIF_ERROR:
{
if (loadingView != null) loadingView.setDone(R.string.download_failed);
final RRError error=(RRError)msg.obj;
fragmentHeader.addView(new ErrorView(getSupportActivity(),error));
break;
}
case NOTIF_PROGRESS:
if (loadingView != null) loadingView.setProgress(R.string.download_loading,(Float)msg.obj);
break;
case NOTIF_DOWNLOAD_DONE:
if (loadingView != null) loadingView.setDoneNoAnim(R.string.download_done);
break;
case NOTIF_ERROR_FOOTER:
{
if (loadingView != null) loadingView.setDone(R.string.download_failed);
final RRError error=(RRError)msg.obj;
listFooterNotifications.addView(new ErrorView(getSupportActivity(),error));
adapter.notifyDataSetChanged();
break;
}
}
}",0.9903846153846154
15442,"@Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  final Context context=container.getContext();
  final RedditAccount user=RedditAccountManager.getInstance(context).getDefaultAccount();
  final LinearLayout outer=new LinearLayout(context);
  outer.setOrientation(LinearLayout.VERTICAL);
  notifications=new LinearLayout(context);
  notifications.setOrientation(LinearLayout.VERTICAL);
  outer.addView(notifications);
  loadingView=new LoadingView(context,R.string.download_waiting,true,true);
  final ListView lv=new ListView(context);
  lv.setDivider(null);
  final int paddingPx=General.dpToPixels(context,8);
  lv.setPadding(paddingPx,0,paddingPx,0);
  adapter=new MainMenuAdapter(context,user,this);
  lv.setAdapter(adapter);
  lv.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    final AdapterView<?> adapterView,    final View view,    final int position,    final long id){
      adapter.clickOn(position);
    }
  }
);
  final AtomicReference<APIResponseHandler.SubredditResponseHandler> accessibleSubredditResponseHandler=new AtomicReference<APIResponseHandler.SubredditResponseHandler>(null);
  final APIResponseHandler.SubredditResponseHandler responseHandler=new APIResponseHandler.SubredditResponseHandler(context){
    @Override protected void onDownloadNecessary(){
      new Handler(Looper.getMainLooper()).post(new Runnable(){
        public void run(){
          notifications.addView(loadingView);
        }
      }
);
    }
    @Override protected void onDownloadStarted(){
      loadingView.setIndeterminate(""String_Node_Str"");
    }
    @Override protected void onSuccess(    final List<RedditSubreddit> result,    final long timestamp){
      if (result.size() == 0) {
        new Handler(Looper.getMainLooper()).post(new Runnable(){
          public void run(){
            notifications.removeView(loadingView);
            RedditAPI.getUserSubreddits(CacheManager.getInstance(context),accessibleSubredditResponseHandler.get(),RedditAccountManager.getAnon(),force ? CacheRequest.DownloadType.FORCE : CacheRequest.DownloadType.IF_NECESSARY,force,context);
          }
        }
);
      }
 else {
        adapter.setSubreddits(result);
        if (loadingView != null)         loadingView.setDone(R.string.download_done);
      }
    }
    @Override protected void onCallbackException(    final Throwable t){
      BugReportActivity.handleGlobalError(context,t);
    }
    @Override protected void onFailure(    final RequestFailureType type,    final Throwable t,    final StatusLine status,    final String readableMessage){
      if (loadingView != null)       loadingView.setDone(R.string.download_failed);
      final RRError error=General.getGeneralErrorForFailure(context,type,t,status);
      new Handler(Looper.getMainLooper()).post(new Runnable(){
        public void run(){
          notifications.addView(new ErrorView(getSupportActivity(),error));
        }
      }
);
    }
    @Override protected void onFailure(    final APIFailureType type){
      if (loadingView != null)       loadingView.setDone(R.string.download_failed);
      final RRError error=General.getGeneralErrorForFailure(context,type);
      new Handler(Looper.getMainLooper()).post(new Runnable(){
        public void run(){
          notifications.addView(new ErrorView(getSupportActivity(),error));
        }
      }
);
    }
  }
;
  accessibleSubredditResponseHandler.set(responseHandler);
  RedditAPI.getUserSubreddits(CacheManager.getInstance(context),responseHandler,user,force ? CacheRequest.DownloadType.FORCE : CacheRequest.DownloadType.IF_NECESSARY,force,context);
  outer.addView(lv);
  return outer;
}","@Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  final Context context;
  if (container != null) {
    context=container.getContext();
  }
 else {
    context=inflater.getContext();
  }
  final RedditAccount user=RedditAccountManager.getInstance(context).getDefaultAccount();
  final LinearLayout outer=new LinearLayout(context);
  outer.setOrientation(LinearLayout.VERTICAL);
  notifications=new LinearLayout(context);
  notifications.setOrientation(LinearLayout.VERTICAL);
  outer.addView(notifications);
  loadingView=new LoadingView(context,R.string.download_waiting,true,true);
  final ListView lv=new ListView(context);
  lv.setDivider(null);
  final int paddingPx=General.dpToPixels(context,8);
  lv.setPadding(paddingPx,0,paddingPx,0);
  adapter=new MainMenuAdapter(context,user,this);
  lv.setAdapter(adapter);
  lv.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    public void onItemClick(    final AdapterView<?> adapterView,    final View view,    final int position,    final long id){
      adapter.clickOn(position);
    }
  }
);
  final AtomicReference<APIResponseHandler.SubredditResponseHandler> accessibleSubredditResponseHandler=new AtomicReference<APIResponseHandler.SubredditResponseHandler>(null);
  final APIResponseHandler.SubredditResponseHandler responseHandler=new APIResponseHandler.SubredditResponseHandler(context){
    @Override protected void onDownloadNecessary(){
      new Handler(Looper.getMainLooper()).post(new Runnable(){
        public void run(){
          notifications.addView(loadingView);
        }
      }
);
    }
    @Override protected void onDownloadStarted(){
      loadingView.setIndeterminate(""String_Node_Str"");
    }
    @Override protected void onSuccess(    final List<RedditSubreddit> result,    final long timestamp){
      if (result.size() == 0) {
        new Handler(Looper.getMainLooper()).post(new Runnable(){
          public void run(){
            notifications.removeView(loadingView);
            RedditAPI.getUserSubreddits(CacheManager.getInstance(context),accessibleSubredditResponseHandler.get(),RedditAccountManager.getAnon(),force ? CacheRequest.DownloadType.FORCE : CacheRequest.DownloadType.IF_NECESSARY,force,context);
          }
        }
);
      }
 else {
        adapter.setSubreddits(result);
        if (loadingView != null)         loadingView.setDone(R.string.download_done);
      }
    }
    @Override protected void onCallbackException(    final Throwable t){
      BugReportActivity.handleGlobalError(context,t);
    }
    @Override protected void onFailure(    final RequestFailureType type,    final Throwable t,    final StatusLine status,    final String readableMessage){
      if (loadingView != null)       loadingView.setDone(R.string.download_failed);
      final RRError error=General.getGeneralErrorForFailure(context,type,t,status);
      new Handler(Looper.getMainLooper()).post(new Runnable(){
        public void run(){
          notifications.addView(new ErrorView(getSupportActivity(),error));
        }
      }
);
    }
    @Override protected void onFailure(    final APIFailureType type){
      if (loadingView != null)       loadingView.setDone(R.string.download_failed);
      final RRError error=General.getGeneralErrorForFailure(context,type);
      new Handler(Looper.getMainLooper()).post(new Runnable(){
        public void run(){
          notifications.addView(new ErrorView(getSupportActivity(),error));
        }
      }
);
    }
  }
;
  accessibleSubredditResponseHandler.set(responseHandler);
  RedditAPI.getUserSubreddits(CacheManager.getInstance(context),responseHandler,user,force ? CacheRequest.DownloadType.FORCE : CacheRequest.DownloadType.IF_NECESSARY,force,context);
  outer.addView(lv);
  return outer;
}",0.9879836260398784
15443,"public void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final Intent intent=getIntent();
  final String url=intent.getStringExtra(""String_Node_Str"");
  if (url == null) {
    BugReportActivity.handleGlobalError(this,""String_Node_Str"");
  }
  webView=WebViewFragment.newInstance(url);
  setContentView(View.inflate(this,R.layout.main_single,null));
  getSupportFragmentManager().beginTransaction().add(R.id.main_single_frame,webView).commit();
}","public void onCreate(final Bundle savedInstanceState){
  PrefsUtility.applyTheme(this);
  super.onCreate(savedInstanceState);
  final Intent intent=getIntent();
  final String url=intent.getStringExtra(""String_Node_Str"");
  if (url == null) {
    BugReportActivity.handleGlobalError(this,""String_Node_Str"");
  }
  webView=WebViewFragment.newInstance(url);
  setContentView(View.inflate(this,R.layout.main_single,null));
  getSupportFragmentManager().beginTransaction().add(R.id.main_single_frame,webView).commit();
}",0.9669669669669668
15444,"@Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  final FrameLayout outer=(FrameLayout)inflater.inflate(R.layout.web_view_fragment);
  webView=(WebViewFixed)outer.findViewById(R.id.web_view_fragment_webviewfixed);
  final FrameLayout loadingViewFrame=(FrameLayout)outer.findViewById(R.id.web_view_fragment_loadingview_frame);
  loadingView=new LoadingView(inflater.getContext());
  loadingViewFrame.addView(loadingView);
  final WebSettings settings=webView.getSettings();
  settings.setBuiltInZoomControls(true);
  settings.setJavaScriptEnabled(true);
  settings.setJavaScriptCanOpenWindowsAutomatically(false);
  settings.setUseWideViewPort(true);
  settings.setLoadWithOverviewMode(true);
  try {
    settings.setDisplayZoomControls(false);
  }
 catch (  NoSuchMethodError e) {
  }
  webView.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    final WebView view,    final String url){
      webView.loadUrl(url);
      return true;
    }
  }
);
  webView.setWebChromeClient(new WebChromeClient(){
    @Override public void onProgressChanged(    WebView view,    int newProgress){
      super.onProgressChanged(view,newProgress);
      loadingView.setProgress(R.string.download_downloading,(float)newProgress / 100.0f);
      loadingView.setVisibility(newProgress == 100 ? View.GONE : View.VISIBLE);
    }
  }
);
  webView.loadUrl(url);
  return outer;
}","@Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  final FrameLayout outer=(FrameLayout)inflater.inflate(R.layout.web_view_fragment);
  webView=(WebViewFixed)outer.findViewById(R.id.web_view_fragment_webviewfixed);
  final FrameLayout loadingViewFrame=(FrameLayout)outer.findViewById(R.id.web_view_fragment_loadingview_frame);
  loadingView=new LoadingView(inflater.getContext());
  loadingViewFrame.addView(loadingView);
  final WebSettings settings=webView.getSettings();
  settings.setBuiltInZoomControls(true);
  settings.setJavaScriptEnabled(true);
  settings.setJavaScriptCanOpenWindowsAutomatically(false);
  settings.setUseWideViewPort(true);
  settings.setLoadWithOverviewMode(true);
  try {
    settings.setDisplayZoomControls(false);
  }
 catch (  NoSuchMethodError e) {
  }
  webView.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    final WebView view,    final String url){
      webView.loadUrl(url);
      return true;
    }
    @Override public void onPageStarted(    WebView view,    String url,    Bitmap favicon){
      super.onPageStarted(view,url,favicon);
      getSupportActivity().setTitle(url);
    }
  }
);
  webView.setWebChromeClient(new WebChromeClient(){
    @Override public void onProgressChanged(    WebView view,    int newProgress){
      super.onProgressChanged(view,newProgress);
      loadingView.setProgress(R.string.download_downloading,(float)newProgress / 100.0f);
      loadingView.setVisibility(newProgress == 100 ? View.GONE : View.VISIBLE);
    }
  }
);
  webView.loadUrl(url);
  return outer;
}",0.9408020369191598
15445,"public CommentListingFragment get(final boolean force){
  return CommentListingFragment.newInstance(""String_Node_Str"" + postId,getUri(),session,force ? CacheRequest.DownloadType.FORCE : CacheRequest.DownloadType.IF_NECESSARY);
}","public CommentListingFragment get(final boolean force){
  if (force)   session=null;
  return CommentListingFragment.newInstance(""String_Node_Str"" + postId,getUri(),session,force ? CacheRequest.DownloadType.FORCE : CacheRequest.DownloadType.IF_NECESSARY);
}",0.9402061855670104
15446,"public final PostListingFragment get(final boolean force){
  return PostListingFragment.newInstance(getSubreddit(),getUri(),session,force ? CacheRequest.DownloadType.FORCE : CacheRequest.DownloadType.IF_NECESSARY);
}","public final PostListingFragment get(final boolean force){
  if (force)   session=null;
  return PostListingFragment.newInstance(getSubreddit(),getUri(),session,force ? CacheRequest.DownloadType.FORCE : CacheRequest.DownloadType.IF_NECESSARY);
}",0.9370932754880694
15447,"public static void onLinkClicked(Activity activity,String url,boolean forceNoImage){
  if (!forceNoImage) {
    final String imageUrl=getImageUrl(url);
    if (imageUrl != null) {
      final Intent intent=new Intent(activity,ImageViewActivity.class);
      intent.setData(Uri.parse(imageUrl));
      activity.startActivity(intent);
      return;
    }
  }
  final Matcher redditCommentsMatcher=redditCommentsPattern.matcher(url);
  if (redditCommentsMatcher.find()) {
    final Intent intent=new Intent(activity,CommentListingActivity.class);
    intent.putExtra(""String_Node_Str"",redditCommentsMatcher.group(2));
    activity.startActivity(intent);
    return;
  }
  final Matcher redditUserMatcher=redditUserPattern.matcher(url);
  if (redditUserMatcher.find()) {
    UserProfileDialog.newInstance(redditUserMatcher.group(2)).show(activity);
    return;
  }
  final Matcher redditSubredditMatcher=subredditPattern.matcher(url);
  if (redditSubredditMatcher.find()) {
    final String subredditUrl=redditSubredditMatcher.group(1);
    final Intent intent=new Intent(activity,PostListingActivity.class);
    intent.putExtra(""String_Node_Str"",new RedditSubreddit(subredditUrl,subredditUrl,true));
    activity.startActivity(intent);
    return;
  }
  final Matcher shortSubredditMatcher=shortSubredditPattern.matcher(url);
  if (shortSubredditMatcher.find()) {
    final String subredditUrl=""String_Node_Str"" + shortSubredditMatcher.group(1);
    final Intent intent=new Intent(activity,PostListingActivity.class);
    intent.putExtra(""String_Node_Str"",new RedditSubreddit(subredditUrl,subredditUrl,true));
    activity.startActivity(intent);
    return;
  }
  if (youtubePattern.matcher(url).matches()) {
    final Intent intent=new Intent(Intent.ACTION_VIEW);
    intent.setData(Uri.parse(url));
    activity.startActivity(intent);
  }
 else {
    final Intent intent=new Intent(activity,WebViewActivity.class);
    intent.putExtra(""String_Node_Str"",url);
    activity.startActivity(intent);
  }
}","public static void onLinkClicked(Activity activity,String url,boolean forceNoImage){
  if (!forceNoImage) {
    final String imageUrl=getImageUrl(url);
    if (imageUrl != null) {
      final Intent intent=new Intent(activity,ImageViewActivity.class);
      intent.setData(Uri.parse(imageUrl));
      activity.startActivity(intent);
      return;
    }
  }
  final Matcher redditCommentsMatcher=redditCommentsPattern.matcher(url);
  if (redditCommentsMatcher.find()) {
    final Intent intent=new Intent(activity,CommentListingActivity.class);
    intent.putExtra(""String_Node_Str"",redditCommentsMatcher.group(2));
    activity.startActivity(intent);
    return;
  }
  final Matcher redditUserMatcher=redditUserPattern.matcher(url);
  if (redditUserMatcher.find()) {
    UserProfileDialog.newInstance(redditUserMatcher.group(2)).show(activity);
    return;
  }
  final Matcher redditSubredditMatcher=subredditPattern.matcher(url);
  if (redditSubredditMatcher.find()) {
    final String subredditUrl=redditSubredditMatcher.group(1);
    final Intent intent=new Intent(activity,PostListingActivity.class);
    intent.putExtra(""String_Node_Str"",new RedditSubreddit(subredditUrl,subredditUrl,true));
    activity.startActivity(intent);
    return;
  }
  final Matcher shortSubredditMatcher=shortSubredditPattern.matcher(url);
  if (shortSubredditMatcher.find()) {
    final String subredditUrl=""String_Node_Str"" + shortSubredditMatcher.group(1);
    final Intent intent=new Intent(activity,PostListingActivity.class);
    intent.putExtra(""String_Node_Str"",new RedditSubreddit(subredditUrl,subredditUrl,true));
    activity.startActivity(intent);
    return;
  }
  if (youtubePattern.matcher(url).matches() || vimeoPattern.matcher(url).matches()) {
    final Intent intent=new Intent(Intent.ACTION_VIEW);
    intent.setData(Uri.parse(url));
    activity.startActivity(intent);
  }
 else {
    final Intent intent=new Intent(activity,WebViewActivity.class);
    intent.putExtra(""String_Node_Str"",url);
    activity.startActivity(intent);
  }
}",0.990339360911568
15448,"@Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  webView=new WebViewFixed(container.getContext());
  final WebSettings settings=webView.getSettings();
  settings.setBuiltInZoomControls(true);
  settings.setJavaScriptEnabled(true);
  settings.setJavaScriptCanOpenWindowsAutomatically(false);
  settings.setUseWideViewPort(true);
  settings.setLoadWithOverviewMode(true);
  try {
    settings.setDisplayZoomControls(false);
  }
 catch (  NoSuchMethodError e) {
  }
  webView.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    final WebView view,    final String url){
      webView.loadUrl(url);
      return true;
    }
  }
);
  webView.loadUrl(url);
  return webView;
}","@Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  webView=new WebViewFixed(container.getContext());
  final WebSettings settings=webView.getSettings();
  settings.setBuiltInZoomControls(true);
  settings.setJavaScriptEnabled(true);
  settings.setJavaScriptCanOpenWindowsAutomatically(false);
  settings.setUseWideViewPort(true);
  settings.setLoadWithOverviewMode(true);
  try {
    settings.setDisplayZoomControls(false);
  }
 catch (  NoSuchMethodError e) {
  }
  webView.setWebViewClient(new WebViewClient(){
    @Override public boolean shouldOverrideUrlLoading(    final WebView view,    final String url){
      webView.loadUrl(url);
      return true;
    }
  }
);
  webView.setWebChromeClient(new WebChromeClient());
  webView.loadUrl(url);
  return webView;
}",0.967623701893708
15449,"private synchronized void notifyAllOnJsonParseStarted(final JsonValue value,final long timestamp,final UUID session){
  new Thread(){
    @Override public void run(){
      android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
      initiator.notifyJsonParseStarted(value,timestamp,session,false);
    }
  }
.start();
  for (  final CacheRequest req : lateJoiners) {
    new Thread(){
      @Override public void run(){
        android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
        req.notifyJsonParseStarted(value,timestamp,session,false);
      }
    }
.start();
  }
}","private synchronized void notifyAllOnJsonParseStarted(final JsonValue value,final long timestamp,final UUID session){
  initiator.notifyJsonParseStarted(value,timestamp,session,false);
  for (  final CacheRequest req : lateJoiners) {
    req.notifyJsonParseStarted(value,timestamp,session,false);
  }
}",0.4012738853503185
15450,"public final void notifyJsonParseStarted(final JsonValue result,final long timestamp,final UUID session,final boolean fromCache){
  try {
    onJsonParseStarted(result,timestamp,session,fromCache);
  }
 catch (  Throwable t1) {
    try {
      onCallbackException(t1);
    }
 catch (    Throwable t2) {
      BugReportActivity.addGlobalError(new RRError(null,null,t1));
      BugReportActivity.handleGlobalError(context,t2);
    }
  }
}","public final void notifyJsonParseStarted(final JsonValue result,final long timestamp,final UUID session,final boolean fromCache){
  new Thread(){
    @Override public void run(){
      android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
      try {
        onJsonParseStarted(result,timestamp,session,fromCache);
      }
 catch (      Throwable t1) {
        try {
          onCallbackException(t1);
        }
 catch (        Throwable t2) {
          BugReportActivity.addGlobalError(new RRError(null,null,t1));
          BugReportActivity.handleGlobalError(context,t2);
        }
      }
    }
  }
.start();
}",0.8037037037037037
15451,"public PostListingAdapter(final ListView listViewParent,final PostListingFragment fragmentParent){
  this.listViewParent=listViewParent;
  this.fragmentParent=fragmentParent;
  postAddedHandler=new Handler(Looper.getMainLooper()){
    @Override public void handleMessage(    final Message msg){
      final RedditPreparedPost post=(RedditPreparedPost)msg.obj;
      if (!postIds.add(post.idAlone))       return;
      posts.add(post);
      if (listViewParent.getLastVisiblePosition() + 1 >= postsToReport.size()) {
        updatePosts();
      }
    }
  }
;
}","public PostListingAdapter(final ListView listViewParent,final LinearLayout outerLayout,final PostListingFragment fragmentParent){
  this.listViewParent=listViewParent;
  this.outerLayout=outerLayout;
  this.fragmentParent=fragmentParent;
  postAddedHandler=new Handler(Looper.getMainLooper()){
    @Override public void handleMessage(    final Message msg){
      final RedditPreparedPost post=(RedditPreparedPost)msg.obj;
      if (!postIds.add(post.idAlone))       return;
      posts.add(post);
      if (listViewParent.getLastVisiblePosition() + 1 >= postsToReport.size()) {
        updatePosts();
      }
    }
  }
;
}",0.9467455621301776
15452,"private void updatePosts(){
  postsToReport.clear();
  postsToReport.addAll(posts);
  notifyDataSetChanged();
}","private void updatePosts(){
  postsToReport.clear();
  postsToReport.addAll(posts);
  notifyDataSetChanged();
  listViewParent.invalidateViews();
  listViewParent.invalidate();
  listViewParent.requestLayout();
  outerLayout.invalidate();
  outerLayout.requestLayout();
}",0.581151832460733
15453,"@Override public void handleMessage(final Message msg){
  final Context context=getSupportActivity();
switch (msg.what) {
case NOTIF_DOWNLOAD_NECESSARY:
    loadingView=new LoadingView(context,R.string.download_waiting,true,true);
  listFooterNotifications.addView(loadingView);
break;
case NOTIF_DOWNLOAD_START:
loadingView.setIndeterminate(R.string.download_connecting);
break;
case NOTIF_STARTING:
if (loadingView != null) loadingView.setIndeterminate(R.string.download_downloadstarting);
break;
case NOTIF_AGE:
final TextView cacheNotif=new TextView(context);
cacheNotif.setText(context.getString(R.string.listing_cached) + ""String_Node_Str"" + RRTime.formatDateTime((Long)msg.obj));
final int paddingPx=General.dpToPixels(context,6);
cacheNotif.setPadding(paddingPx,paddingPx,paddingPx,paddingPx);
cacheNotif.setTextSize(13f);
listHeaderNotifications.addView(cacheNotif);
listHeaderNotifications.requestLayout();
adapter.notifyDataSetChanged();
break;
case NOTIF_ERROR:
if (loadingView != null) loadingView.setDone(R.string.download_failed);
final RRError error=(RRError)msg.obj;
fragmentHeader.addView(new ErrorView(getSupportActivity(),error));
break;
case NOTIF_PROGRESS:
if (loadingView != null) loadingView.setProgress(R.string.download_loading,(Float)msg.obj);
break;
case NOTIF_DOWNLOAD_DONE:
if (loadingView != null) loadingView.setDoneNoAnim(R.string.download_done);
break;
}
}","@Override public void handleMessage(final Message msg){
  final Context context=getSupportActivity();
switch (msg.what) {
case NOTIF_DOWNLOAD_NECESSARY:
    loadingView=new LoadingView(context,R.string.download_waiting,true,true);
  listFooterNotifications.addView(loadingView);
break;
case NOTIF_DOWNLOAD_START:
loadingView.setIndeterminate(R.string.download_connecting);
break;
case NOTIF_STARTING:
if (loadingView != null) loadingView.setIndeterminate(R.string.download_downloadstarting);
break;
case NOTIF_AGE:
final TextView cacheNotif=new TextView(context);
cacheNotif.setText(context.getString(R.string.listing_cached) + ""String_Node_Str"" + RRTime.formatDateTime((Long)msg.obj));
final int paddingPx=General.dpToPixels(context,6);
cacheNotif.setPadding(paddingPx,paddingPx,paddingPx,paddingPx);
cacheNotif.setTextSize(13f);
listHeaderNotifications.addView(cacheNotif);
listHeaderNotifications.requestLayout();
adapter.notifyDataSetChanged();
break;
case NOTIF_ERROR:
{
if (loadingView != null) loadingView.setDone(R.string.download_failed);
final RRError error=(RRError)msg.obj;
fragmentHeader.addView(new ErrorView(getSupportActivity(),error));
break;
}
case NOTIF_PROGRESS:
if (loadingView != null) loadingView.setProgress(R.string.download_loading,(Float)msg.obj);
break;
case NOTIF_DOWNLOAD_DONE:
if (loadingView != null) loadingView.setDoneNoAnim(R.string.download_done);
break;
case NOTIF_ERROR_FOOTER:
{
if (loadingView != null) loadingView.setDone(R.string.download_failed);
final RRError error=(RRError)msg.obj;
listFooterNotifications.addView(new ErrorView(getSupportActivity(),error));
adapter.notifyDataSetChanged();
break;
}
}
}",0.9150757077024358
15454,"@Override protected void onFailure(final RequestFailureType type,final Throwable t,final StatusLine status,final String readableMessage){
  final String title, message;
switch (type) {
case CANCELLED:
    title=context.getString(R.string.error_cancelled_title);
  message=context.getString(R.string.error_cancelled_message);
break;
case PARSE:
title=context.getString(R.string.error_parse_title);
message=context.getString(R.string.error_parse_message);
break;
case CACHE_MISS:
title=context.getString(R.string.error_postlist_cache_title);
message=context.getString(R.string.error_postlist_cache_message);
break;
case STORAGE:
title=context.getString(R.string.error_unexpected_storage_title);
message=context.getString(R.string.error_unexpected_storage_message);
break;
case CONNECTION:
title=context.getString(R.string.error_connection_title);
message=context.getString(R.string.error_connection_message);
break;
case REQUEST:
if (status != null) {
switch (status.getStatusCode()) {
case 403:
title=context.getString(R.string.error_403_title);
message=context.getString(R.string.error_403_message);
break;
case 404:
title=context.getString(R.string.error_404_title);
message=context.getString(R.string.error_404_message);
break;
case 502:
case 503:
case 504:
title=context.getString(R.string.error_postlist_redditdown_title);
message=context.getString(R.string.error_postlist_redditdown_message);
break;
default :
title=context.getString(R.string.error_unknown_api_title);
message=context.getString(R.string.error_unknown_api_message);
break;
}
}
 else {
title=context.getString(R.string.error_unknown_api_title);
message=context.getString(R.string.error_unknown_api_message);
}
break;
default :
title=context.getString(R.string.error_unknown_title);
message=context.getString(R.string.error_unknown_message);
break;
}
final RRError error=new RRError(title,message,t,status);
notificationHandler.sendMessage(General.handlerMessage(NOTIF_ERROR,error));
}","@Override protected void onFailure(final RequestFailureType type,final Throwable t,final StatusLine status,final String readableMessage){
  final String title, message;
  int displayType=NOTIF_ERROR;
switch (type) {
case CANCELLED:
    title=context.getString(R.string.error_cancelled_title);
  message=context.getString(R.string.error_cancelled_message);
break;
case PARSE:
title=context.getString(R.string.error_parse_title);
message=context.getString(R.string.error_parse_message);
break;
case CACHE_MISS:
title=context.getString(R.string.error_postlist_cache_title);
message=context.getString(R.string.error_postlist_cache_message);
displayType=NOTIF_ERROR_FOOTER;
break;
case STORAGE:
title=context.getString(R.string.error_unexpected_storage_title);
message=context.getString(R.string.error_unexpected_storage_message);
break;
case CONNECTION:
title=context.getString(R.string.error_connection_title);
message=context.getString(R.string.error_connection_message);
break;
case REQUEST:
if (status != null) {
switch (status.getStatusCode()) {
case 403:
title=context.getString(R.string.error_403_title);
message=context.getString(R.string.error_403_message);
break;
case 404:
title=context.getString(R.string.error_404_title);
message=context.getString(R.string.error_404_message);
break;
case 502:
case 503:
case 504:
title=context.getString(R.string.error_postlist_redditdown_title);
message=context.getString(R.string.error_postlist_redditdown_message);
break;
default :
title=context.getString(R.string.error_unknown_api_title);
message=context.getString(R.string.error_unknown_api_message);
break;
}
}
 else {
title=context.getString(R.string.error_unknown_api_title);
message=context.getString(R.string.error_unknown_api_message);
}
break;
default :
title=context.getString(R.string.error_unknown_title);
message=context.getString(R.string.error_unknown_message);
break;
}
final RRError error=new RRError(title,message,t,status);
notificationHandler.sendMessage(General.handlerMessage(displayType,error));
}",0.9790984638630068
15455,"@Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  super.onCreateView(inflater,container,savedInstanceState);
  final Context context=container.getContext();
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(context);
  final LinearLayout outer=new LinearLayout(context);
  outer.setOrientation(android.widget.LinearLayout.VERTICAL);
  fragmentHeader=createVerticalLinearLayout(context);
  final LinearLayout listHeader=createVerticalLinearLayout(context);
  listHeaderNotifications=createVerticalLinearLayout(context);
  listFooterNotifications=createVerticalLinearLayout(context);
  if (subreddit.isReal()) {
    final SubredditHeader subredditHeader=new SubredditHeader(context,subreddit);
    listHeader.addView(subredditHeader);
  }
  listHeader.addView(listHeaderNotifications);
  lv=(ListView)inflater.inflate(R.layout.reddit_post_list);
  lv.setOnScrollListener(this);
  lv.addHeaderView(listHeader);
  lv.addFooterView(listFooterNotifications);
  lv.setPersistentDrawingCache(ViewGroup.PERSISTENT_ALL_CACHES);
  lv.setAlwaysDrawnWithCacheEnabled(true);
  adapter=new PostListingAdapter(lv,this);
  lv.setAdapter(adapter);
  final ListOverlayView lov=new ListOverlayView(context,lv);
  outer.addView(fragmentHeader);
  outer.addView(lov);
  request=new PostListingRequest(url,RedditAccountManager.getInstance(context).getDefaultAccount(),session,downloadType,true);
  CacheManager.getInstance(context).makeRequest(request);
  return outer;
}","@Override public View onCreateView(final LayoutInflater inflater,final ViewGroup container,final Bundle savedInstanceState){
  super.onCreateView(inflater,container,savedInstanceState);
  final Context context=container.getContext();
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(context);
  final LinearLayout outer=new LinearLayout(context){
    @Override protected void onAttachedToWindow(){
      super.onAttachedToWindow();
      getLayoutParams().height=ViewGroup.LayoutParams.FILL_PARENT;
    }
  }
;
  outer.setOrientation(android.widget.LinearLayout.VERTICAL);
  fragmentHeader=createVerticalLinearLayout(context);
  final LinearLayout listHeader=createVerticalLinearLayout(context);
  listHeaderNotifications=createVerticalLinearLayout(context);
  listFooterNotifications=createVerticalLinearLayout(context);
  if (subreddit.isReal()) {
    final SubredditHeader subredditHeader=new SubredditHeader(context,subreddit);
    listHeader.addView(subredditHeader);
  }
  listHeader.addView(listHeaderNotifications);
  lv=(ListView)inflater.inflate(R.layout.reddit_post_list);
  lv.setOnScrollListener(this);
  lv.addHeaderView(listHeader);
  lv.addFooterView(listFooterNotifications);
  lv.setPersistentDrawingCache(ViewGroup.PERSISTENT_ALL_CACHES);
  lv.setAlwaysDrawnWithCacheEnabled(true);
  adapter=new PostListingAdapter(lv,outer,this);
  lv.setAdapter(adapter);
  final ListOverlayView lov=new ListOverlayView(context,lv);
  outer.addView(fragmentHeader);
  outer.addView(lov);
  lv.getLayoutParams().height=ViewGroup.LayoutParams.FILL_PARENT;
  request=new PostListingRequest(url,RedditAccountManager.getInstance(context).getDefaultAccount(),session,downloadType,true);
  CacheManager.getInstance(context).makeRequest(request);
  return outer;
}",0.9286146400483968
15456,"private synchronized CacheDownload getNextRedditInQueue(){
  while (redditDownloadsQueued.isEmpty()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  CacheDownload next=null;
  RequestIdentifier nextKey=null;
  for (  final HashMap.Entry<RequestIdentifier,CacheDownload> entry : redditDownloadsQueued.entrySet()) {
    if (next == null || entry.getValue().isHigherPriorityThan(next)) {
      next=entry.getValue();
      nextKey=entry.getKey();
    }
  }
  redditDownloadsQueued.remove(nextKey);
  downloadsInProgress.put(nextKey,next);
  return next;
}","private synchronized CacheDownload getNextRedditInQueue(){
  while (redditDownloadsQueued.isEmpty()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  CacheDownload next=null;
  RequestIdentifier nextKey=null;
  for (  final Map.Entry<RequestIdentifier,CacheDownload> entry : redditDownloadsQueued.entrySet()) {
    if (next == null || entry.getValue().isHigherPriorityThan(next)) {
      next=entry.getValue();
      nextKey=entry.getKey();
    }
  }
  redditDownloadsQueued.remove(nextKey);
  downloadsInProgress.put(nextKey,next);
  return next;
}",0.996779388083736
15457,"public synchronized CacheDownload getNextInQueue(){
  while (downloadsQueued.isEmpty()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  CacheDownload next=null;
  RequestIdentifier nextKey=null;
  for (  final HashMap.Entry<RequestIdentifier,CacheDownload> entry : downloadsQueued.entrySet()) {
    if (next == null || entry.getValue().isHigherPriorityThan(next)) {
      next=entry.getValue();
      nextKey=entry.getKey();
    }
  }
  downloadsQueued.remove(nextKey);
  downloadsInProgress.put(nextKey,next);
  return next;
}","public synchronized CacheDownload getNextInQueue(){
  while (downloadsQueued.isEmpty()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  CacheDownload next=null;
  RequestIdentifier nextKey=null;
  for (  final Map.Entry<RequestIdentifier,CacheDownload> entry : downloadsQueued.entrySet()) {
    if (next == null || entry.getValue().isHigherPriorityThan(next)) {
      next=entry.getValue();
      nextKey=entry.getKey();
    }
  }
  downloadsQueued.remove(nextKey);
  downloadsInProgress.put(nextKey,next);
  return next;
}",0.9966442953020134
15458,"@Override public void handleMessage(final Message msg){
  final RedditPreparedPost post=(RedditPreparedPost)msg.obj;
  if (!postIds.add(post.idAlone))   return;
  posts.add(post);
  if (listViewParent.getLastVisiblePosition() + 1 >= posts.size()) {
    updatePosts();
  }
}","@Override public void handleMessage(final Message msg){
  final RedditPreparedPost post=(RedditPreparedPost)msg.obj;
  if (!postIds.add(post.idAlone))   return;
  posts.add(post);
  if (listViewParent.getLastVisiblePosition() + 1 >= postsToReport.size()) {
    updatePosts();
  }
}",0.9855595667870036
15459,"public PostListingAdapter(final ListView listViewParent,final PostListingFragment fragmentParent){
  this.listViewParent=listViewParent;
  this.fragmentParent=fragmentParent;
  postAddedHandler=new Handler(Looper.getMainLooper()){
    @Override public void handleMessage(    final Message msg){
      final RedditPreparedPost post=(RedditPreparedPost)msg.obj;
      if (!postIds.add(post.idAlone))       return;
      posts.add(post);
      if (listViewParent.getLastVisiblePosition() + 1 >= posts.size()) {
        updatePosts();
      }
    }
  }
;
}","public PostListingAdapter(final ListView listViewParent,final PostListingFragment fragmentParent){
  this.listViewParent=listViewParent;
  this.fragmentParent=fragmentParent;
  postAddedHandler=new Handler(Looper.getMainLooper()){
    @Override public void handleMessage(    final Message msg){
      final RedditPreparedPost post=(RedditPreparedPost)msg.obj;
      if (!postIds.add(post.idAlone))       return;
      posts.add(post);
      if (listViewParent.getLastVisiblePosition() + 1 >= postsToReport.size()) {
        updatePosts();
      }
    }
  }
;
}",0.9928057553956836
15460,"public RedditPreparedPost(final Context context,final CacheManager cm,final int listId,final RedditPost post,final long timestamp,final boolean showSubreddit,final RedditSubreddit parentSubreddit,final boolean updateNeeded,final boolean showThumbnails,final boolean precacheImages,final RedditAccount user){
  this.src=post;
  this.parentSubreddit=parentSubreddit;
  this.showSubreddit=showSubreddit;
  title=StringEscapeUtils.unescapeHtml4(post.title.replace('\n',' ')).trim();
  idAlone=post.id;
  idAndType=post.name;
  url=post.url;
  commentCount=post.num_comments;
  if (post.likes == null) {
    voteDirection=0;
  }
 else {
    voteDirection=Boolean.TRUE.equals(post.likes) ? 1 : -1;
  }
  imageUrl=LinkHandler.getImageUrl(post.url);
  thumbnailUrl=post.thumbnail;
  hasThumbnail=showThumbnails && (hasThumbnail(post) || imageUrl != null);
  final int thumbnailWidth=General.dpToPixels(context,64);
  if (hasThumbnail && hasThumbnail(post)) {
    downloadThumbnail(context,thumbnailWidth,cm,listId,false);
  }
  if (imageUrl != null && precacheImages) {
    downloadThumbnail(context,thumbnailWidth,cm,listId,true);
  }
  lastChange=timestamp;
  if (voteDirection != 0 || saved || hidden) {
    RedditChangeDataManager.getInstance(context).update(parentSubreddit.url,user,this,true);
  }
 else   if (updateNeeded) {
    RedditChangeDataManager.getInstance(context).update(parentSubreddit.url,user,this,false);
  }
  rebuildSubtitle(context);
}","public RedditPreparedPost(final Context context,final CacheManager cm,final int listId,final RedditPost post,final long timestamp,final boolean showSubreddit,final RedditSubreddit parentSubreddit,final boolean updateNeeded,final boolean showThumbnails,final boolean precacheImages,final RedditAccount user){
  this.src=post;
  this.parentSubreddit=parentSubreddit;
  this.showSubreddit=showSubreddit;
  if (post.title == null) {
    title=""String_Node_Str"";
  }
 else {
    title=StringEscapeUtils.unescapeHtml4(post.title.replace('\n',' ')).trim();
  }
  idAlone=post.id;
  idAndType=post.name;
  url=post.url;
  commentCount=post.num_comments;
  if (post.likes == null) {
    voteDirection=0;
  }
 else {
    voteDirection=Boolean.TRUE.equals(post.likes) ? 1 : -1;
  }
  imageUrl=LinkHandler.getImageUrl(post.url);
  thumbnailUrl=post.thumbnail;
  hasThumbnail=showThumbnails && (hasThumbnail(post) || imageUrl != null);
  final int thumbnailWidth=General.dpToPixels(context,64);
  if (hasThumbnail && hasThumbnail(post)) {
    downloadThumbnail(context,thumbnailWidth,cm,listId,false);
  }
  if (imageUrl != null && precacheImages) {
    downloadThumbnail(context,thumbnailWidth,cm,listId,true);
  }
  lastChange=timestamp;
  if (voteDirection != 0 || saved || hidden) {
    RedditChangeDataManager.getInstance(context).update(parentSubreddit.url,user,this,true);
  }
 else   if (updateNeeded) {
    RedditChangeDataManager.getInstance(context).update(parentSubreddit.url,user,this,false);
  }
  rebuildSubtitle(context);
}",0.9748068525361102
15461,"public RedditPreparedMessage(final Context context,final RedditMessage message,final long timestamp){
  this.src=message;
  final TypedArray appearance=context.obtainStyledAttributes(new int[]{R.attr.rrCommentHeaderBoldCol,R.attr.rrCommentHeaderAuthorCol});
  rrCommentHeaderBoldCol=appearance.getColor(0,255);
  rrCommentHeaderAuthorCol=appearance.getColor(1,255);
  body=RedditCommentTextParser.parse(StringEscapeUtils.unescapeHtml4(message.body));
  idAndType=message.name;
  final BetterSSB sb=new BetterSSB();
  sb.append(src.author,BetterSSB.FOREGROUND_COLOR | BetterSSB.BOLD,rrCommentHeaderAuthorCol,0,1f);
  sb.append(""String_Node_Str"",0);
  sb.append(RRTime.formatDurationMs(RRTime.utcCurrentTimeMillis() - src.created_utc * 1000L),BetterSSB.FOREGROUND_COLOR | BetterSSB.BOLD,rrCommentHeaderBoldCol,0,1f);
  sb.append(""String_Node_Str"",0);
  header=sb.get();
}","public RedditPreparedMessage(final Context context,final RedditMessage message,final long timestamp){
  this.src=message;
  final TypedArray appearance=context.obtainStyledAttributes(new int[]{R.attr.rrCommentHeaderBoldCol,R.attr.rrCommentHeaderAuthorCol});
  rrCommentHeaderBoldCol=appearance.getColor(0,255);
  rrCommentHeaderAuthorCol=appearance.getColor(1,255);
  body=RedditCommentTextParser.parse(StringEscapeUtils.unescapeHtml4(message.body));
  idAndType=message.name;
  final BetterSSB sb=new BetterSSB();
  if (src.author == null) {
    sb.append(""String_Node_Str"",BetterSSB.FOREGROUND_COLOR | BetterSSB.BOLD,rrCommentHeaderAuthorCol,0,1f);
  }
 else {
    sb.append(src.author,BetterSSB.FOREGROUND_COLOR | BetterSSB.BOLD,rrCommentHeaderAuthorCol,0,1f);
  }
  sb.append(""String_Node_Str"",0);
  sb.append(RRTime.formatDurationMs(RRTime.utcCurrentTimeMillis() - src.created_utc * 1000L),BetterSSB.FOREGROUND_COLOR | BetterSSB.BOLD,rrCommentHeaderBoldCol,0,1f);
  sb.append(""String_Node_Str"",0);
  header=sb.get();
}",0.9090909090909092
15462,"@Override public void handleMessage(final Message msg){
  if (listViewParent.getLastVisiblePosition() + 1 >= posts.size()) {
    updatePosts();
  }
}","@Override public void handleMessage(final Message msg){
  posts.add((RedditPreparedPost)msg.obj);
  if (listViewParent.getLastVisiblePosition() + 1 >= posts.size()) {
    updatePosts();
  }
}",0.8764705882352941
15463,"public PostListingAdapter(final ListView listViewParent,final PostListingFragment fragmentParent){
  this.listViewParent=listViewParent;
  this.fragmentParent=fragmentParent;
  postAddedHandler=new Handler(Looper.getMainLooper()){
    @Override public void handleMessage(    final Message msg){
      if (listViewParent.getLastVisiblePosition() + 1 >= posts.size()) {
        updatePosts();
      }
    }
  }
;
}","public PostListingAdapter(final ListView listViewParent,final PostListingFragment fragmentParent){
  this.listViewParent=listViewParent;
  this.fragmentParent=fragmentParent;
  postAddedHandler=new Handler(Looper.getMainLooper()){
    @Override public void handleMessage(    final Message msg){
      posts.add((RedditPreparedPost)msg.obj);
      if (listViewParent.getLastVisiblePosition() + 1 >= posts.size()) {
        updatePosts();
      }
    }
  }
;
}",0.9471264367816092
15464,"public void onPostDownloaded(final RedditPreparedPost post){
  posts.add(post);
  postAddedHandler.sendEmptyMessage(0);
}","public void onPostDownloaded(final RedditPreparedPost post){
  postAddedHandler.sendMessage(General.handlerMessage(0,post));
}",0.7854251012145749
15465,"/** 
 * Sets the data source as a content Uri. Call this method before  the rest of the methods in this class. This method may be time-consuming.
 * @param context the Context to use when resolving the Uri
 * @param uri the Content URI of the data you want to play
 * @throws IllegalArgumentException if the Uri is invalid
 * @throws SecurityException if the Uri cannot be used due to lack ofpermission.
 */
public void setDataSource(Context context,Uri uri) throws IllegalArgumentException, SecurityException {
  if (uri == null) {
    throw new IllegalArgumentException();
  }
  String scheme=uri.getScheme();
  if (scheme == null || scheme.equals(""String_Node_Str"")) {
    setDataSource(uri.getPath());
    return;
  }
  Cursor cursor=null;
  try {
    String[] proj={MediaStore.MediaColumns.DATA};
    cursor=context.getContentResolver().query(uri,proj,null,null,null);
    if (cursor != null) {
      int column_index=cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA);
      if (cursor.moveToFirst()) {
        setDataSource(cursor.getString(column_index));
      }
      cursor.close();
    }
    return;
  }
 catch (  SecurityException ex) {
  }
  setDataSource(uri.toString());
}","/** 
 * Sets the data source as a content Uri. Call this method before  the rest of the methods in this class. This method may be time-consuming.
 * @param context the Context to use when resolving the Uri
 * @param uri the Content URI of the data you want to play
 * @throws IllegalArgumentException if the Uri is invalid
 * @throws SecurityException if the Uri cannot be used due to lack ofpermission.
 */
public void setDataSource(Context context,Uri uri) throws IllegalArgumentException, SecurityException {
  if (uri == null) {
    throw new IllegalArgumentException();
  }
  String scheme=uri.getScheme();
  if (scheme == null || scheme.equals(""String_Node_Str"")) {
    setDataSource(uri.getPath());
    return;
  }
  Cursor cursor=null;
  try {
    String[] proj={MediaStore.MediaColumns.DATA};
    cursor=context.getContentResolver().query(uri,proj,null,null,null);
    if (cursor != null) {
      int column_index=cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA);
      if (cursor.moveToFirst()) {
        setDataSource(cursor.getString(column_index));
      }
      cursor.close();
      return;
    }
  }
 catch (  SecurityException ex) {
  }
  setDataSource(uri.toString());
}",0.9891395154553048
15466,"public void testFoo(){
  YAMLFile yamlFile=YAMLElementGenerator.getInstance(getProject()).createDummyYamlWithText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  Collection<YAMLKeyValue> yamlKeyValues=PsiTreeUtil.collectElementsOfType(yamlFile,YAMLKeyValue.class);
  YAMLKeyValue services=ContainerUtil.find(yamlKeyValues,new YamlUpdateArgumentServicesCallbackTest.YAMLKeyValueCondition(""String_Node_Str""));
  assertNotNull(services);
  final YamlCreateServiceArgumentsCallback callback=new YamlCreateServiceArgumentsCallback(services);
  CommandProcessor.getInstance().executeCommand(getProject(),new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          callback.insert(Arrays.asList(""String_Node_Str"",null,""String_Node_Str""));
        }
      }
);
    }
  }
,null,null);
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",yamlFile.getText());
}","public void testFoo(){
  YAMLFile yamlFile=YAMLElementGenerator.getInstance(getProject()).createDummyYamlWithText(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  Collection<YAMLKeyValue> yamlKeyValues=PsiTreeUtil.collectElementsOfType(yamlFile,YAMLKeyValue.class);
  YAMLKeyValue services=ContainerUtil.find(yamlKeyValues,new YamlUpdateArgumentServicesCallbackTest.YAMLKeyValueCondition(""String_Node_Str""));
  assertNotNull(services);
  final YamlCreateServiceArgumentsCallback callback=new YamlCreateServiceArgumentsCallback(services);
  CommandProcessor.getInstance().executeCommand(getProject(),new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          callback.insert(Arrays.asList(""String_Node_Str"",null,""String_Node_Str""));
        }
      }
);
    }
  }
,null,null);
  ApplicationInfo instance=ApplicationInfo.getInstance();
  String minorVersion=instance.getMinorVersion();
  if ((instance.getMajorVersion().equals(""String_Node_Str"") && Integer.valueOf(minorVersion) >= 2)) {
    assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",yamlFile.getText());
  }
 else {
    assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",yamlFile.getText());
  }
}",0.8465565847764801
15467,"/** 
 * @see fr.adrienbrault.idea.symfony2plugin.util.yaml.YamlHelper#insertKeyIntoFile
 */
public void testInsertKeyWithArrayValue(){
  YAMLFile yamlFile=(YAMLFile)myFixture.configureByText(YAMLFileType.YML,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  YAMLKeyValue yamlKeyValue=YamlPsiElementFactory.createFromText(getProject(),YAMLKeyValue.class,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  assertNotNull(yamlKeyValue);
  YamlHelper.insertKeyIntoFile(yamlFile,yamlKeyValue,""String_Node_Str"");
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",yamlFile.getText());
}","/** 
 * @see fr.adrienbrault.idea.symfony2plugin.util.yaml.YamlHelper#insertKeyIntoFile
 */
public void testInsertKeyWithArrayValue(){
  YAMLFile yamlFile=(YAMLFile)myFixture.configureByText(YAMLFileType.YML,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  YAMLKeyValue yamlKeyValue=YamlPsiElementFactory.createFromText(getProject(),YAMLKeyValue.class,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  assertNotNull(yamlKeyValue);
  YamlHelper.insertKeyIntoFile(yamlFile,yamlKeyValue,""String_Node_Str"");
  ApplicationInfo instance=ApplicationInfo.getInstance();
  String minorVersion=instance.getMinorVersion();
  if ((instance.getMajorVersion().equals(""String_Node_Str"") && Integer.valueOf(minorVersion) >= 2)) {
    assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",yamlFile.getText());
  }
 else {
    assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",yamlFile.getText());
  }
}",0.7874175545408422
15468,"/** 
 * @see fr.adrienbrault.idea.symfony2plugin.util.yaml.YamlHelper#insertKeyIntoFile
 */
public void testInsertKeyValueWithMissingMainKeyInRoot(){
  YAMLFile yamlFile=(YAMLFile)myFixture.configureByText(YAMLFileType.YML,""String_Node_Str"");
  YAMLKeyValue yamlKeyValue=YamlPsiElementFactory.createFromText(getProject(),YAMLKeyValue.class,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  assertNotNull(yamlKeyValue);
  YamlHelper.insertKeyIntoFile(yamlFile,yamlKeyValue,""String_Node_Str"");
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",yamlFile.getText());
}","/** 
 * @see fr.adrienbrault.idea.symfony2plugin.util.yaml.YamlHelper#insertKeyIntoFile
 */
public void testInsertKeyValueWithMissingMainKeyInRoot(){
  YAMLFile yamlFile=(YAMLFile)myFixture.configureByText(YAMLFileType.YML,""String_Node_Str"");
  YAMLKeyValue yamlKeyValue=YamlPsiElementFactory.createFromText(getProject(),YAMLKeyValue.class,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  assertNotNull(yamlKeyValue);
  YamlHelper.insertKeyIntoFile(yamlFile,yamlKeyValue,""String_Node_Str"");
  ApplicationInfo instance=ApplicationInfo.getInstance();
  String minorVersion=instance.getMinorVersion();
  if ((instance.getMajorVersion().equals(""String_Node_Str"") && Integer.valueOf(minorVersion) >= 2)) {
    assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",yamlFile.getText());
  }
 else {
    assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",yamlFile.getText());
  }
}",0.779896013864818
15469,"private static void getDefaultOptions(@NotNull Project project,@NotNull PhpClass phpClass,@NotNull FormClass formClass,@NotNull FormOptionVisitor visitor){
  for (  String methodName : FORM_OPTION_METHODS) {
    Method method=phpClass.findMethodByName(methodName);
    if (method == null) {
      continue;
    }
    Collection<MethodReference> tests=PsiTreeUtil.findChildrenOfType(method,MethodReference.class);
    for (    MethodReference methodReference : tests) {
      if (PhpElementsUtil.isEqualMethodReferenceName(methodReference,""String_Node_Str"")) {
        PsiElement[] parameters=methodReference.getParameters();
        if (parameters.length > 0 && parameters[0] instanceof ArrayCreationExpression) {
          for (          Map.Entry<String,PsiElement> entry : PhpElementsUtil.getArrayCreationKeyMap((ArrayCreationExpression)parameters[0]).entrySet()) {
            visitor.visit(entry.getValue(),entry.getKey(),formClass,FormOptionEnum.DEFAULT);
          }
        }
      }
 else {
        for (        String currentMethod : OPTIONS_VIA_METHOD_PARAMETER) {
          if (PhpElementsUtil.isEqualMethodReferenceName(methodReference,currentMethod)) {
            PsiElement[] parameters=methodReference.getParameters();
            if (parameters.length > 0 && parameters[0] instanceof ArrayCreationExpression) {
              for (              Map.Entry<String,PsiElement> entry : PhpElementsUtil.getArrayValuesAsMap((ArrayCreationExpression)parameters[0]).entrySet()) {
                visitor.visit(entry.getValue(),entry.getKey(),formClass,FormOptionEnum.getEnum(currentMethod));
              }
            }
            break;
          }
        }
      }
      if (PhpElementsUtil.isEqualMethodReferenceName(methodReference,methodName) && methodReference.getReferenceType() == PhpModifier.State.PARENT) {
        PsiElement parentMethod=PhpElementsUtil.getPsiElementsBySignatureSingle(project,methodReference.getSignature());
        if (parentMethod instanceof Method) {
          PhpClass phpClassInner=((Method)parentMethod).getContainingClass();
          if (phpClassInner != null) {
            getDefaultOptions(project,phpClassInner,formClass,visitor);
          }
        }
      }
    }
  }
}","private static void getDefaultOptions(@NotNull Project project,@NotNull PhpClass phpClass,@NotNull FormClass formClass,@NotNull FormOptionVisitor visitor,int depth){
  if (depth-- < 0) {
    return;
  }
  for (  String methodName : FORM_OPTION_METHODS) {
    Method method=phpClass.findMethodByName(methodName);
    if (method == null) {
      continue;
    }
    Collection<MethodReference> tests=PsiTreeUtil.findChildrenOfType(method,MethodReference.class);
    for (    MethodReference methodReference : tests) {
      if (PhpElementsUtil.isEqualMethodReferenceName(methodReference,""String_Node_Str"")) {
        PsiElement[] parameters=methodReference.getParameters();
        if (parameters.length > 0 && parameters[0] instanceof ArrayCreationExpression) {
          for (          Map.Entry<String,PsiElement> entry : PhpElementsUtil.getArrayCreationKeyMap((ArrayCreationExpression)parameters[0]).entrySet()) {
            visitor.visit(entry.getValue(),entry.getKey(),formClass,FormOptionEnum.DEFAULT);
          }
        }
      }
 else {
        for (        String currentMethod : OPTIONS_VIA_METHOD_PARAMETER) {
          if (PhpElementsUtil.isEqualMethodReferenceName(methodReference,currentMethod)) {
            PsiElement[] parameters=methodReference.getParameters();
            if (parameters.length > 0 && parameters[0] instanceof ArrayCreationExpression) {
              for (              Map.Entry<String,PsiElement> entry : PhpElementsUtil.getArrayValuesAsMap((ArrayCreationExpression)parameters[0]).entrySet()) {
                visitor.visit(entry.getValue(),entry.getKey(),formClass,FormOptionEnum.getEnum(currentMethod));
              }
            }
            break;
          }
        }
      }
      if (PhpElementsUtil.isEqualMethodReferenceName(methodReference,methodName) && methodReference.getReferenceType() == PhpModifier.State.PARENT) {
        PsiElement parentMethod=PhpElementsUtil.getPsiElementsBySignatureSingle(project,methodReference.getSignature());
        if (parentMethod instanceof Method) {
          PhpClass phpClassInner=((Method)parentMethod).getContainingClass();
          if (phpClassInner != null) {
            getDefaultOptions(project,phpClassInner,formClass,visitor,depth);
          }
        }
      }
    }
  }
}",0.9882405147548258
15470,"public static void buildFile(AnActionEvent event,final Project project,String templatePath){
  String extension=templatePath.endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  String fileName=Messages.showInputDialog(project,""String_Node_Str"",String.format(""String_Node_Str"",extension),Symfony2Icons.SYMFONY);
  if (fileName == null || StringUtils.isBlank(fileName)) {
    return;
  }
  FileType fileType=templatePath.endsWith(""String_Node_Str"") ? YAMLFileType.YML : XmlFileType.INSTANCE;
  if (!fileName.endsWith(""String_Node_Str"" + extension)) {
    fileName=fileName.concat(""String_Node_Str"" + extension);
  }
  DataContext dataContext=event.getDataContext();
  IdeView view=LangDataKeys.IDE_VIEW.getData(dataContext);
  if (view == null) {
    return;
  }
  PsiDirectory[] directories=view.getDirectories();
  if (directories.length == 0) {
    return;
  }
  final PsiDirectory initialBaseDir=directories[0];
  if (initialBaseDir == null) {
    return;
  }
  if (initialBaseDir.findFile(fileName) != null) {
    Messages.showInfoMessage(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String content;
  try {
    content=StreamUtil.readText(ServiceActionUtil.class.getResourceAsStream(templatePath),""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  final PsiFileFactory factory=PsiFileFactory.getInstance(project);
  String bundleName=""String_Node_Str"";
  SymfonyBundleUtil symfonyBundleUtil=new SymfonyBundleUtil(project);
  SymfonyBundle symfonyBundle=symfonyBundleUtil.getContainingBundle(initialBaseDir);
  if (symfonyBundle != null) {
    bundleName=StringUtils.strip(symfonyBundle.getNamespaceName(),""String_Node_Str"");
  }
  String underscoreBundle=bundleName.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
  if (underscoreBundle.endsWith(""String_Node_Str"")) {
    underscoreBundle=underscoreBundle.substring(0,underscoreBundle.length() - 6);
  }
  content=content.replace(""String_Node_Str"",bundleName).replace(""String_Node_Str"",underscoreBundle);
  final PsiFile file=factory.createFileFromText(fileName,fileType,content);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      CodeStyleManager.getInstance(project).reformat(file);
      initialBaseDir.add(file);
    }
  }
);
  PsiFile psiFile=initialBaseDir.findFile(fileName);
  if (psiFile != null) {
    view.selectElement(psiFile);
  }
}","public static void buildFile(AnActionEvent event,final Project project,String templatePath){
  String extension=templatePath.endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  String fileName=Messages.showInputDialog(project,""String_Node_Str"",String.format(""String_Node_Str"",extension),Symfony2Icons.SYMFONY);
  if (fileName == null || StringUtils.isBlank(fileName)) {
    return;
  }
  FileType fileType=templatePath.endsWith(""String_Node_Str"") ? YAMLFileType.YML : XmlFileType.INSTANCE;
  if (!fileName.endsWith(""String_Node_Str"" + extension)) {
    fileName=fileName.concat(""String_Node_Str"" + extension);
  }
  DataContext dataContext=event.getDataContext();
  IdeView view=LangDataKeys.IDE_VIEW.getData(dataContext);
  if (view == null) {
    return;
  }
  PsiDirectory[] directories=view.getDirectories();
  if (directories.length == 0) {
    return;
  }
  final PsiDirectory initialBaseDir=directories[0];
  if (initialBaseDir == null) {
    return;
  }
  if (initialBaseDir.findFile(fileName) != null) {
    Messages.showInfoMessage(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String content;
  try {
    content=StreamUtil.readText(ServiceActionUtil.class.getResourceAsStream(templatePath),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
    return;
  }
  final PsiFileFactory factory=PsiFileFactory.getInstance(project);
  String bundleName=""String_Node_Str"";
  SymfonyBundleUtil symfonyBundleUtil=new SymfonyBundleUtil(project);
  SymfonyBundle symfonyBundle=symfonyBundleUtil.getContainingBundle(initialBaseDir);
  if (symfonyBundle != null) {
    bundleName=StringUtils.strip(symfonyBundle.getNamespaceName(),""String_Node_Str"");
  }
  String underscoreBundle=bundleName.replace(""String_Node_Str"",""String_Node_Str"").toLowerCase();
  if (underscoreBundle.endsWith(""String_Node_Str"")) {
    underscoreBundle=underscoreBundle.substring(0,underscoreBundle.length() - 6);
  }
  content=content.replace(""String_Node_Str"",bundleName).replace(""String_Node_Str"",underscoreBundle);
  final PsiFile file=factory.createFileFromText(fileName,fileType,content);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      CodeStyleManager.getInstance(project).reformat(file);
      initialBaseDir.add(file);
    }
  }
);
  PsiFile psiFile=initialBaseDir.findFile(fileName);
  if (psiFile != null) {
    view.selectElement(psiFile);
  }
}",0.990874062056378
15471,"@Override public Collection<? extends PhpNamedElement> getBySignature(String expression,Project project){
  int endIndex=expression.lastIndexOf(TRIM_KEY);
  if (endIndex == -1) {
    return Collections.emptySet();
  }
  String originalSignature=expression.substring(0,endIndex);
  String parameter=expression.substring(endIndex + 1);
  PhpIndex phpIndex=PhpIndex.getInstance(project);
  Collection<? extends PhpNamedElement> phpNamedElementCollections=phpIndex.getBySignature(originalSignature,null,0);
  if (phpNamedElementCollections.size() == 0) {
    return Collections.emptySet();
  }
  PhpNamedElement phpNamedElement=phpNamedElementCollections.iterator().next();
  if (!(phpNamedElement instanceof Method)) {
    return Arrays.asList(phpNamedElement);
  }
  if (!new Symfony2InterfacesUtil().isCallTo((Method)phpNamedElement,""String_Node_Str"",""String_Node_Str"")) {
    return phpNamedElementCollections;
  }
  parameter=PhpTypeProviderUtil.getResolvedParameter(phpIndex,parameter);
  if (parameter == null) {
    return phpNamedElementCollections;
  }
  PhpClass phpClass=EntityHelper.resolveShortcutName(project,parameter);
  if (phpClass == null) {
    return phpNamedElementCollections;
  }
  return Arrays.asList(phpClass);
}","@Override public Collection<? extends PhpNamedElement> getBySignature(String expression,Project project){
  int endIndex=expression.lastIndexOf(TRIM_KEY);
  if (endIndex == -1) {
    return Collections.emptySet();
  }
  String originalSignature=expression.substring(0,endIndex);
  String parameter=expression.substring(endIndex + 1);
  PhpIndex phpIndex=PhpIndex.getInstance(project);
  Collection<? extends PhpNamedElement> phpNamedElementCollections=phpIndex.getBySignature(originalSignature,null,0);
  if (phpNamedElementCollections.size() == 0) {
    return Collections.emptySet();
  }
  PhpNamedElement phpNamedElement=phpNamedElementCollections.iterator().next();
  if (!(phpNamedElement instanceof Method)) {
    return phpNamedElementCollections;
  }
  if (!new Symfony2InterfacesUtil().isCallTo((Method)phpNamedElement,""String_Node_Str"",""String_Node_Str"")) {
    return phpNamedElementCollections;
  }
  parameter=PhpTypeProviderUtil.getResolvedParameter(phpIndex,parameter);
  if (parameter == null) {
    return phpNamedElementCollections;
  }
  PhpClass phpClass=EntityHelper.resolveShortcutName(project,parameter);
  if (phpClass == null) {
    return phpNamedElementCollections;
  }
  return PhpTypeProviderUtil.mergeSignatureResults(phpNamedElementCollections,phpClass);
}",0.945699564011098
15472,"@Override public Collection<? extends PhpNamedElement> getBySignature(String expression,Project project){
  int endIndex=expression.lastIndexOf(TRIM_KEY);
  if (endIndex == -1) {
    return Collections.emptySet();
  }
  String originalSignature=expression.substring(0,endIndex);
  String parameter=expression.substring(endIndex + 1);
  PhpIndex phpIndex=PhpIndex.getInstance(project);
  Collection<? extends PhpNamedElement> phpNamedElementCollections=phpIndex.getBySignature(originalSignature,null,0);
  if (phpNamedElementCollections.size() == 0) {
    return Collections.emptySet();
  }
  Method method=(Method)phpNamedElementCollections.iterator().next();
  if (!new Symfony2InterfacesUtil().isObjectRepositoryCall(method)) {
    return Arrays.asList(method);
  }
  parameter=PhpTypeProviderUtil.getResolvedParameter(phpIndex,parameter);
  if (parameter == null) {
    return phpNamedElementCollections;
  }
  PhpClass phpClass=EntityHelper.resolveShortcutName(project,parameter);
  if (phpClass == null) {
    return phpNamedElementCollections;
  }
  if (method.getName().equals(""String_Node_Str"") || method.getName().equals(""String_Node_Str"")) {
    method.getType().add(phpClass.getFQN() + ""String_Node_Str"");
    return phpNamedElementCollections;
  }
  return Arrays.asList(phpClass);
}","@Override public Collection<? extends PhpNamedElement> getBySignature(String expression,Project project){
  int endIndex=expression.lastIndexOf(TRIM_KEY);
  if (endIndex == -1) {
    return Collections.emptySet();
  }
  String originalSignature=expression.substring(0,endIndex);
  String parameter=expression.substring(endIndex + 1);
  PhpIndex phpIndex=PhpIndex.getInstance(project);
  Collection<? extends PhpNamedElement> phpNamedElementCollections=phpIndex.getBySignature(originalSignature,null,0);
  if (phpNamedElementCollections.size() == 0) {
    return Collections.emptySet();
  }
  Method method=(Method)phpNamedElementCollections.iterator().next();
  if (!new Symfony2InterfacesUtil().isObjectRepositoryCall(method)) {
    return phpNamedElementCollections;
  }
  parameter=PhpTypeProviderUtil.getResolvedParameter(phpIndex,parameter);
  if (parameter == null) {
    return phpNamedElementCollections;
  }
  PhpClass phpClass=EntityHelper.resolveShortcutName(project,parameter);
  if (phpClass == null) {
    return phpNamedElementCollections;
  }
  if (method.getName().equals(""String_Node_Str"") || method.getName().equals(""String_Node_Str"")) {
    method.getType().add(phpClass.getFQN() + ""String_Node_Str"");
    return phpNamedElementCollections;
  }
  return PhpTypeProviderUtil.mergeSignatureResults(phpNamedElementCollections,phpClass);
}",0.9516981132075472
15473,"@Override public Collection<? extends PhpNamedElement> getBySignature(String expression,Project project){
  int endIndex=expression.lastIndexOf(TRIM_KEY);
  if (endIndex == -1) {
    return Collections.emptySet();
  }
  String originalSignature=expression.substring(0,endIndex);
  String parameter=expression.substring(endIndex + 1);
  PhpIndex phpIndex=PhpIndex.getInstance(project);
  Collection<? extends PhpNamedElement> phpNamedElementCollections=phpIndex.getBySignature(originalSignature,null,0);
  if (phpNamedElementCollections.size() == 0) {
    return Collections.emptySet();
  }
  PhpNamedElement phpNamedElement=phpNamedElementCollections.iterator().next();
  if (!(phpNamedElement instanceof Method)) {
    return phpNamedElementCollections;
  }
  if (!new Symfony2InterfacesUtil().isGetRepositoryCall((Method)phpNamedElement)) {
    return phpNamedElementCollections;
  }
  parameter=PhpTypeProviderUtil.getResolvedParameter(phpIndex,parameter);
  if (parameter == null) {
    return phpNamedElementCollections;
  }
  PhpClass phpClass=EntityHelper.getEntityRepositoryClass(project,parameter);
  if (phpClass == null) {
    return phpNamedElementCollections;
  }
  return Collections.singletonList(phpClass);
}","@Override public Collection<? extends PhpNamedElement> getBySignature(String expression,Project project){
  int endIndex=expression.lastIndexOf(TRIM_KEY);
  if (endIndex == -1) {
    return Collections.emptySet();
  }
  String originalSignature=expression.substring(0,endIndex);
  String parameter=expression.substring(endIndex + 1);
  PhpIndex phpIndex=PhpIndex.getInstance(project);
  Collection<? extends PhpNamedElement> phpNamedElementCollections=phpIndex.getBySignature(originalSignature,null,0);
  if (phpNamedElementCollections.size() == 0) {
    return Collections.emptySet();
  }
  PhpNamedElement phpNamedElement=phpNamedElementCollections.iterator().next();
  if (!(phpNamedElement instanceof Method)) {
    return phpNamedElementCollections;
  }
  if (!new Symfony2InterfacesUtil().isGetRepositoryCall((Method)phpNamedElement)) {
    return phpNamedElementCollections;
  }
  parameter=PhpTypeProviderUtil.getResolvedParameter(phpIndex,parameter);
  if (parameter == null) {
    return phpNamedElementCollections;
  }
  PhpClass phpClass=EntityHelper.getEntityRepositoryClass(project,parameter);
  if (phpClass == null) {
    return phpNamedElementCollections;
  }
  return PhpTypeProviderUtil.mergeSignatureResults(phpNamedElementCollections,phpClass);
}",0.9618627057406663
15474,"/** 
 * @see fr.adrienbrault.idea.symfony2plugin.dic.SymfonyContainerTypeProvider
 */
public void testContainerServicePhpType(){
  assertPhpReferenceResolveTo(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",PlatformPatterns.psiElement(Method.class).withName(""String_Node_Str""));
  assertPhpReferenceNotResolveTo(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",PlatformPatterns.psiElement(Method.class).withName(""String_Node_Str""));
  assertPhpReferenceSignatureEquals(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + '\u0150' + ""String_Node_Str""+ '\u0180'+ ""String_Node_Str"");
}","/** 
 * @see fr.adrienbrault.idea.symfony2plugin.dic.SymfonyContainerTypeProvider
 */
public void testContainerServicePhpType(){
  assertPhpReferenceResolveTo(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",PlatformPatterns.psiElement(Method.class).withName(""String_Node_Str""));
  assertPhpReferenceNotResolveTo(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",PlatformPatterns.psiElement(Method.class).withName(""String_Node_Str""));
  assertPhpReferenceSignatureEquals(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + '\u0150' + ""String_Node_Str""+ '\u0182'+ ""String_Node_Str"");
}",0.9985507246376812
15475,"/** 
 * @see fr.adrienbrault.idea.symfony2plugin.doctrine.EntityHelper#getModelClasses
 */
public void testGetModelClasses(){
  Collection<DoctrineModel> modelClasses=EntityHelper.getModelClasses(getProject());
  Map<String,String> map=new HashMap<String,String>();
  for (  DoctrineModel modelClass : modelClasses) {
    map.put(modelClass.getRepositoryName(),modelClass.getDoctrineNamespace());
  }
  assertContainsElements(map.keySet(),""String_Node_Str"");
  assertContainsElements(map.keySet(),""String_Node_Str"");
  assertContainsElements(map.values(),""String_Node_Str"");
  assertFalse(map.values().contains(""String_Node_Str""));
}","/** 
 * @see fr.adrienbrault.idea.symfony2plugin.doctrine.EntityHelper#getModelClasses
 */
public void testGetModelClasses(){
  Collection<DoctrineModel> modelClasses=EntityHelper.getModelClasses(getProject());
  Map<String,String> map=new HashMap<String,String>();
  for (  DoctrineModel modelClass : modelClasses) {
    map.put(modelClass.getRepositoryName(),modelClass.getDoctrineNamespace());
  }
  assertContainsElements(map.keySet(),""String_Node_Str"");
  assertContainsElements(map.values(),""String_Node_Str"");
  assertContainsElements(map.keySet(),""String_Node_Str"");
  assertFalse(map.values().contains(""String_Node_Str""));
}",0.8830963665086888
15476,"/** 
 * @see fr.adrienbrault.idea.symfony2plugin.doctrine.ObjectRepositoryTypeProvider
 */
public void testGetRepositoryResolveByRepository(){
  assertPhpReferenceResolveTo(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",PlatformPatterns.psiElement(Method.class).withName(""String_Node_Str""));
  assertPhpReferenceSignatureEquals(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + '\u0151' + ""String_Node_Str""+ '\u0180'+ ""String_Node_Str"");
  assertPhpReferenceResolveTo(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",PlatformPatterns.psiElement(Method.class).withName(""String_Node_Str""));
}","/** 
 * @see fr.adrienbrault.idea.symfony2plugin.doctrine.ObjectRepositoryTypeProvider
 */
public void testGetRepositoryResolveByRepository(){
  assertPhpReferenceResolveTo(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",PlatformPatterns.psiElement(Method.class).withName(""String_Node_Str""));
  assertPhpReferenceSignatureEquals(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + '\u0151' + ""String_Node_Str""+ '\u0185'+ ""String_Node_Str"");
  assertPhpReferenceResolveTo(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",PlatformPatterns.psiElement(Method.class).withName(""String_Node_Str""));
}",0.9985734664764622
15477,"public void testGetRepositoryResolveByRepositoryApiClassConstantCompatibility(){
  String result=""String_Node_Str"" + '\u0151' + ""String_Node_Str""+ '\u0180'+ ""String_Node_Str"";
  if (Integer.parseInt(PluginManager.getPlugin(PluginId.getId(""String_Node_Str"")).getVersion().replace(""String_Node_Str"",""String_Node_Str"")) <= 1411534) {
    result=""String_Node_Str"" + '\u0151' + ""String_Node_Str""+ '\u0180'+ ""String_Node_Str"";
  }
  assertPhpReferenceSignatureEquals(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",result);
}","/** 
 * @see fr.adrienbrault.idea.symfony2plugin.doctrine.ObjectRepositoryTypeProvider
 */
public void testGetRepositoryResolveByRepositoryApiClassConstantCompatibility(){
  String result=""String_Node_Str"" + '\u0151' + ""String_Node_Str""+ '\u0185'+ ""String_Node_Str"";
  if (Integer.parseInt(PluginManager.getPlugin(PluginId.getId(""String_Node_Str"")).getVersion().replace(""String_Node_Str"",""String_Node_Str"")) <= 1411534) {
    result=""String_Node_Str"" + '\u0151' + ""String_Node_Str""+ '\u0185'+ ""String_Node_Str"";
  }
  assertPhpReferenceSignatureEquals(PhpFileType.INSTANCE,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",result);
}",0.91183879093199
15478,"@Nullable private static String getFileTemplateContent(@NotNull String filename){
  try {
    return StreamUtil.readText(PhpBundleFileFactory.class.getResourceAsStream(filename),""String_Node_Str"");
  }
 catch (  IOException e) {
    return null;
  }
}","@Nullable private static String getFileTemplateContent(@NotNull String filename){
  try {
    return StreamUtil.readText(PhpBundleFileFactory.class.getResourceAsStream(filename),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  IOException e) {
    return null;
  }
}",0.9177330895795248
15479,"public boolean isInstanceOf(@NotNull PhpClass subjectClass,@NotNull PhpClass expectedClass){
  if (subjectClass == expectedClass) {
    return true;
  }
  if (expectedClass.isInterface()) {
    return isImplementationOfInterface(subjectClass,expectedClass);
  }
  if (null == subjectClass.getSuperClass()) {
    return false;
  }
  return isInstanceOf(subjectClass.getSuperClass(),expectedClass);
}","public boolean isInstanceOf(@NotNull PhpClass subjectClass,@NotNull PhpClass expectedClass){
  if (subjectClass == expectedClass || PhpElementsUtil.isEqualClassName(subjectClass,expectedClass)) {
    return true;
  }
  if (expectedClass.isInterface()) {
    return isImplementationOfInterface(subjectClass,expectedClass);
  }
  if (null == subjectClass.getSuperClass()) {
    return false;
  }
  return isInstanceOf(subjectClass.getSuperClass(),expectedClass);
}",0.9255813953488372
15480,"/** 
 * Single resolve doesnt work if we have non unique class names in project context, so try a multiResolve and use first matched method
 */
@Nullable public static Method getMultiResolvedMethod(PsiReference psiReference){
  PsiElement resolvedReference=psiReference.resolve();
  if (resolvedReference instanceof Method) {
    return (Method)resolvedReference;
  }
  if (psiReference instanceof PsiPolyVariantReference) {
    for (    ResolveResult resolveResult : ((PsiPolyVariantReference)psiReference).multiResolve(false)) {
      PsiElement element=resolveResult.getElement();
      if (element instanceof Method) {
        return (Method)element;
      }
    }
  }
  return null;
}","/** 
 * Single resolve doesnt work if we have non unique class names in project context, so try a multiResolve
 */
@Nullable public static Method[] getMultiResolvedMethod(PsiReference psiReference){
  PsiElement resolvedReference=psiReference.resolve();
  if (resolvedReference instanceof Method) {
    return new Method[]{(Method)resolvedReference};
  }
  if (psiReference instanceof PsiPolyVariantReference) {
    Collection<Method> methods=new HashSet<Method>();
    for (    ResolveResult resolveResult : ((PsiPolyVariantReference)psiReference).multiResolve(false)) {
      PsiElement element=resolveResult.getElement();
      if (element instanceof Method) {
        methods.add((Method)element);
      }
    }
    if (methods.size() > 0) {
      return methods.toArray(new Method[methods.size()]);
    }
  }
  return null;
}",0.8071099407504937
15481,"/** 
 * Single resolve doesnt work if we have non unique class names in project context, so try a multiResolve and use first matched method
 */
@Nullable protected static Method getMultiResolvedMethod(PsiReference psiReference){
  PsiElement resolvedReference=psiReference.resolve();
  if (resolvedReference instanceof Method) {
    return (Method)resolvedReference;
  }
  if (psiReference instanceof PsiPolyVariantReference) {
    for (    ResolveResult resolveResult : ((PsiPolyVariantReference)psiReference).multiResolve(false)) {
      PsiElement element=resolveResult.getElement();
      if (element instanceof Method) {
        return (Method)element;
      }
    }
  }
  return null;
}","/** 
 * Single resolve doesnt work if we have non unique class names in project context, so try a multiResolve and use first matched method
 */
@Nullable public static Method getMultiResolvedMethod(PsiReference psiReference){
  PsiElement resolvedReference=psiReference.resolve();
  if (resolvedReference instanceof Method) {
    return (Method)resolvedReference;
  }
  if (psiReference instanceof PsiPolyVariantReference) {
    for (    ResolveResult resolveResult : ((PsiPolyVariantReference)psiReference).multiResolve(false)) {
      PsiElement element=resolveResult.getElement();
      if (element instanceof Method) {
        return (Method)element;
      }
    }
  }
  return null;
}",0.9905865314989138
15482,"public TwigTemplateCompletionContributor(){
  extend(CompletionType.BASIC,TwigHelper.getTemplateFileReferenceTagPattern(),new TemplateCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getPrintBlockFunctionPattern(""String_Node_Str"",""String_Node_Str""),new TemplateCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getTranslationPattern(""String_Node_Str"",""String_Node_Str""),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      TranslationStringMap map=TranslationIndex.getInstance(parameters.getPosition().getProject()).getTranslationMap();
      if (map == null) {
        return;
      }
      PsiElement psiElement=parameters.getPosition();
      String domainName=TwigUtil.getPsiElementTranslationDomain(psiElement);
      resultSet.addAllElements(TranslationUtil.getTranslationLookupElementsOnDomain(psiElement.getProject(),domainName));
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getTransDomainPattern(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      if (PsiElementUtils.getPrevSiblingOfType(parameters.getPosition(),PlatformPatterns.psiElement(TwigTokenTypes.IDENTIFIER).withText(PlatformPatterns.string().oneOf(""String_Node_Str"",""String_Node_Str""))) == null) {
        return;
      }
      resultSet.addAllElements(TranslationUtil.getTranslationDomainLookupElements(parameters.getPosition().getProject()));
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getBlockTagPattern(),new BlockCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getTemplateImportFileReferenceTagPattern(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      PsiElement psiElement=PsiElementUtils.getPrevSiblingOfType(parameters.getPosition(),getFromTemplateElement());
      if (psiElement == null) {
        return;
      }
      String templateName=psiElement.getText();
      Map<String,VirtualFile> twigFilesByName=TwigHelper.getTwigFilesByName(parameters.getPosition().getProject());
      if (!twigFilesByName.containsKey(templateName)) {
        return;
      }
      VirtualFile virtualFile=twigFilesByName.get(templateName);
      PsiFile psiFile=PsiManager.getInstance(psiElement.getProject()).findFile(virtualFile);
      if (psiFile != null) {
        for (        Map.Entry<String,String> entry : new TwigMarcoParser().getMacros(psiFile).entrySet()) {
          resultSet.addElement(LookupElementBuilder.create(entry.getKey()).withTypeText(entry.getValue(),true).withIcon(TwigIcons.TwigFileIcon));
        }
      }
    }
    private PsiElementPattern.Capture<PsiElement> getFromTemplateElement(){
      return PlatformPatterns.psiElement(TwigTokenTypes.STRING_TEXT).afterLeafSkipping(PlatformPatterns.or(PlatformPatterns.psiElement(PsiWhiteSpace.class),PlatformPatterns.psiElement(TwigTokenTypes.WHITE_SPACE),PlatformPatterns.psiElement(TwigTokenTypes.SINGLE_QUOTE),PlatformPatterns.psiElement(TwigTokenTypes.DOUBLE_QUOTE)),PlatformPatterns.psiElement(TwigTokenTypes.TAG_NAME).withText(PlatformPatterns.string().oneOf(""String_Node_Str""))).withLanguage(TwigLanguage.INSTANCE);
    }
  }
);
  extend(CompletionType.SMART,PlatformPatterns.psiElement().withParent(PlatformPatterns.psiElement().withLanguage(TwigLanguage.INSTANCE)),new FilterCompletionProvider());
  extend(CompletionType.BASIC,PlatformPatterns.psiElement().withParent(PlatformPatterns.psiElement().withLanguage(TwigLanguage.INSTANCE)),new FilterCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getCompletablePattern(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      PsiElement psiElement=parameters.getPosition().getOriginalElement();
      for (      Map.Entry<String,TwigExtension> entry : new TwigExtensionParser(parameters.getPosition().getProject()).getFunctions().entrySet()) {
        resultSet.addElement(new TwigExtensionLookupElement(psiElement.getProject(),entry.getKey(),entry.getValue()));
      }
      for (      TwigMacro twigMacro : TwigUtil.getImportedMacros(psiElement.getContainingFile())) {
        resultSet.addElement(LookupElementBuilder.create(twigMacro.getName()).withTypeText(twigMacro.getTemplate(),true).withIcon(TwigIcons.TwigFileIcon).withInsertHandler(FunctionInsertHandler.getInstance()));
      }
      for (      TwigMacro twigMacro : TwigUtil.getImportedMacrosNamespaces(psiElement.getContainingFile())) {
        resultSet.addElement(LookupElementBuilder.create(twigMacro.getName()).withTypeText(twigMacro.getTemplate(),true).withIcon(TwigIcons.TwigFileIcon).withInsertHandler(FunctionInsertHandler.getInstance()));
      }
      for (      TwigSet twigSet : TwigUtil.getSetDeclaration(psiElement.getContainingFile())) {
        resultSet.addElement(LookupElementBuilder.create(twigSet.getName()).withTypeText(""String_Node_Str"",true));
      }
      for (      Map.Entry<String,PsiVariable> entry : TwigTypeResolveUtil.collectScopeVariables(parameters.getOriginalPosition()).entrySet()) {
        resultSet.addElement(LookupElementBuilder.create(entry.getKey()).withTypeText(TwigTypeResolveUtil.getTypeDisplayName(psiElement.getProject(),entry.getValue().getTypes()),true).withIcon(PhpIcons.CLASS));
      }
      for (      Map.Entry<String,TwigGlobalVariable> entry : ServiceXmlParserFactory.getInstance(psiElement.getProject(),TwigGlobalsServiceParser.class).getTwigGlobals().entrySet()) {
        if (entry.getValue().getTwigGlobalEnum() == TwigGlobalEnum.TEXT) {
          resultSet.addElement(LookupElementBuilder.create(entry.getKey()).withTypeText(entry.getValue().getValue(),true).withIcon(PhpIcons.CONSTANT));
        }
      }
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getVariableTypePattern(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      PsiElement psiElement=parameters.getOriginalPosition();
      if (psiElement == null) {
        return;
      }
      for (      Map.Entry<String,PsiVariable> entry : TwigTypeResolveUtil.collectScopeVariables(parameters.getOriginalPosition()).entrySet()) {
        resultSet.addElement(LookupElementBuilder.create(entry.getKey()).withTypeText(TwigTypeResolveUtil.getTypeDisplayName(psiElement.getProject(),entry.getValue().getTypes())).withIcon(PhpIcons.CLASS));
      }
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getTransDefaultDomain(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      TranslationStringMap map=TranslationIndex.getInstance(parameters.getPosition().getProject()).getTranslationMap();
      for (      String domainKey : map.getDomainList()) {
        resultSet.addElement(new TranslatorLookupElement(domainKey,domainKey));
      }
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getPrintBlockFunctionPattern(""String_Node_Str""),new ControllerCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getAutocompletableAssetPattern(),new AssetCompletionProvider().setAssetParser(new AssetDirectoryReader()));
  extend(CompletionType.BASIC,TwigHelper.getAutocompletableAssetTag(""String_Node_Str""),new AssetCompletionProvider().setAssetParser(new AssetDirectoryReader().setFilterExtension(TwigHelper.CSS_FILES_EXTENSIONS).setIncludeBundleDir(true)));
  extend(CompletionType.BASIC,TwigHelper.getAutocompletableAssetTag(""String_Node_Str""),new AssetCompletionProvider().setAssetParser(new AssetDirectoryReader().setFilterExtension(TwigHelper.JS_FILES_EXTENSIONS).setIncludeBundleDir(true)));
  extend(CompletionType.BASIC,TwigHelper.getAutocompletableRoutePattern(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      resultSet.addAllElements(RouteHelper.getRoutesLookupElements(parameters.getPosition().getProject()));
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getPathAfterLeafPattern(),new PathParameterCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getTypeCompletionPattern(),new TypeCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getTwigTypeDocBlock(),new TwigDocBlockTypeClassCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getTwigDocBlockMatchPattern(ControllerDocVariableCollector.DOC_PATTERN_COMPLETION),new ControllerCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getFormThemeFileTag(),new FormThemeCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getPrintBlockFunctionPattern(""String_Node_Str""),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      PsiElement position=parameters.getPosition();
      if (!Symfony2ProjectComponent.isEnabled(position)) {
        return;
      }
      PhpIndex instance=PhpIndex.getInstance(position.getProject());
      for (      String constant : instance.getAllConstantNames(PrefixMatcher.ALWAYS_TRUE)) {
        resultSet.addElement(LookupElementBuilder.create(constant).withIcon(PhpIcons.CONSTANT));
      }
      int foo=parameters.getOffset() - position.getTextRange().getStartOffset();
      String before=position.getText().substring(0,foo);
      String[] parts=before.split(""String_Node_Str"");
      if (parts.length >= 1) {
        PhpClass phpClass=PhpElementsUtil.getClassInterface(position.getProject(),parts[0]);
        if (phpClass != null && phpClass.getPresentableFQN() != null) {
          for (          Field field : phpClass.getFields()) {
            if (field.isConstant()) {
              resultSet.addElement(LookupElementBuilder.create(phpClass.getPresentableFQN() + ""String_Node_Str"" + field.getName()).withIcon(PhpIcons.CONSTANT));
            }
          }
        }
      }
    }
  }
);
}","public TwigTemplateCompletionContributor(){
  extend(CompletionType.BASIC,TwigHelper.getTemplateFileReferenceTagPattern(),new TemplateCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getPrintBlockFunctionPattern(""String_Node_Str"",""String_Node_Str""),new TemplateCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getTranslationPattern(""String_Node_Str"",""String_Node_Str""),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      TranslationStringMap map=TranslationIndex.getInstance(parameters.getPosition().getProject()).getTranslationMap();
      if (map == null) {
        return;
      }
      PsiElement psiElement=parameters.getPosition();
      String domainName=TwigUtil.getPsiElementTranslationDomain(psiElement);
      resultSet.addAllElements(TranslationUtil.getTranslationLookupElementsOnDomain(psiElement.getProject(),domainName));
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getTransDomainPattern(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      if (PsiElementUtils.getPrevSiblingOfType(parameters.getPosition(),PlatformPatterns.psiElement(TwigTokenTypes.IDENTIFIER).withText(PlatformPatterns.string().oneOf(""String_Node_Str"",""String_Node_Str""))) == null) {
        return;
      }
      resultSet.addAllElements(TranslationUtil.getTranslationDomainLookupElements(parameters.getPosition().getProject()));
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getBlockTagPattern(),new BlockCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getTemplateImportFileReferenceTagPattern(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      PsiElement psiElement=PsiElementUtils.getPrevSiblingOfType(parameters.getPosition(),getFromTemplateElement());
      if (psiElement == null) {
        return;
      }
      String templateName=psiElement.getText();
      Map<String,VirtualFile> twigFilesByName=TwigHelper.getTwigFilesByName(parameters.getPosition().getProject());
      if (!twigFilesByName.containsKey(templateName)) {
        return;
      }
      VirtualFile virtualFile=twigFilesByName.get(templateName);
      PsiFile psiFile=PsiManager.getInstance(psiElement.getProject()).findFile(virtualFile);
      if (psiFile != null) {
        for (        Map.Entry<String,String> entry : new TwigMarcoParser().getMacros(psiFile).entrySet()) {
          resultSet.addElement(LookupElementBuilder.create(entry.getKey()).withTypeText(entry.getValue(),true).withIcon(TwigIcons.TwigFileIcon));
        }
      }
    }
    private PsiElementPattern.Capture<PsiElement> getFromTemplateElement(){
      return PlatformPatterns.psiElement(TwigTokenTypes.STRING_TEXT).afterLeafSkipping(PlatformPatterns.or(PlatformPatterns.psiElement(PsiWhiteSpace.class),PlatformPatterns.psiElement(TwigTokenTypes.WHITE_SPACE),PlatformPatterns.psiElement(TwigTokenTypes.SINGLE_QUOTE),PlatformPatterns.psiElement(TwigTokenTypes.DOUBLE_QUOTE)),PlatformPatterns.psiElement(TwigTokenTypes.TAG_NAME).withText(PlatformPatterns.string().oneOf(""String_Node_Str""))).withLanguage(TwigLanguage.INSTANCE);
    }
  }
);
  extend(CompletionType.SMART,PlatformPatterns.psiElement().withParent(PlatformPatterns.psiElement().withLanguage(TwigLanguage.INSTANCE)),new FilterCompletionProvider());
  extend(CompletionType.BASIC,PlatformPatterns.psiElement().withParent(PlatformPatterns.psiElement().withLanguage(TwigLanguage.INSTANCE)),new FilterCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getCompletablePattern(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      PsiElement psiElement=parameters.getPosition().getOriginalElement();
      for (      Map.Entry<String,TwigExtension> entry : new TwigExtensionParser(parameters.getPosition().getProject()).getFunctions().entrySet()) {
        resultSet.addElement(new TwigExtensionLookupElement(psiElement.getProject(),entry.getKey(),entry.getValue()));
      }
      for (      TwigMacro twigMacro : TwigUtil.getImportedMacros(psiElement.getContainingFile())) {
        resultSet.addElement(LookupElementBuilder.create(twigMacro.getName()).withTypeText(twigMacro.getTemplate(),true).withIcon(TwigIcons.TwigFileIcon).withInsertHandler(FunctionInsertHandler.getInstance()));
      }
      for (      TwigMacro twigMacro : TwigUtil.getImportedMacrosNamespaces(psiElement.getContainingFile())) {
        resultSet.addElement(LookupElementBuilder.create(twigMacro.getName()).withTypeText(twigMacro.getTemplate(),true).withIcon(TwigIcons.TwigFileIcon).withInsertHandler(FunctionInsertHandler.getInstance()));
      }
      for (      TwigSet twigSet : TwigUtil.getSetDeclaration(psiElement.getContainingFile())) {
        resultSet.addElement(LookupElementBuilder.create(twigSet.getName()).withTypeText(""String_Node_Str"",true));
      }
      for (      Map.Entry<String,PsiVariable> entry : TwigTypeResolveUtil.collectScopeVariables(parameters.getOriginalPosition()).entrySet()) {
        resultSet.addElement(LookupElementBuilder.create(entry.getKey()).withTypeText(TwigTypeResolveUtil.getTypeDisplayName(psiElement.getProject(),entry.getValue().getTypes()),true).withIcon(PhpIcons.CLASS));
      }
      for (      Map.Entry<String,TwigGlobalVariable> entry : ServiceXmlParserFactory.getInstance(psiElement.getProject(),TwigGlobalsServiceParser.class).getTwigGlobals().entrySet()) {
        if (entry.getValue().getTwigGlobalEnum() == TwigGlobalEnum.TEXT) {
          resultSet.addElement(LookupElementBuilder.create(entry.getKey()).withTypeText(entry.getValue().getValue(),true).withIcon(PhpIcons.CONSTANT));
        }
      }
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getVariableTypePattern(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      PsiElement psiElement=parameters.getOriginalPosition();
      if (psiElement == null) {
        return;
      }
      for (      Map.Entry<String,PsiVariable> entry : TwigTypeResolveUtil.collectScopeVariables(parameters.getOriginalPosition()).entrySet()) {
        resultSet.addElement(LookupElementBuilder.create(entry.getKey()).withTypeText(TwigTypeResolveUtil.getTypeDisplayName(psiElement.getProject(),entry.getValue().getTypes())).withIcon(PhpIcons.CLASS));
      }
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getTransDefaultDomain(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      TranslationStringMap map=TranslationIndex.getInstance(parameters.getPosition().getProject()).getTranslationMap();
      for (      String domainKey : map.getDomainList()) {
        resultSet.addElement(new TranslatorLookupElement(domainKey,domainKey));
      }
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getPrintBlockFunctionPattern(""String_Node_Str""),new ControllerCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getAutocompletableAssetPattern(),new AssetCompletionProvider().setAssetParser(new AssetDirectoryReader()));
  extend(CompletionType.BASIC,TwigHelper.getAutocompletableAssetTag(""String_Node_Str""),new AssetCompletionProvider().setAssetParser(new AssetDirectoryReader().setFilterExtension(TwigHelper.CSS_FILES_EXTENSIONS).setIncludeBundleDir(true)));
  extend(CompletionType.BASIC,TwigHelper.getAutocompletableAssetTag(""String_Node_Str""),new AssetCompletionProvider().setAssetParser(new AssetDirectoryReader().setFilterExtension(TwigHelper.JS_FILES_EXTENSIONS).setIncludeBundleDir(true)));
  extend(CompletionType.BASIC,TwigHelper.getAutocompletableRoutePattern(),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
        return;
      }
      resultSet.addAllElements(RouteHelper.getRoutesLookupElements(parameters.getPosition().getProject()));
    }
  }
);
  extend(CompletionType.BASIC,TwigHelper.getPathAfterLeafPattern(),new PathParameterCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getTypeCompletionPattern(),new TypeCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getTwigTypeDocBlock(),new PhpClassCompletionProvider(true));
  extend(CompletionType.BASIC,TwigHelper.getTwigDocBlockMatchPattern(ControllerDocVariableCollector.DOC_PATTERN_COMPLETION),new ControllerCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getFormThemeFileTag(),new FormThemeCompletionProvider());
  extend(CompletionType.BASIC,TwigHelper.getPrintBlockFunctionPattern(""String_Node_Str""),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet resultSet){
      PsiElement position=parameters.getPosition();
      if (!Symfony2ProjectComponent.isEnabled(position)) {
        return;
      }
      PhpIndex instance=PhpIndex.getInstance(position.getProject());
      for (      String constant : instance.getAllConstantNames(PrefixMatcher.ALWAYS_TRUE)) {
        resultSet.addElement(LookupElementBuilder.create(constant).withIcon(PhpIcons.CONSTANT));
      }
      int foo=parameters.getOffset() - position.getTextRange().getStartOffset();
      String before=position.getText().substring(0,foo);
      String[] parts=before.split(""String_Node_Str"");
      if (parts.length >= 1) {
        PhpClass phpClass=PhpElementsUtil.getClassInterface(position.getProject(),parts[0]);
        if (phpClass != null && phpClass.getPresentableFQN() != null) {
          for (          Field field : phpClass.getFields()) {
            if (field.isConstant()) {
              resultSet.addElement(LookupElementBuilder.create(phpClass.getPresentableFQN() + ""String_Node_Str"" + field.getName()).withIcon(PhpIcons.CONSTANT));
            }
          }
        }
      }
    }
  }
);
}",0.9989776414633064
15483,"public void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,final @NotNull CompletionResultSet resultSet){
  PsiElement psiElement=parameters.getOriginalPosition();
  if (psiElement == null || !Symfony2ProjectComponent.isEnabled(psiElement)) {
    return;
  }
  PhpElementsUtil.visitNamespaceClassForCompletion(psiElement,parameters.getOffset(),new PhpElementsUtil.ClassForCompletionVisitor(){
    @Override public void visit(    PhpClass phpClass,    String presentableFQN,    String prefix){
      resultSet.addElement(LookupElementBuilder.create(prefix + presentableFQN).withIcon(phpClass.getIcon()));
    }
  }
);
  for (  String className : PhpIndex.getInstance(psiElement.getProject()).getAllClassNames(resultSet.getPrefixMatcher())) {
    resultSet.addElement(new PhpLookupElement(className,PhpClassIndex.KEY,parameters.getOriginalFile().getProject(),PhpClassReferenceInsertHandler.getInstance()));
  }
  for (  Map.Entry<String,ContainerParameter> entry : ContainerCollectionResolver.getParameters(psiElement.getProject()).entrySet()) {
    resultSet.addElement(new ParameterLookupElement(entry.getValue(),ParameterPercentWrapInsertHandler.getInstance(),psiElement.getText()));
  }
}","public void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,final @NotNull CompletionResultSet resultSet){
  PsiElement psiElement=parameters.getOriginalPosition();
  if (psiElement == null || !Symfony2ProjectComponent.isEnabled(psiElement)) {
    return;
  }
  PhpClassCompletionProvider.addClassCompletion(parameters,resultSet,psiElement,false);
  for (  Map.Entry<String,ContainerParameter> entry : ContainerCollectionResolver.getParameters(psiElement.getProject()).entrySet()) {
    resultSet.addElement(new ParameterLookupElement(entry.getValue(),ParameterPercentWrapInsertHandler.getInstance(),psiElement.getText()));
  }
}",0.6207627118644068
15484,"public void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,@NotNull CompletionResultSet resultSet){
  if (!Symfony2ProjectComponent.isEnabled(parameters.getPosition())) {
    return;
  }
  PhpIndex phpIndex=PhpIndex.getInstance(parameters.getOriginalFile().getProject());
  for (  String className : phpIndex.getAllClassNames(resultSet.getPrefixMatcher())) {
    resultSet.addElement(new PhpLookupElement(className,PhpClassIndex.KEY,parameters.getOriginalFile().getProject(),PhpClassReferenceInsertHandler.getInstance()));
  }
}","public void addCompletions(@NotNull CompletionParameters parameters,ProcessingContext context,final @NotNull CompletionResultSet resultSet){
  PsiElement psiElement=parameters.getOriginalPosition();
  if (!Symfony2ProjectComponent.isEnabled(psiElement)) {
    return;
  }
  addClassCompletion(parameters,resultSet,psiElement,withInterface);
}",0.4596685082872928
15485,"@Nullable public static YAMLKeyValue getRootKey(PsiFile psiFile,String keyName){
  if (psiFile.getFirstChild() instanceof YAMLDocument) {
    return YamlKeyFinder.find(psiFile.getFirstChild(),keyName);
  }
  return null;
}","@Nullable public static YAMLKeyValue getRootKey(PsiFile psiFile,String keyName){
  YAMLDocument yamlDocument=PsiTreeUtil.getChildOfType(psiFile,YAMLDocument.class);
  if (yamlDocument != null) {
    return YamlKeyFinder.find(yamlDocument,keyName);
  }
  return null;
}",0.6530612244897959
15486,"/** 
 * $template['var'] = $foo
 */
private static Map<String,PsiVariable> getTypesOnArrayIndex(ArrayAccessExpression arrayAccessExpression){
  HashMap<String,PsiVariable> collectedTypes=new HashMap<String,PsiVariable>();
  ArrayIndex arrayIndex=arrayAccessExpression.getIndex();
  if (arrayIndex != null && arrayIndex.getValue() instanceof StringLiteralExpression) {
    String variableName=((StringLiteralExpression)arrayIndex.getValue()).getContents();
    Set<String> variableTypes=new HashSet<String>();
    if (arrayAccessExpression.getParent() instanceof AssignmentExpression) {
      PsiElement arrayValue=((AssignmentExpression)arrayAccessExpression.getParent()).getValue();
      if (arrayValue instanceof PhpTypedElement) {
        variableTypes=((PhpTypedElement)arrayValue).getType().getTypes();
      }
    }
    collectedTypes.put(variableName,new PsiVariable(variableTypes,((AssignmentExpression)arrayAccessExpression.getParent()).getValue()));
  }
  return collectedTypes;
}","/** 
 * $template['var'] = $foo
 */
private static Map<String,PsiVariable> getTypesOnArrayIndex(ArrayAccessExpression arrayAccessExpression){
  HashMap<String,PsiVariable> collectedTypes=new HashMap<String,PsiVariable>();
  ArrayIndex arrayIndex=arrayAccessExpression.getIndex();
  if (arrayIndex != null && arrayIndex.getValue() instanceof StringLiteralExpression) {
    String variableName=((StringLiteralExpression)arrayIndex.getValue()).getContents();
    Set<String> variableTypes=new HashSet<String>();
    PsiElement parent=arrayAccessExpression.getParent();
    if (parent instanceof AssignmentExpression) {
      PsiElement arrayValue=((AssignmentExpression)parent).getValue();
      if (arrayValue instanceof PhpTypedElement) {
        variableTypes=((PhpTypedElement)arrayValue).getType().getTypes();
      }
      collectedTypes.put(variableName,new PsiVariable(variableTypes,((AssignmentExpression)parent).getValue()));
    }
 else {
      collectedTypes.put(variableName,new PsiVariable(variableTypes,null));
    }
  }
  return collectedTypes;
}",0.7736585365853659
15487,"public Map<String,String> getLocalParameterMap(PsiElement psiElement){
  Map<String,String> map=new HashMap<String,String>();
  if (!(psiElement.getContainingFile().getFirstChild() instanceof YAMLDocument)) {
    return map;
  }
  YAMLDocument yamlDocument=(YAMLDocument)psiElement.getContainingFile().getFirstChild();
  YAMLKeyValue[] yamlKeys=PsiTreeUtil.getChildrenOfType(yamlDocument,YAMLKeyValue.class);
  if (yamlKeys == null) {
    return map;
  }
  for (  YAMLKeyValue yamlKeyValue : yamlKeys) {
    String yamlConfigKey=yamlKeyValue.getName();
    if (yamlConfigKey != null && yamlConfigKey.equals(""String_Node_Str"")) {
      YAMLKeyValue yamlParameter[]=PsiTreeUtil.getChildrenOfType(yamlKeyValue.getValue(),YAMLKeyValue.class);
      if (yamlParameter != null) {
        for (        YAMLKeyValue yamlParameterArray : yamlParameter) {
          String keyName=yamlParameterArray.getKeyText();
          if (StringUtils.isNotBlank(keyName)) {
            PsiElement value=yamlParameterArray.getValue();
            if (value != null) {
              String valueText=value.getText();
              if (StringUtils.isNotBlank(valueText)) {
                map.put(keyName.toLowerCase(),PsiElementUtils.trimQuote(valueText));
              }
            }
          }
        }
      }
    }
  }
  return map;
}","public Map<String,String> getLocalParameterMap(PsiFile psiFile){
  Map<String,String> map=new HashMap<String,String>();
  YAMLDocument yamlDocument=PsiTreeUtil.getChildOfType(psiFile,YAMLDocument.class);
  if (yamlDocument == null) {
    return map;
  }
  YAMLKeyValue[] yamlKeys=PsiTreeUtil.getChildrenOfType(yamlDocument,YAMLKeyValue.class);
  if (yamlKeys == null) {
    return map;
  }
  for (  YAMLKeyValue yamlKeyValue : yamlKeys) {
    String yamlConfigKey=yamlKeyValue.getName();
    if (yamlConfigKey != null && yamlConfigKey.equals(""String_Node_Str"")) {
      YAMLKeyValue yamlParameter[]=PsiTreeUtil.getChildrenOfType(yamlKeyValue.getValue(),YAMLKeyValue.class);
      if (yamlParameter != null) {
        for (        YAMLKeyValue yamlParameterArray : yamlParameter) {
          String keyName=yamlParameterArray.getKeyText();
          if (StringUtils.isNotBlank(keyName)) {
            PsiElement value=yamlParameterArray.getValue();
            if (value != null) {
              String valueText=value.getText();
              if (StringUtils.isNotBlank(valueText)) {
                map.put(keyName.toLowerCase(),PsiElementUtils.trimQuote(valueText));
              }
            }
          }
        }
      }
    }
  }
  return map;
}",0.8923435678196657
15488,"@NotNull public Map<String,ContainerService> getLocalServiceMap(PsiElement psiElement){
  Map<String,ContainerService> services=new HashMap<String,ContainerService>();
  if (!(psiElement.getContainingFile().getFirstChild() instanceof YAMLDocument)) {
    return services;
  }
  YAMLDocument yamlDocument=(YAMLDocument)psiElement.getContainingFile().getFirstChild();
  YAMLKeyValue[] yamlKeys=PsiTreeUtil.getChildrenOfType(yamlDocument,YAMLKeyValue.class);
  if (yamlKeys == null) {
    return services;
  }
  for (  YAMLKeyValue yamlKeyValue : yamlKeys) {
    String yamlConfigKey=yamlKeyValue.getName();
    if (yamlConfigKey != null && yamlConfigKey.equals(""String_Node_Str"")) {
      YAMLKeyValue yamlServices[]=PsiTreeUtil.getChildrenOfType(yamlKeyValue.getValue(),YAMLKeyValue.class);
      if (yamlServices != null) {
        for (        YAMLKeyValue yamlServiceKeyValue : yamlServices) {
          String serviceName=yamlServiceKeyValue.getName();
          String serviceClass=null;
          boolean isPrivate=false;
          YAMLKeyValue[] yamlServiceKeys=PsiTreeUtil.getChildrenOfType(yamlServiceKeyValue.getValue(),YAMLKeyValue.class);
          if (yamlServiceKeys != null) {
            String serviceClassName=this.getKeyValue(yamlServiceKeyValue,""String_Node_Str"");
            if (serviceClassName != null) {
              serviceClass=PsiElementUtils.trimQuote(serviceClassName);
              if (StringUtils.isBlank(serviceClass)) {
                serviceClass=null;
              }
            }
            String serviceIsPublic=this.getKeyValue(yamlServiceKeyValue,""String_Node_Str"");
            if (serviceIsPublic != null && serviceIsPublic.equals(""String_Node_Str"")) {
              isPrivate=true;
            }
            String serviceAlias=this.getKeyValue(yamlServiceKeyValue,""String_Node_Str"");
            if (serviceAlias != null && serviceAlias.length() > 0) {
              serviceName=serviceAlias;
              if (serviceClass == null && services.containsKey(serviceName)) {
                serviceClass=services.get(serviceName).getClassName();
              }
            }
          }
          if (StringUtils.isNotBlank(serviceName)) {
            services.put(serviceName,new ContainerService(serviceName,serviceClass,true,isPrivate));
          }
        }
      }
    }
  }
  return services;
}","@NotNull public Map<String,ContainerService> getLocalServiceMap(PsiFile psiFile){
  Map<String,ContainerService> services=new HashMap<String,ContainerService>();
  YAMLDocument yamlDocument=PsiTreeUtil.getChildOfType(psiFile,YAMLDocument.class);
  if (yamlDocument == null) {
    return services;
  }
  YAMLKeyValue[] yamlKeys=PsiTreeUtil.getChildrenOfType(yamlDocument,YAMLKeyValue.class);
  if (yamlKeys == null) {
    return services;
  }
  for (  YAMLKeyValue yamlKeyValue : yamlKeys) {
    String yamlConfigKey=yamlKeyValue.getName();
    if (yamlConfigKey != null && yamlConfigKey.equals(""String_Node_Str"")) {
      YAMLKeyValue yamlServices[]=PsiTreeUtil.getChildrenOfType(yamlKeyValue.getValue(),YAMLKeyValue.class);
      if (yamlServices != null) {
        for (        YAMLKeyValue yamlServiceKeyValue : yamlServices) {
          String serviceName=yamlServiceKeyValue.getName();
          String serviceClass=null;
          boolean isPrivate=false;
          YAMLKeyValue[] yamlServiceKeys=PsiTreeUtil.getChildrenOfType(yamlServiceKeyValue.getValue(),YAMLKeyValue.class);
          if (yamlServiceKeys != null) {
            String serviceClassName=this.getKeyValue(yamlServiceKeyValue,""String_Node_Str"");
            if (serviceClassName != null) {
              serviceClass=PsiElementUtils.trimQuote(serviceClassName);
              if (StringUtils.isBlank(serviceClass)) {
                serviceClass=null;
              }
            }
            String serviceIsPublic=this.getKeyValue(yamlServiceKeyValue,""String_Node_Str"");
            if (serviceIsPublic != null && serviceIsPublic.equals(""String_Node_Str"")) {
              isPrivate=true;
            }
            String serviceAlias=this.getKeyValue(yamlServiceKeyValue,""String_Node_Str"");
            if (serviceAlias != null && serviceAlias.length() > 0) {
              serviceName=serviceAlias;
              if (serviceClass == null && services.containsKey(serviceName)) {
                serviceClass=services.get(serviceName).getClassName();
              }
            }
          }
          if (StringUtils.isNotBlank(serviceName)) {
            services.put(serviceName,new ContainerService(serviceName,serviceClass,true,isPrivate));
          }
        }
      }
    }
  }
  return services;
}",0.939753832865472
15489,"public ServiceMap getServicesMap(){
  if (null != servicesMap) {
    return servicesMap;
  }
  String defaultServiceMapFilePath=getPath(project,Settings.getInstance(project).pathToProjectContainer);
  File xmlFile=new File(defaultServiceMapFilePath);
  if (!xmlFile.exists()) {
    return new ServiceMap();
  }
  Long xmlFileLastModified=xmlFile.lastModified();
  if (xmlFileLastModified.equals(servicesMapLastModified)) {
    return servicesMap;
  }
  try {
    ServiceMapParser serviceMapParser=new ServiceMapParser();
    servicesMap=serviceMapParser.parse(xmlFile);
    servicesMapLastModified=xmlFileLastModified;
    return servicesMap;
  }
 catch (  SAXException ignored) {
  }
catch (  IOException ignored) {
  }
catch (  ParserConfigurationException ignored) {
  }
  return new ServiceMap();
}","public ServiceMap getServicesMap(){
  String defaultServiceMapFilePath=getPath(project,Settings.getInstance(project).pathToProjectContainer);
  File xmlFile=new File(defaultServiceMapFilePath);
  if (!xmlFile.exists()) {
    return new ServiceMap();
  }
  Long xmlFileLastModified=xmlFile.lastModified();
  if (xmlFileLastModified.equals(servicesMapLastModified)) {
    return servicesMap;
  }
  try {
    ServiceMapParser serviceMapParser=new ServiceMapParser();
    servicesMap=serviceMapParser.parse(xmlFile);
    servicesMapLastModified=xmlFileLastModified;
    return servicesMap;
  }
 catch (  SAXException ignored) {
  }
catch (  IOException ignored) {
  }
catch (  ParserConfigurationException ignored) {
  }
  return new ServiceMap();
}",0.9631544925662572
15490,"public ServiceMap getServicesMap(){
  String defaultServiceMapFilePath=Settings.getInstance(project).pathToProjectContainer;
  if (!defaultServiceMapFilePath.startsWith(""String_Node_Str"")) {
    defaultServiceMapFilePath=project.getBasePath() + ""String_Node_Str"" + defaultServiceMapFilePath;
  }
  File xmlFile=new File(defaultServiceMapFilePath);
  if (!xmlFile.exists()) {
    return new ServiceMap();
  }
  Long xmlFileLastModified=xmlFile.lastModified();
  if (xmlFileLastModified.equals(servicesMapLastModified)) {
    return servicesMap;
  }
  try {
    ServiceMapParser serviceMapParser=new ServiceMapParser();
    servicesMap=serviceMapParser.parse(xmlFile);
    servicesMapLastModified=xmlFileLastModified;
    return servicesMap;
  }
 catch (  SAXException ignored) {
  }
catch (  IOException ignored) {
  }
catch (  ParserConfigurationException ignored) {
  }
  return new ServiceMap();
}","public ServiceMap getServicesMap(){
  String defaultServiceMapFilePath=Settings.getInstance(project).pathToProjectContainer;
  if (!FileUtil.isAbsolute(defaultServiceMapFilePath)) {
    defaultServiceMapFilePath=project.getBasePath() + ""String_Node_Str"" + defaultServiceMapFilePath;
  }
  File xmlFile=new File(defaultServiceMapFilePath);
  if (!xmlFile.exists()) {
    return new ServiceMap();
  }
  Long xmlFileLastModified=xmlFile.lastModified();
  if (xmlFileLastModified.equals(servicesMapLastModified)) {
    return servicesMap;
  }
  try {
    ServiceMapParser serviceMapParser=new ServiceMapParser();
    servicesMap=serviceMapParser.parse(xmlFile);
    servicesMapLastModified=xmlFileLastModified;
    return servicesMap;
  }
 catch (  SAXException ignored) {
  }
catch (  IOException ignored) {
  }
catch (  ParserConfigurationException ignored) {
  }
  return new ServiceMap();
}",0.9457797652319732
15491,"@Nullable @Override public PhpType getType(PsiElement e){
  if (!isContainerGetCall(e)) {
    return null;
  }
  String serviceId=getServiceId((MethodReferenceImpl)e);
  if (null == serviceId) {
    return null;
  }
  Map<String,String> serviceMap=getServicesMap(e.getProject());
  String serviceClass=serviceMap.get(serviceId);
  if (null == serviceClass) {
    return null;
  }
  return new PhpType().add(serviceClass);
}","@Nullable @Override public PhpType getType(PsiElement e){
  if (DumbService.getInstance(e.getProject()).isDumb()) {
    return null;
  }
  if (!isContainerGetCall(e)) {
    return null;
  }
  String serviceId=getServiceId((MethodReferenceImpl)e);
  if (null == serviceId) {
    return null;
  }
  Map<String,String> serviceMap=getServicesMap(e.getProject());
  String serviceClass=serviceMap.get(serviceId);
  if (null == serviceClass) {
    return null;
  }
  return new PhpType().add(serviceClass);
}",0.9145945945945946
15492,"@Override public void onTextChanged(CharSequence s,int start,int before,int end){
  if (start == 0 && before == 1 && s.length() == 0) {
    if (delegate != null) {
      delegate.focusOnPreviousField(this);
    }
  }
 else   if (!s.equals(lastValue)) {
    lastValue=s;
    textChanged(s,start,before,end);
  }
}","@Override public void onTextChanged(CharSequence s,int start,int before,int end){
  if (start == 0 && before == 1 && s.length() == 0) {
    if (delegate != null) {
      delegate.focusOnPreviousField(this);
    }
  }
 else {
    String tmp=String.valueOf(s);
    if (!tmp.equals(lastValue)) {
      lastValue=tmp;
      textChanged(s,start,before,end);
    }
  }
}",0.908284023668639
15493,"private void closeStream(){
  logger.debug(""String_Node_Str"");
  if (fsDataOutputStream != null) {
    try {
      fsDataOutputStream.close();
    }
 catch (    IOException e) {
      IOUtils.closeStream(fsDataOutputStream);
      throw new StoreException(""String_Node_Str"",e);
    }
  }
}","private void closeStream(){
  logger.debug(""String_Node_Str"");
  if (fsDataOutputStream != null) {
    try {
      fsDataOutputStream.close();
    }
 catch (    IOException e) {
      IOUtils.closeStream(fsDataOutputStream);
      throw new StoreException(""String_Node_Str"",e);
    }
 finally {
      fsDataOutputStream=null;
    }
  }
}",0.9105431309904152
15494,"@Override protected void doSerialize(Kryo kryo,Object object,Output output){
  kryo.register(object.getClass());
  kryo.writeObject(output,object);
}","@Override protected void doSerialize(Kryo kryo,Object object,Output output){
  kryo.writeObject(output,object);
}",0.8625954198473282
15495,"@Override protected Object doDeserialize(Kryo kryo,Input input,Class<? extends Object> type){
  kryo.register(type);
  return kryo.readObject(input,type);
}","@Override protected Object doDeserialize(Kryo kryo,Input input,Class<? extends Object> type){
  return kryo.readObject(input,type);
}",0.9204152249134948
15496,"private void closeStream(){
  logger.debug(""String_Node_Str"");
  if (fsDataOutputStream != null) {
    IOUtils.closeStream(fsDataOutputStream);
  }
}","private void closeStream(){
  logger.debug(""String_Node_Str"");
  if (fsDataOutputStream != null) {
    try {
      fsDataOutputStream.close();
    }
 catch (    IOException e) {
      IOUtils.closeStream(fsDataOutputStream);
      throw new StoreException(""String_Node_Str"",e);
    }
  }
}",0.6666666666666666
15497,"@Override protected boolean doSend(final Message<?> message,final long timeout){
  try {
    return retryTemplate.execute(new RetryCallback<Boolean,Exception>(){
      @Override public Boolean doWithRetry(      RetryContext context) throws Exception {
        return bridgeToModuleChannel.send(message,timeout);
      }
    }
,new RecoveryCallback<Boolean>(){
      /** 
 * Send the failed message to 'ERRORS:[name]'.
 */
      @Override public Boolean recover(      RetryContext context) throws Exception {
        logger.error(""String_Node_Str"",context.getLastThrowable());
        errorAdapter.handleMessage(getMessageBuilderFactory().fromMessage(message).setHeader(ERROR_HEADER,""String_Node_Str"" + name).build());
        return true;
      }
    }
);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return false;
  }
}","@Override protected boolean doSend(final Message<?> message,final long timeout){
  try {
    return retryTemplate.execute(new RetryCallback<Boolean,Exception>(){
      @Override public Boolean doWithRetry(      RetryContext context) throws Exception {
        return bridgeToModuleChannel.send(message,timeout);
      }
    }
,new RecoveryCallback<Boolean>(){
      /** 
 * Send the failed message to 'ERRORS:[name]'.
 */
      @Override public Boolean recover(      RetryContext context) throws Exception {
        logger.error(""String_Node_Str"" + name + ""String_Node_Str""+ context.getLastThrowable());
        errorAdapter.handleMessage(getMessageBuilderFactory().fromMessage(message).setHeader(ERROR_HEADER,""String_Node_Str"" + name).build());
        return true;
      }
    }
);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return false;
  }
}",0.9825783972125436
15498,"/** 
 * Send the failed message to 'ERRORS:[name]'.
 */
@Override public Boolean recover(RetryContext context) throws Exception {
  logger.error(""String_Node_Str"",context.getLastThrowable());
  errorAdapter.handleMessage(getMessageBuilderFactory().fromMessage(message).setHeader(ERROR_HEADER,""String_Node_Str"" + name).build());
  return true;
}","/** 
 * Send the failed message to 'ERRORS:[name]'.
 */
@Override public Boolean recover(RetryContext context) throws Exception {
  logger.error(""String_Node_Str"" + name + ""String_Node_Str""+ context.getLastThrowable());
  errorAdapter.handleMessage(getMessageBuilderFactory().fromMessage(message).setHeader(ERROR_HEADER,""String_Node_Str"" + name).build());
  return true;
}",0.9581005586592178
15499,"/** 
 * If retry is enabled, wrap the bridge channel in another that will invoke send() within the scope of a retry template.
 * @param name The name.
 * @param bridgeToModuleChannel The channel.
 * @param properties The properties.
 * @return The channel, or a wrapper.
 */
private MessageChannel addRetryIfNeeded(final String name,final DirectChannel bridgeToModuleChannel,RedisPropertiesAccessor properties){
  final RetryTemplate retryTemplate=buildRetryTemplateIfRetryEnabled(properties);
  if (retryTemplate == null) {
    return bridgeToModuleChannel;
  }
 else {
    DirectChannel channel=new DirectChannel(){
      @Override protected boolean doSend(      final Message<?> message,      final long timeout){
        try {
          return retryTemplate.execute(new RetryCallback<Boolean,Exception>(){
            @Override public Boolean doWithRetry(            RetryContext context) throws Exception {
              return bridgeToModuleChannel.send(message,timeout);
            }
          }
,new RecoveryCallback<Boolean>(){
            /** 
 * Send the failed message to 'ERRORS:[name]'.
 */
            @Override public Boolean recover(            RetryContext context) throws Exception {
              logger.error(""String_Node_Str"",context.getLastThrowable());
              errorAdapter.handleMessage(getMessageBuilderFactory().fromMessage(message).setHeader(ERROR_HEADER,""String_Node_Str"" + name).build());
              return true;
            }
          }
);
        }
 catch (        Exception e) {
          logger.error(""String_Node_Str"",e);
          return false;
        }
      }
    }
;
    channel.setBeanName(name + ""String_Node_Str"");
    return channel;
  }
}","/** 
 * If retry is enabled, wrap the bridge channel in another that will invoke send() within the scope of a retry template.
 * @param name The name.
 * @param bridgeToModuleChannel The channel.
 * @param properties The properties.
 * @return The channel, or a wrapper.
 */
private MessageChannel addRetryIfNeeded(final String name,final DirectChannel bridgeToModuleChannel,RedisPropertiesAccessor properties){
  final RetryTemplate retryTemplate=buildRetryTemplateIfRetryEnabled(properties);
  if (retryTemplate == null) {
    return bridgeToModuleChannel;
  }
 else {
    DirectChannel channel=new DirectChannel(){
      @Override protected boolean doSend(      final Message<?> message,      final long timeout){
        try {
          return retryTemplate.execute(new RetryCallback<Boolean,Exception>(){
            @Override public Boolean doWithRetry(            RetryContext context) throws Exception {
              return bridgeToModuleChannel.send(message,timeout);
            }
          }
,new RecoveryCallback<Boolean>(){
            /** 
 * Send the failed message to 'ERRORS:[name]'.
 */
            @Override public Boolean recover(            RetryContext context) throws Exception {
              logger.error(""String_Node_Str"" + name + ""String_Node_Str""+ context.getLastThrowable());
              errorAdapter.handleMessage(getMessageBuilderFactory().fromMessage(message).setHeader(ERROR_HEADER,""String_Node_Str"" + name).build());
              return true;
            }
          }
);
        }
 catch (        Exception e) {
          logger.error(""String_Node_Str"",e);
          return false;
        }
      }
    }
;
    channel.setBeanName(name + ""String_Node_Str"");
    return channel;
  }
}",0.9912177985948478
15500,"/** 
 * This method takes a definition String as input parameter. The method will filter out any parameters labeled   {@code --password} and will masked themusing the  {@code *} character.
 * @param definition Must not be empty
 * @return The definition string with masked passwords. Should never return null.
 */
public static String maskPasswordsInDefinition(String definition){
  Assert.hasText(definition,""String_Node_Str"");
  final StringBuffer output=new StringBuffer();
  final Matcher matcher=passwordParameterPattern.matcher(definition);
  while (matcher.find()) {
    matcher.appendReplacement(output,matcher.group(1) + matcher.group(3).replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  matcher.appendTail(output);
  return output.toString();
}","/** 
 * This method takes a definition String as input parameter. The method will filter out any parameters labeled   {@code --password} and will masked themusing the  {@code *} character.
 * @param definition Must not be empty
 * @return The definition string with masked passwords. Should never return null.
 */
public static String maskPasswordsInDefinition(String definition){
  Assert.hasText(definition,""String_Node_Str"");
  final StringBuffer output=new StringBuffer();
  final Matcher matcher=passwordParameterPattern.matcher(definition);
  while (matcher.find()) {
    final String passwordValue=matcher.group(3);
    final String maskedPasswordValue;
    if (passwordValue.startsWith(""String_Node_Str"") && passwordValue.endsWith(""String_Node_Str"")) {
      final String passwordValueWithoutQuotes=passwordValue.substring(1,passwordValue.length() - 1);
      maskedPasswordValue=""String_Node_Str"" + passwordValueWithoutQuotes.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    }
 else {
      maskedPasswordValue=matcher.group(3).replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    matcher.appendReplacement(output,matcher.group(1) + maskedPasswordValue);
  }
  matcher.appendTail(output);
  return output.toString();
}",0.6921170054536441
15501,"@Test public void testMaskStreamDefinitionWithUnicodePasswordParameter(){
  String maskedPassword=PasswordUtils.maskPasswordsInDefinition(""String_Node_Str"");
  assertEquals(""String_Node_Str"",maskedPassword);
}","/** 
 * The password parameter value in Russian (UTF) should be masked also.
 */
@Test public void testMaskStreamDefinitionWithUnicodePasswordParameter(){
  String maskedPassword=PasswordUtils.maskPasswordsInDefinition(""String_Node_Str"");
  assertEquals(""String_Node_Str"",maskedPassword);
}",0.8376753507014028
15502,"@Test public void testMaskStreamDefinitionWithMultiplePasswordParametersAndMixedCase(){
  String maskedPassword=PasswordUtils.maskPasswordsInDefinition(""String_Node_Str"");
  assertEquals(""String_Node_Str"",maskedPassword);
}","/** 
 * The password parameter can be upper-case, lower-case or mixed-case.
 */
@Test public void testMaskStreamDefinitionWithMultiplePasswordParametersAndMixedCase(){
  String maskedPassword=PasswordUtils.maskPasswordsInDefinition(""String_Node_Str"");
  assertEquals(""String_Node_Str"",maskedPassword);
}",0.8479087452471483
15503,"@Test public void testMaskStreamDefinitionWithPasswordParameterInMiddle(){
  String maskedPassword=PasswordUtils.maskPasswordsInDefinition(""String_Node_Str"");
  assertEquals(""String_Node_Str"",maskedPassword);
}","/** 
 * A basic stream definition parameter (parameter in middle of stream) called ""password"" should have its value masked.
 */
@Test public void testMaskStreamDefinitionWithPasswordParameterInMiddle(){
  String maskedPassword=PasswordUtils.maskPasswordsInDefinition(""String_Node_Str"");
  assertEquals(""String_Node_Str"",maskedPassword);
}",0.7664233576642335
15504,"@Test public void testMaskStreamDefinitionWithPasswordParameterContainingADot(){
  String maskedPassword=PasswordUtils.maskPasswordsInDefinition(""String_Node_Str"");
  assertEquals(""String_Node_Str"",maskedPassword);
}","/** 
 * Mask Stream Definition With Password Parameter Containing a Dot.
 */
@Test public void testMaskStreamDefinitionWithPasswordParameterContainingADot(){
  String maskedPassword=PasswordUtils.maskPasswordsInDefinition(""String_Node_Str"");
  assertEquals(""String_Node_Str"",maskedPassword);
}",0.8487229862475442
15505,"private void doRegisterConsumer(String name,MessageChannel moduleInputChannel,Queue queue,RabbitPropertiesAccessor properties,boolean isPubSub){
  SimpleMessageListenerContainer listenerContainer=new SimpleMessageListenerContainer(this.connectionFactory);
  listenerContainer.setAcknowledgeMode(properties.getAcknowledgeMode(this.defaultAcknowledgeMode));
  listenerContainer.setChannelTransacted(properties.getTransacted(this.defaultChannelTransacted));
  listenerContainer.setDefaultRequeueRejected(properties.getRequeueRejected(this.defaultDefaultRequeueRejected));
  if (!isPubSub) {
    int concurrency=properties.getConcurrency(this.defaultConcurrency);
    concurrency=concurrency > 0 ? concurrency : 1;
    listenerContainer.setConcurrentConsumers(concurrency);
    int maxConcurrency=properties.getMaxConcurrency(this.defaultMaxConcurrency);
    if (maxConcurrency > concurrency) {
      listenerContainer.setMaxConcurrentConsumers(maxConcurrency);
    }
  }
  listenerContainer.setPrefetchCount(properties.getPrefetchCount(this.defaultPrefetchCount));
  listenerContainer.setTxSize(properties.getTxSize(this.defaultTxSize));
  listenerContainer.setTaskExecutor(new SimpleAsyncTaskExecutor(queue.getName() + ""String_Node_Str""));
  listenerContainer.setQueues(queue);
  int maxAttempts=properties.getMaxAttempts(this.defaultMaxAttempts);
  if (maxAttempts > 1) {
    RetryOperationsInterceptor retryInterceptor=RetryInterceptorBuilder.stateless().maxAttempts(maxAttempts).backOffOptions(properties.getBackOffInitialInterval(this.defaultBackOffInitialInterval),properties.getBackOffMultiplier(this.defaultBackOffMultiplier),properties.getBackOffMaxInterval(this.defaultBackOffMaxInterval)).recoverer(new RejectAndDontRequeueRecoverer()).build();
    listenerContainer.setAdviceChain(new Advice[]{retryInterceptor});
  }
  listenerContainer.afterPropertiesSet();
  AmqpInboundChannelAdapter adapter=new AmqpInboundChannelAdapter(listenerContainer);
  adapter.setBeanFactory(this.getBeanFactory());
  DirectChannel bridgeToModuleChannel=new DirectChannel();
  bridgeToModuleChannel.setBeanFactory(this.getBeanFactory());
  bridgeToModuleChannel.setBeanName(name + ""String_Node_Str"");
  adapter.setOutputChannel(bridgeToModuleChannel);
  adapter.setBeanName(""String_Node_Str"" + name);
  DefaultAmqpHeaderMapper mapper=new DefaultAmqpHeaderMapper();
  mapper.setRequestHeaderNames(properties.getRequestHeaderPattens(this.defaultRequestHeaderPatterns));
  mapper.setReplyHeaderNames(properties.getReplyHeaderPattens(this.defaultReplyHeaderPatterns));
  adapter.setHeaderMapper(mapper);
  adapter.afterPropertiesSet();
  Binding consumerBinding=Binding.forConsumer(name,adapter,moduleInputChannel,properties);
  addBinding(consumerBinding);
  ReceivingHandler convertingBridge=new ReceivingHandler();
  convertingBridge.setOutputChannel(moduleInputChannel);
  convertingBridge.setBeanName(name + ""String_Node_Str"");
  convertingBridge.afterPropertiesSet();
  bridgeToModuleChannel.subscribe(convertingBridge);
  consumerBinding.start();
}","private void doRegisterConsumer(String name,MessageChannel moduleInputChannel,Queue queue,RabbitPropertiesAccessor properties,boolean isPubSub){
  ClassLoader originalClassloader=Thread.currentThread().getContextClassLoader();
  try {
    ClassUtils.overrideThreadContextClassLoader(SimpleMessageListenerContainer.class.getClassLoader());
    SimpleMessageListenerContainer listenerContainer=new SimpleMessageListenerContainer(this.connectionFactory);
    listenerContainer.setAcknowledgeMode(properties.getAcknowledgeMode(this.defaultAcknowledgeMode));
    listenerContainer.setChannelTransacted(properties.getTransacted(this.defaultChannelTransacted));
    listenerContainer.setDefaultRequeueRejected(properties.getRequeueRejected(this.defaultDefaultRequeueRejected));
    if (!isPubSub) {
      int concurrency=properties.getConcurrency(this.defaultConcurrency);
      concurrency=concurrency > 0 ? concurrency : 1;
      listenerContainer.setConcurrentConsumers(concurrency);
      int maxConcurrency=properties.getMaxConcurrency(this.defaultMaxConcurrency);
      if (maxConcurrency > concurrency) {
        listenerContainer.setMaxConcurrentConsumers(maxConcurrency);
      }
    }
    listenerContainer.setPrefetchCount(properties.getPrefetchCount(this.defaultPrefetchCount));
    listenerContainer.setTxSize(properties.getTxSize(this.defaultTxSize));
    listenerContainer.setTaskExecutor(new SimpleAsyncTaskExecutor(queue.getName() + ""String_Node_Str""));
    listenerContainer.setQueues(queue);
    int maxAttempts=properties.getMaxAttempts(this.defaultMaxAttempts);
    if (maxAttempts > 1) {
      RetryOperationsInterceptor retryInterceptor=RetryInterceptorBuilder.stateless().maxAttempts(maxAttempts).backOffOptions(properties.getBackOffInitialInterval(this.defaultBackOffInitialInterval),properties.getBackOffMultiplier(this.defaultBackOffMultiplier),properties.getBackOffMaxInterval(this.defaultBackOffMaxInterval)).recoverer(new RejectAndDontRequeueRecoverer()).build();
      listenerContainer.setAdviceChain(new Advice[]{retryInterceptor});
    }
    listenerContainer.afterPropertiesSet();
    AmqpInboundChannelAdapter adapter=new AmqpInboundChannelAdapter(listenerContainer);
    adapter.setBeanFactory(this.getBeanFactory());
    DirectChannel bridgeToModuleChannel=new DirectChannel();
    bridgeToModuleChannel.setBeanFactory(this.getBeanFactory());
    bridgeToModuleChannel.setBeanName(name + ""String_Node_Str"");
    adapter.setOutputChannel(bridgeToModuleChannel);
    adapter.setBeanName(""String_Node_Str"" + name);
    DefaultAmqpHeaderMapper mapper=new DefaultAmqpHeaderMapper();
    mapper.setRequestHeaderNames(properties.getRequestHeaderPattens(this.defaultRequestHeaderPatterns));
    mapper.setReplyHeaderNames(properties.getReplyHeaderPattens(this.defaultReplyHeaderPatterns));
    adapter.setHeaderMapper(mapper);
    adapter.afterPropertiesSet();
    Binding consumerBinding=Binding.forConsumer(name,adapter,moduleInputChannel,properties);
    addBinding(consumerBinding);
    ReceivingHandler convertingBridge=new ReceivingHandler();
    convertingBridge.setOutputChannel(moduleInputChannel);
    convertingBridge.setBeanName(name + ""String_Node_Str"");
    convertingBridge.afterPropertiesSet();
    bridgeToModuleChannel.subscribe(convertingBridge);
    consumerBinding.start();
  }
  finally {
    Thread.currentThread().setContextClassLoader(originalClassloader);
  }
}",0.9424717010389208
15506,"private void unbindTapChannel(String tapChannelName){
  MessageChannel tappedChannel=tappableChannels.remove(tapChannelName);
  if (tappedChannel instanceof ChannelInterceptorAware) {
    ChannelInterceptorAware interceptorAware=((ChannelInterceptorAware)tappedChannel);
    List<ChannelInterceptor> interceptors=new ArrayList<ChannelInterceptor>();
    for (    ChannelInterceptor interceptor : interceptorAware.getChannelInterceptors()) {
      if (interceptor instanceof WireTap) {
        ((WireTap)interceptor).stop();
      }
 else {
        interceptors.add(interceptor);
      }
    }
    interceptorAware.setInterceptors(interceptors);
    messageBus.unbindProducers(tapChannelName);
  }
}","private void unbindTapChannel(String tapChannelName){
  MessageChannel tappedChannel=tappableChannels.get(tapChannelName);
  if (tappedChannel instanceof ChannelInterceptorAware) {
    ChannelInterceptorAware interceptorAware=((ChannelInterceptorAware)tappedChannel);
    List<ChannelInterceptor> interceptors=new ArrayList<ChannelInterceptor>();
    for (    ChannelInterceptor interceptor : interceptorAware.getChannelInterceptors()) {
      if (interceptor instanceof WireTap) {
        ((WireTap)interceptor).stop();
      }
 else {
        interceptors.add(interceptor);
      }
    }
    interceptorAware.setInterceptors(interceptors);
    messageBus.unbindProducers(tapChannelName);
  }
}",0.9935391241923904
15507,"/** 
 * Unbind the output channel of the module (and tap if present) from the   {@link MessageBus}(after it has been stopped).
 * @param module the module for which producers are to be unbound from the {@link MessageBus}.
 */
protected void unbindProducers(Module module){
  MessageChannel outputChannel=module.getComponent(MODULE_OUTPUT_CHANNEL,MessageChannel.class);
  if (outputChannel != null) {
    messageBus.unbindProducer(getOutputChannelName(module),outputChannel);
    unbindTapChannel(buildTapChannelName(module));
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + module.toString());
    }
  }
}","/** 
 * Unbind the output channel of the module (and tap if present) from the   {@link MessageBus}(after it has been stopped).
 * @param module the module for which producers are to be unbound from the {@link MessageBus}.
 */
protected void unbindProducers(Module module){
  MessageChannel outputChannel=module.getComponent(MODULE_OUTPUT_CHANNEL,MessageChannel.class);
  if (outputChannel != null) {
    messageBus.unbindProducer(getOutputChannelName(module),outputChannel);
    String tapChannelName=buildTapChannelName(module);
    unbindTapChannel(tapChannelName);
    tappableChannels.remove(tapChannelName);
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + module.toString());
    }
  }
}",0.9088213491475168
15508,"@Test public void testTapDoesntHurtStream() throws Exception {
  LocalMessageBus bus=(LocalMessageBus)getMessageBus();
  DirectChannel moduleOutputChannel=new DirectChannel();
  moduleOutputChannel.setBeanName(""String_Node_Str"");
  DirectChannel tapChannel=new DirectChannel();
  tapChannel.setBeanName(""String_Node_Str"");
  WireTap tap=new WireTap(tapChannel);
  moduleOutputChannel.addInterceptor(tap);
  bus.bindProducer(""String_Node_Str"",moduleOutputChannel,null);
  final AtomicBoolean messageReceived=new AtomicBoolean();
  final AtomicReference<Thread> streamThread=new AtomicReference<Thread>();
  bus.bindConsumer(""String_Node_Str"",new DirectChannel(){
    @Override protected boolean doSend(    Message<?> message,    long timeout){
      messageReceived.set(true);
      streamThread.set(Thread.currentThread());
      return true;
    }
  }
,null);
  final CountDownLatch tapped=new CountDownLatch(1);
  final AtomicReference<Thread> tapThread=new AtomicReference<Thread>();
  bus.bindPubSubProducer(""String_Node_Str"",tapChannel,null);
  bus.bindPubSubConsumer(""String_Node_Str"",new DirectChannel(){
    @Override protected boolean doSend(    Message<?> message,    long timeout){
      tapped.countDown();
      tapThread.set(Thread.currentThread());
      throw new RuntimeException(""String_Node_Str"");
    }
  }
,null);
  moduleOutputChannel.send(new GenericMessage<String>(""String_Node_Str""));
  assertTrue(tapped.await(10,TimeUnit.SECONDS));
  assertTrue(messageReceived.get());
  assertSame(Thread.currentThread(),streamThread.get());
  assertNotNull(tapThread.get());
  assertNotSame(Thread.currentThread(),tapThread.get());
}","@Test public void testTapDoesntHurtStream() throws Exception {
  LocalMessageBus bus=(LocalMessageBus)getMessageBus();
  DirectChannel moduleOutputChannel=new DirectChannel();
  moduleOutputChannel.setBeanName(""String_Node_Str"");
  DirectChannel tapChannel=new DirectChannel();
  tapChannel.setBeanName(""String_Node_Str"");
  WireTap tap=new WireTap(tapChannel);
  moduleOutputChannel.addInterceptor(tap);
  bus.bindProducer(""String_Node_Str"",moduleOutputChannel,null);
  final AtomicBoolean messageReceived=new AtomicBoolean();
  final AtomicReference<Thread> streamThread=new AtomicReference<Thread>();
  bus.bindConsumer(""String_Node_Str"",new DirectChannel(){
    @Override protected boolean doSend(    Message<?> message,    long timeout){
      messageReceived.set(true);
      streamThread.set(Thread.currentThread());
      return true;
    }
  }
,null);
  final CountDownLatch tapped=new CountDownLatch(1);
  final AtomicReference<Thread> tapThread=new AtomicReference<Thread>();
  bus.bindPubSubProducer(""String_Node_Str"",tapChannel,null);
  bus.bindPubSubConsumer(""String_Node_Str"",new DirectChannel(){
    @Override protected boolean doSend(    Message<?> message,    long timeout){
      tapThread.set(Thread.currentThread());
      tapped.countDown();
      throw new RuntimeException(""String_Node_Str"");
    }
  }
,null);
  moduleOutputChannel.send(new GenericMessage<String>(""String_Node_Str""));
  assertTrue(tapped.await(10,TimeUnit.SECONDS));
  assertTrue(messageReceived.get());
  assertSame(Thread.currentThread(),streamThread.get());
  assertNotNull(tapThread.get());
  assertNotSame(Thread.currentThread(),tapThread.get());
}",0.972644376899696
15509,"@Override protected boolean doSend(Message<?> message,long timeout){
  tapped.countDown();
  tapThread.set(Thread.currentThread());
  throw new RuntimeException(""String_Node_Str"");
}","@Override protected boolean doSend(Message<?> message,long timeout){
  tapThread.set(Thread.currentThread());
  tapped.countDown();
  throw new RuntimeException(""String_Node_Str"");
}",0.8791208791208791
15510,"protected void fromResource(Resource resource,List<ModuleDefinition> holder) throws IOException {
  if (!resource.exists()) {
    return;
  }
  String filename=resource.getFile().getCanonicalFile().getName();
  boolean isDir=resource.getFile().isDirectory();
  if (!isDir && !filename.endsWith(ARCHIVE_AS_FILE_EXTENSION)) {
    return;
  }
  String name=isDir ? filename : filename.substring(0,filename.lastIndexOf(ARCHIVE_AS_FILE_EXTENSION));
  String canonicalPath=resource.getFile().getCanonicalPath();
  int lastSlash=canonicalPath.lastIndexOf('/');
  String typeAsString=canonicalPath.substring(canonicalPath.lastIndexOf('/',lastSlash - 1) + 1,lastSlash);
  ModuleType type=null;
  try {
    type=ModuleType.valueOf(typeAsString);
  }
 catch (  IllegalArgumentException e) {
    return;
  }
  ModuleDefinition found=ModuleDefinitions.simple(name,type,""String_Node_Str"" + canonicalPath + (isDir ? ""String_Node_Str"" : ""String_Node_Str""));
  if (holder.contains(found)) {
    SimpleModuleDefinition one=(SimpleModuleDefinition)found;
    SimpleModuleDefinition two=(SimpleModuleDefinition)holder.get(holder.indexOf(found));
    throw new IllegalStateException(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",found.getType(),found.getName(),one.getLocation(),two.getLocation()));
  }
 else {
    holder.add(found);
  }
}","protected void fromResource(Resource resource,List<ModuleDefinition> holder) throws IOException {
  if (!resource.exists()) {
    return;
  }
  String filename=resource.getFile().getCanonicalFile().getName();
  boolean isDir=resource.getFile().isDirectory();
  if (!isDir && !filename.endsWith(ARCHIVE_AS_FILE_EXTENSION)) {
    return;
  }
  String name=isDir ? filename : filename.substring(0,filename.lastIndexOf(ARCHIVE_AS_FILE_EXTENSION));
  String canonicalPath=resource.getFile().getCanonicalPath();
  String fileSeparator=File.separator;
  int lastSlash=canonicalPath.lastIndexOf(fileSeparator);
  String typeAsString=canonicalPath.substring(canonicalPath.lastIndexOf(fileSeparator,lastSlash - 1) + 1,lastSlash);
  ModuleType type=null;
  try {
    type=ModuleType.valueOf(typeAsString);
  }
 catch (  IllegalArgumentException e) {
    return;
  }
  ModuleDefinition found=ModuleDefinitions.simple(name,type,""String_Node_Str"" + canonicalPath + (isDir ? fileSeparator : ""String_Node_Str""));
  if (holder.contains(found)) {
    SimpleModuleDefinition one=(SimpleModuleDefinition)found;
    SimpleModuleDefinition two=(SimpleModuleDefinition)holder.get(holder.indexOf(found));
    throw new IllegalStateException(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",found.getType(),found.getName(),one.getLocation(),two.getLocation()));
  }
 else {
    holder.add(found);
  }
}",0.9637082285303628
15511,"@Test public void testPojoToJsonPrettyPrint(){
  String json=""String_Node_Str"";
  PojoToJsonMessageConverter messageConverter=new PojoToJsonMessageConverter();
  messageConverter.setPrettyPrint(true);
  Message<?> msg=(Message<?>)messageConverter.fromMessage(new GenericMessage<Foo>(new Foo()),String.class);
  assertEquals(json,msg.getPayload());
  assertEquals(MimeTypeUtils.APPLICATION_JSON,msg.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}","@Test public void testPojoToJsonPrettyPrint(){
  String json=String.format(""String_Node_Str"");
  PojoToJsonMessageConverter messageConverter=new PojoToJsonMessageConverter();
  messageConverter.setPrettyPrint(true);
  Message<?> msg=(Message<?>)messageConverter.fromMessage(new GenericMessage<Foo>(new Foo()),String.class);
  assertEquals(json,msg.getPayload().toString().trim());
  assertEquals(MimeTypeUtils.APPLICATION_JSON,msg.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}",0.964401294498382
15512,"@Test @SuppressWarnings(""String_Node_Str"") public void testTupleToJsonPrettyPrint(){
  Tuple t=TupleBuilder.fromString(""String_Node_Str"");
  Message<?> msg=MessageBuilder.withPayload(t).build();
  TupleToJsonMessageConverter messageConverter=new TupleToJsonMessageConverter();
  messageConverter.setPrettyPrint(true);
  Message<String> result=(Message<String>)messageConverter.fromMessage(msg,String.class);
  assertTrue(result.getPayload(),result.getPayload().contains(""String_Node_Str""));
  assertTrue(result.getPayload(),result.getPayload().contains(""String_Node_Str""));
  assertEquals(MimeTypeUtils.APPLICATION_JSON,result.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}","@Test @SuppressWarnings(""String_Node_Str"") public void testTupleToJsonPrettyPrint(){
  Tuple t=TupleBuilder.fromString(""String_Node_Str"");
  Message<?> msg=MessageBuilder.withPayload(t).build();
  TupleToJsonMessageConverter messageConverter=new TupleToJsonMessageConverter();
  messageConverter.setPrettyPrint(true);
  Message<String> result=(Message<String>)messageConverter.fromMessage(msg,String.class);
  assertTrue(result.getPayload(),result.getPayload().contains(String.format(""String_Node_Str"")));
  assertTrue(result.getPayload(),result.getPayload().contains(""String_Node_Str""));
  assertEquals(MimeTypeUtils.APPLICATION_JSON,result.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}",0.964155084125823
15513,"@Override public void test(Message<?> message) throws MessagingException {
  File file=(File)message.getPayload();
  assertEquals(sourceDirName + ""String_Node_Str"" + ""String_Node_Str"",file.getAbsolutePath());
}","@Override public void test(Message<?> message) throws MessagingException {
  File file=(File)message.getPayload();
  assertEquals(sourceDirName + File.separator + ""String_Node_Str"",file.getAbsolutePath());
}",0.9256594724220624
15514,"@Test public void testFileReference() throws IOException {
  deployStream(""String_Node_Str"",""String_Node_Str"" + sourceDirName + ""String_Node_Str"");
  MessageTest test=new MessageTest(){
    @Override public void test(    Message<?> message) throws MessagingException {
      File file=(File)message.getPayload();
      assertEquals(sourceDirName + ""String_Node_Str"" + ""String_Node_Str"",file.getAbsolutePath());
    }
  }
;
  StreamTestSupport.getSinkInputChannel(""String_Node_Str"").subscribe(test);
  dropFile(""String_Node_Str"");
  test.waitForCompletion(1000);
  StreamTestSupport.getDeployedModule(""String_Node_Str"",0).stop();
  assertTrue(test.getMessageHandled());
}","@Test public void testFileReference() throws IOException {
  deployStream(""String_Node_Str"",""String_Node_Str"" + sourceDirName + ""String_Node_Str"");
  MessageTest test=new MessageTest(){
    @Override public void test(    Message<?> message) throws MessagingException {
      File file=(File)message.getPayload();
      assertEquals(sourceDirName + File.separator + ""String_Node_Str"",file.getAbsolutePath());
    }
  }
;
  StreamTestSupport.getSinkInputChannel(""String_Node_Str"").subscribe(test);
  dropFile(""String_Node_Str"");
  test.waitForCompletion(1000);
  StreamTestSupport.getDeployedModule(""String_Node_Str"",0).stop();
  assertTrue(test.getMessageHandled());
}",0.9768137621540764
15515,"@BeforeClass public static void setUp(){
  String currentDir=new File(""String_Node_Str"").getAbsolutePath();
  originalConfigLocation=System.getProperty(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",currentDir + ""String_Node_Str"");
  application=new TestApplicationBootstrap().getSingleNodeApplication().run();
  context=application.pluginContext();
}","@BeforeClass public static void setUp(){
  originalConfigLocation=System.getProperty(""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  application=new TestApplicationBootstrap().getSingleNodeApplication().run();
  context=application.pluginContext();
}",0.1826625386996904
15516,"@Test public void testWritingDataset() throws Exception {
  ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(""String_Node_Str"");
  MessageChannel channel=context.getBean(""String_Node_Str"",MessageChannel.class);
  channel.send(MessageBuilder.withPayload(""String_Node_Str"").build());
  channel.send(MessageBuilder.withPayload(""String_Node_Str"").build());
  DatasetOperations datasetOperations=context.getBean(""String_Node_Str"",DatasetOperations.class);
  String path=context.getBean(""String_Node_Str"",String.class);
  assertTrue(""String_Node_Str"",new File(path).exists());
  assertTrue(""String_Node_Str"",new File(path + ""String_Node_Str"" + ""String_Node_Str""+ datasetOperations.getDatasetName(String.class)).exists());
  assertTrue(""String_Node_Str"",new File(path + ""String_Node_Str"" + ""String_Node_Str""+ datasetOperations.getDatasetName(String.class)+ ""String_Node_Str"").exists());
  context.close();
}","@Test public void testWritingDataset() throws Exception {
  ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(""String_Node_Str"");
  MessageChannel channel=context.getBean(""String_Node_Str"",MessageChannel.class);
  channel.send(MessageBuilder.withPayload(""String_Node_Str"").build());
  channel.send(MessageBuilder.withPayload(""String_Node_Str"").build());
  DatasetOperations datasetOperations=context.getBean(""String_Node_Str"",DatasetOperations.class);
  String path=context.getBean(""String_Node_Str"",String.class);
  assertTrue(""String_Node_Str"",new File(path).exists());
  String fileSeparator=File.separator;
  assertTrue(""String_Node_Str"",new File(path + ""String_Node_Str"" + ""String_Node_Str""+ datasetOperations.getDatasetName(String.class)).exists());
  assertTrue(""String_Node_Str"",new File(path + ""String_Node_Str"" + ""String_Node_Str""+ datasetOperations.getDatasetName(String.class)+ ""String_Node_Str"").exists());
  context.close();
}",0.9793541556379036
15517,"@Test public void testFieldValueCounterList() throws Exception {
  TailSource tailSource=newTailSource();
  tailTweets(tailSource);
  FieldValueCounterSink sink=metrics().newFieldValueCounterSink(""String_Node_Str"");
  stream().create(generateStreamName(),""String_Node_Str"",tailSource,sink);
  assertThat(sink,eventually(exists()));
}","@Test public void testFieldValueCounterList() throws Exception {
  org.junit.Assume.assumeFalse(System.getProperty(""String_Node_Str"").toLowerCase().startsWith(""String_Node_Str""));
  TailSource tailSource=newTailSource();
  tailTweets(tailSource);
  FieldValueCounterSink sink=metrics().newFieldValueCounterSink(""String_Node_Str"");
  stream().create(generateStreamName(),""String_Node_Str"",tailSource,sink);
  assertThat(sink,eventually(exists()));
}",0.852752880921895
15518,"@Test public void testFieldValueCounterDisplay() throws Exception {
  TreeMap<String,Double> fvcMap=new TreeMap<String,Double>();
  fvcMap.put(""String_Node_Str"",1d);
  fvcMap.put(""String_Node_Str"",2d);
  TailSource tailSource=newTailSource();
  tailTweets(tailSource);
  FieldValueCounterSink sink=metrics().newFieldValueCounterSink(""String_Node_Str"");
  stream().create(generateStreamName(),""String_Node_Str"",tailSource,sink);
  Table t=sink.constructFVCDisplay(fvcMap);
  assertThat(sink,eventually(hasValue(t)));
}","@Test public void testFieldValueCounterDisplay() throws Exception {
  org.junit.Assume.assumeFalse(System.getProperty(""String_Node_Str"").toLowerCase().startsWith(""String_Node_Str""));
  TreeMap<String,Double> fvcMap=new TreeMap<String,Double>();
  fvcMap.put(""String_Node_Str"",1d);
  fvcMap.put(""String_Node_Str"",2d);
  TailSource tailSource=newTailSource();
  tailTweets(tailSource);
  FieldValueCounterSink sink=metrics().newFieldValueCounterSink(""String_Node_Str"");
  stream().create(generateStreamName(),""String_Node_Str"",tailSource,sink);
  Table t=sink.constructFVCDisplay(fvcMap);
  assertThat(sink,eventually(hasValue(t)));
}",0.8999129677980853
15519,"/** 
 * Verify the stream is listed in stream list.
 * @param streamName the name of the stream
 * @param definition definition of the stream
 */
public void verifyExists(String streamName,String definition,boolean deployed){
  CommandResult cr=getShell().executeCommand(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + cr.toString(),cr.isSuccess());
  Table t=(Table)cr.getResult();
  assertTrue(t.getRows().contains(new TableRow().addValue(1,streamName).addValue(2,definition).addValue(3,deployed ? ""String_Node_Str"" : ""String_Node_Str"")));
}","/** 
 * Verify the stream is listed in stream list.
 * @param streamName the name of the stream
 * @param definition definition of the stream
 */
public void verifyExists(String streamName,String definition,boolean deployed){
  CommandResult cr=getShell().executeCommand(""String_Node_Str"");
  assertTrue(""String_Node_Str"" + cr.toString(),cr.isSuccess());
  Table t=(Table)cr.getResult();
  assertTrue(t.getRows().contains(new TableRow().addValue(1,streamName).addValue(2,definition.replace(""String_Node_Str"",""String_Node_Str"")).addValue(3,deployed ? ""String_Node_Str"" : ""String_Node_Str"")));
}",0.9605609114811569
15520,"public HttpSource postFromFile(File file){
  String command=String.format(""String_Node_Str"",port,file.getAbsolutePath());
  if (contentType != null) {
    command+=String.format(""String_Node_Str"",contentType);
  }
  CommandResult result=shell.executeCommand(command);
  Assert.isTrue(result.isSuccess());
  return this;
}","public HttpSource postFromFile(File file){
  String command=String.format(""String_Node_Str"",port,FixtureUtils.handleShellEscapeProcessing(file.getAbsolutePath()));
  if (contentType != null) {
    command+=String.format(""String_Node_Str"",contentType);
  }
  CommandResult result=shell.executeCommand(command);
  Assert.isTrue(result.isSuccess());
  return this;
}",0.9385964912280702
15521,"@Override protected String toDSL(){
  String fileName=file.getName();
  return String.format(""String_Node_Str"",file.getParent(),fileName.substring(0,fileName.lastIndexOf(""String_Node_Str"")),""String_Node_Str"",charset,binary,""String_Node_Str"");
}","@Override protected String toDSL(){
  String fileName=file.getName();
  return String.format(""String_Node_Str"",FixtureUtils.handleShellEscapeProcessing(file.getParent()),fileName.substring(0,fileName.lastIndexOf(""String_Node_Str"")),""String_Node_Str"",charset,binary,""String_Node_Str"");
}",0.8679245283018868
15522,"@Override protected String toDSL(){
  return String.format(""String_Node_Str"",file.getParent());
}","@Override protected String toDSL(){
  return String.format(""String_Node_Str"",FixtureUtils.handleShellEscapeProcessing(file.getParent()));
}",0.8220338983050848
15523,"@Override public String toDSL(){
  return String.format(""String_Node_Str"",file.getAbsolutePath());
}","@Override public String toDSL(){
  return String.format(""String_Node_Str"",FixtureUtils.handleShellEscapeProcessing(file.getAbsolutePath()));
}",0.8264462809917356
15524,"private Object deserializePayload(byte[] bytes,MimeType contentType){
  Class<?> targetType=null;
  try {
    if (contentType.equals(TEXT_PLAIN)) {
      return new String(bytes,""String_Node_Str"");
    }
    targetType=Class.forName(contentType.getParameter(""String_Node_Str""));
    return codec.deserialize(bytes,targetType);
  }
 catch (  ClassNotFoundException e) {
    throw new SerializationException(""String_Node_Str"" + targetType + ""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new SerializationException(""String_Node_Str"" + targetType + ""String_Node_Str"",e);
  }
}","private Object deserializePayload(byte[] bytes,MimeType contentType){
  Class<?> targetType=null;
  try {
    if (contentType.equals(TEXT_PLAIN)) {
      return new String(bytes,""String_Node_Str"");
    }
    String className=JavaClassMimeTypeConversion.classNameFromMimeType(contentType);
    targetType=Class.forName(className);
    return codec.deserialize(bytes,targetType);
  }
 catch (  ClassNotFoundException e) {
    throw new SerializationException(""String_Node_Str"" + targetType + ""String_Node_Str"",e);
  }
catch (  IOException e) {
    throw new SerializationException(""String_Node_Str"" + targetType + ""String_Node_Str"",e);
  }
}",0.8899755501222494
15525,"@Test public void testBytesPassThru(){
  byte[] payload=""String_Node_Str"".getBytes();
  Message<byte[]> message=MessageBuilder.withPayload(payload).build();
  Message<?> converted=messageBus.serializePayloadIfNecessary(message,MediaType.APPLICATION_OCTET_STREAM);
  assertSame(payload,converted.getPayload());
  assertEquals(MediaType.APPLICATION_OCTET_STREAM,contentTypeResolver.resolve(converted.getHeaders()));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  payload=(byte[])reconstructed.getPayload();
  assertSame(converted.getPayload(),payload);
  assertNull(reconstructed.getHeaders().get(MessageBusSupport.ORIGINAL_CONTENT_TYPE_HEADER));
}","@Test public void testBytesPassThru(){
  byte[] payload=""String_Node_Str"".getBytes();
  Message<byte[]> message=MessageBuilder.withPayload(payload).build();
  Message<?> converted=messageBus.serializePayloadIfNecessary(message,MimeTypeUtils.APPLICATION_OCTET_STREAM);
  assertSame(payload,converted.getPayload());
  assertEquals(MimeTypeUtils.APPLICATION_OCTET_STREAM,contentTypeResolver.resolve(converted.getHeaders()));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  payload=(byte[])reconstructed.getPayload();
  assertSame(converted.getPayload(),payload);
  assertNull(reconstructed.getHeaders().get(MessageBusSupport.ORIGINAL_CONTENT_TYPE_HEADER));
}",0.9708029197080292
15526,"@Test public void testTupleSerialization(){
  Tuple payload=TupleBuilder.tuple().of(""String_Node_Str"",""String_Node_Str"");
  Message<?> converted=messageBus.serializePayloadIfNecessary(new GenericMessage<Tuple>(payload),MediaType.APPLICATION_OCTET_STREAM);
  MimeType mimeType=contentTypeResolver.resolve(converted.getHeaders());
  assertEquals(""String_Node_Str"",mimeType.getType());
  assertEquals(""String_Node_Str"",mimeType.getSubtype());
  assertEquals(DefaultTuple.class.getName(),mimeType.getParameter(""String_Node_Str""));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  assertEquals(""String_Node_Str"",((Tuple)reconstructed.getPayload()).getString(""String_Node_Str""));
  assertNull(reconstructed.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}","@Test public void testTupleSerialization(){
  Tuple payload=TupleBuilder.tuple().of(""String_Node_Str"",""String_Node_Str"");
  Message<?> converted=messageBus.serializePayloadIfNecessary(new GenericMessage<Tuple>(payload),MimeTypeUtils.APPLICATION_OCTET_STREAM);
  MimeType mimeType=contentTypeResolver.resolve(converted.getHeaders());
  assertEquals(""String_Node_Str"",mimeType.getType());
  assertEquals(""String_Node_Str"",mimeType.getSubtype());
  assertEquals(DefaultTuple.class.getName(),mimeType.getParameter(""String_Node_Str""));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  assertEquals(""String_Node_Str"",((Tuple)reconstructed.getPayload()).getString(""String_Node_Str""));
  assertNull(reconstructed.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}",0.9872611464968152
15527,"@Test public void testContentTypePreserved() throws IOException {
  Message<String> inbound=MessageBuilder.withPayload(""String_Node_Str"").copyHeaders(Collections.singletonMap(MessageHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON)).build();
  Message<?> converted=messageBus.serializePayloadIfNecessary(inbound,MediaType.APPLICATION_OCTET_STREAM);
  assertEquals(MediaType.TEXT_PLAIN,contentTypeResolver.resolve(converted.getHeaders()));
  assertEquals(MediaType.APPLICATION_JSON,converted.getHeaders().get(MessageBusSupport.ORIGINAL_CONTENT_TYPE_HEADER));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  assertEquals(""String_Node_Str"",reconstructed.getPayload());
  assertEquals(MediaType.APPLICATION_JSON,reconstructed.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}","@Test public void testContentTypePreserved() throws IOException {
  Message<String> inbound=MessageBuilder.withPayload(""String_Node_Str"").copyHeaders(Collections.singletonMap(MessageHeaders.CONTENT_TYPE,MimeTypeUtils.APPLICATION_JSON)).build();
  Message<?> converted=messageBus.serializePayloadIfNecessary(inbound,MimeTypeUtils.APPLICATION_OCTET_STREAM);
  assertEquals(MimeTypeUtils.TEXT_PLAIN,contentTypeResolver.resolve(converted.getHeaders()));
  assertEquals(MimeTypeUtils.APPLICATION_JSON,converted.getHeaders().get(MessageBusSupport.ORIGINAL_CONTENT_TYPE_HEADER));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  assertEquals(""String_Node_Str"",reconstructed.getPayload());
  assertEquals(MimeTypeUtils.APPLICATION_JSON,reconstructed.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}",0.9385749385749386
15528,"@Test public void testString() throws IOException {
  Message<?> converted=messageBus.serializePayloadIfNecessary(new GenericMessage<String>(""String_Node_Str""),MediaType.APPLICATION_OCTET_STREAM);
  assertEquals(MediaType.TEXT_PLAIN,contentTypeResolver.resolve(converted.getHeaders()));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  assertEquals(""String_Node_Str"",reconstructed.getPayload());
  assertNull(reconstructed.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}","@Test public void testString() throws IOException {
  Message<?> converted=messageBus.serializePayloadIfNecessary(new GenericMessage<String>(""String_Node_Str""),MimeTypeUtils.APPLICATION_OCTET_STREAM);
  assertEquals(MimeTypeUtils.TEXT_PLAIN,contentTypeResolver.resolve(converted.getHeaders()));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  assertEquals(""String_Node_Str"",reconstructed.getPayload());
  assertNull(reconstructed.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}",0.9764243614931236
15529,"@Test public void testBytesPassThruContentType(){
  byte[] payload=""String_Node_Str"".getBytes();
  Message<byte[]> message=MessageBuilder.withPayload(payload).setHeader(MessageHeaders.CONTENT_TYPE,MediaType.APPLICATION_OCTET_STREAM_VALUE).build();
  Message<?> converted=messageBus.serializePayloadIfNecessary(message,MediaType.APPLICATION_OCTET_STREAM);
  assertSame(payload,converted.getPayload());
  assertEquals(MediaType.APPLICATION_OCTET_STREAM,contentTypeResolver.resolve(converted.getHeaders()));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  payload=(byte[])reconstructed.getPayload();
  assertSame(converted.getPayload(),payload);
  assertEquals(MediaType.APPLICATION_OCTET_STREAM_VALUE,reconstructed.getHeaders().get(MessageHeaders.CONTENT_TYPE));
  assertNull(reconstructed.getHeaders().get(MessageBusSupport.ORIGINAL_CONTENT_TYPE_HEADER));
}","@Test public void testBytesPassThruContentType(){
  byte[] payload=""String_Node_Str"".getBytes();
  Message<byte[]> message=MessageBuilder.withPayload(payload).setHeader(MessageHeaders.CONTENT_TYPE,MimeTypeUtils.APPLICATION_OCTET_STREAM_VALUE).build();
  Message<?> converted=messageBus.serializePayloadIfNecessary(message,MimeTypeUtils.APPLICATION_OCTET_STREAM);
  assertSame(payload,converted.getPayload());
  assertEquals(MimeTypeUtils.APPLICATION_OCTET_STREAM,contentTypeResolver.resolve(converted.getHeaders()));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  payload=(byte[])reconstructed.getPayload();
  assertSame(converted.getPayload(),payload);
  assertEquals(MimeTypeUtils.APPLICATION_OCTET_STREAM_VALUE,reconstructed.getHeaders().get(MessageHeaders.CONTENT_TYPE));
  assertNull(reconstructed.getHeaders().get(MessageBusSupport.ORIGINAL_CONTENT_TYPE_HEADER));
}",0.955456570155902
15530,"@Test public void testPojoSerialization(){
  Message<?> converted=messageBus.serializePayloadIfNecessary(new GenericMessage<Foo>(new Foo(""String_Node_Str"")),MediaType.APPLICATION_OCTET_STREAM);
  MimeType mimeType=contentTypeResolver.resolve(converted.getHeaders());
  assertEquals(""String_Node_Str"",mimeType.getType());
  assertEquals(""String_Node_Str"",mimeType.getSubtype());
  assertEquals(Foo.class.getName(),mimeType.getParameter(""String_Node_Str""));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  assertEquals(""String_Node_Str"",((Foo)reconstructed.getPayload()).getBar());
  assertNull(reconstructed.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}","@Test public void testPojoSerialization(){
  Message<?> converted=messageBus.serializePayloadIfNecessary(new GenericMessage<Foo>(new Foo(""String_Node_Str"")),MimeTypeUtils.APPLICATION_OCTET_STREAM);
  MimeType mimeType=contentTypeResolver.resolve(converted.getHeaders());
  assertEquals(""String_Node_Str"",mimeType.getType());
  assertEquals(""String_Node_Str"",mimeType.getSubtype());
  assertEquals(Foo.class.getName(),mimeType.getParameter(""String_Node_Str""));
  Message<?> reconstructed=messageBus.deserializePayloadIfNecessary(converted);
  assertEquals(""String_Node_Str"",((Foo)reconstructed.getPayload()).getBar());
  assertNull(reconstructed.getHeaders().get(MessageHeaders.CONTENT_TYPE));
}",0.9855491329479767
15531,"/** 
 * Constructs a SyslogUdpSource that receives syslog events via udp.
 * @return an instance of SyslogUdpSource.
 */
public SyslogUdpSource syslogUdpSource(){
  return SyslogUdpSource.withDefaults();
}","/** 
 * Constructs a SyslogUdpSource that receives syslog events via udp.
 * @param host the ip of the machine where simulated syslog traffic will be sent.
 * @return an instance of SyslogUdpSource.
 */
public SyslogUdpSource syslogUdpSource(String host){
  return SyslogUdpSource.withDefaults(host);
}",0.6627218934911243
15532,"/** 
 * Constructs a SyslogTcpSource that receives syslog events via tcp.
 * @return an instance of SyslogTcpSource.
 */
public SyslogTcpSource syslogTcpSource(){
  return SyslogTcpSource.withDefaults();
}","/** 
 * Constructs a SyslogTcpSource that receives syslog events via tcp.
 * @param host the ip of the machine where simulated syslog traffic will be sent.
 * @return an instance of SyslogTcpSource.
 */
public SyslogTcpSource syslogTcpSource(String host){
  return SyslogTcpSource.withDefaults(host);
}",0.6627218934911243
15533,"/** 
 * Verifies that the Syslog TCP Source captures the correct data.
 */
@Test public void testSyslogTcp(){
  String data=UUID.randomUUID().toString();
  SyslogTcpSource syslogTcp=sources.syslogTcpSource().host(getContainerForStream().getHost());
  stream(syslogTcp + XD_DELIMETER + ""String_Node_Str"");
  waitForXD();
  syslogTcp.sendBytes((data + ""String_Node_Str"").getBytes());
  assertReceived(1);
  assertContains(data);
}","/** 
 * Verifies that the Syslog TCP Source captures the correct data.
 */
@Test public void testSyslogTcp(){
  String data=UUID.randomUUID().toString();
  SyslogTcpSource syslogTcp=sources.syslogTcpSource(getContainerForStream().getHost());
  stream(syslogTcp + XD_DELIMETER + ""String_Node_Str"");
  waitForXD();
  syslogTcp.sendBytes((data + ""String_Node_Str"").getBytes());
  assertReceived(1);
  assertContains(data);
}",0.9917550058892816
15534,"/** 
 * Verifies that the Syslog UDP Source captures the correct data.
 */
@Test public void testSyslogUdp(){
  String data=UUID.randomUUID().toString();
  SyslogUdpSource syslogUdp=sources.syslogUdpSource().host(getContainerForStream().getHost());
  stream(syslogUdp + XD_DELIMETER + ""String_Node_Str"");
  waitForXD();
  syslogUdp.sendBytes((data + ""String_Node_Str"").getBytes());
  assertReceived(1);
  this.assertContains(data);
}","/** 
 * Verifies that the Syslog UDP Source captures the correct data.
 */
@Test public void testSyslogUdp(){
  String data=UUID.randomUUID().toString();
  SyslogUdpSource syslogUdp=sources.syslogUdpSource(getContainerForStream().getHost());
  stream(syslogUdp + XD_DELIMETER + ""String_Node_Str"");
  waitForXD();
  syslogUdp.sendBytes((data + ""String_Node_Str"").getBytes());
  assertReceived(1);
  this.assertContains(data);
}",0.9918509895227008
15535,"/** 
 * Returns a SyslogTcpSource fixture instance that is initialized with default port and the host param.
 * @param host The host that tcp will be sent.
 * @return a SyslogTcpSource instance
 */
public static SyslogTcpSource withDefaults(String host){
  Assert.hasText(host,""String_Node_Str"");
  return new SyslogTcpSource(host,DEFAULT_PORT);
}","/** 
 * Returns a SyslogTcpSource fixture instance that is initialized with default port and the  provided host parameter
 * @param host The host that tcp data will be sent.
 * @return a SyslogTcpSource instance
 */
public static SyslogTcpSource withDefaults(String host){
  Assert.hasText(host,""String_Node_Str"");
  return new SyslogTcpSource(host,DEFAULT_PORT);
}",0.9719101123595506
15536,"@Override @RequestMapping(value=""String_Node_Str"",produces=""String_Node_Str"") public ModelAndView errorHtml(HttpServletRequest request){
  Map<String,Object> map=extract(new ServletRequestAttributes(request),false,false);
  int status=(int)map.get(""String_Node_Str"");
switch (status) {
case 404:
    return new ModelAndView(new RedirectView(""String_Node_Str""));
}
return super.errorHtml(request);
}","@Override @RequestMapping(value=""String_Node_Str"",produces=""String_Node_Str"") public ModelAndView errorHtml(HttpServletRequest request){
  Map<String,Object> map=extract(new ServletRequestAttributes(request),false,false);
  int status=(Integer)map.get(""String_Node_Str"");
switch (status) {
case 404:
    return new ModelAndView(new RedirectView(""String_Node_Str""));
}
return super.errorHtml(request);
}",0.9875
15537,"/** 
 * Create an instance of   {@link ModuleDescriptor} for a given job name.This helper method is intended for use in  {@link ContainerMatcher#match(ModuleDescriptor,ContainerRepository)}when deploying jobs. This is intended to be temporary; future revisions of Jobs will include ModuleDescriptors.
 * @param jobName job name
 * @return a ModuleDescriptor for the given job
 */
public static ModuleDescriptor createJobModuleDescriptor(String jobName){
  return new ModuleDescriptor(new ModuleDefinition(jobName,ModuleType.job),jobName,jobName,0,null,1);
}","/** 
 * Create an instance of   {@link ModuleDescriptor} for a given job name.This helper method is intended for use in  {@link ContainerMatcher#match(ModuleDescriptor,ContainerRepository)}when deploying jobs. This is intended to be temporary; future revisions of Jobs will include ModuleDescriptors.
 * @param jobName job name
 * @return a ModuleDescriptor for the given job
 */
public static ModuleDescriptor createJobModuleDescriptor(String jobName){
  return new ModuleDescriptor(new ModuleDefinition(jobName,ModuleType.job),jobName,jobName,0,null);
}",0.9982014388489208
15538,"private final boolean waitForStreamOp(StreamDefinition definition,boolean isDeploy){
  final int MAX_TRIES=40;
  int tries=1;
  boolean done=false;
  while (!done && tries <= MAX_TRIES) {
    done=true;
    int i=definition.getModuleDefinitions().size();
    for (    ModuleDefinition module : definition.getModuleDefinitions()) {
      Module deployedModule=getModule(definition.getName(),module.getName(),--i);
      done=(isDeploy) ? deployedModule != null : deployedModule == null;
      if (!done) {
        break;
      }
    }
    if (!done) {
      try {
        Thread.sleep(100);
        tries++;
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
  return done;
}","private final boolean waitForStreamOp(StreamDefinition definition,boolean isDeploy){
  final int MAX_TRIES=40;
  int tries=1;
  boolean done=false;
  while (!done && tries <= MAX_TRIES) {
    done=true;
    int i=definition.getModuleDefinitions().size();
    for (    ModuleDefinition module : definition.getModuleDefinitions()) {
      Module deployedModule=getModule(definition.getName(),module.getName(),--i);
      done=(isDeploy) ? deployedModule != null : deployedModule == null;
      if (!done) {
        break;
      }
    }
    if (!done) {
      try {
        Thread.sleep(100);
        tries++;
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        break;
      }
    }
  }
  return done;
}",0.9898717083051992
15539,"/** 
 * {@inheritDoc}<p/> Upon leadership election, this Admin server will create a   {@link PathChildrenCache}for   {@link Paths#STREAMS} and {@link Paths#JOBS}. These caches will have  {@link PathChildrenCacheListener PathChildrenCacheListeners} attached to themthat will react to stream and job creation and deletion. Upon leadership relinquishment, the listeners will be removed and the caches shut down.
 */
@Override public void takeLeadership(CuratorFramework client) throws Exception {
  LOG.info(""String_Node_Str"",getId());
  PathChildrenCache streamDeployments=null;
  PathChildrenCache jobDeployments=null;
  PathChildrenCacheListener streamListener;
  PathChildrenCacheListener jobListener;
  PathChildrenCacheListener containerListener;
  try {
    streamListener=new StreamListener(AdminServer.this,streamDefinitionRepository,moduleDefinitionRepository,moduleOptionsMetadataResolver);
    streamDeployments=new PathChildrenCache(client,Paths.STREAM_DEPLOYMENTS,true,ThreadUtils.newThreadFactory(""String_Node_Str""));
    streamDeployments.getListenable().addListener(streamListener);
    streamDeployments.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT);
    jobListener=new JobListener(AdminServer.this,moduleDefinitionRepository,moduleOptionsMetadataResolver);
    jobDeployments=new PathChildrenCache(client,Paths.JOB_DEPLOYMENTS,true,ThreadUtils.newThreadFactory(""String_Node_Str""));
    jobDeployments.getListenable().addListener(jobListener);
    jobDeployments.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT);
    containerListener=new ContainerListener(AdminServer.this,streamDefinitionRepository,moduleDefinitionRepository,moduleOptionsMetadataResolver,streamDeployments);
    PathChildrenCache containersCache=new PathChildrenCache(client,Paths.CONTAINERS,true,ThreadUtils.newThreadFactory(""String_Node_Str""));
    containersCache.getListenable().addListener(containerListener);
    containersCache.start();
    containers.set(containersCache);
    Thread.sleep(Long.MAX_VALUE);
  }
 catch (  InterruptedException e) {
    LOG.info(""String_Node_Str"");
    Thread.currentThread().interrupt();
  }
 finally {
    PathChildrenCache containersCache=containers.getAndSet(null);
    if (containersCache != null) {
      containersCache.close();
    }
    if (streamDeployments != null) {
      streamDeployments.close();
    }
    if (jobDeployments != null) {
      jobDeployments.close();
    }
  }
}","/** 
 * {@inheritDoc}<p/> Upon leadership election, this Admin server will create a   {@link PathChildrenCache}for   {@link Paths#STREAMS} and {@link Paths#JOBS}. These caches will have  {@link PathChildrenCacheListener PathChildrenCacheListeners} attached to themthat will react to stream and job creation and deletion. Upon leadership relinquishment, the listeners will be removed and the caches shut down.
 */
@Override public void takeLeadership(CuratorFramework client) throws Exception {
  LOG.info(""String_Node_Str"",getId());
  PathChildrenCache streams=null;
  PathChildrenCache streamDeployments=null;
  PathChildrenCache jobDeployments=null;
  PathChildrenCacheListener streamListener;
  PathChildrenCacheListener jobListener;
  PathChildrenCacheListener containerListener;
  try {
    streamListener=new StreamListener(AdminServer.this,streamDefinitionRepository,moduleDefinitionRepository,moduleOptionsMetadataResolver);
    streams=new PathChildrenCache(client,Paths.STREAMS,true,ThreadUtils.newThreadFactory(""String_Node_Str""));
    streams.start();
    streamDeployments=new PathChildrenCache(client,Paths.STREAM_DEPLOYMENTS,true,ThreadUtils.newThreadFactory(""String_Node_Str""));
    streamDeployments.getListenable().addListener(streamListener);
    streamDeployments.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT);
    jobListener=new JobListener(AdminServer.this,moduleDefinitionRepository,moduleOptionsMetadataResolver);
    jobDeployments=new PathChildrenCache(client,Paths.JOB_DEPLOYMENTS,true,ThreadUtils.newThreadFactory(""String_Node_Str""));
    jobDeployments.getListenable().addListener(jobListener);
    jobDeployments.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT);
    containerListener=new ContainerListener(AdminServer.this,streamDefinitionRepository,moduleDefinitionRepository,moduleOptionsMetadataResolver,streams);
    PathChildrenCache containersCache=new PathChildrenCache(client,Paths.CONTAINERS,true,ThreadUtils.newThreadFactory(""String_Node_Str""));
    containersCache.getListenable().addListener(containerListener);
    containersCache.start();
    containers.set(containersCache);
    Thread.sleep(Long.MAX_VALUE);
  }
 catch (  InterruptedException e) {
    LOG.info(""String_Node_Str"");
    Thread.currentThread().interrupt();
  }
 finally {
    PathChildrenCache containersCache=containers.getAndSet(null);
    if (containersCache != null) {
      containersCache.close();
    }
    if (streams != null) {
      streams.close();
    }
    if (streamDeployments != null) {
      streamDeployments.close();
    }
    if (jobDeployments != null) {
      jobDeployments.close();
    }
  }
}",0.9506779327962273
15540,"/** 
 * Handle the arrival of a container. This implementation will scan the existing streams and determine if any modules should be deployed to the new container.
 * @param client curator client
 * @param data node data for the container that arrived
 */
private void onChildAdded(CuratorFramework client,ChildData data) throws Exception {
  Container container=new Container(Paths.stripPath(data.getPath()),mapBytesUtility.toMap(data.getData()));
  String containerName=container.getName();
  LOG.info(""String_Node_Str"",containerName);
  for (Iterator<Stream> streamIterator=new ChildPathIterator<Stream>(streamConverter,streams); streamIterator.hasNext(); ) {
    Stream stream=streamIterator.next();
    for (Iterator<ModuleDescriptor> descriptorIterator=stream.getDeploymentOrderIterator(); descriptorIterator.hasNext(); ) {
      ModuleDescriptor descriptor=descriptorIterator.next();
      String group=descriptor.getGroup();
      if (StringUtils.isEmpty(group) || container.getGroups().contains(group)) {
        String streamName=descriptor.getStreamName();
        String moduleType=descriptor.getModuleDefinition().getType().toString();
        String moduleName=descriptor.getModuleDefinition().getName();
        String moduleLabel=descriptor.getLabel();
        List<String> containersForModule=client.getChildren().forPath(new StreamsPath().setStreamName(streamName).setModuleType(moduleType).setModuleLabel(moduleLabel).build());
        if (!containersForModule.contains(containerName)) {
          int moduleCount=descriptor.getCount();
          if (moduleCount <= 0 || containersForModule.size() < moduleCount) {
            LOG.info(""String_Node_Str"",moduleName,container);
            client.create().creatingParentsIfNeeded().forPath(new ModuleDeploymentsPath().setContainer(containerName).setStreamName(streamName).setModuleType(moduleType).setModuleLabel(moduleLabel).build());
            String path=new StreamsPath().setStreamName(streamName).setModuleType(moduleType).setModuleLabel(moduleLabel).setContainer(containerName).build();
            long timeout=System.currentTimeMillis() + 30000;
            boolean deployed;
            do {
              Thread.sleep(10);
              deployed=client.checkExists().forPath(path) != null;
            }
 while (!deployed && System.currentTimeMillis() < timeout);
            if (!deployed) {
              throw new IllegalStateException(String.format(""String_Node_Str"",moduleName,containerName));
            }
          }
        }
      }
    }
  }
}","/** 
 * Handle the arrival of a container. This implementation will scan the existing streams and determine if any modules should be deployed to the new container.
 * @param client curator client
 * @param data node data for the container that arrived
 */
private void onChildAdded(CuratorFramework client,ChildData data) throws Exception {
  Container container=new Container(Paths.stripPath(data.getPath()),mapBytesUtility.toMap(data.getData()));
  String containerName=container.getName();
  LOG.info(""String_Node_Str"",containerName);
  for (Iterator<Stream> streamIterator=new ChildPathIterator<Stream>(streamConverter,streams); streamIterator.hasNext(); ) {
    Stream stream=streamIterator.next();
    for (Iterator<ModuleDescriptor> descriptorIterator=stream.getDeploymentOrderIterator(); descriptorIterator.hasNext(); ) {
      ModuleDescriptor descriptor=descriptorIterator.next();
      String group=descriptor.getGroup();
      if (StringUtils.isEmpty(group) || container.getGroups().contains(group)) {
        String streamName=descriptor.getStreamName();
        String moduleType=descriptor.getModuleDefinition().getType().toString();
        String moduleName=descriptor.getModuleDefinition().getName();
        String moduleLabel=descriptor.getLabel();
        List<String> containersForModule=getContainersForModule(client,descriptor);
        if (!containersForModule.contains(containerName)) {
          int moduleCount=descriptor.getCount();
          if (moduleCount <= 0 || containersForModule.size() < moduleCount) {
            LOG.info(""String_Node_Str"",moduleName,container);
            client.create().creatingParentsIfNeeded().forPath(new ModuleDeploymentsPath().setContainer(containerName).setStreamName(streamName).setModuleType(moduleType).setModuleLabel(moduleLabel).build());
            String path=new StreamsPath().setStreamName(streamName).setModuleType(moduleType).setModuleLabel(moduleLabel).setContainer(containerName).build();
            long timeout=System.currentTimeMillis() + 30000;
            boolean deployed;
            do {
              Thread.sleep(10);
              deployed=client.checkExists().forPath(path) != null;
            }
 while (!deployed && System.currentTimeMillis() < timeout);
            if (!deployed) {
              throw new IllegalStateException(String.format(""String_Node_Str"",moduleName,containerName));
            }
          }
        }
      }
    }
  }
}",0.969039002814636
15541,"/** 
 * Handle the deletion of a job deployment.
 * @param client curator client
 * @param data   job deployment request data
 */
private void onChildRemoved(CuratorFramework client,ChildData data) throws Exception {
  String jobName=Paths.stripPath(data.getPath());
  byte[] bytes=client.getData().forPath(Paths.build(Paths.JOBS,jobName));
  Map<String,String> map=mapBytesUtility.toMap(bytes);
  JobDefinition jobDefinition=new JobDefinition(jobName,map.get(""String_Node_Str""));
  LOG.info(""String_Node_Str"",jobDefinition);
  undeployJob(client,jobDefinition);
}","/** 
 * Handle the deletion of a job deployment.
 * @param client curator client
 * @param data   job deployment request data
 */
private void onChildRemoved(CuratorFramework client,ChildData data) throws Exception {
  String jobName=Paths.stripPath(data.getPath());
  LOG.info(""String_Node_Str"",jobName);
  try {
    byte[] bytes=client.getData().forPath(Paths.build(Paths.JOBS,jobName));
    Map<String,String> map=mapBytesUtility.toMap(bytes);
    JobDefinition jobDefinition=new JobDefinition(jobName,map.get(""String_Node_Str""));
    undeployJob(client,jobDefinition);
  }
 catch (  KeeperException.NoNodeException e) {
    LOG.debug(""String_Node_Str"",jobName);
  }
}",0.8340080971659919
15542,"/** 
 * Handle the deletion of a stream deployment.
 * @param client curator client
 * @param data   stream deployment request data
 */
private void onChildRemoved(CuratorFramework client,ChildData data) throws Exception {
  String streamName=Paths.stripPath(data.getPath());
  LOG.info(""String_Node_Str"",streamName);
  byte[] streamDefinition=client.getData().forPath(new StreamsPath().setStreamName(streamName).build());
  Stream stream=streamFactory.createStream(streamName,mapBytesUtility.toMap(streamDefinition));
  List<String> paths=new ArrayList<String>();
  paths.add(new StreamsPath().setStreamName(streamName).setModuleType(Module.Type.SOURCE.toString()).build());
  for (  ModuleDescriptor descriptor : stream.getProcessors()) {
    paths.add(new StreamsPath().setStreamName(streamName).setModuleType(Module.Type.PROCESSOR.toString()).setModuleLabel(descriptor.getLabel()).build());
  }
  paths.add(new StreamsPath().setStreamName(streamName).setModuleType(Module.Type.PROCESSOR.toString()).build());
  paths.add(new StreamsPath().setStreamName(streamName).setModuleType(Module.Type.SINK.toString()).build());
  for (  String path : paths) {
    try {
      client.delete().deletingChildrenIfNeeded().forPath(path);
    }
 catch (    KeeperException.NoNodeException e) {
      LOG.trace(""String_Node_Str"",path);
    }
  }
}","/** 
 * Handle the deletion of a stream deployment.
 * @param client curator client
 * @param data   stream deployment request data
 */
private void onChildRemoved(CuratorFramework client,ChildData data) throws Exception {
  String streamName=Paths.stripPath(data.getPath());
  LOG.info(""String_Node_Str"",streamName);
  Stream stream;
  try {
    byte[] streamDefinition=client.getData().forPath(new StreamsPath().setStreamName(streamName).build());
    stream=streamFactory.createStream(streamName,mapBytesUtility.toMap(streamDefinition));
  }
 catch (  KeeperException.NoNodeException e) {
    LOG.debug(""String_Node_Str"",streamName);
    return;
  }
  List<String> paths=new ArrayList<String>();
  paths.add(new StreamsPath().setStreamName(streamName).setModuleType(Module.Type.SOURCE.toString()).build());
  for (  ModuleDescriptor descriptor : stream.getProcessors()) {
    paths.add(new StreamsPath().setStreamName(streamName).setModuleType(Module.Type.PROCESSOR.toString()).setModuleLabel(descriptor.getLabel()).build());
  }
  paths.add(new StreamsPath().setStreamName(streamName).setModuleType(Module.Type.PROCESSOR.toString()).build());
  paths.add(new StreamsPath().setStreamName(streamName).setModuleType(Module.Type.SINK.toString()).build());
  for (  String path : paths) {
    try {
      client.delete().deletingChildrenIfNeeded().forPath(path);
    }
 catch (    KeeperException.NoNodeException e) {
      LOG.trace(""String_Node_Str"",path);
    }
  }
}",0.9479315263908702
15543,"/** 
 * Convert a byte array containing a JSON string to a map of key/value pairs.
 * @param bytes byte array containing the key/value pair strings
 * @return a new map instance containing the key/value pairs
 */
public Map<String,String> toMap(byte[] bytes){
  if (bytes == null || bytes.length == 0) {
    return Collections.emptyMap();
  }
  try {
    return reader.readValue(bytes);
  }
 catch (  JsonProcessingException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Convert a byte array containing a JSON string to a map of key/value pairs.
 * @param bytes byte array containing the key/value pair strings
 * @return a new map instance containing the key/value pairs
 */
public Map<String,String> toMap(byte[] bytes){
  if (bytes == null || bytes.length == 0) {
    return Collections.emptyMap();
  }
  try {
    return reader.readValue(bytes);
  }
 catch (  Exception e) {
    String contents;
    try {
      contents=new String(bytes,""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException uue) {
      contents=""String_Node_Str"" + uue;
    }
    throw new RuntimeException(""String_Node_Str"" + contents,e);
  }
}",0.7564422277639236
15544,"@Test public void moduleChannelsRegisteredWithMessageBus(){
  StreamDefinition sd=new StreamDefinition(""String_Node_Str"",""String_Node_Str"");
  int originalBindings=getMessageBusBindings().size();
  integrationSupport.createAndDeployStream(sd);
  int newBindings=getMessageBusBindings().size() - originalBindings;
  assertEquals(3,newBindings);
  integrationSupport.undeployAndDestroyStream(sd);
  assertEquals(originalBindings,getMessageBusBindings().size());
}","@Test public void moduleChannelsRegisteredWithMessageBus(){
  StreamDefinition sd=new StreamDefinition(""String_Node_Str"",""String_Node_Str"");
  int originalBindings=getMessageBusBindings().size();
  assertTrue(""String_Node_Str"",integrationSupport.createAndDeployStream(sd));
  int newBindings=getMessageBusBindings().size() - originalBindings;
  assertEquals(3,newBindings);
  integrationSupport.undeployAndDestroyStream(sd);
  assertEquals(originalBindings,getMessageBusBindings().size());
}",0.9684873949579832
15545,"@Override public XDContainer launch(ContainerOptions options){
  try {
    String id=this.generateId();
    XDContainer container=new XDContainer(id);
    container.setApplicationContext(deployerContext);
    container.start();
    this.logContainerInfo(logger,container);
    container.addListener(new ShutdownListener(container));
    this.eventPublisher.publishEvent(new ContainerStartedEvent(container));
    return container;
  }
 catch (  Exception e) {
    logger.fatal(e.getClass().getName() + ""String_Node_Str"" + e.getMessage());
    this.logErrorInfo(e);
    System.exit(1);
  }
  return null;
}","@Override public XDContainer launch(ContainerOptions options){
  try {
    String id=this.generateId();
    XDContainer container=new XDContainer(id);
    container.setApplicationContext(deployerContext);
    container.start();
    this.logContainerInfo(logger,container);
    container.addListener(new ShutdownListener(container));
    this.eventPublisher.publishEvent(new ContainerStartedEvent(container));
    return container;
  }
 catch (  Exception e) {
    logger.fatal(e.getClass().getName() + ""String_Node_Str"" + e.getMessage());
    this.logErrorInfo(e);
    throw new XDContainerLaunchException(e.getMessage(),e);
  }
}",0.9360323886639677
15546,"/** 
 * The main entry point to create the AdminServer.
 * @param args command line arguments
 */
public static void main(String[] args){
  launchSingleNodeServer(parseCommandLineOptions(args));
}","/** 
 * The main entry point to create the AdminServer.
 * @param args command line arguments
 */
public static void main(String[] args){
  try {
    launchSingleNodeServer(parseCommandLineOptions(args));
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    System.exit(1);
  }
}",0.7919191919191919
15547,"@Test public void testDefault(){
  SingleNodeMain.main(new String[]{});
}","@Test public void testDefault(){
  SingleNodeMain.parseOptions(new String[]{});
}",0.935064935064935
15548,"private void verifyPayloadConversion(final Object expectedValue,final LocalChannelRegistry registry,Collection<MediaType> acceptedMediaTypes){
  DirectChannel myChannel=new DirectChannel();
  registry.inbound(""String_Node_Str"",myChannel,acceptedMediaTypes,false);
  DirectChannel input=registry.lookupSharedChannel(""String_Node_Str"",DirectChannel.class);
  assertNotNull(input);
  final AtomicBoolean msgSent=new AtomicBoolean(false);
  myChannel.subscribe(new MessageHandler(){
    @Override public void handleMessage(    Message<?> message) throws MessagingException {
      assertEquals(expectedValue,message.getPayload());
      msgSent.set(true);
    }
  }
);
  Message<Foo> msg=MessageBuilder.withPayload(new Foo()).setHeader(MessageHeaders.CONTENT_TYPE,MediaType.ALL_VALUE).build();
  input.send(msg);
  assertTrue(msgSent.get());
}","private void verifyPayloadConversion(final Object expectedValue,final LocalChannelRegistry registry,Collection<MediaType> acceptedMediaTypes){
  DirectChannel myChannel=new DirectChannel();
  registry.inbound(""String_Node_Str"",myChannel,acceptedMediaTypes,false);
  DirectChannel input=registry.getBean(""String_Node_Str"",DirectChannel.class);
  assertNotNull(input);
  final AtomicBoolean msgSent=new AtomicBoolean(false);
  myChannel.subscribe(new MessageHandler(){
    @Override public void handleMessage(    Message<?> message) throws MessagingException {
      assertEquals(expectedValue,message.getPayload());
      msgSent.set(true);
    }
  }
);
  Message<Foo> msg=MessageBuilder.withPayload(new Foo()).setHeader(MessageHeaders.CONTENT_TYPE,MediaType.ALL_VALUE).build();
  input.send(msg);
  assertTrue(msgSent.get());
}",0.9843937575030012
15549,"private void jButtonDownloadActionPerformed(ActionEvent evt){
  new Thread(new Runnable(){
    @Override public void run(){
      String btnText=jButtonDownload.getText();
      jButtonDownload.setText(""String_Node_Str"");
      jButtonDownload.setEnabled(false);
      if (!UpdateManager.downloadLatestAppVersion()) {
        JOptionPane.showMessageDialog(null,translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str"") + ""String_Node_Str"" + translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""),translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
        UpdateManager.extBrowserGetLatestVersion();
      }
 else {
        JOptionPane.showMessageDialog(null,translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""),translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
      }
      jButtonDownload.setText(btnText);
      jButtonDownload.setEnabled(true);
    }
  }
).start();
}","private void jButtonDownloadActionPerformed(ActionEvent evt){
  UpdateManager.extBrowserGetLatestVersion();
}",0.1894005212858384
15550,"@Override public void run(){
  String btnText=jButtonDownload.getText();
  jButtonDownload.setText(""String_Node_Str"");
  jButtonDownload.setEnabled(false);
  if (!UpdateManager.downloadLatestAppVersion()) {
    JOptionPane.showMessageDialog(null,translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str"") + ""String_Node_Str"" + translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""),translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
    UpdateManager.extBrowserGetLatestVersion();
  }
 else {
    JOptionPane.showMessageDialog(null,translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""),translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
  }
  jButtonDownload.setText(btnText);
  jButtonDownload.setEnabled(true);
}","@Override public void run(){
  String latestVersion=UpdateManager.getLatestVersion();
  StringBuilder message=new StringBuilder(256);
  message.append(""String_Node_Str"").append(translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str"").replace(""String_Node_Str"",Version.VERSION)).append(""String_Node_Str"").append(translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str"").replace(""String_Node_Str"",UpdateManager.normalizeVersionStr(latestVersion)));
  if (latestVersion.equalsIgnoreCase(translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""))) {
    message.append(""String_Node_Str"");
    jButtonDownload.setVisible(false);
  }
 else {
    message.append(""String_Node_Str"");
    if (UpdateManager.IsUpToDate(latestVersion)) {
      message.append(translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""));
      jButtonDownload.setVisible(false);
    }
 else {
      message.append(translation.getString(Translation.SEC_WCHECKFORUPDATES,""String_Node_Str""));
      jButtonDownload.setVisible(true);
    }
    message.append(""String_Node_Str"");
  }
  jLabelMessage.setText(message.toString());
}",0.4625183733463988
15551,"private void jButtonReloadRedistListActionPerformed(ActionEvent evt){
  searchRedistPackagesOnDisk();
  jButtonReloadRedistList.setEnabled(true);
  CLOSING_APP=false;
}","private void jButtonReloadRedistListActionPerformed(ActionEvent evt){
  searchRedistPackagesOnDisk(jButtonReloadRedistList);
  CLOSING_APP=false;
}",0.9333333333333332
15552,"private void searchRedistPackagesOnDisk(){
  jButtonReloadRedistList.setEnabled(false);
  memorizeUncheckedItemsToConf();
  jPanelList.setBorder(BorderFactory.createTitledBorder(tblRedistLabelDefault));
  String sSteamDir=jTextFieldSteamDir.getText();
  if (!listModel.isEmpty() || !StringHelper.strIsEmpty(sSteamDir)) {
    if (!StringHelper.strIsEmpty(sSteamDir) && !sSteamDir.endsWith(""String_Node_Str"") && !sSteamDir.endsWith(File.separator)) {
      sSteamDir+=File.separatorChar;
    }
    fSteamDir=new File(sSteamDir);
    boolean steamExists=fSteamDir.isDirectory() && fSteamDir.exists();
    if (!listModel.isEmpty() || steamExists) {
      enableAllUI(false);
      jButtonReloadRedistList.setText(btnReloadLabelWorking);
      final JFrame thisframe=this;
      Thread tJob=new Thread(new Runnable(){
        @Override public void run(){
          try {
            jButtonStopSearch.setVisible(true);
            String nameFile=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            String nameFileUpCase=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            String nameFiles=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            String nameFolder=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            String nameFolderUpCase=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            String nameFolders=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            model=new RedistTableModel(translation);
            setTableModelUI();
            List<File> srcFolders=new ArrayList<>(32);
            if (fSteamDir.exists()) {
              srcFolders.add(fSteamDir);
            }
            File[] customFolders=customFoldersListStrToFiles();
            for (            File customFolder : customFolders) {
              if (!srcFolders.contains(customFolder)) {
                srcFolders.add(customFolder);
              }
            }
            List<File> allFiles=new ArrayList<>(1024);
            FileUtils.listDir(thisframe,allFiles,srcFolders,config.getMaDepth(),dangerousFolders);
            List<Redist> checkedFiles=new ArrayList<>(128);
            List<Redist> checkedFolders=new ArrayList<>(128);
            FileComparator tc=new FileComparator(allFiles,patternsCfg.getRedistFilePatternsAndDesc(patternsCfg.getEnableExperimentalPatterns()),checkedFiles,true);
            try {
              Log.info(""String_Node_Str"");
              tc.start();
            }
 catch (            InterruptedException ex) {
              Log.error(ex);
            }
            tc=new FileComparator(allFiles,patternsCfg.getRedistFolderPatternsAndDesc(patternsCfg.getEnableExperimentalPatterns()),checkedFolders,false);
            try {
              Log.info(""String_Node_Str"");
              tc.start();
            }
 catch (            InterruptedException ex) {
              Log.error(ex);
            }
            uncheckedRedistPathList=uncheckedItems.getUncheckedItems();
            for (            Redist redist : checkedFiles) {
              boolean checked=!uncheckedRedistPathList.contains(redist.getFile().getAbsolutePath());
              model.addRow(new Object[]{checked,redist.getFile().getAbsolutePath(),redist.getSize(),""String_Node_Str"" + nameFileUpCase + ""String_Node_Str""+ redist.getDescription()});
            }
            for (            Redist redist : checkedFolders) {
              boolean check=!uncheckedRedistPathList.contains(redist.getFile().getAbsolutePath() + File.separatorChar);
              model.addRow(new Object[]{check,redist.getFile().getAbsolutePath() + File.separatorChar,redist.getSize(),""String_Node_Str"" + nameFolderUpCase + ""String_Node_Str""+ redist.getDescription()});
            }
            int nbFiles=checkedFiles.size();
            int nbFolders=checkedFolders.size();
            jPanelList.setBorder(BorderFactory.createTitledBorder(tblRedistLabelDefault + ""String_Node_Str"" + nbFiles+ ""String_Node_Str""+ (nbFiles > 1 ? nameFiles : nameFile)+ ""String_Node_Str""+ checkedFolders.size()+ ""String_Node_Str""+ (nbFolders > 1 ? nameFolders : nameFolder)));
          }
 catch (          InfinitiveLoopException|IOException ex) {
            Log.error(ex);
          }
 finally {
            jButtonStopSearch.setVisible(false);
            jButtonReloadRedistList.setText(btnReloadLabelInitial);
            enableAllUI(true);
            boolean rdistFound=model.getRowCount() > 0;
            jButtonRemoveRedistItemsFromDisk.setEnabled(rdistFound);
          }
        }
      }
);
      tJob.start();
    }
 else {
      jButtonRemoveRedistItemsFromDisk.setEnabled(false);
    }
  }
 else {
    jButtonRemoveRedistItemsFromDisk.setEnabled(false);
  }
}","private void searchRedistPackagesOnDisk(final JButton buttonReload){
  buttonReload.setEnabled(false);
  memorizeUncheckedItemsToConf();
  jPanelList.setBorder(BorderFactory.createTitledBorder(tblRedistLabelDefault));
  String sSteamDir=jTextFieldSteamDir.getText();
  if (!listModel.isEmpty() || !StringHelper.strIsEmpty(sSteamDir)) {
    if (!StringHelper.strIsEmpty(sSteamDir) && !sSteamDir.endsWith(""String_Node_Str"") && !sSteamDir.endsWith(File.separator)) {
      sSteamDir+=File.separatorChar;
    }
    fSteamDir=new File(sSteamDir);
    boolean steamExists=fSteamDir.isDirectory() && fSteamDir.exists();
    if (!listModel.isEmpty() || steamExists) {
      enableAllUI(false);
      buttonReload.setText(btnReloadLabelWorking);
      final JFrame thisframe=this;
      Thread tJob=new Thread(new Runnable(){
        @Override public void run(){
          try {
            jButtonStopSearch.setVisible(true);
            String nameFile=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            String nameFileUpCase=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            String nameFiles=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            String nameFolder=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            String nameFolderUpCase=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            String nameFolders=translation.getString(Translation.SEC_WMAIN,""String_Node_Str"");
            model=new RedistTableModel(translation);
            setTableModelUI();
            List<File> srcFolders=new ArrayList<>(32);
            if (fSteamDir.exists()) {
              srcFolders.add(fSteamDir);
            }
            File[] customFolders=customFoldersListStrToFiles();
            for (            File customFolder : customFolders) {
              if (!srcFolders.contains(customFolder)) {
                srcFolders.add(customFolder);
              }
            }
            List<File> allFiles=new ArrayList<>(1024);
            FileUtils.listDir(thisframe,allFiles,srcFolders,config.getMaDepth(),dangerousFolders);
            List<Redist> checkedFiles=new ArrayList<>(128);
            List<Redist> checkedFolders=new ArrayList<>(128);
            FileComparator tc=new FileComparator(allFiles,patternsCfg.getRedistFilePatternsAndDesc(patternsCfg.getEnableExperimentalPatterns()),checkedFiles,true);
            try {
              Log.info(""String_Node_Str"");
              tc.start();
            }
 catch (            InterruptedException ex) {
              Log.error(ex);
            }
            tc=new FileComparator(allFiles,patternsCfg.getRedistFolderPatternsAndDesc(patternsCfg.getEnableExperimentalPatterns()),checkedFolders,false);
            try {
              Log.info(""String_Node_Str"");
              tc.start();
            }
 catch (            InterruptedException ex) {
              Log.error(ex);
            }
            uncheckedRedistPathList=uncheckedItems.getUncheckedItems();
            for (            Redist redist : checkedFiles) {
              boolean checked=!uncheckedRedistPathList.contains(redist.getFile().getAbsolutePath());
              model.addRow(new Object[]{checked,redist.getFile().getAbsolutePath(),redist.getSize(),""String_Node_Str"" + nameFileUpCase + ""String_Node_Str""+ redist.getDescription()});
            }
            for (            Redist redist : checkedFolders) {
              boolean check=!uncheckedRedistPathList.contains(redist.getFile().getAbsolutePath() + File.separatorChar);
              model.addRow(new Object[]{check,redist.getFile().getAbsolutePath() + File.separatorChar,redist.getSize(),""String_Node_Str"" + nameFolderUpCase + ""String_Node_Str""+ redist.getDescription()});
            }
            int nbFiles=checkedFiles.size();
            int nbFolders=checkedFolders.size();
            jPanelList.setBorder(BorderFactory.createTitledBorder(tblRedistLabelDefault + ""String_Node_Str"" + nbFiles+ ""String_Node_Str""+ (nbFiles > 1 ? nameFiles : nameFile)+ ""String_Node_Str""+ checkedFolders.size()+ ""String_Node_Str""+ (nbFolders > 1 ? nameFolders : nameFolder)));
          }
 catch (          InfinitiveLoopException|IOException ex) {
            Log.error(ex);
          }
 finally {
            jButtonStopSearch.setVisible(false);
            buttonReload.setText(btnReloadLabelInitial);
            enableAllUI(true);
            boolean rdistFound=model.getRowCount() > 0;
            jButtonRemoveRedistItemsFromDisk.setEnabled(rdistFound);
            buttonReload.setEnabled(true);
          }
        }
      }
);
      tJob.start();
    }
 else {
      jButtonRemoveRedistItemsFromDisk.setEnabled(false);
    }
  }
 else {
    jButtonRemoveRedistItemsFromDisk.setEnabled(false);
  }
}",0.9362191551652028
15553,"static public CsvPreference getFormat(BufferedReader reader) throws IOException {
  reader.mark(10 * 1024);
  CsvPreference[] formats={CsvPreference.EXCEL_PREFERENCE,CsvPreference.EXCEL_NORTH_EUROPE_PREFERENCE,CsvPreference.TAB_PREFERENCE};
  for (  CsvPreference format : formats) {
    try {
      if (checkFormat(reader,format)) {
        return format;
      }
    }
  finally {
      reader.reset();
    }
  }
  throw new IOException(""String_Node_Str"");
}","static public CsvPreference getFormat(BufferedReader reader) throws IOException {
  reader.mark(10 * 1024);
  CsvPreference[] templates={CsvPreference.EXCEL_PREFERENCE,CsvPreference.EXCEL_NORTH_EUROPE_PREFERENCE,CsvPreference.TAB_PREFERENCE};
  for (  CsvPreference template : templates) {
    CsvPreference format=createFormat(template);
    try {
      if (checkFormat(reader,format)) {
        return format;
      }
    }
  finally {
      reader.reset();
    }
  }
  throw new IOException(""String_Node_Str"");
}",0.9066666666666666
15554,"public List<User> getAllUsers(){
  List<User> userList=null;
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    userList=new ArrayList<User>();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      String userId=soln.get(""String_Node_Str"").toString();
      User user=getUser(userId);
      userList.add(user);
    }
    logger.debug(""String_Node_Str"",userList.size());
    vqe.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return userList;
}","public List<User> getAllUsers(){
  List<User> userList=null;
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    userList=new ArrayList<User>();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      String userId=soln.get(""String_Node_Str"").toString();
      User user=getUser(userId);
      userList.add(user);
    }
    logger.debug(""String_Node_Str"",userList.size());
    vqe.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  return userList;
}",0.9666666666666668
15555,"@Override public List<RegisteredService> getAllServices(){
  final List<RegisteredService> allRegisteredServices=getAllRegisteredServices();
  List<RegisteredService> filteredList=new ArrayList<RegisteredService>();
  for (  RegisteredService service : allRegisteredServices) {
    if (!filteredServices.contains(service.getName()))     filteredList.add(service);
  }
  return filteredList;
}","@Override public List<RegisteredService> getAllServices(){
  final List<RegisteredService> allRegisteredServices=getAllRegisteredServices();
  List<RegisteredService> filteredList=new ArrayList<RegisteredService>();
  for (  RegisteredService service : allRegisteredServices) {
    if (!filteredServices.contains(service.getName())) {
      filteredList.add(service);
    }
  }
  return filteredList;
}",0.9874055415617128
15556,"public List<Role> getAllRoles(){
  List<Role> roleList=null;
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    roleList=new ArrayList<Role>();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      String roleId=soln.get(""String_Node_Str"").toString();
      Role role=getRole(roleId);
      roleList.add(role);
    }
    vqe.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return roleList;
}","public List<Role> getAllRoles(){
  List<Role> roleList=null;
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    roleList=new ArrayList<Role>();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      String roleId=soln.get(""String_Node_Str"").toString();
      Role role=getRole(roleId);
      roleList.add(role);
    }
    vqe.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  return roleList;
}",0.9664804469273744
15557,"/** 
 * Retrieves all LSMRegisteredServiceImpls
 * @return
 */
public List<RegisteredService> getAllRegisteredServices(){
  List<RegisteredService> serviceList=new ArrayList<RegisteredService>();
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      String serviceURL=soln.get(""String_Node_Str"").toString();
      String serviceId=serviceURL.substring(serviceURL.lastIndexOf(""String_Node_Str"") + 1);
      LSMRegisteredServiceImpl t=getRegisteredService(Long.parseLong(serviceId));
      serviceList.add(t);
    }
    vqe.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return serviceList;
}","/** 
 * Retrieves all LSMRegisteredServiceImpls
 * @return
 */
public List<RegisteredService> getAllRegisteredServices(){
  List<RegisteredService> serviceList=new ArrayList<RegisteredService>();
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      String serviceURL=soln.get(""String_Node_Str"").toString();
      String serviceId=serviceURL.substring(serviceURL.lastIndexOf(""String_Node_Str"") + 1);
      LSMRegisteredServiceImpl t=getRegisteredService(Long.parseLong(serviceId));
      serviceList.add(t);
    }
    vqe.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  return serviceList;
}",0.9740394600207684
15558,"/** 
 * Retrievs a user by the username
 * @param username
 * @return
 */
public User getUserByUsername(String username){
  org.openiot.lsm.security.oauth.mgmt.User user=null;
  String userURL=instancesPrefix + ""String_Node_Str"" + username;
  if (username.contains(instancesPrefix + ""String_Node_Str"")) {
    userURL=username;
    username=username.substring(username.lastIndexOf(""String_Node_Str"") + 1);
  }
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ userURL+ ""String_Node_Str""+ ""String_Node_Str""+ userURL+ ""String_Node_Str""+ ""String_Node_Str""+ userURL+ ""String_Node_Str""+ ""String_Node_Str""+ userURL+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    if (results.hasNext()) {
      user=new org.openiot.lsm.security.oauth.mgmt.User();
      user.setUsername(username);
      QuerySolution soln=results.nextSolution();
      user.setEmail(soln.get(""String_Node_Str"").toString());
      user.setPassword(soln.get(""String_Node_Str"").toString());
      user.setName(soln.get(""String_Node_Str"").toString());
      List<Role> roles=getUserRoles(username);
      if (roles != null)       user.setRoles(roles);
    }
    vqe.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return user;
}","/** 
 * Retrievs a user by the username
 * @param username
 * @return
 */
public User getUserByUsername(String usrname){
  org.openiot.lsm.security.oauth.mgmt.User user=null;
  String username=usrname;
  String userURL=instancesPrefix + ""String_Node_Str"" + username;
  if (username.contains(instancesPrefix + ""String_Node_Str"")) {
    userURL=username;
    username=username.substring(username.lastIndexOf(""String_Node_Str"") + 1);
  }
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ userURL+ ""String_Node_Str""+ ""String_Node_Str""+ userURL+ ""String_Node_Str""+ ""String_Node_Str""+ userURL+ ""String_Node_Str""+ ""String_Node_Str""+ userURL+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    if (results.hasNext()) {
      user=new org.openiot.lsm.security.oauth.mgmt.User();
      user.setUsername(username);
      QuerySolution soln=results.nextSolution();
      user.setEmail(soln.get(""String_Node_Str"").toString());
      user.setPassword(soln.get(""String_Node_Str"").toString());
      user.setName(soln.get(""String_Node_Str"").toString());
      List<Role> roles=getUserRoles(username);
      if (roles != null) {
        user.setRoles(roles);
      }
    }
    vqe.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  return user;
}",0.968944099378882
15559,"public void addUser(User user){
  if (user.getRoles() == null)   user.setRoles(new ArrayList<Role>());
  lsmOAuthHttpManager.addUser(user);
}","public void addUser(User user){
  if (user.getRoles() == null) {
    user.setRoles(new ArrayList<Role>());
  }
  lsmOAuthHttpManager.addUser(user);
}",0.9724137931034482
15560,"/** 
 * Retrievs roles of a user
 * @param username
 * @return
 */
public List<Role> getUserRoles(String username){
  List<Role> roles=new ArrayList<Role>();
  String userURL=instancesPrefix + ""String_Node_Str"" + username;
  if (username.contains(instancesPrefix + ""String_Node_Str"")) {
    userURL=username;
    username=username.substring(username.lastIndexOf(""String_Node_Str"") + 1);
  }
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ userURL+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      Role role=getRole(soln.get(""String_Node_Str"").toString());
      roles.add(role);
    }
    vqe.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return roles;
}","/** 
 * Retrievs roles of a user
 * @param username
 * @return
 */
public List<Role> getUserRoles(String usrname){
  List<Role> roles=new ArrayList<Role>();
  String username=usrname;
  String userURL=instancesPrefix + ""String_Node_Str"" + username;
  if (username.contains(instancesPrefix + ""String_Node_Str"")) {
    userURL=username;
    username=username.substring(username.lastIndexOf(""String_Node_Str"") + 1);
  }
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ userURL+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      Role role=getRole(soln.get(""String_Node_Str"").toString());
      roles.add(role);
    }
    vqe.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  return roles;
}",0.9633204633204632
15561,"public List<Permission> getAllPermissions(){
  List<Permission> permissionList=null;
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    permissionList=new ArrayList<Permission>();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      String userId=soln.get(""String_Node_Str"").toString();
      Permission perm=getPermission(userId);
      permissionList.add(perm);
    }
    vqe.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return permissionList;
}","public List<Permission> getAllPermissions(){
  List<Permission> permissionList=null;
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    permissionList=new ArrayList<Permission>();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      String userId=soln.get(""String_Node_Str"").toString();
      Permission perm=getPermission(userId);
      permissionList.add(perm);
    }
    vqe.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  return permissionList;
}",0.9682959048877148
15562,"/** 
 * Retrieves a user by the email
 * @param email
 * @return
 */
public User getUserByEmail(String email){
  org.openiot.lsm.security.oauth.mgmt.User user=null;
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ email+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      user=getUser(soln.get(""String_Node_Str"").toString());
    }
    vqe.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return user;
}","/** 
 * Retrieves a user by the email
 * @param email
 * @return
 */
public User getUserByEmail(String email){
  org.openiot.lsm.security.oauth.mgmt.User user=null;
  String sparql=""String_Node_Str"" + ""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ email+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      user=getUser(soln.get(""String_Node_Str"").toString());
    }
    vqe.close();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return null;
  }
  return user;
}",0.9665327978580992
15563,"public List<User> getRoleUsers(Role role){
  List<User> userList=new ArrayList<User>();
  String roleId=instancesPrefix + ""String_Node_Str"" + Role.toRoleIdStr(role);
  String sparql=""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ roleId+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      String userId=soln.get(""String_Node_Str"").toString();
      User user=getUser(userId);
      userList.add(user);
    }
    vqe.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return userList;
}","public List<User> getRoleUsers(Role role){
  List<User> userList=new ArrayList<User>();
  String roleId=instancesPrefix + ""String_Node_Str"" + Role.toRoleIdStr(role);
  String sparql=""String_Node_Str"" + lSMOauthGraphURL + ""String_Node_Str""+ ""String_Node_Str""+ roleId+ ""String_Node_Str"";
  try {
    String service=sparqlEndPoint;
    QueryExecution vqe=new QueryEngineHTTP(service,sparql);
    ResultSet results=vqe.execSelect();
    while (results.hasNext()) {
      QuerySolution soln=results.nextSolution();
      String userId=soln.get(""String_Node_Str"").toString();
      User user=getUser(userId);
      userList.add(user);
    }
    vqe.close();
  }
 catch (  Exception e) {
    if (logger.isErrorEnabled()) {
      logger.error(""String_Node_Str"" + role + ""String_Node_Str"",e);
    }
    return null;
  }
  return userList;
}",0.8986058301647655
15564,"public LSMRegisteredServiceImpl getRegisteredService(long serviceId){
  final LSMRegisteredServiceImpl registeredService=lsmOAuthHttpManager.getRegisteredService(serviceId);
  return registeredService;
}","public LSMRegisteredServiceImpl getRegisteredService(long serviceId){
  return lsmOAuthHttpManager.getRegisteredService(serviceId);
}",0.7738095238095238
15565,"@Override public LSMRegisteredServiceImpl addRegisteredService(LSMRegisteredServiceImpl registeredService){
  final boolean isNew=registeredService.getId() == -1;
  LSMRegisteredServiceImpl lsmRegisteredServiceImpl;
  if (registeredService instanceof LSMRegisteredServiceImpl)   lsmRegisteredServiceImpl=(LSMRegisteredServiceImpl)registeredService;
 else {
    lsmRegisteredServiceImpl=new LSMRegisteredServiceImpl();
    lsmRegisteredServiceImpl.copyFrom(registeredService);
  }
  if (isNew) {
    final List<RegisteredService> allRegisteredServices=getAllRegisteredServices();
    long id=1;
    if (allRegisteredServices != null)     for (    RegisteredService service : allRegisteredServices)     if (service.getId() >= id)     id=service.getId() + 1;
    lsmRegisteredServiceImpl.setId(id);
    lsmOAuthHttpManager.addRegisteredService(lsmRegisteredServiceImpl);
  }
 else {
    deleteRegisteredService(lsmRegisteredServiceImpl.getId());
    lsmOAuthHttpManager.addRegisteredService(lsmRegisteredServiceImpl);
  }
  return getRegisteredService(lsmRegisteredServiceImpl.getId());
}","@Override public LSMRegisteredServiceImpl addRegisteredService(LSMRegisteredServiceImpl registeredService){
  final boolean isNew=registeredService.getId() == -1;
  LSMRegisteredServiceImpl lsmRegisteredServiceImpl;
  if (registeredService instanceof LSMRegisteredServiceImpl) {
    lsmRegisteredServiceImpl=(LSMRegisteredServiceImpl)registeredService;
  }
 else {
    lsmRegisteredServiceImpl=new LSMRegisteredServiceImpl();
    lsmRegisteredServiceImpl.copyFrom(registeredService);
  }
  if (isNew) {
    final List<RegisteredService> allRegisteredServices=getAllRegisteredServices();
    long id=1;
    if (allRegisteredServices != null) {
      for (      RegisteredService service : allRegisteredServices) {
        if (service.getId() >= id) {
          id=service.getId() + 1;
        }
      }
    }
    lsmRegisteredServiceImpl.setId(id);
    lsmOAuthHttpManager.addRegisteredService(lsmRegisteredServiceImpl);
  }
 else {
    deleteRegisteredService(lsmRegisteredServiceImpl.getId());
    lsmOAuthHttpManager.addRegisteredService(lsmRegisteredServiceImpl);
  }
  return getRegisteredService(lsmRegisteredServiceImpl.getId());
}",0.9765976597659766
15566,"public synchronized static OAuthorizationCredentials login(){
  if (credentials == null) {
    logger.debug(""String_Node_Str"",username);
    OAuthorizationCredentials cred=acUtil.login(username,password);
    logger.debug(""String_Node_Str"",cred);
    credentials=cred;
    lastExpiryCheck=System.currentTimeMillis();
  }
  return credentials;
}","public synchronized static OAuthorizationCredentials login(){
  if (credentials == null) {
    acUtil.logout();
    logger.debug(""String_Node_Str"",username);
    OAuthorizationCredentials cred=acUtil.login(username,password);
    logger.debug(""String_Node_Str"",cred);
    credentials=cred;
    lastExpiryCheck=System.currentTimeMillis();
  }
  return credentials;
}",0.9703808180535968
15567,"/** 
 * Initialize the sensor metadata from the given configuration set. If the data set does not contain a sensorId, and allowMissingSensorId is not true, an exception will be thrown. If allowMissingSensorId is true, then the sensorId should be set externally.
 * @param conf The configuration to use for initailization.
 * @param allowMissingSensorId Flag stating whether a missing sensorId isallowed.
 */
public void init(Config conf,boolean allowMissingSensorId){
  this.setSensorName(conf.getString(""String_Node_Str""));
  this.setAuthor(conf.getString(""String_Node_Str""));
  this.setInformation(conf.getString(""String_Node_Str""));
  this.setSensorType(conf.getString(""String_Node_Str""));
  this.setSourceType(conf.getString(""String_Node_Str""));
  this.setSource(conf.getString(""String_Node_Str""));
  if (conf.hasPath(KEY_SENSOR_ID)) {
    this.setSensorID(conf.getString(KEY_SENSOR_ID));
  }
 else {
    if (!allowMissingSensorId) {
      conf.getString(KEY_SENSOR_ID);
    }
  }
  this.setLatitude(conf.getDouble(""String_Node_Str""));
  this.setLongitude(conf.getDouble(""String_Node_Str""));
  String listOfFieldsString=conf.getString(""String_Node_Str"");
  String[] fieldNames=listOfFieldsString.trim().split(""String_Node_Str"");
  for (int i=0; i < fieldNames.length; i++) {
    String fieldName=fieldNames[i];
    logger.info(i + ""String_Node_Str"" + fieldName);
    LSMFieldMetaData lsmFieldMetaData=new LSMFieldMetaData();
    lsmFieldMetaData.setGsnFieldName(fieldName);
    lsmFieldMetaData.setLsmPropertyName(conf.getString(""String_Node_Str"" + fieldName + ""String_Node_Str""+ ""String_Node_Str""));
    lsmFieldMetaData.setLsmUnit(conf.getString(""String_Node_Str"" + fieldName + ""String_Node_Str""+ ""String_Node_Str""));
    fields.put(fieldName,lsmFieldMetaData);
  }
}","/** 
 * Initialize the sensor metadata from the given configuration set. If the data set does not contain a sensorId, and allowMissingSensorId is not true, an exception will be thrown. If allowMissingSensorId is true, then the sensorId should be set externally.
 * @param conf The configuration to use for initailization.
 * @param allowMissingSensorId Flag stating whether a missing sensorId isallowed.
 */
public void init(Config conf,boolean allowMissingSensorId){
  this.setSensorName(conf.getString(""String_Node_Str""));
  this.setAuthor(conf.getString(""String_Node_Str""));
  this.setInformation(conf.getString(""String_Node_Str""));
  this.setSensorType(conf.getString(""String_Node_Str""));
  this.setSourceType(conf.getString(""String_Node_Str""));
  this.setSource(conf.getString(""String_Node_Str""));
  if (conf.hasPath(KEY_SENSOR_ID)) {
    this.setSensorID(conf.getString(KEY_SENSOR_ID));
  }
 else {
    if (!allowMissingSensorId) {
      conf.getString(KEY_SENSOR_ID);
    }
  }
  this.setLatitude(conf.getDouble(""String_Node_Str""));
  this.setLongitude(conf.getDouble(""String_Node_Str""));
  if (conf.hasPath(""String_Node_Str""))   this.featureOfInterest=conf.getString(""String_Node_Str"");
  String listOfFieldsString=conf.getString(""String_Node_Str"");
  String[] fieldNames=listOfFieldsString.trim().split(""String_Node_Str"");
  for (int i=0; i < fieldNames.length; i++) {
    String fieldName=fieldNames[i];
    logger.info(i + ""String_Node_Str"" + fieldName);
    LSMFieldMetaData lsmFieldMetaData=new LSMFieldMetaData();
    lsmFieldMetaData.setGsnFieldName(fieldName);
    lsmFieldMetaData.setLsmPropertyName(conf.getString(""String_Node_Str"" + fieldName + ""String_Node_Str""+ ""String_Node_Str""));
    lsmFieldMetaData.setLsmUnit(conf.getString(""String_Node_Str"" + fieldName + ""String_Node_Str""+ ""String_Node_Str""));
    fields.put(lsmFieldMetaData.getLsmPropertyName(),lsmFieldMetaData);
  }
}",0.9605227334603866
15568,"public boolean initialize(){
  LSMSensorMetaData metadata;
  VSensorConfig vsensor=getVirtualSensorConfiguration();
  try {
    metadata=LSMRepository.getInstance().loadMetadata(vsensor);
  }
 catch (  Exception e) {
    e.printStackTrace();
    logger.error(""String_Node_Str"" + vsensor.getName());
    return false;
  }
  TreeMap<String,String> params=vsensor.getMainClassInitialParams();
  sensorName=vsensor.getName();
  for (  DataField df : vsensor.getOutputStructure()) {
    logger.info(""String_Node_Str"" + df.getName() + ""String_Node_Str""+ df.getProperty());
    if (df.getProperty() != null)     fieldUris.put(df.getName().toUpperCase(),df.getProperty());
 else {
      String propUri=metadata.getFields().get(df.getName()).getLsmPropertyName();
      fieldUris.put(df.getName().toUpperCase(),propUri);
    }
  }
  String allow_nulls_str=params.get(""String_Node_Str"");
  if (allow_nulls_str != null)   allow_nulls=allow_nulls_str.equalsIgnoreCase(""String_Node_Str"");
  logger.info(""String_Node_Str"" + allow_nulls);
  String publishLsmStr=params.get(""String_Node_Str"");
  if (publishLsmStr != null)   publish_to_lsm=publishLsmStr.equalsIgnoreCase(""String_Node_Str"");
  for (int i=0; i < vsensor.getOutputStructure().length; i++) {
    fields.add(vsensor.getOutputStructure()[i].getName());
    logger.info(fields.get(i));
  }
  return true;
}","public boolean initialize(){
  LSMSensorMetaData metadata;
  VSensorConfig vsensor=getVirtualSensorConfiguration();
  try {
    metadata=LSMRepository.getInstance().loadMetadata(vsensor);
  }
 catch (  Exception e) {
    e.printStackTrace();
    logger.error(""String_Node_Str"" + vsensor.getName());
    return false;
  }
  TreeMap<String,String> params=vsensor.getMainClassInitialParams();
  sensorName=vsensor.getName();
  for (  DataField df : vsensor.getOutputStructure()) {
    logger.info(""String_Node_Str"" + df.getName() + ""String_Node_Str""+ df.getProperty());
    if (df.getProperty() != null)     fieldUris.put(df.getName().toUpperCase(),df.getProperty());
 else {
      for (      LSMFieldMetaData md : metadata.getFields().values()) {
        if (md.getGsnFieldName().equals(df.getName()))         fieldUris.put(df.getName().toUpperCase(),md.getLsmPropertyName());
      }
    }
  }
  String allow_nulls_str=params.get(""String_Node_Str"");
  if (allow_nulls_str != null)   allow_nulls=allow_nulls_str.equalsIgnoreCase(""String_Node_Str"");
  logger.info(""String_Node_Str"" + allow_nulls);
  String publishLsmStr=params.get(""String_Node_Str"");
  if (publishLsmStr != null)   publish_to_lsm=publishLsmStr.equalsIgnoreCase(""String_Node_Str"");
  for (int i=0; i < vsensor.getOutputStructure().length; i++) {
    fields.add(vsensor.getOutputStructure()[i].getName());
    logger.info(fields.get(i));
  }
  return true;
}",0.8964272825694695
15569,"public static void main(String[] args){
  MobileBroker mb1=new MobileBroker(new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
  mb1.setNotificationListener(new NotificationListener(){
    @Override public void notify(    UUID subscriberId,    String subscriberName,    Publication publication){
      HashtablePublication notification=(HashtablePublication)publication;
      HashMap<String,Object> receivedData=notification.getProperties();
      System.out.println(""String_Node_Str"");
      System.out.println(publication);
      System.out.println();
    }
    @Override public void notify(    UUID subscriberId,    String subscriberName,    Subscription subscription){
    }
  }
);
  mb1.connect();
  File inputFolder=new File(""String_Node_Str"" + File.separator + ""String_Node_Str"");
  for (  File content : inputFolder.listFiles()) {
    if (content.getName().startsWith(""String_Node_Str"")) {
      mb1.announceFromXMLFile(content.getName());
    }
  }
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  for (  File content : inputFolder.listFiles()) {
    if (content.getName().startsWith(""String_Node_Str"")) {
      mb1.publishFromXMLFile(content.getName());
    }
  }
}","public static void main(String[] args){
  String configFile=null;
  String inputFolderPath=null;
  try {
    configFile=args[0];
    inputFolderPath=args[1];
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(-1);
  }
  MobileBroker mb1=new MobileBroker(new File(configFile));
  mb1.setNotificationListener(new NotificationListener(){
    @Override public void notify(    UUID subscriberId,    String subscriberName,    Publication publication){
      HashtablePublication notification=(HashtablePublication)publication;
      HashMap<String,Object> receivedData=notification.getProperties();
      System.out.println(""String_Node_Str"");
      System.out.println(publication);
      System.out.println();
    }
    @Override public void notify(    UUID subscriberId,    String subscriberName,    Subscription subscription){
    }
  }
);
  mb1.connect();
  File inputFolder=new File(inputFolderPath);
  for (  File content : inputFolder.listFiles()) {
    if (content.getName().startsWith(""String_Node_Str"")) {
      mb1.announceFromXMLFile(inputFolderPath + System.getProperty(""String_Node_Str"") + content.getName());
    }
  }
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  for (  File content : inputFolder.listFiles()) {
    if (content.getName().startsWith(""String_Node_Str"")) {
      mb1.publishFromXMLFile(inputFolderPath + System.getProperty(""String_Node_Str"") + content.getName());
    }
  }
}",0.7994320198793042
15570,"public static void main(String[] args) throws InterruptedException, IOException {
  Publisher publisher=new Publisher(new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
  publisher.connect();
  File publicationFolder=new File(""String_Node_Str"" + File.separator + ""String_Node_Str"");
  for (  File content : publicationFolder.listFiles()) {
    if (content.getName().startsWith(""String_Node_Str"")) {
      publisher.publishFromXMLFile(content.getName());
    }
  }
  publisher.disconnectFromBroker();
}","public static void main(String[] args) throws InterruptedException, IOException {
  String configFile=null;
  String publicationFolderPath=null;
  try {
    configFile=args[0];
    publicationFolderPath=args[1];
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(-1);
  }
  Publisher publisher=new Publisher(new File(configFile));
  publisher.connect();
  File publicationFolder=new File(publicationFolderPath);
  for (  File content : publicationFolder.listFiles()) {
    if (content.getName().startsWith(""String_Node_Str"")) {
      publisher.publishFromXMLFile(publicationFolder + System.getProperty(""String_Node_Str"") + content.getName());
    }
  }
  Thread.sleep(1000);
  publisher.disconnectFromBroker();
}",0.5059523809523809
15571,"public static void main(String[] args){
  Subscriber subscriber=new Subscriber(new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""));
  subscriber.setNotificationListener(new NotificationListener(){
    @Override public void notify(    UUID subscriberId,    String subscriberName,    Publication publication){
      HashtablePublication notification=(HashtablePublication)publication;
      HashMap<String,Object> receivedData=notification.getProperties();
      System.out.println(""String_Node_Str"");
      System.out.println(publication);
      System.out.println();
    }
    @Override public void notify(    UUID subscriberId,    String subscriberName,    Subscription subscription){
    }
  }
);
  subscriber.connect();
  File subscriptionFolder=new File(""String_Node_Str"" + File.separator + ""String_Node_Str"");
  for (  File content : subscriptionFolder.listFiles()) {
    if (content.getName().startsWith(""String_Node_Str"")) {
      subscriber.subscribeFromXMLFile(content.getName());
    }
  }
}","public static void main(String[] args){
  String configFile=null;
  String subscriptionFolderPath=null;
  try {
    configFile=args[0];
    subscriptionFolderPath=args[1];
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(-1);
  }
  Subscriber subscriber=new Subscriber(new File(configFile));
  subscriber.setNotificationListener(new NotificationListener(){
    @Override public void notify(    UUID subscriberId,    String subscriberName,    Publication publication){
      HashtablePublication notification=(HashtablePublication)publication;
      HashMap<String,Object> receivedData=notification.getProperties();
      System.out.println(""String_Node_Str"");
      System.out.println(publication);
      System.out.println();
    }
    @Override public void notify(    UUID subscriberId,    String subscriberName,    Subscription subscription){
    }
  }
);
  subscriber.connect();
  File subscriptionFolder=new File(subscriptionFolderPath);
  for (  File content : subscriptionFolder.listFiles()) {
    if (content.getName().startsWith(""String_Node_Str"")) {
      subscriber.subscribeFromXMLFile(subscriptionFolderPath + System.getProperty(""String_Node_Str"") + content.getName());
    }
  }
}",0.763542562338779
15572,"/** 
 * method used for reading input XML file
 */
public void readFile(){
  try {
    BufferedReader in=new BufferedReader(new FileReader(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + this.fileName));
    readBuffer(in);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}","/** 
 * method used for reading input XML file
 */
public void readFile(){
  try {
    BufferedReader in=new BufferedReader(new FileReader(this.fileName));
    readBuffer(in);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
}",0.8916967509025271
15573,"private String processRequestImpl(String api,Object object,String clientId,String token){
  String result=""String_Node_Str"";
  try {
    SensorManager sensorManager=new SensorManager();
    Sensor sensor=null;
    String triples=""String_Node_Str"";
switch (api) {
case ""String_Node_Str"":
      if (object instanceof Sensor)       sensor=(Sensor)object;
 else       break;
    logger.info(""String_Node_Str"" + sensor.getId());
  if ((sensor.getMetaGraph() == null) || (sensor.getMetaGraph() == ""String_Node_Str""))   sensor.setMetaGraph(propertyManagement.getSchedulerLsmMetaGraph());
String permissionString=""String_Node_Str"";
if (PermissionsUtil.getUserType(sensor.getMetaGraph()) == PermissionsUtil.GUESS_USER) permissionString=PermissionsUtil.ADD_SENSOR_GUESS;
 else if (PermissionsUtil.getUserType(sensor.getMetaGraph()) == PermissionsUtil.DEMO_USER) permissionString=PermissionsUtil.ADD_SENSOR_DEMO;
 else permissionString=PermissionsUtil.ADD_SENSOR_MAIN;
if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
sensorManager.setDataGraph(sensor.getDataGraph());
sensorManager.setMetaGraph(sensor.getMetaGraph());
triples=TriplesDataRetriever.getSensorTripleMetadata(sensor);
sensorManager.insertTriplesToGraph(sensor.getMetaGraph(),triples);
logger.info(""String_Node_Str"");
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
Observation observation=null;
if (object instanceof Observation) observation=(Observation)object;
 else break;
logger.info(""String_Node_Str"" + observation.getId());
triples=""String_Node_Str"";
if ((observation.getMetaGraph() == null) || (observation.getMetaGraph() == ""String_Node_Str"")) observation.setMetaGraph(propertyManagement.getLSMLocalMetaGraph());
if (PermissionsUtil.getUserType(observation.getMetaGraph()) == PermissionsUtil.GUESS_USER) permissionString=PermissionsUtil.UPDATE_SENSOR_DATA_GUESS;
 else if (PermissionsUtil.getUserType(observation.getMetaGraph()) == PermissionsUtil.DEMO_USER) permissionString=PermissionsUtil.UPDATE_SENSOR_DATA_DEMO;
 else permissionString=PermissionsUtil.UPDATE_SENSOR_DATA_MAIN;
if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
sensorManager.setDataGraph(observation.getDataGraph());
sensorManager.setMetaGraph(observation.getMetaGraph());
sensor=sensorManager.getSpecifiedSensorWithSensorId(observation.getSensor());
if (sensor == null) {
result=""String_Node_Str"" + observation.getSensor() + ""String_Node_Str"";
return result;
}
String foi=""String_Node_Str"";
if (observation.getFeatureOfInterest().equals(""String_Node_Str"") || observation.getFeatureOfInterest() == null) foi=ConnectionManager.propertyManagement.getOpeniotResourceNamespace() + Double.toString(sensor.getPlace().getLat()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + Double.toString(sensor.getPlace().getLng()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
 else foi=observation.getFeatureOfInterest();
triples+=TriplesDataRetriever.getObservationTripleData(observation.getId(),observation.getSensor(),foi,observation.getTimes());
OntModel model=ModelFactory.createOntologyModel();
for (ObservedProperty obv : observation.getReadings()) {
OntClass cl=model.createClass(obv.getPropertyType());
if (obv.getUnit().equals(""String_Node_Str"")) triples+=TriplesDataRetriever.getTripleDataHasNoUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue().toString(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
 else triples+=TriplesDataRetriever.getTripleDataHasUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue().toString(),obv.getUnit(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
}
sensorManager.insertTriplesToGraph(observation.getDataGraph(),triples);
logger.info(""String_Node_Str"");
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
RDFTuple tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
if (PermissionsUtil.getUserType(tuple.getGraphURL()) == PermissionsUtil.GUESS_USER) permissionString=PermissionsUtil.ADD_TRIPLES_GUESS;
 else if (PermissionsUtil.getUserType(tuple.getGraphURL()) == PermissionsUtil.DEMO_USER) permissionString=PermissionsUtil.ADD_TRIPLES_DEMO;
 else permissionString=PermissionsUtil.ADD_TRIPLES_MAIN;
if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
sensorManager.insertTriplesToGraph(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
if (PermissionsUtil.getUserType(tuple.getGraphURL()) == PermissionsUtil.GUESS_USER) permissionString=PermissionsUtil.DEL_TRIPLES_GUESS;
 else if (PermissionsUtil.getUserType(tuple.getGraphURL()) == PermissionsUtil.DEMO_USER) permissionString=PermissionsUtil.DEL_TRIPLES_DEMO;
 else permissionString=PermissionsUtil.DEL_TRIPLES_MAIN;
if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
if (tuple.getNtriple().equals(""String_Node_Str"")) {
sensorManager.clearGraph(tuple.getGraphURL());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
 else {
sensorManager.deleteTriples(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
HashMap<String,String> patterns=null;
if (PermissionsUtil.getUserType(patterns.get(""String_Node_Str"")) == PermissionsUtil.GUESS_USER) permissionString=PermissionsUtil.UPDATE_TRIPLES_GUESS;
 else if (PermissionsUtil.getUserType(patterns.get(""String_Node_Str"")) == PermissionsUtil.DEMO_USER) permissionString=PermissionsUtil.UPDATE_TRIPLES_DEMO;
 else permissionString=PermissionsUtil.UPDATE_TRIPLES_MAIN;
if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
if (object instanceof HashMap<?,?>) patterns=(HashMap<String,String>)object;
sensorManager.updateGraph(patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""));
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
default :
break;
}
}
 catch (Exception e) {
logger.error(""String_Node_Str"",e);
result=e.toString();
}
return result;
}","private String processRequestImpl(String api,Object object,String clientId,String token){
  String result=""String_Node_Str"";
  try {
    SensorManager sensorManager=new SensorManager();
    Sensor sensor=null;
    String triples=""String_Node_Str"";
switch (api) {
case ""String_Node_Str"":
      if (object instanceof Sensor)       sensor=(Sensor)object;
 else       break;
    logger.info(""String_Node_Str"" + sensor.getId());
  if ((sensor.getMetaGraph() == null) || (sensor.getMetaGraph() == ""String_Node_Str""))   sensor.setMetaGraph(propertyManagement.getSchedulerLsmMetaGraph());
String permissionString=""String_Node_Str"";
if (PermissionsUtil.getUserType(sensor.getMetaGraph()) == PermissionsUtil.GUESS_USER) permissionString=PermissionsUtil.ADD_SENSOR_GUESS;
 else if (PermissionsUtil.getUserType(sensor.getMetaGraph()) == PermissionsUtil.DEMO_USER) permissionString=PermissionsUtil.ADD_SENSOR_DEMO;
 else permissionString=PermissionsUtil.ADD_SENSOR_MAIN;
if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
sensorManager.setDataGraph(sensor.getDataGraph());
sensorManager.setMetaGraph(sensor.getMetaGraph());
triples=TriplesDataRetriever.getSensorTripleMetadata(sensor);
sensorManager.insertTriplesToGraph(sensor.getMetaGraph(),triples);
logger.info(""String_Node_Str"");
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
Observation observation=null;
if (object instanceof Observation) observation=(Observation)object;
 else break;
logger.info(""String_Node_Str"" + observation.getId());
triples=""String_Node_Str"";
if ((observation.getMetaGraph() == null) || (observation.getMetaGraph() == ""String_Node_Str"")) observation.setMetaGraph(propertyManagement.getLSMLocalMetaGraph());
if (PermissionsUtil.getUserType(observation.getMetaGraph()) == PermissionsUtil.GUESS_USER) permissionString=PermissionsUtil.UPDATE_SENSOR_DATA_GUESS;
 else if (PermissionsUtil.getUserType(observation.getMetaGraph()) == PermissionsUtil.DEMO_USER) permissionString=PermissionsUtil.UPDATE_SENSOR_DATA_DEMO;
 else permissionString=PermissionsUtil.UPDATE_SENSOR_DATA_MAIN;
if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
sensorManager.setDataGraph(observation.getDataGraph());
sensorManager.setMetaGraph(observation.getMetaGraph());
sensor=sensorManager.getSpecificSensorWithSensorId(observation.getSensor());
if (sensor == null) {
result=""String_Node_Str"" + observation.getSensor() + ""String_Node_Str"";
return result;
}
String foi=""String_Node_Str"";
if (observation.getFeatureOfInterest().equals(""String_Node_Str"") || observation.getFeatureOfInterest() == null) foi=ConnectionManager.propertyManagement.getOpeniotResourceNamespace() + Double.toString(sensor.getPlace().getLat()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + Double.toString(sensor.getPlace().getLng()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
 else foi=observation.getFeatureOfInterest();
triples+=TriplesDataRetriever.getObservationTripleData(observation.getId(),observation.getSensor(),foi,observation.getTimes());
OntModel model=ModelFactory.createOntologyModel();
for (ObservedProperty obv : observation.getReadings()) {
OntClass cl=model.createClass(obv.getPropertyType());
if (obv.getUnit().equals(""String_Node_Str"")) triples+=TriplesDataRetriever.getTripleDataHasNoUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue().toString(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
 else triples+=TriplesDataRetriever.getTripleDataHasUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue().toString(),obv.getUnit(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
}
sensorManager.insertTriplesToGraph(observation.getDataGraph(),triples);
logger.info(""String_Node_Str"");
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
RDFTuple tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
if (PermissionsUtil.getUserType(tuple.getGraphURL()) == PermissionsUtil.GUESS_USER) permissionString=PermissionsUtil.ADD_TRIPLES_GUESS;
 else if (PermissionsUtil.getUserType(tuple.getGraphURL()) == PermissionsUtil.DEMO_USER) permissionString=PermissionsUtil.ADD_TRIPLES_DEMO;
 else permissionString=PermissionsUtil.ADD_TRIPLES_MAIN;
if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
sensorManager.insertTriplesToGraph(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
if (PermissionsUtil.getUserType(tuple.getGraphURL()) == PermissionsUtil.GUESS_USER) permissionString=PermissionsUtil.DEL_TRIPLES_GUESS;
 else if (PermissionsUtil.getUserType(tuple.getGraphURL()) == PermissionsUtil.DEMO_USER) permissionString=PermissionsUtil.DEL_TRIPLES_DEMO;
 else permissionString=PermissionsUtil.DEL_TRIPLES_MAIN;
if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
if (tuple.getNtriple().equals(""String_Node_Str"")) {
sensorManager.clearGraph(tuple.getGraphURL());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
 else {
sensorManager.deleteTriples(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
HashMap<String,String> patterns=null;
if (PermissionsUtil.getUserType(patterns.get(""String_Node_Str"")) == PermissionsUtil.GUESS_USER) permissionString=PermissionsUtil.UPDATE_TRIPLES_GUESS;
 else if (PermissionsUtil.getUserType(patterns.get(""String_Node_Str"")) == PermissionsUtil.DEMO_USER) permissionString=PermissionsUtil.UPDATE_TRIPLES_DEMO;
 else permissionString=PermissionsUtil.UPDATE_TRIPLES_MAIN;
if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
if (object instanceof HashMap<?,?>) patterns=(HashMap<String,String>)object;
sensorManager.updateGraph(patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""));
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
default :
break;
}
}
 catch (Exception e) {
logger.error(""String_Node_Str"",e);
result=e.toString();
}
return result;
}",0.9997838149455934
15574,"private Sensor processObjectRequestImpl(String api,String sensorInfo,String graphURL,String clientId,String token){
  Sensor sensor=null;
  try {
    SensorManager sensorManager=new SensorManager();
    sensorManager.setMetaGraph(graphURL);
switch (api) {
case ""String_Node_Str"":
      String permissionString=""String_Node_Str"";
    if (PermissionsUtil.getUserType(graphURL) == PermissionsUtil.GUESS_USER)     permissionString=PermissionsUtil.GET_SENSOR_GUESS;
 else     if (PermissionsUtil.getUserType(graphURL) == PermissionsUtil.DEMO_USER)     permissionString=PermissionsUtil.GET_SENSOR_DEMO;
 else     permissionString=PermissionsUtil.GET_SENSOR_MAIN;
  if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
    sensor=sensorManager.getSpecifiedSensorWithSensorId(sensorInfo);
    logger.info(sensor.getId());
  }
 else   logger.info(""String_Node_Str"");
break;
default :
break;
}
}
 catch (Exception e) {
e.printStackTrace();
}
return sensor;
}","private Sensor processObjectRequestImpl(String api,String sensorInfo,String graphURL,String clientId,String token){
  Sensor sensor=null;
  try {
    SensorManager sensorManager=new SensorManager();
    sensorManager.setMetaGraph(graphURL);
switch (api) {
case ""String_Node_Str"":
      String permissionString=""String_Node_Str"";
    if (PermissionsUtil.getUserType(graphURL) == PermissionsUtil.GUESS_USER)     permissionString=PermissionsUtil.GET_SENSOR_GUESS;
 else     if (PermissionsUtil.getUserType(graphURL) == PermissionsUtil.DEMO_USER)     permissionString=PermissionsUtil.GET_SENSOR_DEMO;
 else     permissionString=PermissionsUtil.GET_SENSOR_MAIN;
  if (SecurityUtil.hasPermission(PermissionsUtil.LSM_ALL,getServletContext(),token,clientId) || SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
    sensor=sensorManager.getSpecificSensorWithSensorId(sensorInfo);
    logger.info(sensor.getId());
  }
 else   logger.info(""String_Node_Str"");
break;
default :
break;
}
}
 catch (Exception e) {
e.printStackTrace();
}
return sensor;
}",0.9986000933271116
15575,"public static String getMDataOfSensorTypeInArea(String lsmMetaGraph,double longitude,double latitude,float radius,String sensorType){
  StringBuilder update=new StringBuilder();
  String str=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + lsmMetaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ longitude+ ""String_Node_Str""+ latitude+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  logger.debug(""String_Node_Str"" + str);
  update.append(str);
  return update.toString();
}","public static String getMDataOfSensorTypeInArea(String lsmMetaGraph,double longitude,double latitude,float radius,String sensorType){
  StringBuilder update=new StringBuilder();
  String str=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + lsmMetaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ longitude+ ""String_Node_Str""+ latitude+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  logger.debug(""String_Node_Str"" + str);
  update.append(str);
  return update.toString();
}",0.9885334942667472
15576,"public static String getSensTypeInArea(String lsmMetaGraph,double longitude,double latitude,float radius){
  StringBuilder update=new StringBuilder();
  String str=(""String_Node_Str"" + ""String_Node_Str"" + lsmMetaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ longitude+ ""String_Node_Str""+ latitude+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str"");
  logger.debug(""String_Node_Str"" + str);
  update.append(str);
  return update.toString();
}","public static String getSensTypeInArea(String lsmMetaGraph,double longitude,double latitude,float radius){
  StringBuilder update=new StringBuilder();
  String str=(""String_Node_Str"" + ""String_Node_Str"" + lsmMetaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ longitude+ ""String_Node_Str""+ latitude+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str"");
  logger.debug(""String_Node_Str"" + str);
  update.append(str);
  return update.toString();
}",0.9830508474576272
15577,"public static String getMeasumerementDataTypeOfSensorTypeInArea(String lsmMetaGraph,double longitude,double latitude,float radius,String sensorType,String measurement,String unit){
  StringBuilder update=new StringBuilder();
  String str=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + measurement + ""String_Node_Str""+ ""String_Node_Str""+ unit+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ lsmMetaGraph+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ longitude+ ""String_Node_Str""+ latitude+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  update.append(str);
  return update.toString();
}","public static String getMeasumerementDataTypeOfSensorTypeInArea(String lsmMetaGraph,double longitude,double latitude,float radius,String sensorType,String measurement,String unit){
  StringBuilder update=new StringBuilder();
  String str=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + measurement + ""String_Node_Str""+ ""String_Node_Str""+ unit+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ lsmMetaGraph+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ longitude+ ""String_Node_Str""+ latitude+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  update.append(str);
  return update.toString();
}",0.9893438025799216
15578,"public static String getMeasumerementAndUnitOfSensorTypeInArea(String lsmMetaGraph,double longitude,double latitude,float radius,String sensorType){
  StringBuilder update=new StringBuilder();
  String str=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + lsmMetaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ longitude+ ""String_Node_Str""+ latitude+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  update.append(str);
  return update.toString();
}","public static String getMeasumerementAndUnitOfSensorTypeInArea(String lsmMetaGraph,double longitude,double latitude,float radius,String sensorType){
  StringBuilder update=new StringBuilder();
  String str=(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + lsmMetaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ longitude+ ""String_Node_Str""+ latitude+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  update.append(str);
  return update.toString();
}",0.9878749202297384
15579,"@Override public void updateTriples(String graphURL,String newTriplePatterns,String oldTriplePatterns,String clientId,String token){
  HttpURLConnection conn=null;
  ObjectOutputStream dos=null;
  int responseCode=0;
  try {
    URL url=new URL(ObjectServletURL);
    conn=(HttpURLConnection)url.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",graphURL);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    HashMap<String,String> patterns=new HashMap<String,String>();
    patterns.put(""String_Node_Str"",oldTriplePatterns);
    patterns.put(""String_Node_Str"",newTriplePatterns);
    dos=new ObjectOutputStream(conn.getOutputStream());
    dos.writeObject(patterns);
    dos.flush();
    dos.close();
    responseCode=conn.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
      String response=reader.readLine();
      System.out.println(""String_Node_Str"" + response);
    }
 else {
      System.out.println(""String_Node_Str"" + responseCode);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
}","@Override public void updateTriples(String graphURL,String newTriplePatterns,String oldTriplePatterns,String clientId,String token){
  HttpURLConnection conn=null;
  ObjectOutputStream dos=null;
  int responseCode=0;
  try {
    URL url=new URL(ObjectServletURL);
    conn=(HttpURLConnection)url.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",graphURL);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",clientId);
    conn.setRequestProperty(""String_Node_Str"",token);
    HashMap<String,String> patterns=new HashMap<String,String>();
    patterns.put(""String_Node_Str"",oldTriplePatterns);
    patterns.put(""String_Node_Str"",newTriplePatterns);
    dos=new ObjectOutputStream(conn.getOutputStream());
    dos.writeObject(patterns);
    dos.flush();
    dos.close();
    responseCode=conn.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
      String response=reader.readLine();
      System.out.println(""String_Node_Str"" + response);
    }
 else {
      System.out.println(""String_Node_Str"" + responseCode);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
}",0.9650393700787402
15580,"@Override public void deleteTriples(String graphURL,String clientId,String token){
  HttpURLConnection conn=null;
  ObjectOutputStream dos=null;
  String api=""String_Node_Str"";
  String urlString=ObjectServletURL;
  try {
    URL url=new URL(urlString);
    conn=(HttpURLConnection)url.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",api);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    RDFTuple tuple=new RDFTuple(graphURL,""String_Node_Str"");
    dos=new ObjectOutputStream(conn.getOutputStream());
    dos.writeObject(tuple);
    dos.flush();
    dos.close();
    int responseCode=conn.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
      String response=reader.readLine();
      logger.info(response);
    }
 else {
      logger.error(""String_Node_Str"" + responseCode);
    }
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
  }
}","@Override public void deleteTriples(String graphURL,String clientId,String token){
  HttpURLConnection conn=null;
  ObjectOutputStream dos=null;
  String api=""String_Node_Str"";
  String urlString=ObjectServletURL;
  try {
    URL url=new URL(urlString);
    conn=(HttpURLConnection)url.openConnection();
    conn.setDoInput(true);
    conn.setDoOutput(true);
    conn.setUseCaches(false);
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",api);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",clientId);
    conn.setRequestProperty(""String_Node_Str"",token);
    RDFTuple tuple=new RDFTuple(graphURL,""String_Node_Str"");
    dos=new ObjectOutputStream(conn.getOutputStream());
    dos.writeObject(tuple);
    dos.flush();
    dos.close();
    int responseCode=conn.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(conn.getInputStream()));
      String response=reader.readLine();
      logger.info(response);
    }
 else {
      logger.error(""String_Node_Str"" + responseCode);
    }
  }
 catch (  Exception ex) {
    logger.error(""String_Node_Str"",ex);
  }
}",0.9582863585118376
15581,"@Override public void uploadSchema(LSMSchema schema,String name,String clientId,String token){
  try {
    URL url=new URL(UPLOAD_URL);
    HttpURLConnection httpConn=(HttpURLConnection)url.openConnection();
    httpConn.setUseCaches(false);
    httpConn.setDoOutput(true);
    httpConn.setRequestMethod(""String_Node_Str"");
    httpConn.setRequestProperty(""String_Node_Str"",name);
    httpConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    OutputStream outputStream=httpConn.getOutputStream();
    logger.info(""String_Node_Str"");
    schema.getBase().write(outputStream,""String_Node_Str"");
    logger.info(""String_Node_Str"");
    outputStream.close();
    int responseCode=httpConn.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(httpConn.getInputStream()));
      String response=reader.readLine();
      logger.info(""String_Node_Str"" + response);
    }
 else {
      logger.error(""String_Node_Str"" + responseCode);
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","@Override public void uploadSchema(LSMSchema schema,String name,String clientId,String token){
  try {
    URL url=new URL(UPLOAD_URL);
    HttpURLConnection httpConn=(HttpURLConnection)url.openConnection();
    httpConn.setUseCaches(false);
    httpConn.setDoOutput(true);
    httpConn.setRequestMethod(""String_Node_Str"");
    httpConn.setRequestProperty(""String_Node_Str"",name);
    httpConn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    httpConn.setRequestProperty(""String_Node_Str"",clientId);
    httpConn.setRequestProperty(""String_Node_Str"",token);
    OutputStream outputStream=httpConn.getOutputStream();
    logger.info(""String_Node_Str"");
    schema.getBase().write(outputStream,""String_Node_Str"");
    logger.info(""String_Node_Str"");
    outputStream.close();
    int responseCode=httpConn.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
      BufferedReader reader=new BufferedReader(new InputStreamReader(httpConn.getInputStream()));
      String response=reader.readLine();
      logger.info(""String_Node_Str"" + response);
    }
 else {
      logger.error(""String_Node_Str"" + responseCode);
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}",0.9488611946712504
15582,"public void deleteTriples(String graphName,String triples){
  Connection conn=null;
  try {
    logger.info(""String_Node_Str"");
    if (!VirtuosoConstantUtil.authorizedGraphs.contains(graphName)) {
      logger.info(""String_Node_Str"" + graphName);
      return;
    }
    conn=ConnectionManager.getConnectionPool().getConnection();
    String sql=""String_Node_Str"" + graphName + ""String_Node_Str""+ triples+ ""String_Node_Str"";
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"" + sql);
    PreparedStatement ps=conn.prepareStatement(sql);
    boolean i=ps.execute(sql);
    System.out.println(""String_Node_Str"" + graphName);
    ConnectionManager.attemptClose(ps);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    ConnectionManager.attemptClose(conn);
  }
}","public void deleteTriples(String graphName,String triples){
  Connection conn=null;
  try {
    logger.info(""String_Node_Str"");
    conn=ConnectionManager.getConnectionPool().getConnection();
    String sql=""String_Node_Str"" + graphName + ""String_Node_Str""+ triples+ ""String_Node_Str"";
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"" + sql);
    PreparedStatement ps=conn.prepareStatement(sql);
    boolean i=ps.execute(sql);
    System.out.println(""String_Node_Str"" + graphName);
    ConnectionManager.attemptClose(ps);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    ConnectionManager.attemptClose(conn);
  }
}",0.9090909090909092
15583,"public void deleteAllReadings(String sensorURL,String dateOperator,Date fromTime,Date toTime){
  String sql=""String_Node_Str"";
  Connection conn=null;
  logger.info(""String_Node_Str"");
  if (!VirtuosoConstantUtil.authorizedGraphs.contains(dataGraph)) {
    logger.info(""String_Node_Str"" + dataGraph);
    return;
  }
  if (toTime != null) {
    sql=""String_Node_Str"" + dataGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorURL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ dateOperator+ ""String_Node_Str""+ DateUtil.date2StandardString(fromTime)+ ""String_Node_Str""+ ""String_Node_Str""+ DateUtil.date2StandardString(toTime)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorURL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + dataGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorURL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ dateOperator+ ""String_Node_Str""+ DateUtil.date2StandardString(fromTime)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorURL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  try {
    conn=ConnectionManager.getConnectionPool().getConnection();
    PreparedStatement ps=conn.prepareStatement(sql);
    logger.info(""String_Node_Str"" + sql);
    ps.executeQuery();
    logger.info(""String_Node_Str"");
    ConnectionManager.attemptClose(ps);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"" + sql,e);
    ConnectionManager.attemptClose(conn);
  }
}","public void deleteAllReadings(String sensorURL,String dateOperator,Date fromTime,Date toTime){
  String sql=""String_Node_Str"";
  Connection conn=null;
  logger.info(""String_Node_Str"");
  if (toTime != null) {
    sql=""String_Node_Str"" + dataGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorURL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ dateOperator+ ""String_Node_Str""+ DateUtil.date2StandardString(fromTime)+ ""String_Node_Str""+ ""String_Node_Str""+ DateUtil.date2StandardString(toTime)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorURL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + dataGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorURL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ dateOperator+ ""String_Node_Str""+ DateUtil.date2StandardString(fromTime)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sensorURL+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  try {
    conn=ConnectionManager.getConnectionPool().getConnection();
    PreparedStatement ps=conn.prepareStatement(sql);
    logger.info(""String_Node_Str"" + sql);
    ps.executeQuery();
    logger.info(""String_Node_Str"");
    ConnectionManager.attemptClose(ps);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"" + sql,e);
    ConnectionManager.attemptClose(conn);
  }
}",0.9622641509433962
15584,"public void clearGraph(String graphName){
  Connection conn=null;
  try {
    logger.info(""String_Node_Str"");
    if (!VirtuosoConstantUtil.authorizedGraphs.contains(graphName)) {
      logger.info(""String_Node_Str"" + graphName);
      return;
    }
    conn=ConnectionManager.getConnectionPool().getConnection();
    logger.info(""String_Node_Str"" + graphName);
    String sql=""String_Node_Str"" + graphName + ""String_Node_Str"";
    PreparedStatement ps=conn.prepareStatement(sql);
    boolean i=ps.execute(sql);
    logger.info(""String_Node_Str"" + graphName);
    ConnectionManager.attemptClose(ps);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    ConnectionManager.attemptClose(conn);
  }
}","public void clearGraph(String graphName){
  Connection conn=null;
  try {
    logger.info(""String_Node_Str"");
    conn=ConnectionManager.getConnectionPool().getConnection();
    logger.info(""String_Node_Str"" + graphName);
    String sql=""String_Node_Str"" + graphName + ""String_Node_Str"";
    PreparedStatement ps=conn.prepareStatement(sql);
    boolean i=ps.execute(sql);
    logger.info(""String_Node_Str"" + graphName);
    ConnectionManager.attemptClose(ps);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    ConnectionManager.attemptClose(conn);
  }
}",0.8981077147016011
15585,"public static String getSensorTripleMetadata(Sensor s,String sensorTypeId){
  String triples=""String_Node_Str"";
  String xsltPath=XSLTMapFile.sensormeta2xslt;
  xsltPath=""String_Node_Str"" + xsltPath;
  TransformerFactory tFactory=TransformerFactory.newInstance();
  String prefix=propertyManagement.getOpeniotResourceNamespace();
  String xml=""String_Node_Str"";
  try {
    Place place=s.getPlace();
    Transformer transformer=tFactory.newTransformer(new StreamSource(new File(xsltPath)));
    transformer.setParameter(""String_Node_Str"",s.getId());
    transformer.setParameter(""String_Node_Str"",DateUtil.date2StandardString(new Date()));
    transformer.setParameter(""String_Node_Str"",prefix);
    transformer.setParameter(""String_Node_Str"",place.getId());
    transformer.setParameter(""String_Node_Str"",place.getGeonameid());
    transformer.setParameter(""String_Node_Str"",place.getCity());
    transformer.setParameter(""String_Node_Str"",place.getProvince());
    transformer.setParameter(""String_Node_Str"",place.getCountry());
    transformer.setParameter(""String_Node_Str"",place.getContinent());
    transformer.setParameter(""String_Node_Str"",place.getLat());
    transformer.setParameter(""String_Node_Str"",place.getLng());
    transformer.setParameter(""String_Node_Str"",s.getName());
    transformer.setParameter(""String_Node_Str"",s.getAuthor());
    xml=""String_Node_Str"";
    xml=xml.trim().replaceFirst(""String_Node_Str"",""String_Node_Str"");
    InputStream inputStream=new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
    Writer outWriter=new StringWriter();
    StreamResult result=new StreamResult(outWriter);
    transformer.transform(new StreamSource(inputStream),result);
    triples=outWriter.toString().trim();
    String sensorTypeTriples=""String_Node_Str"";
    if (sensorTypeId == ""String_Node_Str"")     sensorTypeId=prefix + System.nanoTime();
    sensorTypeTriples=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ s.getSensorType()+ ""String_Node_Str"";
    triples+=sensorTypeTriples;
    String observesTriples=""String_Node_Str"";
    for (    String classURL : s.getProperties().keySet()) {
      String instanceId=prefix + System.nanoTime();
      s.getProperties().put(classURL,instanceId);
      observesTriples+=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"";
      observesTriples+=""String_Node_Str"" + instanceId + ""String_Node_Str""+ classURL+ ""String_Node_Str"";
    }
    triples+=observesTriples;
    triples+=""String_Node_Str"" + place.getId() + ""String_Node_Str""+ place.getLng()+ ""String_Node_Str""+ place.getLat()+ ""String_Node_Str"";
  }
 catch (  Exception e) {
    logger.info(e.toString());
  }
  return triples;
}","public static String getSensorTripleMetadata(Sensor s,String sensorTypeId){
  String triples=""String_Node_Str"";
  String xsltPath=XSLTMapFile.sensormeta2xslt;
  xsltPath=ConstantsUtil.realPath + xsltPath;
  TransformerFactory tFactory=TransformerFactory.newInstance();
  String prefix=propertyManagement.getOpeniotResourceNamespace();
  String xml=""String_Node_Str"";
  try {
    Place place=s.getPlace();
    Transformer transformer=tFactory.newTransformer(new StreamSource(new File(xsltPath)));
    transformer.setParameter(""String_Node_Str"",s.getId());
    transformer.setParameter(""String_Node_Str"",DateUtil.date2StandardString(new Date()));
    transformer.setParameter(""String_Node_Str"",prefix);
    transformer.setParameter(""String_Node_Str"",place.getId());
    transformer.setParameter(""String_Node_Str"",place.getGeonameid());
    transformer.setParameter(""String_Node_Str"",place.getCity());
    transformer.setParameter(""String_Node_Str"",place.getProvince());
    transformer.setParameter(""String_Node_Str"",place.getCountry());
    transformer.setParameter(""String_Node_Str"",place.getContinent());
    transformer.setParameter(""String_Node_Str"",place.getLat());
    transformer.setParameter(""String_Node_Str"",place.getLng());
    transformer.setParameter(""String_Node_Str"",s.getName());
    transformer.setParameter(""String_Node_Str"",s.getAuthor());
    xml=""String_Node_Str"";
    xml=xml.trim().replaceFirst(""String_Node_Str"",""String_Node_Str"");
    InputStream inputStream=new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
    Writer outWriter=new StringWriter();
    StreamResult result=new StreamResult(outWriter);
    transformer.transform(new StreamSource(inputStream),result);
    triples=outWriter.toString().trim();
    String sensorTypeTriples=""String_Node_Str"";
    if (sensorTypeId == ""String_Node_Str"")     sensorTypeId=prefix + System.nanoTime();
    sensorTypeTriples=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ s.getSensorType()+ ""String_Node_Str"";
    triples+=sensorTypeTriples;
    String observesTriples=""String_Node_Str"";
    for (    String classURL : s.getProperties().keySet()) {
      String instanceId=prefix + System.nanoTime();
      s.getProperties().put(classURL,instanceId);
      observesTriples+=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"";
      observesTriples+=""String_Node_Str"" + instanceId + ""String_Node_Str""+ classURL+ ""String_Node_Str"";
    }
    triples+=observesTriples;
    triples+=""String_Node_Str"" + place.getId() + ""String_Node_Str""+ place.getLng()+ ""String_Node_Str""+ place.getLat()+ ""String_Node_Str"";
  }
 catch (  Exception e) {
    logger.info(e.toString());
  }
  return triples;
}",0.9931107578166402
15586,"public static void init(){
  SensorManager sensorManager=new SensorManager();
  logger.debug(""String_Node_Str"");
  List<RegisteredService> allRegisteredServices=sensorManager.getAllRegisteredServices();
  if (allRegisteredServices == null || allRegisteredServices.isEmpty()) {
    logger.debug(""String_Node_Str"");
    SecurityInitializer securityInitializer=new SecurityInitializer();
    securityInitializer.initialize();
  }
}","public static void init(){
  SensorManager sensorManager=new SensorManager();
  props=new PropertyManagement();
  String securityLsmGraphURL=props.getSecurityLsmGraphURL();
  sensorManager.setMetaGraph(securityLsmGraphURL);
  logger.debug(""String_Node_Str"");
  List<RegisteredService> allRegisteredServices=sensorManager.getAllRegisteredServices();
  if (allRegisteredServices == null || allRegisteredServices.isEmpty()) {
    logger.debug(""String_Node_Str"");
    SecurityInitializer securityInitializer=new SecurityInitializer(securityLsmGraphURL);
    securityInitializer.initialize();
  }
}",0.8383937316356513
15587,"private SecurityInitializer(){
  props=new PropertyManagement();
  lSMOauthGraphURL=props.getSecurityLsmGraphURL();
  helper=new OauthServletHelper();
  acUtil=AccessControlUtil.getRestInstance();
}","private SecurityInitializer(String graphURL){
  props=new PropertyManagement();
  lSMOauthGraphURL=graphURL;
  helper=new OauthServletHelper();
  acUtil=AccessControlUtil.getRestInstance();
}",0.9048843187660668
15588,"public static String getSensorTripleMetadata(Sensor s,String sensorTypeId){
  String triples=""String_Node_Str"";
  String xsltPath=XSLTMapFile.sensormeta2xslt;
  xsltPath=ConstantsUtil.realPath + xsltPath;
  TransformerFactory tFactory=TransformerFactory.newInstance();
  String prefix=propertyManagement.getOpeniotResourceNamespace();
  String xml=""String_Node_Str"";
  try {
    Place place=s.getPlace();
    Transformer transformer=tFactory.newTransformer(new StreamSource(new File(xsltPath)));
    transformer.setParameter(""String_Node_Str"",s.getId());
    transformer.setParameter(""String_Node_Str"",prefix);
    transformer.setParameter(""String_Node_Str"",place.getId());
    transformer.setParameter(""String_Node_Str"",place.getGeonameid());
    transformer.setParameter(""String_Node_Str"",place.getCity());
    transformer.setParameter(""String_Node_Str"",place.getProvince());
    transformer.setParameter(""String_Node_Str"",place.getCountry());
    transformer.setParameter(""String_Node_Str"",place.getContinent());
    transformer.setParameter(""String_Node_Str"",place.getLat());
    transformer.setParameter(""String_Node_Str"",place.getLng());
    transformer.setParameter(""String_Node_Str"",s.getName());
    transformer.setParameter(""String_Node_Str"",s.getAuthor());
    xml=""String_Node_Str"";
    xml=xml.trim().replaceFirst(""String_Node_Str"",""String_Node_Str"");
    InputStream inputStream=new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
    Writer outWriter=new StringWriter();
    StreamResult result=new StreamResult(outWriter);
    transformer.transform(new StreamSource(inputStream),result);
    triples=outWriter.toString().trim();
    String sensorTypeTriples=""String_Node_Str"";
    if (sensorTypeId == ""String_Node_Str"")     sensorTypeId=prefix + System.nanoTime();
    sensorTypeTriples=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ s.getSensorType()+ ""String_Node_Str"";
    triples+=sensorTypeTriples;
    String observesTriples=""String_Node_Str"";
    for (    String classURL : s.getProperties().keySet()) {
      String instanceId=prefix + System.nanoTime();
      s.getProperties().put(classURL,instanceId);
      observesTriples+=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"";
      observesTriples+=""String_Node_Str"" + instanceId + ""String_Node_Str""+ classURL+ ""String_Node_Str"";
    }
    triples+=observesTriples;
    triples+=""String_Node_Str"" + place.getId() + ""String_Node_Str""+ place.getLng()+ ""String_Node_Str""+ place.getLat()+ ""String_Node_Str"";
  }
 catch (  Exception e) {
    logger.info(e.toString());
  }
  return triples;
}","public static String getSensorTripleMetadata(Sensor s,String sensorTypeId){
  String triples=""String_Node_Str"";
  String xsltPath=XSLTMapFile.sensormeta2xslt;
  xsltPath=ConstantsUtil.realPath + xsltPath;
  TransformerFactory tFactory=TransformerFactory.newInstance();
  String prefix=propertyManagement.getOpeniotResourceNamespace();
  String xml=""String_Node_Str"";
  try {
    Place place=s.getPlace();
    Transformer transformer=tFactory.newTransformer(new StreamSource(new File(xsltPath)));
    transformer.setParameter(""String_Node_Str"",s.getId());
    transformer.setParameter(""String_Node_Str"",DateUtil.date2StandardString(new Date()));
    transformer.setParameter(""String_Node_Str"",prefix);
    transformer.setParameter(""String_Node_Str"",place.getId());
    transformer.setParameter(""String_Node_Str"",place.getGeonameid());
    transformer.setParameter(""String_Node_Str"",place.getCity());
    transformer.setParameter(""String_Node_Str"",place.getProvince());
    transformer.setParameter(""String_Node_Str"",place.getCountry());
    transformer.setParameter(""String_Node_Str"",place.getContinent());
    transformer.setParameter(""String_Node_Str"",place.getLat());
    transformer.setParameter(""String_Node_Str"",place.getLng());
    transformer.setParameter(""String_Node_Str"",s.getName());
    transformer.setParameter(""String_Node_Str"",s.getAuthor());
    xml=""String_Node_Str"";
    xml=xml.trim().replaceFirst(""String_Node_Str"",""String_Node_Str"");
    InputStream inputStream=new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
    Writer outWriter=new StringWriter();
    StreamResult result=new StreamResult(outWriter);
    transformer.transform(new StreamSource(inputStream),result);
    triples=outWriter.toString().trim();
    String sensorTypeTriples=""String_Node_Str"";
    if (sensorTypeId == ""String_Node_Str"")     sensorTypeId=prefix + System.nanoTime();
    sensorTypeTriples=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ s.getSensorType()+ ""String_Node_Str"";
    triples+=sensorTypeTriples;
    String observesTriples=""String_Node_Str"";
    for (    String classURL : s.getProperties().keySet()) {
      String instanceId=prefix + System.nanoTime();
      s.getProperties().put(classURL,instanceId);
      observesTriples+=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"";
      observesTriples+=""String_Node_Str"" + instanceId + ""String_Node_Str""+ classURL+ ""String_Node_Str"";
    }
    triples+=observesTriples;
    triples+=""String_Node_Str"" + place.getId() + ""String_Node_Str""+ place.getLng()+ ""String_Node_Str""+ place.getLat()+ ""String_Node_Str"";
  }
 catch (  Exception e) {
    logger.info(e.toString());
  }
  return triples;
}",0.9838593974175036
15589,"private String processRequestImpl(String api,Object object,String clientId,String token){
  String result=""String_Node_Str"";
  try {
    SensorManager sensorManager=new SensorManager();
    Sensor sensor=null;
    String triples=""String_Node_Str"";
switch (api) {
case ""String_Node_Str"":
      if (object instanceof Sensor)       sensor=(Sensor)object;
 else       break;
    logger.info(""String_Node_Str"" + sensor.getId());
  String permissionString=PermissionsUtil.ADD_SENSOR;
if (SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
  String sensorTypeId=sensorManager.getSensorTypeId(sensor.getSensorType().toLowerCase());
  triples=TriplesDataRetriever.getSensorTripleMetadata(sensor,sensorTypeId);
  if ((sensor.getMetaGraph() == null) || (sensor.getMetaGraph() == ""String_Node_Str""))   sensor.setMetaGraph(propertyManagement.getSchedulerLsmMetaGraph());
  sensorManager.setDataGraph(sensor.getDataGraph());
  sensorManager.setMetaGraph(sensor.getMetaGraph());
  sensorManager.insertTriplesToGraph(sensor.getMetaGraph(),triples);
  logger.info(""String_Node_Str"");
}
 else {
  result=""String_Node_Str"";
  logger.info(result);
}
break;
case ""String_Node_Str"":
Observation observation=null;
if (object instanceof Observation) observation=(Observation)object;
 else break;
logger.info(""String_Node_Str"" + observation.getId());
triples=""String_Node_Str"";
permissionString=PermissionsUtil.UPDATE_SENSOR_DATA;
if (SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
if ((observation.getMetaGraph() == null) || (observation.getMetaGraph() == ""String_Node_Str"")) observation.setMetaGraph(propertyManagement.getLSMLocalMetaGraph());
sensorManager.setDataGraph(observation.getDataGraph());
sensorManager.setMetaGraph(observation.getMetaGraph());
sensor=sensorManager.getSpecifiedSensorWithSensorId(observation.getSensor());
if (sensor == null) {
result=""String_Node_Str"" + observation.getSensor() + ""String_Node_Str"";
return result;
}
String foi=""String_Node_Str"";
if (observation.getFeatureOfInterest().equals(""String_Node_Str"") || observation.getFeatureOfInterest() == null) foi=ConnectionManager.propertyManagement.getOpeniotResourceNamespace() + Double.toString(sensor.getPlace().getLat()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + Double.toString(sensor.getPlace().getLng()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
 else foi=observation.getFeatureOfInterest();
triples+=TriplesDataRetriever.getObservationTripleData(observation.getId(),observation.getSensor(),foi,observation.getTimes());
OntModel model=ModelFactory.createOntologyModel();
for (ObservedProperty obv : observation.getReadings()) {
OntClass cl=model.createClass(obv.getPropertyType());
if (obv.getUnit().equals(""String_Node_Str"")) triples+=TriplesDataRetriever.getTripleDataHasNoUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
 else triples+=TriplesDataRetriever.getTripleDataHasUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue(),obv.getUnit(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
}
sensorManager.insertTriplesToGraph(observation.getDataGraph(),triples);
logger.info(""String_Node_Str"");
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
RDFTuple tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
permissionString=PermissionsUtil.ADD_TRIPLES;
if (SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
sensorManager.insertTriplesToGraph(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
permissionString=PermissionsUtil.DEL_TRIPLES;
if (SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
if (tuple.getNtriple().equals(""String_Node_Str"")) {
sensorManager.clearGraph(tuple.getGraphURL());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
 else {
sensorManager.deleteTriples(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
HashMap<String,String> patterns=null;
permissionString=PermissionsUtil.UPDATE_TRIPLES;
if (SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
if (object instanceof HashMap<?,?>) patterns=(HashMap<String,String>)object;
sensorManager.updateGraph(patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""));
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
default :
break;
}
}
 catch (Exception e) {
logger.error(""String_Node_Str"",e);
result=e.toString();
}
return result;
}","private String processRequestImpl(String api,Object object,String clientId,String token){
  String result=""String_Node_Str"";
  try {
    SensorManager sensorManager=new SensorManager();
    Sensor sensor=null;
    String triples=""String_Node_Str"";
switch (api) {
case ""String_Node_Str"":
      if (object instanceof Sensor)       sensor=(Sensor)object;
 else       break;
    logger.info(""String_Node_Str"" + sensor.getId());
  String permissionString=PermissionsUtil.ADD_SENSOR;
if (SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
  if ((sensor.getMetaGraph() == null) || (sensor.getMetaGraph() == ""String_Node_Str""))   sensor.setMetaGraph(propertyManagement.getSchedulerLsmMetaGraph());
  sensorManager.setDataGraph(sensor.getDataGraph());
  sensorManager.setMetaGraph(sensor.getMetaGraph());
  String sensorTypeId=sensorManager.getSensorTypeId(sensor.getSensorType().toLowerCase());
  triples=TriplesDataRetriever.getSensorTripleMetadata(sensor,sensorTypeId);
  sensorManager.insertTriplesToGraph(sensor.getMetaGraph(),triples);
  logger.info(""String_Node_Str"");
}
 else {
  result=""String_Node_Str"";
  logger.info(result);
}
break;
case ""String_Node_Str"":
Observation observation=null;
if (object instanceof Observation) observation=(Observation)object;
 else break;
logger.info(""String_Node_Str"" + observation.getId());
triples=""String_Node_Str"";
permissionString=PermissionsUtil.UPDATE_SENSOR_DATA;
if (SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
if ((observation.getMetaGraph() == null) || (observation.getMetaGraph() == ""String_Node_Str"")) observation.setMetaGraph(propertyManagement.getLSMLocalMetaGraph());
sensorManager.setDataGraph(observation.getDataGraph());
sensorManager.setMetaGraph(observation.getMetaGraph());
sensor=sensorManager.getSpecifiedSensorWithSensorId(observation.getSensor());
if (sensor == null) {
result=""String_Node_Str"" + observation.getSensor() + ""String_Node_Str"";
return result;
}
String foi=""String_Node_Str"";
if (observation.getFeatureOfInterest().equals(""String_Node_Str"") || observation.getFeatureOfInterest() == null) foi=ConnectionManager.propertyManagement.getOpeniotResourceNamespace() + Double.toString(sensor.getPlace().getLat()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + Double.toString(sensor.getPlace().getLng()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
 else foi=observation.getFeatureOfInterest();
triples+=TriplesDataRetriever.getObservationTripleData(observation.getId(),observation.getSensor(),foi,observation.getTimes());
OntModel model=ModelFactory.createOntologyModel();
for (ObservedProperty obv : observation.getReadings()) {
OntClass cl=model.createClass(obv.getPropertyType());
if (obv.getUnit().equals(""String_Node_Str"")) triples+=TriplesDataRetriever.getTripleDataHasNoUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
 else triples+=TriplesDataRetriever.getTripleDataHasUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue(),obv.getUnit(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
}
sensorManager.insertTriplesToGraph(observation.getDataGraph(),triples);
logger.info(""String_Node_Str"");
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
RDFTuple tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
permissionString=PermissionsUtil.ADD_TRIPLES;
if (SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
sensorManager.insertTriplesToGraph(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
permissionString=PermissionsUtil.DEL_TRIPLES;
if (SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
if (tuple.getNtriple().equals(""String_Node_Str"")) {
sensorManager.clearGraph(tuple.getGraphURL());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
 else {
sensorManager.deleteTriples(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
break;
case ""String_Node_Str"":
HashMap<String,String> patterns=null;
permissionString=PermissionsUtil.UPDATE_TRIPLES;
if (SecurityUtil.hasPermission(permissionString,getServletContext(),token,clientId)) {
if (object instanceof HashMap<?,?>) patterns=(HashMap<String,String>)object;
sensorManager.updateGraph(patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""));
}
 else {
result=""String_Node_Str"";
logger.info(result);
}
default :
break;
}
}
 catch (Exception e) {
logger.error(""String_Node_Str"",e);
result=e.toString();
}
return result;
}",0.9479825949367088
15590,"public static String getSensorTripleMetadata(Sensor s,String sensorTypeId){
  String triples=""String_Node_Str"";
  String xsltPath=XSLTMapFile.sensormeta2xslt;
  xsltPath=ConstantsUtil.realPath + xsltPath;
  TransformerFactory tFactory=TransformerFactory.newInstance();
  String prefix=propertyManagement.getOpeniotResourceNamespace();
  String xml=""String_Node_Str"";
  try {
    Place place=s.getPlace();
    Transformer transformer=tFactory.newTransformer(new StreamSource(new File(xsltPath)));
    transformer.setParameter(""String_Node_Str"",s.getId());
    transformer.setParameter(""String_Node_Str"",prefix);
    transformer.setParameter(""String_Node_Str"",place.getId());
    transformer.setParameter(""String_Node_Str"",place.getGeonameid());
    transformer.setParameter(""String_Node_Str"",place.getCity());
    transformer.setParameter(""String_Node_Str"",place.getProvince());
    transformer.setParameter(""String_Node_Str"",place.getCountry());
    transformer.setParameter(""String_Node_Str"",place.getContinent());
    transformer.setParameter(""String_Node_Str"",place.getLat());
    transformer.setParameter(""String_Node_Str"",place.getLng());
    transformer.setParameter(""String_Node_Str"",s.getName());
    transformer.setParameter(""String_Node_Str"",s.getAuthor());
    xml=""String_Node_Str"";
    xml=xml.trim().replaceFirst(""String_Node_Str"",""String_Node_Str"");
    InputStream inputStream=new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
    Writer outWriter=new StringWriter();
    StreamResult result=new StreamResult(outWriter);
    transformer.transform(new StreamSource(inputStream),result);
    triples=outWriter.toString().trim();
    String sensorTypeTriples=""String_Node_Str"";
    if (sensorTypeId == ""String_Node_Str"")     sensorTypeId=prefix + System.nanoTime();
    sensorTypeTriples=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ s.getSensorType()+ ""String_Node_Str"";
    triples+=sensorTypeTriples;
    String observesTriples=""String_Node_Str"";
    for (    String classURL : s.getProperties().keySet()) {
      String instanceId=prefix + System.nanoTime();
      s.getProperties().put(classURL,instanceId);
      observesTriples+=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"";
      observesTriples+=""String_Node_Str"" + instanceId + ""String_Node_Str""+ classURL+ ""String_Node_Str"";
    }
    triples+=observesTriples;
    triples+=""String_Node_Str"" + place.getId() + ""String_Node_Str""+ place.getLng()+ ""String_Node_Str""+ place.getLat()+ ""String_Node_Str"";
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return triples;
}","public static String getSensorTripleMetadata(Sensor s,String sensorTypeId){
  String triples=""String_Node_Str"";
  String xsltPath=XSLTMapFile.sensormeta2xslt;
  xsltPath=ConstantsUtil.realPath + xsltPath;
  TransformerFactory tFactory=TransformerFactory.newInstance();
  String prefix=propertyManagement.getOpeniotResourceNamespace();
  String xml=""String_Node_Str"";
  try {
    Place place=s.getPlace();
    Transformer transformer=tFactory.newTransformer(new StreamSource(new File(xsltPath)));
    transformer.setParameter(""String_Node_Str"",s.getId());
    transformer.setParameter(""String_Node_Str"",prefix);
    transformer.setParameter(""String_Node_Str"",place.getId());
    transformer.setParameter(""String_Node_Str"",place.getGeonameid());
    transformer.setParameter(""String_Node_Str"",place.getCity());
    transformer.setParameter(""String_Node_Str"",place.getProvince());
    transformer.setParameter(""String_Node_Str"",place.getCountry());
    transformer.setParameter(""String_Node_Str"",place.getContinent());
    transformer.setParameter(""String_Node_Str"",place.getLat());
    transformer.setParameter(""String_Node_Str"",place.getLng());
    transformer.setParameter(""String_Node_Str"",s.getName());
    transformer.setParameter(""String_Node_Str"",s.getAuthor());
    xml=""String_Node_Str"";
    xml=xml.trim().replaceFirst(""String_Node_Str"",""String_Node_Str"");
    InputStream inputStream=new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
    Writer outWriter=new StringWriter();
    StreamResult result=new StreamResult(outWriter);
    transformer.transform(new StreamSource(inputStream),result);
    triples=outWriter.toString().trim();
    String sensorTypeTriples=""String_Node_Str"";
    if (sensorTypeId == ""String_Node_Str"")     sensorTypeId=prefix + System.nanoTime();
    sensorTypeTriples=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ s.getSensorType()+ ""String_Node_Str"";
    triples+=sensorTypeTriples;
    String observesTriples=""String_Node_Str"";
    for (    String classURL : s.getProperties().keySet()) {
      String instanceId=prefix + System.nanoTime();
      s.getProperties().put(classURL,instanceId);
      observesTriples+=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"";
      observesTriples+=""String_Node_Str"" + instanceId + ""String_Node_Str""+ classURL+ ""String_Node_Str"";
    }
    triples+=observesTriples;
    triples+=""String_Node_Str"" + place.getId() + ""String_Node_Str""+ place.getLng()+ ""String_Node_Str""+ place.getLat()+ ""String_Node_Str"";
  }
 catch (  Exception e) {
    logger.info(e.toString());
  }
  return triples;
}",0.9923357664233576
15591,"public static String getSensorTripleMetadata(Sensor s,String sensorTypeId){
  String triples=""String_Node_Str"";
  String xsltPath=XSLTMapFile.sensormeta2xslt;
  xsltPath=ConstantsUtil.realPath + xsltPath;
  TransformerFactory tFactory=TransformerFactory.newInstance();
  String prefix=propertyManagement.getOpeniotResourceNamespace();
  String xml=""String_Node_Str"";
  try {
    Place place=s.getPlace();
    Transformer transformer=tFactory.newTransformer(new StreamSource(new File(xsltPath)));
    transformer.setParameter(""String_Node_Str"",s.getId());
    transformer.setParameter(""String_Node_Str"",DateUtil.date2StandardString(new Date()));
    transformer.setParameter(""String_Node_Str"",prefix);
    transformer.setParameter(""String_Node_Str"",place.getId());
    transformer.setParameter(""String_Node_Str"",place.getGeonameid());
    transformer.setParameter(""String_Node_Str"",place.getCity());
    transformer.setParameter(""String_Node_Str"",place.getProvince());
    transformer.setParameter(""String_Node_Str"",place.getCountry());
    transformer.setParameter(""String_Node_Str"",place.getContinent());
    transformer.setParameter(""String_Node_Str"",place.getLat());
    transformer.setParameter(""String_Node_Str"",place.getLng());
    transformer.setParameter(""String_Node_Str"",s.getName());
    transformer.setParameter(""String_Node_Str"",s.getAuthor());
    xml=""String_Node_Str"";
    xml=xml.trim().replaceFirst(""String_Node_Str"",""String_Node_Str"");
    InputStream inputStream=new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
    Writer outWriter=new StringWriter();
    StreamResult result=new StreamResult(outWriter);
    transformer.transform(new StreamSource(inputStream),result);
    triples=outWriter.toString().trim();
    String sensorTypeTriples=""String_Node_Str"";
    if (sensorTypeId == ""String_Node_Str"")     sensorTypeId=prefix + System.nanoTime();
    sensorTypeTriples=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ s.getSensorType()+ ""String_Node_Str"";
    triples+=sensorTypeTriples;
    String observesTriples=""String_Node_Str"";
    for (    String classURL : s.getProperties().keySet()) {
      String instanceId=prefix + System.nanoTime();
      s.getProperties().put(classURL,instanceId);
      observesTriples+=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"";
      observesTriples+=""String_Node_Str"" + instanceId + ""String_Node_Str""+ classURL+ ""String_Node_Str"";
    }
    triples+=observesTriples;
    triples+=""String_Node_Str"" + place.getId() + ""String_Node_Str""+ place.getLng()+ ""String_Node_Str""+ place.getLat()+ ""String_Node_Str"";
  }
 catch (  Exception e) {
    logger.info(e.toString());
  }
  return triples;
}","public static String getSensorTripleMetadata(Sensor s,String sensorTypeId){
  String triples=""String_Node_Str"";
  String xsltPath=XSLTMapFile.sensormeta2xslt;
  xsltPath=""String_Node_Str"" + xsltPath;
  TransformerFactory tFactory=TransformerFactory.newInstance();
  String prefix=propertyManagement.getOpeniotResourceNamespace();
  String xml=""String_Node_Str"";
  try {
    Place place=s.getPlace();
    Transformer transformer=tFactory.newTransformer(new StreamSource(new File(xsltPath)));
    transformer.setParameter(""String_Node_Str"",s.getId());
    transformer.setParameter(""String_Node_Str"",DateUtil.date2StandardString(new Date()));
    transformer.setParameter(""String_Node_Str"",prefix);
    transformer.setParameter(""String_Node_Str"",place.getId());
    transformer.setParameter(""String_Node_Str"",place.getGeonameid());
    transformer.setParameter(""String_Node_Str"",place.getCity());
    transformer.setParameter(""String_Node_Str"",place.getProvince());
    transformer.setParameter(""String_Node_Str"",place.getCountry());
    transformer.setParameter(""String_Node_Str"",place.getContinent());
    transformer.setParameter(""String_Node_Str"",place.getLat());
    transformer.setParameter(""String_Node_Str"",place.getLng());
    transformer.setParameter(""String_Node_Str"",s.getName());
    transformer.setParameter(""String_Node_Str"",s.getAuthor());
    xml=""String_Node_Str"";
    xml=xml.trim().replaceFirst(""String_Node_Str"",""String_Node_Str"");
    InputStream inputStream=new ByteArrayInputStream(xml.getBytes(""String_Node_Str""));
    Writer outWriter=new StringWriter();
    StreamResult result=new StreamResult(outWriter);
    transformer.transform(new StreamSource(inputStream),result);
    triples=outWriter.toString().trim();
    String sensorTypeTriples=""String_Node_Str"";
    if (sensorTypeId == ""String_Node_Str"")     sensorTypeId=prefix + System.nanoTime();
    sensorTypeTriples=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ ""String_Node_Str""+ sensorTypeId+ ""String_Node_Str""+ s.getSensorType()+ ""String_Node_Str"";
    triples+=sensorTypeTriples;
    String observesTriples=""String_Node_Str"";
    for (    String classURL : s.getProperties().keySet()) {
      String instanceId=prefix + System.nanoTime();
      s.getProperties().put(classURL,instanceId);
      observesTriples+=""String_Node_Str"" + s.getId() + ""String_Node_Str""+ instanceId+ ""String_Node_Str"";
      observesTriples+=""String_Node_Str"" + instanceId + ""String_Node_Str""+ classURL+ ""String_Node_Str"";
    }
    triples+=observesTriples;
    triples+=""String_Node_Str"" + place.getId() + ""String_Node_Str""+ place.getLng()+ ""String_Node_Str""+ place.getLat()+ ""String_Node_Str"";
  }
 catch (  Exception e) {
    logger.info(e.toString());
  }
  return triples;
}",0.9931107578166402
15592,"@Override public void logout(){
  reset();
}","@Override public void logout(){
}",0.8571428571428571
15593,"/** 
 * Clears the state information. Call this method before redirecting the user to re-login.
 */
public void reset(){
  getAuthorizationManager().reset();
}","/** 
 * Clears the state information.
 */
public void reset(){
  Subject subject=SecurityUtils.getSubject();
  if (subject.isAuthenticated())   getAuthorizationManager().clearCache(subject.getPrincipals());
}",0.2397820163487738
15594,"public void logout(){
  Subject subject=SecurityUtils.getSubject();
  if (subject.isAuthenticated()) {
    subject.logout();
  }
  getAuthorizationManager().reset();
}","public void logout(){
  Subject subject=SecurityUtils.getSubject();
  if (subject.isAuthenticated()) {
    subject.logout();
  }
  reset();
}",0.9155844155844156
15595,"public OAuthorizationCredentials login(String username,String password){
  BaseOAuth20Client<?> client=getClient();
  OAuthCredentialsRest credentials=new OAuthCredentialsRest(username,password,client.getName(),client.getKey(),client.getSecret());
  ClientToken token=new ClientToken(client.getName(),credentials);
  Subject subject=SecurityUtils.getSubject();
  logger.debug(""String_Node_Str"",username);
  subject.login(token);
  OAuthorizationCredentials oauthCredentials=getOAuthorizationCredentials();
  logger.debug(""String_Node_Str"",oauthCredentials);
  getAuthorizationManager().reset();
  return oauthCredentials;
}","public OAuthorizationCredentials login(String username,String password){
  BaseOAuth20Client<?> client=getClient();
  OAuthCredentialsRest credentials=new OAuthCredentialsRest(username,password,client.getName(),client.getKey(),client.getSecret());
  ClientToken token=new ClientToken(client.getName(),credentials);
  Subject subject=SecurityUtils.getSubject();
  logger.debug(""String_Node_Str"",username);
  subject.login(token);
  OAuthorizationCredentials oauthCredentials=getOAuthorizationCredentials();
  logger.debug(""String_Node_Str"",oauthCredentials);
  return oauthCredentials;
}",0.9693961952026467
15596,"public AccessTokenExpiredException(String message){
  super(message);
}","public AccessTokenExpiredException(String token,String message){
  super(message);
  this.token=token;
}",0.8114285714285714
15597,"protected Map<String,Set<Permission>> getAuthorizationInfo(final OAuthorizationCredentials credentials,final String targetClientId){
  Map<String,Set<Permission>> authorizationInfo=null;
  try {
    CacheKey key=new CacheKey(targetClientId,credentials);
    if (cachingEnabled)     authorizationInfo=cacheManager.get(key);
    if (authorizationInfo == null) {
      authorizationInfo=getAuthorizationInfoInternal(credentials,targetClientId);
      if (cachingEnabled)       cacheManager.put(key,authorizationInfo);
    }
  }
 catch (  AccessTokenExpiredException e) {
    accessTokenExpired=true;
    clearCache(null);
  }
  return authorizationInfo;
}","protected Map<String,Set<Permission>> getAuthorizationInfo(final OAuthorizationCredentials credentials,final String targetClientId){
  Map<String,Set<Permission>> authorizationInfo=null;
  CacheKey key=new CacheKey(targetClientId,credentials);
  if (cachingEnabled)   authorizationInfo=cacheManager.get(key);
  if (authorizationInfo == null) {
    authorizationInfo=getAuthorizationInfoInternal(credentials,targetClientId);
    if (cachingEnabled)     cacheManager.put(key,authorizationInfo);
  }
  return authorizationInfo;
}",0.8488964346349746
15598,"@Override public void clearCache(PrincipalCollection principals){
  if (cachingEnabled) {
    cacheManager.clear();
  }
}","@Override public void clearCache(PrincipalCollection principals){
  if (cachingEnabled) {
    if (principals == null) {
      logger.debug(""String_Node_Str"");
      cacheManager.clear();
    }
 else {
      final CasOAuthWrapperProfile profile=principals.oneByType(CasOAuthWrapperProfile.class);
      String accessToken=profile.getAccessToken();
      logger.debug(""String_Node_Str"",accessToken);
      clearCacheForToken(accessToken);
    }
  }
}",0.4253075571177504
15599,"protected Map<String,Set<Permission>> getAuthorizationInfoInternal(final OAuthorizationCredentials credentials,final String targetClientId) throws AccessTokenExpiredException {
  Map<String,Set<Permission>> map=new HashMap<String,Set<Permission>>();
  final String body=sendRequestForPermissions(credentials,targetClientId);
  JsonNode json=JsonHelper.getFirstNode(body);
  if (json != null) {
    JsonNode errorNode=json.get(ERROR);
    if (errorNode != null) {
      logger.info(""String_Node_Str"",errorNode.asText());
      if (EXPIRED_ACCESS_TOKEN.equals(errorNode.asText()))       accessTokenExpired=true;
    }
 else {
      accessTokenExpired=false;
      json=json.get(ROLE_PERMISSIONS);
      if (json != null) {
        final Iterator<JsonNode> nodes=json.iterator();
        while (nodes.hasNext()) {
          for (Iterator<Entry<String,JsonNode>> fields=nodes.next().fields(); fields.hasNext(); ) {
            Entry<String,JsonNode> next=fields.next();
            logger.debug(""String_Node_Str"",next.getKey());
            final HashSet<Permission> permissionsSet=new HashSet<Permission>();
            map.put(next.getKey(),permissionsSet);
            Iterator<JsonNode> permIter=next.getValue().iterator();
            while (permIter.hasNext()) {
              json=permIter.next();
              String permission=json.asText();
              permissionsSet.add(permissionResolver.resolvePermission(permission));
              logger.debug(""String_Node_Str"",permission);
            }
          }
        }
      }
    }
  }
  return map;
}","protected Map<String,Set<Permission>> getAuthorizationInfoInternal(final OAuthorizationCredentials credentials,final String targetClientId) throws AccessTokenExpiredException {
  Map<String,Set<Permission>> map=new HashMap<String,Set<Permission>>();
  final String body=sendRequestForPermissions(credentials,targetClientId);
  JsonNode json=JsonHelper.getFirstNode(body);
  if (json != null) {
    JsonNode errorNode=json.get(ERROR);
    if (errorNode != null) {
      String errorMsg=errorNode.asText();
      logger.info(""String_Node_Str"",errorMsg);
      if (errorMsg.startsWith(EXPIRED_ACCESS_TOKEN)) {
        String token=credentials.getAccessToken();
        if (errorMsg.endsWith(""String_Node_Str""))         token=credentials.getCallerCredentials().getAccessToken();
 else         if (errorMsg.endsWith(""String_Node_Str""))         if (credentials.getCallerCredentials().getCallerCredentials() == null)         token=credentials.getCallerCredentials().getAccessToken();
 else         token=credentials.getCallerCredentials().getCallerCredentials().getAccessToken();
        throw new AccessTokenExpiredException(token,errorMsg);
      }
    }
 else {
      json=json.get(ROLE_PERMISSIONS);
      if (json != null) {
        final Iterator<JsonNode> nodes=json.iterator();
        while (nodes.hasNext()) {
          for (Iterator<Entry<String,JsonNode>> fields=nodes.next().fields(); fields.hasNext(); ) {
            Entry<String,JsonNode> next=fields.next();
            logger.debug(""String_Node_Str"",next.getKey());
            final HashSet<Permission> permissionsSet=new HashSet<Permission>();
            map.put(next.getKey(),permissionsSet);
            Iterator<JsonNode> permIter=next.getValue().iterator();
            while (permIter.hasNext()) {
              json=permIter.next();
              String permission=json.asText();
              permissionsSet.add(permissionResolver.resolvePermission(permission));
              logger.debug(""String_Node_Str"",permission);
            }
          }
        }
      }
    }
  }
  return map;
}",0.8082872928176795
15600,"void reset(){
  accessTokenExpired=false;
  clearCache(null);
}","void reset(String token){
  clearCacheForToken(token);
}",0.5882352941176471
15601,"public CacheKey(String targetClientId,OAuthorizationCredentials credentials){
  super();
  this.targetClientId=targetClientId;
  this.credentials=credentials;
}","public CacheKey(String targetClientId,OAuthorizationCredentials credentials){
  this.targetClientId=targetClientId;
  this.credentials=credentials;
}",0.964401294498382
15602,"public SesameSPARQLClient(String url) throws RepositoryException {
  try {
    therepository.initialize();
  }
 catch (  RepositoryException e) {
    logger.error(""String_Node_Str"" + url + ""String_Node_Str"",e);
    throw e;
  }
}","public SesameSPARQLClient(String url) throws RepositoryException {
  therepository=new SPARQLRepository(url);
  try {
    therepository.initialize();
  }
 catch (  RepositoryException e) {
    logger.error(""String_Node_Str"" + url + ""String_Node_Str"",e);
    throw e;
  }
}",0.9141716566866268
15603,"public void init(ServletConfig config) throws ServletException {
  super.init(config);
  ConstantsUtil.realPath=this.getServletContext().getRealPath(""String_Node_Str"");
  InputStream in=ConnectionManager.class.getResourceAsStream(""String_Node_Str"");
  try {
    if (in == null)     prop.load(new FileInputStream(ConstantsUtil.realPath + ""String_Node_Str""));
 else     prop.load(in);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public void init(ServletConfig config) throws ServletException {
  super.init(config);
  ConstantsUtil.realPath=this.getServletContext().getRealPath(""String_Node_Str"");
  propertyManagement=new PropertyManagement();
}",0.5068870523415978
15604,"private String processRequestImpl(String api,Object object){
  String result=""String_Node_Str"";
  try {
    SensorManager sensorManager=new SensorManager();
    Sensor sensor=null;
switch (api) {
case ""String_Node_Str"":
      if (object instanceof Sensor)       sensor=(Sensor)object;
 else       break;
    logger.info(""String_Node_Str"" + sensor.getId());
  String sensorTypeId=sensorManager.getSensorTypeId(sensor.getSensorType().toLowerCase());
String triples=TriplesDataRetriever.getSensorTripleMetadata(sensor,sensorTypeId);
if ((sensor.getMetaGraph() == null) || (sensor.getMetaGraph() == ""String_Node_Str"")) sensor.setMetaGraph(prop.getProperty(""String_Node_Str""));
sensorManager.setDataGraph(sensor.getDataGraph());
sensorManager.setMetaGraph(sensor.getMetaGraph());
sensorManager.insertTriplesToGraph(sensor.getMetaGraph(),triples);
sensorManager.runSpatialIndex();
logger.info(""String_Node_Str"");
logger.debug(""String_Node_Str"");
break;
case ""String_Node_Str"":
Observation observation=null;
if (object instanceof Observation) observation=(Observation)object;
 else break;
logger.info(""String_Node_Str"" + observation.getId());
triples=""String_Node_Str"";
if ((observation.getMetaGraph() == null) || (observation.getMetaGraph() == ""String_Node_Str"")) observation.setMetaGraph(prop.getProperty(""String_Node_Str""));
sensorManager.setDataGraph(observation.getDataGraph());
sensorManager.setMetaGraph(observation.getMetaGraph());
sensor=sensorManager.getSpecifiedSensorWithSensorId(observation.getSensor());
String foi=VirtuosoConstantUtil.sensorObjectDataPrefix + Double.toString(sensor.getPlace().getLat()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + Double.toString(sensor.getPlace().getLng()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
triples+=TriplesDataRetriever.getObservationTripleData(observation.getId(),observation.getSensor(),foi,observation.getTimes());
OntModel model=ModelFactory.createOntologyModel();
for (ObservedProperty obv : observation.getReadings()) {
OntClass cl=model.createClass(obv.getPropertyType());
if (obv.getUnit().equals(""String_Node_Str"")) triples+=TriplesDataRetriever.getTripleDataHasNoUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
 else triples+=TriplesDataRetriever.getTripleDataHasUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue(),obv.getUnit(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
}
sensorManager.insertTriplesToGraph(observation.getDataGraph(),triples);
logger.info(""String_Node_Str"");
break;
case ""String_Node_Str"":
RDFTuple tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
sensorManager.insertTriplesToGraph(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
break;
case ""String_Node_Str"":
tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
if (tuple.getNtriple().equals(""String_Node_Str"")) {
sensorManager.clearGraph(tuple.getGraphURL());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
 else {
sensorManager.deleteTriples(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
break;
case ""String_Node_Str"":
HashMap<String,String> patterns=null;
if (object instanceof HashMap<?,?>) patterns=(HashMap<String,String>)object;
sensorManager.updateGraph(patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""));
default :
break;
}
}
 catch (Exception e) {
logger.error(""String_Node_Str"",e);
result=e.toString();
}
return result;
}","private String processRequestImpl(String api,Object object){
  String result=""String_Node_Str"";
  try {
    SensorManager sensorManager=new SensorManager();
    Sensor sensor=null;
switch (api) {
case ""String_Node_Str"":
      if (object instanceof Sensor)       sensor=(Sensor)object;
 else       break;
    logger.info(""String_Node_Str"" + sensor.getId());
  String sensorTypeId=sensorManager.getSensorTypeId(sensor.getSensorType().toLowerCase());
String triples=TriplesDataRetriever.getSensorTripleMetadata(sensor,sensorTypeId);
if ((sensor.getMetaGraph() == null) || (sensor.getMetaGraph() == ""String_Node_Str"")) sensor.setMetaGraph(propertyManagement.getSchedulerLsmMetaGraph());
sensorManager.setDataGraph(sensor.getDataGraph());
sensorManager.setMetaGraph(sensor.getMetaGraph());
sensorManager.insertTriplesToGraph(sensor.getMetaGraph(),triples);
sensorManager.runSpatialIndex();
logger.info(""String_Node_Str"");
logger.debug(""String_Node_Str"");
break;
case ""String_Node_Str"":
Observation observation=null;
if (object instanceof Observation) observation=(Observation)object;
 else break;
logger.info(""String_Node_Str"" + observation.getId());
triples=""String_Node_Str"";
if ((observation.getMetaGraph() == null) || (observation.getMetaGraph() == ""String_Node_Str"")) observation.setMetaGraph(propertyManagement.getLSMLocalMetaGraph());
sensorManager.setDataGraph(observation.getDataGraph());
sensorManager.setMetaGraph(observation.getMetaGraph());
sensor=sensorManager.getSpecifiedSensorWithSensorId(observation.getSensor());
String foi=VirtuosoConstantUtil.sensorObjectDataPrefix + Double.toString(sensor.getPlace().getLat()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + Double.toString(sensor.getPlace().getLng()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
triples+=TriplesDataRetriever.getObservationTripleData(observation.getId(),observation.getSensor(),foi,observation.getTimes());
OntModel model=ModelFactory.createOntologyModel();
for (ObservedProperty obv : observation.getReadings()) {
OntClass cl=model.createClass(obv.getPropertyType());
if (obv.getUnit().equals(""String_Node_Str"")) triples+=TriplesDataRetriever.getTripleDataHasNoUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
 else triples+=TriplesDataRetriever.getTripleDataHasUnit(""String_Node_Str"",cl.getLocalName(),obv.getValue(),obv.getUnit(),observation.getId(),sensor.getProperties().get(obv.getPropertyType()),observation.getTimes());
}
sensorManager.insertTriplesToGraph(observation.getDataGraph(),triples);
logger.info(""String_Node_Str"");
break;
case ""String_Node_Str"":
RDFTuple tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
sensorManager.insertTriplesToGraph(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
break;
case ""String_Node_Str"":
tuple=null;
if (object instanceof RDFTuple) tuple=(RDFTuple)object;
 else break;
if (tuple.getNtriple().equals(""String_Node_Str"")) {
sensorManager.clearGraph(tuple.getGraphURL());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
 else {
sensorManager.deleteTriples(tuple.getGraphURL(),tuple.getNtriple());
logger.info(""String_Node_Str"" + tuple.getGraphURL());
}
break;
case ""String_Node_Str"":
HashMap<String,String> patterns=null;
if (object instanceof HashMap<?,?>) patterns=(HashMap<String,String>)object;
sensorManager.updateGraph(patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""),patterns.get(""String_Node_Str""));
default :
break;
}
}
 catch (Exception e) {
logger.error(""String_Node_Str"",e);
result=e.toString();
}
return result;
}",0.9839700774779588
15605,"public Sensor getSpecifiedSensorWithLatLng(double lat,double lng){
  Sensor sensor=null;
  Connection conn=null;
  String sql=""String_Node_Str"" + ""String_Node_Str"" + metaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ lat+ ""String_Node_Str""+ ""String_Node_Str""+ lng+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    conn=ConnectionManager.getConnectionPool().getConnection();
    PlaceManager placeManager=new PlaceManager(metaGraph,dataGraph);
    Statement st=conn.createStatement();
    if (st.execute(sql)) {
      ResultSet rs=st.getResultSet();
      while (rs.next()) {
        sensor=new Sensor();
        sensor.setId(rs.getString(""String_Node_Str""));
        sensor.setSource(rs.getString(""String_Node_Str""));
        sensor.setSensorType(rs.getString(""String_Node_Str""));
        sensor.setSourceType(rs.getString(""String_Node_Str""));
        Place place=placeManager.getPlaceWithPlaceId(rs.getString(""String_Node_Str""));
        sensor.setPlace(place);
      }
      ConnectionManager.attemptClose(rs);
    }
    ConnectionManager.attemptClose(st);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectionManager.attemptClose(conn);
  }
  return sensor;
}","public Sensor getSpecifiedSensorWithLatLng(double lat,double lng){
  Sensor sensor=null;
  Connection conn=null;
  String sql=""String_Node_Str"" + ""String_Node_Str"" + metaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ lat+ ""String_Node_Str""+ ""String_Node_Str""+ lng+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    conn=ConnectionManager.getConnectionPool().getConnection();
    PlaceManager placeManager=new PlaceManager(metaGraph,dataGraph);
    Statement st=conn.createStatement();
    if (st.execute(sql)) {
      ResultSet rs=st.getResultSet();
      while (rs.next()) {
        sensor=new Sensor();
        sensor.setId(rs.getString(""String_Node_Str""));
        sensor.setSource(rs.getString(""String_Node_Str""));
        sensor.setSensorType(rs.getString(""String_Node_Str""));
        sensor.setSourceType(rs.getString(""String_Node_Str""));
        Place place=placeManager.getPlaceWithPlaceId(rs.getString(""String_Node_Str""));
        sensor.setPlace(place);
        sensor.setProperties(getObservesListOfSensor(rs.getString(""String_Node_Str"")));
      }
      ConnectionManager.attemptClose(rs);
    }
    ConnectionManager.attemptClose(st);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectionManager.attemptClose(conn);
  }
  return sensor;
}",0.968481375358166
15606,"@SuppressWarnings(""String_Node_Str"") public Sensor getSpecifiedSensorWithPlaceId(String placeId){
  Sensor sensor=null;
  Connection conn=null;
  PlaceManager placeManager=new PlaceManager(metaGraph,dataGraph);
  String sql=""String_Node_Str"" + ""String_Node_Str"" + metaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ placeId+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    conn=ConnectionManager.getConnectionPool().getConnection();
    Statement st=conn.createStatement();
    if (st.execute(sql)) {
      ResultSet rs=st.getResultSet();
      while (rs.next()) {
        sensor=new Sensor();
        sensor.setId(rs.getString(""String_Node_Str""));
        sensor.setSource(rs.getString(""String_Node_Str""));
        sensor.setSensorType(rs.getString(""String_Node_Str""));
        sensor.setSourceType(rs.getString(""String_Node_Str""));
        Place place=placeManager.getPlaceWithPlaceId(placeId);
        sensor.setPlace(place);
      }
      ConnectionManager.attemptClose(rs);
    }
    ConnectionManager.attemptClose(st);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectionManager.attemptClose(conn);
  }
  return sensor;
}","@SuppressWarnings(""String_Node_Str"") public Sensor getSpecifiedSensorWithPlaceId(String placeId){
  Sensor sensor=null;
  Connection conn=null;
  PlaceManager placeManager=new PlaceManager(metaGraph,dataGraph);
  String sql=""String_Node_Str"" + ""String_Node_Str"" + metaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ placeId+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    conn=ConnectionManager.getConnectionPool().getConnection();
    Statement st=conn.createStatement();
    if (st.execute(sql)) {
      ResultSet rs=st.getResultSet();
      while (rs.next()) {
        sensor=new Sensor();
        sensor.setId(rs.getString(""String_Node_Str""));
        sensor.setSource(rs.getString(""String_Node_Str""));
        sensor.setSensorType(rs.getString(""String_Node_Str""));
        sensor.setSourceType(rs.getString(""String_Node_Str""));
        Place place=placeManager.getPlaceWithPlaceId(placeId);
        sensor.setPlace(place);
        sensor.setProperties(getObservesListOfSensor(rs.getString(""String_Node_Str"")));
      }
      ConnectionManager.attemptClose(rs);
    }
    ConnectionManager.attemptClose(st);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectionManager.attemptClose(conn);
  }
  return sensor;
}",0.9672375279225616
15607,"public Sensor getSpecifiedSensorWithSource(String source){
  PlaceManager placeManager=new PlaceManager(metaGraph,dataGraph);
  Connection conn=null;
  Sensor sensor=null;
  String sql=""String_Node_Str"" + ""String_Node_Str"" + metaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ source+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    conn=ConnectionManager.getConnectionPool().getConnection();
    Statement st=conn.createStatement();
    if (st.execute(sql)) {
      ResultSet rs=st.getResultSet();
      while (rs.next()) {
        sensor=new Sensor();
        sensor.setId(rs.getString(""String_Node_Str""));
        sensor.setSensorType(rs.getString(""String_Node_Str""));
        sensor.setSource(source);
        sensor.setSourceType(rs.getString(""String_Node_Str""));
        Place place=placeManager.getPlaceWithPlaceId(rs.getString(""String_Node_Str""));
        sensor.setPlace(place);
      }
      ConnectionManager.attemptClose(rs);
    }
    ConnectionManager.attemptClose(st);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectionManager.attemptClose(conn);
  }
  return sensor;
}","public Sensor getSpecifiedSensorWithSource(String source){
  PlaceManager placeManager=new PlaceManager(metaGraph,dataGraph);
  Connection conn=null;
  Sensor sensor=null;
  String sql=""String_Node_Str"" + ""String_Node_Str"" + metaGraph + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ source+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    conn=ConnectionManager.getConnectionPool().getConnection();
    Statement st=conn.createStatement();
    if (st.execute(sql)) {
      ResultSet rs=st.getResultSet();
      while (rs.next()) {
        sensor=new Sensor();
        sensor.setId(rs.getString(""String_Node_Str""));
        sensor.setSensorType(rs.getString(""String_Node_Str""));
        sensor.setSource(source);
        sensor.setSourceType(rs.getString(""String_Node_Str""));
        Place place=placeManager.getPlaceWithPlaceId(rs.getString(""String_Node_Str""));
        sensor.setPlace(place);
        sensor.setProperties(getObservesListOfSensor(rs.getString(""String_Node_Str"")));
      }
      ConnectionManager.attemptClose(rs);
    }
    ConnectionManager.attemptClose(st);
    ConnectionManager.attemptClose(conn);
  }
 catch (  Exception e) {
    e.printStackTrace();
    ConnectionManager.attemptClose(conn);
  }
  return sensor;
}",0.9662058371735792
15608,"public LSMRegisteredServiceImpl getRegisteredService(long serviceId){
  final LSMRegisteredServiceImpl registeredService=lsmOAuthHttpManager.getRegisteredService(serviceId);
  if (registeredService != null) {
    if (""String_Node_Str"".equals(registeredService.getUsernameAttribute()))     registeredService.setUsernameAttribute(null);
    if (""String_Node_Str"".equals(registeredService.getTheme()))     registeredService.setTheme(null);
    registeredService.setAnonymousAccess(false);
  }
  return registeredService;
}","public LSMRegisteredServiceImpl getRegisteredService(long serviceId){
  final LSMRegisteredServiceImpl registeredService=lsmOAuthHttpManager.getRegisteredService(serviceId);
  return registeredService;
}",0.5623268698060941
15609,"/** 
 * @param args
 */
public static void main(String[] args){
  generateAuthorizationData();
  if (true)   return;
  LSMOAuthHttpManager oM=new LSMOAuthHttpManager(OAuthGraphURL);
  LSMTicketGrantingTicketImpl realTicket=oM.getTicketGranting(""String_Node_Str"");
  if (realTicket != null) {
    System.out.println(""String_Node_Str"" + realTicket.getCreationTime() + ""String_Node_Str""+ new Date(realTicket.getCreationTime()));
    System.out.println(""String_Node_Str"" + realTicket.isExpired());
    System.out.println(""String_Node_Str"" + realTicket.isExpiredInternal());
    System.out.println(""String_Node_Str"" + realTicket.getExpirationPolicy().getClass());
    System.out.println(""String_Node_Str"" + realTicket.getAuthentication().getPrincipal().getId());
  }
  LSMRegisteredServiceImpl service=oM.getRegisteredService((long)1);
  System.out.println(service.getUsernameAttribute() == null);
  System.out.println(""String_Node_Str"" + service.isAnonymousAccess());
  if (true)   return;
  final LSMTicketGrantingTicketImpl tgt=createTicketGrantingTicket();
  final LSMTicketGrantingTicketImpl ticketGranting=oM.getTicketGranting(tgt.getId());
  System.out.println(ticketGranting);
  final LSMTicketGrantingTicketImpl tgt2=createTicketGrantingTicket(tgt);
  final LSMTicketGrantingTicketImpl ticketGranting2=oM.getTicketGranting(tgt2.getId());
  System.out.println(ticketGranting2);
  if (ticketGranting2 != null)   System.out.println(ticketGranting2.getGrantingTicket());
  final LSMServiceTicketImpl serviceTicket=createServiceTicket(tgt);
  LSMServiceTicketImpl serviceTicket2=oM.getServiceTicketImpl(serviceTicket.getId());
  System.out.println(serviceTicket2);
  final List<LSMTicketGrantingTicketImpl> allTkts=oM.getAllTicketGrantingTickets();
  System.out.println(allTkts.size());
  if (!allTkts.isEmpty())   System.out.println(allTkts.get(0));
  final List<LSMServiceTicketImpl> allTktsOf=oM.getAllServiceTicketsOfTicketGrantingTicket(tgt.getId());
  System.out.println(""String_Node_Str"" + allTktsOf.size());
  if (!allTktsOf.isEmpty())   System.out.println(allTktsOf.get(0));
  final List<LSMTicketGrantingTicketImpl> allGrantingTktsOf=oM.getAllTicketsOfTicketGrantingTicket(tgt.getId());
  System.out.println(""String_Node_Str"" + allGrantingTktsOf.size());
  if (!allGrantingTktsOf.isEmpty())   System.out.println(allGrantingTktsOf.get(0));
  final List<LSMServiceTicketImpl> allServiceTkts=oM.getAllServiceTickets();
  System.out.println(""String_Node_Str"" + allServiceTkts.size());
  if (!allServiceTkts.isEmpty())   System.out.println(allServiceTkts.get(0));
  final User user=oM.getUserByUsername(""String_Node_Str"");
  if (user != null) {
    System.out.println(user.getUsername());
    System.out.println(user.getRoles().size());
  }
 else   System.out.println(""String_Node_Str"");
  final List<RegisteredService> allRegisteredServices=oM.getAllRegisteredServices();
  System.out.println(""String_Node_Str"" + allRegisteredServices.size());
  if (!allRegisteredServices.isEmpty())   System.out.println(allRegisteredServices.get(0));
  final int ticketGrantingTicketsCount=oM.getTicketGrantingTicketsCount();
  System.out.println(""String_Node_Str"" + ticketGrantingTicketsCount);
  final int serviceTicketsCount=oM.getServiceTicketsCount();
  System.out.println(""String_Node_Str"" + serviceTicketsCount);
}","/** 
 * @param args
 */
public static void main(String[] args){
  LSMOAuthHttpManager oM=new LSMOAuthHttpManager(OAuthGraphURL);
  if (true)   return;
  LSMTicketGrantingTicketImpl realTicket=oM.getTicketGranting(""String_Node_Str"");
  if (realTicket != null) {
    System.out.println(""String_Node_Str"" + realTicket.getCreationTime() + ""String_Node_Str""+ new Date(realTicket.getCreationTime()));
    System.out.println(""String_Node_Str"" + realTicket.isExpired());
    System.out.println(""String_Node_Str"" + realTicket.isExpiredInternal());
    System.out.println(""String_Node_Str"" + realTicket.getExpirationPolicy().getClass());
    System.out.println(""String_Node_Str"" + realTicket.getAuthentication().getPrincipal().getId());
  }
  LSMRegisteredServiceImpl service=oM.getRegisteredService((long)1);
  System.out.println(service.getUsernameAttribute() == null);
  System.out.println(""String_Node_Str"" + service.isAnonymousAccess());
  if (true)   return;
  final LSMTicketGrantingTicketImpl tgt=createTicketGrantingTicket();
  final LSMTicketGrantingTicketImpl ticketGranting=oM.getTicketGranting(tgt.getId());
  System.out.println(ticketGranting);
  final LSMTicketGrantingTicketImpl tgt2=createTicketGrantingTicket(tgt);
  final LSMTicketGrantingTicketImpl ticketGranting2=oM.getTicketGranting(tgt2.getId());
  System.out.println(ticketGranting2);
  if (ticketGranting2 != null)   System.out.println(ticketGranting2.getGrantingTicket());
  final LSMServiceTicketImpl serviceTicket=createServiceTicket(tgt);
  LSMServiceTicketImpl serviceTicket2=oM.getServiceTicketImpl(serviceTicket.getId());
  System.out.println(serviceTicket2);
  final List<LSMTicketGrantingTicketImpl> allTkts=oM.getAllTicketGrantingTickets();
  System.out.println(allTkts.size());
  if (!allTkts.isEmpty())   System.out.println(allTkts.get(0));
  final List<LSMServiceTicketImpl> allTktsOf=oM.getAllServiceTicketsOfTicketGrantingTicket(tgt.getId());
  System.out.println(""String_Node_Str"" + allTktsOf.size());
  if (!allTktsOf.isEmpty())   System.out.println(allTktsOf.get(0));
  final List<LSMTicketGrantingTicketImpl> allGrantingTktsOf=oM.getAllTicketsOfTicketGrantingTicket(tgt.getId());
  System.out.println(""String_Node_Str"" + allGrantingTktsOf.size());
  if (!allGrantingTktsOf.isEmpty())   System.out.println(allGrantingTktsOf.get(0));
  final List<LSMServiceTicketImpl> allServiceTkts=oM.getAllServiceTickets();
  System.out.println(""String_Node_Str"" + allServiceTkts.size());
  if (!allServiceTkts.isEmpty())   System.out.println(allServiceTkts.get(0));
  final User user=oM.getUserByUsername(""String_Node_Str"");
  if (user != null) {
    System.out.println(user.getUsername());
    System.out.println(user.getRoles().size());
  }
 else   System.out.println(""String_Node_Str"");
  final List<RegisteredService> allRegisteredServices=oM.getAllRegisteredServices();
  System.out.println(""String_Node_Str"" + allRegisteredServices.size());
  if (!allRegisteredServices.isEmpty())   System.out.println(allRegisteredServices.get(0));
  final int ticketGrantingTicketsCount=oM.getTicketGrantingTicketsCount();
  System.out.println(""String_Node_Str"" + ticketGrantingTicketsCount);
  final int serviceTicketsCount=oM.getServiceTicketsCount();
  System.out.println(""String_Node_Str"" + serviceTicketsCount);
}",0.9886208466090124
15610,"public void importApplications(){
  ApplicationDesignPageContext context=getContext();
  if (context.getUploadedSpec() == null) {
    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(FacesMessage.SEVERITY_FATAL,messages.getString(""String_Node_Str""),FaceletLocalization.getLocalisedMessage(messages,""String_Node_Str"")));
    return;
  }
  OSDSpec spec=null;
  try {
    spec=SchedulerAPIWrapper.unmarshalOSDSpec(IOUtils.toString(context.getUploadedSpec().getInputstream(),""String_Node_Str""));
  }
 catch (  Exception ex) {
    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(FacesMessage.SEVERITY_FATAL,messages.getString(""String_Node_Str""),FaceletLocalization.getLocalisedMessage(messages,""String_Node_Str"")));
    return;
  }
  context.getAppManager().loadOSDSPec(spec);
  context.cleanupWorkspace();
  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(FacesMessage.SEVERITY_INFO,messages.getString(""String_Node_Str""),FaceletLocalization.getLocalisedMessage(messages,""String_Node_Str"")));
  applicationBean.redirect(""String_Node_Str"");
}","public void importApplications(){
  ApplicationDesignPageContext context=getContext();
  if (context.getUploadedSpec() == null) {
    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(FacesMessage.SEVERITY_FATAL,messages.getString(""String_Node_Str""),FaceletLocalization.getLocalisedMessage(messages,""String_Node_Str"")));
    return;
  }
  OSDSpec spec=null;
  try {
    spec=SchedulerAPIWrapper.unmarshalOSDSpec(IOUtils.toString(context.getUploadedSpec().getInputstream(),""String_Node_Str""));
  }
 catch (  Exception ex) {
    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(FacesMessage.SEVERITY_FATAL,messages.getString(""String_Node_Str""),FaceletLocalization.getLocalisedMessage(messages,""String_Node_Str"")));
    return;
  }
  context.getAppManager().loadOSDSPec(spec);
  context.cleanupWorkspace();
  if (context.isPersistSpec()) {
    try {
      SchedulerAPIWrapper.registerService(context.getAppManager().exportOSDSpec());
    }
 catch (    APIException ex) {
      LoggerService.log(ex);
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(FacesMessage.SEVERITY_FATAL,messages.getString(""String_Node_Str""),FaceletLocalization.getLocalisedMessage(messages,""String_Node_Str"")));
    }
  }
  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(FacesMessage.SEVERITY_INFO,messages.getString(""String_Node_Str""),FaceletLocalization.getLocalisedMessage(messages,""String_Node_Str"")));
  applicationBean.redirect(""String_Node_Str"");
}",0.8409703504043127
15611,"public void loadApplication(String name){
  ApplicationDesignPageContext context=getContext();
  context.getAppManager().selectOAMOByName(name);
  GraphModel graphModel=new DefaultGraphModel();
  String graphMeta=context.getAppManager().getSelectedOAMO() != null ? context.getAppManager().getSelectedOAMO().getGraphMeta() : null;
  if (graphMeta != null) {
    try {
      JSONObject spec=new JSONObject(new JSONTokener(graphMeta));
      graphModel.importJSON(spec);
    }
 catch (    JSONException ex) {
      LoggerService.log(ex);
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(FacesMessage.SEVERITY_FATAL,messages.getString(""String_Node_Str""),FaceletLocalization.getLocalisedMessage(messages,""String_Node_Str"")));
      context.setGraphModel(null);
      context.cleanupWorkspace();
      return;
    }
  }
  context.setGraphModel(graphModel);
  context.clearAvailableSensors();
}","public void loadApplication(String name){
  ApplicationDesignPageContext context=getContext();
  context.getAppManager().selectOAMOByName(name);
  GraphModel graphModel=new DefaultGraphModel();
  String graphMeta=context.getAppManager().getSelectedOAMO() != null ? context.getAppManager().getSelectedOAMO().getGraphMeta() : null;
  if (graphMeta != null) {
    try {
      JSONObject spec=new JSONObject(new JSONTokener(graphMeta));
      graphModel.importJSON(spec);
    }
 catch (    JSONException ex) {
      LoggerService.log(ex);
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(FacesMessage.SEVERITY_FATAL,messages.getString(""String_Node_Str""),FaceletLocalization.getLocalisedMessage(messages,""String_Node_Str"")));
      context.setGraphModel(null);
      context.cleanupWorkspace();
      return;
    }
  }
  context.setGraphModel(graphModel);
  context.clearAvailableSensors();
  applicationBean.redirect(""String_Node_Str"");
}",0.974852862493312
15612,"@Override public Panel createWidget(List<PresentationAttr> presentationAttributes){
  FacesContext fc=FacesContext.getCurrentInstance();
  Application application=fc.getApplication();
  parseAttributes(presentationAttributes);
  widget=(org.primefaces.component.chart.metergauge.MeterGaugeChart)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  widget.setId(""String_Node_Str"" + System.nanoTime());
  widget.setStyleClass(""String_Node_Str"");
  widget.setLabel(unit);
  widget.setMin(min.doubleValue());
  widget.setMax(max.doubleValue());
  widget.setRendered(false);
  panel=(Panel)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  panel.setId(""String_Node_Str"" + System.nanoTime());
  panel.setHeader(title);
  panel.setClosable(false);
  panel.setToggleable(false);
  panel.setStyleClass(""String_Node_Str"");
  panel.getChildren().add(widget);
  CommandLink clearLink=(CommandLink)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  clearLink.setAjax(true);
  clearLink.setOnclick(""String_Node_Str"");
  clearLink.setOncomplete(""String_Node_Str"");
  clearLink.setProcess(""String_Node_Str"");
  clearLink.setStyleClass(""String_Node_Str"");
  HtmlOutputText btn=new HtmlOutputText();
  btn.setStyleClass(""String_Node_Str"");
  clearLink.getChildren().add(btn);
  clearLink.addActionListener(new ActionListener(){
    @Override public void processAction(    ActionEvent arg0) throws AbortProcessingException {
      clearData();
    }
  }
);
  panel.getFacets().put(""String_Node_Str"",clearLink);
  emptyMessage=new HtmlOutputText();
  emptyMessage.setValue(FaceletLocalization.getLocalizedResourceBundle().getString(""String_Node_Str""));
  emptyMessage.setStyleClass(""String_Node_Str"");
  emptyMessage.setRendered(true);
  panel.getChildren().add(emptyMessage);
  model=new MeterGaugeChartModel();
  model.setValue(min);
  widget.setValue(model);
  return panel;
}","@Override public Panel createWidget(String serviceId,List<PresentationAttr> presentationAttributes){
  FacesContext fc=FacesContext.getCurrentInstance();
  Application application=fc.getApplication();
  parseAttributes(presentationAttributes);
  widget=(org.primefaces.component.chart.metergauge.MeterGaugeChart)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  widget.setId(""String_Node_Str"" + System.nanoTime());
  widget.setStyleClass(""String_Node_Str"");
  widget.setLabel(unit);
  widget.setMin(min.doubleValue());
  widget.setMax(max.doubleValue());
  widget.setRendered(false);
  panel=(Panel)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  panel.setId(""String_Node_Str"" + System.nanoTime());
  panel.setHeader(title != null ? title : ""String_Node_Str"");
  panel.setClosable(false);
  panel.setToggleable(false);
  panel.setStyleClass(""String_Node_Str"" + serviceId);
  panel.getChildren().add(widget);
  CommandLink clearLink=(CommandLink)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  clearLink.setAjax(true);
  clearLink.setOnclick(""String_Node_Str"");
  clearLink.setOncomplete(""String_Node_Str"");
  clearLink.setProcess(""String_Node_Str"");
  clearLink.setStyleClass(""String_Node_Str"");
  HtmlOutputText btn=new HtmlOutputText();
  btn.setStyleClass(""String_Node_Str"");
  clearLink.getChildren().add(btn);
  clearLink.addActionListener(new ActionListener(){
    @Override public void processAction(    ActionEvent arg0) throws AbortProcessingException {
      clearData();
    }
  }
);
  panel.getFacets().put(""String_Node_Str"",clearLink);
  emptyMessage=new HtmlOutputText();
  emptyMessage.setValue(FaceletLocalization.getLocalizedResourceBundle().getString(""String_Node_Str""));
  emptyMessage.setStyleClass(""String_Node_Str"");
  emptyMessage.setRendered(true);
  panel.getChildren().add(emptyMessage);
  model=new MeterGaugeChartModel();
  model.setValue(min);
  widget.setValue(model);
  return panel;
}",0.9833376057421174
15613,"@Override public Panel createWidget(List<PresentationAttr> presentationAttributes){
  FacesContext fc=FacesContext.getCurrentInstance();
  Application application=fc.getApplication();
  parseAttributes(presentationAttributes);
  widget=(org.primefaces.component.chart.line.LineChart)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  widget.setId(""String_Node_Str"" + System.nanoTime());
  widget.setStyleClass(""String_Node_Str"");
  widget.setXaxisLabel(xAxisLabel);
  widget.setYaxisLabel(yAxisLabel);
  widget.setXaxisAngle(90);
  widget.setShowMarkers(true);
  widget.setLegendPosition(""String_Node_Str"");
  if (!xAxisType.Number.equals(xAxisType)) {
    widget.setExtender(""String_Node_Str"");
  }
  widget.setRendered(false);
  panel=(Panel)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  panel.setId(""String_Node_Str"" + System.nanoTime());
  panel.setHeader(title);
  panel.setClosable(false);
  panel.setToggleable(false);
  panel.setStyleClass(""String_Node_Str"");
  panel.getChildren().add(widget);
  CommandLink clearLink=(CommandLink)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  clearLink.setAjax(true);
  clearLink.setOnclick(""String_Node_Str"");
  clearLink.setOncomplete(""String_Node_Str"");
  clearLink.setProcess(""String_Node_Str"");
  clearLink.setStyleClass(""String_Node_Str"");
  HtmlOutputText btn=new HtmlOutputText();
  btn.setStyleClass(""String_Node_Str"");
  clearLink.getChildren().add(btn);
  clearLink.addActionListener(new ActionListener(){
    @Override public void processAction(    ActionEvent arg0) throws AbortProcessingException {
      clearData();
    }
  }
);
  panel.getFacets().put(""String_Node_Str"",clearLink);
  emptyMessage=new HtmlOutputText();
  emptyMessage.setValue(FaceletLocalization.getLocalizedResourceBundle().getString(""String_Node_Str""));
  emptyMessage.setStyleClass(""String_Node_Str"");
  emptyMessage.setRendered(true);
  panel.getChildren().add(emptyMessage);
  model=new CartesianChartModel();
  for (  String seriesLabel : seriesLabels) {
    model.addSeries(new ChartSeries(seriesLabel));
  }
  widget.setValue(model);
  return panel;
}","@Override public Panel createWidget(String serviceId,List<PresentationAttr> presentationAttributes){
  FacesContext fc=FacesContext.getCurrentInstance();
  Application application=fc.getApplication();
  parseAttributes(presentationAttributes);
  widget=(org.primefaces.component.chart.line.LineChart)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  widget.setId(""String_Node_Str"" + System.nanoTime());
  widget.setStyleClass(""String_Node_Str"");
  widget.setXaxisLabel(xAxisLabel);
  widget.setYaxisLabel(yAxisLabel);
  widget.setXaxisAngle(90);
  widget.setShowMarkers(true);
  widget.setLegendPosition(""String_Node_Str"");
  if (!xAxisType.Number.equals(xAxisType)) {
    widget.setExtender(""String_Node_Str"");
  }
  widget.setRendered(false);
  panel=(Panel)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  panel.setId(""String_Node_Str"" + System.nanoTime());
  panel.setHeader(title != null ? title : ""String_Node_Str"");
  panel.setClosable(false);
  panel.setToggleable(false);
  panel.setStyleClass(""String_Node_Str"" + serviceId);
  panel.getChildren().add(widget);
  CommandLink clearLink=(CommandLink)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  clearLink.setAjax(true);
  clearLink.setOnclick(""String_Node_Str"");
  clearLink.setOncomplete(""String_Node_Str"");
  clearLink.setProcess(""String_Node_Str"");
  clearLink.setStyleClass(""String_Node_Str"");
  HtmlOutputText btn=new HtmlOutputText();
  btn.setStyleClass(""String_Node_Str"");
  clearLink.getChildren().add(btn);
  clearLink.addActionListener(new ActionListener(){
    @Override public void processAction(    ActionEvent arg0) throws AbortProcessingException {
      clearData();
    }
  }
);
  panel.getFacets().put(""String_Node_Str"",clearLink);
  emptyMessage=new HtmlOutputText();
  emptyMessage.setValue(FaceletLocalization.getLocalizedResourceBundle().getString(""String_Node_Str""));
  emptyMessage.setStyleClass(""String_Node_Str"");
  emptyMessage.setRendered(true);
  panel.getChildren().add(emptyMessage);
  model=new CartesianChartModel();
  for (  String seriesLabel : seriesLabels) {
    model.addSeries(new ChartSeries(seriesLabel));
  }
  widget.setValue(model);
  return panel;
}",0.9851496458761708
15614,"@Override public void processData(SdumServiceResultSet resultSet){
  boolean triggerUpdate=true;
  model.getMarkers().clear();
  model.getCircles().clear();
  for (  QueryResult resultBlock : resultSet.getQueryResult()) {
    for (    Result result : resultBlock.getSparql().getResults().getResult()) {
      Double lat=null;
      Double lon=null;
      Double value=null;
      for (      Binding binding : result.getBinding()) {
        if (""String_Node_Str"".equals(binding.getName())) {
          value=Double.valueOf(binding.getLiteral().getContent());
        }
 else         if (""String_Node_Str"".equals(binding.getName())) {
          lat=Double.valueOf(binding.getLiteral().getContent());
        }
 else         if (""String_Node_Str"".equals(binding.getName())) {
          lon=Double.valueOf(binding.getLiteral().getContent());
        }
      }
      if (value != null && lat != null && lon != null) {
        LatLng coord=new LatLng(lat,lon);
        if (MapType.Markers.equals(mapType)) {
          model.addOverlay(new Marker(coord,""String_Node_Str"" + value));
        }
 else         if (MapType.Circles.equals(mapType)) {
          Circle circle=new Circle(coord,value * valueScaler);
          circle.setStrokeColor(""String_Node_Str"");
          circle.setFillColor(""String_Node_Str"");
          circle.setStrokeOpacity(0.7);
          circle.setFillOpacity(0.7);
          model.addOverlay(circle);
        }
 else {
          Circle circle=new Circle(coord,value * valueScaler);
          circle.setStrokeColor(""String_Node_Str"");
          circle.setFillColor(""String_Node_Str"");
          circle.setStrokeOpacity(0.7);
          circle.setFillOpacity(0.7);
          model.addOverlay(new Marker(coord,""String_Node_Str"" + value));
          model.addOverlay(circle);
        }
      }
    }
  }
  if (triggerUpdate) {
    RequestContext requestContext=RequestContext.getCurrentInstance();
    if (requestContext != null) {
      requestContext.update(panel.getClientId());
    }
  }
}","@Override public void processData(SdumServiceResultSet resultSet){
  boolean triggerUpdate=true;
  model.getMarkers().clear();
  model.getCircles().clear();
  for (  QueryResult resultBlock : resultSet.getQueryResult()) {
    for (    Result result : resultBlock.getSparql().getResults().getResult()) {
      Double lat=null;
      Double lon=null;
      Double value=null;
      for (      Binding binding : result.getBinding()) {
        if (""String_Node_Str"".equals(binding.getName())) {
          value=Double.valueOf(binding.getLiteral().getContent());
        }
 else         if (""String_Node_Str"".equals(binding.getName())) {
          lat=Double.valueOf(binding.getLiteral().getContent());
        }
 else         if (""String_Node_Str"".equals(binding.getName())) {
          lon=Double.valueOf(binding.getLiteral().getContent());
        }
      }
      if (value != null && lat != null && lon != null) {
        String overlayData=FaceletLocalization.getLocalisedMessage(FaceletLocalization.getLocalizedResourceBundle(),""String_Node_Str"",""String_Node_Str"" + lat + ""String_Node_Str""+ lon+ ""String_Node_Str"",value);
        LatLng coord=new LatLng(lat,lon);
        if (MapType.Markers.equals(mapType)) {
          model.addOverlay(new Marker(coord,""String_Node_Str"",overlayData));
        }
 else         if (MapType.Circles.equals(mapType)) {
          Circle circle=new Circle(coord,value * valueScaler);
          circle.setStrokeColor(""String_Node_Str"");
          circle.setStrokeOpacity(0.8);
          circle.setFillColor(""String_Node_Str"");
          circle.setFillOpacity(0.35);
          model.addOverlay(circle);
        }
 else {
          Circle circle=new Circle(coord,value * valueScaler);
          circle.setStrokeColor(""String_Node_Str"");
          circle.setStrokeOpacity(0.8);
          circle.setFillColor(""String_Node_Str"");
          circle.setFillOpacity(0.35);
          model.addOverlay(new Marker(coord,""String_Node_Str"",overlayData));
          model.addOverlay(circle);
        }
      }
    }
  }
  if (triggerUpdate) {
    RequestContext requestContext=RequestContext.getCurrentInstance();
    if (requestContext != null) {
      requestContext.execute(""String_Node_Str"" + widget.getWidgetVar() + ""String_Node_Str"");
      for (      Circle circle : widget.getModel().getCircles()) {
        requestContext.execute(""String_Node_Str"" + widget.getWidgetVar() + ""String_Node_Str""+ circle.getId()+ ""String_Node_Str""+ circle.getCenter().getLat()+ ""String_Node_Str""+ circle.getCenter().getLng()+ ""String_Node_Str""+ circle.getRadius()+ ""String_Node_Str""+ circle.getStrokeColor()+ ""String_Node_Str""+ circle.getStrokeOpacity()+ ""String_Node_Str""+ circle.getFillColor()+ ""String_Node_Str""+ circle.getFillOpacity()+ ""String_Node_Str"");
      }
      for (      Marker marker : widget.getModel().getMarkers()) {
        requestContext.execute(""String_Node_Str"" + widget.getWidgetVar() + ""String_Node_Str""+ marker.getId()+ ""String_Node_Str""+ marker.getLatlng().getLat()+ ""String_Node_Str""+ marker.getLatlng().getLng()+ ""String_Node_Str"");
      }
      requestContext.execute(""String_Node_Str"" + widget.getWidgetVar() + ""String_Node_Str"");
    }
  }
}",0.721868365180467
15615,"@Override public Panel createWidget(List<PresentationAttr> presentationAttributes){
  FacesContext fc=FacesContext.getCurrentInstance();
  Application application=fc.getApplication();
  parseAttributes(presentationAttributes);
  widget=(org.primefaces.component.gmap.GMap)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  widget.setId(""String_Node_Str"" + System.nanoTime());
  widget.setStyleClass(""String_Node_Str"");
  widget.setType(""String_Node_Str"");
  widget.setCenter(centerLat + ""String_Node_Str"" + centerLon);
  widget.setZoom(zoom);
  widget.setRendered(true);
  panel=(Panel)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  panel.setId(""String_Node_Str"" + System.nanoTime());
  panel.setHeader(title);
  panel.setClosable(false);
  panel.setToggleable(false);
  panel.setStyleClass(""String_Node_Str"");
  panel.getChildren().add(widget);
  CommandLink clearLink=(CommandLink)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  clearLink.setAjax(true);
  clearLink.setOnclick(""String_Node_Str"");
  clearLink.setOncomplete(""String_Node_Str"");
  clearLink.setProcess(""String_Node_Str"");
  clearLink.setStyleClass(""String_Node_Str"");
  HtmlOutputText btn=new HtmlOutputText();
  btn.setStyleClass(""String_Node_Str"");
  clearLink.getChildren().add(btn);
  clearLink.addActionListener(new ActionListener(){
    @Override public void processAction(    ActionEvent arg0) throws AbortProcessingException {
      clearData();
    }
  }
);
  panel.getFacets().put(""String_Node_Str"",clearLink);
  model=new DefaultMapModel();
  widget.setModel(model);
  return panel;
}","@Override public Panel createWidget(String serviceId,List<PresentationAttr> presentationAttributes){
  FacesContext fc=FacesContext.getCurrentInstance();
  Application application=fc.getApplication();
  parseAttributes(presentationAttributes);
  mapViewType=mapType.toString();
  mapCenter=centerLat + ""String_Node_Str"" + centerLon;
  mapZoom=zoom;
  model=new DefaultMapModel();
  widget=(org.primefaces.component.gmap.GMap)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  widget.setId(""String_Node_Str"" + System.nanoTime());
  widget.setWidgetVar(widget.getId());
  widget.setStyleClass(""String_Node_Str"");
  widget.setValueExpression(""String_Node_Str"",application.getExpressionFactory().createValueExpression(fc.getELContext(),""String_Node_Str"" + serviceId + ""String_Node_Str"",String.class));
  widget.setValueExpression(""String_Node_Str"",application.getExpressionFactory().createValueExpression(fc.getELContext(),""String_Node_Str"" + serviceId + ""String_Node_Str"",String.class));
  widget.setValueExpression(""String_Node_Str"",application.getExpressionFactory().createValueExpression(fc.getELContext(),""String_Node_Str"" + serviceId + ""String_Node_Str"",Integer.class));
  widget.setRendered(true);
  widget.setMapTypeControl(true);
  widget.setModel(model);
  MethodExpression dummyExpression=application.getExpressionFactory().createMethodExpression(fc.getELContext(),""String_Node_Str"",void.class,new Class[]{});
  MethodExpression stateChangeMethodExpression=application.getExpressionFactory().createMethodExpression(fc.getELContext(),""String_Node_Str"" + serviceId + ""String_Node_Str"",void.class,new Class[]{StateChangeEvent.class});
  AjaxBehavior ajaxBehavior=new AjaxBehavior();
  ajaxBehavior.setProcess(""String_Node_Str"");
  ajaxBehavior.addAjaxBehaviorListener(new AjaxBehaviorListenerImpl(dummyExpression,stateChangeMethodExpression));
  widget.addClientBehavior(""String_Node_Str"",ajaxBehavior);
  MethodExpression markerSelectMethodExpression=application.getExpressionFactory().createMethodExpression(fc.getELContext(),""String_Node_Str"" + serviceId + ""String_Node_Str"",void.class,new Class[]{OverlaySelectEvent.class});
  ajaxBehavior=new AjaxBehavior();
  ajaxBehavior.setProcess(""String_Node_Str"");
  ajaxBehavior.addAjaxBehaviorListener(new AjaxBehaviorListenerImpl(dummyExpression,markerSelectMethodExpression));
  widget.addClientBehavior(""String_Node_Str"",ajaxBehavior);
  GMapInfoWindow infoWindow=new GMapInfoWindow();
  infoWindow.setId(""String_Node_Str"" + System.nanoTime());
  OutputPanel infoWindowPanel=new OutputPanel();
  infoWindowPanel.setStyleClass(""String_Node_Str"");
  infoWindowContent=new HtmlOutputText();
  infoWindowContent.setEscape(false);
  infoWindowPanel.getChildren().add(infoWindowContent);
  infoWindow.getChildren().add(infoWindowPanel);
  widget.getChildren().add(infoWindow);
  panel=(Panel)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  panel.setId(""String_Node_Str"" + System.nanoTime());
  panel.setHeader(title != null ? title : ""String_Node_Str"");
  panel.setClosable(false);
  panel.setToggleable(false);
  panel.setStyleClass(""String_Node_Str"" + serviceId);
  panel.getChildren().add(widget);
  CommandLink clearLink=(CommandLink)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  clearLink.setAjax(true);
  clearLink.setOnclick(""String_Node_Str"");
  clearLink.setOncomplete(""String_Node_Str"");
  clearLink.setProcess(""String_Node_Str"");
  clearLink.setStyleClass(""String_Node_Str"");
  HtmlOutputText btn=new HtmlOutputText();
  btn.setStyleClass(""String_Node_Str"");
  clearLink.getChildren().add(btn);
  clearLink.addActionListener(new ActionListener(){
    @Override public void processAction(    ActionEvent arg0) throws AbortProcessingException {
      clearData();
    }
  }
);
  panel.getFacets().put(""String_Node_Str"",clearLink);
  return panel;
}",0.5268133066715143
15616,"@Override public void clearData(){
  model.getMarkers().clear();
  model.getCircles().clear();
  RequestContext requestContext=RequestContext.getCurrentInstance();
  if (requestContext != null) {
    requestContext.update(panel.getClientId());
  }
}","@Override public void clearData(){
  model.getMarkers().clear();
  model.getCircles().clear();
  selectedMarker=null;
  infoWindowContent.setValue(""String_Node_Str"");
  mapViewType=mapType.toString();
  mapCenter=centerLat + ""String_Node_Str"" + centerLon;
  mapZoom=zoom;
  RequestContext requestContext=RequestContext.getCurrentInstance();
  if (requestContext != null) {
    requestContext.update(panel.getClientId());
  }
}",0.7377777777777778
15617,"private void parseAttributes(List<PresentationAttr> presentationAttributes){
  numAttributes=0;
  for (  PresentationAttr attr : presentationAttributes) {
    if (""String_Node_Str"".equals(attr.getName())) {
      numAttributes=Integer.valueOf(attr.getValue());
      attributeValues=new String[numAttributes];
      break;
    }
  }
}","private void parseAttributes(List<PresentationAttr> presentationAttributes){
  numAttributes=0;
  for (  PresentationAttr attr : presentationAttributes) {
    if (""String_Node_Str"".equals(attr.getName())) {
      numAttributes=Integer.valueOf(attr.getValue());
      attributeValues=new String[numAttributes];
    }
 else     if (""String_Node_Str"".equals(attr.getName())) {
      title=attr.getValue();
    }
  }
}",0.8743315508021391
15618,"@Override public void processData(SdumServiceResultSet resultSet){
  boolean triggerUpdate=true;
  for (int i=0; i < numAttributes; i++) {
    attributeValues[i]=null;
  }
  for (  QueryResult resultBlock : resultSet.getQueryResult()) {
    for (    Result result : resultBlock.getSparql().getResults().getResult()) {
      for (      Binding binding : result.getBinding()) {
        if (binding.getName().startsWith(""String_Node_Str"")) {
          Integer seriesIndex=Integer.valueOf(binding.getName().substring(5)) - 1;
          attributeValues[seriesIndex]=binding.getLiteral().getContent();
        }
      }
    }
  }
  if (triggerUpdate) {
    String html=""String_Node_Str"";
    for (int i=0; i < numAttributes; i++) {
      html+=""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (attributeValues[i] == null ? ""String_Node_Str"" : attributeValues[i])+ ""String_Node_Str"";
    }
    html+=""String_Node_Str"";
    widget.setValue(html);
    widget.setRendered(true);
    emptyMessage.setRendered(false);
    RequestContext requestContext=RequestContext.getCurrentInstance();
    if (requestContext != null) {
      requestContext.update(panel.getClientId());
    }
  }
}","@Override public void processData(SdumServiceResultSet resultSet){
  boolean triggerUpdate=true;
  for (int i=0; i < numAttributes; i++) {
    attributeValues[i]=null;
  }
  for (  QueryResult resultBlock : resultSet.getQueryResult()) {
    for (    Result result : resultBlock.getSparql().getResults().getResult()) {
      for (      Binding binding : result.getBinding()) {
        if (binding.getName().startsWith(""String_Node_Str"")) {
          Integer seriesIndex=Integer.valueOf(binding.getName().substring(4)) - 1;
          attributeValues[seriesIndex]=binding.getLiteral().getContent();
        }
      }
    }
  }
  if (triggerUpdate) {
    String html=""String_Node_Str"";
    for (int i=0; i < numAttributes; i++) {
      html+=""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (attributeValues[i] == null ? ""String_Node_Str"" : attributeValues[i])+ ""String_Node_Str"";
    }
    html+=""String_Node_Str"";
    widget.setValue(html);
    widget.setRendered(true);
    emptyMessage.setRendered(false);
    RequestContext requestContext=RequestContext.getCurrentInstance();
    if (requestContext != null) {
      requestContext.update(panel.getClientId());
    }
  }
}",0.9991467576791808
15619,"@Override public Panel createWidget(List<PresentationAttr> presentationAttributes){
  FacesContext fc=FacesContext.getCurrentInstance();
  Application application=fc.getApplication();
  parseAttributes(presentationAttributes);
  widget=new HtmlOutputText();
  widget.setId(""String_Node_Str"" + System.nanoTime());
  widget.setStyleClass(""String_Node_Str"");
  widget.setEscape(false);
  widget.setRendered(false);
  panel=(Panel)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  panel.setId(""String_Node_Str"" + System.nanoTime());
  panel.setHeader(title);
  panel.setClosable(false);
  panel.setToggleable(false);
  panel.setStyleClass(""String_Node_Str"");
  panel.getChildren().add(widget);
  CommandLink clearLink=(CommandLink)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  clearLink.setAjax(true);
  clearLink.setOnclick(""String_Node_Str"");
  clearLink.setOncomplete(""String_Node_Str"");
  clearLink.setProcess(""String_Node_Str"");
  clearLink.setStyleClass(""String_Node_Str"");
  HtmlOutputText btn=new HtmlOutputText();
  btn.setStyleClass(""String_Node_Str"");
  clearLink.getChildren().add(btn);
  clearLink.addActionListener(new ActionListener(){
    @Override public void processAction(    ActionEvent arg0) throws AbortProcessingException {
      clearData();
    }
  }
);
  panel.getFacets().put(""String_Node_Str"",clearLink);
  emptyMessage=new HtmlOutputText();
  emptyMessage.setValue(FaceletLocalization.getLocalizedResourceBundle().getString(""String_Node_Str""));
  emptyMessage.setStyleClass(""String_Node_Str"");
  emptyMessage.setRendered(true);
  panel.getChildren().add(emptyMessage);
  return panel;
}","@Override public Panel createWidget(String serviceId,List<PresentationAttr> presentationAttributes){
  FacesContext fc=FacesContext.getCurrentInstance();
  Application application=fc.getApplication();
  parseAttributes(presentationAttributes);
  widget=new HtmlOutputText();
  widget.setId(""String_Node_Str"" + System.nanoTime());
  widget.setStyleClass(""String_Node_Str"");
  widget.setEscape(false);
  widget.setRendered(false);
  panel=(Panel)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  panel.setId(""String_Node_Str"" + System.nanoTime());
  panel.setHeader(title != null ? title : ""String_Node_Str"");
  panel.setClosable(false);
  panel.setToggleable(false);
  panel.setStyleClass(""String_Node_Str"" + serviceId);
  panel.getChildren().add(widget);
  CommandLink clearLink=(CommandLink)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  clearLink.setAjax(true);
  clearLink.setOnclick(""String_Node_Str"");
  clearLink.setOncomplete(""String_Node_Str"");
  clearLink.setProcess(""String_Node_Str"");
  clearLink.setStyleClass(""String_Node_Str"");
  HtmlOutputText btn=new HtmlOutputText();
  btn.setStyleClass(""String_Node_Str"");
  clearLink.getChildren().add(btn);
  clearLink.addActionListener(new ActionListener(){
    @Override public void processAction(    ActionEvent arg0) throws AbortProcessingException {
      clearData();
    }
  }
);
  panel.getFacets().put(""String_Node_Str"",clearLink);
  emptyMessage=new HtmlOutputText();
  emptyMessage.setValue(FaceletLocalization.getLocalizedResourceBundle().getString(""String_Node_Str""));
  emptyMessage.setStyleClass(""String_Node_Str"");
  emptyMessage.setRendered(true);
  panel.getChildren().add(emptyMessage);
  return panel;
}",0.9807635395087304
15620,"@Override public Panel createWidget(List<PresentationAttr> presentationAttributes){
  FacesContext fc=FacesContext.getCurrentInstance();
  Application application=fc.getApplication();
  parseAttributes(presentationAttributes);
  widget=(org.primefaces.component.chart.pie.PieChart)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  widget.setId(""String_Node_Str"" + System.nanoTime());
  widget.setStyleClass(""String_Node_Str"");
  widget.setLegendPosition(""String_Node_Str"");
  widget.setRendered(false);
  panel=(Panel)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  panel.setId(""String_Node_Str"" + System.nanoTime());
  panel.setHeader(title);
  panel.setClosable(false);
  panel.setToggleable(false);
  panel.setStyleClass(""String_Node_Str"");
  panel.getChildren().add(widget);
  CommandLink clearLink=(CommandLink)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  clearLink.setAjax(true);
  clearLink.setOnclick(""String_Node_Str"");
  clearLink.setOncomplete(""String_Node_Str"");
  clearLink.setProcess(""String_Node_Str"");
  clearLink.setStyleClass(""String_Node_Str"");
  HtmlOutputText btn=new HtmlOutputText();
  btn.setStyleClass(""String_Node_Str"");
  clearLink.getChildren().add(btn);
  clearLink.addActionListener(new ActionListener(){
    @Override public void processAction(    ActionEvent arg0) throws AbortProcessingException {
      clearData();
    }
  }
);
  panel.getFacets().put(""String_Node_Str"",clearLink);
  emptyMessage=new HtmlOutputText();
  emptyMessage.setValue(FaceletLocalization.getLocalizedResourceBundle().getString(""String_Node_Str""));
  emptyMessage.setStyleClass(""String_Node_Str"");
  emptyMessage.setRendered(true);
  panel.getChildren().add(emptyMessage);
  model=new PieChartModel();
  widget.setValue(model);
  return panel;
}","@Override public Panel createWidget(String serviceId,List<PresentationAttr> presentationAttributes){
  FacesContext fc=FacesContext.getCurrentInstance();
  Application application=fc.getApplication();
  parseAttributes(presentationAttributes);
  widget=(org.primefaces.component.chart.pie.PieChart)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  widget.setId(""String_Node_Str"" + System.nanoTime());
  widget.setStyleClass(""String_Node_Str"");
  widget.setLegendPosition(""String_Node_Str"");
  widget.setRendered(false);
  panel=(Panel)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  panel.setId(""String_Node_Str"" + System.nanoTime());
  panel.setHeader(title != null ? title : ""String_Node_Str"");
  panel.setClosable(false);
  panel.setToggleable(false);
  panel.setStyleClass(""String_Node_Str"" + serviceId);
  panel.getChildren().add(widget);
  CommandLink clearLink=(CommandLink)application.createComponent(fc,""String_Node_Str"",""String_Node_Str"");
  clearLink.setAjax(true);
  clearLink.setOnclick(""String_Node_Str"");
  clearLink.setOncomplete(""String_Node_Str"");
  clearLink.setProcess(""String_Node_Str"");
  clearLink.setStyleClass(""String_Node_Str"");
  HtmlOutputText btn=new HtmlOutputText();
  btn.setStyleClass(""String_Node_Str"");
  clearLink.getChildren().add(btn);
  clearLink.addActionListener(new ActionListener(){
    @Override public void processAction(    ActionEvent arg0) throws AbortProcessingException {
      clearData();
    }
  }
);
  panel.getFacets().put(""String_Node_Str"",clearLink);
  emptyMessage=new HtmlOutputText();
  emptyMessage.setValue(FaceletLocalization.getLocalizedResourceBundle().getString(""String_Node_Str""));
  emptyMessage.setStyleClass(""String_Node_Str"");
  emptyMessage.setRendered(true);
  panel.getChildren().add(emptyMessage);
  model=new PieChartModel();
  widget.setValue(model);
  return panel;
}",0.9824939402100727
15621,"/** 
 * Generate a JSF widget to render the widget view
 */
Panel createWidget(List<PresentationAttr> presentationAttributes);","/** 
 * Generate a JSF widget to render the widget view
 */
Panel createWidget(String serviceId,List<PresentationAttr> presentationAttributes);",0.9368029739776952
15622,"public AuthorizationManager getAuthorizationManager(){
  if (authorizationManager != null) {
    AuthorizationManager authorizationManager=new AuthorizationManager();
    authorizationManager.setClient((CasOAuthWrapperClient)getClient());
    authorizationManager.setPermissionsURL(getCasOAuthClientRealm().getPermissionsURL());
  }
  return authorizationManager;
}","public AuthorizationManager getAuthorizationManager(){
  if (authorizationManager == null) {
    authorizationManager=new AuthorizationManager();
    authorizationManager.setClient((CasOAuthWrapperClient)getClient());
    authorizationManager.setPermissionsURL(getCasOAuthClientRealm().getPermissionsURL());
  }
  return authorizationManager;
}",0.9675599435825106
15623,"private void registerService(){
  User user=new User();
  user.setUsername(""String_Node_Str"");
  user.setPass(""String_Node_Str"");
  LSMTripleStore lsmStore=new LSMTripleStore();
  lsmStore.setUser(user);
  LSMSchema myOnt=new LSMSchema(OntModelSpec.OWL_DL_MEM);
  LSMSchema myOntInstance=new LSMSchema();
  org.openiot.scheduler.core.utils.lsmpa.entities.User userEnt=new org.openiot.scheduler.core.utils.lsmpa.entities.User(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
  userEnt.setId(osdSpec.getUserID());
  userEnt.createClassIdv();
  for (  OAMO oamo : osdSpec.getOAMO()) {
    logger.debug(""String_Node_Str"",oamo.getDescription(),oamo.getId());
    logger.debug(""String_Node_Str"",oamo.getName());
    org.openiot.scheduler.core.utils.lsmpa.entities.OAMO oamoEnt=new org.openiot.scheduler.core.utils.lsmpa.entities.OAMO(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
    oamoEnt.setName(oamo.getName());
    oamoEnt.setUser(userEnt);
    oamoEnt.createClassIdv();
    oamoEnt.createPoamoName();
    oamoEnt.createPoamoUserOf();
    userEnt.addService(oamoEnt);
    userEnt.createPuserOf();
    for (    OSMO osmo : oamo.getOSMO()) {
      logger.debug(""String_Node_Str"",osmo.getId());
      logger.debug(""String_Node_Str"",osmo.getName());
      logger.debug(""String_Node_Str"",osmo.getDescription());
      for (      QueryRequest qr : osmo.getQueryRequest()) {
        logger.debug(""String_Node_Str"" + qr.getQuery());
      }
      Service srvcEnt=new Service(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
      srvcEnt.setId(osmo.getId());
      srvcEnt.setName(osmo.getName());
      srvcEnt.setDescription(osmo.getDescription());
      for (      QueryRequest qr : osmo.getQueryRequest()) {
        Query qstring=new Query(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
        qstring.setqString(qr.getQuery());
        qstring.createClassIdv();
        qstring.createPqueryString();
        srvcEnt.addQueryString(qstring);
      }
      srvcEnt.createClassIdv();
      srvcEnt.createPserviceName();
      srvcEnt.createPserviceDescription();
      srvcEnt.createPqString();
      for (      Widget widget : osmo.getRequestPresentation().getWidget()) {
        WidgetPresentation widgetPre=new WidgetPresentation(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
        widgetPre.setService(srvcEnt);
        widgetPre.createClassIdv();
        widgetPre.createPwidgetPresOf();
        srvcEnt.addWidgetPresentation(widgetPre);
        srvcEnt.createPwidgetPres();
        logger.debug(""String_Node_Str"",widget.getWidgetID());
        WidgetAvailable wAvail=new WidgetAvailable(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
        wAvail.setId(widget.getWidgetID());
        wAvail.setWidgetPre(widgetPre);
        wAvail.createClassIdv();
        wAvail.createPWidgetOf();
        widgetPre.setWidgetAvailable(wAvail);
        widgetPre.createPwidget();
        for (        PresentationAttr pAttr : widget.getPresentationAttr()) {
          logger.debug(""String_Node_Str"",pAttr.getName(),pAttr.getValue());
          WidgetAttributes wAttr=new WidgetAttributes(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
          wAttr.setDescription(pAttr.getName());
          wAttr.setName(pAttr.getValue());
          wAttr.setWidgetPre(widgetPre);
          wAttr.createClassIdv();
          wAttr.createPdesc();
          wAttr.createPname();
          wAttr.createPWidgetAttrOf();
          widgetPre.addWidgetAttr(wAttr);
          widgetPre.createPwidgetAttr();
        }
      }
      srvcEnt.setOAMO(oamoEnt);
      srvcEnt.createPOAMO();
      oamoEnt.addService(srvcEnt);
      oamoEnt.createPoamoService();
    }
  }
  logger.debug(myOntInstance.exportToTriples(""String_Node_Str""));
  boolean ok=lsmStore.pushRDF(""String_Node_Str"",myOntInstance.exportToTriples(""String_Node_Str""));
  if (ok) {
    replyMessage=""String_Node_Str"";
  }
 else {
    replyMessage=""String_Node_Str"";
  }
  logger.debug(replyMessage);
}","private void registerService(){
  User user=new User();
  user.setUsername(""String_Node_Str"");
  user.setPass(""String_Node_Str"");
  LSMTripleStore lsmStore=new LSMTripleStore();
  lsmStore.setUser(user);
  LSMSchema myOnt=new LSMSchema(OntModelSpec.OWL_DL_MEM);
  LSMSchema myOntInstance=new LSMSchema();
  org.openiot.scheduler.core.utils.lsmpa.entities.User userEnt=new org.openiot.scheduler.core.utils.lsmpa.entities.User(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
  userEnt.setId(osdSpec.getUserID());
  userEnt.createClassIdv();
  for (  OAMO oamo : osdSpec.getOAMO()) {
    logger.debug(""String_Node_Str"",oamo.getDescription(),oamo.getId());
    logger.debug(""String_Node_Str"",oamo.getName());
    org.openiot.scheduler.core.utils.lsmpa.entities.OAMO oamoEnt=new org.openiot.scheduler.core.utils.lsmpa.entities.OAMO(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
    oamoEnt.setId(oamo.getId());
    oamoEnt.setName(oamo.getName());
    oamoEnt.setUser(userEnt);
    oamoEnt.createClassIdv();
    oamoEnt.createPoamoName();
    oamoEnt.createPoamoUserOf();
    userEnt.addService(oamoEnt);
    userEnt.createPuserOf();
    for (    OSMO osmo : oamo.getOSMO()) {
      logger.debug(""String_Node_Str"",osmo.getId());
      logger.debug(""String_Node_Str"",osmo.getName());
      logger.debug(""String_Node_Str"",osmo.getDescription());
      for (      QueryRequest qr : osmo.getQueryRequest()) {
        logger.debug(""String_Node_Str"" + qr.getQuery());
      }
      Service srvcEnt=new Service(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
      srvcEnt.setId(osmo.getId());
      srvcEnt.setName(osmo.getName());
      srvcEnt.setDescription(osmo.getDescription());
      for (      QueryRequest qr : osmo.getQueryRequest()) {
        Query qstring=new Query(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
        qstring.setqString(qr.getQuery());
        qstring.createClassIdv();
        qstring.createPqueryString();
        srvcEnt.addQueryString(qstring);
      }
      srvcEnt.createClassIdv();
      srvcEnt.createPserviceName();
      srvcEnt.createPserviceDescription();
      srvcEnt.createPqString();
      for (      Widget widget : osmo.getRequestPresentation().getWidget()) {
        WidgetPresentation widgetPre=new WidgetPresentation(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
        widgetPre.setService(srvcEnt);
        widgetPre.createClassIdv();
        widgetPre.createPwidgetPresOf();
        srvcEnt.addWidgetPresentation(widgetPre);
        srvcEnt.createPwidgetPres();
        logger.debug(""String_Node_Str"",widget.getWidgetID());
        WidgetAvailable wAvail=new WidgetAvailable(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
        wAvail.setId(widget.getWidgetID());
        wAvail.setWidgetPre(widgetPre);
        wAvail.createClassIdv();
        wAvail.createPWidgetOf();
        widgetPre.setWidgetAvailable(wAvail);
        widgetPre.createPwidget();
        for (        PresentationAttr pAttr : widget.getPresentationAttr()) {
          logger.debug(""String_Node_Str"",pAttr.getName(),pAttr.getValue());
          WidgetAttributes wAttr=new WidgetAttributes(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
          wAttr.setDescription(pAttr.getName());
          wAttr.setName(pAttr.getValue());
          wAttr.setWidgetPre(widgetPre);
          wAttr.createClassIdv();
          wAttr.createPdesc();
          wAttr.createPname();
          wAttr.createPWidgetAttrOf();
          widgetPre.addWidgetAttr(wAttr);
          widgetPre.createPwidgetAttr();
        }
      }
      srvcEnt.setOAMO(oamoEnt);
      srvcEnt.createPOAMO();
      oamoEnt.addService(srvcEnt);
      oamoEnt.createPoamoService();
    }
  }
  logger.debug(myOntInstance.exportToTriples(""String_Node_Str""));
  boolean ok=lsmStore.pushRDF(""String_Node_Str"",myOntInstance.exportToTriples(""String_Node_Str""));
  if (ok) {
    replyMessage=""String_Node_Str"";
  }
 else {
    replyMessage=""String_Node_Str"";
  }
  logger.debug(replyMessage);
}",0.9958328071726228
15624,"/** 
 * Invokes a previously defined Service having the specified applicationID. This call will produce only one Result Set.
 * @param applicationID
 * @return
 */
@GET @Path(""String_Node_Str"") public SdumServiceResultSet pollForReport(@QueryParam(""String_Node_Str"") String applicationID){
  PollForReportImpl pollForReportImpl=new PollForReportImpl(applicationID);
  return pollForReportImpl.getSdumServiceResultSet();
}","/** 
 * Invokes a previously defined Service having the specified serviceID.
 * @param applicationID
 * @return
 */
@GET @Path(""String_Node_Str"") public SdumServiceResultSet pollForReport(@QueryParam(""String_Node_Str"") String applicationID){
  PollForReportImpl pollForReportImpl=new PollForReportImpl(applicationID);
  return pollForReportImpl.getSdumServiceResultSet();
}",0.9219143576826196
15625,"private void findApplication(){
  SesameSPARQLClient sparqlCl=null;
  try {
    sparqlCl=new SesameSPARQLClient();
  }
 catch (  RepositoryException e) {
    logger.error(""String_Node_Str"",e);
    return;
  }
  oamo=new OAMO();
  TupleQueryResult qres=sparqlCl.sparqlToQResult(Queries.getRootOAMOData(oamoID));
  Queries.RootOAMOData rootOAMODATA=Queries.parseOAMORootData(qres);
  oamo.setName(rootOAMODATA.getOamoName());
  oamo.setId(rootOAMODATA.getUserID());
  qres=sparqlCl.sparqlToQResult(Queries.getOSMOListOfOAMO(oamoID));
  ArrayList<Queries.OSMOData> OSMODataList=Queries.parseServiceStatusOfOSMO(qres);
  for (  Queries.OSMOData osmodata : OSMODataList) {
    OSMO osmo=new OSMO();
    osmo.setId(osmodata.getId());
    osmo.setName(osmodata.getName());
    osmo.setDescription(osmodata.getDesc());
    QueryRequest qr=new QueryRequest();
    qr.setQuery(osmodata.getqString());
    osmo.setQueryRequest(qr);
    qres=sparqlCl.sparqlToQResult(Queries.getWidgetPreListByService(osmodata.getId()));
    ArrayList<Queries.WidgetPresentationData> widgetPresentationDataList=Queries.parseWidgetPreListByService(qres);
    for (    Queries.WidgetPresentationData widgetPresentationData : widgetPresentationDataList) {
      RequestPresentation reqp=new RequestPresentation();
      Widget w=new Widget();
      w.setWidgetID(widgetPresentationData.getId());
      qres=sparqlCl.sparqlToQResult(Queries.getWidgetAttrByWidgetPre(widgetPresentationData.getId()));
      ArrayList<Queries.WidgetAttr> widgetAttr=Queries.parseWidgetAttributes(qres);
      for (      Queries.WidgetAttr wattr : widgetAttr) {
        PresentationAttr pattr=new PresentationAttr();
        pattr.setName(wattr.getName());
        pattr.setValue(wattr.getValue());
        w.getPresentationAttr().add(pattr);
      }
      reqp.getWidget().add(w);
      osmo.setRequestPresentation(reqp);
    }
    oamo.getOSMO().add(osmo);
  }
}","private void findApplication(){
  SesameSPARQLClient sparqlCl=null;
  try {
    sparqlCl=new SesameSPARQLClient();
  }
 catch (  RepositoryException e) {
    logger.error(""String_Node_Str"",e);
    return;
  }
  oamo=new OAMO();
  TupleQueryResult qres=sparqlCl.sparqlToQResult(Queries.getRootOAMOData(oamoID));
  Queries.RootOAMOData rootOAMODATA=Queries.parseOAMORootData(qres);
  oamo.setName(rootOAMODATA.getOamoName());
  oamo.setId(rootOAMODATA.getUserID());
  qres=sparqlCl.sparqlToQResult(Queries.getOSMOListOfOAMO(oamoID));
  ArrayList<Queries.OSMOData> OSMODataList=Queries.parseServiceStatusOfOSMO(qres);
  for (  Queries.OSMOData osmodata : OSMODataList) {
    OSMO osmo=new OSMO();
    osmo.setId(osmodata.getId());
    osmo.setName(osmodata.getName());
    osmo.setDescription(osmodata.getDesc());
    QueryRequest qr=new QueryRequest();
    qr.setQuery(osmodata.getqString());
    osmo.getQueryRequest().add(qr);
    qres=sparqlCl.sparqlToQResult(Queries.getWidgetPreListByService(osmodata.getId()));
    ArrayList<Queries.WidgetPresentationData> widgetPresentationDataList=Queries.parseWidgetPreListByService(qres);
    for (    Queries.WidgetPresentationData widgetPresentationData : widgetPresentationDataList) {
      RequestPresentation reqp=new RequestPresentation();
      Widget w=new Widget();
      w.setWidgetID(widgetPresentationData.getId());
      qres=sparqlCl.sparqlToQResult(Queries.getWidgetAttrByWidgetPre(widgetPresentationData.getId()));
      ArrayList<Queries.WidgetAttr> widgetAttr=Queries.parseWidgetAttributes(qres);
      for (      Queries.WidgetAttr wattr : widgetAttr) {
        PresentationAttr pattr=new PresentationAttr();
        pattr.setName(wattr.getName());
        pattr.setValue(wattr.getValue());
        w.getPresentationAttr().add(pattr);
      }
      reqp.getWidget().add(w);
      osmo.setRequestPresentation(reqp);
    }
    oamo.getOSMO().add(osmo);
  }
}",0.9979101358411704
15626,"public static OSMO parseOSMORootData(TupleQueryResult qres){
  OSMO osmo=new OSMO();
  try {
    BindingSet b=qres.next();
    Set names=b.getBindingNames();
    for (    Object n : names) {
      if (((String)n).equalsIgnoreCase(""String_Node_Str"")) {
        String str=(b.getValue((String)n) == null) ? null : b.getValue((String)n).stringValue();
        osmo.setName(str);
        System.out.print(""String_Node_Str"" + osmo.getName() + ""String_Node_Str"");
      }
 else       if (((String)n).equalsIgnoreCase(""String_Node_Str"")) {
        String str=(b.getValue((String)n) == null) ? null : b.getValue((String)n).stringValue();
        osmo.setDescription(str);
        System.out.print(""String_Node_Str"" + osmo.getDescription() + ""String_Node_Str"");
      }
 else       if (((String)n).equalsIgnoreCase(""String_Node_Str"")) {
        String str=(b.getValue((String)n) == null) ? null : b.getValue((String)n).stringValue();
        QueryRequest qr=new QueryRequest();
        qr.setQuery(str);
        osmo.setQueryRequest(qr);
        System.out.print(""String_Node_Str"" + osmo.getQueryRequest().getQuery() + ""String_Node_Str"");
      }
    }
    return osmo;
  }
 catch (  QueryEvaluationException e) {
    e.printStackTrace();
    return null;
  }
catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","public static OSMO parseOSMORootData(TupleQueryResult qres){
  OSMO osmo=new OSMO();
  try {
    BindingSet b=qres.next();
    Set names=b.getBindingNames();
    for (    Object n : names) {
      if (((String)n).equalsIgnoreCase(""String_Node_Str"")) {
        String str=(b.getValue((String)n) == null) ? null : b.getValue((String)n).stringValue();
        osmo.setName(str);
        System.out.print(""String_Node_Str"" + osmo.getName() + ""String_Node_Str"");
      }
 else       if (((String)n).equalsIgnoreCase(""String_Node_Str"")) {
        String str=(b.getValue((String)n) == null) ? null : b.getValue((String)n).stringValue();
        osmo.setDescription(str);
        System.out.print(""String_Node_Str"" + osmo.getDescription() + ""String_Node_Str"");
      }
 else       if (((String)n).equalsIgnoreCase(""String_Node_Str"")) {
        String str=(b.getValue((String)n) == null) ? null : b.getValue((String)n).stringValue();
        QueryRequest qr=new QueryRequest();
        qr.setQuery(str);
        osmo.getQueryRequest().add(qr);
        System.out.print(""String_Node_Str"" + osmo.getQueryRequest().get(0).getQuery() + ""String_Node_Str"");
      }
    }
    return osmo;
  }
 catch (  QueryEvaluationException e) {
    e.printStackTrace();
    return null;
  }
catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",0.994354535190064
15627,"private void registerServiceTestV1(){
  User user=new User();
  user.setUsername(""String_Node_Str"");
  user.setPass(""String_Node_Str"");
  LSMTripleStore lsmStore=new LSMTripleStore();
  lsmStore.setUser(user);
  LSMSchema myOnt=new LSMSchema(OntModelSpec.OWL_DL_MEM);
  LSMSchema myOntInstance=new LSMSchema();
  org.openiot.scheduler.core.utils.lsmpa.entities.User schedulerUser=new org.openiot.scheduler.core.utils.lsmpa.entities.User(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
  schedulerUser.setId(osdSpec.getUserID());
  schedulerUser.createClassIdv();
  for (  OAMO oamo : osdSpec.getOAMO()) {
    logger.debug(""String_Node_Str"",oamo.getDescription(),oamo.getId());
    logger.debug(""String_Node_Str"",oamo.getName());
    Service srvc=null;
    for (    OSMO osmo : oamo.getOSMO()) {
      logger.debug(""String_Node_Str"",osmo.getId());
      logger.debug(""String_Node_Str"",osmo.getName());
      logger.debug(""String_Node_Str"",osmo.getDescription());
      logger.debug(""String_Node_Str"",osmo.getQueryRequest().getQuery());
      srvc=new Service(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
      srvc.setName(osmo.getName());
      srvc.setDescription(osmo.getDescription());
      srvc.setQueryString(osmo.getQueryRequest().getQuery());
      srvc.setUser(schedulerUser);
      srvc.setId(osmo.getId());
      srvc.createClassIdv();
      srvc.createPserviceName();
      srvc.createPserviceDescription();
      srvc.createPqString();
      srvc.createPUser();
      schedulerUser.addService(srvc);
      schedulerUser.createPuserOf();
      WidgetPresentation widgetPre=null;
      for (      Widget widget : osmo.getRequestPresentation().getWidget()) {
        widgetPre=new WidgetPresentation(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
        widgetPre.setService(srvc);
        widgetPre.createClassIdv();
        widgetPre.createPwidgetPresOf();
        srvc.addWidgetPresentation(widgetPre);
        srvc.createPwidgetPres();
        logger.debug(""String_Node_Str"",widget.getWidgetID());
        WidgetAvailable wAvail=new WidgetAvailable(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
        wAvail.setId(widget.getWidgetID());
        wAvail.setWidgetPre(widgetPre);
        wAvail.createClassIdv();
        wAvail.createPWidgetOf();
        widgetPre.setWidgetAvailable(wAvail);
        widgetPre.createPwidget();
        WidgetAttributes wAttr=null;
        for (        PresentationAttr pAttr : widget.getPresentationAttr()) {
          logger.debug(""String_Node_Str"",pAttr.getName(),pAttr.getValue());
          wAttr=new WidgetAttributes(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
          wAttr.setDescription(pAttr.getName());
          wAttr.setName(pAttr.getValue());
          wAttr.setWidgetPre(widgetPre);
          wAttr.createClassIdv();
          wAttr.createPdesc();
          wAttr.createPname();
          wAttr.createPWidgetAttrOf();
          widgetPre.addWidgetAttr(wAttr);
          widgetPre.createPwidgetAttr();
        }
      }
    }
  }
  logger.debug(myOntInstance.exportToTriples(""String_Node_Str""));
  boolean ok=lsmStore.pushRDF(""String_Node_Str"",myOntInstance.exportToTriples(""String_Node_Str""));
  if (ok) {
    replyMessage=""String_Node_Str"";
  }
 else {
    replyMessage=""String_Node_Str"";
  }
}","private void registerServiceTestV1(){
  User user=new User();
  user.setUsername(""String_Node_Str"");
  user.setPass(""String_Node_Str"");
  LSMTripleStore lsmStore=new LSMTripleStore();
  lsmStore.setUser(user);
  LSMSchema myOnt=new LSMSchema(OntModelSpec.OWL_DL_MEM);
  LSMSchema myOntInstance=new LSMSchema();
  org.openiot.scheduler.core.utils.lsmpa.entities.User schedulerUser=new org.openiot.scheduler.core.utils.lsmpa.entities.User(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
  schedulerUser.setId(osdSpec.getUserID());
  schedulerUser.createClassIdv();
  for (  OAMO oamo : osdSpec.getOAMO()) {
    logger.debug(""String_Node_Str"",oamo.getDescription(),oamo.getId());
    logger.debug(""String_Node_Str"",oamo.getName());
    Service srvc=null;
    for (    OSMO osmo : oamo.getOSMO()) {
      logger.debug(""String_Node_Str"",osmo.getId());
      logger.debug(""String_Node_Str"",osmo.getName());
      logger.debug(""String_Node_Str"",osmo.getDescription());
      for (      QueryRequest qr : osmo.getQueryRequest()) {
        logger.debug(""String_Node_Str"",qr.getQuery());
      }
      srvc=new Service(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
      srvc.setName(osmo.getName());
      srvc.setDescription(osmo.getDescription());
      srvc.setUser(schedulerUser);
      srvc.setId(osmo.getId());
      srvc.createClassIdv();
      srvc.createPserviceName();
      srvc.createPserviceDescription();
      srvc.createPqString();
      srvc.createPUser();
      schedulerUser.addService(srvc);
      schedulerUser.createPuserOf();
      WidgetPresentation widgetPre=null;
      for (      Widget widget : osmo.getRequestPresentation().getWidget()) {
        widgetPre=new WidgetPresentation(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
        widgetPre.setService(srvc);
        widgetPre.createClassIdv();
        widgetPre.createPwidgetPresOf();
        srvc.addWidgetPresentation(widgetPre);
        srvc.createPwidgetPres();
        logger.debug(""String_Node_Str"",widget.getWidgetID());
        WidgetAvailable wAvail=new WidgetAvailable(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
        wAvail.setId(widget.getWidgetID());
        wAvail.setWidgetPre(widgetPre);
        wAvail.createClassIdv();
        wAvail.createPWidgetOf();
        widgetPre.setWidgetAvailable(wAvail);
        widgetPre.createPwidget();
        WidgetAttributes wAttr=null;
        for (        PresentationAttr pAttr : widget.getPresentationAttr()) {
          logger.debug(""String_Node_Str"",pAttr.getName(),pAttr.getValue());
          wAttr=new WidgetAttributes(myOnt,myOntInstance,""String_Node_Str"",lsmStore);
          wAttr.setDescription(pAttr.getName());
          wAttr.setName(pAttr.getValue());
          wAttr.setWidgetPre(widgetPre);
          wAttr.createClassIdv();
          wAttr.createPdesc();
          wAttr.createPname();
          wAttr.createPWidgetAttrOf();
          widgetPre.addWidgetAttr(wAttr);
          widgetPre.createPwidgetAttr();
        }
      }
    }
  }
  logger.debug(myOntInstance.exportToTriples(""String_Node_Str""));
  boolean ok=lsmStore.pushRDF(""String_Node_Str"",myOntInstance.exportToTriples(""String_Node_Str""));
  if (ok) {
    replyMessage=""String_Node_Str"";
  }
 else {
    replyMessage=""String_Node_Str"";
  }
}",0.9689459996940492
15628,"private void addMissingXAxii(){
  String xAxisType=(String)getPropertyValueMap().get(""String_Node_Str"");
  if (""String_Node_Str"".equals(xAxisType)) {
    return;
  }
  int maxSeries=Integer.valueOf((String)getPropertyByName(""String_Node_Str"").getAllowedValues()[getPropertyByName(""String_Node_Str"").getAllowedValues().length - 1]);
  for (int i=0; i < maxSeries; i++) {
    GraphNodeEndpoint yep=getEndpointByLabel(""String_Node_Str"" + (i + 1));
    if (yep == null) {
      return;
    }
    int insIndex=Math.max(0,getEndpointDefinitions().indexOf(yep) - 1);
    GraphNodeEndpoint ep=getEndpointByLabel(""String_Node_Str"" + (i + 1));
    if (ep == null) {
      ep=new DefaultGraphNodeEndpoint();
      ep.setType(EndpointType.Input);
      ep.setAnchor(AnchorType.Left);
      ep.setConnectorType(ConnectorType.Rectangle);
      ep.setLabel(""String_Node_Str"" + (i + 1));
      ep.setRequired(true);
      if (""String_Node_Str"".equals(xAxisType)) {
        ep.setScope(""String_Node_Str"");
        ep.setMaxConnections(1);
      }
 else {
        ep.setScope(""String_Node_Str"");
        ep.setMaxConnections(-1);
      }
      getEndpointDefinitions().add(insIndex,ep);
    }
 else {
      if (""String_Node_Str"".equals(xAxisType) && ep.getScope().contains(""String_Node_Str"")) {
        disconnectEndpoint(ep);
        ep.setScope(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(xAxisType) && ep.getScope().contains(""String_Node_Str"")) {
        disconnectEndpoint(ep);
        ep.setScope(""String_Node_Str"");
      }
    }
  }
}","private void addMissingXAxii(){
  String xAxisType=(String)getPropertyValueMap().get(""String_Node_Str"");
  if (""String_Node_Str"".equals(xAxisType)) {
    return;
  }
  int maxSeries=Integer.valueOf((String)getPropertyByName(""String_Node_Str"").getAllowedValues()[getPropertyByName(""String_Node_Str"").getAllowedValues().length - 1]);
  for (int i=0; i < maxSeries; i++) {
    GraphNodeEndpoint yep=getEndpointByLabel(""String_Node_Str"" + (i + 1));
    if (yep == null) {
      return;
    }
    int insIndex=Math.max(0,getEndpointDefinitions().indexOf(yep));
    GraphNodeEndpoint ep=getEndpointByLabel(""String_Node_Str"" + (i + 1));
    if (ep == null) {
      ep=new DefaultGraphNodeEndpoint();
      ep.setType(EndpointType.Input);
      ep.setAnchor(AnchorType.Left);
      ep.setConnectorType(ConnectorType.Rectangle);
      ep.setLabel(""String_Node_Str"" + (i + 1));
      ep.setRequired(true);
      if (""String_Node_Str"".equals(xAxisType)) {
        ep.setScope(""String_Node_Str"");
        ep.setMaxConnections(1);
      }
 else {
        ep.setScope(""String_Node_Str"");
        ep.setMaxConnections(-1);
      }
      getEndpointDefinitions().add(insIndex,ep);
    }
 else {
      if (""String_Node_Str"".equals(xAxisType) && ep.getScope().contains(""String_Node_Str"")) {
        disconnectEndpoint(ep);
        ep.setScope(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(xAxisType) && ep.getScope().contains(""String_Node_Str"")) {
        disconnectEndpoint(ep);
        ep.setScope(""String_Node_Str"");
      }
    }
  }
}",0.998706338939198
15629,"private HttpResponse getResponse(GenericUrl uri) throws GeoIp2Exception, IOException {
  HttpRequestFactory requestFactory=this.transport.createRequestFactory();
  HttpRequest request;
  try {
    request=requestFactory.buildGetRequest(uri);
  }
 catch (  IOException e) {
    throw new GeoIp2Exception(""String_Node_Str"",e);
  }
  request.setConnectTimeout(this.timeout);
  HttpHeaders headers=request.getHeaders();
  headers.setAccept(""String_Node_Str"");
  headers.setBasicAuthentication(String.valueOf(this.userId),this.licenseKey);
  headers.setUserAgent(""String_Node_Str"" + this.getClass().getPackage().getImplementationVersion() + ""String_Node_Str"");
  try {
    return request.execute();
  }
 catch (  HttpResponseException e) {
    int status=e.getStatusCode();
    if ((status >= 400) && (status < 500)) {
      WebServiceClient.handle4xxStatus(e.getContent(),status,uri);
    }
 else     if ((status >= 500) && (status < 600)) {
      throw new HttpException(""String_Node_Str"" + status + ""String_Node_Str""+ uri,status,uri.toURL());
    }
    throw new HttpException(""String_Node_Str"" + status + ""String_Node_Str""+ uri,status,uri.toURL());
  }
}","private HttpResponse getResponse(GenericUrl uri) throws GeoIp2Exception, IOException {
  HttpTransport transport=this.testTransport == null ? new NetHttpTransport() : this.testTransport;
  HttpRequestFactory requestFactory=transport.createRequestFactory();
  HttpRequest request;
  try {
    request=requestFactory.buildGetRequest(uri);
  }
 catch (  IOException e) {
    throw new GeoIp2Exception(""String_Node_Str"",e);
  }
  request.setConnectTimeout(this.timeout);
  HttpHeaders headers=request.getHeaders();
  headers.setAccept(""String_Node_Str"");
  headers.setBasicAuthentication(String.valueOf(this.userId),this.licenseKey);
  headers.setUserAgent(""String_Node_Str"" + this.getClass().getPackage().getImplementationVersion() + ""String_Node_Str"");
  try {
    return request.execute();
  }
 catch (  HttpResponseException e) {
    int status=e.getStatusCode();
    if ((status >= 400) && (status < 500)) {
      WebServiceClient.handle4xxStatus(e.getContent(),status,uri);
    }
 else     if ((status >= 500) && (status < 600)) {
      throw new HttpException(""String_Node_Str"" + status + ""String_Node_Str""+ uri,status,uri.toURL());
    }
    throw new HttpException(""String_Node_Str"" + status + ""String_Node_Str""+ uri,status,uri.toURL());
  }
}",0.956268221574344
15630,"WebServiceClient(Builder builder){
  this.host=builder.host;
  this.locales=builder.locales;
  this.licenseKey=builder.licenseKey;
  this.timeout=builder.timeout;
  this.transport=builder.transport;
  this.userId=builder.userId;
}","WebServiceClient(Builder builder){
  this.host=builder.host;
  this.locales=builder.locales;
  this.licenseKey=builder.licenseKey;
  this.timeout=builder.timeout;
  this.testTransport=builder.testTransport;
  this.userId=builder.userId;
}",0.9829059829059827
15631,"@Before public void setUp() throws IOException, GeoIp2Exception {
  HttpTransport transport=new TestTransport();
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").transport(transport).build();
  this.country=client.country(InetAddress.getByName(""String_Node_Str""));
}","@Before public void setUp() throws IOException, GeoIp2Exception {
  HttpTransport transport=new TestTransport();
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").testTransport(transport).build();
  this.country=client.country(InetAddress.getByName(""String_Node_Str""));
}",0.9932432432432432
15632,"@Test public void omni() throws IOException, GeoIp2Exception {
  HttpTransport transport=new TestTransport();
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").host(""String_Node_Str"").transport(transport).build();
  OmniResponse omni=client.omni(InetAddress.getByName(""String_Node_Str""));
  assertEquals(omni.getTraits().getIpAddress(),""String_Node_Str"");
}","@Test public void omni() throws IOException, GeoIp2Exception {
  HttpTransport transport=new TestTransport();
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").host(""String_Node_Str"").testTransport(transport).build();
  OmniResponse omni=client.omni(InetAddress.getByName(""String_Node_Str""));
  assertEquals(omni.getTraits().getIpAddress(),""String_Node_Str"");
}",0.9948186528497408
15633,"@Before public void createClient(){
  HttpTransport transport=new TestTransport();
  this.client=new WebServiceClient.Builder(42,""String_Node_Str"").transport(transport).build();
}","@Before public void createClient(){
  HttpTransport transport=new TestTransport();
  this.client=new WebServiceClient.Builder(42,""String_Node_Str"").testTransport(transport).build();
}",0.988950276243094
15634,"@Test public void testMissing() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").transport(this.transport).locales(Arrays.asList(""String_Node_Str"")).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertNotNull(cio.getCity());
  assertNull(""String_Node_Str"",cio.getCity().getName());
}","@Test public void testMissing() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").testTransport(this.transport).locales(Arrays.asList(""String_Node_Str"")).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertNotNull(cio.getCity());
  assertNull(""String_Node_Str"",cio.getCity().getName());
}",0.9950248756218906
15635,"@Test public void noLocale() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").transport(this.transport).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cio.getContinent().getName(),""String_Node_Str"");
}","@Test public void noLocale() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").testTransport(this.transport).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cio.getContinent().getName(),""String_Node_Str"");
}",0.9942857142857144
15636,"@Test public void testNames() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").transport(this.transport).locales(Arrays.asList(""String_Node_Str"",""String_Node_Str"")).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",cio.getContinent().getName());
  assertEquals(""String_Node_Str"",""String_Node_Str"",cio.getCountry().getName());
  assertEquals(""String_Node_Str"",cio.getCountry().getName(),cio.getCountry().getName());
}","@Test public void testNames() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").testTransport(this.transport).locales(Arrays.asList(""String_Node_Str"",""String_Node_Str"")).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",cio.getContinent().getName());
  assertEquals(""String_Node_Str"",""String_Node_Str"",cio.getCountry().getName());
  assertEquals(""String_Node_Str"",cio.getCountry().getName(),cio.getCountry().getName());
}",0.996551724137931
15637,"@Test public void testFallback() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").transport(this.transport).locales(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cio.getContinent().getName(),""String_Node_Str"");
}","@Test public void testFallback() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").testTransport(this.transport).locales(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertEquals(""String_Node_Str"",cio.getContinent().getName(),""String_Node_Str"");
}",0.9953703703703703
15638,"@Test public void noFallback() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").transport(this.transport).locales(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertNull(""String_Node_Str"",cio.getContinent().getName());
}","@Test public void noFallback() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").testTransport(this.transport).locales(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertNull(""String_Node_Str"",cio.getContinent().getName());
}",0.9951219512195122
15639,"@Test public void russianFallback() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").transport(this.transport).locales(Arrays.asList(""String_Node_Str"",""String_Node_Str"")).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",cio.getCountry().getName());
}","@Test public void russianFallback() throws IOException, GeoIp2Exception {
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").testTransport(this.transport).locales(Arrays.asList(""String_Node_Str"",""String_Node_Str"")).build();
  CityIspOrgResponse cio=client.cityIspOrg(InetAddress.getByName(""String_Node_Str""));
  assertEquals(""String_Node_Str"",""String_Node_Str"",cio.getCountry().getName());
}",0.9951807228915662
15640,"@Before public void createClient() throws IOException, GeoIp2Exception {
  HttpTransport transport=new TestTransport();
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").transport(transport).build();
  this.omni=client.omni(InetAddress.getByName(""String_Node_Str""));
}","@Before public void createClient() throws IOException, GeoIp2Exception {
  HttpTransport transport=new TestTransport();
  WebServiceClient client=new WebServiceClient.Builder(42,""String_Node_Str"").testTransport(transport).build();
  this.omni=client.omni(InetAddress.getByName(""String_Node_Str""));
}",0.9932659932659932
15641,"HTTPException(String message,Throwable cause,int http_status,String uri){
  super(message,cause);
  http_status=this.http_status;
  uri=this.uri;
}","HTTPException(String message,Throwable cause,int http_status,String uri){
  super(message,cause);
  this.http_status=http_status;
  this.uri=uri;
}",0.891156462585034
15642,"WebServiceException(String message,String code,int http_status,String uri){
  super(message,http_status,uri);
  code=this.code;
}","WebServiceException(String message,String code,int http_status,String uri){
  super(message,http_status,uri);
  this.code=code;
}",0.9612403100775194
15643,"/** 
 * Compares a portion of this slice with a portion of the specified slice.  Equality is solely based on the contents of the slice.
 */
@SuppressWarnings(""String_Node_Str"") public int compareTo(int offset,int length,Slice that,int otherOffset,int otherLength){
  if ((this == that) && (offset == otherOffset) && (length == otherLength)) {
    return 0;
  }
  checkIndexLength(offset,length);
  that.checkIndexLength(otherOffset,otherLength);
  int compareLength=Math.min(length,otherLength);
  while (compareLength >= SIZE_OF_LONG) {
    long thisLong=unsafe.getLong(base,address + offset);
    thisLong=Long.reverseBytes(thisLong);
    long thatLong=unsafe.getLong(that.base,that.address + otherOffset);
    thatLong=Long.reverseBytes(thatLong);
    int v=UnsignedLongs.compare(thisLong,thatLong);
    if (v != 0) {
      return v;
    }
    offset+=SIZE_OF_LONG;
    otherOffset+=SIZE_OF_LONG;
    compareLength-=SIZE_OF_LONG;
  }
  while (compareLength > 0) {
    byte thisByte=unsafe.getByte(base,address + offset);
    byte thatByte=unsafe.getByte(that.base,that.address + otherOffset);
    int v=UnsignedBytes.compare(thisByte,thatByte);
    if (v != 0) {
      return v;
    }
    offset++;
    otherOffset++;
    compareLength--;
  }
  return Integer.compare(size,that.size);
}","/** 
 * Compares a portion of this slice with a portion of the specified slice.  Equality is solely based on the contents of the slice.
 */
@SuppressWarnings(""String_Node_Str"") public int compareTo(int offset,int length,Slice that,int otherOffset,int otherLength){
  if ((this == that) && (offset == otherOffset) && (length == otherLength)) {
    return 0;
  }
  checkIndexLength(offset,length);
  that.checkIndexLength(otherOffset,otherLength);
  int compareLength=Math.min(length,otherLength);
  while (compareLength >= SIZE_OF_LONG) {
    long thisLong=unsafe.getLong(base,address + offset);
    thisLong=Long.reverseBytes(thisLong);
    long thatLong=unsafe.getLong(that.base,that.address + otherOffset);
    thatLong=Long.reverseBytes(thatLong);
    int v=UnsignedLongs.compare(thisLong,thatLong);
    if (v != 0) {
      return v;
    }
    offset+=SIZE_OF_LONG;
    otherOffset+=SIZE_OF_LONG;
    compareLength-=SIZE_OF_LONG;
  }
  while (compareLength > 0) {
    byte thisByte=unsafe.getByte(base,address + offset);
    byte thatByte=unsafe.getByte(that.base,that.address + otherOffset);
    int v=UnsignedBytes.compare(thisByte,thatByte);
    if (v != 0) {
      return v;
    }
    offset++;
    otherOffset++;
    compareLength--;
  }
  return Integer.compare(length,otherLength);
}",0.9876065065840434
15644,"@Override protected QueryParam getQueryParam(UserArticleCriteria criteria,FilterCriteria filterCriteria){
  List<String> criteriaList=new ArrayList<String>();
  Map<String,Object> parameterMap=new HashMap<String,Object>();
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  if (criteria.isVisible()) {
    if (criteria.isUnread() || criteria.isStarred()) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
    criteriaList.add(""String_Node_Str"");
  }
 else   if (criteria.getUserId() != null) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  if (criteria.isFetchAllFeedSubscription()) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  criteriaList.add(""String_Node_Str"");
  if (criteria.getUserId() != null) {
    parameterMap.put(""String_Node_Str"",criteria.getUserId());
  }
  if (criteria.getFeedId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getFeedId());
  }
  if (criteria.getArticleId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getArticleId());
  }
  if (criteria.getArticleIdIn() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getArticleIdIn());
  }
  if (criteria.getUserArticleId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getUserArticleId());
  }
  if (criteria.isSubscribed()) {
    criteriaList.add(""String_Node_Str"");
  }
  if (criteria.getCategoryId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getCategoryId());
  }
  if (criteria.isUnread()) {
    criteriaList.add(""String_Node_Str"");
  }
  if (criteria.isStarred()) {
    criteriaList.add(""String_Node_Str"");
  }
  if (criteria.getArticlePublicationDateMax() != null && criteria.getArticleIdMax() != null) {
    criteriaList.add(""String_Node_Str"" + DialectUtil.getTimeStamp(""String_Node_Str"") + ""String_Node_Str""+ DialectUtil.getTimeStamp(""String_Node_Str"")+ ""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getArticlePublicationDateMax());
    parameterMap.put(""String_Node_Str"",criteria.getArticleIdMax());
  }
  if (criteria.getUserArticleStarredDateMax() != null && criteria.getUserArticleIdMax() != null) {
    criteriaList.add(""String_Node_Str"" + DialectUtil.getTimeStamp(""String_Node_Str"") + ""String_Node_Str""+ DialectUtil.getTimeStamp(""String_Node_Str"")+ ""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getUserArticleStarredDateMax());
    parameterMap.put(""String_Node_Str"",criteria.getUserArticleIdMax());
  }
  SortCriteria sortCriteria;
  if (criteria.isStarred()) {
    sortCriteria=new SortCriteria(""String_Node_Str"");
  }
 else {
    sortCriteria=new SortCriteria(""String_Node_Str"");
  }
  return new QueryParam(sb.toString(),criteriaList,parameterMap,sortCriteria,filterCriteria,new UserArticleMapper());
}","@Override protected QueryParam getQueryParam(UserArticleCriteria criteria,FilterCriteria filterCriteria){
  List<String> criteriaList=new ArrayList<String>();
  Map<String,Object> parameterMap=new HashMap<String,Object>();
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  if (criteria.isVisible()) {
    if (criteria.isUnread() || criteria.isStarred()) {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
    criteriaList.add(""String_Node_Str"");
  }
 else   if (criteria.getUserId() != null) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  if (criteria.isFetchAllFeedSubscription()) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  criteriaList.add(""String_Node_Str"");
  if (criteria.getUserId() != null) {
    parameterMap.put(""String_Node_Str"",criteria.getUserId());
  }
  if (criteria.getFeedId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getFeedId());
  }
  if (criteria.getArticleId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getArticleId());
  }
  if (criteria.getArticleIdIn() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getArticleIdIn());
  }
  if (criteria.getUserArticleId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getUserArticleId());
  }
  if (criteria.isSubscribed()) {
    criteriaList.add(""String_Node_Str"");
  }
  if (criteria.getCategoryId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getCategoryId());
  }
  if (criteria.isUnread()) {
    criteriaList.add(""String_Node_Str"");
  }
  if (criteria.isStarred()) {
    criteriaList.add(""String_Node_Str"");
  }
  if (criteria.getArticlePublicationDateMax() != null && criteria.getArticleIdMax() != null) {
    criteriaList.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getArticlePublicationDateMax());
    parameterMap.put(""String_Node_Str"",criteria.getArticleIdMax());
  }
  if (criteria.getUserArticleStarredDateMax() != null && criteria.getUserArticleIdMax() != null) {
    criteriaList.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getUserArticleStarredDateMax());
    parameterMap.put(""String_Node_Str"",criteria.getUserArticleIdMax());
  }
  SortCriteria sortCriteria;
  if (criteria.isStarred()) {
    sortCriteria=new SortCriteria(""String_Node_Str"");
  }
 else {
    sortCriteria=new SortCriteria(""String_Node_Str"");
  }
  return new QueryParam(sb.toString(),criteriaList,parameterMap,sortCriteria,filterCriteria,new UserArticleMapper());
}",0.9596670934699104
15645,"/** 
 * Synchronize the feed to local database.
 * @param url RSS url of a feed or page containing a feed to synchronize
 * @throws Exception
 */
public Feed synchronize(String url) throws Exception {
  if (log.isInfoEnabled()) {
    log.info(MessageFormat.format(""String_Node_Str"",url));
  }
  long startTime=System.currentTimeMillis();
  RssReader rssReader=parseFeedOrPage(url,true);
  Feed newFeed=rssReader.getFeed();
  List<Article> articleList=rssReader.getArticleList();
  FeedDao feedDao=new FeedDao();
  String rssUrl=newFeed.getRssUrl();
  Feed feed=feedDao.getByRssUrl(rssUrl);
  if (feed == null) {
    feed=new Feed();
    feed.setUrl(newFeed.getUrl());
    feed.setBaseUri(newFeed.getBaseUri());
    feed.setRssUrl(rssUrl);
    feed.setTitle(StringUtils.abbreviate(newFeed.getTitle(),100));
    feed.setLanguage(newFeed.getLanguage() != null && newFeed.getLanguage().length() <= 10 ? newFeed.getLanguage() : null);
    feed.setDescription(StringUtils.abbreviate(newFeed.getDescription(),4000));
    feed.setLastFetchDate(new Date());
    feedDao.create(feed);
    EntityManagerUtil.flush();
    FaviconUpdateRequestedEvent faviconUpdateRequestedEvent=new FaviconUpdateRequestedEvent();
    faviconUpdateRequestedEvent.setFeed(feed);
    AppContext.getInstance().getAsyncEventBus().post(faviconUpdateRequestedEvent);
  }
 else {
    boolean newDay=feed.getLastFetchDate() == null || DateTime.now().getDayOfYear() != new DateTime(feed.getLastFetchDate()).getDayOfYear();
    int daysFromCreation=Days.daysBetween(Instant.now(),new Instant(feed.getCreateDate().getTime())).getDays();
    boolean updateFavicon=newDay && daysFromCreation % 7 == 0;
    feed.setUrl(newFeed.getUrl());
    feed.setBaseUri(newFeed.getBaseUri());
    feed.setTitle(StringUtils.abbreviate(newFeed.getTitle(),100));
    feed.setLanguage(newFeed.getLanguage() != null && newFeed.getLanguage().length() <= 10 ? newFeed.getLanguage() : null);
    feed.setDescription(StringUtils.abbreviate(newFeed.getDescription(),4000));
    feed.setLastFetchDate(new Date());
    feedDao.update(feed);
    if (updateFavicon) {
      FaviconUpdateRequestedEvent faviconUpdateRequestedEvent=new FaviconUpdateRequestedEvent();
      faviconUpdateRequestedEvent.setFeed(feed);
      AppContext.getInstance().getAsyncEventBus().post(faviconUpdateRequestedEvent);
    }
  }
  Map<String,Article> articleMap=new HashMap<String,Article>();
  for (  Article article : articleList) {
    articleMap.put(article.getGuid(),article);
  }
  List<String> guidIn=new ArrayList<String>();
  for (  Article article : articleList) {
    guidIn.add(article.getGuid());
  }
  ArticleSanitizer sanitizer=new ArticleSanitizer();
  ArticleDao articleDao=new ArticleDao();
  if (!guidIn.isEmpty()) {
    ArticleCriteria articleCriteria=new ArticleCriteria();
    articleCriteria.setFeedId(feed.getId());
    articleCriteria.setGuidIn(guidIn);
    List<ArticleDto> currentArticleDtoList=articleDao.findByCriteria(articleCriteria);
    List<Article> articleUpdatedList=new ArrayList<Article>();
    for (    ArticleDto currentArticle : currentArticleDtoList) {
      Article newArticle=articleMap.remove(currentArticle.getGuid());
      Article article=new Article();
      article.setPublicationDate(currentArticle.getPublicationDate());
      article.setId(currentArticle.getId());
      article.setFeedId(feed.getId());
      article.setUrl(newArticle.getUrl());
      article.setTitle(StringUtils.abbreviate(TextSanitizer.sanitize(newArticle.getTitle()),4000));
      article.setCreator(StringUtils.abbreviate(newArticle.getCreator(),200));
      String baseUri=UrlUtil.getBaseUri(feed,newArticle);
      article.setDescription(sanitizer.sanitize(baseUri,newArticle.getDescription()));
      article.setCommentUrl(newArticle.getCommentUrl());
      article.setCommentCount(newArticle.getCommentCount());
      article.setEnclosureUrl(newArticle.getEnclosureUrl());
      article.setEnclosureLength(newArticle.getEnclosureLength());
      article.setEnclosureType(newArticle.getEnclosureType());
      if (!currentArticle.getTitle().equals(article.getTitle()) || !currentArticle.getDescription().equals(article.getDescription())) {
        articleDao.update(article);
        articleUpdatedList.add(article);
      }
    }
    if (!articleUpdatedList.isEmpty()) {
      ArticleUpdatedAsyncEvent articleUpdatedAsyncEvent=new ArticleUpdatedAsyncEvent();
      articleUpdatedAsyncEvent.setArticleList(articleUpdatedList);
      AppContext.getInstance().getAsyncEventBus().post(articleUpdatedAsyncEvent);
    }
  }
  if (!articleMap.isEmpty()) {
    FeedSubscriptionCriteria feedSubscriptionCriteria=new FeedSubscriptionCriteria();
    feedSubscriptionCriteria.setFeedId(feed.getId());
    FeedSubscriptionDao feedSubscriptionDao=new FeedSubscriptionDao();
    List<FeedSubscriptionDto> feedSubscriptionList=feedSubscriptionDao.findByCriteria(feedSubscriptionCriteria);
    UserArticleDao userArticleDao=new UserArticleDao();
    for (    Article article : articleMap.values()) {
      article.setFeedId(feed.getId());
      article.setTitle(StringUtils.abbreviate(TextSanitizer.sanitize(article.getTitle()),4000));
      article.setCreator(StringUtils.abbreviate(article.getCreator(),200));
      String baseUri=UrlUtil.getBaseUri(feed,article);
      article.setDescription(sanitizer.sanitize(baseUri,article.getDescription()));
      if (article.getPublicationDate() == null) {
        article.setPublicationDate(new Date());
      }
      articleDao.create(article);
      for (      FeedSubscriptionDto feedSubscription : feedSubscriptionList) {
        UserArticle userArticle=new UserArticle();
        userArticle.setArticleId(article.getId());
        userArticle.setUserId(feedSubscription.getUserId());
        userArticleDao.create(userArticle);
        feedSubscription.setUnreadUserArticleCount(feedSubscription.getUnreadUserArticleCount() + 1);
        feedSubscriptionDao.updateUnreadCount(feedSubscription.getId(),feedSubscription.getUnreadUserArticleCount());
      }
    }
    ArticleCreatedAsyncEvent articleCreatedAsyncEvent=new ArticleCreatedAsyncEvent();
    articleCreatedAsyncEvent.setArticleList(Lists.newArrayList(articleMap.values()));
    AppContext.getInstance().getAsyncEventBus().post(articleCreatedAsyncEvent);
  }
  long endTime=System.currentTimeMillis();
  if (log.isInfoEnabled()) {
    log.info(MessageFormat.format(""String_Node_Str"",endTime - startTime));
  }
  return feed;
}","/** 
 * Synchronize the feed to local database.
 * @param url RSS url of a feed or page containing a feed to synchronize
 * @throws Exception
 */
public Feed synchronize(String url) throws Exception {
  if (log.isInfoEnabled()) {
    log.info(MessageFormat.format(""String_Node_Str"",url));
  }
  long startTime=System.currentTimeMillis();
  RssReader rssReader=parseFeedOrPage(url,true);
  Feed newFeed=rssReader.getFeed();
  List<Article> articleList=rssReader.getArticleList();
  FeedDao feedDao=new FeedDao();
  String rssUrl=newFeed.getRssUrl();
  Feed feed=feedDao.getByRssUrl(rssUrl);
  if (feed == null) {
    feed=new Feed();
    feed.setUrl(newFeed.getUrl());
    feed.setBaseUri(newFeed.getBaseUri());
    feed.setRssUrl(rssUrl);
    feed.setTitle(StringUtils.abbreviate(newFeed.getTitle(),100));
    feed.setLanguage(newFeed.getLanguage() != null && newFeed.getLanguage().length() <= 10 ? newFeed.getLanguage() : null);
    feed.setDescription(StringUtils.abbreviate(newFeed.getDescription(),4000));
    feed.setLastFetchDate(new Date());
    feedDao.create(feed);
    EntityManagerUtil.flush();
    FaviconUpdateRequestedEvent faviconUpdateRequestedEvent=new FaviconUpdateRequestedEvent();
    faviconUpdateRequestedEvent.setFeed(feed);
    AppContext.getInstance().getAsyncEventBus().post(faviconUpdateRequestedEvent);
  }
 else {
    boolean newDay=feed.getLastFetchDate() == null || DateTime.now().getDayOfYear() != new DateTime(feed.getLastFetchDate()).getDayOfYear();
    int daysFromCreation=Days.daysBetween(Instant.now(),new Instant(feed.getCreateDate().getTime())).getDays();
    boolean updateFavicon=newDay && daysFromCreation % 7 == 0;
    feed.setUrl(newFeed.getUrl());
    feed.setBaseUri(newFeed.getBaseUri());
    feed.setTitle(StringUtils.abbreviate(newFeed.getTitle(),100));
    feed.setLanguage(newFeed.getLanguage() != null && newFeed.getLanguage().length() <= 10 ? newFeed.getLanguage() : null);
    feed.setDescription(StringUtils.abbreviate(newFeed.getDescription(),4000));
    feed.setLastFetchDate(new Date());
    feedDao.update(feed);
    if (updateFavicon) {
      FaviconUpdateRequestedEvent faviconUpdateRequestedEvent=new FaviconUpdateRequestedEvent();
      faviconUpdateRequestedEvent.setFeed(feed);
      AppContext.getInstance().getAsyncEventBus().post(faviconUpdateRequestedEvent);
    }
  }
  Map<String,Article> articleMap=new HashMap<String,Article>();
  for (  Article article : articleList) {
    articleMap.put(article.getGuid(),article);
  }
  List<String> guidIn=new ArrayList<String>();
  for (  Article article : articleList) {
    guidIn.add(article.getGuid());
  }
  ArticleSanitizer sanitizer=new ArticleSanitizer();
  ArticleDao articleDao=new ArticleDao();
  if (!guidIn.isEmpty()) {
    ArticleCriteria articleCriteria=new ArticleCriteria();
    articleCriteria.setFeedId(feed.getId());
    articleCriteria.setGuidIn(guidIn);
    List<ArticleDto> currentArticleDtoList=articleDao.findByCriteria(articleCriteria);
    List<Article> articleUpdatedList=new ArrayList<Article>();
    for (    ArticleDto currentArticle : currentArticleDtoList) {
      Article newArticle=articleMap.remove(currentArticle.getGuid());
      Article article=new Article();
      article.setPublicationDate(currentArticle.getPublicationDate());
      article.setId(currentArticle.getId());
      article.setFeedId(feed.getId());
      article.setUrl(newArticle.getUrl());
      article.setTitle(StringUtils.abbreviate(TextSanitizer.sanitize(newArticle.getTitle()),4000));
      article.setCreator(StringUtils.abbreviate(newArticle.getCreator(),200));
      String baseUri=UrlUtil.getBaseUri(feed,newArticle);
      article.setDescription(sanitizer.sanitize(baseUri,newArticle.getDescription()));
      article.setCommentUrl(newArticle.getCommentUrl());
      article.setCommentCount(newArticle.getCommentCount());
      article.setEnclosureUrl(newArticle.getEnclosureUrl());
      article.setEnclosureLength(newArticle.getEnclosureLength());
      article.setEnclosureType(newArticle.getEnclosureType());
      if (!Strings.nullToEmpty(currentArticle.getTitle()).equals(Strings.nullToEmpty(article.getTitle())) || !Strings.nullToEmpty(currentArticle.getDescription()).equals(Strings.nullToEmpty(article.getDescription()))) {
        articleDao.update(article);
        articleUpdatedList.add(article);
      }
    }
    if (!articleUpdatedList.isEmpty()) {
      ArticleUpdatedAsyncEvent articleUpdatedAsyncEvent=new ArticleUpdatedAsyncEvent();
      articleUpdatedAsyncEvent.setArticleList(articleUpdatedList);
      AppContext.getInstance().getAsyncEventBus().post(articleUpdatedAsyncEvent);
    }
  }
  if (!articleMap.isEmpty()) {
    FeedSubscriptionCriteria feedSubscriptionCriteria=new FeedSubscriptionCriteria();
    feedSubscriptionCriteria.setFeedId(feed.getId());
    FeedSubscriptionDao feedSubscriptionDao=new FeedSubscriptionDao();
    List<FeedSubscriptionDto> feedSubscriptionList=feedSubscriptionDao.findByCriteria(feedSubscriptionCriteria);
    UserArticleDao userArticleDao=new UserArticleDao();
    for (    Article article : articleMap.values()) {
      article.setFeedId(feed.getId());
      article.setTitle(StringUtils.abbreviate(TextSanitizer.sanitize(article.getTitle()),4000));
      article.setCreator(StringUtils.abbreviate(article.getCreator(),200));
      String baseUri=UrlUtil.getBaseUri(feed,article);
      article.setDescription(sanitizer.sanitize(baseUri,article.getDescription()));
      if (article.getPublicationDate() == null) {
        article.setPublicationDate(new Date());
      }
      articleDao.create(article);
      for (      FeedSubscriptionDto feedSubscription : feedSubscriptionList) {
        UserArticle userArticle=new UserArticle();
        userArticle.setArticleId(article.getId());
        userArticle.setUserId(feedSubscription.getUserId());
        userArticleDao.create(userArticle);
        feedSubscription.setUnreadUserArticleCount(feedSubscription.getUnreadUserArticleCount() + 1);
        feedSubscriptionDao.updateUnreadCount(feedSubscription.getId(),feedSubscription.getUnreadUserArticleCount());
      }
    }
    ArticleCreatedAsyncEvent articleCreatedAsyncEvent=new ArticleCreatedAsyncEvent();
    articleCreatedAsyncEvent.setArticleList(Lists.newArrayList(articleMap.values()));
    AppContext.getInstance().getAsyncEventBus().post(articleCreatedAsyncEvent);
  }
  long endTime=System.currentTimeMillis();
  if (log.isInfoEnabled()) {
    log.info(MessageFormat.format(""String_Node_Str"",endTime - startTime));
  }
  return feed;
}",0.9875384615384616
15646,"/** 
 * @param in Input stream
 * @param defaultEnc Default encoding
 * @throws IOException If an I/O error occurs
 */
public XmlReader(InputStream in,String defaultEnc) throws IOException {
  String encoding=defaultEnc;
  byte header[]=new byte[HEADER_SIZE];
  int n, unread;
  PushbackInputStream pushbackStream=new PushbackInputStream(in,HEADER_SIZE);
  n=pushbackStream.read(header,0,header.length);
  if ((header[0] == (byte)0xEF) && (header[1] == (byte)0xBB) && (header[2] == (byte)0xBF)) {
    encoding=""String_Node_Str"";
    unread=n - 3;
  }
 else   if ((header[0] == (byte)0xFE) && (header[1] == (byte)0xFF)) {
    encoding=""String_Node_Str"";
    unread=n - 2;
  }
 else   if ((header[0] == (byte)0xFF) && (header[1] == (byte)0xFE)) {
    encoding=""String_Node_Str"";
    unread=n - 2;
  }
 else   if ((header[0] == (byte)0x00) && (header[1] == (byte)0x00) && (header[2] == (byte)0xFE)&& (header[3] == (byte)0xFF)) {
    encoding=""String_Node_Str"";
    unread=n - 4;
  }
 else   if ((header[0] == (byte)0xFF) && (header[1] == (byte)0xFE) && (header[2] == (byte)0x00)&& (header[3] == (byte)0x00)) {
    encoding=""String_Node_Str"";
    unread=n - 4;
  }
 else {
    unread=n;
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(new String(header));
    if (matcher.find()) {
      String enc=matcher.group(1);
      try {
        Charset.forName(enc);
        encoding=enc;
      }
 catch (      Exception e) {
      }
    }
  }
  if (unread > 0) {
    pushbackStream.unread(header,(n - unread),unread);
  }
 else   if (unread < -1) {
    pushbackStream.unread(header,0,0);
  }
  internalInputStreamReader=new InputStreamReader(pushbackStream,encoding);
}","/** 
 * @param in Input stream
 * @param defaultEnc Default encoding
 * @throws IOException If an I/O error occurs
 */
public XmlReader(InputStream in,String defaultEnc) throws IOException {
  String encoding=defaultEnc;
  byte header[]=new byte[HEADER_SIZE];
  int n, unread;
  PushbackInputStream pushbackStream=new PushbackInputStream(in,HEADER_SIZE);
  n=ByteStreams.read(in,header,0,header.length);
  if ((header[0] == (byte)0xEF) && (header[1] == (byte)0xBB) && (header[2] == (byte)0xBF)) {
    encoding=""String_Node_Str"";
    unread=n - 3;
  }
 else   if ((header[0] == (byte)0xFE) && (header[1] == (byte)0xFF)) {
    encoding=""String_Node_Str"";
    unread=n - 2;
  }
 else   if ((header[0] == (byte)0xFF) && (header[1] == (byte)0xFE)) {
    encoding=""String_Node_Str"";
    unread=n - 2;
  }
 else   if ((header[0] == (byte)0x00) && (header[1] == (byte)0x00) && (header[2] == (byte)0xFE)&& (header[3] == (byte)0xFF)) {
    encoding=""String_Node_Str"";
    unread=n - 4;
  }
 else   if ((header[0] == (byte)0xFF) && (header[1] == (byte)0xFE) && (header[2] == (byte)0x00)&& (header[3] == (byte)0x00)) {
    encoding=""String_Node_Str"";
    unread=n - 4;
  }
 else {
    unread=n;
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(new String(header));
    if (matcher.find()) {
      String enc=matcher.group(1);
      try {
        Charset.forName(enc);
        encoding=enc;
      }
 catch (      Exception e) {
      }
    }
  }
  if (unread > 0) {
    pushbackStream.unread(header,(n - unread),unread);
  }
 else   if (unread < -1) {
    pushbackStream.unread(header,0,0);
  }
  internalInputStreamReader=new InputStreamReader(pushbackStream,encoding);
}",0.992361927144536
15647,"@Override protected void onCreate(Bundle args){
  super.onCreate(args);
  readArticleIdSet=new HashSet<String>();
  sharedAdapterHelper=SharedArticlesAdapterHelper.getInstance();
  if (sharedAdapterHelper.getArticleItems().size() == 0) {
    finish();
    return;
  }
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  requestWindowFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.article_activity);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setHomeButtonEnabled(true);
  OnPageChangeListener onPageChangeListener=new OnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      if (position + 1 >= sharedAdapterHelper.getArticleItems().size()) {
        sharedAdapterHelper.load(ArticleActivity.this);
      }
      final JSONObject article=sharedAdapterHelper.getArticleItems().get(position);
      String articleId=article.optString(""String_Node_Str"");
      if (!readArticleIdSet.contains(articleId) && !article.optBoolean(""String_Node_Str"")) {
        readArticleIdSet.add(article.optString(""String_Node_Str""));
      }
      drawerList.setItemChecked(position,true);
      drawerList.smoothScrollToPositionFromTop(position,100);
      drawerList.invalidate();
      updateActionBar();
    }
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
      drawerList.invalidate();
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
;
  setTitle(getIntent().getStringExtra(""String_Node_Str""));
  viewPager=(ViewPager)findViewById(R.id.viewPager);
  final ArticlesPagerAdapter adapter=new ArticlesPagerAdapter(getSupportFragmentManager());
  sharedAdapterHelper.addAdapter(adapter,articlesHelperListener);
  viewPager.setAdapter(adapter);
  int position=getIntent().getIntExtra(""String_Node_Str"",0);
  UnderlinePageIndicator indicator=(UnderlinePageIndicator)findViewById(R.id.indicator);
  indicator.setViewPager(viewPager,position);
  indicator.setOnPageChangeListener(onPageChangeListener);
  drawerList=(ListView)findViewById(R.id.drawer_list);
  ArticlesAdapter listAdapter=new ArticlesAdapter(this);
  sharedAdapterHelper.addAdapter(listAdapter,null);
  AQuery aq=new AQuery(this);
  aq.id(R.id.drawer_list).adapter(listAdapter).scrolled(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (firstVisibleItem + visibleItemCount >= totalItemCount - 2) {
        SharedArticlesAdapterHelper.getInstance().load(ArticleActivity.this);
      }
    }
  }
);
  drawerList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      viewPager.setCurrentItem(position);
      if (drawerLayout != null) {
        drawerLayout.closeDrawer(drawer);
      }
    }
  }
);
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  drawer=findViewById(R.id.left_drawer);
  if (drawerLayout != null) {
    drawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    drawerLayout.setDrawerListener(new DrawerLayout.DrawerListener(){
      @Override public void onDrawerSlide(      View view,      float v){
      }
      @Override public void onDrawerStateChanged(      int i){
      }
      @Override public void onDrawerOpened(      View view){
        invalidateOptionsMenu();
        getActionBar().show();
      }
      @Override public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
    }
);
  }
  viewPager.setCurrentItem(position);
  onPageChangeListener.onPageSelected(position);
}","@Override protected void onCreate(Bundle args){
  super.onCreate(args);
  readArticleIdSet=new HashSet<String>();
  sharedAdapterHelper=SharedArticlesAdapterHelper.getInstance();
  if (sharedAdapterHelper.getArticleItems().size() == 0) {
    finish();
    return;
  }
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  requestWindowFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.article_activity);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setHomeButtonEnabled(true);
  OnPageChangeListener onPageChangeListener=new OnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      if (position + 1 >= sharedAdapterHelper.getArticleItems().size()) {
        sharedAdapterHelper.load(ArticleActivity.this);
      }
      final JSONObject article=sharedAdapterHelper.getArticleItems().get(position);
      String articleId=article.optString(""String_Node_Str"");
      if (!readArticleIdSet.contains(articleId) && !article.optBoolean(""String_Node_Str"")) {
        readArticleIdSet.add(article.optString(""String_Node_Str""));
      }
      if (drawerLayout == null) {
        if (drawerList.getCheckedItemCount() == 0) {
          drawerList.setSelectionFromTop(position,100);
        }
 else {
          drawerList.smoothScrollToPositionFromTop(position,100);
        }
        drawerList.setItemChecked(position,true);
      }
      updateActionBar();
    }
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
;
  setTitle(getIntent().getStringExtra(""String_Node_Str""));
  viewPager=(ViewPager)findViewById(R.id.viewPager);
  final ArticlesPagerAdapter adapter=new ArticlesPagerAdapter(getSupportFragmentManager());
  sharedAdapterHelper.addAdapter(adapter,articlesHelperListener);
  viewPager.setAdapter(adapter);
  int position=getIntent().getIntExtra(""String_Node_Str"",0);
  UnderlinePageIndicator indicator=(UnderlinePageIndicator)findViewById(R.id.indicator);
  if (indicator != null) {
    indicator.setViewPager(viewPager,position);
    indicator.setOnPageChangeListener(onPageChangeListener);
  }
 else {
    viewPager.setOnPageChangeListener(onPageChangeListener);
  }
  drawerList=(ListView)findViewById(R.id.drawer_list);
  ArticlesAdapter listAdapter=new ArticlesAdapter(this);
  sharedAdapterHelper.addAdapter(listAdapter,null);
  AQuery aq=new AQuery(this);
  aq.id(R.id.drawer_list).adapter(listAdapter).scrolled(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (firstVisibleItem + visibleItemCount >= totalItemCount - 2) {
        SharedArticlesAdapterHelper.getInstance().load(ArticleActivity.this);
      }
    }
  }
);
  drawerList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      viewPager.setCurrentItem(position);
      if (drawerLayout != null) {
        drawerLayout.closeDrawer(drawer);
      }
    }
  }
);
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  drawer=findViewById(R.id.left_drawer);
  if (drawerLayout != null) {
    drawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    drawerLayout.setDrawerListener(new DrawerLayout.DrawerListener(){
      @Override public void onDrawerSlide(      View view,      float v){
      }
      @Override public void onDrawerStateChanged(      int i){
      }
      @Override public void onDrawerOpened(      View view){
        invalidateOptionsMenu();
        getActionBar().show();
        int position=viewPager.getCurrentItem();
        drawerList.setItemChecked(position,true);
        if (position <= drawerList.getFirstVisiblePosition() || position >= drawerList.getLastVisiblePosition()) {
          drawerList.setSelectionFromTop(position,100);
        }
      }
      @Override public void onDrawerClosed(      View view){
        invalidateOptionsMenu();
      }
    }
);
  }
  viewPager.setCurrentItem(position);
  onPageChangeListener.onPageSelected(position);
}",0.915906048436169
15648,"@Override public void onPageSelected(int position){
  if (position + 1 >= sharedAdapterHelper.getArticleItems().size()) {
    sharedAdapterHelper.load(ArticleActivity.this);
  }
  final JSONObject article=sharedAdapterHelper.getArticleItems().get(position);
  String articleId=article.optString(""String_Node_Str"");
  if (!readArticleIdSet.contains(articleId) && !article.optBoolean(""String_Node_Str"")) {
    readArticleIdSet.add(article.optString(""String_Node_Str""));
  }
  drawerList.setItemChecked(position,true);
  drawerList.smoothScrollToPositionFromTop(position,100);
  drawerList.invalidate();
  updateActionBar();
}","@Override public void onPageSelected(int position){
  if (position + 1 >= sharedAdapterHelper.getArticleItems().size()) {
    sharedAdapterHelper.load(ArticleActivity.this);
  }
  final JSONObject article=sharedAdapterHelper.getArticleItems().get(position);
  String articleId=article.optString(""String_Node_Str"");
  if (!readArticleIdSet.contains(articleId) && !article.optBoolean(""String_Node_Str"")) {
    readArticleIdSet.add(article.optString(""String_Node_Str""));
  }
  if (drawerLayout == null) {
    if (drawerList.getCheckedItemCount() == 0) {
      drawerList.setSelectionFromTop(position,100);
    }
 else {
      drawerList.smoothScrollToPositionFromTop(position,100);
    }
    drawerList.setItemChecked(position,true);
  }
  updateActionBar();
}",0.8202898550724638
15649,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  drawerList.invalidate();
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
}",0.88
15650,"@Override public void onDrawerOpened(View view){
  invalidateOptionsMenu();
  getActionBar().show();
}","@Override public void onDrawerOpened(View view){
  invalidateOptionsMenu();
  getActionBar().show();
  int position=viewPager.getCurrentItem();
  drawerList.setItemChecked(position,true);
  if (position <= drawerList.getFirstVisiblePosition() || position >= drawerList.getLastVisiblePosition()) {
    drawerList.setSelectionFromTop(position,100);
  }
}",0.4493392070484581
15651,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.article_fragment,container,false);
  final AQuery aq=new AQuery(view);
  TypedValue tv=new TypedValue();
  getActivity().getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true);
  final int actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());
  ArticleScrollView articleScrollView=(ArticleScrollView)aq.id(R.id.scrollView).getView();
  articleScrollView.setOnScrollChangedListener(new ArticleScrollView.OnScrollChangedListener(){
    @Override public int getDeadHeight(){
      return actionBarHeight;
    }
    @Override public void onScrollDown(){
      ActionBar actionBar=getActivity().getActionBar();
      actionBar.hide();
    }
    @Override public void onScrollUp(){
      ActionBar actionBar=getActivity().getActionBar();
      actionBar.show();
    }
  }
);
  WebView webView=aq.id(R.id.articleWebView).getWebView();
  webView.getSettings().setUseWideViewPort(true);
  Bundle args=getArguments();
  if (args != null) {
    String jsonStr=args.getString(""String_Node_Str"");
    if (jsonStr != null) {
      try {
        final JSONObject json=new JSONObject(jsonStr);
        String fontSize=PreferenceUtil.getStringPreference(getActivity(),PreferenceUtil.PREF_FONT_SIZE);
        String html=json.optString(""String_Node_Str"");
        try {
          html=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + fontSize + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ URLEncoder.encode(html,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"";
        }
 catch (        UnsupportedEncodingException e) {
          Log.e(""String_Node_Str"",""String_Node_Str"",e);
        }
        webView.loadData(html,""String_Node_Str"",null);
        aq.id(R.id.title).text(Html.fromHtml(json.optString(""String_Node_Str""))).clicked(new OnClickListener(){
          @Override public void onClick(          View v){
            Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(json.optString(""String_Node_Str"")));
            startActivity(intent);
          }
        }
);
        JSONObject subscription=json.optJSONObject(""String_Node_Str"");
        String creator=json.optString(""String_Node_Str"");
        aq.id(R.id.author).text(subscription.optString(""String_Node_Str""));
        aq.id(R.id.date).text((!creator.isEmpty() ? creator + ""String_Node_Str"" : ""String_Node_Str"") + DateUtils.getRelativeTimeSpanString(json.optLong(""String_Node_Str""),new Date().getTime(),0).toString());
        String faviconUrl=PreferenceUtil.getServerUrl(getActivity()) + ""String_Node_Str"" + subscription.optString(""String_Node_Str"")+ ""String_Node_Str"";
        aq.id(R.id.imgFavicon).image(new BitmapAjaxCallback().url(faviconUrl).fallback(R.drawable.ic_launcher).animation(AQuery.FADE_IN_NETWORK).cookie(""String_Node_Str"",PreferenceUtil.getAuthToken(getActivity())));
        JSONObject enclosure=json.optJSONObject(""String_Node_Str"");
        if (enclosure != null) {
          String type=enclosure.optString(""String_Node_Str"");
          String url=enclosure.optString(""String_Node_Str"");
          if (url != null && type != null && (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")|| type.equals(""String_Node_Str""))) {
            aq.id(R.id.enclosure).visible();
            aq.id(R.id.imgEnclosure).progress(R.id.progressEnclosure).image(url,true,true,800,AQuery.GONE,null,AQuery.FADE_IN_NETWORK).clicked(new OnClickListener(){
              @Override public void onClick(              View v){
                zoomImageFromThumb(aq.id(R.id.imgEnclosure).getImageView());
              }
            }
);
          }
        }
      }
 catch (      JSONException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
    }
  }
  shortAnimationDuration=getResources().getInteger(android.R.integer.config_shortAnimTime);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.article_fragment,container,false);
  final AQuery aq=new AQuery(view);
  TypedValue tv=new TypedValue();
  getActivity().getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true);
  final int actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());
  ArticleScrollView articleScrollView=(ArticleScrollView)aq.id(R.id.scrollView).getView();
  articleScrollView.setOnScrollChangedListener(new ArticleScrollView.OnScrollChangedListener(){
    @Override public int getDeadHeight(){
      return actionBarHeight;
    }
    @Override public void onScrollDown(){
      ActionBar actionBar=getActivity().getActionBar();
      actionBar.hide();
    }
    @Override public void onScrollUp(){
      ActionBar actionBar=getActivity().getActionBar();
      actionBar.show();
    }
  }
);
  WebView webView=aq.id(R.id.articleWebView).getWebView();
  webView.getSettings().setUseWideViewPort(true);
  Bundle args=getArguments();
  if (args != null) {
    String jsonStr=args.getString(""String_Node_Str"");
    if (jsonStr != null) {
      try {
        final JSONObject json=new JSONObject(jsonStr);
        String fontSize=PreferenceUtil.getStringPreference(getActivity(),PreferenceUtil.PREF_FONT_SIZE);
        String html=json.optString(""String_Node_Str"");
        try {
          html=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + fontSize + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ URLEncoder.encode(html,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str"";
        }
 catch (        UnsupportedEncodingException e) {
          Log.e(""String_Node_Str"",""String_Node_Str"",e);
        }
        webView.loadData(html,""String_Node_Str"",null);
        aq.id(R.id.title).text(Html.fromHtml(json.optString(""String_Node_Str""))).clicked(new OnClickListener(){
          @Override public void onClick(          View v){
            Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(json.optString(""String_Node_Str"")));
            startActivity(intent);
          }
        }
);
        JSONObject subscription=json.optJSONObject(""String_Node_Str"");
        String creator=json.optString(""String_Node_Str"");
        aq.id(R.id.author).text(subscription.optString(""String_Node_Str""));
        aq.id(R.id.date).text((!creator.isEmpty() ? creator + ""String_Node_Str"" : ""String_Node_Str"") + DateUtils.getRelativeTimeSpanString(json.optLong(""String_Node_Str""),new Date().getTime(),0).toString());
        String faviconUrl=PreferenceUtil.getServerUrl(getActivity()) + ""String_Node_Str"" + subscription.optString(""String_Node_Str"")+ ""String_Node_Str"";
        aq.id(R.id.imgFavicon).image(new BitmapAjaxCallback().url(faviconUrl).fallback(R.drawable.ic_launcher).animation(AQuery.FADE_IN_NETWORK).cookie(""String_Node_Str"",PreferenceUtil.getAuthToken(getActivity())));
        JSONObject enclosure=json.optJSONObject(""String_Node_Str"");
        if (enclosure != null) {
          String type=enclosure.optString(""String_Node_Str"");
          String url=enclosure.optString(""String_Node_Str"");
          if (url != null && type != null && (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")|| type.equals(""String_Node_Str""))) {
            aq.id(R.id.enclosure).visible();
            aq.id(R.id.imgEnclosure).progress(R.id.progressEnclosure).image(url,true,true,800,AQuery.GONE,null,AQuery.FADE_IN_NETWORK).clicked(new OnClickListener(){
              @Override public void onClick(              View v){
                zoomImageFromThumb(aq.id(R.id.imgEnclosure).getImageView());
              }
            }
);
          }
        }
      }
 catch (      JSONException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
    }
  }
  shortAnimationDuration=getResources().getInteger(android.R.integer.config_shortAnimTime);
  return view;
}",0.997769691278319
15652,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == Constants.REQUEST_CODE_ARTICLES && resultCode == Activity.RESULT_OK) {
    ListView articleList=aq.id(R.id.articleList).getListView();
    articleList.setSelection(data.getIntExtra(""String_Node_Str"",0));
    ((ArticlesAdapter)articleList.getAdapter()).notifyDataSetChanged();
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == Constants.REQUEST_CODE_ARTICLES && resultCode == Activity.RESULT_OK) {
    ListView articleList=aq.id(R.id.articleList).getListView();
    articleList.setSelectionFromTop(data.getIntExtra(""String_Node_Str"",0),100);
  }
}",0.8832630098452883
15653,"/** 
 * Handle the incoming intent.
 * @param intent
 */
private void handleIntent(Intent intent){
  if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
    String query=intent.getStringExtra(SearchManager.QUERY);
    SearchRecentSuggestions suggestions=new SearchRecentSuggestions(this,RecentSuggestionsProvider.AUTHORITY,RecentSuggestionsProvider.MODE);
    suggestions.saveRecentQuery(query,null);
    Fragment fragment=new ArticlesFragment();
    Bundle args=new Bundle();
    args.putString(""String_Node_Str"",query);
    args.putString(""String_Node_Str"",""String_Node_Str"" + query);
    args.putBoolean(""String_Node_Str"",false);
    fragment.setArguments(args);
    FragmentManager fragmentManager=getSupportFragmentManager();
    fragmentManager.beginTransaction().replace(R.id.content_frame,fragment,ARTICLES_FRAGMENT_TAG).commitAllowingStateLoss();
    drawerList.setItemChecked(drawerList.getCheckedItemPosition(),false);
    setTitle(query);
  }
}","/** 
 * Handle the incoming intent.
 * @param intent
 */
private void handleIntent(Intent intent){
  if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
    String query=intent.getStringExtra(SearchManager.QUERY);
    if (searchItem != null) {
      searchItem.collapseActionView();
    }
    SearchRecentSuggestions suggestions=new SearchRecentSuggestions(this,RecentSuggestionsProvider.AUTHORITY,RecentSuggestionsProvider.MODE);
    suggestions.saveRecentQuery(query,null);
    Fragment fragment=new ArticlesFragment();
    Bundle args=new Bundle();
    args.putString(""String_Node_Str"",query);
    args.putString(""String_Node_Str"",""String_Node_Str"" + query);
    args.putBoolean(""String_Node_Str"",false);
    fragment.setArguments(args);
    FragmentManager fragmentManager=getSupportFragmentManager();
    fragmentManager.beginTransaction().replace(R.id.content_frame,fragment,ARTICLES_FRAGMENT_TAG).commitAllowingStateLoss();
    drawerList.setItemChecked(drawerList.getCheckedItemPosition(),false);
    setTitle(query);
  }
}",0.9623682890115404
15654,"@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuInflater inflater=getMenuInflater();
  inflater.inflate(R.menu.main,menu);
  SearchManager searchManager=(SearchManager)getSystemService(Context.SEARCH_SERVICE);
  final MenuItem searchItem=menu.findItem(R.id.action_search);
  SearchView searchView=(SearchView)searchItem.getActionView();
  searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));
  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      if (searchItem != null) {
        searchItem.collapseActionView();
      }
      return false;
    }
    @Override public boolean onQueryTextChange(    String newText){
      return false;
    }
  }
);
  return super.onCreateOptionsMenu(menu);
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuInflater inflater=getMenuInflater();
  inflater.inflate(R.menu.main,menu);
  SearchManager searchManager=(SearchManager)getSystemService(Context.SEARCH_SERVICE);
  searchItem=menu.findItem(R.id.action_search);
  SearchView searchView=(SearchView)searchItem.getActionView();
  searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));
  return super.onCreateOptionsMenu(menu);
}",0.7192575406032483
15655,"@Override public void finish(){
  Intent data=new Intent();
  data.putExtra(""String_Node_Str"",viewPager.getCurrentItem());
  setResult(RESULT_OK,data);
  sharedAdapterHelper.removeAdapter(viewPager.getAdapter(),articlesHelperListener);
  super.finish();
}","@Override public void finish(){
  Intent data=new Intent();
  if (viewPager != null) {
    data.putExtra(""String_Node_Str"",viewPager.getCurrentItem());
    sharedAdapterHelper.removeAdapter(viewPager.getAdapter(),articlesHelperListener);
  }
  setResult(RESULT_OK,data);
  super.finish();
}",0.5908256880733945
15656,"/** 
 * Refresh subscriptions list from server.
 * @param position Position to select
 * @param refresh True to force articles refresh
 */
private void refreshSubscriptions(final int position,final boolean refresh){
  SubscriptionResource.list(this,false,new SismicsHttpResponseHandler(){
    @Override public void onSuccess(    JSONObject json){
      SubscriptionAdapter adapter=(SubscriptionAdapter)drawerList.getAdapter();
      if (adapter == null) {
        adapter=new SubscriptionAdapter(MainActivity.this,json);
        drawerList.setAdapter(adapter);
      }
 else {
        adapter.setItems(json);
        adapter.notifyDataSetChanged();
      }
      if (position != -1) {
        int pos=position;
        if (!adapter.isEnabled(pos)) {
          pos=1;
        }
        selectItem(pos,refresh);
      }
    }
  }
);
}","/** 
 * Refresh subscriptions list from server.
 * @param position Position to select
 * @param refresh True to force articles refresh
 */
private void refreshSubscriptions(final int position,final boolean refresh){
  SubscriptionResource.list(this,false,new SismicsHttpResponseHandler(){
    @Override public void onSuccess(    JSONObject json){
      if (isFinishing()) {
        return;
      }
      SubscriptionAdapter adapter=(SubscriptionAdapter)drawerList.getAdapter();
      if (adapter == null) {
        adapter=new SubscriptionAdapter(MainActivity.this,json);
        drawerList.setAdapter(adapter);
      }
 else {
        adapter.setItems(json);
        adapter.notifyDataSetChanged();
      }
      if (position != -1) {
        int pos=position;
        if (!adapter.isEnabled(pos)) {
          pos=1;
        }
        selectItem(pos,refresh);
      }
    }
  }
);
}",0.970262390670554
15657,"@Override public void onSuccess(JSONObject json){
  SubscriptionAdapter adapter=(SubscriptionAdapter)drawerList.getAdapter();
  if (adapter == null) {
    adapter=new SubscriptionAdapter(MainActivity.this,json);
    drawerList.setAdapter(adapter);
  }
 else {
    adapter.setItems(json);
    adapter.notifyDataSetChanged();
  }
  if (position != -1) {
    int pos=position;
    if (!adapter.isEnabled(pos)) {
      pos=1;
    }
    selectItem(pos,refresh);
  }
}","@Override public void onSuccess(JSONObject json){
  if (isFinishing()) {
    return;
  }
  SubscriptionAdapter adapter=(SubscriptionAdapter)drawerList.getAdapter();
  if (adapter == null) {
    adapter=new SubscriptionAdapter(MainActivity.this,json);
    drawerList.setAdapter(adapter);
  }
 else {
    adapter.setItems(json);
    adapter.notifyDataSetChanged();
  }
  if (position != -1) {
    int pos=position;
    if (!adapter.isEnabled(pos)) {
      pos=1;
    }
    selectItem(pos,refresh);
  }
}",0.9595015576323987
15658,"/** 
 * Find some logs.
 * @param criteria Search criteria
 * @param list Paginated list (modified by side effect)
 */
public void find(LogCriteria criteria,PaginatedList<LogEntry> list){
  LinkedList<LogEntry> logEntryList=new LinkedList<LogEntry>();
  final String level=criteria.getLevel();
  final String tag=criteria.getTag();
  final String message=criteria.getMessage();
  int resultCount=0;
  for (Iterator<LogEntry> it=logQueue.iterator(); it.hasNext(); ) {
    LogEntry logEntry=it.next();
    if ((level == null || logEntry.getLevel().toLowerCase().equals(level)) && (tag == null || logEntry.getTag().toLowerCase().equals(tag)) && (message == null || logEntry.getMessage().toLowerCase().contains(message))) {
      if (resultCount >= list.getOffset() && resultCount < list.getOffset() + list.getLimit()) {
        logEntryList.addFirst(logEntry);
      }
      resultCount++;
    }
  }
  list.setResultCount(resultCount);
  list.setResultList(logEntryList);
}","/** 
 * Find some logs.
 * @param criteria Search criteria
 * @param list Paginated list (modified by side effect)
 */
public void find(LogCriteria criteria,PaginatedList<LogEntry> list){
  List<LogEntry> logEntryList=new LinkedList<LogEntry>();
  final String level=criteria.getLevel();
  final String tag=criteria.getTag();
  final String message=criteria.getMessage();
  int resultCount=0;
  for (Iterator<LogEntry> it=logQueue.iterator(); it.hasNext(); ) {
    LogEntry logEntry=it.next();
    if ((level == null || logEntry.getLevel().toLowerCase().equals(level)) && (tag == null || logEntry.getTag().toLowerCase().equals(tag)) && (message == null || logEntry.getMessage().toLowerCase().contains(message))) {
      logEntryList.add(logEntry);
      resultCount++;
    }
  }
  List<LogEntry> logEntrySubList=Lists.reverse(logEntryList).subList(list.getOffset(),list.getOffset() + list.getLimit());
  list.setResultCount(resultCount);
  list.setResultList(logEntrySubList);
}",0.8470225872689938
15659,"/** 
 * Test the log resource.
 * @throws JSONException
 */
@Test public void testLogResource() throws JSONException {
  String adminAuthenticationToken=clientUtil.login(""String_Node_Str"",""String_Node_Str"",false);
  WebResource appResource=resource().path(""String_Node_Str"");
  ClientResponse response=appResource.get(ClientResponse.class);
  appResource.addFilter(new CookieAuthenticationFilter(adminAuthenticationToken));
  response=appResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  JSONObject json=response.getEntity(JSONObject.class);
  JSONArray logs=json.getJSONArray(""String_Node_Str"");
  Assert.assertTrue(logs.length() == 10);
}","/** 
 * Test the log resource.
 * @throws JSONException
 */
@Test public void testLogResource() throws JSONException {
  String adminAuthenticationToken=clientUtil.login(""String_Node_Str"",""String_Node_Str"",false);
  WebResource appResource=resource().path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
  ClientResponse response=appResource.get(ClientResponse.class);
  appResource.addFilter(new CookieAuthenticationFilter(adminAuthenticationToken));
  response=appResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  JSONObject json=response.getEntity(JSONObject.class);
  JSONArray logs=json.getJSONArray(""String_Node_Str"");
  Assert.assertTrue(logs.length() == 10);
  Long date1=logs.optJSONObject(0).optLong(""String_Node_Str"");
  Long date2=logs.optJSONObject(9).optLong(""String_Node_Str"");
  Assert.assertTrue(date1 > date2);
  appResource=resource().path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
  response=appResource.get(ClientResponse.class);
  appResource.addFilter(new CookieAuthenticationFilter(adminAuthenticationToken));
  response=appResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  logs=json.getJSONArray(""String_Node_Str"");
  Assert.assertTrue(logs.length() == 10);
  Long date3=logs.optJSONObject(0).optLong(""String_Node_Str"");
  Long date4=logs.optJSONObject(9).optLong(""String_Node_Str"");
  Assert.assertTrue(date3 > date4);
  Assert.assertTrue(date2 > date3);
}",0.5985587113183553
15660,"/** 
 * Search articles.
 * @param query Search query
 * @return List of articles
 * @throws Exception 
 */
public PaginatedList<UserArticleDto> searchArticles(String userId,List<String> feedList,String searchQuery,Integer offset,Integer limit) throws Exception {
  ArticleDao articleDao=new ArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create(limit,offset);
  Map<String,Article> articleMap=null;
  if (feedList.size() > 0) {
    articleMap=articleDao.search(paginatedList,feedList,searchQuery);
  }
  if (articleMap != null && articleMap.size() > 0) {
    UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
    userArticleCriteria.setUserId(userId);
    userArticleCriteria.setVisible(true);
    userArticleCriteria.setArticleIdIn(Lists.newArrayList(articleMap.keySet()));
    UserArticleDao userArticleDao=new UserArticleDao();
    PaginatedList<UserArticleDto> userArticledList=PaginatedLists.create(paginatedList.getLimit(),0);
    userArticleDao.findByCriteria(userArticleCriteria,userArticledList);
    paginatedList.setResultList(userArticledList.getResultList());
    for (    UserArticleDto userArticleDto : paginatedList.getResultList()) {
      Article article=articleMap.get(userArticleDto.getArticleId());
      if (article.getTitle() != null) {
        userArticleDto.setArticleTitle(article.getTitle());
      }
      if (article.getDescription() != null) {
        userArticleDto.setArticleDescription(article.getDescription());
      }
    }
  }
 else {
    paginatedList.setResultList(new ArrayList<UserArticleDto>());
  }
  return paginatedList;
}","/** 
 * Search articles.
 * @param query Search query
 * @return List of articles
 * @throws Exception 
 */
public PaginatedList<UserArticleDto> searchArticles(String userId,List<String> feedList,String searchQuery,Integer offset,Integer limit) throws Exception {
  ArticleDao articleDao=new ArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create(limit,offset);
  Map<String,Article> articleMap=null;
  if (feedList.size() > 0) {
    articleMap=articleDao.search(paginatedList,feedList,searchQuery);
  }
  if (articleMap != null && articleMap.size() > 0) {
    UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
    userArticleCriteria.setUserId(userId);
    userArticleCriteria.setVisible(false);
    userArticleCriteria.setArticleIdIn(Lists.newArrayList(articleMap.keySet()));
    UserArticleDao userArticleDao=new UserArticleDao();
    PaginatedList<UserArticleDto> userArticledList=PaginatedLists.create(paginatedList.getLimit(),0);
    userArticleDao.findByCriteria(userArticleCriteria,userArticledList);
    paginatedList.setResultList(userArticledList.getResultList());
    for (    UserArticleDto userArticleDto : paginatedList.getResultList()) {
      Article article=articleMap.get(userArticleDto.getArticleId());
      if (article.getTitle() != null) {
        userArticleDto.setArticleTitle(article.getTitle());
      }
      if (article.getDescription() != null) {
        userArticleDto.setArticleDescription(article.getDescription());
      }
      if (userArticleDto.getId() == null) {
        UserArticle userArticle=new UserArticle();
        userArticle.setArticleId(userArticleDto.getArticleId());
        userArticle.setUserId(userId);
        userArticle.setReadDate(new Date());
        String userArticleId=userArticleDao.create(userArticle);
        userArticleDto.setId(userArticleId);
        userArticleDto.setReadTimestamp(userArticle.getReadDate().getTime());
      }
    }
  }
 else {
    paginatedList.setResultList(new ArrayList<UserArticleDto>());
  }
  return paginatedList;
}",0.8781019907281157
15661,"/** 
 * Test of the search resource.
 * @throws Exception 
 */
@Test public void testSearchResource() throws Exception {
  clientUtil.createUser(""String_Node_Str"");
  String search1AuthToken=clientUtil.login(""String_Node_Str"");
  WebResource subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(search1AuthToken));
  MultivaluedMapImpl postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",""String_Node_Str"");
  ClientResponse response=subscriptionResource.put(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  JSONObject json=response.getEntity(JSONObject.class);
  WebResource searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search1AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  JSONArray articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(1,articles.length());
  JSONObject article=articles.getJSONObject(0);
  Assert.assertEquals(""String_Node_Str"",article.getString(""String_Node_Str""));
  searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search1AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(0,articles.length());
  searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search1AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(1,articles.length());
  Assert.assertEquals(""String_Node_Str"",articles.getJSONObject(0).getString(""String_Node_Str""));
  searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search1AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(2,articles.length());
  clientUtil.createUser(""String_Node_Str"");
  String search2AuthToken=clientUtil.login(""String_Node_Str"");
  subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(search2AuthToken));
  postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.put(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search2AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(2,articles.length());
  clientUtil.createUser(""String_Node_Str"");
  String search3AuthToken=clientUtil.login(""String_Node_Str"");
  searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search3AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(0,articles.length());
}","/** 
 * Test of the search resource.
 * @throws Exception 
 */
@Test public void testSearchResource() throws Exception {
  clientUtil.createUser(""String_Node_Str"");
  String search1AuthToken=clientUtil.login(""String_Node_Str"");
  WebResource subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(search1AuthToken));
  MultivaluedMapImpl postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",""String_Node_Str"");
  ClientResponse response=subscriptionResource.put(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  JSONObject json=response.getEntity(JSONObject.class);
  WebResource searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search1AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  JSONArray articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(1,articles.length());
  JSONObject article=articles.getJSONObject(0);
  Assert.assertEquals(""String_Node_Str"",article.getString(""String_Node_Str""));
  searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search1AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(0,articles.length());
  searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search1AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(2,articles.length());
  Assert.assertEquals(""String_Node_Str"",articles.getJSONObject(0).getString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",articles.getJSONObject(1).getString(""String_Node_Str""));
  searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search1AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(2,articles.length());
  clientUtil.createUser(""String_Node_Str"");
  String search2AuthToken=clientUtil.login(""String_Node_Str"");
  subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(search2AuthToken));
  postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.put(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search2AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(2,articles.length());
  clientUtil.createUser(""String_Node_Str"");
  String search3AuthToken=clientUtil.login(""String_Node_Str"");
  searchResource=resource().path(""String_Node_Str"");
  searchResource.addFilter(new CookieAuthenticationFilter(search3AuthToken));
  response=searchResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  articles=json.getJSONArray(""String_Node_Str"");
  Assert.assertEquals(0,articles.length());
}",0.9877913429522752
15662,"/** 
 * Creates the query parameters from the criteria.
 * @param criteria Search criteria
 * @return Query parameters
 */
private QueryParam getQueryParam(UserArticleCriteria criteria){
  Map<String,Object> parameterMap=new HashMap<String,Object>();
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (criteria.getUserId() != null) {
    sb.append(""String_Node_Str"");
    if (criteria.isSubscribed()) {
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
    }
  }
  List<String> criteriaList=new ArrayList<String>();
  if (criteria.getFeedId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getFeedId());
  }
  if (criteria.getArticleId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getArticleId());
  }
  if (criteria.getArticleIdIn() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getArticleIdIn());
  }
  if (criteria.getCategoryId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getCategoryId());
  }
  if (criteria.isUnread()) {
    criteriaList.add(""String_Node_Str"");
  }
  if (criteria.isStarred()) {
    criteriaList.add(""String_Node_Str"");
  }
  parameterMap.put(""String_Node_Str"",criteria.getUserId());
  criteriaList.add(""String_Node_Str"");
  if (!criteriaList.isEmpty()) {
    sb.append(""String_Node_Str"");
    sb.append(Joiner.on(""String_Node_Str"").join(criteriaList));
  }
  if (criteria.isStarred()) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  QueryParam queryParam=new QueryParam(sb.toString(),parameterMap);
  return queryParam;
}","/** 
 * Creates the query parameters from the criteria.
 * @param criteria Search criteria
 * @return Query parameters
 */
private QueryParam getQueryParam(UserArticleCriteria criteria){
  Map<String,Object> parameterMap=new HashMap<String,Object>();
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (criteria.isVisible()) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (criteria.getUserId() != null) {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  List<String> criteriaList=new ArrayList<String>();
  if (criteria.getFeedId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getFeedId());
  }
  if (criteria.getArticleId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getArticleId());
  }
  if (criteria.getArticleIdIn() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getArticleIdIn());
  }
  if (criteria.getCategoryId() != null) {
    criteriaList.add(""String_Node_Str"");
    parameterMap.put(""String_Node_Str"",criteria.getCategoryId());
  }
  if (criteria.isUnread()) {
    criteriaList.add(""String_Node_Str"");
  }
  if (criteria.isStarred()) {
    criteriaList.add(""String_Node_Str"");
  }
  parameterMap.put(""String_Node_Str"",criteria.getUserId());
  criteriaList.add(""String_Node_Str"");
  if (!criteriaList.isEmpty()) {
    sb.append(""String_Node_Str"");
    sb.append(Joiner.on(""String_Node_Str"").join(criteriaList));
  }
  if (criteria.isStarred()) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  QueryParam queryParam=new QueryParam(sb.toString(),parameterMap);
  return queryParam;
}",0.9208712434518886
15663,"/** 
 * Create the first batch of user articles when subscribing to a feed, so that the user has at least a few unread articles.
 * @param userId User ID
 * @param feedSubscription Feed subscription
 */
public void createInitialUserArticle(String userId,FeedSubscription feedSubscription){
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUnread(false);
  userArticleCriteria.setUserId(userId);
  userArticleCriteria.setSubscribed(true);
  userArticleCriteria.setFeedId(feedSubscription.getFeedId());
  UserArticleDao userArticleDao=new UserArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create();
  userArticleDao.findByCriteria(userArticleCriteria,paginatedList);
  for (  UserArticleDto userArticleDto : paginatedList.getResultList()) {
    if (userArticleDto.getId() == null) {
      UserArticle userArticle=new UserArticle();
      userArticle.setArticleId(userArticleDto.getArticleId());
      userArticle.setUserId(userId);
      userArticleDao.create(userArticle);
    }
  }
}","/** 
 * Create the first batch of user articles when subscribing to a feed, so that the user has at least a few unread articles.
 * @param userId User ID
 * @param feedSubscription Feed subscription
 */
public void createInitialUserArticle(String userId,FeedSubscription feedSubscription){
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUnread(false);
  userArticleCriteria.setUserId(userId);
  userArticleCriteria.setVisible(false);
  userArticleCriteria.setFeedId(feedSubscription.getFeedId());
  UserArticleDao userArticleDao=new UserArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create();
  userArticleDao.findByCriteria(userArticleCriteria,paginatedList);
  for (  UserArticleDto userArticleDto : paginatedList.getResultList()) {
    if (userArticleDto.getId() == null) {
      UserArticle userArticle=new UserArticle();
      userArticle.setArticleId(userArticleDto.getArticleId());
      userArticle.setUserId(userId);
      userArticleDao.create(userArticle);
    }
  }
}",0.9886363636363636
15664,"/** 
 * Search articles.
 * @param query Search query
 * @return List of articles
 * @throws Exception 
 */
public PaginatedList<UserArticleDto> searchArticles(String userId,List<String> feedList,String searchQuery,Integer offset,Integer limit) throws Exception {
  ArticleDao articleDao=new ArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create(limit,offset);
  Map<String,Article> articleMap=null;
  if (feedList.size() > 0) {
    articleMap=articleDao.search(paginatedList,feedList,searchQuery);
  }
  if (articleMap != null && articleMap.size() > 0) {
    UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
    userArticleCriteria.setUserId(userId);
    userArticleCriteria.setSubscribed(true);
    userArticleCriteria.setArticleIdIn(Lists.newArrayList(articleMap.keySet()));
    UserArticleDao userArticleDao=new UserArticleDao();
    PaginatedList<UserArticleDto> userArticledList=PaginatedLists.create(paginatedList.getLimit(),0);
    userArticleDao.findByCriteria(userArticleCriteria,userArticledList);
    paginatedList.setResultList(userArticledList.getResultList());
    for (    UserArticleDto userArticleDto : paginatedList.getResultList()) {
      Article article=articleMap.get(userArticleDto.getArticleId());
      if (article.getTitle() != null) {
        userArticleDto.setArticleTitle(article.getTitle());
      }
      if (article.getDescription() != null) {
        userArticleDto.setArticleDescription(article.getDescription());
      }
    }
  }
 else {
    paginatedList.setResultList(new ArrayList<UserArticleDto>());
  }
  return paginatedList;
}","/** 
 * Search articles.
 * @param query Search query
 * @return List of articles
 * @throws Exception 
 */
public PaginatedList<UserArticleDto> searchArticles(String userId,List<String> feedList,String searchQuery,Integer offset,Integer limit) throws Exception {
  ArticleDao articleDao=new ArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create(limit,offset);
  Map<String,Article> articleMap=null;
  if (feedList.size() > 0) {
    articleMap=articleDao.search(paginatedList,feedList,searchQuery);
  }
  if (articleMap != null && articleMap.size() > 0) {
    UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
    userArticleCriteria.setUserId(userId);
    userArticleCriteria.setVisible(true);
    userArticleCriteria.setArticleIdIn(Lists.newArrayList(articleMap.keySet()));
    UserArticleDao userArticleDao=new UserArticleDao();
    PaginatedList<UserArticleDto> userArticledList=PaginatedLists.create(paginatedList.getLimit(),0);
    userArticleDao.findByCriteria(userArticleCriteria,userArticledList);
    paginatedList.setResultList(userArticledList.getResultList());
    for (    UserArticleDto userArticleDto : paginatedList.getResultList()) {
      Article article=articleMap.get(userArticleDto.getArticleId());
      if (article.getTitle() != null) {
        userArticleDto.setArticleTitle(article.getTitle());
      }
      if (article.getDescription() != null) {
        userArticleDto.setArticleDescription(article.getDescription());
      }
    }
  }
 else {
    paginatedList.setResultList(new ArrayList<UserArticleDto>());
  }
  return paginatedList;
}",0.9953545989470424
15665,"/** 
 * Marks all articles as read.
 * @return Response
 * @throws JSONException
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response read() throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setSubscribed(true);
  UserArticleDao userArticleDao=new UserArticleDao();
  userArticleDao.markAsRead(userArticleCriteria);
  JSONObject response=new JSONObject();
  response.put(""String_Node_Str"",""String_Node_Str"");
  return Response.ok().entity(response).build();
}","/** 
 * Marks all articles as read.
 * @return Response
 * @throws JSONException
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response read() throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUserId(principal.getId());
  UserArticleDao userArticleDao=new UserArticleDao();
  userArticleDao.markAsRead(userArticleCriteria);
  JSONObject response=new JSONObject();
  response.put(""String_Node_Str"",""String_Node_Str"");
  return Response.ok().entity(response).build();
}",0.967448902346707
15666,"/** 
 * Returns all articles.
 * @param unread Returns only unread articles
 * @param limit Page limit
 * @param offset Page offset
 * @return Response
 * @throws JSONException
 */
@GET @Produces(MediaType.APPLICATION_JSON) public Response get(@QueryParam(""String_Node_Str"") boolean unread,@QueryParam(""String_Node_Str"") Integer limit,@QueryParam(""String_Node_Str"") Integer offset) throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUnread(unread);
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setSubscribed(true);
  UserArticleDao userArticleDao=new UserArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create(limit,offset);
  userArticleDao.findByCriteria(userArticleCriteria,paginatedList);
  JSONObject response=new JSONObject();
  List<JSONObject> articles=new ArrayList<JSONObject>();
  for (  UserArticleDto userArticle : paginatedList.getResultList()) {
    articles.add(ArticleAssembler.asJson(userArticle));
  }
  response.put(""String_Node_Str"",paginatedList.getResultCount());
  response.put(""String_Node_Str"",articles);
  return Response.ok().entity(response).build();
}","/** 
 * Returns all articles.
 * @param unread Returns only unread articles
 * @param limit Page limit
 * @param offset Page offset
 * @return Response
 * @throws JSONException
 */
@GET @Produces(MediaType.APPLICATION_JSON) public Response get(@QueryParam(""String_Node_Str"") boolean unread,@QueryParam(""String_Node_Str"") Integer limit,@QueryParam(""String_Node_Str"") Integer offset) throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUnread(unread);
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setVisible(true);
  UserArticleDao userArticleDao=new UserArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create(limit,offset);
  userArticleDao.findByCriteria(userArticleCriteria,paginatedList);
  JSONObject response=new JSONObject();
  List<JSONObject> articles=new ArrayList<JSONObject>();
  for (  UserArticleDto userArticle : paginatedList.getResultList()) {
    articles.add(ArticleAssembler.asJson(userArticle));
  }
  response.put(""String_Node_Str"",paginatedList.getResultCount());
  response.put(""String_Node_Str"",articles);
  return Response.ok().entity(response).build();
}",0.9941060903732808
15667,"/** 
 * Marks all articles in this category as read.
 * @param id Category ID
 * @return Response
 * @throws JSONException
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response read(@PathParam(""String_Node_Str"") String id) throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  CategoryDao categoryDao=new CategoryDao();
  try {
    categoryDao.getCategory(id,principal.getId());
  }
 catch (  NoResultException e) {
    throw new ClientException(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",id));
  }
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setSubscribed(true);
  userArticleCriteria.setCategoryId(id);
  UserArticleDao userArticleDao=new UserArticleDao();
  userArticleDao.markAsRead(userArticleCriteria);
  JSONObject response=new JSONObject();
  response.put(""String_Node_Str"",""String_Node_Str"");
  return Response.ok().entity(response).build();
}","/** 
 * Marks all articles in this category as read.
 * @param id Category ID
 * @return Response
 * @throws JSONException
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response read(@PathParam(""String_Node_Str"") String id) throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  CategoryDao categoryDao=new CategoryDao();
  try {
    categoryDao.getCategory(id,principal.getId());
  }
 catch (  NoResultException e) {
    throw new ClientException(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",id));
  }
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setCategoryId(id);
  UserArticleDao userArticleDao=new UserArticleDao();
  userArticleDao.markAsRead(userArticleCriteria);
  JSONObject response=new JSONObject();
  response.put(""String_Node_Str"",""String_Node_Str"");
  return Response.ok().entity(response).build();
}",0.9789318961293484
15668,"/** 
 * Returns all articles in a category.
 * @param id Category ID
 * @param unread Returns only unread articles
 * @param limit Page limit
 * @param offset Page offset
 * @return Response
 * @throws JSONException
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response get(@PathParam(""String_Node_Str"") String id,@QueryParam(""String_Node_Str"") boolean unread,@QueryParam(""String_Node_Str"") Integer limit,@QueryParam(""String_Node_Str"") Integer offset) throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  CategoryDao categoryDao=new CategoryDao();
  Category category=null;
  try {
    category=categoryDao.getCategory(id,principal.getId());
  }
 catch (  NoResultException e) {
    throw new ClientException(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",id));
  }
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUnread(unread);
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setSubscribed(true);
  if (category.getParentId() != null) {
    userArticleCriteria.setCategoryId(id);
  }
  UserArticleDao userArticleDao=new UserArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create(limit,offset);
  userArticleDao.findByCriteria(userArticleCriteria,paginatedList);
  JSONObject response=new JSONObject();
  List<JSONObject> articles=new ArrayList<JSONObject>();
  for (  UserArticleDto userArticle : paginatedList.getResultList()) {
    articles.add(ArticleAssembler.asJson(userArticle));
  }
  response.put(""String_Node_Str"",paginatedList.getResultCount());
  response.put(""String_Node_Str"",articles);
  return Response.ok().entity(response).build();
}","/** 
 * Returns all articles in a category.
 * @param id Category ID
 * @param unread Returns only unread articles
 * @param limit Page limit
 * @param offset Page offset
 * @return Response
 * @throws JSONException
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response get(@PathParam(""String_Node_Str"") String id,@QueryParam(""String_Node_Str"") boolean unread,@QueryParam(""String_Node_Str"") Integer limit,@QueryParam(""String_Node_Str"") Integer offset) throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  CategoryDao categoryDao=new CategoryDao();
  Category category=null;
  try {
    category=categoryDao.getCategory(id,principal.getId());
  }
 catch (  NoResultException e) {
    throw new ClientException(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",id));
  }
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUnread(unread);
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setVisible(true);
  if (category.getParentId() != null) {
    userArticleCriteria.setCategoryId(id);
  }
  UserArticleDao userArticleDao=new UserArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create(limit,offset);
  userArticleDao.findByCriteria(userArticleCriteria,paginatedList);
  JSONObject response=new JSONObject();
  List<JSONObject> articles=new ArrayList<JSONObject>();
  for (  UserArticleDto userArticle : paginatedList.getResultList()) {
    articles.add(ArticleAssembler.asJson(userArticle));
  }
  response.put(""String_Node_Str"",paginatedList.getResultCount());
  response.put(""String_Node_Str"",articles);
  return Response.ok().entity(response).build();
}",0.9956809674632884
15669,"/** 
 * Marks all articles in this subscription as read.
 * @param id Subscription ID
 * @return Response
 * @throws JSONException
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response read(@PathParam(""String_Node_Str"") String id) throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  FeedSubscriptionDao feedSubscriptionDao=new FeedSubscriptionDao();
  FeedSubscription feedSubscription=feedSubscriptionDao.getFeedSubscription(id,principal.getId());
  if (feedSubscription == null) {
    throw new ClientException(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",id));
  }
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setSubscribed(true);
  userArticleCriteria.setFeedSubscriptionId(id);
  UserArticleDao userArticleDao=new UserArticleDao();
  userArticleDao.markAsRead(userArticleCriteria);
  JSONObject response=new JSONObject();
  response.put(""String_Node_Str"",""String_Node_Str"");
  return Response.ok().entity(response).build();
}","/** 
 * Marks all articles in this subscription as read.
 * @param id Subscription ID
 * @return Response
 * @throws JSONException
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response read(@PathParam(""String_Node_Str"") String id) throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  FeedSubscriptionDao feedSubscriptionDao=new FeedSubscriptionDao();
  FeedSubscription feedSubscription=feedSubscriptionDao.getFeedSubscription(id,principal.getId());
  if (feedSubscription == null) {
    throw new ClientException(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",id));
  }
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setFeedSubscriptionId(id);
  UserArticleDao userArticleDao=new UserArticleDao();
  userArticleDao.markAsRead(userArticleCriteria);
  JSONObject response=new JSONObject();
  response.put(""String_Node_Str"",""String_Node_Str"");
  return Response.ok().entity(response).build();
}",0.7835990888382688
15670,"/** 
 * Returns the subscription informations and paginated articles.
 * @param id Subscription ID
 * @param unread Returns only unread articles
 * @param limit Page limit
 * @param offset Page offset
 * @return Response
 * @throws JSONException
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response get(@PathParam(""String_Node_Str"") String id,@QueryParam(""String_Node_Str"") boolean unread,@QueryParam(""String_Node_Str"") Integer limit,@QueryParam(""String_Node_Str"") Integer offset) throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  FeedSubscriptionCriteria feedSubscriptionCriteria=new FeedSubscriptionCriteria();
  feedSubscriptionCriteria.setId(id);
  feedSubscriptionCriteria.setUserId(principal.getId());
  FeedSubscriptionDao feedSubscriptionDao=new FeedSubscriptionDao();
  List<FeedSubscriptionDto> feedSubscriptionList=feedSubscriptionDao.findByCriteria(feedSubscriptionCriteria);
  if (feedSubscriptionList.isEmpty()) {
    throw new ClientException(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",id));
  }
  FeedSubscriptionDto feedSubscription=feedSubscriptionList.iterator().next();
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUnread(unread);
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setSubscribed(true);
  userArticleCriteria.setFeedId(feedSubscription.getFeedId());
  UserArticleDao userArticleDao=new UserArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create(limit,offset);
  userArticleDao.findByCriteria(userArticleCriteria,paginatedList);
  JSONObject response=new JSONObject();
  JSONObject subscription=new JSONObject();
  subscription.put(""String_Node_Str"",feedSubscription.getFeedSubscriptionTitle());
  subscription.put(""String_Node_Str"",feedSubscription.getFeedUrl());
  subscription.put(""String_Node_Str"",feedSubscription.getFeedDescription());
  response.put(""String_Node_Str"",subscription);
  List<JSONObject> articles=new ArrayList<JSONObject>();
  for (  UserArticleDto userArticle : paginatedList.getResultList()) {
    articles.add(ArticleAssembler.asJson(userArticle));
  }
  response.put(""String_Node_Str"",paginatedList.getResultCount());
  response.put(""String_Node_Str"",articles);
  return Response.ok().entity(response).build();
}","/** 
 * Returns the subscription informations and paginated articles.
 * @param id Subscription ID
 * @param unread Returns only unread articles
 * @param limit Page limit
 * @param offset Page offset
 * @return Response
 * @throws JSONException
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response get(@PathParam(""String_Node_Str"") String id,@QueryParam(""String_Node_Str"") boolean unread,@QueryParam(""String_Node_Str"") Integer limit,@QueryParam(""String_Node_Str"") Integer offset) throws JSONException {
  if (!authenticate()) {
    throw new ForbiddenClientException();
  }
  FeedSubscriptionCriteria feedSubscriptionCriteria=new FeedSubscriptionCriteria();
  feedSubscriptionCriteria.setId(id);
  feedSubscriptionCriteria.setUserId(principal.getId());
  FeedSubscriptionDao feedSubscriptionDao=new FeedSubscriptionDao();
  List<FeedSubscriptionDto> feedSubscriptionList=feedSubscriptionDao.findByCriteria(feedSubscriptionCriteria);
  if (feedSubscriptionList.isEmpty()) {
    throw new ClientException(""String_Node_Str"",MessageFormat.format(""String_Node_Str"",id));
  }
  FeedSubscriptionDto feedSubscription=feedSubscriptionList.iterator().next();
  UserArticleCriteria userArticleCriteria=new UserArticleCriteria();
  userArticleCriteria.setUnread(unread);
  userArticleCriteria.setUserId(principal.getId());
  userArticleCriteria.setVisible(true);
  userArticleCriteria.setFeedId(feedSubscription.getFeedId());
  UserArticleDao userArticleDao=new UserArticleDao();
  PaginatedList<UserArticleDto> paginatedList=PaginatedLists.create(limit,offset);
  userArticleDao.findByCriteria(userArticleCriteria,paginatedList);
  JSONObject response=new JSONObject();
  JSONObject subscription=new JSONObject();
  subscription.put(""String_Node_Str"",feedSubscription.getFeedSubscriptionTitle());
  subscription.put(""String_Node_Str"",feedSubscription.getFeedUrl());
  subscription.put(""String_Node_Str"",feedSubscription.getFeedDescription());
  response.put(""String_Node_Str"",subscription);
  List<JSONObject> articles=new ArrayList<JSONObject>();
  for (  UserArticleDto userArticle : paginatedList.getResultList()) {
    articles.add(ArticleAssembler.asJson(userArticle));
  }
  response.put(""String_Node_Str"",paginatedList.getResultCount());
  response.put(""String_Node_Str"",articles);
  return Response.ok().entity(response).build();
}",0.9964066793489748
15671,"/** 
 * Test of the subscription resource.
 * @throws JSONException
 */
@Test public void testSubscriptionAddResource() throws JSONException {
  clientUtil.createUser(""String_Node_Str"");
  String subscription1AuthToken=clientUtil.login(""String_Node_Str"");
  WebResource categoryResource=resource().path(""String_Node_Str"");
  categoryResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  MultivaluedMapImpl postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",""String_Node_Str"");
  ClientResponse response=categoryResource.put(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  JSONObject json=response.getEntity(JSONObject.class);
  String category1Id=json.optString(""String_Node_Str"");
  Assert.assertNotNull(category1Id);
  WebResource subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.put(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  String subscription1Id=json.getString(""String_Node_Str"");
  Assert.assertNotNull(subscription1Id);
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",category1Id);
  response=subscriptionResource.post(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(""String_Node_Str"",json.getString(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  int unreadCount=json.optInt(""String_Node_Str"");
  Assert.assertTrue(unreadCount > 0);
  JSONArray categories=json.optJSONArray(""String_Node_Str"");
  Assert.assertNotNull(categories);
  Assert.assertEquals(1,categories.length());
  JSONObject rootCategory=categories.optJSONObject(0);
  categories=rootCategory.getJSONArray(""String_Node_Str"");
  JSONObject technoCategory=categories.optJSONObject(0);
  JSONArray subscriptions=technoCategory.optJSONArray(""String_Node_Str"");
  Assert.assertEquals(1,subscriptions.length());
  JSONObject subscription=subscriptions.getJSONObject(0);
  Assert.assertEquals(10,subscription.getInt(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  subscription=json.optJSONObject(""String_Node_Str"");
  Assert.assertNotNull(subscription);
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  JSONArray articles=json.optJSONArray(""String_Node_Str"");
  Assert.assertEquals(10,articles.length());
  JSONObject article=articles.optJSONObject(0);
  Assert.assertNotNull(article);
  String article1Id=article.getString(""String_Node_Str"");
  Assert.assertNotNull(article1Id);
  JSONObject articleSubscription=article.optJSONObject(""String_Node_Str"");
  Assert.assertNotNull(articleSubscription.getString(""String_Node_Str""));
  Assert.assertNotNull(articleSubscription.getString(""String_Node_Str""));
  Assert.assertNotNull(article.optString(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",1);
  postParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.post(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(""String_Node_Str"",json.getString(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  subscription=json.optJSONObject(""String_Node_Str"");
  Assert.assertNotNull(subscription);
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  WebResource articleResource=resource().path(""String_Node_Str"" + article1Id + ""String_Node_Str"");
  articleResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  postParams=new MultivaluedMapImpl();
  response=articleResource.post(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(""String_Node_Str"",json.getString(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  MultivaluedMap<String,String> queryParams=new MultivaluedMapImpl();
  queryParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.queryParams(queryParams).get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(9,json.optInt(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(9,json.optInt(""String_Node_Str""));
  articleResource=resource().path(""String_Node_Str"" + article1Id + ""String_Node_Str"");
  articleResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  postParams=new MultivaluedMapImpl();
  response=articleResource.post(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(""String_Node_Str"",json.getString(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  queryParams=new MultivaluedMapImpl();
  queryParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.queryParams(queryParams).get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(10,json.optInt(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id + ""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.post(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(0,json.optInt(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.delete(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(""String_Node_Str"",json.getString(""String_Node_Str""));
}","/** 
 * Test of the subscription resource.
 * @throws JSONException
 */
@Test public void testSubscriptionAddResource() throws JSONException {
  clientUtil.createUser(""String_Node_Str"");
  String subscription1AuthToken=clientUtil.login(""String_Node_Str"");
  WebResource categoryResource=resource().path(""String_Node_Str"");
  categoryResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  MultivaluedMapImpl postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",""String_Node_Str"");
  ClientResponse response=categoryResource.put(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  JSONObject json=response.getEntity(JSONObject.class);
  String category1Id=json.optString(""String_Node_Str"");
  Assert.assertNotNull(category1Id);
  WebResource subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.put(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  String subscription1Id=json.getString(""String_Node_Str"");
  Assert.assertNotNull(subscription1Id);
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",category1Id);
  response=subscriptionResource.post(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(""String_Node_Str"",json.getString(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  int unreadCount=json.optInt(""String_Node_Str"");
  Assert.assertTrue(unreadCount > 0);
  JSONArray categories=json.optJSONArray(""String_Node_Str"");
  Assert.assertNotNull(categories);
  Assert.assertEquals(1,categories.length());
  JSONObject rootCategory=categories.optJSONObject(0);
  categories=rootCategory.getJSONArray(""String_Node_Str"");
  JSONObject technoCategory=categories.optJSONObject(0);
  JSONArray subscriptions=technoCategory.optJSONArray(""String_Node_Str"");
  Assert.assertEquals(1,subscriptions.length());
  JSONObject subscription=subscriptions.getJSONObject(0);
  Assert.assertEquals(10,subscription.getInt(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  subscription=json.optJSONObject(""String_Node_Str"");
  Assert.assertNotNull(subscription);
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  JSONArray articles=json.optJSONArray(""String_Node_Str"");
  Assert.assertEquals(10,articles.length());
  JSONObject article=articles.optJSONObject(0);
  Assert.assertNotNull(article);
  String article1Id=article.getString(""String_Node_Str"");
  Assert.assertNotNull(article1Id);
  JSONObject articleSubscription=article.optJSONObject(""String_Node_Str"");
  Assert.assertNotNull(articleSubscription.getString(""String_Node_Str""));
  Assert.assertNotNull(articleSubscription.getString(""String_Node_Str""));
  Assert.assertNotNull(article.optString(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  postParams=new MultivaluedMapImpl();
  postParams.add(""String_Node_Str"",1);
  postParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.post(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(""String_Node_Str"",json.getString(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  subscription=json.optJSONObject(""String_Node_Str"");
  Assert.assertNotNull(subscription);
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",subscription.optString(""String_Node_Str""));
  WebResource articleResource=resource().path(""String_Node_Str"" + article1Id + ""String_Node_Str"");
  articleResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  postParams=new MultivaluedMapImpl();
  response=articleResource.post(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(""String_Node_Str"",json.getString(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  MultivaluedMap<String,String> queryParams=new MultivaluedMapImpl();
  queryParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.queryParams(queryParams).get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(9,json.optInt(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  queryParams=new MultivaluedMapImpl();
  queryParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.queryParams(queryParams).get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(10,json.optInt(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(9,json.optInt(""String_Node_Str""));
  articleResource=resource().path(""String_Node_Str"" + article1Id + ""String_Node_Str"");
  articleResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  postParams=new MultivaluedMapImpl();
  response=articleResource.post(ClientResponse.class,postParams);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(""String_Node_Str"",json.getString(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  queryParams=new MultivaluedMapImpl();
  queryParams.add(""String_Node_Str"",""String_Node_Str"");
  response=subscriptionResource.queryParams(queryParams).get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(10,json.optInt(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id + ""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.post(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  subscriptionResource=resource().path(""String_Node_Str"");
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.get(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(0,json.optInt(""String_Node_Str""));
  subscriptionResource=resource().path(""String_Node_Str"" + subscription1Id);
  subscriptionResource.addFilter(new CookieAuthenticationFilter(subscription1AuthToken));
  response=subscriptionResource.delete(ClientResponse.class);
  Assert.assertEquals(Status.OK,Status.fromStatusCode(response.getStatus()));
  json=response.getEntity(JSONObject.class);
  Assert.assertEquals(""String_Node_Str"",json.getString(""String_Node_Str""));
}",0.8623337298583325
15672,"/** 
 * Reads an RSS / Atom feed into feed and articles.
 * @param is Input stream
 * @throws Exception
 */
public void readRssFeed(InputStream is) throws Exception {
  SAXParserFactory factory=SAXParserFactory.newInstance();
  factory.setNamespaceAware(true);
  factory.setFeature(""String_Node_Str"",false);
  factory.setFeature(""String_Node_Str"",true);
  SAXParser parser=factory.newSAXParser();
  InputSource source=new InputSource();
  source.setCharacterStream(new InputStreamReader(is));
  try {
    parser.parse(source,this);
  }
 catch (  InternalError e) {
    throw new Exception(e);
  }
  if (atom) {
    String url=new AtomUrlGuesserStrategy().guess(atomLinkList);
    feed.setUrl(url);
  }
  validateFeed();
  fixGuid();
}","/** 
 * Reads an RSS / Atom feed into feed and articles.
 * @param is Input stream
 * @throws Exception
 */
public void readRssFeed(InputStream is) throws Exception {
  SAXParserFactory factory=SAXParserFactory.newInstance();
  factory.setNamespaceAware(true);
  factory.setFeature(""String_Node_Str"",false);
  factory.setFeature(""String_Node_Str"",true);
  SAXParser parser=factory.newSAXParser();
  String xml=CharStreams.toString(new InputStreamReader(is));
  xml=xml.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  try {
    InputSource source=new InputSource(new StringReader(xml));
    parser.parse(source,this);
  }
 catch (  InternalError e) {
    throw new Exception(e);
  }
  if (atom) {
    String url=new AtomUrlGuesserStrategy().guess(atomLinkList);
    feed.setUrl(url);
  }
  validateFeed();
  fixGuid();
}",0.865211810012837
15673,"private Expression readTerm(){
  Expression r;
switch (currentTokenType) {
case AT:
    read();
  r=new Variable(session,readAliasIdentifier());
if (readIf(""String_Node_Str"")) {
  Expression value=readExpression();
  Function function=Function.getFunction(database,""String_Node_Str"");
  function.setParameter(0,r);
  function.setParameter(1,value);
  r=function;
}
break;
case PARAMETER:
boolean indexed=Character.isDigit(sqlCommandChars[parseIndex]);
read();
Parameter p;
if (indexed && currentTokenType == VALUE && currentValue.getType() == Value.INT) {
if (indexedParameterList == null) {
if (parameters == null) {
throw getSyntaxError();
}
 else if (parameters.size() > 0) {
throw DbException.get(ErrorCode.CANNOT_MIX_INDEXED_AND_UNINDEXED_PARAMS);
}
indexedParameterList=New.arrayList();
}
int index=currentValue.getInt() - 1;
if (index < 0 || index >= Constants.MAX_PARAMETER_INDEX) {
throw DbException.getInvalidValueException(""String_Node_Str"",index);
}
if (indexedParameterList.size() <= index) {
indexedParameterList.ensureCapacity(index + 1);
while (indexedParameterList.size() <= index) {
indexedParameterList.add(null);
}
}
p=indexedParameterList.get(index);
if (p == null) {
p=new Parameter(index);
indexedParameterList.set(index,p);
}
read();
}
 else {
if (indexedParameterList != null) {
throw DbException.get(ErrorCode.CANNOT_MIX_INDEXED_AND_UNINDEXED_PARAMS);
}
p=new Parameter(parameters.size());
}
parameters.add(p);
r=p;
break;
case KEYWORD:
if (isToken(""String_Node_Str"") || isToken(""String_Node_Str"") || isToken(""String_Node_Str"")) {
Query query=parseSelect();
r=new Subquery(query);
}
 else {
throw getSyntaxError();
}
break;
case IDENTIFIER:
String name=currentToken;
if (currentTokenQuoted) {
read();
if (readIf(""String_Node_Str"")) {
r=readFunction(null,name);
}
 else if (readIf(""String_Node_Str"")) {
r=readTermObjectDot(name);
}
 else {
r=new ExpressionColumn(database,null,null,name);
}
}
 else {
read();
if (readIf(""String_Node_Str"")) {
r=readTermObjectDot(name);
}
 else if (equalsToken(""String_Node_Str"",name)) {
r=readCase();
}
 else if (readIf(""String_Node_Str"")) {
r=readFunction(null,name);
}
 else if (equalsToken(""String_Node_Str"",name)) {
r=readFunctionWithoutParameters(""String_Node_Str"");
}
 else if (equalsToken(""String_Node_Str"",name)) {
if (readIf(""String_Node_Str"")) {
r=readFunctionWithoutParameters(""String_Node_Str"");
}
 else if (readIf(""String_Node_Str"")) {
r=readFunctionWithoutParameters(""String_Node_Str"");
}
 else if (readIf(""String_Node_Str"")) {
r=readFunctionWithoutParameters(""String_Node_Str"");
}
 else {
r=new ExpressionColumn(database,null,null,name);
}
}
 else if (equalsToken(""String_Node_Str"",name) && readIf(""String_Node_Str"")) {
read(""String_Node_Str"");
Sequence sequence=readSequence();
r=new SequenceValue(sequence);
}
 else if (currentTokenType == VALUE && currentValue.getType() == Value.STRING) {
if (equalsToken(""String_Node_Str"",name) || equalsToken(""String_Node_Str"",name)) {
String date=currentValue.getString();
read();
r=ValueExpression.get(ValueDate.parse(date));
}
 else if (equalsToken(""String_Node_Str"",name) || equalsToken(""String_Node_Str"",name)) {
String time=currentValue.getString();
read();
r=ValueExpression.get(ValueTime.parse(time));
}
 else if (equalsToken(""String_Node_Str"",name) || equalsToken(""String_Node_Str"",name)) {
String timestamp=currentValue.getString();
read();
r=ValueExpression.get(ValueTimestamp.parse(timestamp,session.getDatabase().getMode()));
}
 else if (equalsToken(""String_Node_Str"",name)) {
read();
byte[] buffer=StringUtils.convertHexToBytes(currentValue.getString());
r=ValueExpression.get(ValueBytes.getNoCopy(buffer));
}
 else if (equalsToken(""String_Node_Str"",name)) {
String text=currentValue.getString();
text=StringUtils.replaceAll(text,""String_Node_Str"",""String_Node_Str"");
read();
r=ValueExpression.get(ValueString.get(text));
}
 else if (equalsToken(""String_Node_Str"",name)) {
String text=currentValue.getString();
read();
r=ValueExpression.get(ValueString.get(text));
}
 else {
r=new ExpressionColumn(database,null,null,name);
}
}
 else {
r=new ExpressionColumn(database,null,null,name);
}
}
break;
case MINUS:
read();
if (currentTokenType == VALUE) {
r=ValueExpression.get(currentValue.negate());
if (r.getType() == Value.LONG && r.getValue(session).getLong() == Integer.MIN_VALUE) {
r=ValueExpression.get(ValueInt.get(Integer.MIN_VALUE));
}
 else if (r.getType() == Value.DECIMAL && r.getValue(session).getBigDecimal().compareTo(ValueLong.MIN_BD) == 0) {
r=ValueExpression.get(ValueLong.get(Long.MIN_VALUE));
}
read();
}
 else {
r=new Operation(Operation.NEGATE,readTerm(),null);
}
break;
case PLUS:
read();
r=readTerm();
break;
case OPEN:
read();
if (readIf(""String_Node_Str"")) {
r=new ExpressionList(new Expression[0]);
}
 else {
r=readExpression();
if (readIf(""String_Node_Str"")) {
ArrayList<Expression> list=New.arrayList();
list.add(r);
while (!readIf(""String_Node_Str"")) {
r=readExpression();
list.add(r);
if (!readIf(""String_Node_Str"")) {
read(""String_Node_Str"");
break;
}
}
Expression[] array=new Expression[list.size()];
list.toArray(array);
r=new ExpressionList(array);
}
 else {
read(""String_Node_Str"");
}
}
break;
case TRUE:
read();
r=ValueExpression.get(ValueBoolean.get(true));
break;
case FALSE:
read();
r=ValueExpression.get(ValueBoolean.get(false));
break;
case CURRENT_TIME:
read();
r=readFunctionWithoutParameters(""String_Node_Str"");
break;
case CURRENT_DATE:
read();
r=readFunctionWithoutParameters(""String_Node_Str"");
break;
case CURRENT_TIMESTAMP:
{
Function function=Function.getFunction(database,""String_Node_Str"");
read();
if (readIf(""String_Node_Str"")) {
if (!readIf(""String_Node_Str"")) {
function.setParameter(0,readExpression());
read(""String_Node_Str"");
}
}
function.doneWithParameters();
r=function;
break;
}
case ROWNUM:
read();
if (readIf(""String_Node_Str"")) {
read(""String_Node_Str"");
}
if (currentSelect == null && currentPrepared == null) {
throw getSyntaxError();
}
r=new Rownum(currentSelect == null ? currentPrepared : currentSelect);
break;
case NULL:
read();
r=ValueExpression.getNull();
break;
case VALUE:
r=ValueExpression.get(currentValue);
read();
break;
default :
throw getSyntaxError();
}
if (readIf(""String_Node_Str"")) {
Function function=Function.getFunction(database,""String_Node_Str"");
function.setParameter(0,r);
r=readExpression();
r=new Operation(Operation.PLUS,r,ValueExpression.get(ValueInt.get(1)));
function.setParameter(1,r);
r=function;
read(""String_Node_Str"");
}
if (readIf(""String_Node_Str"")) {
if (isToken(""String_Node_Str"")) {
read(""String_Node_Str"");
read(""String_Node_Str"");
}
if (readIf(""String_Node_Str"")) {
FunctionAlias f=findFunctionAlias(Constants.SCHEMA_MAIN,""String_Node_Str"");
if (f == null) {
throw getSyntaxError();
}
Expression[] args={r};
JavaFunction func=new JavaFunction(f,args);
r=func;
}
 else {
Column col=parseColumnWithType(null);
Function function=Function.getFunction(database,""String_Node_Str"");
function.setDataType(col);
function.setParameter(0,r);
r=function;
}
}
return r;
}","private Expression readTerm(){
  Expression r;
switch (currentTokenType) {
case AT:
    read();
  r=new Variable(session,readAliasIdentifier());
if (readIf(""String_Node_Str"")) {
  Expression value=readExpression();
  Function function=Function.getFunction(database,""String_Node_Str"");
  function.setParameter(0,r);
  function.setParameter(1,value);
  r=function;
}
break;
case PARAMETER:
boolean indexed=Character.isDigit(sqlCommandChars[parseIndex]);
Parameter p;
if (indexed) {
readParameterIndex();
if (indexedParameterList == null) {
if (parameters == null) {
throw getSyntaxError();
}
 else if (parameters.size() > 0) {
throw DbException.get(ErrorCode.CANNOT_MIX_INDEXED_AND_UNINDEXED_PARAMS);
}
indexedParameterList=New.arrayList();
}
int index=currentValue.getInt() - 1;
if (index < 0 || index >= Constants.MAX_PARAMETER_INDEX) {
throw DbException.getInvalidValueException(""String_Node_Str"",index);
}
if (indexedParameterList.size() <= index) {
indexedParameterList.ensureCapacity(index + 1);
while (indexedParameterList.size() <= index) {
indexedParameterList.add(null);
}
}
p=indexedParameterList.get(index);
if (p == null) {
p=new Parameter(index);
indexedParameterList.set(index,p);
}
read();
}
 else {
read();
if (indexedParameterList != null) {
throw DbException.get(ErrorCode.CANNOT_MIX_INDEXED_AND_UNINDEXED_PARAMS);
}
p=new Parameter(parameters.size());
}
parameters.add(p);
r=p;
break;
case KEYWORD:
if (isToken(""String_Node_Str"") || isToken(""String_Node_Str"") || isToken(""String_Node_Str"")) {
Query query=parseSelect();
r=new Subquery(query);
}
 else {
throw getSyntaxError();
}
break;
case IDENTIFIER:
String name=currentToken;
if (currentTokenQuoted) {
read();
if (readIf(""String_Node_Str"")) {
r=readFunction(null,name);
}
 else if (readIf(""String_Node_Str"")) {
r=readTermObjectDot(name);
}
 else {
r=new ExpressionColumn(database,null,null,name);
}
}
 else {
read();
if (readIf(""String_Node_Str"")) {
r=readTermObjectDot(name);
}
 else if (equalsToken(""String_Node_Str"",name)) {
r=readCase();
}
 else if (readIf(""String_Node_Str"")) {
r=readFunction(null,name);
}
 else if (equalsToken(""String_Node_Str"",name)) {
r=readFunctionWithoutParameters(""String_Node_Str"");
}
 else if (equalsToken(""String_Node_Str"",name)) {
if (readIf(""String_Node_Str"")) {
r=readFunctionWithoutParameters(""String_Node_Str"");
}
 else if (readIf(""String_Node_Str"")) {
r=readFunctionWithoutParameters(""String_Node_Str"");
}
 else if (readIf(""String_Node_Str"")) {
r=readFunctionWithoutParameters(""String_Node_Str"");
}
 else {
r=new ExpressionColumn(database,null,null,name);
}
}
 else if (equalsToken(""String_Node_Str"",name) && readIf(""String_Node_Str"")) {
read(""String_Node_Str"");
Sequence sequence=readSequence();
r=new SequenceValue(sequence);
}
 else if (currentTokenType == VALUE && currentValue.getType() == Value.STRING) {
if (equalsToken(""String_Node_Str"",name) || equalsToken(""String_Node_Str"",name)) {
String date=currentValue.getString();
read();
r=ValueExpression.get(ValueDate.parse(date));
}
 else if (equalsToken(""String_Node_Str"",name) || equalsToken(""String_Node_Str"",name)) {
String time=currentValue.getString();
read();
r=ValueExpression.get(ValueTime.parse(time));
}
 else if (equalsToken(""String_Node_Str"",name) || equalsToken(""String_Node_Str"",name)) {
String timestamp=currentValue.getString();
read();
r=ValueExpression.get(ValueTimestamp.parse(timestamp,session.getDatabase().getMode()));
}
 else if (equalsToken(""String_Node_Str"",name)) {
read();
byte[] buffer=StringUtils.convertHexToBytes(currentValue.getString());
r=ValueExpression.get(ValueBytes.getNoCopy(buffer));
}
 else if (equalsToken(""String_Node_Str"",name)) {
String text=currentValue.getString();
text=StringUtils.replaceAll(text,""String_Node_Str"",""String_Node_Str"");
read();
r=ValueExpression.get(ValueString.get(text));
}
 else if (equalsToken(""String_Node_Str"",name)) {
String text=currentValue.getString();
read();
r=ValueExpression.get(ValueString.get(text));
}
 else {
r=new ExpressionColumn(database,null,null,name);
}
}
 else {
r=new ExpressionColumn(database,null,null,name);
}
}
break;
case MINUS:
read();
if (currentTokenType == VALUE) {
r=ValueExpression.get(currentValue.negate());
if (r.getType() == Value.LONG && r.getValue(session).getLong() == Integer.MIN_VALUE) {
r=ValueExpression.get(ValueInt.get(Integer.MIN_VALUE));
}
 else if (r.getType() == Value.DECIMAL && r.getValue(session).getBigDecimal().compareTo(ValueLong.MIN_BD) == 0) {
r=ValueExpression.get(ValueLong.get(Long.MIN_VALUE));
}
read();
}
 else {
r=new Operation(Operation.NEGATE,readTerm(),null);
}
break;
case PLUS:
read();
r=readTerm();
break;
case OPEN:
read();
if (readIf(""String_Node_Str"")) {
r=new ExpressionList(new Expression[0]);
}
 else {
r=readExpression();
if (readIf(""String_Node_Str"")) {
ArrayList<Expression> list=New.arrayList();
list.add(r);
while (!readIf(""String_Node_Str"")) {
r=readExpression();
list.add(r);
if (!readIf(""String_Node_Str"")) {
read(""String_Node_Str"");
break;
}
}
Expression[] array=new Expression[list.size()];
list.toArray(array);
r=new ExpressionList(array);
}
 else {
read(""String_Node_Str"");
}
}
break;
case TRUE:
read();
r=ValueExpression.get(ValueBoolean.get(true));
break;
case FALSE:
read();
r=ValueExpression.get(ValueBoolean.get(false));
break;
case CURRENT_TIME:
read();
r=readFunctionWithoutParameters(""String_Node_Str"");
break;
case CURRENT_DATE:
read();
r=readFunctionWithoutParameters(""String_Node_Str"");
break;
case CURRENT_TIMESTAMP:
{
Function function=Function.getFunction(database,""String_Node_Str"");
read();
if (readIf(""String_Node_Str"")) {
if (!readIf(""String_Node_Str"")) {
function.setParameter(0,readExpression());
read(""String_Node_Str"");
}
}
function.doneWithParameters();
r=function;
break;
}
case ROWNUM:
read();
if (readIf(""String_Node_Str"")) {
read(""String_Node_Str"");
}
if (currentSelect == null && currentPrepared == null) {
throw getSyntaxError();
}
r=new Rownum(currentSelect == null ? currentPrepared : currentSelect);
break;
case NULL:
read();
r=ValueExpression.getNull();
break;
case VALUE:
r=ValueExpression.get(currentValue);
read();
break;
default :
throw getSyntaxError();
}
if (readIf(""String_Node_Str"")) {
Function function=Function.getFunction(database,""String_Node_Str"");
function.setParameter(0,r);
r=readExpression();
r=new Operation(Operation.PLUS,r,ValueExpression.get(ValueInt.get(1)));
function.setParameter(1,r);
r=function;
read(""String_Node_Str"");
}
if (readIf(""String_Node_Str"")) {
if (isToken(""String_Node_Str"")) {
read(""String_Node_Str"");
read(""String_Node_Str"");
}
if (readIf(""String_Node_Str"")) {
FunctionAlias f=findFunctionAlias(Constants.SCHEMA_MAIN,""String_Node_Str"");
if (f == null) {
throw getSyntaxError();
}
Expression[] args={r};
JavaFunction func=new JavaFunction(f,args);
r=func;
}
 else {
Column col=parseColumnWithType(null);
Function function=Function.getFunction(database,""String_Node_Str"");
function.setDataType(col);
function.setParameter(0,r);
r=function;
}
}
return r;
}",0.9921079064428182
15674,"@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  Connection conn=getConnection(""String_Node_Str"");
  testUnwrap(conn);
  testUnsupportedOperations(conn);
  testChangeType(conn);
  testCallTablePrepared(conn);
  testValues(conn);
  testToString(conn);
  testExecuteUpdateCall(conn);
  testPrepareExecute(conn);
  testEnum(conn);
  testUUID(conn);
  testUUIDAsJavaObject(conn);
  testScopedGeneratedKey(conn);
  testLobTempFiles(conn);
  testExecuteErrorTwice(conn);
  testTempView(conn);
  testInsertFunction(conn);
  testPrepareRecompile(conn);
  testMaxRowsChange(conn);
  testUnknownDataType(conn);
  testCancelReuse(conn);
  testCoalesce(conn);
  testPreparedStatementMetaData(conn);
  testDate(conn);
  testDate8(conn);
  testTime8(conn);
  testDateTime8(conn);
  testOffsetDateTime8(conn);
  testArray(conn);
  testUUIDGeneratedKeys(conn);
  testSetObject(conn);
  testPreparedSubquery(conn);
  testLikeIndex(conn);
  testCasewhen(conn);
  testSubquery(conn);
  testObject(conn);
  testIdentity(conn);
  testBatchGeneratedKeys(conn);
  testDataTypes(conn);
  testGetMoreResults(conn);
  testBlob(conn);
  testClob(conn);
  testParameterMetaData(conn);
  testColumnMetaDataWithEquals(conn);
  testColumnMetaDataWithIn(conn);
  conn.close();
  testPreparedStatementWithLiteralsNone();
  deleteDb(""String_Node_Str"");
}","@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  Connection conn=getConnection(""String_Node_Str"");
  testUnwrap(conn);
  testUnsupportedOperations(conn);
  testChangeType(conn);
  testCallTablePrepared(conn);
  testValues(conn);
  testToString(conn);
  testExecuteUpdateCall(conn);
  testPrepareExecute(conn);
  testEnum(conn);
  testUUID(conn);
  testUUIDAsJavaObject(conn);
  testScopedGeneratedKey(conn);
  testLobTempFiles(conn);
  testExecuteErrorTwice(conn);
  testTempView(conn);
  testInsertFunction(conn);
  testPrepareRecompile(conn);
  testMaxRowsChange(conn);
  testUnknownDataType(conn);
  testCancelReuse(conn);
  testCoalesce(conn);
  testPreparedStatementMetaData(conn);
  testDate(conn);
  testDate8(conn);
  testTime8(conn);
  testDateTime8(conn);
  testOffsetDateTime8(conn);
  testArray(conn);
  testUUIDGeneratedKeys(conn);
  testSetObject(conn);
  testPreparedSubquery(conn);
  testLikeIndex(conn);
  testCasewhen(conn);
  testSubquery(conn);
  testObject(conn);
  testIdentity(conn);
  testBatchGeneratedKeys(conn);
  testDataTypes(conn);
  testGetMoreResults(conn);
  testBlob(conn);
  testClob(conn);
  testParameterMetaData(conn);
  testColumnMetaDataWithEquals(conn);
  testColumnMetaDataWithIn(conn);
  conn.close();
  testPreparedStatementWithLiteralsNone();
  testPreparedStatementWithIndexedParameterAndLiteralsNone();
  deleteDb(""String_Node_Str"");
}",0.9775849602313812
15675,"private void testFileSystem() throws IOException {
  FilePathReorderWrites fs=FilePathReorderWrites.register();
  FilePathReorderWrites.setPartialWrites(false);
  String fileName=""String_Node_Str"";
  ByteBuffer empty=ByteBuffer.allocate(1024);
  Random r=new Random(1);
  long minSize=Long.MAX_VALUE;
  long maxSize=0;
  int minWritten=Integer.MAX_VALUE;
  int maxWritten=0;
  for (int i=0; i < 100; i++) {
    fs.setPowerOffCountdown(100,i);
    FileUtils.delete(fileName);
    FileChannel fc=FilePath.get(fileName).open(""String_Node_Str"");
    for (int j=0; j < 20; j++) {
      fc.write(empty,j * 1024);
      empty.flip();
    }
    fs.setPowerOffCountdown(4 + r.nextInt(20),i);
    int lastWritten=0;
    int lastTruncated=0;
    for (int j=20; j >= 0; j--) {
      try {
        byte[] bytes=new byte[1024];
        Arrays.fill(bytes,(byte)j);
        ByteBuffer data=ByteBuffer.wrap(bytes);
        fc.write(data,0);
        lastWritten=j;
      }
 catch (      IOException e) {
        break;
      }
      try {
        fc.truncate(j * 1024);
        lastTruncated=j * 1024;
      }
 catch (      IOException e) {
        break;
      }
    }
    if (lastTruncated <= 0 || lastWritten <= 0) {
      fail();
    }
    fs.setPowerOffCountdown(100,0);
    fc=FilePath.get(fileName).open(""String_Node_Str"");
    ByteBuffer data=ByteBuffer.allocate(1024);
    fc.read(data,0);
    data.flip();
    int got=data.get();
    long size=fc.size();
    minSize=Math.min(minSize,size);
    maxSize=Math.max(minSize,size);
    minWritten=Math.min(minWritten,got);
    maxWritten=Math.max(maxWritten,got);
  }
  assertTrue(minSize < maxSize);
  assertTrue(minWritten < maxWritten);
  FileUtils.delete(fileName);
}","private void testFileSystem() throws IOException {
  FilePathReorderWrites fs=FilePathReorderWrites.register();
  FilePathReorderWrites.setPartialWrites(false);
  String fileName=""String_Node_Str"";
  final ByteBuffer empty=ByteBuffer.allocate(1024);
  Random r=new Random(1);
  long minSize=Long.MAX_VALUE;
  long maxSize=0;
  int minWritten=Integer.MAX_VALUE;
  int maxWritten=0;
  for (int i=0; i < 100; i++) {
    fs.setPowerOffCountdown(100,i);
    FileUtils.delete(fileName);
    FileChannel fc=FilePath.get(fileName).open(""String_Node_Str"");
    for (int j=0; j < 20; j++) {
      fc.write(empty,j * 1024);
      empty.flip();
    }
    fs.setPowerOffCountdown(4 + r.nextInt(20),i);
    int lastWritten=0;
    int lastTruncated=0;
    for (int j=20; j >= 0; j--) {
      try {
        byte[] bytes=new byte[1024];
        Arrays.fill(bytes,(byte)j);
        ByteBuffer data=ByteBuffer.wrap(bytes);
        fc.write(data,0);
        lastWritten=j;
      }
 catch (      IOException e) {
        break;
      }
      try {
        fc.truncate(j * 1024);
        lastTruncated=j * 1024;
      }
 catch (      IOException e) {
        break;
      }
    }
    if (lastTruncated <= 0 || lastWritten <= 0) {
      fail();
    }
    fs.setPowerOffCountdown(100,0);
    fc=FilePath.get(fileName).open(""String_Node_Str"");
    ByteBuffer data=ByteBuffer.allocate(1024);
    fc.read(data,0);
    data.flip();
    int got=data.get();
    long size=fc.size();
    minSize=Math.min(minSize,size);
    maxSize=Math.max(minSize,size);
    minWritten=Math.min(minWritten,got);
    maxWritten=Math.max(maxWritten,got);
  }
  assertTrue(minSize < maxSize);
  assertTrue(minWritten < maxWritten);
  FileUtils.delete(fileName);
}",0.9982466393921684
15676,"private void testMVStore(){
  FilePathReorderWrites fs=FilePathReorderWrites.register();
  String fileName=""String_Node_Str"";
  try {
    for (int i=0; i < 1000; i++) {
      log(i + ""String_Node_Str"");
      fs.setPowerOffCountdown(0,0);
      FileUtils.delete(""String_Node_Str"");
      FileUtils.delete(""String_Node_Str"");
      MVStore store=new MVStore.Builder().fileName(fileName).autoCommitDisabled().open();
      Map<Integer,byte[]> map=store.openMap(""String_Node_Str"");
      map.put(-1,new byte[1]);
      store.commit();
      store.getFileStore().sync();
      Random r=new Random(i);
      int stop=4 + r.nextInt(20);
      log(""String_Node_Str"");
      fs.setPowerOffCountdown(stop,i);
      try {
        for (int j=1; j < 100; j++) {
          Map<Integer,Integer> newMap=store.openMap(""String_Node_Str"" + j);
          newMap.put(j,j * 10);
          int key=r.nextInt(10);
          int len=10 * r.nextInt(1000);
          if (r.nextBoolean()) {
            map.remove(key);
          }
 else {
            map.put(key,new byte[len]);
          }
          log(""String_Node_Str"" + j + ""String_Node_Str"");
          store.commit();
switch (r.nextInt(10)) {
case 0:
            log(""String_Node_Str"");
          store.compact(100,10 * 1024);
        break;
case 1:
      log(""String_Node_Str"");
    store.compactMoveChunks();
  log(""String_Node_Str"");
break;
}
}
fail();
}
 catch (IllegalStateException e) {
log(""String_Node_Str"" + e);
}
try {
store.close();
}
 catch (IllegalStateException e) {
store.closeImmediately();
}
log(""String_Node_Str"");
fs.setPowerOffCountdown(100,0);
if (LOG) {
MVStoreTool.dump(fileName,true);
}
store=new MVStore.Builder().fileName(fileName).autoCommitDisabled().open();
map=store.openMap(""String_Node_Str"");
if (!map.containsKey(-1)) {
fail(""String_Node_Str"" + map.size() + ""String_Node_Str""+ i);
}
 else {
assertEquals(""String_Node_Str"" + i,1,map.get(-1).length);
}
for (int j=0; j < 100; j++) {
Map<Integer,Integer> newMap=store.openMap(""String_Node_Str"" + j);
newMap.get(j);
}
map.keySet();
store.close();
}
}
  finally {
FileUtils.delete(""String_Node_Str"");
FileUtils.delete(""String_Node_Str"");
}
}","private void testMVStore(){
  FilePathReorderWrites fs=FilePathReorderWrites.register();
  String fileName=""String_Node_Str"";
  try {
    for (int i=0; i < 1000; i++) {
      log(i + ""String_Node_Str"");
      fs.setPowerOffCountdown(0,0);
      FileUtils.delete(""String_Node_Str"");
      FileUtils.delete(""String_Node_Str"");
      MVStore store=new MVStore.Builder().fileName(fileName).autoCommitDisabled().open();
      Map<Integer,byte[]> map=store.openMap(""String_Node_Str"");
      map.put(-1,new byte[1]);
      store.commit();
      store.getFileStore().sync();
      Random r=new Random(i);
      int stop=4 + r.nextInt(20);
      log(""String_Node_Str"");
      fs.setPowerOffCountdown(stop,i);
      try {
        for (int j=1; j < 100; j++) {
          Map<Integer,Integer> newMap=store.openMap(""String_Node_Str"" + j);
          newMap.put(j,j * 10);
          int key=r.nextInt(10);
          int len=10 * r.nextInt(1000);
          if (r.nextBoolean()) {
            map.remove(key);
          }
 else {
            map.put(key,new byte[len]);
          }
          log(""String_Node_Str"" + j + ""String_Node_Str"");
          store.commit();
switch (r.nextInt(10)) {
case 0:
            log(""String_Node_Str"");
          store.compact(100,10 * 1024);
        break;
case 1:
      log(""String_Node_Str"");
    store.compactMoveChunks();
  log(""String_Node_Str"");
break;
}
}
fail();
}
 catch (IllegalStateException e) {
log(""String_Node_Str"" + e + ""String_Node_Str""+ e.getCause());
}
try {
store.close();
}
 catch (IllegalStateException e) {
store.closeImmediately();
}
log(""String_Node_Str"");
fs.setPowerOffCountdown(100,0);
if (LOG) {
MVStoreTool.dump(fileName,true);
}
store=new MVStore.Builder().fileName(fileName).autoCommitDisabled().open();
map=store.openMap(""String_Node_Str"");
if (!map.containsKey(-1)) {
fail(""String_Node_Str"" + map.size() + ""String_Node_Str""+ i);
}
 else {
assertEquals(""String_Node_Str"" + i,1,map.get(-1).length);
}
for (int j=0; j < 100; j++) {
Map<Integer,Integer> newMap=store.openMap(""String_Node_Str"" + j);
newMap.get(j);
}
map.keySet();
store.close();
}
}
  finally {
FileUtils.delete(""String_Node_Str"");
FileUtils.delete(""String_Node_Str"");
}
}",0.9921550530687586
15677,"@Override public int write(ByteBuffer src,long position) throws IOException {
  if (FilePathReorderWrites.getPartialWrites() && src.remaining() > 2) {
    ByteBuffer buf1=src.slice();
    ByteBuffer buf2=src.slice();
    int len1=src.remaining() / 2;
    int len2=src.remaining() - len1;
    buf1.limit(buf1.limit() - len2);
    buf2.position(buf2.position() + len1);
    int x=addOperation(new FileWriteOperation(id++,position,buf1));
    x+=addOperation(new FileWriteOperation(id++,position + len1,buf2));
    return x;
  }
  return addOperation(new FileWriteOperation(id++,position,src));
}","@Override public int write(ByteBuffer src,long position) throws IOException {
  if (FilePathReorderWrites.isPartialWrites() && src.remaining() > 2) {
    final int tmp=src.remaining();
    ByteBuffer buf1=src.slice();
    ByteBuffer buf2=src.slice();
    int len1=src.remaining() / 2;
    int len2=src.remaining() - len1;
    buf1.limit(buf1.limit() - len2);
    buf2.position(buf2.position() + len1);
    int x=addOperation(new FileWriteOperation(id++,position,buf1));
    x+=addOperation(new FileWriteOperation(id++,position + len1,buf2));
    src.position(src.position() + x);
    return x;
  }
  return addOperation(new FileWriteOperation(id++,position,src));
}",0.9284578696343402
15678,"/** 
 * Whether partial writes are possible (writing only part of the data).
 * @param partialWrites true to enable
 */
public static void setPartialWrites(boolean partialWrites){
  FilePathReorderWrites.partialWrites=partialWrites;
}","/** 
 * Whether partial writes are possible (writing only part of the data).
 * @param b true to enable
 */
public static void setPartialWrites(boolean b){
  partialWrites=b;
}",0.8439024390243902
15679,"@Override public FileChannel open(String mode) throws IOException {
  InputStream in=newInputStream();
  FilePath copy=FilePath.get(getBase().toString() + ""String_Node_Str"");
  OutputStream out=copy.newOutputStream(false);
  IOUtils.copy(in,out);
  FileChannel base=getBase().open(mode);
  FileChannel readBase=copy.open(mode);
  return new FileReorderWrites(this,base,readBase);
}","@Override public FileChannel open(String mode) throws IOException {
  InputStream in=newInputStream();
  FilePath copy=FilePath.get(getBase().toString() + ""String_Node_Str"");
  OutputStream out=copy.newOutputStream(false);
  IOUtils.copy(in,out);
  in.close();
  out.close();
  FileChannel base=getBase().open(mode);
  FileChannel readBase=copy.open(mode);
  return new FileReorderWrites(this,base,readBase);
}",0.963337547408344
15680,"@Override public int update(){
  session.commit(true);
  Table synonym=getSchema().findTableOrView(session,synonymName);
  if (synonym == null) {
    if (!ifExists) {
      throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1,synonymName);
    }
  }
 else {
    if (!Table.SYNONYM.equals(synonym.getTableType())) {
      throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1,synonymName);
    }
    session.getUser().checkRight(synonym,Right.ALL);
    synonym.lock(session,true,true);
    session.getDatabase().removeSchemaObject(session,synonym);
  }
  return 0;
}","@Override public int update(){
  session.commit(true);
  Table synonym=getSchema().findTableOrView(session,synonymName);
  if (synonym == null) {
    if (!ifExists) {
      throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1,synonymName);
    }
  }
 else {
    if (!TableType.SYNONYM.equals(synonym.getTableType())) {
      throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1,synonymName);
    }
    session.getUser().checkRight(synonym,Right.ALL);
    synonym.lock(session,true,true);
    session.getDatabase().removeSchemaObject(session,synonym);
  }
  return 0;
}",0.9965277777777778
15681,"/** 
 * Generate the data for the given metadata table using the given first and last row filters.
 * @param session the session
 * @param first the first row to return
 * @param last the last row to return
 * @return the generated rows
 */
public ArrayList<Row> generateRows(Session session,SearchRow first,SearchRow last){
  Value indexFrom=null, indexTo=null;
  if (indexColumn >= 0) {
    if (first != null) {
      indexFrom=first.getValue(indexColumn);
    }
    if (last != null) {
      indexTo=last.getValue(indexColumn);
    }
  }
  ArrayList<Row> rows=New.arrayList();
  String catalog=identifier(database.getShortName());
  boolean admin=session.getUser().isAdmin();
switch (type) {
case TABLES:
{
      for (      Table table : getAllTables(session)) {
        String tableName=identifier(table.getName());
        if (!checkIndex(session,tableName,indexFrom,indexTo)) {
          continue;
        }
        if (hideTable(table,session)) {
          continue;
        }
        String storageType;
        if (table.isTemporary()) {
          if (table.isGlobalTemporary()) {
            storageType=""String_Node_Str"";
          }
 else {
            storageType=""String_Node_Str"";
          }
        }
 else {
          storageType=table.isPersistIndexes() ? ""String_Node_Str"" : ""String_Node_Str"";
        }
        String sql=table.getCreateSQL();
        if (!admin) {
          if (sql != null && sql.contains(JdbcSQLException.HIDE_SQL)) {
            sql=""String_Node_Str"";
          }
        }
        add(rows,catalog,identifier(table.getSchema().getName()),tableName,table.getTableType().toString(),storageType,sql,replaceNullWithEmpty(table.getComment()),""String_Node_Str"" + table.getMaxDataModificationId(),""String_Node_Str"" + table.getId(),null,table.getClass().getName(),""String_Node_Str"" + table.getRowCountApproximation());
      }
      break;
    }
case COLUMNS:
{
    final ArrayList<Table> tablesToList;
    if (indexFrom != null && indexTo != null && indexFrom.equals(indexTo)) {
      String tableName=identifier(indexFrom.getString());
      tablesToList=getTablesByName(session,tableName);
    }
 else {
      tablesToList=getAllTables(session);
    }
    for (    Table table : tablesToList) {
      String tableName=identifier(table.getName());
      if (!checkIndex(session,tableName,indexFrom,indexTo)) {
        continue;
      }
      if (hideTable(table,session)) {
        continue;
      }
      Column[] cols=table.getColumns();
      String collation=database.getCompareMode().getName();
      for (int j=0; j < cols.length; j++) {
        Column c=cols[j];
        Sequence sequence=c.getSequence();
        add(rows,catalog,identifier(table.getSchema().getName()),tableName,identifier(c.getName()),String.valueOf(j + 1),c.getDefaultSQL(),c.isNullable() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"" + DataType.convertTypeToSQLType(c.getType()),""String_Node_Str"" + c.getPrecisionAsInt(),""String_Node_Str"" + c.getPrecisionAsInt(),""String_Node_Str"" + c.getPrecisionAsInt(),""String_Node_Str"",""String_Node_Str"" + c.getScale(),CHARACTER_SET_NAME,collation,identifier(DataType.getDataType(c.getType()).name),""String_Node_Str"" + (c.isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls),""String_Node_Str"" + (c.getComputed() ? ""String_Node_Str"" : ""String_Node_Str""),""String_Node_Str"" + (c.getSelectivity()),c.getCheckConstraintSQL(session,c.getName()),sequence == null ? null : sequence.getName(),replaceNullWithEmpty(c.getComment()),null);
      }
    }
    break;
  }
case INDEXES:
{
  final ArrayList<Table> tablesToList;
  if (indexFrom != null && indexTo != null && indexFrom.equals(indexTo)) {
    String tableName=identifier(indexFrom.getString());
    tablesToList=getTablesByName(session,tableName);
  }
 else {
    tablesToList=getAllTables(session);
  }
  for (  Table table : tablesToList) {
    String tableName=identifier(table.getName());
    if (!checkIndex(session,tableName,indexFrom,indexTo)) {
      continue;
    }
    if (hideTable(table,session)) {
      continue;
    }
    ArrayList<Index> indexes=table.getIndexes();
    ArrayList<Constraint> constraints=table.getConstraints();
    for (int j=0; indexes != null && j < indexes.size(); j++) {
      Index index=indexes.get(j);
      if (index.getCreateSQL() == null) {
        continue;
      }
      String constraintName=null;
      for (int k=0; constraints != null && k < constraints.size(); k++) {
        Constraint constraint=constraints.get(k);
        if (constraint.usesIndex(index)) {
          if (index.getIndexType().isPrimaryKey()) {
            if (constraint.getConstraintType().equals(Constraint.PRIMARY_KEY)) {
              constraintName=constraint.getName();
            }
          }
 else {
            constraintName=constraint.getName();
          }
        }
      }
      IndexColumn[] cols=index.getIndexColumns();
      String indexClass;
      if (index instanceof MultiVersionIndex) {
        indexClass=((MultiVersionIndex)index).getBaseIndex().getClass().getName();
      }
 else {
        indexClass=index.getClass().getName();
      }
      for (int k=0; k < cols.length; k++) {
        IndexColumn idxCol=cols[k];
        Column column=idxCol.column;
        add(rows,catalog,identifier(table.getSchema().getName()),tableName,index.getIndexType().isUnique() ? ""String_Node_Str"" : ""String_Node_Str"",identifier(index.getName()),""String_Node_Str"" + (k + 1),identifier(column.getName()),""String_Node_Str"",index.getIndexType().isPrimaryKey() ? ""String_Node_Str"" : ""String_Node_Str"",index.getIndexType().getSQL(),index.getIndexType().getBelongsToConstraint() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"" + DatabaseMetaData.tableIndexOther,(idxCol.sortType & SortOrder.DESCENDING) != 0 ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",replaceNullWithEmpty(index.getComment()),index.getCreateSQL(),""String_Node_Str"" + index.getId(),""String_Node_Str"" + idxCol.sortType,constraintName,indexClass,index.getIndexType().isAffinity() ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
  }
  break;
}
case TABLE_TYPES:
{
add(rows,TableType.TABLE.toString());
add(rows,TableType.TABLE_LINK.toString());
add(rows,TableType.SYSTEM_TABLE.toString());
add(rows,TableType.VIEW.toString());
add(rows,TableType.EXTERNAL_TABLE_ENGINE.toString());
break;
}
case CATALOGS:
{
add(rows,catalog);
break;
}
case SETTINGS:
{
for (Setting s : database.getAllSettings()) {
String value=s.getStringValue();
if (value == null) {
value=""String_Node_Str"" + s.getIntValue();
}
add(rows,identifier(s.getName()),value);
}
add(rows,""String_Node_Str"",""String_Node_Str"" + Constants.BUILD_ID);
add(rows,""String_Node_Str"",""String_Node_Str"" + Constants.VERSION_MAJOR);
add(rows,""String_Node_Str"",""String_Node_Str"" + Constants.VERSION_MINOR);
add(rows,""String_Node_Str"",""String_Node_Str"" + Constants.getFullVersion());
if (admin) {
String[] settings={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
for (String s : settings) {
add(rows,""String_Node_Str"" + s,Utils.getProperty(s,""String_Node_Str""));
}
}
add(rows,""String_Node_Str"",database.getExclusiveSession() == null ? ""String_Node_Str"" : ""String_Node_Str"");
add(rows,""String_Node_Str"",database.getMode().getName());
add(rows,""String_Node_Str"",database.isMultiThreaded() ? ""String_Node_Str"" : ""String_Node_Str"");
add(rows,""String_Node_Str"",database.isMultiVersion() ? ""String_Node_Str"" : ""String_Node_Str"");
add(rows,""String_Node_Str"",""String_Node_Str"" + session.getQueryTimeout());
add(rows,""String_Node_Str"",""String_Node_Str"" + database.getRetentionTime());
add(rows,""String_Node_Str"",""String_Node_Str"" + database.getLogMode());
ArrayList<String> settingNames=New.arrayList();
HashMap<String,String> s=database.getSettings().getSettings();
for (String k : s.keySet()) {
settingNames.add(k);
}
Collections.sort(settingNames);
for (String k : settingNames) {
add(rows,k,s.get(k));
}
if (database.isPersistent()) {
PageStore store=database.getPageStore();
if (store != null) {
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getWriteCountTotal());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getWriteCount());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getReadCount());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getPageCount());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getPageSize());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getCache().getMaxMemory());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getCache().getMemory());
}
Store mvStore=database.getMvStore();
if (mvStore != null) {
FileStore fs=mvStore.getStore().getFileStore();
add(rows,""String_Node_Str"",""String_Node_Str"" + fs.getWriteCount());
add(rows,""String_Node_Str"",""String_Node_Str"" + fs.getReadCount());
long size;
try {
  size=fs.getFile().size();
}
 catch (IOException e) {
  throw DbException.convertIOException(e,""String_Node_Str"");
}
int pageSize=4 * 1024;
long pageCount=size / pageSize;
add(rows,""String_Node_Str"",""String_Node_Str"" + pageCount);
add(rows,""String_Node_Str"",""String_Node_Str"" + pageSize);
add(rows,""String_Node_Str"",""String_Node_Str"" + mvStore.getStore().getCacheSize());
add(rows,""String_Node_Str"",""String_Node_Str"" + mvStore.getStore().getCacheSizeUsed());
}
}
break;
}
case TYPE_INFO:
{
for (DataType t : DataType.getTypes()) {
if (t.hidden || t.sqlType == Value.NULL) {
continue;
}
add(rows,t.name,String.valueOf(t.sqlType),String.valueOf(MathUtils.convertLongToInt(t.maxPrecision)),t.prefix,t.suffix,t.params,String.valueOf(t.autoIncrement),String.valueOf(t.minScale),String.valueOf(t.maxScale),t.decimal ? ""String_Node_Str"" : null,String.valueOf(t.sqlTypePos),String.valueOf(t.caseSensitive),""String_Node_Str"" + DatabaseMetaData.typeNullable,""String_Node_Str"" + DatabaseMetaData.typeSearchable);
}
break;
}
case HELP:
{
String resource=""String_Node_Str"";
try {
byte[] data=Utils.getResource(resource);
Reader reader=new InputStreamReader(new ByteArrayInputStream(data));
Csv csv=new Csv();
csv.setLineCommentCharacter('#');
ResultSet rs=csv.read(reader,null);
for (int i=0; rs.next(); i++) {
add(rows,String.valueOf(i),rs.getString(1).trim(),rs.getString(2).trim(),rs.getString(3).trim(),rs.getString(4).trim());
}
}
 catch (Exception e) {
throw DbException.convert(e);
}
break;
}
case SEQUENCES:
{
for (SchemaObject obj : database.getAllSchemaObjects(DbObject.SEQUENCE)) {
Sequence s=(Sequence)obj;
add(rows,catalog,identifier(s.getSchema().getName()),identifier(s.getName()),String.valueOf(s.getCurrentValue()),String.valueOf(s.getIncrement()),s.getBelongsToTable() ? ""String_Node_Str"" : ""String_Node_Str"",replaceNullWithEmpty(s.getComment()),String.valueOf(s.getCacheSize()),String.valueOf(s.getMinValue()),String.valueOf(s.getMaxValue()),s.getCycle() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"" + s.getId());
}
break;
}
case USERS:
{
for (User u : database.getAllUsers()) {
if (admin || session.getUser() == u) {
add(rows,identifier(u.getName()),String.valueOf(u.isAdmin()),replaceNullWithEmpty(u.getComment()),""String_Node_Str"" + u.getId());
}
}
break;
}
case ROLES:
{
for (Role r : database.getAllRoles()) {
if (admin || session.getUser().isRoleGranted(r)) {
add(rows,identifier(r.getName()),replaceNullWithEmpty(r.getComment()),""String_Node_Str"" + r.getId());
}
}
break;
}
case RIGHTS:
{
if (admin) {
for (Right r : database.getAllRights()) {
Role role=r.getGrantedRole();
DbObject grantee=r.getGrantee();
String rightType=grantee.getType() == DbObject.USER ? ""String_Node_Str"" : ""String_Node_Str"";
if (role == null) {
DbObject object=r.getGrantedObject();
Schema schema=null;
Table table=null;
if (object != null) {
if (object instanceof Schema) {
schema=(Schema)object;
}
 else if (object instanceof Table) {
table=(Table)object;
schema=table.getSchema();
}
}
String tableName=(table != null) ? identifier(table.getName()) : ""String_Node_Str"";
String schemaName=(schema != null) ? identifier(schema.getName()) : ""String_Node_Str"";
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
add(rows,identifier(grantee.getName()),rightType,""String_Node_Str"",r.getRights(),schemaName,tableName,""String_Node_Str"" + r.getId());
}
 else {
add(rows,identifier(grantee.getName()),rightType,identifier(role.getName()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + r.getId());
}
}
}
break;
}
case FUNCTION_ALIASES:
{
for (SchemaObject aliasAsSchemaObject : database.getAllSchemaObjects(DbObject.FUNCTION_ALIAS)) {
FunctionAlias alias=(FunctionAlias)aliasAsSchemaObject;
JavaMethod[] methods;
try {
methods=alias.getJavaMethods();
}
 catch (DbException e) {
methods=new JavaMethod[0];
}
for (FunctionAlias.JavaMethod method : methods) {
int returnsResult=method.getDataType() == Value.NULL ? DatabaseMetaData.procedureNoResult : DatabaseMetaData.procedureReturnsResult;
add(rows,catalog,alias.getSchema().getName(),identifier(alias.getName()),alias.getJavaClassName(),alias.getJavaMethodName(),""String_Node_Str"" + DataType.convertTypeToSQLType(method.getDataType()),DataType.getDataType(method.getDataType()).name,""String_Node_Str"" + method.getParameterCount(),""String_Node_Str"" + returnsResult,replaceNullWithEmpty(alias.getComment()),""String_Node_Str"" + alias.getId(),alias.getSource());
}
}
for (UserAggregate agg : database.getAllAggregates()) {
int returnsResult=DatabaseMetaData.procedureReturnsResult;
add(rows,catalog,Constants.SCHEMA_MAIN,identifier(agg.getName()),agg.getJavaClassName(),""String_Node_Str"",""String_Node_Str"" + DataType.convertTypeToSQLType(Value.NULL),DataType.getDataType(Value.NULL).name,""String_Node_Str"",""String_Node_Str"" + returnsResult,replaceNullWithEmpty(agg.getComment()),""String_Node_Str"" + agg.getId(),""String_Node_Str"");
}
break;
}
case FUNCTION_COLUMNS:
{
for (SchemaObject aliasAsSchemaObject : database.getAllSchemaObjects(DbObject.FUNCTION_ALIAS)) {
FunctionAlias alias=(FunctionAlias)aliasAsSchemaObject;
JavaMethod[] methods;
try {
methods=alias.getJavaMethods();
}
 catch (DbException e) {
methods=new JavaMethod[0];
}
for (FunctionAlias.JavaMethod method : methods) {
if (method.getDataType() != Value.NULL) {
DataType dt=DataType.getDataType(method.getDataType());
add(rows,catalog,alias.getSchema().getName(),identifier(alias.getName()),alias.getJavaClassName(),alias.getJavaMethodName(),""String_Node_Str"" + method.getParameterCount(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + DataType.convertTypeToSQLType(method.getDataType()),dt.name,""String_Node_Str"" + MathUtils.convertLongToInt(dt.defaultPrecision),""String_Node_Str"" + dt.defaultScale,""String_Node_Str"",""String_Node_Str"" + DatabaseMetaData.columnNullableUnknown,""String_Node_Str"" + DatabaseMetaData.procedureColumnReturn,""String_Node_Str"",null);
}
Class<?>[] columnList=method.getColumnClasses();
for (int k=0; k < columnList.length; k++) {
if (method.hasConnectionParam() && k == 0) {
continue;
}
Class<?> clazz=columnList[k];
int dataType=DataType.getTypeFromClass(clazz);
DataType dt=DataType.getDataType(dataType);
int nullable=clazz.isPrimitive() ? DatabaseMetaData.columnNoNulls : DatabaseMetaData.columnNullable;
add(rows,catalog,alias.getSchema().getName(),identifier(alias.getName()),alias.getJavaClassName(),alias.getJavaMethodName(),""String_Node_Str"" + method.getParameterCount(),""String_Node_Str"" + (k + (method.hasConnectionParam() ? 0 : 1)),""String_Node_Str"" + (k + 1),""String_Node_Str"" + DataType.convertTypeToSQLType(dt.type),dt.name,""String_Node_Str"" + MathUtils.convertLongToInt(dt.defaultPrecision),""String_Node_Str"" + dt.defaultScale,""String_Node_Str"",""String_Node_Str"" + nullable,""String_Node_Str"" + DatabaseMetaData.procedureColumnIn,""String_Node_Str"",null);
}
}
}
break;
}
case SCHEMATA:
{
String collation=database.getCompareMode().getName();
for (Schema schema : database.getAllSchemas()) {
add(rows,catalog,identifier(schema.getName()),identifier(schema.getOwner().getName()),CHARACTER_SET_NAME,collation,Constants.SCHEMA_MAIN.equals(schema.getName()) ? ""String_Node_Str"" : ""String_Node_Str"",replaceNullWithEmpty(schema.getComment()),""String_Node_Str"" + schema.getId());
}
break;
}
case TABLE_PRIVILEGES:
{
for (Right r : database.getAllRights()) {
DbObject object=r.getGrantedObject();
if (!(object instanceof Table)) {
continue;
}
Table table=(Table)object;
if (hideTable(table,session)) {
continue;
}
String tableName=identifier(table.getName());
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
addPrivileges(rows,r.getGrantee(),catalog,table,null,r.getRightMask());
}
break;
}
case COLUMN_PRIVILEGES:
{
for (Right r : database.getAllRights()) {
DbObject object=r.getGrantedObject();
if (!(object instanceof Table)) {
continue;
}
Table table=(Table)object;
if (hideTable(table,session)) {
continue;
}
String tableName=identifier(table.getName());
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
DbObject grantee=r.getGrantee();
int mask=r.getRightMask();
for (Column column : table.getColumns()) {
addPrivileges(rows,grantee,catalog,table,column.getName(),mask);
}
}
break;
}
case COLLATIONS:
{
for (Locale l : Collator.getAvailableLocales()) {
add(rows,CompareMode.getName(l),l.toString());
}
break;
}
case VIEWS:
{
for (Table table : getAllTables(session)) {
if (table.getTableType() != TableType.VIEW) {
continue;
}
String tableName=identifier(table.getName());
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
TableView view=(TableView)table;
add(rows,catalog,identifier(table.getSchema().getName()),tableName,table.getCreateSQL(),""String_Node_Str"",""String_Node_Str"",view.isInvalid() ? ""String_Node_Str"" : ""String_Node_Str"",replaceNullWithEmpty(view.getComment()),""String_Node_Str"" + view.getId());
}
break;
}
case IN_DOUBT:
{
ArrayList<InDoubtTransaction> prepared=database.getInDoubtTransactions();
if (prepared != null && admin) {
for (InDoubtTransaction prep : prepared) {
add(rows,prep.getTransactionName(),prep.getState());
}
}
break;
}
case CROSS_REFERENCES:
{
for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTRAINT)) {
Constraint constraint=(Constraint)obj;
if (!(constraint.getConstraintType().equals(Constraint.REFERENTIAL))) {
continue;
}
ConstraintReferential ref=(ConstraintReferential)constraint;
IndexColumn[] cols=ref.getColumns();
IndexColumn[] refCols=ref.getRefColumns();
Table tab=ref.getTable();
Table refTab=ref.getRefTable();
String tableName=identifier(refTab.getName());
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
int update=getRefAction(ref.getUpdateAction());
int delete=getRefAction(ref.getDeleteAction());
for (int j=0; j < cols.length; j++) {
add(rows,catalog,identifier(refTab.getSchema().getName()),identifier(refTab.getName()),identifier(refCols[j].column.getName()),catalog,identifier(tab.getSchema().getName()),identifier(tab.getName()),identifier(cols[j].column.getName()),String.valueOf(j + 1),String.valueOf(update),String.valueOf(delete),identifier(ref.getName()),identifier(ref.getUniqueIndex().getName()),""String_Node_Str"" + DatabaseMetaData.importedKeyNotDeferrable);
}
}
break;
}
case CONSTRAINTS:
{
for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTRAINT)) {
Constraint constraint=(Constraint)obj;
String constraintType=constraint.getConstraintType();
String checkExpression=null;
IndexColumn[] indexColumns=null;
Table table=constraint.getTable();
if (hideTable(table,session)) {
continue;
}
Index index=constraint.getUniqueIndex();
String uniqueIndexName=null;
if (index != null) {
uniqueIndexName=index.getName();
}
String tableName=identifier(table.getName());
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
if (constraintType.equals(Constraint.CHECK)) {
checkExpression=((ConstraintCheck)constraint).getExpression().getSQL();
}
 else if (constraintType.equals(Constraint.UNIQUE) || constraintType.equals(Constraint.PRIMARY_KEY)) {
indexColumns=((ConstraintUnique)constraint).getColumns();
}
 else if (constraintType.equals(Constraint.REFERENTIAL)) {
indexColumns=((ConstraintReferential)constraint).getColumns();
}
String columnList=null;
if (indexColumns != null) {
StatementBuilder buff=new StatementBuilder();
for (IndexColumn col : indexColumns) {
buff.appendExceptFirst(""String_Node_Str"");
buff.append(col.column.getName());
}
columnList=buff.toString();
}
add(rows,catalog,identifier(constraint.getSchema().getName()),identifier(constraint.getName()),constraintType,catalog,identifier(table.getSchema().getName()),tableName,uniqueIndexName,checkExpression,columnList,replaceNullWithEmpty(constraint.getComment()),constraint.getCreateSQL(),""String_Node_Str"" + constraint.getId());
}
break;
}
case CONSTANTS:
{
for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTANT)) {
Constant constant=(Constant)obj;
ValueExpression expr=constant.getValue();
add(rows,catalog,identifier(constant.getSchema().getName()),identifier(constant.getName()),""String_Node_Str"" + DataType.convertTypeToSQLType(expr.getType()),replaceNullWithEmpty(constant.getComment()),expr.getSQL(),""String_Node_Str"" + constant.getId());
}
break;
}
case DOMAINS:
{
for (UserDataType dt : database.getAllUserDataTypes()) {
Column col=dt.getColumn();
add(rows,catalog,Constants.SCHEMA_MAIN,identifier(dt.getName()),col.getDefaultSQL(),col.isNullable() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"" + col.getDataType().sqlType,""String_Node_Str"" + col.getPrecisionAsInt(),""String_Node_Str"" + col.getScale(),col.getDataType().name,""String_Node_Str"" + col.getSelectivity(),""String_Node_Str"" + col.getCheckConstraintSQL(session,""String_Node_Str""),replaceNullWithEmpty(dt.getComment()),""String_Node_Str"" + dt.getCreateSQL(),""String_Node_Str"" + dt.getId());
}
break;
}
case TRIGGERS:
{
for (SchemaObject obj : database.getAllSchemaObjects(DbObject.TRIGGER)) {
TriggerObject trigger=(TriggerObject)obj;
Table table=trigger.getTable();
add(rows,catalog,identifier(trigger.getSchema().getName()),identifier(trigger.getName()),trigger.getTypeNameList(),catalog,identifier(table.getSchema().getName()),identifier(table.getName()),""String_Node_Str"" + trigger.isBefore(),trigger.getTriggerClassName(),""String_Node_Str"" + trigger.getQueueSize(),""String_Node_Str"" + trigger.isNoWait(),replaceNullWithEmpty(trigger.getComment()),trigger.getCreateSQL(),""String_Node_Str"" + trigger.getId());
}
break;
}
case SESSIONS:
{
long now=System.currentTimeMillis();
for (Session s : database.getSessions(false)) {
if (admin || s == session) {
Command command=s.getCurrentCommand();
long start=s.getCurrentCommandStart();
if (start == 0) {
start=now;
}
add(rows,""String_Node_Str"" + s.getId(),s.getUser().getName(),new Timestamp(s.getSessionStart()).toString(),command == null ? null : command.toString(),new Timestamp(start).toString(),""String_Node_Str"" + s.containsUncommitted());
}
}
break;
}
case LOCKS:
{
for (Session s : database.getSessions(false)) {
if (admin || s == session) {
for (Table table : s.getLocks()) {
add(rows,table.getSchema().getName(),table.getName(),""String_Node_Str"" + s.getId(),table.isLockedExclusivelyBy(s) ? ""String_Node_Str"" : ""String_Node_Str"");
}
}
}
break;
}
case SESSION_STATE:
{
for (String name : session.getVariableNames()) {
Value v=session.getVariable(name);
add(rows,""String_Node_Str"" + name,""String_Node_Str"" + name + ""String_Node_Str""+ v.getSQL());
}
for (Table table : session.getLocalTempTables()) {
add(rows,""String_Node_Str"" + table.getName(),table.getCreateSQL());
}
String[] path=session.getSchemaSearchPath();
if (path != null && path.length > 0) {
StatementBuilder buff=new StatementBuilder(""String_Node_Str"");
for (String p : path) {
buff.appendExceptFirst(""String_Node_Str"");
buff.append(StringUtils.quoteIdentifier(p));
}
add(rows,""String_Node_Str"",buff.toString());
}
String schema=session.getCurrentSchemaName();
if (schema != null) {
add(rows,""String_Node_Str"",""String_Node_Str"" + StringUtils.quoteIdentifier(schema));
}
break;
}
case QUERY_STATISTICS:
{
QueryStatisticsData control=database.getQueryStatisticsData();
if (control != null) {
for (QueryStatisticsData.QueryEntry entry : control.getQueries()) {
add(rows,entry.sqlStatement,""String_Node_Str"" + entry.count,""String_Node_Str"" + entry.executionTimeMinNanos / 1000d / 1000,""String_Node_Str"" + entry.executionTimeMaxNanos / 1000d / 1000,""String_Node_Str"" + entry.executionTimeCumulativeNanos / 1000d / 1000,""String_Node_Str"" + entry.executionTimeMeanNanos / 1000d / 1000,""String_Node_Str"" + entry.getExecutionTimeStandardDeviation() / 1000d / 1000,""String_Node_Str"" + entry.rowCountMin,""String_Node_Str"" + entry.rowCountMax,""String_Node_Str"" + entry.rowCountCumulative,""String_Node_Str"" + entry.rowCountMean,""String_Node_Str"" + entry.getRowCountStandardDeviation());
}
}
break;
}
case SYNONYMS:
{
for (Table table : getAllTables(session)) {
if (!table.getTableType().equals(Table.SYNONYM)) {
continue;
}
String synonymName=identifier(table.getName());
TableSynonym synonym=(TableSynonym)table;
add(rows,catalog,identifier(table.getSchema().getName()),synonymName,synonym.getSynonymForName(),synonym.isInvalid() ? ""String_Node_Str"" : ""String_Node_Str"",replaceNullWithEmpty(synonym.getComment()),""String_Node_Str"" + synonym.getId());
}
break;
}
default :
DbException.throwInternalError(""String_Node_Str"" + type);
}
return rows;
}","/** 
 * Generate the data for the given metadata table using the given first and last row filters.
 * @param session the session
 * @param first the first row to return
 * @param last the last row to return
 * @return the generated rows
 */
public ArrayList<Row> generateRows(Session session,SearchRow first,SearchRow last){
  Value indexFrom=null, indexTo=null;
  if (indexColumn >= 0) {
    if (first != null) {
      indexFrom=first.getValue(indexColumn);
    }
    if (last != null) {
      indexTo=last.getValue(indexColumn);
    }
  }
  ArrayList<Row> rows=New.arrayList();
  String catalog=identifier(database.getShortName());
  boolean admin=session.getUser().isAdmin();
switch (type) {
case TABLES:
{
      for (      Table table : getAllTables(session)) {
        String tableName=identifier(table.getName());
        if (!checkIndex(session,tableName,indexFrom,indexTo)) {
          continue;
        }
        if (hideTable(table,session)) {
          continue;
        }
        String storageType;
        if (table.isTemporary()) {
          if (table.isGlobalTemporary()) {
            storageType=""String_Node_Str"";
          }
 else {
            storageType=""String_Node_Str"";
          }
        }
 else {
          storageType=table.isPersistIndexes() ? ""String_Node_Str"" : ""String_Node_Str"";
        }
        String sql=table.getCreateSQL();
        if (!admin) {
          if (sql != null && sql.contains(JdbcSQLException.HIDE_SQL)) {
            sql=""String_Node_Str"";
          }
        }
        add(rows,catalog,identifier(table.getSchema().getName()),tableName,table.getTableType().toString(),storageType,sql,replaceNullWithEmpty(table.getComment()),""String_Node_Str"" + table.getMaxDataModificationId(),""String_Node_Str"" + table.getId(),null,table.getClass().getName(),""String_Node_Str"" + table.getRowCountApproximation());
      }
      break;
    }
case COLUMNS:
{
    final ArrayList<Table> tablesToList;
    if (indexFrom != null && indexTo != null && indexFrom.equals(indexTo)) {
      String tableName=identifier(indexFrom.getString());
      tablesToList=getTablesByName(session,tableName);
    }
 else {
      tablesToList=getAllTables(session);
    }
    for (    Table table : tablesToList) {
      String tableName=identifier(table.getName());
      if (!checkIndex(session,tableName,indexFrom,indexTo)) {
        continue;
      }
      if (hideTable(table,session)) {
        continue;
      }
      Column[] cols=table.getColumns();
      String collation=database.getCompareMode().getName();
      for (int j=0; j < cols.length; j++) {
        Column c=cols[j];
        Sequence sequence=c.getSequence();
        add(rows,catalog,identifier(table.getSchema().getName()),tableName,identifier(c.getName()),String.valueOf(j + 1),c.getDefaultSQL(),c.isNullable() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"" + DataType.convertTypeToSQLType(c.getType()),""String_Node_Str"" + c.getPrecisionAsInt(),""String_Node_Str"" + c.getPrecisionAsInt(),""String_Node_Str"" + c.getPrecisionAsInt(),""String_Node_Str"",""String_Node_Str"" + c.getScale(),CHARACTER_SET_NAME,collation,identifier(DataType.getDataType(c.getType()).name),""String_Node_Str"" + (c.isNullable() ? DatabaseMetaData.columnNullable : DatabaseMetaData.columnNoNulls),""String_Node_Str"" + (c.getComputed() ? ""String_Node_Str"" : ""String_Node_Str""),""String_Node_Str"" + (c.getSelectivity()),c.getCheckConstraintSQL(session,c.getName()),sequence == null ? null : sequence.getName(),replaceNullWithEmpty(c.getComment()),null);
      }
    }
    break;
  }
case INDEXES:
{
  final ArrayList<Table> tablesToList;
  if (indexFrom != null && indexTo != null && indexFrom.equals(indexTo)) {
    String tableName=identifier(indexFrom.getString());
    tablesToList=getTablesByName(session,tableName);
  }
 else {
    tablesToList=getAllTables(session);
  }
  for (  Table table : tablesToList) {
    String tableName=identifier(table.getName());
    if (!checkIndex(session,tableName,indexFrom,indexTo)) {
      continue;
    }
    if (hideTable(table,session)) {
      continue;
    }
    ArrayList<Index> indexes=table.getIndexes();
    ArrayList<Constraint> constraints=table.getConstraints();
    for (int j=0; indexes != null && j < indexes.size(); j++) {
      Index index=indexes.get(j);
      if (index.getCreateSQL() == null) {
        continue;
      }
      String constraintName=null;
      for (int k=0; constraints != null && k < constraints.size(); k++) {
        Constraint constraint=constraints.get(k);
        if (constraint.usesIndex(index)) {
          if (index.getIndexType().isPrimaryKey()) {
            if (constraint.getConstraintType().equals(Constraint.PRIMARY_KEY)) {
              constraintName=constraint.getName();
            }
          }
 else {
            constraintName=constraint.getName();
          }
        }
      }
      IndexColumn[] cols=index.getIndexColumns();
      String indexClass;
      if (index instanceof MultiVersionIndex) {
        indexClass=((MultiVersionIndex)index).getBaseIndex().getClass().getName();
      }
 else {
        indexClass=index.getClass().getName();
      }
      for (int k=0; k < cols.length; k++) {
        IndexColumn idxCol=cols[k];
        Column column=idxCol.column;
        add(rows,catalog,identifier(table.getSchema().getName()),tableName,index.getIndexType().isUnique() ? ""String_Node_Str"" : ""String_Node_Str"",identifier(index.getName()),""String_Node_Str"" + (k + 1),identifier(column.getName()),""String_Node_Str"",index.getIndexType().isPrimaryKey() ? ""String_Node_Str"" : ""String_Node_Str"",index.getIndexType().getSQL(),index.getIndexType().getBelongsToConstraint() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"" + DatabaseMetaData.tableIndexOther,(idxCol.sortType & SortOrder.DESCENDING) != 0 ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",replaceNullWithEmpty(index.getComment()),index.getCreateSQL(),""String_Node_Str"" + index.getId(),""String_Node_Str"" + idxCol.sortType,constraintName,indexClass,index.getIndexType().isAffinity() ? ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
  }
  break;
}
case TABLE_TYPES:
{
add(rows,TableType.TABLE.toString());
add(rows,TableType.TABLE_LINK.toString());
add(rows,TableType.SYSTEM_TABLE.toString());
add(rows,TableType.VIEW.toString());
add(rows,TableType.EXTERNAL_TABLE_ENGINE.toString());
break;
}
case CATALOGS:
{
add(rows,catalog);
break;
}
case SETTINGS:
{
for (Setting s : database.getAllSettings()) {
String value=s.getStringValue();
if (value == null) {
value=""String_Node_Str"" + s.getIntValue();
}
add(rows,identifier(s.getName()),value);
}
add(rows,""String_Node_Str"",""String_Node_Str"" + Constants.BUILD_ID);
add(rows,""String_Node_Str"",""String_Node_Str"" + Constants.VERSION_MAJOR);
add(rows,""String_Node_Str"",""String_Node_Str"" + Constants.VERSION_MINOR);
add(rows,""String_Node_Str"",""String_Node_Str"" + Constants.getFullVersion());
if (admin) {
String[] settings={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
for (String s : settings) {
add(rows,""String_Node_Str"" + s,Utils.getProperty(s,""String_Node_Str""));
}
}
add(rows,""String_Node_Str"",database.getExclusiveSession() == null ? ""String_Node_Str"" : ""String_Node_Str"");
add(rows,""String_Node_Str"",database.getMode().getName());
add(rows,""String_Node_Str"",database.isMultiThreaded() ? ""String_Node_Str"" : ""String_Node_Str"");
add(rows,""String_Node_Str"",database.isMultiVersion() ? ""String_Node_Str"" : ""String_Node_Str"");
add(rows,""String_Node_Str"",""String_Node_Str"" + session.getQueryTimeout());
add(rows,""String_Node_Str"",""String_Node_Str"" + database.getRetentionTime());
add(rows,""String_Node_Str"",""String_Node_Str"" + database.getLogMode());
ArrayList<String> settingNames=New.arrayList();
HashMap<String,String> s=database.getSettings().getSettings();
for (String k : s.keySet()) {
settingNames.add(k);
}
Collections.sort(settingNames);
for (String k : settingNames) {
add(rows,k,s.get(k));
}
if (database.isPersistent()) {
PageStore store=database.getPageStore();
if (store != null) {
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getWriteCountTotal());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getWriteCount());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getReadCount());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getPageCount());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getPageSize());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getCache().getMaxMemory());
add(rows,""String_Node_Str"",""String_Node_Str"" + store.getCache().getMemory());
}
Store mvStore=database.getMvStore();
if (mvStore != null) {
FileStore fs=mvStore.getStore().getFileStore();
add(rows,""String_Node_Str"",""String_Node_Str"" + fs.getWriteCount());
add(rows,""String_Node_Str"",""String_Node_Str"" + fs.getReadCount());
long size;
try {
  size=fs.getFile().size();
}
 catch (IOException e) {
  throw DbException.convertIOException(e,""String_Node_Str"");
}
int pageSize=4 * 1024;
long pageCount=size / pageSize;
add(rows,""String_Node_Str"",""String_Node_Str"" + pageCount);
add(rows,""String_Node_Str"",""String_Node_Str"" + pageSize);
add(rows,""String_Node_Str"",""String_Node_Str"" + mvStore.getStore().getCacheSize());
add(rows,""String_Node_Str"",""String_Node_Str"" + mvStore.getStore().getCacheSizeUsed());
}
}
break;
}
case TYPE_INFO:
{
for (DataType t : DataType.getTypes()) {
if (t.hidden || t.sqlType == Value.NULL) {
continue;
}
add(rows,t.name,String.valueOf(t.sqlType),String.valueOf(MathUtils.convertLongToInt(t.maxPrecision)),t.prefix,t.suffix,t.params,String.valueOf(t.autoIncrement),String.valueOf(t.minScale),String.valueOf(t.maxScale),t.decimal ? ""String_Node_Str"" : null,String.valueOf(t.sqlTypePos),String.valueOf(t.caseSensitive),""String_Node_Str"" + DatabaseMetaData.typeNullable,""String_Node_Str"" + DatabaseMetaData.typeSearchable);
}
break;
}
case HELP:
{
String resource=""String_Node_Str"";
try {
byte[] data=Utils.getResource(resource);
Reader reader=new InputStreamReader(new ByteArrayInputStream(data));
Csv csv=new Csv();
csv.setLineCommentCharacter('#');
ResultSet rs=csv.read(reader,null);
for (int i=0; rs.next(); i++) {
add(rows,String.valueOf(i),rs.getString(1).trim(),rs.getString(2).trim(),rs.getString(3).trim(),rs.getString(4).trim());
}
}
 catch (Exception e) {
throw DbException.convert(e);
}
break;
}
case SEQUENCES:
{
for (SchemaObject obj : database.getAllSchemaObjects(DbObject.SEQUENCE)) {
Sequence s=(Sequence)obj;
add(rows,catalog,identifier(s.getSchema().getName()),identifier(s.getName()),String.valueOf(s.getCurrentValue()),String.valueOf(s.getIncrement()),s.getBelongsToTable() ? ""String_Node_Str"" : ""String_Node_Str"",replaceNullWithEmpty(s.getComment()),String.valueOf(s.getCacheSize()),String.valueOf(s.getMinValue()),String.valueOf(s.getMaxValue()),s.getCycle() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"" + s.getId());
}
break;
}
case USERS:
{
for (User u : database.getAllUsers()) {
if (admin || session.getUser() == u) {
add(rows,identifier(u.getName()),String.valueOf(u.isAdmin()),replaceNullWithEmpty(u.getComment()),""String_Node_Str"" + u.getId());
}
}
break;
}
case ROLES:
{
for (Role r : database.getAllRoles()) {
if (admin || session.getUser().isRoleGranted(r)) {
add(rows,identifier(r.getName()),replaceNullWithEmpty(r.getComment()),""String_Node_Str"" + r.getId());
}
}
break;
}
case RIGHTS:
{
if (admin) {
for (Right r : database.getAllRights()) {
Role role=r.getGrantedRole();
DbObject grantee=r.getGrantee();
String rightType=grantee.getType() == DbObject.USER ? ""String_Node_Str"" : ""String_Node_Str"";
if (role == null) {
DbObject object=r.getGrantedObject();
Schema schema=null;
Table table=null;
if (object != null) {
if (object instanceof Schema) {
schema=(Schema)object;
}
 else if (object instanceof Table) {
table=(Table)object;
schema=table.getSchema();
}
}
String tableName=(table != null) ? identifier(table.getName()) : ""String_Node_Str"";
String schemaName=(schema != null) ? identifier(schema.getName()) : ""String_Node_Str"";
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
add(rows,identifier(grantee.getName()),rightType,""String_Node_Str"",r.getRights(),schemaName,tableName,""String_Node_Str"" + r.getId());
}
 else {
add(rows,identifier(grantee.getName()),rightType,identifier(role.getName()),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + r.getId());
}
}
}
break;
}
case FUNCTION_ALIASES:
{
for (SchemaObject aliasAsSchemaObject : database.getAllSchemaObjects(DbObject.FUNCTION_ALIAS)) {
FunctionAlias alias=(FunctionAlias)aliasAsSchemaObject;
JavaMethod[] methods;
try {
methods=alias.getJavaMethods();
}
 catch (DbException e) {
methods=new JavaMethod[0];
}
for (FunctionAlias.JavaMethod method : methods) {
int returnsResult=method.getDataType() == Value.NULL ? DatabaseMetaData.procedureNoResult : DatabaseMetaData.procedureReturnsResult;
add(rows,catalog,alias.getSchema().getName(),identifier(alias.getName()),alias.getJavaClassName(),alias.getJavaMethodName(),""String_Node_Str"" + DataType.convertTypeToSQLType(method.getDataType()),DataType.getDataType(method.getDataType()).name,""String_Node_Str"" + method.getParameterCount(),""String_Node_Str"" + returnsResult,replaceNullWithEmpty(alias.getComment()),""String_Node_Str"" + alias.getId(),alias.getSource());
}
}
for (UserAggregate agg : database.getAllAggregates()) {
int returnsResult=DatabaseMetaData.procedureReturnsResult;
add(rows,catalog,Constants.SCHEMA_MAIN,identifier(agg.getName()),agg.getJavaClassName(),""String_Node_Str"",""String_Node_Str"" + DataType.convertTypeToSQLType(Value.NULL),DataType.getDataType(Value.NULL).name,""String_Node_Str"",""String_Node_Str"" + returnsResult,replaceNullWithEmpty(agg.getComment()),""String_Node_Str"" + agg.getId(),""String_Node_Str"");
}
break;
}
case FUNCTION_COLUMNS:
{
for (SchemaObject aliasAsSchemaObject : database.getAllSchemaObjects(DbObject.FUNCTION_ALIAS)) {
FunctionAlias alias=(FunctionAlias)aliasAsSchemaObject;
JavaMethod[] methods;
try {
methods=alias.getJavaMethods();
}
 catch (DbException e) {
methods=new JavaMethod[0];
}
for (FunctionAlias.JavaMethod method : methods) {
if (method.getDataType() != Value.NULL) {
DataType dt=DataType.getDataType(method.getDataType());
add(rows,catalog,alias.getSchema().getName(),identifier(alias.getName()),alias.getJavaClassName(),alias.getJavaMethodName(),""String_Node_Str"" + method.getParameterCount(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + DataType.convertTypeToSQLType(method.getDataType()),dt.name,""String_Node_Str"" + MathUtils.convertLongToInt(dt.defaultPrecision),""String_Node_Str"" + dt.defaultScale,""String_Node_Str"",""String_Node_Str"" + DatabaseMetaData.columnNullableUnknown,""String_Node_Str"" + DatabaseMetaData.procedureColumnReturn,""String_Node_Str"",null);
}
Class<?>[] columnList=method.getColumnClasses();
for (int k=0; k < columnList.length; k++) {
if (method.hasConnectionParam() && k == 0) {
continue;
}
Class<?> clazz=columnList[k];
int dataType=DataType.getTypeFromClass(clazz);
DataType dt=DataType.getDataType(dataType);
int nullable=clazz.isPrimitive() ? DatabaseMetaData.columnNoNulls : DatabaseMetaData.columnNullable;
add(rows,catalog,alias.getSchema().getName(),identifier(alias.getName()),alias.getJavaClassName(),alias.getJavaMethodName(),""String_Node_Str"" + method.getParameterCount(),""String_Node_Str"" + (k + (method.hasConnectionParam() ? 0 : 1)),""String_Node_Str"" + (k + 1),""String_Node_Str"" + DataType.convertTypeToSQLType(dt.type),dt.name,""String_Node_Str"" + MathUtils.convertLongToInt(dt.defaultPrecision),""String_Node_Str"" + dt.defaultScale,""String_Node_Str"",""String_Node_Str"" + nullable,""String_Node_Str"" + DatabaseMetaData.procedureColumnIn,""String_Node_Str"",null);
}
}
}
break;
}
case SCHEMATA:
{
String collation=database.getCompareMode().getName();
for (Schema schema : database.getAllSchemas()) {
add(rows,catalog,identifier(schema.getName()),identifier(schema.getOwner().getName()),CHARACTER_SET_NAME,collation,Constants.SCHEMA_MAIN.equals(schema.getName()) ? ""String_Node_Str"" : ""String_Node_Str"",replaceNullWithEmpty(schema.getComment()),""String_Node_Str"" + schema.getId());
}
break;
}
case TABLE_PRIVILEGES:
{
for (Right r : database.getAllRights()) {
DbObject object=r.getGrantedObject();
if (!(object instanceof Table)) {
continue;
}
Table table=(Table)object;
if (hideTable(table,session)) {
continue;
}
String tableName=identifier(table.getName());
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
addPrivileges(rows,r.getGrantee(),catalog,table,null,r.getRightMask());
}
break;
}
case COLUMN_PRIVILEGES:
{
for (Right r : database.getAllRights()) {
DbObject object=r.getGrantedObject();
if (!(object instanceof Table)) {
continue;
}
Table table=(Table)object;
if (hideTable(table,session)) {
continue;
}
String tableName=identifier(table.getName());
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
DbObject grantee=r.getGrantee();
int mask=r.getRightMask();
for (Column column : table.getColumns()) {
addPrivileges(rows,grantee,catalog,table,column.getName(),mask);
}
}
break;
}
case COLLATIONS:
{
for (Locale l : Collator.getAvailableLocales()) {
add(rows,CompareMode.getName(l),l.toString());
}
break;
}
case VIEWS:
{
for (Table table : getAllTables(session)) {
if (table.getTableType() != TableType.VIEW) {
continue;
}
String tableName=identifier(table.getName());
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
TableView view=(TableView)table;
add(rows,catalog,identifier(table.getSchema().getName()),tableName,table.getCreateSQL(),""String_Node_Str"",""String_Node_Str"",view.isInvalid() ? ""String_Node_Str"" : ""String_Node_Str"",replaceNullWithEmpty(view.getComment()),""String_Node_Str"" + view.getId());
}
break;
}
case IN_DOUBT:
{
ArrayList<InDoubtTransaction> prepared=database.getInDoubtTransactions();
if (prepared != null && admin) {
for (InDoubtTransaction prep : prepared) {
add(rows,prep.getTransactionName(),prep.getState());
}
}
break;
}
case CROSS_REFERENCES:
{
for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTRAINT)) {
Constraint constraint=(Constraint)obj;
if (!(constraint.getConstraintType().equals(Constraint.REFERENTIAL))) {
continue;
}
ConstraintReferential ref=(ConstraintReferential)constraint;
IndexColumn[] cols=ref.getColumns();
IndexColumn[] refCols=ref.getRefColumns();
Table tab=ref.getTable();
Table refTab=ref.getRefTable();
String tableName=identifier(refTab.getName());
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
int update=getRefAction(ref.getUpdateAction());
int delete=getRefAction(ref.getDeleteAction());
for (int j=0; j < cols.length; j++) {
add(rows,catalog,identifier(refTab.getSchema().getName()),identifier(refTab.getName()),identifier(refCols[j].column.getName()),catalog,identifier(tab.getSchema().getName()),identifier(tab.getName()),identifier(cols[j].column.getName()),String.valueOf(j + 1),String.valueOf(update),String.valueOf(delete),identifier(ref.getName()),identifier(ref.getUniqueIndex().getName()),""String_Node_Str"" + DatabaseMetaData.importedKeyNotDeferrable);
}
}
break;
}
case CONSTRAINTS:
{
for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTRAINT)) {
Constraint constraint=(Constraint)obj;
String constraintType=constraint.getConstraintType();
String checkExpression=null;
IndexColumn[] indexColumns=null;
Table table=constraint.getTable();
if (hideTable(table,session)) {
continue;
}
Index index=constraint.getUniqueIndex();
String uniqueIndexName=null;
if (index != null) {
uniqueIndexName=index.getName();
}
String tableName=identifier(table.getName());
if (!checkIndex(session,tableName,indexFrom,indexTo)) {
continue;
}
if (constraintType.equals(Constraint.CHECK)) {
checkExpression=((ConstraintCheck)constraint).getExpression().getSQL();
}
 else if (constraintType.equals(Constraint.UNIQUE) || constraintType.equals(Constraint.PRIMARY_KEY)) {
indexColumns=((ConstraintUnique)constraint).getColumns();
}
 else if (constraintType.equals(Constraint.REFERENTIAL)) {
indexColumns=((ConstraintReferential)constraint).getColumns();
}
String columnList=null;
if (indexColumns != null) {
StatementBuilder buff=new StatementBuilder();
for (IndexColumn col : indexColumns) {
buff.appendExceptFirst(""String_Node_Str"");
buff.append(col.column.getName());
}
columnList=buff.toString();
}
add(rows,catalog,identifier(constraint.getSchema().getName()),identifier(constraint.getName()),constraintType,catalog,identifier(table.getSchema().getName()),tableName,uniqueIndexName,checkExpression,columnList,replaceNullWithEmpty(constraint.getComment()),constraint.getCreateSQL(),""String_Node_Str"" + constraint.getId());
}
break;
}
case CONSTANTS:
{
for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTANT)) {
Constant constant=(Constant)obj;
ValueExpression expr=constant.getValue();
add(rows,catalog,identifier(constant.getSchema().getName()),identifier(constant.getName()),""String_Node_Str"" + DataType.convertTypeToSQLType(expr.getType()),replaceNullWithEmpty(constant.getComment()),expr.getSQL(),""String_Node_Str"" + constant.getId());
}
break;
}
case DOMAINS:
{
for (UserDataType dt : database.getAllUserDataTypes()) {
Column col=dt.getColumn();
add(rows,catalog,Constants.SCHEMA_MAIN,identifier(dt.getName()),col.getDefaultSQL(),col.isNullable() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"" + col.getDataType().sqlType,""String_Node_Str"" + col.getPrecisionAsInt(),""String_Node_Str"" + col.getScale(),col.getDataType().name,""String_Node_Str"" + col.getSelectivity(),""String_Node_Str"" + col.getCheckConstraintSQL(session,""String_Node_Str""),replaceNullWithEmpty(dt.getComment()),""String_Node_Str"" + dt.getCreateSQL(),""String_Node_Str"" + dt.getId());
}
break;
}
case TRIGGERS:
{
for (SchemaObject obj : database.getAllSchemaObjects(DbObject.TRIGGER)) {
TriggerObject trigger=(TriggerObject)obj;
Table table=trigger.getTable();
add(rows,catalog,identifier(trigger.getSchema().getName()),identifier(trigger.getName()),trigger.getTypeNameList(),catalog,identifier(table.getSchema().getName()),identifier(table.getName()),""String_Node_Str"" + trigger.isBefore(),trigger.getTriggerClassName(),""String_Node_Str"" + trigger.getQueueSize(),""String_Node_Str"" + trigger.isNoWait(),replaceNullWithEmpty(trigger.getComment()),trigger.getCreateSQL(),""String_Node_Str"" + trigger.getId());
}
break;
}
case SESSIONS:
{
long now=System.currentTimeMillis();
for (Session s : database.getSessions(false)) {
if (admin || s == session) {
Command command=s.getCurrentCommand();
long start=s.getCurrentCommandStart();
if (start == 0) {
start=now;
}
add(rows,""String_Node_Str"" + s.getId(),s.getUser().getName(),new Timestamp(s.getSessionStart()).toString(),command == null ? null : command.toString(),new Timestamp(start).toString(),""String_Node_Str"" + s.containsUncommitted());
}
}
break;
}
case LOCKS:
{
for (Session s : database.getSessions(false)) {
if (admin || s == session) {
for (Table table : s.getLocks()) {
add(rows,table.getSchema().getName(),table.getName(),""String_Node_Str"" + s.getId(),table.isLockedExclusivelyBy(s) ? ""String_Node_Str"" : ""String_Node_Str"");
}
}
}
break;
}
case SESSION_STATE:
{
for (String name : session.getVariableNames()) {
Value v=session.getVariable(name);
add(rows,""String_Node_Str"" + name,""String_Node_Str"" + name + ""String_Node_Str""+ v.getSQL());
}
for (Table table : session.getLocalTempTables()) {
add(rows,""String_Node_Str"" + table.getName(),table.getCreateSQL());
}
String[] path=session.getSchemaSearchPath();
if (path != null && path.length > 0) {
StatementBuilder buff=new StatementBuilder(""String_Node_Str"");
for (String p : path) {
buff.appendExceptFirst(""String_Node_Str"");
buff.append(StringUtils.quoteIdentifier(p));
}
add(rows,""String_Node_Str"",buff.toString());
}
String schema=session.getCurrentSchemaName();
if (schema != null) {
add(rows,""String_Node_Str"",""String_Node_Str"" + StringUtils.quoteIdentifier(schema));
}
break;
}
case QUERY_STATISTICS:
{
QueryStatisticsData control=database.getQueryStatisticsData();
if (control != null) {
for (QueryStatisticsData.QueryEntry entry : control.getQueries()) {
add(rows,entry.sqlStatement,""String_Node_Str"" + entry.count,""String_Node_Str"" + entry.executionTimeMinNanos / 1000d / 1000,""String_Node_Str"" + entry.executionTimeMaxNanos / 1000d / 1000,""String_Node_Str"" + entry.executionTimeCumulativeNanos / 1000d / 1000,""String_Node_Str"" + entry.executionTimeMeanNanos / 1000d / 1000,""String_Node_Str"" + entry.getExecutionTimeStandardDeviation() / 1000d / 1000,""String_Node_Str"" + entry.rowCountMin,""String_Node_Str"" + entry.rowCountMax,""String_Node_Str"" + entry.rowCountCumulative,""String_Node_Str"" + entry.rowCountMean,""String_Node_Str"" + entry.getRowCountStandardDeviation());
}
}
break;
}
case SYNONYMS:
{
for (Table table : getAllTables(session)) {
if (!table.getTableType().equals(TableType.SYNONYM)) {
continue;
}
String synonymName=identifier(table.getName());
TableSynonym synonym=(TableSynonym)table;
add(rows,catalog,identifier(table.getSchema().getName()),synonymName,synonym.getSynonymForName(),synonym.isInvalid() ? ""String_Node_Str"" : ""String_Node_Str"",replaceNullWithEmpty(synonym.getComment()),""String_Node_Str"" + synonym.getId());
}
break;
}
default :
DbException.throwInternalError(""String_Node_Str"" + type);
}
return rows;
}",0.99992126914144
15682,"@Override public String getTableType(){
  return SYNONYM;
}","@Override public TableType getTableType(){
  return TableType.SYNONYM;
}",0.8091603053435115
15683,"private void testGeneral() throws SQLException {
  Connection conn=getConnection(""String_Node_Str"");
  DatabaseMetaData meta=conn.getMetaData();
  Statement stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  ResultSet rs;
  rs=meta.getCatalogs();
  rs.next();
  assertEquals(CATALOG,rs.getString(1));
  assertFalse(rs.next());
  rs=meta.getSchemas();
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getSchemas(null,null);
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getSchemas(null,""String_Node_Str"");
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getTableTypes();
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getTables(null,Constants.SCHEMA_MAIN,null,new String[]{""String_Node_Str""});
  assertTrue(rs.getStatement() == null);
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getTables(null,""String_Node_Str"",null,new String[]{""String_Node_Str"",""String_Node_Str""});
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getColumns(null,null,""String_Node_Str"",null);
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getPrimaryKeys(null,null,""String_Node_Str"");
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getBestRowIdentifier(null,null,""String_Node_Str"",DatabaseMetaData.bestRowSession,false);
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getIndexInfo(null,null,""String_Node_Str"",false,false);
  rs.next();
  String index=rs.getString(""String_Node_Str"");
  assertTrue(index.startsWith(""String_Node_Str""));
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getIndexInfo(null,null,""String_Node_Str"",true,false);
  rs.next();
  index=rs.getString(""String_Node_Str"");
  assertTrue(index.startsWith(""String_Node_Str""));
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getVersionColumns(null,null,""String_Node_Str"");
  assertFalse(rs.next());
  stat.execute(""String_Node_Str"");
  rs=stat.executeQuery(""String_Node_Str"");
  while (rs.next()) {
    String name=rs.getString(""String_Node_Str"");
    String value=rs.getString(""String_Node_Str"");
    trace(name + ""String_Node_Str"" + value);
  }
  testMore();
  conn.close();
  deleteDb(""String_Node_Str"");
}","private void testGeneral() throws SQLException {
  Connection conn=getConnection(""String_Node_Str"");
  DatabaseMetaData meta=conn.getMetaData();
  Statement stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  ResultSet rs;
  rs=meta.getCatalogs();
  rs.next();
  assertEquals(CATALOG,rs.getString(1));
  assertFalse(rs.next());
  rs=meta.getSchemas();
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getSchemas(null,null);
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getSchemas(null,""String_Node_Str"");
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getTableTypes();
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getTables(null,Constants.SCHEMA_MAIN,null,new String[]{""String_Node_Str""});
  assertTrue(rs.getStatement() == null);
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getTables(null,""String_Node_Str"",null,new String[]{""String_Node_Str"",""String_Node_Str""});
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getColumns(null,null,""String_Node_Str"",null);
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getPrimaryKeys(null,null,""String_Node_Str"");
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getBestRowIdentifier(null,null,""String_Node_Str"",DatabaseMetaData.bestRowSession,false);
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getIndexInfo(null,null,""String_Node_Str"",false,false);
  rs.next();
  String index=rs.getString(""String_Node_Str"");
  assertTrue(index.startsWith(""String_Node_Str""));
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  rs.next();
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getIndexInfo(null,null,""String_Node_Str"",true,false);
  rs.next();
  index=rs.getString(""String_Node_Str"");
  assertTrue(index.startsWith(""String_Node_Str""));
  assertEquals(""String_Node_Str"",rs.getString(""String_Node_Str""));
  assertFalse(rs.next());
  rs=meta.getVersionColumns(null,null,""String_Node_Str"");
  assertFalse(rs.next());
  stat.execute(""String_Node_Str"");
  rs=stat.executeQuery(""String_Node_Str"");
  while (rs.next()) {
    String name=rs.getString(""String_Node_Str"");
    String value=rs.getString(""String_Node_Str"");
    trace(name + ""String_Node_Str"" + value);
  }
  testMore();
  conn.close();
  deleteDb(""String_Node_Str"");
}",0.9931165031836172
15684,"@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  conn=getConnection(""String_Node_Str"");
  testUnwrap();
  testUnsupportedOperations();
  testTraceError();
  testSavepoint();
  testConnectionRollback();
  testStatement();
  testPreparedStatement();
  testIdentityMerge();
  testIdentity();
  conn.close();
  deleteDb(""String_Node_Str"");
}","@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  conn=getConnection(""String_Node_Str"");
  testPreparedStatement();
  conn.close();
  deleteDb(""String_Node_Str"");
}",0.6914893617021277
15685,"private Expression readCondition(){
  if (readIf(""String_Node_Str"")) {
    return new ConditionNot(readCondition());
  }
  if (readIf(""String_Node_Str"")) {
    read(""String_Node_Str"");
    Query query=parseSelect();
    read(""String_Node_Str"");
    return new ConditionExists(query);
  }
  if (readIf(""String_Node_Str"")) {
    read(""String_Node_Str"");
    Expression r1=readConcat();
    read(""String_Node_Str"");
    Expression r2=readConcat();
    read(""String_Node_Str"");
    return new Comparison(session,Comparison.SPATIAL_INTERSECTS,r1,r2);
  }
  Expression r=readConcat();
  while (true) {
    int backup=parseIndex;
    boolean not=false;
    if (readIf(""String_Node_Str"")) {
      not=true;
      if (isToken(""String_Node_Str"")) {
        parseIndex=backup;
        currentToken=""String_Node_Str"";
        break;
      }
    }
    if (readIf(""String_Node_Str"")) {
      Expression b=readConcat();
      Expression esc=null;
      if (readIf(""String_Node_Str"")) {
        esc=readConcat();
      }
      recompileAlways=true;
      r=new CompareLike(database,r,b,esc,false);
    }
 else     if (readIf(""String_Node_Str"")) {
      Function function=Function.getFunction(database,""String_Node_Str"");
      function.setDataType(new Column(""String_Node_Str"",Value.STRING_IGNORECASE));
      function.setParameter(0,r);
      r=function;
      Expression b=readConcat();
      Expression esc=null;
      if (readIf(""String_Node_Str"")) {
        esc=readConcat();
      }
      recompileAlways=true;
      r=new CompareLike(database,r,b,esc,false);
    }
 else     if (readIf(""String_Node_Str"")) {
      Expression b=readConcat();
      r=new CompareLike(database,r,b,null,true);
    }
 else     if (readIf(""String_Node_Str"")) {
      if (readIf(""String_Node_Str"")) {
        if (readIf(""String_Node_Str"")) {
          r=new Comparison(session,Comparison.IS_NOT_NULL,r,null);
        }
 else         if (readIf(""String_Node_Str"")) {
          read(""String_Node_Str"");
          r=new Comparison(session,Comparison.EQUAL_NULL_SAFE,r,readConcat());
        }
 else {
          r=new Comparison(session,Comparison.NOT_EQUAL_NULL_SAFE,r,readConcat());
        }
      }
 else       if (readIf(""String_Node_Str"")) {
        r=new Comparison(session,Comparison.IS_NULL,r,null);
      }
 else       if (readIf(""String_Node_Str"")) {
        read(""String_Node_Str"");
        r=new Comparison(session,Comparison.NOT_EQUAL_NULL_SAFE,r,readConcat());
      }
 else {
        r=new Comparison(session,Comparison.EQUAL_NULL_SAFE,r,readConcat());
      }
    }
 else     if (readIf(""String_Node_Str"")) {
      read(""String_Node_Str"");
      if (readIf(""String_Node_Str"")) {
        if (database.getMode().prohibitEmptyInPredicate) {
          throw getSyntaxError();
        }
        r=ValueExpression.get(ValueBoolean.get(false));
      }
 else {
        if (isSelect()) {
          Query query=parseSelect();
          query.setNeverLazy(true);
          r=new ConditionInSelect(database,r,query,false,Comparison.EQUAL);
        }
 else {
          ArrayList<Expression> v=New.arrayList();
          Expression last;
          do {
            last=readExpression();
            v.add(last);
          }
 while (readIf(""String_Node_Str""));
          if (v.size() == 1 && (last instanceof Subquery)) {
            Subquery s=(Subquery)last;
            Query q=s.getQuery();
            r=new ConditionInSelect(database,r,q,false,Comparison.EQUAL);
          }
 else {
            r=new ConditionIn(database,r,v);
          }
        }
        read(""String_Node_Str"");
      }
    }
 else     if (readIf(""String_Node_Str"")) {
      Expression low=readConcat();
      read(""String_Node_Str"");
      Expression high=readConcat();
      Expression condLow=new Comparison(session,Comparison.SMALLER_EQUAL,low,r);
      Expression condHigh=new Comparison(session,Comparison.BIGGER_EQUAL,high,r);
      r=new ConditionAndOr(ConditionAndOr.AND,condLow,condHigh);
    }
 else {
      int compareType=getCompareType(currentTokenType);
      if (compareType < 0) {
        break;
      }
      read();
      if (readIf(""String_Node_Str"")) {
        read(""String_Node_Str"");
        Query query=parseSelect();
        r=new ConditionInSelect(database,r,query,true,compareType);
        read(""String_Node_Str"");
      }
 else       if (readIf(""String_Node_Str"") || readIf(""String_Node_Str"")) {
        read(""String_Node_Str"");
        Query query=parseSelect();
        r=new ConditionInSelect(database,r,query,false,compareType);
        read(""String_Node_Str"");
      }
 else {
        Expression right=readConcat();
        if (SysProperties.OLD_STYLE_OUTER_JOIN && readIf(""String_Node_Str"") && readIf(""String_Node_Str"")&& readIf(""String_Node_Str"")) {
          if (r instanceof ExpressionColumn && right instanceof ExpressionColumn) {
            ExpressionColumn leftCol=(ExpressionColumn)r;
            ExpressionColumn rightCol=(ExpressionColumn)right;
            ArrayList<TableFilter> filters=currentSelect.getTopFilters();
            for (            TableFilter f : filters) {
              while (f != null) {
                leftCol.mapColumns(f,0);
                rightCol.mapColumns(f,0);
                f=f.getJoin();
              }
            }
            TableFilter leftFilter=leftCol.getTableFilter();
            TableFilter rightFilter=rightCol.getTableFilter();
            r=new Comparison(session,compareType,r,right);
            if (leftFilter != null && rightFilter != null) {
              int idx=filters.indexOf(rightFilter);
              if (idx >= 0) {
                filters.remove(idx);
                leftFilter.addJoin(rightFilter,true,false,r);
              }
 else {
                rightFilter.mapAndAddFilter(r);
              }
              r=ValueExpression.get(ValueBoolean.get(true));
            }
          }
        }
 else {
          r=new Comparison(session,compareType,r,right);
        }
      }
    }
    if (not) {
      r=new ConditionNot(r);
    }
  }
  return r;
}","private Expression readCondition(){
  if (readIf(""String_Node_Str"")) {
    return new ConditionNot(readCondition());
  }
  if (readIf(""String_Node_Str"")) {
    read(""String_Node_Str"");
    Query query=parseSelect();
    read(""String_Node_Str"");
    return new ConditionExists(query);
  }
  if (readIf(""String_Node_Str"")) {
    read(""String_Node_Str"");
    Expression r1=readConcat();
    read(""String_Node_Str"");
    Expression r2=readConcat();
    read(""String_Node_Str"");
    return new Comparison(session,Comparison.SPATIAL_INTERSECTS,r1,r2);
  }
  Expression r=readConcat();
  while (true) {
    int backup=parseIndex;
    boolean not=false;
    if (readIf(""String_Node_Str"")) {
      not=true;
      if (isToken(""String_Node_Str"")) {
        parseIndex=backup;
        currentToken=""String_Node_Str"";
        break;
      }
    }
    if (readIf(""String_Node_Str"")) {
      Expression b=readConcat();
      Expression esc=null;
      if (readIf(""String_Node_Str"")) {
        esc=readConcat();
      }
      recompileAlways=true;
      r=new CompareLike(database,r,b,esc,false);
    }
 else     if (readIf(""String_Node_Str"")) {
      Function function=Function.getFunction(database,""String_Node_Str"");
      function.setDataType(new Column(""String_Node_Str"",Value.STRING_IGNORECASE));
      function.setParameter(0,r);
      r=function;
      Expression b=readConcat();
      Expression esc=null;
      if (readIf(""String_Node_Str"")) {
        esc=readConcat();
      }
      recompileAlways=true;
      r=new CompareLike(database,r,b,esc,false);
    }
 else     if (readIf(""String_Node_Str"")) {
      Expression b=readConcat();
      recompileAlways=true;
      r=new CompareLike(database,r,b,null,true);
    }
 else     if (readIf(""String_Node_Str"")) {
      if (readIf(""String_Node_Str"")) {
        if (readIf(""String_Node_Str"")) {
          r=new Comparison(session,Comparison.IS_NOT_NULL,r,null);
        }
 else         if (readIf(""String_Node_Str"")) {
          read(""String_Node_Str"");
          r=new Comparison(session,Comparison.EQUAL_NULL_SAFE,r,readConcat());
        }
 else {
          r=new Comparison(session,Comparison.NOT_EQUAL_NULL_SAFE,r,readConcat());
        }
      }
 else       if (readIf(""String_Node_Str"")) {
        r=new Comparison(session,Comparison.IS_NULL,r,null);
      }
 else       if (readIf(""String_Node_Str"")) {
        read(""String_Node_Str"");
        r=new Comparison(session,Comparison.NOT_EQUAL_NULL_SAFE,r,readConcat());
      }
 else {
        r=new Comparison(session,Comparison.EQUAL_NULL_SAFE,r,readConcat());
      }
    }
 else     if (readIf(""String_Node_Str"")) {
      read(""String_Node_Str"");
      if (readIf(""String_Node_Str"")) {
        if (database.getMode().prohibitEmptyInPredicate) {
          throw getSyntaxError();
        }
        r=ValueExpression.get(ValueBoolean.get(false));
      }
 else {
        if (isSelect()) {
          Query query=parseSelect();
          query.setNeverLazy(true);
          r=new ConditionInSelect(database,r,query,false,Comparison.EQUAL);
        }
 else {
          ArrayList<Expression> v=New.arrayList();
          Expression last;
          do {
            last=readExpression();
            v.add(last);
          }
 while (readIf(""String_Node_Str""));
          if (v.size() == 1 && (last instanceof Subquery)) {
            Subquery s=(Subquery)last;
            Query q=s.getQuery();
            r=new ConditionInSelect(database,r,q,false,Comparison.EQUAL);
          }
 else {
            r=new ConditionIn(database,r,v);
          }
        }
        read(""String_Node_Str"");
      }
    }
 else     if (readIf(""String_Node_Str"")) {
      Expression low=readConcat();
      read(""String_Node_Str"");
      Expression high=readConcat();
      Expression condLow=new Comparison(session,Comparison.SMALLER_EQUAL,low,r);
      Expression condHigh=new Comparison(session,Comparison.BIGGER_EQUAL,high,r);
      r=new ConditionAndOr(ConditionAndOr.AND,condLow,condHigh);
    }
 else {
      int compareType=getCompareType(currentTokenType);
      if (compareType < 0) {
        break;
      }
      read();
      if (readIf(""String_Node_Str"")) {
        read(""String_Node_Str"");
        Query query=parseSelect();
        r=new ConditionInSelect(database,r,query,true,compareType);
        read(""String_Node_Str"");
      }
 else       if (readIf(""String_Node_Str"") || readIf(""String_Node_Str"")) {
        read(""String_Node_Str"");
        Query query=parseSelect();
        r=new ConditionInSelect(database,r,query,false,compareType);
        read(""String_Node_Str"");
      }
 else {
        Expression right=readConcat();
        if (SysProperties.OLD_STYLE_OUTER_JOIN && readIf(""String_Node_Str"") && readIf(""String_Node_Str"")&& readIf(""String_Node_Str"")) {
          if (r instanceof ExpressionColumn && right instanceof ExpressionColumn) {
            ExpressionColumn leftCol=(ExpressionColumn)r;
            ExpressionColumn rightCol=(ExpressionColumn)right;
            ArrayList<TableFilter> filters=currentSelect.getTopFilters();
            for (            TableFilter f : filters) {
              while (f != null) {
                leftCol.mapColumns(f,0);
                rightCol.mapColumns(f,0);
                f=f.getJoin();
              }
            }
            TableFilter leftFilter=leftCol.getTableFilter();
            TableFilter rightFilter=rightCol.getTableFilter();
            r=new Comparison(session,compareType,r,right);
            if (leftFilter != null && rightFilter != null) {
              int idx=filters.indexOf(rightFilter);
              if (idx >= 0) {
                filters.remove(idx);
                leftFilter.addJoin(rightFilter,true,false,r);
              }
 else {
                rightFilter.mapAndAddFilter(r);
              }
              r=ValueExpression.get(ValueBoolean.get(true));
            }
          }
        }
 else {
          r=new Comparison(session,compareType,r,right);
        }
      }
    }
    if (not) {
      r=new ConditionNot(r);
    }
  }
  return r;
}",0.997675962815405
15686,"private static int getSaveTokenType(String s,boolean supportOffsetFetch){
switch (s.charAt(0)) {
case 'C':
    if (s.equals(""String_Node_Str"")) {
      return KEYWORD;
    }
  if (s.equals(""String_Node_Str"")) {
    return KEYWORD;
  }
 else   if (s.equals(""String_Node_Str"")) {
    return CURRENT_TIMESTAMP;
  }
 else   if (s.equals(""String_Node_Str"")) {
    return CURRENT_TIME;
  }
 else   if (s.equals(""String_Node_Str"")) {
    return CURRENT_DATE;
  }
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'D':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'E':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'F':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (supportOffsetFetch && ""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",FALSE);
case 'G':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'H':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'I':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'J':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'K':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'L':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'M':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'N':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",NULL);
case 'O':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (supportOffsetFetch && ""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'P':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'R':
return getKeywordOrIdentifier(s,""String_Node_Str"",ROWNUM);
case 'S':
if (s.equals(""String_Node_Str"")) {
return CURRENT_TIMESTAMP;
}
 else if (s.equals(""String_Node_Str"")) {
return CURRENT_TIME;
}
 else if (s.equals(""String_Node_Str"")) {
return CURRENT_TIMESTAMP;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'T':
if (""String_Node_Str"".equals(s)) {
return CURRENT_DATE;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",TRUE);
case 'U':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'W':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
default :
return IDENTIFIER;
}
}","private static int getSaveTokenType(String s,boolean supportOffsetFetch){
switch (s.charAt(0)) {
case 'C':
    if (s.equals(""String_Node_Str"")) {
      return KEYWORD;
    }
 else     if (s.equals(""String_Node_Str"")) {
      return CURRENT_TIMESTAMP;
    }
 else     if (s.equals(""String_Node_Str"")) {
      return CURRENT_TIME;
    }
 else     if (s.equals(""String_Node_Str"")) {
      return CURRENT_DATE;
    }
  return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'D':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'E':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'F':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (supportOffsetFetch && ""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",FALSE);
case 'G':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'H':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'I':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'J':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'L':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'M':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'N':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",NULL);
case 'O':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (supportOffsetFetch && ""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'P':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'R':
return getKeywordOrIdentifier(s,""String_Node_Str"",ROWNUM);
case 'S':
if (s.equals(""String_Node_Str"")) {
return CURRENT_TIMESTAMP;
}
 else if (s.equals(""String_Node_Str"")) {
return CURRENT_TIME;
}
 else if (s.equals(""String_Node_Str"")) {
return CURRENT_TIMESTAMP;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'T':
if (""String_Node_Str"".equals(s)) {
return CURRENT_DATE;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",TRUE);
case 'U':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'W':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
default :
return IDENTIFIER;
}
}",0.9239242685025818
15687,"private Query parseWith(){
  List<TableView> viewsCreated=new ArrayList<TableView>();
  readIf(""String_Node_Str"");
  do {
    viewsCreated.add(parseSingleCommonTableExression());
  }
 while (readIf(""String_Node_Str""));
  Query q=parseSelectUnion();
  q.setPrepareAlways(true);
  return q;
}","private Query parseWith(){
  List<TableView> viewsCreated=new ArrayList<TableView>();
  readIf(""String_Node_Str"");
  do {
    viewsCreated.add(parseSingleCommonTableExpression());
  }
 while (readIf(""String_Node_Str""));
  Query q=parseSelectUnion();
  q.setPrepareAlways(true);
  return q;
}",0.9982788296041308
15688,"private Cursor findRecursive(SearchRow first,SearchRow last){
  assert recursive;
  ResultInterface recResult=view.getRecursiveResult();
  if (recResult != null) {
    recResult.reset();
    return new ViewCursor(this,recResult,first,last);
  }
  if (query == null) {
    Parser parser=new Parser(createSession);
    parser.setRightsChecked(true);
    parser.setSuppliedParameterList(originalParameters);
    query=(Query)parser.prepare(querySQL);
    query.setNeverLazy(true);
  }
  if (!query.isUnion()) {
    throw DbNotRecursiveException.get(ErrorCode.SYNTAX_ERROR_2,""String_Node_Str"");
  }
  SelectUnion union=(SelectUnion)query;
  if (union.getUnionType() != SelectUnion.UNION_ALL) {
    throw DbNotRecursiveException.get(ErrorCode.SYNTAX_ERROR_2,""String_Node_Str"");
  }
  Query left=union.getLeft();
  left.disableCache();
  ResultInterface r=left.query(0);
  LocalResult result=union.getEmptyResult();
  result.setMaxMemoryRows(Integer.MAX_VALUE);
  while (r.next()) {
    result.addRow(r.currentRow());
  }
  Query right=union.getRight();
  r.reset();
  view.setRecursiveResult(r);
  right.disableCache();
  while (true) {
    r=right.query(0);
    if (!r.hasNext()) {
      break;
    }
    while (r.next()) {
      result.addRow(r.currentRow());
    }
    r.reset();
    view.setRecursiveResult(r);
  }
  view.setRecursiveResult(null);
  result.done();
  return new ViewCursor(this,result,first,last);
}","private Cursor findRecursive(SearchRow first,SearchRow last){
  assert recursive;
  ResultInterface recResult=view.getRecursiveResult();
  if (recResult != null) {
    recResult.reset();
    return new ViewCursor(this,recResult,first,last);
  }
  if (query == null) {
    Parser parser=new Parser(createSession);
    parser.setRightsChecked(true);
    parser.setSuppliedParameterList(originalParameters);
    query=(Query)parser.prepare(querySQL);
    query.setNeverLazy(true);
  }
  if (!query.isUnion()) {
    throw DbException.get(ErrorCode.SYNTAX_ERROR_2,""String_Node_Str"");
  }
  SelectUnion union=(SelectUnion)query;
  if (union.getUnionType() != SelectUnion.UNION_ALL) {
    throw DbException.get(ErrorCode.SYNTAX_ERROR_2,""String_Node_Str"");
  }
  Query left=union.getLeft();
  left.disableCache();
  ResultInterface r=left.query(0);
  LocalResult result=union.getEmptyResult();
  result.setMaxMemoryRows(Integer.MAX_VALUE);
  while (r.next()) {
    result.addRow(r.currentRow());
  }
  Query right=union.getRight();
  r.reset();
  view.setRecursiveResult(r);
  right.disableCache();
  while (true) {
    r=right.query(0);
    if (!r.hasNext()) {
      break;
    }
    while (r.next()) {
      result.addRow(r.currentRow());
    }
    r.reset();
    view.setRecursiveResult(r);
  }
  view.setRecursiveResult(null);
  result.done();
  return new ViewCursor(this,result,first,last);
}",0.9914407988587732
15689,"protected static String translate(String key,String... params){
  String message=null;
  if (MESSAGES != null) {
    message=MESSAGES.getProperty(key);
  }
  if (message == null) {
    message=""String_Node_Str"" + key + ""String_Node_Str"";
  }
  if (params != null) {
    for (int i=0; i < params.length; i++) {
      String s=params[i];
      if (s != null && s.length() > 0) {
        params[i]=StringUtils.quoteIdentifier(s);
      }
    }
    message=MessageFormat.format(message,(Object[])params);
  }
  return message;
}","private static String translate(String key,String... params){
  String message=null;
  if (MESSAGES != null) {
    message=MESSAGES.getProperty(key);
  }
  if (message == null) {
    message=""String_Node_Str"" + key + ""String_Node_Str"";
  }
  if (params != null) {
    for (int i=0; i < params.length; i++) {
      String s=params[i];
      if (s != null && s.length() > 0) {
        params[i]=StringUtils.quoteIdentifier(s);
      }
    }
    message=MessageFormat.format(message,(Object[])params);
  }
  return message;
}",0.988527724665392
15690,"protected DbException(SQLException e){
  super(e.getMessage(),e);
}","private DbException(SQLException e){
  super(e.getMessage(),e);
}",0.9393939393939394
15691,"/** 
 * Add all objects that this table depends on to the hash set, including this object.
 * @param dependencies the current set of dependencies
 */
public void addDependencies(HashSet<DbObject> dependencies){
  addStrictSubDependencies(dependencies,false);
  dependencies.add(this);
}","/** 
 * Add all objects that this table depends on to the hash set.
 * @param dependencies the current set of dependencies
 */
public void addDependencies(HashSet<DbObject> dependencies){
  if (dependencies.contains(this)) {
    return;
  }
  if (sequences != null) {
    for (    Sequence s : sequences) {
      dependencies.add(s);
    }
  }
  ExpressionVisitor visitor=ExpressionVisitor.getDependenciesVisitor(dependencies);
  for (  Column col : columns) {
    col.isEverything(visitor);
  }
  if (constraints != null) {
    for (    Constraint c : constraints) {
      c.isEverything(visitor);
    }
  }
  dependencies.add(this);
}",0.4642082429501085
15692,"public boolean isRecursiveQueryDetected(){
  return isRecursiveQueryDetected;
}","/** 
 * If query recursion is detected (for recursion detection)
 * @return is Recursive Query Flag Set
 */
public boolean isRecursiveQueryDetected(){
  return isRecursiveQueryDetected;
}",0.5939849624060151
15693,"private boolean isRecursiveQueryExceptionDetected(DbException exception){
  if (exception == null) {
    return false;
  }
  if (exception.getErrorCode() != ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1) {
    return false;
  }
  if (!exception.getMessage().contains(""String_Node_Str"" + this.getName() + ""String_Node_Str"")) {
    return false;
  }
  return true;
}","/** 
 * If query an exception indicates query recursion
 * @return is Recursive Query Exception Detected
 */
private boolean isRecursiveQueryExceptionDetected(DbException exception){
  if (exception == null) {
    return false;
  }
  if (exception.getErrorCode() != ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1) {
    return false;
  }
  if (!exception.getMessage().contains(""String_Node_Str"" + this.getName() + ""String_Node_Str"")) {
    return false;
  }
  return true;
}",0.8665850673194615
15694,"/** 
 * Run just this test.
 * @param a ignored
 */
public static void main(String... a) throws Exception {
  System.out.println(""String_Node_Str"");
  TestBase.createCaller().init().test();
  System.out.println(""String_Node_Str"");
}","/** 
 * Run just this test.
 * @param a ignored
 */
public static void main(String... a) throws Exception {
  TestBase.createCaller().init().test();
}",0.7853403141361257
15695,"/** 
 * Calculate the number of crossed unit boundaries between two timestamps. This method is supported for MS SQL Server compatibility. <pre> DATEDIFF(YEAR, '2004-12-31', '2005-01-01') = 1 </pre>
 * @param part the part
 * @param d1 the first date
 * @param d2 the second date
 * @return the number of crossed boundaries
 */
private static long datediff(String part,Timestamp d1,Timestamp d2){
  int field=getDatePart(part);
  Calendar calendar=Calendar.getInstance();
  long t1=d1.getTime(), t2=d2.getTime();
  TimeZone zone=calendar.getTimeZone();
  calendar.setTime(d1);
  t1+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
  calendar.setTime(d2);
  t2+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
switch (field) {
case Calendar.MILLISECOND:
    return t2 - t1;
case Calendar.SECOND:
case Calendar.MINUTE:
case Calendar.HOUR_OF_DAY:
case Calendar.DAY_OF_YEAR:
case Calendar.WEEK_OF_YEAR:
{
    long hour=60 * 60 * 1000;
    long add=Math.min(t1 / hour * hour,t2 / hour * hour);
    t1-=add;
    t2-=add;
switch (field) {
case Calendar.SECOND:
      return t2 / 1000 - t1 / 1000;
case Calendar.MINUTE:
    return t2 / (60 * 1000) - t1 / (60 * 1000);
case Calendar.HOUR_OF_DAY:
  return t2 / hour - t1 / hour;
case Calendar.DAY_OF_YEAR:
return t2 / (hour * 24) - t1 / (hour * 24);
case Calendar.WEEK_OF_YEAR:
return t2 / (hour * 24 * 7) - t1 / (hour * 24 * 7);
default :
throw DbException.throwInternalError(""String_Node_Str"" + field);
}
}
case Calendar.DATE:
return t2 / (24 * 60 * 60* 1000) - t1 / (24 * 60 * 60* 1000);
default :
break;
}
calendar.setTimeInMillis(t1);
int year1=calendar.get(Calendar.YEAR);
int month1=calendar.get(Calendar.MONTH);
calendar.setTimeInMillis(t2);
int year2=calendar.get(Calendar.YEAR);
int month2=calendar.get(Calendar.MONTH);
int result=year2 - year1;
if (field == Calendar.MONTH) {
return 12 * result + (month2 - month1);
}
 else if (field == Calendar.YEAR) {
return result;
}
 else {
throw DbException.getUnsupportedException(""String_Node_Str"" + part);
}
}","/** 
 * Calculate the number of crossed unit boundaries between two timestamps. This method is supported for MS SQL Server compatibility. <pre> DATEDIFF(YEAR, '2004-12-31', '2005-01-01') = 1 </pre>
 * @param part the part
 * @param d1 the first date
 * @param d2 the second date
 * @return the number of crossed boundaries
 */
private static long datediff(String part,Timestamp d1,Timestamp d2){
  int field=getDatePart(part);
  Calendar calendar=Calendar.getInstance();
  long t1=d1.getTime(), t2=d2.getTime();
  TimeZone zone=calendar.getTimeZone();
  calendar.setTime(d1);
  t1+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
  calendar.setTime(d2);
  t2+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
switch (field) {
case Calendar.MILLISECOND:
    return t2 - t1;
case Calendar.SECOND:
case Calendar.MINUTE:
case Calendar.HOUR_OF_DAY:
case Calendar.DAY_OF_YEAR:
case Calendar.WEEK_OF_YEAR:
{
    long hour=60 * 60 * 1000;
    long add=Math.min(t1 / hour * hour,t2 / hour * hour);
    t1-=add;
    t2-=add;
switch (field) {
case Calendar.SECOND:
      return t2 / 1000 - t1 / 1000;
case Calendar.MINUTE:
    return t2 / (60 * 1000) - t1 / (60 * 1000);
case Calendar.HOUR_OF_DAY:
  return t2 / hour - t1 / hour;
case Calendar.DAY_OF_YEAR:
return t2 / (hour * 24) - t1 / (hour * 24);
case Calendar.WEEK_OF_YEAR:
return t2 / (hour * 24 * 7) - t1 / (hour * 24 * 7);
default :
throw DbException.throwInternalError(""String_Node_Str"" + field);
}
}
case Calendar.DATE:
return t2 / (24 * 60 * 60* 1000) - t1 / (24 * 60 * 60* 1000);
default :
break;
}
calendar.setTimeInMillis(t1);
int year1=calendar.get(Calendar.YEAR);
int month1=calendar.get(Calendar.MONTH);
calendar.setTimeInMillis(t2);
int year2=calendar.get(Calendar.YEAR);
int month2=calendar.get(Calendar.MONTH);
int yearResult=year2 - year1;
if (field == Calendar.MONTH) {
return 12 * yearResult + (month2 - month1);
}
 else if (field == Calendar.YEAR) {
return (12 * yearResult + (month2 - month1)) / 12;
}
 else {
throw DbException.getUnsupportedException(""String_Node_Str"" + part);
}
}",0.9871849636907304
15696,"@Override public void test() throws Exception {
  if (config.memory || config.big || config.networked) {
    return;
  }
  deleteDb(""String_Node_Str"");
  reconnect();
  String inFile=""String_Node_Str"";
  InputStream is=getClass().getClassLoader().getResourceAsStream(inFile);
  LineNumberReader lineReader=new LineNumberReader(new InputStreamReader(is,""String_Node_Str""));
  try (ScriptReader reader=new ScriptReader(lineReader)){
    while (true) {
      String sql=reader.readStatement();
      if (sql == null) {
        break;
      }
      sql=sql.trim();
      try {
        if (""String_Node_Str"".equals(sql.toLowerCase())) {
          reconnect();
        }
 else         if (sql.length() == 0) {
        }
 else         if (sql.toLowerCase().startsWith(""String_Node_Str"")) {
          ResultSet rs=conn.createStatement().executeQuery(sql);
          while (rs.next()) {
            String expected=reader.readStatement().trim();
            String got=""String_Node_Str"" + rs.getString(1);
            assertEquals(sql,expected,got);
          }
        }
 else {
          conn.createStatement().execute(sql);
        }
      }
 catch (      SQLException e) {
        System.out.println(sql);
        throw e;
      }
    }
  }
   conn.close();
  deleteDb(""String_Node_Str"");
}","@Override public void test() throws Exception {
  if (config.memory || config.big || config.networked) {
    return;
  }
  deleteDb(""String_Node_Str"");
  reconnect();
  String inFile=""String_Node_Str"";
  InputStream is=getClass().getClassLoader().getResourceAsStream(inFile);
  LineNumberReader lineReader=new LineNumberReader(new InputStreamReader(is,""String_Node_Str""));
  List<Throwable> exceptions=new ArrayList<>();
  try (ScriptReader reader=new ScriptReader(lineReader)){
    while (true) {
      String sql=reader.readStatement();
      if (sql == null) {
        break;
      }
      sql=sql.trim();
      try {
        if (""String_Node_Str"".equals(sql.toLowerCase())) {
          reconnect();
        }
 else         if (sql.length() == 0) {
        }
 else         if (sql.toLowerCase().startsWith(""String_Node_Str"")) {
          ResultSet rs=conn.createStatement().executeQuery(sql);
          while (rs.next()) {
            String expected=reader.readStatement().trim();
            String got=""String_Node_Str"" + rs.getString(1);
            assertEquals(sql,expected,got);
          }
        }
 else {
          conn.createStatement().execute(sql);
        }
      }
 catch (      Throwable e) {
        System.out.println(sql);
        System.out.println(""String_Node_Str"" + lineReader.getLineNumber() + ""String_Node_Str""+ inFile);
        e.printStackTrace();
        exceptions.add(e);
      }
    }
  }
   conn.close();
  deleteDb(""String_Node_Str"");
  if (exceptions.size() != 0) {
    String message=""String_Node_Str"" + exceptions.size();
    System.out.println(message);
    throw new AssertionError(message);
  }
}",0.8399452804377565
15697,"/** 
 * Calculate the number of crossed unit boundaries between two timestamps. This method is supported for MS SQL Server compatibility. <pre> DATEDIFF(YEAR, '2004-12-31', '2005-01-01') = 1 </pre>
 * @param part the part
 * @param d1 the first date
 * @param d2 the second date
 * @return the number of crossed boundaries
 */
private static long datediff(String part,Timestamp d1,Timestamp d2){
  int field=getDatePart(part);
  Calendar calendar=Calendar.getInstance();
  long t1=d1.getTime(), t2=d2.getTime();
  TimeZone zone=calendar.getTimeZone();
  calendar.setTime(d1);
  t1+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
  calendar.setTime(d2);
  t2+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
switch (field) {
case Calendar.MILLISECOND:
    return t2 - t1;
case Calendar.SECOND:
case Calendar.MINUTE:
case Calendar.HOUR_OF_DAY:
case Calendar.DAY_OF_YEAR:
case Calendar.WEEK_OF_YEAR:
{
    long hour=60 * 60 * 1000;
    long add=Math.min(t1 / hour * hour,t2 / hour * hour);
    t1-=add;
    t2-=add;
switch (field) {
case Calendar.SECOND:
      return t2 / 1000 - t1 / 1000;
case Calendar.MINUTE:
    return t2 / (60 * 1000) - t1 / (60 * 1000);
case Calendar.HOUR_OF_DAY:
  return t2 / hour - t1 / hour;
case Calendar.DAY_OF_YEAR:
return t2 / (hour * 24) - t1 / (hour * 24);
case Calendar.WEEK_OF_YEAR:
return t2 / (hour * 24 * 7) - t1 / (hour * 24 * 7);
default :
throw DbException.throwInternalError(""String_Node_Str"" + field);
}
}
case Calendar.DATE:
return t2 / (24 * 60 * 60* 1000) - t1 / (24 * 60 * 60* 1000);
default :
break;
}
calendar.setTimeInMillis(t1);
int year1=calendar.get(Calendar.YEAR);
int month1=calendar.get(Calendar.MONTH);
calendar.setTimeInMillis(t2);
int year2=calendar.get(Calendar.YEAR);
int month2=calendar.get(Calendar.MONTH);
int result=year2 - year1;
if (field == Calendar.MONTH) {
return 12 * result + (month2 - month1);
}
 else if (field == Calendar.YEAR) {
return result;
}
 else {
throw DbException.getUnsupportedException(""String_Node_Str"" + part);
}
}","/** 
 * Calculate the number of crossed unit boundaries between two timestamps. This method is supported for MS SQL Server compatibility. <pre> DATEDIFF(YEAR, '2004-12-31', '2005-01-01') = 1 </pre>
 * @param part the part
 * @param d1 the first date
 * @param d2 the second date
 * @return the number of crossed boundaries
 */
private static long datediff(String part,Timestamp d1,Timestamp d2){
  int field=getDatePart(part);
  Calendar calendar=Calendar.getInstance();
  long t1=d1.getTime(), t2=d2.getTime();
  TimeZone zone=calendar.getTimeZone();
  calendar.setTime(d1);
  t1+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
  calendar.setTime(d2);
  t2+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
switch (field) {
case Calendar.MILLISECOND:
    return t2 - t1;
case Calendar.SECOND:
case Calendar.MINUTE:
case Calendar.HOUR_OF_DAY:
case Calendar.DAY_OF_YEAR:
case Calendar.WEEK_OF_YEAR:
{
    long hour=60 * 60 * 1000;
    long add=Math.min(t1 / hour * hour,t2 / hour * hour);
    t1-=add;
    t2-=add;
switch (field) {
case Calendar.SECOND:
      return t2 / 1000 - t1 / 1000;
case Calendar.MINUTE:
    return t2 / (60 * 1000) - t1 / (60 * 1000);
case Calendar.HOUR_OF_DAY:
  return t2 / hour - t1 / hour;
case Calendar.DAY_OF_YEAR:
return t2 / (hour * 24) - t1 / (hour * 24);
case Calendar.WEEK_OF_YEAR:
return t2 / (hour * 24 * 7) - t1 / (hour * 24 * 7);
default :
throw DbException.throwInternalError(""String_Node_Str"" + field);
}
}
case Calendar.DATE:
return t2 / (24 * 60 * 60* 1000) - t1 / (24 * 60 * 60* 1000);
default :
break;
}
calendar.setTimeInMillis(t1);
int year1=calendar.get(Calendar.YEAR);
int month1=calendar.get(Calendar.MONTH);
calendar.setTimeInMillis(t2);
int year2=calendar.get(Calendar.YEAR);
int month2=calendar.get(Calendar.MONTH);
int yearResult=year2 - year1;
if (field == Calendar.MONTH) {
return 12 * yearResult + (month2 - month1);
}
 else if (field == Calendar.YEAR) {
return (12 * yearResult + (month2 - month1)) / 12;
}
 else {
throw DbException.getUnsupportedException(""String_Node_Str"" + part);
}
}",0.9871849636907304
15698,"@Override public void test() throws Exception {
  if (config.memory || config.big || config.networked) {
    return;
  }
  deleteDb(""String_Node_Str"");
  reconnect();
  String inFile=""String_Node_Str"";
  InputStream is=getClass().getClassLoader().getResourceAsStream(inFile);
  LineNumberReader lineReader=new LineNumberReader(new InputStreamReader(is,""String_Node_Str""));
  try (ScriptReader reader=new ScriptReader(lineReader)){
    while (true) {
      String sql=reader.readStatement();
      if (sql == null) {
        break;
      }
      sql=sql.trim();
      try {
        if (""String_Node_Str"".equals(sql.toLowerCase())) {
          reconnect();
        }
 else         if (sql.length() == 0) {
        }
 else         if (sql.toLowerCase().startsWith(""String_Node_Str"")) {
          ResultSet rs=conn.createStatement().executeQuery(sql);
          while (rs.next()) {
            String expected=reader.readStatement().trim();
            String got=""String_Node_Str"" + rs.getString(1);
            assertEquals(sql,expected,got);
          }
        }
 else {
          conn.createStatement().execute(sql);
        }
      }
 catch (      SQLException e) {
        System.out.println(sql);
        throw e;
      }
    }
  }
   conn.close();
  deleteDb(""String_Node_Str"");
}","@Override public void test() throws Exception {
  if (config.memory || config.big || config.networked) {
    return;
  }
  deleteDb(""String_Node_Str"");
  reconnect();
  String inFile=""String_Node_Str"";
  InputStream is=getClass().getClassLoader().getResourceAsStream(inFile);
  LineNumberReader lineReader=new LineNumberReader(new InputStreamReader(is,""String_Node_Str""));
  List<Throwable> exceptions=new ArrayList<>();
  try (ScriptReader reader=new ScriptReader(lineReader)){
    while (true) {
      String sql=reader.readStatement();
      if (sql == null) {
        break;
      }
      sql=sql.trim();
      try {
        if (""String_Node_Str"".equals(sql.toLowerCase())) {
          reconnect();
        }
 else         if (sql.length() == 0) {
        }
 else         if (sql.toLowerCase().startsWith(""String_Node_Str"")) {
          ResultSet rs=conn.createStatement().executeQuery(sql);
          while (rs.next()) {
            String expected=reader.readStatement().trim();
            String got=""String_Node_Str"" + rs.getString(1);
            assertEquals(sql,expected,got);
          }
        }
 else {
          conn.createStatement().execute(sql);
        }
      }
 catch (      Throwable e) {
        System.out.println(sql);
        System.out.println(""String_Node_Str"" + lineReader.getLineNumber() + ""String_Node_Str""+ inFile);
        e.printStackTrace();
        exceptions.add(e);
      }
    }
  }
   conn.close();
  deleteDb(""String_Node_Str"");
  if (exceptions.size() != 0) {
    String message=""String_Node_Str"" + exceptions.size();
    System.out.println(message);
    throw new AssertionError(message);
  }
}",0.8399452804377565
15699,"private static int getSaveTokenType(String s,boolean supportOffsetFetch){
switch (s.charAt(0)) {
case 'C':
    if (s.equals(""String_Node_Str"")) {
      return KEYWORD;
    }
 else     if (s.equals(""String_Node_Str"")) {
      return CURRENT_TIMESTAMP;
    }
 else     if (s.equals(""String_Node_Str"")) {
      return CURRENT_TIME;
    }
 else     if (s.equals(""String_Node_Str"")) {
      return CURRENT_DATE;
    }
  return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'D':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'E':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'F':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (supportOffsetFetch && ""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",FALSE);
case 'G':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'H':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'I':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'J':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'L':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'M':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'N':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",NULL);
case 'O':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (supportOffsetFetch && ""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'P':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'R':
return getKeywordOrIdentifier(s,""String_Node_Str"",ROWNUM);
case 'S':
if (s.equals(""String_Node_Str"")) {
return CURRENT_TIMESTAMP;
}
 else if (s.equals(""String_Node_Str"")) {
return CURRENT_TIME;
}
 else if (s.equals(""String_Node_Str"")) {
return CURRENT_TIMESTAMP;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'T':
if (""String_Node_Str"".equals(s)) {
return CURRENT_DATE;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",TRUE);
case 'U':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'W':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
default :
return IDENTIFIER;
}
}","private static int getSaveTokenType(String s,boolean supportOffsetFetch){
switch (s.charAt(0)) {
case 'C':
    if (s.equals(""String_Node_Str"")) {
      return KEYWORD;
    }
  if (s.equals(""String_Node_Str"")) {
    return KEYWORD;
  }
 else   if (s.equals(""String_Node_Str"")) {
    return CURRENT_TIMESTAMP;
  }
 else   if (s.equals(""String_Node_Str"")) {
    return CURRENT_TIME;
  }
 else   if (s.equals(""String_Node_Str"")) {
    return CURRENT_DATE;
  }
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'D':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'E':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'F':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (supportOffsetFetch && ""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",FALSE);
case 'G':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'H':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'I':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'J':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'K':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'L':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'M':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'N':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",NULL);
case 'O':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
 else if (supportOffsetFetch && ""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'P':
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'R':
return getKeywordOrIdentifier(s,""String_Node_Str"",ROWNUM);
case 'S':
if (s.equals(""String_Node_Str"")) {
return CURRENT_TIMESTAMP;
}
 else if (s.equals(""String_Node_Str"")) {
return CURRENT_TIME;
}
 else if (s.equals(""String_Node_Str"")) {
return CURRENT_TIMESTAMP;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'T':
if (""String_Node_Str"".equals(s)) {
return CURRENT_DATE;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",TRUE);
case 'U':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
case 'W':
if (""String_Node_Str"".equals(s)) {
return KEYWORD;
}
return getKeywordOrIdentifier(s,""String_Node_Str"",KEYWORD);
default :
return IDENTIFIER;
}
}",0.9239242685025818
15700,"private Column parseColumnWithType(String columnName){
  String original=currentToken;
  boolean regular=false;
  if (readIf(""String_Node_Str"")) {
    if (readIf(""String_Node_Str"")) {
      original+=""String_Node_Str"";
    }
  }
 else   if (readIf(""String_Node_Str"")) {
    if (readIf(""String_Node_Str"")) {
      original+=""String_Node_Str"";
    }
  }
 else   if (readIf(""String_Node_Str"")) {
    if (readIf(""String_Node_Str"")) {
      original+=""String_Node_Str"";
    }
  }
 else   if (readIf(""String_Node_Str"")) {
    if (readIf(""String_Node_Str"")) {
      if (readIf(""String_Node_Str"")) {
        read(""String_Node_Str"");
        original+=""String_Node_Str"";
      }
 else {
        read(""String_Node_Str"");
        read(""String_Node_Str"");
        original+=""String_Node_Str"";
      }
    }
  }
 else {
    regular=true;
  }
  long precision=-1;
  int displaySize=-1;
  java.util.List<String> enumerators=new ArrayList<String>();
  int scale=-1;
  String comment=null;
  Column templateColumn=null;
  DataType dataType;
  if (!identifiersToUpper) {
    original=StringUtils.toUpperEnglish(original);
  }
  UserDataType userDataType=database.findUserDataType(original);
  if (userDataType != null) {
    templateColumn=userDataType.getColumn();
    dataType=DataType.getDataType(templateColumn.getType());
    comment=templateColumn.getComment();
    original=templateColumn.getOriginalSQL();
    precision=templateColumn.getPrecision();
    displaySize=templateColumn.getDisplaySize();
    scale=templateColumn.getScale();
  }
 else {
    dataType=DataType.getTypeByName(original);
    if (dataType == null) {
      throw DbException.get(ErrorCode.UNKNOWN_DATA_TYPE_1,currentToken);
    }
  }
  if (database.getIgnoreCase() && dataType.type == Value.STRING && !equalsToken(""String_Node_Str"",original)) {
    original=""String_Node_Str"";
    dataType=DataType.getTypeByName(original);
  }
  if (regular) {
    read();
  }
  precision=precision == -1 ? dataType.defaultPrecision : precision;
  displaySize=displaySize == -1 ? dataType.defaultDisplaySize : displaySize;
  scale=scale == -1 ? dataType.defaultScale : scale;
  if (dataType.supportsPrecision || dataType.supportsScale) {
    if (readIf(""String_Node_Str"")) {
      if (!readIf(""String_Node_Str"")) {
        long p=readLong();
        if (readIf(""String_Node_Str"")) {
          p*=1024;
        }
 else         if (readIf(""String_Node_Str"")) {
          p*=1024 * 1024;
        }
 else         if (readIf(""String_Node_Str"")) {
          p*=1024 * 1024 * 1024;
        }
        if (p > Long.MAX_VALUE) {
          p=Long.MAX_VALUE;
        }
        original+=""String_Node_Str"" + p;
        readIf(""String_Node_Str"");
        if (dataType.supportsScale) {
          if (readIf(""String_Node_Str"")) {
            scale=readInt();
            original+=""String_Node_Str"" + scale;
          }
 else {
            if (dataType.type == Value.TIMESTAMP) {
              scale=MathUtils.convertLongToInt(p);
              p=precision;
            }
 else {
              scale=0;
            }
          }
        }
        precision=p;
        displaySize=MathUtils.convertLongToInt(precision);
        original+=""String_Node_Str"";
      }
      read(""String_Node_Str"");
    }
  }
 else   if (dataType.enumerated) {
    if (readIf(""String_Node_Str"")) {
      original+='(';
      String enumerator0=readString();
      enumerators.add(enumerator0.toLowerCase().trim());
      original+=""String_Node_Str"" + enumerator0 + ""String_Node_Str"";
      while (readIf(""String_Node_Str"")) {
        original+=',';
        String enumeratorN=readString();
        original+=""String_Node_Str"" + enumeratorN + ""String_Node_Str"";
        enumerators.add(enumeratorN.toLowerCase().trim());
      }
      read(""String_Node_Str"");
      original+=')';
    }
  }
 else   if (readIf(""String_Node_Str"")) {
    readPositiveInt();
    read(""String_Node_Str"");
  }
  if (readIf(""String_Node_Str"")) {
    read(""String_Node_Str"");
    read(""String_Node_Str"");
    if (dataType.type == Value.STRING) {
      dataType=DataType.getTypeByName(""String_Node_Str"");
    }
  }
  readIf(""String_Node_Str"");
  int type=dataType.type;
  if (scale > precision) {
    throw DbException.get(ErrorCode.INVALID_VALUE_SCALE_PRECISION,Integer.toString(scale),Long.toString(precision));
  }
  Column column=new Column(columnName,type,precision,scale,displaySize,enumerators.toArray(new String[enumerators.size()]));
  if (templateColumn != null) {
    column.setNullable(templateColumn.isNullable());
    column.setDefaultExpression(session,templateColumn.getDefaultExpression());
    int selectivity=templateColumn.getSelectivity();
    if (selectivity != Constants.SELECTIVITY_DEFAULT) {
      column.setSelectivity(selectivity);
    }
    Expression checkConstraint=templateColumn.getCheckConstraint(session,columnName);
    column.addCheckConstraint(session,checkConstraint);
  }
  column.setComment(comment);
  column.setOriginalSQL(original);
  return column;
}","private Column parseColumnWithType(String columnName){
  String original=currentToken;
  boolean regular=false;
  if (readIf(""String_Node_Str"")) {
    if (readIf(""String_Node_Str"")) {
      original+=""String_Node_Str"";
    }
  }
 else   if (readIf(""String_Node_Str"")) {
    if (readIf(""String_Node_Str"")) {
      original+=""String_Node_Str"";
    }
  }
 else   if (readIf(""String_Node_Str"")) {
    if (readIf(""String_Node_Str"")) {
      original+=""String_Node_Str"";
    }
  }
 else   if (readIf(""String_Node_Str"")) {
    if (readIf(""String_Node_Str"")) {
      if (readIf(""String_Node_Str"")) {
        read(""String_Node_Str"");
        original+=""String_Node_Str"";
      }
 else {
        read(""String_Node_Str"");
        read(""String_Node_Str"");
        original+=""String_Node_Str"";
      }
    }
  }
 else {
    regular=true;
  }
  long precision=-1;
  int displaySize=-1;
  java.util.List<String> enumerators=null;
  int scale=-1;
  String comment=null;
  Column templateColumn=null;
  DataType dataType;
  if (!identifiersToUpper) {
    original=StringUtils.toUpperEnglish(original);
  }
  UserDataType userDataType=database.findUserDataType(original);
  if (userDataType != null) {
    templateColumn=userDataType.getColumn();
    dataType=DataType.getDataType(templateColumn.getType());
    comment=templateColumn.getComment();
    original=templateColumn.getOriginalSQL();
    precision=templateColumn.getPrecision();
    displaySize=templateColumn.getDisplaySize();
    scale=templateColumn.getScale();
  }
 else {
    dataType=DataType.getTypeByName(original);
    if (dataType == null) {
      throw DbException.get(ErrorCode.UNKNOWN_DATA_TYPE_1,currentToken);
    }
  }
  if (database.getIgnoreCase() && dataType.type == Value.STRING && !equalsToken(""String_Node_Str"",original)) {
    original=""String_Node_Str"";
    dataType=DataType.getTypeByName(original);
  }
  if (regular) {
    read();
  }
  precision=precision == -1 ? dataType.defaultPrecision : precision;
  displaySize=displaySize == -1 ? dataType.defaultDisplaySize : displaySize;
  scale=scale == -1 ? dataType.defaultScale : scale;
  if (dataType.supportsPrecision || dataType.supportsScale) {
    if (readIf(""String_Node_Str"")) {
      if (!readIf(""String_Node_Str"")) {
        long p=readLong();
        if (readIf(""String_Node_Str"")) {
          p*=1024;
        }
 else         if (readIf(""String_Node_Str"")) {
          p*=1024 * 1024;
        }
 else         if (readIf(""String_Node_Str"")) {
          p*=1024 * 1024 * 1024;
        }
        if (p > Long.MAX_VALUE) {
          p=Long.MAX_VALUE;
        }
        original+=""String_Node_Str"" + p;
        readIf(""String_Node_Str"");
        if (dataType.supportsScale) {
          if (readIf(""String_Node_Str"")) {
            scale=readInt();
            original+=""String_Node_Str"" + scale;
          }
 else {
            if (dataType.type == Value.TIMESTAMP) {
              scale=MathUtils.convertLongToInt(p);
              p=precision;
            }
 else {
              scale=0;
            }
          }
        }
        precision=p;
        displaySize=MathUtils.convertLongToInt(precision);
        original+=""String_Node_Str"";
      }
      read(""String_Node_Str"");
    }
  }
 else   if (dataType.enumerated) {
    if (readIf(""String_Node_Str"")) {
      enumerators=new ArrayList<String>();
      original+='(';
      String enumerator0=readString();
      enumerators.add(enumerator0.toLowerCase().trim());
      original+=""String_Node_Str"" + enumerator0 + ""String_Node_Str"";
      while (readIf(""String_Node_Str"")) {
        original+=',';
        String enumeratorN=readString();
        original+=""String_Node_Str"" + enumeratorN + ""String_Node_Str"";
        enumerators.add(enumeratorN.toLowerCase().trim());
      }
      read(""String_Node_Str"");
      original+=')';
    }
  }
 else   if (readIf(""String_Node_Str"")) {
    readPositiveInt();
    read(""String_Node_Str"");
  }
  if (readIf(""String_Node_Str"")) {
    read(""String_Node_Str"");
    read(""String_Node_Str"");
    if (dataType.type == Value.STRING) {
      dataType=DataType.getTypeByName(""String_Node_Str"");
    }
  }
  readIf(""String_Node_Str"");
  int type=dataType.type;
  if (scale > precision) {
    throw DbException.get(ErrorCode.INVALID_VALUE_SCALE_PRECISION,Integer.toString(scale),Long.toString(precision));
  }
  Column column=new Column(columnName,type,precision,scale,displaySize,enumerators == null ? null : enumerators.toArray(new String[enumerators.size()]));
  if (templateColumn != null) {
    column.setNullable(templateColumn.isNullable());
    column.setDefaultExpression(session,templateColumn.getDefaultExpression());
    int selectivity=templateColumn.getSelectivity();
    if (selectivity != Constants.SELECTIVITY_DEFAULT) {
      column.setSelectivity(selectivity);
    }
    Expression checkConstraint=templateColumn.getCheckConstraint(session,columnName);
    column.addCheckConstraint(session,checkConstraint);
  }
  column.setComment(comment);
  column.setOriginalSQL(original);
  return column;
}",0.9903087221500648
15701,"@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  createDb();
  testQuotedIdentifier();
  testWithSingleIndexName();
  testWithEmptyIndexHintsList();
  testWithInvalidIndexName();
  testWithMultipleIndexNames();
  testPlanSqlHasIndexesInCorrectOrder();
  testWithTableAlias();
  testWithTableAliasCalledUse();
  deleteDb(""String_Node_Str"");
}","@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  Connection conn=createDb();
  testQuotedIdentifier();
  testWithSingleIndexName();
  testWithEmptyIndexHintsList();
  testWithInvalidIndexName();
  testWithMultipleIndexNames();
  testPlanSqlHasIndexesInCorrectOrder();
  testWithTableAlias();
  testWithTableAliasCalledUse();
  conn.close();
  deleteDb(""String_Node_Str"");
}",0.9588688946015425
15702,"private void createDb() throws SQLException {
  Connection conn=getConnection(""String_Node_Str"");
  Statement stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
}","private Connection createDb() throws SQLException {
  Connection conn=getConnection(""String_Node_Str"");
  Statement stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  return conn;
}",0.9500860585197934
15703,"/** 
 * Calculate the number of crossed unit boundaries between two timestamps. This method is supported for MS SQL Server compatibility. <pre> DATEDIFF(YEAR, '2004-12-31', '2005-01-01') = 1 </pre>
 * @param part the part
 * @param d1 the first date
 * @param d2 the second date
 * @return the number of crossed boundaries
 */
private static long datediff(String part,Timestamp d1,Timestamp d2){
  int field=getDatePart(part);
  Calendar calendar=Calendar.getInstance();
  long t1=d1.getTime(), t2=d2.getTime();
  TimeZone zone=calendar.getTimeZone();
  calendar.setTime(d1);
  t1+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
  calendar.setTime(d2);
  t2+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
switch (field) {
case Calendar.MILLISECOND:
    return t2 - t1;
case Calendar.SECOND:
case Calendar.MINUTE:
case Calendar.HOUR_OF_DAY:
case Calendar.DAY_OF_YEAR:
case Calendar.WEEK_OF_YEAR:
{
    long hour=60 * 60 * 1000;
    long add=Math.min(t1 / hour * hour,t2 / hour * hour);
    t1-=add;
    t2-=add;
switch (field) {
case Calendar.SECOND:
      return t2 / 1000 - t1 / 1000;
case Calendar.MINUTE:
    return t2 / (60 * 1000) - t1 / (60 * 1000);
case Calendar.HOUR_OF_DAY:
  return t2 / hour - t1 / hour;
case Calendar.DAY_OF_YEAR:
return t2 / (hour * 24) - t1 / (hour * 24);
case Calendar.WEEK_OF_YEAR:
return t2 / (hour * 24 * 7) - t1 / (hour * 24 * 7);
default :
throw DbException.throwInternalError(""String_Node_Str"" + field);
}
}
case Calendar.DATE:
return t2 / (24 * 60 * 60* 1000) - t1 / (24 * 60 * 60* 1000);
default :
break;
}
calendar.setTimeInMillis(t1);
int year1=calendar.get(Calendar.YEAR);
int month1=calendar.get(Calendar.MONTH);
calendar.setTimeInMillis(t2);
int year2=calendar.get(Calendar.YEAR);
int month2=calendar.get(Calendar.MONTH);
int result=year2 - year1;
if (field == Calendar.MONTH) {
return 12 * result + (month2 - month1);
}
 else if (field == Calendar.YEAR) {
return result;
}
 else {
throw DbException.getUnsupportedException(""String_Node_Str"" + part);
}
}","/** 
 * Calculate the number of crossed unit boundaries between two timestamps. This method is supported for MS SQL Server compatibility. <pre> DATEDIFF(YEAR, '2004-12-31', '2005-01-01') = 1 </pre>
 * @param part the part
 * @param d1 the first date
 * @param d2 the second date
 * @return the number of crossed boundaries
 */
private static long datediff(String part,Timestamp d1,Timestamp d2){
  int field=getDatePart(part);
  Calendar calendar=Calendar.getInstance();
  long t1=d1.getTime(), t2=d2.getTime();
  TimeZone zone=calendar.getTimeZone();
  calendar.setTime(d1);
  t1+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
  calendar.setTime(d2);
  t2+=zone.getOffset(calendar.get(Calendar.ERA),calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.DAY_OF_WEEK),calendar.get(Calendar.MILLISECOND));
switch (field) {
case Calendar.MILLISECOND:
    return t2 - t1;
case Calendar.SECOND:
case Calendar.MINUTE:
case Calendar.HOUR_OF_DAY:
case Calendar.DAY_OF_YEAR:
case Calendar.WEEK_OF_YEAR:
{
    long hour=60 * 60 * 1000;
    long add=Math.min(t1 / hour * hour,t2 / hour * hour);
    t1-=add;
    t2-=add;
switch (field) {
case Calendar.SECOND:
      return t2 / 1000 - t1 / 1000;
case Calendar.MINUTE:
    return t2 / (60 * 1000) - t1 / (60 * 1000);
case Calendar.HOUR_OF_DAY:
  return t2 / hour - t1 / hour;
case Calendar.DAY_OF_YEAR:
return t2 / (hour * 24) - t1 / (hour * 24);
case Calendar.WEEK_OF_YEAR:
return t2 / (hour * 24 * 7) - t1 / (hour * 24 * 7);
default :
throw DbException.throwInternalError(""String_Node_Str"" + field);
}
}
case Calendar.DATE:
return t2 / (24 * 60 * 60* 1000) - t1 / (24 * 60 * 60* 1000);
default :
break;
}
calendar.setTime(d1);
int year1=calendar.get(Calendar.YEAR);
int month1=calendar.get(Calendar.MONTH);
calendar.setTime(d2);
int year2=calendar.get(Calendar.YEAR);
int month2=calendar.get(Calendar.MONTH);
int result=year2 - year1;
if (field == Calendar.MONTH) {
return 12 * result + (month2 - month1);
}
 else if (field == Calendar.YEAR) {
return result;
}
 else {
throw DbException.getUnsupportedException(""String_Node_Str"" + part);
}
}",0.9948074426655128
15704,"@SuppressWarnings(""String_Node_Str"") private void changeLength(long len){
  length=len;
  len=MathUtils.roundUpLong(len,BLOCK_SIZE);
  int blocks=(int)(len >>> BLOCK_SIZE_SHIFT);
  if (blocks != buffers.length) {
    final AtomicReference<ByteBuffer>[] newBuffers=new AtomicReference[blocks];
    System.arraycopy(buffers,0,newBuffers,0,Math.min(buffers.length,buffers.length));
    for (int i=buffers.length; i < blocks; i++) {
      newBuffers[i]=new AtomicReference<ByteBuffer>(COMPRESSED_EMPTY_BLOCK);
    }
    buffers=newBuffers;
  }
}","@SuppressWarnings(""String_Node_Str"") private void changeLength(long len){
  length=len;
  len=MathUtils.roundUpLong(len,BLOCK_SIZE);
  int blocks=(int)(len >>> BLOCK_SIZE_SHIFT);
  if (blocks != buffers.length) {
    final AtomicReference<ByteBuffer>[] newBuffers=new AtomicReference[blocks];
    System.arraycopy(buffers,0,newBuffers,0,Math.min(buffers.length,newBuffers.length));
    for (int i=buffers.length; i < blocks; i++) {
      newBuffers[i]=new AtomicReference<ByteBuffer>(COMPRESSED_EMPTY_BLOCK);
    }
    buffers=newBuffers;
  }
}",0.9953917050691244
15705,"/** 
 * Truncate the file.
 * @param newLength the new length
 */
void truncate(long newLength){
  changeLength(newLength);
  long end=MathUtils.roundUpLong(newLength,BLOCK_SIZE);
  if (end != newLength) {
    int lastPage=(int)(newLength >>> BLOCK_SIZE_SHIFT);
    expand(lastPage);
    ByteBuffer d=data[lastPage];
    for (int i=(int)(newLength & BLOCK_SIZE_MASK); i < BLOCK_SIZE; i++) {
      d.put(i,(byte)0);
    }
    if (compress) {
      addToCompressLaterCache(lastPage);
    }
  }
}","/** 
 * Truncate the file.
 * @param newLength the new length
 */
synchronized void truncate(long newLength){
  changeLength(newLength);
  long end=MathUtils.roundUpLong(newLength,BLOCK_SIZE);
  if (end != newLength) {
    int lastPage=(int)(newLength >>> BLOCK_SIZE_SHIFT);
    expand(lastPage);
    ByteBuffer d=data[lastPage];
    for (int i=(int)(newLength & BLOCK_SIZE_MASK); i < BLOCK_SIZE; i++) {
      d.put(i,(byte)0);
    }
    if (compress) {
      addToCompressLaterCache(lastPage);
    }
  }
}",0.986986986986987
15706,"/** 
 * Compress the data in a byte array.
 * @param page which page to compress
 */
void compress(int page){
  ByteBuffer[] list=data;
  if (page >= list.length) {
    return;
  }
  ByteBuffer d=list[page];
synchronized (LZF) {
    int len=LZF.compress(d,0,BUFFER,0);
    d=ByteBuffer.allocateDirect(len);
    d.put(BUFFER,0,len);
    list[page]=d;
  }
}","/** 
 * Compress the data in a byte array.
 * @param page which page to compress
 */
void compress(int page){
  ByteBuffer[] list=data;
  if (page >= list.length) {
    return;
  }
  ByteBuffer d=list[page];
  int len=LZF.compress(d,0,compressOutputBuffer,0);
  d=ByteBuffer.allocateDirect(len);
  d.put(compressOutputBuffer,0,len);
  list[page]=d;
}",0.8340425531914893
15707,"private void expand(int page){
  ByteBuffer[] list=data;
  if (page >= list.length) {
    return;
  }
  ByteBuffer d=list[page];
  if (d.capacity() == BLOCK_SIZE) {
    return;
  }
  ByteBuffer out=ByteBuffer.allocateDirect(BLOCK_SIZE);
  if (d != COMPRESSED_EMPTY_BLOCK) {
synchronized (LZF) {
      d.position(0);
      CompressLZF.expand(d,out);
    }
  }
  list[page]=out;
}","private void expand(int page){
  ByteBuffer[] list=data;
  if (page >= list.length) {
    return;
  }
  ByteBuffer d=list[page];
  if (d.capacity() == BLOCK_SIZE) {
    return;
  }
  ByteBuffer out=ByteBuffer.allocateDirect(BLOCK_SIZE);
  if (d != COMPRESSED_EMPTY_BLOCK) {
    d.position(0);
    CompressLZF.expand(d,out);
  }
  list[page]=out;
}",0.8275862068965517
15708,"private void addToCompressLaterCache(int page){
  CompressItem c=new CompressItem(this,page);
synchronized (LZF) {
    COMPRESS_LATER.put(c,c);
  }
}","private void addToCompressLaterCache(int page){
  CompressItem c=new CompressItem(this,page);
  compressLaterCache.put(c,c);
}",0.8
15709,"/** 
 * Read or write.
 * @param pos the position
 * @param b the byte array
 * @param off the offset within the byte array
 * @param len the number of bytes
 * @param write true for writing
 * @return the new position
 */
long readWrite(long pos,ByteBuffer b,int off,int len,boolean write){
  long end=pos + len;
  if (end > length) {
    if (write) {
      changeLength(end);
    }
 else {
      len=(int)(length - pos);
    }
  }
  while (len > 0) {
    int l=(int)Math.min(len,BLOCK_SIZE - (pos & BLOCK_SIZE_MASK));
    int page=(int)(pos >>> BLOCK_SIZE_SHIFT);
    expand(page);
    ByteBuffer block=data[page];
    int blockOffset=(int)(pos & BLOCK_SIZE_MASK);
    if (write) {
      ByteBuffer tmp=b.slice();
      tmp.position(off);
      tmp.limit(off + l);
      block.position(blockOffset);
      block.put(tmp);
    }
 else {
      ByteBuffer tmp=block.duplicate();
      tmp.position(blockOffset);
      tmp.limit(l + blockOffset);
      int oldPosition=b.position();
      b.position(off);
      b.put(tmp);
      b.position(oldPosition);
    }
    if (compress) {
      addToCompressLaterCache(page);
    }
    off+=l;
    pos+=l;
    len-=l;
  }
  return pos;
}","/** 
 * Read or write.
 * @param pos the position
 * @param b the byte array
 * @param off the offset within the byte array
 * @param len the number of bytes
 * @param write true for writing
 * @return the new position
 */
synchronized long readWrite(long pos,ByteBuffer b,int off,int len,boolean write){
  long end=pos + len;
  if (end > length) {
    if (write) {
      changeLength(end);
    }
 else {
      len=(int)(length - pos);
    }
  }
  while (len > 0) {
    int l=(int)Math.min(len,BLOCK_SIZE - (pos & BLOCK_SIZE_MASK));
    int page=(int)(pos >>> BLOCK_SIZE_SHIFT);
    expand(page);
    ByteBuffer block=data[page];
    int blockOffset=(int)(pos & BLOCK_SIZE_MASK);
    if (write) {
      ByteBuffer tmp=b.slice();
      tmp.position(off);
      tmp.limit(off + l);
      block.position(blockOffset);
      block.put(tmp);
    }
 else {
      ByteBuffer tmp=block.duplicate();
      tmp.position(blockOffset);
      tmp.limit(l + blockOffset);
      int oldPosition=b.position();
      b.position(off);
      b.put(tmp);
      b.position(oldPosition);
    }
    if (compress) {
      addToCompressLaterCache(page);
    }
    off+=l;
    pos+=l;
    len-=l;
  }
  return pos;
}",0.9945078158005914
15710,"/** 
 * Return an object of this class if possible.
 * @param iface the class
 * @return this
 */
@Override @SuppressWarnings(""String_Node_Str"") public <T>T unwrap(Class<T> iface) throws SQLException {
  if (isWrapperFor(iface)) {
    return (T)this;
  }
  throw DbException.getInvalidValueException(""String_Node_Str"",iface);
}","/** 
 * Return an object of this class if possible.
 * @param iface the class
 * @return this
 */
@Override @SuppressWarnings(""String_Node_Str"") public <T>T unwrap(Class<T> iface) throws SQLException {
  try {
    if (isWrapperFor(iface)) {
      return (T)this;
    }
    throw DbException.getInvalidValueException(""String_Node_Str"",iface);
  }
 catch (  Exception e) {
    throw logAndConvert(e);
  }
}",0.8946648426812586
15711,"/** 
 * Return an object of this class if possible.
 * @param iface the class
 * @return this
 */
@Override @SuppressWarnings(""String_Node_Str"") public <T>T unwrap(Class<T> iface) throws SQLException {
  if (isWrapperFor(iface)) {
    return (T)this;
  }
  throw DbException.getInvalidValueException(""String_Node_Str"",iface);
}","/** 
 * Return an object of this class if possible.
 * @param iface the class
 * @return this
 */
@Override @SuppressWarnings(""String_Node_Str"") public <T>T unwrap(Class<T> iface) throws SQLException {
  try {
    if (isWrapperFor(iface)) {
      return (T)this;
    }
    throw DbException.getInvalidValueException(""String_Node_Str"",iface);
  }
 catch (  Exception e) {
    throw logAndConvert(e);
  }
}",0.8946648426812586
15712,"/** 
 * Return an object of this class if possible.
 * @param iface the class
 * @return this
 */
@Override @SuppressWarnings(""String_Node_Str"") public <T>T unwrap(Class<T> iface) throws SQLException {
  if (isWrapperFor(iface)) {
    return (T)this;
  }
  throw DbException.getInvalidValueException(""String_Node_Str"",iface);
}","/** 
 * Return an object of this class if possible.
 * @param iface the class
 * @return this
 */
@Override @SuppressWarnings(""String_Node_Str"") public <T>T unwrap(Class<T> iface) throws SQLException {
  try {
    if (isWrapperFor(iface)) {
      return (T)this;
    }
    throw DbException.getInvalidValueException(""String_Node_Str"",iface);
  }
 catch (  Exception e) {
    throw logAndConvert(e);
  }
}",0.8946648426812586
15713,"@Override public void prepare(){
  if (isPrepared) {
    return;
  }
  if (SysProperties.CHECK && !checkInit) {
    DbException.throwInternalError(""String_Node_Str"");
  }
  if (orderList != null) {
    sort=prepareOrder(orderList,expressions.size());
    orderList=null;
  }
  for (int i=0; i < expressions.size(); i++) {
    Expression e=expressions.get(i);
    expressions.set(i,e.optimize(session));
  }
  if (condition != null) {
    condition=condition.optimize(session);
    for (    TableFilter f : filters) {
      if (!f.isJoinOuter() && !f.isJoinOuterIndirect()) {
        condition.createIndexConditions(session,f);
      }
    }
  }
  if (isGroupQuery && groupIndex == null && havingIndex < 0 && filters.size() == 1) {
    if (condition == null) {
      Table t=filters.get(0).getTable();
      ExpressionVisitor optimizable=ExpressionVisitor.getOptimizableVisitor(t);
      isQuickAggregateQuery=isEverything(optimizable);
    }
  }
  cost=preparePlan(session.isParsingView());
  if (distinct && session.getDatabase().getSettings().optimizeDistinct && !isGroupQuery&& filters.size() == 1 && expressions.size() == 1 && condition == null) {
    Expression expr=expressions.get(0);
    expr=expr.getNonAliasExpression();
    if (expr instanceof ExpressionColumn) {
      Column column=((ExpressionColumn)expr).getColumn();
      int selectivity=column.getSelectivity();
      Index columnIndex=topTableFilter.getTable().getIndexForColumn(column);
      if (columnIndex != null && selectivity != Constants.SELECTIVITY_DEFAULT && selectivity < 20) {
        boolean ascending=columnIndex.getIndexColumns()[0].sortType == SortOrder.ASCENDING;
        Index current=topTableFilter.getIndex();
        if (columnIndex.canFindNext() && ascending && (current == null || current.getIndexType().isScan() || columnIndex == current)) {
          IndexType type=columnIndex.getIndexType();
          if (!type.isHash() && (!type.isUnique() || columnIndex.getColumns().length > 1)) {
            topTableFilter.setIndex(columnIndex);
            isDistinctQuery=true;
          }
        }
      }
    }
  }
  if (sort != null && !isQuickAggregateQuery && !isGroupQuery) {
    Index index=getSortIndex();
    Index current=topTableFilter.getIndex();
    if (index != null && current != null) {
      if (current.getIndexType().isScan() || current == index) {
        topTableFilter.setIndex(index);
        if (!topTableFilter.hasInComparisons()) {
          sortUsingIndex=true;
        }
      }
 else       if (index.getIndexColumns().length >= current.getIndexColumns().length) {
        IndexColumn[] sortColumns=index.getIndexColumns();
        IndexColumn[] currentColumns=current.getIndexColumns();
        boolean swapIndex=false;
        for (int i=0; i < currentColumns.length; i++) {
          if (sortColumns[i].column != currentColumns[i].column) {
            swapIndex=false;
            break;
          }
          if (sortColumns[i].sortType != currentColumns[i].sortType) {
            swapIndex=true;
          }
        }
        if (swapIndex) {
          topTableFilter.setIndex(index);
          sortUsingIndex=true;
        }
      }
    }
  }
  if (!isQuickAggregateQuery && isGroupQuery && getGroupByExpressionCount() > 0) {
    Index index=getGroupSortedIndex();
    Index current=topTableFilter.getIndex();
    if (index != null && current != null && (current.getIndexType().isScan() || current == index)) {
      topTableFilter.setIndex(index);
      isGroupSortedQuery=true;
    }
  }
  expressionArray=new Expression[expressions.size()];
  expressions.toArray(expressionArray);
  isPrepared=true;
}","@Override public void prepare(){
  if (isPrepared) {
    return;
  }
  if (SysProperties.CHECK && !checkInit) {
    DbException.throwInternalError(""String_Node_Str"");
  }
  if (orderList != null) {
    sort=prepareOrder(orderList,expressions.size());
    orderList=null;
  }
  for (int i=0; i < expressions.size(); i++) {
    Expression e=expressions.get(i);
    expressions.set(i,e.optimize(session));
  }
  if (condition != null) {
    condition=condition.optimize(session);
    for (    TableFilter f : filters) {
      if (!f.isJoinOuter() && !f.isJoinOuterIndirect()) {
        condition.createIndexConditions(session,f);
      }
    }
  }
  if (isGroupQuery && groupIndex == null && havingIndex < 0 && filters.size() == 1) {
    if (condition == null) {
      Table t=filters.get(0).getTable();
      ExpressionVisitor optimizable=ExpressionVisitor.getOptimizableVisitor(t);
      isQuickAggregateQuery=isEverything(optimizable);
    }
  }
  cost=preparePlan(session.isParsingView());
  if (distinct && session.getDatabase().getSettings().optimizeDistinct && !isGroupQuery&& filters.size() == 1 && expressions.size() == 1 && condition == null) {
    Expression expr=expressions.get(0);
    expr=expr.getNonAliasExpression();
    if (expr instanceof ExpressionColumn) {
      Column column=((ExpressionColumn)expr).getColumn();
      int selectivity=column.getSelectivity();
      Index columnIndex=topTableFilter.getTable().getIndexForColumn(column);
      if (columnIndex != null && selectivity != Constants.SELECTIVITY_DEFAULT && selectivity < 20) {
        boolean ascending=columnIndex.getIndexColumns()[0].sortType == SortOrder.ASCENDING;
        Index current=topTableFilter.getIndex();
        if (columnIndex.canFindNext() && ascending && (current == null || current.getIndexType().isScan() || columnIndex == current)) {
          IndexType type=columnIndex.getIndexType();
          if (!type.isHash() && (!type.isUnique() || columnIndex.getColumns().length > 1)) {
            topTableFilter.setIndex(columnIndex);
            isDistinctQuery=true;
          }
        }
      }
    }
  }
  if (sort != null && !isQuickAggregateQuery && !isGroupQuery) {
    Index index=getSortIndex();
    Index current=topTableFilter.getIndex();
    if (index != null && current != null) {
      if (current.getIndexType().isScan() || current == index) {
        topTableFilter.setIndex(index);
        if (!topTableFilter.hasInComparisons()) {
          sortUsingIndex=true;
        }
      }
 else       if (index.getIndexColumns() != null && index.getIndexColumns().length >= current.getIndexColumns().length) {
        IndexColumn[] sortColumns=index.getIndexColumns();
        IndexColumn[] currentColumns=current.getIndexColumns();
        boolean swapIndex=false;
        for (int i=0; i < currentColumns.length; i++) {
          if (sortColumns[i].column != currentColumns[i].column) {
            swapIndex=false;
            break;
          }
          if (sortColumns[i].sortType != currentColumns[i].sortType) {
            swapIndex=true;
          }
        }
        if (swapIndex) {
          topTableFilter.setIndex(index);
          sortUsingIndex=true;
        }
      }
    }
  }
  if (!isQuickAggregateQuery && isGroupQuery && getGroupByExpressionCount() > 0) {
    Index index=getGroupSortedIndex();
    Index current=topTableFilter.getIndex();
    if (index != null && current != null && (current.getIndexType().isScan() || current == index)) {
      topTableFilter.setIndex(index);
      isGroupSortedQuery=true;
    }
  }
  expressionArray=new Expression[expressions.size()];
  expressions.toArray(expressionArray);
  isPrepared=true;
}",0.9951995611027294
15714,"private void cleanTempTables(boolean closeSession){
  if (localTempTables != null && localTempTables.size() > 0) {
synchronized (database) {
      Iterator<Table> it=localTempTables.values().iterator();
      while (it.hasNext()) {
        Table table=it.next();
        if (closeSession || table.getOnCommitDrop()) {
          modificationId++;
          table.setModified();
          it.remove();
          table.removeChildrenAndResources(this);
          if (closeSession) {
            database.commit(this);
          }
        }
 else         if (table.getOnCommitTruncate()) {
          table.truncate(this);
        }
      }
      if (closeSession) {
        database.unlockMeta(this);
      }
    }
  }
}","private void cleanTempTables(boolean closeSession){
  if (localTempTables != null && localTempTables.size() > 0) {
synchronized (database) {
      HashMap<String,Table> tempTables=localTempTables;
      localTempTables=null;
      for (      Table table : tempTables.values()) {
        if (closeSession || table.getOnCommitDrop()) {
          modificationId++;
          table.setModified();
          table.removeChildrenAndResources(this);
          if (closeSession) {
            database.commit(this);
          }
        }
 else         if (table.getOnCommitTruncate()) {
          table.truncate(this);
        }
      }
      if (closeSession) {
        database.unlockMeta(this);
      }
    }
  }
}",0.8617543859649123
15715,"private void deleteDb(){
  FileUtils.delete(getDatabaseName());
}","private void deleteDb(int seed){
  FileUtils.delete(getDatabaseName(seed));
}",0.9154929577464788
15716,"@Override public void test() throws Exception {
  if (config.networked) {
    return;
  }
  int len=getSize(2,6);
  exitOnError=false;
  for (int a=0; a < len; a++) {
    int s=MathUtils.randomInt(Integer.MAX_VALUE);
    testCase(s);
  }
}","@Override public void test() throws Exception {
  if (config.networked) {
    return;
  }
  int len=getSize(2,6);
  for (int a=0; a < len; a++) {
    int s=MathUtils.randomInt(Integer.MAX_VALUE);
    testCase(s);
  }
}",0.9540481400437636
15717,"private void testWithSeed() throws Exception {
  Connection conn=null;
  try {
    conn=connect();
  }
 catch (  SQLException e) {
    processException(""String_Node_Str"",e);
    conn=connect();
  }
  Statement stat=conn.createStatement();
  BnfRandom bnfRandom=new BnfRandom();
  bnfRandom.setSeed(seed);
  for (int i=0; i < bnfRandom.getStatementCount(); i++) {
    String sql=bnfRandom.getRandomSQL();
    if (sql != null) {
      try {
        Thread.yield();
        total++;
        if (total % 100 == 0) {
          printTime(""String_Node_Str"" + total + ""String_Node_Str""+ (100 * success / total)+ ""String_Node_Str"");
        }
        stat.execute(sql);
        success++;
      }
 catch (      SQLException e) {
        processException(sql,e);
      }
    }
  }
  try {
    conn.close();
    conn=connect();
    conn.createStatement().execute(""String_Node_Str"");
    conn.close();
  }
 catch (  SQLException e) {
    processException(""String_Node_Str"",e);
  }
}","private void testWithSeed(int seed) throws Exception {
  Connection conn=null;
  try {
    conn=getConnection(getDatabaseName(seed));
  }
 catch (  SQLException e) {
    if (e.getSQLState().equals(""String_Node_Str"")) {
      TestBase.logError(""String_Node_Str"" + seed + ""String_Node_Str""+ ""String_Node_Str""+ e.toString()+ ""String_Node_Str""+ ""String_Node_Str"",e);
    }
    conn=getConnection(getDatabaseName(seed));
  }
  Statement stat=conn.createStatement();
  BnfRandom bnfRandom=new BnfRandom();
  bnfRandom.setSeed(seed);
  for (int i=0; i < bnfRandom.getStatementCount(); i++) {
    String sql=bnfRandom.getRandomSQL();
    if (sql != null) {
      try {
        Thread.yield();
        total++;
        if (total % 100 == 0) {
          printTime(""String_Node_Str"" + total + ""String_Node_Str""+ (100 * success / total)+ ""String_Node_Str"");
        }
        stat.execute(sql);
        success++;
      }
 catch (      SQLException e) {
        if (e.getSQLState().equals(""String_Node_Str"")) {
          TestBase.logError(""String_Node_Str"" + seed + ""String_Node_Str""+ ""String_Node_Str""+ e.toString()+ ""String_Node_Str""+ sql,e);
        }
      }
    }
  }
  try {
    conn.close();
    conn=getConnection(getDatabaseName(seed));
    conn.createStatement().execute(""String_Node_Str"");
    conn.close();
  }
 catch (  SQLException e) {
    if (e.getSQLState().equals(""String_Node_Str"")) {
      TestBase.logError(""String_Node_Str"" + seed + ""String_Node_Str""+ ""String_Node_Str""+ e.toString()+ ""String_Node_Str""+ ""String_Node_Str"",e);
    }
  }
}",0.7135478744537147
15718,"protected String getDatabaseName(){
  return getTestName() + ""String_Node_Str"" + seed;
}","private String getDatabaseName(int seed){
  return getTestName() + ""String_Node_Str"" + seed;
}",0.912087912087912
15719,"@Override public void testCase(int i) throws Exception {
  String old=SysProperties.getScriptDirectory();
  try {
    System.setProperty(SysProperties.H2_SCRIPT_DIRECTORY,getBaseDir() + ""String_Node_Str"" + getTestName());
    seed=i;
    printTime(""String_Node_Str"" + seed);
    deleteDb();
    testWithSeed();
  }
  finally {
    System.setProperty(SysProperties.H2_SCRIPT_DIRECTORY,old);
  }
  deleteDb();
}","@Override public void testCase(int seed) throws Exception {
  String old=SysProperties.getScriptDirectory();
  try {
    System.setProperty(SysProperties.H2_SCRIPT_DIRECTORY,getBaseDir() + ""String_Node_Str"" + getTestName());
    printTime(""String_Node_Str"" + seed);
    deleteDb(seed);
    testWithSeed(seed);
  }
  finally {
    System.setProperty(SysProperties.H2_SCRIPT_DIRECTORY,old);
  }
  deleteDb(seed);
}",0.9646772228989038
15720,"/** 
 * Compute spatial index cost
 * @param masks Search mask
 * @param rowCount Table row count
 * @param columns Table columns
 * @return Index cost hint
 */
public static long getCostRangeIndex(int[] masks,long rowCount,Column[] columns){
  rowCount+=Constants.COST_ROW_OFFSET;
  long cost=rowCount;
  if (masks == null) {
    return cost;
  }
  for (  Column column : columns) {
    int index=column.getColumnId();
    int mask=masks[index];
    if ((mask & IndexCondition.SPATIAL_INTERSECTS) != 0) {
      cost=3 + rowCount / 4;
    }
  }
  return 10 * cost;
}","/** 
 * Compute spatial index cost
 * @param masks Search mask
 * @param rowCount Table row count
 * @param columns Table columns
 * @return Index cost hint
 */
public static long getCostRangeIndex(int[] masks,long rowCount,Column[] columns){
  if (columns.length == 0) {
    return Long.MAX_VALUE;
  }
  for (  Column column : columns) {
    int index=column.getColumnId();
    int mask=masks[index];
    if ((mask & IndexCondition.SPATIAL_INTERSECTS) != IndexCondition.SPATIAL_INTERSECTS) {
      return Long.MAX_VALUE;
    }
  }
  return 2;
}",0.8262826282628263
15721,"/** 
 * Update the value for the given key. The key must exist.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key
 * @param value the new value
 * @return the old value (never null)
 */
private Object set(Page p,long writeVersion,Object key,Object value){
  if (p.isLeaf()) {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (keyType.equals(p.getKey(i),key)) {
        return p.setValue(i,value);
      }
    }
  }
 else {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (contains(p,i,key)) {
        Page c=p.getChildPage(i);
        if (get(c,key) != null) {
          c=c.copy(writeVersion);
          Object result=set(c,writeVersion,key,value);
          p.setChild(i,c);
          return result;
        }
      }
    }
  }
  throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",key);
}","/** 
 * Update the value for the given key. The key must exist.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key
 * @param value the new value
 * @return the old value (never null)
 */
private Object set(Page p,long writeVersion,Object key,Object value){
  if (p.isLeaf()) {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (keyType.equals(p.getKey(i),key)) {
        p.setKey(i,key);
        return p.setValue(i,value);
      }
    }
  }
 else {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (contains(p,i,key)) {
        Page c=p.getChildPage(i);
        if (get(c,key) != null) {
          c=c.copy(writeVersion);
          Object result=set(c,writeVersion,key,value);
          p.setChild(i,c);
          return result;
        }
      }
    }
  }
  throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",key);
}",0.9858356940509916
15722,"private void testScanIndexOnNonSpatialQuery() throws SQLException {
  deleteDb(""String_Node_Str"");
  Connection conn=getConnection(URL);
  try {
    Statement stat=conn.createStatement();
    stat.execute(""String_Node_Str"");
    stat.execute(""String_Node_Str"" + ""String_Node_Str"");
    stat.execute(""String_Node_Str"");
    ResultSet rs=stat.executeQuery(""String_Node_Str"");
    assertTrue(rs.next());
    assertContains(rs.getString(1),""String_Node_Str"");
  }
  finally {
    conn.close();
  }
  deleteDb(""String_Node_Str"");
}","private void testScanIndexOnNonSpatialQuery() throws SQLException {
  deleteDb(""String_Node_Str"");
  Connection conn=getConnection(URL);
  try {
    Statement stat=conn.createStatement();
    stat.execute(""String_Node_Str"");
    stat.execute(""String_Node_Str"" + ""String_Node_Str"");
    stat.execute(""String_Node_Str"");
    ResultSet rs=stat.executeQuery(""String_Node_Str"");
    assertTrue(rs.next());
    assertFalse(rs.getString(1).contains(""String_Node_Str"" + ""String_Node_Str""));
  }
  finally {
    conn.close();
  }
  deleteDb(""String_Node_Str"");
}",0.9267840593141798
15723,"private void testSpatial() throws SQLException {
  testBug1();
  testSpatialValues();
  testOverlap();
  testNotOverlap();
  testPersistentSpatialIndex();
  testSpatialIndexQueryMultipleTable();
  testIndexTransaction();
  testJavaAlias();
  testJavaAliasTableFunction();
  testMemorySpatialIndex();
  testGeometryDataType();
  testWKB();
  testValueConversion();
  testEquals();
  testTableFunctionGeometry();
  testHashCode();
  testAggregateWithGeometry();
  testTableViewSpatialPredicate();
  testValueGeometryScript();
  testInPlaceUpdate();
  testScanIndexOnNonSpatialQuery();
  testStoreCorruption();
  testExplainSpatialIndexWithPk();
  testNullableGeometry();
  testNullableGeometryDelete();
  testNullableGeometryInsert();
  testNullableGeometryUpdate();
}","private void testSpatial() throws SQLException {
  testBug1();
  testSpatialValues();
  testOverlap();
  testNotOverlap();
  testPersistentSpatialIndex();
  testSpatialIndexQueryMultipleTable();
  testIndexTransaction();
  testJavaAlias();
  testJavaAliasTableFunction();
  testMemorySpatialIndex();
  testGeometryDataType();
  testWKB();
  testValueConversion();
  testEquals();
  testTableFunctionGeometry();
  testHashCode();
  testAggregateWithGeometry();
  testTableViewSpatialPredicate();
  testValueGeometryScript();
  testInPlaceUpdate();
  testScanIndexOnNonSpatialQuery();
  testStoreCorruption();
  testExplainSpatialIndexWithPk();
  testNullableGeometry();
  testNullableGeometryDelete();
  testNullableGeometryInsert();
  testNullableGeometryUpdate();
  testIndexUpdateNullGeometry();
  testInsertNull();
}",0.9665615141955836
15724,"@Override public void test() throws SQLException {
  testSelectFromSynonym();
  testInsertIntoSynonym();
  testDeleteFromSynonym();
  testTruncateSynonym();
  testExistingTableName();
  testCreateForUnknownTable();
  testMetaData();
  testCreateOrReplace();
  testCreateOrReplaceExistingTable();
  testSynonymInDifferentSchema();
  testReopenDatabase();
  testDropSynonym();
  testDropTable();
  testDropSchema();
}","@Override public void test() throws SQLException {
  testSelectFromSynonym();
  testInsertIntoSynonym();
  testInsertWithColumnNameIntoSynonym();
  testDeleteFromSynonym();
  testTruncateSynonym();
  testExistingTableName();
  testCreateForUnknownTable();
  testMetaData();
  testCreateOrReplace();
  testCreateOrReplaceExistingTable();
  testSynonymInDifferentSchema();
  testReopenDatabase();
  testDropSynonym();
  testDropTable();
  testDropSchema();
}",0.9529276693455798
15725,"/** 
 * Convert the number of milliseconds since 1970-01-01 in the local timezone to UTC, but without daylight saving time into account.
 * @param millis the number of milliseconds in the local timezone
 * @return the number of milliseconds in UTC
 */
public static long getTimeUTCWithoutDst(long millis){
  return millis - getCalendar().get(Calendar.ZONE_OFFSET);
}","/** 
 * Convert the number of milliseconds since 1970-01-01 in the local timezone to UTC, but without daylight saving time into account.
 * @param millis the number of milliseconds in the local timezone
 * @return the number of milliseconds in UTC
 */
public static long getTimeUTCWithoutDst(long millis){
  Calendar calendar=getCalendar();
  calendar.clear();
  return millis - calendar.get(Calendar.ZONE_OFFSET);
}",0.8951406649616368
15726,"private void testDateTimeUtils(){
  ValueTimestamp ts1=ValueTimestamp.parse(""String_Node_Str"");
  ValueTimestamp ts2=ValueTimestamp.parse(""String_Node_Str"");
  ValueTime t1=(ValueTime)ts1.convertTo(Value.TIME);
  ValueTime t2=(ValueTime)ts2.convertTo(Value.TIME);
  ValueDate d1=(ValueDate)ts1.convertTo(Value.DATE);
  ValueDate d2=(ValueDate)ts2.convertTo(Value.DATE);
  assertEquals(""String_Node_Str"",ts1.getString());
  assertEquals(""String_Node_Str"",d1.getString());
  assertEquals(""String_Node_Str"",t1.getString());
  assertEquals(""String_Node_Str"",ts2.getString());
  assertEquals(""String_Node_Str"",d2.getString());
  assertEquals(""String_Node_Str"",t2.getString());
  ValueTimestamp ts1a=DateTimeUtils.convertTimestamp(ts1.getTimestamp(),Calendar.getInstance());
  ValueTimestamp ts2a=DateTimeUtils.convertTimestamp(ts2.getTimestamp(),Calendar.getInstance());
  assertEquals(""String_Node_Str"",ts1a.getString());
  assertEquals(""String_Node_Str"",ts2a.getString());
}","private void testDateTimeUtils(){
  ValueTimestamp ts1=ValueTimestamp.parse(""String_Node_Str"");
  ValueTimestamp ts2=ValueTimestamp.parse(""String_Node_Str"");
  ValueTime t1=(ValueTime)ts1.convertTo(Value.TIME);
  ValueTime t2=(ValueTime)ts2.convertTo(Value.TIME);
  ValueDate d1=(ValueDate)ts1.convertTo(Value.DATE);
  ValueDate d2=(ValueDate)ts2.convertTo(Value.DATE);
  assertEquals(""String_Node_Str"",ts1.getString());
  assertEquals(""String_Node_Str"",d1.getString());
  assertEquals(""String_Node_Str"",t1.getString());
  assertEquals(""String_Node_Str"",ts2.getString());
  assertEquals(""String_Node_Str"",d2.getString());
  assertEquals(""String_Node_Str"",t2.getString());
  ValueTimestamp ts1a=DateTimeUtils.convertTimestamp(ts1.getTimestamp(),Calendar.getInstance());
  ValueTimestamp ts2a=DateTimeUtils.convertTimestamp(ts2.getTimestamp(),Calendar.getInstance());
  assertEquals(""String_Node_Str"",ts1a.getString());
  assertEquals(""String_Node_Str"",ts2a.getString());
  long millis=1407437460000L;
  long result1=DateTimeUtils.nanosFromDate(DateTimeUtils.getTimeUTCWithoutDst(millis));
  long result2=DateTimeUtils.nanosFromDate(DateTimeUtils.getTimeUTCWithoutDst(millis));
  assertEquals(result1,result2);
}",0.8904172397982577
15727,"/** 
 * Calculate the cost of this query plan.
 * @param session the session
 * @return the cost
 */
public double calculateCost(Session session){
  if (session.getTrace().isDebugEnabled()) {
    session.getTrace().debug(""String_Node_Str"",Arrays.toString(allFilters));
  }
  double cost=1;
  boolean invalidPlan=false;
  for (int i=0; i < allFilters.length; i++) {
    TableFilter tableFilter=allFilters[i];
    session.getTrace().debug(""String_Node_Str"",tableFilter);
    PlanItem item=tableFilter.getBestPlanItem(session,allFilters,i);
    planItems.put(tableFilter,item);
    session.getTrace().debug(""String_Node_Str"",(int)item.cost,item.getIndex().getPlanSQL());
    cost+=cost * item.cost;
    setEvaluatable(tableFilter,true);
    Expression on=tableFilter.getJoinCondition();
    if (on != null) {
      if (!on.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR)) {
        invalidPlan=true;
        break;
      }
    }
  }
  if (invalidPlan) {
    cost=Double.POSITIVE_INFINITY;
  }
  session.getTrace().debug(""String_Node_Str"",(int)cost);
  for (  TableFilter f : allFilters) {
    setEvaluatable(f,false);
  }
  return cost;
}","/** 
 * Calculate the cost of this query plan.
 * @param session the session
 * @return the cost
 */
public double calculateCost(Session session){
  Trace t=session.getTrace();
  if (t.isDebugEnabled()) {
    t.debug(""String_Node_Str"",Arrays.toString(allFilters));
  }
  double cost=1;
  boolean invalidPlan=false;
  for (int i=0; i < allFilters.length; i++) {
    TableFilter tableFilter=allFilters[i];
    if (t.isDebugEnabled()) {
      t.debug(""String_Node_Str"",tableFilter);
    }
    PlanItem item=tableFilter.getBestPlanItem(session,allFilters,i);
    planItems.put(tableFilter,item);
    if (t.isDebugEnabled()) {
      t.debug(""String_Node_Str"",item.cost,item.getIndex().getPlanSQL());
    }
    cost+=cost * item.cost;
    setEvaluatable(tableFilter,true);
    Expression on=tableFilter.getJoinCondition();
    if (on != null) {
      if (!on.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR)) {
        invalidPlan=true;
        break;
      }
    }
  }
  if (invalidPlan) {
    cost=Double.POSITIVE_INFINITY;
  }
  if (t.isDebugEnabled()) {
    session.getTrace().debug(""String_Node_Str"",cost);
  }
  for (  TableFilter f : allFilters) {
    setEvaluatable(f,false);
  }
  return cost;
}",0.8991452991452992
15728,"/** 
 * Get the best plan for the given search mask.
 * @param session the session
 * @param masks per-column comparison bit masks, null means 'always false',see constants in IndexCondition
 * @param filters all joined table filters
 * @param filter the current table filter index
 * @param sortOrder the sort order
 * @return the plan item
 */
public PlanItem getBestPlanItem(Session session,int[] masks,TableFilter[] filters,int filter,SortOrder sortOrder){
  PlanItem item=new PlanItem();
  item.setIndex(getScanIndex(session));
  item.cost=item.getIndex().getCost(session,null,filters,filter,null);
  session.getTrace().debug(""String_Node_Str"",item.cost,item.getIndex().getPlanSQL());
  ArrayList<Index> indexes=getIndexes();
  if (indexes != null && masks != null) {
    for (int i=1, size=indexes.size(); i < size; i++) {
      Index index=indexes.get(i);
      double cost=index.getCost(session,masks,filters,filter,sortOrder);
      session.getTrace().debug(""String_Node_Str"",cost,index.getPlanSQL());
      if (cost < item.cost) {
        item.cost=cost;
        item.setIndex(index);
      }
    }
  }
  return item;
}","/** 
 * Get the best plan for the given search mask.
 * @param session the session
 * @param masks per-column comparison bit masks, null means 'always false',see constants in IndexCondition
 * @param filters all joined table filters
 * @param filter the current table filter index
 * @param sortOrder the sort order
 * @return the plan item
 */
public PlanItem getBestPlanItem(Session session,int[] masks,TableFilter[] filters,int filter,SortOrder sortOrder){
  PlanItem item=new PlanItem();
  item.setIndex(getScanIndex(session));
  item.cost=item.getIndex().getCost(session,null,filters,filter,null);
  Trace t=session.getTrace();
  if (t.isDebugEnabled()) {
    t.debug(""String_Node_Str"",item.cost,item.getIndex().getPlanSQL());
  }
  ArrayList<Index> indexes=getIndexes();
  if (indexes != null && masks != null) {
    for (int i=1, size=indexes.size(); i < size; i++) {
      Index index=indexes.get(i);
      double cost=index.getCost(session,masks,filters,filter,sortOrder);
      if (t.isDebugEnabled()) {
        t.debug(""String_Node_Str"",cost,index.getPlanSQL());
      }
      if (cost < item.cost) {
        item.cost=cost;
        item.setIndex(index);
      }
    }
  }
  return item;
}",0.9424398625429552
15729,"/** 
 * Remove an object from the system table.
 * @param session the session
 * @param obj the object to be removed
 */
public synchronized void removeSchemaObject(Session session,SchemaObject obj){
  int type=obj.getType();
  if (type == DbObject.TABLE_OR_VIEW) {
    Table table=(Table)obj;
    if (table.isTemporary() && !table.isGlobalTemporary()) {
      session.removeLocalTempTable(table);
      return;
    }
  }
 else   if (type == DbObject.INDEX) {
    Index index=(Index)obj;
    Table table=index.getTable();
    if (table.isTemporary() && !table.isGlobalTemporary()) {
      session.removeLocalTempTableIndex(index);
      return;
    }
  }
 else   if (type == DbObject.CONSTRAINT) {
    Constraint constraint=(Constraint)obj;
    Table table=constraint.getTable();
    if (table.isTemporary() && !table.isGlobalTemporary()) {
      session.removeLocalTempTableConstraint(constraint);
      return;
    }
  }
  checkWritingAllowed();
  lockMeta(session);
  Comment comment=findComment(obj);
  if (comment != null) {
    removeDatabaseObject(session,comment);
  }
  obj.getSchema().remove(obj);
  int id=obj.getId();
  if (!starting) {
    Table t=getDependentTable(obj,null);
    if (t != null) {
      obj.getSchema().add(obj);
      throw DbException.get(ErrorCode.CANNOT_DROP_2,obj.getSQL(),t.getSQL());
    }
    obj.removeChildrenAndResources(session);
  }
  removeMeta(session,id);
}","/** 
 * Remove an object from the system table.
 * @param session the session
 * @param obj the object to be removed
 */
public void removeSchemaObject(Session session,SchemaObject obj){
  int type=obj.getType();
  if (type == DbObject.TABLE_OR_VIEW) {
    Table table=(Table)obj;
    if (table.isTemporary() && !table.isGlobalTemporary()) {
      session.removeLocalTempTable(table);
      return;
    }
  }
 else   if (type == DbObject.INDEX) {
    Index index=(Index)obj;
    Table table=index.getTable();
    if (table.isTemporary() && !table.isGlobalTemporary()) {
      session.removeLocalTempTableIndex(index);
      return;
    }
  }
 else   if (type == DbObject.CONSTRAINT) {
    Constraint constraint=(Constraint)obj;
    Table table=constraint.getTable();
    if (table.isTemporary() && !table.isGlobalTemporary()) {
      session.removeLocalTempTableConstraint(constraint);
      return;
    }
  }
  checkWritingAllowed();
  lockMeta(session);
synchronized (this) {
    Comment comment=findComment(obj);
    if (comment != null) {
      removeDatabaseObject(session,comment);
    }
    obj.getSchema().remove(obj);
    int id=obj.getId();
    if (!starting) {
      Table t=getDependentTable(obj,null);
      if (t != null) {
        obj.getSchema().add(obj);
        throw DbException.get(ErrorCode.CANNOT_DROP_2,obj.getSQL(),t.getSQL());
      }
      obj.removeChildrenAndResources(session);
    }
    removeMeta(session,id);
  }
}",0.9757809757809758
15730,"/** 
 * Add a schema object to the database.
 * @param session the session
 * @param obj the object to add
 */
public synchronized void addSchemaObject(Session session,SchemaObject obj){
  int id=obj.getId();
  if (id > 0 && !starting) {
    checkWritingAllowed();
  }
  lockMeta(session);
  obj.getSchema().add(obj);
  addMeta(session,obj);
}","/** 
 * Add a schema object to the database.
 * @param session the session
 * @param obj the object to add
 */
public void addSchemaObject(Session session,SchemaObject obj){
  int id=obj.getId();
  if (id > 0 && !starting) {
    checkWritingAllowed();
  }
  lockMeta(session);
synchronized (this) {
    obj.getSchema().add(obj);
    addMeta(session,obj);
  }
}",0.9388335704125178
15731,"/** 
 * Flush the current value, including the margin, to disk.
 * @param session the session
 * @param flushValueWithMargin whether to reserve more entries
 */
public void flush(Session session,long flushValueWithMargin){
  if (session == null || !database.isSysTableLockedBy(session)) {
    Session sysSession=database.getSystemSession();
synchronized (sysSession) {
      flushInternal(sysSession,flushValueWithMargin);
      sysSession.commit(false);
    }
  }
 else {
synchronized (session) {
      flushInternal(session,flushValueWithMargin);
    }
  }
}","/** 
 * Flush the current value, including the margin, to disk.
 * @param session the session
 */
public void flush(Session session){
  if (isTemporary()) {
    return;
  }
  if (session == null || !database.isSysTableLockedBy(session)) {
    Session sysSession=database.getSystemSession();
synchronized (sysSession) {
synchronized (flushSync) {
        flushInternal(sysSession);
      }
      sysSession.commit(false);
    }
  }
 else {
synchronized (session) {
synchronized (flushSync) {
        flushInternal(session);
      }
    }
  }
}",0.7041742286751361
15732,"/** 
 * Flush the current value to disk.
 */
public void flushWithoutMargin(){
  if (valueWithMargin != value) {
    valueWithMargin=value;
    flush(null,valueWithMargin);
  }
}","/** 
 * Flush the current value to disk.
 */
public void flushWithoutMargin(){
  if (valueWithMargin != value) {
    valueWithMargin=value;
    flush(null);
  }
}",0.9529411764705882
15733,"@Override public synchronized String getCreateSQL(){
  StringBuilder buff=new StringBuilder(""String_Node_Str"");
  buff.append(getSQL()).append(""String_Node_Str"").append(value);
  if (increment != 1) {
    buff.append(""String_Node_Str"").append(increment);
  }
  if (minValue != getDefaultMinValue(value,increment)) {
    buff.append(""String_Node_Str"").append(minValue);
  }
  if (maxValue != getDefaultMaxValue(value,increment)) {
    buff.append(""String_Node_Str"").append(maxValue);
  }
  if (cycle) {
    buff.append(""String_Node_Str"");
  }
  if (cacheSize != DEFAULT_CACHE_SIZE) {
    buff.append(""String_Node_Str"").append(cacheSize);
  }
  if (belongsToTable) {
    buff.append(""String_Node_Str"");
  }
  return buff.toString();
}","@Override public synchronized String getCreateSQL(){
  long v=writeWithMargin ? valueWithMargin : value;
  StringBuilder buff=new StringBuilder(""String_Node_Str"");
  buff.append(getSQL()).append(""String_Node_Str"").append(v);
  if (increment != 1) {
    buff.append(""String_Node_Str"").append(increment);
  }
  if (minValue != getDefaultMinValue(v,increment)) {
    buff.append(""String_Node_Str"").append(minValue);
  }
  if (maxValue != getDefaultMaxValue(v,increment)) {
    buff.append(""String_Node_Str"").append(maxValue);
  }
  if (cycle) {
    buff.append(""String_Node_Str"");
  }
  if (cacheSize != DEFAULT_CACHE_SIZE) {
    buff.append(""String_Node_Str"").append(cacheSize);
  }
  if (belongsToTable) {
    buff.append(""String_Node_Str"");
  }
  return buff.toString();
}",0.9574468085106383
15734,"/** 
 * Get the next value for this sequence.
 * @param session the session
 * @return the next value
 */
public long getNext(Session session){
  boolean needsFlush=false;
  long retVal;
  long flushValueWithMargin=-1;
synchronized (this) {
    if ((increment > 0 && value >= valueWithMargin) || (increment < 0 && value <= valueWithMargin)) {
      valueWithMargin+=increment * cacheSize;
      flushValueWithMargin=valueWithMargin;
      needsFlush=true;
    }
    if ((increment > 0 && value > maxValue) || (increment < 0 && value < minValue)) {
      if (cycle) {
        value=increment > 0 ? minValue : maxValue;
        valueWithMargin=value + (increment * cacheSize);
        flushValueWithMargin=valueWithMargin;
        needsFlush=true;
      }
 else {
        throw DbException.get(ErrorCode.SEQUENCE_EXHAUSTED,getName());
      }
    }
    retVal=value;
    value+=increment;
  }
  if (needsFlush) {
    flush(session,flushValueWithMargin);
  }
  return retVal;
}","/** 
 * Get the next value for this sequence.
 * @param session the session
 * @return the next value
 */
public long getNext(Session session){
  boolean needsFlush=false;
  long result;
synchronized (this) {
    if ((increment > 0 && value >= valueWithMargin) || (increment < 0 && value <= valueWithMargin)) {
      valueWithMargin+=increment * cacheSize;
      needsFlush=true;
    }
    if ((increment > 0 && value > maxValue) || (increment < 0 && value < minValue)) {
      if (cycle) {
        value=increment > 0 ? minValue : maxValue;
        valueWithMargin=value + (increment * cacheSize);
        needsFlush=true;
      }
 else {
        throw DbException.get(ErrorCode.SEQUENCE_EXHAUSTED,getName());
      }
    }
    result=value;
    value+=increment;
  }
  if (needsFlush) {
    flush(session);
  }
  return result;
}",0.9074792243767312
15735,"private void flushInternal(Session session,long flushValueWithMargin){
  final boolean metaWasLocked=database.lockMeta(session);
synchronized (this) {
    if (flushValueWithMargin == lastFlushValueWithMargin) {
      if (!metaWasLocked) {
        database.unlockMeta(session);
      }
      return;
    }
  }
  long realValue=value;
  try {
    value=valueWithMargin;
    if (!isTemporary()) {
      database.updateMeta(session,this);
    }
  }
  finally {
    value=realValue;
  }
synchronized (this) {
    lastFlushValueWithMargin=flushValueWithMargin;
  }
  if (!metaWasLocked) {
    database.unlockMeta(session);
  }
}","private void flushInternal(Session session){
  final boolean metaWasLocked=database.lockMeta(session);
  try {
    writeWithMargin=true;
    database.updateMeta(session,this);
  }
  finally {
    writeWithMargin=false;
  }
  if (!metaWasLocked) {
    database.unlockMeta(session);
  }
}",0.2312775330396475
15736,"private void updateSequenceIfRequired(Session session,Value value){
  if (sequence != null) {
    long current=sequence.getCurrentValue();
    long inc=sequence.getIncrement();
    long now=value.getLong();
    boolean update=false;
    if (inc > 0 && now > current) {
      update=true;
    }
 else     if (inc < 0 && now < current) {
      update=true;
    }
    if (update) {
      sequence.modify(now + inc,null,null,null);
      session.setLastIdentity(ValueLong.get(now));
      sequence.flush(session,0);
    }
  }
}","private void updateSequenceIfRequired(Session session,Value value){
  if (sequence != null) {
    long current=sequence.getCurrentValue();
    long inc=sequence.getIncrement();
    long now=value.getLong();
    boolean update=false;
    if (inc > 0 && now > current) {
      update=true;
    }
 else     if (inc < 0 && now < current) {
      update=true;
    }
    if (update) {
      sequence.modify(now + inc,null,null,null);
      session.setLastIdentity(ValueLong.get(now));
      sequence.flush(session);
    }
  }
}",0.9980842911877394
15737,"@Override public void call() throws Exception {
  Connection conn=getConnection(url);
  try {
    PreparedStatement prep=conn.prepareStatement(""String_Node_Str"");
    PreparedStatement prep2=conn.prepareStatement(""String_Node_Str"");
    while (!stop) {
      prep.execute();
      if (Math.random() < 0.01) {
        prep2.execute();
      }
    }
  }
  finally {
    conn.close();
  }
}","@Override public void call() throws Exception {
  Connection conn=getConnection(url);
  try {
    PreparedStatement prep=conn.prepareStatement(""String_Node_Str"");
    PreparedStatement prep2=conn.prepareStatement(""String_Node_Str"");
    while (!stop) {
      prep.execute();
      if (Math.random() < 0.01) {
        prep2.execute();
      }
      if (Math.random() < 0.01) {
        createDropTrigger(conn);
      }
    }
  }
  finally {
    conn.close();
  }
}",0.8928150765606596
15738,"private void testConcurrentCreate() throws Exception {
  while (true)   try {
    testConcurrentCreate2();
  }
 catch (  Exception e) {
    System.out.println(e);
  }
}","private void testConcurrentCreate() throws Exception {
  deleteDb(""String_Node_Str"");
  final String url=getURL(""String_Node_Str"",true);
  Connection conn=getConnection(url);
  Task[] tasks=new Task[2];
  try {
    Statement stat=conn.createStatement();
    stat.execute(""String_Node_Str"");
    stat.execute(""String_Node_Str"");
    stat.execute(""String_Node_Str"");
    for (int i=0; i < tasks.length; i++) {
      final int x=i;
      tasks[i]=new Task(){
        @Override public void call() throws Exception {
          Connection conn=getConnection(url);
          try {
            PreparedStatement prep=conn.prepareStatement(""String_Node_Str"");
            PreparedStatement prep2=conn.prepareStatement(""String_Node_Str"");
            while (!stop) {
              prep.execute();
              if (Math.random() < 0.01) {
                prep2.execute();
              }
              if (Math.random() < 0.01) {
                createDropTrigger(conn);
              }
            }
          }
  finally {
            conn.close();
          }
        }
        private void createDropTrigger(        Connection conn) throws Exception {
          String triggerName=""String_Node_Str"" + x;
          Statement stat=conn.createStatement();
          stat.execute(""String_Node_Str"" + triggerName + ""String_Node_Str""+ TriggerTest.class.getName()+ ""String_Node_Str"");
          stat.execute(""String_Node_Str"" + triggerName);
        }
      }
.execute();
    }
    Thread.sleep(1000);
    for (    Task t : tasks) {
      t.get();
    }
  }
  finally {
    for (    Task t : tasks) {
      t.join();
    }
    conn.close();
  }
}",0.1110494169905608
15739,"/** 
 * Flush the current value, including the margin, to disk.
 * @param session the session
 */
public synchronized void flush(Session session){
  if (session == null || !database.isSysTableLocked()) {
    Session sysSession=database.getSystemSession();
synchronized (sysSession) {
      flushInternal(sysSession);
      sysSession.commit(false);
    }
  }
 else {
synchronized (session) {
      flushInternal(session);
    }
  }
}","/** 
 * Flush the current value, including the margin, to disk.
 * @param session the session
 */
public void flush(Session session,long flushValueWithMargin){
  if (session == null || !database.isSysTableLockedBy(session)) {
    Session sysSession=database.getSystemSession();
synchronized (sysSession) {
      flushInternal(sysSession,flushValueWithMargin);
      sysSession.commit(false);
    }
  }
 else {
synchronized (session) {
      flushInternal(session,flushValueWithMargin);
    }
  }
}",0.9010752688172043
15740,"/** 
 * Flush the current value to disk.
 */
public void flushWithoutMargin(){
  if (valueWithMargin != value) {
    valueWithMargin=value;
    flush(null);
  }
}","/** 
 * Flush the current value to disk.
 */
public void flushWithoutMargin(){
  if (valueWithMargin != value) {
    valueWithMargin=value;
    flush(null,valueWithMargin);
  }
}",0.9529411764705882
15741,"/** 
 * Get the next value for this sequence.
 * @param session the session
 * @return the next value
 */
public synchronized long getNext(Session session){
  boolean needsFlush=false;
  if ((increment > 0 && value >= valueWithMargin) || (increment < 0 && value <= valueWithMargin)) {
    valueWithMargin+=increment * cacheSize;
    needsFlush=true;
  }
  if ((increment > 0 && value > maxValue) || (increment < 0 && value < minValue)) {
    if (cycle) {
      value=increment > 0 ? minValue : maxValue;
      valueWithMargin=value + (increment * cacheSize);
      needsFlush=true;
    }
 else {
      throw DbException.get(ErrorCode.SEQUENCE_EXHAUSTED,getName());
    }
  }
  if (needsFlush) {
    flush(session);
  }
  long v=value;
  value+=increment;
  return v;
}","/** 
 * Get the next value for this sequence.
 * @param session the session
 * @return the next value
 */
public long getNext(Session session){
  boolean needsFlush=false;
  long retVal;
  long flushValueWithMargin=-1;
synchronized (this) {
    if ((increment > 0 && value >= valueWithMargin) || (increment < 0 && value <= valueWithMargin)) {
      valueWithMargin+=increment * cacheSize;
      flushValueWithMargin=valueWithMargin;
      needsFlush=true;
    }
    if ((increment > 0 && value > maxValue) || (increment < 0 && value < minValue)) {
      if (cycle) {
        value=increment > 0 ? minValue : maxValue;
        valueWithMargin=value + (increment * cacheSize);
        flushValueWithMargin=valueWithMargin;
        needsFlush=true;
      }
 else {
        throw DbException.get(ErrorCode.SEQUENCE_EXHAUSTED,getName());
      }
    }
    retVal=value;
    value+=increment;
  }
  if (needsFlush) {
    flush(session,flushValueWithMargin);
  }
  return retVal;
}",0.7680826636050516
15742,"private void flushInternal(Session session){
  long realValue=value;
  try {
    value=valueWithMargin;
    if (!isTemporary()) {
      database.updateMeta(session,this);
    }
  }
  finally {
    value=realValue;
  }
}","private void flushInternal(Session session,long flushValueWithMargin){
  final boolean metaWasLocked=database.lockMeta(session);
synchronized (this) {
    if (flushValueWithMargin == lastFlushValueWithMargin) {
      if (!metaWasLocked) {
        database.unlockMeta(session);
      }
      return;
    }
  }
  long realValue=value;
  try {
    value=valueWithMargin;
    if (!isTemporary()) {
      database.updateMeta(session,this);
    }
  }
  finally {
    value=realValue;
  }
synchronized (this) {
    lastFlushValueWithMargin=flushValueWithMargin;
  }
  if (!metaWasLocked) {
    database.unlockMeta(session);
  }
}",0.5136741973840666
15743,"private void updateSequenceIfRequired(Session session,Value value){
  if (sequence != null) {
    long current=sequence.getCurrentValue();
    long inc=sequence.getIncrement();
    long now=value.getLong();
    boolean update=false;
    if (inc > 0 && now > current) {
      update=true;
    }
 else     if (inc < 0 && now < current) {
      update=true;
    }
    if (update) {
      sequence.modify(now + inc,null,null,null);
      session.setLastIdentity(ValueLong.get(now));
      sequence.flush(session);
    }
  }
}","private void updateSequenceIfRequired(Session session,Value value){
  if (sequence != null) {
    long current=sequence.getCurrentValue();
    long inc=sequence.getIncrement();
    long now=value.getLong();
    boolean update=false;
    if (inc > 0 && now > current) {
      update=true;
    }
 else     if (inc < 0 && now < current) {
      update=true;
    }
    if (update) {
      sequence.modify(now + inc,null,null,null);
      session.setLastIdentity(ValueLong.get(now));
      sequence.flush(session,0);
    }
  }
}",0.9980842911877394
15744,"/** 
 * Compress a number of bytes.
 * @param in the input data
 * @param out the output area
 * @param outPos the offset at the output array
 * @return the end position
 */
public int compress(ByteBuffer in,byte[] out,int outPos){
  int inPos=in.position();
  int inLen=in.capacity() - inPos;
  if (cachedHashTable == null) {
    cachedHashTable=new int[HASH_SIZE];
  }
  int[] hashTab=cachedHashTable;
  int literals=0;
  outPos++;
  int future=first(in,0);
  while (inPos < inLen - 4) {
    byte p2=in.get(inPos + 2);
    future=(future << 8) + (p2 & 255);
    int off=hash(future);
    int ref=hashTab[off];
    hashTab[off]=inPos;
    if (ref < inPos && ref > 0 && (off=inPos - ref - 1) < MAX_OFF && in.get(ref + 2) == p2 && in.get(ref + 1) == (byte)(future >> 8) && in.get(ref) == (byte)(future >> 16)) {
      int maxLen=inLen - inPos - 2;
      if (maxLen > MAX_REF) {
        maxLen=MAX_REF;
      }
      if (literals == 0) {
        outPos--;
      }
 else {
        out[outPos - literals - 1]=(byte)(literals - 1);
        literals=0;
      }
      int len=3;
      while (len < maxLen && in.get(ref + len) == in.get(inPos + len)) {
        len++;
      }
      len-=2;
      if (len < 7) {
        out[outPos++]=(byte)((off >> 8) + (len << 5));
      }
 else {
        out[outPos++]=(byte)((off >> 8) + (7 << 5));
        out[outPos++]=(byte)(len - 7);
      }
      out[outPos++]=(byte)off;
      outPos++;
      inPos+=len;
      future=first(in,inPos);
      future=next(future,in,inPos);
      hashTab[hash(future)]=inPos++;
      future=next(future,in,inPos);
      hashTab[hash(future)]=inPos++;
    }
 else {
      out[outPos++]=in.get(inPos++);
      literals++;
      if (literals == MAX_LITERAL) {
        out[outPos - literals - 1]=(byte)(literals - 1);
        literals=0;
        outPos++;
      }
    }
  }
  while (inPos < inLen) {
    out[outPos++]=in.get(inPos++);
    literals++;
    if (literals == MAX_LITERAL) {
      out[outPos - literals - 1]=(byte)(literals - 1);
      literals=0;
      outPos++;
    }
  }
  out[outPos - literals - 1]=(byte)(literals - 1);
  if (literals == 0) {
    outPos--;
  }
  return outPos;
}","/** 
 * Compress a number of bytes.
 * @param in the input data
 * @param inPos the offset at the input buffer
 * @param out the output area
 * @param outPos the offset at the output array
 * @return the end position
 */
public int compress(ByteBuffer in,int inPos,byte[] out,int outPos){
  int inLen=in.capacity() - inPos;
  if (cachedHashTable == null) {
    cachedHashTable=new int[HASH_SIZE];
  }
  int[] hashTab=cachedHashTable;
  int literals=0;
  outPos++;
  int future=first(in,0);
  while (inPos < inLen - 4) {
    byte p2=in.get(inPos + 2);
    future=(future << 8) + (p2 & 255);
    int off=hash(future);
    int ref=hashTab[off];
    hashTab[off]=inPos;
    if (ref < inPos && ref > 0 && (off=inPos - ref - 1) < MAX_OFF && in.get(ref + 2) == p2 && in.get(ref + 1) == (byte)(future >> 8) && in.get(ref) == (byte)(future >> 16)) {
      int maxLen=inLen - inPos - 2;
      if (maxLen > MAX_REF) {
        maxLen=MAX_REF;
      }
      if (literals == 0) {
        outPos--;
      }
 else {
        out[outPos - literals - 1]=(byte)(literals - 1);
        literals=0;
      }
      int len=3;
      while (len < maxLen && in.get(ref + len) == in.get(inPos + len)) {
        len++;
      }
      len-=2;
      if (len < 7) {
        out[outPos++]=(byte)((off >> 8) + (len << 5));
      }
 else {
        out[outPos++]=(byte)((off >> 8) + (7 << 5));
        out[outPos++]=(byte)(len - 7);
      }
      out[outPos++]=(byte)off;
      outPos++;
      inPos+=len;
      future=first(in,inPos);
      future=next(future,in,inPos);
      hashTab[hash(future)]=inPos++;
      future=next(future,in,inPos);
      hashTab[hash(future)]=inPos++;
    }
 else {
      out[outPos++]=in.get(inPos++);
      literals++;
      if (literals == MAX_LITERAL) {
        out[outPos - literals - 1]=(byte)(literals - 1);
        literals=0;
        outPos++;
      }
    }
  }
  while (inPos < inLen) {
    out[outPos++]=in.get(inPos++);
    literals++;
    if (literals == MAX_LITERAL) {
      out[outPos - literals - 1]=(byte)(literals - 1);
      literals=0;
      outPos++;
    }
  }
  out[outPos - literals - 1]=(byte)(literals - 1);
  if (literals == 0) {
    outPos--;
  }
  return outPos;
}",0.9737327188940093
15745,"private void testByteBuffer(int len){
  if (len < 4) {
    return;
  }
  Random r=new Random(len);
  CompressLZF comp=new CompressLZF();
  for (int pattern=0; pattern < 4; pattern++) {
    byte[] b=new byte[len];
switch (pattern) {
case 0:
      break;
case 1:
{
      r.nextBytes(b);
      break;
    }
case 2:
{
    for (int x=0; x < len; x++) {
      b[x]=(byte)(x & 10);
    }
    break;
  }
case 3:
{
  for (int x=0; x < len; x++) {
    b[x]=(byte)(x / 10);
  }
  break;
}
default :
}
if (r.nextInt(2) < 1) {
for (int x=0; x < len; x++) {
if (r.nextInt(20) < 1) {
  b[x]=(byte)(r.nextInt(255));
}
}
}
ByteBuffer buff=ByteBuffer.wrap(b);
byte[] temp=new byte[100 + b.length * 2];
int compLen=comp.compress(buff,temp,0);
ByteBuffer test=ByteBuffer.wrap(temp,0,compLen);
byte[] exp=new byte[b.length];
CompressLZF.expand(test,ByteBuffer.wrap(exp));
assertEquals(b,exp);
}
}","private void testByteBuffer(int len){
  if (len < 4) {
    return;
  }
  Random r=new Random(len);
  CompressLZF comp=new CompressLZF();
  for (int pattern=0; pattern < 4; pattern++) {
    byte[] b=new byte[len];
switch (pattern) {
case 0:
      break;
case 1:
{
      r.nextBytes(b);
      break;
    }
case 2:
{
    for (int x=0; x < len; x++) {
      b[x]=(byte)(x & 10);
    }
    break;
  }
case 3:
{
  for (int x=0; x < len; x++) {
    b[x]=(byte)(x / 10);
  }
  break;
}
default :
}
if (r.nextInt(2) < 1) {
for (int x=0; x < len; x++) {
if (r.nextInt(20) < 1) {
  b[x]=(byte)(r.nextInt(255));
}
}
}
ByteBuffer buff=ByteBuffer.wrap(b);
byte[] temp=new byte[100 + b.length * 2];
int compLen=comp.compress(buff,0,temp,0);
ByteBuffer test=ByteBuffer.wrap(temp,0,compLen);
byte[] exp=new byte[b.length];
CompressLZF.expand(test,ByteBuffer.wrap(exp));
assertEquals(b,exp);
}
}",0.9988584474885844
15746,"private void testSimple(final String fsBase) throws Exception {
  long time=System.currentTimeMillis();
  for (  String s : FileUtils.newDirectoryStream(fsBase)) {
    FileUtils.delete(s);
  }
  FileUtils.createDirectories(fsBase + ""String_Node_Str"");
  FileUtils.delete(fsBase + ""String_Node_Str"");
  FileUtils.delete(fsBase + ""String_Node_Str"");
  assertTrue(FileUtils.createFile(fsBase + ""String_Node_Str""));
  List<FilePath> p=FilePath.get(fsBase).newDirectoryStream();
  assertEquals(1,p.size());
  String can=FilePath.get(fsBase + ""String_Node_Str"").toRealPath().toString();
  assertEquals(can,p.get(0).toString());
  assertTrue(FileUtils.canWrite(fsBase + ""String_Node_Str""));
  FileChannel channel=FileUtils.open(fsBase + ""String_Node_Str"",""String_Node_Str"");
  byte[] buffer=new byte[10000];
  Random random=new Random(1);
  random.nextBytes(buffer);
  channel.write(ByteBuffer.wrap(buffer));
  assertEquals(10000,channel.size());
  channel.position(20000);
  assertEquals(20000,channel.position());
  assertEquals(-1,channel.read(ByteBuffer.wrap(buffer,0,1)));
  String path=fsBase + ""String_Node_Str"";
  assertEquals(""String_Node_Str"",FileUtils.getName(path));
  can=FilePath.get(fsBase).toRealPath().toString();
  String can2=FileUtils.toRealPath(FileUtils.getParent(path));
  assertEquals(can,can2);
  FileLock lock=channel.tryLock();
  if (lock != null) {
    lock.release();
  }
  assertEquals(10000,channel.size());
  channel.close();
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  channel=FileUtils.open(fsBase + ""String_Node_Str"",""String_Node_Str"");
  final byte[] test=new byte[10000];
  FileUtils.readFully(channel,ByteBuffer.wrap(test,0,10000));
  assertEquals(buffer,test);
  final FileChannel fc=channel;
  new AssertThrows(IOException.class){
    @Override public void test() throws Exception {
      fc.write(ByteBuffer.wrap(test,0,10));
    }
  }
;
  new AssertThrows(NonWritableChannelException.class){
    @Override public void test() throws Exception {
      fc.truncate(10);
    }
  }
;
  channel.close();
  long lastMod=FileUtils.lastModified(fsBase + ""String_Node_Str"");
  if (lastMod < time - 1999) {
    assertEquals(time,lastMod);
  }
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  List<String> list=FileUtils.newDirectoryStream(fsBase);
  assertEquals(1,list.size());
  assertTrue(list.get(0).endsWith(""String_Node_Str""));
  IOUtils.copyFiles(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  FileUtils.move(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  FileUtils.move(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  assertTrue(!FileUtils.exists(fsBase + ""String_Node_Str""));
  assertTrue(FileUtils.exists(fsBase + ""String_Node_Str""));
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  byte[] buffer2=new byte[10000];
  InputStream in=FileUtils.newInputStream(fsBase + ""String_Node_Str"");
  int pos=0;
  while (true) {
    int l=in.read(buffer2,pos,Math.min(10000 - pos,1000));
    if (l <= 0) {
      break;
    }
    pos+=l;
  }
  in.close();
  assertEquals(10000,pos);
  assertEquals(buffer,buffer2);
  assertTrue(FileUtils.tryDelete(fsBase + ""String_Node_Str""));
  FileUtils.delete(fsBase + ""String_Node_Str"");
  if (fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0) {
    FileUtils.createDirectories(fsBase + ""String_Node_Str"");
    assertTrue(FileUtils.isDirectory(fsBase + ""String_Node_Str""));
    if (!fsBase.startsWith(""String_Node_Str"")) {
      FileUtils.deleteRecursive(fsBase + ""String_Node_Str"",false);
      assertTrue(!FileUtils.exists(fsBase + ""String_Node_Str""));
    }
  }
}","private void testSimple(final String fsBase) throws Exception {
  long time=System.currentTimeMillis();
  for (  String s : FileUtils.newDirectoryStream(fsBase)) {
    FileUtils.delete(s);
  }
  FileUtils.createDirectories(fsBase + ""String_Node_Str"");
  assertTrue(FileUtils.exists(fsBase));
  FileUtils.delete(fsBase + ""String_Node_Str"");
  FileUtils.delete(fsBase + ""String_Node_Str"");
  assertTrue(FileUtils.createFile(fsBase + ""String_Node_Str""));
  List<FilePath> p=FilePath.get(fsBase).newDirectoryStream();
  assertEquals(1,p.size());
  String can=FilePath.get(fsBase + ""String_Node_Str"").toRealPath().toString();
  assertEquals(can,p.get(0).toString());
  assertTrue(FileUtils.canWrite(fsBase + ""String_Node_Str""));
  FileChannel channel=FileUtils.open(fsBase + ""String_Node_Str"",""String_Node_Str"");
  byte[] buffer=new byte[10000];
  Random random=new Random(1);
  random.nextBytes(buffer);
  channel.write(ByteBuffer.wrap(buffer));
  assertEquals(10000,channel.size());
  channel.position(20000);
  assertEquals(20000,channel.position());
  assertEquals(-1,channel.read(ByteBuffer.wrap(buffer,0,1)));
  String path=fsBase + ""String_Node_Str"";
  assertEquals(""String_Node_Str"",FileUtils.getName(path));
  can=FilePath.get(fsBase).toRealPath().toString();
  String can2=FileUtils.toRealPath(FileUtils.getParent(path));
  assertEquals(can,can2);
  FileLock lock=channel.tryLock();
  if (lock != null) {
    lock.release();
  }
  assertEquals(10000,channel.size());
  channel.close();
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  channel=FileUtils.open(fsBase + ""String_Node_Str"",""String_Node_Str"");
  final byte[] test=new byte[10000];
  FileUtils.readFully(channel,ByteBuffer.wrap(test,0,10000));
  assertEquals(buffer,test);
  final FileChannel fc=channel;
  new AssertThrows(IOException.class){
    @Override public void test() throws Exception {
      fc.write(ByteBuffer.wrap(test,0,10));
    }
  }
;
  new AssertThrows(NonWritableChannelException.class){
    @Override public void test() throws Exception {
      fc.truncate(10);
    }
  }
;
  channel.close();
  long lastMod=FileUtils.lastModified(fsBase + ""String_Node_Str"");
  if (lastMod < time - 1999) {
    assertEquals(time,lastMod);
  }
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  List<String> list=FileUtils.newDirectoryStream(fsBase);
  assertEquals(1,list.size());
  assertTrue(list.get(0).endsWith(""String_Node_Str""));
  IOUtils.copyFiles(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  FileUtils.move(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  FileUtils.move(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  assertTrue(!FileUtils.exists(fsBase + ""String_Node_Str""));
  assertTrue(FileUtils.exists(fsBase + ""String_Node_Str""));
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  byte[] buffer2=new byte[10000];
  InputStream in=FileUtils.newInputStream(fsBase + ""String_Node_Str"");
  int pos=0;
  while (true) {
    int l=in.read(buffer2,pos,Math.min(10000 - pos,1000));
    if (l <= 0) {
      break;
    }
    pos+=l;
  }
  in.close();
  assertEquals(10000,pos);
  assertEquals(buffer,buffer2);
  assertTrue(FileUtils.tryDelete(fsBase + ""String_Node_Str""));
  FileUtils.delete(fsBase + ""String_Node_Str"");
  if (fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0) {
    FileUtils.createDirectories(fsBase + ""String_Node_Str"");
    assertTrue(FileUtils.isDirectory(fsBase + ""String_Node_Str""));
    if (!fsBase.startsWith(""String_Node_Str"")) {
      FileUtils.deleteRecursive(fsBase + ""String_Node_Str"",false);
      assertTrue(!FileUtils.exists(fsBase + ""String_Node_Str""));
    }
  }
}",0.9946680885097308
15747,"@Override public FilePathNioMem getPath(String path){
  FilePathNioMem p=new FilePathNioMem();
  p.name=getCanonicalPath(path);
  return p;
}","@Override public FilePathNioMem getPath(String path){
  FilePathNioMemLZF p=new FilePathNioMemLZF();
  p.name=getCanonicalPath(path);
  return p;
}",0.9791666666666666
15748,"/** 
 * Compress the data in a byte array.
 * @param data the page array
 * @param page which page to compress
 */
static void compress(ByteBuffer[] data,int page){
  ByteBuffer d=data[page];
synchronized (LZF) {
    int len=LZF.compress(d,BUFFER,0);
    d=ByteBuffer.allocateDirect(len);
    d.put(BUFFER,0,len);
    data[page]=d;
  }
}","/** 
 * Compress the data in a byte array.
 * @param data the page array
 * @param page which page to compress
 */
static void compress(ByteBuffer[] data,int page){
  ByteBuffer d=data[page];
synchronized (LZF) {
    int len=LZF.compress(d,0,BUFFER,0);
    d=ByteBuffer.allocateDirect(len);
    d.put(BUFFER,0,len);
    data[page]=d;
  }
}",0.9970414201183432
15749,"private static void expand(ByteBuffer[] data,int page){
  ByteBuffer d=data[page];
  if (d.capacity() == BLOCK_SIZE) {
    return;
  }
  ByteBuffer out=ByteBuffer.allocateDirect(BLOCK_SIZE);
  if (d != COMPRESSED_EMPTY_BLOCK) {
synchronized (LZF) {
      CompressLZF.expand(d,out);
    }
  }
  data[page]=out;
}","private static void expand(ByteBuffer[] data,int page){
  ByteBuffer d=data[page];
  if (d.capacity() == BLOCK_SIZE) {
    return;
  }
  ByteBuffer out=ByteBuffer.allocateDirect(BLOCK_SIZE);
  if (d != COMPRESSED_EMPTY_BLOCK) {
synchronized (LZF) {
      d.position(0);
      CompressLZF.expand(d,out);
    }
  }
  data[page]=out;
}",0.9673405909797824
15750,"private static String getCanonicalPath(String fileName){
  fileName=fileName.replace('\\','/');
  int idx=fileName.indexOf(':') + 1;
  if (fileName.length() > idx && fileName.charAt(idx) != '/') {
    fileName=fileName.substring(0,idx) + ""String_Node_Str"" + fileName.substring(idx);
  }
  return fileName;
}","/** 
 * Get the canonical path of a file (with backslashes replaced with forward slashes).
 * @param fileName the file name
 * @return the canonical path
 */
protected static String getCanonicalPath(String fileName){
  fileName=fileName.replace('\\','/');
  int idx=fileName.indexOf(':') + 1;
  if (fileName.length() > idx && fileName.charAt(idx) != '/') {
    fileName=fileName.substring(0,idx) + ""String_Node_Str"" + fileName.substring(idx);
  }
  return fileName;
}",0.7751937984496124
15751,"private void testByteBuffer(int len){
  if (len < 4) {
    return;
  }
  Random r=new Random(len);
  CompressLZF comp=new CompressLZF();
  for (int pattern=0; pattern < 4; pattern++) {
    byte[] b=new byte[len];
switch (pattern) {
case 0:
      break;
case 1:
{
      r.nextBytes(b);
      break;
    }
case 2:
{
    for (int x=0; x < len; x++) {
      b[x]=(byte)(x & 10);
    }
    break;
  }
case 3:
{
  for (int x=0; x < len; x++) {
    b[x]=(byte)(x / 10);
  }
  break;
}
default :
}
if (r.nextInt(2) < 1) {
for (int x=0; x < len; x++) {
if (r.nextInt(20) < 1) {
  b[x]=(byte)(r.nextInt(255));
}
}
}
ByteBuffer buff=ByteBuffer.wrap(b);
byte[] temp=new byte[100 + b.length * 2];
int compLen=comp.compress(buff,temp,0);
ByteBuffer test=ByteBuffer.wrap(temp,0,compLen);
byte[] exp=new byte[b.length];
CompressLZF.expand(test,ByteBuffer.wrap(exp));
assertEquals(b,exp);
}
}","private void testByteBuffer(int len){
  if (len < 4) {
    return;
  }
  Random r=new Random(len);
  CompressLZF comp=new CompressLZF();
  for (int pattern=0; pattern < 4; pattern++) {
    byte[] b=new byte[len];
switch (pattern) {
case 0:
      break;
case 1:
{
      r.nextBytes(b);
      break;
    }
case 2:
{
    for (int x=0; x < len; x++) {
      b[x]=(byte)(x & 10);
    }
    break;
  }
case 3:
{
  for (int x=0; x < len; x++) {
    b[x]=(byte)(x / 10);
  }
  break;
}
default :
}
if (r.nextInt(2) < 1) {
for (int x=0; x < len; x++) {
if (r.nextInt(20) < 1) {
  b[x]=(byte)(r.nextInt(255));
}
}
}
ByteBuffer buff=ByteBuffer.wrap(b);
byte[] temp=new byte[100 + b.length * 2];
int compLen=comp.compress(buff,0,temp,0);
ByteBuffer test=ByteBuffer.wrap(temp,0,compLen);
byte[] exp=new byte[b.length];
CompressLZF.expand(test,ByteBuffer.wrap(exp));
assertEquals(b,exp);
}
}",0.9988584474885844
15752,"private void testSimple(final String fsBase) throws Exception {
  long time=System.currentTimeMillis();
  for (  String s : FileUtils.newDirectoryStream(fsBase)) {
    FileUtils.delete(s);
  }
  FileUtils.createDirectories(fsBase + ""String_Node_Str"");
  FileUtils.delete(fsBase + ""String_Node_Str"");
  FileUtils.delete(fsBase + ""String_Node_Str"");
  assertTrue(FileUtils.createFile(fsBase + ""String_Node_Str""));
  List<FilePath> p=FilePath.get(fsBase).newDirectoryStream();
  assertEquals(1,p.size());
  String can=FilePath.get(fsBase + ""String_Node_Str"").toRealPath().toString();
  assertEquals(can,p.get(0).toString());
  assertTrue(FileUtils.canWrite(fsBase + ""String_Node_Str""));
  FileChannel channel=FileUtils.open(fsBase + ""String_Node_Str"",""String_Node_Str"");
  byte[] buffer=new byte[10000];
  Random random=new Random(1);
  random.nextBytes(buffer);
  channel.write(ByteBuffer.wrap(buffer));
  assertEquals(10000,channel.size());
  channel.position(20000);
  assertEquals(20000,channel.position());
  assertEquals(-1,channel.read(ByteBuffer.wrap(buffer,0,1)));
  String path=fsBase + ""String_Node_Str"";
  assertEquals(""String_Node_Str"",FileUtils.getName(path));
  can=FilePath.get(fsBase).toRealPath().toString();
  String can2=FileUtils.toRealPath(FileUtils.getParent(path));
  assertEquals(can,can2);
  FileLock lock=channel.tryLock();
  if (lock != null) {
    lock.release();
  }
  assertEquals(10000,channel.size());
  channel.close();
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  channel=FileUtils.open(fsBase + ""String_Node_Str"",""String_Node_Str"");
  final byte[] test=new byte[10000];
  FileUtils.readFully(channel,ByteBuffer.wrap(test,0,10000));
  assertEquals(buffer,test);
  final FileChannel fc=channel;
  new AssertThrows(IOException.class){
    @Override public void test() throws Exception {
      fc.write(ByteBuffer.wrap(test,0,10));
    }
  }
;
  new AssertThrows(NonWritableChannelException.class){
    @Override public void test() throws Exception {
      fc.truncate(10);
    }
  }
;
  channel.close();
  long lastMod=FileUtils.lastModified(fsBase + ""String_Node_Str"");
  if (lastMod < time - 1999) {
    assertEquals(time,lastMod);
  }
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  List<String> list=FileUtils.newDirectoryStream(fsBase);
  assertEquals(1,list.size());
  assertTrue(list.get(0).endsWith(""String_Node_Str""));
  IOUtils.copyFiles(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  FileUtils.move(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  FileUtils.move(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  assertTrue(!FileUtils.exists(fsBase + ""String_Node_Str""));
  assertTrue(FileUtils.exists(fsBase + ""String_Node_Str""));
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  byte[] buffer2=new byte[10000];
  InputStream in=FileUtils.newInputStream(fsBase + ""String_Node_Str"");
  int pos=0;
  while (true) {
    int l=in.read(buffer2,pos,Math.min(10000 - pos,1000));
    if (l <= 0) {
      break;
    }
    pos+=l;
  }
  in.close();
  assertEquals(10000,pos);
  assertEquals(buffer,buffer2);
  assertTrue(FileUtils.tryDelete(fsBase + ""String_Node_Str""));
  FileUtils.delete(fsBase + ""String_Node_Str"");
  if (fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0) {
    FileUtils.createDirectories(fsBase + ""String_Node_Str"");
    assertTrue(FileUtils.isDirectory(fsBase + ""String_Node_Str""));
    if (!fsBase.startsWith(""String_Node_Str"")) {
      FileUtils.deleteRecursive(fsBase + ""String_Node_Str"",false);
      assertTrue(!FileUtils.exists(fsBase + ""String_Node_Str""));
    }
  }
}","private void testSimple(final String fsBase) throws Exception {
  long time=System.currentTimeMillis();
  for (  String s : FileUtils.newDirectoryStream(fsBase)) {
    FileUtils.delete(s);
  }
  FileUtils.createDirectories(fsBase + ""String_Node_Str"");
  assertTrue(FileUtils.exists(fsBase));
  FileUtils.delete(fsBase + ""String_Node_Str"");
  FileUtils.delete(fsBase + ""String_Node_Str"");
  assertTrue(FileUtils.createFile(fsBase + ""String_Node_Str""));
  List<FilePath> p=FilePath.get(fsBase).newDirectoryStream();
  assertEquals(1,p.size());
  String can=FilePath.get(fsBase + ""String_Node_Str"").toRealPath().toString();
  assertEquals(can,p.get(0).toString());
  assertTrue(FileUtils.canWrite(fsBase + ""String_Node_Str""));
  FileChannel channel=FileUtils.open(fsBase + ""String_Node_Str"",""String_Node_Str"");
  byte[] buffer=new byte[10000];
  Random random=new Random(1);
  random.nextBytes(buffer);
  channel.write(ByteBuffer.wrap(buffer));
  assertEquals(10000,channel.size());
  channel.position(20000);
  assertEquals(20000,channel.position());
  assertEquals(-1,channel.read(ByteBuffer.wrap(buffer,0,1)));
  String path=fsBase + ""String_Node_Str"";
  assertEquals(""String_Node_Str"",FileUtils.getName(path));
  can=FilePath.get(fsBase).toRealPath().toString();
  String can2=FileUtils.toRealPath(FileUtils.getParent(path));
  assertEquals(can,can2);
  FileLock lock=channel.tryLock();
  if (lock != null) {
    lock.release();
  }
  assertEquals(10000,channel.size());
  channel.close();
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  channel=FileUtils.open(fsBase + ""String_Node_Str"",""String_Node_Str"");
  final byte[] test=new byte[10000];
  FileUtils.readFully(channel,ByteBuffer.wrap(test,0,10000));
  assertEquals(buffer,test);
  final FileChannel fc=channel;
  new AssertThrows(IOException.class){
    @Override public void test() throws Exception {
      fc.write(ByteBuffer.wrap(test,0,10));
    }
  }
;
  new AssertThrows(NonWritableChannelException.class){
    @Override public void test() throws Exception {
      fc.truncate(10);
    }
  }
;
  channel.close();
  long lastMod=FileUtils.lastModified(fsBase + ""String_Node_Str"");
  if (lastMod < time - 1999) {
    assertEquals(time,lastMod);
  }
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  List<String> list=FileUtils.newDirectoryStream(fsBase);
  assertEquals(1,list.size());
  assertTrue(list.get(0).endsWith(""String_Node_Str""));
  IOUtils.copyFiles(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  FileUtils.move(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  FileUtils.move(fsBase + ""String_Node_Str"",fsBase + ""String_Node_Str"");
  assertTrue(!FileUtils.exists(fsBase + ""String_Node_Str""));
  assertTrue(FileUtils.exists(fsBase + ""String_Node_Str""));
  assertEquals(10000,FileUtils.size(fsBase + ""String_Node_Str""));
  byte[] buffer2=new byte[10000];
  InputStream in=FileUtils.newInputStream(fsBase + ""String_Node_Str"");
  int pos=0;
  while (true) {
    int l=in.read(buffer2,pos,Math.min(10000 - pos,1000));
    if (l <= 0) {
      break;
    }
    pos+=l;
  }
  in.close();
  assertEquals(10000,pos);
  assertEquals(buffer,buffer2);
  assertTrue(FileUtils.tryDelete(fsBase + ""String_Node_Str""));
  FileUtils.delete(fsBase + ""String_Node_Str"");
  if (fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0 && fsBase.indexOf(""String_Node_Str"") < 0) {
    FileUtils.createDirectories(fsBase + ""String_Node_Str"");
    assertTrue(FileUtils.isDirectory(fsBase + ""String_Node_Str""));
    if (!fsBase.startsWith(""String_Node_Str"")) {
      FileUtils.deleteRecursive(fsBase + ""String_Node_Str"",false);
      assertTrue(!FileUtils.exists(fsBase + ""String_Node_Str""));
    }
  }
}",0.9946680885097308
15753,"private int rewrite(Page p,Set<Integer> set){
  if (p.isLeaf()) {
    long pos=p.getPos();
    int chunkId=DataUtils.getPageChunkId(pos);
    if (!set.contains(chunkId)) {
      return 0;
    }
    if (p.getKeyCount() > 0) {
      @SuppressWarnings(""String_Node_Str"") K key=(K)p.getKey(0);
      V value=get(key);
      if (value != null) {
        store.beforeWrite();
        replace(key,value,value);
      }
    }
    return 1;
  }
  int writtenPageCount=0;
  for (int i=0; i < getChildPageCount(p); i++) {
    long childPos=p.getChildPagePos(i);
    if (childPos != 0 && DataUtils.getPageType(childPos) == DataUtils.PAGE_TYPE_LEAF) {
      int chunkId=DataUtils.getPageChunkId(childPos);
      if (!set.contains(chunkId)) {
        continue;
      }
    }
    writtenPageCount+=rewrite(p.getChildPage(i),set);
  }
  if (writtenPageCount == 0) {
    long pos=p.getPos();
    int chunkId=DataUtils.getPageChunkId(pos);
    if (set.contains(chunkId)) {
      Page p2=p;
      while (!p2.isLeaf()) {
        p2=p2.getChildPage(0);
      }
      @SuppressWarnings(""String_Node_Str"") K key=(K)p2.getKey(0);
      V value=get(key);
      if (value != null) {
        replace(key,value,value);
      }
      writtenPageCount++;
    }
  }
  return writtenPageCount;
}","private int rewrite(Page p,Set<Integer> set){
  if (p.isLeaf()) {
    long pos=p.getPos();
    int chunkId=DataUtils.getPageChunkId(pos);
    if (!set.contains(chunkId)) {
      return 0;
    }
    if (p.getKeyCount() > 0) {
      @SuppressWarnings(""String_Node_Str"") K key=(K)p.getKey(0);
      V value=get(key);
      if (value != null) {
        replace(key,value,value);
      }
    }
    return 1;
  }
  int writtenPageCount=0;
  for (int i=0; i < getChildPageCount(p); i++) {
    long childPos=p.getChildPagePos(i);
    if (childPos != 0 && DataUtils.getPageType(childPos) == DataUtils.PAGE_TYPE_LEAF) {
      int chunkId=DataUtils.getPageChunkId(childPos);
      if (!set.contains(chunkId)) {
        continue;
      }
    }
    writtenPageCount+=rewrite(p.getChildPage(i),set);
  }
  if (writtenPageCount == 0) {
    long pos=p.getPos();
    int chunkId=DataUtils.getPageChunkId(pos);
    if (set.contains(chunkId)) {
      Page p2=p;
      while (!p2.isLeaf()) {
        p2=p2.getChildPage(0);
      }
      @SuppressWarnings(""String_Node_Str"") K key=(K)p2.getKey(0);
      V value=get(key);
      if (value != null) {
        replace(key,value,value);
      }
      writtenPageCount++;
    }
  }
  return writtenPageCount;
}",0.9883860632759311
15754,"/** 
 * This method is called before writing to the map. The default implementation checks whether writing is allowed, and tries to detect concurrent modification.
 * @throws UnsupportedOperationException if the map is read-only,or if another thread is concurrently writing
 */
protected void beforeWrite(){
  if (closed) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED,""String_Node_Str"");
  }
  if (readOnly) {
    throw DataUtils.newUnsupportedOperationException(""String_Node_Str"");
  }
  store.beforeWrite();
}","/** 
 * This method is called before writing to the map. The default implementation checks whether writing is allowed, and tries to detect concurrent modification.
 * @throws UnsupportedOperationException if the map is read-only,or if another thread is concurrently writing
 */
protected void beforeWrite(){
  if (closed) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED,""String_Node_Str"");
  }
  if (readOnly) {
    throw DataUtils.newUnsupportedOperationException(""String_Node_Str"");
  }
  store.beforeWrite(this);
}",0.9962756052141528
15755,"/** 
 * Read a page.
 * @param map the map
 * @param pos the page position
 * @return the page
 */
Page readPage(MVMap<?,?> map,long pos){
  if (pos == 0) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"");
  }
  Page p=cache == null ? null : cache.get(pos);
  if (p == null) {
    Chunk c=getChunk(pos);
    long filePos=c.block * BLOCK_SIZE;
    filePos+=DataUtils.getPageOffset(pos);
    if (filePos < 0) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
    }
    p=Page.read(fileStore,map,pos,filePos,fileStore.size());
    cachePage(pos,p,p.getMemory());
  }
  return p;
}","/** 
 * Read a page.
 * @param map the map
 * @param pos the page position
 * @return the page
 */
Page readPage(MVMap<?,?> map,long pos){
  if (pos == 0) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"");
  }
  Page p=cache == null ? null : cache.get(pos);
  if (p == null) {
    Chunk c=getChunk(pos);
    long filePos=c.block * BLOCK_SIZE;
    filePos+=DataUtils.getPageOffset(pos);
    if (filePos < 0) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
    }
    long maxPos=(c.block + c.len) * BLOCK_SIZE;
    p=Page.read(fileStore,pos,map,filePos,maxPos);
    cachePage(pos,p,p.getMemory());
  }
  return p;
}",0.926829268292683
15756,"private void write(long pos,ByteBuffer buffer){
  try {
    fileStore.writeFully(pos,buffer);
  }
 catch (  IllegalStateException e) {
    closeImmediately();
    throw e;
  }
}","private void write(long pos,ByteBuffer buffer){
  try {
    fileStore.writeFully(pos,buffer);
  }
 catch (  IllegalStateException e) {
    panic(e);
    throw e;
  }
}",0.9418604651162792
15757,"private void panic(IllegalStateException e){
  try {
    closeStore(false);
  }
 catch (  Exception e2) {
  }
  throw e;
}","private void panic(IllegalStateException e){
  if (backgroundExceptionHandler != null) {
    backgroundExceptionHandler.uncaughtException(null,e);
  }
  panicException=e;
  closeImmediately();
  throw e;
}",0.2996941896024465
15758,"/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  Object o=config.get(""String_Node_Str"");
  this.compressionLevel=o == null ? 0 : (Integer)o;
  String fileName=(String)config.get(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  if (o == null) {
    pageSplitSize=fileName == null ? 4 * 1024 : 16 * 1024;
  }
 else {
    pageSplitSize=(Integer)o;
  }
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMap<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,Object> c=New.hashMap();
  c.put(""String_Node_Str"",0);
  c.put(""String_Node_Str"",currentVersion);
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    cacheChunkRef=null;
    return;
  }
  if (fileStore == null) {
    fileStoreIsProvided=false;
    fileStore=new FileStore();
  }
 else {
    fileStoreIsProvided=true;
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  if (mb > 0) {
    int maxMemoryBytes=mb * 1024 * 1024;
    int averageMemory=Math.max(10,pageSplitSize / 2);
    int segmentCount=16;
    int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
    cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
    cacheChunkRef=new CacheLongKeyLIRS<PageChildren>(maxMemoryBytes / 4,20,segmentCount,stackMoveDistance);
  }
  o=config.get(""String_Node_Str"");
  int kb=o == null ? 512 : (Integer)o;
  autoCommitMemory=kb * 1024 * 19;
  o=config.get(""String_Node_Str"");
  autoCompactFillRate=o == null ? 50 : (Integer)o;
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    if (!fileStoreIsProvided) {
      fileStore.open(fileName,readOnly,encryptionKey);
    }
    if (fileStore.size() == 0) {
      creationTime=getTime();
      lastCommitTime=creationTime;
      fileHeader.put(""String_Node_Str"",2);
      fileHeader.put(""String_Node_Str"",BLOCK_SIZE);
      fileHeader.put(""String_Node_Str"",FORMAT_WRITE);
      fileHeader.put(""String_Node_Str"",creationTime);
      writeFileHeader();
    }
 else {
      readFileHeader();
    }
  }
 catch (  IllegalStateException e) {
    panic(e);
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastCommitTime=getTime();
  o=config.get(""String_Node_Str"");
  int delay=o == null ? 1000 : (Integer)o;
  setAutoCommitDelay(delay);
}","/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  Object o=config.get(""String_Node_Str"");
  this.compressionLevel=o == null ? 0 : (Integer)o;
  String fileName=(String)config.get(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  if (o == null) {
    pageSplitSize=fileName == null ? 4 * 1024 : 16 * 1024;
  }
 else {
    pageSplitSize=(Integer)o;
  }
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMap<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,Object> c=New.hashMap();
  c.put(""String_Node_Str"",0);
  c.put(""String_Node_Str"",currentVersion);
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    cacheChunkRef=null;
    return;
  }
  if (fileStore == null) {
    fileStoreIsProvided=false;
    fileStore=new FileStore();
  }
 else {
    fileStoreIsProvided=true;
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  if (mb > 0) {
    int maxMemoryBytes=mb * 1024 * 1024;
    int averageMemory=Math.max(10,pageSplitSize / 2);
    int segmentCount=16;
    int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
    cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
    cacheChunkRef=new CacheLongKeyLIRS<PageChildren>(maxMemoryBytes / 4,20,segmentCount,stackMoveDistance);
  }
  o=config.get(""String_Node_Str"");
  int kb=o == null ? 1024 : (Integer)o;
  autoCommitMemory=kb * 1024 * 19;
  o=config.get(""String_Node_Str"");
  autoCompactFillRate=o == null ? 50 : (Integer)o;
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    if (!fileStoreIsProvided) {
      fileStore.open(fileName,readOnly,encryptionKey);
    }
    if (fileStore.size() == 0) {
      creationTime=getTime();
      lastCommitTime=creationTime;
      fileHeader.put(""String_Node_Str"",2);
      fileHeader.put(""String_Node_Str"",BLOCK_SIZE);
      fileHeader.put(""String_Node_Str"",FORMAT_WRITE);
      fileHeader.put(""String_Node_Str"",creationTime);
      writeFileHeader();
    }
 else {
      readFileHeader();
    }
  }
 catch (  IllegalStateException e) {
    panic(e);
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastCommitTime=getTime();
  o=config.get(""String_Node_Str"");
  int delay=o == null ? 1000 : (Integer)o;
  setAutoCommitDelay(delay);
}",0.9994681794008154
15759,"/** 
 * Get the name of the given map.
 * @param id the map id
 * @return the name, or null if not found
 */
public synchronized String getMapName(int id){
  String m=meta.get(MVMap.getMapKey(id));
  return m == null ? null : DataUtils.parseMap(m).get(""String_Node_Str"");
}","/** 
 * Get the name of the given map.
 * @param id the map id
 * @return the name, or null if not found
 */
public synchronized String getMapName(int id){
  checkOpen();
  String m=meta.get(MVMap.getMapKey(id));
  return m == null ? null : DataUtils.parseMap(m).get(""String_Node_Str"");
}",0.9732620320855616
15760,"/** 
 * Set the size of the write buffer, in KB disk space (for file-based stores). Unless auto-commit is disabled, changes are automatically saved if there are more than this amount of changes. <p> The default is 512 KB. <p> When the value is set to 0 or lower, data is not automatically stored.
 * @param kb the write buffer size, in kilobytes
 * @return this
 */
public Builder autoCommitBufferSize(int kb){
  return set(""String_Node_Str"",kb);
}","/** 
 * Set the size of the write buffer, in KB disk space (for file-based stores). Unless auto-commit is disabled, changes are automatically saved if there are more than this amount of changes. <p> The default is 1024 KB. <p> When the value is set to 0 or lower, data is not automatically stored.
 * @param kb the write buffer size, in kilobytes
 * @return this
 */
public Builder autoCommitBufferSize(int kb){
  return set(""String_Node_Str"",kb);
}",0.9966555183946488
15761,"private void checkOpen(){
  if (closed) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED,""String_Node_Str"");
  }
}","private void checkOpen(){
  if (closed) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED,""String_Node_Str"",panicException);
  }
}",0.9473684210526316
15762,"/** 
 * This method is called before writing to a map.
 */
void beforeWrite(){
  if (saveNeeded) {
    saveNeeded=false;
    if (unsavedMemory > autoCommitMemory && autoCommitMemory > 0) {
      commitAndSave();
    }
  }
}","/** 
 * This method is called before writing to a map.
 * @param map the map
 */
void beforeWrite(MVMap<?,?> map){
  if (saveNeeded) {
    if (map == meta) {
      return;
    }
    saveNeeded=false;
    if (unsavedMemory > autoCommitMemory && autoCommitMemory > 0) {
      commitAndSave();
    }
  }
}",0.8495238095238096
15763,"private PageChildren readPageChunkReferences(int mapId,long pos,int parentChunk){
  if (DataUtils.getPageType(pos) == DataUtils.PAGE_TYPE_LEAF) {
    return null;
  }
  PageChildren r=cacheChunkRef.get(pos);
  if (r == null) {
    Page p=cache.get(pos);
    if (p == null) {
      Chunk c=getChunk(pos);
      long filePos=c.block * BLOCK_SIZE;
      filePos+=DataUtils.getPageOffset(pos);
      if (filePos < 0) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
      }
      r=PageChildren.read(fileStore,filePos,mapId,pos);
    }
 else {
      r=new PageChildren(p);
    }
    r.removeDuplicateChunkReferences();
    cacheChunkRef.put(pos,r);
  }
  if (r.children.length == 0) {
    int chunk=DataUtils.getPageChunkId(pos);
    if (chunk == parentChunk) {
      return null;
    }
  }
  return r;
}","private PageChildren readPageChunkReferences(int mapId,long pos,int parentChunk){
  if (DataUtils.getPageType(pos) == DataUtils.PAGE_TYPE_LEAF) {
    return null;
  }
  PageChildren r=cacheChunkRef.get(pos);
  if (r == null) {
    Page p=cache.get(pos);
    if (p == null) {
      Chunk c=getChunk(pos);
      long filePos=c.block * BLOCK_SIZE;
      filePos+=DataUtils.getPageOffset(pos);
      if (filePos < 0) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
      }
      long maxPos=(c.block + c.len) * BLOCK_SIZE;
      r=PageChildren.read(fileStore,pos,mapId,filePos,maxPos);
    }
 else {
      r=new PageChildren(p);
    }
    r.removeDuplicateChunkReferences();
    cacheChunkRef.put(pos,r);
  }
  if (r.children.length == 0) {
    int chunk=DataUtils.getPageChunkId(pos);
    if (chunk == parentChunk) {
      return null;
    }
  }
  return r;
}",0.9340845070422537
15764,"/** 
 * Read an inner node page from the buffer, but ignore the keys and values.
 * @param fileStore the file store
 * @param filePos the position in the file
 * @param mapId the map id
 * @param pos the position
 * @return the page children object
 */
static PageChildren read(FileStore fileStore,long filePos,int mapId,long pos){
  ByteBuffer buff;
  int maxLength=DataUtils.getPageMaxLength(pos);
  if (maxLength == DataUtils.PAGE_LARGE) {
    buff=fileStore.readFully(filePos,128);
    maxLength=buff.getInt();
  }
  long fileSize=fileStore.fileSize;
  maxLength=(int)Math.min(fileSize - filePos,maxLength);
  int length=maxLength;
  if (length < 0) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",length,filePos,fileSize);
  }
  buff=fileStore.readFully(filePos,length);
  int chunkId=DataUtils.getPageChunkId(pos);
  int offset=DataUtils.getPageOffset(pos);
  int start=buff.position();
  int pageLength=buff.getInt();
  if (pageLength > maxLength) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,maxLength,pageLength);
  }
  buff.limit(start + pageLength);
  short check=buff.getShort();
  int m=DataUtils.readVarInt(buff);
  if (m != mapId) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,mapId,m);
  }
  int checkTest=DataUtils.getCheckValue(chunkId) ^ DataUtils.getCheckValue(offset) ^ DataUtils.getCheckValue(pageLength);
  if (check != (short)checkTest) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,checkTest,check);
  }
  int len=DataUtils.readVarInt(buff);
  int type=buff.get();
  boolean node=(type & 1) == DataUtils.PAGE_TYPE_NODE;
  if (!node) {
    return null;
  }
  long[] children=new long[len + 1];
  for (int i=0; i <= len; i++) {
    children[i]=buff.getLong();
  }
  return new PageChildren(pos,children);
}","/** 
 * Read an inner node page from the buffer, but ignore the keys and values.
 * @param fileStore the file store
 * @param pos the position
 * @param mapId the map id
 * @param filePos the position in the file
 * @param maxPos the maximum position (the end of the chunk)
 * @return the page children object
 */
static PageChildren read(FileStore fileStore,long pos,int mapId,long filePos,long maxPos){
  ByteBuffer buff;
  int maxLength=DataUtils.getPageMaxLength(pos);
  if (maxLength == DataUtils.PAGE_LARGE) {
    buff=fileStore.readFully(filePos,128);
    maxLength=buff.getInt();
  }
  maxLength=(int)Math.min(maxPos - filePos,maxLength);
  int length=maxLength;
  if (length < 0) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",length,filePos,maxPos);
  }
  buff=fileStore.readFully(filePos,length);
  int chunkId=DataUtils.getPageChunkId(pos);
  int offset=DataUtils.getPageOffset(pos);
  int start=buff.position();
  int pageLength=buff.getInt();
  if (pageLength > maxLength) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,maxLength,pageLength);
  }
  buff.limit(start + pageLength);
  short check=buff.getShort();
  int m=DataUtils.readVarInt(buff);
  if (m != mapId) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,mapId,m);
  }
  int checkTest=DataUtils.getCheckValue(chunkId) ^ DataUtils.getCheckValue(offset) ^ DataUtils.getCheckValue(pageLength);
  if (check != (short)checkTest) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,checkTest,check);
  }
  int len=DataUtils.readVarInt(buff);
  int type=buff.get();
  boolean node=(type & 1) == DataUtils.PAGE_TYPE_NODE;
  if (!node) {
    return null;
  }
  long[] children=new long[len + 1];
  for (int i=0; i <= len; i++) {
    children[i]=buff.getLong();
  }
  return new PageChildren(pos,children);
}",0.9283346085182352
15765,"@Override public void write(WriteBuffer buff,Object obj){
  DataType t=getType(obj);
  if (t != this) {
    t.write(buff,obj);
    return;
  }
  byte[] data=serialize(obj);
  int size=data.length;
  averageSize=(size + 15 * averageSize) / 16;
  buff.put((byte)TYPE_SERIALIZED_OBJECT).putVarInt(data.length).put(data);
}","@Override public void write(WriteBuffer buff,Object obj){
  DataType t=getType(obj);
  if (t != this) {
    t.write(buff,obj);
    return;
  }
  byte[] data=serialize(obj);
  int size=data.length * 2;
  averageSize=(size + 15 * averageSize) / 16;
  buff.put((byte)TYPE_SERIALIZED_OBJECT).putVarInt(data.length).put(data);
}",0.9937694704049844
15766,"private int rewrite(Page p,Set<Integer> set){
  if (p.isLeaf()) {
    long pos=p.getPos();
    int chunkId=DataUtils.getPageChunkId(pos);
    if (!set.contains(chunkId)) {
      return 0;
    }
    if (p.getKeyCount() > 0) {
      @SuppressWarnings(""String_Node_Str"") K key=(K)p.getKey(0);
      V value=get(key);
      if (value != null) {
        store.beforeWrite();
        replace(key,value,value);
      }
    }
    return 1;
  }
  int writtenPageCount=0;
  for (int i=0; i < getChildPageCount(p); i++) {
    long childPos=p.getChildPagePos(i);
    if (childPos != 0 && DataUtils.getPageType(childPos) == DataUtils.PAGE_TYPE_LEAF) {
      int chunkId=DataUtils.getPageChunkId(childPos);
      if (!set.contains(chunkId)) {
        continue;
      }
    }
    writtenPageCount+=rewrite(p.getChildPage(i),set);
  }
  if (writtenPageCount == 0) {
    long pos=p.getPos();
    int chunkId=DataUtils.getPageChunkId(pos);
    if (set.contains(chunkId)) {
      Page p2=p;
      while (!p2.isLeaf()) {
        p2=p2.getChildPage(0);
      }
      @SuppressWarnings(""String_Node_Str"") K key=(K)p2.getKey(0);
      V value=get(key);
      if (value != null) {
        replace(key,value,value);
      }
      writtenPageCount++;
    }
  }
  return writtenPageCount;
}","private int rewrite(Page p,Set<Integer> set){
  if (p.isLeaf()) {
    long pos=p.getPos();
    int chunkId=DataUtils.getPageChunkId(pos);
    if (!set.contains(chunkId)) {
      return 0;
    }
    if (p.getKeyCount() > 0) {
      @SuppressWarnings(""String_Node_Str"") K key=(K)p.getKey(0);
      V value=get(key);
      if (value != null) {
        replace(key,value,value);
      }
    }
    return 1;
  }
  int writtenPageCount=0;
  for (int i=0; i < getChildPageCount(p); i++) {
    long childPos=p.getChildPagePos(i);
    if (childPos != 0 && DataUtils.getPageType(childPos) == DataUtils.PAGE_TYPE_LEAF) {
      int chunkId=DataUtils.getPageChunkId(childPos);
      if (!set.contains(chunkId)) {
        continue;
      }
    }
    writtenPageCount+=rewrite(p.getChildPage(i),set);
  }
  if (writtenPageCount == 0) {
    long pos=p.getPos();
    int chunkId=DataUtils.getPageChunkId(pos);
    if (set.contains(chunkId)) {
      Page p2=p;
      while (!p2.isLeaf()) {
        p2=p2.getChildPage(0);
      }
      @SuppressWarnings(""String_Node_Str"") K key=(K)p2.getKey(0);
      V value=get(key);
      if (value != null) {
        replace(key,value,value);
      }
      writtenPageCount++;
    }
  }
  return writtenPageCount;
}",0.9883860632759311
15767,"/** 
 * This method is called before writing to the map. The default implementation checks whether writing is allowed, and tries to detect concurrent modification.
 * @throws UnsupportedOperationException if the map is read-only,or if another thread is concurrently writing
 */
protected void beforeWrite(){
  if (closed) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED,""String_Node_Str"");
  }
  if (readOnly) {
    throw DataUtils.newUnsupportedOperationException(""String_Node_Str"");
  }
  store.beforeWrite();
}","/** 
 * This method is called before writing to the map. The default implementation checks whether writing is allowed, and tries to detect concurrent modification.
 * @throws UnsupportedOperationException if the map is read-only,or if another thread is concurrently writing
 */
protected void beforeWrite(){
  if (closed) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED,""String_Node_Str"");
  }
  if (readOnly) {
    throw DataUtils.newUnsupportedOperationException(""String_Node_Str"");
  }
  store.beforeWrite(this);
}",0.9962756052141528
15768,"/** 
 * Read a page.
 * @param map the map
 * @param pos the page position
 * @return the page
 */
Page readPage(MVMap<?,?> map,long pos){
  if (pos == 0) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"");
  }
  Page p=cache == null ? null : cache.get(pos);
  if (p == null) {
    Chunk c=getChunk(pos);
    long filePos=c.block * BLOCK_SIZE;
    filePos+=DataUtils.getPageOffset(pos);
    if (filePos < 0) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
    }
    p=Page.read(fileStore,map,pos,filePos,fileStore.size());
    cachePage(pos,p,p.getMemory());
  }
  return p;
}","/** 
 * Read a page.
 * @param map the map
 * @param pos the page position
 * @return the page
 */
Page readPage(MVMap<?,?> map,long pos){
  if (pos == 0) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"");
  }
  Page p=cache == null ? null : cache.get(pos);
  if (p == null) {
    Chunk c=getChunk(pos);
    long filePos=c.block * BLOCK_SIZE;
    filePos+=DataUtils.getPageOffset(pos);
    if (filePos < 0) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
    }
    long maxPos=(c.block + c.len) * BLOCK_SIZE;
    p=Page.read(fileStore,pos,map,filePos,maxPos);
    cachePage(pos,p,p.getMemory());
  }
  return p;
}",0.926829268292683
15769,"private void write(long pos,ByteBuffer buffer){
  try {
    fileStore.writeFully(pos,buffer);
  }
 catch (  IllegalStateException e) {
    closeImmediately();
    throw e;
  }
}","private void write(long pos,ByteBuffer buffer){
  try {
    fileStore.writeFully(pos,buffer);
  }
 catch (  IllegalStateException e) {
    panic(e);
    throw e;
  }
}",0.9418604651162792
15770,"private void panic(IllegalStateException e){
  try {
    closeStore(false);
  }
 catch (  Exception e2) {
  }
  throw e;
}","private void panic(IllegalStateException e){
  if (backgroundExceptionHandler != null) {
    backgroundExceptionHandler.uncaughtException(null,e);
  }
  panicException=e;
  closeImmediately();
  throw e;
}",0.2996941896024465
15771,"/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  Object o=config.get(""String_Node_Str"");
  this.compressionLevel=o == null ? 0 : (Integer)o;
  String fileName=(String)config.get(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  if (o == null) {
    pageSplitSize=fileName == null ? 4 * 1024 : 16 * 1024;
  }
 else {
    pageSplitSize=(Integer)o;
  }
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMap<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,Object> c=New.hashMap();
  c.put(""String_Node_Str"",0);
  c.put(""String_Node_Str"",currentVersion);
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    cacheChunkRef=null;
    return;
  }
  if (fileStore == null) {
    fileStoreIsProvided=false;
    fileStore=new FileStore();
  }
 else {
    fileStoreIsProvided=true;
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  if (mb > 0) {
    int maxMemoryBytes=mb * 1024 * 1024;
    int averageMemory=Math.max(10,pageSplitSize / 2);
    int segmentCount=16;
    int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
    cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
    cacheChunkRef=new CacheLongKeyLIRS<PageChildren>(maxMemoryBytes / 4,20,segmentCount,stackMoveDistance);
  }
  o=config.get(""String_Node_Str"");
  int kb=o == null ? 512 : (Integer)o;
  autoCommitMemory=kb * 1024 * 19;
  o=config.get(""String_Node_Str"");
  autoCompactFillRate=o == null ? 50 : (Integer)o;
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    if (!fileStoreIsProvided) {
      fileStore.open(fileName,readOnly,encryptionKey);
    }
    if (fileStore.size() == 0) {
      creationTime=getTime();
      lastCommitTime=creationTime;
      fileHeader.put(""String_Node_Str"",2);
      fileHeader.put(""String_Node_Str"",BLOCK_SIZE);
      fileHeader.put(""String_Node_Str"",FORMAT_WRITE);
      fileHeader.put(""String_Node_Str"",creationTime);
      writeFileHeader();
    }
 else {
      readFileHeader();
    }
  }
 catch (  IllegalStateException e) {
    panic(e);
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastCommitTime=getTime();
  o=config.get(""String_Node_Str"");
  int delay=o == null ? 1000 : (Integer)o;
  setAutoCommitDelay(delay);
}","/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  Object o=config.get(""String_Node_Str"");
  this.compressionLevel=o == null ? 0 : (Integer)o;
  String fileName=(String)config.get(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  if (o == null) {
    pageSplitSize=fileName == null ? 4 * 1024 : 16 * 1024;
  }
 else {
    pageSplitSize=(Integer)o;
  }
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMap<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,Object> c=New.hashMap();
  c.put(""String_Node_Str"",0);
  c.put(""String_Node_Str"",currentVersion);
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    cacheChunkRef=null;
    return;
  }
  if (fileStore == null) {
    fileStoreIsProvided=false;
    fileStore=new FileStore();
  }
 else {
    fileStoreIsProvided=true;
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  if (mb > 0) {
    int maxMemoryBytes=mb * 1024 * 1024;
    int averageMemory=Math.max(10,pageSplitSize / 2);
    int segmentCount=16;
    int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
    cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
    cacheChunkRef=new CacheLongKeyLIRS<PageChildren>(maxMemoryBytes / 4,20,segmentCount,stackMoveDistance);
  }
  o=config.get(""String_Node_Str"");
  int kb=o == null ? 1024 : (Integer)o;
  autoCommitMemory=kb * 1024 * 19;
  o=config.get(""String_Node_Str"");
  autoCompactFillRate=o == null ? 50 : (Integer)o;
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    if (!fileStoreIsProvided) {
      fileStore.open(fileName,readOnly,encryptionKey);
    }
    if (fileStore.size() == 0) {
      creationTime=getTime();
      lastCommitTime=creationTime;
      fileHeader.put(""String_Node_Str"",2);
      fileHeader.put(""String_Node_Str"",BLOCK_SIZE);
      fileHeader.put(""String_Node_Str"",FORMAT_WRITE);
      fileHeader.put(""String_Node_Str"",creationTime);
      writeFileHeader();
    }
 else {
      readFileHeader();
    }
  }
 catch (  IllegalStateException e) {
    panic(e);
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastCommitTime=getTime();
  o=config.get(""String_Node_Str"");
  int delay=o == null ? 1000 : (Integer)o;
  setAutoCommitDelay(delay);
}",0.9994681794008154
15772,"/** 
 * Get the name of the given map.
 * @param id the map id
 * @return the name, or null if not found
 */
public synchronized String getMapName(int id){
  String m=meta.get(MVMap.getMapKey(id));
  return m == null ? null : DataUtils.parseMap(m).get(""String_Node_Str"");
}","/** 
 * Get the name of the given map.
 * @param id the map id
 * @return the name, or null if not found
 */
public synchronized String getMapName(int id){
  checkOpen();
  String m=meta.get(MVMap.getMapKey(id));
  return m == null ? null : DataUtils.parseMap(m).get(""String_Node_Str"");
}",0.9732620320855616
15773,"/** 
 * Set the size of the write buffer, in KB disk space (for file-based stores). Unless auto-commit is disabled, changes are automatically saved if there are more than this amount of changes. <p> The default is 512 KB. <p> When the value is set to 0 or lower, data is not automatically stored.
 * @param kb the write buffer size, in kilobytes
 * @return this
 */
public Builder autoCommitBufferSize(int kb){
  return set(""String_Node_Str"",kb);
}","/** 
 * Set the size of the write buffer, in KB disk space (for file-based stores). Unless auto-commit is disabled, changes are automatically saved if there are more than this amount of changes. <p> The default is 1024 KB. <p> When the value is set to 0 or lower, data is not automatically stored.
 * @param kb the write buffer size, in kilobytes
 * @return this
 */
public Builder autoCommitBufferSize(int kb){
  return set(""String_Node_Str"",kb);
}",0.9966555183946488
15774,"private void checkOpen(){
  if (closed) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED,""String_Node_Str"");
  }
}","private void checkOpen(){
  if (closed) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED,""String_Node_Str"",panicException);
  }
}",0.9473684210526316
15775,"/** 
 * This method is called before writing to a map.
 */
void beforeWrite(){
  if (saveNeeded) {
    saveNeeded=false;
    if (unsavedMemory > autoCommitMemory && autoCommitMemory > 0) {
      commitAndSave();
    }
  }
}","/** 
 * This method is called before writing to a map.
 * @param map the map
 */
void beforeWrite(MVMap<?,?> map){
  if (saveNeeded) {
    if (map == meta) {
      return;
    }
    saveNeeded=false;
    if (unsavedMemory > autoCommitMemory && autoCommitMemory > 0) {
      commitAndSave();
    }
  }
}",0.8495238095238096
15776,"private PageChildren readPageChunkReferences(int mapId,long pos,int parentChunk){
  if (DataUtils.getPageType(pos) == DataUtils.PAGE_TYPE_LEAF) {
    return null;
  }
  PageChildren r=cacheChunkRef.get(pos);
  if (r == null) {
    Page p=cache.get(pos);
    if (p == null) {
      Chunk c=getChunk(pos);
      long filePos=c.block * BLOCK_SIZE;
      filePos+=DataUtils.getPageOffset(pos);
      if (filePos < 0) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
      }
      r=PageChildren.read(fileStore,filePos,mapId,pos);
    }
 else {
      r=new PageChildren(p);
    }
    r.removeDuplicateChunkReferences();
    cacheChunkRef.put(pos,r);
  }
  if (r.children.length == 0) {
    int chunk=DataUtils.getPageChunkId(pos);
    if (chunk == parentChunk) {
      return null;
    }
  }
  return r;
}","private PageChildren readPageChunkReferences(int mapId,long pos,int parentChunk){
  if (DataUtils.getPageType(pos) == DataUtils.PAGE_TYPE_LEAF) {
    return null;
  }
  PageChildren r=cacheChunkRef.get(pos);
  if (r == null) {
    Page p=cache.get(pos);
    if (p == null) {
      Chunk c=getChunk(pos);
      long filePos=c.block * BLOCK_SIZE;
      filePos+=DataUtils.getPageOffset(pos);
      if (filePos < 0) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
      }
      long maxPos=(c.block + c.len) * BLOCK_SIZE;
      r=PageChildren.read(fileStore,pos,mapId,filePos,maxPos);
    }
 else {
      r=new PageChildren(p);
    }
    r.removeDuplicateChunkReferences();
    cacheChunkRef.put(pos,r);
  }
  if (r.children.length == 0) {
    int chunk=DataUtils.getPageChunkId(pos);
    if (chunk == parentChunk) {
      return null;
    }
  }
  return r;
}",0.9340845070422537
15777,"/** 
 * Read an inner node page from the buffer, but ignore the keys and values.
 * @param fileStore the file store
 * @param filePos the position in the file
 * @param mapId the map id
 * @param pos the position
 * @return the page children object
 */
static PageChildren read(FileStore fileStore,long filePos,int mapId,long pos){
  ByteBuffer buff;
  int maxLength=DataUtils.getPageMaxLength(pos);
  if (maxLength == DataUtils.PAGE_LARGE) {
    buff=fileStore.readFully(filePos,128);
    maxLength=buff.getInt();
  }
  long fileSize=fileStore.fileSize;
  maxLength=(int)Math.min(fileSize - filePos,maxLength);
  int length=maxLength;
  if (length < 0) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",length,filePos,fileSize);
  }
  buff=fileStore.readFully(filePos,length);
  int chunkId=DataUtils.getPageChunkId(pos);
  int offset=DataUtils.getPageOffset(pos);
  int start=buff.position();
  int pageLength=buff.getInt();
  if (pageLength > maxLength) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,maxLength,pageLength);
  }
  buff.limit(start + pageLength);
  short check=buff.getShort();
  int m=DataUtils.readVarInt(buff);
  if (m != mapId) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,mapId,m);
  }
  int checkTest=DataUtils.getCheckValue(chunkId) ^ DataUtils.getCheckValue(offset) ^ DataUtils.getCheckValue(pageLength);
  if (check != (short)checkTest) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,checkTest,check);
  }
  int len=DataUtils.readVarInt(buff);
  int type=buff.get();
  boolean node=(type & 1) == DataUtils.PAGE_TYPE_NODE;
  if (!node) {
    return null;
  }
  long[] children=new long[len + 1];
  for (int i=0; i <= len; i++) {
    children[i]=buff.getLong();
  }
  return new PageChildren(pos,children);
}","/** 
 * Read an inner node page from the buffer, but ignore the keys and values.
 * @param fileStore the file store
 * @param pos the position
 * @param mapId the map id
 * @param filePos the position in the file
 * @param maxPos the maximum position (the end of the chunk)
 * @return the page children object
 */
static PageChildren read(FileStore fileStore,long pos,int mapId,long filePos,long maxPos){
  ByteBuffer buff;
  int maxLength=DataUtils.getPageMaxLength(pos);
  if (maxLength == DataUtils.PAGE_LARGE) {
    buff=fileStore.readFully(filePos,128);
    maxLength=buff.getInt();
  }
  maxLength=(int)Math.min(maxPos - filePos,maxLength);
  int length=maxLength;
  if (length < 0) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",length,filePos,maxPos);
  }
  buff=fileStore.readFully(filePos,length);
  int chunkId=DataUtils.getPageChunkId(pos);
  int offset=DataUtils.getPageOffset(pos);
  int start=buff.position();
  int pageLength=buff.getInt();
  if (pageLength > maxLength) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,maxLength,pageLength);
  }
  buff.limit(start + pageLength);
  short check=buff.getShort();
  int m=DataUtils.readVarInt(buff);
  if (m != mapId) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,mapId,m);
  }
  int checkTest=DataUtils.getCheckValue(chunkId) ^ DataUtils.getCheckValue(offset) ^ DataUtils.getCheckValue(pageLength);
  if (check != (short)checkTest) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",chunkId,checkTest,check);
  }
  int len=DataUtils.readVarInt(buff);
  int type=buff.get();
  boolean node=(type & 1) == DataUtils.PAGE_TYPE_NODE;
  if (!node) {
    return null;
  }
  long[] children=new long[len + 1];
  for (int i=0; i <= len; i++) {
    children[i]=buff.getLong();
  }
  return new PageChildren(pos,children);
}",0.9283346085182352
15778,"@Override public void write(WriteBuffer buff,Object obj){
  DataType t=getType(obj);
  if (t != this) {
    t.write(buff,obj);
    return;
  }
  byte[] data=serialize(obj);
  int size=data.length;
  averageSize=(size + 15 * averageSize) / 16;
  buff.put((byte)TYPE_SERIALIZED_OBJECT).putVarInt(data.length).put(data);
}","@Override public void write(WriteBuffer buff,Object obj){
  DataType t=getType(obj);
  if (t != this) {
    t.write(buff,obj);
    return;
  }
  byte[] data=serialize(obj);
  int size=data.length * 2;
  averageSize=(size + 15 * averageSize) / 16;
  buff.put((byte)TYPE_SERIALIZED_OBJECT).putVarInt(data.length).put(data);
}",0.9937694704049844
15779,"private void testCacheInfo(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  MVStore s=new MVStore.Builder().fileName(fileName).cacheSize(2).open();
  assertEquals(2,s.getCacheSize());
  MVMap<Integer,byte[]> map;
  map=s.openMap(""String_Node_Str"");
  byte[] data=new byte[100 * 1024];
  for (int i=0; i < 30; i++) {
    map.put(i,data);
    s.commit();
    if (i < 10) {
      assertEquals(0,s.getCacheSizeUsed());
    }
 else     if (i > 20) {
      assertEquals(1,s.getCacheSizeUsed());
    }
  }
  s.close();
  s=new MVStore.Builder().open();
  assertEquals(0,s.getCacheSize());
  assertEquals(0,s.getCacheSizeUsed());
  s.close();
}","private void testCacheInfo(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  MVStore s=new MVStore.Builder().fileName(fileName).cacheSize(2).open();
  assertEquals(2,s.getCacheSize());
  MVMap<Integer,byte[]> map;
  map=s.openMap(""String_Node_Str"");
  byte[] data=new byte[100 * 1024];
  for (int i=0; i < 30; i++) {
    map.put(i,data);
    s.commit();
    if (i < 5) {
      assertEquals(0,s.getCacheSizeUsed());
    }
 else     if (i > 20) {
      assertTrue(s.getCacheSizeUsed() >= 1);
    }
  }
  s.close();
  s=new MVStore.Builder().open();
  assertEquals(0,s.getCacheSize());
  assertEquals(0,s.getCacheSizeUsed());
  s.close();
}",0.8416149068322981
15780,"private void testCacheInfo(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  MVStore s=new MVStore.Builder().fileName(fileName).cacheSize(2).open();
  assertEquals(2,s.getCacheSize());
  MVMap<Integer,byte[]> map;
  map=s.openMap(""String_Node_Str"");
  byte[] data=new byte[100 * 1024];
  for (int i=0; i < 30; i++) {
    map.put(i,data);
    s.commit();
    if (i < 10) {
      assertEquals(0,s.getCacheSizeUsed());
    }
 else     if (i > 20) {
      assertEquals(1,s.getCacheSizeUsed());
    }
  }
  s.close();
  s=new MVStore.Builder().open();
  assertEquals(0,s.getCacheSize());
  assertEquals(0,s.getCacheSizeUsed());
  s.close();
}","private void testCacheInfo(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  MVStore s=new MVStore.Builder().fileName(fileName).cacheSize(2).open();
  assertEquals(2,s.getCacheSize());
  MVMap<Integer,byte[]> map;
  map=s.openMap(""String_Node_Str"");
  byte[] data=new byte[100 * 1024];
  for (int i=0; i < 30; i++) {
    map.put(i,data);
    s.commit();
    if (i < 5) {
      assertEquals(0,s.getCacheSizeUsed());
    }
 else     if (i > 20) {
      assertTrue(s.getCacheSizeUsed() >= 1);
    }
  }
  s.close();
  s=new MVStore.Builder().open();
  assertEquals(0,s.getCacheSize());
  assertEquals(0,s.getCacheSizeUsed());
  s.close();
}",0.8416149068322981
15781,"private Page copy(Page source,CursorPos parent){
  Page target=Page.create(this,writeVersion,source);
  if (target.isLeaf()) {
    Page child=target;
    for (CursorPos p=parent; p != null; p=p.parent) {
      p.page.setChild(p.index,child);
      p.page=p.page.copy(writeVersion);
      child=p.page;
      if (p.parent == null) {
        newRoot(p.page);
        beforeWrite();
      }
    }
  }
 else {
    CursorPos pos=new CursorPos(target,0,parent);
    for (int i=0; i < getChildPageCount(target); i++) {
      pos.index=i;
      long p=source.getChildPagePos(i);
      if (p != 0) {
        copy(source.getChildPage(i),pos);
      }
    }
    target=pos.page;
  }
  return target;
}","private Page copy(Page source,CursorPos parent){
  Page target=Page.create(this,writeVersion,source);
  if (source.isLeaf()) {
    Page child=target;
    for (CursorPos p=parent; p != null; p=p.parent) {
      p.page.setChild(p.index,child);
      p.page=p.page.copy(writeVersion);
      child=p.page;
      if (p.parent == null) {
        newRoot(p.page);
        beforeWrite();
      }
    }
  }
 else {
    for (int i=0; i < getChildPageCount(target); i++) {
      target.setChild(i,null);
    }
    CursorPos pos=new CursorPos(target,0,parent);
    for (int i=0; i < getChildPageCount(target); i++) {
      pos.index=i;
      long p=source.getChildPagePos(i);
      if (p != 0) {
        copy(source.getChildPage(i),pos);
      }
    }
    target=pos.page;
  }
  return target;
}",0.9287169042769856
15782,"/** 
 * Replace the child page.
 * @param index the index
 * @param c the new child page
 */
public void setChild(int index,Page c){
  if (c != children[index].page || c.getPos() != children[index].pos) {
    long oldCount=children[index].count;
    children=Arrays.copyOf(children,children.length);
    PageReference ref=new PageReference(c,c.pos,c.totalCount);
    children[index]=ref;
    totalCount+=c.totalCount - oldCount;
  }
}","/** 
 * Replace the child page.
 * @param index the index
 * @param c the new child page
 */
public void setChild(int index,Page c){
  if (c == null) {
    long oldCount=children[index].count;
    children=Arrays.copyOf(children,children.length);
    PageReference ref=new PageReference(null,0,0);
    children[index]=ref;
    totalCount-=oldCount;
  }
 else   if (c != children[index].page || c.getPos() != children[index].pos) {
    long oldCount=children[index].count;
    children=Arrays.copyOf(children,children.length);
    PageReference ref=new PageReference(c,c.pos,c.totalCount);
    children[index]=ref;
    totalCount+=c.totalCount - oldCount;
  }
}",0.793418647166362
15783,"private Page copy(Page source,CursorPos parent){
  Page target=Page.create(this,writeVersion,source);
  if (target.isLeaf()) {
    Page child=target;
    for (CursorPos p=parent; p != null; p=p.parent) {
      p.page.setChild(p.index,child);
      p.page=p.page.copy(writeVersion);
      child=p.page;
      if (p.parent == null) {
        newRoot(p.page);
        beforeWrite();
      }
    }
  }
 else {
    CursorPos pos=new CursorPos(target,0,parent);
    for (int i=0; i < getChildPageCount(target); i++) {
      pos.index=i;
      long p=source.getChildPagePos(i);
      if (p != 0) {
        copy(source.getChildPage(i),pos);
      }
    }
    target=pos.page;
  }
  return target;
}","private Page copy(Page source,CursorPos parent){
  Page target=Page.create(this,writeVersion,source);
  if (source.isLeaf()) {
    Page child=target;
    for (CursorPos p=parent; p != null; p=p.parent) {
      p.page.setChild(p.index,child);
      p.page=p.page.copy(writeVersion);
      child=p.page;
      if (p.parent == null) {
        newRoot(p.page);
        beforeWrite();
      }
    }
  }
 else {
    for (int i=0; i < getChildPageCount(target); i++) {
      target.setChild(i,null);
    }
    CursorPos pos=new CursorPos(target,0,parent);
    for (int i=0; i < getChildPageCount(target); i++) {
      pos.index=i;
      long p=source.getChildPagePos(i);
      if (p != 0) {
        copy(source.getChildPage(i),pos);
      }
    }
    target=pos.page;
  }
  return target;
}",0.9287169042769856
15784,"/** 
 * Replace the child page.
 * @param index the index
 * @param c the new child page
 */
public void setChild(int index,Page c){
  if (c != children[index].page || c.getPos() != children[index].pos) {
    long oldCount=children[index].count;
    children=Arrays.copyOf(children,children.length);
    PageReference ref=new PageReference(c,c.pos,c.totalCount);
    children[index]=ref;
    totalCount+=c.totalCount - oldCount;
  }
}","/** 
 * Replace the child page.
 * @param index the index
 * @param c the new child page
 */
public void setChild(int index,Page c){
  if (c == null) {
    long oldCount=children[index].count;
    children=Arrays.copyOf(children,children.length);
    PageReference ref=new PageReference(null,0,0);
    children[index]=ref;
    totalCount-=oldCount;
  }
 else   if (c != children[index].page || c.getPos() != children[index].pos) {
    long oldCount=children[index].count;
    children=Arrays.copyOf(children,children.length);
    PageReference ref=new PageReference(c,c.pos,c.totalCount);
    children[index]=ref;
    totalCount+=c.totalCount - oldCount;
  }
}",0.793418647166362
15785,"/** 
 * Clear the map and reset the level to the specified value.
 * @param newLevel the new level
 */
protected void reset(int newLevel){
  if (newLevel > 30) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  minSize=size * 3 / 4;
  size=0;
  level=newLevel;
  len=2 << level;
  mask=len - 1;
  maxSize=(int)(len * MAX_LOAD / 100);
  deletedCount=0;
  maxDeleted=20 + len / 2;
}","/** 
 * Clear the map and reset the level to the specified value.
 * @param newLevel the new level
 */
protected void reset(int newLevel){
  if (newLevel > 30) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  size=0;
  level=newLevel;
  len=2 << level;
  mask=len - 1;
  minSize=(int)((1 << level) * MAX_LOAD / 100);
  maxSize=(int)(len * MAX_LOAD / 100);
  deletedCount=0;
  maxDeleted=20 + len / 2;
}",0.8987654320987655
15786,"/** 
 * Clear the map and reset the level to the specified value.
 * @param newLevel the new level
 */
protected void reset(int newLevel){
  if (newLevel > 30) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  minSize=size * 3 / 4;
  size=0;
  level=newLevel;
  len=2 << level;
  mask=len - 1;
  maxSize=(int)(len * MAX_LOAD / 100);
  deletedCount=0;
  maxDeleted=20 + len / 2;
}","/** 
 * Clear the map and reset the level to the specified value.
 * @param newLevel the new level
 */
protected void reset(int newLevel){
  if (newLevel > 30) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  size=0;
  level=newLevel;
  len=2 << level;
  mask=len - 1;
  minSize=(int)((1 << level) * MAX_LOAD / 100);
  maxSize=(int)(len * MAX_LOAD / 100);
  deletedCount=0;
  maxDeleted=20 + len / 2;
}",0.8987654320987655
15787,"/** 
 * Clear the map and reset the level to the specified value.
 * @param newLevel the new level
 */
protected void reset(int newLevel){
  if (newLevel > 30) {
    newLevel=30;
  }
  minSize=size * 3 / 4;
  size=0;
  level=newLevel;
  len=2 << level;
  mask=len - 1;
  maxSize=(int)(len * MAX_LOAD / 100L);
  deletedCount=0;
  maxDeleted=20 + len / 2;
}","/** 
 * Clear the map and reset the level to the specified value.
 * @param newLevel the new level
 */
protected void reset(int newLevel){
  if (newLevel > 30) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  minSize=size * 3 / 4;
  size=0;
  level=newLevel;
  len=2 << level;
  mask=len - 1;
  maxSize=(int)(len * MAX_LOAD / 100);
  deletedCount=0;
  maxDeleted=20 + len / 2;
}",0.9171122994652406
15788,"@Override protected void rehash(int newLevel){
  int[] oldKeys=keys;
  int[] oldValues=values;
  reset(newLevel);
  for (int i=0; i < oldKeys.length; i++) {
    int k=oldKeys[i];
    if (k != 0) {
      put(k,oldValues[i]);
    }
  }
}","@Override protected void rehash(int newLevel){
  int[] oldKeys=keys;
  int[] oldValues=values;
  reset(newLevel);
  for (int i=0; i < oldKeys.length; i++) {
    int k=oldKeys[i];
    if (k != 0) {
      internalPut(k,oldValues[i]);
    }
  }
}",0.9790794979079498
15789,"/** 
 * Store the given key-value pair. The value is overwritten or added.
 * @param key the key
 * @param value the value (-1 is not supported)
 */
public void put(int key,int value){
  if (key == 0) {
    zeroKey=true;
    zeroValue=value;
    return;
  }
  checkSizePut();
  int index=getIndex(key);
  int plus=1;
  int deleted=-1;
  do {
    int k=keys[index];
    if (k == 0) {
      if (values[index] != DELETED) {
        if (deleted >= 0) {
          index=deleted;
          deletedCount--;
        }
        size++;
        keys[index]=key;
        values[index]=value;
        return;
      }
      if (deleted < 0) {
        deleted=index;
      }
    }
 else     if (k == key) {
      values[index]=value;
      return;
    }
    index=(index + plus++) & mask;
  }
 while (plus <= len);
  DbException.throwInternalError(""String_Node_Str"");
}","/** 
 * Store the given key-value pair. The value is overwritten or added.
 * @param key the key
 * @param value the value (-1 is not supported)
 */
public void put(int key,int value){
  if (key == 0) {
    zeroKey=true;
    zeroValue=value;
    return;
  }
  checkSizePut();
  internalPut(key,value);
}",0.4874675885911841
15790,"@Override protected void rehash(int newLevel){
  Value[] oldKeys=keys;
  V[] oldValues=values;
  reset(newLevel);
  int len=oldKeys.length;
  for (int i=0; i < len; i++) {
    Value k=oldKeys[i];
    if (k != null && k != ValueNull.DELETED) {
      put(k,oldValues[i]);
    }
  }
}","@Override protected void rehash(int newLevel){
  Value[] oldKeys=keys;
  V[] oldValues=values;
  reset(newLevel);
  int len=oldKeys.length;
  for (int i=0; i < len; i++) {
    Value k=oldKeys[i];
    if (k != null && k != ValueNull.DELETED) {
      internalPut(k,oldValues[i]);
    }
  }
}",0.9824561403508772
15791,"/** 
 * Add or update a key value pair.
 * @param key the key
 * @param value the new value
 */
public void put(Value key,V value){
  checkSizePut();
  int index=getIndex(key);
  int plus=1;
  int deleted=-1;
  do {
    Value k=keys[index];
    if (k == null) {
      if (deleted >= 0) {
        index=deleted;
        deletedCount--;
      }
      size++;
      keys[index]=key;
      values[index]=value;
      return;
    }
 else     if (k == ValueNull.DELETED) {
      if (deleted < 0) {
        deleted=index;
      }
    }
 else     if (k.equals(key)) {
      values[index]=value;
      return;
    }
    index=(index + plus++) & mask;
  }
 while (plus <= len);
  DbException.throwInternalError(""String_Node_Str"");
}","/** 
 * Add or update a key value pair.
 * @param key the key
 * @param value the new value
 */
public void put(Value key,V value){
  checkSizePut();
  internalPut(key,value);
}",0.3781979977753059
15792,"/** 
 * Clear the map and reset the level to the specified value.
 * @param newLevel the new level
 */
protected void reset(int newLevel){
  if (newLevel > 30) {
    newLevel=30;
  }
  minSize=size * 3 / 4;
  size=0;
  level=newLevel;
  len=2 << level;
  mask=len - 1;
  maxSize=(int)(len * MAX_LOAD / 100L);
  deletedCount=0;
  maxDeleted=20 + len / 2;
}","/** 
 * Clear the map and reset the level to the specified value.
 * @param newLevel the new level
 */
protected void reset(int newLevel){
  if (newLevel > 30) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  minSize=size * 3 / 4;
  size=0;
  level=newLevel;
  len=2 << level;
  mask=len - 1;
  maxSize=(int)(len * MAX_LOAD / 100);
  deletedCount=0;
  maxDeleted=20 + len / 2;
}",0.9171122994652406
15793,"@Override protected void rehash(int newLevel){
  int[] oldKeys=keys;
  int[] oldValues=values;
  reset(newLevel);
  for (int i=0; i < oldKeys.length; i++) {
    int k=oldKeys[i];
    if (k != 0) {
      put(k,oldValues[i]);
    }
  }
}","@Override protected void rehash(int newLevel){
  int[] oldKeys=keys;
  int[] oldValues=values;
  reset(newLevel);
  for (int i=0; i < oldKeys.length; i++) {
    int k=oldKeys[i];
    if (k != 0) {
      internalPut(k,oldValues[i]);
    }
  }
}",0.9790794979079498
15794,"/** 
 * Store the given key-value pair. The value is overwritten or added.
 * @param key the key
 * @param value the value (-1 is not supported)
 */
public void put(int key,int value){
  if (key == 0) {
    zeroKey=true;
    zeroValue=value;
    return;
  }
  checkSizePut();
  int index=getIndex(key);
  int plus=1;
  int deleted=-1;
  do {
    int k=keys[index];
    if (k == 0) {
      if (values[index] != DELETED) {
        if (deleted >= 0) {
          index=deleted;
          deletedCount--;
        }
        size++;
        keys[index]=key;
        values[index]=value;
        return;
      }
      if (deleted < 0) {
        deleted=index;
      }
    }
 else     if (k == key) {
      values[index]=value;
      return;
    }
    index=(index + plus++) & mask;
  }
 while (plus <= len);
  DbException.throwInternalError(""String_Node_Str"");
}","/** 
 * Store the given key-value pair. The value is overwritten or added.
 * @param key the key
 * @param value the value (-1 is not supported)
 */
public void put(int key,int value){
  if (key == 0) {
    zeroKey=true;
    zeroValue=value;
    return;
  }
  checkSizePut();
  internalPut(key,value);
}",0.4874675885911841
15795,"@Override protected void rehash(int newLevel){
  Value[] oldKeys=keys;
  V[] oldValues=values;
  reset(newLevel);
  int len=oldKeys.length;
  for (int i=0; i < len; i++) {
    Value k=oldKeys[i];
    if (k != null && k != ValueNull.DELETED) {
      put(k,oldValues[i]);
    }
  }
}","@Override protected void rehash(int newLevel){
  Value[] oldKeys=keys;
  V[] oldValues=values;
  reset(newLevel);
  int len=oldKeys.length;
  for (int i=0; i < len; i++) {
    Value k=oldKeys[i];
    if (k != null && k != ValueNull.DELETED) {
      internalPut(k,oldValues[i]);
    }
  }
}",0.9824561403508772
15796,"/** 
 * Add or update a key value pair.
 * @param key the key
 * @param value the new value
 */
public void put(Value key,V value){
  checkSizePut();
  int index=getIndex(key);
  int plus=1;
  int deleted=-1;
  do {
    Value k=keys[index];
    if (k == null) {
      if (deleted >= 0) {
        index=deleted;
        deletedCount--;
      }
      size++;
      keys[index]=key;
      values[index]=value;
      return;
    }
 else     if (k == ValueNull.DELETED) {
      if (deleted < 0) {
        deleted=index;
      }
    }
 else     if (k.equals(key)) {
      values[index]=value;
      return;
    }
    index=(index + plus++) & mask;
  }
 while (plus <= len);
  DbException.throwInternalError(""String_Node_Str"");
}","/** 
 * Add or update a key value pair.
 * @param key the key
 * @param value the new value
 */
public void put(Value key,V value){
  checkSizePut();
  internalPut(key,value);
}",0.3781979977753059
15797,"private void rebuildIndex(Session session,MVIndex index,String indexName){
  try {
    if (session.getDatabase().getMvStore() == null) {
      rebuildIndexBuffered(session,index);
    }
 else {
      rebuildIndexBlockMerge(session,index);
    }
  }
 catch (  DbException e) {
    getSchema().freeUniqueName(indexName);
    try {
      index.remove(session);
    }
 catch (    DbException e2) {
      trace.error(e2,""String_Node_Str"");
      throw e2;
    }
    throw e;
  }
}","private void rebuildIndex(Session session,MVIndex index,String indexName){
  try {
    if (session.getDatabase().getMvStore() == null || index instanceof MVSpatialIndex) {
      rebuildIndexBuffered(session,index);
    }
 else {
      rebuildIndexBlockMerge(session,index);
    }
  }
 catch (  DbException e) {
    getSchema().freeUniqueName(indexName);
    try {
      index.remove(session);
    }
 catch (    DbException e2) {
      trace.error(e2,""String_Node_Str"");
      throw e2;
    }
    throw e;
  }
}",0.964467005076142
15798,"private void rebuildIndex(Session session,MVIndex index,String indexName){
  try {
    if (session.getDatabase().getMvStore() == null) {
      rebuildIndexBuffered(session,index);
    }
 else {
      rebuildIndexBlockMerge(session,index);
    }
  }
 catch (  DbException e) {
    getSchema().freeUniqueName(indexName);
    try {
      index.remove(session);
    }
 catch (    DbException e2) {
      trace.error(e2,""String_Node_Str"");
      throw e2;
    }
    throw e;
  }
}","private void rebuildIndex(Session session,MVIndex index,String indexName){
  try {
    if (session.getDatabase().getMvStore() == null || index instanceof MVSpatialIndex) {
      rebuildIndexBuffered(session,index);
    }
 else {
      rebuildIndexBlockMerge(session,index);
    }
  }
 catch (  DbException e) {
    getSchema().freeUniqueName(indexName);
    try {
      index.remove(session);
    }
 catch (    DbException e2) {
      trace.error(e2,""String_Node_Str"");
      throw e2;
    }
    throw e;
  }
}",0.964467005076142
15799,"/** 
 * Calculate the number of bytes required to encode the given value.
 * @param v the value
 * @param handler the data handler for lobs
 * @return the number of bytes required to store this value
 */
public static int getValueLen(Value v,DataHandler handler){
  if (v == ValueNull.INSTANCE) {
    return 1;
  }
switch (v.getType()) {
case Value.BOOLEAN:
    return 1;
case Value.BYTE:
  return 2;
case Value.SHORT:
return 3;
case Value.INT:
{
int x=v.getInt();
if (x < 0) {
  return 1 + getVarIntLen(-x);
}
 else if (x < 16) {
  return 1;
}
 else {
  return 1 + getVarIntLen(x);
}
}
case Value.LONG:
{
long x=v.getLong();
if (x < 0) {
return 1 + getVarLongLen(-x);
}
 else if (x < 8) {
return 1;
}
 else {
return 1 + getVarLongLen(x);
}
}
case Value.DOUBLE:
{
double x=v.getDouble();
if (x == 1.0d) {
return 1;
}
long d=Double.doubleToLongBits(x);
if (d == ValueDouble.ZERO_BITS) {
return 1;
}
return 1 + getVarLongLen(Long.reverse(d));
}
case Value.FLOAT:
{
float x=v.getFloat();
if (x == 1.0f) {
return 1;
}
int f=Float.floatToIntBits(x);
if (f == ValueFloat.ZERO_BITS) {
return 1;
}
return 1 + getVarIntLen(Integer.reverse(f));
}
case Value.STRING:
{
String s=v.getString();
int len=s.length();
if (len < 32) {
return 1 + getStringWithoutLengthLen(s,len);
}
return 1 + getStringLen(s);
}
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
return 1 + getStringLen(v.getString());
case Value.DECIMAL:
{
BigDecimal x=v.getBigDecimal();
if (BigDecimal.ZERO.equals(x)) {
return 1;
}
 else if (BigDecimal.ONE.equals(x)) {
return 1;
}
int scale=x.scale();
BigInteger b=x.unscaledValue();
int bits=b.bitLength();
if (bits <= 63) {
if (scale == 0) {
return 1 + getVarLongLen(b.longValue());
}
return 1 + getVarIntLen(scale) + getVarLongLen(b.longValue());
}
byte[] bytes=b.toByteArray();
return 1 + getVarIntLen(scale) + getVarIntLen(bytes.length)+ bytes.length;
}
case Value.TIME:
if (SysProperties.STORE_LOCAL_TIME) {
long nanos=((ValueTime)v).getNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
return 1 + getVarLongLen(millis) + getVarLongLen(nanos);
}
return 1 + getVarLongLen(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
case Value.DATE:
{
if (SysProperties.STORE_LOCAL_TIME) {
long dateValue=((ValueDate)v).getDateValue();
return 1 + getVarLongLen(dateValue);
}
long x=DateTimeUtils.getTimeLocalWithoutDst(v.getDate());
return 1 + getVarLongLen(x / MILLIS_PER_MINUTE);
}
case Value.TIMESTAMP:
{
if (SysProperties.STORE_LOCAL_TIME) {
ValueTimestamp ts=(ValueTimestamp)v;
long dateValue=ts.getDateValue();
long nanos=ts.getTimeNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
return 1 + getVarLongLen(dateValue) + getVarLongLen(millis)+ getVarLongLen(nanos);
}
Timestamp ts=v.getTimestamp();
return 1 + getVarLongLen(DateTimeUtils.getTimeLocalWithoutDst(ts)) + getVarIntLen(ts.getNanos());
}
case Value.GEOMETRY:
case Value.JAVA_OBJECT:
{
byte[] b=v.getBytesNoCopy();
return 1 + getVarIntLen(b.length) + b.length;
}
case Value.BYTES:
{
byte[] b=v.getBytesNoCopy();
int len=b.length;
if (len < 32) {
return 1 + b.length;
}
return 1 + getVarIntLen(b.length) + b.length;
}
case Value.UUID:
return 1 + LENGTH_LONG + LENGTH_LONG;
case Value.BLOB:
case Value.CLOB:
{
int len=1;
if (v instanceof ValueLob) {
ValueLob lob=(ValueLob)v;
lob.convertToFileIfRequired(handler);
byte[] small=lob.getSmall();
if (small == null) {
int t=-1;
if (!lob.isLinked()) {
t=-2;
}
len+=getVarIntLen(t);
len+=getVarIntLen(lob.getTableId());
len+=getVarIntLen(lob.getObjectId());
len+=getVarLongLen(lob.getPrecision());
len+=1;
if (t == -2) {
len+=getStringLen(lob.getFileName());
}
}
 else {
len+=getVarIntLen(small.length);
len+=small.length;
}
}
 else {
ValueLobDb lob=(ValueLobDb)v;
byte[] small=lob.getSmall();
if (small == null) {
len+=getVarIntLen(-3);
len+=getVarIntLen(lob.getTableId());
len+=getVarLongLen(lob.getLobId());
len+=getVarLongLen(lob.getPrecision());
}
 else {
len+=getVarIntLen(small.length);
len+=small.length;
}
}
return len;
}
case Value.ARRAY:
{
Value[] list=((ValueArray)v).getList();
int len=1 + getVarIntLen(list.length);
for (Value x : list) {
len+=getValueLen(x,handler);
}
return len;
}
case Value.RESULT_SET:
{
int len=1;
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
len+=getVarIntLen(columnCount);
for (int i=0; i < columnCount; i++) {
len+=getStringLen(meta.getColumnName(i + 1));
len+=getVarIntLen(meta.getColumnType(i + 1));
len+=getVarIntLen(meta.getPrecision(i + 1));
len+=getVarIntLen(meta.getScale(i + 1));
}
while (rs.next()) {
len++;
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(null,rs,i + 1,t);
len+=getValueLen(val,handler);
}
}
len++;
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convert(e);
}
return len;
}
default :
throw DbException.throwInternalError(""String_Node_Str"" + v.getType());
}
}","/** 
 * Calculate the number of bytes required to encode the given value.
 * @param v the value
 * @param handler the data handler for lobs
 * @return the number of bytes required to store this value
 */
public static int getValueLen(Value v,DataHandler handler){
  if (v == ValueNull.INSTANCE) {
    return 1;
  }
switch (v.getType()) {
case Value.BOOLEAN:
    return 1;
case Value.BYTE:
  return 2;
case Value.SHORT:
return 3;
case Value.INT:
{
int x=v.getInt();
if (x < 0) {
  return 1 + getVarIntLen(-x);
}
 else if (x < 16) {
  return 1;
}
 else {
  return 1 + getVarIntLen(x);
}
}
case Value.LONG:
{
long x=v.getLong();
if (x < 0) {
return 1 + getVarLongLen(-x);
}
 else if (x < 8) {
return 1;
}
 else {
return 1 + getVarLongLen(x);
}
}
case Value.DOUBLE:
{
double x=v.getDouble();
if (x == 1.0d) {
return 1;
}
long d=Double.doubleToLongBits(x);
if (d == ValueDouble.ZERO_BITS) {
return 1;
}
return 1 + getVarLongLen(Long.reverse(d));
}
case Value.FLOAT:
{
float x=v.getFloat();
if (x == 1.0f) {
return 1;
}
int f=Float.floatToIntBits(x);
if (f == ValueFloat.ZERO_BITS) {
return 1;
}
return 1 + getVarIntLen(Integer.reverse(f));
}
case Value.STRING:
{
String s=v.getString();
int len=s.length();
if (len < 32) {
return 1 + getStringWithoutLengthLen(s,len);
}
return 1 + getStringLen(s);
}
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
return 1 + getStringLen(v.getString());
case Value.DECIMAL:
{
BigDecimal x=v.getBigDecimal();
if (BigDecimal.ZERO.equals(x)) {
return 1;
}
 else if (BigDecimal.ONE.equals(x)) {
return 1;
}
int scale=x.scale();
BigInteger b=x.unscaledValue();
int bits=b.bitLength();
if (bits <= 63) {
if (scale == 0) {
return 1 + getVarLongLen(b.longValue());
}
return 1 + getVarIntLen(scale) + getVarLongLen(b.longValue());
}
byte[] bytes=b.toByteArray();
return 1 + getVarIntLen(scale) + getVarIntLen(bytes.length)+ bytes.length;
}
case Value.TIME:
if (SysProperties.STORE_LOCAL_TIME) {
long nanos=((ValueTime)v).getNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
return 1 + getVarLongLen(millis) + getVarLongLen(nanos);
}
return 1 + getVarLongLen(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
case Value.DATE:
{
if (SysProperties.STORE_LOCAL_TIME) {
long dateValue=((ValueDate)v).getDateValue();
return 1 + getVarLongLen(dateValue);
}
long x=DateTimeUtils.getTimeLocalWithoutDst(v.getDate());
return 1 + getVarLongLen(x / MILLIS_PER_MINUTE);
}
case Value.TIMESTAMP:
{
if (SysProperties.STORE_LOCAL_TIME) {
ValueTimestamp ts=(ValueTimestamp)v;
long dateValue=ts.getDateValue();
long nanos=ts.getTimeNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
return 1 + getVarLongLen(dateValue) + getVarLongLen(millis)+ getVarLongLen(nanos);
}
Timestamp ts=v.getTimestamp();
return 1 + getVarLongLen(DateTimeUtils.getTimeLocalWithoutDst(ts)) + getVarIntLen(ts.getNanos() % 1000000);
}
case Value.GEOMETRY:
case Value.JAVA_OBJECT:
{
byte[] b=v.getBytesNoCopy();
return 1 + getVarIntLen(b.length) + b.length;
}
case Value.BYTES:
{
byte[] b=v.getBytesNoCopy();
int len=b.length;
if (len < 32) {
return 1 + b.length;
}
return 1 + getVarIntLen(b.length) + b.length;
}
case Value.UUID:
return 1 + LENGTH_LONG + LENGTH_LONG;
case Value.BLOB:
case Value.CLOB:
{
int len=1;
if (v instanceof ValueLob) {
ValueLob lob=(ValueLob)v;
lob.convertToFileIfRequired(handler);
byte[] small=lob.getSmall();
if (small == null) {
int t=-1;
if (!lob.isLinked()) {
t=-2;
}
len+=getVarIntLen(t);
len+=getVarIntLen(lob.getTableId());
len+=getVarIntLen(lob.getObjectId());
len+=getVarLongLen(lob.getPrecision());
len+=1;
if (t == -2) {
len+=getStringLen(lob.getFileName());
}
}
 else {
len+=getVarIntLen(small.length);
len+=small.length;
}
}
 else {
ValueLobDb lob=(ValueLobDb)v;
byte[] small=lob.getSmall();
if (small == null) {
len+=getVarIntLen(-3);
len+=getVarIntLen(lob.getTableId());
len+=getVarLongLen(lob.getLobId());
len+=getVarLongLen(lob.getPrecision());
}
 else {
len+=getVarIntLen(small.length);
len+=small.length;
}
}
return len;
}
case Value.ARRAY:
{
Value[] list=((ValueArray)v).getList();
int len=1 + getVarIntLen(list.length);
for (Value x : list) {
len+=getValueLen(x,handler);
}
return len;
}
case Value.RESULT_SET:
{
int len=1;
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
len+=getVarIntLen(columnCount);
for (int i=0; i < columnCount; i++) {
len+=getStringLen(meta.getColumnName(i + 1));
len+=getVarIntLen(meta.getColumnType(i + 1));
len+=getVarIntLen(meta.getPrecision(i + 1));
len+=getVarIntLen(meta.getScale(i + 1));
}
while (rs.next()) {
len++;
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(null,rs,i + 1,t);
len+=getValueLen(val,handler);
}
}
len++;
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convert(e);
}
return len;
}
default :
throw DbException.throwInternalError(""String_Node_Str"" + v.getType());
}
}",0.998992544831755
15800,"/** 
 * Append a value.
 * @param v the value
 */
public void writeValue(Value v){
  int start=pos;
  if (v == ValueNull.INSTANCE) {
    data[pos++]=0;
    return;
  }
  int type=v.getType();
switch (type) {
case Value.BOOLEAN:
    writeByte((byte)(v.getBoolean().booleanValue() ? BOOLEAN_TRUE : BOOLEAN_FALSE));
  break;
case Value.BYTE:
writeByte((byte)type);
writeByte(v.getByte());
break;
case Value.SHORT:
writeByte((byte)type);
writeShortInt(v.getShort());
break;
case Value.INT:
{
int x=v.getInt();
if (x < 0) {
writeByte((byte)INT_NEG);
writeVarInt(-x);
}
 else if (x < 16) {
writeByte((byte)(INT_0_15 + x));
}
 else {
writeByte((byte)type);
writeVarInt(x);
}
break;
}
case Value.LONG:
{
long x=v.getLong();
if (x < 0) {
writeByte((byte)LONG_NEG);
writeVarLong(-x);
}
 else if (x < 8) {
writeByte((byte)(LONG_0_7 + x));
}
 else {
writeByte((byte)type);
writeVarLong(x);
}
break;
}
case Value.DECIMAL:
{
BigDecimal x=v.getBigDecimal();
if (BigDecimal.ZERO.equals(x)) {
writeByte((byte)DECIMAL_0_1);
}
 else if (BigDecimal.ONE.equals(x)) {
writeByte((byte)(DECIMAL_0_1 + 1));
}
 else {
int scale=x.scale();
BigInteger b=x.unscaledValue();
int bits=b.bitLength();
if (bits <= 63) {
if (scale == 0) {
writeByte((byte)DECIMAL_SMALL_0);
writeVarLong(b.longValue());
}
 else {
writeByte((byte)DECIMAL_SMALL);
writeVarInt(scale);
writeVarLong(b.longValue());
}
}
 else {
writeByte((byte)type);
writeVarInt(scale);
byte[] bytes=b.toByteArray();
writeVarInt(bytes.length);
write(bytes,0,bytes.length);
}
}
break;
}
case Value.TIME:
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_TIME);
ValueTime t=(ValueTime)v;
long nanos=t.getNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
writeVarLong(millis);
writeVarLong(nanos);
}
 else {
writeByte((byte)type);
writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
}
break;
case Value.DATE:
{
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_DATE);
long x=((ValueDate)v).getDateValue();
writeVarLong(x);
}
 else {
writeByte((byte)type);
long x=DateTimeUtils.getTimeLocalWithoutDst(v.getDate());
writeVarLong(x / MILLIS_PER_MINUTE);
}
break;
}
case Value.TIMESTAMP:
{
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_TIMESTAMP);
ValueTimestamp ts=(ValueTimestamp)v;
long dateValue=ts.getDateValue();
writeVarLong(dateValue);
long nanos=ts.getTimeNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
writeVarLong(millis);
writeVarLong(nanos);
}
 else {
Timestamp ts=v.getTimestamp();
writeByte((byte)type);
writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(ts));
writeVarInt(ts.getNanos());
}
break;
}
case Value.GEOMETRY:
case Value.JAVA_OBJECT:
{
writeByte((byte)type);
byte[] b=v.getBytesNoCopy();
int len=b.length;
writeVarInt(len);
write(b,0,len);
break;
}
case Value.BYTES:
{
byte[] b=v.getBytesNoCopy();
int len=b.length;
if (len < 32) {
writeByte((byte)(BYTES_0_31 + len));
write(b,0,len);
}
 else {
writeByte((byte)type);
writeVarInt(len);
write(b,0,len);
}
break;
}
case Value.UUID:
{
writeByte((byte)type);
ValueUuid uuid=(ValueUuid)v;
writeLong(uuid.getHigh());
writeLong(uuid.getLow());
break;
}
case Value.STRING:
{
String s=v.getString();
int len=s.length();
if (len < 32) {
writeByte((byte)(STRING_0_31 + len));
writeStringWithoutLength(s,len);
}
 else {
writeByte((byte)type);
writeString(s);
}
break;
}
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
writeByte((byte)type);
writeString(v.getString());
break;
case Value.DOUBLE:
{
double x=v.getDouble();
if (x == 1.0d) {
writeByte((byte)(DOUBLE_0_1 + 1));
}
 else {
long d=Double.doubleToLongBits(x);
if (d == ValueDouble.ZERO_BITS) {
writeByte((byte)DOUBLE_0_1);
}
 else {
writeByte((byte)type);
writeVarLong(Long.reverse(d));
}
}
break;
}
case Value.FLOAT:
{
float x=v.getFloat();
if (x == 1.0f) {
writeByte((byte)(FLOAT_0_1 + 1));
}
 else {
int f=Float.floatToIntBits(x);
if (f == ValueFloat.ZERO_BITS) {
writeByte((byte)FLOAT_0_1);
}
 else {
writeByte((byte)type);
writeVarInt(Integer.reverse(f));
}
}
break;
}
case Value.BLOB:
case Value.CLOB:
{
writeByte((byte)type);
if (v instanceof ValueLob) {
ValueLob lob=(ValueLob)v;
lob.convertToFileIfRequired(handler);
byte[] small=lob.getSmall();
if (small == null) {
int t=-1;
if (!lob.isLinked()) {
t=-2;
}
writeVarInt(t);
writeVarInt(lob.getTableId());
writeVarInt(lob.getObjectId());
writeVarLong(lob.getPrecision());
writeByte((byte)(lob.isCompressed() ? 1 : 0));
if (t == -2) {
writeString(lob.getFileName());
}
}
 else {
writeVarInt(small.length);
write(small,0,small.length);
}
}
 else {
ValueLobDb lob=(ValueLobDb)v;
byte[] small=lob.getSmall();
if (small == null) {
writeVarInt(-3);
writeVarInt(lob.getTableId());
writeVarLong(lob.getLobId());
writeVarLong(lob.getPrecision());
}
 else {
writeVarInt(small.length);
write(small,0,small.length);
}
}
break;
}
case Value.ARRAY:
{
writeByte((byte)type);
Value[] list=((ValueArray)v).getList();
writeVarInt(list.length);
for (Value x : list) {
writeValue(x);
}
break;
}
case Value.RESULT_SET:
{
writeByte((byte)type);
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
writeVarInt(columnCount);
for (int i=0; i < columnCount; i++) {
writeString(meta.getColumnName(i + 1));
writeVarInt(meta.getColumnType(i + 1));
writeVarInt(meta.getPrecision(i + 1));
writeVarInt(meta.getScale(i + 1));
}
while (rs.next()) {
writeByte((byte)1);
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(null,rs,i + 1,t);
writeValue(val);
}
}
writeByte((byte)0);
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convert(e);
}
break;
}
default :
DbException.throwInternalError(""String_Node_Str"" + v.getType());
}
if (SysProperties.CHECK2) {
if (pos - start != getValueLen(v,handler)) {
throw DbException.throwInternalError(""String_Node_Str"" + (pos - start) + ""String_Node_Str""+ getValueLen(v,handler));
}
}
}","/** 
 * Append a value.
 * @param v the value
 */
public void writeValue(Value v){
  int start=pos;
  if (v == ValueNull.INSTANCE) {
    data[pos++]=0;
    return;
  }
  int type=v.getType();
switch (type) {
case Value.BOOLEAN:
    writeByte((byte)(v.getBoolean().booleanValue() ? BOOLEAN_TRUE : BOOLEAN_FALSE));
  break;
case Value.BYTE:
writeByte((byte)type);
writeByte(v.getByte());
break;
case Value.SHORT:
writeByte((byte)type);
writeShortInt(v.getShort());
break;
case Value.INT:
{
int x=v.getInt();
if (x < 0) {
writeByte((byte)INT_NEG);
writeVarInt(-x);
}
 else if (x < 16) {
writeByte((byte)(INT_0_15 + x));
}
 else {
writeByte((byte)type);
writeVarInt(x);
}
break;
}
case Value.LONG:
{
long x=v.getLong();
if (x < 0) {
writeByte((byte)LONG_NEG);
writeVarLong(-x);
}
 else if (x < 8) {
writeByte((byte)(LONG_0_7 + x));
}
 else {
writeByte((byte)type);
writeVarLong(x);
}
break;
}
case Value.DECIMAL:
{
BigDecimal x=v.getBigDecimal();
if (BigDecimal.ZERO.equals(x)) {
writeByte((byte)DECIMAL_0_1);
}
 else if (BigDecimal.ONE.equals(x)) {
writeByte((byte)(DECIMAL_0_1 + 1));
}
 else {
int scale=x.scale();
BigInteger b=x.unscaledValue();
int bits=b.bitLength();
if (bits <= 63) {
if (scale == 0) {
writeByte((byte)DECIMAL_SMALL_0);
writeVarLong(b.longValue());
}
 else {
writeByte((byte)DECIMAL_SMALL);
writeVarInt(scale);
writeVarLong(b.longValue());
}
}
 else {
writeByte((byte)type);
writeVarInt(scale);
byte[] bytes=b.toByteArray();
writeVarInt(bytes.length);
write(bytes,0,bytes.length);
}
}
break;
}
case Value.TIME:
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_TIME);
ValueTime t=(ValueTime)v;
long nanos=t.getNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
writeVarLong(millis);
writeVarLong(nanos);
}
 else {
writeByte((byte)type);
writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
}
break;
case Value.DATE:
{
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_DATE);
long x=((ValueDate)v).getDateValue();
writeVarLong(x);
}
 else {
writeByte((byte)type);
long x=DateTimeUtils.getTimeLocalWithoutDst(v.getDate());
writeVarLong(x / MILLIS_PER_MINUTE);
}
break;
}
case Value.TIMESTAMP:
{
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_TIMESTAMP);
ValueTimestamp ts=(ValueTimestamp)v;
long dateValue=ts.getDateValue();
writeVarLong(dateValue);
long nanos=ts.getTimeNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
writeVarLong(millis);
writeVarLong(nanos);
}
 else {
Timestamp ts=v.getTimestamp();
writeByte((byte)type);
writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(ts));
writeVarInt(ts.getNanos() % 1000000);
}
break;
}
case Value.GEOMETRY:
case Value.JAVA_OBJECT:
{
writeByte((byte)type);
byte[] b=v.getBytesNoCopy();
int len=b.length;
writeVarInt(len);
write(b,0,len);
break;
}
case Value.BYTES:
{
byte[] b=v.getBytesNoCopy();
int len=b.length;
if (len < 32) {
writeByte((byte)(BYTES_0_31 + len));
write(b,0,len);
}
 else {
writeByte((byte)type);
writeVarInt(len);
write(b,0,len);
}
break;
}
case Value.UUID:
{
writeByte((byte)type);
ValueUuid uuid=(ValueUuid)v;
writeLong(uuid.getHigh());
writeLong(uuid.getLow());
break;
}
case Value.STRING:
{
String s=v.getString();
int len=s.length();
if (len < 32) {
writeByte((byte)(STRING_0_31 + len));
writeStringWithoutLength(s,len);
}
 else {
writeByte((byte)type);
writeString(s);
}
break;
}
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
writeByte((byte)type);
writeString(v.getString());
break;
case Value.DOUBLE:
{
double x=v.getDouble();
if (x == 1.0d) {
writeByte((byte)(DOUBLE_0_1 + 1));
}
 else {
long d=Double.doubleToLongBits(x);
if (d == ValueDouble.ZERO_BITS) {
writeByte((byte)DOUBLE_0_1);
}
 else {
writeByte((byte)type);
writeVarLong(Long.reverse(d));
}
}
break;
}
case Value.FLOAT:
{
float x=v.getFloat();
if (x == 1.0f) {
writeByte((byte)(FLOAT_0_1 + 1));
}
 else {
int f=Float.floatToIntBits(x);
if (f == ValueFloat.ZERO_BITS) {
writeByte((byte)FLOAT_0_1);
}
 else {
writeByte((byte)type);
writeVarInt(Integer.reverse(f));
}
}
break;
}
case Value.BLOB:
case Value.CLOB:
{
writeByte((byte)type);
if (v instanceof ValueLob) {
ValueLob lob=(ValueLob)v;
lob.convertToFileIfRequired(handler);
byte[] small=lob.getSmall();
if (small == null) {
int t=-1;
if (!lob.isLinked()) {
t=-2;
}
writeVarInt(t);
writeVarInt(lob.getTableId());
writeVarInt(lob.getObjectId());
writeVarLong(lob.getPrecision());
writeByte((byte)(lob.isCompressed() ? 1 : 0));
if (t == -2) {
writeString(lob.getFileName());
}
}
 else {
writeVarInt(small.length);
write(small,0,small.length);
}
}
 else {
ValueLobDb lob=(ValueLobDb)v;
byte[] small=lob.getSmall();
if (small == null) {
writeVarInt(-3);
writeVarInt(lob.getTableId());
writeVarLong(lob.getLobId());
writeVarLong(lob.getPrecision());
}
 else {
writeVarInt(small.length);
write(small,0,small.length);
}
}
break;
}
case Value.ARRAY:
{
writeByte((byte)type);
Value[] list=((ValueArray)v).getList();
writeVarInt(list.length);
for (Value x : list) {
writeValue(x);
}
break;
}
case Value.RESULT_SET:
{
writeByte((byte)type);
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
writeVarInt(columnCount);
for (int i=0; i < columnCount; i++) {
writeString(meta.getColumnName(i + 1));
writeVarInt(meta.getColumnType(i + 1));
writeVarInt(meta.getPrecision(i + 1));
writeVarInt(meta.getScale(i + 1));
}
while (rs.next()) {
writeByte((byte)1);
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(null,rs,i + 1,t);
writeValue(val);
}
}
writeByte((byte)0);
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convert(e);
}
break;
}
default :
DbException.throwInternalError(""String_Node_Str"" + v.getType());
}
if (SysProperties.CHECK2) {
if (pos - start != getValueLen(v,handler)) {
throw DbException.throwInternalError(""String_Node_Str"" + (pos - start) + ""String_Node_Str""+ getValueLen(v,handler));
}
}
}",0.999161355249916
15801,"/** 
 * Write a value.
 * @param v the value
 */
public void writeValue(Value v) throws IOException {
  int type=v.getType();
  writeInt(type);
switch (type) {
case Value.NULL:
    break;
case Value.BYTES:
case Value.JAVA_OBJECT:
  writeBytes(v.getBytesNoCopy());
break;
case Value.UUID:
{
ValueUuid uuid=(ValueUuid)v;
writeLong(uuid.getHigh());
writeLong(uuid.getLow());
break;
}
case Value.BOOLEAN:
writeBoolean(v.getBoolean().booleanValue());
break;
case Value.BYTE:
writeByte(v.getByte());
break;
case Value.TIME:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
writeLong(((ValueTime)v).getNanos());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
writeLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
}
 else {
writeLong(v.getTime().getTime());
}
break;
case Value.DATE:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
writeLong(((ValueDate)v).getDateValue());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
writeLong(DateTimeUtils.getTimeLocalWithoutDst(v.getDate()));
}
 else {
writeLong(v.getDate().getTime());
}
break;
case Value.TIMESTAMP:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
ValueTimestamp ts=(ValueTimestamp)v;
writeLong(ts.getDateValue());
writeLong(ts.getTimeNanos());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
Timestamp ts=v.getTimestamp();
writeLong(DateTimeUtils.getTimeLocalWithoutDst(ts));
writeInt(ts.getNanos());
}
 else {
Timestamp ts=v.getTimestamp();
writeLong(ts.getTime());
writeInt(ts.getNanos());
}
break;
}
case Value.DECIMAL:
writeString(v.getString());
break;
case Value.DOUBLE:
writeDouble(v.getDouble());
break;
case Value.FLOAT:
writeFloat(v.getFloat());
break;
case Value.INT:
writeInt(v.getInt());
break;
case Value.LONG:
writeLong(v.getLong());
break;
case Value.SHORT:
writeInt(v.getShort());
break;
case Value.STRING:
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
writeString(v.getString());
break;
case Value.BLOB:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (v instanceof ValueLobDb) {
ValueLobDb lob=(ValueLobDb)v;
if (lob.isStored()) {
writeLong(-1);
writeInt(lob.getTableId());
writeLong(lob.getLobId());
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
writeBytes(calculateLobMac(lob.getLobId()));
}
writeLong(lob.getPrecision());
break;
}
}
}
long length=v.getPrecision();
if (length < 0) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length);
}
writeLong(length);
long written=IOUtils.copyAndCloseInput(v.getInputStream(),out);
if (written != length) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length + ""String_Node_Str""+ written);
}
writeInt(LOB_MAGIC);
break;
}
case Value.CLOB:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (v instanceof ValueLobDb) {
ValueLobDb lob=(ValueLobDb)v;
if (lob.isStored()) {
writeLong(-1);
writeInt(lob.getTableId());
writeLong(lob.getLobId());
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
writeBytes(calculateLobMac(lob.getLobId()));
}
writeLong(lob.getPrecision());
break;
}
}
}
long length=v.getPrecision();
if (length < 0) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length);
}
writeLong(length);
Reader reader=v.getReader();
Data.copyString(reader,out);
writeInt(LOB_MAGIC);
break;
}
case Value.ARRAY:
{
ValueArray va=(ValueArray)v;
Value[] list=va.getList();
int len=list.length;
Class<?> componentType=va.getComponentType();
if (componentType == Object.class) {
writeInt(len);
}
 else {
writeInt(-(len + 1));
writeString(componentType.getName());
}
for (Value value : list) {
writeValue(value);
}
break;
}
case Value.RESULT_SET:
{
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
writeInt(columnCount);
for (int i=0; i < columnCount; i++) {
writeString(meta.getColumnName(i + 1));
writeInt(meta.getColumnType(i + 1));
writeInt(meta.getPrecision(i + 1));
writeInt(meta.getScale(i + 1));
}
while (rs.next()) {
writeBoolean(true);
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(session,rs,i + 1,t);
writeValue(val);
}
}
writeBoolean(false);
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convertToIOException(e);
}
break;
}
case Value.GEOMETRY:
if (version >= Constants.TCP_PROTOCOL_VERSION_14) {
writeBytes(v.getBytesNoCopy());
}
 else {
writeString(v.getString());
}
break;
default :
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + type);
}
}","/** 
 * Write a value.
 * @param v the value
 */
public void writeValue(Value v) throws IOException {
  int type=v.getType();
  writeInt(type);
switch (type) {
case Value.NULL:
    break;
case Value.BYTES:
case Value.JAVA_OBJECT:
  writeBytes(v.getBytesNoCopy());
break;
case Value.UUID:
{
ValueUuid uuid=(ValueUuid)v;
writeLong(uuid.getHigh());
writeLong(uuid.getLow());
break;
}
case Value.BOOLEAN:
writeBoolean(v.getBoolean().booleanValue());
break;
case Value.BYTE:
writeByte(v.getByte());
break;
case Value.TIME:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
writeLong(((ValueTime)v).getNanos());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
writeLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
}
 else {
writeLong(v.getTime().getTime());
}
break;
case Value.DATE:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
writeLong(((ValueDate)v).getDateValue());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
writeLong(DateTimeUtils.getTimeLocalWithoutDst(v.getDate()));
}
 else {
writeLong(v.getDate().getTime());
}
break;
case Value.TIMESTAMP:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
ValueTimestamp ts=(ValueTimestamp)v;
writeLong(ts.getDateValue());
writeLong(ts.getTimeNanos());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
Timestamp ts=v.getTimestamp();
writeLong(DateTimeUtils.getTimeLocalWithoutDst(ts));
writeInt(ts.getNanos() % 1000000);
}
 else {
Timestamp ts=v.getTimestamp();
writeLong(ts.getTime());
writeInt(ts.getNanos() % 1000000);
}
break;
}
case Value.DECIMAL:
writeString(v.getString());
break;
case Value.DOUBLE:
writeDouble(v.getDouble());
break;
case Value.FLOAT:
writeFloat(v.getFloat());
break;
case Value.INT:
writeInt(v.getInt());
break;
case Value.LONG:
writeLong(v.getLong());
break;
case Value.SHORT:
writeInt(v.getShort());
break;
case Value.STRING:
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
writeString(v.getString());
break;
case Value.BLOB:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (v instanceof ValueLobDb) {
ValueLobDb lob=(ValueLobDb)v;
if (lob.isStored()) {
writeLong(-1);
writeInt(lob.getTableId());
writeLong(lob.getLobId());
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
writeBytes(calculateLobMac(lob.getLobId()));
}
writeLong(lob.getPrecision());
break;
}
}
}
long length=v.getPrecision();
if (length < 0) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length);
}
writeLong(length);
long written=IOUtils.copyAndCloseInput(v.getInputStream(),out);
if (written != length) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length + ""String_Node_Str""+ written);
}
writeInt(LOB_MAGIC);
break;
}
case Value.CLOB:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (v instanceof ValueLobDb) {
ValueLobDb lob=(ValueLobDb)v;
if (lob.isStored()) {
writeLong(-1);
writeInt(lob.getTableId());
writeLong(lob.getLobId());
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
writeBytes(calculateLobMac(lob.getLobId()));
}
writeLong(lob.getPrecision());
break;
}
}
}
long length=v.getPrecision();
if (length < 0) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length);
}
writeLong(length);
Reader reader=v.getReader();
Data.copyString(reader,out);
writeInt(LOB_MAGIC);
break;
}
case Value.ARRAY:
{
ValueArray va=(ValueArray)v;
Value[] list=va.getList();
int len=list.length;
Class<?> componentType=va.getComponentType();
if (componentType == Object.class) {
writeInt(len);
}
 else {
writeInt(-(len + 1));
writeString(componentType.getName());
}
for (Value value : list) {
writeValue(value);
}
break;
}
case Value.RESULT_SET:
{
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
writeInt(columnCount);
for (int i=0; i < columnCount; i++) {
writeString(meta.getColumnName(i + 1));
writeInt(meta.getColumnType(i + 1));
writeInt(meta.getPrecision(i + 1));
writeInt(meta.getScale(i + 1));
}
while (rs.next()) {
writeBoolean(true);
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(session,rs,i + 1,t);
writeValue(val);
}
}
writeBoolean(false);
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convertToIOException(e);
}
break;
}
case Value.GEOMETRY:
if (version >= Constants.TCP_PROTOCOL_VERSION_14) {
writeBytes(v.getBytesNoCopy());
}
 else {
writeString(v.getString());
}
break;
default :
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + type);
}
}",0.9978065365211668
15802,"/** 
 * Read a value.
 * @return the value
 */
public Value readValue() throws IOException {
  int type=readInt();
switch (type) {
case Value.NULL:
    return ValueNull.INSTANCE;
case Value.BYTES:
  return ValueBytes.getNoCopy(readBytes());
case Value.UUID:
return ValueUuid.get(readLong(),readLong());
case Value.JAVA_OBJECT:
return ValueJavaObject.getNoCopy(null,readBytes(),session.getDataHandler());
case Value.BOOLEAN:
return ValueBoolean.get(readBoolean());
case Value.BYTE:
return ValueByte.get(readByte());
case Value.DATE:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueDate.fromDateValue(readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueDate.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readLong()));
}
return ValueDate.fromMillis(readLong());
case Value.TIME:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueTime.fromNanos(readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueTime.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readLong()));
}
return ValueTime.fromMillis(readLong());
case Value.TIMESTAMP:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueTimestamp.fromDateValueAndNanos(readLong(),readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueTimestamp.fromMillisNanos(DateTimeUtils.getTimeUTCWithoutDst(readLong()),readInt());
}
return ValueTimestamp.fromMillisNanos(readLong(),readInt());
}
case Value.DECIMAL:
return ValueDecimal.get(new BigDecimal(readString()));
case Value.DOUBLE:
return ValueDouble.get(readDouble());
case Value.FLOAT:
return ValueFloat.get(readFloat());
case Value.INT:
return ValueInt.get(readInt());
case Value.LONG:
return ValueLong.get(readLong());
case Value.SHORT:
return ValueShort.get((short)readInt());
case Value.STRING:
return ValueString.get(readString());
case Value.STRING_IGNORECASE:
return ValueStringIgnoreCase.get(readString());
case Value.STRING_FIXED:
return ValueStringFixed.get(readString());
case Value.BLOB:
{
long length=readLong();
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (length == -1) {
int tableId=readInt();
long id=readLong();
byte[] hmac;
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
hmac=readBytes();
}
 else {
hmac=null;
}
long precision=readLong();
return ValueLobDb.create(Value.BLOB,session.getDataHandler(),tableId,id,hmac,precision);
}
int len=(int)length;
byte[] small=new byte[len];
IOUtils.readFully(in,small,len);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return ValueLobDb.createSmallLob(Value.BLOB,small,length);
}
Value v=session.getDataHandler().getLobStorage().createBlob(in,length);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return v;
}
case Value.CLOB:
{
long length=readLong();
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (length == -1) {
int tableId=readInt();
long id=readLong();
byte[] hmac;
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
hmac=readBytes();
}
 else {
hmac=null;
}
long precision=readLong();
return ValueLobDb.create(Value.CLOB,session.getDataHandler(),tableId,id,hmac,precision);
}
DataReader reader=new DataReader(in);
int len=(int)length;
char[] buff=new char[len];
IOUtils.readFully(reader,buff,len);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
byte[] small=new String(buff).getBytes(Constants.UTF8);
return ValueLobDb.createSmallLob(Value.CLOB,small,length);
}
Value v=session.getDataHandler().getLobStorage().createClob(new DataReader(in),length);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return v;
}
case Value.ARRAY:
{
int len=readInt();
Class<?> componentType=Object.class;
if (len < 0) {
len=-(len + 1);
componentType=Utils.loadUserClass(readString());
}
Value[] list=new Value[len];
for (int i=0; i < len; i++) {
list[i]=readValue();
}
return ValueArray.get(componentType,list);
}
case Value.RESULT_SET:
{
SimpleResultSet rs=new SimpleResultSet();
rs.setAutoClose(false);
int columns=readInt();
for (int i=0; i < columns; i++) {
rs.addColumn(readString(),readInt(),readInt(),readInt());
}
while (true) {
if (!readBoolean()) {
break;
}
Object[] o=new Object[columns];
for (int i=0; i < columns; i++) {
o[i]=readValue().getObject();
}
rs.addRow(o);
}
return ValueResultSet.get(rs);
}
case Value.GEOMETRY:
if (version >= Constants.TCP_PROTOCOL_VERSION_14) {
return ValueGeometry.get(readBytes());
}
return ValueGeometry.get(readString());
default :
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + type);
}
}","/** 
 * Read a value.
 * @return the value
 */
public Value readValue() throws IOException {
  int type=readInt();
switch (type) {
case Value.NULL:
    return ValueNull.INSTANCE;
case Value.BYTES:
  return ValueBytes.getNoCopy(readBytes());
case Value.UUID:
return ValueUuid.get(readLong(),readLong());
case Value.JAVA_OBJECT:
return ValueJavaObject.getNoCopy(null,readBytes(),session.getDataHandler());
case Value.BOOLEAN:
return ValueBoolean.get(readBoolean());
case Value.BYTE:
return ValueByte.get(readByte());
case Value.DATE:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueDate.fromDateValue(readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueDate.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readLong()));
}
return ValueDate.fromMillis(readLong());
case Value.TIME:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueTime.fromNanos(readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueTime.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readLong()));
}
return ValueTime.fromMillis(readLong());
case Value.TIMESTAMP:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueTimestamp.fromDateValueAndNanos(readLong(),readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueTimestamp.fromMillisNanos(DateTimeUtils.getTimeUTCWithoutDst(readLong()),readInt() % 1000000);
}
return ValueTimestamp.fromMillisNanos(readLong(),readInt() % 1000000);
}
case Value.DECIMAL:
return ValueDecimal.get(new BigDecimal(readString()));
case Value.DOUBLE:
return ValueDouble.get(readDouble());
case Value.FLOAT:
return ValueFloat.get(readFloat());
case Value.INT:
return ValueInt.get(readInt());
case Value.LONG:
return ValueLong.get(readLong());
case Value.SHORT:
return ValueShort.get((short)readInt());
case Value.STRING:
return ValueString.get(readString());
case Value.STRING_IGNORECASE:
return ValueStringIgnoreCase.get(readString());
case Value.STRING_FIXED:
return ValueStringFixed.get(readString());
case Value.BLOB:
{
long length=readLong();
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (length == -1) {
int tableId=readInt();
long id=readLong();
byte[] hmac;
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
hmac=readBytes();
}
 else {
hmac=null;
}
long precision=readLong();
return ValueLobDb.create(Value.BLOB,session.getDataHandler(),tableId,id,hmac,precision);
}
int len=(int)length;
byte[] small=new byte[len];
IOUtils.readFully(in,small,len);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return ValueLobDb.createSmallLob(Value.BLOB,small,length);
}
Value v=session.getDataHandler().getLobStorage().createBlob(in,length);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return v;
}
case Value.CLOB:
{
long length=readLong();
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (length == -1) {
int tableId=readInt();
long id=readLong();
byte[] hmac;
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
hmac=readBytes();
}
 else {
hmac=null;
}
long precision=readLong();
return ValueLobDb.create(Value.CLOB,session.getDataHandler(),tableId,id,hmac,precision);
}
DataReader reader=new DataReader(in);
int len=(int)length;
char[] buff=new char[len];
IOUtils.readFully(reader,buff,len);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
byte[] small=new String(buff).getBytes(Constants.UTF8);
return ValueLobDb.createSmallLob(Value.CLOB,small,length);
}
Value v=session.getDataHandler().getLobStorage().createClob(new DataReader(in),length);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return v;
}
case Value.ARRAY:
{
int len=readInt();
Class<?> componentType=Object.class;
if (len < 0) {
len=-(len + 1);
componentType=Utils.loadUserClass(readString());
}
Value[] list=new Value[len];
for (int i=0; i < len; i++) {
list[i]=readValue();
}
return ValueArray.get(componentType,list);
}
case Value.RESULT_SET:
{
SimpleResultSet rs=new SimpleResultSet();
rs.setAutoClose(false);
int columns=readInt();
for (int i=0; i < columns; i++) {
rs.addColumn(readString(),readInt(),readInt(),readInt());
}
while (true) {
if (!readBoolean()) {
break;
}
Object[] o=new Object[columns];
for (int i=0; i < columns; i++) {
o[i]=readValue().getObject();
}
rs.addRow(o);
}
return ValueResultSet.get(rs);
}
case Value.GEOMETRY:
if (version >= Constants.TCP_PROTOCOL_VERSION_14) {
return ValueGeometry.get(readBytes());
}
return ValueGeometry.get(readString());
default :
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + type);
}
}",0.9979131886477464
15803,"/** 
 * Calculate the number of bytes required to encode the given value.
 * @param v the value
 * @param handler the data handler for lobs
 * @return the number of bytes required to store this value
 */
public static int getValueLen(Value v,DataHandler handler){
  if (v == ValueNull.INSTANCE) {
    return 1;
  }
switch (v.getType()) {
case Value.BOOLEAN:
    return 1;
case Value.BYTE:
  return 2;
case Value.SHORT:
return 3;
case Value.INT:
{
int x=v.getInt();
if (x < 0) {
  return 1 + getVarIntLen(-x);
}
 else if (x < 16) {
  return 1;
}
 else {
  return 1 + getVarIntLen(x);
}
}
case Value.LONG:
{
long x=v.getLong();
if (x < 0) {
return 1 + getVarLongLen(-x);
}
 else if (x < 8) {
return 1;
}
 else {
return 1 + getVarLongLen(x);
}
}
case Value.DOUBLE:
{
double x=v.getDouble();
if (x == 1.0d) {
return 1;
}
long d=Double.doubleToLongBits(x);
if (d == ValueDouble.ZERO_BITS) {
return 1;
}
return 1 + getVarLongLen(Long.reverse(d));
}
case Value.FLOAT:
{
float x=v.getFloat();
if (x == 1.0f) {
return 1;
}
int f=Float.floatToIntBits(x);
if (f == ValueFloat.ZERO_BITS) {
return 1;
}
return 1 + getVarIntLen(Integer.reverse(f));
}
case Value.STRING:
{
String s=v.getString();
int len=s.length();
if (len < 32) {
return 1 + getStringWithoutLengthLen(s,len);
}
return 1 + getStringLen(s);
}
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
return 1 + getStringLen(v.getString());
case Value.DECIMAL:
{
BigDecimal x=v.getBigDecimal();
if (BigDecimal.ZERO.equals(x)) {
return 1;
}
 else if (BigDecimal.ONE.equals(x)) {
return 1;
}
int scale=x.scale();
BigInteger b=x.unscaledValue();
int bits=b.bitLength();
if (bits <= 63) {
if (scale == 0) {
return 1 + getVarLongLen(b.longValue());
}
return 1 + getVarIntLen(scale) + getVarLongLen(b.longValue());
}
byte[] bytes=b.toByteArray();
return 1 + getVarIntLen(scale) + getVarIntLen(bytes.length)+ bytes.length;
}
case Value.TIME:
if (SysProperties.STORE_LOCAL_TIME) {
long nanos=((ValueTime)v).getNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
return 1 + getVarLongLen(millis) + getVarLongLen(nanos);
}
return 1 + getVarLongLen(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
case Value.DATE:
{
if (SysProperties.STORE_LOCAL_TIME) {
long dateValue=((ValueDate)v).getDateValue();
return 1 + getVarLongLen(dateValue);
}
long x=DateTimeUtils.getTimeLocalWithoutDst(v.getDate());
return 1 + getVarLongLen(x / MILLIS_PER_MINUTE);
}
case Value.TIMESTAMP:
{
if (SysProperties.STORE_LOCAL_TIME) {
ValueTimestamp ts=(ValueTimestamp)v;
long dateValue=ts.getDateValue();
long nanos=ts.getTimeNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
return 1 + getVarLongLen(dateValue) + getVarLongLen(millis)+ getVarLongLen(nanos);
}
Timestamp ts=v.getTimestamp();
return 1 + getVarLongLen(DateTimeUtils.getTimeLocalWithoutDst(ts)) + getVarIntLen(ts.getNanos());
}
case Value.GEOMETRY:
case Value.JAVA_OBJECT:
{
byte[] b=v.getBytesNoCopy();
return 1 + getVarIntLen(b.length) + b.length;
}
case Value.BYTES:
{
byte[] b=v.getBytesNoCopy();
int len=b.length;
if (len < 32) {
return 1 + b.length;
}
return 1 + getVarIntLen(b.length) + b.length;
}
case Value.UUID:
return 1 + LENGTH_LONG + LENGTH_LONG;
case Value.BLOB:
case Value.CLOB:
{
int len=1;
if (v instanceof ValueLob) {
ValueLob lob=(ValueLob)v;
lob.convertToFileIfRequired(handler);
byte[] small=lob.getSmall();
if (small == null) {
int t=-1;
if (!lob.isLinked()) {
t=-2;
}
len+=getVarIntLen(t);
len+=getVarIntLen(lob.getTableId());
len+=getVarIntLen(lob.getObjectId());
len+=getVarLongLen(lob.getPrecision());
len+=1;
if (t == -2) {
len+=getStringLen(lob.getFileName());
}
}
 else {
len+=getVarIntLen(small.length);
len+=small.length;
}
}
 else {
ValueLobDb lob=(ValueLobDb)v;
byte[] small=lob.getSmall();
if (small == null) {
len+=getVarIntLen(-3);
len+=getVarIntLen(lob.getTableId());
len+=getVarLongLen(lob.getLobId());
len+=getVarLongLen(lob.getPrecision());
}
 else {
len+=getVarIntLen(small.length);
len+=small.length;
}
}
return len;
}
case Value.ARRAY:
{
Value[] list=((ValueArray)v).getList();
int len=1 + getVarIntLen(list.length);
for (Value x : list) {
len+=getValueLen(x,handler);
}
return len;
}
case Value.RESULT_SET:
{
int len=1;
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
len+=getVarIntLen(columnCount);
for (int i=0; i < columnCount; i++) {
len+=getStringLen(meta.getColumnName(i + 1));
len+=getVarIntLen(meta.getColumnType(i + 1));
len+=getVarIntLen(meta.getPrecision(i + 1));
len+=getVarIntLen(meta.getScale(i + 1));
}
while (rs.next()) {
len++;
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(null,rs,i + 1,t);
len+=getValueLen(val,handler);
}
}
len++;
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convert(e);
}
return len;
}
default :
throw DbException.throwInternalError(""String_Node_Str"" + v.getType());
}
}","/** 
 * Calculate the number of bytes required to encode the given value.
 * @param v the value
 * @param handler the data handler for lobs
 * @return the number of bytes required to store this value
 */
public static int getValueLen(Value v,DataHandler handler){
  if (v == ValueNull.INSTANCE) {
    return 1;
  }
switch (v.getType()) {
case Value.BOOLEAN:
    return 1;
case Value.BYTE:
  return 2;
case Value.SHORT:
return 3;
case Value.INT:
{
int x=v.getInt();
if (x < 0) {
  return 1 + getVarIntLen(-x);
}
 else if (x < 16) {
  return 1;
}
 else {
  return 1 + getVarIntLen(x);
}
}
case Value.LONG:
{
long x=v.getLong();
if (x < 0) {
return 1 + getVarLongLen(-x);
}
 else if (x < 8) {
return 1;
}
 else {
return 1 + getVarLongLen(x);
}
}
case Value.DOUBLE:
{
double x=v.getDouble();
if (x == 1.0d) {
return 1;
}
long d=Double.doubleToLongBits(x);
if (d == ValueDouble.ZERO_BITS) {
return 1;
}
return 1 + getVarLongLen(Long.reverse(d));
}
case Value.FLOAT:
{
float x=v.getFloat();
if (x == 1.0f) {
return 1;
}
int f=Float.floatToIntBits(x);
if (f == ValueFloat.ZERO_BITS) {
return 1;
}
return 1 + getVarIntLen(Integer.reverse(f));
}
case Value.STRING:
{
String s=v.getString();
int len=s.length();
if (len < 32) {
return 1 + getStringWithoutLengthLen(s,len);
}
return 1 + getStringLen(s);
}
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
return 1 + getStringLen(v.getString());
case Value.DECIMAL:
{
BigDecimal x=v.getBigDecimal();
if (BigDecimal.ZERO.equals(x)) {
return 1;
}
 else if (BigDecimal.ONE.equals(x)) {
return 1;
}
int scale=x.scale();
BigInteger b=x.unscaledValue();
int bits=b.bitLength();
if (bits <= 63) {
if (scale == 0) {
return 1 + getVarLongLen(b.longValue());
}
return 1 + getVarIntLen(scale) + getVarLongLen(b.longValue());
}
byte[] bytes=b.toByteArray();
return 1 + getVarIntLen(scale) + getVarIntLen(bytes.length)+ bytes.length;
}
case Value.TIME:
if (SysProperties.STORE_LOCAL_TIME) {
long nanos=((ValueTime)v).getNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
return 1 + getVarLongLen(millis) + getVarLongLen(nanos);
}
return 1 + getVarLongLen(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
case Value.DATE:
{
if (SysProperties.STORE_LOCAL_TIME) {
long dateValue=((ValueDate)v).getDateValue();
return 1 + getVarLongLen(dateValue);
}
long x=DateTimeUtils.getTimeLocalWithoutDst(v.getDate());
return 1 + getVarLongLen(x / MILLIS_PER_MINUTE);
}
case Value.TIMESTAMP:
{
if (SysProperties.STORE_LOCAL_TIME) {
ValueTimestamp ts=(ValueTimestamp)v;
long dateValue=ts.getDateValue();
long nanos=ts.getTimeNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
return 1 + getVarLongLen(dateValue) + getVarLongLen(millis)+ getVarLongLen(nanos);
}
Timestamp ts=v.getTimestamp();
return 1 + getVarLongLen(DateTimeUtils.getTimeLocalWithoutDst(ts)) + getVarIntLen(ts.getNanos() % 1000000);
}
case Value.GEOMETRY:
case Value.JAVA_OBJECT:
{
byte[] b=v.getBytesNoCopy();
return 1 + getVarIntLen(b.length) + b.length;
}
case Value.BYTES:
{
byte[] b=v.getBytesNoCopy();
int len=b.length;
if (len < 32) {
return 1 + b.length;
}
return 1 + getVarIntLen(b.length) + b.length;
}
case Value.UUID:
return 1 + LENGTH_LONG + LENGTH_LONG;
case Value.BLOB:
case Value.CLOB:
{
int len=1;
if (v instanceof ValueLob) {
ValueLob lob=(ValueLob)v;
lob.convertToFileIfRequired(handler);
byte[] small=lob.getSmall();
if (small == null) {
int t=-1;
if (!lob.isLinked()) {
t=-2;
}
len+=getVarIntLen(t);
len+=getVarIntLen(lob.getTableId());
len+=getVarIntLen(lob.getObjectId());
len+=getVarLongLen(lob.getPrecision());
len+=1;
if (t == -2) {
len+=getStringLen(lob.getFileName());
}
}
 else {
len+=getVarIntLen(small.length);
len+=small.length;
}
}
 else {
ValueLobDb lob=(ValueLobDb)v;
byte[] small=lob.getSmall();
if (small == null) {
len+=getVarIntLen(-3);
len+=getVarIntLen(lob.getTableId());
len+=getVarLongLen(lob.getLobId());
len+=getVarLongLen(lob.getPrecision());
}
 else {
len+=getVarIntLen(small.length);
len+=small.length;
}
}
return len;
}
case Value.ARRAY:
{
Value[] list=((ValueArray)v).getList();
int len=1 + getVarIntLen(list.length);
for (Value x : list) {
len+=getValueLen(x,handler);
}
return len;
}
case Value.RESULT_SET:
{
int len=1;
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
len+=getVarIntLen(columnCount);
for (int i=0; i < columnCount; i++) {
len+=getStringLen(meta.getColumnName(i + 1));
len+=getVarIntLen(meta.getColumnType(i + 1));
len+=getVarIntLen(meta.getPrecision(i + 1));
len+=getVarIntLen(meta.getScale(i + 1));
}
while (rs.next()) {
len++;
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(null,rs,i + 1,t);
len+=getValueLen(val,handler);
}
}
len++;
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convert(e);
}
return len;
}
default :
throw DbException.throwInternalError(""String_Node_Str"" + v.getType());
}
}",0.998992544831755
15804,"/** 
 * Append a value.
 * @param v the value
 */
public void writeValue(Value v){
  int start=pos;
  if (v == ValueNull.INSTANCE) {
    data[pos++]=0;
    return;
  }
  int type=v.getType();
switch (type) {
case Value.BOOLEAN:
    writeByte((byte)(v.getBoolean().booleanValue() ? BOOLEAN_TRUE : BOOLEAN_FALSE));
  break;
case Value.BYTE:
writeByte((byte)type);
writeByte(v.getByte());
break;
case Value.SHORT:
writeByte((byte)type);
writeShortInt(v.getShort());
break;
case Value.INT:
{
int x=v.getInt();
if (x < 0) {
writeByte((byte)INT_NEG);
writeVarInt(-x);
}
 else if (x < 16) {
writeByte((byte)(INT_0_15 + x));
}
 else {
writeByte((byte)type);
writeVarInt(x);
}
break;
}
case Value.LONG:
{
long x=v.getLong();
if (x < 0) {
writeByte((byte)LONG_NEG);
writeVarLong(-x);
}
 else if (x < 8) {
writeByte((byte)(LONG_0_7 + x));
}
 else {
writeByte((byte)type);
writeVarLong(x);
}
break;
}
case Value.DECIMAL:
{
BigDecimal x=v.getBigDecimal();
if (BigDecimal.ZERO.equals(x)) {
writeByte((byte)DECIMAL_0_1);
}
 else if (BigDecimal.ONE.equals(x)) {
writeByte((byte)(DECIMAL_0_1 + 1));
}
 else {
int scale=x.scale();
BigInteger b=x.unscaledValue();
int bits=b.bitLength();
if (bits <= 63) {
if (scale == 0) {
writeByte((byte)DECIMAL_SMALL_0);
writeVarLong(b.longValue());
}
 else {
writeByte((byte)DECIMAL_SMALL);
writeVarInt(scale);
writeVarLong(b.longValue());
}
}
 else {
writeByte((byte)type);
writeVarInt(scale);
byte[] bytes=b.toByteArray();
writeVarInt(bytes.length);
write(bytes,0,bytes.length);
}
}
break;
}
case Value.TIME:
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_TIME);
ValueTime t=(ValueTime)v;
long nanos=t.getNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
writeVarLong(millis);
writeVarLong(nanos);
}
 else {
writeByte((byte)type);
writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
}
break;
case Value.DATE:
{
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_DATE);
long x=((ValueDate)v).getDateValue();
writeVarLong(x);
}
 else {
writeByte((byte)type);
long x=DateTimeUtils.getTimeLocalWithoutDst(v.getDate());
writeVarLong(x / MILLIS_PER_MINUTE);
}
break;
}
case Value.TIMESTAMP:
{
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_TIMESTAMP);
ValueTimestamp ts=(ValueTimestamp)v;
long dateValue=ts.getDateValue();
writeVarLong(dateValue);
long nanos=ts.getTimeNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
writeVarLong(millis);
writeVarLong(nanos);
}
 else {
Timestamp ts=v.getTimestamp();
writeByte((byte)type);
writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(ts));
writeVarInt(ts.getNanos());
}
break;
}
case Value.GEOMETRY:
case Value.JAVA_OBJECT:
{
writeByte((byte)type);
byte[] b=v.getBytesNoCopy();
int len=b.length;
writeVarInt(len);
write(b,0,len);
break;
}
case Value.BYTES:
{
byte[] b=v.getBytesNoCopy();
int len=b.length;
if (len < 32) {
writeByte((byte)(BYTES_0_31 + len));
write(b,0,len);
}
 else {
writeByte((byte)type);
writeVarInt(len);
write(b,0,len);
}
break;
}
case Value.UUID:
{
writeByte((byte)type);
ValueUuid uuid=(ValueUuid)v;
writeLong(uuid.getHigh());
writeLong(uuid.getLow());
break;
}
case Value.STRING:
{
String s=v.getString();
int len=s.length();
if (len < 32) {
writeByte((byte)(STRING_0_31 + len));
writeStringWithoutLength(s,len);
}
 else {
writeByte((byte)type);
writeString(s);
}
break;
}
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
writeByte((byte)type);
writeString(v.getString());
break;
case Value.DOUBLE:
{
double x=v.getDouble();
if (x == 1.0d) {
writeByte((byte)(DOUBLE_0_1 + 1));
}
 else {
long d=Double.doubleToLongBits(x);
if (d == ValueDouble.ZERO_BITS) {
writeByte((byte)DOUBLE_0_1);
}
 else {
writeByte((byte)type);
writeVarLong(Long.reverse(d));
}
}
break;
}
case Value.FLOAT:
{
float x=v.getFloat();
if (x == 1.0f) {
writeByte((byte)(FLOAT_0_1 + 1));
}
 else {
int f=Float.floatToIntBits(x);
if (f == ValueFloat.ZERO_BITS) {
writeByte((byte)FLOAT_0_1);
}
 else {
writeByte((byte)type);
writeVarInt(Integer.reverse(f));
}
}
break;
}
case Value.BLOB:
case Value.CLOB:
{
writeByte((byte)type);
if (v instanceof ValueLob) {
ValueLob lob=(ValueLob)v;
lob.convertToFileIfRequired(handler);
byte[] small=lob.getSmall();
if (small == null) {
int t=-1;
if (!lob.isLinked()) {
t=-2;
}
writeVarInt(t);
writeVarInt(lob.getTableId());
writeVarInt(lob.getObjectId());
writeVarLong(lob.getPrecision());
writeByte((byte)(lob.isCompressed() ? 1 : 0));
if (t == -2) {
writeString(lob.getFileName());
}
}
 else {
writeVarInt(small.length);
write(small,0,small.length);
}
}
 else {
ValueLobDb lob=(ValueLobDb)v;
byte[] small=lob.getSmall();
if (small == null) {
writeVarInt(-3);
writeVarInt(lob.getTableId());
writeVarLong(lob.getLobId());
writeVarLong(lob.getPrecision());
}
 else {
writeVarInt(small.length);
write(small,0,small.length);
}
}
break;
}
case Value.ARRAY:
{
writeByte((byte)type);
Value[] list=((ValueArray)v).getList();
writeVarInt(list.length);
for (Value x : list) {
writeValue(x);
}
break;
}
case Value.RESULT_SET:
{
writeByte((byte)type);
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
writeVarInt(columnCount);
for (int i=0; i < columnCount; i++) {
writeString(meta.getColumnName(i + 1));
writeVarInt(meta.getColumnType(i + 1));
writeVarInt(meta.getPrecision(i + 1));
writeVarInt(meta.getScale(i + 1));
}
while (rs.next()) {
writeByte((byte)1);
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(null,rs,i + 1,t);
writeValue(val);
}
}
writeByte((byte)0);
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convert(e);
}
break;
}
default :
DbException.throwInternalError(""String_Node_Str"" + v.getType());
}
if (SysProperties.CHECK2) {
if (pos - start != getValueLen(v,handler)) {
throw DbException.throwInternalError(""String_Node_Str"" + (pos - start) + ""String_Node_Str""+ getValueLen(v,handler));
}
}
}","/** 
 * Append a value.
 * @param v the value
 */
public void writeValue(Value v){
  int start=pos;
  if (v == ValueNull.INSTANCE) {
    data[pos++]=0;
    return;
  }
  int type=v.getType();
switch (type) {
case Value.BOOLEAN:
    writeByte((byte)(v.getBoolean().booleanValue() ? BOOLEAN_TRUE : BOOLEAN_FALSE));
  break;
case Value.BYTE:
writeByte((byte)type);
writeByte(v.getByte());
break;
case Value.SHORT:
writeByte((byte)type);
writeShortInt(v.getShort());
break;
case Value.INT:
{
int x=v.getInt();
if (x < 0) {
writeByte((byte)INT_NEG);
writeVarInt(-x);
}
 else if (x < 16) {
writeByte((byte)(INT_0_15 + x));
}
 else {
writeByte((byte)type);
writeVarInt(x);
}
break;
}
case Value.LONG:
{
long x=v.getLong();
if (x < 0) {
writeByte((byte)LONG_NEG);
writeVarLong(-x);
}
 else if (x < 8) {
writeByte((byte)(LONG_0_7 + x));
}
 else {
writeByte((byte)type);
writeVarLong(x);
}
break;
}
case Value.DECIMAL:
{
BigDecimal x=v.getBigDecimal();
if (BigDecimal.ZERO.equals(x)) {
writeByte((byte)DECIMAL_0_1);
}
 else if (BigDecimal.ONE.equals(x)) {
writeByte((byte)(DECIMAL_0_1 + 1));
}
 else {
int scale=x.scale();
BigInteger b=x.unscaledValue();
int bits=b.bitLength();
if (bits <= 63) {
if (scale == 0) {
writeByte((byte)DECIMAL_SMALL_0);
writeVarLong(b.longValue());
}
 else {
writeByte((byte)DECIMAL_SMALL);
writeVarInt(scale);
writeVarLong(b.longValue());
}
}
 else {
writeByte((byte)type);
writeVarInt(scale);
byte[] bytes=b.toByteArray();
writeVarInt(bytes.length);
write(bytes,0,bytes.length);
}
}
break;
}
case Value.TIME:
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_TIME);
ValueTime t=(ValueTime)v;
long nanos=t.getNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
writeVarLong(millis);
writeVarLong(nanos);
}
 else {
writeByte((byte)type);
writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
}
break;
case Value.DATE:
{
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_DATE);
long x=((ValueDate)v).getDateValue();
writeVarLong(x);
}
 else {
writeByte((byte)type);
long x=DateTimeUtils.getTimeLocalWithoutDst(v.getDate());
writeVarLong(x / MILLIS_PER_MINUTE);
}
break;
}
case Value.TIMESTAMP:
{
if (SysProperties.STORE_LOCAL_TIME) {
writeByte((byte)LOCAL_TIMESTAMP);
ValueTimestamp ts=(ValueTimestamp)v;
long dateValue=ts.getDateValue();
writeVarLong(dateValue);
long nanos=ts.getTimeNanos();
long millis=nanos / 1000000;
nanos-=millis * 1000000;
writeVarLong(millis);
writeVarLong(nanos);
}
 else {
Timestamp ts=v.getTimestamp();
writeByte((byte)type);
writeVarLong(DateTimeUtils.getTimeLocalWithoutDst(ts));
writeVarInt(ts.getNanos() % 1000000);
}
break;
}
case Value.GEOMETRY:
case Value.JAVA_OBJECT:
{
writeByte((byte)type);
byte[] b=v.getBytesNoCopy();
int len=b.length;
writeVarInt(len);
write(b,0,len);
break;
}
case Value.BYTES:
{
byte[] b=v.getBytesNoCopy();
int len=b.length;
if (len < 32) {
writeByte((byte)(BYTES_0_31 + len));
write(b,0,len);
}
 else {
writeByte((byte)type);
writeVarInt(len);
write(b,0,len);
}
break;
}
case Value.UUID:
{
writeByte((byte)type);
ValueUuid uuid=(ValueUuid)v;
writeLong(uuid.getHigh());
writeLong(uuid.getLow());
break;
}
case Value.STRING:
{
String s=v.getString();
int len=s.length();
if (len < 32) {
writeByte((byte)(STRING_0_31 + len));
writeStringWithoutLength(s,len);
}
 else {
writeByte((byte)type);
writeString(s);
}
break;
}
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
writeByte((byte)type);
writeString(v.getString());
break;
case Value.DOUBLE:
{
double x=v.getDouble();
if (x == 1.0d) {
writeByte((byte)(DOUBLE_0_1 + 1));
}
 else {
long d=Double.doubleToLongBits(x);
if (d == ValueDouble.ZERO_BITS) {
writeByte((byte)DOUBLE_0_1);
}
 else {
writeByte((byte)type);
writeVarLong(Long.reverse(d));
}
}
break;
}
case Value.FLOAT:
{
float x=v.getFloat();
if (x == 1.0f) {
writeByte((byte)(FLOAT_0_1 + 1));
}
 else {
int f=Float.floatToIntBits(x);
if (f == ValueFloat.ZERO_BITS) {
writeByte((byte)FLOAT_0_1);
}
 else {
writeByte((byte)type);
writeVarInt(Integer.reverse(f));
}
}
break;
}
case Value.BLOB:
case Value.CLOB:
{
writeByte((byte)type);
if (v instanceof ValueLob) {
ValueLob lob=(ValueLob)v;
lob.convertToFileIfRequired(handler);
byte[] small=lob.getSmall();
if (small == null) {
int t=-1;
if (!lob.isLinked()) {
t=-2;
}
writeVarInt(t);
writeVarInt(lob.getTableId());
writeVarInt(lob.getObjectId());
writeVarLong(lob.getPrecision());
writeByte((byte)(lob.isCompressed() ? 1 : 0));
if (t == -2) {
writeString(lob.getFileName());
}
}
 else {
writeVarInt(small.length);
write(small,0,small.length);
}
}
 else {
ValueLobDb lob=(ValueLobDb)v;
byte[] small=lob.getSmall();
if (small == null) {
writeVarInt(-3);
writeVarInt(lob.getTableId());
writeVarLong(lob.getLobId());
writeVarLong(lob.getPrecision());
}
 else {
writeVarInt(small.length);
write(small,0,small.length);
}
}
break;
}
case Value.ARRAY:
{
writeByte((byte)type);
Value[] list=((ValueArray)v).getList();
writeVarInt(list.length);
for (Value x : list) {
writeValue(x);
}
break;
}
case Value.RESULT_SET:
{
writeByte((byte)type);
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
writeVarInt(columnCount);
for (int i=0; i < columnCount; i++) {
writeString(meta.getColumnName(i + 1));
writeVarInt(meta.getColumnType(i + 1));
writeVarInt(meta.getPrecision(i + 1));
writeVarInt(meta.getScale(i + 1));
}
while (rs.next()) {
writeByte((byte)1);
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(null,rs,i + 1,t);
writeValue(val);
}
}
writeByte((byte)0);
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convert(e);
}
break;
}
default :
DbException.throwInternalError(""String_Node_Str"" + v.getType());
}
if (SysProperties.CHECK2) {
if (pos - start != getValueLen(v,handler)) {
throw DbException.throwInternalError(""String_Node_Str"" + (pos - start) + ""String_Node_Str""+ getValueLen(v,handler));
}
}
}",0.999161355249916
15805,"/** 
 * Write a value.
 * @param v the value
 */
public void writeValue(Value v) throws IOException {
  int type=v.getType();
  writeInt(type);
switch (type) {
case Value.NULL:
    break;
case Value.BYTES:
case Value.JAVA_OBJECT:
  writeBytes(v.getBytesNoCopy());
break;
case Value.UUID:
{
ValueUuid uuid=(ValueUuid)v;
writeLong(uuid.getHigh());
writeLong(uuid.getLow());
break;
}
case Value.BOOLEAN:
writeBoolean(v.getBoolean().booleanValue());
break;
case Value.BYTE:
writeByte(v.getByte());
break;
case Value.TIME:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
writeLong(((ValueTime)v).getNanos());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
writeLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
}
 else {
writeLong(v.getTime().getTime());
}
break;
case Value.DATE:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
writeLong(((ValueDate)v).getDateValue());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
writeLong(DateTimeUtils.getTimeLocalWithoutDst(v.getDate()));
}
 else {
writeLong(v.getDate().getTime());
}
break;
case Value.TIMESTAMP:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
ValueTimestamp ts=(ValueTimestamp)v;
writeLong(ts.getDateValue());
writeLong(ts.getTimeNanos());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
Timestamp ts=v.getTimestamp();
writeLong(DateTimeUtils.getTimeLocalWithoutDst(ts));
writeInt(ts.getNanos());
}
 else {
Timestamp ts=v.getTimestamp();
writeLong(ts.getTime());
writeInt(ts.getNanos());
}
break;
}
case Value.DECIMAL:
writeString(v.getString());
break;
case Value.DOUBLE:
writeDouble(v.getDouble());
break;
case Value.FLOAT:
writeFloat(v.getFloat());
break;
case Value.INT:
writeInt(v.getInt());
break;
case Value.LONG:
writeLong(v.getLong());
break;
case Value.SHORT:
writeInt(v.getShort());
break;
case Value.STRING:
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
writeString(v.getString());
break;
case Value.BLOB:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (v instanceof ValueLobDb) {
ValueLobDb lob=(ValueLobDb)v;
if (lob.isStored()) {
writeLong(-1);
writeInt(lob.getTableId());
writeLong(lob.getLobId());
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
writeBytes(calculateLobMac(lob.getLobId()));
}
writeLong(lob.getPrecision());
break;
}
}
}
long length=v.getPrecision();
if (length < 0) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length);
}
writeLong(length);
long written=IOUtils.copyAndCloseInput(v.getInputStream(),out);
if (written != length) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length + ""String_Node_Str""+ written);
}
writeInt(LOB_MAGIC);
break;
}
case Value.CLOB:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (v instanceof ValueLobDb) {
ValueLobDb lob=(ValueLobDb)v;
if (lob.isStored()) {
writeLong(-1);
writeInt(lob.getTableId());
writeLong(lob.getLobId());
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
writeBytes(calculateLobMac(lob.getLobId()));
}
writeLong(lob.getPrecision());
break;
}
}
}
long length=v.getPrecision();
if (length < 0) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length);
}
writeLong(length);
Reader reader=v.getReader();
Data.copyString(reader,out);
writeInt(LOB_MAGIC);
break;
}
case Value.ARRAY:
{
ValueArray va=(ValueArray)v;
Value[] list=va.getList();
int len=list.length;
Class<?> componentType=va.getComponentType();
if (componentType == Object.class) {
writeInt(len);
}
 else {
writeInt(-(len + 1));
writeString(componentType.getName());
}
for (Value value : list) {
writeValue(value);
}
break;
}
case Value.RESULT_SET:
{
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
writeInt(columnCount);
for (int i=0; i < columnCount; i++) {
writeString(meta.getColumnName(i + 1));
writeInt(meta.getColumnType(i + 1));
writeInt(meta.getPrecision(i + 1));
writeInt(meta.getScale(i + 1));
}
while (rs.next()) {
writeBoolean(true);
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(session,rs,i + 1,t);
writeValue(val);
}
}
writeBoolean(false);
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convertToIOException(e);
}
break;
}
case Value.GEOMETRY:
if (version >= Constants.TCP_PROTOCOL_VERSION_14) {
writeBytes(v.getBytesNoCopy());
}
 else {
writeString(v.getString());
}
break;
default :
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + type);
}
}","/** 
 * Write a value.
 * @param v the value
 */
public void writeValue(Value v) throws IOException {
  int type=v.getType();
  writeInt(type);
switch (type) {
case Value.NULL:
    break;
case Value.BYTES:
case Value.JAVA_OBJECT:
  writeBytes(v.getBytesNoCopy());
break;
case Value.UUID:
{
ValueUuid uuid=(ValueUuid)v;
writeLong(uuid.getHigh());
writeLong(uuid.getLow());
break;
}
case Value.BOOLEAN:
writeBoolean(v.getBoolean().booleanValue());
break;
case Value.BYTE:
writeByte(v.getByte());
break;
case Value.TIME:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
writeLong(((ValueTime)v).getNanos());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
writeLong(DateTimeUtils.getTimeLocalWithoutDst(v.getTime()));
}
 else {
writeLong(v.getTime().getTime());
}
break;
case Value.DATE:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
writeLong(((ValueDate)v).getDateValue());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
writeLong(DateTimeUtils.getTimeLocalWithoutDst(v.getDate()));
}
 else {
writeLong(v.getDate().getTime());
}
break;
case Value.TIMESTAMP:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
ValueTimestamp ts=(ValueTimestamp)v;
writeLong(ts.getDateValue());
writeLong(ts.getTimeNanos());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
Timestamp ts=v.getTimestamp();
writeLong(DateTimeUtils.getTimeLocalWithoutDst(ts));
writeInt(ts.getNanos() % 1000000);
}
 else {
Timestamp ts=v.getTimestamp();
writeLong(ts.getTime());
writeInt(ts.getNanos() % 1000000);
}
break;
}
case Value.DECIMAL:
writeString(v.getString());
break;
case Value.DOUBLE:
writeDouble(v.getDouble());
break;
case Value.FLOAT:
writeFloat(v.getFloat());
break;
case Value.INT:
writeInt(v.getInt());
break;
case Value.LONG:
writeLong(v.getLong());
break;
case Value.SHORT:
writeInt(v.getShort());
break;
case Value.STRING:
case Value.STRING_IGNORECASE:
case Value.STRING_FIXED:
writeString(v.getString());
break;
case Value.BLOB:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (v instanceof ValueLobDb) {
ValueLobDb lob=(ValueLobDb)v;
if (lob.isStored()) {
writeLong(-1);
writeInt(lob.getTableId());
writeLong(lob.getLobId());
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
writeBytes(calculateLobMac(lob.getLobId()));
}
writeLong(lob.getPrecision());
break;
}
}
}
long length=v.getPrecision();
if (length < 0) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length);
}
writeLong(length);
long written=IOUtils.copyAndCloseInput(v.getInputStream(),out);
if (written != length) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length + ""String_Node_Str""+ written);
}
writeInt(LOB_MAGIC);
break;
}
case Value.CLOB:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (v instanceof ValueLobDb) {
ValueLobDb lob=(ValueLobDb)v;
if (lob.isStored()) {
writeLong(-1);
writeInt(lob.getTableId());
writeLong(lob.getLobId());
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
writeBytes(calculateLobMac(lob.getLobId()));
}
writeLong(lob.getPrecision());
break;
}
}
}
long length=v.getPrecision();
if (length < 0) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + length);
}
writeLong(length);
Reader reader=v.getReader();
Data.copyString(reader,out);
writeInt(LOB_MAGIC);
break;
}
case Value.ARRAY:
{
ValueArray va=(ValueArray)v;
Value[] list=va.getList();
int len=list.length;
Class<?> componentType=va.getComponentType();
if (componentType == Object.class) {
writeInt(len);
}
 else {
writeInt(-(len + 1));
writeString(componentType.getName());
}
for (Value value : list) {
writeValue(value);
}
break;
}
case Value.RESULT_SET:
{
try {
ResultSet rs=((ValueResultSet)v).getResultSet();
rs.beforeFirst();
ResultSetMetaData meta=rs.getMetaData();
int columnCount=meta.getColumnCount();
writeInt(columnCount);
for (int i=0; i < columnCount; i++) {
writeString(meta.getColumnName(i + 1));
writeInt(meta.getColumnType(i + 1));
writeInt(meta.getPrecision(i + 1));
writeInt(meta.getScale(i + 1));
}
while (rs.next()) {
writeBoolean(true);
for (int i=0; i < columnCount; i++) {
int t=DataType.getValueTypeFromResultSet(meta,i + 1);
Value val=DataType.readValue(session,rs,i + 1,t);
writeValue(val);
}
}
writeBoolean(false);
rs.beforeFirst();
}
 catch (SQLException e) {
throw DbException.convertToIOException(e);
}
break;
}
case Value.GEOMETRY:
if (version >= Constants.TCP_PROTOCOL_VERSION_14) {
writeBytes(v.getBytesNoCopy());
}
 else {
writeString(v.getString());
}
break;
default :
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + type);
}
}",0.9978065365211668
15806,"/** 
 * Read a value.
 * @return the value
 */
public Value readValue() throws IOException {
  int type=readInt();
switch (type) {
case Value.NULL:
    return ValueNull.INSTANCE;
case Value.BYTES:
  return ValueBytes.getNoCopy(readBytes());
case Value.UUID:
return ValueUuid.get(readLong(),readLong());
case Value.JAVA_OBJECT:
return ValueJavaObject.getNoCopy(null,readBytes(),session.getDataHandler());
case Value.BOOLEAN:
return ValueBoolean.get(readBoolean());
case Value.BYTE:
return ValueByte.get(readByte());
case Value.DATE:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueDate.fromDateValue(readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueDate.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readLong()));
}
return ValueDate.fromMillis(readLong());
case Value.TIME:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueTime.fromNanos(readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueTime.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readLong()));
}
return ValueTime.fromMillis(readLong());
case Value.TIMESTAMP:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueTimestamp.fromDateValueAndNanos(readLong(),readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueTimestamp.fromMillisNanos(DateTimeUtils.getTimeUTCWithoutDst(readLong()),readInt());
}
return ValueTimestamp.fromMillisNanos(readLong(),readInt());
}
case Value.DECIMAL:
return ValueDecimal.get(new BigDecimal(readString()));
case Value.DOUBLE:
return ValueDouble.get(readDouble());
case Value.FLOAT:
return ValueFloat.get(readFloat());
case Value.INT:
return ValueInt.get(readInt());
case Value.LONG:
return ValueLong.get(readLong());
case Value.SHORT:
return ValueShort.get((short)readInt());
case Value.STRING:
return ValueString.get(readString());
case Value.STRING_IGNORECASE:
return ValueStringIgnoreCase.get(readString());
case Value.STRING_FIXED:
return ValueStringFixed.get(readString());
case Value.BLOB:
{
long length=readLong();
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (length == -1) {
int tableId=readInt();
long id=readLong();
byte[] hmac;
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
hmac=readBytes();
}
 else {
hmac=null;
}
long precision=readLong();
return ValueLobDb.create(Value.BLOB,session.getDataHandler(),tableId,id,hmac,precision);
}
int len=(int)length;
byte[] small=new byte[len];
IOUtils.readFully(in,small,len);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return ValueLobDb.createSmallLob(Value.BLOB,small,length);
}
Value v=session.getDataHandler().getLobStorage().createBlob(in,length);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return v;
}
case Value.CLOB:
{
long length=readLong();
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (length == -1) {
int tableId=readInt();
long id=readLong();
byte[] hmac;
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
hmac=readBytes();
}
 else {
hmac=null;
}
long precision=readLong();
return ValueLobDb.create(Value.CLOB,session.getDataHandler(),tableId,id,hmac,precision);
}
DataReader reader=new DataReader(in);
int len=(int)length;
char[] buff=new char[len];
IOUtils.readFully(reader,buff,len);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
byte[] small=new String(buff).getBytes(Constants.UTF8);
return ValueLobDb.createSmallLob(Value.CLOB,small,length);
}
Value v=session.getDataHandler().getLobStorage().createClob(new DataReader(in),length);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return v;
}
case Value.ARRAY:
{
int len=readInt();
Class<?> componentType=Object.class;
if (len < 0) {
len=-(len + 1);
componentType=Utils.loadUserClass(readString());
}
Value[] list=new Value[len];
for (int i=0; i < len; i++) {
list[i]=readValue();
}
return ValueArray.get(componentType,list);
}
case Value.RESULT_SET:
{
SimpleResultSet rs=new SimpleResultSet();
rs.setAutoClose(false);
int columns=readInt();
for (int i=0; i < columns; i++) {
rs.addColumn(readString(),readInt(),readInt(),readInt());
}
while (true) {
if (!readBoolean()) {
break;
}
Object[] o=new Object[columns];
for (int i=0; i < columns; i++) {
o[i]=readValue().getObject();
}
rs.addRow(o);
}
return ValueResultSet.get(rs);
}
case Value.GEOMETRY:
if (version >= Constants.TCP_PROTOCOL_VERSION_14) {
return ValueGeometry.get(readBytes());
}
return ValueGeometry.get(readString());
default :
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + type);
}
}","/** 
 * Read a value.
 * @return the value
 */
public Value readValue() throws IOException {
  int type=readInt();
switch (type) {
case Value.NULL:
    return ValueNull.INSTANCE;
case Value.BYTES:
  return ValueBytes.getNoCopy(readBytes());
case Value.UUID:
return ValueUuid.get(readLong(),readLong());
case Value.JAVA_OBJECT:
return ValueJavaObject.getNoCopy(null,readBytes(),session.getDataHandler());
case Value.BOOLEAN:
return ValueBoolean.get(readBoolean());
case Value.BYTE:
return ValueByte.get(readByte());
case Value.DATE:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueDate.fromDateValue(readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueDate.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readLong()));
}
return ValueDate.fromMillis(readLong());
case Value.TIME:
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueTime.fromNanos(readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueTime.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readLong()));
}
return ValueTime.fromMillis(readLong());
case Value.TIMESTAMP:
{
if (version >= Constants.TCP_PROTOCOL_VERSION_9) {
return ValueTimestamp.fromDateValueAndNanos(readLong(),readLong());
}
 else if (version >= Constants.TCP_PROTOCOL_VERSION_7) {
return ValueTimestamp.fromMillisNanos(DateTimeUtils.getTimeUTCWithoutDst(readLong()),readInt() % 1000000);
}
return ValueTimestamp.fromMillisNanos(readLong(),readInt() % 1000000);
}
case Value.DECIMAL:
return ValueDecimal.get(new BigDecimal(readString()));
case Value.DOUBLE:
return ValueDouble.get(readDouble());
case Value.FLOAT:
return ValueFloat.get(readFloat());
case Value.INT:
return ValueInt.get(readInt());
case Value.LONG:
return ValueLong.get(readLong());
case Value.SHORT:
return ValueShort.get((short)readInt());
case Value.STRING:
return ValueString.get(readString());
case Value.STRING_IGNORECASE:
return ValueStringIgnoreCase.get(readString());
case Value.STRING_FIXED:
return ValueStringFixed.get(readString());
case Value.BLOB:
{
long length=readLong();
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (length == -1) {
int tableId=readInt();
long id=readLong();
byte[] hmac;
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
hmac=readBytes();
}
 else {
hmac=null;
}
long precision=readLong();
return ValueLobDb.create(Value.BLOB,session.getDataHandler(),tableId,id,hmac,precision);
}
int len=(int)length;
byte[] small=new byte[len];
IOUtils.readFully(in,small,len);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return ValueLobDb.createSmallLob(Value.BLOB,small,length);
}
Value v=session.getDataHandler().getLobStorage().createBlob(in,length);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return v;
}
case Value.CLOB:
{
long length=readLong();
if (version >= Constants.TCP_PROTOCOL_VERSION_11) {
if (length == -1) {
int tableId=readInt();
long id=readLong();
byte[] hmac;
if (version >= Constants.TCP_PROTOCOL_VERSION_12) {
hmac=readBytes();
}
 else {
hmac=null;
}
long precision=readLong();
return ValueLobDb.create(Value.CLOB,session.getDataHandler(),tableId,id,hmac,precision);
}
DataReader reader=new DataReader(in);
int len=(int)length;
char[] buff=new char[len];
IOUtils.readFully(reader,buff,len);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
byte[] small=new String(buff).getBytes(Constants.UTF8);
return ValueLobDb.createSmallLob(Value.CLOB,small,length);
}
Value v=session.getDataHandler().getLobStorage().createClob(new DataReader(in),length);
int magic=readInt();
if (magic != LOB_MAGIC) {
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + magic);
}
return v;
}
case Value.ARRAY:
{
int len=readInt();
Class<?> componentType=Object.class;
if (len < 0) {
len=-(len + 1);
componentType=Utils.loadUserClass(readString());
}
Value[] list=new Value[len];
for (int i=0; i < len; i++) {
list[i]=readValue();
}
return ValueArray.get(componentType,list);
}
case Value.RESULT_SET:
{
SimpleResultSet rs=new SimpleResultSet();
rs.setAutoClose(false);
int columns=readInt();
for (int i=0; i < columns; i++) {
rs.addColumn(readString(),readInt(),readInt(),readInt());
}
while (true) {
if (!readBoolean()) {
break;
}
Object[] o=new Object[columns];
for (int i=0; i < columns; i++) {
o[i]=readValue().getObject();
}
rs.addRow(o);
}
return ValueResultSet.get(rs);
}
case Value.GEOMETRY:
if (version >= Constants.TCP_PROTOCOL_VERSION_14) {
return ValueGeometry.get(readBytes());
}
return ValueGeometry.get(readString());
default :
throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,""String_Node_Str"" + type);
}
}",0.9979131886477464
15807,"@Override public Value divide(Value v){
  ValueDecimal dec=(ValueDecimal)v;
  if (dec.value.signum() == 0) {
    throw DbException.get(ErrorCode.DIVISION_BY_ZERO_1,getSQL());
  }
  BigDecimal bd=value.divide(dec.value,value.scale() + DIVIDE_SCALE_ADD,BigDecimal.ROUND_HALF_DOWN);
  if (bd.signum() == 0) {
    bd=BigDecimal.ZERO;
  }
 else   if (bd.scale() > 0) {
    if (!bd.unscaledValue().testBit(0)) {
      String s=bd.toString();
      int i=s.length() - 1;
      while (i >= 0 && s.charAt(i) == '0') {
        i--;
      }
      if (i < s.length() - 1) {
        s=s.substring(0,i + 1);
        bd=new BigDecimal(s);
      }
    }
  }
  return ValueDecimal.get(bd);
}","@Override public Value divide(Value v){
  ValueDecimal dec=(ValueDecimal)v;
  if (dec.value.signum() == 0) {
    throw DbException.get(ErrorCode.DIVISION_BY_ZERO_1,getSQL());
  }
  BigDecimal bd=value.divide(dec.value,value.scale() + DIVIDE_SCALE_ADD,BigDecimal.ROUND_HALF_DOWN);
  if (bd.signum() == 0) {
    bd=BigDecimal.ZERO;
  }
 else   if (bd.scale() > 0) {
    if (!bd.unscaledValue().testBit(0)) {
      bd=bd.stripTrailingZeros();
    }
  }
  return ValueDecimal.get(bd);
}",0.7370242214532872
15808,"@Override public Value divide(Value v){
  ValueDecimal dec=(ValueDecimal)v;
  if (dec.value.signum() == 0) {
    throw DbException.get(ErrorCode.DIVISION_BY_ZERO_1,getSQL());
  }
  BigDecimal bd=value.divide(dec.value,value.scale() + DIVIDE_SCALE_ADD,BigDecimal.ROUND_HALF_DOWN);
  if (bd.signum() == 0) {
    bd=BigDecimal.ZERO;
  }
 else   if (bd.scale() > 0) {
    if (!bd.unscaledValue().testBit(0)) {
      String s=bd.toString();
      int i=s.length() - 1;
      while (i >= 0 && s.charAt(i) == '0') {
        i--;
      }
      if (i < s.length() - 1) {
        s=s.substring(0,i + 1);
        bd=new BigDecimal(s);
      }
    }
  }
  return ValueDecimal.get(bd);
}","@Override public Value divide(Value v){
  ValueDecimal dec=(ValueDecimal)v;
  if (dec.value.signum() == 0) {
    throw DbException.get(ErrorCode.DIVISION_BY_ZERO_1,getSQL());
  }
  BigDecimal bd=value.divide(dec.value,value.scale() + DIVIDE_SCALE_ADD,BigDecimal.ROUND_HALF_DOWN);
  if (bd.signum() == 0) {
    bd=BigDecimal.ZERO;
  }
 else   if (bd.scale() > 0) {
    if (!bd.unscaledValue().testBit(0)) {
      bd=bd.stripTrailingZeros();
    }
  }
  return ValueDecimal.get(bd);
}",0.7370242214532872
15809,"private synchronized void open(int traceLevelFile,int traceLevelSystemOut){
  if (persistent) {
    String dataFileName=databaseName + ""String_Node_Str"";
    boolean existsData=FileUtils.exists(dataFileName);
    String pageFileName=databaseName + Constants.SUFFIX_PAGE_FILE;
    String mvFileName=databaseName + Constants.SUFFIX_MV_FILE;
    boolean existsPage=FileUtils.exists(pageFileName);
    boolean existsMv=FileUtils.exists(mvFileName);
    if (existsData && (!existsPage && !existsMv)) {
      throw DbException.get(ErrorCode.FILE_VERSION_ERROR_1,""String_Node_Str"" + dataFileName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (existsPage && !FileUtils.canWrite(pageFileName)) {
      readOnly=true;
    }
    if (existsMv && !FileUtils.canWrite(mvFileName)) {
      readOnly=true;
    }
    if (readOnly) {
      if (traceLevelFile >= TraceSystem.DEBUG) {
        String traceFile=Utils.getProperty(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ System.currentTimeMillis();
        traceSystem=new TraceSystem(traceFile + Constants.SUFFIX_TRACE_FILE);
      }
 else {
        traceSystem=new TraceSystem(null);
      }
    }
 else {
      traceSystem=new TraceSystem(databaseName + Constants.SUFFIX_TRACE_FILE);
    }
    traceSystem.setLevelFile(traceLevelFile);
    traceSystem.setLevelSystemOut(traceLevelSystemOut);
    trace=traceSystem.getTrace(Trace.DATABASE);
    trace.info(""String_Node_Str"",databaseName,Constants.BUILD_ID);
    if (autoServerMode) {
      if (readOnly || fileLockMethod == FileLock.LOCK_NO || fileLockMethod == FileLock.LOCK_SERIALIZED || fileLockMethod == FileLock.LOCK_FS || !persistent) {
        throw DbException.getUnsupportedException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    String lockFileName=databaseName + Constants.SUFFIX_LOCK_FILE;
    if (readOnly) {
      if (FileUtils.exists(lockFileName)) {
        throw DbException.get(ErrorCode.DATABASE_ALREADY_OPEN_1,""String_Node_Str"" + lockFileName);
      }
    }
    if (!readOnly && fileLockMethod != FileLock.LOCK_NO) {
      if (fileLockMethod != FileLock.LOCK_FS) {
        lock=new FileLock(traceSystem,lockFileName,Constants.LOCK_SLEEP);
        lock.lock(fileLockMethod);
        if (autoServerMode) {
          startServer(lock.getUniqueId());
        }
      }
    }
    if (SysProperties.MODIFY_ON_WRITE) {
      while (isReconnectNeeded()) {
      }
    }
 else {
      while (isReconnectNeeded() && !beforeWriting()) {
      }
    }
    deleteOldTempFiles();
    starting=true;
    if (SysProperties.MODIFY_ON_WRITE) {
      try {
        getPageStore();
      }
 catch (      DbException e) {
        if (e.getErrorCode() != ErrorCode.DATABASE_IS_READ_ONLY) {
          throw e;
        }
        pageStore=null;
        while (!beforeWriting()) {
        }
        getPageStore();
      }
    }
 else {
      getPageStore();
    }
    starting=false;
    if (mvStore == null) {
      writer=WriterThread.create(this,writeDelay);
    }
 else {
      setWriteDelay(writeDelay);
    }
  }
 else {
    if (autoServerMode) {
      throw DbException.getUnsupportedException(""String_Node_Str"");
    }
    traceSystem=new TraceSystem(null);
    trace=traceSystem.getTrace(Trace.DATABASE);
    getPageStore();
  }
  systemUser=new User(this,0,SYSTEM_USER_NAME,true);
  mainSchema=new Schema(this,0,Constants.SCHEMA_MAIN,systemUser,true);
  infoSchema=new Schema(this,-1,""String_Node_Str"",systemUser,true);
  schemas.put(mainSchema.getName(),mainSchema);
  schemas.put(infoSchema.getName(),infoSchema);
  publicRole=new Role(this,0,Constants.PUBLIC_ROLE_NAME,true);
  roles.put(Constants.PUBLIC_ROLE_NAME,publicRole);
  systemUser.setAdmin(true);
  systemSession=new Session(this,systemUser,++nextSessionId);
  lobSession=new Session(this,systemUser,++nextSessionId);
  CreateTableData data=new CreateTableData();
  ArrayList<Column> cols=data.columns;
  Column columnId=new Column(""String_Node_Str"",Value.INT);
  columnId.setNullable(false);
  cols.add(columnId);
  cols.add(new Column(""String_Node_Str"",Value.INT));
  cols.add(new Column(""String_Node_Str"",Value.INT));
  cols.add(new Column(""String_Node_Str"",Value.STRING));
  boolean create=true;
  if (pageStore != null) {
    create=pageStore.isNew();
  }
  data.tableName=""String_Node_Str"";
  data.id=0;
  data.temporary=false;
  data.persistData=persistent;
  data.persistIndexes=persistent;
  data.create=create;
  data.isHidden=true;
  data.session=systemSession;
  meta=mainSchema.createTable(data);
  IndexColumn[] pkCols=IndexColumn.wrap(new Column[]{columnId});
  metaIdIndex=meta.addIndex(systemSession,""String_Node_Str"",0,pkCols,IndexType.createPrimaryKey(false,false),true,null);
  objectIds.set(0);
  starting=true;
  Cursor cursor=metaIdIndex.find(systemSession,null,null);
  ArrayList<MetaRecord> records=New.arrayList();
  while (cursor.next()) {
    MetaRecord rec=new MetaRecord(cursor.get());
    objectIds.set(rec.getId());
    records.add(rec);
  }
  Collections.sort(records);
  for (  MetaRecord rec : records) {
    rec.execute(this,systemSession,eventListener);
  }
  if (mvStore != null) {
    mvStore.initTransactions();
    mvStore.removeTemporaryMaps();
  }
  recompileInvalidViews(systemSession);
  starting=false;
  if (!readOnly) {
    String name=SetTypes.getTypeName(SetTypes.CREATE_BUILD);
    if (settings.get(name) == null) {
      Setting setting=new Setting(this,allocateObjectId(),name);
      setting.setIntValue(Constants.BUILD_ID);
      lockMeta(systemSession);
      addDatabaseObject(systemSession,setting);
    }
    if (pageStore != null) {
      BitField f=pageStore.getObjectIds();
      for (int i=0, len=f.length(); i < len; i++) {
        if (f.get(i) && !objectIds.get(i)) {
          trace.info(""String_Node_Str"" + i);
          objectIds.set(i);
        }
      }
    }
  }
  getLobStorage().init();
  systemSession.commit(true);
  trace.info(""String_Node_Str"",databaseName);
  if (checkpointAllowed > 0) {
    afterWriting();
  }
}","private synchronized void open(int traceLevelFile,int traceLevelSystemOut){
  if (persistent) {
    String dataFileName=databaseName + ""String_Node_Str"";
    boolean existsData=FileUtils.exists(dataFileName);
    String pageFileName=databaseName + Constants.SUFFIX_PAGE_FILE;
    String mvFileName=databaseName + Constants.SUFFIX_MV_FILE;
    boolean existsPage=FileUtils.exists(pageFileName);
    boolean existsMv=FileUtils.exists(mvFileName);
    if (existsData && (!existsPage && !existsMv)) {
      throw DbException.get(ErrorCode.FILE_VERSION_ERROR_1,""String_Node_Str"" + dataFileName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (existsPage && !FileUtils.canWrite(pageFileName)) {
      readOnly=true;
    }
    if (existsMv && !FileUtils.canWrite(mvFileName)) {
      readOnly=true;
    }
    if (readOnly) {
      if (traceLevelFile >= TraceSystem.DEBUG) {
        String traceFile=Utils.getProperty(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ System.currentTimeMillis();
        traceSystem=new TraceSystem(traceFile + Constants.SUFFIX_TRACE_FILE);
      }
 else {
        traceSystem=new TraceSystem(null);
      }
    }
 else {
      traceSystem=new TraceSystem(databaseName + Constants.SUFFIX_TRACE_FILE);
    }
    traceSystem.setLevelFile(traceLevelFile);
    traceSystem.setLevelSystemOut(traceLevelSystemOut);
    trace=traceSystem.getTrace(Trace.DATABASE);
    trace.info(""String_Node_Str"",databaseName,Constants.BUILD_ID);
    if (autoServerMode) {
      if (readOnly || fileLockMethod == FileLock.LOCK_NO || fileLockMethod == FileLock.LOCK_SERIALIZED || fileLockMethod == FileLock.LOCK_FS || !persistent) {
        throw DbException.getUnsupportedException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    String lockFileName=databaseName + Constants.SUFFIX_LOCK_FILE;
    if (readOnly) {
      if (FileUtils.exists(lockFileName)) {
        throw DbException.get(ErrorCode.DATABASE_ALREADY_OPEN_1,""String_Node_Str"" + lockFileName);
      }
    }
    if (!readOnly && fileLockMethod != FileLock.LOCK_NO) {
      if (fileLockMethod != FileLock.LOCK_FS) {
        lock=new FileLock(traceSystem,lockFileName,Constants.LOCK_SLEEP);
        lock.lock(fileLockMethod);
        if (autoServerMode) {
          startServer(lock.getUniqueId());
        }
      }
    }
    if (SysProperties.MODIFY_ON_WRITE) {
      while (isReconnectNeeded()) {
      }
    }
 else {
      while (isReconnectNeeded() && !beforeWriting()) {
      }
    }
    deleteOldTempFiles();
    starting=true;
    if (SysProperties.MODIFY_ON_WRITE) {
      try {
        getPageStore();
      }
 catch (      DbException e) {
        if (e.getErrorCode() != ErrorCode.DATABASE_IS_READ_ONLY) {
          throw e;
        }
        pageStore=null;
        while (!beforeWriting()) {
        }
        getPageStore();
      }
    }
 else {
      getPageStore();
    }
    starting=false;
    if (mvStore == null) {
      writer=WriterThread.create(this,writeDelay);
    }
 else {
      setWriteDelay(writeDelay);
    }
  }
 else {
    if (autoServerMode) {
      throw DbException.getUnsupportedException(""String_Node_Str"");
    }
    traceSystem=new TraceSystem(null);
    trace=traceSystem.getTrace(Trace.DATABASE);
    getPageStore();
  }
  systemUser=new User(this,0,SYSTEM_USER_NAME,true);
  mainSchema=new Schema(this,0,Constants.SCHEMA_MAIN,systemUser,true);
  infoSchema=new Schema(this,-1,""String_Node_Str"",systemUser,true);
  schemas.put(mainSchema.getName(),mainSchema);
  schemas.put(infoSchema.getName(),infoSchema);
  publicRole=new Role(this,0,Constants.PUBLIC_ROLE_NAME,true);
  roles.put(Constants.PUBLIC_ROLE_NAME,publicRole);
  systemUser.setAdmin(true);
  systemSession=new Session(this,systemUser,++nextSessionId);
  lobSession=new Session(this,systemUser,++nextSessionId);
  CreateTableData data=new CreateTableData();
  ArrayList<Column> cols=data.columns;
  Column columnId=new Column(""String_Node_Str"",Value.INT);
  columnId.setNullable(false);
  cols.add(columnId);
  cols.add(new Column(""String_Node_Str"",Value.INT));
  cols.add(new Column(""String_Node_Str"",Value.INT));
  cols.add(new Column(""String_Node_Str"",Value.STRING));
  boolean create=true;
  if (pageStore != null) {
    create=pageStore.isNew();
  }
  data.tableName=""String_Node_Str"";
  data.id=0;
  data.temporary=false;
  data.persistData=persistent;
  data.persistIndexes=persistent;
  data.create=create;
  data.isHidden=true;
  data.session=systemSession;
  meta=mainSchema.createTable(data);
  IndexColumn[] pkCols=IndexColumn.wrap(new Column[]{columnId});
  metaIdIndex=meta.addIndex(systemSession,""String_Node_Str"",0,pkCols,IndexType.createPrimaryKey(false,false),true,null);
  objectIds.set(0);
  starting=true;
  Cursor cursor=metaIdIndex.find(systemSession,null,null);
  ArrayList<MetaRecord> records=New.arrayList();
  while (cursor.next()) {
    MetaRecord rec=new MetaRecord(cursor.get());
    objectIds.set(rec.getId());
    records.add(rec);
  }
  Collections.sort(records);
synchronized (systemSession) {
    for (    MetaRecord rec : records) {
      rec.execute(this,systemSession,eventListener);
    }
  }
  if (mvStore != null) {
    mvStore.initTransactions();
    mvStore.removeTemporaryMaps();
  }
  recompileInvalidViews(systemSession);
  starting=false;
  if (!readOnly) {
    String name=SetTypes.getTypeName(SetTypes.CREATE_BUILD);
    if (settings.get(name) == null) {
      Setting setting=new Setting(this,allocateObjectId(),name);
      setting.setIntValue(Constants.BUILD_ID);
      lockMeta(systemSession);
      addDatabaseObject(systemSession,setting);
    }
    if (pageStore != null) {
      BitField f=pageStore.getObjectIds();
      for (int i=0, len=f.length(); i < len; i++) {
        if (f.get(i) && !objectIds.get(i)) {
          trace.info(""String_Node_Str"" + i);
          objectIds.set(i);
        }
      }
    }
  }
  getLobStorage().init();
  systemSession.commit(true);
  trace.info(""String_Node_Str"",databaseName);
  if (checkpointAllowed > 0) {
    afterWriting();
  }
}",0.9964288680342164
15810,"private synchronized void open(int traceLevelFile,int traceLevelSystemOut){
  if (persistent) {
    String dataFileName=databaseName + ""String_Node_Str"";
    boolean existsData=FileUtils.exists(dataFileName);
    String pageFileName=databaseName + Constants.SUFFIX_PAGE_FILE;
    String mvFileName=databaseName + Constants.SUFFIX_MV_FILE;
    boolean existsPage=FileUtils.exists(pageFileName);
    boolean existsMv=FileUtils.exists(mvFileName);
    if (existsData && (!existsPage && !existsMv)) {
      throw DbException.get(ErrorCode.FILE_VERSION_ERROR_1,""String_Node_Str"" + dataFileName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (existsPage && !FileUtils.canWrite(pageFileName)) {
      readOnly=true;
    }
    if (existsMv && !FileUtils.canWrite(mvFileName)) {
      readOnly=true;
    }
    if (readOnly) {
      if (traceLevelFile >= TraceSystem.DEBUG) {
        String traceFile=Utils.getProperty(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ System.currentTimeMillis();
        traceSystem=new TraceSystem(traceFile + Constants.SUFFIX_TRACE_FILE);
      }
 else {
        traceSystem=new TraceSystem(null);
      }
    }
 else {
      traceSystem=new TraceSystem(databaseName + Constants.SUFFIX_TRACE_FILE);
    }
    traceSystem.setLevelFile(traceLevelFile);
    traceSystem.setLevelSystemOut(traceLevelSystemOut);
    trace=traceSystem.getTrace(Trace.DATABASE);
    trace.info(""String_Node_Str"",databaseName,Constants.BUILD_ID);
    if (autoServerMode) {
      if (readOnly || fileLockMethod == FileLock.LOCK_NO || fileLockMethod == FileLock.LOCK_SERIALIZED || fileLockMethod == FileLock.LOCK_FS || !persistent) {
        throw DbException.getUnsupportedException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    String lockFileName=databaseName + Constants.SUFFIX_LOCK_FILE;
    if (readOnly) {
      if (FileUtils.exists(lockFileName)) {
        throw DbException.get(ErrorCode.DATABASE_ALREADY_OPEN_1,""String_Node_Str"" + lockFileName);
      }
    }
    if (!readOnly && fileLockMethod != FileLock.LOCK_NO) {
      if (fileLockMethod != FileLock.LOCK_FS) {
        lock=new FileLock(traceSystem,lockFileName,Constants.LOCK_SLEEP);
        lock.lock(fileLockMethod);
        if (autoServerMode) {
          startServer(lock.getUniqueId());
        }
      }
    }
    if (SysProperties.MODIFY_ON_WRITE) {
      while (isReconnectNeeded()) {
      }
    }
 else {
      while (isReconnectNeeded() && !beforeWriting()) {
      }
    }
    deleteOldTempFiles();
    starting=true;
    if (SysProperties.MODIFY_ON_WRITE) {
      try {
        getPageStore();
      }
 catch (      DbException e) {
        if (e.getErrorCode() != ErrorCode.DATABASE_IS_READ_ONLY) {
          throw e;
        }
        pageStore=null;
        while (!beforeWriting()) {
        }
        getPageStore();
      }
    }
 else {
      getPageStore();
    }
    starting=false;
    if (mvStore == null) {
      writer=WriterThread.create(this,writeDelay);
    }
 else {
      setWriteDelay(writeDelay);
    }
  }
 else {
    if (autoServerMode) {
      throw DbException.getUnsupportedException(""String_Node_Str"");
    }
    traceSystem=new TraceSystem(null);
    trace=traceSystem.getTrace(Trace.DATABASE);
    getPageStore();
  }
  systemUser=new User(this,0,SYSTEM_USER_NAME,true);
  mainSchema=new Schema(this,0,Constants.SCHEMA_MAIN,systemUser,true);
  infoSchema=new Schema(this,-1,""String_Node_Str"",systemUser,true);
  schemas.put(mainSchema.getName(),mainSchema);
  schemas.put(infoSchema.getName(),infoSchema);
  publicRole=new Role(this,0,Constants.PUBLIC_ROLE_NAME,true);
  roles.put(Constants.PUBLIC_ROLE_NAME,publicRole);
  systemUser.setAdmin(true);
  systemSession=new Session(this,systemUser,++nextSessionId);
  lobSession=new Session(this,systemUser,++nextSessionId);
  CreateTableData data=new CreateTableData();
  ArrayList<Column> cols=data.columns;
  Column columnId=new Column(""String_Node_Str"",Value.INT);
  columnId.setNullable(false);
  cols.add(columnId);
  cols.add(new Column(""String_Node_Str"",Value.INT));
  cols.add(new Column(""String_Node_Str"",Value.INT));
  cols.add(new Column(""String_Node_Str"",Value.STRING));
  boolean create=true;
  if (pageStore != null) {
    create=pageStore.isNew();
  }
  data.tableName=""String_Node_Str"";
  data.id=0;
  data.temporary=false;
  data.persistData=persistent;
  data.persistIndexes=persistent;
  data.create=create;
  data.isHidden=true;
  data.session=systemSession;
  meta=mainSchema.createTable(data);
  IndexColumn[] pkCols=IndexColumn.wrap(new Column[]{columnId});
  metaIdIndex=meta.addIndex(systemSession,""String_Node_Str"",0,pkCols,IndexType.createPrimaryKey(false,false),true,null);
  objectIds.set(0);
  starting=true;
  Cursor cursor=metaIdIndex.find(systemSession,null,null);
  ArrayList<MetaRecord> records=New.arrayList();
  while (cursor.next()) {
    MetaRecord rec=new MetaRecord(cursor.get());
    objectIds.set(rec.getId());
    records.add(rec);
  }
  Collections.sort(records);
  for (  MetaRecord rec : records) {
    rec.execute(this,systemSession,eventListener);
  }
  if (mvStore != null) {
    mvStore.initTransactions();
    mvStore.removeTemporaryMaps();
  }
  recompileInvalidViews(systemSession);
  starting=false;
  if (!readOnly) {
    String name=SetTypes.getTypeName(SetTypes.CREATE_BUILD);
    if (settings.get(name) == null) {
      Setting setting=new Setting(this,allocateObjectId(),name);
      setting.setIntValue(Constants.BUILD_ID);
      lockMeta(systemSession);
      addDatabaseObject(systemSession,setting);
    }
    if (pageStore != null) {
      BitField f=pageStore.getObjectIds();
      for (int i=0, len=f.length(); i < len; i++) {
        if (f.get(i) && !objectIds.get(i)) {
          trace.info(""String_Node_Str"" + i);
          objectIds.set(i);
        }
      }
    }
  }
  getLobStorage().init();
  systemSession.commit(true);
  trace.info(""String_Node_Str"",databaseName);
  if (checkpointAllowed > 0) {
    afterWriting();
  }
}","private synchronized void open(int traceLevelFile,int traceLevelSystemOut){
  if (persistent) {
    String dataFileName=databaseName + ""String_Node_Str"";
    boolean existsData=FileUtils.exists(dataFileName);
    String pageFileName=databaseName + Constants.SUFFIX_PAGE_FILE;
    String mvFileName=databaseName + Constants.SUFFIX_MV_FILE;
    boolean existsPage=FileUtils.exists(pageFileName);
    boolean existsMv=FileUtils.exists(mvFileName);
    if (existsData && (!existsPage && !existsMv)) {
      throw DbException.get(ErrorCode.FILE_VERSION_ERROR_1,""String_Node_Str"" + dataFileName + ""String_Node_Str""+ ""String_Node_Str"");
    }
    if (existsPage && !FileUtils.canWrite(pageFileName)) {
      readOnly=true;
    }
    if (existsMv && !FileUtils.canWrite(mvFileName)) {
      readOnly=true;
    }
    if (readOnly) {
      if (traceLevelFile >= TraceSystem.DEBUG) {
        String traceFile=Utils.getProperty(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str""+ System.currentTimeMillis();
        traceSystem=new TraceSystem(traceFile + Constants.SUFFIX_TRACE_FILE);
      }
 else {
        traceSystem=new TraceSystem(null);
      }
    }
 else {
      traceSystem=new TraceSystem(databaseName + Constants.SUFFIX_TRACE_FILE);
    }
    traceSystem.setLevelFile(traceLevelFile);
    traceSystem.setLevelSystemOut(traceLevelSystemOut);
    trace=traceSystem.getTrace(Trace.DATABASE);
    trace.info(""String_Node_Str"",databaseName,Constants.BUILD_ID);
    if (autoServerMode) {
      if (readOnly || fileLockMethod == FileLock.LOCK_NO || fileLockMethod == FileLock.LOCK_SERIALIZED || fileLockMethod == FileLock.LOCK_FS || !persistent) {
        throw DbException.getUnsupportedException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    String lockFileName=databaseName + Constants.SUFFIX_LOCK_FILE;
    if (readOnly) {
      if (FileUtils.exists(lockFileName)) {
        throw DbException.get(ErrorCode.DATABASE_ALREADY_OPEN_1,""String_Node_Str"" + lockFileName);
      }
    }
    if (!readOnly && fileLockMethod != FileLock.LOCK_NO) {
      if (fileLockMethod != FileLock.LOCK_FS) {
        lock=new FileLock(traceSystem,lockFileName,Constants.LOCK_SLEEP);
        lock.lock(fileLockMethod);
        if (autoServerMode) {
          startServer(lock.getUniqueId());
        }
      }
    }
    if (SysProperties.MODIFY_ON_WRITE) {
      while (isReconnectNeeded()) {
      }
    }
 else {
      while (isReconnectNeeded() && !beforeWriting()) {
      }
    }
    deleteOldTempFiles();
    starting=true;
    if (SysProperties.MODIFY_ON_WRITE) {
      try {
        getPageStore();
      }
 catch (      DbException e) {
        if (e.getErrorCode() != ErrorCode.DATABASE_IS_READ_ONLY) {
          throw e;
        }
        pageStore=null;
        while (!beforeWriting()) {
        }
        getPageStore();
      }
    }
 else {
      getPageStore();
    }
    starting=false;
    if (mvStore == null) {
      writer=WriterThread.create(this,writeDelay);
    }
 else {
      setWriteDelay(writeDelay);
    }
  }
 else {
    if (autoServerMode) {
      throw DbException.getUnsupportedException(""String_Node_Str"");
    }
    traceSystem=new TraceSystem(null);
    trace=traceSystem.getTrace(Trace.DATABASE);
    getPageStore();
  }
  systemUser=new User(this,0,SYSTEM_USER_NAME,true);
  mainSchema=new Schema(this,0,Constants.SCHEMA_MAIN,systemUser,true);
  infoSchema=new Schema(this,-1,""String_Node_Str"",systemUser,true);
  schemas.put(mainSchema.getName(),mainSchema);
  schemas.put(infoSchema.getName(),infoSchema);
  publicRole=new Role(this,0,Constants.PUBLIC_ROLE_NAME,true);
  roles.put(Constants.PUBLIC_ROLE_NAME,publicRole);
  systemUser.setAdmin(true);
  systemSession=new Session(this,systemUser,++nextSessionId);
  lobSession=new Session(this,systemUser,++nextSessionId);
  CreateTableData data=new CreateTableData();
  ArrayList<Column> cols=data.columns;
  Column columnId=new Column(""String_Node_Str"",Value.INT);
  columnId.setNullable(false);
  cols.add(columnId);
  cols.add(new Column(""String_Node_Str"",Value.INT));
  cols.add(new Column(""String_Node_Str"",Value.INT));
  cols.add(new Column(""String_Node_Str"",Value.STRING));
  boolean create=true;
  if (pageStore != null) {
    create=pageStore.isNew();
  }
  data.tableName=""String_Node_Str"";
  data.id=0;
  data.temporary=false;
  data.persistData=persistent;
  data.persistIndexes=persistent;
  data.create=create;
  data.isHidden=true;
  data.session=systemSession;
  meta=mainSchema.createTable(data);
  IndexColumn[] pkCols=IndexColumn.wrap(new Column[]{columnId});
  metaIdIndex=meta.addIndex(systemSession,""String_Node_Str"",0,pkCols,IndexType.createPrimaryKey(false,false),true,null);
  objectIds.set(0);
  starting=true;
  Cursor cursor=metaIdIndex.find(systemSession,null,null);
  ArrayList<MetaRecord> records=New.arrayList();
  while (cursor.next()) {
    MetaRecord rec=new MetaRecord(cursor.get());
    objectIds.set(rec.getId());
    records.add(rec);
  }
  Collections.sort(records);
synchronized (systemSession) {
    for (    MetaRecord rec : records) {
      rec.execute(this,systemSession,eventListener);
    }
  }
  if (mvStore != null) {
    mvStore.initTransactions();
    mvStore.removeTemporaryMaps();
  }
  recompileInvalidViews(systemSession);
  starting=false;
  if (!readOnly) {
    String name=SetTypes.getTypeName(SetTypes.CREATE_BUILD);
    if (settings.get(name) == null) {
      Setting setting=new Setting(this,allocateObjectId(),name);
      setting.setIntValue(Constants.BUILD_ID);
      lockMeta(systemSession);
      addDatabaseObject(systemSession,setting);
    }
    if (pageStore != null) {
      BitField f=pageStore.getObjectIds();
      for (int i=0, len=f.length(); i < len; i++) {
        if (f.get(i) && !objectIds.get(i)) {
          trace.info(""String_Node_Str"" + i);
          objectIds.set(i);
        }
      }
    }
  }
  getLobStorage().init();
  systemSession.commit(true);
  trace.info(""String_Node_Str"",databaseName);
  if (checkpointAllowed > 0) {
    afterWriting();
  }
}",0.9964288680342164
15811,"public FunctionTable(Schema schema,Session session,Expression functionExpr,FunctionCall function){
  super(schema,0,function.getName(),false,true);
  this.functionExpr=functionExpr;
  this.function=function;
  if (function instanceof TableFunction) {
    rowCount=((TableFunction)function).getRowCount();
  }
 else {
    rowCount=Long.MAX_VALUE;
  }
  function.optimize(session);
  int type=function.getType();
  if (type != Value.RESULT_SET) {
    throw DbException.get(ErrorCode.FUNCTION_MUST_RETURN_RESULT_SET_1,function.getName());
  }
  int params=function.getParameterCount();
  Expression[] columnListArgs=new Expression[params];
  Expression[] args=function.getArgs();
  for (int i=0; i < params; i++) {
    args[i]=args[i].optimize(session);
    columnListArgs[i]=args[i];
  }
  ValueResultSet template=function.getValueForColumnList(session,columnListArgs);
  if (template == null) {
    throw DbException.get(ErrorCode.FUNCTION_MUST_RETURN_RESULT_SET_1,function.getName());
  }
  ResultSet rs=template.getResultSet();
  try {
    ResultSetMetaData meta=rs.getMetaData();
    int columnCount=meta.getColumnCount();
    Column[] cols=new Column[columnCount];
    for (int i=0; i < columnCount; i++) {
      cols[i]=new Column(meta.getColumnName(i + 1),DataType.getValueTypeFromResultSet(meta,i + 1),meta.getPrecision(i + 1),meta.getScale(i + 1),meta.getColumnDisplaySize(i + 1));
    }
    setColumns(cols);
  }
 catch (  SQLException e) {
    throw DbException.convert(e);
  }
}","public FunctionTable(Schema schema,Session session,Expression functionExpr,FunctionCall function){
  super(schema,0,function.getName(),false,true);
  this.functionExpr=functionExpr;
  this.function=function;
  if (function instanceof TableFunction) {
    rowCount=((TableFunction)function).getRowCount();
  }
 else {
    rowCount=Long.MAX_VALUE;
  }
  function.optimize(session);
  int type=function.getType();
  if (type != Value.RESULT_SET) {
    throw DbException.get(ErrorCode.FUNCTION_MUST_RETURN_RESULT_SET_1,function.getName());
  }
  Expression[] args=function.getArgs();
  int numParams=args.length;
  Expression[] columnListArgs=new Expression[numParams];
  for (int i=0; i < numParams; i++) {
    args[i]=args[i].optimize(session);
    columnListArgs[i]=args[i];
  }
  ValueResultSet template=function.getValueForColumnList(session,columnListArgs);
  if (template == null) {
    throw DbException.get(ErrorCode.FUNCTION_MUST_RETURN_RESULT_SET_1,function.getName());
  }
  ResultSet rs=template.getResultSet();
  try {
    ResultSetMetaData meta=rs.getMetaData();
    int columnCount=meta.getColumnCount();
    Column[] cols=new Column[columnCount];
    for (int i=0; i < columnCount; i++) {
      cols[i]=new Column(meta.getColumnName(i + 1),DataType.getValueTypeFromResultSet(meta,i + 1),meta.getPrecision(i + 1),meta.getScale(i + 1),meta.getColumnDisplaySize(i + 1));
    }
    setColumns(cols);
  }
 catch (  SQLException e) {
    throw DbException.convert(e);
  }
}",0.9393530997304582
15812,"@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  testVersion();
  testFunctionTable();
  testArrayParameters();
  testDefaultConnection();
  testFunctionInSchema();
  testGreatest();
  testSource();
  testDynamicArgumentAndReturn();
  testUUID();
  testWhiteSpacesInParameters();
  testSchemaSearchPath();
  testDeterministic();
  testTransactionId();
  testPrecision();
  testMathFunctions();
  testVarArgs();
  testAggregate();
  testAggregateType();
  testFunctions();
  testFileRead();
  testValue();
  testNvl2();
  testConcatWs();
  testTruncate();
  testToCharFromDateTime();
  testToCharFromNumber();
  testToCharFromText();
  deleteDb(""String_Node_Str"");
  FileUtils.deleteRecursive(TEMP_DIR,true);
}","@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  testVersion();
  testFunctionTable();
  testFunctionTableVarArgs();
  testArrayParameters();
  testDefaultConnection();
  testFunctionInSchema();
  testGreatest();
  testSource();
  testDynamicArgumentAndReturn();
  testUUID();
  testWhiteSpacesInParameters();
  testSchemaSearchPath();
  testDeterministic();
  testTransactionId();
  testPrecision();
  testMathFunctions();
  testVarArgs();
  testAggregate();
  testAggregateType();
  testFunctions();
  testFileRead();
  testValue();
  testNvl2();
  testConcatWs();
  testTruncate();
  testToCharFromDateTime();
  testToCharFromNumber();
  testToCharFromText();
  deleteDb(""String_Node_Str"");
  FileUtils.deleteRecursive(TEMP_DIR,true);
}",0.98015873015873
15813,"public FunctionTable(Schema schema,Session session,Expression functionExpr,FunctionCall function){
  super(schema,0,function.getName(),false,true);
  this.functionExpr=functionExpr;
  this.function=function;
  if (function instanceof TableFunction) {
    rowCount=((TableFunction)function).getRowCount();
  }
 else {
    rowCount=Long.MAX_VALUE;
  }
  function.optimize(session);
  int type=function.getType();
  if (type != Value.RESULT_SET) {
    throw DbException.get(ErrorCode.FUNCTION_MUST_RETURN_RESULT_SET_1,function.getName());
  }
  int params=function.getParameterCount();
  Expression[] columnListArgs=new Expression[params];
  Expression[] args=function.getArgs();
  for (int i=0; i < params; i++) {
    args[i]=args[i].optimize(session);
    columnListArgs[i]=args[i];
  }
  ValueResultSet template=function.getValueForColumnList(session,columnListArgs);
  if (template == null) {
    throw DbException.get(ErrorCode.FUNCTION_MUST_RETURN_RESULT_SET_1,function.getName());
  }
  ResultSet rs=template.getResultSet();
  try {
    ResultSetMetaData meta=rs.getMetaData();
    int columnCount=meta.getColumnCount();
    Column[] cols=new Column[columnCount];
    for (int i=0; i < columnCount; i++) {
      cols[i]=new Column(meta.getColumnName(i + 1),DataType.getValueTypeFromResultSet(meta,i + 1),meta.getPrecision(i + 1),meta.getScale(i + 1),meta.getColumnDisplaySize(i + 1));
    }
    setColumns(cols);
  }
 catch (  SQLException e) {
    throw DbException.convert(e);
  }
}","public FunctionTable(Schema schema,Session session,Expression functionExpr,FunctionCall function){
  super(schema,0,function.getName(),false,true);
  this.functionExpr=functionExpr;
  this.function=function;
  if (function instanceof TableFunction) {
    rowCount=((TableFunction)function).getRowCount();
  }
 else {
    rowCount=Long.MAX_VALUE;
  }
  function.optimize(session);
  int type=function.getType();
  if (type != Value.RESULT_SET) {
    throw DbException.get(ErrorCode.FUNCTION_MUST_RETURN_RESULT_SET_1,function.getName());
  }
  Expression[] args=function.getArgs();
  int numParams=args.length;
  Expression[] columnListArgs=new Expression[numParams];
  for (int i=0; i < numParams; i++) {
    args[i]=args[i].optimize(session);
    columnListArgs[i]=args[i];
  }
  ValueResultSet template=function.getValueForColumnList(session,columnListArgs);
  if (template == null) {
    throw DbException.get(ErrorCode.FUNCTION_MUST_RETURN_RESULT_SET_1,function.getName());
  }
  ResultSet rs=template.getResultSet();
  try {
    ResultSetMetaData meta=rs.getMetaData();
    int columnCount=meta.getColumnCount();
    Column[] cols=new Column[columnCount];
    for (int i=0; i < columnCount; i++) {
      cols[i]=new Column(meta.getColumnName(i + 1),DataType.getValueTypeFromResultSet(meta,i + 1),meta.getPrecision(i + 1),meta.getScale(i + 1),meta.getColumnDisplaySize(i + 1));
    }
    setColumns(cols);
  }
 catch (  SQLException e) {
    throw DbException.convert(e);
  }
}",0.9393530997304582
15814,"@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  testVersion();
  testFunctionTable();
  testArrayParameters();
  testDefaultConnection();
  testFunctionInSchema();
  testGreatest();
  testSource();
  testDynamicArgumentAndReturn();
  testUUID();
  testWhiteSpacesInParameters();
  testSchemaSearchPath();
  testDeterministic();
  testTransactionId();
  testPrecision();
  testMathFunctions();
  testVarArgs();
  testAggregate();
  testAggregateType();
  testFunctions();
  testFileRead();
  testValue();
  testNvl2();
  testConcatWs();
  testTruncate();
  testToCharFromDateTime();
  testToCharFromNumber();
  testToCharFromText();
  deleteDb(""String_Node_Str"");
  FileUtils.deleteRecursive(TEMP_DIR,true);
}","@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  testVersion();
  testFunctionTable();
  testFunctionTableVarArgs();
  testArrayParameters();
  testDefaultConnection();
  testFunctionInSchema();
  testGreatest();
  testSource();
  testDynamicArgumentAndReturn();
  testUUID();
  testWhiteSpacesInParameters();
  testSchemaSearchPath();
  testDeterministic();
  testTransactionId();
  testPrecision();
  testMathFunctions();
  testVarArgs();
  testAggregate();
  testAggregateType();
  testFunctions();
  testFileRead();
  testValue();
  testNvl2();
  testConcatWs();
  testTruncate();
  testToCharFromDateTime();
  testToCharFromNumber();
  testToCharFromText();
  deleteDb(""String_Node_Str"");
  FileUtils.deleteRecursive(TEMP_DIR,true);
}",0.98015873015873
15815,"@Override public void start(){
  try {
    serverSocket=NetUtils.createServerSocket(port,false);
  }
 catch (  DbException e) {
    if (!portIsSet) {
      serverSocket=NetUtils.createServerSocket(0,false);
    }
 else {
      throw e;
    }
  }
  port=serverSocket.getLocalPort();
}","@Override public void start(){
  stop=false;
  try {
    serverSocket=NetUtils.createServerSocket(port,false);
  }
 catch (  DbException e) {
    if (!portIsSet) {
      serverSocket=NetUtils.createServerSocket(0,false);
    }
 else {
      throw e;
    }
  }
  port=serverSocket.getLocalPort();
}",0.9758620689655172
15816,"@Override public void start(){
  try {
    serverSocket=NetUtils.createServerSocket(port,false);
  }
 catch (  DbException e) {
    if (!portIsSet) {
      serverSocket=NetUtils.createServerSocket(0,false);
    }
 else {
      throw e;
    }
  }
  port=serverSocket.getLocalPort();
}","@Override public void start(){
  stop=false;
  try {
    serverSocket=NetUtils.createServerSocket(port,false);
  }
 catch (  DbException e) {
    if (!portIsSet) {
      serverSocket=NetUtils.createServerSocket(0,false);
    }
 else {
      throw e;
    }
  }
  port=serverSocket.getLocalPort();
}",0.9758620689655172
15817,"/** 
 * Compare two values, given the values are not NULL.
 * @param database the database
 * @param l the first value
 * @param r the second value
 * @param compareType the compare type
 * @return the result of the comparison (1 if the first value is bigger, -1if smaller, 0 if both are equal)
 */
static boolean compareNotNull(Database database,Value l,Value r,int compareType){
  boolean result;
switch (compareType) {
case EQUAL:
case EQUAL_NULL_SAFE:
    result=database.areEqual(l,r);
  break;
case NOT_EQUAL:
case NOT_EQUAL_NULL_SAFE:
result=!database.areEqual(l,r);
break;
case BIGGER_EQUAL:
result=database.compare(l,r) >= 0;
break;
case BIGGER:
result=database.compare(l,r) > 0;
break;
case SMALLER_EQUAL:
result=database.compare(l,r) <= 0;
break;
case SMALLER:
result=database.compare(l,r) < 0;
break;
case SPATIAL_INTERSECTS:
{
ValueGeometry lg=(ValueGeometry)l.convertTo(Value.GEOMETRY);
ValueGeometry rg=(ValueGeometry)r.convertTo(Value.GEOMETRY);
result=lg.intersectsBoundingBox(rg);
break;
}
default :
throw DbException.throwInternalError(""String_Node_Str"" + compareType);
}
return result;
}","/** 
 * Compare two values, given the values are not NULL.
 * @param database the database
 * @param l the first value
 * @param r the second value
 * @param compareType the compare type
 * @return true if the comparison indicated by the comparison type evaluates to true
 */
static boolean compareNotNull(Database database,Value l,Value r,int compareType){
  boolean result;
switch (compareType) {
case EQUAL:
case EQUAL_NULL_SAFE:
    result=database.areEqual(l,r);
  break;
case NOT_EQUAL:
case NOT_EQUAL_NULL_SAFE:
result=!database.areEqual(l,r);
break;
case BIGGER_EQUAL:
result=database.compare(l,r) >= 0;
break;
case BIGGER:
result=database.compare(l,r) > 0;
break;
case SMALLER_EQUAL:
result=database.compare(l,r) <= 0;
break;
case SMALLER:
result=database.compare(l,r) < 0;
break;
case SPATIAL_INTERSECTS:
{
ValueGeometry lg=(ValueGeometry)l.convertTo(Value.GEOMETRY);
ValueGeometry rg=(ValueGeometry)r.convertTo(Value.GEOMETRY);
result=lg.intersectsBoundingBox(rg);
break;
}
default :
throw DbException.throwInternalError(""String_Node_Str"" + compareType);
}
return result;
}",0.9447740757644912
15818,"/** 
 * Create a new IN(..) condition.
 * @param session the session
 * @param left the expression before IN
 * @param valueList the value list (at least two elements)
 */
public ConditionInConstantSet(Session session,Expression left,ArrayList<Expression> valueList){
  this.left=left;
  this.valueList=valueList;
  this.valueSet=new HashSet<Value>(valueList.size());
  int type=left.getType();
  for (  Expression expression : valueList) {
    valueSet.add(expression.getValue(session).convertTo(type));
  }
}","/** 
 * Create a new IN(..) condition.
 * @param session the session
 * @param left the expression before IN
 * @param valueList the value list (at least two elements)
 */
public ConditionInConstantSet(final Session session,Expression left,ArrayList<Expression> valueList){
  this.left=left;
  this.valueList=valueList;
  this.valueSet=new TreeSet<Value>(new Comparator<Value>(){
    @Override public int compare(    Value o1,    Value o2){
      return session.getDatabase().compare(o1,o2);
    }
  }
);
  int type=left.getType();
  for (  Expression expression : valueList) {
    valueSet.add(expression.getValue(session).convertTo(type));
  }
}",0.8470181503889369
15819,"@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  testExplainRoundTrip();
  testOrderByExpression();
  testGroupSubquery();
  testAnalyzeLob();
  testLike();
  testExistsSubquery();
  testQueryCacheConcurrentUse();
  testQueryCacheResetParams();
  testRowId();
  testSortIndex();
  testAutoAnalyze();
  testInAndBetween();
  testNestedIn();
  testConstantIn();
  testNestedInSelectAndLike();
  testNestedInSelect();
  testInSelectJoin();
  testMinMaxNullOptimization();
  if (config.networked) {
    return;
  }
  testOptimizeInJoinSelect();
  testOptimizeInJoin();
  testMultiColumnRangeQuery();
  testDistinctOptimization();
  testQueryCacheTimestamp();
  testQueryCacheSpeed();
  testQueryCache(true);
  testQueryCache(false);
  testIn();
  testMinMaxCountOptimization(true);
  testMinMaxCountOptimization(false);
  testOrderedIndexes();
  testConvertOrToIn();
  deleteDb(""String_Node_Str"");
}","@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  testExplainRoundTrip();
  testOrderByExpression();
  testGroupSubquery();
  testAnalyzeLob();
  testLike();
  testExistsSubquery();
  testQueryCacheConcurrentUse();
  testQueryCacheResetParams();
  testRowId();
  testSortIndex();
  testAutoAnalyze();
  testInAndBetween();
  testNestedIn();
  testConstantIn1();
  testConstantIn2();
  testNestedInSelectAndLike();
  testNestedInSelect();
  testInSelectJoin();
  testMinMaxNullOptimization();
  if (config.networked) {
    return;
  }
  testOptimizeInJoinSelect();
  testOptimizeInJoin();
  testMultiColumnRangeQuery();
  testDistinctOptimization();
  testQueryCacheTimestamp();
  testQueryCacheSpeed();
  testQueryCache(true);
  testQueryCache(false);
  testIn();
  testMinMaxCountOptimization(true);
  testMinMaxCountOptimization(false);
  testOrderedIndexes();
  testConvertOrToIn();
  deleteDb(""String_Node_Str"");
}",0.988272921108742
15820,"/** 
 * Compare two values, given the values are not NULL.
 * @param database the database
 * @param l the first value
 * @param r the second value
 * @param compareType the compare type
 * @return the result of the comparison (1 if the first value is bigger, -1if smaller, 0 if both are equal)
 */
static boolean compareNotNull(Database database,Value l,Value r,int compareType){
  boolean result;
switch (compareType) {
case EQUAL:
case EQUAL_NULL_SAFE:
    result=database.areEqual(l,r);
  break;
case NOT_EQUAL:
case NOT_EQUAL_NULL_SAFE:
result=!database.areEqual(l,r);
break;
case BIGGER_EQUAL:
result=database.compare(l,r) >= 0;
break;
case BIGGER:
result=database.compare(l,r) > 0;
break;
case SMALLER_EQUAL:
result=database.compare(l,r) <= 0;
break;
case SMALLER:
result=database.compare(l,r) < 0;
break;
case SPATIAL_INTERSECTS:
{
ValueGeometry lg=(ValueGeometry)l.convertTo(Value.GEOMETRY);
ValueGeometry rg=(ValueGeometry)r.convertTo(Value.GEOMETRY);
result=lg.intersectsBoundingBox(rg);
break;
}
default :
throw DbException.throwInternalError(""String_Node_Str"" + compareType);
}
return result;
}","/** 
 * Compare two values, given the values are not NULL.
 * @param database the database
 * @param l the first value
 * @param r the second value
 * @param compareType the compare type
 * @return true if the comparison indicated by the comparison type evaluates to true
 */
static boolean compareNotNull(Database database,Value l,Value r,int compareType){
  boolean result;
switch (compareType) {
case EQUAL:
case EQUAL_NULL_SAFE:
    result=database.areEqual(l,r);
  break;
case NOT_EQUAL:
case NOT_EQUAL_NULL_SAFE:
result=!database.areEqual(l,r);
break;
case BIGGER_EQUAL:
result=database.compare(l,r) >= 0;
break;
case BIGGER:
result=database.compare(l,r) > 0;
break;
case SMALLER_EQUAL:
result=database.compare(l,r) <= 0;
break;
case SMALLER:
result=database.compare(l,r) < 0;
break;
case SPATIAL_INTERSECTS:
{
ValueGeometry lg=(ValueGeometry)l.convertTo(Value.GEOMETRY);
ValueGeometry rg=(ValueGeometry)r.convertTo(Value.GEOMETRY);
result=lg.intersectsBoundingBox(rg);
break;
}
default :
throw DbException.throwInternalError(""String_Node_Str"" + compareType);
}
return result;
}",0.9447740757644912
15821,"/** 
 * Create a new IN(..) condition.
 * @param session the session
 * @param left the expression before IN
 * @param valueList the value list (at least two elements)
 */
public ConditionInConstantSet(Session session,Expression left,ArrayList<Expression> valueList){
  this.left=left;
  this.valueList=valueList;
  this.valueSet=new HashSet<Value>(valueList.size());
  int type=left.getType();
  for (  Expression expression : valueList) {
    valueSet.add(expression.getValue(session).convertTo(type));
  }
}","/** 
 * Create a new IN(..) condition.
 * @param session the session
 * @param left the expression before IN
 * @param valueList the value list (at least two elements)
 */
public ConditionInConstantSet(final Session session,Expression left,ArrayList<Expression> valueList){
  this.left=left;
  this.valueList=valueList;
  this.valueSet=new TreeSet<Value>(new Comparator<Value>(){
    @Override public int compare(    Value o1,    Value o2){
      return session.getDatabase().compare(o1,o2);
    }
  }
);
  int type=left.getType();
  for (  Expression expression : valueList) {
    valueSet.add(expression.getValue(session).convertTo(type));
  }
}",0.8470181503889369
15822,"@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  testExplainRoundTrip();
  testOrderByExpression();
  testGroupSubquery();
  testAnalyzeLob();
  testLike();
  testExistsSubquery();
  testQueryCacheConcurrentUse();
  testQueryCacheResetParams();
  testRowId();
  testSortIndex();
  testAutoAnalyze();
  testInAndBetween();
  testNestedIn();
  testConstantIn();
  testNestedInSelectAndLike();
  testNestedInSelect();
  testInSelectJoin();
  testMinMaxNullOptimization();
  if (config.networked) {
    return;
  }
  testOptimizeInJoinSelect();
  testOptimizeInJoin();
  testMultiColumnRangeQuery();
  testDistinctOptimization();
  testQueryCacheTimestamp();
  testQueryCacheSpeed();
  testQueryCache(true);
  testQueryCache(false);
  testIn();
  testMinMaxCountOptimization(true);
  testMinMaxCountOptimization(false);
  testOrderedIndexes();
  testConvertOrToIn();
  deleteDb(""String_Node_Str"");
}","@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  testExplainRoundTrip();
  testOrderByExpression();
  testGroupSubquery();
  testAnalyzeLob();
  testLike();
  testExistsSubquery();
  testQueryCacheConcurrentUse();
  testQueryCacheResetParams();
  testRowId();
  testSortIndex();
  testAutoAnalyze();
  testInAndBetween();
  testNestedIn();
  testConstantIn1();
  testConstantIn2();
  testNestedInSelectAndLike();
  testNestedInSelect();
  testInSelectJoin();
  testMinMaxNullOptimization();
  if (config.networked) {
    return;
  }
  testOptimizeInJoinSelect();
  testOptimizeInJoin();
  testMultiColumnRangeQuery();
  testDistinctOptimization();
  testQueryCacheTimestamp();
  testQueryCacheSpeed();
  testQueryCache(true);
  testQueryCache(false);
  testIn();
  testMinMaxCountOptimization(true);
  testMinMaxCountOptimization(false);
  testOrderedIndexes();
  testConvertOrToIn();
  deleteDb(""String_Node_Str"");
}",0.988272921108742
15823,"@Override public void init(){
  if (init) {
    return;
  }
  init=true;
  Store s=database.getMvStore();
  MVStore mvStore;
  if (s == null) {
    mvStore=MVStore.open(null);
  }
 else {
    mvStore=s.getStore();
  }
  lobMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Long,Object[]>());
  refMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Object[],Boolean>());
  dataMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Long,byte[]>());
  streamStore=new StreamStore(dataMap);
}","@Override public void init(){
  if (init) {
    return;
  }
  init=true;
  Store s=database.getMvStore();
  MVStore mvStore;
  if (s == null) {
    mvStore=MVStore.open(null);
  }
 else {
    mvStore=s.getStore();
  }
  lobMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Long,Object[]>());
  refMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Object[],Boolean>());
  dataMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Long,byte[]>());
  streamStore=new StreamStore(dataMap);
  streamStore.setMaxBlockSize(32 * 1024);
}",0.9619565217391304
15824,"private void removeLob(int tableId,long lobId){
  Object[] value=lobMap.remove(lobId);
  byte[] streamStoreId=(byte[])value[0];
  Object[] key=new Object[]{streamStoreId,0};
  value=refMap.ceilingKey(key);
  boolean hasMoreEntries=false;
  if (value != null) {
    byte[] s2=(byte[])value[0];
    if (Arrays.equals(streamStoreId,s2)) {
      hasMoreEntries=true;
    }
  }
  if (!hasMoreEntries) {
    streamStore.remove(streamStoreId);
  }
}","private void removeLob(int tableId,long lobId){
  if (TRACE) {
    trace(""String_Node_Str"" + tableId + ""String_Node_Str""+ lobId);
  }
  Object[] value=lobMap.remove(lobId);
  byte[] streamStoreId=(byte[])value[0];
  Object[] key=new Object[]{streamStoreId,lobId};
  refMap.remove(key);
  key=new Object[]{streamStoreId,0};
  value=refMap.ceilingKey(key);
  boolean hasMoreEntries=false;
  if (value != null) {
    byte[] s2=(byte[])value[0];
    if (Arrays.equals(streamStoreId,s2)) {
      hasMoreEntries=true;
    }
  }
  if (!hasMoreEntries) {
    streamStore.remove(streamStoreId);
  }
}",0.8557599225556631
15825,"@Override public void setTable(ValueLobDb lob,int tableId){
  init();
  long lobId=lob.getLobId();
  Object[] value=lobMap.remove(lobId);
  value[1]=tableId;
  lobMap.put(lobId,value);
}","@Override public void setTable(ValueLobDb lob,int tableId){
  init();
  long lobId=lob.getLobId();
  Object[] value=lobMap.remove(lobId);
  if (TRACE) {
    trace(""String_Node_Str"" + lob.getTableId() + ""String_Node_Str""+ lob.getLobId()+ ""String_Node_Str""+ tableId+ ""String_Node_Str""+ lobId);
  }
  value[1]=tableId;
  lobMap.put(lobId,value);
}",0.7018867924528301
15826,"private ValueLobDb createLob(InputStream in,int type) throws IOException {
  byte[] streamStoreId;
  try {
    streamStoreId=streamStore.put(in);
  }
 catch (  Exception e) {
    throw DbException.convertToIOException(e);
  }
  long lobId=streamStore.getAndIncrementNextKey();
  long length=streamStore.length(streamStoreId);
  int tableId=LobStorageFrontend.TABLE_TEMP;
  Object[] value=new Object[]{streamStoreId,tableId,length,0};
  lobMap.put(lobId,value);
  Object[] key=new Object[]{streamStoreId,lobId};
  refMap.put(key,Boolean.TRUE);
  ValueLobDb lob=ValueLobDb.create(type,database,tableId,lobId,null,length);
  return lob;
}","private ValueLobDb createLob(InputStream in,int type) throws IOException {
  byte[] streamStoreId;
  try {
    streamStoreId=streamStore.put(in);
  }
 catch (  Exception e) {
    throw DbException.convertToIOException(e);
  }
  long lobId=generateLobId();
  long length=streamStore.length(streamStoreId);
  int tableId=LobStorageFrontend.TABLE_TEMP;
  Object[] value=new Object[]{streamStoreId,tableId,length,0};
  lobMap.put(lobId,value);
  Object[] key=new Object[]{streamStoreId,lobId};
  refMap.put(key,Boolean.TRUE);
  ValueLobDb lob=ValueLobDb.create(type,database,tableId,lobId,null,length);
  if (TRACE) {
    trace(""String_Node_Str"" + tableId + ""String_Node_Str""+ lobId);
  }
  return lob;
}",0.8823970037453184
15827,"@Override public Value createClob(Reader reader,long maxLength){
  init();
  int type=Value.CLOB;
  if (maxLength < 0) {
    maxLength=Long.MAX_VALUE;
  }
  int max=(int)Math.min(maxLength,database.getMaxLengthInplaceLob());
  try {
    if (max != 0 && max < Integer.MAX_VALUE) {
      BufferedReader b=new BufferedReader(reader,max);
      b.mark(max);
      char[] small=new char[max];
      int len=IOUtils.readFully(b,small,max);
      if (len < max) {
        if (len < small.length) {
          small=Arrays.copyOf(small,len);
        }
        byte[] utf8=new String(small,0,len).getBytes(Constants.UTF8);
        return ValueLobDb.createSmallLob(type,utf8);
      }
      b.reset();
      reader=b;
    }
    CountingReaderInputStream in=new CountingReaderInputStream(reader,maxLength);
    ValueLobDb lob=createLob(in,type);
    lob=ValueLobDb.create(type,database,lob.getTableId(),lob.getLobId(),null,in.getLength());
    return lob;
  }
 catch (  IOException e) {
    throw DbException.convertIOException(e,null);
  }
}","@Override public Value createClob(Reader reader,long maxLength){
  init();
  int type=Value.CLOB;
  if (maxLength < 0) {
    maxLength=Long.MAX_VALUE;
  }
  int max=(int)Math.min(maxLength,database.getMaxLengthInplaceLob());
  try {
    if (max != 0 && max < Integer.MAX_VALUE) {
      BufferedReader b=new BufferedReader(reader,max);
      b.mark(max);
      char[] small=new char[max];
      int len=IOUtils.readFully(b,small,max);
      if (len < max) {
        if (len < small.length) {
          small=Arrays.copyOf(small,len);
        }
        byte[] utf8=new String(small,0,len).getBytes(Constants.UTF8);
        return ValueLobDb.createSmallLob(type,utf8);
      }
      b.reset();
      reader=b;
    }
    CountingReaderInputStream in=new CountingReaderInputStream(reader,maxLength);
    ValueLobDb lob=createLob(in,type);
    lob=ValueLobDb.create(type,database,lob.getTableId(),lob.getLobId(),null,in.getLength());
    return lob;
  }
 catch (  IllegalStateException e) {
    throw DbException.get(ErrorCode.OBJECT_CLOSED);
  }
catch (  IOException e) {
    throw DbException.convertIOException(e,null);
  }
}",0.9182156133828996
15828,"@Override public Value createBlob(InputStream in,long maxLength){
  init();
  int type=Value.BLOB;
  if (maxLength < 0) {
    maxLength=Long.MAX_VALUE;
  }
  int max=(int)Math.min(maxLength,database.getMaxLengthInplaceLob());
  try {
    if (max != 0 && max < Integer.MAX_VALUE) {
      BufferedInputStream b=new BufferedInputStream(in,max);
      b.mark(max);
      byte[] small=new byte[max];
      int len=IOUtils.readFully(b,small,max);
      if (len < max) {
        if (len < small.length) {
          small=Arrays.copyOf(small,len);
        }
        return ValueLobDb.createSmallLob(type,small);
      }
      b.reset();
      in=b;
    }
    return createLob(in,type);
  }
 catch (  IOException e) {
    throw DbException.convertIOException(e,null);
  }
}","@Override public Value createBlob(InputStream in,long maxLength){
  init();
  int type=Value.BLOB;
  if (maxLength < 0) {
    maxLength=Long.MAX_VALUE;
  }
  int max=(int)Math.min(maxLength,database.getMaxLengthInplaceLob());
  try {
    if (max != 0 && max < Integer.MAX_VALUE) {
      BufferedInputStream b=new BufferedInputStream(in,max);
      b.mark(max);
      byte[] small=new byte[max];
      int len=IOUtils.readFully(b,small,max);
      if (len < max) {
        if (len < small.length) {
          small=Arrays.copyOf(small,len);
        }
        return ValueLobDb.createSmallLob(type,small);
      }
      b.reset();
      in=b;
    }
    return createLob(in,type);
  }
 catch (  IllegalStateException e) {
    throw DbException.get(ErrorCode.OBJECT_CLOSED);
  }
catch (  IOException e) {
    throw DbException.convertIOException(e,null);
  }
}",0.8901234567901235
15829,"@Override public ValueLobDb copyLob(ValueLobDb old,int tableId,long length){
  init();
  int type=old.getType();
  long oldLobId=old.getLobId();
  long oldLength=old.getPrecision();
  if (oldLength != length) {
    throw DbException.throwInternalError(""String_Node_Str"");
  }
  Object[] value=lobMap.get(oldLobId);
  byte[] streamStoreId=(byte[])value[0];
  long lobId=streamStore.getAndIncrementNextKey();
  value[1]=tableId;
  lobMap.put(lobId,value);
  Object[] key=new Object[]{streamStoreId,lobId};
  refMap.put(key,Boolean.TRUE);
  ValueLobDb lob=ValueLobDb.create(type,database,tableId,lobId,null,length);
  return lob;
}","@Override public ValueLobDb copyLob(ValueLobDb old,int tableId,long length){
  init();
  int type=old.getType();
  long oldLobId=old.getLobId();
  long oldLength=old.getPrecision();
  if (oldLength != length) {
    throw DbException.throwInternalError(""String_Node_Str"");
  }
  Object[] value=lobMap.get(oldLobId);
  value=Arrays.copyOf(value,value.length);
  byte[] streamStoreId=(byte[])value[0];
  long lobId=generateLobId();
  value[1]=tableId;
  lobMap.put(lobId,value);
  Object[] key=new Object[]{streamStoreId,lobId};
  refMap.put(key,Boolean.TRUE);
  ValueLobDb lob=ValueLobDb.create(type,database,tableId,lobId,null,length);
  if (TRACE) {
    trace(""String_Node_Str"" + old.getTableId() + ""String_Node_Str""+ old.getLobId()+ ""String_Node_Str""+ tableId+ ""String_Node_Str""+ lobId);
  }
  return lob;
}",0.8105849582172702
15830,"@Override public int read(byte[] b,int off,int len){
  while (true) {
    if (buffer == null) {
      buffer=nextBuffer();
      if (buffer == null) {
        return -1;
      }
    }
    int result=buffer.read(b,off,len);
    if (result > 0) {
      pos+=result;
      return result;
    }
    buffer=null;
  }
}","@Override public int read(byte[] b,int off,int len){
  if (len <= 0) {
    return 0;
  }
  while (true) {
    if (buffer == null) {
      buffer=nextBuffer();
      if (buffer == null) {
        return -1;
      }
    }
    int result=buffer.read(b,off,len);
    if (result > 0) {
      pos+=result;
      return result;
    }
    buffer=null;
  }
}",0.945619335347432
15831,"/** 
 * Generate a new key.
 * @return the new key
 */
public long getAndIncrementNextKey(){
  long key=nextKey.getAndIncrement();
  if (!map.containsKey(key)) {
    return key;
  }
synchronized (this) {
    long low=key, high=Long.MAX_VALUE;
    while (low < high) {
      long x=(low + high) >>> 1;
      if (map.containsKey(x)) {
        low=x + 1;
      }
 else {
        high=x;
      }
    }
    key=low;
    nextKey.set(key + 1);
    return key;
  }
}","/** 
 * Generate a new key.
 * @return the new key
 */
private long getAndIncrementNextKey(){
  long key=nextKey.getAndIncrement();
  if (!map.containsKey(key)) {
    return key;
  }
synchronized (this) {
    long low=key, high=Long.MAX_VALUE;
    while (low < high) {
      long x=(low + high) >>> 1;
      if (map.containsKey(x)) {
        low=x + 1;
      }
 else {
        high=x;
      }
    }
    key=low;
    nextKey.set(key + 1);
    return key;
  }
}",0.9880043620501636
15832,"private ByteArrayInputStream nextBuffer(){
  while (idBuffer.hasRemaining()) {
switch (idBuffer.get()) {
case 0:
{
        int len=DataUtils.readVarInt(idBuffer);
        if (skip >= len) {
          skip-=len;
          idBuffer.position(idBuffer.position() + len);
          continue;
        }
        int p=(int)(idBuffer.position() + skip);
        int l=(int)(len - skip);
        idBuffer.position(p + l);
        return new ByteArrayInputStream(idBuffer.array(),p,l);
      }
case 1:
{
      int len=DataUtils.readVarInt(idBuffer);
      long key=DataUtils.readVarLong(idBuffer);
      if (skip >= len) {
        skip-=len;
        continue;
      }
      byte[] data=store.getBlock(key);
      int s=(int)skip;
      skip=0;
      return new ByteArrayInputStream(data,s,data.length - s);
    }
case 2:
{
    long len=DataUtils.readVarInt(idBuffer);
    long key=DataUtils.readVarLong(idBuffer);
    if (skip >= len) {
      skip-=len;
      continue;
    }
    byte[] k=store.getBlock(key);
    ByteBuffer newBuffer=ByteBuffer.allocate(k.length + idBuffer.limit() - idBuffer.position());
    newBuffer.put(k);
    newBuffer.put(idBuffer);
    newBuffer.flip();
    idBuffer=newBuffer;
    return nextBuffer();
  }
default :
throw DataUtils.newIllegalArgumentException(""String_Node_Str"",Arrays.toString(idBuffer.array()));
}
}
return null;
}","private ByteArrayInputStream nextBuffer(){
  while (idBuffer.hasRemaining()) {
switch (idBuffer.get()) {
case 0:
{
        int len=DataUtils.readVarInt(idBuffer);
        if (skip >= len) {
          skip-=len;
          idBuffer.position(idBuffer.position() + len);
          continue;
        }
        int p=(int)(idBuffer.position() + skip);
        int l=(int)(len - skip);
        idBuffer.position(p + l);
        return new ByteArrayInputStream(idBuffer.array(),p,l);
      }
case 1:
{
      int len=DataUtils.readVarInt(idBuffer);
      long key=DataUtils.readVarLong(idBuffer);
      if (skip >= len) {
        skip-=len;
        continue;
      }
      byte[] data=store.getBlock(key);
      int s=(int)skip;
      skip=0;
      return new ByteArrayInputStream(data,s,data.length - s);
    }
case 2:
{
    long len=DataUtils.readVarLong(idBuffer);
    long key=DataUtils.readVarLong(idBuffer);
    if (skip >= len) {
      skip-=len;
      continue;
    }
    byte[] k=store.getBlock(key);
    ByteBuffer newBuffer=ByteBuffer.allocate(k.length + idBuffer.limit() - idBuffer.position());
    newBuffer.put(k);
    newBuffer.put(idBuffer);
    newBuffer.flip();
    idBuffer=newBuffer;
    return nextBuffer();
  }
default :
throw DataUtils.newIllegalArgumentException(""String_Node_Str"",Arrays.toString(idBuffer.array()));
}
}
return null;
}",0.99740644683216
15833,"@Override public int read(byte[] b,int off,int len){
  while (true) {
    if (buffer == null) {
      buffer=nextBuffer();
      if (buffer == null) {
        return -1;
      }
    }
    int result=buffer.read(b,off,len);
    if (result > 0) {
      pos+=result;
      return result;
    }
    buffer=null;
  }
}","@Override public int read(byte[] b,int off,int len){
  if (len <= 0) {
    return 0;
  }
  while (true) {
    if (buffer == null) {
      buffer=nextBuffer();
      if (buffer == null) {
        return -1;
      }
    }
    int result=buffer.read(b,off,len);
    if (result > 0) {
      pos+=result;
      return result;
    }
    buffer=null;
  }
}",0.945619335347432
15834,"/** 
 * Generate a new key.
 * @return the new key
 */
public long getAndIncrementNextKey(){
  long key=nextKey.getAndIncrement();
  if (!map.containsKey(key)) {
    return key;
  }
synchronized (this) {
    long low=key, high=Long.MAX_VALUE;
    while (low < high) {
      long x=(low + high) >>> 1;
      if (map.containsKey(x)) {
        low=x + 1;
      }
 else {
        high=x;
      }
    }
    key=low;
    nextKey.set(key + 1);
    return key;
  }
}","/** 
 * Generate a new key.
 * @return the new key
 */
private long getAndIncrementNextKey(){
  long key=nextKey.getAndIncrement();
  if (!map.containsKey(key)) {
    return key;
  }
synchronized (this) {
    long low=key, high=Long.MAX_VALUE;
    while (low < high) {
      long x=(low + high) >>> 1;
      if (map.containsKey(x)) {
        low=x + 1;
      }
 else {
        high=x;
      }
    }
    key=low;
    nextKey.set(key + 1);
    return key;
  }
}",0.9880043620501636
15835,"private ByteArrayInputStream nextBuffer(){
  while (idBuffer.hasRemaining()) {
switch (idBuffer.get()) {
case 0:
{
        int len=DataUtils.readVarInt(idBuffer);
        if (skip >= len) {
          skip-=len;
          idBuffer.position(idBuffer.position() + len);
          continue;
        }
        int p=(int)(idBuffer.position() + skip);
        int l=(int)(len - skip);
        idBuffer.position(p + l);
        return new ByteArrayInputStream(idBuffer.array(),p,l);
      }
case 1:
{
      int len=DataUtils.readVarInt(idBuffer);
      long key=DataUtils.readVarLong(idBuffer);
      if (skip >= len) {
        skip-=len;
        continue;
      }
      byte[] data=store.getBlock(key);
      int s=(int)skip;
      skip=0;
      return new ByteArrayInputStream(data,s,data.length - s);
    }
case 2:
{
    long len=DataUtils.readVarInt(idBuffer);
    long key=DataUtils.readVarLong(idBuffer);
    if (skip >= len) {
      skip-=len;
      continue;
    }
    byte[] k=store.getBlock(key);
    ByteBuffer newBuffer=ByteBuffer.allocate(k.length + idBuffer.limit() - idBuffer.position());
    newBuffer.put(k);
    newBuffer.put(idBuffer);
    newBuffer.flip();
    idBuffer=newBuffer;
    return nextBuffer();
  }
default :
throw DataUtils.newIllegalArgumentException(""String_Node_Str"",Arrays.toString(idBuffer.array()));
}
}
return null;
}","private ByteArrayInputStream nextBuffer(){
  while (idBuffer.hasRemaining()) {
switch (idBuffer.get()) {
case 0:
{
        int len=DataUtils.readVarInt(idBuffer);
        if (skip >= len) {
          skip-=len;
          idBuffer.position(idBuffer.position() + len);
          continue;
        }
        int p=(int)(idBuffer.position() + skip);
        int l=(int)(len - skip);
        idBuffer.position(p + l);
        return new ByteArrayInputStream(idBuffer.array(),p,l);
      }
case 1:
{
      int len=DataUtils.readVarInt(idBuffer);
      long key=DataUtils.readVarLong(idBuffer);
      if (skip >= len) {
        skip-=len;
        continue;
      }
      byte[] data=store.getBlock(key);
      int s=(int)skip;
      skip=0;
      return new ByteArrayInputStream(data,s,data.length - s);
    }
case 2:
{
    long len=DataUtils.readVarLong(idBuffer);
    long key=DataUtils.readVarLong(idBuffer);
    if (skip >= len) {
      skip-=len;
      continue;
    }
    byte[] k=store.getBlock(key);
    ByteBuffer newBuffer=ByteBuffer.allocate(k.length + idBuffer.limit() - idBuffer.position());
    newBuffer.put(k);
    newBuffer.put(idBuffer);
    newBuffer.flip();
    idBuffer=newBuffer;
    return nextBuffer();
  }
default :
throw DataUtils.newIllegalArgumentException(""String_Node_Str"",Arrays.toString(idBuffer.array()));
}
}
return null;
}",0.99740644683216
15836,"@Override public void init(){
  if (init) {
    return;
  }
  init=true;
  Store s=database.getMvStore();
  MVStore mvStore;
  if (s == null) {
    mvStore=MVStore.open(null);
  }
 else {
    mvStore=s.getStore();
  }
  lobMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Long,Object[]>());
  refMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Object[],Boolean>());
  dataMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Long,byte[]>());
  streamStore=new StreamStore(dataMap);
}","@Override public void init(){
  if (init) {
    return;
  }
  init=true;
  Store s=database.getMvStore();
  MVStore mvStore;
  if (s == null) {
    mvStore=MVStore.open(null);
  }
 else {
    mvStore=s.getStore();
  }
  lobMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Long,Object[]>());
  refMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Object[],Boolean>());
  dataMap=mvStore.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Long,byte[]>());
  streamStore=new StreamStore(dataMap);
  streamStore.setMaxBlockSize(32 * 1024);
}",0.9619565217391304
15837,"private void removeLob(int tableId,long lobId){
  Object[] value=lobMap.remove(lobId);
  byte[] streamStoreId=(byte[])value[0];
  Object[] key=new Object[]{streamStoreId,0};
  value=refMap.ceilingKey(key);
  boolean hasMoreEntries=false;
  if (value != null) {
    byte[] s2=(byte[])value[0];
    if (Arrays.equals(streamStoreId,s2)) {
      hasMoreEntries=true;
    }
  }
  if (!hasMoreEntries) {
    streamStore.remove(streamStoreId);
  }
}","private void removeLob(int tableId,long lobId){
  if (TRACE) {
    trace(""String_Node_Str"" + tableId + ""String_Node_Str""+ lobId);
  }
  Object[] value=lobMap.remove(lobId);
  byte[] streamStoreId=(byte[])value[0];
  Object[] key=new Object[]{streamStoreId,lobId};
  refMap.remove(key);
  key=new Object[]{streamStoreId,0};
  value=refMap.ceilingKey(key);
  boolean hasMoreEntries=false;
  if (value != null) {
    byte[] s2=(byte[])value[0];
    if (Arrays.equals(streamStoreId,s2)) {
      hasMoreEntries=true;
    }
  }
  if (!hasMoreEntries) {
    streamStore.remove(streamStoreId);
  }
}",0.8557599225556631
15838,"@Override public void setTable(ValueLobDb lob,int tableId){
  init();
  long lobId=lob.getLobId();
  Object[] value=lobMap.remove(lobId);
  value[1]=tableId;
  lobMap.put(lobId,value);
}","@Override public void setTable(ValueLobDb lob,int tableId){
  init();
  long lobId=lob.getLobId();
  Object[] value=lobMap.remove(lobId);
  if (TRACE) {
    trace(""String_Node_Str"" + lob.getTableId() + ""String_Node_Str""+ lob.getLobId()+ ""String_Node_Str""+ tableId+ ""String_Node_Str""+ lobId);
  }
  value[1]=tableId;
  lobMap.put(lobId,value);
}",0.7018867924528301
15839,"private ValueLobDb createLob(InputStream in,int type) throws IOException {
  byte[] streamStoreId;
  try {
    streamStoreId=streamStore.put(in);
  }
 catch (  Exception e) {
    throw DbException.convertToIOException(e);
  }
  long lobId=streamStore.getAndIncrementNextKey();
  long length=streamStore.length(streamStoreId);
  int tableId=LobStorageFrontend.TABLE_TEMP;
  Object[] value=new Object[]{streamStoreId,tableId,length,0};
  lobMap.put(lobId,value);
  Object[] key=new Object[]{streamStoreId,lobId};
  refMap.put(key,Boolean.TRUE);
  ValueLobDb lob=ValueLobDb.create(type,database,tableId,lobId,null,length);
  return lob;
}","private ValueLobDb createLob(InputStream in,int type) throws IOException {
  byte[] streamStoreId;
  try {
    streamStoreId=streamStore.put(in);
  }
 catch (  Exception e) {
    throw DbException.convertToIOException(e);
  }
  long lobId=generateLobId();
  long length=streamStore.length(streamStoreId);
  int tableId=LobStorageFrontend.TABLE_TEMP;
  Object[] value=new Object[]{streamStoreId,tableId,length,0};
  lobMap.put(lobId,value);
  Object[] key=new Object[]{streamStoreId,lobId};
  refMap.put(key,Boolean.TRUE);
  ValueLobDb lob=ValueLobDb.create(type,database,tableId,lobId,null,length);
  if (TRACE) {
    trace(""String_Node_Str"" + tableId + ""String_Node_Str""+ lobId);
  }
  return lob;
}",0.8823970037453184
15840,"@Override public Value createClob(Reader reader,long maxLength){
  init();
  int type=Value.CLOB;
  if (maxLength < 0) {
    maxLength=Long.MAX_VALUE;
  }
  int max=(int)Math.min(maxLength,database.getMaxLengthInplaceLob());
  try {
    if (max != 0 && max < Integer.MAX_VALUE) {
      BufferedReader b=new BufferedReader(reader,max);
      b.mark(max);
      char[] small=new char[max];
      int len=IOUtils.readFully(b,small,max);
      if (len < max) {
        if (len < small.length) {
          small=Arrays.copyOf(small,len);
        }
        byte[] utf8=new String(small,0,len).getBytes(Constants.UTF8);
        return ValueLobDb.createSmallLob(type,utf8);
      }
      b.reset();
      reader=b;
    }
    CountingReaderInputStream in=new CountingReaderInputStream(reader,maxLength);
    ValueLobDb lob=createLob(in,type);
    lob=ValueLobDb.create(type,database,lob.getTableId(),lob.getLobId(),null,in.getLength());
    return lob;
  }
 catch (  IOException e) {
    throw DbException.convertIOException(e,null);
  }
}","@Override public Value createClob(Reader reader,long maxLength){
  init();
  int type=Value.CLOB;
  if (maxLength < 0) {
    maxLength=Long.MAX_VALUE;
  }
  int max=(int)Math.min(maxLength,database.getMaxLengthInplaceLob());
  try {
    if (max != 0 && max < Integer.MAX_VALUE) {
      BufferedReader b=new BufferedReader(reader,max);
      b.mark(max);
      char[] small=new char[max];
      int len=IOUtils.readFully(b,small,max);
      if (len < max) {
        if (len < small.length) {
          small=Arrays.copyOf(small,len);
        }
        byte[] utf8=new String(small,0,len).getBytes(Constants.UTF8);
        return ValueLobDb.createSmallLob(type,utf8);
      }
      b.reset();
      reader=b;
    }
    CountingReaderInputStream in=new CountingReaderInputStream(reader,maxLength);
    ValueLobDb lob=createLob(in,type);
    lob=ValueLobDb.create(type,database,lob.getTableId(),lob.getLobId(),null,in.getLength());
    return lob;
  }
 catch (  IllegalStateException e) {
    throw DbException.get(ErrorCode.OBJECT_CLOSED);
  }
catch (  IOException e) {
    throw DbException.convertIOException(e,null);
  }
}",0.9182156133828996
15841,"@Override public Value createBlob(InputStream in,long maxLength){
  init();
  int type=Value.BLOB;
  if (maxLength < 0) {
    maxLength=Long.MAX_VALUE;
  }
  int max=(int)Math.min(maxLength,database.getMaxLengthInplaceLob());
  try {
    if (max != 0 && max < Integer.MAX_VALUE) {
      BufferedInputStream b=new BufferedInputStream(in,max);
      b.mark(max);
      byte[] small=new byte[max];
      int len=IOUtils.readFully(b,small,max);
      if (len < max) {
        if (len < small.length) {
          small=Arrays.copyOf(small,len);
        }
        return ValueLobDb.createSmallLob(type,small);
      }
      b.reset();
      in=b;
    }
    return createLob(in,type);
  }
 catch (  IOException e) {
    throw DbException.convertIOException(e,null);
  }
}","@Override public Value createBlob(InputStream in,long maxLength){
  init();
  int type=Value.BLOB;
  if (maxLength < 0) {
    maxLength=Long.MAX_VALUE;
  }
  int max=(int)Math.min(maxLength,database.getMaxLengthInplaceLob());
  try {
    if (max != 0 && max < Integer.MAX_VALUE) {
      BufferedInputStream b=new BufferedInputStream(in,max);
      b.mark(max);
      byte[] small=new byte[max];
      int len=IOUtils.readFully(b,small,max);
      if (len < max) {
        if (len < small.length) {
          small=Arrays.copyOf(small,len);
        }
        return ValueLobDb.createSmallLob(type,small);
      }
      b.reset();
      in=b;
    }
    return createLob(in,type);
  }
 catch (  IllegalStateException e) {
    throw DbException.get(ErrorCode.OBJECT_CLOSED);
  }
catch (  IOException e) {
    throw DbException.convertIOException(e,null);
  }
}",0.8901234567901235
15842,"@Override public ValueLobDb copyLob(ValueLobDb old,int tableId,long length){
  init();
  int type=old.getType();
  long oldLobId=old.getLobId();
  long oldLength=old.getPrecision();
  if (oldLength != length) {
    throw DbException.throwInternalError(""String_Node_Str"");
  }
  Object[] value=lobMap.get(oldLobId);
  byte[] streamStoreId=(byte[])value[0];
  long lobId=streamStore.getAndIncrementNextKey();
  value[1]=tableId;
  lobMap.put(lobId,value);
  Object[] key=new Object[]{streamStoreId,lobId};
  refMap.put(key,Boolean.TRUE);
  ValueLobDb lob=ValueLobDb.create(type,database,tableId,lobId,null,length);
  return lob;
}","@Override public ValueLobDb copyLob(ValueLobDb old,int tableId,long length){
  init();
  int type=old.getType();
  long oldLobId=old.getLobId();
  long oldLength=old.getPrecision();
  if (oldLength != length) {
    throw DbException.throwInternalError(""String_Node_Str"");
  }
  Object[] value=lobMap.get(oldLobId);
  value=Arrays.copyOf(value,value.length);
  byte[] streamStoreId=(byte[])value[0];
  long lobId=generateLobId();
  value[1]=tableId;
  lobMap.put(lobId,value);
  Object[] key=new Object[]{streamStoreId,lobId};
  refMap.put(key,Boolean.TRUE);
  ValueLobDb lob=ValueLobDb.create(type,database,tableId,lobId,null,length);
  if (TRACE) {
    trace(""String_Node_Str"" + old.getTableId() + ""String_Node_Str""+ old.getLobId()+ ""String_Node_Str""+ tableId+ ""String_Node_Str""+ lobId);
  }
  return lob;
}",0.8105849582172702
15843,"/** 
 * Read the contents of this database from the database meta data.
 * @param meta the database meta data
 */
public synchronized void readContents(DatabaseMetaData meta) throws SQLException {
  String prod=StringUtils.toLowerEnglish(meta.getDatabaseProductName());
  isSQLite=prod.indexOf(""String_Node_Str"") >= 0;
  String url=meta.getURL();
  if (url != null) {
    isH2=url.startsWith(""String_Node_Str"");
    if (isH2) {
      PreparedStatement prep=meta.getConnection().prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
      prep.setString(1,""String_Node_Str"");
      ResultSet rs=prep.executeQuery();
      rs.next();
      if (""String_Node_Str"".equals(rs.getString(1))) {
        isH2ModeMySQL=true;
      }
      rs.close();
      prep.close();
    }
    isOracle=url.startsWith(""String_Node_Str"");
    isPostgreSQL=url.startsWith(""String_Node_Str"");
    isMySQL=url.startsWith(""String_Node_Str"");
    isDerby=url.startsWith(""String_Node_Str"");
    isFirebird=url.startsWith(""String_Node_Str"");
    isMSSQLServer=url.startsWith(""String_Node_Str"");
  }
  String defaultSchemaName=getDefaultSchemaName(meta);
  String[] schemaNames=getSchemaNames(meta);
  schemas=new DbSchema[schemaNames.length];
  for (int i=0; i < schemaNames.length; i++) {
    String schemaName=schemaNames[i];
    boolean isDefault=defaultSchemaName == null || defaultSchemaName.equals(schemaName);
    DbSchema schema=new DbSchema(this,schemaName,isDefault);
    if (schema.isDefault) {
      defaultSchema=schema;
    }
    schemas[i]=schema;
    String[] tableTypes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    schema.readTables(meta,tableTypes);
    if (!isPostgreSQL) {
      schema.readProcedures(meta);
    }
  }
  if (defaultSchema == null) {
    String best=null;
    for (    DbSchema schema : schemas) {
      if (""String_Node_Str"".equals(schema.name)) {
        defaultSchema=schema;
        break;
      }
      if (defaultSchema == null || best == null || schema.name.length() < best.length()) {
        best=schema.name;
        defaultSchema=schema;
      }
    }
  }
}","/** 
 * Read the contents of this database from the database meta data.
 * @param url the database URL
 * @param conn the connection
 */
public synchronized void readContents(String url,Connection conn) throws SQLException {
  isH2=url.startsWith(""String_Node_Str"");
  if (isH2) {
    PreparedStatement prep=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
    prep.setString(1,""String_Node_Str"");
    ResultSet rs=prep.executeQuery();
    rs.next();
    if (""String_Node_Str"".equals(rs.getString(1))) {
      isH2ModeMySQL=true;
    }
    rs.close();
    prep.close();
  }
  isSQLite=url.startsWith(""String_Node_Str"");
  isOracle=url.startsWith(""String_Node_Str"");
  isPostgreSQL=url.startsWith(""String_Node_Str"");
  isMySQL=url.startsWith(""String_Node_Str"");
  isDerby=url.startsWith(""String_Node_Str"");
  isFirebird=url.startsWith(""String_Node_Str"");
  isMSSQLServer=url.startsWith(""String_Node_Str"");
  DatabaseMetaData meta=conn.getMetaData();
  String defaultSchemaName=getDefaultSchemaName(meta);
  String[] schemaNames=getSchemaNames(meta);
  schemas=new DbSchema[schemaNames.length];
  for (int i=0; i < schemaNames.length; i++) {
    String schemaName=schemaNames[i];
    boolean isDefault=defaultSchemaName == null || defaultSchemaName.equals(schemaName);
    DbSchema schema=new DbSchema(this,schemaName,isDefault);
    if (isDefault) {
      defaultSchema=schema;
    }
    schemas[i]=schema;
    String[] tableTypes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    schema.readTables(meta,tableTypes);
    if (!isPostgreSQL) {
      schema.readProcedures(meta);
    }
  }
  if (defaultSchema == null) {
    String best=null;
    for (    DbSchema schema : schemas) {
      if (""String_Node_Str"".equals(schema.name)) {
        defaultSchema=schema;
        break;
      }
      if (defaultSchema == null || best == null || schema.name.length() < best.length()) {
        best=schema.name;
        defaultSchema=schema;
      }
    }
  }
}",0.8688836104513065
15844,"DbSchema(DbContents contents,String name,boolean isDefault){
  this.contents=contents;
  this.name=name;
  this.quotedName=contents.quoteIdentifier(name);
  this.isDefault=isDefault;
  if (name.equals(""String_Node_Str"")) {
    isSystem=true;
  }
 else   if (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else   if (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else   if (contents.isDerby() && name.startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else {
    isSystem=false;
  }
}","DbSchema(DbContents contents,String name,boolean isDefault){
  this.contents=contents;
  this.name=name;
  this.quotedName=contents.quoteIdentifier(name);
  this.isDefault=isDefault;
  if (name == null) {
    isSystem=true;
  }
 else   if (""String_Node_Str"".equals(name)) {
    isSystem=true;
  }
 else   if (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else   if (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else   if (contents.isDerby() && name.startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else {
    isSystem=false;
  }
}",0.9344641480339244
15845,"private String tables(){
  DbContents contents=session.getContents();
  boolean isH2=false;
  try {
    contents.readContents(session.getMetaData());
    session.loadBnf();
    Connection conn=session.getConnection();
    DatabaseMetaData meta=session.getMetaData();
    isH2=contents.isH2();
    StringBuilder buff=new StringBuilder();
    buff.append(""String_Node_Str"" + PageParser.escapeJavaScript((String)session.get(""String_Node_Str"")) + ""String_Node_Str"");
    int treeIndex=1;
    DbSchema defaultSchema=contents.getDefaultSchema();
    treeIndex=addTablesAndViews(defaultSchema,true,buff,treeIndex);
    DbSchema[] schemas=contents.getSchemas();
    for (    DbSchema schema : schemas) {
      if (schema == defaultSchema || schema == null) {
        continue;
      }
      buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(schema.name)+ ""String_Node_Str"");
      treeIndex++;
      treeIndex=addTablesAndViews(schema,false,buff,treeIndex);
    }
    if (isH2) {
      Statement stat=null;
      try {
        stat=conn.createStatement();
        ResultSet rs=stat.executeQuery(""String_Node_Str"");
        for (int i=0; rs.next(); i++) {
          if (i == 0) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
          String name=rs.getString(""String_Node_Str"");
          String current=rs.getString(""String_Node_Str"");
          String increment=rs.getString(""String_Node_Str"");
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(name)+ ""String_Node_Str"");
          treeIndex++;
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(current)+ ""String_Node_Str"");
          treeIndex++;
          if (!""String_Node_Str"".equals(increment)) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(increment)+ ""String_Node_Str"");
            treeIndex++;
          }
        }
        rs.close();
        rs=stat.executeQuery(""String_Node_Str"");
        for (int i=0; rs.next(); i++) {
          if (i == 0) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
          String name=rs.getString(""String_Node_Str"");
          String admin=rs.getString(""String_Node_Str"");
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(name)+ ""String_Node_Str"");
          treeIndex++;
          if (admin.equalsIgnoreCase(""String_Node_Str"")) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
        }
        rs.close();
      }
  finally {
        JdbcUtils.closeSilently(stat);
      }
    }
    String version=meta.getDatabaseProductName() + ""String_Node_Str"" + meta.getDatabaseProductVersion();
    buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(version)+ ""String_Node_Str"");
    buff.append(""String_Node_Str"");
    session.put(""String_Node_Str"",buff.toString());
  }
 catch (  Exception e) {
    session.put(""String_Node_Str"",""String_Node_Str"");
    session.put(""String_Node_Str"",getStackTrace(0,e,isH2));
  }
  return ""String_Node_Str"";
}","private String tables(){
  DbContents contents=session.getContents();
  boolean isH2=false;
  try {
    String url=(String)session.get(""String_Node_Str"");
    Connection conn=session.getConnection();
    contents.readContents(url,conn);
    session.loadBnf();
    isH2=contents.isH2();
    StringBuilder buff=new StringBuilder();
    buff.append(""String_Node_Str"" + PageParser.escapeJavaScript(url) + ""String_Node_Str"");
    int treeIndex=1;
    DbSchema defaultSchema=contents.getDefaultSchema();
    treeIndex=addTablesAndViews(defaultSchema,true,buff,treeIndex);
    DbSchema[] schemas=contents.getSchemas();
    for (    DbSchema schema : schemas) {
      if (schema == defaultSchema || schema == null) {
        continue;
      }
      buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(schema.name)+ ""String_Node_Str"");
      treeIndex++;
      treeIndex=addTablesAndViews(schema,false,buff,treeIndex);
    }
    if (isH2) {
      Statement stat=null;
      try {
        stat=conn.createStatement();
        ResultSet rs=stat.executeQuery(""String_Node_Str"");
        for (int i=0; rs.next(); i++) {
          if (i == 0) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
          String name=rs.getString(""String_Node_Str"");
          String current=rs.getString(""String_Node_Str"");
          String increment=rs.getString(""String_Node_Str"");
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(name)+ ""String_Node_Str"");
          treeIndex++;
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(current)+ ""String_Node_Str"");
          treeIndex++;
          if (!""String_Node_Str"".equals(increment)) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(increment)+ ""String_Node_Str"");
            treeIndex++;
          }
        }
        rs.close();
        rs=stat.executeQuery(""String_Node_Str"");
        for (int i=0; rs.next(); i++) {
          if (i == 0) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
          String name=rs.getString(""String_Node_Str"");
          String admin=rs.getString(""String_Node_Str"");
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(name)+ ""String_Node_Str"");
          treeIndex++;
          if (admin.equalsIgnoreCase(""String_Node_Str"")) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
        }
        rs.close();
      }
  finally {
        JdbcUtils.closeSilently(stat);
      }
    }
    DatabaseMetaData meta=session.getMetaData();
    String version=meta.getDatabaseProductName() + ""String_Node_Str"" + meta.getDatabaseProductVersion();
    buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(version)+ ""String_Node_Str"");
    buff.append(""String_Node_Str"");
    session.put(""String_Node_Str"",buff.toString());
  }
 catch (  Exception e) {
    session.put(""String_Node_Str"",""String_Node_Str"");
    session.put(""String_Node_Str"",getStackTrace(0,e,isH2));
  }
  return ""String_Node_Str"";
}",0.9426118391323994
15846,"/** 
 * Read the contents of this database from the database meta data.
 * @param meta the database meta data
 */
public synchronized void readContents(DatabaseMetaData meta) throws SQLException {
  String prod=StringUtils.toLowerEnglish(meta.getDatabaseProductName());
  isSQLite=prod.indexOf(""String_Node_Str"") >= 0;
  String url=meta.getURL();
  if (url != null) {
    isH2=url.startsWith(""String_Node_Str"");
    if (isH2) {
      PreparedStatement prep=meta.getConnection().prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
      prep.setString(1,""String_Node_Str"");
      ResultSet rs=prep.executeQuery();
      rs.next();
      if (""String_Node_Str"".equals(rs.getString(1))) {
        isH2ModeMySQL=true;
      }
      rs.close();
      prep.close();
    }
    isOracle=url.startsWith(""String_Node_Str"");
    isPostgreSQL=url.startsWith(""String_Node_Str"");
    isMySQL=url.startsWith(""String_Node_Str"");
    isDerby=url.startsWith(""String_Node_Str"");
    isFirebird=url.startsWith(""String_Node_Str"");
    isMSSQLServer=url.startsWith(""String_Node_Str"");
  }
  String defaultSchemaName=getDefaultSchemaName(meta);
  String[] schemaNames=getSchemaNames(meta);
  schemas=new DbSchema[schemaNames.length];
  for (int i=0; i < schemaNames.length; i++) {
    String schemaName=schemaNames[i];
    boolean isDefault=defaultSchemaName == null || defaultSchemaName.equals(schemaName);
    DbSchema schema=new DbSchema(this,schemaName,isDefault);
    if (schema.isDefault) {
      defaultSchema=schema;
    }
    schemas[i]=schema;
    String[] tableTypes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    schema.readTables(meta,tableTypes);
    if (!isPostgreSQL) {
      schema.readProcedures(meta);
    }
  }
  if (defaultSchema == null) {
    String best=null;
    for (    DbSchema schema : schemas) {
      if (""String_Node_Str"".equals(schema.name)) {
        defaultSchema=schema;
        break;
      }
      if (defaultSchema == null || best == null || schema.name.length() < best.length()) {
        best=schema.name;
        defaultSchema=schema;
      }
    }
  }
}","/** 
 * Read the contents of this database from the database meta data.
 * @param url the database URL
 * @param conn the connection
 */
public synchronized void readContents(String url,Connection conn) throws SQLException {
  isH2=url.startsWith(""String_Node_Str"");
  if (isH2) {
    PreparedStatement prep=conn.prepareStatement(""String_Node_Str"" + ""String_Node_Str"");
    prep.setString(1,""String_Node_Str"");
    ResultSet rs=prep.executeQuery();
    rs.next();
    if (""String_Node_Str"".equals(rs.getString(1))) {
      isH2ModeMySQL=true;
    }
    rs.close();
    prep.close();
  }
  isSQLite=url.startsWith(""String_Node_Str"");
  isOracle=url.startsWith(""String_Node_Str"");
  isPostgreSQL=url.startsWith(""String_Node_Str"");
  isMySQL=url.startsWith(""String_Node_Str"");
  isDerby=url.startsWith(""String_Node_Str"");
  isFirebird=url.startsWith(""String_Node_Str"");
  isMSSQLServer=url.startsWith(""String_Node_Str"");
  DatabaseMetaData meta=conn.getMetaData();
  String defaultSchemaName=getDefaultSchemaName(meta);
  String[] schemaNames=getSchemaNames(meta);
  schemas=new DbSchema[schemaNames.length];
  for (int i=0; i < schemaNames.length; i++) {
    String schemaName=schemaNames[i];
    boolean isDefault=defaultSchemaName == null || defaultSchemaName.equals(schemaName);
    DbSchema schema=new DbSchema(this,schemaName,isDefault);
    if (isDefault) {
      defaultSchema=schema;
    }
    schemas[i]=schema;
    String[] tableTypes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    schema.readTables(meta,tableTypes);
    if (!isPostgreSQL) {
      schema.readProcedures(meta);
    }
  }
  if (defaultSchema == null) {
    String best=null;
    for (    DbSchema schema : schemas) {
      if (""String_Node_Str"".equals(schema.name)) {
        defaultSchema=schema;
        break;
      }
      if (defaultSchema == null || best == null || schema.name.length() < best.length()) {
        best=schema.name;
        defaultSchema=schema;
      }
    }
  }
}",0.8688836104513065
15847,"DbSchema(DbContents contents,String name,boolean isDefault){
  this.contents=contents;
  this.name=name;
  this.quotedName=contents.quoteIdentifier(name);
  this.isDefault=isDefault;
  if (name.equals(""String_Node_Str"")) {
    isSystem=true;
  }
 else   if (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else   if (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else   if (contents.isDerby() && name.startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else {
    isSystem=false;
  }
}","DbSchema(DbContents contents,String name,boolean isDefault){
  this.contents=contents;
  this.name=name;
  this.quotedName=contents.quoteIdentifier(name);
  this.isDefault=isDefault;
  if (name == null) {
    isSystem=true;
  }
 else   if (""String_Node_Str"".equals(name)) {
    isSystem=true;
  }
 else   if (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else   if (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else   if (contents.isDerby() && name.startsWith(""String_Node_Str"")) {
    isSystem=true;
  }
 else {
    isSystem=false;
  }
}",0.9344641480339244
15848,"private String tables(){
  DbContents contents=session.getContents();
  boolean isH2=false;
  try {
    contents.readContents(session.getMetaData());
    session.loadBnf();
    Connection conn=session.getConnection();
    DatabaseMetaData meta=session.getMetaData();
    isH2=contents.isH2();
    StringBuilder buff=new StringBuilder();
    buff.append(""String_Node_Str"" + PageParser.escapeJavaScript((String)session.get(""String_Node_Str"")) + ""String_Node_Str"");
    int treeIndex=1;
    DbSchema defaultSchema=contents.getDefaultSchema();
    treeIndex=addTablesAndViews(defaultSchema,true,buff,treeIndex);
    DbSchema[] schemas=contents.getSchemas();
    for (    DbSchema schema : schemas) {
      if (schema == defaultSchema || schema == null) {
        continue;
      }
      buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(schema.name)+ ""String_Node_Str"");
      treeIndex++;
      treeIndex=addTablesAndViews(schema,false,buff,treeIndex);
    }
    if (isH2) {
      Statement stat=null;
      try {
        stat=conn.createStatement();
        ResultSet rs=stat.executeQuery(""String_Node_Str"");
        for (int i=0; rs.next(); i++) {
          if (i == 0) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
          String name=rs.getString(""String_Node_Str"");
          String current=rs.getString(""String_Node_Str"");
          String increment=rs.getString(""String_Node_Str"");
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(name)+ ""String_Node_Str"");
          treeIndex++;
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(current)+ ""String_Node_Str"");
          treeIndex++;
          if (!""String_Node_Str"".equals(increment)) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(increment)+ ""String_Node_Str"");
            treeIndex++;
          }
        }
        rs.close();
        rs=stat.executeQuery(""String_Node_Str"");
        for (int i=0; rs.next(); i++) {
          if (i == 0) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
          String name=rs.getString(""String_Node_Str"");
          String admin=rs.getString(""String_Node_Str"");
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(name)+ ""String_Node_Str"");
          treeIndex++;
          if (admin.equalsIgnoreCase(""String_Node_Str"")) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
        }
        rs.close();
      }
  finally {
        JdbcUtils.closeSilently(stat);
      }
    }
    String version=meta.getDatabaseProductName() + ""String_Node_Str"" + meta.getDatabaseProductVersion();
    buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(version)+ ""String_Node_Str"");
    buff.append(""String_Node_Str"");
    session.put(""String_Node_Str"",buff.toString());
  }
 catch (  Exception e) {
    session.put(""String_Node_Str"",""String_Node_Str"");
    session.put(""String_Node_Str"",getStackTrace(0,e,isH2));
  }
  return ""String_Node_Str"";
}","private String tables(){
  DbContents contents=session.getContents();
  boolean isH2=false;
  try {
    String url=(String)session.get(""String_Node_Str"");
    Connection conn=session.getConnection();
    contents.readContents(url,conn);
    session.loadBnf();
    isH2=contents.isH2();
    StringBuilder buff=new StringBuilder();
    buff.append(""String_Node_Str"" + PageParser.escapeJavaScript(url) + ""String_Node_Str"");
    int treeIndex=1;
    DbSchema defaultSchema=contents.getDefaultSchema();
    treeIndex=addTablesAndViews(defaultSchema,true,buff,treeIndex);
    DbSchema[] schemas=contents.getSchemas();
    for (    DbSchema schema : schemas) {
      if (schema == defaultSchema || schema == null) {
        continue;
      }
      buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(schema.name)+ ""String_Node_Str"");
      treeIndex++;
      treeIndex=addTablesAndViews(schema,false,buff,treeIndex);
    }
    if (isH2) {
      Statement stat=null;
      try {
        stat=conn.createStatement();
        ResultSet rs=stat.executeQuery(""String_Node_Str"");
        for (int i=0; rs.next(); i++) {
          if (i == 0) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
          String name=rs.getString(""String_Node_Str"");
          String current=rs.getString(""String_Node_Str"");
          String increment=rs.getString(""String_Node_Str"");
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(name)+ ""String_Node_Str"");
          treeIndex++;
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(current)+ ""String_Node_Str"");
          treeIndex++;
          if (!""String_Node_Str"".equals(increment)) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(increment)+ ""String_Node_Str"");
            treeIndex++;
          }
        }
        rs.close();
        rs=stat.executeQuery(""String_Node_Str"");
        for (int i=0; rs.next(); i++) {
          if (i == 0) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
          String name=rs.getString(""String_Node_Str"");
          String admin=rs.getString(""String_Node_Str"");
          buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(name)+ ""String_Node_Str"");
          treeIndex++;
          if (admin.equalsIgnoreCase(""String_Node_Str"")) {
            buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str"");
            treeIndex++;
          }
        }
        rs.close();
      }
  finally {
        JdbcUtils.closeSilently(stat);
      }
    }
    DatabaseMetaData meta=session.getMetaData();
    String version=meta.getDatabaseProductName() + ""String_Node_Str"" + meta.getDatabaseProductVersion();
    buff.append(""String_Node_Str"" + treeIndex + ""String_Node_Str""+ PageParser.escapeJavaScript(version)+ ""String_Node_Str"");
    buff.append(""String_Node_Str"");
    session.put(""String_Node_Str"",buff.toString());
  }
 catch (  Exception e) {
    session.put(""String_Node_Str"",""String_Node_Str"");
    session.put(""String_Node_Str"",getStackTrace(0,e,isH2));
  }
  return ""String_Node_Str"";
}",0.9426118391323994
15849,"/** 
 * Close all open files and unlock the database.
 * @param flush whether writing is allowed
 */
private synchronized void closeOpenFilesAndUnlock(boolean flush){
  stopWriter();
  if (pageStore != null && mvStore == null) {
    if (flush) {
      try {
        pageStore.checkpoint();
        if (!readOnly) {
          lockMeta(pageStore.getPageStoreSession());
          pageStore.compact(compactMode);
        }
      }
 catch (      DbException e) {
        if (SysProperties.CHECK2) {
          int code=e.getErrorCode();
          if (code != ErrorCode.DATABASE_IS_CLOSED && code != ErrorCode.LOCK_TIMEOUT_1 && code != ErrorCode.IO_EXCEPTION_2) {
            e.printStackTrace();
          }
        }
        trace.error(e,""String_Node_Str"");
      }
catch (      Throwable t) {
        if (SysProperties.CHECK2) {
          t.printStackTrace();
        }
        trace.error(t,""String_Node_Str"");
      }
    }
  }
  reconnectModified(false);
  if (mvStore != null) {
    if (!readOnly && compactMode != 0) {
      mvStore.compactFile(dbSettings.maxCompactTime);
    }
    mvStore.close(dbSettings.maxCompactTime);
  }
  closeFiles();
  if (persistent && lock == null && fileLockMethod != FileLock.LOCK_NO && fileLockMethod != FileLock.LOCK_FS) {
    return;
  }
  if (persistent) {
    deleteOldTempFiles();
  }
  if (systemSession != null) {
    systemSession.close();
    systemSession=null;
  }
  if (lobSession != null) {
    lobSession.close();
    lobSession=null;
  }
  if (lock != null) {
    if (fileLockMethod == FileLock.LOCK_SERIALIZED) {
      if (lock.load().containsKey(""String_Node_Str"")) {
        try {
          Thread.sleep((int)(reconnectCheckDelay * 1.1));
        }
 catch (        InterruptedException e) {
          trace.error(e,""String_Node_Str"");
        }
      }
    }
    lock.unlock();
    lock=null;
  }
}","/** 
 * Close all open files and unlock the database.
 * @param flush whether writing is allowed
 */
private synchronized void closeOpenFilesAndUnlock(boolean flush){
  stopWriter();
  if (pageStore != null) {
    if (flush) {
      try {
        pageStore.checkpoint();
        if (!readOnly) {
          lockMeta(pageStore.getPageStoreSession());
          pageStore.compact(compactMode);
        }
      }
 catch (      DbException e) {
        if (SysProperties.CHECK2) {
          int code=e.getErrorCode();
          if (code != ErrorCode.DATABASE_IS_CLOSED && code != ErrorCode.LOCK_TIMEOUT_1 && code != ErrorCode.IO_EXCEPTION_2) {
            e.printStackTrace();
          }
        }
        trace.error(e,""String_Node_Str"");
      }
catch (      Throwable t) {
        if (SysProperties.CHECK2) {
          t.printStackTrace();
        }
        trace.error(t,""String_Node_Str"");
      }
    }
  }
  reconnectModified(false);
  if (mvStore != null) {
    if (!readOnly && compactMode != 0) {
      mvStore.compactFile(dbSettings.maxCompactTime);
    }
    mvStore.close(dbSettings.maxCompactTime);
  }
  closeFiles();
  if (persistent && lock == null && fileLockMethod != FileLock.LOCK_NO && fileLockMethod != FileLock.LOCK_FS) {
    return;
  }
  if (persistent) {
    deleteOldTempFiles();
  }
  if (systemSession != null) {
    systemSession.close();
    systemSession=null;
  }
  if (lobSession != null) {
    lobSession.close();
    lobSession=null;
  }
  if (lock != null) {
    if (fileLockMethod == FileLock.LOCK_SERIALIZED) {
      if (lock.load().containsKey(""String_Node_Str"")) {
        try {
          Thread.sleep((int)(reconnectCheckDelay * 1.1));
        }
 catch (        InterruptedException e) {
          trace.error(e,""String_Node_Str"");
        }
      }
    }
    lock.unlock();
    lock=null;
  }
}",0.9948439620081412
15850,"/** 
 * Close all open files and unlock the database.
 * @param flush whether writing is allowed
 */
private synchronized void closeOpenFilesAndUnlock(boolean flush){
  stopWriter();
  if (pageStore != null && mvStore == null) {
    if (flush) {
      try {
        pageStore.checkpoint();
        if (!readOnly) {
          lockMeta(pageStore.getPageStoreSession());
          pageStore.compact(compactMode);
        }
      }
 catch (      DbException e) {
        if (SysProperties.CHECK2) {
          int code=e.getErrorCode();
          if (code != ErrorCode.DATABASE_IS_CLOSED && code != ErrorCode.LOCK_TIMEOUT_1 && code != ErrorCode.IO_EXCEPTION_2) {
            e.printStackTrace();
          }
        }
        trace.error(e,""String_Node_Str"");
      }
catch (      Throwable t) {
        if (SysProperties.CHECK2) {
          t.printStackTrace();
        }
        trace.error(t,""String_Node_Str"");
      }
    }
  }
  reconnectModified(false);
  if (mvStore != null) {
    if (!readOnly && compactMode != 0) {
      mvStore.compactFile(dbSettings.maxCompactTime);
    }
    mvStore.close(dbSettings.maxCompactTime);
  }
  closeFiles();
  if (persistent && lock == null && fileLockMethod != FileLock.LOCK_NO && fileLockMethod != FileLock.LOCK_FS) {
    return;
  }
  if (persistent) {
    deleteOldTempFiles();
  }
  if (systemSession != null) {
    systemSession.close();
    systemSession=null;
  }
  if (lobSession != null) {
    lobSession.close();
    lobSession=null;
  }
  if (lock != null) {
    if (fileLockMethod == FileLock.LOCK_SERIALIZED) {
      if (lock.load().containsKey(""String_Node_Str"")) {
        try {
          Thread.sleep((int)(reconnectCheckDelay * 1.1));
        }
 catch (        InterruptedException e) {
          trace.error(e,""String_Node_Str"");
        }
      }
    }
    lock.unlock();
    lock=null;
  }
}","/** 
 * Close all open files and unlock the database.
 * @param flush whether writing is allowed
 */
private synchronized void closeOpenFilesAndUnlock(boolean flush){
  stopWriter();
  if (pageStore != null) {
    if (flush) {
      try {
        pageStore.checkpoint();
        if (!readOnly) {
          lockMeta(pageStore.getPageStoreSession());
          pageStore.compact(compactMode);
        }
      }
 catch (      DbException e) {
        if (SysProperties.CHECK2) {
          int code=e.getErrorCode();
          if (code != ErrorCode.DATABASE_IS_CLOSED && code != ErrorCode.LOCK_TIMEOUT_1 && code != ErrorCode.IO_EXCEPTION_2) {
            e.printStackTrace();
          }
        }
        trace.error(e,""String_Node_Str"");
      }
catch (      Throwable t) {
        if (SysProperties.CHECK2) {
          t.printStackTrace();
        }
        trace.error(t,""String_Node_Str"");
      }
    }
  }
  reconnectModified(false);
  if (mvStore != null) {
    if (!readOnly && compactMode != 0) {
      mvStore.compactFile(dbSettings.maxCompactTime);
    }
    mvStore.close(dbSettings.maxCompactTime);
  }
  closeFiles();
  if (persistent && lock == null && fileLockMethod != FileLock.LOCK_NO && fileLockMethod != FileLock.LOCK_FS) {
    return;
  }
  if (persistent) {
    deleteOldTempFiles();
  }
  if (systemSession != null) {
    systemSession.close();
    systemSession=null;
  }
  if (lobSession != null) {
    lobSession.close();
    lobSession=null;
  }
  if (lock != null) {
    if (fileLockMethod == FileLock.LOCK_SERIALIZED) {
      if (lock.load().containsKey(""String_Node_Str"")) {
        try {
          Thread.sleep((int)(reconnectCheckDelay * 1.1));
        }
 catch (        InterruptedException e) {
          trace.error(e,""String_Node_Str"");
        }
      }
    }
    lock.unlock();
    lock=null;
  }
}",0.9948439620081412
15851,"/** 
 * Get the size of the map as seen by this transaction.
 * @return the size
 */
public long sizeAsLong(){
  long size=0;
  Cursor<K,VersionedValue> cursor=map.cursor(null);
  while (cursor.hasNext()) {
    K key=cursor.next();
    VersionedValue data=cursor.getValue();
    if (getValue(key,readLogId,data) != null) {
      size++;
    }
  }
  return size;
}","/** 
 * Get the size of the map as seen by this transaction.
 * @return the size
 */
public long sizeAsLong(){
  long size=0;
  Cursor<K,VersionedValue> cursor=map.cursor(null);
  while (cursor.hasNext()) {
    K key=cursor.next();
    VersionedValue data=cursor.getValue();
    data=getValue(key,readLogId,data);
    if (data != null && data.value != null) {
      size++;
    }
  }
  return size;
}",0.9410222804718218
15852,"private void testSavepoint() throws SQLException {
  deleteDb(""String_Node_Str"");
  Connection conn=getConnection(""String_Node_Str"");
  Statement stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  conn.setAutoCommit(false);
  int[] count=new int[2];
  int[] countCommitted=new int[2];
  int[] countSave=new int[2];
  int len=getSize(2000,10000);
  Random random=new Random(10);
  Savepoint sp=null;
  for (int i=0; i < len; i++) {
    int tableId=random.nextInt(2);
    String table=""String_Node_Str"" + tableId;
    int op=random.nextInt(6);
switch (op) {
case 0:
      stat.execute(""String_Node_Str"" + table + ""String_Node_Str""+ i+ ""String_Node_Str"");
    count[tableId]++;
  break;
case 1:
if (count[tableId] > 0) {
  stat.execute(""String_Node_Str"" + table + ""String_Node_Str""+ table);
  count[tableId]--;
}
break;
case 2:
sp=conn.setSavepoint();
countSave[0]=count[0];
countSave[1]=count[1];
break;
case 3:
if (sp != null) {
conn.rollback(sp);
count[0]=countSave[0];
count[1]=countSave[1];
}
break;
case 4:
conn.commit();
sp=null;
countCommitted[0]=count[0];
countCommitted[1]=count[1];
break;
case 5:
conn.rollback();
sp=null;
count[0]=countCommitted[0];
count[1]=countCommitted[1];
break;
default :
}
checkTableCount(stat,""String_Node_Str"",count[0]);
checkTableCount(stat,""String_Node_Str"",count[1]);
}
conn.close();
}","private void testSavepoint() throws SQLException {
  deleteDb(""String_Node_Str"");
  Connection conn=getConnection(""String_Node_Str"");
  Statement stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  conn.setAutoCommit(false);
  int[] count=new int[2];
  int[] countCommitted=new int[2];
  int[] countSave=new int[2];
  int len=getSize(2000,10000);
  Random random=new Random(10);
  Savepoint sp=null;
  for (int i=0; i < len; i++) {
    int tableId=random.nextInt(2);
    String table=""String_Node_Str"" + tableId;
    int op=random.nextInt(6);
switch (op) {
case 0:
      stat.execute(""String_Node_Str"" + table + ""String_Node_Str""+ i+ ""String_Node_Str"");
    count[tableId]++;
  break;
case 1:
if (count[tableId] > 0) {
  int updateCount=stat.executeUpdate(""String_Node_Str"" + table + ""String_Node_Str""+ table);
  assertEquals(1,updateCount);
  count[tableId]--;
}
break;
case 2:
sp=conn.setSavepoint();
countSave[0]=count[0];
countSave[1]=count[1];
break;
case 3:
if (sp != null) {
conn.rollback(sp);
count[0]=countSave[0];
count[1]=countSave[1];
}
break;
case 4:
conn.commit();
sp=null;
countCommitted[0]=count[0];
countCommitted[1]=count[1];
break;
case 5:
conn.rollback();
sp=null;
count[0]=countCommitted[0];
count[1]=countCommitted[1];
break;
default :
}
checkTableCount(stat,""String_Node_Str"",count[0]);
checkTableCount(stat,""String_Node_Str"",count[1]);
}
conn.close();
}",0.9810646659521256
15853,"CountingReaderInputStream(Reader reader,long maxLength){
  this.reader=reader;
  this.remaining=maxLength;
  buffer=Utils.EMPTY_BYTES;
}","CountingReaderInputStream(Reader reader,long maxLength){
  this.reader=reader;
  this.remaining=maxLength;
}",0.8852459016393442
15854,"private void fillBuffer() throws IOException {
  int len=(int)Math.min(charBuffer.length,remaining);
  if (len > 0) {
    len=reader.read(charBuffer,0,len);
  }
 else {
    len=-1;
  }
  if (len < 0) {
    buffer=null;
  }
 else {
    buffer=new String(charBuffer,0,len).getBytes(Constants.UTF8);
    length+=len;
    remaining-=len;
  }
  pos=0;
}","private void fillBuffer() throws IOException {
  int len=(int)Math.min(charBuffer.capacity() - charBuffer.position(),remaining);
  if (len > 0) {
    len=reader.read(charBuffer.array(),charBuffer.position(),len);
  }
  if (len > 0) {
    remaining-=len;
  }
 else {
    len=0;
    remaining=0;
  }
  length+=len;
  charBuffer.limit(charBuffer.position() + len);
  charBuffer.rewind();
  byteBuffer=ByteBuffer.allocate(Constants.IO_BUFFER_SIZE);
  boolean end=remaining == 0;
  encoder.encode(charBuffer,byteBuffer,end);
  if (end && byteBuffer.position() == 0) {
    byteBuffer=null;
    return;
  }
  byteBuffer.flip();
  charBuffer.compact();
  charBuffer.flip();
  charBuffer.position(charBuffer.limit());
}",0.2514177693761815
15855,"@Override public int read() throws IOException {
  if (buffer == null) {
    return -1;
  }
  if (pos >= buffer.length) {
    fillBuffer();
    if (buffer == null) {
      return -1;
    }
  }
  return buffer[pos++];
}","@Override public int read() throws IOException {
  if (!fetch()) {
    return -1;
  }
  return byteBuffer.get() & 255;
}",0.5798816568047337
15856,"public long getLength(){
  return length;
}","/** 
 * The number of characters read so far (but there might still be some bytes in the buffer).
 * @return the number of characters
 */
public long getLength(){
  return length;
}",0.3839285714285714
15857,"@Override public Reader getReader(){
  return new InputStreamReader(getInputStream(),Constants.UTF8);
}","@Override public Reader getReader(){
  return IOUtils.getBufferedReader(getInputStream());
}",0.7897435897435897
15858,"/** 
 * Create a temporary CLOB value from a stream.
 * @param in the reader
 * @param length the number of characters to read, or -1 for no limit
 * @param handler the data handler
 * @return the lob value
 */
public static ValueLobDb createTempClob(Reader in,long length,DataHandler handler){
  try {
    boolean compress=handler.getLobCompressionAlgorithm(Value.CLOB) != null;
    long remaining=Long.MAX_VALUE;
    if (length >= 0 && length < remaining) {
      remaining=length;
    }
    int len=getBufferSize(handler,compress,remaining);
    char[] buff;
    if (len >= Integer.MAX_VALUE) {
      String data=IOUtils.readStringAndClose(in,-1);
      buff=data.toCharArray();
      len=buff.length;
    }
 else {
      buff=new char[len];
      len=IOUtils.readFully(in,buff,len);
      len=len < 0 ? 0 : len;
    }
    if (len <= handler.getMaxLengthInplaceLob()) {
      byte[] small=new String(buff,0,len).getBytes(Constants.UTF8);
      return ValueLobDb.createSmallLob(Value.CLOB,small,len);
    }
    ValueLobDb lob=new ValueLobDb(handler,buff,len,in,remaining);
    return lob;
  }
 catch (  IOException e) {
    throw DbException.convertIOException(e,null);
  }
}","/** 
 * Create a temporary CLOB value from a stream.
 * @param in the reader
 * @param length the number of characters to read, or -1 for no limit
 * @param handler the data handler
 * @return the lob value
 */
public static ValueLobDb createTempClob(Reader in,long length,DataHandler handler){
  BufferedReader reader;
  if (in instanceof BufferedReader) {
    reader=(BufferedReader)in;
  }
 else {
    reader=new BufferedReader(in,Constants.IO_BUFFER_SIZE);
  }
  try {
    boolean compress=handler.getLobCompressionAlgorithm(Value.CLOB) != null;
    long remaining=Long.MAX_VALUE;
    if (length >= 0 && length < remaining) {
      remaining=length;
    }
    int len=getBufferSize(handler,compress,remaining);
    char[] buff;
    if (len >= Integer.MAX_VALUE) {
      String data=IOUtils.readStringAndClose(reader,-1);
      buff=data.toCharArray();
      len=buff.length;
    }
 else {
      buff=new char[len];
      reader.mark(len);
      len=IOUtils.readFully(reader,buff,len);
      len=len < 0 ? 0 : len;
    }
    if (len <= handler.getMaxLengthInplaceLob()) {
      byte[] small=new String(buff,0,len).getBytes(Constants.UTF8);
      return ValueLobDb.createSmallLob(Value.CLOB,small,len);
    }
    reader.reset();
    ValueLobDb lob=new ValueLobDb(handler,reader,remaining);
    return lob;
  }
 catch (  IOException e) {
    throw DbException.convertIOException(e,null);
  }
}",0.9039284325165304
15859,"private void testClobWithRandomUnicodeChars() throws Exception {
  deleteDb(""String_Node_Str"");
  Connection conn=getConnection(""String_Node_Str"");
  Statement stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  PreparedStatement s1=conn.prepareStatement(""String_Node_Str"");
  final Random rand=new Random();
  for (int i=1; i <= 100; i++) {
    String data=randomUnicodeString(rand);
    s1.setString(1,data);
    s1.executeUpdate();
    ResultSet rs=stat.executeQuery(""String_Node_Str"");
    rs.next();
    String read=rs.getString(2);
    assertEquals(read,data);
  }
  conn.close();
}","private void testClobWithRandomUnicodeChars() throws Exception {
  deleteDb(""String_Node_Str"");
  Connection conn=getConnection(""String_Node_Str"");
  Statement stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  PreparedStatement s1=conn.prepareStatement(""String_Node_Str"");
  final Random rand=new Random(1);
  for (int i=1; i <= 100; i++) {
    String data=randomUnicodeString(rand);
    s1.setString(1,data);
    s1.executeUpdate();
    ResultSet rs=stat.executeQuery(""String_Node_Str"");
    rs.next();
    String read=rs.getString(2);
    if (!read.equals(data)) {
      for (int j=0; j < read.length(); j++) {
        assertEquals(""String_Node_Str"" + j,read.charAt(j),data.charAt(j));
      }
    }
    assertEquals(read,data);
  }
  conn.close();
}",0.8423357664233576
15860,"@Override public void test() throws Exception {
  testCommitOnExclusiveConnection();
  testReadManyLobs();
  testLobSkip();
  testLobSkipPastEnd();
  testCreateIndexOnLob();
  testBlobInputStreamSeek(true);
  testBlobInputStreamSeek(false);
  testDeadlock();
  testDeadlock2();
  testCopyManyLobs();
  testCopyLob();
  testConcurrentCreate();
  testLobInLargeResult();
  testUniqueIndex();
  testConvert();
  testCreateAsSelect();
  testDropAllObjects();
  testDelete();
  testTempFilesDeleted(true);
  testTempFilesDeleted(false);
  testAddLobRestart();
  testLobServerMemory();
  testUpdatingLobRow();
  if (config.memory) {
    return;
  }
  testLobCleanupSessionTemporaries();
  testLobUpdateMany();
  testLobDeleteTemp();
  testLobDelete();
  testLobVariable();
  testLobDrop();
  testLobNoClose();
  testLobTransactions(10);
  testLobTransactions(10000);
  testLobRollbackStop();
  testLobCopy();
  testLobHibernate();
  testLobCopy(false);
  testLobCopy(true);
  testLobCompression(false);
  testLobCompression(true);
  testManyLobs();
  testClob();
  testUpdateLob();
  testLobReconnect();
  testLob(false);
  testLob(true);
  testJavaObject();
  testClobWithRandomUnicodeChars();
  deleteDb(""String_Node_Str"");
  FileUtils.deleteRecursive(TEMP_DIR,true);
}","@Override public void test() throws Exception {
  testClobWithRandomUnicodeChars();
  testCommitOnExclusiveConnection();
  testReadManyLobs();
  testLobSkip();
  testLobSkipPastEnd();
  testCreateIndexOnLob();
  testBlobInputStreamSeek(true);
  testBlobInputStreamSeek(false);
  testDeadlock();
  testDeadlock2();
  testCopyManyLobs();
  testCopyLob();
  testConcurrentCreate();
  testLobInLargeResult();
  testUniqueIndex();
  testConvert();
  testCreateAsSelect();
  testDropAllObjects();
  testDelete();
  testTempFilesDeleted(true);
  testTempFilesDeleted(false);
  testAddLobRestart();
  testLobServerMemory();
  testUpdatingLobRow();
  if (config.memory) {
    return;
  }
  testLobCleanupSessionTemporaries();
  testLobUpdateMany();
  testLobDeleteTemp();
  testLobDelete();
  testLobVariable();
  testLobDrop();
  testLobNoClose();
  testLobTransactions(10);
  testLobTransactions(10000);
  testLobRollbackStop();
  testLobCopy();
  testLobHibernate();
  testLobCopy(false);
  testLobCopy(true);
  testLobCompression(false);
  testLobCompression(true);
  testManyLobs();
  testClob();
  testUpdateLob();
  testLobReconnect();
  testLob(false);
  testLob(true);
  testJavaObject();
  deleteDb(""String_Node_Str"");
  FileUtils.deleteRecursive(TEMP_DIR,true);
}",0.9715415019762846
15861,"/** 
 * Set the amount of memory a page should contain at most, in bytes, before it is split. The default is 16 KB. This is not a limit in the page size, as pages with one entry can get larger. It is just the point where pages that contain more than one entry are split.
 * @param pageSplitSize the page size
 * @return this
 */
public Builder pageSplitSize(int pageSplitSize){
  return set(""String_Node_Str"",pageSplitSize);
}","/** 
 * Set the amount of memory a page should contain at most, in bytes, before it is split. The default is 16 KB for persistent stores and 4 KB for in-memory stores. This is not a limit in the page size, as pages with one entry can get larger. It is just the point where pages that contain more than one entry are split.
 * @param pageSplitSize the page size
 * @return this
 */
public Builder pageSplitSize(int pageSplitSize){
  return set(""String_Node_Str"",pageSplitSize);
}",0.9424778761061948
15862,"/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  this.compress=config.containsKey(""String_Node_Str"");
  Object o=config.get(""String_Node_Str"");
  pageSplitSize=o == null ? 16 * 1024 : (Integer)o;
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMapConcurrent<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,String> c=New.hashMap();
  c.put(""String_Node_Str"",""String_Node_Str"");
  c.put(""String_Node_Str"",Long.toString(currentVersion));
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  String fileName=(String)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    return;
  }
  if (fileStore == null) {
    fileStore=new FileStore();
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  if (mb > 0) {
    int maxMemoryBytes=mb * 1024 * 1024;
    int averageMemory=Math.max(10,pageSplitSize / 2);
    int segmentCount=16;
    int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
    cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
  }
  o=config.get(""String_Node_Str"");
  int kb=o == null ? 512 : (Integer)o;
  int autoCommitBufferSize=kb * 1024 * 19;
  int div=pageSplitSize;
  autoCommitPageCount=autoCommitBufferSize / (div == 0 ? 1 : div);
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    fileStore.open(fileName,readOnly,encryptionKey);
    if (fileStore.size() == 0) {
      creationTime=0;
      creationTime=getTime();
      lastCommitTime=creationTime;
      storeHeader.put(""String_Node_Str"",""String_Node_Str"");
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + BLOCK_SIZE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + FORMAT_WRITE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + creationTime);
      writeStoreHeader();
    }
 else {
      readStoreHeader();
      long format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),0);
      if (format > FORMAT_WRITE && !fileStore.isReadOnly()) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"" + ""String_Node_Str"",format,FORMAT_WRITE);
      }
      format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),format);
      if (format > FORMAT_READ) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"",format,FORMAT_READ);
      }
      if (rootChunkStart > 0) {
        readMeta();
      }
    }
  }
 catch (  IllegalStateException e) {
    try {
      closeStore(false);
    }
 catch (    Exception e2) {
    }
    throw e;
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastCommitTime=getTime();
  o=config.get(""String_Node_Str"");
  int delay=o == null ? 1000 : (Integer)o;
  setAutoCommitDelay(delay);
}","/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  this.compress=config.containsKey(""String_Node_Str"");
  String fileName=(String)config.get(""String_Node_Str"");
  Object o=config.get(""String_Node_Str"");
  if (o == null) {
    pageSplitSize=fileName == null ? 4 * 1024 : 16 * 1024;
  }
 else {
    pageSplitSize=(Integer)o;
  }
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMapConcurrent<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,String> c=New.hashMap();
  c.put(""String_Node_Str"",""String_Node_Str"");
  c.put(""String_Node_Str"",Long.toString(currentVersion));
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    return;
  }
  if (fileStore == null) {
    fileStore=new FileStore();
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  if (mb > 0) {
    int maxMemoryBytes=mb * 1024 * 1024;
    int averageMemory=Math.max(10,pageSplitSize / 2);
    int segmentCount=16;
    int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
    cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
  }
  o=config.get(""String_Node_Str"");
  int kb=o == null ? 512 : (Integer)o;
  int autoCommitBufferSize=kb * 1024 * 19;
  int div=pageSplitSize;
  autoCommitPageCount=autoCommitBufferSize / (div == 0 ? 1 : div);
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    fileStore.open(fileName,readOnly,encryptionKey);
    if (fileStore.size() == 0) {
      creationTime=0;
      creationTime=getTime();
      lastCommitTime=creationTime;
      storeHeader.put(""String_Node_Str"",""String_Node_Str"");
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + BLOCK_SIZE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + FORMAT_WRITE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + creationTime);
      writeStoreHeader();
    }
 else {
      readStoreHeader();
      long format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),0);
      if (format > FORMAT_WRITE && !fileStore.isReadOnly()) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"" + ""String_Node_Str"",format,FORMAT_WRITE);
      }
      format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),format);
      if (format > FORMAT_READ) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"",format,FORMAT_READ);
      }
      if (rootChunkStart > 0) {
        readMeta();
      }
    }
  }
 catch (  IllegalStateException e) {
    try {
      closeStore(false);
    }
 catch (    Exception e2) {
    }
    throw e;
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastCommitTime=getTime();
  o=config.get(""String_Node_Str"");
  int delay=o == null ? 1000 : (Integer)o;
  setAutoCommitDelay(delay);
}",0.9711971197119712
15863,"private void testPerformanceComparison(){
  if (!config.big) {
    return;
  }
  int size=1000000;
  Map<Integer,String> map;
  map=new HashMap<Integer,String>(size);
  long hash=testPerformance(map,size);
  map=new TreeMap<Integer,String>();
  long tree=testPerformance(map,size);
  MVStore store=MVStore.open(null);
  map=store.openMap(""String_Node_Str"");
  long mv=testPerformance(map,size);
  String msg=""String_Node_Str"" + mv + ""String_Node_Str""+ tree+ ""String_Node_Str""+ hash;
  assertTrue(msg,hash < tree);
  assertTrue(msg,mv < tree);
}","private void testPerformanceComparison(){
  if (!config.big) {
    return;
  }
  int size=1000000;
  long hash=0, tree=0, mv=0;
  for (int i=0; i < 5; i++) {
    Map<Integer,String> map;
    map=new HashMap<Integer,String>(size);
    hash=testPerformance(map,size);
    map=new TreeMap<Integer,String>();
    tree=testPerformance(map,size);
    MVStore store=MVStore.open(null);
    map=store.openMap(""String_Node_Str"");
    mv=testPerformance(map,size);
    if (hash < tree && mv < tree) {
      break;
    }
  }
  String msg=""String_Node_Str"" + mv + ""String_Node_Str""+ tree+ ""String_Node_Str""+ hash;
  assertTrue(msg,hash < tree);
  assertTrue(msg,mv < tree);
}",0.8815244407622204
15864,"VersionedValue getValue(K key,long maxLog,VersionedValue data){
  ;
  for (int i=0; i < 1000; i++) {
    int tx;
    if (data == null) {
      return null;
    }
    long id=data.operationId;
    if (id == 0) {
      return data;
    }
    tx=getTransactionId(id);
    if (tx == transaction.transactionId) {
      if (getLogId(id) < maxLog) {
        return data;
      }
    }
    Object[] d;
synchronized (transaction.store.undoLog) {
      d=transaction.store.undoLog.get(id);
    }
    if (d == null) {
      data=map.get(key);
    }
 else {
      data=(VersionedValue)d[2];
    }
  }
  throw DataUtils.newIllegalStateException(DataUtils.ERROR_TRANSACTION_CORRUPT,""String_Node_Str"",key);
}","VersionedValue getValue(K key,long maxLog,VersionedValue data){
  while (true) {
    if (data == null) {
      return null;
    }
    long id=data.operationId;
    if (id == 0) {
      return data;
    }
    int tx=getTransactionId(id);
    if (tx == transaction.transactionId) {
      if (getLogId(id) < maxLog) {
        return data;
      }
    }
    Object[] d;
synchronized (transaction.store.undoLog) {
      d=transaction.store.undoLog.get(id);
    }
    if (d == null) {
      data=map.get(key);
    }
 else {
      data=(VersionedValue)d[2];
    }
    if (data != null) {
      long id2=data.operationId;
      if (id2 != 0) {
        int tx2=getTransactionId(id2);
        if (tx2 != tx) {
          break;
        }
        if (getLogId(id2) > getLogId(id)) {
          break;
        }
      }
    }
  }
  throw DataUtils.newIllegalStateException(DataUtils.ERROR_TRANSACTION_CORRUPT,""String_Node_Str"",key);
}",0.6472411655300682
15865,"@Override public void test() throws Exception {
  FileUtils.createDirectories(getBaseDir());
  testTransactionAge();
  testStopWhileCommitting();
  testGetModifiedMaps();
  testKeyIterator();
  testMultiStatement();
  testTwoPhaseCommit();
  testSavepoint();
  testConcurrentTransactionsReadCommitted();
  testSingleConnection();
  testCompareWithPostgreSQL();
}","@Override public void test() throws Exception {
  FileUtils.createDirectories(getBaseDir());
  testRepeatedChange();
  testTransactionAge();
  testStopWhileCommitting();
  testGetModifiedMaps();
  testKeyIterator();
  testMultiStatement();
  testTwoPhaseCommit();
  testSavepoint();
  testConcurrentTransactionsReadCommitted();
  testSingleConnection();
  testCompareWithPostgreSQL();
}",0.9679144385026738
15866,"@Override public Cursor findFirstOrLast(Session session,boolean first){
  TransactionMap<Value,Value> map=getMap(session);
  ValueLong v=(ValueLong)(first ? map.firstKey() : map.lastKey());
  if (v == null) {
    return new MVStoreCursor(Collections.<Entry<Value,Value>>emptyList().iterator(),null);
  }
  Value value=map.get(v);
  Entry<Value,Value> e=new DataUtils.MapEntry<Value,Value>(v,value);
  @SuppressWarnings(""String_Node_Str"") List<Entry<Value,Value>> list=Arrays.asList(e);
  return new MVStoreCursor(list.iterator(),v);
}","@Override public Cursor findFirstOrLast(Session session,boolean first){
  TransactionMap<Value,Value> map=getMap(session);
  ValueLong v=(ValueLong)(first ? map.firstKey() : map.lastKey());
  if (v == null) {
    return new MVStoreCursor(Collections.<Entry<Value,Value>>emptyList().iterator(),null);
  }
  Value value=map.get(v);
  Entry<Value,Value> e=new DataUtils.MapEntry<Value,Value>(v,value);
  @SuppressWarnings(""String_Node_Str"") List<Entry<Value,Value>> list=Arrays.asList(e);
  MVStoreCursor c=new MVStoreCursor(list.iterator(),v);
  c.next();
  return c;
}",0.9573115349682108
15867,"/** 
 * Shrink the file if possible, and if at least a given percentage can be saved.
 * @param minPercent the minimum percentage to save
 */
private void shrinkFileIfPossible(int minPercent){
  long end=getEndPosition();
  long fileSize=fileStore.size();
  if (end >= fileSize) {
    return;
  }
  if (minPercent > 0 && fileSize - end < BLOCK_SIZE) {
    return;
  }
  int savedPercent=(int)(100 - (end * 100 / fileSize));
  if (savedPercent < minPercent) {
    return;
  }
  fileStore.truncate(end);
}","/** 
 * Shrink the file if possible, and if at least a given percentage can be saved.
 * @param minPercent the minimum percentage to save
 */
private void shrinkFileIfPossible(int minPercent){
  long end=getFileLengthInUse();
  long fileSize=fileStore.size();
  if (end >= fileSize) {
    return;
  }
  if (minPercent > 0 && fileSize - end < BLOCK_SIZE) {
    return;
  }
  int savedPercent=(int)(100 - (end * 100 / fileSize));
  if (savedPercent < minPercent) {
    return;
  }
  fileStore.truncate(end);
}",0.9742574257425742
15868,"/** 
 * Set the size of the write buffer, in MB (for file-based stores). Unless auto-commit is disabled, changes are automatically saved if there are more than this amount of changes. <p> The default is 4 MB. <p> When the value is set to 0 or lower, data is not automatically stored.
 * @param mb the write buffer size, in megabytes
 * @return this
 */
public Builder autoCommitBufferSize(int mb){
  return set(""String_Node_Str"",mb);
}","/** 
 * Set the size of the write buffer, in KB (for file-based stores). Unless auto-commit is disabled, changes are automatically saved if there are more than this amount of changes. <p> The default is 512 KB. <p> When the value is set to 0 or lower, data is not automatically stored.
 * @param kb the write buffer size, in kilobytes
 * @return this
 */
public Builder autoCommitBufferSize(int kb){
  return set(""String_Node_Str"",kb);
}",0.9724770642201837
15869,"/** 
 * Compact the store by moving all chunks next to each other, if there is free space between chunks. This might temporarily double the file size. Chunks are overwritten irrespective of the current retention time. Before overwriting chunks and before resizing the file, syncFile() is called.
 * @return if anything was written
 */
public synchronized boolean compactMoveChunks(){
  checkOpen();
  if (chunks.size() == 0) {
    return false;
  }
  int oldRetentionTime=retentionTime;
  retentionTime=0;
  long time=getTime();
  ArrayList<Chunk> free=New.arrayList();
  for (  Chunk c : chunks.values()) {
    if (c.maxLengthLive == 0) {
      if (canOverwriteChunk(c,time)) {
        free.add(c);
      }
    }
  }
  for (  Chunk c : free) {
    chunks.remove(c.id);
    markMetaChanged();
    meta.remove(""String_Node_Str"" + c.id);
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.free(c.start,length);
  }
  if (fileStore.getFillRate() == 100) {
    return false;
  }
  long firstFree=fileStore.getFirstFree();
  ArrayList<Chunk> move=New.arrayList();
  for (  Chunk c : chunks.values()) {
    if (c.start > firstFree) {
      move.add(c);
    }
  }
  for (  Chunk c : move) {
    WriteBuffer buff=getWriteBuffer();
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    buff.limit(length);
    ByteBuffer buff2=fileStore.readFully(c.start,length);
    buff.put(buff2);
    long end=getEndPosition();
    fileStore.markUsed(end,length);
    fileStore.free(c.start,length);
    c.start=end;
    buff.position(0);
    c.writeHeader(buff);
    buff.position(buff.limit() - BLOCK_SIZE);
    byte[] header=getStoreHeaderBytes();
    buff.put(header);
    buff.put(new byte[BLOCK_SIZE - header.length]);
    buff.position(0);
    fileStore.writeFully(end,buff.getBuffer());
    releaseWriteBuffer(buff);
    markMetaChanged();
    meta.put(""String_Node_Str"" + c.id,c.asString());
  }
  boolean oldReuse=reuseSpace;
  reuseSpace=false;
  commitAndSave();
  sync();
  reuseSpace=true;
  for (  Chunk c : move) {
    if (!chunks.containsKey(c.id)) {
      continue;
    }
    WriteBuffer buff=getWriteBuffer();
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    buff.limit(length);
    ByteBuffer buff2=fileStore.readFully(c.start,length);
    buff.put(buff2);
    long pos=fileStore.allocate(length);
    fileStore.free(c.start,length);
    buff.position(0);
    c.start=pos;
    c.writeHeader(buff);
    buff.position(buff.limit() - BLOCK_SIZE);
    byte[] header=getStoreHeaderBytes();
    buff.put(header);
    buff.put(new byte[BLOCK_SIZE - header.length]);
    buff.position(0);
    fileStore.writeFully(pos,buff.getBuffer());
    releaseWriteBuffer(buff);
    markMetaChanged();
    meta.put(""String_Node_Str"" + c.id,c.asString());
  }
  commitAndSave();
  sync();
  shrinkFileIfPossible(0);
  reuseSpace=oldReuse;
  retentionTime=oldRetentionTime;
  return true;
}","/** 
 * Compact the store by moving all chunks next to each other, if there is free space between chunks. This might temporarily double the file size. Chunks are overwritten irrespective of the current retention time. Before overwriting chunks and before resizing the file, syncFile() is called.
 * @return if anything was written
 */
public synchronized boolean compactMoveChunks(){
  checkOpen();
  if (chunks.size() == 0) {
    return false;
  }
  int oldRetentionTime=retentionTime;
  retentionTime=0;
  long time=getTime();
  ArrayList<Chunk> free=New.arrayList();
  for (  Chunk c : chunks.values()) {
    if (c.maxLengthLive == 0) {
      if (canOverwriteChunk(c,time)) {
        free.add(c);
      }
    }
  }
  for (  Chunk c : free) {
    chunks.remove(c.id);
    markMetaChanged();
    meta.remove(""String_Node_Str"" + c.id);
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.free(c.start,length);
  }
  if (fileStore.getFillRate() == 100) {
    return false;
  }
  long firstFree=fileStore.getFirstFree();
  ArrayList<Chunk> move=New.arrayList();
  for (  Chunk c : chunks.values()) {
    if (c.start > firstFree) {
      move.add(c);
    }
  }
  for (  Chunk c : move) {
    WriteBuffer buff=getWriteBuffer();
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    buff.limit(length);
    ByteBuffer buff2=fileStore.readFully(c.start,length);
    buff.put(buff2);
    long end=getFileLengthInUse();
    fileStore.markUsed(end,length);
    fileStore.free(c.start,length);
    c.start=end;
    buff.position(0);
    c.writeHeader(buff);
    buff.position(buff.limit() - BLOCK_SIZE);
    byte[] header=getStoreHeaderBytes();
    buff.put(header);
    buff.put(new byte[BLOCK_SIZE - header.length]);
    buff.position(0);
    fileStore.writeFully(end,buff.getBuffer());
    releaseWriteBuffer(buff);
    markMetaChanged();
    meta.put(""String_Node_Str"" + c.id,c.asString());
  }
  boolean oldReuse=reuseSpace;
  reuseSpace=false;
  commitAndSave();
  sync();
  reuseSpace=true;
  for (  Chunk c : move) {
    if (!chunks.containsKey(c.id)) {
      continue;
    }
    WriteBuffer buff=getWriteBuffer();
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    buff.limit(length);
    ByteBuffer buff2=fileStore.readFully(c.start,length);
    buff.put(buff2);
    long pos=fileStore.allocate(length);
    fileStore.free(c.start,length);
    buff.position(0);
    c.start=pos;
    c.writeHeader(buff);
    buff.position(buff.limit() - BLOCK_SIZE);
    byte[] header=getStoreHeaderBytes();
    buff.put(header);
    buff.put(new byte[BLOCK_SIZE - header.length]);
    buff.position(0);
    fileStore.writeFully(pos,buff.getBuffer());
    releaseWriteBuffer(buff);
    markMetaChanged();
    meta.put(""String_Node_Str"" + c.id,c.asString());
  }
  commitAndSave();
  sync();
  shrinkFileIfPossible(0);
  reuseSpace=oldReuse;
  retentionTime=oldRetentionTime;
  return true;
}",0.995593220338983
15870,"private long storeNow(){
  int currentUnsavedPageCount=unsavedPageCount;
  long storeVersion=currentStoreVersion;
  long version=++currentVersion;
  setWriteVersion(version);
  long time=getTime();
  lastCommitTime=time;
  retainChunk=null;
  Chunk lastChunk=chunks.get(lastChunkId);
  if (lastChunk != null) {
    meta.put(""String_Node_Str"" + lastChunk.id,lastChunk.asString());
    time=Math.max(lastChunk.time,time);
  }
  Chunk c;
  c=new Chunk(++lastChunkId);
  c.maxLength=Long.MAX_VALUE;
  c.maxLengthLive=Long.MAX_VALUE;
  c.start=Long.MAX_VALUE;
  c.length=Integer.MAX_VALUE;
  c.time=time;
  c.version=version;
  chunks.put(c.id,c);
  meta.put(""String_Node_Str"" + c.id,c.asString());
  ArrayList<MVMap<?,?>> list=New.arrayList(maps.values());
  ArrayList<MVMap<?,?>> changed=New.arrayList();
  for (  MVMap<?,?> m : list) {
    m.setWriteVersion(version);
    long v=m.getVersion();
    if (m.getCreateVersion() > storeVersion) {
      continue;
    }
    if (v >= 0 && v >= lastStoredVersion) {
      m.waitUntilWritten(storeVersion);
      MVMap<?,?> r=m.openVersion(storeVersion);
      if (r.getRoot().getPos() == 0) {
        changed.add(r);
      }
    }
  }
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() == 0) {
      meta.put(""String_Node_Str"" + m.getId(),""String_Node_Str"");
    }
 else {
      meta.put(""String_Node_Str"" + m.getId(),String.valueOf(Integer.MAX_VALUE));
    }
  }
  Set<Chunk> removedChunks=applyFreedSpace(storeVersion,time);
  WriteBuffer buff=getWriteBuffer();
  c.writeHeader(buff);
  c.maxLength=0;
  c.maxLengthLive=0;
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() > 0) {
      p.writeUnsavedRecursive(c,buff);
      long root=p.getPos();
      meta.put(""String_Node_Str"" + m.getId(),""String_Node_Str"" + root);
    }
  }
  meta.put(""String_Node_Str"" + c.id,c.asString());
  meta.setWriteVersion(version);
  Page metaRoot=meta.getRoot();
  metaRoot.writeUnsavedRecursive(c,buff);
  int chunkLength=buff.position();
  int length=MathUtils.roundUpInt(chunkLength,BLOCK_SIZE) + BLOCK_SIZE;
  buff.limit(length);
  for (  Chunk x : removedChunks) {
    int len=MathUtils.roundUpInt(x.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.free(x.start,len);
  }
  long end=getEndPosition();
  long filePos;
  if (reuseSpace) {
    filePos=fileStore.allocate(length);
  }
 else {
    filePos=end;
    fileStore.markUsed(end,length);
  }
  boolean storeAtEndOfFile=filePos + length >= end;
  c.start=filePos;
  c.length=chunkLength;
  c.metaRootPos=metaRoot.getPos();
  buff.position(0);
  c.writeHeader(buff);
  rootChunkStart=filePos;
  revertTemp(storeVersion);
  buff.position(buff.limit() - BLOCK_SIZE);
  byte[] header=getStoreHeaderBytes();
  buff.put(header);
  buff.put(new byte[BLOCK_SIZE - header.length]);
  buff.position(0);
  fileStore.writeFully(filePos,buff.getBuffer());
  releaseWriteBuffer(buff);
  if (!storeAtEndOfFile) {
    writeStoreHeader();
    shrinkFileIfPossible(1);
  }
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() > 0) {
      p.writeEnd();
    }
  }
  metaRoot.writeEnd();
  unsavedPageCount=Math.max(0,unsavedPageCount - currentUnsavedPageCount);
  metaChanged=false;
  lastStoredVersion=storeVersion;
  return version;
}","private long storeNow(){
  int currentUnsavedPageCount=unsavedPageCount;
  long storeVersion=currentStoreVersion;
  long version=++currentVersion;
  setWriteVersion(version);
  long time=getTime();
  lastCommitTime=time;
  retainChunk=null;
  Chunk lastChunk=chunks.get(lastChunkId);
  if (lastChunk != null) {
    meta.put(""String_Node_Str"" + lastChunk.id,lastChunk.asString());
    time=Math.max(lastChunk.time,time);
  }
  Chunk c;
  c=new Chunk(++lastChunkId);
  c.maxLength=Long.MAX_VALUE;
  c.maxLengthLive=Long.MAX_VALUE;
  c.start=Long.MAX_VALUE;
  c.length=Integer.MAX_VALUE;
  c.time=time;
  c.version=version;
  chunks.put(c.id,c);
  meta.put(""String_Node_Str"" + c.id,c.asString());
  ArrayList<MVMap<?,?>> list=New.arrayList(maps.values());
  ArrayList<MVMap<?,?>> changed=New.arrayList();
  for (  MVMap<?,?> m : list) {
    m.setWriteVersion(version);
    long v=m.getVersion();
    if (m.getCreateVersion() > storeVersion) {
      continue;
    }
    if (v >= 0 && v >= lastStoredVersion) {
      m.waitUntilWritten(storeVersion);
      MVMap<?,?> r=m.openVersion(storeVersion);
      if (r.getRoot().getPos() == 0) {
        changed.add(r);
      }
    }
  }
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() == 0) {
      meta.put(""String_Node_Str"" + m.getId(),""String_Node_Str"");
    }
 else {
      meta.put(""String_Node_Str"" + m.getId(),String.valueOf(Integer.MAX_VALUE));
    }
  }
  Set<Chunk> removedChunks=applyFreedSpace(storeVersion,time);
  WriteBuffer buff=getWriteBuffer();
  c.writeHeader(buff);
  c.maxLength=0;
  c.maxLengthLive=0;
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() > 0) {
      p.writeUnsavedRecursive(c,buff);
      long root=p.getPos();
      meta.put(""String_Node_Str"" + m.getId(),""String_Node_Str"" + root);
    }
  }
  meta.put(""String_Node_Str"" + c.id,c.asString());
  meta.setWriteVersion(version);
  Page metaRoot=meta.getRoot();
  metaRoot.writeUnsavedRecursive(c,buff);
  int chunkLength=buff.position();
  int length=MathUtils.roundUpInt(chunkLength,BLOCK_SIZE) + BLOCK_SIZE;
  buff.limit(length);
  for (  Chunk x : removedChunks) {
    int len=MathUtils.roundUpInt(x.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.free(x.start,len);
  }
  long end=getFileLengthInUse();
  long filePos;
  if (reuseSpace) {
    filePos=fileStore.allocate(length);
  }
 else {
    filePos=end;
    fileStore.markUsed(end,length);
  }
  boolean storeAtEndOfFile=filePos + length >= fileStore.size();
  c.start=filePos;
  c.length=chunkLength;
  c.metaRootPos=metaRoot.getPos();
  buff.position(0);
  c.writeHeader(buff);
  rootChunkStart=filePos;
  revertTemp(storeVersion);
  buff.position(buff.limit() - BLOCK_SIZE);
  byte[] header=getStoreHeaderBytes();
  buff.put(header);
  buff.put(new byte[BLOCK_SIZE - header.length]);
  buff.position(0);
  fileStore.writeFully(filePos,buff.getBuffer());
  releaseWriteBuffer(buff);
  if (!storeAtEndOfFile) {
    writeStoreHeader();
    shrinkFileIfPossible(1);
  }
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() > 0) {
      p.writeEnd();
    }
  }
  metaRoot.writeEnd();
  unsavedPageCount=Math.max(0,unsavedPageCount - currentUnsavedPageCount);
  metaChanged=false;
  lastStoredVersion=storeVersion;
  return version;
}",0.9931952215333434
15871,"/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  this.compress=config.containsKey(""String_Node_Str"");
  Object o=config.get(""String_Node_Str"");
  pageSplitSize=o == null ? 16 * 1024 : (Integer)o;
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMapConcurrent<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,String> c=New.hashMap();
  c.put(""String_Node_Str"",""String_Node_Str"");
  c.put(""String_Node_Str"",Long.toString(currentVersion));
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  String fileName=(String)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    return;
  }
  if (fileStore == null) {
    fileStore=new FileStore();
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  if (mb > 0) {
    int maxMemoryBytes=mb * 1024 * 1024;
    int averageMemory=Math.max(10,pageSplitSize / 2);
    int segmentCount=16;
    int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
    cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
  }
  o=config.get(""String_Node_Str"");
  mb=o == null ? 4 : (Integer)o;
  int autoCommitBufferSize=mb * 1024 * 1024;
  int div=pageSplitSize;
  autoCommitPageCount=autoCommitBufferSize / (div == 0 ? 1 : div);
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    fileStore.open(fileName,readOnly,encryptionKey);
    if (fileStore.size() == 0) {
      creationTime=0;
      creationTime=getTime();
      lastCommitTime=creationTime;
      storeHeader.put(""String_Node_Str"",""String_Node_Str"");
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + BLOCK_SIZE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + FORMAT_WRITE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + creationTime);
      writeStoreHeader();
    }
 else {
      readStoreHeader();
      long format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),0);
      if (format > FORMAT_WRITE && !fileStore.isReadOnly()) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"" + ""String_Node_Str"",format,FORMAT_WRITE);
      }
      format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),format);
      if (format > FORMAT_READ) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"",format,FORMAT_READ);
      }
      if (rootChunkStart > 0) {
        readMeta();
      }
    }
  }
 catch (  IllegalStateException e) {
    try {
      closeStore(false);
    }
 catch (    Exception e2) {
    }
    throw e;
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastCommitTime=getTime();
  o=config.get(""String_Node_Str"");
  int delay=o == null ? 1000 : (Integer)o;
  setAutoCommitDelay(delay);
}","/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  this.compress=config.containsKey(""String_Node_Str"");
  Object o=config.get(""String_Node_Str"");
  pageSplitSize=o == null ? 16 * 1024 : (Integer)o;
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMapConcurrent<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,String> c=New.hashMap();
  c.put(""String_Node_Str"",""String_Node_Str"");
  c.put(""String_Node_Str"",Long.toString(currentVersion));
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  String fileName=(String)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    return;
  }
  if (fileStore == null) {
    fileStore=new FileStore();
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  if (mb > 0) {
    int maxMemoryBytes=mb * 1024 * 1024;
    int averageMemory=Math.max(10,pageSplitSize / 2);
    int segmentCount=16;
    int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
    cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
  }
  o=config.get(""String_Node_Str"");
  int kb=o == null ? 512 : (Integer)o;
  int autoCommitBufferSize=kb * 1024 * 19;
  int div=pageSplitSize;
  autoCommitPageCount=autoCommitBufferSize / (div == 0 ? 1 : div);
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    fileStore.open(fileName,readOnly,encryptionKey);
    if (fileStore.size() == 0) {
      creationTime=0;
      creationTime=getTime();
      lastCommitTime=creationTime;
      storeHeader.put(""String_Node_Str"",""String_Node_Str"");
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + BLOCK_SIZE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + FORMAT_WRITE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + creationTime);
      writeStoreHeader();
    }
 else {
      readStoreHeader();
      long format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),0);
      if (format > FORMAT_WRITE && !fileStore.isReadOnly()) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"" + ""String_Node_Str"",format,FORMAT_WRITE);
      }
      format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),format);
      if (format > FORMAT_READ) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"",format,FORMAT_READ);
      }
      if (rootChunkStart > 0) {
        readMeta();
      }
    }
  }
 catch (  IllegalStateException e) {
    try {
      closeStore(false);
    }
 catch (    Exception e2) {
    }
    throw e;
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastCommitTime=getTime();
  o=config.get(""String_Node_Str"");
  int delay=o == null ? 1000 : (Integer)o;
  setAutoCommitDelay(delay);
}",0.9975720789074356
15872,"@Override public void remove(Session session){
  if (!treeMap.isClosed()) {
    treeMap.removeMap();
  }
}","@Override public void remove(Session session){
  if (!treeMap.isClosed()) {
    MVStore store=session.getDatabase().getMvStore().getStore();
    store.removeMap(treeMap);
  }
}",0.7375886524822695
15873,"/** 
 * Revert to the beginning of the given version. All later changes (stored or not) are forgotten. All maps that were created later are closed. A rollback to a version before the last stored version is immediately persisted. Rollback to version 0 means all data is removed.
 * @param version the version to revert to
 */
public synchronized void rollbackTo(long version){
  checkOpen();
  if (version == 0) {
    for (    MVMap<?,?> m : maps.values()) {
      m.close();
    }
    meta.clear();
    chunks.clear();
    if (fileStore != null) {
      fileStore.clear();
    }
    maps.clear();
    freedPageSpace.clear();
    currentVersion=version;
    setWriteVersion(version);
    lastCommittedVersion=version;
    metaChanged=false;
    return;
  }
  DataUtils.checkArgument(isKnownVersion(version),""String_Node_Str"",version);
  for (  MVMap<?,?> m : maps.values()) {
    m.rollbackTo(version);
  }
synchronized (freedPageSpace) {
    for (long v=currentVersion; v >= version; v--) {
      if (freedPageSpace.size() == 0) {
        break;
      }
      freedPageSpace.remove(v);
    }
  }
  meta.rollbackTo(version);
  metaChanged=false;
  boolean loadFromFile=false;
  int removeChunksNewerThan=-1;
  for (int chunkId=lastChunkId; ; chunkId--) {
    Chunk x=chunks.get(chunkId);
    if (x == null) {
      break;
    }
 else     if (x.version >= version) {
      removeChunksNewerThan=x.id;
    }
  }
  if (removeChunksNewerThan >= 0 && lastChunkId > removeChunksNewerThan) {
    revertTemp(version);
    loadFromFile=true;
    Chunk last=null;
    while (true) {
      last=chunks.get(lastChunkId);
      if (last == null) {
        break;
      }
 else       if (last.id <= removeChunksNewerThan) {
        break;
      }
      chunks.remove(lastChunkId);
      int len=MathUtils.roundUpInt(last.length,BLOCK_SIZE) + BLOCK_SIZE;
      fileStore.free(last.start,len);
      lastChunkId--;
    }
    rootChunkStart=last.start;
    writeStoreHeader();
    byte[] bytes=getStoreHeaderBytes();
    ByteBuffer header=ByteBuffer.allocate(BLOCK_SIZE);
    header.put(bytes);
    header.rewind();
    fileStore.writeFully(fileStore.size(),header);
    readStoreHeader();
    readMeta();
  }
  for (  MVMap<?,?> m : New.arrayList(maps.values())) {
    int id=m.getId();
    if (m.getCreateVersion() >= version) {
      m.close();
      maps.remove(id);
    }
 else {
      if (loadFromFile) {
        String r=meta.get(""String_Node_Str"" + id);
        long root=r == null ? 0 : Long.parseLong(r);
        m.setRootPos(root,-1);
      }
    }
  }
  Chunk c=chunks.get(lastChunkId - 1);
  if (c != null) {
    markMetaChanged();
    meta.put(""String_Node_Str"" + c.id,c.asString());
  }
  currentVersion=version;
  setWriteVersion(version);
  lastCommittedVersion=version;
}","/** 
 * Revert to the beginning of the given version. All later changes (stored or not) are forgotten. All maps that were created later are closed. A rollback to a version before the last stored version is immediately persisted. Rollback to version 0 means all data is removed.
 * @param version the version to revert to
 */
public synchronized void rollbackTo(long version){
  checkOpen();
  if (version == 0) {
    for (    MVMap<?,?> m : maps.values()) {
      m.close();
    }
    meta.clear();
    chunks.clear();
    if (fileStore != null) {
      fileStore.clear();
    }
    maps.clear();
    freedPageSpace.clear();
    currentVersion=version;
    setWriteVersion(version);
    lastCommittedVersion=version;
    metaChanged=false;
    return;
  }
  DataUtils.checkArgument(isKnownVersion(version),""String_Node_Str"",version);
  for (  MVMap<?,?> m : maps.values()) {
    m.rollbackTo(version);
  }
  for (long v=currentVersion; v >= version; v--) {
    if (freedPageSpace.size() == 0) {
      break;
    }
    freedPageSpace.remove(v);
  }
  meta.rollbackTo(version);
  metaChanged=false;
  boolean loadFromFile=false;
  int removeChunksNewerThan=-1;
  for (int chunkId=lastChunkId; ; chunkId--) {
    Chunk x=chunks.get(chunkId);
    if (x == null) {
      break;
    }
 else     if (x.version >= version) {
      removeChunksNewerThan=x.id;
    }
  }
  if (removeChunksNewerThan >= 0 && lastChunkId > removeChunksNewerThan) {
    revertTemp(version);
    loadFromFile=true;
    Chunk last=null;
    while (true) {
      last=chunks.get(lastChunkId);
      if (last == null) {
        break;
      }
 else       if (last.id <= removeChunksNewerThan) {
        break;
      }
      chunks.remove(lastChunkId);
      int len=MathUtils.roundUpInt(last.length,BLOCK_SIZE) + BLOCK_SIZE;
      fileStore.free(last.start,len);
      lastChunkId--;
    }
    rootChunkStart=last.start;
    writeStoreHeader();
    byte[] bytes=getStoreHeaderBytes();
    ByteBuffer header=ByteBuffer.allocate(BLOCK_SIZE);
    header.put(bytes);
    header.rewind();
    fileStore.writeFully(fileStore.size(),header);
    readStoreHeader();
    readMeta();
  }
  for (  MVMap<?,?> m : New.arrayList(maps.values())) {
    int id=m.getId();
    if (m.getCreateVersion() >= version) {
      m.close();
      maps.remove(id);
    }
 else {
      if (loadFromFile) {
        String r=meta.get(""String_Node_Str"" + id);
        long root=r == null ? 0 : Long.parseLong(r);
        m.setRootPos(root,-1);
      }
    }
  }
  Chunk c=chunks.get(lastChunkId - 1);
  if (c != null) {
    markMetaChanged();
    meta.put(""String_Node_Str"" + c.id,c.asString());
  }
  currentVersion=version;
  setWriteVersion(version);
  lastCommittedVersion=version;
}",0.955587914088096
15874,"/** 
 * Rename a map.
 * @param map the map
 * @param newName the new name
 */
void renameMap(MVMap<?,?> map,String newName){
  checkOpen();
  DataUtils.checkArgument(map != meta,""String_Node_Str"");
  int id=map.getId();
  String oldName=getMapName(id);
  if (oldName.equals(newName)) {
    return;
  }
  DataUtils.checkArgument(!meta.containsKey(""String_Node_Str"" + newName),""String_Node_Str"",newName);
  markMetaChanged();
  meta.remove(""String_Node_Str"" + oldName);
  meta.put(""String_Node_Str"" + id,map.asString(newName));
  meta.put(""String_Node_Str"" + newName,Integer.toString(id));
}","/** 
 * Rename a map.
 * @param map the map
 * @param newName the new name
 */
public void renameMap(MVMap<?,?> map,String newName){
  checkOpen();
  DataUtils.checkArgument(map != meta,""String_Node_Str"");
  int id=map.getId();
  String oldName=getMapName(id);
  if (oldName.equals(newName)) {
    return;
  }
  DataUtils.checkArgument(!meta.containsKey(""String_Node_Str"" + newName),""String_Node_Str"",newName);
  markMetaChanged();
  meta.remove(""String_Node_Str"" + oldName);
  meta.put(""String_Node_Str"" + id,map.asString(newName));
  meta.put(""String_Node_Str"" + newName,Integer.toString(id));
}",0.9941027801179444
15875,"/** 
 * Apply the freed space to the chunk metadata. The metadata is updated, but freed chunks are not removed yet.
 * @param storeVersion apply up to the given version
 * @return the set of completely freed chunks (might be empty)
 */
private Set<Chunk> applyFreedSpace(long storeVersion,long time){
  Set<Chunk> removedChunks=New.hashSet();
  while (true) {
    ArrayList<Chunk> modified=New.arrayList();
    ArrayList<Long> keys=new ArrayList<Long>(freedPageSpace.keySet());
    for (Iterator<Long> it=keys.iterator(); it.hasNext(); ) {
      long v=it.next();
      if (v > storeVersion) {
        continue;
      }
      Map<Integer,Chunk> freed=freedPageSpace.get(v);
      for (      Chunk f : freed.values()) {
        Chunk c=chunks.get(f.id);
        if (c == null) {
          continue;
        }
        c.maxLengthLive+=f.maxLengthLive;
        c.pageCountLive+=f.pageCountLive;
        if (c.pageCountLive < 0) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",c.pageCountLive);
        }
        if (c.maxLengthLive < 0) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",c.maxLengthLive);
        }
        if (c.pageCount == 0 && c.maxLengthLive > 0) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",c.maxLengthLive);
        }
        modified.add(c);
      }
      freedPageSpace.remove(v);
    }
    for (    Chunk c : modified) {
      if (c.maxLengthLive == 0) {
        if (canOverwriteChunk(c,time)) {
          removedChunks.add(c);
          chunks.remove(c.id);
          meta.remove(""String_Node_Str"" + c.id);
        }
 else {
          registerFreePage(storeVersion + 1,c.id,0,0);
        }
      }
 else {
        meta.put(""String_Node_Str"" + c.id,c.asString());
      }
    }
    if (modified.size() == 0) {
      break;
    }
  }
  return removedChunks;
}","/** 
 * Apply the freed space to the chunk metadata. The metadata is updated, but freed chunks are not removed yet.
 * @param storeVersion apply up to the given version
 * @return the set of completely freed chunks (might be empty)
 */
private Set<Chunk> applyFreedSpace(long storeVersion,long time){
  Set<Chunk> removedChunks=New.hashSet();
  while (true) {
    ArrayList<Chunk> modified=New.arrayList();
    Iterator<Entry<Long,HashMap<Integer,Chunk>>> it;
    it=freedPageSpace.entrySet().iterator();
    while (it.hasNext()) {
      Entry<Long,HashMap<Integer,Chunk>> e=it.next();
      long v=e.getKey();
      if (v > storeVersion) {
        continue;
      }
      Map<Integer,Chunk> freed=e.getValue();
      for (      Chunk f : freed.values()) {
        Chunk c=chunks.get(f.id);
        if (c == null) {
          continue;
        }
        c.maxLengthLive+=f.maxLengthLive;
        c.pageCountLive+=f.pageCountLive;
        if (c.pageCountLive < 0) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",c.pageCountLive);
        }
        if (c.maxLengthLive < 0) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",c.maxLengthLive);
        }
        if (c.pageCount == 0 && c.maxLengthLive > 0) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",c.maxLengthLive);
        }
        modified.add(c);
      }
      it.remove();
    }
    for (    Chunk c : modified) {
      if (c.maxLengthLive == 0) {
        if (canOverwriteChunk(c,time)) {
          removedChunks.add(c);
          chunks.remove(c.id);
          meta.remove(""String_Node_Str"" + c.id);
        }
 else {
          registerFreePage(storeVersion + 1,c.id,0,0);
        }
      }
 else {
        meta.put(""String_Node_Str"" + c.id,c.asString());
      }
    }
    if (modified.size() == 0) {
      break;
    }
  }
  return removedChunks;
}",0.8749032757286562
15876,"/** 
 * Remove a map.
 * @param id the map id
 */
void removeMap(int id){
  String name=getMapName(id);
  markMetaChanged();
  meta.remove(""String_Node_Str"" + id);
  meta.remove(""String_Node_Str"" + name);
  meta.remove(""String_Node_Str"" + id);
  maps.remove(id);
}","/** 
 * Remove a map.
 * @param map the map
 */
public void removeMap(MVMap<?,?> map){
  checkOpen();
  DataUtils.checkArgument(map != meta,""String_Node_Str"");
  map.clear();
  int id=map.getId();
  String name=getMapName(id);
  markMetaChanged();
  meta.remove(""String_Node_Str"" + id);
  meta.remove(""String_Node_Str"" + name);
  meta.remove(""String_Node_Str"" + id);
  maps.remove(id);
}",0.7311827956989247
15877,"@Override public void remove(Session session){
  TransactionMap<Value,Value> map=getMap(session);
  if (!map.isClosed()) {
    map.removeMap();
  }
}","@Override public void remove(Session session){
  TransactionMap<Value,Value> map=getMap(session);
  if (!map.isClosed()) {
    Transaction t=mvTable.getTransaction(session);
    t.removeMap(map);
  }
}",0.8342857142857143
15878,"public MVPrimaryIndex(Database db,MVTable table,int id,IndexColumn[] columns,IndexType indexType){
  this.mvTable=table;
  initBaseIndex(table,id,table.getName() + ""String_Node_Str"",columns,indexType);
  int[] sortTypes=new int[columns.length];
  for (int i=0; i < columns.length; i++) {
    sortTypes[i]=SortOrder.ASCENDING;
  }
  ValueDataType keyType=new ValueDataType(null,null,null);
  ValueDataType valueType=new ValueDataType(db.getCompareMode(),db,sortTypes);
  mapName=""String_Node_Str"" + getId();
  MVMap.Builder<Value,Value> mapBuilder=new MVMap.Builder<Value,Value>().keyType(keyType).valueType(valueType);
  dataMap=mvTable.getTransaction(null).openMap(mapName,mapBuilder);
  Value k=dataMap.lastKey();
  lastKey=k == null ? 0 : k.getLong();
}","public MVPrimaryIndex(Database db,MVTable table,int id,IndexColumn[] columns,IndexType indexType){
  this.mvTable=table;
  initBaseIndex(table,id,table.getName() + ""String_Node_Str"",columns,indexType);
  int[] sortTypes=new int[columns.length];
  for (int i=0; i < columns.length; i++) {
    sortTypes[i]=SortOrder.ASCENDING;
  }
  ValueDataType keyType=new ValueDataType(null,null,null);
  ValueDataType valueType=new ValueDataType(db.getCompareMode(),db,sortTypes);
  mapName=""String_Node_Str"" + getId();
  dataMap=mvTable.getTransaction(null).openMap(mapName,keyType,valueType);
  Value k=dataMap.lastKey();
  lastKey=k == null ? 0 : k.getLong();
}",0.7533759772565742
15879,"public MVSecondaryIndex(Database db,MVTable table,int id,String indexName,IndexColumn[] columns,IndexType indexType){
  this.mvTable=table;
  initBaseIndex(table,id,indexName,columns,indexType);
  if (!database.isStarting()) {
    checkIndexColumnTypes(columns);
  }
  keyColumns=columns.length + 1;
  int[] sortTypes=new int[keyColumns];
  for (int i=0; i < columns.length; i++) {
    sortTypes[i]=columns[i].sortType;
  }
  sortTypes[keyColumns - 1]=SortOrder.ASCENDING;
  mapName=""String_Node_Str"" + getId();
  ValueDataType keyType=new ValueDataType(db.getCompareMode(),db,sortTypes);
  ValueDataType valueType=new ValueDataType(null,null,null);
  MVMap.Builder<Value,Value> mapBuilder=new MVMap.Builder<Value,Value>().keyType(keyType).valueType(valueType);
  dataMap=mvTable.getTransaction(null).openMap(mapName,mapBuilder);
  if (keyType != dataMap.map.getKeyType()) {
    throw DbException.throwInternalError(""String_Node_Str"");
  }
}","public MVSecondaryIndex(Database db,MVTable table,int id,String indexName,IndexColumn[] columns,IndexType indexType){
  this.mvTable=table;
  initBaseIndex(table,id,indexName,columns,indexType);
  if (!database.isStarting()) {
    checkIndexColumnTypes(columns);
  }
  keyColumns=columns.length + 1;
  int[] sortTypes=new int[keyColumns];
  for (int i=0; i < columns.length; i++) {
    sortTypes[i]=columns[i].sortType;
  }
  sortTypes[keyColumns - 1]=SortOrder.ASCENDING;
  mapName=""String_Node_Str"" + getId();
  ValueDataType keyType=new ValueDataType(db.getCompareMode(),db,sortTypes);
  ValueDataType valueType=new ValueDataType(null,null,null);
  dataMap=mvTable.getTransaction(null).openMap(mapName,keyType,valueType);
  if (keyType != dataMap.map.getKeyType()) {
    throw DbException.throwInternalError(""String_Node_Str"");
  }
}",0.8846370287000562
15880,"@Override public void remove(Session session){
  TransactionMap<Value,Value> map=getMap(session);
  if (!map.isClosed()) {
    map.removeMap();
  }
}","@Override public void remove(Session session){
  TransactionMap<Value,Value> map=getMap(session);
  if (!map.isClosed()) {
    Transaction t=mvTable.getTransaction(session);
    t.removeMap(map);
  }
}",0.8342857142857143
15881,"@Override public Index addIndex(Session session,String indexName,int indexId,IndexColumn[] cols,IndexType indexType,boolean create,String indexComment){
  if (indexType.isPrimaryKey()) {
    for (    IndexColumn c : cols) {
      Column column=c.column;
      if (column.isNullable()) {
        throw DbException.get(ErrorCode.COLUMN_MUST_NOT_BE_NULLABLE_1,column.getName());
      }
      column.setPrimaryKey(true);
    }
  }
  boolean isSessionTemporary=isTemporary() && !isGlobalTemporary();
  if (!isSessionTemporary) {
    database.lockMeta(session);
  }
  Index index;
  int mainIndexColumn;
  mainIndexColumn=getMainIndexColumn(indexType,cols);
  if (database.isStarting()) {
    if (store.store.hasMap(""String_Node_Str"" + indexId)) {
      mainIndexColumn=-1;
    }
  }
 else   if (primaryIndex.getRowCount(session) != 0) {
    mainIndexColumn=-1;
  }
  if (mainIndexColumn != -1) {
    primaryIndex.setMainIndexColumn(mainIndexColumn);
    index=new MVDelegateIndex(this,indexId,indexName,primaryIndex,indexType);
  }
 else   if (indexType.isSpatial()) {
    index=new SpatialTreeIndex(this,indexId,indexName,cols,indexType,true,create,session);
  }
 else {
    index=new MVSecondaryIndex(session.getDatabase(),this,indexId,indexName,cols,indexType);
  }
  if (index.needRebuild() && rowCount > 0) {
    try {
      Index scan=getScanIndex(session);
      long remaining=scan.getRowCount(session);
      long total=remaining;
      Cursor cursor=scan.find(session,null,null);
      long i=0;
      int bufferSize=(int)Math.min(rowCount,Constants.DEFAULT_MAX_MEMORY_ROWS);
      ArrayList<Row> buffer=New.arrayList(bufferSize);
      String n=getName() + ""String_Node_Str"" + index.getName();
      int t=MathUtils.convertLongToInt(total);
      while (cursor.next()) {
        Row row=cursor.get();
        buffer.add(row);
        database.setProgress(DatabaseEventListener.STATE_CREATE_INDEX,n,MathUtils.convertLongToInt(i++),t);
        if (buffer.size() >= bufferSize) {
          addRowsToIndex(session,buffer,index);
        }
        remaining--;
      }
      addRowsToIndex(session,buffer,index);
      if (SysProperties.CHECK && remaining != 0) {
        DbException.throwInternalError(""String_Node_Str"" + remaining + ""String_Node_Str""+ getName());
      }
    }
 catch (    DbException e) {
      getSchema().freeUniqueName(indexName);
      try {
        index.remove(session);
      }
 catch (      DbException e2) {
        trace.error(e2,""String_Node_Str"");
        throw e2;
      }
      throw e;
    }
  }
  index.setTemporary(isTemporary());
  if (index.getCreateSQL() != null) {
    index.setComment(indexComment);
    if (isSessionTemporary) {
      session.addLocalTempTableIndex(index);
    }
 else {
      database.addSchemaObject(session,index);
    }
  }
  indexes.add(index);
  setModified();
  return index;
}","@Override public Index addIndex(Session session,String indexName,int indexId,IndexColumn[] cols,IndexType indexType,boolean create,String indexComment){
  if (indexType.isPrimaryKey()) {
    for (    IndexColumn c : cols) {
      Column column=c.column;
      if (column.isNullable()) {
        throw DbException.get(ErrorCode.COLUMN_MUST_NOT_BE_NULLABLE_1,column.getName());
      }
      column.setPrimaryKey(true);
    }
  }
  boolean isSessionTemporary=isTemporary() && !isGlobalTemporary();
  if (!isSessionTemporary) {
    database.lockMeta(session);
  }
  Index index;
  int mainIndexColumn;
  mainIndexColumn=getMainIndexColumn(indexType,cols);
  if (database.isStarting()) {
    if (store.store.hasMap(""String_Node_Str"" + indexId)) {
      mainIndexColumn=-1;
    }
  }
 else   if (primaryIndex.getRowCount(session) != 0) {
    mainIndexColumn=-1;
  }
  if (mainIndexColumn != -1) {
    primaryIndex.setMainIndexColumn(mainIndexColumn);
    index=new MVDelegateIndex(this,indexId,indexName,primaryIndex,indexType);
  }
 else   if (indexType.isSpatial()) {
    int todo;
    index=new SpatialTreeIndex(this,indexId,indexName,cols,indexType,true,create,session);
  }
 else {
    index=new MVSecondaryIndex(session.getDatabase(),this,indexId,indexName,cols,indexType);
  }
  if (index.needRebuild() && rowCount > 0) {
    try {
      Index scan=getScanIndex(session);
      long remaining=scan.getRowCount(session);
      long total=remaining;
      Cursor cursor=scan.find(session,null,null);
      long i=0;
      int bufferSize=(int)Math.min(rowCount,Constants.DEFAULT_MAX_MEMORY_ROWS);
      ArrayList<Row> buffer=New.arrayList(bufferSize);
      String n=getName() + ""String_Node_Str"" + index.getName();
      int t=MathUtils.convertLongToInt(total);
      while (cursor.next()) {
        Row row=cursor.get();
        buffer.add(row);
        database.setProgress(DatabaseEventListener.STATE_CREATE_INDEX,n,MathUtils.convertLongToInt(i++),t);
        if (buffer.size() >= bufferSize) {
          addRowsToIndex(session,buffer,index);
        }
        remaining--;
      }
      addRowsToIndex(session,buffer,index);
      if (SysProperties.CHECK && remaining != 0) {
        DbException.throwInternalError(""String_Node_Str"" + remaining + ""String_Node_Str""+ getName());
      }
    }
 catch (    DbException e) {
      getSchema().freeUniqueName(indexName);
      try {
        index.remove(session);
      }
 catch (      DbException e2) {
        trace.error(e2,""String_Node_Str"");
        throw e2;
      }
      throw e;
    }
  }
  index.setTemporary(isTemporary());
  if (index.getCreateSQL() != null) {
    index.setComment(indexComment);
    if (isSessionTemporary) {
      session.addLocalTempTableIndex(index);
    }
 else {
      database.addSchemaObject(session,index);
    }
  }
  indexes.add(index);
  setModified();
  return index;
}",0.997546442341395
15882,"/** 
 * Analyze this table.
 * @param session the session
 * @param table the table
 * @param sample the number of sample rows
 * @param manual whether the command was called by the user
 */
public static void analyzeTable(Session session,Table table,int sample,boolean manual){
  if (!(table.getTableType().equals(Table.TABLE)) || table.isHidden() || session == null) {
    return;
  }
  if (!manual) {
    if (session.getDatabase().isSysTableLocked()) {
      return;
    }
    if (table.hasSelectTrigger()) {
      return;
    }
  }
  if (table.isTemporary() && !table.isGlobalTemporary() && session.findLocalTempTable(table.getName()) == null) {
    return;
  }
  if (table.isLockedExclusively() && !table.isLockedExclusivelyBy(session)) {
    return;
  }
  if (!session.getUser().hasRight(table,Right.SELECT)) {
    return;
  }
  if (session.getCancel() != 0) {
    return;
  }
  Database db=session.getDatabase();
  StatementBuilder buff=new StatementBuilder(""String_Node_Str"");
  ArrayList<Parameter> parameters=New.arrayList();
  int parameterIndex=0;
  Column[] columns=table.getColumns();
  for (  Column col : columns) {
    buff.appendExceptFirst(""String_Node_Str"");
    int type=col.getType();
    if (type == Value.BLOB || type == Value.CLOB) {
      buff.append(""String_Node_Str"");
    }
 else {
      buff.append(""String_Node_Str"").append(col.getSQL()).append(')');
    }
  }
  buff.append(""String_Node_Str"").append(table.getSQL());
  if (sample > 0) {
    buff.append(""String_Node_Str"");
    Parameter p=new Parameter(parameterIndex++);
    p.setValue(ValueInt.get(1));
    parameters.add(p);
    p=new Parameter(parameterIndex++);
    p.setValue(ValueInt.get(sample));
    parameters.add(p);
  }
  String sql=buff.toString();
  Prepared command=session.prepare(sql);
  command.setParameterList(parameters);
  ResultInterface result=command.query(0);
  result.next();
  for (int j=0; j < columns.length; j++) {
    int selectivity=result.currentRow()[j].getInt();
    columns[j].setSelectivity(selectivity);
  }
  if (manual) {
    db.update(session,table);
  }
 else {
    Session sysSession=db.getSystemSession();
    if (sysSession != session) {
      db.update(sysSession,table);
      sysSession.commit(true);
    }
  }
}","/** 
 * Analyze this table.
 * @param session the session
 * @param table the table
 * @param sample the number of sample rows
 * @param manual whether the command was called by the user
 */
public static void analyzeTable(Session session,Table table,int sample,boolean manual){
  if (!(table.getTableType().equals(Table.TABLE)) || table.isHidden() || session == null) {
    return;
  }
  if (!manual) {
    if (session.getDatabase().isSysTableLocked()) {
      return;
    }
    if (table.hasSelectTrigger()) {
      return;
    }
  }
  if (table.isTemporary() && !table.isGlobalTemporary() && session.findLocalTempTable(table.getName()) == null) {
    return;
  }
  if (table.isLockedExclusively() && !table.isLockedExclusivelyBy(session)) {
    return;
  }
  if (!session.getUser().hasRight(table,Right.SELECT)) {
    return;
  }
  if (session.getCancel() != 0) {
    return;
  }
  Database db=session.getDatabase();
  StatementBuilder buff=new StatementBuilder(""String_Node_Str"");
  Column[] columns=table.getColumns();
  for (  Column col : columns) {
    buff.appendExceptFirst(""String_Node_Str"");
    int type=col.getType();
    if (type == Value.BLOB || type == Value.CLOB) {
      buff.append(""String_Node_Str"");
    }
 else {
      buff.append(""String_Node_Str"").append(col.getSQL()).append(')');
    }
  }
  buff.append(""String_Node_Str"").append(table.getSQL());
  if (sample > 0) {
    buff.append(""String_Node_Str"");
  }
  String sql=buff.toString();
  Prepared command=session.prepare(sql);
  if (sample > 0) {
    ArrayList<Parameter> params=command.getParameters();
    params.get(0).setValue(ValueInt.get(1));
    params.get(1).setValue(ValueInt.get(sample));
  }
  ResultInterface result=command.query(0);
  result.next();
  for (int j=0; j < columns.length; j++) {
    int selectivity=result.currentRow()[j].getInt();
    columns[j].setSelectivity(selectivity);
  }
  if (manual) {
    db.update(session,table);
  }
 else {
    Session sysSession=db.getSystemSession();
    if (sysSession != session) {
      db.update(sysSession,table);
      sysSession.commit(true);
    }
  }
}",0.8728696453247351
15883,"/** 
 * Evict cold entries (resident and non-resident) until the memory limit is reached. The new entry is added as a cold entry, except if it is the only entry.
 * @param newCold a new cold entry
 */
private void evict(Entry<V> newCold){
  while (queueSize < (mapSize >>> 5)) {
    convertOldestHotToCold();
  }
  if (stackSize > 0) {
    addToQueue(queue,newCold);
  }
  while (usedMemory > maxMemory && queueSize > 1) {
    Entry<V> e=queue.queuePrev;
    usedMemory-=e.memory;
    removeFromQueue(e);
    e.value=null;
    e.memory=0;
    addToQueue(queue2,e);
    while (queue2Size + queue2Size > stackSize) {
      e=queue2.queuePrev;
      int hash=getHash(e.key);
      remove(e.key,hash);
    }
  }
}","/** 
 * Evict cold entries (resident and non-resident) until the memory limit is reached. The new entry is added as a cold entry, except if it is the only entry.
 * @param newCold a new cold entry
 */
private void evict(Entry<V> newCold){
  while (queueSize <= (mapSize >>> 5)) {
    convertOldestHotToCold();
  }
  if (stackSize > 0) {
    addToQueue(queue,newCold);
  }
  while (usedMemory > maxMemory && queueSize > 1) {
    Entry<V> e=queue.queuePrev;
    usedMemory-=e.memory;
    removeFromQueue(e);
    e.value=null;
    e.memory=0;
    addToQueue(queue2,e);
    while (queue2Size + queue2Size > stackSize) {
      e=queue2.queuePrev;
      int hash=getHash(e.key);
      remove(e.key,hash);
    }
  }
}",0.9992952783650458
15884,"/** 
 * Evict cold entries (resident and non-resident) until the memory limit is reached. The new entry is added as a cold entry, except if it is the only entry.
 * @param newCold a new cold entry
 */
private void evict(Entry<K,V> newCold){
  while (queueSize < (mapSize >>> 5)) {
    convertOldestHotToCold();
  }
  if (stackSize > 0) {
    addToQueue(queue,newCold);
  }
  while (usedMemory > maxMemory && queueSize > 1) {
    Entry<K,V> e=queue.queuePrev;
    usedMemory-=e.memory;
    removeFromQueue(e);
    e.value=null;
    e.memory=0;
    addToQueue(queue2,e);
    while (queue2Size + queue2Size > stackSize) {
      e=queue2.queuePrev;
      int hash=getHash(e.key);
      remove(e.key,hash);
    }
  }
}","/** 
 * Evict cold entries (resident and non-resident) until the memory limit is reached. The new entry is added as a cold entry, except if it is the only entry.
 * @param newCold a new cold entry
 */
private void evict(Entry<K,V> newCold){
  while (queueSize <= (mapSize >>> 5)) {
    convertOldestHotToCold();
  }
  if (stackSize > 0) {
    addToQueue(queue,newCold);
  }
  while (usedMemory > maxMemory && queueSize > 1) {
    Entry<K,V> e=queue.queuePrev;
    usedMemory-=e.memory;
    removeFromQueue(e);
    e.value=null;
    e.memory=0;
    addToQueue(queue2,e);
    while (queue2Size + queue2Size > stackSize) {
      e=queue2.queuePrev;
      int hash=getHash(e.key);
      remove(e.key,hash);
    }
  }
}",0.9992992291520671
15885,"/** 
 * Compact the store by moving all chunks next to each other, if there is free space between chunks. This might temporarily double the file size. Chunks are overwritten irrespective of the current retention time. Before overwriting chunks and before resizing the file, syncFile() is called.
 * @return if anything was written
 */
public synchronized boolean compactMoveChunks(){
  checkOpen();
  if (chunks.size() == 0) {
    return false;
  }
  int oldRetentionTime=retentionTime;
  retentionTime=0;
  long time=getTime();
  ArrayList<Chunk> free=New.arrayList();
  for (  Chunk c : chunks.values()) {
    if (c.maxLengthLive == 0) {
      if (canOverwriteChunk(c,time)) {
        free.add(c);
      }
    }
  }
  for (  Chunk c : free) {
    chunks.remove(c.id);
    meta.remove(""String_Node_Str"" + c.id);
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.free(c.start,length);
  }
  if (fileStore.getFillRate() == 100) {
    return false;
  }
  long firstFree=fileStore.getFirstFree();
  ArrayList<Chunk> move=New.arrayList();
  for (  Chunk c : chunks.values()) {
    if (c.start > firstFree) {
      move.add(c);
    }
  }
  for (  Chunk c : move) {
    ByteBuffer buff=getWriteBuffer();
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    buff=DataUtils.ensureCapacity(buff,length);
    buff.limit(length);
    ByteBuffer buff2=fileStore.readFully(c.start,length);
    buff.put(buff2);
    long end=getEndPosition();
    fileStore.markUsed(end,length);
    fileStore.free(c.start,length);
    c.start=end;
    buff.position(0);
    c.writeHeader(buff);
    buff.position(buff.limit() - BLOCK_SIZE);
    byte[] header=getStoreHeaderBytes();
    buff.put(header);
    buff.put(new byte[BLOCK_SIZE - header.length]);
    buff.position(0);
    fileStore.writeFully(end,buff);
    releaseWriteBuffer(buff);
    meta.put(""String_Node_Str"" + c.id,c.asString());
  }
  boolean oldReuse=reuseSpace;
  reuseSpace=false;
  store();
  sync();
  reuseSpace=true;
  for (  Chunk c : move) {
    ByteBuffer buff=getWriteBuffer();
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    buff=DataUtils.ensureCapacity(buff,length);
    buff.limit(length);
    ByteBuffer buff2=fileStore.readFully(c.start,length);
    buff.put(buff2);
    long pos=fileStore.allocate(length);
    fileStore.free(c.start,length);
    buff.position(0);
    c.start=pos;
    c.writeHeader(buff);
    buff.position(buff.limit() - BLOCK_SIZE);
    byte[] header=getStoreHeaderBytes();
    buff.put(header);
    buff.put(new byte[BLOCK_SIZE - header.length]);
    buff.position(0);
    fileStore.writeFully(pos,buff);
    releaseWriteBuffer(buff);
    meta.put(""String_Node_Str"" + c.id,c.asString());
  }
  store();
  sync();
  shrinkFileIfPossible(0);
  reuseSpace=oldReuse;
  retentionTime=oldRetentionTime;
  return true;
}","/** 
 * Compact the store by moving all chunks next to each other, if there is free space between chunks. This might temporarily double the file size. Chunks are overwritten irrespective of the current retention time. Before overwriting chunks and before resizing the file, syncFile() is called.
 * @return if anything was written
 */
public synchronized boolean compactMoveChunks(){
  checkOpen();
  if (chunks.size() == 0) {
    return false;
  }
  int oldRetentionTime=retentionTime;
  retentionTime=0;
  long time=getTime();
  ArrayList<Chunk> free=New.arrayList();
  for (  Chunk c : chunks.values()) {
    if (c.maxLengthLive == 0) {
      if (canOverwriteChunk(c,time)) {
        free.add(c);
      }
    }
  }
  for (  Chunk c : free) {
    chunks.remove(c.id);
    meta.remove(""String_Node_Str"" + c.id);
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.free(c.start,length);
  }
  if (fileStore.getFillRate() == 100) {
    return false;
  }
  long firstFree=fileStore.getFirstFree();
  ArrayList<Chunk> move=New.arrayList();
  for (  Chunk c : chunks.values()) {
    if (c.start > firstFree) {
      move.add(c);
    }
  }
  for (  Chunk c : move) {
    ByteBuffer buff=getWriteBuffer();
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    buff=DataUtils.ensureCapacity(buff,length);
    buff.limit(length);
    ByteBuffer buff2=fileStore.readFully(c.start,length);
    buff.put(buff2);
    long end=getEndPosition();
    fileStore.markUsed(end,length);
    fileStore.free(c.start,length);
    c.start=end;
    buff.position(0);
    c.writeHeader(buff);
    buff.position(buff.limit() - BLOCK_SIZE);
    byte[] header=getStoreHeaderBytes();
    buff.put(header);
    buff.put(new byte[BLOCK_SIZE - header.length]);
    buff.position(0);
    fileStore.writeFully(end,buff);
    releaseWriteBuffer(buff);
    meta.put(""String_Node_Str"" + c.id,c.asString());
  }
  boolean oldReuse=reuseSpace;
  reuseSpace=false;
  store();
  sync();
  reuseSpace=true;
  for (  Chunk c : move) {
    if (!chunks.containsKey(c.id)) {
      continue;
    }
    ByteBuffer buff=getWriteBuffer();
    int length=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    buff=DataUtils.ensureCapacity(buff,length);
    buff.limit(length);
    ByteBuffer buff2=fileStore.readFully(c.start,length);
    buff.put(buff2);
    long pos=fileStore.allocate(length);
    fileStore.free(c.start,length);
    buff.position(0);
    c.start=pos;
    c.writeHeader(buff);
    buff.position(buff.limit() - BLOCK_SIZE);
    byte[] header=getStoreHeaderBytes();
    buff.put(header);
    buff.put(new byte[BLOCK_SIZE - header.length]);
    buff.position(0);
    fileStore.writeFully(pos,buff);
    releaseWriteBuffer(buff);
    meta.put(""String_Node_Str"" + c.id,c.asString());
  }
  store();
  sync();
  shrinkFileIfPossible(0);
  reuseSpace=oldReuse;
  retentionTime=oldRetentionTime;
  return true;
}",0.9898398484587568
15886,"private void readMeta(){
  chunks.clear();
  Chunk header=readChunkHeader(rootChunkStart);
  lastChunkId=header.id;
  chunks.put(header.id,header);
  meta.setRootPos(header.metaRootPos,-1);
  String s=meta.get(""String_Node_Str"" + lastChunkId);
  Chunk h2=Chunk.fromString(s);
  h2.start=header.start;
  h2.length=header.length;
  h2.metaRootPos=header.metaRootPos;
  h2.pageCount=header.pageCount;
  h2.pageCountLive=header.pageCountLive;
  h2.maxLength=header.maxLength;
  h2.maxLengthLive=header.maxLengthLive;
  chunks.put(header.id,h2);
  for (Iterator<String> it=meta.keyIterator(""String_Node_Str""); it.hasNext(); ) {
    s=it.next();
    if (!s.startsWith(""String_Node_Str"")) {
      break;
    }
    s=meta.get(s);
    Chunk c=Chunk.fromString(s);
    if (!chunks.containsKey(c.id)) {
      chunks.put(c.id,c);
    }
  }
  for (  Chunk c : chunks.values()) {
    if (c.pageCountLive == 0) {
      registerFreePage(currentVersion,c.id,0,0);
    }
    if (c.id > lastChunkId) {
      System.out.println(""String_Node_Str"");
    }
    lastChunkId=Math.max(c.id,lastChunkId);
    if (c.start == Long.MAX_VALUE) {
      ;
      ;
      System.out.println(""String_Node_Str"");
      continue;
    }
    int len=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.markUsed(c.start,len);
  }
}","private void readMeta(){
  chunks.clear();
  Chunk header=readChunkHeader(rootChunkStart);
  lastChunkId=header.id;
  chunks.put(header.id,header);
  meta.setRootPos(header.metaRootPos,-1);
  String s=meta.get(""String_Node_Str"" + lastChunkId);
  Chunk h2=Chunk.fromString(s);
  h2.start=header.start;
  h2.length=header.length;
  h2.metaRootPos=header.metaRootPos;
  h2.pageCount=header.pageCount;
  h2.pageCountLive=header.pageCountLive;
  h2.maxLength=header.maxLength;
  h2.maxLengthLive=header.maxLengthLive;
  chunks.put(header.id,h2);
  for (Iterator<String> it=meta.keyIterator(""String_Node_Str""); it.hasNext(); ) {
    s=it.next();
    if (!s.startsWith(""String_Node_Str"")) {
      break;
    }
    s=meta.get(s);
    Chunk c=Chunk.fromString(s);
    if (!chunks.containsKey(c.id)) {
      chunks.put(c.id,c);
    }
  }
  for (  Chunk c : chunks.values()) {
    if (c.pageCountLive == 0) {
      registerFreePage(currentVersion,c.id,0,0);
    }
    int len=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.markUsed(c.start,len);
  }
}",0.8966680725432307
15887,"/** 
 * Close all open files and unlock the database.
 * @param flush whether writing is allowed
 */
private synchronized void closeOpenFilesAndUnlock(boolean flush){
  stopWriter();
  if (pageStore != null) {
    if (flush) {
      try {
        pageStore.checkpoint();
        if (!readOnly) {
          lockMeta(pageStore.getPageStoreSession());
          pageStore.compact(compactMode);
        }
      }
 catch (      DbException e) {
        if (SysProperties.CHECK2) {
          int code=e.getErrorCode();
          if (code != ErrorCode.DATABASE_IS_CLOSED && code != ErrorCode.LOCK_TIMEOUT_1 && code != ErrorCode.IO_EXCEPTION_2) {
            e.printStackTrace();
          }
        }
        trace.error(e,""String_Node_Str"");
      }
catch (      Throwable t) {
        if (SysProperties.CHECK2) {
          t.printStackTrace();
        }
        trace.error(t,""String_Node_Str"");
      }
    }
  }
  reconnectModified(false);
  if (mvStore != null) {
    if (!readOnly && compactMode != 0) {
      mvStore.compactFile(dbSettings.maxCompactTime);
    }
 else {
      mvStore.close(dbSettings.maxCompactTime);
    }
  }
  closeFiles();
  if (persistent && lock == null && fileLockMethod != FileLock.LOCK_NO && fileLockMethod != FileLock.LOCK_FS) {
    return;
  }
  if (persistent) {
    deleteOldTempFiles();
  }
  if (systemSession != null) {
    systemSession.close();
    systemSession=null;
  }
  if (lobSession != null) {
    lobSession.close();
    lobSession=null;
  }
  if (lock != null) {
    if (fileLockMethod == FileLock.LOCK_SERIALIZED) {
      if (lock.load().containsKey(""String_Node_Str"")) {
        try {
          Thread.sleep((int)(reconnectCheckDelay * 1.1));
        }
 catch (        InterruptedException e) {
          trace.error(e,""String_Node_Str"");
        }
      }
    }
    lock.unlock();
    lock=null;
  }
}","/** 
 * Close all open files and unlock the database.
 * @param flush whether writing is allowed
 */
private synchronized void closeOpenFilesAndUnlock(boolean flush){
  stopWriter();
  if (pageStore != null) {
    if (flush) {
      try {
        pageStore.checkpoint();
        if (!readOnly) {
          lockMeta(pageStore.getPageStoreSession());
          pageStore.compact(compactMode);
        }
      }
 catch (      DbException e) {
        if (SysProperties.CHECK2) {
          int code=e.getErrorCode();
          if (code != ErrorCode.DATABASE_IS_CLOSED && code != ErrorCode.LOCK_TIMEOUT_1 && code != ErrorCode.IO_EXCEPTION_2) {
            e.printStackTrace();
          }
        }
        trace.error(e,""String_Node_Str"");
      }
catch (      Throwable t) {
        if (SysProperties.CHECK2) {
          t.printStackTrace();
        }
        trace.error(t,""String_Node_Str"");
      }
    }
  }
  reconnectModified(false);
  if (mvStore != null) {
    if (!readOnly && compactMode != 0) {
      mvStore.store();
      mvStore.compactFile(dbSettings.maxCompactTime);
    }
 else {
      mvStore.close(dbSettings.maxCompactTime);
    }
  }
  closeFiles();
  if (persistent && lock == null && fileLockMethod != FileLock.LOCK_NO && fileLockMethod != FileLock.LOCK_FS) {
    return;
  }
  if (persistent) {
    deleteOldTempFiles();
  }
  if (systemSession != null) {
    systemSession.close();
    systemSession=null;
  }
  if (lobSession != null) {
    lobSession.close();
    lobSession=null;
  }
  if (lock != null) {
    if (fileLockMethod == FileLock.LOCK_SERIALIZED) {
      if (lock.load().containsKey(""String_Node_Str"")) {
        try {
          Thread.sleep((int)(reconnectCheckDelay * 1.1));
        }
 catch (        InterruptedException e) {
          trace.error(e,""String_Node_Str"");
        }
      }
    }
    lock.unlock();
    lock=null;
  }
}",0.9938188658962644
15888,"/** 
 * Read a page.
 * @param map the map
 * @param pos the page position
 * @return the page
 */
Page readPage(MVMap<?,?> map,long pos){
  Page p=cache.get(pos);
  if (p == null) {
    Chunk c=getChunk(pos);
    if (c == null) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",DataUtils.getPageChunkId(pos));
    }
    long filePos=c.start;
    filePos+=DataUtils.getPageOffset(pos);
    p=Page.read(fileStore,map,pos,filePos,fileStore.size());
    cache.put(pos,p,p.getMemory());
  }
  return p;
}","/** 
 * Read a page.
 * @param map the map
 * @param pos the page position
 * @return the page
 */
Page readPage(MVMap<?,?> map,long pos){
  Page p=cache.get(pos);
  if (p == null) {
    Chunk c=getChunk(pos);
    long filePos=c.start;
    filePos+=DataUtils.getPageOffset(pos);
    if (filePos < 0) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
    }
    p=Page.read(fileStore,map,pos,filePos,fileStore.size());
    cache.put(pos,p,p.getMemory());
  }
  return p;
}",0.5988805970149254
15889,"private void copyLive(Chunk chunk,ArrayList<Chunk> old){
  ByteBuffer buff=fileStore.readFully(chunk.start,chunk.length);
  Chunk.fromHeader(buff,chunk.start);
  int chunkLength=chunk.length;
  markMetaChanged();
  while (buff.position() < chunkLength) {
    int start=buff.position();
    int pageLength=buff.getInt();
    buff.getShort();
    int mapId=DataUtils.readVarInt(buff);
    @SuppressWarnings(""String_Node_Str"") MVMap<Object,Object> map=(MVMap<Object,Object>)getMap(mapId);
    if (map == null) {
      buff.position(start + pageLength);
      continue;
    }
    buff.position(start);
    Page page=new Page(map,0);
    page.read(buff,chunk.id,buff.position(),chunk.length);
    for (int i=0; i < page.getKeyCount(); i++) {
      Object k=page.getKey(i);
      Page p=map.getPage(k);
      if (p == null) {
      }
 else       if (p.getPos() < 0) {
      }
 else {
        Chunk c=getChunk(p.getPos());
        if (old.contains(c)) {
          Object value=map.remove(k);
          map.put(k,value);
        }
      }
    }
  }
}","private void copyLive(Chunk chunk,ArrayList<Chunk> old){
  ByteBuffer buff=fileStore.readFully(chunk.start,chunk.length);
  Chunk.fromHeader(buff,chunk.start);
  int chunkLength=chunk.length;
  markMetaChanged();
  while (buff.position() < chunkLength) {
    int start=buff.position();
    int pageLength=buff.getInt();
    buff.getShort();
    int mapId=DataUtils.readVarInt(buff);
    @SuppressWarnings(""String_Node_Str"") MVMap<Object,Object> map=(MVMap<Object,Object>)getMap(mapId);
    if (map == null) {
      buff.position(start + pageLength);
      continue;
    }
    buff.position(start);
    Page page=new Page(map,0);
    page.read(buff,chunk.id,buff.position(),chunk.length);
    for (int i=0; i < page.getKeyCount(); i++) {
      Object k=page.getKey(i);
      Page p=map.getPage(k);
      if (p == null) {
      }
 else       if (p.getPos() == 0) {
      }
 else {
        Chunk c=getChunk(p.getPos());
        if (old.contains(c)) {
          Object value=map.remove(k);
          map.put(k,value);
        }
      }
    }
  }
}",0.9985611510791368
15890,"/** 
 * Get the chunk for the given position.
 * @param pos the position
 * @return the chunk
 */
Chunk getChunk(long pos){
  return chunks.get(DataUtils.getPageChunkId(pos));
}","/** 
 * Get the chunk for the given position.
 * @param pos the position
 * @return the chunk
 */
Chunk getChunk(long pos){
  int chunkId=DataUtils.getPageChunkId(pos);
  Chunk c=chunks.get(chunkId);
  if (c == null) {
    String s=meta.get(""String_Node_Str"" + chunkId);
    if (s == null) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",DataUtils.getPageChunkId(pos));
    }
    c=Chunk.fromString(s);
    chunks.put(c.id,c);
  }
  return c;
}",0.4663677130044843
15891,"private void readMeta(){
  Chunk header=readChunkHeader(rootChunkStart);
  lastChunkId=header.id;
  chunks.put(header.id,header);
  meta.setRootPos(header.metaRootPos,-1);
  for (int id=lastChunkId; id >= 0; id--) {
    String s=meta.get(""String_Node_Str"" + id);
    if (s == null) {
      continue;
    }
    Chunk c=Chunk.fromString(s);
    if (c.id == header.id) {
      c.start=header.start;
      c.length=header.length;
      c.metaRootPos=header.metaRootPos;
      c.pageCount=header.pageCount;
      c.pageCountLive=header.pageCountLive;
      c.maxLength=header.maxLength;
      c.maxLengthLive=header.maxLengthLive;
    }
    lastChunkId=Math.max(c.id,lastChunkId);
    chunks.put(c.id,c);
    if (c.pageCountLive == 0) {
      registerFreePage(currentVersion,c.id,0,0);
    }
  }
  for (  Chunk c : chunks.values()) {
    if (c.start == Long.MAX_VALUE) {
      continue;
    }
    int len=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.markUsed(c.start,len);
  }
}","private void readMeta(){
  chunks.clear();
  Chunk header=readChunkHeader(rootChunkStart);
  lastChunkId=header.id;
  chunks.put(header.id,header);
  meta.setRootPos(header.metaRootPos,-1);
  String s=meta.get(""String_Node_Str"" + lastChunkId);
  Chunk h2=Chunk.fromString(s);
  h2.start=header.start;
  h2.length=header.length;
  h2.metaRootPos=header.metaRootPos;
  h2.pageCount=header.pageCount;
  h2.pageCountLive=header.pageCountLive;
  h2.maxLength=header.maxLength;
  h2.maxLengthLive=header.maxLengthLive;
  chunks.put(header.id,h2);
  for (Iterator<String> it=meta.keyIterator(""String_Node_Str""); it.hasNext(); ) {
    s=it.next();
    if (!s.startsWith(""String_Node_Str"")) {
      break;
    }
    s=meta.get(s);
    Chunk c=Chunk.fromString(s);
    if (!chunks.containsKey(c.id)) {
      chunks.put(c.id,c);
    }
  }
  for (  Chunk c : chunks.values()) {
    if (c.pageCountLive == 0) {
      registerFreePage(currentVersion,c.id,0,0);
    }
    if (c.id > lastChunkId) {
      System.out.println(""String_Node_Str"");
    }
    lastChunkId=Math.max(c.id,lastChunkId);
    if (c.start == Long.MAX_VALUE) {
      ;
      ;
      System.out.println(""String_Node_Str"");
      continue;
    }
    int len=MathUtils.roundUpInt(c.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.markUsed(c.start,len);
  }
}",0.577623590633131
15892,"/** 
 * Read the contents of the file and display them in a human-readable format.
 * @param fileName the name of the file
 * @param writer the print writer
 */
public static void dump(String fileName,Writer writer){
  PrintWriter pw=new PrintWriter(writer,true);
  if (!FilePath.get(fileName).exists()) {
    pw.println(""String_Node_Str"" + fileName);
    return;
  }
  FileChannel file=null;
  int blockSize=MVStore.BLOCK_SIZE;
  try {
    file=FilePath.get(fileName).open(""String_Node_Str"");
    long fileLength=file.size();
    pw.println(""String_Node_Str"" + fileName);
    pw.println(""String_Node_Str"" + fileLength);
    ByteBuffer block=ByteBuffer.allocate(4096);
    for (long pos=0; pos < fileLength; ) {
      block.rewind();
      DataUtils.readFully(file,pos,block);
      block.rewind();
      int tag=block.get();
      if (tag == 'H') {
        pw.println(""String_Node_Str"" + pos);
        pw.println(""String_Node_Str"" + new String(block.array(),""String_Node_Str"").trim());
        pos+=blockSize;
        continue;
      }
      if (tag != 'c') {
        pos+=blockSize;
        continue;
      }
      int chunkLength=block.getInt();
      int chunkId=block.getInt();
      int pageCount=block.getInt();
      long metaRootPos=block.getLong();
      long maxLength=block.getLong();
      long maxLengthLive=block.getLong();
      pw.println(""String_Node_Str"" + chunkId + ""String_Node_Str""+ pos+ ""String_Node_Str""+ chunkLength+ ""String_Node_Str""+ pageCount+ ""String_Node_Str""+ metaRootPos+ ""String_Node_Str""+ DataUtils.getPageChunkId(metaRootPos)+ ""String_Node_Str""+ DataUtils.getPageOffset(metaRootPos)+ ""String_Node_Str""+ maxLength+ ""String_Node_Str""+ maxLengthLive);
      ByteBuffer chunk=ByteBuffer.allocate(chunkLength);
      DataUtils.readFully(file,pos,chunk);
      int p=block.position();
      pos=(pos + chunkLength + blockSize) / blockSize * blockSize;
      chunkLength-=p;
      while (chunkLength > 0) {
        chunk.position(p);
        int pageLength=chunk.getInt();
        chunk.getShort();
        long mapId=DataUtils.readVarInt(chunk);
        int len=DataUtils.readVarInt(chunk);
        int type=chunk.get();
        boolean compressed=(type & 2) != 0;
        boolean node=(type & 1) != 0;
        pw.println(""String_Node_Str"" + mapId + ""String_Node_Str""+ p+ ""String_Node_Str""+ (node ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (compressed ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ pageLength+ ""String_Node_Str""+ len);
        p+=pageLength;
        chunkLength-=pageLength;
      }
    }
  }
 catch (  IOException e) {
    pw.println(""String_Node_Str"" + e);
    e.printStackTrace(pw);
  }
 finally {
    if (file != null) {
      try {
        file.close();
      }
 catch (      IOException e) {
      }
    }
  }
  pw.println();
  pw.flush();
}","/** 
 * Read the contents of the file and display them in a human-readable format.
 * @param fileName the name of the file
 * @param writer the print writer
 */
public static void dump(String fileName,Writer writer){
  PrintWriter pw=new PrintWriter(writer,true);
  if (!FilePath.get(fileName).exists()) {
    pw.println(""String_Node_Str"" + fileName);
    return;
  }
  FileChannel file=null;
  int blockSize=MVStore.BLOCK_SIZE;
  try {
    file=FilePath.get(fileName).open(""String_Node_Str"");
    long fileLength=file.size();
    pw.println(""String_Node_Str"" + fileName);
    pw.println(""String_Node_Str"" + fileLength);
    ByteBuffer block=ByteBuffer.allocate(4096);
    for (long pos=0; pos < fileLength; ) {
      block.rewind();
      DataUtils.readFully(file,pos,block);
      block.rewind();
      int tag=block.get();
      if (tag == 'H') {
        pw.println(""String_Node_Str"" + pos);
        pw.println(""String_Node_Str"" + new String(block.array(),""String_Node_Str"").trim());
        pos+=blockSize;
        continue;
      }
      if (tag != 'c') {
        pos+=blockSize;
        continue;
      }
      int chunkLength=block.getInt();
      int chunkId=block.getInt();
      int pageCount=block.getInt();
      long metaRootPos=block.getLong();
      long maxLength=block.getLong();
      long maxLengthLive=block.getLong();
      pw.println(""String_Node_Str"" + chunkId + ""String_Node_Str""+ pos+ ""String_Node_Str""+ chunkLength+ ""String_Node_Str""+ pageCount+ ""String_Node_Str""+ getPosString(metaRootPos)+ ""String_Node_Str""+ maxLength+ ""String_Node_Str""+ maxLengthLive);
      ByteBuffer chunk=ByteBuffer.allocate(chunkLength);
      DataUtils.readFully(file,pos,chunk);
      int p=block.position();
      pos=(pos + chunkLength + blockSize) / blockSize * blockSize;
      chunkLength-=p;
      while (chunkLength > 0) {
        chunk.position(p);
        int pageLength=chunk.getInt();
        chunk.getShort();
        long mapId=DataUtils.readVarInt(chunk);
        int len=DataUtils.readVarInt(chunk);
        int type=chunk.get();
        boolean compressed=(type & 2) != 0;
        boolean node=(type & 1) != 0;
        pw.println(""String_Node_Str"" + mapId + ""String_Node_Str""+ p+ ""String_Node_Str""+ (node ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (compressed ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ pageLength+ ""String_Node_Str""+ len);
        p+=pageLength;
        chunkLength-=pageLength;
        if (mapId == 0 && !compressed) {
          String[] keys=new String[len];
          for (int i=0; i < len; i++) {
            String k=StringDataType.INSTANCE.read(chunk);
            keys[i]=k;
          }
          if (node) {
            long[] children=new long[len + 1];
            for (int i=0; i <= len; i++) {
              children[i]=chunk.getLong();
            }
            long[] counts=new long[len + 1];
            for (int i=0; i <= len; i++) {
              long s=DataUtils.readVarLong(chunk);
              counts[i]=s;
            }
            for (int i=0; i < len; i++) {
              pw.println(""String_Node_Str"" + keys[i] + ""String_Node_Str""+ counts[i]+ ""String_Node_Str""+ getPosString(children[i]));
            }
            pw.println(""String_Node_Str"" + counts[len] + ""String_Node_Str""+ getPosString(children[len]));
          }
 else {
            String[] values=new String[len];
            for (int i=0; i < len; i++) {
              String v=StringDataType.INSTANCE.read(chunk);
              values[i]=v;
            }
            for (int i=0; i < len; i++) {
              pw.println(""String_Node_Str"" + keys[i] + ""String_Node_Str""+ values[i]);
            }
          }
        }
      }
    }
  }
 catch (  IOException e) {
    pw.println(""String_Node_Str"" + e);
    e.printStackTrace(pw);
  }
 finally {
    if (file != null) {
      try {
        file.close();
      }
 catch (      IOException e) {
      }
    }
  }
  pw.println();
  pw.flush();
}",0.8012981265673403
15893,"@Override public void test() throws Exception {
  FileUtils.deleteRecursive(getBaseDir(),true);
  FileUtils.createDirectories(getBaseDir());
  testOffHeapStorage();
  testNewerWriteVersion();
  testCompactFully();
  testBackgroundExceptionListener();
  testOldVersion();
  testAtomicOperations();
  testWriteBuffer();
  testWriteDelay();
  testEncryptedFile();
  testFileFormatChange();
  testRecreateMap();
  testRenameMapRollback();
  testCustomMapType();
  testCacheSize();
  testConcurrentOpen();
  testFileHeader();
  testIndexSkip();
  testMinMaxNextKey();
  testStoreVersion();
  testIterateOldVersion();
  testObjects();
  testExample();
  testExampleMvcc();
  testOpenStoreCloseLoop();
  testVersion();
  testTruncateFile();
  testFastDelete();
  testRollbackInMemory();
  testRollbackStored();
  testMeta();
  testInMemory();
  testLargeImport();
  testBtreeStore();
  testCompact();
  testCompactMapNotOpen();
  testReuseSpace();
  testRandom();
  testKeyValueClasses();
  testIterate();
  testCloseTwice();
  testSimple();
  testLargerThan2G();
}","@Override public void test() throws Exception {
  FileUtils.deleteRecursive(getBaseDir(),true);
  FileUtils.createDirectories(getBaseDir());
  testOffHeapStorage();
  testNewerWriteVersion();
  testCompactFully();
  testBackgroundExceptionListener();
  testOldVersion();
  testAtomicOperations();
  testWriteBuffer();
  testWriteDelay();
  testEncryptedFile();
  testFileFormatChange();
  testRecreateMap();
  testRenameMapRollback();
  testCustomMapType();
  testCacheSize();
  testConcurrentOpen();
  testFileHeader();
  int todoFixTestCase;
  testIndexSkip();
  testMinMaxNextKey();
  testStoreVersion();
  testIterateOldVersion();
  testObjects();
  testExample();
  testExampleMvcc();
  testOpenStoreCloseLoop();
  testVersion();
  testTruncateFile();
  testFastDelete();
  testRollbackInMemory();
  testRollbackStored();
  testMeta();
  testInMemory();
  testLargeImport();
  testBtreeStore();
  testCompact();
  testCompactMapNotOpen();
  testReuseSpace();
  testRandom();
  testKeyValueClasses();
  testIterate();
  testCloseTwice();
  testSimple();
  testLargerThan2G();
}",0.989247311827957
15894,"private void testCase() throws Exception {
  FileUtils.delete(fileName);
  MVStore s;
  s=new MVStore.Builder().fileName(fileName).pageSplitSize(50).writeDelay(0).open();
  MVMap<Integer,byte[]> m;
  if (concurrent) {
    m=s.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Integer,byte[]>());
  }
 else {
    m=s.openMap(""String_Node_Str"");
  }
  Random r=new Random(seed);
  op=0;
  int size=getSize(100,1000);
  TreeMap<Integer,byte[]> map=new TreeMap<Integer,byte[]>();
  for (; op < size; op++) {
    int k=r.nextInt(100);
    byte[] v=new byte[r.nextInt(10) * 10];
    int type=r.nextInt(13);
switch (type) {
case 0:
case 1:
case 2:
case 3:
      log(op,k,v,""String_Node_Str"");
    m.put(k,v);
  map.put(k,v);
break;
case 4:
case 5:
log(op,k,v,""String_Node_Str"");
m.remove(k);
map.remove(k);
break;
case 6:
log(op,k,v,""String_Node_Str"");
s.store();
break;
case 7:
log(op,k,v,""String_Node_Str"");
s.compact(90);
break;
case 8:
log(op,k,v,""String_Node_Str"");
m.clear();
map.clear();
break;
case 9:
log(op,k,v,""String_Node_Str"");
s.commit();
break;
case 10:
log(op,k,v,""String_Node_Str"");
s.commit();
s.close();
s=new MVStore.Builder().fileName(fileName).pageSplitSize(50).writeDelay(0).open();
m=s.openMap(""String_Node_Str"");
break;
case 11:
log(op,k,v,""String_Node_Str"");
s.commit();
s.compactMoveChunks();
break;
case 12:
log(op,k,v,""String_Node_Str"");
ArrayList<Integer> keyList=new ArrayList<Integer>(map.keySet());
int index=Collections.binarySearch(keyList,k,null);
int index2=(int)m.getKeyIndex(k);
assertEquals(index,index2);
if (index >= 0) {
int k2=m.getKey(index);
assertEquals(k2,k);
}
break;
}
assertEqualsMapValues(map.get(k),m.get(k));
assertEquals(map.ceilingKey(k),m.ceilingKey(k));
assertEquals(map.floorKey(k),m.floorKey(k));
assertEquals(map.higherKey(k),m.higherKey(k));
assertEquals(map.lowerKey(k),m.lowerKey(k));
assertEquals(map.isEmpty(),m.isEmpty());
assertEquals(map.size(),m.size());
if (!map.isEmpty()) {
assertEquals(map.firstKey(),m.firstKey());
assertEquals(map.lastKey(),m.lastKey());
}
}
s.store();
s.close();
}","private void testCase() throws Exception {
  FileUtils.delete(fileName);
  MVStore s;
  s=openStore(fileName);
  MVMap<Integer,byte[]> m;
  if (concurrent) {
    m=s.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Integer,byte[]>());
  }
 else {
    m=s.openMap(""String_Node_Str"");
  }
  Random r=new Random(seed);
  op=0;
  int size=getSize(100,1000);
  TreeMap<Integer,byte[]> map=new TreeMap<Integer,byte[]>();
  for (; op < size; op++) {
    int k=r.nextInt(100);
    byte[] v=new byte[r.nextInt(10) * 10];
    int type=r.nextInt(13);
switch (type) {
case 0:
case 1:
case 2:
case 3:
      log(op,k,v,""String_Node_Str"");
    m.put(k,v);
  map.put(k,v);
break;
case 4:
case 5:
log(op,k,v,""String_Node_Str"");
m.remove(k);
map.remove(k);
break;
case 6:
log(op,k,v,""String_Node_Str"");
s.store();
break;
case 7:
log(op,k,v,""String_Node_Str"");
s.compact(90);
break;
case 8:
log(op,k,v,""String_Node_Str"");
m.clear();
map.clear();
break;
case 9:
log(op,k,v,""String_Node_Str"");
s.commit();
break;
case 10:
log(op,k,v,""String_Node_Str"");
s.commit();
log(op,k,v,""String_Node_Str"");
s.close();
log(op,k,v,""String_Node_Str"");
s=openStore(fileName);
log(op,k,v,""String_Node_Str"");
m=s.openMap(""String_Node_Str"");
break;
case 11:
log(op,k,v,""String_Node_Str"");
s.commit();
log(op,k,v,""String_Node_Str"");
s.compactMoveChunks();
break;
case 12:
log(op,k,v,""String_Node_Str"");
ArrayList<Integer> keyList=new ArrayList<Integer>(map.keySet());
int index=Collections.binarySearch(keyList,k,null);
int index2=(int)m.getKeyIndex(k);
assertEquals(index,index2);
if (index >= 0) {
int k2=m.getKey(index);
assertEquals(k2,k);
}
break;
}
assertEqualsMapValues(map.get(k),m.get(k));
assertEquals(map.ceilingKey(k),m.ceilingKey(k));
assertEquals(map.floorKey(k),m.floorKey(k));
assertEquals(map.higherKey(k),m.higherKey(k));
assertEquals(map.lowerKey(k),m.lowerKey(k));
assertEquals(map.isEmpty(),m.isEmpty());
assertEquals(map.size(),m.size());
if (!map.isEmpty()) {
assertEquals(map.firstKey(),m.firstKey());
assertEquals(map.lastKey(),m.lastKey());
}
}
s.store();
s.close();
}",0.9275644141954302
15895,"private Object putOrAdd(SpatialKey key,V value,boolean alwaysAdd){
  beforeWrite();
  try {
    long v=writeVersion;
    Page p=copyOnWrite(root,v,true);
    Object result;
    if (alwaysAdd || get(key) == null) {
      if (p.getMemory() > store.getPageSplitSize() && p.getKeyCount() > 1) {
        long totalCount=p.getTotalCount();
        Page split=split(p,v);
        Object k1=getBounds(p);
        Object k2=getBounds(split);
        Object[] keys={k1,k2};
        long[] children={p.getPos(),split.getPos(),0};
        Page[] childrenPages={p,split,null};
        long[] counts={p.getTotalCount(),split.getTotalCount(),0};
        p=Page.create(this,v,2,keys,null,children,childrenPages,counts,totalCount,0,0);
      }
      add(p,v,key,value);
      result=null;
    }
 else {
      result=set(p,v,key,value);
    }
    newRoot(p);
    return result;
  }
  finally {
    afterWrite();
  }
}","private Object putOrAdd(SpatialKey key,V value,boolean alwaysAdd){
  beforeWrite();
  try {
    long v=writeVersion;
    Page p=copyOnWrite(root,v);
    Object result;
    if (alwaysAdd || get(key) == null) {
      if (p.getMemory() > store.getPageSplitSize() && p.getKeyCount() > 1) {
        long totalCount=p.getTotalCount();
        Page split=split(p,v);
        Object k1=getBounds(p);
        Object k2=getBounds(split);
        Object[] keys={k1,k2};
        long[] children={p.getPos(),split.getPos(),0};
        Page[] childrenPages={p,split,null};
        long[] counts={p.getTotalCount(),split.getTotalCount(),0};
        p=Page.create(this,v,2,keys,null,children,childrenPages,counts,totalCount,0,0);
      }
      add(p,v,key,value);
      result=null;
    }
 else {
      result=set(p,v,key,value);
    }
    newRoot(p);
    return result;
  }
  finally {
    afterWrite();
  }
}",0.9972113775794758
15896,"private void add(Page p,long writeVersion,Object key,Object value){
  if (p.isLeaf()) {
    p.insertLeaf(p.getKeyCount(),key,value);
    return;
  }
  int index=-1;
  for (int i=0; i < p.getKeyCount(); i++) {
    if (contains(p,i,key)) {
      index=i;
      break;
    }
  }
  if (index < 0) {
    float min=Float.MAX_VALUE;
    for (int i=0; i < p.getKeyCount(); i++) {
      Object k=p.getKey(i);
      float areaIncrease=keyType.getAreaIncrease(k,key);
      if (areaIncrease < min) {
        index=i;
        min=areaIncrease;
      }
    }
  }
  Page c=copyOnWrite(p.getChildPage(index),writeVersion,true);
  if (c.getMemory() > store.getPageSplitSize() && c.getKeyCount() > 1) {
    Page split=split(c,writeVersion);
    p=copyOnWrite(p,writeVersion,true);
    p.setKey(index,getBounds(c));
    p.setChild(index,c);
    p.setCounts(index,c);
    p.insertNode(index,getBounds(split),split);
    add(p,writeVersion,key,value);
    return;
  }
  add(c,writeVersion,key,value);
  Object bounds=p.getKey(index);
  keyType.increaseBounds(bounds,key);
  p.setKey(index,bounds);
  p.setChild(index,c);
  p.setCounts(index,c);
}","private void add(Page p,long writeVersion,Object key,Object value){
  if (p.isLeaf()) {
    p.insertLeaf(p.getKeyCount(),key,value);
    return;
  }
  int index=-1;
  for (int i=0; i < p.getKeyCount(); i++) {
    if (contains(p,i,key)) {
      index=i;
      break;
    }
  }
  if (index < 0) {
    float min=Float.MAX_VALUE;
    for (int i=0; i < p.getKeyCount(); i++) {
      Object k=p.getKey(i);
      float areaIncrease=keyType.getAreaIncrease(k,key);
      if (areaIncrease < min) {
        index=i;
        min=areaIncrease;
      }
    }
  }
  Page c=copyOnWrite(p.getChildPage(index),writeVersion);
  if (c.getMemory() > store.getPageSplitSize() && c.getKeyCount() > 1) {
    Page split=split(c,writeVersion);
    p=copyOnWrite(p,writeVersion);
    p.setKey(index,getBounds(c));
    p.setChild(index,c);
    p.setCounts(index,c);
    p.insertNode(index,getBounds(split),split);
    add(p,writeVersion,key,value);
    return;
  }
  add(c,writeVersion,key,value);
  Object bounds=p.getKey(index);
  keyType.increaseBounds(bounds,key);
  p.setKey(index,bounds);
  p.setChild(index,c);
  p.setCounts(index,c);
}",0.9955396966993756
15897,"/** 
 * Update the value for the given key. The key must exist.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key
 * @param value the value
 * @return the old value
 */
private Object set(Page p,long writeVersion,Object key,Object value){
  if (!p.isLeaf()) {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (contains(p,i,key)) {
        Page c=copyOnWrite(p.getChildPage(i),writeVersion,true);
        Object result=set(c,writeVersion,key,value);
        if (result == null) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"");
        }
        p.setChild(i,c);
        p.setCounts(i,c);
        return result;
      }
    }
  }
 else {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (keyType.equals(p.getKey(i),key)) {
        return p.setValue(i,value);
      }
    }
  }
  return null;
}","/** 
 * Update the value for the given key. The key must exist.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key
 * @param value the value
 * @return the old value
 */
private Object set(Page p,long writeVersion,Object key,Object value){
  if (!p.isLeaf()) {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (contains(p,i,key)) {
        Page c=copyOnWrite(p.getChildPage(i),writeVersion);
        Object result=set(c,writeVersion,key,value);
        if (result == null) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"");
        }
        p.setChild(i,c);
        p.setCounts(i,c);
        return result;
      }
    }
  }
 else {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (keyType.equals(p.getKey(i),key)) {
        return p.setValue(i,value);
      }
    }
  }
  return null;
}",0.9971703452178834
15898,"/** 
 * Close the file and the store. If there are any committed but unsaved changes, they are written to disk first. If any temporary data was written but not committed, this is rolled back. All open maps are closed.
 */
public void close(){
  if (closed) {
    return;
  }
  if (fileStore != null && !fileStore.isReadOnly()) {
    stopBackgroundThread();
    if (hasUnsavedChanges() || lastCommittedVersion != currentVersion) {
      rollbackTo(lastCommittedVersion);
      metaChanged=true;
      store(false);
    }
  }
  closeStore(true);
}","/** 
 * Close the file and the store. If there are any committed but unsaved changes, they are written to disk first. If any temporary data was written but not committed, this is rolled back. All open maps are closed.
 */
public void close(){
  if (closed) {
    return;
  }
  if (fileStore != null && !fileStore.isReadOnly()) {
    stopBackgroundThread();
    ;
    if (currentStoreVersion >= 0) {
      System.out.println(""String_Node_Str"");
      Map<Thread,StackTraceElement[]> st=Thread.getAllStackTraces();
      for (      Entry<Thread,StackTraceElement[]> e : st.entrySet()) {
        System.out.println(e.getKey().toString());
        System.out.println(Arrays.toString(e.getValue()));
      }
      for (int i=0; i < 10000 && currentStoreVersion >= 0; i++) {
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException e) {
        }
      }
      if (currentStoreVersion >= 0) {
        System.out.println(""String_Node_Str"");
      }
    }
    if (hasUnsavedChanges() || lastCommittedVersion != currentVersion) {
      rollbackTo(lastCommittedVersion);
      metaChanged=true;
      store(false);
    }
  }
  closeStore(true);
}",0.6366822429906542
15899,"void setWriteVersion(long writeVersion){
  if (readOnly) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"");
  }
  this.writeVersion=writeVersion;
}","void setWriteVersion(long writeVersion){
  this.writeVersion=writeVersion;
}",0.5757575757575758
15900,"/** 
 * Close the map, making it read only and release the memory.
 */
public void close(){
  closed=true;
  readOnly=true;
  removeAllOldVersions();
  root=null;
}","/** 
 * Close the map, making it read only and release the memory. This method may only be called when closing the store or when removing the map, as further writes are not possible.
 */
void close(){
  closed=true;
  readOnly=true;
  removeAllOldVersions();
  root=null;
}",0.7185354691075515
15901,"/** 
 * Read a page.
 * @param map the map
 * @param pos the page position
 * @return the page
 */
Page readPage(MVMap<?,?> map,long pos){
  Page p=cache.get(pos);
  if (p == null) {
    Chunk c=getChunk(pos);
    long filePos=c.start;
    filePos+=DataUtils.getPageOffset(pos);
    if (filePos < 0) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
    }
    p=Page.read(fileStore,map,pos,filePos,fileStore.size());
    cache.put(pos,p,p.getMemory());
  }
  return p;
}","/** 
 * Read a page.
 * @param map the map
 * @param pos the page position
 * @return the page
 */
Page readPage(MVMap<?,?> map,long pos){
  if (pos == 0) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"");
  }
  Page p=cache.get(pos);
  if (p == null) {
    Chunk c=getChunk(pos);
    long filePos=c.start;
    filePos+=DataUtils.getPageOffset(pos);
    if (filePos < 0) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",filePos);
    }
    p=Page.read(fileStore,map,pos,filePos,fileStore.size());
    cache.put(pos,p,p.getMemory());
  }
  return p;
}",0.5856164383561644
15902,"/** 
 * Close the file and the store. If there are any committed but unsaved changes, they are written to disk first. If any temporary data was written but not committed, this is rolled back. All open maps are closed.
 */
public void close(){
  if (closed) {
    return;
  }
  if (fileStore != null && !fileStore.isReadOnly()) {
    stopBackgroundThread();
    ;
    if (currentStoreVersion >= 0) {
      System.out.println(""String_Node_Str"");
      Map<Thread,StackTraceElement[]> st=Thread.getAllStackTraces();
      for (      Entry<Thread,StackTraceElement[]> e : st.entrySet()) {
        System.out.println(e.getKey().toString());
        System.out.println(Arrays.toString(e.getValue()));
      }
      for (int i=0; i < 10000 && currentStoreVersion >= 0; i++) {
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException e) {
        }
      }
      if (currentStoreVersion >= 0) {
        System.out.println(""String_Node_Str"");
      }
    }
    if (hasUnsavedChanges() || lastCommittedVersion != currentVersion) {
      rollbackTo(lastCommittedVersion);
      metaChanged=true;
      store(false);
    }
  }
  closeStore(true);
}","/** 
 * Close the file and the store. If there are any committed but unsaved changes, they are written to disk first. If any temporary data was written but not committed, this is rolled back. All open maps are closed. <p> It is not allowed to concurrently call close and store.
 */
public void close(){
  if (closed) {
    return;
  }
  if (fileStore != null && !fileStore.isReadOnly()) {
    stopBackgroundThread();
    if (currentStoreVersion >= 0) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_WRITING_FAILED,""String_Node_Str"");
    }
    if (hasUnsavedChanges() || lastCommittedVersion != currentVersion) {
      rollbackTo(lastCommittedVersion);
      metaChanged=true;
      store(false);
    }
  }
  closeStore(true);
}",0.4560669456066946
15903,"/** 
 * Store changes. Changes that are marked as temporary are rolled back after a restart.
 * @param temp whether the changes are only temporary (not committed), andshould be rolled back after a crash
 * @return the new version (incremented if there were changes)
 */
private synchronized long store(boolean temp){
  if (closed) {
    return currentVersion;
  }
  if (fileStore == null) {
    return incrementVersion();
  }
  if (currentStoreVersion >= 0) {
    return currentVersion;
  }
  if (!hasUnsavedChanges()) {
    return currentVersion;
  }
  if (fileStore.isReadOnly()) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_WRITING_FAILED,""String_Node_Str"");
  }
  int currentUnsavedPageCount=unsavedPageCount;
  currentStoreVersion=currentVersion;
  long storeVersion=currentStoreVersion;
  long version=++currentVersion;
  long time=getTime();
  lastStoreTime=time;
  if (temp) {
    meta.put(""String_Node_Str"",Long.toString(lastCommittedVersion));
    long minVersion=Long.MAX_VALUE;
    Chunk minChunk=null;
    for (    Chunk c : chunks.values()) {
      if (c.version < minVersion) {
        minVersion=c.version;
        minChunk=c;
      }
    }
    retainChunk=minChunk;
  }
 else {
    lastCommittedVersion=version;
    meta.remove(""String_Node_Str"");
    retainChunk=null;
  }
  Chunk lastChunk=chunks.get(lastChunkId);
  if (lastChunk != null) {
    meta.put(""String_Node_Str"" + lastChunk.id,lastChunk.asString());
    time=Math.max(lastChunk.time,time);
  }
  Chunk c;
  c=new Chunk(++lastChunkId);
  c.maxLength=Long.MAX_VALUE;
  c.maxLengthLive=Long.MAX_VALUE;
  c.start=Long.MAX_VALUE;
  c.length=Integer.MAX_VALUE;
  c.time=time;
  c.version=version;
  chunks.put(c.id,c);
  meta.put(""String_Node_Str"" + c.id,c.asString());
  ArrayList<MVMap<?,?>> list=New.arrayList(maps.values());
  ArrayList<MVMap<?,?>> changed=New.arrayList();
  for (  MVMap<?,?> m : list) {
    m.setWriteVersion(version);
    long v=m.getVersion();
    if (v >= 0 && v >= lastStoredVersion) {
      m.waitUntilWritten(storeVersion);
      MVMap<?,?> r=m.openVersion(storeVersion);
      if (r.getRoot().getPos() == 0) {
        changed.add(r);
      }
    }
  }
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() == 0) {
      meta.put(""String_Node_Str"" + m.getId(),""String_Node_Str"");
    }
 else {
      meta.put(""String_Node_Str"" + m.getId(),String.valueOf(Integer.MAX_VALUE));
    }
  }
  Set<Chunk> removedChunks=applyFreedSpace(storeVersion,time);
  ByteBuffer buff=getWriteBuffer();
  c.writeHeader(buff);
  c.maxLength=0;
  c.maxLengthLive=0;
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() > 0) {
      buff=p.writeUnsavedRecursive(c,buff);
      long root=p.getPos();
      meta.put(""String_Node_Str"" + m.getId(),""String_Node_Str"" + root);
    }
  }
  meta.put(""String_Node_Str"" + c.id,c.asString());
  meta.setWriteVersion(version);
  buff=meta.getRoot().writeUnsavedRecursive(c,buff);
  int chunkLength=buff.position();
  int length=MathUtils.roundUpInt(chunkLength,BLOCK_SIZE) + BLOCK_SIZE;
  if (length > buff.capacity()) {
    buff=DataUtils.ensureCapacity(buff,length - buff.capacity());
  }
  buff.limit(length);
  for (  Chunk x : removedChunks) {
    int len=MathUtils.roundUpInt(x.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.free(x.start,len);
  }
  long end=getEndPosition();
  long filePos;
  if (reuseSpace) {
    filePos=fileStore.allocate(length);
  }
 else {
    filePos=end;
    fileStore.markUsed(end,length);
  }
  boolean storeAtEndOfFile=filePos + length >= end;
  c.start=filePos;
  c.length=chunkLength;
  c.metaRootPos=meta.getRoot().getPos();
  buff.position(0);
  c.writeHeader(buff);
  rootChunkStart=filePos;
  revertTemp(storeVersion);
  buff.position(buff.limit() - BLOCK_SIZE);
  byte[] header=getStoreHeaderBytes();
  buff.put(header);
  buff.put(new byte[BLOCK_SIZE - header.length]);
  buff.position(0);
  fileStore.writeFully(filePos,buff);
  releaseWriteBuffer(buff);
  if (!storeAtEndOfFile) {
    writeStoreHeader();
    shrinkFileIfPossible(1);
  }
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() > 0) {
      p.writeEnd();
    }
  }
  meta.getRoot().writeEnd();
  unsavedPageCount=Math.max(0,unsavedPageCount - currentUnsavedPageCount);
  currentStoreVersion=-1;
  if (!temp) {
    metaChanged=false;
    lastStoredVersion=storeVersion;
  }
  return version;
}","/** 
 * Store changes. Changes that are marked as temporary are rolled back after a restart.
 * @param temp whether the changes are only temporary (not committed), andshould be rolled back after a crash
 * @return the new version (incremented if there were changes)
 */
private synchronized long store(boolean temp){
  if (closed) {
    return currentVersion;
  }
  if (fileStore == null) {
    return incrementVersion();
  }
  if (currentStoreVersion >= 0) {
    return currentVersion;
  }
  if (!hasUnsavedChanges()) {
    return currentVersion;
  }
  if (fileStore.isReadOnly()) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_WRITING_FAILED,""String_Node_Str"");
  }
  try {
    currentStoreVersion=currentVersion;
    return storeNow(temp);
  }
  finally {
    currentStoreVersion=-1;
  }
}",0.2789543980156458
15904,"/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  this.compress=config.containsKey(""String_Node_Str"");
  Object o=config.get(""String_Node_Str"");
  pageSplitSize=o == null ? 6 * 1024 : (Integer)o;
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMapConcurrent<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,String> c=New.hashMap();
  c.put(""String_Node_Str"",""String_Node_Str"");
  c.put(""String_Node_Str"",Long.toString(currentVersion));
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  String fileName=(String)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    return;
  }
  if (fileStore == null) {
    fileStore=new FileStore();
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  int maxMemoryBytes=mb * 1024 * 1024;
  int averageMemory=pageSplitSize / 2;
  int segmentCount=16;
  int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
  cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
  o=config.get(""String_Node_Str"");
  mb=o == null ? 4 : (Integer)o;
  int writeBufferSize=mb * 1024 * 1024;
  int div=pageSplitSize;
  unsavedPageCountMax=writeBufferSize / (div == 0 ? 1 : div);
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    fileStore.open(fileName,readOnly,encryptionKey);
    if (fileStore.size() == 0) {
      creationTime=0;
      creationTime=getTime();
      lastStoreTime=creationTime;
      storeHeader.put(""String_Node_Str"",""String_Node_Str"");
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + BLOCK_SIZE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + FORMAT_WRITE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + creationTime);
      writeStoreHeader();
    }
 else {
      readStoreHeader();
      long format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),0);
      if (format > FORMAT_WRITE && !fileStore.isReadOnly()) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"" + ""String_Node_Str"",format,FORMAT_WRITE);
      }
      format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),format);
      if (format > FORMAT_READ) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"",format,FORMAT_READ);
      }
      if (rootChunkStart > 0) {
        readMeta();
      }
    }
    long rollback=DataUtils.parseLong(meta.get(""String_Node_Str""),-1);
    if (rollback != -1) {
      rollbackTo(rollback);
    }
  }
 catch (  IllegalStateException e) {
    try {
      closeStore(false);
    }
 catch (    Exception e2) {
    }
    throw e;
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastStoreTime=getTime();
  this.lastCommittedVersion=currentVersion;
  o=config.get(""String_Node_Str"");
  int writeDelay=o == null ? 1000 : (Integer)o;
  setWriteDelay(writeDelay);
}","/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  this.compress=config.containsKey(""String_Node_Str"");
  Object o=config.get(""String_Node_Str"");
  pageSplitSize=o == null ? 6 * 1024 : (Integer)o;
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMapConcurrent<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,String> c=New.hashMap();
  c.put(""String_Node_Str"",""String_Node_Str"");
  c.put(""String_Node_Str"",Long.toString(currentVersion));
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  String fileName=(String)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    return;
  }
  if (fileStore == null) {
    fileStore=new FileStore();
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  int maxMemoryBytes=mb * 1024 * 1024;
  int averageMemory=Math.max(10,pageSplitSize / 2);
  int segmentCount=16;
  int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
  cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
  o=config.get(""String_Node_Str"");
  mb=o == null ? 4 : (Integer)o;
  int writeBufferSize=mb * 1024 * 1024;
  int div=pageSplitSize;
  unsavedPageCountMax=writeBufferSize / (div == 0 ? 1 : div);
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    fileStore.open(fileName,readOnly,encryptionKey);
    if (fileStore.size() == 0) {
      creationTime=0;
      creationTime=getTime();
      lastStoreTime=creationTime;
      storeHeader.put(""String_Node_Str"",""String_Node_Str"");
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + BLOCK_SIZE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + FORMAT_WRITE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + creationTime);
      writeStoreHeader();
    }
 else {
      readStoreHeader();
      long format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),0);
      if (format > FORMAT_WRITE && !fileStore.isReadOnly()) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"" + ""String_Node_Str"",format,FORMAT_WRITE);
      }
      format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),format);
      if (format > FORMAT_READ) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"",format,FORMAT_READ);
      }
      if (rootChunkStart > 0) {
        readMeta();
      }
    }
    long rollback=DataUtils.parseLong(meta.get(""String_Node_Str""),-1);
    if (rollback != -1) {
      rollbackTo(rollback);
    }
  }
 catch (  IllegalStateException e) {
    try {
      closeStore(false);
    }
 catch (    Exception e2) {
    }
    throw e;
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastStoreTime=getTime();
  this.lastCommittedVersion=currentVersion;
  o=config.get(""String_Node_Str"");
  int writeDelay=o == null ? 1000 : (Integer)o;
  setWriteDelay(writeDelay);
}",0.9981013582590916
15905,"/** 
 * Unlink the children recursively after all data is written.
 */
void writeEnd(){
  if (!isLeaf()) {
    int len=children.length;
    for (int i=0; i < len; i++) {
      Page p=childrenPages[i];
      if (p != null) {
        p.writeEnd();
        childrenPages[i]=null;
      }
    }
  }
}","/** 
 * Unlink the children recursively after all data is written.
 */
void writeEnd(){
  if (!isLeaf()) {
    int len=children.length;
    for (int i=0; i < len; i++) {
      Page p=childrenPages[i];
      if (p != null) {
        if (p.getPos() == 0) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"");
        }
        p.writeEnd();
        childrenPages[i]=null;
      }
    }
  }
}",0.8065843621399177
15906,"@Override public void test() throws Exception {
  FileUtils.deleteRecursive(getBaseDir(),true);
  FileUtils.createDirectories(getBaseDir());
  testConcurrentOnlineBackup();
  testConcurrentMap();
  testConcurrentIterate();
  testConcurrentWrite();
  testConcurrentRead();
}","@Override public void test() throws Exception {
  FileUtils.deleteRecursive(getBaseDir(),true);
  FileUtils.createDirectories(getBaseDir());
  testConcurrentStoreAndClose();
  testConcurrentOnlineBackup();
  testConcurrentMap();
  testConcurrentIterate();
  testConcurrentWrite();
  testConcurrentRead();
}",0.9430051813471504
15907,"private void testConcurrentOnlineBackup() throws Exception {
  String fileName=""String_Node_Str"" + getBaseDir() + ""String_Node_Str"";
  String fileNameRestore=getBaseDir() + ""String_Node_Str"";
  final MVStore s=openStore(fileName);
  final MVMap<Integer,byte[]> map=s.openMap(""String_Node_Str"");
  final Random r=new Random();
  Task t=new Task(){
    @Override public void call() throws Exception {
      while (!stop) {
        for (int i=0; i < 20; i++) {
          map.put(i,new byte[100 * r.nextInt(100)]);
        }
        s.store();
        map.clear();
        s.store();
        long len=s.getFileStore().size();
        if (len > 1024 * 1024) {
          Thread.sleep(200);
        }
 else         if (len > 1024 * 100) {
          Thread.sleep(20);
        }
      }
    }
  }
;
  t.execute();
  for (int i=0; i < 10; i++) {
    s.setReuseSpace(false);
    byte[] buff=readFileSlowly(s.getFileStore().getFile(),s.getFileStore().size());
    s.setReuseSpace(true);
    FileOutputStream out=new FileOutputStream(fileNameRestore);
    out.write(buff);
    MVStore s2=openStore(fileNameRestore);
    MVMap<Integer,byte[]> test=s2.openMap(""String_Node_Str"");
    for (    Integer k : test.keySet()) {
      test.get(k);
    }
    s2.close();
    Thread.sleep(10);
  }
  t.get();
  s.close();
}","private void testConcurrentOnlineBackup() throws Exception {
  String fileName=getBaseDir() + ""String_Node_Str"";
  String fileNameRestore=getBaseDir() + ""String_Node_Str"";
  final MVStore s=openStore(fileName);
  final MVMap<Integer,byte[]> map=s.openMap(""String_Node_Str"");
  final Random r=new Random();
  Task t=new Task(){
    @Override public void call() throws Exception {
      while (!stop) {
        for (int i=0; i < 20; i++) {
          map.put(i,new byte[100 * r.nextInt(100)]);
        }
        s.store();
        map.clear();
        s.store();
        long len=s.getFileStore().size();
        if (len > 1024 * 1024) {
          Thread.sleep(200);
        }
 else         if (len > 1024 * 100) {
          Thread.sleep(20);
        }
      }
    }
  }
;
  t.execute();
  for (int i=0; i < 10; i++) {
    s.setReuseSpace(false);
    byte[] buff=readFileSlowly(s.getFileStore().getFile(),s.getFileStore().size());
    s.setReuseSpace(true);
    FileOutputStream out=new FileOutputStream(fileNameRestore);
    out.write(buff);
    MVStore s2=openStore(fileNameRestore);
    MVMap<Integer,byte[]> test=s2.openMap(""String_Node_Str"");
    for (    Integer k : test.keySet()) {
      test.get(k);
    }
    s2.close();
    Thread.sleep(10);
  }
  t.get();
  s.close();
}",0.9922420480993018
15908,"private void testExampleMvcc(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  FileUtils.delete(fileName);
  MVStore s=MVStore.open(fileName);
  MVMap<Integer,String> map=s.openMap(""String_Node_Str"");
  map.put(1,""String_Node_Str"");
  map.put(2,""String_Node_Str"");
  long oldVersion=s.getCurrentVersion();
  s.incrementVersion();
  map.put(1,""String_Node_Str"");
  map.remove(2);
  MVMap<Integer,String> oldMap=map.openVersion(oldVersion);
  assertEquals(""String_Node_Str"",oldMap.get(1));
  assertEquals(""String_Node_Str"",oldMap.get(2));
  oldMap.close();
  assertEquals(""String_Node_Str"",map.get(1));
  s.close();
}","private void testExampleMvcc(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  FileUtils.delete(fileName);
  MVStore s=MVStore.open(fileName);
  MVMap<Integer,String> map=s.openMap(""String_Node_Str"");
  map.put(1,""String_Node_Str"");
  map.put(2,""String_Node_Str"");
  long oldVersion=s.getCurrentVersion();
  s.incrementVersion();
  map.put(1,""String_Node_Str"");
  map.remove(2);
  MVMap<Integer,String> oldMap=map.openVersion(oldVersion);
  assertEquals(""String_Node_Str"",oldMap.get(1));
  assertEquals(""String_Node_Str"",oldMap.get(2));
  assertEquals(""String_Node_Str"",map.get(1));
  s.close();
}",0.9853181076672104
15909,"@Override public void test() throws Exception {
  FileUtils.deleteRecursive(getBaseDir(),true);
  FileUtils.createDirectories(getBaseDir());
  testIsEmpty();
  testOffHeapStorage();
  testNewerWriteVersion();
  testCompactFully();
  testBackgroundExceptionListener();
  testOldVersion();
  testAtomicOperations();
  testWriteBuffer();
  testWriteDelay();
  testEncryptedFile();
  testFileFormatChange();
  testRecreateMap();
  testRenameMapRollback();
  testCustomMapType();
  testCacheSize();
  testConcurrentOpen();
  testFileHeader();
  int todoFixTestCase;
  testIndexSkip();
  testMinMaxNextKey();
  testStoreVersion();
  testIterateOldVersion();
  testObjects();
  testExample();
  testExampleMvcc();
  testOpenStoreCloseLoop();
  testVersion();
  testTruncateFile();
  testFastDelete();
  testRollbackInMemory();
  testRollbackStored();
  testMeta();
  testInMemory();
  testLargeImport();
  testBtreeStore();
  testCompact();
  testCompactMapNotOpen();
  testReuseSpace();
  testRandom();
  testKeyValueClasses();
  testIterate();
  testCloseTwice();
  testSimple();
  testLargerThan2G();
}","@Override public void test() throws Exception {
  FileUtils.deleteRecursive(getBaseDir(),true);
  FileUtils.createDirectories(getBaseDir());
  testRemoveMap();
  testIsEmpty();
  testOffHeapStorage();
  testNewerWriteVersion();
  testCompactFully();
  testBackgroundExceptionListener();
  testOldVersion();
  testAtomicOperations();
  testWriteBuffer();
  testWriteDelay();
  testEncryptedFile();
  testFileFormatChange();
  testRecreateMap();
  testRenameMapRollback();
  testCustomMapType();
  testCacheSize();
  testConcurrentOpen();
  testFileHeader();
  testFileHeaderCorruption();
  testIndexSkip();
  testMinMaxNextKey();
  testStoreVersion();
  testIterateOldVersion();
  testObjects();
  testExample();
  testExampleMvcc();
  testOpenStoreCloseLoop();
  testVersion();
  testTruncateFile();
  testFastDelete();
  testRollbackInMemory();
  testRollbackStored();
  testMeta();
  testInMemory();
  testLargeImport();
  testBtreeStore();
  testCompact();
  testCompactMapNotOpen();
  testReuseSpace();
  testRandom();
  testKeyValueClasses();
  testIterate();
  testCloseTwice();
  testSimple();
  testLargerThan2G();
}",0.972997299729973
15910,"private void testFileHeaderCorruption() throws Exception {
  String fileName=getBaseDir() + ""String_Node_Str"";
  MVStore s=openStore(fileName);
  s.setRetentionTime(10);
  MVMap<Integer,Integer> map=s.openMap(""String_Node_Str"");
  for (int i=0; i < 5; i++) {
    s.setStoreVersion(i);
    s.store();
  }
  Thread.sleep(11);
  s.compact(50);
  map.put(10,100);
  s.store();
  FilePath f=FilePath.get(fileName);
  s.close();
  int blockSize=4 * 1024;
  for (int i=0; i <= blockSize; i+=blockSize) {
    FileChannel fc=f.open(""String_Node_Str"");
    MVStoreTool.dump(fileName,new PrintWriter(System.out));
    if (i == 0) {
      fc.truncate(fc.size() - 4096);
    }
    ByteBuffer buff=ByteBuffer.allocate(4 * 1024);
    fc.read(buff,i);
    String h=new String(buff.array(),""String_Node_Str"").trim();
    int idx=h.indexOf(""String_Node_Str"");
    int old=Character.digit(h.charAt(idx + ""String_Node_Str"".length()),16);
    int bad=(old + 1) & 15;
    buff.put(idx + ""String_Node_Str"".length(),(byte)Character.forDigit(bad,16));
    buff.rewind();
    fc.write(buff,i);
    fc.close();
    MVStoreTool.dump(fileName,new PrintWriter(System.out));
    if (i == 0) {
      s=openStore(fileName);
      map=s.openMap(""String_Node_Str"");
      assertEquals(100,map.get(10).intValue());
      s.close();
    }
 else {
      try {
        s=openStore(fileName);
        fail();
      }
 catch (      Exception e) {
      }
    }
  }
}","private void testFileHeaderCorruption() throws Exception {
  String fileName=getBaseDir() + ""String_Node_Str"";
  MVStore s=openStore(fileName);
  s.setRetentionTime(0);
  MVMap<Integer,byte[]> map;
  map=s.openMap(""String_Node_Str"");
  map.put(0,new byte[100]);
  for (int i=0; i < 10; i++) {
    map=s.openMap(""String_Node_Str"" + i);
    map.put(0,new byte[1000]);
    s.store();
  }
  FileStore fs=s.getFileStore();
  long size=fs.getFile().size();
  for (int i=0; i < 10; i++) {
    map=s.openMap(""String_Node_Str"" + i);
    map.removeMap();
    s.store();
    s.commit();
    s.compact(100);
    if (fs.getFile().size() <= size) {
      break;
    }
  }
  s.close();
  FilePath f=FilePath.get(fileName);
  int blockSize=4 * 1024;
  for (int i=0; i <= blockSize; i+=blockSize) {
    FileChannel fc=f.open(""String_Node_Str"");
    if (i == 0) {
      fc.truncate(fc.size() - 4096);
    }
    ByteBuffer buff=ByteBuffer.allocate(4 * 1024);
    fc.read(buff,i);
    String h=new String(buff.array(),""String_Node_Str"").trim();
    int idx=h.indexOf(""String_Node_Str"");
    int old=Character.digit(h.charAt(idx + ""String_Node_Str"".length()),16);
    int bad=(old + 1) & 15;
    buff.put(idx + ""String_Node_Str"".length(),(byte)Character.forDigit(bad,16));
    buff.rewind();
    fc.write(buff,i);
    fc.close();
    if (i == 0) {
      s=openStore(fileName);
      map=s.openMap(""String_Node_Str"");
      assertEquals(100,map.get(0).length);
      s.close();
    }
 else {
      try {
        s=openStore(fileName);
        fail();
      }
 catch (      Exception e) {
      }
    }
  }
}",0.7780730897009966
15911,"private static MVStore openStore(String fileName){
  return new MVStore.Builder().fileName(fileName).pageSplitSize(50).writeDelay(0).open();
}","private static MVStore openStore(String fileName){
  MVStore s=new MVStore.Builder().fileName(fileName).pageSplitSize(50).writeDelay(0).open();
  s.setRetentionTime(0);
  return s;
}",0.8518518518518519
15912,"public MVSecondaryIndex(Database db,MVTable table,int id,String indexName,IndexColumn[] columns,IndexType indexType){
  this.mvTable=table;
  initBaseIndex(table,id,indexName,columns,indexType);
  if (!database.isStarting()) {
    checkIndexColumnTypes(columns);
  }
  keyColumns=columns.length + 1;
  int[] sortTypes=new int[keyColumns];
  for (int i=0; i < columns.length; i++) {
    sortTypes[i]=columns[i].sortType;
  }
  sortTypes[keyColumns - 1]=SortOrder.ASCENDING;
  mapName=""String_Node_Str"" + getId();
  ValueDataType keyType=new ValueDataType(db.getCompareMode(),db,sortTypes);
  ValueDataType valueType=new ValueDataType(null,null,null);
  MVMap.Builder<Value,Value> mapBuilder=new MVMap.Builder<Value,Value>().keyType(keyType).valueType(valueType);
  dataMap=mvTable.getTransaction(null).openMap(mapName,mapBuilder);
}","public MVSecondaryIndex(Database db,MVTable table,int id,String indexName,IndexColumn[] columns,IndexType indexType){
  this.mvTable=table;
  initBaseIndex(table,id,indexName,columns,indexType);
  if (!database.isStarting()) {
    checkIndexColumnTypes(columns);
  }
  keyColumns=columns.length + 1;
  int[] sortTypes=new int[keyColumns];
  for (int i=0; i < columns.length; i++) {
    sortTypes[i]=columns[i].sortType;
  }
  sortTypes[keyColumns - 1]=SortOrder.ASCENDING;
  mapName=""String_Node_Str"" + getId();
  ValueDataType keyType=new ValueDataType(db.getCompareMode(),db,sortTypes);
  ValueDataType valueType=new ValueDataType(null,null,null);
  MVMap.Builder<Value,Value> mapBuilder=new MVMap.Builder<Value,Value>().keyType(keyType).valueType(valueType);
  dataMap=mvTable.getTransaction(null).openMap(mapName,mapBuilder);
  if (keyType != dataMap.map.getKeyType()) {
    throw DbException.throwInternalError(""String_Node_Str"");
  }
}",0.937923250564334
15913,"@Override public Index addIndex(Session session,String indexName,int indexId,IndexColumn[] cols,IndexType indexType,boolean create,String indexComment){
  if (indexType.isPrimaryKey()) {
    for (    IndexColumn c : cols) {
      Column column=c.column;
      if (column.isNullable()) {
        throw DbException.get(ErrorCode.COLUMN_MUST_NOT_BE_NULLABLE_1,column.getName());
      }
      column.setPrimaryKey(true);
    }
  }
  boolean isSessionTemporary=isTemporary() && !isGlobalTemporary();
  if (!isSessionTemporary) {
    database.lockMeta(session);
  }
  Index index;
  int mainIndexColumn;
  mainIndexColumn=getMainIndexColumn(indexType,cols);
  if (database.isStarting()) {
    index=new MVSecondaryIndex(session.getDatabase(),this,indexId,indexName,cols,indexType);
    if (index.getRowCountApproximation() != 0) {
      mainIndexColumn=-1;
    }
  }
 else   if (primaryIndex.getRowCount(session) != 0) {
    mainIndexColumn=-1;
  }
  if (mainIndexColumn != -1) {
    primaryIndex.setMainIndexColumn(mainIndexColumn);
    index=new MVDelegateIndex(this,indexId,indexName,primaryIndex,indexType);
  }
 else   if (indexType.isSpatial()) {
    index=new SpatialTreeIndex(this,indexId,indexName,cols,indexType,true,create,session);
  }
 else {
    index=new MVSecondaryIndex(session.getDatabase(),this,indexId,indexName,cols,indexType);
  }
  if (index.needRebuild() && rowCount > 0) {
    try {
      Index scan=getScanIndex(session);
      long remaining=scan.getRowCount(session);
      long total=remaining;
      Cursor cursor=scan.find(session,null,null);
      long i=0;
      int bufferSize=(int)Math.min(rowCount,Constants.DEFAULT_MAX_MEMORY_ROWS);
      ArrayList<Row> buffer=New.arrayList(bufferSize);
      String n=getName() + ""String_Node_Str"" + index.getName();
      int t=MathUtils.convertLongToInt(total);
      while (cursor.next()) {
        Row row=cursor.get();
        buffer.add(row);
        database.setProgress(DatabaseEventListener.STATE_CREATE_INDEX,n,MathUtils.convertLongToInt(i++),t);
        if (buffer.size() >= bufferSize) {
          addRowsToIndex(session,buffer,index);
        }
        remaining--;
      }
      addRowsToIndex(session,buffer,index);
      if (SysProperties.CHECK && remaining != 0) {
        DbException.throwInternalError(""String_Node_Str"" + remaining + ""String_Node_Str""+ getName());
      }
    }
 catch (    DbException e) {
      getSchema().freeUniqueName(indexName);
      try {
        index.remove(session);
      }
 catch (      DbException e2) {
        trace.error(e2,""String_Node_Str"");
        throw e2;
      }
      throw e;
    }
  }
  index.setTemporary(isTemporary());
  if (index.getCreateSQL() != null) {
    index.setComment(indexComment);
    if (isSessionTemporary) {
      session.addLocalTempTableIndex(index);
    }
 else {
      database.addSchemaObject(session,index);
    }
  }
  indexes.add(index);
  setModified();
  return index;
}","@Override public Index addIndex(Session session,String indexName,int indexId,IndexColumn[] cols,IndexType indexType,boolean create,String indexComment){
  if (indexType.isPrimaryKey()) {
    for (    IndexColumn c : cols) {
      Column column=c.column;
      if (column.isNullable()) {
        throw DbException.get(ErrorCode.COLUMN_MUST_NOT_BE_NULLABLE_1,column.getName());
      }
      column.setPrimaryKey(true);
    }
  }
  boolean isSessionTemporary=isTemporary() && !isGlobalTemporary();
  if (!isSessionTemporary) {
    database.lockMeta(session);
  }
  Index index;
  int mainIndexColumn;
  mainIndexColumn=getMainIndexColumn(indexType,cols);
  if (database.isStarting()) {
    if (store.store.hasMap(""String_Node_Str"" + indexId)) {
      mainIndexColumn=-1;
    }
  }
 else   if (primaryIndex.getRowCount(session) != 0) {
    mainIndexColumn=-1;
  }
  if (mainIndexColumn != -1) {
    primaryIndex.setMainIndexColumn(mainIndexColumn);
    index=new MVDelegateIndex(this,indexId,indexName,primaryIndex,indexType);
  }
 else   if (indexType.isSpatial()) {
    index=new SpatialTreeIndex(this,indexId,indexName,cols,indexType,true,create,session);
  }
 else {
    index=new MVSecondaryIndex(session.getDatabase(),this,indexId,indexName,cols,indexType);
  }
  if (index.needRebuild() && rowCount > 0) {
    try {
      Index scan=getScanIndex(session);
      long remaining=scan.getRowCount(session);
      long total=remaining;
      Cursor cursor=scan.find(session,null,null);
      long i=0;
      int bufferSize=(int)Math.min(rowCount,Constants.DEFAULT_MAX_MEMORY_ROWS);
      ArrayList<Row> buffer=New.arrayList(bufferSize);
      String n=getName() + ""String_Node_Str"" + index.getName();
      int t=MathUtils.convertLongToInt(total);
      while (cursor.next()) {
        Row row=cursor.get();
        buffer.add(row);
        database.setProgress(DatabaseEventListener.STATE_CREATE_INDEX,n,MathUtils.convertLongToInt(i++),t);
        if (buffer.size() >= bufferSize) {
          addRowsToIndex(session,buffer,index);
        }
        remaining--;
      }
      addRowsToIndex(session,buffer,index);
      if (SysProperties.CHECK && remaining != 0) {
        DbException.throwInternalError(""String_Node_Str"" + remaining + ""String_Node_Str""+ getName());
      }
    }
 catch (    DbException e) {
      getSchema().freeUniqueName(indexName);
      try {
        index.remove(session);
      }
 catch (      DbException e2) {
        trace.error(e2,""String_Node_Str"");
        throw e2;
      }
      throw e;
    }
  }
  index.setTemporary(isTemporary());
  if (index.getCreateSQL() != null) {
    index.setComment(indexComment);
    if (isSessionTemporary) {
      session.addLocalTempTableIndex(index);
    }
 else {
      database.addSchemaObject(session,index);
    }
  }
  indexes.add(index);
  setModified();
  return index;
}",0.969004329004329
15914,"/** 
 * Update the value for the given key. The key must exist.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key
 * @param value the value
 * @return the old value
 */
private Object set(Page p,long writeVersion,Object key,Object value){
  if (!p.isLeaf()) {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (contains(p,i,key)) {
        Page c=copyOnWrite(p.getChildPage(i),writeVersion);
        Object result=set(c,writeVersion,key,value);
        if (result == null) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"");
        }
        p.setChild(i,c);
        p.setCounts(i,c);
        return result;
      }
    }
  }
 else {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (keyType.equals(p.getKey(i),key)) {
        return p.setValue(i,value);
      }
    }
  }
  return null;
}","/** 
 * Update the value for the given key. The key must exist.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key
 * @param value the value
 * @return the old value
 */
private Object set(Page p,long writeVersion,Object key,Object value){
  if (!p.isLeaf()) {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (contains(p,i,key)) {
        Page c=copyOnWrite(p.getChildPage(i),writeVersion);
        Object result=set(c,writeVersion,key,value);
        if (result != null) {
          p.setChild(i,c);
          p.setCounts(i,c);
          return result;
        }
      }
    }
  }
 else {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (keyType.equals(p.getKey(i),key)) {
        return p.setValue(i,value);
      }
    }
  }
  return null;
}",0.8648325358851675
15915,"private void testClob() throws SQLException {
  if (config.memory || !config.big) {
    return;
  }
  deleteDb(""String_Node_Str"");
  conn=getConnection(""String_Node_Str"");
  Statement stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  freeSoftReferences();
  try {
    int base=Utils.getMemoryUsed();
    for (int i=0; i < 4; i++) {
      stat.execute(""String_Node_Str"");
      freeSoftReferences();
      int used=Utils.getMemoryUsed();
      if ((used - base) > 16000) {
        fail(""String_Node_Str"" + (used - base) + ""String_Node_Str""+ i);
      }
    }
  }
  finally {
    conn.close();
    freeMemory();
  }
}","private void testClob() throws SQLException {
  if (config.memory || !config.big) {
    return;
  }
  deleteDb(""String_Node_Str"");
  conn=getConnection(""String_Node_Str"");
  Statement stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  freeSoftReferences();
  try {
    int base=Utils.getMemoryUsed();
    for (int i=0; i < 4; i++) {
      stat.execute(""String_Node_Str"");
      freeSoftReferences();
      int used=Utils.getMemoryUsed();
      if ((used - base) > 3 * 8192) {
        fail(""String_Node_Str"" + (used - base) + ""String_Node_Str""+ i);
      }
    }
  }
  finally {
    conn.close();
    freeMemory();
  }
}",0.992170818505338
15916,"private void testCacheSize(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  MVStore s;
  MVMap<Integer,String> map;
  s=new MVStore.Builder().fileName(fileName).compressData().open();
  map=s.openMap(""String_Node_Str"");
  for (int i=0; i < 1024; i++) {
    map.put(i,new String(new char[10240]));
  }
  s.store();
  s.close();
  int[] expectedReadsForCacheSize={3406,2590,1924,1440,1108,956,918};
  for (int cacheSize=0; cacheSize <= 6; cacheSize+=4) {
    s=new MVStore.Builder().fileName(fileName).cacheSize(1 + 3 * cacheSize).open();
    map=s.openMap(""String_Node_Str"");
    for (int i=0; i < 1024; i+=128) {
      for (int j=0; j < i; j++) {
        String x=map.get(j);
        assertEquals(10240,x.length());
      }
    }
    assertEquals(expectedReadsForCacheSize[cacheSize],s.getFileStore().getReadCount());
    s.close();
  }
}","private void testCacheSize(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  MVStore s;
  MVMap<Integer,String> map;
  s=new MVStore.Builder().fileName(fileName).compressData().open();
  map=s.openMap(""String_Node_Str"");
  for (int i=0; i < 1024; i++) {
    map.put(i,new String(new char[10240]));
  }
  s.store();
  s.close();
  int[] expectedReadsForCacheSize={3405,2590,1924,1440,1108,956,918};
  for (int cacheSize=0; cacheSize <= 6; cacheSize+=4) {
    s=new MVStore.Builder().fileName(fileName).cacheSize(1 + 3 * cacheSize).open();
    map=s.openMap(""String_Node_Str"");
    for (int i=0; i < 1024; i+=128) {
      for (int j=0; j < i; j++) {
        String x=map.get(j);
        assertEquals(10240,x.length());
      }
    }
    assertEquals(expectedReadsForCacheSize[cacheSize],s.getFileStore().getReadCount());
    s.close();
  }
}",0.9988179669030732
15917,"private void testFastDelete(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  FileUtils.delete(fileName);
  MVStore s;
  MVMap<Integer,String> m;
  s=openStore(fileName,700);
  m=s.openMap(""String_Node_Str"");
  for (int i=0; i < 1000; i++) {
    m.put(i,""String_Node_Str"");
    assertEquals(i + 1,m.size());
  }
  assertEquals(1000,m.size());
  assertEquals(286,s.getUnsavedPageCount());
  s.store();
  assertEquals(2,s.getFileStore().getWriteCount());
  s.close();
  s=openStore(fileName);
  m=s.openMap(""String_Node_Str"");
  m.clear();
  assertEquals(0,m.size());
  s.store();
  assertEquals(42,s.getFileStore().getReadCount());
  assertEquals(1,s.getFileStore().getWriteCount());
  s.close();
}","private void testFastDelete(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  FileUtils.delete(fileName);
  MVStore s;
  MVMap<Integer,String> m;
  s=openStore(fileName,700);
  m=s.openMap(""String_Node_Str"");
  for (int i=0; i < 1000; i++) {
    m.put(i,""String_Node_Str"");
    assertEquals(i + 1,m.size());
  }
  assertEquals(1000,m.size());
  assertEquals(285,s.getUnsavedPageCount());
  s.store();
  assertEquals(2,s.getFileStore().getWriteCount());
  s.close();
  s=openStore(fileName);
  m=s.openMap(""String_Node_Str"");
  m.clear();
  assertEquals(0,m.size());
  s.store();
  assertEquals(42,s.getFileStore().getReadCount());
  assertEquals(1,s.getFileStore().getWriteCount());
  s.close();
}",0.9985795454545454
15918,"/** 
 * Store changes. Changes that are marked as temporary are rolled back after a restart.
 * @param temp whether the changes are only temporary (not committed), andshould be rolled back after a crash
 * @return the new version (incremented if there were changes)
 */
private synchronized long store(boolean temp){
  if (closed) {
    return currentVersion;
  }
  if (fileStore == null) {
    return incrementVersion();
  }
  if (currentStoreVersion >= 0) {
    return currentVersion;
  }
  if (!hasUnsavedChanges()) {
    return currentVersion;
  }
  if (fileStore.isReadOnly()) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_WRITING_FAILED,""String_Node_Str"");
  }
  int currentUnsavedPageCount=unsavedPageCount;
  currentStoreVersion=currentVersion;
  long storeVersion=currentStoreVersion;
  long version=++currentVersion;
  long time=getTime();
  lastStoreTime=time;
  if (temp) {
    meta.put(""String_Node_Str"",Long.toString(lastCommittedVersion));
    long minVersion=Long.MAX_VALUE;
    Chunk minChunk=null;
    for (    Chunk c : chunks.values()) {
      if (c.version < minVersion) {
        minVersion=c.version;
        minChunk=c;
      }
    }
    retainChunk=minChunk;
  }
 else {
    lastCommittedVersion=version;
    meta.remove(""String_Node_Str"");
    retainChunk=null;
  }
  Chunk lastChunk=chunks.get(lastChunkId);
  if (lastChunk != null) {
    meta.put(""String_Node_Str"" + lastChunk.id,lastChunk.asString());
    time=Math.max(lastChunk.time,time);
  }
  Chunk c;
  c=new Chunk(++lastChunkId);
  c.maxLength=Long.MAX_VALUE;
  c.maxLengthLive=Long.MAX_VALUE;
  c.start=Long.MAX_VALUE;
  c.length=Integer.MAX_VALUE;
  c.time=time;
  c.version=version;
  chunks.put(c.id,c);
  meta.put(""String_Node_Str"" + c.id,c.asString());
  ArrayList<MVMap<?,?>> list=New.arrayList(maps.values());
  ArrayList<MVMap<?,?>> changed=New.arrayList();
  for (  MVMap<?,?> m : list) {
    m.setWriteVersion(version);
    long v=m.getVersion();
    if (v >= 0 && v >= lastStoredVersion) {
      m.waitUntilWritten(storeVersion);
      MVMap<?,?> r=m.openVersion(storeVersion);
      if (r.getRoot().getPos() == 0) {
        changed.add(r);
      }
    }
  }
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() == 0) {
      meta.put(""String_Node_Str"" + m.getId(),""String_Node_Str"");
    }
 else {
      meta.put(""String_Node_Str"" + m.getId(),String.valueOf(Integer.MAX_VALUE));
    }
  }
  Set<Chunk> removedChunks=applyFreedSpace(storeVersion,time);
  ByteBuffer buff=getWriteBuffer();
  c.writeHeader(buff);
  c.maxLength=0;
  c.maxLengthLive=0;
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() > 0) {
      buff=p.writeUnsavedRecursive(c,buff);
      long root=p.getPos();
      meta.put(""String_Node_Str"" + m.getId(),""String_Node_Str"" + root);
    }
  }
  meta.put(""String_Node_Str"" + c.id,c.asString());
  meta.setWriteVersion(version);
  buff=meta.getRoot().writeUnsavedRecursive(c,buff);
  int chunkLength=buff.position();
  int length=MathUtils.roundUpInt(chunkLength,BLOCK_SIZE) + BLOCK_SIZE;
  if (length > buff.capacity()) {
    buff=DataUtils.ensureCapacity(buff,length - buff.capacity());
  }
  buff.limit(length);
  long end=getEndPosition();
  long filePos;
  if (reuseSpace) {
    filePos=fileStore.allocate(length);
  }
 else {
    filePos=end;
    fileStore.markUsed(end,length);
  }
  boolean storeAtEndOfFile=filePos + length >= end;
  for (  Chunk x : removedChunks) {
    int len=MathUtils.roundUpInt(x.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.free(x.start,len);
  }
  c.start=filePos;
  c.length=chunkLength;
  c.metaRootPos=meta.getRoot().getPos();
  buff.position(0);
  c.writeHeader(buff);
  rootChunkStart=filePos;
  revertTemp(storeVersion);
  buff.position(buff.limit() - BLOCK_SIZE);
  byte[] header=getStoreHeaderBytes();
  buff.put(header);
  buff.put(new byte[BLOCK_SIZE - header.length]);
  buff.position(0);
  fileStore.writeFully(filePos,buff);
  releaseWriteBuffer(buff);
  if (!storeAtEndOfFile) {
    writeStoreHeader();
    shrinkFileIfPossible(1);
  }
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() > 0) {
      p.writeEnd();
    }
  }
  meta.getRoot().writeEnd();
  unsavedPageCount=Math.max(0,unsavedPageCount - currentUnsavedPageCount);
  currentStoreVersion=-1;
  if (!temp) {
    metaChanged=false;
    lastStoredVersion=storeVersion;
  }
  return version;
}","/** 
 * Store changes. Changes that are marked as temporary are rolled back after a restart.
 * @param temp whether the changes are only temporary (not committed), andshould be rolled back after a crash
 * @return the new version (incremented if there were changes)
 */
private synchronized long store(boolean temp){
  if (closed) {
    return currentVersion;
  }
  if (fileStore == null) {
    return incrementVersion();
  }
  if (currentStoreVersion >= 0) {
    return currentVersion;
  }
  if (!hasUnsavedChanges()) {
    return currentVersion;
  }
  if (fileStore.isReadOnly()) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_WRITING_FAILED,""String_Node_Str"");
  }
  int currentUnsavedPageCount=unsavedPageCount;
  currentStoreVersion=currentVersion;
  long storeVersion=currentStoreVersion;
  long version=++currentVersion;
  long time=getTime();
  lastStoreTime=time;
  if (temp) {
    meta.put(""String_Node_Str"",Long.toString(lastCommittedVersion));
    long minVersion=Long.MAX_VALUE;
    Chunk minChunk=null;
    for (    Chunk c : chunks.values()) {
      if (c.version < minVersion) {
        minVersion=c.version;
        minChunk=c;
      }
    }
    retainChunk=minChunk;
  }
 else {
    lastCommittedVersion=version;
    meta.remove(""String_Node_Str"");
    retainChunk=null;
  }
  Chunk lastChunk=chunks.get(lastChunkId);
  if (lastChunk != null) {
    meta.put(""String_Node_Str"" + lastChunk.id,lastChunk.asString());
    time=Math.max(lastChunk.time,time);
  }
  Chunk c;
  c=new Chunk(++lastChunkId);
  c.maxLength=Long.MAX_VALUE;
  c.maxLengthLive=Long.MAX_VALUE;
  c.start=Long.MAX_VALUE;
  c.length=Integer.MAX_VALUE;
  c.time=time;
  c.version=version;
  chunks.put(c.id,c);
  meta.put(""String_Node_Str"" + c.id,c.asString());
  ArrayList<MVMap<?,?>> list=New.arrayList(maps.values());
  ArrayList<MVMap<?,?>> changed=New.arrayList();
  for (  MVMap<?,?> m : list) {
    m.setWriteVersion(version);
    long v=m.getVersion();
    if (v >= 0 && v >= lastStoredVersion) {
      m.waitUntilWritten(storeVersion);
      MVMap<?,?> r=m.openVersion(storeVersion);
      if (r.getRoot().getPos() == 0) {
        changed.add(r);
      }
    }
  }
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() == 0) {
      meta.put(""String_Node_Str"" + m.getId(),""String_Node_Str"");
    }
 else {
      meta.put(""String_Node_Str"" + m.getId(),String.valueOf(Integer.MAX_VALUE));
    }
  }
  Set<Chunk> removedChunks=applyFreedSpace(storeVersion,time);
  ByteBuffer buff=getWriteBuffer();
  c.writeHeader(buff);
  c.maxLength=0;
  c.maxLengthLive=0;
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() > 0) {
      buff=p.writeUnsavedRecursive(c,buff);
      long root=p.getPos();
      meta.put(""String_Node_Str"" + m.getId(),""String_Node_Str"" + root);
    }
  }
  meta.put(""String_Node_Str"" + c.id,c.asString());
  meta.setWriteVersion(version);
  buff=meta.getRoot().writeUnsavedRecursive(c,buff);
  int chunkLength=buff.position();
  int length=MathUtils.roundUpInt(chunkLength,BLOCK_SIZE) + BLOCK_SIZE;
  if (length > buff.capacity()) {
    buff=DataUtils.ensureCapacity(buff,length - buff.capacity());
  }
  buff.limit(length);
  for (  Chunk x : removedChunks) {
    int len=MathUtils.roundUpInt(x.length,BLOCK_SIZE) + BLOCK_SIZE;
    fileStore.free(x.start,len);
  }
  long end=getEndPosition();
  long filePos;
  if (reuseSpace) {
    filePos=fileStore.allocate(length);
  }
 else {
    filePos=end;
    fileStore.markUsed(end,length);
  }
  boolean storeAtEndOfFile=filePos + length >= end;
  c.start=filePos;
  c.length=chunkLength;
  c.metaRootPos=meta.getRoot().getPos();
  buff.position(0);
  c.writeHeader(buff);
  rootChunkStart=filePos;
  revertTemp(storeVersion);
  buff.position(buff.limit() - BLOCK_SIZE);
  byte[] header=getStoreHeaderBytes();
  buff.put(header);
  buff.put(new byte[BLOCK_SIZE - header.length]);
  buff.position(0);
  fileStore.writeFully(filePos,buff);
  releaseWriteBuffer(buff);
  if (!storeAtEndOfFile) {
    writeStoreHeader();
    shrinkFileIfPossible(1);
  }
  for (  MVMap<?,?> m : changed) {
    Page p=m.getRoot();
    if (p.getTotalCount() > 0) {
      p.writeEnd();
    }
  }
  meta.getRoot().writeEnd();
  unsavedPageCount=Math.max(0,unsavedPageCount - currentUnsavedPageCount);
  currentStoreVersion=-1;
  if (!temp) {
    metaChanged=false;
    lastStoredVersion=storeVersion;
  }
  return version;
}",0.9490187232122717
15919,"/** 
 * Add or update a key-value pair.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key (may not be null)
 * @param value the value (may not be null)
 * @return the old value, or null
 */
protected Object put(Page p,long writeVersion,Object key,Object value){
  int index=p.binarySearch(key);
  if (p.isLeaf()) {
    if (index < 0) {
      index=-index - 1;
      p.insertLeaf(index,key,value);
      return null;
    }
    return p.setValue(index,value);
  }
  if (index < 0) {
    index=-index - 1;
  }
 else {
    index++;
  }
  Page c=copyOnWrite(p.getChildPage(index),writeVersion);
  if (c.getMemory() > store.getPageSplitSize() && c.getKeyCount() > 1) {
    int at=c.getKeyCount() / 2;
    Object k=c.getKey(at);
    Page split=c.split(at);
    p.setChild(index,split);
    p.setCounts(index,c);
    p.insertNode(index,k,c);
    return put(p,writeVersion,key,value);
  }
  p.setChild(index,c);
  Object result=put(c,writeVersion,key,value);
  p.setCounts(index,c);
  return result;
}","/** 
 * Add or update a key-value pair.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key (may not be null)
 * @param value the value (may not be null)
 * @return the old value, or null
 */
protected Object put(Page p,long writeVersion,Object key,Object value){
  int index=p.binarySearch(key);
  if (p.isLeaf()) {
    if (index < 0) {
      index=-index - 1;
      p.insertLeaf(index,key,value);
      return null;
    }
    return p.setValue(index,value);
  }
  if (index < 0) {
    index=-index - 1;
  }
 else {
    index++;
  }
  Page c=copyOnWrite(p.getChildPage(index),writeVersion,true);
  if (c.getMemory() > store.getPageSplitSize() && c.getKeyCount() > 1) {
    int at=c.getKeyCount() / 2;
    Object k=c.getKey(at);
    Page split=c.split(at);
    p.setChild(index,split);
    p.setCounts(index,split);
    p.insertNode(index,k,c);
    return put(p,writeVersion,key,value);
  }
  p.setChild(index,c);
  Object result=put(c,writeVersion,key,value);
  p.setCounts(index,c);
  return result;
}",0.9946627850557982
15920,"/** 
 * Remove a key-value pair.
 * @param p the page (may not be null)
 * @param writeVersion the write version
 * @param key the key
 * @return the old value, or null if the key did not exist
 */
protected Object remove(Page p,long writeVersion,Object key){
  int index=p.binarySearch(key);
  Object result=null;
  if (p.isLeaf()) {
    if (index >= 0) {
      result=p.getValue(index);
      p.remove(index);
    }
    return result;
  }
  if (index < 0) {
    index=-index - 1;
  }
 else {
    index++;
  }
  Page cOld=p.getChildPage(index);
  Page c=copyOnWrite(cOld,writeVersion);
  result=remove(c,writeVersion,key);
  if (result == null) {
    return null;
  }
  if (c.getTotalCount() == 0) {
    if (p.getKeyCount() == 0) {
      p.setChild(index,c);
      p.setCounts(index,c);
      p.removePage();
    }
 else {
      p.remove(index);
    }
  }
 else {
    p.setChild(index,c);
    p.setCounts(index,c);
  }
  return result;
}","/** 
 * Remove a key-value pair.
 * @param p the page (may not be null)
 * @param writeVersion the write version
 * @param key the key
 * @return the old value, or null if the key did not exist
 */
protected Object remove(Page p,long writeVersion,Object key){
  int index=p.binarySearch(key);
  Object result=null;
  if (p.isLeaf()) {
    if (index >= 0) {
      result=p.getValue(index);
      p.remove(index);
    }
    return result;
  }
  if (index < 0) {
    index=-index - 1;
  }
 else {
    index++;
  }
  Page cOld=p.getChildPage(index);
  Page c=copyOnWrite(cOld,writeVersion,false);
  result=remove(c,writeVersion,key);
  if (result == null) {
    return null;
  }
  cOld.removePage();
  if (c.getTotalCount() == 0) {
    if (p.getKeyCount() == 0) {
      p.setChild(index,c);
      p.setCounts(index,c);
      p.removePage();
    }
 else {
      p.remove(index);
    }
  }
 else {
    p.setChild(index,c);
    p.setCounts(index,c);
  }
  return result;
}",0.9858118759852864
15921,"/** 
 * Create a copy of a page, if the write version is higher than the current version. If a copy is created, the old page is marked as deleted.
 * @param p the page
 * @param writeVersion the write version
 * @return a page with the given write version
 */
protected Page copyOnWrite(Page p,long writeVersion){
  if (p.getVersion() == writeVersion) {
    return p;
  }
  return p.copy(writeVersion);
}","/** 
 * Create a copy of a page, if the write version is higher than the current version. If a copy is created, the old page is marked as deleted.
 * @param p the page
 * @param writeVersion the write version
 * @param removeOld whether the old page should be marked as deleted
 * @return a page with the given write version
 */
protected Page copyOnWrite(Page p,long writeVersion,boolean removeOld){
  if (p.getVersion() == writeVersion) {
    return p;
  }
  return p.copy(writeVersion,removeOld);
}",0.8928176795580111
15922,"@Override protected Page copyOnWrite(Page p,long writeVersion){
  return p.copy(writeVersion);
}","@Override protected Page copyOnWrite(Page p,long writeVersion,boolean removeOld){
  return p.copy(writeVersion,removeOld);
}",0.8727272727272727
15923,"@Override @SuppressWarnings(""String_Node_Str"") public V put(K key,V value){
  beforeWrite();
  try {
    get(key);
    long v=writeVersion;
synchronized (this) {
      Page p=copyOnWrite(root,v);
      p=splitRootIfNeeded(p,v);
      V result=(V)put(p,v,key,value);
      newRoot(p);
      return result;
    }
  }
  finally {
    afterWrite();
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public V put(K key,V value){
  beforeWrite();
  try {
    get(key);
    long v=writeVersion;
synchronized (this) {
      Page p=copyOnWrite(root,v,true);
      p=splitRootIfNeeded(p,v);
      V result=(V)put(p,v,key,value);
      newRoot(p);
      return result;
    }
  }
  finally {
    afterWrite();
  }
}",0.9929078014184396
15924,"@Override @SuppressWarnings(""String_Node_Str"") public V remove(Object key){
  beforeWrite();
  try {
    V result=get(key);
    if (result == null) {
      return null;
    }
    long v=writeVersion;
synchronized (this) {
      Page p=copyOnWrite(root,v);
      result=(V)remove(p,v,key);
      newRoot(p);
    }
    return result;
  }
  finally {
    afterWrite();
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public V remove(Object key){
  beforeWrite();
  try {
    V result=get(key);
    if (result == null) {
      return null;
    }
    long v=writeVersion;
synchronized (this) {
      Page p=copyOnWrite(root,v,true);
      result=(V)remove(p,v,key);
      newRoot(p);
    }
    return result;
  }
  finally {
    afterWrite();
  }
}",0.9933065595716198
15925,"/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  this.compress=config.containsKey(""String_Node_Str"");
  Object o=config.get(""String_Node_Str"");
  pageSplitSize=o == null ? 6 * 1024 : (Integer)o;
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMapConcurrent<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,String> c=New.hashMap();
  c.put(""String_Node_Str"",""String_Node_Str"");
  c.put(""String_Node_Str"",Long.toString(currentVersion));
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  String fileName=(String)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    return;
  }
  if (fileStore == null) {
    fileStore=new FileStore();
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  int maxMemoryBytes=mb * 1024 * 1024;
  int averageMemory=pageSplitSize / 2;
  int segmentCount=16;
  int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
  cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
  o=config.get(""String_Node_Str"");
  mb=o == null ? 4 : (Integer)o;
  int writeBufferSize=mb * 1024 * 1024;
  int div=pageSplitSize;
  unsavedPageCountMax=writeBufferSize / (div == 0 ? 1 : div);
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    fileStore.open(fileName,readOnly,encryptionKey);
    if (fileStore.size() == 0) {
      creationTime=0;
      creationTime=getTime();
      lastStoreTime=creationTime;
      storeHeader.put(""String_Node_Str"",""String_Node_Str"");
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + BLOCK_SIZE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + FORMAT_WRITE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + creationTime);
      writeStoreHeader();
    }
 else {
      readStoreHeader();
      long format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),0);
      if (format > FORMAT_WRITE && !fileStore.isReadOnly()) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"" + ""String_Node_Str"",format,FORMAT_WRITE);
      }
      format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),format);
      if (format > FORMAT_READ) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"",format,FORMAT_READ);
      }
      if (rootChunkStart > 0) {
        readMeta();
      }
    }
    long rollback=DataUtils.parseLong(meta.get(""String_Node_Str""),-1);
    if (rollback != -1) {
      rollbackTo(rollback);
    }
  }
 catch (  IllegalStateException e) {
    try {
      closeStore(false);
    }
 catch (    Exception e2) {
    }
    throw e;
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastStoreTime=getTime();
  this.lastCommittedVersion=currentVersion;
  setWriteDelay(1000);
}","/** 
 * Create and open the store.
 * @param config the configuration to use
 * @throws IllegalStateException if the file is corrupt, or an exceptionoccurred while opening
 * @throws IllegalArgumentException if the directory does not exist
 */
MVStore(HashMap<String,Object> config){
  this.compress=config.containsKey(""String_Node_Str"");
  Object o=config.get(""String_Node_Str"");
  pageSplitSize=o == null ? 6 * 1024 : (Integer)o;
  o=config.get(""String_Node_Str"");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMapConcurrent<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,String> c=New.hashMap();
  c.put(""String_Node_Str"",""String_Node_Str"");
  c.put(""String_Node_Str"",Long.toString(currentVersion));
  meta.init(this,c);
  fileStore=(FileStore)config.get(""String_Node_Str"");
  String fileName=(String)config.get(""String_Node_Str"");
  if (fileName == null && fileStore == null) {
    cache=null;
    return;
  }
  if (fileStore == null) {
    fileStore=new FileStore();
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey(""String_Node_Str"");
  o=config.get(""String_Node_Str"");
  int mb=o == null ? 16 : (Integer)o;
  int maxMemoryBytes=mb * 1024 * 1024;
  int averageMemory=pageSplitSize / 2;
  int segmentCount=16;
  int stackMoveDistance=maxMemoryBytes / averageMemory * 2 / 100;
  cache=new CacheLongKeyLIRS<Page>(maxMemoryBytes,averageMemory,segmentCount,stackMoveDistance);
  o=config.get(""String_Node_Str"");
  mb=o == null ? 4 : (Integer)o;
  int writeBufferSize=mb * 1024 * 1024;
  int div=pageSplitSize;
  unsavedPageCountMax=writeBufferSize / (div == 0 ? 1 : div);
  char[] encryptionKey=(char[])config.get(""String_Node_Str"");
  try {
    fileStore.open(fileName,readOnly,encryptionKey);
    if (fileStore.size() == 0) {
      creationTime=0;
      creationTime=getTime();
      lastStoreTime=creationTime;
      storeHeader.put(""String_Node_Str"",""String_Node_Str"");
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + BLOCK_SIZE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + FORMAT_WRITE);
      storeHeader.put(""String_Node_Str"",""String_Node_Str"" + creationTime);
      writeStoreHeader();
    }
 else {
      readStoreHeader();
      long format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),0);
      if (format > FORMAT_WRITE && !fileStore.isReadOnly()) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"" + ""String_Node_Str"",format,FORMAT_WRITE);
      }
      format=DataUtils.parseLong(storeHeader.get(""String_Node_Str""),format);
      if (format > FORMAT_READ) {
        throw DataUtils.newIllegalStateException(DataUtils.ERROR_UNSUPPORTED_FORMAT,""String_Node_Str"",format,FORMAT_READ);
      }
      if (rootChunkStart > 0) {
        readMeta();
      }
    }
    long rollback=DataUtils.parseLong(meta.get(""String_Node_Str""),-1);
    if (rollback != -1) {
      rollbackTo(rollback);
    }
  }
 catch (  IllegalStateException e) {
    try {
      closeStore(false);
    }
 catch (    Exception e2) {
    }
    throw e;
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastStoreTime=getTime();
  this.lastCommittedVersion=currentVersion;
  o=config.get(""String_Node_Str"");
  int writeDelay=o == null ? 1000 : (Integer)o;
  setWriteDelay(writeDelay);
}",0.9853224610822832
15926,"/** 
 * Create a copy of this page.
 * @param version the new version
 * @return a page with the given version
 */
public Page copy(long version){
  removePage();
  Page newPage=create(map,version,keyCount,keys,values,children,childrenPages,counts,totalCount,SHARED_KEYS | SHARED_VALUES | SHARED_CHILDREN| SHARED_COUNTS,memory);
  newPage.cachedCompare=cachedCompare;
  return newPage;
}","/** 
 * Create a copy of this page.
 * @param version the new version
 * @param removeOld whether the old page should be marked as deleted
 * @return a page with the given version
 */
public Page copy(long version,boolean removeOld){
  if (removeOld) {
    int todoRemoveAtCaller;
    removePage();
  }
  Page newPage=create(map,version,keyCount,keys,values,children,childrenPages,counts,totalCount,SHARED_KEYS | SHARED_VALUES | SHARED_CHILDREN| SHARED_COUNTS,memory);
  newPage.cachedCompare=cachedCompare;
  return newPage;
}",0.8468271334792122
15927,"private Object putOrAdd(SpatialKey key,V value,boolean alwaysAdd){
  beforeWrite();
  try {
    long v=writeVersion;
    Page p=copyOnWrite(root,v);
    Object result;
    if (alwaysAdd || get(key) == null) {
      if (p.getMemory() > store.getPageSplitSize() && p.getKeyCount() > 1) {
        long totalCount=p.getTotalCount();
        Page split=split(p,v);
        Object k1=getBounds(p);
        Object k2=getBounds(split);
        Object[] keys={k1,k2};
        long[] children={p.getPos(),split.getPos(),0};
        Page[] childrenPages={p,split,null};
        long[] counts={p.getTotalCount(),split.getTotalCount(),0};
        p=Page.create(this,v,2,keys,null,children,childrenPages,counts,totalCount,0,0);
      }
      add(p,v,key,value);
      result=null;
    }
 else {
      result=set(p,v,key,value);
    }
    newRoot(p);
    return result;
  }
  finally {
    afterWrite();
  }
}","private Object putOrAdd(SpatialKey key,V value,boolean alwaysAdd){
  beforeWrite();
  try {
    long v=writeVersion;
    Page p=copyOnWrite(root,v,true);
    Object result;
    if (alwaysAdd || get(key) == null) {
      if (p.getMemory() > store.getPageSplitSize() && p.getKeyCount() > 1) {
        long totalCount=p.getTotalCount();
        Page split=split(p,v);
        Object k1=getBounds(p);
        Object k2=getBounds(split);
        Object[] keys={k1,k2};
        long[] children={p.getPos(),split.getPos(),0};
        Page[] childrenPages={p,split,null};
        long[] counts={p.getTotalCount(),split.getTotalCount(),0};
        p=Page.create(this,v,2,keys,null,children,childrenPages,counts,totalCount,0,0);
      }
      add(p,v,key,value);
      result=null;
    }
 else {
      result=set(p,v,key,value);
    }
    newRoot(p);
    return result;
  }
  finally {
    afterWrite();
  }
}",0.9972113775794758
15928,"private void add(Page p,long writeVersion,Object key,Object value){
  if (p.isLeaf()) {
    p.insertLeaf(p.getKeyCount(),key,value);
    return;
  }
  int index=-1;
  for (int i=0; i < p.getKeyCount(); i++) {
    if (contains(p,i,key)) {
      index=i;
      break;
    }
  }
  if (index < 0) {
    float min=Float.MAX_VALUE;
    for (int i=0; i < p.getKeyCount(); i++) {
      Object k=p.getKey(i);
      float areaIncrease=keyType.getAreaIncrease(k,key);
      if (areaIncrease < min) {
        index=i;
        min=areaIncrease;
      }
    }
  }
  Page c=copyOnWrite(p.getChildPage(index),writeVersion);
  if (c.getMemory() > store.getPageSplitSize() && c.getKeyCount() > 1) {
    Page split=split(c,writeVersion);
    p=copyOnWrite(p,writeVersion);
    p.setKey(index,getBounds(c));
    p.setChild(index,c);
    p.setCounts(index,c);
    p.insertNode(index,getBounds(split),split);
    add(p,writeVersion,key,value);
    return;
  }
  add(c,writeVersion,key,value);
  Object bounds=p.getKey(index);
  keyType.increaseBounds(bounds,key);
  p.setKey(index,bounds);
  p.setChild(index,c);
  p.setCounts(index,c);
}","private void add(Page p,long writeVersion,Object key,Object value){
  if (p.isLeaf()) {
    p.insertLeaf(p.getKeyCount(),key,value);
    return;
  }
  int index=-1;
  for (int i=0; i < p.getKeyCount(); i++) {
    if (contains(p,i,key)) {
      index=i;
      break;
    }
  }
  if (index < 0) {
    float min=Float.MAX_VALUE;
    for (int i=0; i < p.getKeyCount(); i++) {
      Object k=p.getKey(i);
      float areaIncrease=keyType.getAreaIncrease(k,key);
      if (areaIncrease < min) {
        index=i;
        min=areaIncrease;
      }
    }
  }
  Page c=copyOnWrite(p.getChildPage(index),writeVersion,true);
  if (c.getMemory() > store.getPageSplitSize() && c.getKeyCount() > 1) {
    Page split=split(c,writeVersion);
    p=copyOnWrite(p,writeVersion,true);
    p.setKey(index,getBounds(c));
    p.setChild(index,c);
    p.setCounts(index,c);
    p.insertNode(index,getBounds(split),split);
    add(p,writeVersion,key,value);
    return;
  }
  add(c,writeVersion,key,value);
  Object bounds=p.getKey(index);
  keyType.increaseBounds(bounds,key);
  p.setKey(index,bounds);
  p.setChild(index,c);
  p.setCounts(index,c);
}",0.9955396966993756
15929,"/** 
 * Update the value for the given key. The key must exist.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key
 * @param value the value
 * @return the old value
 */
private Object set(Page p,long writeVersion,Object key,Object value){
  if (!p.isLeaf()) {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (contains(p,i,key)) {
        Page c=copyOnWrite(p.getChildPage(i),writeVersion);
        Object result=set(c,writeVersion,key,value);
        if (result != null) {
          p.setChild(i,c);
          p.setCounts(i,c);
          return result;
        }
      }
    }
  }
 else {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (keyType.equals(p.getKey(i),key)) {
        return p.setValue(i,value);
      }
    }
  }
  return null;
}","/** 
 * Update the value for the given key. The key must exist.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key
 * @param value the value
 * @return the old value
 */
private Object set(Page p,long writeVersion,Object key,Object value){
  if (!p.isLeaf()) {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (contains(p,i,key)) {
        Page c=copyOnWrite(p.getChildPage(i),writeVersion,true);
        Object result=set(c,writeVersion,key,value);
        if (result == null) {
          throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"");
        }
        p.setChild(i,c);
        p.setCounts(i,c);
        return result;
      }
    }
  }
 else {
    for (int i=0; i < p.getKeyCount(); i++) {
      if (keyType.equals(p.getKey(i),key)) {
        return p.setValue(i,value);
      }
    }
  }
  return null;
}",0.9087656529516994
15930,"@Override protected void implCloseChannel() throws IOException {
  in.close();
}","@Override protected void implCloseChannel() throws IOException {
  if (in != null) {
    in.close();
  }
}",0.8602150537634409
15931,"@Override public void implCloseChannel() throws IOException {
  try {
    in.close();
  }
 catch (  IOException e) {
  }
}","@Override public void implCloseChannel() throws IOException {
  in.close();
}",0.7738693467336684
15932,"@Override protected void implCloseChannel() throws IOException {
  if (in != null) {
    in.close();
    in=null;
  }
}","@Override protected void implCloseChannel() throws IOException {
  if (in != null) {
    in.close();
    in=null;
  }
  file.close();
}",0.937007874015748
15933,"@Override public ArrayList<FilePath> newDirectoryStream(){
  String path=name;
  ArrayList<FilePath> list=New.arrayList();
  try {
    if (path.indexOf('!') < 0) {
      path+=""String_Node_Str"";
    }
    if (!path.endsWith(""String_Node_Str"")) {
      path+=""String_Node_Str"";
    }
    ZipFile file=openZipFile();
    String dirName=getEntryName();
    String prefix=path.substring(0,path.length() - dirName.length());
    Enumeration<? extends ZipEntry> en=file.entries();
    while (en.hasMoreElements()) {
      ZipEntry entry=en.nextElement();
      String name=entry.getName();
      if (!name.startsWith(dirName)) {
        continue;
      }
      if (name.length() <= dirName.length()) {
        continue;
      }
      int idx=name.indexOf('/',dirName.length());
      if (idx < 0 || idx >= name.length() - 1) {
        list.add(getPath(prefix + name));
      }
    }
    return list;
  }
 catch (  IOException e) {
    throw DbException.convertIOException(e,""String_Node_Str"" + path);
  }
}","@Override public ArrayList<FilePath> newDirectoryStream(){
  String path=name;
  ArrayList<FilePath> list=New.arrayList();
  try {
    if (path.indexOf('!') < 0) {
      path+=""String_Node_Str"";
    }
    if (!path.endsWith(""String_Node_Str"")) {
      path+=""String_Node_Str"";
    }
    ZipFile file=openZipFile();
    try {
      String dirName=getEntryName();
      String prefix=path.substring(0,path.length() - dirName.length());
      Enumeration<? extends ZipEntry> en=file.entries();
      while (en.hasMoreElements()) {
        ZipEntry entry=en.nextElement();
        String name=entry.getName();
        if (!name.startsWith(dirName)) {
          continue;
        }
        if (name.length() <= dirName.length()) {
          continue;
        }
        int idx=name.indexOf('/',dirName.length());
        if (idx < 0 || idx >= name.length() - 1) {
          list.add(getPath(prefix + name));
        }
      }
    }
  finally {
      file.close();
    }
    return list;
  }
 catch (  IOException e) {
    throw DbException.convertIOException(e,""String_Node_Str"" + path);
  }
}",0.9300766283524904
15934,"@Override public boolean exists(){
  try {
    String entryName=getEntryName();
    if (entryName.length() == 0) {
      return true;
    }
    ZipFile file=openZipFile();
    return file.getEntry(entryName) != null;
  }
 catch (  IOException e) {
    return false;
  }
}","@Override public boolean exists(){
  try {
    String entryName=getEntryName();
    if (entryName.length() == 0) {
      return true;
    }
    ZipFile file=openZipFile();
    try {
      return file.getEntry(entryName) != null;
    }
  finally {
      file.close();
    }
  }
 catch (  IOException e) {
    return false;
  }
}",0.9063545150501672
15935,"@Override public boolean isDirectory(){
  try {
    String entryName=getEntryName();
    if (entryName.length() == 0) {
      return true;
    }
    ZipFile file=openZipFile();
    Enumeration<? extends ZipEntry> en=file.entries();
    while (en.hasMoreElements()) {
      ZipEntry entry=en.nextElement();
      String n=entry.getName();
      if (n.equals(entryName)) {
        return entry.isDirectory();
      }
 else       if (n.startsWith(entryName)) {
        if (n.length() == entryName.length() + 1) {
          if (n.equals(entryName + ""String_Node_Str"")) {
            return true;
          }
        }
      }
    }
    return false;
  }
 catch (  IOException e) {
    return false;
  }
}","@Override public boolean isDirectory(){
  try {
    String entryName=getEntryName();
    if (entryName.length() == 0) {
      return true;
    }
    ZipFile file=openZipFile();
    try {
      Enumeration<? extends ZipEntry> en=file.entries();
      while (en.hasMoreElements()) {
        ZipEntry entry=en.nextElement();
        String n=entry.getName();
        if (n.equals(entryName)) {
          return entry.isDirectory();
        }
 else         if (n.startsWith(entryName)) {
          if (n.length() == entryName.length() + 1) {
            if (n.equals(entryName + ""String_Node_Str"")) {
              return true;
            }
          }
        }
      }
    }
  finally {
      file.close();
    }
    return false;
  }
 catch (  IOException e) {
    return false;
  }
}",0.8773584905660378
15936,"@Override public FileChannel open(String mode) throws IOException {
  ZipFile file=openZipFile();
  ZipEntry entry=file.getEntry(getEntryName());
  if (entry == null) {
    throw new FileNotFoundException(name);
  }
  return new FileZip(file,entry);
}","@Override public FileChannel open(String mode) throws IOException {
  ZipFile file=openZipFile();
  ZipEntry entry=file.getEntry(getEntryName());
  if (entry == null) {
    file.close();
    throw new FileNotFoundException(name);
  }
  return new FileZip(file,entry);
}",0.9653846153846154
15937,"@Override protected void implCloseChannel() throws IOException {
  if (in != null) {
    in.close();
  }
}","@Override protected void implCloseChannel() throws IOException {
  if (in != null) {
    in.close();
    in=null;
  }
}",0.9422222222222222
15938,"/** 
 * Add or update a key-value pair.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key (may not be null)
 * @param value the value (may not be null)
 * @return the old value, or null
 */
protected Object put(Page p,long writeVersion,Object key,Object value){
  int index=p.binarySearch(key);
  if (p.isLeaf()) {
    if (index < 0) {
      index=-index - 1;
      p.insertLeaf(index,key,value);
      return null;
    }
    return p.setValue(index,value);
  }
  if (index < 0) {
    index=-index - 1;
  }
 else {
    index++;
  }
  Page c=copyOnWrite(p.getChildPage(index),writeVersion,true);
  if (c.getMemory() > store.getPageSplitSize() && c.getKeyCount() > 1) {
    int at=c.getKeyCount() / 2;
    Object k=c.getKey(at);
    Page split=c.split(at);
    p.setChild(index,split);
    p.setCounts(index,split);
    p.insertNode(index,k,c);
    return put(p,writeVersion,key,value);
  }
  p.setChild(index,c);
  Object result=put(c,writeVersion,key,value);
  p.setCounts(index,c);
  return result;
}","/** 
 * Add or update a key-value pair.
 * @param p the page
 * @param writeVersion the write version
 * @param key the key (may not be null)
 * @param value the value (may not be null)
 * @return the old value, or null
 */
protected Object put(Page p,long writeVersion,Object key,Object value){
  int index=p.binarySearch(key);
  if (p.isLeaf()) {
    if (index < 0) {
      index=-index - 1;
      p.insertLeaf(index,key,value);
      return null;
    }
    return p.setValue(index,value);
  }
  if (index < 0) {
    index=-index - 1;
  }
 else {
    index++;
  }
  Page c=copyOnWrite(p.getChildPage(index),writeVersion);
  if (c.getMemory() > store.getPageSplitSize() && c.getKeyCount() > 1) {
    int at=c.getKeyCount() / 2;
    Object k=c.getKey(at);
    Page split=c.split(at);
    p.setChild(index,split);
    p.setCounts(index,split);
    p.insertNode(index,k,c);
    return put(p,writeVersion,key,value);
  }
  p.setChild(index,c);
  Object result=put(c,writeVersion,key,value);
  p.setCounts(index,c);
  return result;
}",0.9975786924939468
15939,"/** 
 * Get the map metadata as a string.
 * @param name the map name (or null)
 * @return the string
 */
public String asString(String name){
  StringBuilder buff=new StringBuilder();
  if (name != null) {
    DataUtils.appendMap(buff,""String_Node_Str"",name);
  }
  if (createVersion != 0) {
    DataUtils.appendMap(buff,""String_Node_Str"",createVersion);
  }
  String type=getType();
  if (type != null) {
    DataUtils.appendMap(buff,""String_Node_Str"",type);
  }
  return buff.toString();
}","/** 
 * Get the map metadata as a string.
 * @param name the map name (or null)
 * @return the string
 */
String asString(String name){
  StringBuilder buff=new StringBuilder();
  if (name != null) {
    DataUtils.appendMap(buff,""String_Node_Str"",name);
  }
  if (createVersion != 0) {
    DataUtils.appendMap(buff,""String_Node_Str"",createVersion);
  }
  String type=getType();
  if (type != null) {
    DataUtils.appendMap(buff,""String_Node_Str"",type);
  }
  return buff.toString();
}",0.992835209825998
15940,"/** 
 * Remove a key-value pair.
 * @param p the page (may not be null)
 * @param writeVersion the write version
 * @param key the key
 * @return the old value, or null if the key did not exist
 */
protected Object remove(Page p,long writeVersion,Object key){
  int index=p.binarySearch(key);
  Object result=null;
  if (p.isLeaf()) {
    if (index >= 0) {
      result=p.getValue(index);
      p.remove(index);
    }
    return result;
  }
  if (index < 0) {
    index=-index - 1;
  }
 else {
    index++;
  }
  Page cOld=p.getChildPage(index);
  Page c=copyOnWrite(cOld,writeVersion,false);
  result=remove(c,writeVersion,key);
  if (result == null) {
    return null;
  }
  cOld.removePage();
  if (c.getTotalCount() == 0) {
    if (p.getKeyCount() == 0) {
      p.setChild(index,c);
      p.setCounts(index,c);
      p.removePage();
    }
 else {
      p.remove(index);
    }
  }
 else {
    p.setChild(index,c);
    p.setCounts(index,c);
  }
  return result;
}","/** 
 * Remove a key-value pair.
 * @param p the page (may not be null)
 * @param writeVersion the write version
 * @param key the key
 * @return the old value, or null if the key did not exist
 */
protected Object remove(Page p,long writeVersion,Object key){
  int index=p.binarySearch(key);
  Object result=null;
  if (p.isLeaf()) {
    if (index >= 0) {
      result=p.getValue(index);
      p.remove(index);
    }
    return result;
  }
  if (index < 0) {
    index=-index - 1;
  }
 else {
    index++;
  }
  Page cOld=p.getChildPage(index);
  Page c=copyOnWrite(cOld,writeVersion);
  result=remove(c,writeVersion,key);
  if (result == null || c.getTotalCount() != 0) {
    p.setChild(index,c);
    p.setCounts(index,c);
  }
 else {
    if (p.getKeyCount() == 0) {
      p.setChild(index,c);
      p.setCounts(index,c);
      p.removePage();
    }
 else {
      p.remove(index);
    }
  }
  return result;
}",0.826226012793177
15941,"/** 
 * Create a copy of a page, if the write version is higher than the current version. If a copy is created, the old page is marked as deleted.
 * @param p the page
 * @param writeVersion the write version
 * @param removeOld whether the old page should be marked as deleted
 * @return a page with the given write version
 */
protected Page copyOnWrite(Page p,long writeVersion,boolean removeOld){
  if (p.getVersion() == writeVersion) {
    return p;
  }
  return p.copy(writeVersion,removeOld);
}","/** 
 * Create a copy of a page, if the write version is higher than the current version. If a copy is created, the old page is marked as deleted.
 * @param p the page
 * @param writeVersion the write version
 * @return a page with the given write version
 */
protected Page copyOnWrite(Page p,long writeVersion){
  if (p.getVersion() == writeVersion) {
    return p;
  }
  return p.copy(writeVersion);
}",0.8928176795580111
15942,"@Override protected Page copyOnWrite(Page p,long writeVersion,boolean removeOld){
  return p.copy(writeVersion,removeOld);
}","@Override protected Page copyOnWrite(Page p,long writeVersion){
  return p.copy(writeVersion);
}",0.8727272727272727
15943,"@Override @SuppressWarnings(""String_Node_Str"") public V put(K key,V value){
  beforeWrite();
  try {
    get(key);
    long v=writeVersion;
synchronized (this) {
      Page p=copyOnWrite(root,v,true);
      p=splitRootIfNeeded(p,v);
      V result=(V)put(p,v,key,value);
      newRoot(p);
      return result;
    }
  }
  finally {
    afterWrite();
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public V put(K key,V value){
  beforeWrite();
  try {
    get(key);
    long v=writeVersion;
synchronized (this) {
      Page p=copyOnWrite(root,v);
      p=splitRootIfNeeded(p,v);
      V result=(V)put(p,v,key,value);
      newRoot(p);
      return result;
    }
  }
  finally {
    afterWrite();
  }
}",0.9929078014184396
15944,"@Override @SuppressWarnings(""String_Node_Str"") public V remove(Object key){
  beforeWrite();
  try {
    V result=get(key);
    if (result == null) {
      return null;
    }
    long v=writeVersion;
synchronized (this) {
      Page p=copyOnWrite(root,v,true);
      result=(V)remove(p,v,key);
      newRoot(p);
    }
    return result;
  }
  finally {
    afterWrite();
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public V remove(Object key){
  beforeWrite();
  try {
    V result=get(key);
    if (result == null) {
      return null;
    }
    long v=writeVersion;
synchronized (this) {
      Page p=copyOnWrite(root,v);
      result=(V)remove(p,v,key);
      newRoot(p);
    }
    return result;
  }
  finally {
    afterWrite();
  }
}",0.9933065595716198
15945,"/** 
 * Create a copy of this page.
 * @param version the new version
 * @param removeOld whether the old page should be marked as deleted
 * @return a page with the given version
 */
public Page copy(long version,boolean removeOld){
  if (removeOld) {
    int todoRemoveAtCaller;
    removePage();
  }
  Page newPage=create(map,version,keyCount,keys,values,children,childrenPages,counts,totalCount,SHARED_KEYS | SHARED_VALUES | SHARED_CHILDREN| SHARED_COUNTS,memory);
  newPage.cachedCompare=cachedCompare;
  return newPage;
}","/** 
 * Create a copy of this page.
 * @param version the new version
 * @return a page with the given version
 */
public Page copy(long version){
  Page newPage=create(map,version,keyCount,keys,values,children,childrenPages,counts,totalCount,SHARED_KEYS | SHARED_VALUES | SHARED_CHILDREN| SHARED_COUNTS,memory);
  removePage();
  newPage.cachedCompare=cachedCompare;
  return newPage;
}",0.7177242888402626
15946,"public void test(String fileName){
  this.fileName=fileName;
  int best=Integer.MAX_VALUE;
  int bestSeed=0;
  Throwable failException=null;
  for (seed=0; seed < 1000; seed++) {
    FileUtils.delete(fileName);
    Throwable ex=null;
    try {
      testCase();
      continue;
    }
 catch (    Exception e) {
      ex=e;
    }
catch (    AssertionError e) {
      ex=e;
    }
    if (op < best) {
      trace(seed);
      bestSeed=seed;
      best=op;
      failException=ex;
    }
  }
  if (failException != null) {
    throw (AssertionError)new AssertionError(""String_Node_Str"" + bestSeed + ""String_Node_Str""+ best).initCause(failException);
  }
}","@Override public void test() throws Exception {
  concurrent=false;
  testMap(""String_Node_Str"");
  concurrent=true;
  testMap(""String_Node_Str"");
}",0.2428035043804756
15947,"private static void log(int op,int k,byte[] v,String msg){
}","/** 
 * Log the operation
 * @param op the operation id
 * @param k the key
 * @param v the value
 * @param msg the message
 */
private static void log(int op,int k,byte[] v,String msg){
}",0.4838709677419355
15948,"private void testCase() throws Exception {
  FileUtils.delete(fileName);
  MVStore s;
  MVMap<Integer,byte[]> m;
  s=new MVStore.Builder().fileName(fileName).pageSplitSize(50).writeDelay(0).open();
  m=s.openMap(""String_Node_Str"");
  Random r=new Random(seed);
  op=0;
  int size=getSize(10,100);
  TreeMap<Integer,byte[]> map=new TreeMap<Integer,byte[]>();
  for (; op < size; op++) {
    int k=r.nextInt(100);
    byte[] v=new byte[r.nextInt(10) * 10];
    int type=r.nextInt(11);
switch (type) {
case 0:
case 1:
case 2:
case 3:
      log(op,k,v,""String_Node_Str"");
    m.put(k,v);
  map.put(k,v);
break;
case 4:
case 5:
log(op,k,v,""String_Node_Str"");
m.remove(k);
map.remove(k);
break;
case 6:
log(op,k,v,""String_Node_Str"");
s.store();
break;
case 7:
log(op,k,v,""String_Node_Str"");
s.compact(80);
break;
case 8:
log(op,k,v,""String_Node_Str"");
m.clear();
map.clear();
break;
case 9:
log(op,k,v,""String_Node_Str"");
s.commit();
break;
case 10:
log(op,k,v,""String_Node_Str"");
s.commit();
s.close();
s=new MVStore.Builder().fileName(fileName).pageSplitSize(50).writeDelay(0).open();
m=s.openMap(""String_Node_Str"");
break;
}
assertEqualsMapValues(map.get(k),m.get(k));
assertEquals(map.ceilingKey(k),m.ceilingKey(k));
assertEquals(map.floorKey(k),m.floorKey(k));
assertEquals(map.higherKey(k),m.higherKey(k));
assertEquals(map.lowerKey(k),m.lowerKey(k));
assertEquals(map.isEmpty(),m.isEmpty());
if (map.size() != m.size()) {
assertEquals(map.size(),m.size());
}
}
s.store();
s.close();
}","private void testCase() throws Exception {
  FileUtils.delete(fileName);
  MVStore s;
  s=new MVStore.Builder().fileName(fileName).pageSplitSize(50).writeDelay(0).open();
  MVMap<Integer,byte[]> m;
  if (concurrent) {
    m=s.openMap(""String_Node_Str"",new MVMapConcurrent.Builder<Integer,byte[]>());
  }
 else {
    m=s.openMap(""String_Node_Str"");
  }
  Random r=new Random(seed);
  op=0;
  int size=getSize(100,1000);
  TreeMap<Integer,byte[]> map=new TreeMap<Integer,byte[]>();
  for (; op < size; op++) {
    int k=r.nextInt(100);
    byte[] v=new byte[r.nextInt(10) * 10];
    int type=r.nextInt(13);
switch (type) {
case 0:
case 1:
case 2:
case 3:
      log(op,k,v,""String_Node_Str"");
    m.put(k,v);
  map.put(k,v);
break;
case 4:
case 5:
log(op,k,v,""String_Node_Str"");
m.remove(k);
map.remove(k);
break;
case 6:
log(op,k,v,""String_Node_Str"");
s.store();
break;
case 7:
log(op,k,v,""String_Node_Str"");
s.compact(90);
break;
case 8:
log(op,k,v,""String_Node_Str"");
m.clear();
map.clear();
break;
case 9:
log(op,k,v,""String_Node_Str"");
s.commit();
break;
case 10:
log(op,k,v,""String_Node_Str"");
s.commit();
s.close();
s=new MVStore.Builder().fileName(fileName).pageSplitSize(50).writeDelay(0).open();
m=s.openMap(""String_Node_Str"");
break;
case 11:
log(op,k,v,""String_Node_Str"");
s.commit();
s.compactMoveChunks();
break;
case 12:
log(op,k,v,""String_Node_Str"");
ArrayList<Integer> keyList=new ArrayList<Integer>(map.keySet());
int index=Collections.binarySearch(keyList,k,null);
int index2=(int)m.getKeyIndex(k);
assertEquals(index,index2);
if (index >= 0) {
int k2=m.getKey(index);
assertEquals(k2,k);
}
break;
}
assertEqualsMapValues(map.get(k),m.get(k));
assertEquals(map.ceilingKey(k),m.ceilingKey(k));
assertEquals(map.floorKey(k),m.floorKey(k));
assertEquals(map.higherKey(k),m.higherKey(k));
assertEquals(map.lowerKey(k),m.lowerKey(k));
assertEquals(map.isEmpty(),m.isEmpty());
assertEquals(map.size(),m.size());
if (!map.isEmpty()) {
assertEquals(map.firstKey(),m.firstKey());
assertEquals(map.lastKey(),m.lastKey());
}
}
s.store();
s.close();
}",0.6864406779661016
15949,"/** 
 * Get the index that matches the ORDER BY list, if one exists. This is to avoid running a separate ORDER BY if an index can be used. This is specially important for large result sets, if only the first few rows are important (LIMIT is used)
 * @return the index if one is found
 */
private Index getSortIndex(){
  if (sort == null) {
    return null;
  }
  ArrayList<Column> sortColumns=New.arrayList();
  for (  int idx : sort.getIndexes()) {
    if (idx < 0 || idx >= expressions.size()) {
      throw DbException.getInvalidValueException(""String_Node_Str"",idx + 1);
    }
    Expression expr=expressions.get(idx);
    expr=expr.getNonAliasExpression();
    if (expr.isConstant()) {
      continue;
    }
    if (!(expr instanceof ExpressionColumn)) {
      return null;
    }
    ExpressionColumn exprCol=(ExpressionColumn)expr;
    if (exprCol.getTableFilter() != topTableFilter) {
      return null;
    }
    sortColumns.add(exprCol.getColumn());
  }
  Column[] sortCols=sortColumns.toArray(new Column[sortColumns.size()]);
  int[] sortTypes=sort.getSortTypes();
  if (sortCols.length == 0) {
    return topTableFilter.getTable().getScanIndex(session);
  }
  ArrayList<Index> list=topTableFilter.getTable().getIndexes();
  if (list != null) {
    for (int i=0, size=list.size(); i < size; i++) {
      Index index=list.get(i);
      if (index.getCreateSQL() == null) {
        continue;
      }
      if (index.getIndexType().isHash()) {
        continue;
      }
      IndexColumn[] indexCols=index.getIndexColumns();
      if (indexCols.length < sortCols.length) {
        continue;
      }
      boolean ok=true;
      for (int j=0; j < sortCols.length; j++) {
        IndexColumn idxCol=indexCols[j];
        Column sortCol=sortCols[j];
        if (idxCol.column != sortCol) {
          ok=false;
          break;
        }
        if (idxCol.sortType != sortTypes[j]) {
          ok=false;
          break;
        }
      }
      if (ok) {
        return index;
      }
    }
  }
  if (sortCols.length == 1 && sortCols[0].getColumnId() == -1) {
    Index index=topTableFilter.getTable().getScanIndex(session);
    if (index.isRowIdIndex()) {
      return index;
    }
  }
  return null;
}","/** 
 * Get the index that matches the ORDER BY list, if one exists. This is to avoid running a separate ORDER BY if an index can be used. This is specially important for large result sets, if only the first few rows are important (LIMIT is used)
 * @return the index if one is found
 */
private Index getSortIndex(){
  if (sort == null) {
    return null;
  }
  ArrayList<Column> sortColumns=New.arrayList();
  for (  int idx : sort.getQueryColumnIndexes()) {
    if (idx < 0 || idx >= expressions.size()) {
      throw DbException.getInvalidValueException(""String_Node_Str"",idx + 1);
    }
    Expression expr=expressions.get(idx);
    expr=expr.getNonAliasExpression();
    if (expr.isConstant()) {
      continue;
    }
    if (!(expr instanceof ExpressionColumn)) {
      return null;
    }
    ExpressionColumn exprCol=(ExpressionColumn)expr;
    if (exprCol.getTableFilter() != topTableFilter) {
      return null;
    }
    sortColumns.add(exprCol.getColumn());
  }
  Column[] sortCols=sortColumns.toArray(new Column[sortColumns.size()]);
  int[] sortTypes=sort.getSortTypes();
  if (sortCols.length == 0) {
    return topTableFilter.getTable().getScanIndex(session);
  }
  ArrayList<Index> list=topTableFilter.getTable().getIndexes();
  if (list != null) {
    for (int i=0, size=list.size(); i < size; i++) {
      Index index=list.get(i);
      if (index.getCreateSQL() == null) {
        continue;
      }
      if (index.getIndexType().isHash()) {
        continue;
      }
      IndexColumn[] indexCols=index.getIndexColumns();
      if (indexCols.length < sortCols.length) {
        continue;
      }
      boolean ok=true;
      for (int j=0; j < sortCols.length; j++) {
        IndexColumn idxCol=indexCols[j];
        Column sortCol=sortCols[j];
        if (idxCol.column != sortCol) {
          ok=false;
          break;
        }
        if (idxCol.sortType != sortTypes[j]) {
          ok=false;
          break;
        }
      }
      if (ok) {
        return index;
      }
    }
  }
  if (sortCols.length == 1 && sortCols[0].getColumnId() == -1) {
    Index index=topTableFilter.getTable().getScanIndex(session);
    if (index.isRowIdIndex()) {
      return index;
    }
  }
  return null;
}",0.9975130002260908
15950,"/** 
 * Calculate the cost for the given mask as if this index was a typical b-tree range index. This is the estimated cost required to search one row, and then iterate over the given number of rows.
 * @param masks the search mask
 * @param rowCount the number of rows in the index
 * @param sortOrder the sort order
 * @return the estimated cost
 */
protected long getCostRangeIndex(int[] masks,long rowCount,SortOrder sortOrder){
  rowCount+=Constants.COST_ROW_OFFSET;
  long cost=rowCount;
  long rows=rowCount;
  int totalSelectivity=0;
  if (masks == null) {
    return cost;
  }
  for (int i=0, len=columns.length; i < len; i++) {
    Column column=columns[i];
    int index=column.getColumnId();
    int mask=masks[index];
    if ((mask & IndexCondition.EQUALITY) == IndexCondition.EQUALITY) {
      if (i == columns.length - 1 && getIndexType().isUnique()) {
        cost=3;
        break;
      }
      totalSelectivity=100 - ((100 - totalSelectivity) * (100 - column.getSelectivity()) / 100);
      long distinctRows=rowCount * totalSelectivity / 100;
      if (distinctRows <= 0) {
        distinctRows=1;
      }
      rows=Math.max(rowCount / distinctRows,1);
      cost=2 + rows;
    }
 else     if ((mask & IndexCondition.RANGE) == IndexCondition.RANGE) {
      cost=2 + rows / 4;
      break;
    }
 else     if ((mask & IndexCondition.START) == IndexCondition.START) {
      cost=2 + rows / 3;
      break;
    }
 else     if ((mask & IndexCondition.END) == IndexCondition.END) {
      cost=rows / 3;
      break;
    }
 else {
      break;
    }
  }
  if (sortOrder != null) {
    int[] columnIndexes=new int[indexColumns.length];
    int[] columnSortTypes=new int[indexColumns.length];
    for (int i=0, len=indexColumns.length; i < len; i++) {
      columnIndexes[i]=indexColumns[i].column.getColumnId();
      columnSortTypes[i]=indexColumns[i].sortType;
    }
    boolean sortOrderMatches=true;
    int[] sortOrderIndexes=sortOrder.getIndexes();
    int coveringCount=0;
    for (int i=0, len=sortOrderIndexes.length; i < len; i++) {
      if (i >= columnIndexes.length) {
        break;
      }
      if (columnIndexes[i] != sortOrderIndexes[i] || columnSortTypes[i] != sortOrder.getSortTypes()[i]) {
        sortOrderMatches=false;
        break;
      }
      coveringCount++;
    }
    if (sortOrderMatches) {
      cost-=coveringCount;
    }
  }
  return cost;
}","/** 
 * Calculate the cost for the given mask as if this index was a typical b-tree range index. This is the estimated cost required to search one row, and then iterate over the given number of rows.
 * @param masks the search mask
 * @param rowCount the number of rows in the index
 * @param sortOrder the sort order
 * @return the estimated cost
 */
protected long getCostRangeIndex(int[] masks,long rowCount,SortOrder sortOrder){
  rowCount+=Constants.COST_ROW_OFFSET;
  long cost=rowCount;
  long rows=rowCount;
  int totalSelectivity=0;
  if (masks == null) {
    return cost;
  }
  for (int i=0, len=columns.length; i < len; i++) {
    Column column=columns[i];
    int index=column.getColumnId();
    int mask=masks[index];
    if ((mask & IndexCondition.EQUALITY) == IndexCondition.EQUALITY) {
      if (i == columns.length - 1 && getIndexType().isUnique()) {
        cost=3;
        break;
      }
      totalSelectivity=100 - ((100 - totalSelectivity) * (100 - column.getSelectivity()) / 100);
      long distinctRows=rowCount * totalSelectivity / 100;
      if (distinctRows <= 0) {
        distinctRows=1;
      }
      rows=Math.max(rowCount / distinctRows,1);
      cost=2 + rows;
    }
 else     if ((mask & IndexCondition.RANGE) == IndexCondition.RANGE) {
      cost=2 + rows / 4;
      break;
    }
 else     if ((mask & IndexCondition.START) == IndexCondition.START) {
      cost=2 + rows / 3;
      break;
    }
 else     if ((mask & IndexCondition.END) == IndexCondition.END) {
      cost=rows / 3;
      break;
    }
 else {
      break;
    }
  }
  if (sortOrder != null) {
    int[] columnIndexes=new int[indexColumns.length];
    int[] columnSortTypes=new int[indexColumns.length];
    for (int i=0, len=indexColumns.length; i < len; i++) {
      columnIndexes[i]=indexColumns[i].column.getColumnId();
      columnSortTypes[i]=indexColumns[i].sortType;
    }
    boolean sortOrderMatches=true;
    int[] sortOrderQueryColumnIndexes=sortOrder.getQueryColumnIndexes();
    int coveringCount=0;
    int theFollowingNeedsToBeFixedAndTested;
    for (int i=0, len=sortOrderQueryColumnIndexes.length; i < len; i++) {
      if (i >= columnIndexes.length) {
        break;
      }
      if (columnIndexes[i] != sortOrderQueryColumnIndexes[i] || columnSortTypes[i] != sortOrder.getSortTypes()[i]) {
        sortOrderMatches=false;
        break;
      }
      coveringCount++;
    }
    if (sortOrderMatches) {
      cost-=coveringCount;
    }
  }
  return cost;
}",0.9817210926268228
15951,"/** 
 * Create the SQL snippet that describes this sort order. This is the SQL snippet that usually appears after the ORDER BY clause.
 * @param list the expression list
 * @param visible the number of columns in the select list
 * @return the SQL snippet
 */
public String getSQL(Expression[] list,int visible){
  StatementBuilder buff=new StatementBuilder();
  int i=0;
  for (  int idx : indexes) {
    buff.appendExceptFirst(""String_Node_Str"");
    if (idx < visible) {
      buff.append(idx + 1);
    }
 else {
      buff.append('=').append(StringUtils.unEnclose(list[idx].getSQL()));
    }
    int type=sortTypes[i++];
    if ((type & DESCENDING) != 0) {
      buff.append(""String_Node_Str"");
    }
    if ((type & NULLS_FIRST) != 0) {
      buff.append(""String_Node_Str"");
    }
 else     if ((type & NULLS_LAST) != 0) {
      buff.append(""String_Node_Str"");
    }
  }
  return buff.toString();
}","/** 
 * Create the SQL snippet that describes this sort order. This is the SQL snippet that usually appears after the ORDER BY clause.
 * @param list the expression list
 * @param visible the number of columns in the select list
 * @return the SQL snippet
 */
public String getSQL(Expression[] list,int visible){
  StatementBuilder buff=new StatementBuilder();
  int i=0;
  for (  int idx : queryColumnIndexes) {
    buff.appendExceptFirst(""String_Node_Str"");
    if (idx < visible) {
      buff.append(idx + 1);
    }
 else {
      buff.append('=').append(StringUtils.unEnclose(list[idx].getSQL()));
    }
    int type=sortTypes[i++];
    if ((type & DESCENDING) != 0) {
      buff.append(""String_Node_Str"");
    }
    if ((type & NULLS_FIRST) != 0) {
      buff.append(""String_Node_Str"");
    }
 else     if ((type & NULLS_LAST) != 0) {
      buff.append(""String_Node_Str"");
    }
  }
  return buff.toString();
}",0.9928453494771602
15952,"/** 
 * Compare two expression lists.
 * @param a the first expression list
 * @param b the second expression list
 * @return the result of the comparison
 */
@Override public int compare(Value[] a,Value[] b){
  for (int i=0, len=indexes.length; i < len; i++) {
    int idx=indexes[i];
    int type=sortTypes[i];
    Value ao=a[idx];
    Value bo=b[idx];
    boolean aNull=ao == ValueNull.INSTANCE, bNull=bo == ValueNull.INSTANCE;
    if (aNull || bNull) {
      if (aNull == bNull) {
        continue;
      }
      return compareNull(aNull,type);
    }
    int comp=database.compare(ao,bo);
    if (comp != 0) {
      return (type & DESCENDING) == 0 ? comp : -comp;
    }
  }
  return 0;
}","/** 
 * Compare two expression lists.
 * @param a the first expression list
 * @param b the second expression list
 * @return the result of the comparison
 */
@Override public int compare(Value[] a,Value[] b){
  for (int i=0, len=queryColumnIndexes.length; i < len; i++) {
    int idx=queryColumnIndexes[i];
    int type=sortTypes[i];
    Value ao=a[idx];
    Value bo=b[idx];
    boolean aNull=ao == ValueNull.INSTANCE, bNull=bo == ValueNull.INSTANCE;
    if (aNull || bNull) {
      if (aNull == bNull) {
        continue;
      }
      return compareNull(aNull,type);
    }
    int comp=database.compare(ao,bo);
    if (comp != 0) {
      return (type & DESCENDING) == 0 ? comp : -comp;
    }
  }
  return 0;
}",0.9814814814814816
15953,"/** 
 * Construct a new sort order object.
 * @param database the database
 * @param index the column index list
 * @param sortType the sort order bit masks
 */
public SortOrder(Database database,int[] index,int[] sortType){
  this.database=database;
  this.indexes=index;
  this.sortTypes=sortType;
}","/** 
 * Construct a new sort order object.
 * @param database the database
 * @param queryColumnIndexes the column index list
 * @param sortType the sort order bit masks
 */
public SortOrder(Database database,int[] queryColumnIndexes,int[] sortType){
  this.database=database;
  this.queryColumnIndexes=queryColumnIndexes;
  this.sortTypes=sortType;
}",0.8742331288343558
15954,"@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  testGroupSubquery();
  testAnalyzeLob();
  testLike();
  testExistsSubquery();
  testQueryCacheConcurrentUse();
  testQueryCacheResetParams();
  testRowId();
  testSortIndex();
  testAutoAnalyze();
  testInAndBetween();
  testNestedIn();
  testConstantIn();
  testNestedInSelectAndLike();
  testNestedInSelect();
  testInSelectJoin();
  testMinMaxNullOptimization();
  if (config.networked) {
    return;
  }
  testOptimizeInJoinSelect();
  testOptimizeInJoin();
  testMultiColumnRangeQuery();
  testDistinctOptimization();
  testQueryCacheTimestamp();
  testQueryCacheSpeed();
  testQueryCache(true);
  testQueryCache(false);
  testIn();
  testMinMaxCountOptimization(true);
  testMinMaxCountOptimization(false);
  testOrderedIndexes();
  testConvertOrToIn();
  deleteDb(""String_Node_Str"");
}","@Override public void test() throws Exception {
  deleteDb(""String_Node_Str"");
  testOrderByExpression();
  testGroupSubquery();
  testAnalyzeLob();
  testLike();
  testExistsSubquery();
  testQueryCacheConcurrentUse();
  testQueryCacheResetParams();
  testRowId();
  testSortIndex();
  testAutoAnalyze();
  testInAndBetween();
  testNestedIn();
  testConstantIn();
  testNestedInSelectAndLike();
  testNestedInSelect();
  testInSelectJoin();
  testMinMaxNullOptimization();
  if (config.networked) {
    return;
  }
  testOptimizeInJoinSelect();
  testOptimizeInJoin();
  testMultiColumnRangeQuery();
  testDistinctOptimization();
  testQueryCacheTimestamp();
  testQueryCacheSpeed();
  testQueryCache(true);
  testQueryCache(false);
  testIn();
  testMinMaxCountOptimization(true);
  testMinMaxCountOptimization(false);
  testOrderedIndexes();
  testConvertOrToIn();
  deleteDb(""String_Node_Str"");
}",0.9847887323943662
15955,"@Override public void test(){
  FileUtils.deleteRecursive(getBaseDir(),true);
  FileUtils.createDirectories(getBaseDir());
  testExample();
  testMany();
  testSimple();
  testRandom();
}","@Override public void test(){
  FileUtils.deleteRecursive(getBaseDir(),true);
  FileUtils.createDirectories(getBaseDir());
  testExample();
  testMany();
  testSimple();
  testRandom();
  testRandomFind();
}",0.949238578680203
15956,"private void testRandom(boolean quadraticSplit){
  String fileName=getBaseDir() + ""String_Node_Str"";
  FileUtils.delete(fileName);
  MVStore s=openStore(fileName);
  MVRTreeMap<String> m=s.openMap(""String_Node_Str"",new MVRTreeMap.Builder<String>());
  m.setQuadraticSplit(quadraticSplit);
  HashMap<SpatialKey,String> map=new HashMap<SpatialKey,String>();
  Random rand=new Random(1);
  int operationCount=1000;
  int maxValue=30;
  for (int i=0; i < operationCount; i++) {
    int key=rand.nextInt(maxValue);
    Random rk=new Random(key);
    float x=rk.nextFloat(), y=rk.nextFloat();
    float p=(float)(rk.nextFloat() * 0.000001);
    SpatialKey k=new SpatialKey(key,x - p,x + p,y - p,y + p);
    String v=""String_Node_Str"" + rand.nextInt();
switch (rand.nextInt(3)) {
case 0:
      log(i + ""String_Node_Str"" + k+ ""String_Node_Str""+ v+ ""String_Node_Str""+ m.size());
    m.put(k,v);
  map.put(k,v);
break;
case 1:
log(i + ""String_Node_Str"" + k+ ""String_Node_Str""+ m.size());
m.remove(k);
map.remove(k);
break;
default :
String a=map.get(k);
String b=m.get(k);
if (a == null || b == null) {
assertTrue(a == b);
}
 else {
assertEquals(a,b);
}
break;
}
assertEquals(map.size(),m.size());
}
s.close();
}","private void testRandom(boolean quadraticSplit){
  String fileName=getBaseDir() + ""String_Node_Str"";
  FileUtils.delete(fileName);
  MVStore s=openStore(fileName);
  MVRTreeMap<String> m=s.openMap(""String_Node_Str"",new MVRTreeMap.Builder<String>());
  m.setQuadraticSplit(quadraticSplit);
  HashMap<SpatialKey,String> map=new HashMap<SpatialKey,String>();
  Random rand=new Random(1);
  int operationCount=10000;
  int maxValue=300;
  for (int i=0; i < operationCount; i++) {
    int key=rand.nextInt(maxValue);
    Random rk=new Random(key);
    float x=rk.nextFloat(), y=rk.nextFloat();
    float p=(float)(rk.nextFloat() * 0.000001);
    SpatialKey k=new SpatialKey(key,x - p,x + p,y - p,y + p);
    String v=""String_Node_Str"" + rand.nextInt();
    Iterator<SpatialKey> it;
switch (rand.nextInt(5)) {
case 0:
      log(i + ""String_Node_Str"" + k+ ""String_Node_Str""+ v+ ""String_Node_Str""+ m.size());
    m.put(k,v);
  map.put(k,v);
break;
case 1:
log(i + ""String_Node_Str"" + k+ ""String_Node_Str""+ m.size());
m.remove(k);
map.remove(k);
break;
case 2:
{
p=(float)(rk.nextFloat() * 0.01);
k=new SpatialKey(key,x - p,x + p,y - p,y + p);
it=m.findIntersectingKeys(k);
while (it.hasNext()) {
SpatialKey n=it.next();
String a=map.get(n);
assertFalse(a == null);
}
break;
}
case 3:
{
p=(float)(rk.nextFloat() * 0.01);
k=new SpatialKey(key,x - p,x + p,y - p,y + p);
it=m.findContainedKeys(k);
while (it.hasNext()) {
SpatialKey n=it.next();
String a=map.get(n);
assertFalse(a == null);
}
break;
}
default :
String a=map.get(k);
String b=m.get(k);
if (a == null || b == null) {
assertTrue(a == b);
}
 else {
assertEquals(a,b);
}
break;
}
assertEquals(map.size(),m.size());
}
s.close();
}",0.8340277777777778
15957,"private void testEncryptedFile(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  FileUtils.delete(fileName);
  MVStore s;
  MVMap<Integer,String> m;
  char[] passwordChars=""String_Node_Str"".toCharArray();
  s=new MVStore.Builder().fileName(fileName).encryptionKey(passwordChars).open();
  assertEquals(0,passwordChars[0]);
  assertEquals(0,passwordChars[1]);
  assertEquals(0,passwordChars[2]);
  assertTrue(FileUtils.exists(fileName));
  m=s.openMap(""String_Node_Str"");
  m.put(1,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.get(1));
  s.store();
  s.close();
  passwordChars=""String_Node_Str"".toCharArray();
  try {
    s=new MVStore.Builder().fileName(fileName).encryptionKey(passwordChars).open();
    fail();
  }
 catch (  IllegalStateException e) {
    assertTrue(e.getCause() != null);
  }
  assertEquals(0,passwordChars[0]);
  assertEquals(0,passwordChars[1]);
  assertEquals(0,passwordChars[2]);
  passwordChars=""String_Node_Str"".toCharArray();
  s=new MVStore.Builder().fileName(fileName).encryptionKey(passwordChars).open();
  assertEquals(0,passwordChars[0]);
  assertEquals(0,passwordChars[1]);
  assertEquals(0,passwordChars[2]);
  m=s.openMap(""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.get(1));
  s.close();
  FileUtils.delete(fileName);
  assertFalse(FileUtils.exists(fileName));
}","private void testEncryptedFile(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  FileUtils.delete(fileName);
  MVStore s;
  MVMap<Integer,String> m;
  char[] passwordChars=""String_Node_Str"".toCharArray();
  s=new MVStore.Builder().fileName(fileName).encryptionKey(passwordChars).open();
  assertEquals(0,passwordChars[0]);
  assertEquals(0,passwordChars[1]);
  assertEquals(0,passwordChars[2]);
  assertTrue(FileUtils.exists(fileName));
  m=s.openMap(""String_Node_Str"");
  m.put(1,""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.get(1));
  s.store();
  s.close();
  passwordChars=""String_Node_Str"".toCharArray();
  try {
    s=new MVStore.Builder().fileName(fileName).encryptionKey(passwordChars).open();
    fail();
  }
 catch (  IllegalStateException e) {
    assertEquals(DataUtils.ERROR_FILE_CORRUPT,DataUtils.getErrorCode(e.getMessage()));
  }
  assertEquals(0,passwordChars[0]);
  assertEquals(0,passwordChars[1]);
  assertEquals(0,passwordChars[2]);
  passwordChars=""String_Node_Str"".toCharArray();
  s=new MVStore.Builder().fileName(fileName).encryptionKey(passwordChars).open();
  assertEquals(0,passwordChars[0]);
  assertEquals(0,passwordChars[1]);
  assertEquals(0,passwordChars[2]);
  m=s.openMap(""String_Node_Str"");
  assertEquals(""String_Node_Str"",m.get(1));
  s.close();
  FileUtils.delete(fileName);
  assertFalse(FileUtils.exists(fileName));
}",0.9640873750462792
15958,"private void testFileFormatChange(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  FileUtils.delete(fileName);
  MVStore s;
  MVMap<Integer,Integer> m;
  s=openStore(fileName);
  m=s.openMap(""String_Node_Str"");
  m.put(1,1);
  Map<String,String> header=s.getFileHeader();
  int format=Integer.parseInt(header.get(""String_Node_Str""));
  assertEquals(1,format);
  header.put(""String_Node_Str"",Integer.toString(format + 1));
  s.store();
  s.close();
  try {
    openStore(fileName).close();
    fail();
  }
 catch (  IllegalStateException e) {
    assertTrue(e.getCause() != null);
  }
  FileUtils.delete(fileName);
}","private void testFileFormatChange(){
  String fileName=getBaseDir() + ""String_Node_Str"";
  FileUtils.delete(fileName);
  MVStore s;
  MVMap<Integer,Integer> m;
  s=openStore(fileName);
  m=s.openMap(""String_Node_Str"");
  m.put(1,1);
  Map<String,String> header=s.getFileHeader();
  int format=Integer.parseInt(header.get(""String_Node_Str""));
  assertEquals(1,format);
  header.put(""String_Node_Str"",Integer.toString(format + 1));
  s.store();
  s.close();
  try {
    openStore(fileName).close();
    fail();
  }
 catch (  IllegalStateException e) {
    assertEquals(DataUtils.ERROR_UNSUPPORTED_FORMAT,DataUtils.getErrorCode(e.getMessage()));
  }
  FileUtils.delete(fileName);
}",0.9223674096848578
15959,"private AutoDetectDataType newType(int typeId){
switch (typeId) {
case TYPE_NULL:
    return new NullType(this);
case TYPE_BOOLEAN:
  return new BooleanType(this);
case TYPE_BYTE:
return new ByteType(this);
case TYPE_SHORT:
return new ShortType(this);
case TYPE_CHAR:
return new CharacterType(this);
case TYPE_INT:
return new IntegerType(this);
case TYPE_LONG:
return new LongType(this);
case TYPE_FLOAT:
return new FloatType(this);
case TYPE_DOUBLE:
return new DoubleType(this);
case TYPE_BIG_INTEGER:
return new BigIntegerType(this);
case TYPE_BIG_DECIMAL:
return new BigDecimalType(this);
case TYPE_STRING:
return new StringType(this);
case TYPE_UUID:
return new UUIDType(this);
case TYPE_DATE:
return new DateType(this);
case TYPE_ARRAY:
return new ObjectArrayType(this);
case TYPE_SERIALIZED_OBJECT:
return new SerializedObjectType(this);
}
throw DataUtils.newIllegalStateException(""String_Node_Str"",typeId);
}","private AutoDetectDataType newType(int typeId){
switch (typeId) {
case TYPE_NULL:
    return new NullType(this);
case TYPE_BOOLEAN:
  return new BooleanType(this);
case TYPE_BYTE:
return new ByteType(this);
case TYPE_SHORT:
return new ShortType(this);
case TYPE_CHAR:
return new CharacterType(this);
case TYPE_INT:
return new IntegerType(this);
case TYPE_LONG:
return new LongType(this);
case TYPE_FLOAT:
return new FloatType(this);
case TYPE_DOUBLE:
return new DoubleType(this);
case TYPE_BIG_INTEGER:
return new BigIntegerType(this);
case TYPE_BIG_DECIMAL:
return new BigDecimalType(this);
case TYPE_STRING:
return new StringType(this);
case TYPE_UUID:
return new UUIDType(this);
case TYPE_DATE:
return new DateType(this);
case TYPE_ARRAY:
return new ObjectArrayType(this);
case TYPE_SERIALIZED_OBJECT:
return new SerializedObjectType(this);
}
throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",typeId);
}",0.9865229110512128
15960,"/** 
 * Read the header from the byte buffer.
 * @param buff the source buffer
 * @param start the start of the chunk in the file
 * @return the chunk
 */
static Chunk fromHeader(ByteBuffer buff,long start){
  if (buff.get() != 'c') {
    throw DataUtils.newIllegalStateException(""String_Node_Str"",start);
  }
  int length=buff.getInt();
  int chunkId=buff.getInt();
  int pageCount=buff.getInt();
  long metaRootPos=buff.getLong();
  long maxLength=buff.getLong();
  long maxLengthLive=buff.getLong();
  Chunk c=new Chunk(chunkId);
  c.length=length;
  c.pageCount=pageCount;
  c.pageCountLive=pageCount;
  c.start=start;
  c.metaRootPos=metaRootPos;
  c.maxLength=maxLength;
  c.maxLengthLive=maxLengthLive;
  return c;
}","/** 
 * Read the header from the byte buffer.
 * @param buff the source buffer
 * @param start the start of the chunk in the file
 * @return the chunk
 */
static Chunk fromHeader(ByteBuffer buff,long start){
  if (buff.get() != 'c') {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",start);
  }
  int length=buff.getInt();
  int chunkId=buff.getInt();
  int pageCount=buff.getInt();
  long metaRootPos=buff.getLong();
  long maxLength=buff.getLong();
  long maxLengthLive=buff.getLong();
  Chunk c=new Chunk(chunkId);
  c.length=length;
  c.pageCount=pageCount;
  c.pageCountLive=pageCount;
  c.start=start;
  c.metaRootPos=metaRootPos;
  c.maxLength=maxLength;
  c.maxLengthLive=maxLengthLive;
  return c;
}",0.9803389830508474
15961,"/** 
 * Fetch the next entry if there is one.
 */
@SuppressWarnings(""String_Node_Str"") protected void fetchNext(){
  while (pos != null) {
    if (pos.index < pos.page.getKeyCount()) {
      current=(K)pos.page.getKey(pos.index++);
      return;
    }
    pos=pos.parent;
    if (pos == null) {
      break;
    }
    if (pos.index < map.getChildPageCount(pos.page)) {
      min(pos.page.getChildPage(pos.index++),null);
    }
  }
  current=null;
}","/** 
 * Fetch the next entry if there is one.
 */
@SuppressWarnings(""String_Node_Str"") private void fetchNext(){
  while (pos != null) {
    if (pos.index < pos.page.getKeyCount()) {
      current=(K)pos.page.getKey(pos.index++);
      return;
    }
    pos=pos.parent;
    if (pos == null) {
      break;
    }
    if (pos.index < map.getChildPageCount(pos.page)) {
      min(pos.page.getChildPage(pos.index++),null);
    }
  }
  current=null;
}",0.9865771812080536
15962,"/** 
 * Fetch the next entry that is equal or larger than the given key, starting from the given page. This method retains the stack.
 * @param p the page to start
 * @param from the key to search
 */
protected void min(Page p,K from){
  while (true) {
    if (p.isLeaf()) {
      int x=from == null ? 0 : p.binarySearch(from);
      if (x < 0) {
        x=-x - 1;
      }
      pos=new CursorPos(p,x,pos);
      break;
    }
    int x=from == null ? -1 : p.binarySearch(from);
    if (x < 0) {
      x=-x - 1;
    }
 else {
      x++;
    }
    pos=new CursorPos(p,x + 1,pos);
    p=p.getChildPage(x);
  }
}","/** 
 * Fetch the next entry that is equal or larger than the given key, starting from the given page. This method retains the stack.
 * @param p the page to start
 * @param from the key to search
 */
private void min(Page p,K from){
  while (true) {
    if (p.isLeaf()) {
      int x=from == null ? 0 : p.binarySearch(from);
      if (x < 0) {
        x=-x - 1;
      }
      pos=new CursorPos(p,x,pos);
      break;
    }
    int x=from == null ? -1 : p.binarySearch(from);
    if (x < 0) {
      x=-x - 1;
    }
 else {
      x++;
    }
    pos=new CursorPos(p,x + 1,pos);
    p=p.getChildPage(x);
  }
}",0.9901153212520593
15963,"protected Cursor(MVMap<K,?> map,Page root,K from){
  this.map=map;
  this.root=root;
  this.from=from;
}","Cursor(MVMap<K,?> map,Page root,K from){
  this.map=map;
  this.root=root;
  this.from=from;
}",0.9494949494949496
15964,"/** 
 * Create a new IllegalStateException.
 * @param message the message
 * @param arguments the arguments
 * @return the exception
 */
public static IllegalStateException newIllegalStateException(String message,Object... arguments){
  return initCause(new IllegalStateException(MessageFormat.format(message,arguments) + ""String_Node_Str"" + getVersion()),arguments);
}","/** 
 * Create a new IllegalStateException.
 * @param message the message
 * @param arguments the arguments
 * @return the exception
 */
public static IllegalStateException newIllegalStateException(int errorCode,String message,Object... arguments){
  return initCause(new IllegalStateException(formatMessage(errorCode,message,arguments)),arguments);
}",0.8527777777777777
15965,"/** 
 * Read from a file channel until the buffer is full, or end-of-file has been reached. The buffer is rewind after reading.
 * @param file the file channel
 * @param pos the absolute position within the file
 * @param dst the byte buffer
 */
public static void readFully(FileChannel file,long pos,ByteBuffer dst){
  try {
    do {
      int len=file.read(dst,pos);
      if (len < 0) {
        throw new EOFException();
      }
      pos+=len;
    }
 while (dst.remaining() > 0);
    dst.rewind();
  }
 catch (  IOException e) {
    throw newIllegalStateException(""String_Node_Str"",file,dst.remaining(),pos,e);
  }
}","/** 
 * Read from a file channel until the buffer is full, or end-of-file has been reached. The buffer is rewind after reading.
 * @param file the file channel
 * @param pos the absolute position within the file
 * @param dst the byte buffer
 */
public static void readFully(FileChannel file,long pos,ByteBuffer dst){
  try {
    do {
      int len=file.read(dst,pos);
      if (len < 0) {
        throw new EOFException();
      }
      pos+=len;
    }
 while (dst.remaining() > 0);
    dst.rewind();
  }
 catch (  IOException e) {
    throw newIllegalStateException(ERROR_READING_FAILED,""String_Node_Str"",file,dst.remaining(),pos,e);
  }
}",0.9833465503568596
15966,"/** 
 * Write to a file channel.
 * @param file the file channel
 * @param pos the absolute position within the file
 * @param src the source buffer
 */
public static void writeFully(FileChannel file,long pos,ByteBuffer src){
  try {
    int off=0;
    do {
      int len=file.write(src,pos + off);
      off+=len;
    }
 while (src.remaining() > 0);
  }
 catch (  IOException e) {
    throw newIllegalStateException(""String_Node_Str"",file,src.remaining(),pos,e);
  }
}","/** 
 * Write to a file channel.
 * @param file the file channel
 * @param pos the absolute position within the file
 * @param src the source buffer
 */
public static void writeFully(FileChannel file,long pos,ByteBuffer src){
  try {
    int off=0;
    do {
      int len=file.write(src,pos + off);
      off+=len;
    }
 while (src.remaining() > 0);
  }
 catch (  IOException e) {
    throw newIllegalStateException(ERROR_WRITING_FAILED,""String_Node_Str"",file,src.remaining(),pos,e);
  }
}",0.978102189781022
15967,"/** 
 * Parse a key-value pair list.
 * @param s the list
 * @return the map
 */
public static HashMap<String,String> parseMap(String s){
  HashMap<String,String> map=New.hashMap();
  for (int i=0, size=s.length(); i < size; ) {
    int startKey=i;
    i=s.indexOf(':',i);
    checkArgument(i >= 0,""String_Node_Str"");
    String key=s.substring(startKey,i++);
    StringBuilder buff=new StringBuilder();
    while (i < size) {
      char c=s.charAt(i++);
      if (c == ',') {
        break;
      }
 else       if (c == '\""') {
        while (i < size) {
          c=s.charAt(i++);
          if (c == '\\') {
            c=s.charAt(i++);
          }
 else           if (c == '\""') {
            break;
          }
          buff.append(c);
        }
      }
 else {
        buff.append(c);
      }
    }
    map.put(key,buff.toString());
  }
  return map;
}","/** 
 * Parse a key-value pair list.
 * @param s the list
 * @return the map
 * @throws IllegalStateException if parsing failed
 */
public static HashMap<String,String> parseMap(String s){
  HashMap<String,String> map=New.hashMap();
  for (int i=0, size=s.length(); i < size; ) {
    int startKey=i;
    i=s.indexOf(':',i);
    if (i < 0) {
      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,""String_Node_Str"",s);
    }
    String key=s.substring(startKey,i++);
    StringBuilder buff=new StringBuilder();
    while (i < size) {
      char c=s.charAt(i++);
      if (c == ',') {
        break;
      }
 else       if (c == '\""') {
        while (i < size) {
          c=s.charAt(i++);
          if (c == '\\') {
            c=s.charAt(i++);
          }
 else           if (c == '\""') {
            break;
          }
          buff.append(c);
        }
      }
 else {
        buff.append(c);
      }
    }
    map.put(key,buff.toString());
  }
  return map;
}",0.909386869234943
15968,"/** 
 * Create a new UnsupportedOperationException.
 * @param message the message
 * @return the exception
 */
public static UnsupportedOperationException newUnsupportedOperationException(String message){
  return new UnsupportedOperationException(message + ""String_Node_Str"" + getVersion());
}","/** 
 * Create a new UnsupportedOperationException.
 * @param message the message
 * @return the exception
 */
public static UnsupportedOperationException newUnsupportedOperationException(String message){
  return new UnsupportedOperationException(formatMessage(0,message));
}",0.8912280701754386
15969,"/** 
 * Create a new ConcurrentModificationException.
 * @return the exception
 */
public static ConcurrentModificationException newConcurrentModificationException(){
  return new ConcurrentModificationException(getVersion());
}","/** 
 * Create a new ConcurrentModificationException.
 * @param message the message
 * @return the exception
 */
public static ConcurrentModificationException newConcurrentModificationException(String message){
  return new ConcurrentModificationException(formatMessage(0,message));
}",0.8515625
15970,"/** 
 * Create a new IllegalArgumentException.
 * @param message the message
 * @param arguments the arguments
 * @return the exception
 */
public static IllegalArgumentException newIllegalArgumentException(String message,Object... arguments){
  return initCause(new IllegalArgumentException(MessageFormat.format(message,arguments) + ""String_Node_Str"" + getVersion()),arguments);
}","/** 
 * Create a new IllegalArgumentException.
 * @param message the message
 * @param arguments the arguments
 * @return the exception
 */
public static IllegalArgumentException newIllegalArgumentException(String message,Object... arguments){
  return initCause(new IllegalArgumentException(formatMessage(0,message,arguments)),arguments);
}",0.8781163434903048
15971,"/** 
 * Allocate a number of pages.
 * @param length the number of bytes to allocate
 * @return the position in pages
 */
public synchronized int allocatePages(long length){
  int required=(int)(length / MVStore.BLOCK_SIZE) + 1;
  for (  PageRange pr : freeSpaceList) {
    if (pr.length >= required) {
      return pr.start;
    }
  }
  throw DataUtils.newIllegalStateException(""String_Node_Str"");
}","/** 
 * Allocate a number of pages.
 * @param length the number of bytes to allocate
 * @return the position in pages
 */
public synchronized int allocatePages(long length){
  int required=(int)(length / MVStore.BLOCK_SIZE) + 1;
  for (  PageRange pr : freeSpaceList) {
    if (pr.length >= required) {
      return pr.start;
    }
  }
  throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"");
}",0.9696969696969696
15972,"/** 
 * Mark the chunk as free.
 * @param c the chunk
 */
public synchronized void markFree(Chunk c){
  int chunkStart=(int)(c.start / MVStore.BLOCK_SIZE);
  int required=(c.length / MVStore.BLOCK_SIZE) + 1;
  PageRange found=null;
  int i=0;
  for (  PageRange pr : freeSpaceList) {
    if (pr.start > chunkStart) {
      found=pr;
      break;
    }
    i++;
  }
  if (found == null) {
    throw DataUtils.newIllegalStateException(""String_Node_Str"",c);
  }
  if (chunkStart + required + 1 == found.start) {
    found.start=chunkStart;
    found.length+=required;
    if (i > 0) {
      PageRange previous=freeSpaceList.get(i - 1);
      if (previous.start + previous.length + 1 == found.start) {
        previous.length+=found.length;
        freeSpaceList.remove(i);
      }
    }
    return;
  }
  if (i > 0) {
    PageRange previous=freeSpaceList.get(i - 1);
    if (previous.start + previous.length + 1 == chunkStart) {
      previous.length+=required;
      if (previous.start + previous.length + 1 == found.start) {
        previous.length+=found.length;
        freeSpaceList.remove(i);
      }
      return;
    }
  }
  PageRange newRange=new PageRange(chunkStart,required);
  freeSpaceList.add(i,newRange);
}","/** 
 * Mark the chunk as free.
 * @param c the chunk
 */
public synchronized void markFree(Chunk c){
  int chunkStart=(int)(c.start / MVStore.BLOCK_SIZE);
  int required=(c.length / MVStore.BLOCK_SIZE) + 1;
  PageRange found=null;
  int i=0;
  for (  PageRange pr : freeSpaceList) {
    if (pr.start > chunkStart) {
      found=pr;
      break;
    }
    i++;
  }
  if (found == null) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",c);
  }
  if (chunkStart + required + 1 == found.start) {
    found.start=chunkStart;
    found.length+=required;
    if (i > 0) {
      PageRange previous=freeSpaceList.get(i - 1);
      if (previous.start + previous.length + 1 == found.start) {
        previous.length+=found.length;
        freeSpaceList.remove(i);
      }
    }
    return;
  }
  if (i > 0) {
    PageRange previous=freeSpaceList.get(i - 1);
    if (previous.start + previous.length + 1 == chunkStart) {
      previous.length+=required;
      if (previous.start + previous.length + 1 == found.start) {
        previous.length+=found.length;
        freeSpaceList.remove(i);
      }
      return;
    }
  }
  PageRange newRange=new PageRange(chunkStart,required);
  freeSpaceList.add(i,newRange);
}",0.9898497766950872
15973,"/** 
 * Mark a chunk as used.
 * @param c the chunk
 */
public synchronized void markUsed(Chunk c){
  int chunkStart=(int)(c.start / MVStore.BLOCK_SIZE);
  int required=(int)((c.start + c.length) / MVStore.BLOCK_SIZE) + 2 - chunkStart;
  PageRange found=null;
  int i=0;
  for (  PageRange pr : freeSpaceList) {
    if (chunkStart >= pr.start && chunkStart < (pr.start + pr.length)) {
      found=pr;
      break;
    }
    i++;
  }
  if (found == null) {
    throw DataUtils.newIllegalStateException(""String_Node_Str"",c);
  }
  if (chunkStart + required > found.start + found.length) {
    throw DataUtils.newIllegalStateException(""String_Node_Str"",c);
  }
  if (found.start == chunkStart) {
    found.start+=required;
    found.length-=required;
    if (found.length == 0) {
      freeSpaceList.remove(i);
    }
  }
 else   if (found.start + found.length == chunkStart + required) {
    found.length-=required;
    if (found.length == 0) {
      freeSpaceList.remove(i);
    }
  }
 else {
    int length1=chunkStart - found.start;
    int start2=chunkStart + required;
    int length2=found.start + found.length - chunkStart - required;
    found.length=length1;
    PageRange newRange=new PageRange(start2,length2);
    freeSpaceList.add(i + 1,newRange);
  }
}","/** 
 * Mark a chunk as used.
 * @param c the chunk
 */
public synchronized void markUsed(Chunk c){
  int chunkStart=(int)(c.start / MVStore.BLOCK_SIZE);
  int required=(int)((c.start + c.length) / MVStore.BLOCK_SIZE) + 2 - chunkStart;
  PageRange found=null;
  int i=0;
  for (  PageRange pr : freeSpaceList) {
    if (chunkStart >= pr.start && chunkStart < (pr.start + pr.length)) {
      found=pr;
      break;
    }
    i++;
  }
  if (found == null) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",c);
  }
  if (chunkStart + required > found.start + found.length) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,""String_Node_Str"",c);
  }
  if (found.start == chunkStart) {
    found.start+=required;
    found.length-=required;
    if (found.length == 0) {
      freeSpaceList.remove(i);
    }
  }
 else   if (found.start + found.length == chunkStart + required) {
    found.length-=required;
    if (found.length == 0) {
      freeSpaceList.remove(i);
    }
  }
 else {
    int length1=chunkStart - found.start;
    int start2=chunkStart + required;
    int length2=found.start + found.length - chunkStart - required;
    found.length=length1;
    PageRange newRange=new PageRange(start2,length2);
    freeSpaceList.add(i + 1,newRange);
  }
}",0.9805900621118012
15974,"/** 
 * Check that no write operation is in progress.
 */
protected void checkConcurrentWrite(){
  if (writing) {
    throw DataUtils.newConcurrentModificationException();
  }
}","/** 
 * Check that no write operation is in progress.
 */
protected void checkConcurrentWrite(){
  if (writing) {
    throw DataUtils.newConcurrentModificationException(getName());
  }
}",0.975206611570248
15975,"/** 
 * Check whether the map is open.
 * @throws IllegalStateException if the map is closed
 */
protected void checkOpen(){
  if (closed) {
    throw DataUtils.newIllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Check whether the map is open.
 * @throws IllegalStateException if the map is closed
 */
protected void checkOpen(){
  if (closed) {
    throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED,""String_Node_Str"");
  }
}",0.9483146067415732
15976,"@Override public Value link(DataHandler database,int tabId){
  if (small == null) {
    if (tableId == LobStorageFrontend.TABLE_TEMP) {
      database.getLobStorage().setTable(lobId,tabId);
      this.tableId=tabId;
    }
 else {
      return lobStorage.copyLob(type,lobId,tabId,getPrecision());
    }
  }
 else   if (small.length > handler.getMaxLengthInplaceLob()) {
    LobStorageInterface s=handler.getLobStorage();
    Value v;
    if (type == Value.BLOB) {
      v=s.createBlob(getInputStream(),getPrecision());
    }
 else {
      v=s.createClob(getReader(),getPrecision());
    }
    return v.link(handler,tabId);
  }
  return this;
}","@Override public Value link(DataHandler database,int tabId){
  if (small == null) {
    if (tableId == LobStorageFrontend.TABLE_TEMP) {
      database.getLobStorage().setTable(lobId,tabId);
      this.tableId=tabId;
    }
 else {
      return lobStorage.copyLob(type,lobId,tabId,getPrecision());
    }
  }
 else   if (small.length > database.getMaxLengthInplaceLob()) {
    LobStorageInterface s=database.getLobStorage();
    Value v;
    if (type == Value.BLOB) {
      v=s.createBlob(getInputStream(),getPrecision());
    }
 else {
      v=s.createClob(getReader(),getPrecision());
    }
    return v.link(database,tabId);
  }
  return this;
}",0.9044289044289044
15977,"@Override public TempFileDeleter getTempFileDeleter(){
  return TempFileDeleter.getInstance();
}","@Override public TempFileDeleter getTempFileDeleter(){
  if (tempFileDeleter == null) {
    tempFileDeleter=TempFileDeleter.getInstance();
  }
  return tempFileDeleter;
}",0.6992481203007519
15978,"private void stop(){
  session.endStatement();
  session.closeTemporaryResults();
  session.setCurrentCommand(null);
  if (!isTransactional()) {
    session.commit(true);
  }
 else   if (session.getAutoCommit()) {
    session.commit(false);
  }
 else   if (session.getDatabase().isMultiThreaded()) {
    Database db=session.getDatabase();
    if (db != null) {
      if (db.getLockMode() == Constants.LOCK_MODE_READ_COMMITTED) {
        session.unlockReadLocks();
      }
    }
  }
  if (trace.isInfoEnabled() && startTime > 0) {
    long time=System.currentTimeMillis() - startTime;
    if (time > Constants.SLOW_QUERY_LIMIT_MS) {
      trace.info(""String_Node_Str"",time);
    }
  }
}","private void stop(){
  session.endStatement();
  session.setCurrentCommand(null);
  if (!isTransactional()) {
    session.commit(true);
  }
 else   if (session.getAutoCommit()) {
    session.commit(false);
  }
 else   if (session.getDatabase().isMultiThreaded()) {
    Database db=session.getDatabase();
    if (db != null) {
      if (db.getLockMode() == Constants.LOCK_MODE_READ_COMMITTED) {
        session.unlockReadLocks();
      }
    }
  }
  if (trace.isInfoEnabled() && startTime > 0) {
    long time=System.currentTimeMillis() - startTime;
    if (time > Constants.SLOW_QUERY_LIMIT_MS) {
      trace.info(""String_Node_Str"",time);
    }
  }
}",0.9737827715355806
15979,"/** 
 * Close all temporary result set. This also deletes all temporary files held by the result sets.
 */
public void closeTemporaryResults(){
  if (temporaryResults != null) {
    for (    ResultInterface result : temporaryResults) {
      result.close();
    }
    temporaryResults=null;
  }
}","private void closeTemporaryResults(){
  if (temporaryResults != null) {
    for (    ResultInterface result : temporaryResults) {
      result.close();
    }
    temporaryResults=null;
  }
}",0.7654320987654321
15980,"public Savepoint setSavepoint(){
  Savepoint sp=new Savepoint();
  sp.logIndex=undoLog.size();
  if (database.getMvStore() != null) {
    sp.transactionSavepoint=getStatementSavepoint();
  }
  return sp;
}","/** 
 * Create a savepoint to allow rolling back to this state.
 * @return the savepoint
 */
public Savepoint setSavepoint(){
  Savepoint sp=new Savepoint();
  sp.logIndex=undoLog.size();
  if (database.getMvStore() != null) {
    sp.transactionSavepoint=getStatementSavepoint();
  }
  return sp;
}",0.7992047713717694
15981,"public void endStatement(){
  startStatement=-1;
}","/** 
 * Mark the statement as completed. This also close all temporary result set, and deletes all temporary files held by the result sets.
 */
public void endStatement(){
  startStatement=-1;
  closeTemporaryResults();
}",0.3690036900369003
15982,"/** 
 * Add an additional element if possible. Example: given two conditions A IN(1, 2) OR A=3, the constant 3 is added: A IN(1, 2, 3).
 * @param other the second condition
 * @return null if the condition was not added, or the new condition
 */
Expression getAdditional(Session session,Comparison other){
  Expression add=other.getIfEquals(left);
  if (add != null) {
    if (add.isConstant()) {
      valueList.add(add);
      valueSet.add(add.getValue(session).convertTo(left.getType()));
      return this;
    }
  }
  return null;
}","/** 
 * Add an additional element if possible. Example: given two conditions A IN(1, 2) OR A=3, the constant 3 is added: A IN(1, 2, 3).
 * @param session the session
 * @param other the second condition
 * @return null if the condition was not added, or the new condition
 */
Expression getAdditional(Session session,Comparison other){
  Expression add=other.getIfEquals(left);
  if (add != null) {
    if (add.isConstant()) {
      valueList.add(add);
      valueSet.add(add.getValue(session).convertTo(left.getType()));
      return this;
    }
  }
  return null;
}",0.9728260869565216
15983,"public void closeImmediately(){
  if (store.isClosed()) {
    return;
  }
  FileChannel f=store.getFile();
  if (f != null) {
    try {
      f.close();
    }
 catch (    IOException e) {
      throw DbException.convertIOException(e,""String_Node_Str"");
    }
  }
}","/** 
 * Close the store, without persisting changes.
 */
public void closeImmediately(){
  if (store.isClosed()) {
    return;
  }
  FileChannel f=store.getFile();
  if (f != null) {
    try {
      f.close();
    }
 catch (    IOException e) {
      throw DbException.convertIOException(e,""String_Node_Str"");
    }
  }
}",0.9025641025641026
15984,"public void store(){
  if (!store.isReadOnly()) {
    store.commit();
    store.compact(50);
    store.store();
  }
}","/** 
 * Store all pending changes.
 */
public void store(){
  if (!store.isReadOnly()) {
    store.commit();
    store.compact(50);
    store.store();
  }
}",0.8571428571428571
15985,"public void close(){
  if (!store.isReadOnly()) {
    store.store();
  }
  store.close();
}","/** 
 * Close the store. Pending changes are persisted.
 */
public void close(){
  if (!store.isReadOnly()) {
    store.store();
  }
  store.close();
}",0.7520661157024794
15986,"boolean isTransactionOpen(long transactionId){
  if (transactionId < firstOpenTransaction) {
    return false;
  }
  if (firstOpenTransaction == -1) {
    if (undoLog.size() == 0) {
      return false;
    }
    long[] key=undoLog.firstKey();
    firstOpenTransaction=key[0];
  }
  if (firstOpenTransaction == transactionId) {
    return true;
  }
  long[] key={transactionId,-1};
  key=undoLog.higherKey(key);
  return key != null && key[0] == transactionId;
}","/** 
 * Check whether the given transaction id is still open and contains log entries.
 * @param transactionId the transaction id
 * @return true if it is open
 */
boolean isTransactionOpen(long transactionId){
  if (transactionId < firstOpenTransaction) {
    return false;
  }
  if (firstOpenTransaction == -1) {
    if (undoLog.size() == 0) {
      return false;
    }
    long[] key=undoLog.firstKey();
    firstOpenTransaction=key[0];
  }
  if (firstOpenTransaction == transactionId) {
    return true;
  }
  long[] key={transactionId,-1};
  key=undoLog.higherKey(key);
  return key != null && key[0] == transactionId;
}",0.848987108655617
15987,"void endTransaction(Transaction t){
  if (t.getStatus() == Transaction.STATUS_PREPARED) {
    preparedTransactions.remove(t.getId());
  }
  t.setStatus(Transaction.STATUS_CLOSED);
  if (t.getId() == firstOpenTransaction) {
    firstOpenTransaction=-1;
  }
}","/** 
 * End this transaction
 * @param t the transaction
 */
void endTransaction(Transaction t){
  if (t.getStatus() == Transaction.STATUS_PREPARED) {
    preparedTransactions.remove(t.getId());
  }
  t.setStatus(Transaction.STATUS_CLOSED);
  if (t.getId() == firstOpenTransaction) {
    firstOpenTransaction=-1;
  }
}",0.8939130434782608
15988,"/** 
 * Set the table reference of this lob.
 * @param lobId the lob
 * @param table the table
 */
void setTable(long lobId,int tableIdSessionVariable);","/** 
 * Set the table reference of this lob.
 * @param lobId the lob
 * @param table the table
 */
void setTable(long lobId,int table);",0.940766550522648
15989,"/** 
 * Create a LOB value with the given parameters.
 * @param type the data type
 * @param handler the file handler
 * @param tableId the table object id
 * @param objectId the object id
 * @param precision the precision (length in elements)
 * @param compression if compression is used
 * @return the value object
 */
public static ValueLob openUnlinked(int type,DataHandler handler,int tableId,int objectId,long precision,boolean compression,String fileName){
  return new ValueLob(type,handler,fileName,tableId,objectId,false,precision,compression);
}","/** 
 * Create a LOB value with the given parameters.
 * @param type the data type
 * @param handler the file handler
 * @param tableId the table object id
 * @param objectId the object id
 * @param precision the precision (length in elements)
 * @param compression if compression is used
 * @param fileName the file name
 * @return the value object
 */
public static ValueLob openUnlinked(int type,DataHandler handler,int tableId,int objectId,long precision,boolean compression,String fileName){
  return new ValueLob(type,handler,fileName,tableId,objectId,false,precision,compression);
}",0.97117903930131
15990,"public static String getFileNamePrefix(String path,int objectId){
  String name;
  int f=objectId % SysProperties.LOB_FILES_PER_DIRECTORY;
  if (f > 0) {
    name=SysProperties.FILE_SEPARATOR + objectId;
  }
 else {
    name=""String_Node_Str"";
  }
  objectId/=SysProperties.LOB_FILES_PER_DIRECTORY;
  while (objectId > 0) {
    f=objectId % SysProperties.LOB_FILES_PER_DIRECTORY;
    name=SysProperties.FILE_SEPARATOR + f + Constants.SUFFIX_LOBS_DIRECTORY+ name;
    objectId/=SysProperties.LOB_FILES_PER_DIRECTORY;
  }
  name=FileUtils.toRealPath(path + Constants.SUFFIX_LOBS_DIRECTORY + name);
  return name;
}","private static String getFileNamePrefix(String path,int objectId){
  String name;
  int f=objectId % SysProperties.LOB_FILES_PER_DIRECTORY;
  if (f > 0) {
    name=SysProperties.FILE_SEPARATOR + objectId;
  }
 else {
    name=""String_Node_Str"";
  }
  objectId/=SysProperties.LOB_FILES_PER_DIRECTORY;
  while (objectId > 0) {
    f=objectId % SysProperties.LOB_FILES_PER_DIRECTORY;
    name=SysProperties.FILE_SEPARATOR + f + Constants.SUFFIX_LOBS_DIRECTORY+ name;
    objectId/=SysProperties.LOB_FILES_PER_DIRECTORY;
  }
  name=FileUtils.toRealPath(path + Constants.SUFFIX_LOBS_DIRECTORY + name);
  return name;
}",0.9910204081632652
15991,"public static synchronized void deleteFile(DataHandler handler,String fileName){
synchronized (handler.getLobSyncObject()) {
    FileUtils.delete(fileName);
  }
}","private static synchronized void deleteFile(DataHandler handler,String fileName){
synchronized (handler.getLobSyncObject()) {
    FileUtils.delete(fileName);
  }
}",0.9723076923076924
15992,"public void unlink(){
  if (linked && fileName != null) {
    String temp;
synchronized (handler) {
      temp=getFileName(handler,-1,objectId);
      deleteFile(handler,temp);
      renameFile(handler,fileName,temp);
      tempFile=FileStore.open(handler,temp,""String_Node_Str"");
      tempFile.autoDelete();
      tempFile.closeSilently();
      fileName=temp;
      linked=false;
    }
  }
}","@Override public void unlink(DataHandler handler){
  if (linked && fileName != null) {
    String temp;
synchronized (handler) {
      temp=getFileName(handler,-1,objectId);
      deleteFile(handler,temp);
      renameFile(handler,fileName,temp);
      tempFile=FileStore.open(handler,temp,""String_Node_Str"");
      tempFile.autoDelete();
      tempFile.closeSilently();
      fileName=temp;
      linked=false;
    }
  }
}",0.9645042839657284
15993,"private void processClass(ClassDoc clazz) throws IOException {
  String packageName=clazz.containingPackage().name();
  String dir=destDir + ""String_Node_Str"" + packageName.replace('.','/');
  (new File(dir)).mkdirs();
  String fileName=dir + ""String_Node_Str"" + clazz.name()+ ""String_Node_Str"";
  String className=getClass(clazz);
  FileWriter out=new FileWriter(fileName);
  PrintWriter writer=new PrintWriter(new BufferedWriter(out));
  writer.println(""String_Node_Str"" + ""String_Node_Str"");
  String language=""String_Node_Str"";
  writer.println(""String_Node_Str"" + ""String_Node_Str"" + language + ""String_Node_Str""+ language+ ""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writer.println(className);
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"" + className + ""String_Node_Str"");
  writer.println(formatText(clazz.commentText()) + ""String_Node_Str"");
  ConstructorDoc[] constructors=clazz.constructors();
  MethodDoc[] methods=clazz.methods();
  ExecutableMemberDoc[] constructorsMethods=new ExecutableMemberDoc[constructors.length + methods.length];
  System.arraycopy(constructors,0,constructorsMethods,0,constructors.length);
  System.arraycopy(methods,0,constructorsMethods,constructors.length,methods.length);
  Arrays.sort(constructorsMethods,new Comparator<ExecutableMemberDoc>(){
    @Override public int compare(    ExecutableMemberDoc a,    ExecutableMemberDoc b){
      if (a.isStatic() != b.isStatic()) {
        return a.isStatic() ? -1 : 1;
      }
      return a.name().compareTo(b.name());
    }
  }
);
  ArrayList<String> signatures=new ArrayList<String>();
  boolean hasMethods=false;
  int id=0;
  for (int i=0; i < constructorsMethods.length; i++) {
    ExecutableMemberDoc method=constructorsMethods[i];
    String name=method.name();
    if (skipMethod(method)) {
      continue;
    }
    if (!hasMethods) {
      writer.println(""String_Node_Str"");
      hasMethods=true;
    }
    String type=getTypeName(method.isStatic(),false,getReturnType(method));
    writer.println(""String_Node_Str"" + id + ""String_Node_Str""+ id+ ""String_Node_Str"");
    writer.println(""String_Node_Str"" + type + ""String_Node_Str"");
    Parameter[] params=method.parameters();
    StringBuilder buff=new StringBuilder();
    StringBuilder buffSignature=new StringBuilder(name);
    buff.append('(');
    for (int j=0; j < params.length; j++) {
      if (j > 0) {
        buff.append(""String_Node_Str"");
      }
      buffSignature.append('_');
      Parameter param=params[j];
      boolean isVarArgs=method.isVarArgs() && j == params.length - 1;
      String typeName=getTypeName(false,isVarArgs,param.type());
      buff.append(typeName);
      buffSignature.append(StringUtils.replaceAll(typeName,""String_Node_Str"",""String_Node_Str""));
      buff.append(' ');
      buff.append(param.name());
    }
    buff.append(')');
    if (isDeprecated(method)) {
      name=""String_Node_Str"" + name + ""String_Node_Str"";
    }
    String signature=buffSignature.toString();
    while (signatures.size() < i) {
      signatures.add(null);
    }
    signatures.add(i,signature);
    writer.println(""String_Node_Str"" + signature + ""String_Node_Str""+ signature+ ""String_Node_Str""+ name+ ""String_Node_Str""+ buff.toString());
    String firstSentence=getFirstSentence(method.firstSentenceTags());
    if (firstSentence != null) {
      writer.println(""String_Node_Str"" + formatText(firstSentence) + ""String_Node_Str"");
    }
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"" + id + ""String_Node_Str""+ id+ ""String_Node_Str"");
    writer.println(""String_Node_Str"" + type + ""String_Node_Str"");
    writeMethodDetails(writer,clazz,method,signature);
    writer.println(""String_Node_Str"");
    id++;
  }
  if (hasMethods) {
    writer.println(""String_Node_Str"");
  }
  FieldDoc[] fields=clazz.fields();
  if (clazz.interfaces().length > 0) {
    fields=clazz.interfaces()[0].fields();
  }
  Arrays.sort(fields,new Comparator<FieldDoc>(){
    @Override public int compare(    FieldDoc a,    FieldDoc b){
      return a.name().compareTo(b.name());
    }
  }
);
  int fieldId=0;
  for (  FieldDoc field : fields) {
    if (skipField(clazz,field)) {
      continue;
    }
    String name=field.name();
    String text=field.commentText();
    if (text == null || text.trim().length() == 0) {
      addError(""String_Node_Str"" + clazz.name() + ""String_Node_Str""+ field.position().line()+ ""String_Node_Str""+ name);
    }
    if (text != null && text.startsWith(""String_Node_Str"")) {
      continue;
    }
    if (fieldId == 0) {
      writer.println(""String_Node_Str"");
    }
    String type=getTypeName(true,false,field.type());
    writer.println(""String_Node_Str"" + type + ""String_Node_Str"");
    String constant=field.constantValueExpression();
    String link=getFieldLink(text,constant,clazz,name);
    writer.print(""String_Node_Str"" + link + ""String_Node_Str""+ name+ ""String_Node_Str"");
    if (constant == null) {
      writer.println();
    }
 else {
      writer.println(""String_Node_Str"" + constant);
    }
    writer.println(""String_Node_Str"");
    fieldId++;
  }
  if (fieldId > 0) {
    writer.println(""String_Node_Str"");
  }
  Arrays.sort(fields,new Comparator<FieldDoc>(){
    @Override public int compare(    FieldDoc a,    FieldDoc b){
      String ca=a.constantValueExpression();
      if (ca == null) {
        ca=a.name();
      }
      String cb=b.constantValueExpression();
      if (cb == null) {
        cb=b.name();
      }
      return ca.compareTo(cb);
    }
  }
);
  for (  FieldDoc field : fields) {
    writeFieldDetails(writer,clazz,field);
  }
  writer.println(""String_Node_Str"");
  writer.close();
  out.close();
}","private void processClass(ClassDoc clazz) throws IOException {
  String packageName=clazz.containingPackage().name();
  String dir=destDir + ""String_Node_Str"" + packageName.replace('.','/');
  (new File(dir)).mkdirs();
  String fileName=dir + ""String_Node_Str"" + clazz.name()+ ""String_Node_Str"";
  String className=getClass(clazz);
  FileWriter out=new FileWriter(fileName);
  PrintWriter writer=new PrintWriter(new BufferedWriter(out));
  writer.println(""String_Node_Str"" + ""String_Node_Str"");
  String language=""String_Node_Str"";
  writer.println(""String_Node_Str"" + ""String_Node_Str"" + language + ""String_Node_Str""+ language+ ""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writer.println(className);
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"" + className + ""String_Node_Str"");
  writer.println(formatText(clazz.commentText()) + ""String_Node_Str"");
  ConstructorDoc[] constructors=clazz.constructors();
  MethodDoc[] methods=clazz.methods();
  ExecutableMemberDoc[] constructorsMethods=new ExecutableMemberDoc[constructors.length + methods.length];
  System.arraycopy(constructors,0,constructorsMethods,0,constructors.length);
  System.arraycopy(methods,0,constructorsMethods,constructors.length,methods.length);
  Arrays.sort(constructorsMethods,new Comparator<ExecutableMemberDoc>(){
    @Override public int compare(    ExecutableMemberDoc a,    ExecutableMemberDoc b){
      if (a.isStatic() != b.isStatic()) {
        return a.isStatic() ? -1 : 1;
      }
      return a.name().compareTo(b.name());
    }
  }
);
  ArrayList<String> signatures=new ArrayList<String>();
  boolean hasMethods=false;
  int id=0;
  for (int i=0; i < constructorsMethods.length; i++) {
    ExecutableMemberDoc method=constructorsMethods[i];
    String name=method.name();
    if (skipMethod(method)) {
      continue;
    }
    if (!hasMethods) {
      writer.println(""String_Node_Str"");
      hasMethods=true;
    }
    String type=getTypeName(method.isStatic(),false,getReturnType(method));
    writer.println(""String_Node_Str"" + id + ""String_Node_Str""+ id+ ""String_Node_Str"");
    writer.println(""String_Node_Str"" + type + ""String_Node_Str"");
    Parameter[] params=method.parameters();
    StringBuilder buff=new StringBuilder();
    StringBuilder buffSignature=new StringBuilder(name);
    buff.append('(');
    for (int j=0; j < params.length; j++) {
      if (j > 0) {
        buff.append(""String_Node_Str"");
      }
      buffSignature.append('_');
      Parameter param=params[j];
      boolean isVarArgs=method.isVarArgs() && j == params.length - 1;
      String typeName=getTypeName(false,isVarArgs,param.type());
      buff.append(typeName);
      buffSignature.append(StringUtils.replaceAll(typeName,""String_Node_Str"",""String_Node_Str""));
      buff.append(' ');
      buff.append(param.name());
    }
    buff.append(')');
    if (isDeprecated(method)) {
      name=""String_Node_Str"" + name + ""String_Node_Str"";
    }
    String signature=buffSignature.toString();
    while (signatures.size() < i) {
      signatures.add(null);
    }
    signatures.add(i,signature);
    writer.println(""String_Node_Str"" + signature + ""String_Node_Str""+ signature+ ""String_Node_Str""+ name+ ""String_Node_Str""+ buff.toString());
    String firstSentence=getFirstSentence(method.firstSentenceTags());
    if (firstSentence != null) {
      writer.println(""String_Node_Str"" + formatText(firstSentence) + ""String_Node_Str"");
    }
    writer.println(""String_Node_Str"");
    writer.println(""String_Node_Str"" + id + ""String_Node_Str""+ id+ ""String_Node_Str"");
    writer.println(""String_Node_Str"" + type + ""String_Node_Str"");
    writeMethodDetails(writer,clazz,method,signature);
    writer.println(""String_Node_Str"");
    id++;
  }
  if (hasMethods) {
    writer.println(""String_Node_Str"");
  }
  FieldDoc[] fields=clazz.fields();
  if (clazz.interfaces().length > 0) {
    fields=clazz.interfaces()[0].fields();
  }
  Arrays.sort(fields,new Comparator<FieldDoc>(){
    @Override public int compare(    FieldDoc a,    FieldDoc b){
      return a.name().compareTo(b.name());
    }
  }
);
  int fieldId=0;
  for (  FieldDoc field : fields) {
    if (skipField(clazz,field)) {
      continue;
    }
    String name=field.name();
    String text=field.commentText();
    if (text == null || text.trim().length() == 0) {
      addError(""String_Node_Str"" + getLink(clazz,field.position().line()) + ""String_Node_Str""+ name);
    }
    if (text != null && text.startsWith(""String_Node_Str"")) {
      continue;
    }
    if (fieldId == 0) {
      writer.println(""String_Node_Str"");
    }
    String type=getTypeName(true,false,field.type());
    writer.println(""String_Node_Str"" + type + ""String_Node_Str"");
    String constant=field.constantValueExpression();
    String link=getFieldLink(text,constant,clazz,name);
    writer.print(""String_Node_Str"" + link + ""String_Node_Str""+ name+ ""String_Node_Str"");
    if (constant == null) {
      writer.println();
    }
 else {
      writer.println(""String_Node_Str"" + constant);
    }
    writer.println(""String_Node_Str"");
    fieldId++;
  }
  if (fieldId > 0) {
    writer.println(""String_Node_Str"");
  }
  Arrays.sort(fields,new Comparator<FieldDoc>(){
    @Override public int compare(    FieldDoc a,    FieldDoc b){
      String ca=a.constantValueExpression();
      if (ca == null) {
        ca=a.name();
      }
      String cb=b.constantValueExpression();
      if (cb == null) {
        cb=b.name();
      }
      return ca.compareTo(cb);
    }
  }
);
  for (  FieldDoc field : fields) {
    writeFieldDetails(writer,clazz,field);
  }
  writer.println(""String_Node_Str"");
  writer.close();
  out.close();
}",0.9222529371112648
15994,"private boolean skipMethod(ExecutableMemberDoc method){
  ClassDoc clazz=method.containingClass();
  boolean isAbstract=method instanceof MethodDoc && ((MethodDoc)method).isAbstract();
  boolean isInterface=clazz.isInterface() || (clazz.isAbstract() && isAbstract);
  if (INTERFACES_ONLY && !isInterface) {
    return true;
  }
  String name=method.name();
  if (method.isPrivate() || name.equals(""String_Node_Str"")) {
    return true;
  }
  if (method.isConstructor() && method.getRawCommentText().trim().length() == 0) {
    return true;
  }
  if (method.getRawCommentText().trim().startsWith(""String_Node_Str"")) {
    return true;
  }
  String firstSentence=getFirstSentence(method.firstSentenceTags());
  String raw=method.getRawCommentText();
  if (firstSentence != null && firstSentence.startsWith(""String_Node_Str"")) {
    return true;
  }
  if ((firstSentence == null || firstSentence.trim().length() == 0) && raw.indexOf(""String_Node_Str"") < 0) {
    if (!doesOverride(method)) {
      boolean setterOrGetter=name.startsWith(""String_Node_Str"") && method.parameters().length == 1;
      setterOrGetter|=name.startsWith(""String_Node_Str"") && method.parameters().length == 0;
      Type returnType=getReturnType(method);
      setterOrGetter|=name.startsWith(""String_Node_Str"") && method.parameters().length == 0 && returnType != null && returnType.toString().equals(""String_Node_Str"");
      if (!setterOrGetter) {
        addError(""String_Node_Str"" + ""String_Node_Str"" + clazz.name() + ""String_Node_Str""+ method.position().line()+ ""String_Node_Str""+ clazz+ ""String_Node_Str""+ name+ ""String_Node_Str""+ raw);
        return true;
      }
    }
  }
  return false;
}","private boolean skipMethod(ExecutableMemberDoc method){
  ClassDoc clazz=method.containingClass();
  boolean isAbstract=method instanceof MethodDoc && ((MethodDoc)method).isAbstract();
  boolean isInterface=clazz.isInterface() || (clazz.isAbstract() && isAbstract);
  if (INTERFACES_ONLY && !isInterface) {
    return true;
  }
  String name=method.name();
  if (method.isPrivate() || name.equals(""String_Node_Str"")) {
    return true;
  }
  if (method.isConstructor() && method.getRawCommentText().trim().length() == 0) {
    return true;
  }
  if (method.getRawCommentText().trim().startsWith(""String_Node_Str"")) {
    return true;
  }
  String firstSentence=getFirstSentence(method.firstSentenceTags());
  String raw=method.getRawCommentText();
  if (firstSentence != null && firstSentence.startsWith(""String_Node_Str"")) {
    return true;
  }
  if ((firstSentence == null || firstSentence.trim().length() == 0) && raw.indexOf(""String_Node_Str"") < 0) {
    if (!doesOverride(method)) {
      boolean setterOrGetter=name.startsWith(""String_Node_Str"") && method.parameters().length == 1;
      setterOrGetter|=name.startsWith(""String_Node_Str"") && method.parameters().length == 0;
      Type returnType=getReturnType(method);
      setterOrGetter|=name.startsWith(""String_Node_Str"") && method.parameters().length == 0 && returnType != null && returnType.toString().equals(""String_Node_Str"");
      if (!setterOrGetter) {
        addError(""String_Node_Str"" + ""String_Node_Str"" + getLink(clazz,method.position().line()) + ""String_Node_Str""+ clazz+ ""String_Node_Str""+ name+ ""String_Node_Str""+ raw);
        return true;
      }
    }
  }
  return false;
}",0.9879663056558364
15995,"private void writeMethodDetails(PrintWriter writer,ClassDoc clazz,ExecutableMemberDoc method,String signature){
  String name=method.name();
  if (skipMethod(method)) {
    return;
  }
  Parameter[] params=method.parameters();
  StatementBuilder buff=new StatementBuilder();
  buff.append('(');
  int i=0;
  for (  Parameter p : params) {
    boolean isVarArgs=method.isVarArgs() && i++ == params.length - 1;
    buff.appendExceptFirst(""String_Node_Str"");
    buff.append(getTypeName(false,isVarArgs,p.type()));
    buff.append(' ');
    buff.append(p.name());
  }
  buff.append(')');
  ClassDoc[] exceptions=method.thrownExceptions();
  if (exceptions.length > 0) {
    buff.append(""String_Node_Str"");
    buff.resetCount();
    for (    ClassDoc ex : exceptions) {
      buff.appendExceptFirst(""String_Node_Str"");
      buff.append(ex.typeName());
    }
  }
  if (isDeprecated(method)) {
    name=""String_Node_Str"" + name + ""String_Node_Str"";
  }
  writer.println(""String_Node_Str"" + signature + ""String_Node_Str""+ signature+ ""String_Node_Str""+ name+ ""String_Node_Str""+ buff.toString());
  boolean hasComment=method.commentText() != null && method.commentText().trim().length() != 0;
  writer.println(""String_Node_Str"" + formatText(method.commentText()) + ""String_Node_Str"");
  ParamTag[] paramTags=method.paramTags();
  ThrowsTag[] throwsTags=method.throwsTags();
  boolean hasThrowsTag=throwsTags != null && throwsTags.length > 0;
  if (paramTags.length != params.length) {
    if (hasComment && !method.commentText().startsWith(""String_Node_Str"")) {
      addError(""String_Node_Str"" + clazz.name() + ""String_Node_Str""+ method.position().line()+ ""String_Node_Str""+ name+ ""String_Node_Str""+ paramTags.length+ ""String_Node_Str""+ params.length);
    }
  }
  for (int j=0; j < paramTags.length; j++) {
    String paramName=paramTags[j].parameterName();
    String comment=paramTags[j].parameterComment();
    if (comment.trim().length() == 0) {
      addError(""String_Node_Str"" + clazz.name() + ""String_Node_Str""+ method.position().line()+ ""String_Node_Str""+ name+ ""String_Node_Str""+ paramName);
    }
    String p=paramName + ""String_Node_Str"" + comment;
    if (j == 0) {
      writer.println(""String_Node_Str"");
    }
    writer.println(""String_Node_Str"" + p + ""String_Node_Str"");
  }
  Tag[] returnTags=method.tags(""String_Node_Str"");
  Type returnType=getReturnType(method);
  if (returnTags != null && returnTags.length > 0) {
    writer.println(""String_Node_Str"");
    String returnComment=returnTags[0].text();
    if (returnComment.trim().length() == 0) {
      addError(""String_Node_Str"" + clazz.name() + ""String_Node_Str""+ method.position().line()+ ""String_Node_Str""+ name);
    }
    writer.println(""String_Node_Str"" + returnComment + ""String_Node_Str"");
  }
 else   if (returnType != null && !returnType.toString().equals(""String_Node_Str"")) {
    if (hasComment && !method.commentText().startsWith(""String_Node_Str"") && !hasThrowsTag) {
      addError(""String_Node_Str"" + clazz.name() + ""String_Node_Str""+ method.position().line()+ ""String_Node_Str""+ name+ ""String_Node_Str""+ getReturnType(method));
    }
  }
  if (hasThrowsTag) {
    writer.println(""String_Node_Str"");
    for (    ThrowsTag tag : throwsTags) {
      String p=tag.exceptionName();
      String c=tag.exceptionComment();
      if (c.length() > 0) {
        p+=""String_Node_Str"" + c;
      }
      writer.println(""String_Node_Str"" + p + ""String_Node_Str"");
    }
  }
}","private void writeMethodDetails(PrintWriter writer,ClassDoc clazz,ExecutableMemberDoc method,String signature){
  String name=method.name();
  if (skipMethod(method)) {
    return;
  }
  Parameter[] params=method.parameters();
  StatementBuilder buff=new StatementBuilder();
  buff.append('(');
  int i=0;
  for (  Parameter p : params) {
    boolean isVarArgs=method.isVarArgs() && i++ == params.length - 1;
    buff.appendExceptFirst(""String_Node_Str"");
    buff.append(getTypeName(false,isVarArgs,p.type()));
    buff.append(' ');
    buff.append(p.name());
  }
  buff.append(')');
  ClassDoc[] exceptions=method.thrownExceptions();
  if (exceptions.length > 0) {
    buff.append(""String_Node_Str"");
    buff.resetCount();
    for (    ClassDoc ex : exceptions) {
      buff.appendExceptFirst(""String_Node_Str"");
      buff.append(ex.typeName());
    }
  }
  if (isDeprecated(method)) {
    name=""String_Node_Str"" + name + ""String_Node_Str"";
  }
  writer.println(""String_Node_Str"" + signature + ""String_Node_Str""+ signature+ ""String_Node_Str""+ name+ ""String_Node_Str""+ buff.toString());
  boolean hasComment=method.commentText() != null && method.commentText().trim().length() != 0;
  writer.println(""String_Node_Str"" + formatText(method.commentText()) + ""String_Node_Str"");
  ParamTag[] paramTags=method.paramTags();
  ThrowsTag[] throwsTags=method.throwsTags();
  boolean hasThrowsTag=throwsTags != null && throwsTags.length > 0;
  if (paramTags.length != params.length) {
    if (hasComment && !method.commentText().startsWith(""String_Node_Str"")) {
      addError(""String_Node_Str"" + getLink(clazz,method.position().line()) + ""String_Node_Str""+ name+ ""String_Node_Str""+ paramTags.length+ ""String_Node_Str""+ params.length);
    }
  }
  for (int j=0; j < paramTags.length; j++) {
    String paramName=paramTags[j].parameterName();
    String comment=paramTags[j].parameterComment();
    if (comment.trim().length() == 0) {
      addError(""String_Node_Str"" + getLink(clazz,method.position().line()) + ""String_Node_Str""+ name+ ""String_Node_Str""+ paramName);
    }
    String p=paramName + ""String_Node_Str"" + comment;
    if (j == 0) {
      writer.println(""String_Node_Str"");
    }
    writer.println(""String_Node_Str"" + p + ""String_Node_Str"");
  }
  Tag[] returnTags=method.tags(""String_Node_Str"");
  Type returnType=getReturnType(method);
  if (returnTags != null && returnTags.length > 0) {
    writer.println(""String_Node_Str"");
    String returnComment=returnTags[0].text();
    if (returnComment.trim().length() == 0) {
      addError(""String_Node_Str"" + getLink(clazz,method.position().line()) + ""String_Node_Str""+ name);
    }
    writer.println(""String_Node_Str"" + returnComment + ""String_Node_Str"");
  }
 else   if (returnType != null && !returnType.toString().equals(""String_Node_Str"")) {
    if (hasComment && !method.commentText().startsWith(""String_Node_Str"") && !hasThrowsTag) {
      addError(""String_Node_Str"" + getLink(clazz,method.position().line()) + ""String_Node_Str""+ name+ ""String_Node_Str""+ getReturnType(method));
    }
  }
  if (hasThrowsTag) {
    writer.println(""String_Node_Str"");
    for (    ThrowsTag tag : throwsTags) {
      String p=tag.exceptionName();
      String c=tag.exceptionComment();
      if (c.length() > 0) {
        p+=""String_Node_Str"" + c;
      }
      writer.println(""String_Node_Str"" + p + ""String_Node_Str"");
    }
  }
}",0.948432464107823
15996,"private void testTruncateReconnect() throws SQLException {
  if (config.memory) {
    return;
  }
  deleteDb(""String_Node_Str"");
  Connection conn;
  conn=getConnection(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn=getConnection(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn=getConnection(""String_Node_Str"");
  conn.close();
}","private void testTruncateReconnect() throws SQLException {
  if (config.memory) {
    return;
  }
  deleteDb(""String_Node_Str"");
  Connection conn;
  conn=getConnection(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  JdbcUtils.closeSilently(conn);
  conn=getConnection(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  JdbcUtils.closeSilently(conn);
  conn=getConnection(""String_Node_Str"");
  conn.close();
}",0.9523121387283237
15997,"private void testUpdateOverflow() throws SQLException {
  if (config.memory) {
    return;
  }
  deleteDb(""String_Node_Str"");
  Connection conn;
  conn=getConnection(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn=getConnection(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn=getConnection(""String_Node_Str"");
  conn.close();
}","private void testUpdateOverflow() throws SQLException {
  if (config.memory) {
    return;
  }
  deleteDb(""String_Node_Str"");
  Connection conn;
  conn=getConnection(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  JdbcUtils.closeSilently(conn);
  conn=getConnection(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  conn.createStatement().execute(""String_Node_Str"");
  JdbcUtils.closeSilently(conn);
  conn=getConnection(""String_Node_Str"");
  conn.close();
}",0.9481132075471698
15998,"private void testRecoverLobInDatabase() throws SQLException {
  deleteDb(""String_Node_Str"");
  String url=getURL(""String_Node_Str"",true);
  Connection conn;
  Statement stat;
  conn=getConnection(url,getUser(),getPassword());
  stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  Connection conn2;
  Statement stat2;
  Random r=new Random(1);
  ArrayList<Connection> list=New.arrayList();
  for (int i=0; i < 10; i++) {
    conn2=getConnection(url,getUser(),getPassword());
    list.add(conn2);
    stat2=conn.createStatement();
    conn2.setAutoCommit(false);
    if (r.nextBoolean()) {
      stat2.execute(""String_Node_Str"" + r.nextInt(100));
    }
 else {
      stat2.execute(""String_Node_Str"" + r.nextInt(100));
    }
  }
  stat.execute(""String_Node_Str"");
  try {
    conn.close();
  }
 catch (  SQLException e) {
  }
  conn=getConnection(url,getUser(),getPassword());
  conn.close();
}","private void testRecoverLobInDatabase() throws SQLException {
  deleteDb(""String_Node_Str"");
  String url=getURL(""String_Node_Str"",true);
  Connection conn;
  Statement stat;
  conn=getConnection(url,getUser(),getPassword());
  stat=conn.createStatement();
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  stat.execute(""String_Node_Str"");
  Random r=new Random(1);
  ArrayList<Connection> list=New.arrayList();
  for (int i=0; i < 10; i++) {
    Connection conn2=getConnection(url,getUser(),getPassword());
    list.add(conn2);
    Statement stat2=conn2.createStatement();
    conn2.setAutoCommit(false);
    if (r.nextBoolean()) {
      stat2.execute(""String_Node_Str"" + r.nextInt(100));
    }
 else {
      stat2.execute(""String_Node_Str"" + r.nextInt(100));
    }
  }
  stat.execute(""String_Node_Str"");
  JdbcUtils.closeSilently(conn);
  for (  Connection c : list) {
    JdbcUtils.closeSilently(c);
  }
  conn=getConnection(url,getUser(),getPassword());
  conn.close();
}",0.8367139959432048
15999,"/** 
 * Returns whether this result set has been closed.
 * @return true if the result set was closed
 */
public boolean isClosed(){
  return rows == null;
}","/** 
 * Returns whether this result set has been closed.
 * @return true if the result set was closed
 */
public boolean isClosed(){
  return rows == null && source == null;
}",0.9457831325301204
16000,"/** 
 * Remove a map.
 * @param name the map name
 */
void removeMap(String name){
  MVMap<?,?> m=maps.remove(name);
  mapsChanged.remove(m);
}","/** 
 * Remove a map.
 * @param name the map name
 */
void removeMap(String name){
  MVMap<?,?> map=maps.remove(name);
  mapsChanged.remove(map.getId());
}",0.959731543624161
